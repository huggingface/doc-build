import{S as Fd,i as Dd,s as Ld,e as r,k as h,w as v,t as i,M as Ad,c as n,d as o,m as f,a,x as T,h as l,b as d,G as e,g as _,y as $,q as O,o as x,B as V,v as Wd,L as je}from"../../chunks/vendor-hf-doc-builder.js";import{T as Tt}from"../../chunks/Tip-hf-doc-builder.js";import{D as k}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Q}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as X}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Ve}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Nd(j){let c,b,g,m,w;return m=new Q({props:{code:`from transformers import OwlViTTextConfig, OwlViTTextModel

# Initializing a OwlViTTextModel with google/owlvit-base-patch32 style configuration
configuration = OwlViTTextConfig()

# Initializing a OwlViTTextConfig from the google/owlvit-base-patch32 style configuration
model = OwlViTTextModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> OwlViTTextConfig, OwlViTTextModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a OwlViTTextModel with google/owlvit-base-patch32 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = OwlViTTextConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a OwlViTTextConfig from the google/owlvit-base-patch32 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = OwlViTTextModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){c=r("p"),b=i("Example:"),g=h(),v(m.$$.fragment)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Example:"),p.forEach(o),g=f(s),T(m.$$.fragment,s)},m(s,p){_(s,c,p),e(c,b),_(s,g,p),$(m,s,p),w=!0},p:je,i(s){w||(O(m.$$.fragment,s),w=!0)},o(s){x(m.$$.fragment,s),w=!1},d(s){s&&o(c),s&&o(g),V(m,s)}}}function Sd(j){let c,b,g,m,w;return m=new Q({props:{code:`from transformers import OwlViTVisionConfig, OwlViTVisionModel

# Initializing a OwlViTVisionModel with google/owlvit-base-patch32 style configuration
configuration = OwlViTVisionConfig()

# Initializing a OwlViTVisionModel model from the google/owlvit-base-patch32 style configuration
model = OwlViTVisionModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> OwlViTVisionConfig, OwlViTVisionModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a OwlViTVisionModel with google/owlvit-base-patch32 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = OwlViTVisionConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a OwlViTVisionModel model from the google/owlvit-base-patch32 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = OwlViTVisionModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){c=r("p"),b=i("Example:"),g=h(),v(m.$$.fragment)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Example:"),p.forEach(o),g=f(s),T(m.$$.fragment,s)},m(s,p){_(s,c,p),e(c,b),_(s,g,p),$(m,s,p),w=!0},p:je,i(s){w||(O(m.$$.fragment,s),w=!0)},o(s){x(m.$$.fragment,s),w=!1},d(s){s&&o(c),s&&o(g),V(m,s)}}}function Bd(j){let c,b;return{c(){c=r("p"),b=i(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(g){c=n(g,"P",{});var m=a(c);b=l(m,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),m.forEach(o)},m(g,m){_(g,c,m),e(c,b)},d(g){g&&o(c)}}}function Rd(j){let c,b,g,m,w;return{c(){c=r("p"),b=i("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),m=i("Module"),w=i(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(p,"CODE",{});var y=a(g);m=l(y,"Module"),y.forEach(o),w=l(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(o)},m(s,p){_(s,c,p),e(c,b),e(c,g),e(g,m),e(c,w)},d(s){s&&o(c)}}}function Hd(j){let c,b,g,m,w;return m=new Q({props:{code:`from PIL import Image
import requests
from transformers import OwlViTProcessor, OwlViTModel

model = OwlViTModel.from_pretrained("google/owlvit-base-patch32")
processor = OwlViTProcessor.from_pretrained("google/owlvit-base-patch32")
url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)
inputs = processor(text=[["a photo of a cat", "a photo of a dog"]], images=image, return_tensors="pt")
outputs = model(**inputs)
logits_per_image = outputs.logits_per_image  # this is the image-text similarity score
probs = logits_per_image.softmax(dim=1)  # we can take the softmax to get the label probabilities`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> OwlViTProcessor, OwlViTModel

<span class="hljs-meta">&gt;&gt;&gt; </span>model = OwlViTModel.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = OwlViTProcessor.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(text=[[<span class="hljs-string">&quot;a photo of a cat&quot;</span>, <span class="hljs-string">&quot;a photo of a dog&quot;</span>]], images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits_per_image = outputs.logits_per_image  <span class="hljs-comment"># this is the image-text similarity score</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>probs = logits_per_image.softmax(dim=<span class="hljs-number">1</span>)  <span class="hljs-comment"># we can take the softmax to get the label probabilities</span>`}}),{c(){c=r("p"),b=i("Examples:"),g=h(),v(m.$$.fragment)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Examples:"),p.forEach(o),g=f(s),T(m.$$.fragment,s)},m(s,p){_(s,c,p),e(c,b),_(s,g,p),$(m,s,p),w=!0},p:je,i(s){w||(O(m.$$.fragment,s),w=!0)},o(s){x(m.$$.fragment,s),w=!1},d(s){s&&o(c),s&&o(g),V(m,s)}}}function Ud(j){let c,b,g,m,w;return{c(){c=r("p"),b=i("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),m=i("Module"),w=i(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(p,"CODE",{});var y=a(g);m=l(y,"Module"),y.forEach(o),w=l(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(o)},m(s,p){_(s,c,p),e(c,b),e(c,g),e(g,m),e(c,w)},d(s){s&&o(c)}}}function Gd(j){let c,b,g,m,w;return m=new Q({props:{code:`from transformers import OwlViTProcessor, OwlViTModel

model = OwlViTModel.from_pretrained("google/owlvit-base-patch32")
processor = OwlViTProcessor.from_pretrained("google/owlvit-base-patch32")
inputs = processor(
    text=[["a photo of a cat", "a photo of a dog"], ["photo of a astranaut"]], return_tensors="pt"
)
text_features = model.get_text_features(**inputs)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> OwlViTProcessor, OwlViTModel

<span class="hljs-meta">&gt;&gt;&gt; </span>model = OwlViTModel.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = OwlViTProcessor.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(
<span class="hljs-meta">... </span>    text=[[<span class="hljs-string">&quot;a photo of a cat&quot;</span>, <span class="hljs-string">&quot;a photo of a dog&quot;</span>], [<span class="hljs-string">&quot;photo of a astranaut&quot;</span>]], return_tensors=<span class="hljs-string">&quot;pt&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>text_features = model.get_text_features(**inputs)`}}),{c(){c=r("p"),b=i("Examples:"),g=h(),v(m.$$.fragment)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Examples:"),p.forEach(o),g=f(s),T(m.$$.fragment,s)},m(s,p){_(s,c,p),e(c,b),_(s,g,p),$(m,s,p),w=!0},p:je,i(s){w||(O(m.$$.fragment,s),w=!0)},o(s){x(m.$$.fragment,s),w=!1},d(s){s&&o(c),s&&o(g),V(m,s)}}}function Xd(j){let c,b,g,m,w;return{c(){c=r("p"),b=i("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),m=i("Module"),w=i(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(p,"CODE",{});var y=a(g);m=l(y,"Module"),y.forEach(o),w=l(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(o)},m(s,p){_(s,c,p),e(c,b),e(c,g),e(g,m),e(c,w)},d(s){s&&o(c)}}}function Zd(j){let c,b,g,m,w;return m=new Q({props:{code:`from PIL import Image
import requests
from transformers import OwlViTProcessor, OwlViTModel

model = OwlViTModel.from_pretrained("google/owlvit-base-patch32")
processor = OwlViTProcessor.from_pretrained("google/owlvit-base-patch32")
url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)
inputs = processor(images=image, return_tensors="pt")
image_features = model.get_image_features(**inputs)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> OwlViTProcessor, OwlViTModel

<span class="hljs-meta">&gt;&gt;&gt; </span>model = OwlViTModel.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = OwlViTProcessor.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image_features = model.get_image_features(**inputs)`}}),{c(){c=r("p"),b=i("Examples:"),g=h(),v(m.$$.fragment)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Examples:"),p.forEach(o),g=f(s),T(m.$$.fragment,s)},m(s,p){_(s,c,p),e(c,b),_(s,g,p),$(m,s,p),w=!0},p:je,i(s){w||(O(m.$$.fragment,s),w=!0)},o(s){x(m.$$.fragment,s),w=!1},d(s){s&&o(c),s&&o(g),V(m,s)}}}function Yd(j){let c,b,g,m,w;return{c(){c=r("p"),b=i("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),m=i("Module"),w=i(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(p,"CODE",{});var y=a(g);m=l(y,"Module"),y.forEach(o),w=l(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(o)},m(s,p){_(s,c,p),e(c,b),e(c,g),e(g,m),e(c,w)},d(s){s&&o(c)}}}function Jd(j){let c,b,g,m,w;return m=new Q({props:{code:`from transformers import OwlViTProcessor, OwlViTTextModel

model = OwlViTTextModel.from_pretrained("google/owlvit-base-patch32")
processor = OwlViTProcessor.from_pretrained("google/owlvit-base-patch32")
inputs = processor(
    text=[["a photo of a cat", "a photo of a dog"], ["photo of a astranaut"]], return_tensors="pt"
)
outputs = model(**inputs)
last_hidden_state = outputs.last_hidden_state
pooled_output = outputs.pooler_output  # pooled (EOS token) states`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> OwlViTProcessor, OwlViTTextModel

<span class="hljs-meta">&gt;&gt;&gt; </span>model = OwlViTTextModel.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = OwlViTProcessor.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(
<span class="hljs-meta">... </span>    text=[[<span class="hljs-string">&quot;a photo of a cat&quot;</span>, <span class="hljs-string">&quot;a photo of a dog&quot;</span>], [<span class="hljs-string">&quot;photo of a astranaut&quot;</span>]], return_tensors=<span class="hljs-string">&quot;pt&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_state = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span>pooled_output = outputs.pooler_output  <span class="hljs-comment"># pooled (EOS token) states</span>`}}),{c(){c=r("p"),b=i("Examples:"),g=h(),v(m.$$.fragment)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Examples:"),p.forEach(o),g=f(s),T(m.$$.fragment,s)},m(s,p){_(s,c,p),e(c,b),_(s,g,p),$(m,s,p),w=!0},p:je,i(s){w||(O(m.$$.fragment,s),w=!0)},o(s){x(m.$$.fragment,s),w=!1},d(s){s&&o(c),s&&o(g),V(m,s)}}}function Kd(j){let c,b,g,m,w;return{c(){c=r("p"),b=i("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),m=i("Module"),w=i(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(p,"CODE",{});var y=a(g);m=l(y,"Module"),y.forEach(o),w=l(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(o)},m(s,p){_(s,c,p),e(c,b),e(c,g),e(g,m),e(c,w)},d(s){s&&o(c)}}}function Qd(j){let c,b,g,m,w;return m=new Q({props:{code:`from PIL import Image
import requests
from transformers import OwlViTProcessor, OwlViTVisionModel

model = OwlViTVisionModel.from_pretrained("google/owlvit-base-patch32")
processor = OwlViTProcessor.from_pretrained("google/owlvit-base-patch32")
url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

inputs = processor(images=image, return_tensors="pt")

outputs = model(**inputs)
last_hidden_state = outputs.last_hidden_state
pooled_output = outputs.pooler_output  # pooled CLS states`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> OwlViTProcessor, OwlViTVisionModel

<span class="hljs-meta">&gt;&gt;&gt; </span>model = OwlViTVisionModel.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = OwlViTProcessor.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_state = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span>pooled_output = outputs.pooler_output  <span class="hljs-comment"># pooled CLS states</span>`}}),{c(){c=r("p"),b=i("Examples:"),g=h(),v(m.$$.fragment)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Examples:"),p.forEach(o),g=f(s),T(m.$$.fragment,s)},m(s,p){_(s,c,p),e(c,b),_(s,g,p),$(m,s,p),w=!0},p:je,i(s){w||(O(m.$$.fragment,s),w=!0)},o(s){x(m.$$.fragment,s),w=!1},d(s){s&&o(c),s&&o(g),V(m,s)}}}function ep(j){let c,b,g,m,w;return{c(){c=r("p"),b=i("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),m=i("Module"),w=i(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(p,"CODE",{});var y=a(g);m=l(y,"Module"),y.forEach(o),w=l(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(o)},m(s,p){_(s,c,p),e(c,b),e(c,g),e(g,m),e(c,w)},d(s){s&&o(c)}}}function tp(j){let c,b,g,m,w;return m=new Q({props:{code:`import requests
from PIL import Image
import torch
from transformers import OwlViTProcessor, OwlViTForObjectDetection

processor = OwlViTProcessor.from_pretrained("google/owlvit-base-patch32")
model = OwlViTForObjectDetection.from_pretrained("google/owlvit-base-patch32")

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)
texts = [["a photo of a cat", "a photo of a dog"]]
inputs = processor(text=texts, images=image, return_tensors="pt")
outputs = model(**inputs)

# Target image sizes (height, width) to rescale box predictions [batch_size, 2]
target_sizes = torch.Tensor([image.size[::-1]])
# Convert outputs (bounding boxes and class logits) to COCO API
results = processor.post_process(outputs=outputs, target_sizes=target_sizes)

i = 0  # Retrieve predictions for the first image for the corresponding text queries
text = texts[i]
boxes, scores, labels = results[i]["boxes"], results[i]["scores"], results[i]["labels"]

score_threshold = 0.1
for box, score, label in zip(boxes, scores, labels):
    box = [round(i, 2) for i in box.tolist()]
    if score >= score_threshold:
        print(f"Detected {text[label]} with confidence {round(score.item(), 3)} at location {box}")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> OwlViTProcessor, OwlViTForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span>processor = OwlViTProcessor.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = OwlViTForObjectDetection.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)
<span class="hljs-meta">&gt;&gt;&gt; </span>texts = [[<span class="hljs-string">&quot;a photo of a cat&quot;</span>, <span class="hljs-string">&quot;a photo of a dog&quot;</span>]]
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(text=texts, images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Target image sizes (height, width) to rescale box predictions [batch_size, 2]</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>target_sizes = torch.Tensor([image.size[::-<span class="hljs-number">1</span>]])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Convert outputs (bounding boxes and class logits) to COCO API</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>results = processor.post_process(outputs=outputs, target_sizes=target_sizes)

<span class="hljs-meta">&gt;&gt;&gt; </span>i = <span class="hljs-number">0</span>  <span class="hljs-comment"># Retrieve predictions for the first image for the corresponding text queries</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>text = texts[i]
<span class="hljs-meta">&gt;&gt;&gt; </span>boxes, scores, labels = results[i][<span class="hljs-string">&quot;boxes&quot;</span>], results[i][<span class="hljs-string">&quot;scores&quot;</span>], results[i][<span class="hljs-string">&quot;labels&quot;</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>score_threshold = <span class="hljs-number">0.1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> box, score, label <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(boxes, scores, labels):
<span class="hljs-meta">... </span>    box = [<span class="hljs-built_in">round</span>(i, <span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> box.tolist()]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> score &gt;= score_threshold:
<span class="hljs-meta">... </span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Detected <span class="hljs-subst">{text[label]}</span> with confidence <span class="hljs-subst">{<span class="hljs-built_in">round</span>(score.item(), <span class="hljs-number">3</span>)}</span> at location <span class="hljs-subst">{box}</span>&quot;</span>)
Detected a photo of a cat <span class="hljs-keyword">with</span> confidence <span class="hljs-number">0.707</span> at location [<span class="hljs-number">324.97</span>, <span class="hljs-number">20.44</span>, <span class="hljs-number">640.58</span>, <span class="hljs-number">373.29</span>]
Detected a photo of a cat <span class="hljs-keyword">with</span> confidence <span class="hljs-number">0.717</span> at location [<span class="hljs-number">1.46</span>, <span class="hljs-number">55.26</span>, <span class="hljs-number">315.55</span>, <span class="hljs-number">472.17</span>]`}}),{c(){c=r("p"),b=i("Examples:"),g=h(),v(m.$$.fragment)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Examples:"),p.forEach(o),g=f(s),T(m.$$.fragment,s)},m(s,p){_(s,c,p),e(c,b),_(s,g,p),$(m,s,p),w=!0},p:je,i(s){w||(O(m.$$.fragment,s),w=!0)},o(s){x(m.$$.fragment,s),w=!1},d(s){s&&o(c),s&&o(g),V(m,s)}}}function op(j){let c,b,g,m,w;return{c(){c=r("p"),b=i("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),m=i("Module"),w=i(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(p,"CODE",{});var y=a(g);m=l(y,"Module"),y.forEach(o),w=l(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(o)},m(s,p){_(s,c,p),e(c,b),e(c,g),e(g,m),e(c,w)},d(s){s&&o(c)}}}function sp(j){let c,b,g,m,w;return m=new Q({props:{code:`import requests
from PIL import Image
import torch
from transformers import OwlViTProcessor, OwlViTForObjectDetection

processor = OwlViTProcessor.from_pretrained("google/owlvit-base-patch16")
model = OwlViTForObjectDetection.from_pretrained("google/owlvit-base-patch16")
url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)
query_url = "http://images.cocodataset.org/val2017/000000001675.jpg"
query_image = Image.open(requests.get(query_url, stream=True).raw)
inputs = processor(images=image, query_images=query_image, return_tensors="pt")
with torch.no_grad():
    outputs = model.image_guided_detection(**inputs)
# Target image sizes (height, width) to rescale box predictions [batch_size, 2]
target_sizes = torch.Tensor([image.size[::-1]])
# Convert outputs (bounding boxes and class logits) to COCO API
results = processor.post_process_image_guided_detection(
    outputs=outputs, threshold=0.6, nms_threshold=0.3, target_sizes=target_sizes
)
i = 0  # Retrieve predictions for the first image
boxes, scores = results[i]["boxes"], results[i]["scores"]
for box, score in zip(boxes, scores):
    box = [round(i, 2) for i in box.tolist()]
    print(f"Detected similar object with confidence {round(score.item(), 3)} at location {box}")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> OwlViTProcessor, OwlViTForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span>processor = OwlViTProcessor.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch16&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = OwlViTForObjectDetection.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch16&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)
<span class="hljs-meta">&gt;&gt;&gt; </span>query_url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000001675.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>query_image = Image.<span class="hljs-built_in">open</span>(requests.get(query_url, stream=<span class="hljs-literal">True</span>).raw)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(images=image, query_images=query_image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model.image_guided_detection(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Target image sizes (height, width) to rescale box predictions [batch_size, 2]</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>target_sizes = torch.Tensor([image.size[::-<span class="hljs-number">1</span>]])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Convert outputs (bounding boxes and class logits) to COCO API</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>results = processor.post_process_image_guided_detection(
<span class="hljs-meta">... </span>    outputs=outputs, threshold=<span class="hljs-number">0.6</span>, nms_threshold=<span class="hljs-number">0.3</span>, target_sizes=target_sizes
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>i = <span class="hljs-number">0</span>  <span class="hljs-comment"># Retrieve predictions for the first image</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>boxes, scores = results[i][<span class="hljs-string">&quot;boxes&quot;</span>], results[i][<span class="hljs-string">&quot;scores&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> box, score <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(boxes, scores):
<span class="hljs-meta">... </span>    box = [<span class="hljs-built_in">round</span>(i, <span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> box.tolist()]
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Detected similar object with confidence <span class="hljs-subst">{<span class="hljs-built_in">round</span>(score.item(), <span class="hljs-number">3</span>)}</span> at location <span class="hljs-subst">{box}</span>&quot;</span>)
Detected similar <span class="hljs-built_in">object</span> <span class="hljs-keyword">with</span> confidence <span class="hljs-number">0.782</span> at location [-<span class="hljs-number">0.06</span>, -<span class="hljs-number">1.52</span>, <span class="hljs-number">637.96</span>, <span class="hljs-number">271.16</span>]
Detected similar <span class="hljs-built_in">object</span> <span class="hljs-keyword">with</span> confidence <span class="hljs-number">1.0</span> at location [<span class="hljs-number">39.64</span>, <span class="hljs-number">71.61</span>, <span class="hljs-number">176.21</span>, <span class="hljs-number">117.15</span>]`}}),{c(){c=r("p"),b=i("Examples:"),g=h(),v(m.$$.fragment)},l(s){c=n(s,"P",{});var p=a(c);b=l(p,"Examples:"),p.forEach(o),g=f(s),T(m.$$.fragment,s)},m(s,p){_(s,c,p),e(c,b),_(s,g,p),$(m,s,p),w=!0},p:je,i(s){w||(O(m.$$.fragment,s),w=!0)},o(s){x(m.$$.fragment,s),w=!1},d(s){s&&o(c),s&&o(g),V(m,s)}}}function rp(j){let c,b,g,m,w,s,p,y,wn,ur,ee,ye,Os,$t,bn,xs,vn,_r,ke,Tn,Ot,$n,On,wr,xo,xn,br,Vo,Vs,Vn,vr,te,ze,js,xt,jn,ys,yn,Tr,Ee,kn,jo,zn,En,$r,z,yo,Pn,qn,ko,Mn,Cn,zo,In,Fn,Eo,Dn,Ln,Po,An,Wn,qo,Nn,Sn,Mo,Bn,Rn,Or,Vt,xr,Y,Hn,jt,Un,Gn,yt,Xn,Zn,Vr,oe,Pe,ks,kt,Yn,zs,Jn,jr,C,zt,Kn,J,Co,Qn,ea,Io,ta,oa,Et,sa,ra,na,se,aa,Fo,ia,la,Do,ca,da,pa,qe,Pt,ma,qt,ha,Lo,fa,ga,yr,re,Me,Es,Mt,ua,Ps,_a,kr,I,Ct,wa,ne,ba,Ao,va,Ta,It,$a,Oa,xa,ae,Va,Wo,ja,ya,No,ka,za,Ea,Ce,zr,ie,Ie,qs,Ft,Pa,Ms,qa,Er,F,Dt,Ma,le,Ca,So,Ia,Fa,Lt,Da,La,Aa,ce,Wa,Bo,Na,Sa,Ro,Ba,Ra,Ha,Fe,Pr,de,De,Cs,At,Ua,Is,Ga,qr,E,Wt,Xa,Fs,Za,Ya,Nt,Ja,Ho,Ka,Qa,ei,K,St,ti,Ds,oi,si,Le,ri,Ae,Bt,ni,Rt,ai,Uo,ii,li,ci,We,Ht,di,Ut,pi,Go,mi,hi,Mr,pe,Ne,Ls,Gt,fi,As,gi,Cr,P,Xt,ui,q,_i,Xo,wi,bi,Zo,vi,Ti,Yo,$i,Oi,Ws,xi,Vi,Jo,ji,yi,ki,Se,Zt,zi,Yt,Ei,Ko,Pi,qi,Mi,Be,Jt,Ci,Kt,Ii,Qo,Fi,Di,Li,Re,Qt,Ai,eo,Wi,es,Ni,Si,Bi,He,to,Ri,oo,Hi,Ns,Ui,Gi,Ir,me,Ue,Ss,so,Xi,Bs,Zi,Fr,D,ro,Yi,L,no,Ji,he,Ki,ts,Qi,el,Rs,tl,ol,sl,Ge,rl,Xe,nl,A,ao,al,fe,il,os,ll,cl,Hs,dl,pl,ml,Ze,hl,Ye,fl,W,io,gl,ge,ul,ss,_l,wl,Us,bl,vl,Tl,Je,$l,Ke,Dr,ue,Qe,Gs,lo,Ol,Xs,xl,Lr,_e,co,Vl,N,po,jl,we,yl,rs,kl,zl,Zs,El,Pl,ql,et,Ml,tt,Ar,be,ot,Ys,mo,Cl,Js,Il,Wr,ve,ho,Fl,S,fo,Dl,Te,Ll,ns,Al,Wl,Ks,Nl,Sl,Bl,st,Rl,rt,Nr,$e,nt,Qs,go,Hl,er,Ul,Sr,Z,uo,Gl,B,_o,Xl,Oe,Zl,as,Yl,Jl,tr,Kl,Ql,ec,at,tc,it,oc,R,wo,sc,xe,rc,is,nc,ac,or,ic,lc,cc,lt,dc,ct,Br;return s=new X({}),$t=new X({}),xt=new X({}),Vt=new Q({props:{code:`import requests
from PIL import Image
import torch

from transformers import OwlViTProcessor, OwlViTForObjectDetection

processor = OwlViTProcessor.from_pretrained("google/owlvit-base-patch32")
model = OwlViTForObjectDetection.from_pretrained("google/owlvit-base-patch32")

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)
texts = [["a photo of a cat", "a photo of a dog"]]
inputs = processor(text=texts, images=image, return_tensors="pt")
outputs = model(**inputs)

# Target image sizes (height, width) to rescale box predictions [batch_size, 2]
target_sizes = torch.Tensor([image.size[::-1]])
# Convert outputs (bounding boxes and class logits) to COCO API
results = processor.post_process(outputs=outputs, target_sizes=target_sizes)

i = 0  # Retrieve predictions for the first image for the corresponding text queries
text = texts[i]
boxes, scores, labels = results[i]["boxes"], results[i]["scores"], results[i]["labels"]

score_threshold = 0.1
for box, score, label in zip(boxes, scores, labels):
    box = [round(i, 2) for i in box.tolist()]
    if score >= score_threshold:
        print(f"Detected {text[label]} with confidence {round(score.item(), 3)} at location {box}")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> OwlViTProcessor, OwlViTForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span>processor = OwlViTProcessor.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = OwlViTForObjectDetection.from_pretrained(<span class="hljs-string">&quot;google/owlvit-base-patch32&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)
<span class="hljs-meta">&gt;&gt;&gt; </span>texts = [[<span class="hljs-string">&quot;a photo of a cat&quot;</span>, <span class="hljs-string">&quot;a photo of a dog&quot;</span>]]
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(text=texts, images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Target image sizes (height, width) to rescale box predictions [batch_size, 2]</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>target_sizes = torch.Tensor([image.size[::-<span class="hljs-number">1</span>]])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Convert outputs (bounding boxes and class logits) to COCO API</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>results = processor.post_process(outputs=outputs, target_sizes=target_sizes)

<span class="hljs-meta">&gt;&gt;&gt; </span>i = <span class="hljs-number">0</span>  <span class="hljs-comment"># Retrieve predictions for the first image for the corresponding text queries</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>text = texts[i]
<span class="hljs-meta">&gt;&gt;&gt; </span>boxes, scores, labels = results[i][<span class="hljs-string">&quot;boxes&quot;</span>], results[i][<span class="hljs-string">&quot;scores&quot;</span>], results[i][<span class="hljs-string">&quot;labels&quot;</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>score_threshold = <span class="hljs-number">0.1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> box, score, label <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(boxes, scores, labels):
<span class="hljs-meta">... </span>    box = [<span class="hljs-built_in">round</span>(i, <span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> box.tolist()]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> score &gt;= score_threshold:
<span class="hljs-meta">... </span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Detected <span class="hljs-subst">{text[label]}</span> with confidence <span class="hljs-subst">{<span class="hljs-built_in">round</span>(score.item(), <span class="hljs-number">3</span>)}</span> at location <span class="hljs-subst">{box}</span>&quot;</span>)
Detected a photo of a cat <span class="hljs-keyword">with</span> confidence <span class="hljs-number">0.707</span> at location [<span class="hljs-number">324.97</span>, <span class="hljs-number">20.44</span>, <span class="hljs-number">640.58</span>, <span class="hljs-number">373.29</span>]
Detected a photo of a cat <span class="hljs-keyword">with</span> confidence <span class="hljs-number">0.717</span> at location [<span class="hljs-number">1.46</span>, <span class="hljs-number">55.26</span>, <span class="hljs-number">315.55</span>, <span class="hljs-number">472.17</span>]`}}),kt=new X({}),zt=new k({props:{name:"class transformers.OwlViTConfig",anchor:"transformers.OwlViTConfig",parameters:[{name:"text_config",val:" = None"},{name:"vision_config",val:" = None"},{name:"projection_dim",val:" = 512"},{name:"logit_scale_init_value",val:" = 2.6592"},{name:"return_dict",val:" = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.OwlViTConfig.text_config",description:`<strong>text_config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary of configuration options used to initialize <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTTextConfig">OwlViTTextConfig</a>.`,name:"text_config"},{anchor:"transformers.OwlViTConfig.vision_config",description:`<strong>vision_config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary of configuration options used to initialize <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTVisionConfig">OwlViTVisionConfig</a>.`,name:"vision_config"},{anchor:"transformers.OwlViTConfig.projection_dim",description:`<strong>projection_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
Dimensionality of text and vision projection layers.`,name:"projection_dim"},{anchor:"transformers.OwlViTConfig.logit_scale_init_value",description:`<strong>logit_scale_init_value</strong> (<code>float</code>, <em>optional</em>, defaults to 2.6592) &#x2014;
The inital value of the <em>logit_scale</em> parameter. Default is used as per the original OWL-ViT
implementation.`,name:"logit_scale_init_value"},{anchor:"transformers.OwlViTConfig.kwargs",description:`<strong>kwargs</strong> (<em>optional</em>) &#x2014;
Dictionary of keyword arguments.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/configuration_owlvit.py#L256"}}),Pt=new k({props:{name:"from_text_vision_configs",anchor:"transformers.OwlViTConfig.from_text_vision_configs",parameters:[{name:"text_config",val:": typing.Dict"},{name:"vision_config",val:": typing.Dict"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/configuration_owlvit.py#L322",returnDescription:`
<p>An instance of a configuration object</p>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"
>OwlViTConfig</a></p>
`}}),Mt=new X({}),Ct=new k({props:{name:"class transformers.OwlViTTextConfig",anchor:"transformers.OwlViTTextConfig",parameters:[{name:"vocab_size",val:" = 49408"},{name:"hidden_size",val:" = 512"},{name:"intermediate_size",val:" = 2048"},{name:"num_hidden_layers",val:" = 12"},{name:"num_attention_heads",val:" = 8"},{name:"max_position_embeddings",val:" = 16"},{name:"hidden_act",val:" = 'quick_gelu'"},{name:"layer_norm_eps",val:" = 1e-05"},{name:"dropout",val:" = 0.0"},{name:"attention_dropout",val:" = 0.0"},{name:"initializer_range",val:" = 0.02"},{name:"initializer_factor",val:" = 1.0"},{name:"pad_token_id",val:" = 0"},{name:"bos_token_id",val:" = 49406"},{name:"eos_token_id",val:" = 49407"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.OwlViTTextConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 49408) &#x2014;
Vocabulary size of the OWL-ViT text model. Defines the number of different tokens that can be represented
by the <code>inputs_ids</code> passed when calling <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTTextModel">OwlViTTextModel</a>.`,name:"vocab_size"},{anchor:"transformers.OwlViTTextConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.OwlViTTextConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.OwlViTTextConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.OwlViTTextConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.OwlViTTextConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048).`,name:"max_position_embeddings"},{anchor:"transformers.OwlViTTextConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;quick_gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> \`<code>&quot;quick_gelu&quot;</code> are supported. layer_norm_eps (<code>float</code>, <em>optional</em>,
defaults to 1e-5): The epsilon used by the layer normalization layers.`,name:"hidden_act"},{anchor:"transformers.OwlViTTextConfig.attention_dropout",description:`<strong>attention_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_dropout"},{anchor:"transformers.OwlViTTextConfig.dropout",description:`<strong>dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.`,name:"dropout"},{anchor:"transformers.OwlViTTextConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.OwlViTTextConfig.initializer_factor",description:`<strong>initializer_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
A factor for initializing all weight matrices (should be kept to 1, used internally for initialization
testing).`,name:"initializer_factor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/configuration_owlvit.py#L41"}}),Ce=new Ve({props:{anchor:"transformers.OwlViTTextConfig.example",$$slots:{default:[Nd]},$$scope:{ctx:j}}}),Ft=new X({}),Dt=new k({props:{name:"class transformers.OwlViTVisionConfig",anchor:"transformers.OwlViTVisionConfig",parameters:[{name:"hidden_size",val:" = 768"},{name:"intermediate_size",val:" = 3072"},{name:"num_hidden_layers",val:" = 12"},{name:"num_attention_heads",val:" = 12"},{name:"num_channels",val:" = 3"},{name:"image_size",val:" = 768"},{name:"patch_size",val:" = 32"},{name:"hidden_act",val:" = 'quick_gelu'"},{name:"layer_norm_eps",val:" = 1e-05"},{name:"dropout",val:" = 0.0"},{name:"attention_dropout",val:" = 0.0"},{name:"initializer_range",val:" = 0.02"},{name:"initializer_factor",val:" = 1.0"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.OwlViTVisionConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.OwlViTVisionConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.OwlViTVisionConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.OwlViTVisionConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.OwlViTVisionConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
Number of channels in the input images.`,name:"num_channels"},{anchor:"transformers.OwlViTVisionConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.OwlViTVisionConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 32) &#x2014;
The size (resolution) of each patch.`,name:"patch_size"},{anchor:"transformers.OwlViTVisionConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;quick_gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> \`<code>&quot;quick_gelu&quot;</code> are supported. layer_norm_eps (<code>float</code>, <em>optional</em>,
defaults to 1e-5): The epsilon used by the layer normalization layers.`,name:"hidden_act"},{anchor:"transformers.OwlViTVisionConfig.dropout",description:`<strong>dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.`,name:"dropout"},{anchor:"transformers.OwlViTVisionConfig.attention_dropout",description:`<strong>attention_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_dropout"},{anchor:"transformers.OwlViTVisionConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.OwlViTVisionConfig.initializer_factor",description:`<strong>initializer_factor</strong> (\`float&#x201C;, <em>optional</em>, defaults to 1) &#x2014;
A factor for initializing all weight matrices (should be kept to 1, used internally for initialization
testing).`,name:"initializer_factor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/configuration_owlvit.py#L149"}}),Fe=new Ve({props:{anchor:"transformers.OwlViTVisionConfig.example",$$slots:{default:[Sd]},$$scope:{ctx:j}}}),At=new X({}),Wt=new k({props:{name:"class transformers.OwlViTFeatureExtractor",anchor:"transformers.OwlViTFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = (768, 768)"},{name:"resample",val:" = <Resampling.BICUBIC: 3>"},{name:"crop_size",val:" = 768"},{name:"do_center_crop",val:" = False"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.OwlViTFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the shorter edge of the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.OwlViTFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple[int, int]</code>, <em>optional</em>, defaults to (768, 768)) &#x2014;
The size to use for resizing the image. Only has an effect if <code>do_resize</code> is set to <code>True</code>. If <code>size</code> is a
sequence like (h, w), output size will be matched to this. If <code>size</code> is an int, then image will be resized
to (size, size).`,name:"size"},{anchor:"transformers.OwlViTFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.Resampling.BICUBIC</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.Resampling.NEAREST</code>,
<code>PIL.Image.Resampling.BOX</code>, <code>PIL.Image.Resampling.BILINEAR</code>, <code>PIL.Image.Resampling.HAMMING</code>,
<code>PIL.Image.Resampling.BICUBIC</code> or <code>PIL.Image.Resampling.LANCZOS</code>. Only has an effect if <code>do_resize</code> is set
to <code>True</code>.`,name:"resample"},{anchor:"transformers.OwlViTFeatureExtractor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to crop the input at the center. If the input size is smaller than <code>crop_size</code> along any edge, the
image is padded with 0&#x2019;s and then center cropped.`,name:"do_center_crop"},{anchor:"transformers.OwlViTFeatureExtractor.crop_size",description:"<strong>crop_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;",name:"crop_size"},{anchor:"transformers.OwlViTFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with <code>image_mean</code> and <code>image_std</code>. Desired output size when applying
center-cropping. Only has an effect if <code>do_center_crop</code> is set to <code>True</code>.`,name:"do_normalize"},{anchor:"transformers.OwlViTFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[0.48145466, 0.4578275, 0.40821073]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images.`,name:"image_mean"},{anchor:"transformers.OwlViTFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[0.26862954, 0.26130258, 0.27577711]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images.`,name:"image_std"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/feature_extraction_owlvit.py#L87"}}),St=new k({props:{name:"__call__",anchor:"transformers.OwlViTFeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.OwlViTFeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W) or (H, W, C),
where C is a number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.OwlViTFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/main/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>, defaults to <code>&apos;np&apos;</code>) &#x2014;
If set, will return tensors of a particular framework. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return NumPy <code>np.ndarray</code> objects.</li>
<li><code>&apos;jax&apos;</code>: Return JAX <code>jnp.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/feature_extraction_owlvit.py#L265",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),Le=new Tt({props:{warning:!0,$$slots:{default:[Bd]},$$scope:{ctx:j}}}),Bt=new k({props:{name:"post_process",anchor:"transformers.OwlViTFeatureExtractor.post_process",parameters:[{name:"outputs",val:""},{name:"target_sizes",val:""}],parametersDescription:[{anchor:"transformers.OwlViTFeatureExtractor.post_process.outputs",description:`<strong>outputs</strong> (<code>OwlViTObjectDetectionOutput</code>) &#x2014;
Raw outputs of the model.`,name:"outputs"},{anchor:"transformers.OwlViTFeatureExtractor.post_process.target_sizes",description:`<strong>target_sizes</strong> (<code>torch.Tensor</code>, <em>optional</em>) &#x2014;
Tensor of shape (batch_size, 2) where each entry is the (height, width) of the corresponding image in
the batch. If set, predicted normalized bounding boxes are rescaled to the target sizes. If left to
None, predictions will not be unnormalized.`,name:"target_sizes"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/feature_extraction_owlvit.py#L150",returnDescription:`
<p>A list of dictionaries, each dictionary containing the scores, labels and boxes for an image
in the batch as predicted by the model.</p>
`,returnType:`
<p><code>List[Dict]</code></p>
`}}),Ht=new k({props:{name:"post_process_image_guided_detection",anchor:"transformers.OwlViTFeatureExtractor.post_process_image_guided_detection",parameters:[{name:"outputs",val:""},{name:"threshold",val:" = 0.6"},{name:"nms_threshold",val:" = 0.3"},{name:"target_sizes",val:" = None"}],parametersDescription:[{anchor:"transformers.OwlViTFeatureExtractor.post_process_image_guided_detection.outputs",description:`<strong>outputs</strong> (<code>OwlViTImageGuidedObjectDetectionOutput</code>) &#x2014;
Raw outputs of the model.`,name:"outputs"},{anchor:"transformers.OwlViTFeatureExtractor.post_process_image_guided_detection.threshold",description:`<strong>threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.6) &#x2014;
Minimum confidence threshold to use to filter out predicted boxes.`,name:"threshold"},{anchor:"transformers.OwlViTFeatureExtractor.post_process_image_guided_detection.nms_threshold",description:`<strong>nms_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.3) &#x2014;
IoU threshold for non-maximum suppression of overlapping boxes.`,name:"nms_threshold"},{anchor:"transformers.OwlViTFeatureExtractor.post_process_image_guided_detection.target_sizes",description:`<strong>target_sizes</strong> (<code>torch.Tensor</code>, <em>optional</em>) &#x2014;
Tensor of shape (batch_size, 2) where each entry is the (height, width) of the corresponding image in
the batch. If set, predicted normalized bounding boxes are rescaled to the target sizes. If left to
None, predictions will not be unnormalized.`,name:"target_sizes"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/feature_extraction_owlvit.py#L189",returnDescription:`
<p>A list of dictionaries, each dictionary containing the scores, labels and boxes for an image
in the batch as predicted by the model. All labels are set to None as
<code>OwlViTForObjectDetection.image_guided_detection</code> perform one-shot object detection.</p>
`,returnType:`
<p><code>List[Dict]</code></p>
`}}),Gt=new X({}),Xt=new k({props:{name:"class transformers.OwlViTProcessor",anchor:"transformers.OwlViTProcessor",parameters:[{name:"feature_extractor",val:""},{name:"tokenizer",val:""}],parametersDescription:[{anchor:"transformers.OwlViTProcessor.feature_extractor",description:`<strong>feature_extractor</strong> (<a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor">OwlViTFeatureExtractor</a>) &#x2014;
The feature extractor is a required input.`,name:"feature_extractor"},{anchor:"transformers.OwlViTProcessor.tokenizer",description:`<strong>tokenizer</strong> ([<code>CLIPTokenizer</code>, <code>CLIPTokenizerFast</code>]) &#x2014;
The tokenizer is a required input.`,name:"tokenizer"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/processing_owlvit.py#L28"}}),Zt=new k({props:{name:"batch_decode",anchor:"transformers.OwlViTProcessor.batch_decode",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/processing_owlvit.py#L172"}}),Jt=new k({props:{name:"decode",anchor:"transformers.OwlViTProcessor.decode",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/processing_owlvit.py#L179"}}),Qt=new k({props:{name:"post_process",anchor:"transformers.OwlViTProcessor.post_process",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/processing_owlvit.py#L158"}}),to=new k({props:{name:"post_process_image_guided_detection",anchor:"transformers.OwlViTProcessor.post_process_image_guided_detection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/processing_owlvit.py#L165"}}),so=new X({}),ro=new k({props:{name:"class transformers.OwlViTModel",anchor:"transformers.OwlViTModel",parameters:[{name:"config",val:": OwlViTConfig"}],parametersDescription:[{anchor:"transformers.OwlViTModel.This",description:`<strong>This</strong> model is a PyTorch [torch.nn.Module](https &#x2014;
//pytorch.org/docs/stable/nn.html#torch.nn.Module) subclass. Use it`,name:"This"},{anchor:"transformers.OwlViTModel.as",description:`<strong>as</strong> a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and &#x2014;
behavior. &#x2014;
config (<a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a>): Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"as"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/modeling_owlvit.py#L1024"}}),no=new k({props:{name:"forward",anchor:"transformers.OwlViTModel.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"pixel_values",val:": typing.Optional[torch.FloatTensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"return_loss",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_base_image_embeds",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.OwlViTModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer">CLIPTokenizer</a>. See
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details. <a href="../glossary#input-ids">What are input
IDs?</a>`,name:"input_ids"},{anchor:"transformers.OwlViTModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="../glossary#attention-mask">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"transformers.OwlViTModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values.`,name:"pixel_values"},{anchor:"transformers.OwlViTModel.forward.return_loss",description:`<strong>return_loss</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the contrastive loss.`,name:"return_loss"},{anchor:"transformers.OwlViTModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.OwlViTModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.OwlViTModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/modeling_owlvit.py#L1139",returnDescription:`
<p>A <code>transformers.models.owlvit.modeling_owlvit.OwlViTOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<code>&lt;class 'transformers.models.owlvit.configuration_owlvit.OwlViTConfig'&gt;</code>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>return_loss</code> is <code>True</code>) \u2014 Contrastive loss for image-text similarity.</li>
<li><strong>logits_per_image</strong> (<code>torch.FloatTensor</code> of shape <code>(image_batch_size, text_batch_size)</code>) \u2014 The scaled dot product scores between <code>image_embeds</code> and <code>text_embeds</code>. This represents the image-text
similarity scores.</li>
<li><strong>logits_per_text</strong> (<code>torch.FloatTensor</code> of shape <code>(text_batch_size, image_batch_size)</code>) \u2014 The scaled dot product scores between <code>text_embeds</code> and <code>image_embeds</code>. This represents the text-image
similarity scores.</li>
<li><strong>text_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_max_text_queries, output_dim</code>) \u2014 The text embeddings obtained by applying the projection layer to the pooled output of <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTTextModel"
>OwlViTTextModel</a>.</li>
<li><strong>image_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim</code>) \u2014 The image embeddings obtained by applying the projection layer to the pooled output of
<a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTVisionModel"
>OwlViTVisionModel</a>.</li>
<li><strong>text_model_output</strong> (Tuple<code>BaseModelOutputWithPooling</code>) \u2014 The output of the <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTTextModel"
>OwlViTTextModel</a>.</li>
<li><strong>vision_model_output</strong> (<code>BaseModelOutputWithPooling</code>) \u2014 The output of the <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTVisionModel"
>OwlViTVisionModel</a>.</li>
</ul>
`,returnType:`
<p><code>transformers.models.owlvit.modeling_owlvit.OwlViTOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Ge=new Tt({props:{$$slots:{default:[Rd]},$$scope:{ctx:j}}}),Xe=new Ve({props:{anchor:"transformers.OwlViTModel.forward.example",$$slots:{default:[Hd]},$$scope:{ctx:j}}}),ao=new k({props:{name:"get_text_features",anchor:"transformers.OwlViTModel.get_text_features",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.OwlViTModel.get_text_features.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_max_text_queries, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer">CLIPTokenizer</a>. See
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details. <a href="../glossary#input-ids">What are input
IDs?</a>`,name:"input_ids"},{anchor:"transformers.OwlViTModel.get_text_features.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, num_max_text_queries, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="../glossary#attention-mask">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"transformers.OwlViTModel.get_text_features.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.OwlViTModel.get_text_features.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.OwlViTModel.get_text_features.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/modeling_owlvit.py#L1059",returnDescription:`
<p>The text embeddings obtained by
applying the projection layer to the pooled output of <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTTextModel"
>OwlViTTextModel</a>.</p>
`,returnType:`
<p>text_features (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim</code>)</p>
`}}),Ze=new Tt({props:{$$slots:{default:[Ud]},$$scope:{ctx:j}}}),Ye=new Ve({props:{anchor:"transformers.OwlViTModel.get_text_features.example",$$slots:{default:[Gd]},$$scope:{ctx:j}}}),io=new k({props:{name:"get_image_features",anchor:"transformers.OwlViTModel.get_image_features",parameters:[{name:"pixel_values",val:": typing.Optional[torch.FloatTensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.OwlViTModel.get_image_features.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values.`,name:"pixel_values"},{anchor:"transformers.OwlViTModel.get_image_features.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.OwlViTModel.get_image_features.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.OwlViTModel.get_image_features.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/modeling_owlvit.py#L1094",returnDescription:`
<p>The image embeddings obtained by
applying the projection layer to the pooled output of <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTVisionModel"
>OwlViTVisionModel</a>.</p>
`,returnType:`
<p>image_features (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim</code>)</p>
`}}),Je=new Tt({props:{$$slots:{default:[Xd]},$$scope:{ctx:j}}}),Ke=new Ve({props:{anchor:"transformers.OwlViTModel.get_image_features.example",$$slots:{default:[Zd]},$$scope:{ctx:j}}}),lo=new X({}),co=new k({props:{name:"class transformers.OwlViTTextModel",anchor:"transformers.OwlViTTextModel",parameters:[{name:"config",val:": OwlViTTextConfig"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/modeling_owlvit.py#L868"}}),po=new k({props:{name:"forward",anchor:"transformers.OwlViTTextModel.forward",parameters:[{name:"input_ids",val:": Tensor"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.OwlViTTextModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_max_text_queries, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer">CLIPTokenizer</a>. See
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details. <a href="../glossary#input-ids">What are input
IDs?</a>`,name:"input_ids"},{anchor:"transformers.OwlViTTextModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, num_max_text_queries, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="../glossary#attention-mask">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"transformers.OwlViTTextModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.OwlViTTextModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.OwlViTTextModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/modeling_owlvit.py#L883",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<code>&lt;class 'transformers.models.owlvit.configuration_owlvit.OwlViTTextConfig'&gt;</code>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) after further processing
through the layers used for the auxiliary pretraining task. E.g. for BERT-family of models, this returns
the classification token after processing through a linear layer and a tanh activation function. The linear
layer weights are trained from the next sentence prediction (classification) objective during pretraining.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),et=new Tt({props:{$$slots:{default:[Yd]},$$scope:{ctx:j}}}),tt=new Ve({props:{anchor:"transformers.OwlViTTextModel.forward.example",$$slots:{default:[Jd]},$$scope:{ctx:j}}}),mo=new X({}),ho=new k({props:{name:"class transformers.OwlViTVisionModel",anchor:"transformers.OwlViTVisionModel",parameters:[{name:"config",val:": OwlViTVisionConfig"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/modeling_owlvit.py#L973"}}),fo=new k({props:{name:"forward",anchor:"transformers.OwlViTVisionModel.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.FloatTensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.OwlViTVisionModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values.`,name:"pixel_values"},{anchor:"transformers.OwlViTVisionModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.OwlViTVisionModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.OwlViTVisionModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/modeling_owlvit.py#L986",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<code>&lt;class 'transformers.models.owlvit.configuration_owlvit.OwlViTVisionConfig'&gt;</code>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) after further processing
through the layers used for the auxiliary pretraining task. E.g. for BERT-family of models, this returns
the classification token after processing through a linear layer and a tanh activation function. The linear
layer weights are trained from the next sentence prediction (classification) objective during pretraining.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),st=new Tt({props:{$$slots:{default:[Kd]},$$scope:{ctx:j}}}),rt=new Ve({props:{anchor:"transformers.OwlViTVisionModel.forward.example",$$slots:{default:[Qd]},$$scope:{ctx:j}}}),go=new X({}),uo=new k({props:{name:"class transformers.OwlViTForObjectDetection",anchor:"transformers.OwlViTForObjectDetection",parameters:[{name:"config",val:": OwlViTConfig"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/modeling_owlvit.py#L1306"}}),_o=new k({props:{name:"forward",anchor:"transformers.OwlViTForObjectDetection.forward",parameters:[{name:"input_ids",val:": Tensor"},{name:"pixel_values",val:": FloatTensor"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.OwlViTForObjectDetection.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values.`,name:"pixel_values"},{anchor:"transformers.OwlViTForObjectDetection.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_max_text_queries, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of input sequence tokens in the vocabulary. Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer">CLIPTokenizer</a>. See
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details. <a href="../glossary#input-ids">What are input
IDs?</a>.`,name:"input_ids"},{anchor:"transformers.OwlViTForObjectDetection.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, num_max_text_queries, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="../glossary#attention-mask">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"transformers.OwlViTForObjectDetection.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the last hidden state. See <code>text_model_last_hidden_state</code> and
<code>vision_model_last_hidden_state</code> under returned tensors for more detail.`,name:"output_hidden_states"},{anchor:"transformers.OwlViTForObjectDetection.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/modeling_owlvit.py#L1609",returnDescription:`
<p>A <code>transformers.models.owlvit.modeling_owlvit.OwlViTObjectDetectionOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<code>&lt;class 'transformers.models.owlvit.configuration_owlvit.OwlViTConfig'&gt;</code>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> are provided)) \u2014 Total loss as a linear combination of a negative log-likehood (cross-entropy) for class prediction and a
bounding box loss. The latter is defined as a linear combination of the L1 loss and the generalized
scale-invariant IoU loss.</li>
<li><strong>loss_dict</strong> (<code>Dict</code>, <em>optional</em>) \u2014 A dictionary containing the individual losses. Useful for logging.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_patches, num_queries)</code>) \u2014 Classification logits (including no-object) for all queries.</li>
<li><strong>pred_boxes</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_patches, 4)</code>) \u2014 Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These
values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding
possible padding). You can use <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor.post_process"
>post_process()</a> to retrieve the unnormalized
bounding boxes.</li>
<li><strong>text_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_max_text_queries, output_dim</code>) \u2014 The text embeddings obtained by applying the projection layer to the pooled output of <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTTextModel"
>OwlViTTextModel</a>.</li>
<li><strong>image_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, patch_size, patch_size, output_dim</code>) \u2014 Pooled output of <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTVisionModel"
>OwlViTVisionModel</a>. OWL-ViT represents images as a set of image patches and computes
image embeddings for each patch.</li>
<li><strong>class_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_patches, hidden_size)</code>) \u2014 Class embeddings of all image patches. OWL-ViT represents images as a set of image patches where the total
number of patches is (image_size / patch_size)**2.</li>
<li><strong>text_model_output</strong> (Tuple<code>BaseModelOutputWithPooling</code>) \u2014 The output of the <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTTextModel"
>OwlViTTextModel</a>.</li>
<li><strong>vision_model_output</strong> (<code>BaseModelOutputWithPooling</code>) \u2014 The output of the <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTVisionModel"
>OwlViTVisionModel</a>.</li>
</ul>
`,returnType:`
<p><code>transformers.models.owlvit.modeling_owlvit.OwlViTObjectDetectionOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),at=new Tt({props:{$$slots:{default:[ep]},$$scope:{ctx:j}}}),it=new Ve({props:{anchor:"transformers.OwlViTForObjectDetection.forward.example",$$slots:{default:[tp]},$$scope:{ctx:j}}}),wo=new k({props:{name:"image_guided_detection",anchor:"transformers.OwlViTForObjectDetection.image_guided_detection",parameters:[{name:"pixel_values",val:": FloatTensor"},{name:"query_pixel_values",val:": typing.Optional[torch.FloatTensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.OwlViTForObjectDetection.image_guided_detection.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values.`,name:"pixel_values"},{anchor:"transformers.OwlViTForObjectDetection.image_guided_detection.query_pixel_values",description:`<strong>query_pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values of query image(s) to be detected. Pass in one query image per target image.`,name:"query_pixel_values"},{anchor:"transformers.OwlViTForObjectDetection.image_guided_detection.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.OwlViTForObjectDetection.image_guided_detection.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.OwlViTForObjectDetection.image_guided_detection.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/owlvit/modeling_owlvit.py#L1514",returnDescription:`
<p>A <code>transformers.models.owlvit.modeling_owlvit.OwlViTImageGuidedObjectDetectionOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<code>&lt;class 'transformers.models.owlvit.configuration_owlvit.OwlViTConfig'&gt;</code>) and inputs.</p>
<ul>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_patches, num_queries)</code>) \u2014 Classification logits (including no-object) for all queries.</li>
<li><strong>target_pred_boxes</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_patches, 4)</code>) \u2014 Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These
values are normalized in [0, 1], relative to the size of each individual target image in the batch
(disregarding possible padding). You can use <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor.post_process"
>post_process()</a> to retrieve the
unnormalized bounding boxes.</li>
<li><strong>query_pred_boxes</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_patches, 4)</code>) \u2014 Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These
values are normalized in [0, 1], relative to the size of each individual query image in the batch
(disregarding possible padding). You can use <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor.post_process"
>post_process()</a> to retrieve the
unnormalized bounding boxes.</li>
<li><strong>image_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, patch_size, patch_size, output_dim</code>) \u2014 Pooled output of <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTVisionModel"
>OwlViTVisionModel</a>. OWL-ViT represents images as a set of image patches and computes
image embeddings for each patch.</li>
<li><strong>query_image_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, patch_size, patch_size, output_dim</code>) \u2014 Pooled output of <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTVisionModel"
>OwlViTVisionModel</a>. OWL-ViT represents images as a set of image patches and computes
image embeddings for each patch.</li>
<li><strong>class_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_patches, hidden_size)</code>) \u2014 Class embeddings of all image patches. OWL-ViT represents images as a set of image patches where the total
number of patches is (image_size / patch_size)**2.</li>
<li><strong>text_model_output</strong> (Tuple<code>BaseModelOutputWithPooling</code>) \u2014 The output of the <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTTextModel"
>OwlViTTextModel</a>.</li>
<li><strong>vision_model_output</strong> (<code>BaseModelOutputWithPooling</code>) \u2014 The output of the <a
  href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTVisionModel"
>OwlViTVisionModel</a>.</li>
</ul>
`,returnType:`
<p><code>transformers.models.owlvit.modeling_owlvit.OwlViTImageGuidedObjectDetectionOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),lt=new Tt({props:{$$slots:{default:[op]},$$scope:{ctx:j}}}),ct=new Ve({props:{anchor:"transformers.OwlViTForObjectDetection.image_guided_detection.example",$$slots:{default:[sp]},$$scope:{ctx:j}}}),{c(){c=r("meta"),b=h(),g=r("h1"),m=r("a"),w=r("span"),v(s.$$.fragment),p=h(),y=r("span"),wn=i("OWL-ViT"),ur=h(),ee=r("h2"),ye=r("a"),Os=r("span"),v($t.$$.fragment),bn=h(),xs=r("span"),vn=i("Overview"),_r=h(),ke=r("p"),Tn=i("The OWL-ViT (short for Vision Transformer for Open-World Localization) was proposed in "),Ot=r("a"),$n=i("Simple Open-Vocabulary Object Detection with Vision Transformers"),On=i(" by Matthias Minderer, Alexey Gritsenko, Austin Stone, Maxim Neumann, Dirk Weissenborn, Alexey Dosovitskiy, Aravindh Mahendran, Anurag Arnab, Mostafa Dehghani, Zhuoran Shen, Xiao Wang, Xiaohua Zhai, Thomas Kipf, and Neil Houlsby. OWL-ViT is an open-vocabulary object detection network trained on a variety of (image, text) pairs. It can be used to query an image with one or multiple text queries to search for and detect target objects described in text."),wr=h(),xo=r("p"),xn=i("The abstract from the paper is the following:"),br=h(),Vo=r("p"),Vs=r("em"),Vn=i("Combining simple architectures with large-scale pre-training has led to massive improvements in image classification. For object detection, pre-training and scaling approaches are less well established, especially in the long-tailed and open-vocabulary setting, where training data is relatively scarce. In this paper, we propose a strong recipe for transferring image-text models to open-vocabulary object detection. We use a standard Vision Transformer architecture with minimal modifications, contrastive image-text pre-training, and end-to-end detection fine-tuning. Our analysis of the scaling properties of this setup shows that increasing image-level pre-training and model size yield consistent improvements on the downstream detection task. We provide the adaptation strategies and regularizations needed to attain very strong performance on zero-shot text-conditioned and one-shot image-conditioned object detection. Code and models are available on GitHub."),vr=h(),te=r("h2"),ze=r("a"),js=r("span"),v(xt.$$.fragment),jn=h(),ys=r("span"),yn=i("Usage"),Tr=h(),Ee=r("p"),kn=i("OWL-ViT is a zero-shot text-conditioned object detection model. OWL-ViT uses "),jo=r("a"),zn=i("CLIP"),En=i(" as its multi-modal backbone, with a ViT-like Transformer to get visual features and a causal language model to get the text features. To use CLIP for detection, OWL-ViT removes the final token pooling layer of the vision model and attaches a lightweight classification and box head to each transformer output token. Open-vocabulary classification is enabled by replacing the fixed classification layer weights with the class-name embeddings obtained from the text model. The authors first train CLIP from scratch and fine-tune it end-to-end with the classification and box heads on standard detection datasets using a bipartite matching loss. One or multiple text queries per image can be used to perform zero-shot text-conditioned object detection."),$r=h(),z=r("p"),yo=r("a"),Pn=i("OwlViTFeatureExtractor"),qn=i(" can be used to resize (or rescale) and normalize images for the model and "),ko=r("a"),Mn=i("CLIPTokenizer"),Cn=i(" is used to encode the text. "),zo=r("a"),In=i("OwlViTProcessor"),Fn=i(" wraps "),Eo=r("a"),Dn=i("OwlViTFeatureExtractor"),Ln=i(" and "),Po=r("a"),An=i("CLIPTokenizer"),Wn=i(" into a single instance to both encode the text and prepare the images. The following example shows how to perform object detection using "),qo=r("a"),Nn=i("OwlViTProcessor"),Sn=i(" and "),Mo=r("a"),Bn=i("OwlViTForObjectDetection"),Rn=i("."),Or=h(),v(Vt.$$.fragment),xr=h(),Y=r("p"),Hn=i("This model was contributed by "),jt=r("a"),Un=i("adirik"),Gn=i(". The original code can be found "),yt=r("a"),Xn=i("here"),Zn=i("."),Vr=h(),oe=r("h2"),Pe=r("a"),ks=r("span"),v(kt.$$.fragment),Yn=h(),zs=r("span"),Jn=i("OwlViTConfig"),jr=h(),C=r("div"),v(zt.$$.fragment),Kn=h(),J=r("p"),Co=r("a"),Qn=i("OwlViTConfig"),ea=i(" is the configuration class to store the configuration of an "),Io=r("a"),ta=i("OwlViTModel"),oa=i(`. It is used to
instantiate an OWL-ViT model according to the specified arguments, defining the text model and vision model
configs. Instantiating a configuration with the defaults will yield a similar configuration to that of the OWL-ViT
`),Et=r("a"),sa=i("google/owlvit-base-patch32"),ra=i(" architecture."),na=h(),se=r("p"),aa=i("Configuration objects inherit from "),Fo=r("a"),ia=i("PretrainedConfig"),la=i(` and can be used to control the model outputs. Read the
documentation from `),Do=r("a"),ca=i("PretrainedConfig"),da=i(" for more information."),pa=h(),qe=r("div"),v(Pt.$$.fragment),ma=h(),qt=r("p"),ha=i("Instantiate a "),Lo=r("a"),fa=i("OwlViTConfig"),ga=i(` (or a derived class) from owlvit text model configuration and owlvit vision
model configuration.`),yr=h(),re=r("h2"),Me=r("a"),Es=r("span"),v(Mt.$$.fragment),ua=h(),Ps=r("span"),_a=i("OwlViTTextConfig"),kr=h(),I=r("div"),v(Ct.$$.fragment),wa=h(),ne=r("p"),ba=i("This is the configuration class to store the configuration of an "),Ao=r("a"),va=i("OwlViTTextModel"),Ta=i(`. It is used to instantiate an
OwlViT text encoder according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the OwlViT
`),It=r("a"),$a=i("google/owlvit-base-patch32"),Oa=i(" architecture."),xa=h(),ae=r("p"),Va=i("Configuration objects inherit from "),Wo=r("a"),ja=i("PretrainedConfig"),ya=i(` and can be used to control the model outputs. Read the
documentation from `),No=r("a"),ka=i("PretrainedConfig"),za=i(" for more information."),Ea=h(),v(Ce.$$.fragment),zr=h(),ie=r("h2"),Ie=r("a"),qs=r("span"),v(Ft.$$.fragment),Pa=h(),Ms=r("span"),qa=i("OwlViTVisionConfig"),Er=h(),F=r("div"),v(Dt.$$.fragment),Ma=h(),le=r("p"),Ca=i("This is the configuration class to store the configuration of an "),So=r("a"),Ia=i("OwlViTVisionModel"),Fa=i(`. It is used to instantiate
an OWL-ViT image encoder according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the OWL-ViT
`),Lt=r("a"),Da=i("google/owlvit-base-patch32"),La=i(" architecture."),Aa=h(),ce=r("p"),Wa=i("Configuration objects inherit from "),Bo=r("a"),Na=i("PretrainedConfig"),Sa=i(` and can be used to control the model outputs. Read the
documentation from `),Ro=r("a"),Ba=i("PretrainedConfig"),Ra=i(" for more information."),Ha=h(),v(Fe.$$.fragment),Pr=h(),de=r("h2"),De=r("a"),Cs=r("span"),v(At.$$.fragment),Ua=h(),Is=r("span"),Ga=i("OwlViTFeatureExtractor"),qr=h(),E=r("div"),v(Wt.$$.fragment),Xa=h(),Fs=r("p"),Za=i("Constructs an OWL-ViT feature extractor."),Ya=h(),Nt=r("p"),Ja=i("This feature extractor inherits from "),Ho=r("a"),Ka=i("FeatureExtractionMixin"),Qa=i(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),ei=h(),K=r("div"),v(St.$$.fragment),ti=h(),Ds=r("p"),oi=i("Main method to prepare for the model one or several image(s)."),si=h(),v(Le.$$.fragment),ri=h(),Ae=r("div"),v(Bt.$$.fragment),ni=h(),Rt=r("p"),ai=i("Converts the output of "),Uo=r("a"),ii=i("OwlViTForObjectDetection"),li=i(" into the format expected by the COCO api."),ci=h(),We=r("div"),v(Ht.$$.fragment),di=h(),Ut=r("p"),pi=i("Converts the output of "),Go=r("a"),mi=i("OwlViTForObjectDetection.image_guided_detection()"),hi=i(` into the format expected by the COCO
api.`),Mr=h(),pe=r("h2"),Ne=r("a"),Ls=r("span"),v(Gt.$$.fragment),fi=h(),As=r("span"),gi=i("OwlViTProcessor"),Cr=h(),P=r("div"),v(Xt.$$.fragment),ui=h(),q=r("p"),_i=i("Constructs an OWL-ViT processor which wraps "),Xo=r("a"),wi=i("OwlViTFeatureExtractor"),bi=i(" and "),Zo=r("a"),vi=i("CLIPTokenizer"),Ti=i("/"),Yo=r("a"),$i=i("CLIPTokenizerFast"),Oi=i(`
into a single processor that interits both the feature extractor and tokenizer functionalities. See the
`),Ws=r("code"),xi=i("__call__()"),Vi=i(" and "),Jo=r("a"),ji=i("decode()"),yi=i(" for more information."),ki=h(),Se=r("div"),v(Zt.$$.fragment),zi=h(),Yt=r("p"),Ei=i("This method forwards all its arguments to CLIPTokenizerFast\u2019s "),Ko=r("a"),Pi=i("batch_decode()"),qi=i(`. Please
refer to the docstring of this method for more information.`),Mi=h(),Be=r("div"),v(Jt.$$.fragment),Ci=h(),Kt=r("p"),Ii=i("This method forwards all its arguments to CLIPTokenizerFast\u2019s "),Qo=r("a"),Fi=i("decode()"),Di=i(`. Please refer to
the docstring of this method for more information.`),Li=h(),Re=r("div"),v(Qt.$$.fragment),Ai=h(),eo=r("p"),Wi=i("This method forwards all its arguments to "),es=r("a"),Ni=i("OwlViTFeatureExtractor.post_process()"),Si=i(`. Please refer to the
docstring of this method for more information.`),Bi=h(),He=r("div"),v(to.$$.fragment),Ri=h(),oo=r("p"),Hi=i("This method forwards all its arguments to "),Ns=r("code"),Ui=i("OwlViTFeatureExtractor.post_process_one_shot_object_detection"),Gi=i(`.
Please refer to the docstring of this method for more information.`),Ir=h(),me=r("h2"),Ue=r("a"),Ss=r("span"),v(so.$$.fragment),Xi=h(),Bs=r("span"),Zi=i("OwlViTModel"),Fr=h(),D=r("div"),v(ro.$$.fragment),Yi=h(),L=r("div"),v(no.$$.fragment),Ji=h(),he=r("p"),Ki=i("The "),ts=r("a"),Qi=i("OwlViTModel"),el=i(" forward method, overrides the "),Rs=r("code"),tl=i("__call__"),ol=i(" special method."),sl=h(),v(Ge.$$.fragment),rl=h(),v(Xe.$$.fragment),nl=h(),A=r("div"),v(ao.$$.fragment),al=h(),fe=r("p"),il=i("The "),os=r("a"),ll=i("OwlViTModel"),cl=i(" forward method, overrides the "),Hs=r("code"),dl=i("__call__"),pl=i(" special method."),ml=h(),v(Ze.$$.fragment),hl=h(),v(Ye.$$.fragment),fl=h(),W=r("div"),v(io.$$.fragment),gl=h(),ge=r("p"),ul=i("The "),ss=r("a"),_l=i("OwlViTModel"),wl=i(" forward method, overrides the "),Us=r("code"),bl=i("__call__"),vl=i(" special method."),Tl=h(),v(Je.$$.fragment),$l=h(),v(Ke.$$.fragment),Dr=h(),ue=r("h2"),Qe=r("a"),Gs=r("span"),v(lo.$$.fragment),Ol=h(),Xs=r("span"),xl=i("OwlViTTextModel"),Lr=h(),_e=r("div"),v(co.$$.fragment),Vl=h(),N=r("div"),v(po.$$.fragment),jl=h(),we=r("p"),yl=i("The "),rs=r("a"),kl=i("OwlViTTextModel"),zl=i(" forward method, overrides the "),Zs=r("code"),El=i("__call__"),Pl=i(" special method."),ql=h(),v(et.$$.fragment),Ml=h(),v(tt.$$.fragment),Ar=h(),be=r("h2"),ot=r("a"),Ys=r("span"),v(mo.$$.fragment),Cl=h(),Js=r("span"),Il=i("OwlViTVisionModel"),Wr=h(),ve=r("div"),v(ho.$$.fragment),Fl=h(),S=r("div"),v(fo.$$.fragment),Dl=h(),Te=r("p"),Ll=i("The "),ns=r("a"),Al=i("OwlViTVisionModel"),Wl=i(" forward method, overrides the "),Ks=r("code"),Nl=i("__call__"),Sl=i(" special method."),Bl=h(),v(st.$$.fragment),Rl=h(),v(rt.$$.fragment),Nr=h(),$e=r("h2"),nt=r("a"),Qs=r("span"),v(go.$$.fragment),Hl=h(),er=r("span"),Ul=i("OwlViTForObjectDetection"),Sr=h(),Z=r("div"),v(uo.$$.fragment),Gl=h(),B=r("div"),v(_o.$$.fragment),Xl=h(),Oe=r("p"),Zl=i("The "),as=r("a"),Yl=i("OwlViTForObjectDetection"),Jl=i(" forward method, overrides the "),tr=r("code"),Kl=i("__call__"),Ql=i(" special method."),ec=h(),v(at.$$.fragment),tc=h(),v(it.$$.fragment),oc=h(),R=r("div"),v(wo.$$.fragment),sc=h(),xe=r("p"),rc=i("The "),is=r("a"),nc=i("OwlViTForObjectDetection"),ac=i(" forward method, overrides the "),or=r("code"),ic=i("__call__"),lc=i(" special method."),cc=h(),v(lt.$$.fragment),dc=h(),v(ct.$$.fragment),this.h()},l(t){const u=Ad('[data-svelte="svelte-1phssyn"]',document.head);c=n(u,"META",{name:!0,content:!0}),u.forEach(o),b=f(t),g=n(t,"H1",{class:!0});var bo=a(g);m=n(bo,"A",{id:!0,class:!0,href:!0});var sr=a(m);w=n(sr,"SPAN",{});var rr=a(w);T(s.$$.fragment,rr),rr.forEach(o),sr.forEach(o),p=f(bo),y=n(bo,"SPAN",{});var nr=a(y);wn=l(nr,"OWL-ViT"),nr.forEach(o),bo.forEach(o),ur=f(t),ee=n(t,"H2",{class:!0});var vo=a(ee);ye=n(vo,"A",{id:!0,class:!0,href:!0});var ar=a(ye);Os=n(ar,"SPAN",{});var ir=a(Os);T($t.$$.fragment,ir),ir.forEach(o),ar.forEach(o),bn=f(vo),xs=n(vo,"SPAN",{});var lr=a(xs);vn=l(lr,"Overview"),lr.forEach(o),vo.forEach(o),_r=f(t),ke=n(t,"P",{});var To=a(ke);Tn=l(To,"The OWL-ViT (short for Vision Transformer for Open-World Localization) was proposed in "),Ot=n(To,"A",{href:!0,rel:!0});var cr=a(Ot);$n=l(cr,"Simple Open-Vocabulary Object Detection with Vision Transformers"),cr.forEach(o),On=l(To," by Matthias Minderer, Alexey Gritsenko, Austin Stone, Maxim Neumann, Dirk Weissenborn, Alexey Dosovitskiy, Aravindh Mahendran, Anurag Arnab, Mostafa Dehghani, Zhuoran Shen, Xiao Wang, Xiaohua Zhai, Thomas Kipf, and Neil Houlsby. OWL-ViT is an open-vocabulary object detection network trained on a variety of (image, text) pairs. It can be used to query an image with one or multiple text queries to search for and detect target objects described in text."),To.forEach(o),wr=f(t),xo=n(t,"P",{});var dr=a(xo);xn=l(dr,"The abstract from the paper is the following:"),dr.forEach(o),br=f(t),Vo=n(t,"P",{});var pr=a(Vo);Vs=n(pr,"EM",{});var mr=a(Vs);Vn=l(mr,"Combining simple architectures with large-scale pre-training has led to massive improvements in image classification. For object detection, pre-training and scaling approaches are less well established, especially in the long-tailed and open-vocabulary setting, where training data is relatively scarce. In this paper, we propose a strong recipe for transferring image-text models to open-vocabulary object detection. We use a standard Vision Transformer architecture with minimal modifications, contrastive image-text pre-training, and end-to-end detection fine-tuning. Our analysis of the scaling properties of this setup shows that increasing image-level pre-training and model size yield consistent improvements on the downstream detection task. We provide the adaptation strategies and regularizations needed to attain very strong performance on zero-shot text-conditioned and one-shot image-conditioned object detection. Code and models are available on GitHub."),mr.forEach(o),pr.forEach(o),vr=f(t),te=n(t,"H2",{class:!0});var $o=a(te);ze=n($o,"A",{id:!0,class:!0,href:!0});var hr=a(ze);js=n(hr,"SPAN",{});var fr=a(js);T(xt.$$.fragment,fr),fr.forEach(o),hr.forEach(o),jn=f($o),ys=n($o,"SPAN",{});var gr=a(ys);yn=l(gr,"Usage"),gr.forEach(o),$o.forEach(o),Tr=f(t),Ee=n(t,"P",{});var Rr=a(Ee);kn=l(Rr,"OWL-ViT is a zero-shot text-conditioned object detection model. OWL-ViT uses "),jo=n(Rr,"A",{href:!0});var pc=a(jo);zn=l(pc,"CLIP"),pc.forEach(o),En=l(Rr," as its multi-modal backbone, with a ViT-like Transformer to get visual features and a causal language model to get the text features. To use CLIP for detection, OWL-ViT removes the final token pooling layer of the vision model and attaches a lightweight classification and box head to each transformer output token. Open-vocabulary classification is enabled by replacing the fixed classification layer weights with the class-name embeddings obtained from the text model. The authors first train CLIP from scratch and fine-tune it end-to-end with the classification and box heads on standard detection datasets using a bipartite matching loss. One or multiple text queries per image can be used to perform zero-shot text-conditioned object detection."),Rr.forEach(o),$r=f(t),z=n(t,"P",{});var M=a(z);yo=n(M,"A",{href:!0});var mc=a(yo);Pn=l(mc,"OwlViTFeatureExtractor"),mc.forEach(o),qn=l(M," can be used to resize (or rescale) and normalize images for the model and "),ko=n(M,"A",{href:!0});var hc=a(ko);Mn=l(hc,"CLIPTokenizer"),hc.forEach(o),Cn=l(M," is used to encode the text. "),zo=n(M,"A",{href:!0});var fc=a(zo);In=l(fc,"OwlViTProcessor"),fc.forEach(o),Fn=l(M," wraps "),Eo=n(M,"A",{href:!0});var gc=a(Eo);Dn=l(gc,"OwlViTFeatureExtractor"),gc.forEach(o),Ln=l(M," and "),Po=n(M,"A",{href:!0});var uc=a(Po);An=l(uc,"CLIPTokenizer"),uc.forEach(o),Wn=l(M," into a single instance to both encode the text and prepare the images. The following example shows how to perform object detection using "),qo=n(M,"A",{href:!0});var _c=a(qo);Nn=l(_c,"OwlViTProcessor"),_c.forEach(o),Sn=l(M," and "),Mo=n(M,"A",{href:!0});var wc=a(Mo);Bn=l(wc,"OwlViTForObjectDetection"),wc.forEach(o),Rn=l(M,"."),M.forEach(o),Or=f(t),T(Vt.$$.fragment,t),xr=f(t),Y=n(t,"P",{});var ls=a(Y);Hn=l(ls,"This model was contributed by "),jt=n(ls,"A",{href:!0,rel:!0});var bc=a(jt);Un=l(bc,"adirik"),bc.forEach(o),Gn=l(ls,". The original code can be found "),yt=n(ls,"A",{href:!0,rel:!0});var vc=a(yt);Xn=l(vc,"here"),vc.forEach(o),Zn=l(ls,"."),ls.forEach(o),Vr=f(t),oe=n(t,"H2",{class:!0});var Hr=a(oe);Pe=n(Hr,"A",{id:!0,class:!0,href:!0});var Tc=a(Pe);ks=n(Tc,"SPAN",{});var $c=a(ks);T(kt.$$.fragment,$c),$c.forEach(o),Tc.forEach(o),Yn=f(Hr),zs=n(Hr,"SPAN",{});var Oc=a(zs);Jn=l(Oc,"OwlViTConfig"),Oc.forEach(o),Hr.forEach(o),jr=f(t),C=n(t,"DIV",{class:!0});var dt=a(C);T(zt.$$.fragment,dt),Kn=f(dt),J=n(dt,"P",{});var Oo=a(J);Co=n(Oo,"A",{href:!0});var xc=a(Co);Qn=l(xc,"OwlViTConfig"),xc.forEach(o),ea=l(Oo," is the configuration class to store the configuration of an "),Io=n(Oo,"A",{href:!0});var Vc=a(Io);ta=l(Vc,"OwlViTModel"),Vc.forEach(o),oa=l(Oo,`. It is used to
instantiate an OWL-ViT model according to the specified arguments, defining the text model and vision model
configs. Instantiating a configuration with the defaults will yield a similar configuration to that of the OWL-ViT
`),Et=n(Oo,"A",{href:!0,rel:!0});var jc=a(Et);sa=l(jc,"google/owlvit-base-patch32"),jc.forEach(o),ra=l(Oo," architecture."),Oo.forEach(o),na=f(dt),se=n(dt,"P",{});var cs=a(se);aa=l(cs,"Configuration objects inherit from "),Fo=n(cs,"A",{href:!0});var yc=a(Fo);ia=l(yc,"PretrainedConfig"),yc.forEach(o),la=l(cs,` and can be used to control the model outputs. Read the
documentation from `),Do=n(cs,"A",{href:!0});var kc=a(Do);ca=l(kc,"PretrainedConfig"),kc.forEach(o),da=l(cs," for more information."),cs.forEach(o),pa=f(dt),qe=n(dt,"DIV",{class:!0});var Ur=a(qe);T(Pt.$$.fragment,Ur),ma=f(Ur),qt=n(Ur,"P",{});var Gr=a(qt);ha=l(Gr,"Instantiate a "),Lo=n(Gr,"A",{href:!0});var zc=a(Lo);fa=l(zc,"OwlViTConfig"),zc.forEach(o),ga=l(Gr,` (or a derived class) from owlvit text model configuration and owlvit vision
model configuration.`),Gr.forEach(o),Ur.forEach(o),dt.forEach(o),yr=f(t),re=n(t,"H2",{class:!0});var Xr=a(re);Me=n(Xr,"A",{id:!0,class:!0,href:!0});var Ec=a(Me);Es=n(Ec,"SPAN",{});var Pc=a(Es);T(Mt.$$.fragment,Pc),Pc.forEach(o),Ec.forEach(o),ua=f(Xr),Ps=n(Xr,"SPAN",{});var qc=a(Ps);_a=l(qc,"OwlViTTextConfig"),qc.forEach(o),Xr.forEach(o),kr=f(t),I=n(t,"DIV",{class:!0});var pt=a(I);T(Ct.$$.fragment,pt),wa=f(pt),ne=n(pt,"P",{});var ds=a(ne);ba=l(ds,"This is the configuration class to store the configuration of an "),Ao=n(ds,"A",{href:!0});var Mc=a(Ao);va=l(Mc,"OwlViTTextModel"),Mc.forEach(o),Ta=l(ds,`. It is used to instantiate an
OwlViT text encoder according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the OwlViT
`),It=n(ds,"A",{href:!0,rel:!0});var Cc=a(It);$a=l(Cc,"google/owlvit-base-patch32"),Cc.forEach(o),Oa=l(ds," architecture."),ds.forEach(o),xa=f(pt),ae=n(pt,"P",{});var ps=a(ae);Va=l(ps,"Configuration objects inherit from "),Wo=n(ps,"A",{href:!0});var Ic=a(Wo);ja=l(Ic,"PretrainedConfig"),Ic.forEach(o),ya=l(ps,` and can be used to control the model outputs. Read the
documentation from `),No=n(ps,"A",{href:!0});var Fc=a(No);ka=l(Fc,"PretrainedConfig"),Fc.forEach(o),za=l(ps," for more information."),ps.forEach(o),Ea=f(pt),T(Ce.$$.fragment,pt),pt.forEach(o),zr=f(t),ie=n(t,"H2",{class:!0});var Zr=a(ie);Ie=n(Zr,"A",{id:!0,class:!0,href:!0});var Dc=a(Ie);qs=n(Dc,"SPAN",{});var Lc=a(qs);T(Ft.$$.fragment,Lc),Lc.forEach(o),Dc.forEach(o),Pa=f(Zr),Ms=n(Zr,"SPAN",{});var Ac=a(Ms);qa=l(Ac,"OwlViTVisionConfig"),Ac.forEach(o),Zr.forEach(o),Er=f(t),F=n(t,"DIV",{class:!0});var mt=a(F);T(Dt.$$.fragment,mt),Ma=f(mt),le=n(mt,"P",{});var ms=a(le);Ca=l(ms,"This is the configuration class to store the configuration of an "),So=n(ms,"A",{href:!0});var Wc=a(So);Ia=l(Wc,"OwlViTVisionModel"),Wc.forEach(o),Fa=l(ms,`. It is used to instantiate
an OWL-ViT image encoder according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the OWL-ViT
`),Lt=n(ms,"A",{href:!0,rel:!0});var Nc=a(Lt);Da=l(Nc,"google/owlvit-base-patch32"),Nc.forEach(o),La=l(ms," architecture."),ms.forEach(o),Aa=f(mt),ce=n(mt,"P",{});var hs=a(ce);Wa=l(hs,"Configuration objects inherit from "),Bo=n(hs,"A",{href:!0});var Sc=a(Bo);Na=l(Sc,"PretrainedConfig"),Sc.forEach(o),Sa=l(hs,` and can be used to control the model outputs. Read the
documentation from `),Ro=n(hs,"A",{href:!0});var Bc=a(Ro);Ba=l(Bc,"PretrainedConfig"),Bc.forEach(o),Ra=l(hs," for more information."),hs.forEach(o),Ha=f(mt),T(Fe.$$.fragment,mt),mt.forEach(o),Pr=f(t),de=n(t,"H2",{class:!0});var Yr=a(de);De=n(Yr,"A",{id:!0,class:!0,href:!0});var Rc=a(De);Cs=n(Rc,"SPAN",{});var Hc=a(Cs);T(At.$$.fragment,Hc),Hc.forEach(o),Rc.forEach(o),Ua=f(Yr),Is=n(Yr,"SPAN",{});var Uc=a(Is);Ga=l(Uc,"OwlViTFeatureExtractor"),Uc.forEach(o),Yr.forEach(o),qr=f(t),E=n(t,"DIV",{class:!0});var H=a(E);T(Wt.$$.fragment,H),Xa=f(H),Fs=n(H,"P",{});var Gc=a(Fs);Za=l(Gc,"Constructs an OWL-ViT feature extractor."),Gc.forEach(o),Ya=f(H),Nt=n(H,"P",{});var Jr=a(Nt);Ja=l(Jr,"This feature extractor inherits from "),Ho=n(Jr,"A",{href:!0});var Xc=a(Ho);Ka=l(Xc,"FeatureExtractionMixin"),Xc.forEach(o),Qa=l(Jr,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Jr.forEach(o),ei=f(H),K=n(H,"DIV",{class:!0});var fs=a(K);T(St.$$.fragment,fs),ti=f(fs),Ds=n(fs,"P",{});var Zc=a(Ds);oi=l(Zc,"Main method to prepare for the model one or several image(s)."),Zc.forEach(o),si=f(fs),T(Le.$$.fragment,fs),fs.forEach(o),ri=f(H),Ae=n(H,"DIV",{class:!0});var Kr=a(Ae);T(Bt.$$.fragment,Kr),ni=f(Kr),Rt=n(Kr,"P",{});var Qr=a(Rt);ai=l(Qr,"Converts the output of "),Uo=n(Qr,"A",{href:!0});var Yc=a(Uo);ii=l(Yc,"OwlViTForObjectDetection"),Yc.forEach(o),li=l(Qr," into the format expected by the COCO api."),Qr.forEach(o),Kr.forEach(o),ci=f(H),We=n(H,"DIV",{class:!0});var en=a(We);T(Ht.$$.fragment,en),di=f(en),Ut=n(en,"P",{});var tn=a(Ut);pi=l(tn,"Converts the output of "),Go=n(tn,"A",{href:!0});var Jc=a(Go);mi=l(Jc,"OwlViTForObjectDetection.image_guided_detection()"),Jc.forEach(o),hi=l(tn,` into the format expected by the COCO
api.`),tn.forEach(o),en.forEach(o),H.forEach(o),Mr=f(t),pe=n(t,"H2",{class:!0});var on=a(pe);Ne=n(on,"A",{id:!0,class:!0,href:!0});var Kc=a(Ne);Ls=n(Kc,"SPAN",{});var Qc=a(Ls);T(Gt.$$.fragment,Qc),Qc.forEach(o),Kc.forEach(o),fi=f(on),As=n(on,"SPAN",{});var ed=a(As);gi=l(ed,"OwlViTProcessor"),ed.forEach(o),on.forEach(o),Cr=f(t),P=n(t,"DIV",{class:!0});var U=a(P);T(Xt.$$.fragment,U),ui=f(U),q=n(U,"P",{});var G=a(q);_i=l(G,"Constructs an OWL-ViT processor which wraps "),Xo=n(G,"A",{href:!0});var td=a(Xo);wi=l(td,"OwlViTFeatureExtractor"),td.forEach(o),bi=l(G," and "),Zo=n(G,"A",{href:!0});var od=a(Zo);vi=l(od,"CLIPTokenizer"),od.forEach(o),Ti=l(G,"/"),Yo=n(G,"A",{href:!0});var sd=a(Yo);$i=l(sd,"CLIPTokenizerFast"),sd.forEach(o),Oi=l(G,`
into a single processor that interits both the feature extractor and tokenizer functionalities. See the
`),Ws=n(G,"CODE",{});var rd=a(Ws);xi=l(rd,"__call__()"),rd.forEach(o),Vi=l(G," and "),Jo=n(G,"A",{href:!0});var nd=a(Jo);ji=l(nd,"decode()"),nd.forEach(o),yi=l(G," for more information."),G.forEach(o),ki=f(U),Se=n(U,"DIV",{class:!0});var sn=a(Se);T(Zt.$$.fragment,sn),zi=f(sn),Yt=n(sn,"P",{});var rn=a(Yt);Ei=l(rn,"This method forwards all its arguments to CLIPTokenizerFast\u2019s "),Ko=n(rn,"A",{href:!0});var ad=a(Ko);Pi=l(ad,"batch_decode()"),ad.forEach(o),qi=l(rn,`. Please
refer to the docstring of this method for more information.`),rn.forEach(o),sn.forEach(o),Mi=f(U),Be=n(U,"DIV",{class:!0});var nn=a(Be);T(Jt.$$.fragment,nn),Ci=f(nn),Kt=n(nn,"P",{});var an=a(Kt);Ii=l(an,"This method forwards all its arguments to CLIPTokenizerFast\u2019s "),Qo=n(an,"A",{href:!0});var id=a(Qo);Fi=l(id,"decode()"),id.forEach(o),Di=l(an,`. Please refer to
the docstring of this method for more information.`),an.forEach(o),nn.forEach(o),Li=f(U),Re=n(U,"DIV",{class:!0});var ln=a(Re);T(Qt.$$.fragment,ln),Ai=f(ln),eo=n(ln,"P",{});var cn=a(eo);Wi=l(cn,"This method forwards all its arguments to "),es=n(cn,"A",{href:!0});var ld=a(es);Ni=l(ld,"OwlViTFeatureExtractor.post_process()"),ld.forEach(o),Si=l(cn,`. Please refer to the
docstring of this method for more information.`),cn.forEach(o),ln.forEach(o),Bi=f(U),He=n(U,"DIV",{class:!0});var dn=a(He);T(to.$$.fragment,dn),Ri=f(dn),oo=n(dn,"P",{});var pn=a(oo);Hi=l(pn,"This method forwards all its arguments to "),Ns=n(pn,"CODE",{});var cd=a(Ns);Ui=l(cd,"OwlViTFeatureExtractor.post_process_one_shot_object_detection"),cd.forEach(o),Gi=l(pn,`.
Please refer to the docstring of this method for more information.`),pn.forEach(o),dn.forEach(o),U.forEach(o),Ir=f(t),me=n(t,"H2",{class:!0});var mn=a(me);Ue=n(mn,"A",{id:!0,class:!0,href:!0});var dd=a(Ue);Ss=n(dd,"SPAN",{});var pd=a(Ss);T(so.$$.fragment,pd),pd.forEach(o),dd.forEach(o),Xi=f(mn),Bs=n(mn,"SPAN",{});var md=a(Bs);Zi=l(md,"OwlViTModel"),md.forEach(o),mn.forEach(o),Fr=f(t),D=n(t,"DIV",{class:!0});var ht=a(D);T(ro.$$.fragment,ht),Yi=f(ht),L=n(ht,"DIV",{class:!0});var ft=a(L);T(no.$$.fragment,ft),Ji=f(ft),he=n(ft,"P",{});var gs=a(he);Ki=l(gs,"The "),ts=n(gs,"A",{href:!0});var hd=a(ts);Qi=l(hd,"OwlViTModel"),hd.forEach(o),el=l(gs," forward method, overrides the "),Rs=n(gs,"CODE",{});var fd=a(Rs);tl=l(fd,"__call__"),fd.forEach(o),ol=l(gs," special method."),gs.forEach(o),sl=f(ft),T(Ge.$$.fragment,ft),rl=f(ft),T(Xe.$$.fragment,ft),ft.forEach(o),nl=f(ht),A=n(ht,"DIV",{class:!0});var gt=a(A);T(ao.$$.fragment,gt),al=f(gt),fe=n(gt,"P",{});var us=a(fe);il=l(us,"The "),os=n(us,"A",{href:!0});var gd=a(os);ll=l(gd,"OwlViTModel"),gd.forEach(o),cl=l(us," forward method, overrides the "),Hs=n(us,"CODE",{});var ud=a(Hs);dl=l(ud,"__call__"),ud.forEach(o),pl=l(us," special method."),us.forEach(o),ml=f(gt),T(Ze.$$.fragment,gt),hl=f(gt),T(Ye.$$.fragment,gt),gt.forEach(o),fl=f(ht),W=n(ht,"DIV",{class:!0});var ut=a(W);T(io.$$.fragment,ut),gl=f(ut),ge=n(ut,"P",{});var _s=a(ge);ul=l(_s,"The "),ss=n(_s,"A",{href:!0});var _d=a(ss);_l=l(_d,"OwlViTModel"),_d.forEach(o),wl=l(_s," forward method, overrides the "),Us=n(_s,"CODE",{});var wd=a(Us);bl=l(wd,"__call__"),wd.forEach(o),vl=l(_s," special method."),_s.forEach(o),Tl=f(ut),T(Je.$$.fragment,ut),$l=f(ut),T(Ke.$$.fragment,ut),ut.forEach(o),ht.forEach(o),Dr=f(t),ue=n(t,"H2",{class:!0});var hn=a(ue);Qe=n(hn,"A",{id:!0,class:!0,href:!0});var bd=a(Qe);Gs=n(bd,"SPAN",{});var vd=a(Gs);T(lo.$$.fragment,vd),vd.forEach(o),bd.forEach(o),Ol=f(hn),Xs=n(hn,"SPAN",{});var Td=a(Xs);xl=l(Td,"OwlViTTextModel"),Td.forEach(o),hn.forEach(o),Lr=f(t),_e=n(t,"DIV",{class:!0});var fn=a(_e);T(co.$$.fragment,fn),Vl=f(fn),N=n(fn,"DIV",{class:!0});var _t=a(N);T(po.$$.fragment,_t),jl=f(_t),we=n(_t,"P",{});var ws=a(we);yl=l(ws,"The "),rs=n(ws,"A",{href:!0});var $d=a(rs);kl=l($d,"OwlViTTextModel"),$d.forEach(o),zl=l(ws," forward method, overrides the "),Zs=n(ws,"CODE",{});var Od=a(Zs);El=l(Od,"__call__"),Od.forEach(o),Pl=l(ws," special method."),ws.forEach(o),ql=f(_t),T(et.$$.fragment,_t),Ml=f(_t),T(tt.$$.fragment,_t),_t.forEach(o),fn.forEach(o),Ar=f(t),be=n(t,"H2",{class:!0});var gn=a(be);ot=n(gn,"A",{id:!0,class:!0,href:!0});var xd=a(ot);Ys=n(xd,"SPAN",{});var Vd=a(Ys);T(mo.$$.fragment,Vd),Vd.forEach(o),xd.forEach(o),Cl=f(gn),Js=n(gn,"SPAN",{});var jd=a(Js);Il=l(jd,"OwlViTVisionModel"),jd.forEach(o),gn.forEach(o),Wr=f(t),ve=n(t,"DIV",{class:!0});var un=a(ve);T(ho.$$.fragment,un),Fl=f(un),S=n(un,"DIV",{class:!0});var wt=a(S);T(fo.$$.fragment,wt),Dl=f(wt),Te=n(wt,"P",{});var bs=a(Te);Ll=l(bs,"The "),ns=n(bs,"A",{href:!0});var yd=a(ns);Al=l(yd,"OwlViTVisionModel"),yd.forEach(o),Wl=l(bs," forward method, overrides the "),Ks=n(bs,"CODE",{});var kd=a(Ks);Nl=l(kd,"__call__"),kd.forEach(o),Sl=l(bs," special method."),bs.forEach(o),Bl=f(wt),T(st.$$.fragment,wt),Rl=f(wt),T(rt.$$.fragment,wt),wt.forEach(o),un.forEach(o),Nr=f(t),$e=n(t,"H2",{class:!0});var _n=a($e);nt=n(_n,"A",{id:!0,class:!0,href:!0});var zd=a(nt);Qs=n(zd,"SPAN",{});var Ed=a(Qs);T(go.$$.fragment,Ed),Ed.forEach(o),zd.forEach(o),Hl=f(_n),er=n(_n,"SPAN",{});var Pd=a(er);Ul=l(Pd,"OwlViTForObjectDetection"),Pd.forEach(o),_n.forEach(o),Sr=f(t),Z=n(t,"DIV",{class:!0});var vs=a(Z);T(uo.$$.fragment,vs),Gl=f(vs),B=n(vs,"DIV",{class:!0});var bt=a(B);T(_o.$$.fragment,bt),Xl=f(bt),Oe=n(bt,"P",{});var Ts=a(Oe);Zl=l(Ts,"The "),as=n(Ts,"A",{href:!0});var qd=a(as);Yl=l(qd,"OwlViTForObjectDetection"),qd.forEach(o),Jl=l(Ts," forward method, overrides the "),tr=n(Ts,"CODE",{});var Md=a(tr);Kl=l(Md,"__call__"),Md.forEach(o),Ql=l(Ts," special method."),Ts.forEach(o),ec=f(bt),T(at.$$.fragment,bt),tc=f(bt),T(it.$$.fragment,bt),bt.forEach(o),oc=f(vs),R=n(vs,"DIV",{class:!0});var vt=a(R);T(wo.$$.fragment,vt),sc=f(vt),xe=n(vt,"P",{});var $s=a(xe);rc=l($s,"The "),is=n($s,"A",{href:!0});var Cd=a(is);nc=l(Cd,"OwlViTForObjectDetection"),Cd.forEach(o),ac=l($s," forward method, overrides the "),or=n($s,"CODE",{});var Id=a(or);ic=l(Id,"__call__"),Id.forEach(o),lc=l($s," special method."),$s.forEach(o),cc=f(vt),T(lt.$$.fragment,vt),dc=f(vt),T(ct.$$.fragment,vt),vt.forEach(o),vs.forEach(o),this.h()},h(){d(c,"name","hf:doc:metadata"),d(c,"content",JSON.stringify(np)),d(m,"id","owlvit"),d(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m,"href","#owlvit"),d(g,"class","relative group"),d(ye,"id","overview"),d(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ye,"href","#overview"),d(ee,"class","relative group"),d(Ot,"href","https://arxiv.org/abs/2205.06230"),d(Ot,"rel","nofollow"),d(ze,"id","usage"),d(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ze,"href","#usage"),d(te,"class","relative group"),d(jo,"href","clip"),d(yo,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(ko,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(zo,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),d(Eo,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(Po,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(qo,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),d(Mo,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection"),d(jt,"href","https://huggingface.co/adirik"),d(jt,"rel","nofollow"),d(yt,"href","https://github.com/google-research/scenic/tree/main/scenic/projects/owl_vit"),d(yt,"rel","nofollow"),d(Pe,"id","transformers.OwlViTConfig"),d(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pe,"href","#transformers.OwlViTConfig"),d(oe,"class","relative group"),d(Co,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),d(Io,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),d(Et,"href","https://huggingface.co/google/owlvit-base-patch32"),d(Et,"rel","nofollow"),d(Fo,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),d(Do,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),d(Lo,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Me,"id","transformers.OwlViTTextConfig"),d(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Me,"href","#transformers.OwlViTTextConfig"),d(re,"class","relative group"),d(Ao,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTTextModel"),d(It,"href","https://huggingface.co/google/owlvit-base-patch32"),d(It,"rel","nofollow"),d(Wo,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),d(No,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),d(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ie,"id","transformers.OwlViTVisionConfig"),d(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ie,"href","#transformers.OwlViTVisionConfig"),d(ie,"class","relative group"),d(So,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTVisionModel"),d(Lt,"href","https://huggingface.co/google/owlvit-base-patch32"),d(Lt,"rel","nofollow"),d(Bo,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),d(Ro,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(De,"id","transformers.OwlViTFeatureExtractor"),d(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(De,"href","#transformers.OwlViTFeatureExtractor"),d(de,"class","relative group"),d(Ho,"href","/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),d(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection"),d(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Go,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection.image_guided_detection"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ne,"id","transformers.OwlViTProcessor"),d(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ne,"href","#transformers.OwlViTProcessor"),d(pe,"class","relative group"),d(Xo,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(Zo,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(Yo,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Jo,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor.decode"),d(Ko,"href","/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.batch_decode"),d(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"href","/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.decode"),d(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(es,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor.post_process"),d(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ue,"id","transformers.OwlViTModel"),d(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ue,"href","#transformers.OwlViTModel"),d(me,"class","relative group"),d(ts,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),d(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(os,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),d(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ss,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),d(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qe,"id","transformers.OwlViTTextModel"),d(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qe,"href","#transformers.OwlViTTextModel"),d(ue,"class","relative group"),d(rs,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTTextModel"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ot,"id","transformers.OwlViTVisionModel"),d(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ot,"href","#transformers.OwlViTVisionModel"),d(be,"class","relative group"),d(ns,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTVisionModel"),d(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nt,"id","transformers.OwlViTForObjectDetection"),d(nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nt,"href","#transformers.OwlViTForObjectDetection"),d($e,"class","relative group"),d(as,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection"),d(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(is,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,u){e(document.head,c),_(t,b,u),_(t,g,u),e(g,m),e(m,w),$(s,w,null),e(g,p),e(g,y),e(y,wn),_(t,ur,u),_(t,ee,u),e(ee,ye),e(ye,Os),$($t,Os,null),e(ee,bn),e(ee,xs),e(xs,vn),_(t,_r,u),_(t,ke,u),e(ke,Tn),e(ke,Ot),e(Ot,$n),e(ke,On),_(t,wr,u),_(t,xo,u),e(xo,xn),_(t,br,u),_(t,Vo,u),e(Vo,Vs),e(Vs,Vn),_(t,vr,u),_(t,te,u),e(te,ze),e(ze,js),$(xt,js,null),e(te,jn),e(te,ys),e(ys,yn),_(t,Tr,u),_(t,Ee,u),e(Ee,kn),e(Ee,jo),e(jo,zn),e(Ee,En),_(t,$r,u),_(t,z,u),e(z,yo),e(yo,Pn),e(z,qn),e(z,ko),e(ko,Mn),e(z,Cn),e(z,zo),e(zo,In),e(z,Fn),e(z,Eo),e(Eo,Dn),e(z,Ln),e(z,Po),e(Po,An),e(z,Wn),e(z,qo),e(qo,Nn),e(z,Sn),e(z,Mo),e(Mo,Bn),e(z,Rn),_(t,Or,u),$(Vt,t,u),_(t,xr,u),_(t,Y,u),e(Y,Hn),e(Y,jt),e(jt,Un),e(Y,Gn),e(Y,yt),e(yt,Xn),e(Y,Zn),_(t,Vr,u),_(t,oe,u),e(oe,Pe),e(Pe,ks),$(kt,ks,null),e(oe,Yn),e(oe,zs),e(zs,Jn),_(t,jr,u),_(t,C,u),$(zt,C,null),e(C,Kn),e(C,J),e(J,Co),e(Co,Qn),e(J,ea),e(J,Io),e(Io,ta),e(J,oa),e(J,Et),e(Et,sa),e(J,ra),e(C,na),e(C,se),e(se,aa),e(se,Fo),e(Fo,ia),e(se,la),e(se,Do),e(Do,ca),e(se,da),e(C,pa),e(C,qe),$(Pt,qe,null),e(qe,ma),e(qe,qt),e(qt,ha),e(qt,Lo),e(Lo,fa),e(qt,ga),_(t,yr,u),_(t,re,u),e(re,Me),e(Me,Es),$(Mt,Es,null),e(re,ua),e(re,Ps),e(Ps,_a),_(t,kr,u),_(t,I,u),$(Ct,I,null),e(I,wa),e(I,ne),e(ne,ba),e(ne,Ao),e(Ao,va),e(ne,Ta),e(ne,It),e(It,$a),e(ne,Oa),e(I,xa),e(I,ae),e(ae,Va),e(ae,Wo),e(Wo,ja),e(ae,ya),e(ae,No),e(No,ka),e(ae,za),e(I,Ea),$(Ce,I,null),_(t,zr,u),_(t,ie,u),e(ie,Ie),e(Ie,qs),$(Ft,qs,null),e(ie,Pa),e(ie,Ms),e(Ms,qa),_(t,Er,u),_(t,F,u),$(Dt,F,null),e(F,Ma),e(F,le),e(le,Ca),e(le,So),e(So,Ia),e(le,Fa),e(le,Lt),e(Lt,Da),e(le,La),e(F,Aa),e(F,ce),e(ce,Wa),e(ce,Bo),e(Bo,Na),e(ce,Sa),e(ce,Ro),e(Ro,Ba),e(ce,Ra),e(F,Ha),$(Fe,F,null),_(t,Pr,u),_(t,de,u),e(de,De),e(De,Cs),$(At,Cs,null),e(de,Ua),e(de,Is),e(Is,Ga),_(t,qr,u),_(t,E,u),$(Wt,E,null),e(E,Xa),e(E,Fs),e(Fs,Za),e(E,Ya),e(E,Nt),e(Nt,Ja),e(Nt,Ho),e(Ho,Ka),e(Nt,Qa),e(E,ei),e(E,K),$(St,K,null),e(K,ti),e(K,Ds),e(Ds,oi),e(K,si),$(Le,K,null),e(E,ri),e(E,Ae),$(Bt,Ae,null),e(Ae,ni),e(Ae,Rt),e(Rt,ai),e(Rt,Uo),e(Uo,ii),e(Rt,li),e(E,ci),e(E,We),$(Ht,We,null),e(We,di),e(We,Ut),e(Ut,pi),e(Ut,Go),e(Go,mi),e(Ut,hi),_(t,Mr,u),_(t,pe,u),e(pe,Ne),e(Ne,Ls),$(Gt,Ls,null),e(pe,fi),e(pe,As),e(As,gi),_(t,Cr,u),_(t,P,u),$(Xt,P,null),e(P,ui),e(P,q),e(q,_i),e(q,Xo),e(Xo,wi),e(q,bi),e(q,Zo),e(Zo,vi),e(q,Ti),e(q,Yo),e(Yo,$i),e(q,Oi),e(q,Ws),e(Ws,xi),e(q,Vi),e(q,Jo),e(Jo,ji),e(q,yi),e(P,ki),e(P,Se),$(Zt,Se,null),e(Se,zi),e(Se,Yt),e(Yt,Ei),e(Yt,Ko),e(Ko,Pi),e(Yt,qi),e(P,Mi),e(P,Be),$(Jt,Be,null),e(Be,Ci),e(Be,Kt),e(Kt,Ii),e(Kt,Qo),e(Qo,Fi),e(Kt,Di),e(P,Li),e(P,Re),$(Qt,Re,null),e(Re,Ai),e(Re,eo),e(eo,Wi),e(eo,es),e(es,Ni),e(eo,Si),e(P,Bi),e(P,He),$(to,He,null),e(He,Ri),e(He,oo),e(oo,Hi),e(oo,Ns),e(Ns,Ui),e(oo,Gi),_(t,Ir,u),_(t,me,u),e(me,Ue),e(Ue,Ss),$(so,Ss,null),e(me,Xi),e(me,Bs),e(Bs,Zi),_(t,Fr,u),_(t,D,u),$(ro,D,null),e(D,Yi),e(D,L),$(no,L,null),e(L,Ji),e(L,he),e(he,Ki),e(he,ts),e(ts,Qi),e(he,el),e(he,Rs),e(Rs,tl),e(he,ol),e(L,sl),$(Ge,L,null),e(L,rl),$(Xe,L,null),e(D,nl),e(D,A),$(ao,A,null),e(A,al),e(A,fe),e(fe,il),e(fe,os),e(os,ll),e(fe,cl),e(fe,Hs),e(Hs,dl),e(fe,pl),e(A,ml),$(Ze,A,null),e(A,hl),$(Ye,A,null),e(D,fl),e(D,W),$(io,W,null),e(W,gl),e(W,ge),e(ge,ul),e(ge,ss),e(ss,_l),e(ge,wl),e(ge,Us),e(Us,bl),e(ge,vl),e(W,Tl),$(Je,W,null),e(W,$l),$(Ke,W,null),_(t,Dr,u),_(t,ue,u),e(ue,Qe),e(Qe,Gs),$(lo,Gs,null),e(ue,Ol),e(ue,Xs),e(Xs,xl),_(t,Lr,u),_(t,_e,u),$(co,_e,null),e(_e,Vl),e(_e,N),$(po,N,null),e(N,jl),e(N,we),e(we,yl),e(we,rs),e(rs,kl),e(we,zl),e(we,Zs),e(Zs,El),e(we,Pl),e(N,ql),$(et,N,null),e(N,Ml),$(tt,N,null),_(t,Ar,u),_(t,be,u),e(be,ot),e(ot,Ys),$(mo,Ys,null),e(be,Cl),e(be,Js),e(Js,Il),_(t,Wr,u),_(t,ve,u),$(ho,ve,null),e(ve,Fl),e(ve,S),$(fo,S,null),e(S,Dl),e(S,Te),e(Te,Ll),e(Te,ns),e(ns,Al),e(Te,Wl),e(Te,Ks),e(Ks,Nl),e(Te,Sl),e(S,Bl),$(st,S,null),e(S,Rl),$(rt,S,null),_(t,Nr,u),_(t,$e,u),e($e,nt),e(nt,Qs),$(go,Qs,null),e($e,Hl),e($e,er),e(er,Ul),_(t,Sr,u),_(t,Z,u),$(uo,Z,null),e(Z,Gl),e(Z,B),$(_o,B,null),e(B,Xl),e(B,Oe),e(Oe,Zl),e(Oe,as),e(as,Yl),e(Oe,Jl),e(Oe,tr),e(tr,Kl),e(Oe,Ql),e(B,ec),$(at,B,null),e(B,tc),$(it,B,null),e(Z,oc),e(Z,R),$(wo,R,null),e(R,sc),e(R,xe),e(xe,rc),e(xe,is),e(is,nc),e(xe,ac),e(xe,or),e(or,ic),e(xe,lc),e(R,cc),$(lt,R,null),e(R,dc),$(ct,R,null),Br=!0},p(t,[u]){const bo={};u&2&&(bo.$$scope={dirty:u,ctx:t}),Ce.$set(bo);const sr={};u&2&&(sr.$$scope={dirty:u,ctx:t}),Fe.$set(sr);const rr={};u&2&&(rr.$$scope={dirty:u,ctx:t}),Le.$set(rr);const nr={};u&2&&(nr.$$scope={dirty:u,ctx:t}),Ge.$set(nr);const vo={};u&2&&(vo.$$scope={dirty:u,ctx:t}),Xe.$set(vo);const ar={};u&2&&(ar.$$scope={dirty:u,ctx:t}),Ze.$set(ar);const ir={};u&2&&(ir.$$scope={dirty:u,ctx:t}),Ye.$set(ir);const lr={};u&2&&(lr.$$scope={dirty:u,ctx:t}),Je.$set(lr);const To={};u&2&&(To.$$scope={dirty:u,ctx:t}),Ke.$set(To);const cr={};u&2&&(cr.$$scope={dirty:u,ctx:t}),et.$set(cr);const dr={};u&2&&(dr.$$scope={dirty:u,ctx:t}),tt.$set(dr);const pr={};u&2&&(pr.$$scope={dirty:u,ctx:t}),st.$set(pr);const mr={};u&2&&(mr.$$scope={dirty:u,ctx:t}),rt.$set(mr);const $o={};u&2&&($o.$$scope={dirty:u,ctx:t}),at.$set($o);const hr={};u&2&&(hr.$$scope={dirty:u,ctx:t}),it.$set(hr);const fr={};u&2&&(fr.$$scope={dirty:u,ctx:t}),lt.$set(fr);const gr={};u&2&&(gr.$$scope={dirty:u,ctx:t}),ct.$set(gr)},i(t){Br||(O(s.$$.fragment,t),O($t.$$.fragment,t),O(xt.$$.fragment,t),O(Vt.$$.fragment,t),O(kt.$$.fragment,t),O(zt.$$.fragment,t),O(Pt.$$.fragment,t),O(Mt.$$.fragment,t),O(Ct.$$.fragment,t),O(Ce.$$.fragment,t),O(Ft.$$.fragment,t),O(Dt.$$.fragment,t),O(Fe.$$.fragment,t),O(At.$$.fragment,t),O(Wt.$$.fragment,t),O(St.$$.fragment,t),O(Le.$$.fragment,t),O(Bt.$$.fragment,t),O(Ht.$$.fragment,t),O(Gt.$$.fragment,t),O(Xt.$$.fragment,t),O(Zt.$$.fragment,t),O(Jt.$$.fragment,t),O(Qt.$$.fragment,t),O(to.$$.fragment,t),O(so.$$.fragment,t),O(ro.$$.fragment,t),O(no.$$.fragment,t),O(Ge.$$.fragment,t),O(Xe.$$.fragment,t),O(ao.$$.fragment,t),O(Ze.$$.fragment,t),O(Ye.$$.fragment,t),O(io.$$.fragment,t),O(Je.$$.fragment,t),O(Ke.$$.fragment,t),O(lo.$$.fragment,t),O(co.$$.fragment,t),O(po.$$.fragment,t),O(et.$$.fragment,t),O(tt.$$.fragment,t),O(mo.$$.fragment,t),O(ho.$$.fragment,t),O(fo.$$.fragment,t),O(st.$$.fragment,t),O(rt.$$.fragment,t),O(go.$$.fragment,t),O(uo.$$.fragment,t),O(_o.$$.fragment,t),O(at.$$.fragment,t),O(it.$$.fragment,t),O(wo.$$.fragment,t),O(lt.$$.fragment,t),O(ct.$$.fragment,t),Br=!0)},o(t){x(s.$$.fragment,t),x($t.$$.fragment,t),x(xt.$$.fragment,t),x(Vt.$$.fragment,t),x(kt.$$.fragment,t),x(zt.$$.fragment,t),x(Pt.$$.fragment,t),x(Mt.$$.fragment,t),x(Ct.$$.fragment,t),x(Ce.$$.fragment,t),x(Ft.$$.fragment,t),x(Dt.$$.fragment,t),x(Fe.$$.fragment,t),x(At.$$.fragment,t),x(Wt.$$.fragment,t),x(St.$$.fragment,t),x(Le.$$.fragment,t),x(Bt.$$.fragment,t),x(Ht.$$.fragment,t),x(Gt.$$.fragment,t),x(Xt.$$.fragment,t),x(Zt.$$.fragment,t),x(Jt.$$.fragment,t),x(Qt.$$.fragment,t),x(to.$$.fragment,t),x(so.$$.fragment,t),x(ro.$$.fragment,t),x(no.$$.fragment,t),x(Ge.$$.fragment,t),x(Xe.$$.fragment,t),x(ao.$$.fragment,t),x(Ze.$$.fragment,t),x(Ye.$$.fragment,t),x(io.$$.fragment,t),x(Je.$$.fragment,t),x(Ke.$$.fragment,t),x(lo.$$.fragment,t),x(co.$$.fragment,t),x(po.$$.fragment,t),x(et.$$.fragment,t),x(tt.$$.fragment,t),x(mo.$$.fragment,t),x(ho.$$.fragment,t),x(fo.$$.fragment,t),x(st.$$.fragment,t),x(rt.$$.fragment,t),x(go.$$.fragment,t),x(uo.$$.fragment,t),x(_o.$$.fragment,t),x(at.$$.fragment,t),x(it.$$.fragment,t),x(wo.$$.fragment,t),x(lt.$$.fragment,t),x(ct.$$.fragment,t),Br=!1},d(t){o(c),t&&o(b),t&&o(g),V(s),t&&o(ur),t&&o(ee),V($t),t&&o(_r),t&&o(ke),t&&o(wr),t&&o(xo),t&&o(br),t&&o(Vo),t&&o(vr),t&&o(te),V(xt),t&&o(Tr),t&&o(Ee),t&&o($r),t&&o(z),t&&o(Or),V(Vt,t),t&&o(xr),t&&o(Y),t&&o(Vr),t&&o(oe),V(kt),t&&o(jr),t&&o(C),V(zt),V(Pt),t&&o(yr),t&&o(re),V(Mt),t&&o(kr),t&&o(I),V(Ct),V(Ce),t&&o(zr),t&&o(ie),V(Ft),t&&o(Er),t&&o(F),V(Dt),V(Fe),t&&o(Pr),t&&o(de),V(At),t&&o(qr),t&&o(E),V(Wt),V(St),V(Le),V(Bt),V(Ht),t&&o(Mr),t&&o(pe),V(Gt),t&&o(Cr),t&&o(P),V(Xt),V(Zt),V(Jt),V(Qt),V(to),t&&o(Ir),t&&o(me),V(so),t&&o(Fr),t&&o(D),V(ro),V(no),V(Ge),V(Xe),V(ao),V(Ze),V(Ye),V(io),V(Je),V(Ke),t&&o(Dr),t&&o(ue),V(lo),t&&o(Lr),t&&o(_e),V(co),V(po),V(et),V(tt),t&&o(Ar),t&&o(be),V(mo),t&&o(Wr),t&&o(ve),V(ho),V(fo),V(st),V(rt),t&&o(Nr),t&&o($e),V(go),t&&o(Sr),t&&o(Z),V(uo),V(_o),V(at),V(it),V(wo),V(lt),V(ct)}}}const np={local:"owlvit",sections:[{local:"overview",title:"Overview"},{local:"usage",title:"Usage"},{local:"transformers.OwlViTConfig",title:"OwlViTConfig"},{local:"transformers.OwlViTTextConfig",title:"OwlViTTextConfig"},{local:"transformers.OwlViTVisionConfig",title:"OwlViTVisionConfig"},{local:"transformers.OwlViTFeatureExtractor",title:"OwlViTFeatureExtractor"},{local:"transformers.OwlViTProcessor",title:"OwlViTProcessor"},{local:"transformers.OwlViTModel",title:"OwlViTModel"},{local:"transformers.OwlViTTextModel",title:"OwlViTTextModel"},{local:"transformers.OwlViTVisionModel",title:"OwlViTVisionModel"},{local:"transformers.OwlViTForObjectDetection",title:"OwlViTForObjectDetection"}],title:"OWL-ViT"};function ap(j){return Wd(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class hp extends Fd{constructor(c){super();Dd(this,c,ap,rp,Ld,{})}}export{hp as default,np as metadata};
