import{S as Bl,i as Ul,s as Wl,e as r,k as c,w as F,t as s,M as Vl,c as n,d as o,m,a as i,x as v,h as a,b as l,N as Gl,G as e,g as f,y as w,q as x,o as y,B as M,v as Kl,L as ta}from"../../chunks/vendor-hf-doc-builder.js";import{T as Zs}from"../../chunks/Tip-hf-doc-builder.js";import{D as P}from"../../chunks/Docstring-hf-doc-builder.js";import{C as oa}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Ne}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as ea}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";import{P as Ql}from"../../chunks/PipelineTag-hf-doc-builder.js";function Xl(E){let p,b,g,u,k;return{c(){p=r("p"),b=s(`This is a recently introduced model so the API hasn\u2019t been tested extensively. There may be some bugs or slight
breaking changes to fix it in the future. If you see something strange, file a `),g=r("a"),u=s("Github Issue"),k=s("."),this.h()},l(d){p=n(d,"P",{});var _=i(p);b=a(_,`This is a recently introduced model so the API hasn\u2019t been tested extensively. There may be some bugs or slight
breaking changes to fix it in the future. If you see something strange, file a `),g=n(_,"A",{href:!0,rel:!0});var z=i(g);u=a(z,"Github Issue"),z.forEach(o),k=a(_,"."),_.forEach(o),this.h()},h(){l(g,"href","https://github.com/huggingface/transformers/issues/new?assignees=&labels=&template=bug-report.md&title"),l(g,"rel","nofollow")},m(d,_){f(d,p,_),e(p,b),e(p,g),e(g,u),e(p,k)},d(d){d&&o(p)}}}function Yl(E){let p,b,g,u,k;return u=new oa({props:{code:`from transformers import MaskFormerConfig, MaskFormerModel

# Initializing a MaskFormer facebook/maskformer-swin-base-ade configuration
configuration = MaskFormerConfig()

# Initializing a model (with random weights) from the facebook/maskformer-swin-base-ade style configuration
model = MaskFormerModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MaskFormerConfig, MaskFormerModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a MaskFormer facebook/maskformer-swin-base-ade configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = MaskFormerConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model (with random weights) from the facebook/maskformer-swin-base-ade style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MaskFormerModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){p=r("p"),b=s("Examples:"),g=c(),F(u.$$.fragment)},l(d){p=n(d,"P",{});var _=i(p);b=a(_,"Examples:"),_.forEach(o),g=m(d),v(u.$$.fragment,d)},m(d,_){f(d,p,_),e(p,b),f(d,g,_),w(u,d,_),k=!0},p:ta,i(d){k||(x(u.$$.fragment,d),k=!0)},o(d){y(u.$$.fragment,d),k=!1},d(d){d&&o(p),d&&o(g),M(u,d)}}}function Jl(E){let p,b;return{c(){p=r("p"),b=s(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(g){p=n(g,"P",{});var u=i(p);b=a(u,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),u.forEach(o)},m(g,u){f(g,p,u),e(p,b)},d(g){g&&o(p)}}}function Zl(E){let p,b,g,u,k;return{c(){p=r("p"),b=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),u=s("Module"),k=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){p=n(d,"P",{});var _=i(p);b=a(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(_,"CODE",{});var z=i(g);u=a(z,"Module"),z.forEach(o),k=a(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(d,_){f(d,p,_),e(p,b),e(p,g),e(g,u),e(p,k)},d(d){d&&o(p)}}}function ed(E){let p,b,g,u,k;return u=new oa({props:{code:`from transformers import MaskFormerFeatureExtractor, MaskFormerModel
from PIL import Image
import requests

# load MaskFormer fine-tuned on ADE20k semantic segmentation
feature_extractor = MaskFormerFeatureExtractor.from_pretrained("facebook/maskformer-swin-base-ade")
model = MaskFormerModel.from_pretrained("facebook/maskformer-swin-base-ade")

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

inputs = feature_extractor(image, return_tensors="pt")

# forward pass
outputs = model(**inputs)

# the decoder of MaskFormer outputs hidden states of shape (batch_size, num_queries, hidden_size)
transformer_decoder_last_hidden_state = outputs.transformer_decoder_last_hidden_state
list(transformer_decoder_last_hidden_state.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MaskFormerFeatureExtractor, MaskFormerModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load MaskFormer fine-tuned on ADE20k semantic segmentation</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MaskFormerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/maskformer-swin-base-ade&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MaskFormerModel.from_pretrained(<span class="hljs-string">&quot;facebook/maskformer-swin-base-ade&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># forward pass</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># the decoder of MaskFormer outputs hidden states of shape (batch_size, num_queries, hidden_size)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>transformer_decoder_last_hidden_state = outputs.transformer_decoder_last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(transformer_decoder_last_hidden_state.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">256</span>]`}}),{c(){p=r("p"),b=s("Examples:"),g=c(),F(u.$$.fragment)},l(d){p=n(d,"P",{});var _=i(p);b=a(_,"Examples:"),_.forEach(o),g=m(d),v(u.$$.fragment,d)},m(d,_){f(d,p,_),e(p,b),f(d,g,_),w(u,d,_),k=!0},p:ta,i(d){k||(x(u.$$.fragment,d),k=!0)},o(d){y(u.$$.fragment,d),k=!1},d(d){d&&o(p),d&&o(g),M(u,d)}}}function td(E){let p,b,g,u,k;return{c(){p=r("p"),b=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),u=s("Module"),k=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){p=n(d,"P",{});var _=i(p);b=a(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(_,"CODE",{});var z=i(g);u=a(z,"Module"),z.forEach(o),k=a(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(d,_){f(d,p,_),e(p,b),e(p,g),e(g,u),e(p,k)},d(d){d&&o(p)}}}function od(E){let p,b,g,u,k;return u=new oa({props:{code:`from transformers import MaskFormerFeatureExtractor, MaskFormerForInstanceSegmentation
from PIL import Image
import requests

# load MaskFormer fine-tuned on ADE20k semantic segmentation
feature_extractor = MaskFormerFeatureExtractor.from_pretrained("facebook/maskformer-swin-base-ade")
model = MaskFormerForInstanceSegmentation.from_pretrained("facebook/maskformer-swin-base-ade")

url = (
    "https://huggingface.co/datasets/hf-internal-testing/fixtures_ade20k/resolve/main/ADE_val_00000001.jpg"
)
image = Image.open(requests.get(url, stream=True).raw)
inputs = feature_extractor(images=image, return_tensors="pt")

outputs = model(**inputs)
# model predicts class_queries_logits of shape \`(batch_size, num_queries)\`
# and masks_queries_logits of shape \`(batch_size, num_queries, height, width)\`
class_queries_logits = outputs.class_queries_logits
masks_queries_logits = outputs.masks_queries_logits

# you can pass them to feature_extractor for postprocessing
predicted_semantic_map = feature_extractor.post_process_semantic_segmentation(
    outputs, target_sizes=[image.size[::-1]]
)[0]

# we refer to the demo notebooks for visualization (see "Resources" section in the MaskFormer docs)
list(predicted_semantic_map.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MaskFormerFeatureExtractor, MaskFormerForInstanceSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load MaskFormer fine-tuned on ADE20k semantic segmentation</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MaskFormerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/maskformer-swin-base-ade&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MaskFormerForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;facebook/maskformer-swin-base-ade&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>url = (
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;https://huggingface.co/datasets/hf-internal-testing/fixtures_ade20k/resolve/main/ADE_val_00000001.jpg&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts class_queries_logits of shape \`(batch_size, num_queries)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># and masks_queries_logits of shape \`(batch_size, num_queries, height, width)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>class_queries_logits = outputs.class_queries_logits
<span class="hljs-meta">&gt;&gt;&gt; </span>masks_queries_logits = outputs.masks_queries_logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># you can pass them to feature_extractor for postprocessing</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_semantic_map = feature_extractor.post_process_semantic_segmentation(
<span class="hljs-meta">... </span>    outputs, target_sizes=[image.size[::-<span class="hljs-number">1</span>]]
<span class="hljs-meta">... </span>)[<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># we refer to the demo notebooks for visualization (see &quot;Resources&quot; section in the MaskFormer docs)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(predicted_semantic_map.shape)
[<span class="hljs-number">512</span>, <span class="hljs-number">683</span>]`}}),{c(){p=r("p"),b=s("Semantic segmentation example:"),g=c(),F(u.$$.fragment)},l(d){p=n(d,"P",{});var _=i(p);b=a(_,"Semantic segmentation example:"),_.forEach(o),g=m(d),v(u.$$.fragment,d)},m(d,_){f(d,p,_),e(p,b),f(d,g,_),w(u,d,_),k=!0},p:ta,i(d){k||(x(u.$$.fragment,d),k=!0)},o(d){y(u.$$.fragment,d),k=!1},d(d){d&&o(p),d&&o(g),M(u,d)}}}function sd(E){let p,b,g,u,k;return u=new oa({props:{code:`from transformers import MaskFormerFeatureExtractor, MaskFormerForInstanceSegmentation
from PIL import Image
import requests

# load MaskFormer fine-tuned on COCO panoptic segmentation
feature_extractor = MaskFormerFeatureExtractor.from_pretrained("facebook/maskformer-swin-base-coco")
model = MaskFormerForInstanceSegmentation.from_pretrained("facebook/maskformer-swin-base-coco")

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)
inputs = feature_extractor(images=image, return_tensors="pt")

outputs = model(**inputs)
# model predicts class_queries_logits of shape \`(batch_size, num_queries)\`
# and masks_queries_logits of shape \`(batch_size, num_queries, height, width)\`
class_queries_logits = outputs.class_queries_logits
masks_queries_logits = outputs.masks_queries_logits

# you can pass them to feature_extractor for postprocessing
result = feature_extractor.post_process_panoptic_segmentation(outputs, target_sizes=[image.size[::-1]])[0]

# we refer to the demo notebooks for visualization (see "Resources" section in the MaskFormer docs)
predicted_panoptic_map = result["segmentation"]
list(predicted_panoptic_map.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MaskFormerFeatureExtractor, MaskFormerForInstanceSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load MaskFormer fine-tuned on COCO panoptic segmentation</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MaskFormerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/maskformer-swin-base-coco&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MaskFormerForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;facebook/maskformer-swin-base-coco&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts class_queries_logits of shape \`(batch_size, num_queries)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># and masks_queries_logits of shape \`(batch_size, num_queries, height, width)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>class_queries_logits = outputs.class_queries_logits
<span class="hljs-meta">&gt;&gt;&gt; </span>masks_queries_logits = outputs.masks_queries_logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># you can pass them to feature_extractor for postprocessing</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>result = feature_extractor.post_process_panoptic_segmentation(outputs, target_sizes=[image.size[::-<span class="hljs-number">1</span>]])[<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># we refer to the demo notebooks for visualization (see &quot;Resources&quot; section in the MaskFormer docs)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_panoptic_map = result[<span class="hljs-string">&quot;segmentation&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(predicted_panoptic_map.shape)
[<span class="hljs-number">480</span>, <span class="hljs-number">640</span>]`}}),{c(){p=r("p"),b=s("Panoptic segmentation example:"),g=c(),F(u.$$.fragment)},l(d){p=n(d,"P",{});var _=i(p);b=a(_,"Panoptic segmentation example:"),_.forEach(o),g=m(d),v(u.$$.fragment,d)},m(d,_){f(d,p,_),e(p,b),f(d,g,_),w(u,d,_),k=!0},p:ta,i(d){k||(x(u.$$.fragment,d),k=!0)},o(d){y(u.$$.fragment,d),k=!1},d(d){d&&o(p),d&&o(g),M(u,d)}}}function ad(E){let p,b,g,u,k,d,_,z,sa,es,ce,ts,J,me,ho,De,aa,fo,ra,os,pe,na,Re,ia,la,ss,Lt,da,as,At,uo,ca,rs,qt,ma,ns,C,L,pa,Ct,ha,fa,go,ua,ga,St,_a,ka,_o,ba,Fa,va,A,wa,ko,xa,ya,bo,Ma,Ta,Fo,$a,Ea,He,Ia,ja,Pa,Be,za,Nt,Oa,La,Aa,q,qa,Dt,Ca,Sa,Rt,Na,Da,Ht,Ra,Ha,vo,Ba,Ua,is,he,Wa,Ue,Va,Ga,ls,We,xi,ds,G,Ka,Ve,Qa,Xa,Ge,Ya,Ja,cs,Z,fe,wo,Ke,Za,xo,er,ms,Qe,ps,Bt,Xe,tr,Ye,or,sr,hs,ee,ue,yo,Je,ar,Mo,rr,fs,te,Ze,nr,et,ir,Ut,lr,dr,us,R,tt,cr,ot,mr,Wt,pr,hr,fr,H,ur,Vt,gr,_r,Gt,kr,br,Kt,Fr,vr,gs,oe,ge,To,st,wr,$o,xr,_s,$,at,yr,B,Mr,Qt,Tr,$r,rt,Er,Ir,nt,jr,Pr,zr,se,Or,Xt,Lr,Ar,Yt,qr,Cr,Sr,it,Nr,Jt,Dr,Rr,Hr,_e,Br,ke,lt,Ur,dt,Wr,Zt,Vr,Gr,Kr,be,ct,Qr,mt,Xr,eo,Yr,Jr,ks,ae,Fe,Eo,pt,Zr,Io,en,bs,T,ht,tn,jo,on,sn,ft,an,to,rn,nn,ln,S,ut,dn,Po,cn,mn,U,pn,zo,hn,fn,Oo,un,gn,Lo,_n,kn,bn,ve,Fn,K,gt,vn,_t,wn,Ao,xn,yn,Mn,W,Tn,qo,$n,En,Co,In,jn,So,Pn,zn,On,we,kt,Ln,bt,An,oo,qn,Cn,Sn,xe,Ft,Nn,vt,Dn,No,Rn,Hn,Bn,ye,wt,Un,xt,Wn,Do,Vn,Gn,Fs,re,Me,Ro,yt,Kn,Ho,Qn,vs,V,Mt,Xn,Tt,Yn,$t,Jn,Zn,ei,N,Et,ti,ne,oi,so,si,ai,Bo,ri,ni,ii,Te,li,$e,ws,ie,Ee,Uo,It,di,Wo,ci,xs,le,jt,mi,I,Pt,pi,de,hi,ao,fi,ui,Vo,gi,_i,ki,Ie,bi,Go,Fi,vi,je,wi,Pe,ys;return d=new Ne({}),ce=new Zs({props:{$$slots:{default:[Xl]},$$scope:{ctx:E}}}),De=new Ne({}),Ke=new Ne({}),Qe=new Ql({props:{pipeline:"image-segmentation"}}),Je=new Ne({}),Ze=new P({props:{name:"class transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput",anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput",parameters:[{name:"encoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"pixel_decoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"transformer_decoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"pixel_decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"transformer_decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],parametersDescription:[{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the encoder model (backbone).`,name:"encoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.pixel_decoder_last_hidden_state",description:`<strong>pixel_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the pixel decoder model (FPN).`,name:"pixel_decoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.transformer_decoder_last_hidden_state",description:`<strong>transformer_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the transformer decoder model.`,name:"transformer_decoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the encoder
model at the output of each stage.`,name:"encoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.pixel_decoder_hidden_states",description:`<strong>pixel_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the pixel
decoder model at the output of each stage.`,name:"pixel_decoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.transformer_decoder_hidden_states",description:`<strong>transformer_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states (also called feature maps) of the
transformer decoder at the output of each stage.`,name:"transformer_decoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.hidden_states",description:`<strong>hidden_states</strong> <code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> containing <code>encoder_hidden_states</code>, <code>pixel_decoder_hidden_states</code> and
<code>decoder_hidden_states</code>`,name:"hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights from Detr&#x2019;s decoder after the attention softmax, used to compute the
weighted average in the self-attention heads.`,name:"attentions"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/modeling_maskformer.py#L214"}}),tt=new P({props:{name:"class transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput",anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"class_queries_logits",val:": FloatTensor = None"},{name:"masks_queries_logits",val:": FloatTensor = None"},{name:"auxiliary_logits",val:": FloatTensor = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"pixel_decoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"transformer_decoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"pixel_decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"transformer_decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],parametersDescription:[{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.loss",description:`<strong>loss</strong> (<code>torch.Tensor</code>, <em>optional</em>) &#x2014;
The computed loss, returned when labels are present.`,name:"loss"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.class_queries_logits",description:`<strong>class_queries_logits</strong> (<code>torch.FloatTensor</code>) &#x2014;
A tensor of shape <code>(batch_size, num_queries, num_labels + 1)</code> representing the proposed classes for each
query. Note the <code>+ 1</code> is needed because we incorporate the null class.`,name:"class_queries_logits"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.masks_queries_logits",description:`<strong>masks_queries_logits</strong> (<code>torch.FloatTensor</code>) &#x2014;
A tensor of shape <code>(batch_size, num_queries, height, width)</code> representing the proposed masks for each
query.`,name:"masks_queries_logits"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the encoder model (backbone).`,name:"encoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.pixel_decoder_last_hidden_state",description:`<strong>pixel_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the pixel decoder model (FPN).`,name:"pixel_decoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.transformer_decoder_last_hidden_state",description:`<strong>transformer_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the transformer decoder model.`,name:"transformer_decoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the encoder
model at the output of each stage.`,name:"encoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.pixel_decoder_hidden_states",description:`<strong>pixel_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the pixel
decoder model at the output of each stage.`,name:"pixel_decoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.transformer_decoder_hidden_states",description:`<strong>transformer_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the transformer decoder at the output
of each stage.`,name:"transformer_decoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.hidden_states",description:`<strong>hidden_states</strong> <code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> containing <code>encoder_hidden_states</code>, <code>pixel_decoder_hidden_states</code> and
<code>decoder_hidden_states</code>.`,name:"hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights from Detr&#x2019;s decoder after the attention softmax, used to compute the
weighted average in the self-attention heads.`,name:"attentions"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/modeling_maskformer.py#L257"}}),st=new Ne({}),at=new P({props:{name:"class transformers.MaskFormerConfig",anchor:"transformers.MaskFormerConfig",parameters:[{name:"fpn_feature_size",val:": int = 256"},{name:"mask_feature_size",val:": int = 256"},{name:"no_object_weight",val:": float = 0.1"},{name:"use_auxiliary_loss",val:": bool = False"},{name:"backbone_config",val:": typing.Optional[typing.Dict] = None"},{name:"decoder_config",val:": typing.Optional[typing.Dict] = None"},{name:"init_std",val:": float = 0.02"},{name:"init_xavier_std",val:": float = 1.0"},{name:"dice_weight",val:": float = 1.0"},{name:"cross_entropy_weight",val:": float = 1.0"},{name:"mask_weight",val:": float = 20.0"},{name:"output_auxiliary_logits",val:": typing.Optional[bool] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaskFormerConfig.mask_feature_size",description:`<strong>mask_feature_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
The masks&#x2019; features size, this value will also be used to specify the Feature Pyramid Network features&#x2019;
size.`,name:"mask_feature_size"},{anchor:"transformers.MaskFormerConfig.no_object_weight",description:`<strong>no_object_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
Weight to apply to the null (no object) class.`,name:"no_object_weight"},{anchor:"transformers.MaskFormerConfig.use_auxiliary_loss(bool,",description:`<strong>use_auxiliary_loss(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code> <code>MaskFormerForInstanceSegmentationOutput</code> will contain the auxiliary losses computed using the
logits from each decoder&#x2019;s stage.`,name:"use_auxiliary_loss(bool,"},{anchor:"transformers.MaskFormerConfig.backbone_config",description:`<strong>backbone_config</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
The configuration passed to the backbone, if unset, the configuration corresponding to
<code>swin-base-patch4-window12-384</code> will be used.`,name:"backbone_config"},{anchor:"transformers.MaskFormerConfig.decoder_config",description:`<strong>decoder_config</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
The configuration passed to the transformer decoder model, if unset the base config for <code>detr-resnet-50</code>
will be used.`,name:"decoder_config"},{anchor:"transformers.MaskFormerConfig.init_std",description:`<strong>init_std</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"init_std"},{anchor:"transformers.MaskFormerConfig.init_xavier_std",description:`<strong>init_xavier_std</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
The scaling factor used for the Xavier initialization gain in the HM Attention map module.`,name:"init_xavier_std"},{anchor:"transformers.MaskFormerConfig.dice_weight",description:`<strong>dice_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
The weight for the dice loss.`,name:"dice_weight"},{anchor:"transformers.MaskFormerConfig.cross_entropy_weight",description:`<strong>cross_entropy_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
The weight for the cross entropy loss.`,name:"cross_entropy_weight"},{anchor:"transformers.MaskFormerConfig.mask_weight",description:`<strong>mask_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 20.0) &#x2014;
The weight for the mask loss.`,name:"mask_weight"},{anchor:"transformers.MaskFormerConfig.output_auxiliary_logits",description:`<strong>output_auxiliary_logits</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Should the model output its <code>auxiliary_logits</code> or not.`,name:"output_auxiliary_logits"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/configuration_maskformer.py#L36",raiseDescription:`
<ul>
<li><code>ValueError</code> \u2014
Raised if the backbone model type selected is not in <code>["swin"]</code> or the decoder model type selected is not
in <code>["detr"]</code></li>
</ul>
`,raiseType:`
<p><code>ValueError</code></p>
`}}),_e=new ea({props:{anchor:"transformers.MaskFormerConfig.example",$$slots:{default:[Yl]},$$scope:{ctx:E}}}),lt=new P({props:{name:"from_backbone_and_decoder_configs",anchor:"transformers.MaskFormerConfig.from_backbone_and_decoder_configs",parameters:[{name:"backbone_config",val:": PretrainedConfig"},{name:"decoder_config",val:": PretrainedConfig"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaskFormerConfig.from_backbone_and_decoder_configs.backbone_config",description:`<strong>backbone_config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The backbone configuration.`,name:"backbone_config"},{anchor:"transformers.MaskFormerConfig.from_backbone_and_decoder_configs.decoder_config",description:`<strong>decoder_config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The transformer decoder configuration to use.`,name:"decoder_config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/configuration_maskformer.py#L172",returnDescription:`
<p>An instance of a configuration object</p>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"
>MaskFormerConfig</a></p>
`}}),ct=new P({props:{name:"to_dict",anchor:"transformers.MaskFormerConfig.to_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/configuration_maskformer.py#L194",returnDescription:`
<p>Dictionary of all the attributes that make up this configuration instance,</p>
`,returnType:`
<p><code>Dict[str, any]</code></p>
`}}),pt=new Ne({}),ht=new P({props:{name:"class transformers.MaskFormerFeatureExtractor",anchor:"transformers.MaskFormerFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 800"},{name:"max_size",val:" = 1333"},{name:"resample",val:" = <Resampling.BILINEAR: 2>"},{name:"size_divisibility",val:" = 32"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"ignore_index",val:" = None"},{name:"reduce_labels",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.MaskFormerFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code>, <em>optional</em>, defaults to 800) &#x2014;
Resize the input to the given size. Only has an effect if <code>do_resize</code> is set to <code>True</code>. If size is a
sequence like <code>(width, height)</code>, output size will be matched to this. If size is an int, smaller edge of
the image will be matched to this number. i.e, if <code>height &gt; width</code>, then image will be rescaled to <code>(size * height / width, size)</code>.`,name:"size"},{anchor:"transformers.MaskFormerFeatureExtractor.max_size",description:`<strong>max_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1333) &#x2014;
The largest size an image dimension can have (otherwise it&#x2019;s capped). Only has an effect if <code>do_resize</code> is
set to <code>True</code>.`,name:"max_size"},{anchor:"transformers.MaskFormerFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PILImageResampling.BILINEAR</code>) &#x2014;
An optional resampling filter. This can be one of <code>PILImageResampling.NEAREST</code>, <code>PILImageResampling.BOX</code>,
<code>PILImageResampling.BILINEAR</code>, <code>PILImageResampling.HAMMING</code>, <code>PILImageResampling.BICUBIC</code> or
<code>PILImageResampling.LANCZOS</code>. Only has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.MaskFormerFeatureExtractor.size_divisibility",description:`<strong>size_divisibility</strong> (<code>int</code>, <em>optional</em>, defaults to 32) &#x2014;
Some backbones need images divisible by a certain number. If not passed, it defaults to the value used in
Swin Transformer.`,name:"size_divisibility"},{anchor:"transformers.MaskFormerFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with mean and standard deviation.`,name:"do_normalize"},{anchor:"transformers.MaskFormerFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>int</code>, <em>optional</em>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images. Defaults to the ImageNet mean.`,name:"image_mean"},{anchor:"transformers.MaskFormerFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>int</code>, <em>optional</em>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images. Defaults to the
ImageNet std.`,name:"image_std"},{anchor:"transformers.MaskFormerFeatureExtractor.ignore_index",description:`<strong>ignore_index</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Label to be assigned to background pixels in segmentation maps. If provided, segmentation map pixels
denoted with 0 (background) will be replaced with <code>ignore_index</code>.`,name:"ignore_index"},{anchor:"transformers.MaskFormerFeatureExtractor.reduce_labels",description:`<strong>reduce_labels</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to decrement all label values of segmentation maps by 1. Usually used for datasets where 0
is used for background, and background itself is not included in all classes of a dataset (e.g. ADE20k).
The background label will be replaced by <code>ignore_index</code>.`,name:"reduce_labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/feature_extraction_maskformer.py#L193"}}),ut=new P({props:{name:"__call__",anchor:"transformers.MaskFormerFeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[ForwardRef('PIL.Image.Image'), numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[ForwardRef('PIL.Image.Image')], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"segmentation_maps",val:": typing.Union[ForwardRef('PIL.Image.Image'), numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[ForwardRef('PIL.Image.Image')], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]] = None"},{name:"pad_and_return_pixel_mask",val:": typing.Optional[bool] = True"},{name:"instance_id_to_semantic_id",val:": typing.Union[typing.List[typing.Dict[int, int]], typing.Dict[int, int], NoneType] = None"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is a
number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.MaskFormerFeatureExtractor.__call__.segmentation_maps",description:`<strong>segmentation_maps</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>, <em>optional</em>) &#x2014;
The corresponding semantic segmentation maps with the pixel-wise class id annotations or instance
segmentation maps with pixel-wise instance id annotations. Assumed to be semantic segmentation maps if
no <code>instance_id_to_semantic_id map</code> is provided.`,name:"segmentation_maps"},{anchor:"transformers.MaskFormerFeatureExtractor.__call__.pad_and_return_pixel_mask",description:`<strong>pad_and_return_pixel_mask</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to pad images up to the largest image in a batch and create a pixel mask.</p>
<p>If left to the default, will return a pixel mask that is:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>`,name:"pad_and_return_pixel_mask"},{anchor:"transformers.MaskFormerFeatureExtractor.__call__.instance_id_to_semantic_id",description:`<strong>instance_id_to_semantic_id</strong> (<code>List[Dict[int, int]]</code> or <code>Dict[int, int]</code>, <em>optional</em>) &#x2014;
A mapping between object instance ids and class ids. If passed, <code>segmentation_maps</code> is treated as an
instance segmentation map where each pixel represents an instance id. Can be provided as a single
dictionary with a global / dataset-level mapping or as a list of dictionaries (one per image), to map
instance ids in each image separately.`,name:"instance_id_to_semantic_id"},{anchor:"transformers.MaskFormerFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/main/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of NumPy arrays. If set to <code>&apos;pt&apos;</code>, return PyTorch <code>torch.Tensor</code>
objects.`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/feature_extraction_maskformer.py#L316",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model.</li>
<li><strong>pixel_mask</strong> \u2014 Pixel mask to be fed to a model (when <code>pad_and_return_pixel_mask=True</code> or if
<code>pixel_mask</code> is in <code>self.model_input_names</code>).</li>
<li><strong>mask_labels</strong> \u2014 Optional list of mask labels of shape <code>(num_class_labels, height, width)</code> to be fed to
a model (when <code>annotations</code> are provided).</li>
<li><strong>class_labels</strong> \u2014 Optional list of class labels of shape <code>(num_class_labels)</code> to be fed to a model
(when <code>annotations</code> are provided). They identify the labels of <code>mask_labels</code>, e.g. the label of
<code>mask_labels[i][j]</code> if <code>class_labels[i][j]</code>.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),ve=new Zs({props:{warning:!0,$$slots:{default:[Jl]},$$scope:{ctx:E}}}),gt=new P({props:{name:"encode_inputs",anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs",parameters:[{name:"pixel_values_list",val:": typing.List[ForwardRef('np.ndarray')]"},{name:"segmentation_maps",val:": typing.Union[ForwardRef('PIL.Image.Image'), numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[ForwardRef('PIL.Image.Image')], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]] = None"},{name:"pad_and_return_pixel_mask",val:": bool = True"},{name:"instance_id_to_semantic_id",val:": typing.Union[typing.List[typing.Dict[int, int]], typing.Dict[int, int], NoneType] = None"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"}],parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs.pixel_values_list",description:`<strong>pixel_values_list</strong> (<code>List[torch.Tensor]</code>) &#x2014;
List of images (pixel values) to be padded. Each image should be a tensor of shape <code>(channels, height, width)</code>.`,name:"pixel_values_list"},{anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs.segmentation_maps",description:`<strong>segmentation_maps</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>, <em>optional</em>) &#x2014;
The corresponding semantic segmentation maps with the pixel-wise annotations.`,name:"segmentation_maps"},{anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs.pad_and_return_pixel_mask",description:`<strong>pad_and_return_pixel_mask</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to pad images up to the largest image in a batch and create a pixel mask.</p>
<p>If left to the default, will return a pixel mask that is:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>`,name:"pad_and_return_pixel_mask"},{anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs.instance_id_to_semantic_id",description:`<strong>instance_id_to_semantic_id</strong> (<code>List[Dict[int, int]]</code> or <code>Dict[int, int]</code>, <em>optional</em>) &#x2014;
A mapping between object instance ids and class ids. If passed, <code>segmentation_maps</code> is treated as an
instance segmentation map where each pixel represents an instance id. Can be provided as a single
dictionary with a global/dataset-level mapping or as a list of dictionaries (one per image), to map
instance ids in each image separately.`,name:"instance_id_to_semantic_id"},{anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/main/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of NumPy arrays. If set to <code>&apos;pt&apos;</code>, return PyTorch <code>torch.Tensor</code>
objects.`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/feature_extraction_maskformer.py#L508",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model.</li>
<li><strong>pixel_mask</strong> \u2014 Pixel mask to be fed to a model (when <code>pad_and_return_pixel_mask=True</code> or if
<code>pixel_mask</code> is in <code>self.model_input_names</code>).</li>
<li><strong>mask_labels</strong> \u2014 Optional list of mask labels of shape <code>(labels, height, width)</code> to be fed to a model
(when <code>annotations</code> are provided).</li>
<li><strong>class_labels</strong> \u2014 Optional list of class labels of shape <code>(labels)</code> to be fed to a model (when
<code>annotations</code> are provided). They identify the labels of <code>mask_labels</code>, e.g. the label of
<code>mask_labels[i][j]</code> if <code>class_labels[i][j]</code>.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),kt=new P({props:{name:"post_process_semantic_segmentation",anchor:"transformers.MaskFormerFeatureExtractor.post_process_semantic_segmentation",parameters:[{name:"outputs",val:""},{name:"target_sizes",val:": typing.Union[typing.List[typing.Tuple[int, int]], NoneType] = None"}],parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.post_process_semantic_segmentation.outputs",description:`<strong>outputs</strong> (<a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a>) &#x2014;
Raw outputs of the model.`,name:"outputs"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_semantic_segmentation.target_sizes",description:`<strong>target_sizes</strong> (<code>List[Tuple[int, int]]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
List of length (batch_size), where each list item (<code>Tuple[int, int]]</code>) corresponds to the requested
final size (height, width) of each prediction. If left to None, predictions will not be resized.`,name:"target_sizes"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/feature_extraction_maskformer.py#L676",returnDescription:`
<p>A list of length <code>batch_size</code>, where each item is a semantic segmentation map of shape (height, width)
corresponding to the target_sizes entry (if <code>target_sizes</code> is specified). Each entry of each
<code>torch.Tensor</code> correspond to a semantic class id.</p>
`,returnType:`
<p><code>List[torch.Tensor]</code></p>
`}}),Ft=new P({props:{name:"post_process_instance_segmentation",anchor:"transformers.MaskFormerFeatureExtractor.post_process_instance_segmentation",parameters:[{name:"outputs",val:""},{name:"threshold",val:": float = 0.5"},{name:"mask_threshold",val:": float = 0.5"},{name:"overlap_mask_area_threshold",val:": float = 0.8"},{name:"target_sizes",val:": typing.Union[typing.List[typing.Tuple[int, int]], NoneType] = None"},{name:"return_coco_annotation",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.post_process_instance_segmentation.outputs",description:`<strong>outputs</strong> (<a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a>) &#x2014;
Raw outputs of the model.`,name:"outputs"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_instance_segmentation.threshold",description:`<strong>threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.5) &#x2014;
The probability score threshold to keep predicted instance masks.`,name:"threshold"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_instance_segmentation.mask_threshold",description:`<strong>mask_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.5) &#x2014;
Threshold to use when turning the predicted masks into binary values.`,name:"mask_threshold"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_instance_segmentation.overlap_mask_area_threshold",description:`<strong>overlap_mask_area_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.8) &#x2014;
The overlap mask area threshold to merge or discard small disconnected parts within each binary
instance mask.`,name:"overlap_mask_area_threshold"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_instance_segmentation.target_sizes",description:`<strong>target_sizes</strong> (<code>List[Tuple]</code>, <em>optional</em>) &#x2014;
List of length (batch_size), where each list item (<code>Tuple[int, int]]</code>) corresponds to the requested
final size (height, width) of each prediction. If left to None, predictions will not be resized.`,name:"target_sizes"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_instance_segmentation.return_coco_annotation",description:`<strong>return_coco_annotation</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Defaults to <code>False</code>. If set to <code>True</code>, segmentation maps are returned in COCO run-length encoding (RLE)
format.`,name:"return_coco_annotation"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/feature_extraction_maskformer.py#L726",returnDescription:`
<p>A list of dictionaries, one per image, each dictionary containing two keys:</p>
<ul>
<li><strong>segmentation</strong> \u2014 A tensor of shape <code>(height, width)</code> where each pixel represents a <code>segment_id</code> or
<code>List[List]</code> run-length encoding (RLE) of the segmentation map if return_coco_annotation is set to
<code>True</code>. Set to <code>None</code> if no mask if found above <code>threshold</code>.</li>
<li><strong>segments_info</strong> \u2014 A dictionary that contains additional information on each segment.<ul>
<li><strong>id</strong> \u2014 An integer representing the <code>segment_id</code>.</li>
<li><strong>label_id</strong> \u2014 An integer representing the label / semantic class id corresponding to <code>segment_id</code>.</li>
<li><strong>score</strong> \u2014 Prediction score of segment with <code>segment_id</code>.</li>
</ul></li>
</ul>
`,returnType:`
<p><code>List[Dict]</code></p>
`}}),wt=new P({props:{name:"post_process_panoptic_segmentation",anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation",parameters:[{name:"outputs",val:""},{name:"threshold",val:": float = 0.5"},{name:"mask_threshold",val:": float = 0.5"},{name:"overlap_mask_area_threshold",val:": float = 0.8"},{name:"label_ids_to_fuse",val:": typing.Optional[typing.Set[int]] = None"},{name:"target_sizes",val:": typing.Union[typing.List[typing.Tuple[int, int]], NoneType] = None"}],parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation.outputs",description:`<strong>outputs</strong> (<code>MaskFormerForInstanceSegmentationOutput</code>) &#x2014;
The outputs from <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a>.`,name:"outputs"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation.threshold",description:`<strong>threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.5) &#x2014;
The probability score threshold to keep predicted instance masks.`,name:"threshold"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation.mask_threshold",description:`<strong>mask_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.5) &#x2014;
Threshold to use when turning the predicted masks into binary values.`,name:"mask_threshold"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation.overlap_mask_area_threshold",description:`<strong>overlap_mask_area_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.8) &#x2014;
The overlap mask area threshold to merge or discard small disconnected parts within each binary
instance mask.`,name:"overlap_mask_area_threshold"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation.label_ids_to_fuse",description:`<strong>label_ids_to_fuse</strong> (<code>Set[int]</code>, <em>optional</em>) &#x2014;
The labels in this state will have all their instances be fused together. For instance we could say
there can only be one sky in an image, but several persons, so the label ID for sky would be in that
set, but not the one for person.`,name:"label_ids_to_fuse"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation.target_sizes",description:`<strong>target_sizes</strong> (<code>List[Tuple]</code>, <em>optional</em>) &#x2014;
List of length (batch_size), where each list item (<code>Tuple[int, int]]</code>) corresponds to the requested
final size (height, width) of each prediction in batch. If left to None, predictions will not be
resized.`,name:"target_sizes"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/feature_extraction_maskformer.py#L809",returnDescription:`
<p>A list of dictionaries, one per image, each dictionary containing two keys:</p>
<ul>
<li><strong>segmentation</strong> \u2014 a tensor of shape <code>(height, width)</code> where each pixel represents a <code>segment_id</code>, set
to <code>None</code> if no mask if found above <code>threshold</code>. If <code>target_sizes</code> is specified, segmentation is resized
to the corresponding <code>target_sizes</code> entry.</li>
<li><strong>segments_info</strong> \u2014 A dictionary that contains additional information on each segment.<ul>
<li><strong>id</strong> \u2014 an integer representing the <code>segment_id</code>.</li>
<li><strong>label_id</strong> \u2014 An integer representing the label / semantic class id corresponding to <code>segment_id</code>.</li>
<li><strong>was_fused</strong> \u2014 a boolean, <code>True</code> if <code>label_id</code> was in <code>label_ids_to_fuse</code>, <code>False</code> otherwise.
Multiple instances of the same class / label were fused and assigned a single <code>segment_id</code>.</li>
<li><strong>score</strong> \u2014 Prediction score of segment with <code>segment_id</code>.</li>
</ul></li>
</ul>
`,returnType:`
<p><code>List[Dict]</code></p>
`}}),yt=new Ne({}),Mt=new P({props:{name:"class transformers.MaskFormerModel",anchor:"transformers.MaskFormerModel",parameters:[{name:"config",val:": MaskFormerConfig"}],parametersDescription:[{anchor:"transformers.MaskFormerModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/modeling_maskformer.py#L2348"}}),Et=new P({props:{name:"forward",anchor:"transformers.MaskFormerModel.forward",parameters:[{name:"pixel_values",val:": Tensor"},{name:"pixel_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MaskFormerModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.MaskFormerModel.forward.pixel_mask",description:`<strong>pixel_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding pixel values. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"pixel_mask"},{anchor:"transformers.MaskFormerModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MaskFormerModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of Detr&#x2019;s decoder attention layers.`,name:"output_attentions"},{anchor:"transformers.MaskFormerModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <code>~MaskFormerModelOutput</code> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/modeling_maskformer.py#L2358",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/model_doc/maskformer#transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput"
>transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"
>MaskFormerConfig</a>) and inputs.</p>
<ul>
<li><strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the encoder model (backbone).</li>
<li><strong>pixel_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the pixel decoder model (FPN).</li>
<li><strong>transformer_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Last hidden states (final feature map) of the last stage of the transformer decoder model.</li>
<li><strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the encoder
model at the output of each stage.</li>
<li><strong>pixel_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the pixel
decoder model at the output of each stage.</li>
<li><strong>transformer_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states (also called feature maps) of the
transformer decoder at the output of each stage.</li>
<li><strong>hidden_states</strong> <code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> containing <code>encoder_hidden_states</code>, <code>pixel_decoder_hidden_states</code> and
<code>decoder_hidden_states</code></li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights from Detr\u2019s decoder after the attention softmax, used to compute the
weighted average in the self-attention heads.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/model_doc/maskformer#transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput"
>transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Te=new Zs({props:{$$slots:{default:[Zl]},$$scope:{ctx:E}}}),$e=new ea({props:{anchor:"transformers.MaskFormerModel.forward.example",$$slots:{default:[ed]},$$scope:{ctx:E}}}),It=new Ne({}),jt=new P({props:{name:"class transformers.MaskFormerForInstanceSegmentation",anchor:"transformers.MaskFormerForInstanceSegmentation",parameters:[{name:"config",val:": MaskFormerConfig"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/modeling_maskformer.py#L2449"}}),Pt=new P({props:{name:"forward",anchor:"transformers.MaskFormerForInstanceSegmentation.forward",parameters:[{name:"pixel_values",val:": Tensor"},{name:"mask_labels",val:": typing.Optional[typing.List[torch.Tensor]] = None"},{name:"class_labels",val:": typing.Optional[typing.List[torch.Tensor]] = None"},{name:"pixel_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"output_auxiliary_logits",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.pixel_mask",description:`<strong>pixel_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding pixel values. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"pixel_mask"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of Detr&#x2019;s decoder attention layers.`,name:"output_attentions"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <code>~MaskFormerModelOutput</code> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.mask_labels",description:`<strong>mask_labels</strong> (<code>List[torch.Tensor]</code>, <em>optional</em>) &#x2014;
List of mask labels of shape <code>(num_labels, height, width)</code> to be fed to a model`,name:"mask_labels"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.class_labels",description:`<strong>class_labels</strong> (<code>List[torch.LongTensor]</code>, <em>optional</em>) &#x2014;
list of target class labels of shape <code>(num_labels, height, width)</code> to be fed to a model. They identify the
labels of <code>mask_labels</code>, e.g. the label of <code>mask_labels[i][j]</code> if <code>class_labels[i][j]</code>.`,name:"class_labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/maskformer/modeling_maskformer.py#L2530",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/model_doc/maskformer#transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput"
>transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"
>MaskFormerConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.Tensor</code>, <em>optional</em>) \u2014 The computed loss, returned when labels are present.</li>
<li><strong>class_queries_logits</strong> (<code>torch.FloatTensor</code>) \u2014 A tensor of shape <code>(batch_size, num_queries, num_labels + 1)</code> representing the proposed classes for each
query. Note the <code>+ 1</code> is needed because we incorporate the null class.</li>
<li><strong>masks_queries_logits</strong> (<code>torch.FloatTensor</code>) \u2014 A tensor of shape <code>(batch_size, num_queries, height, width)</code> representing the proposed masks for each
query.</li>
<li><strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the encoder model (backbone).</li>
<li><strong>pixel_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the pixel decoder model (FPN).</li>
<li><strong>transformer_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Last hidden states (final feature map) of the last stage of the transformer decoder model.</li>
<li><strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the encoder
model at the output of each stage.</li>
<li><strong>pixel_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the pixel
decoder model at the output of each stage.</li>
<li><strong>transformer_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the transformer decoder at the output
of each stage.</li>
<li><strong>hidden_states</strong> <code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> containing <code>encoder_hidden_states</code>, <code>pixel_decoder_hidden_states</code> and
<code>decoder_hidden_states</code>.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights from Detr\u2019s decoder after the attention softmax, used to compute the
weighted average in the self-attention heads.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/model_doc/maskformer#transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput"
>transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Ie=new Zs({props:{$$slots:{default:[td]},$$scope:{ctx:E}}}),je=new ea({props:{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.example",$$slots:{default:[od]},$$scope:{ctx:E}}}),Pe=new ea({props:{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.example-2",$$slots:{default:[sd]},$$scope:{ctx:E}}}),{c(){p=r("meta"),b=c(),g=r("h1"),u=r("a"),k=r("span"),F(d.$$.fragment),_=c(),z=r("span"),sa=s("MaskFormer"),es=c(),F(ce.$$.fragment),ts=c(),J=r("h2"),me=r("a"),ho=r("span"),F(De.$$.fragment),aa=c(),fo=r("span"),ra=s("Overview"),os=c(),pe=r("p"),na=s("The MaskFormer model was proposed in "),Re=r("a"),ia=s("Per-Pixel Classification is Not All You Need for Semantic Segmentation"),la=s(" by Bowen Cheng, Alexander G. Schwing, Alexander Kirillov. MaskFormer addresses semantic segmentation with a mask classification paradigm instead of performing classic pixel-level classification."),ss=c(),Lt=r("p"),da=s("The abstract from the paper is the following:"),as=c(),At=r("p"),uo=r("em"),ca=s("Modern approaches typically formulate semantic segmentation as a per-pixel classification task, while instance-level segmentation is handled with an alternative mask classification. Our key insight: mask classification is sufficiently general to solve both semantic- and instance-level segmentation tasks in a unified manner using the exact same model, loss, and training procedure. Following this observation, we propose MaskFormer, a simple mask classification model which predicts a set of binary masks, each associated with a single global class label prediction. Overall, the proposed mask classification-based method simplifies the landscape of effective approaches to semantic and panoptic segmentation tasks and shows excellent empirical results. In particular, we observe that MaskFormer outperforms per-pixel classification baselines when the number of classes is large. Our mask classification-based method outperforms both current state-of-the-art semantic (55.6 mIoU on ADE20K) and panoptic segmentation (52.7 PQ on COCO) models."),rs=c(),qt=r("p"),ma=s("Tips:"),ns=c(),C=r("ul"),L=r("li"),pa=s("MaskFormer\u2019s Transformer decoder is identical to the decoder of "),Ct=r("a"),ha=s("DETR"),fa=s(". During training, the authors of DETR did find it helpful to use auxiliary losses in the decoder, especially to help the model output the correct number of objects of each class. If you set the parameter "),go=r("code"),ua=s("use_auxilary_loss"),ga=s(" of "),St=r("a"),_a=s("MaskFormerConfig"),ka=s(" to "),_o=r("code"),ba=s("True"),Fa=s(", then prediction feedforward neural networks and Hungarian losses are added after each decoder layer (with the FFNs sharing parameters)."),va=c(),A=r("li"),wa=s(`If you want to train the model in a distributed environment across multiple nodes, then one should update the
`),ko=r("code"),xa=s("get_num_masks"),ya=s(" function inside in the "),bo=r("code"),Ma=s("MaskFormerLoss"),Ta=s(" class of "),Fo=r("code"),$a=s("modeling_maskformer.py"),Ea=s(`. When training on multiple nodes, this should be
set to the average number of target masks across all nodes, as can be seen in the original implementation `),He=r("a"),Ia=s("here"),ja=s("."),Pa=c(),Be=r("li"),za=s("One can use "),Nt=r("a"),Oa=s("MaskFormerFeatureExtractor"),La=s(" to prepare images for the model and optional targets for the model."),Aa=c(),q=r("li"),qa=s("To get the final segmentation, depending on the task, you can call "),Dt=r("a"),Ca=s("post_process_semantic_segmentation()"),Sa=s(" or "),Rt=r("a"),Na=s("post_process_panoptic_segmentation()"),Da=s(". Both tasks can be solved using "),Ht=r("a"),Ra=s("MaskFormerForInstanceSegmentation"),Ha=s(" output, panoptic segmentation accepts an optional "),vo=r("code"),Ba=s("label_ids_to_fuse"),Ua=s(" argument to fuse instances of the target object/s (e.g. sky) together."),is=c(),he=r("p"),Wa=s("The figure below illustrates the architecture of MaskFormer. Taken from the "),Ue=r("a"),Va=s("original paper"),Ga=s("."),ls=c(),We=r("img"),ds=c(),G=r("p"),Ka=s("This model was contributed by "),Ve=r("a"),Qa=s("francesco"),Xa=s(". The original code can be found "),Ge=r("a"),Ya=s("here"),Ja=s("."),cs=c(),Z=r("h2"),fe=r("a"),wo=r("span"),F(Ke.$$.fragment),Za=c(),xo=r("span"),er=s("Resources"),ms=c(),F(Qe.$$.fragment),ps=c(),Bt=r("ul"),Xe=r("li"),tr=s("All notebooks that illustrate inference as well as fine-tuning on custom data with MaskFormer can be found "),Ye=r("a"),or=s("here"),sr=s("."),hs=c(),ee=r("h2"),ue=r("a"),yo=r("span"),F(Je.$$.fragment),ar=c(),Mo=r("span"),rr=s("MaskFormer specific outputs"),fs=c(),te=r("div"),F(Ze.$$.fragment),nr=c(),et=r("p"),ir=s("Class for outputs of "),Ut=r("a"),lr=s("MaskFormerModel"),dr=s(". This class returns all the needed hidden states to compute the logits."),us=c(),R=r("div"),F(tt.$$.fragment),cr=c(),ot=r("p"),mr=s("Class for outputs of "),Wt=r("a"),pr=s("MaskFormerForInstanceSegmentation"),hr=s("."),fr=c(),H=r("p"),ur=s("This output can be directly passed to "),Vt=r("a"),gr=s("post_process_semantic_segmentation()"),_r=s(` or or
`),Gt=r("a"),kr=s("post_process_instance_segmentation()"),br=s(` or
`),Kt=r("a"),Fr=s("post_process_panoptic_segmentation()"),vr=s(" depending on the task. Please, see\n[`~MaskFormerFeatureExtractor] for details regarding usage."),gs=c(),oe=r("h2"),ge=r("a"),To=r("span"),F(st.$$.fragment),wr=c(),$o=r("span"),xr=s("MaskFormerConfig"),_s=c(),$=r("div"),F(at.$$.fragment),yr=c(),B=r("p"),Mr=s("This is the configuration class to store the configuration of a "),Qt=r("a"),Tr=s("MaskFormerModel"),$r=s(`. It is used to instantiate a
MaskFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MaskFormer
`),rt=r("a"),Er=s("facebook/maskformer-swin-base-ade"),Ir=s(` architecture trained
on `),nt=r("a"),jr=s("ADE20k-150"),Pr=s("."),zr=c(),se=r("p"),Or=s("Configuration objects inherit from "),Xt=r("a"),Lr=s("PretrainedConfig"),Ar=s(` and can be used to control the model outputs. Read the
documentation from `),Yt=r("a"),qr=s("PretrainedConfig"),Cr=s(" for more information."),Sr=c(),it=r("p"),Nr=s("Currently, MaskFormer only supports the "),Jt=r("a"),Dr=s("Swin Transformer"),Rr=s(" as backbone."),Hr=c(),F(_e.$$.fragment),Br=c(),ke=r("div"),F(lt.$$.fragment),Ur=c(),dt=r("p"),Wr=s("Instantiate a "),Zt=r("a"),Vr=s("MaskFormerConfig"),Gr=s(` (or a derived class) from a pre-trained backbone model configuration and DETR model
configuration.`),Kr=c(),be=r("div"),F(ct.$$.fragment),Qr=c(),mt=r("p"),Xr=s("Serializes this instance to a Python dictionary. Override the default "),eo=r("a"),Yr=s("to_dict()"),Jr=s("."),ks=c(),ae=r("h2"),Fe=r("a"),Eo=r("span"),F(pt.$$.fragment),Zr=c(),Io=r("span"),en=s("MaskFormerFeatureExtractor"),bs=c(),T=r("div"),F(ht.$$.fragment),tn=c(),jo=r("p"),on=s(`Constructs a MaskFormer feature extractor. The feature extractor can be used to prepare image(s) and optional
targets for the model.`),sn=c(),ft=r("p"),an=s("This feature extractor inherits from "),to=r("a"),rn=s("FeatureExtractionMixin"),nn=s(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),ln=c(),S=r("div"),F(ut.$$.fragment),dn=c(),Po=r("p"),cn=s(`Main method to prepare for the model one or several image(s) and optional annotations. Images are by default
padded up to the largest image in a batch, and a pixel mask is created that indicates which pixels are
real/which are padding.`),mn=c(),U=r("p"),pn=s(`MaskFormer addresses semantic segmentation with a mask classification paradigm, thus input segmentation maps
will be converted to lists of binary masks and their respective labels. Let\u2019s see an example, assuming
`),zo=r("code"),hn=s("segmentation_maps = [[2,6,7,9]]"),fn=s(", the output will contain "),Oo=r("code"),un=s("mask_labels = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]"),gn=s(" (four binary masks) and "),Lo=r("code"),_n=s("class_labels = [2,6,7,9]"),kn=s(`, the labels for
each mask.`),bn=c(),F(ve.$$.fragment),Fn=c(),K=r("div"),F(gt.$$.fragment),vn=c(),_t=r("p"),wn=s("Pad images up to the largest image in a batch and create a corresponding "),Ao=r("code"),xn=s("pixel_mask"),yn=s("."),Mn=c(),W=r("p"),Tn=s(`MaskFormer addresses semantic segmentation with a mask classification paradigm, thus input segmentation maps
will be converted to lists of binary masks and their respective labels. Let\u2019s see an example, assuming
`),qo=r("code"),$n=s("segmentation_maps = [[2,6,7,9]]"),En=s(", the output will contain "),Co=r("code"),In=s("mask_labels = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]"),jn=s(" (four binary masks) and "),So=r("code"),Pn=s("class_labels = [2,6,7,9]"),zn=s(`, the labels for
each mask.`),On=c(),we=r("div"),F(kt.$$.fragment),Ln=c(),bt=r("p"),An=s("Converts the output of "),oo=r("a"),qn=s("MaskFormerForInstanceSegmentation"),Cn=s(` into semantic segmentation maps. Only supports
PyTorch.`),Sn=c(),xe=r("div"),F(Ft.$$.fragment),Nn=c(),vt=r("p"),Dn=s("Converts the output of "),No=r("code"),Rn=s("MaskFormerForInstanceSegmentationOutput"),Hn=s(` into instance segmentation predictions. Only
supports PyTorch.`),Bn=c(),ye=r("div"),F(wt.$$.fragment),Un=c(),xt=r("p"),Wn=s("Converts the output of "),Do=r("code"),Vn=s("MaskFormerForInstanceSegmentationOutput"),Gn=s(` into image panoptic segmentation
predictions. Only supports PyTorch.`),Fs=c(),re=r("h2"),Me=r("a"),Ro=r("span"),F(yt.$$.fragment),Kn=c(),Ho=r("span"),Qn=s("MaskFormerModel"),vs=c(),V=r("div"),F(Mt.$$.fragment),Xn=c(),Tt=r("p"),Yn=s(`The bare MaskFormer Model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),$t=r("a"),Jn=s("torch.nn.Module"),Zn=s(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ei=c(),N=r("div"),F(Et.$$.fragment),ti=c(),ne=r("p"),oi=s("The "),so=r("a"),si=s("MaskFormerModel"),ai=s(" forward method, overrides the "),Bo=r("code"),ri=s("__call__"),ni=s(" special method."),ii=c(),F(Te.$$.fragment),li=c(),F($e.$$.fragment),ws=c(),ie=r("h2"),Ee=r("a"),Uo=r("span"),F(It.$$.fragment),di=c(),Wo=r("span"),ci=s("MaskFormerForInstanceSegmentation"),xs=c(),le=r("div"),F(jt.$$.fragment),mi=c(),I=r("div"),F(Pt.$$.fragment),pi=c(),de=r("p"),hi=s("The "),ao=r("a"),fi=s("MaskFormerForInstanceSegmentation"),ui=s(" forward method, overrides the "),Vo=r("code"),gi=s("__call__"),_i=s(" special method."),ki=c(),F(Ie.$$.fragment),bi=c(),Go=r("p"),Fi=s("Examples:"),vi=c(),F(je.$$.fragment),wi=c(),F(Pe.$$.fragment),this.h()},l(t){const h=Vl('[data-svelte="svelte-1phssyn"]',document.head);p=n(h,"META",{name:!0,content:!0}),h.forEach(o),b=m(t),g=n(t,"H1",{class:!0});var zt=i(g);u=n(zt,"A",{id:!0,class:!0,href:!0});var Ko=i(u);k=n(Ko,"SPAN",{});var Qo=i(k);v(d.$$.fragment,Qo),Qo.forEach(o),Ko.forEach(o),_=m(zt),z=n(zt,"SPAN",{});var Xo=i(z);sa=a(Xo,"MaskFormer"),Xo.forEach(o),zt.forEach(o),es=m(t),v(ce.$$.fragment,t),ts=m(t),J=n(t,"H2",{class:!0});var Ot=i(J);me=n(Ot,"A",{id:!0,class:!0,href:!0});var Yo=i(me);ho=n(Yo,"SPAN",{});var Jo=i(ho);v(De.$$.fragment,Jo),Jo.forEach(o),Yo.forEach(o),aa=m(Ot),fo=n(Ot,"SPAN",{});var Zo=i(fo);ra=a(Zo,"Overview"),Zo.forEach(o),Ot.forEach(o),os=m(t),pe=n(t,"P",{});var Ms=i(pe);na=a(Ms,"The MaskFormer model was proposed in "),Re=n(Ms,"A",{href:!0,rel:!0});var yi=i(Re);ia=a(yi,"Per-Pixel Classification is Not All You Need for Semantic Segmentation"),yi.forEach(o),la=a(Ms," by Bowen Cheng, Alexander G. Schwing, Alexander Kirillov. MaskFormer addresses semantic segmentation with a mask classification paradigm instead of performing classic pixel-level classification."),Ms.forEach(o),ss=m(t),Lt=n(t,"P",{});var Mi=i(Lt);da=a(Mi,"The abstract from the paper is the following:"),Mi.forEach(o),as=m(t),At=n(t,"P",{});var Ti=i(At);uo=n(Ti,"EM",{});var $i=i(uo);ca=a($i,"Modern approaches typically formulate semantic segmentation as a per-pixel classification task, while instance-level segmentation is handled with an alternative mask classification. Our key insight: mask classification is sufficiently general to solve both semantic- and instance-level segmentation tasks in a unified manner using the exact same model, loss, and training procedure. Following this observation, we propose MaskFormer, a simple mask classification model which predicts a set of binary masks, each associated with a single global class label prediction. Overall, the proposed mask classification-based method simplifies the landscape of effective approaches to semantic and panoptic segmentation tasks and shows excellent empirical results. In particular, we observe that MaskFormer outperforms per-pixel classification baselines when the number of classes is large. Our mask classification-based method outperforms both current state-of-the-art semantic (55.6 mIoU on ADE20K) and panoptic segmentation (52.7 PQ on COCO) models."),$i.forEach(o),Ti.forEach(o),rs=m(t),qt=n(t,"P",{});var Ei=i(qt);ma=a(Ei,"Tips:"),Ei.forEach(o),ns=m(t),C=n(t,"UL",{});var ze=i(C);L=n(ze,"LI",{});var Q=i(L);pa=a(Q,"MaskFormer\u2019s Transformer decoder is identical to the decoder of "),Ct=n(Q,"A",{href:!0});var Ii=i(Ct);ha=a(Ii,"DETR"),Ii.forEach(o),fa=a(Q,". During training, the authors of DETR did find it helpful to use auxiliary losses in the decoder, especially to help the model output the correct number of objects of each class. If you set the parameter "),go=n(Q,"CODE",{});var ji=i(go);ua=a(ji,"use_auxilary_loss"),ji.forEach(o),ga=a(Q," of "),St=n(Q,"A",{href:!0});var Pi=i(St);_a=a(Pi,"MaskFormerConfig"),Pi.forEach(o),ka=a(Q," to "),_o=n(Q,"CODE",{});var zi=i(_o);ba=a(zi,"True"),zi.forEach(o),Fa=a(Q,", then prediction feedforward neural networks and Hungarian losses are added after each decoder layer (with the FFNs sharing parameters)."),Q.forEach(o),va=m(ze),A=n(ze,"LI",{});var X=i(A);wa=a(X,`If you want to train the model in a distributed environment across multiple nodes, then one should update the
`),ko=n(X,"CODE",{});var Oi=i(ko);xa=a(Oi,"get_num_masks"),Oi.forEach(o),ya=a(X," function inside in the "),bo=n(X,"CODE",{});var Li=i(bo);Ma=a(Li,"MaskFormerLoss"),Li.forEach(o),Ta=a(X," class of "),Fo=n(X,"CODE",{});var Ai=i(Fo);$a=a(Ai,"modeling_maskformer.py"),Ai.forEach(o),Ea=a(X,`. When training on multiple nodes, this should be
set to the average number of target masks across all nodes, as can be seen in the original implementation `),He=n(X,"A",{href:!0,rel:!0});var qi=i(He);Ia=a(qi,"here"),qi.forEach(o),ja=a(X,"."),X.forEach(o),Pa=m(ze),Be=n(ze,"LI",{});var Ts=i(Be);za=a(Ts,"One can use "),Nt=n(Ts,"A",{href:!0});var Ci=i(Nt);Oa=a(Ci,"MaskFormerFeatureExtractor"),Ci.forEach(o),La=a(Ts," to prepare images for the model and optional targets for the model."),Ts.forEach(o),Aa=m(ze),q=n(ze,"LI",{});var Y=i(q);qa=a(Y,"To get the final segmentation, depending on the task, you can call "),Dt=n(Y,"A",{href:!0});var Si=i(Dt);Ca=a(Si,"post_process_semantic_segmentation()"),Si.forEach(o),Sa=a(Y," or "),Rt=n(Y,"A",{href:!0});var Ni=i(Rt);Na=a(Ni,"post_process_panoptic_segmentation()"),Ni.forEach(o),Da=a(Y,". Both tasks can be solved using "),Ht=n(Y,"A",{href:!0});var Di=i(Ht);Ra=a(Di,"MaskFormerForInstanceSegmentation"),Di.forEach(o),Ha=a(Y," output, panoptic segmentation accepts an optional "),vo=n(Y,"CODE",{});var Ri=i(vo);Ba=a(Ri,"label_ids_to_fuse"),Ri.forEach(o),Ua=a(Y," argument to fuse instances of the target object/s (e.g. sky) together."),Y.forEach(o),ze.forEach(o),is=m(t),he=n(t,"P",{});var $s=i(he);Wa=a($s,"The figure below illustrates the architecture of MaskFormer. Taken from the "),Ue=n($s,"A",{href:!0,rel:!0});var Hi=i(Ue);Va=a(Hi,"original paper"),Hi.forEach(o),Ga=a($s,"."),$s.forEach(o),ls=m(t),We=n(t,"IMG",{width:!0,src:!0}),ds=m(t),G=n(t,"P",{});var ro=i(G);Ka=a(ro,"This model was contributed by "),Ve=n(ro,"A",{href:!0,rel:!0});var Bi=i(Ve);Qa=a(Bi,"francesco"),Bi.forEach(o),Xa=a(ro,". The original code can be found "),Ge=n(ro,"A",{href:!0,rel:!0});var Ui=i(Ge);Ya=a(Ui,"here"),Ui.forEach(o),Ja=a(ro,"."),ro.forEach(o),cs=m(t),Z=n(t,"H2",{class:!0});var Es=i(Z);fe=n(Es,"A",{id:!0,class:!0,href:!0});var Wi=i(fe);wo=n(Wi,"SPAN",{});var Vi=i(wo);v(Ke.$$.fragment,Vi),Vi.forEach(o),Wi.forEach(o),Za=m(Es),xo=n(Es,"SPAN",{});var Gi=i(xo);er=a(Gi,"Resources"),Gi.forEach(o),Es.forEach(o),ms=m(t),v(Qe.$$.fragment,t),ps=m(t),Bt=n(t,"UL",{});var Ki=i(Bt);Xe=n(Ki,"LI",{});var Is=i(Xe);tr=a(Is,"All notebooks that illustrate inference as well as fine-tuning on custom data with MaskFormer can be found "),Ye=n(Is,"A",{href:!0,rel:!0});var Qi=i(Ye);or=a(Qi,"here"),Qi.forEach(o),sr=a(Is,"."),Is.forEach(o),Ki.forEach(o),hs=m(t),ee=n(t,"H2",{class:!0});var js=i(ee);ue=n(js,"A",{id:!0,class:!0,href:!0});var Xi=i(ue);yo=n(Xi,"SPAN",{});var Yi=i(yo);v(Je.$$.fragment,Yi),Yi.forEach(o),Xi.forEach(o),ar=m(js),Mo=n(js,"SPAN",{});var Ji=i(Mo);rr=a(Ji,"MaskFormer specific outputs"),Ji.forEach(o),js.forEach(o),fs=m(t),te=n(t,"DIV",{class:!0});var Ps=i(te);v(Ze.$$.fragment,Ps),nr=m(Ps),et=n(Ps,"P",{});var zs=i(et);ir=a(zs,"Class for outputs of "),Ut=n(zs,"A",{href:!0});var Zi=i(Ut);lr=a(Zi,"MaskFormerModel"),Zi.forEach(o),dr=a(zs,". This class returns all the needed hidden states to compute the logits."),zs.forEach(o),Ps.forEach(o),us=m(t),R=n(t,"DIV",{class:!0});var no=i(R);v(tt.$$.fragment,no),cr=m(no),ot=n(no,"P",{});var Os=i(ot);mr=a(Os,"Class for outputs of "),Wt=n(Os,"A",{href:!0});var el=i(Wt);pr=a(el,"MaskFormerForInstanceSegmentation"),el.forEach(o),hr=a(Os,"."),Os.forEach(o),fr=m(no),H=n(no,"P",{});var Oe=i(H);ur=a(Oe,"This output can be directly passed to "),Vt=n(Oe,"A",{href:!0});var tl=i(Vt);gr=a(tl,"post_process_semantic_segmentation()"),tl.forEach(o),_r=a(Oe,` or or
`),Gt=n(Oe,"A",{href:!0});var ol=i(Gt);kr=a(ol,"post_process_instance_segmentation()"),ol.forEach(o),br=a(Oe,` or
`),Kt=n(Oe,"A",{href:!0});var sl=i(Kt);Fr=a(sl,"post_process_panoptic_segmentation()"),sl.forEach(o),vr=a(Oe," depending on the task. Please, see\n[`~MaskFormerFeatureExtractor] for details regarding usage."),Oe.forEach(o),no.forEach(o),gs=m(t),oe=n(t,"H2",{class:!0});var Ls=i(oe);ge=n(Ls,"A",{id:!0,class:!0,href:!0});var al=i(ge);To=n(al,"SPAN",{});var rl=i(To);v(st.$$.fragment,rl),rl.forEach(o),al.forEach(o),wr=m(Ls),$o=n(Ls,"SPAN",{});var nl=i($o);xr=a(nl,"MaskFormerConfig"),nl.forEach(o),Ls.forEach(o),_s=m(t),$=n(t,"DIV",{class:!0});var O=i($);v(at.$$.fragment,O),yr=m(O),B=n(O,"P",{});var Le=i(B);Mr=a(Le,"This is the configuration class to store the configuration of a "),Qt=n(Le,"A",{href:!0});var il=i(Qt);Tr=a(il,"MaskFormerModel"),il.forEach(o),$r=a(Le,`. It is used to instantiate a
MaskFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MaskFormer
`),rt=n(Le,"A",{href:!0,rel:!0});var ll=i(rt);Er=a(ll,"facebook/maskformer-swin-base-ade"),ll.forEach(o),Ir=a(Le,` architecture trained
on `),nt=n(Le,"A",{href:!0,rel:!0});var dl=i(nt);jr=a(dl,"ADE20k-150"),dl.forEach(o),Pr=a(Le,"."),Le.forEach(o),zr=m(O),se=n(O,"P",{});var io=i(se);Or=a(io,"Configuration objects inherit from "),Xt=n(io,"A",{href:!0});var cl=i(Xt);Lr=a(cl,"PretrainedConfig"),cl.forEach(o),Ar=a(io,` and can be used to control the model outputs. Read the
documentation from `),Yt=n(io,"A",{href:!0});var ml=i(Yt);qr=a(ml,"PretrainedConfig"),ml.forEach(o),Cr=a(io," for more information."),io.forEach(o),Sr=m(O),it=n(O,"P",{});var As=i(it);Nr=a(As,"Currently, MaskFormer only supports the "),Jt=n(As,"A",{href:!0});var pl=i(Jt);Dr=a(pl,"Swin Transformer"),pl.forEach(o),Rr=a(As," as backbone."),As.forEach(o),Hr=m(O),v(_e.$$.fragment,O),Br=m(O),ke=n(O,"DIV",{class:!0});var qs=i(ke);v(lt.$$.fragment,qs),Ur=m(qs),dt=n(qs,"P",{});var Cs=i(dt);Wr=a(Cs,"Instantiate a "),Zt=n(Cs,"A",{href:!0});var hl=i(Zt);Vr=a(hl,"MaskFormerConfig"),hl.forEach(o),Gr=a(Cs,` (or a derived class) from a pre-trained backbone model configuration and DETR model
configuration.`),Cs.forEach(o),qs.forEach(o),Kr=m(O),be=n(O,"DIV",{class:!0});var Ss=i(be);v(ct.$$.fragment,Ss),Qr=m(Ss),mt=n(Ss,"P",{});var Ns=i(mt);Xr=a(Ns,"Serializes this instance to a Python dictionary. Override the default "),eo=n(Ns,"A",{href:!0});var fl=i(eo);Yr=a(fl,"to_dict()"),fl.forEach(o),Jr=a(Ns,"."),Ns.forEach(o),Ss.forEach(o),O.forEach(o),ks=m(t),ae=n(t,"H2",{class:!0});var Ds=i(ae);Fe=n(Ds,"A",{id:!0,class:!0,href:!0});var ul=i(Fe);Eo=n(ul,"SPAN",{});var gl=i(Eo);v(pt.$$.fragment,gl),gl.forEach(o),ul.forEach(o),Zr=m(Ds),Io=n(Ds,"SPAN",{});var _l=i(Io);en=a(_l,"MaskFormerFeatureExtractor"),_l.forEach(o),Ds.forEach(o),bs=m(t),T=n(t,"DIV",{class:!0});var j=i(T);v(ht.$$.fragment,j),tn=m(j),jo=n(j,"P",{});var kl=i(jo);on=a(kl,`Constructs a MaskFormer feature extractor. The feature extractor can be used to prepare image(s) and optional
targets for the model.`),kl.forEach(o),sn=m(j),ft=n(j,"P",{});var Rs=i(ft);an=a(Rs,"This feature extractor inherits from "),to=n(Rs,"A",{href:!0});var bl=i(to);rn=a(bl,"FeatureExtractionMixin"),bl.forEach(o),nn=a(Rs,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Rs.forEach(o),ln=m(j),S=n(j,"DIV",{class:!0});var Ae=i(S);v(ut.$$.fragment,Ae),dn=m(Ae),Po=n(Ae,"P",{});var Fl=i(Po);cn=a(Fl,`Main method to prepare for the model one or several image(s) and optional annotations. Images are by default
padded up to the largest image in a batch, and a pixel mask is created that indicates which pixels are
real/which are padding.`),Fl.forEach(o),mn=m(Ae),U=n(Ae,"P",{});var qe=i(U);pn=a(qe,`MaskFormer addresses semantic segmentation with a mask classification paradigm, thus input segmentation maps
will be converted to lists of binary masks and their respective labels. Let\u2019s see an example, assuming
`),zo=n(qe,"CODE",{});var vl=i(zo);hn=a(vl,"segmentation_maps = [[2,6,7,9]]"),vl.forEach(o),fn=a(qe,", the output will contain "),Oo=n(qe,"CODE",{});var wl=i(Oo);un=a(wl,"mask_labels = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]"),wl.forEach(o),gn=a(qe," (four binary masks) and "),Lo=n(qe,"CODE",{});var xl=i(Lo);_n=a(xl,"class_labels = [2,6,7,9]"),xl.forEach(o),kn=a(qe,`, the labels for
each mask.`),qe.forEach(o),bn=m(Ae),v(ve.$$.fragment,Ae),Ae.forEach(o),Fn=m(j),K=n(j,"DIV",{class:!0});var lo=i(K);v(gt.$$.fragment,lo),vn=m(lo),_t=n(lo,"P",{});var Hs=i(_t);wn=a(Hs,"Pad images up to the largest image in a batch and create a corresponding "),Ao=n(Hs,"CODE",{});var yl=i(Ao);xn=a(yl,"pixel_mask"),yl.forEach(o),yn=a(Hs,"."),Hs.forEach(o),Mn=m(lo),W=n(lo,"P",{});var Ce=i(W);Tn=a(Ce,`MaskFormer addresses semantic segmentation with a mask classification paradigm, thus input segmentation maps
will be converted to lists of binary masks and their respective labels. Let\u2019s see an example, assuming
`),qo=n(Ce,"CODE",{});var Ml=i(qo);$n=a(Ml,"segmentation_maps = [[2,6,7,9]]"),Ml.forEach(o),En=a(Ce,", the output will contain "),Co=n(Ce,"CODE",{});var Tl=i(Co);In=a(Tl,"mask_labels = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]"),Tl.forEach(o),jn=a(Ce," (four binary masks) and "),So=n(Ce,"CODE",{});var $l=i(So);Pn=a($l,"class_labels = [2,6,7,9]"),$l.forEach(o),zn=a(Ce,`, the labels for
each mask.`),Ce.forEach(o),lo.forEach(o),On=m(j),we=n(j,"DIV",{class:!0});var Bs=i(we);v(kt.$$.fragment,Bs),Ln=m(Bs),bt=n(Bs,"P",{});var Us=i(bt);An=a(Us,"Converts the output of "),oo=n(Us,"A",{href:!0});var El=i(oo);qn=a(El,"MaskFormerForInstanceSegmentation"),El.forEach(o),Cn=a(Us,` into semantic segmentation maps. Only supports
PyTorch.`),Us.forEach(o),Bs.forEach(o),Sn=m(j),xe=n(j,"DIV",{class:!0});var Ws=i(xe);v(Ft.$$.fragment,Ws),Nn=m(Ws),vt=n(Ws,"P",{});var Vs=i(vt);Dn=a(Vs,"Converts the output of "),No=n(Vs,"CODE",{});var Il=i(No);Rn=a(Il,"MaskFormerForInstanceSegmentationOutput"),Il.forEach(o),Hn=a(Vs,` into instance segmentation predictions. Only
supports PyTorch.`),Vs.forEach(o),Ws.forEach(o),Bn=m(j),ye=n(j,"DIV",{class:!0});var Gs=i(ye);v(wt.$$.fragment,Gs),Un=m(Gs),xt=n(Gs,"P",{});var Ks=i(xt);Wn=a(Ks,"Converts the output of "),Do=n(Ks,"CODE",{});var jl=i(Do);Vn=a(jl,"MaskFormerForInstanceSegmentationOutput"),jl.forEach(o),Gn=a(Ks,` into image panoptic segmentation
predictions. Only supports PyTorch.`),Ks.forEach(o),Gs.forEach(o),j.forEach(o),Fs=m(t),re=n(t,"H2",{class:!0});var Qs=i(re);Me=n(Qs,"A",{id:!0,class:!0,href:!0});var Pl=i(Me);Ro=n(Pl,"SPAN",{});var zl=i(Ro);v(yt.$$.fragment,zl),zl.forEach(o),Pl.forEach(o),Kn=m(Qs),Ho=n(Qs,"SPAN",{});var Ol=i(Ho);Qn=a(Ol,"MaskFormerModel"),Ol.forEach(o),Qs.forEach(o),vs=m(t),V=n(t,"DIV",{class:!0});var co=i(V);v(Mt.$$.fragment,co),Xn=m(co),Tt=n(co,"P",{});var Xs=i(Tt);Yn=a(Xs,`The bare MaskFormer Model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),$t=n(Xs,"A",{href:!0,rel:!0});var Ll=i($t);Jn=a(Ll,"torch.nn.Module"),Ll.forEach(o),Zn=a(Xs,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Xs.forEach(o),ei=m(co),N=n(co,"DIV",{class:!0});var Se=i(N);v(Et.$$.fragment,Se),ti=m(Se),ne=n(Se,"P",{});var mo=i(ne);oi=a(mo,"The "),so=n(mo,"A",{href:!0});var Al=i(so);si=a(Al,"MaskFormerModel"),Al.forEach(o),ai=a(mo," forward method, overrides the "),Bo=n(mo,"CODE",{});var ql=i(Bo);ri=a(ql,"__call__"),ql.forEach(o),ni=a(mo," special method."),mo.forEach(o),ii=m(Se),v(Te.$$.fragment,Se),li=m(Se),v($e.$$.fragment,Se),Se.forEach(o),co.forEach(o),ws=m(t),ie=n(t,"H2",{class:!0});var Ys=i(ie);Ee=n(Ys,"A",{id:!0,class:!0,href:!0});var Cl=i(Ee);Uo=n(Cl,"SPAN",{});var Sl=i(Uo);v(It.$$.fragment,Sl),Sl.forEach(o),Cl.forEach(o),di=m(Ys),Wo=n(Ys,"SPAN",{});var Nl=i(Wo);ci=a(Nl,"MaskFormerForInstanceSegmentation"),Nl.forEach(o),Ys.forEach(o),xs=m(t),le=n(t,"DIV",{class:!0});var Js=i(le);v(jt.$$.fragment,Js),mi=m(Js),I=n(Js,"DIV",{class:!0});var D=i(I);v(Pt.$$.fragment,D),pi=m(D),de=n(D,"P",{});var po=i(de);hi=a(po,"The "),ao=n(po,"A",{href:!0});var Dl=i(ao);fi=a(Dl,"MaskFormerForInstanceSegmentation"),Dl.forEach(o),ui=a(po," forward method, overrides the "),Vo=n(po,"CODE",{});var Rl=i(Vo);gi=a(Rl,"__call__"),Rl.forEach(o),_i=a(po," special method."),po.forEach(o),ki=m(D),v(Ie.$$.fragment,D),bi=m(D),Go=n(D,"P",{});var Hl=i(Go);Fi=a(Hl,"Examples:"),Hl.forEach(o),vi=m(D),v(je.$$.fragment,D),wi=m(D),v(Pe.$$.fragment,D),D.forEach(o),Js.forEach(o),this.h()},h(){l(p,"name","hf:doc:metadata"),l(p,"content",JSON.stringify(rd)),l(u,"id","maskformer"),l(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(u,"href","#maskformer"),l(g,"class","relative group"),l(me,"id","overview"),l(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(me,"href","#overview"),l(J,"class","relative group"),l(Re,"href","https://arxiv.org/abs/2107.06278"),l(Re,"rel","nofollow"),l(Ct,"href","detr"),l(St,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),l(He,"href","https://github.com/facebookresearch/MaskFormer/blob/da3e60d85fdeedcb31476b5edd7d328826ce56cc/mask_former/modeling/criterion.py#L169"),l(He,"rel","nofollow"),l(Nt,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),l(Dt,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor.post_process_semantic_segmentation"),l(Rt,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation"),l(Ht,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),l(Ue,"href","https://arxiv.org/abs/2107.06278"),l(Ue,"rel","nofollow"),l(We,"width","600"),Gl(We.src,xi="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/maskformer_architecture.png")||l(We,"src",xi),l(Ve,"href","https://huggingface.co/francesco"),l(Ve,"rel","nofollow"),l(Ge,"href","https://github.com/facebookresearch/MaskFormer"),l(Ge,"rel","nofollow"),l(fe,"id","resources"),l(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(fe,"href","#resources"),l(Z,"class","relative group"),l(Ye,"href","https://github.com/NielsRogge/Transformers-Tutorials/tree/master/MaskFormer"),l(Ye,"rel","nofollow"),l(ue,"id","transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput"),l(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ue,"href","#transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput"),l(ee,"class","relative group"),l(Ut,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),l(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Wt,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),l(Vt,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor.post_process_semantic_segmentation"),l(Gt,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor.post_process_instance_segmentation"),l(Kt,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation"),l(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ge,"id","transformers.MaskFormerConfig"),l(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ge,"href","#transformers.MaskFormerConfig"),l(oe,"class","relative group"),l(Qt,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),l(rt,"href","https://huggingface.co/facebook/maskformer-swin-base-ade"),l(rt,"rel","nofollow"),l(nt,"href","https://huggingface.co/datasets/scene_parse_150"),l(nt,"rel","nofollow"),l(Xt,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),l(Yt,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),l(Jt,"href","swin"),l(Zt,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),l(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(eo,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.to_dict"),l(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Fe,"id","transformers.MaskFormerFeatureExtractor"),l(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Fe,"href","#transformers.MaskFormerFeatureExtractor"),l(ae,"class","relative group"),l(to,"href","/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),l(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(oo,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),l(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Me,"id","transformers.MaskFormerModel"),l(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Me,"href","#transformers.MaskFormerModel"),l(re,"class","relative group"),l($t,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l($t,"rel","nofollow"),l(so,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),l(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Ee,"id","transformers.MaskFormerForInstanceSegmentation"),l(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ee,"href","#transformers.MaskFormerForInstanceSegmentation"),l(ie,"class","relative group"),l(ao,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),l(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,h){e(document.head,p),f(t,b,h),f(t,g,h),e(g,u),e(u,k),w(d,k,null),e(g,_),e(g,z),e(z,sa),f(t,es,h),w(ce,t,h),f(t,ts,h),f(t,J,h),e(J,me),e(me,ho),w(De,ho,null),e(J,aa),e(J,fo),e(fo,ra),f(t,os,h),f(t,pe,h),e(pe,na),e(pe,Re),e(Re,ia),e(pe,la),f(t,ss,h),f(t,Lt,h),e(Lt,da),f(t,as,h),f(t,At,h),e(At,uo),e(uo,ca),f(t,rs,h),f(t,qt,h),e(qt,ma),f(t,ns,h),f(t,C,h),e(C,L),e(L,pa),e(L,Ct),e(Ct,ha),e(L,fa),e(L,go),e(go,ua),e(L,ga),e(L,St),e(St,_a),e(L,ka),e(L,_o),e(_o,ba),e(L,Fa),e(C,va),e(C,A),e(A,wa),e(A,ko),e(ko,xa),e(A,ya),e(A,bo),e(bo,Ma),e(A,Ta),e(A,Fo),e(Fo,$a),e(A,Ea),e(A,He),e(He,Ia),e(A,ja),e(C,Pa),e(C,Be),e(Be,za),e(Be,Nt),e(Nt,Oa),e(Be,La),e(C,Aa),e(C,q),e(q,qa),e(q,Dt),e(Dt,Ca),e(q,Sa),e(q,Rt),e(Rt,Na),e(q,Da),e(q,Ht),e(Ht,Ra),e(q,Ha),e(q,vo),e(vo,Ba),e(q,Ua),f(t,is,h),f(t,he,h),e(he,Wa),e(he,Ue),e(Ue,Va),e(he,Ga),f(t,ls,h),f(t,We,h),f(t,ds,h),f(t,G,h),e(G,Ka),e(G,Ve),e(Ve,Qa),e(G,Xa),e(G,Ge),e(Ge,Ya),e(G,Ja),f(t,cs,h),f(t,Z,h),e(Z,fe),e(fe,wo),w(Ke,wo,null),e(Z,Za),e(Z,xo),e(xo,er),f(t,ms,h),w(Qe,t,h),f(t,ps,h),f(t,Bt,h),e(Bt,Xe),e(Xe,tr),e(Xe,Ye),e(Ye,or),e(Xe,sr),f(t,hs,h),f(t,ee,h),e(ee,ue),e(ue,yo),w(Je,yo,null),e(ee,ar),e(ee,Mo),e(Mo,rr),f(t,fs,h),f(t,te,h),w(Ze,te,null),e(te,nr),e(te,et),e(et,ir),e(et,Ut),e(Ut,lr),e(et,dr),f(t,us,h),f(t,R,h),w(tt,R,null),e(R,cr),e(R,ot),e(ot,mr),e(ot,Wt),e(Wt,pr),e(ot,hr),e(R,fr),e(R,H),e(H,ur),e(H,Vt),e(Vt,gr),e(H,_r),e(H,Gt),e(Gt,kr),e(H,br),e(H,Kt),e(Kt,Fr),e(H,vr),f(t,gs,h),f(t,oe,h),e(oe,ge),e(ge,To),w(st,To,null),e(oe,wr),e(oe,$o),e($o,xr),f(t,_s,h),f(t,$,h),w(at,$,null),e($,yr),e($,B),e(B,Mr),e(B,Qt),e(Qt,Tr),e(B,$r),e(B,rt),e(rt,Er),e(B,Ir),e(B,nt),e(nt,jr),e(B,Pr),e($,zr),e($,se),e(se,Or),e(se,Xt),e(Xt,Lr),e(se,Ar),e(se,Yt),e(Yt,qr),e(se,Cr),e($,Sr),e($,it),e(it,Nr),e(it,Jt),e(Jt,Dr),e(it,Rr),e($,Hr),w(_e,$,null),e($,Br),e($,ke),w(lt,ke,null),e(ke,Ur),e(ke,dt),e(dt,Wr),e(dt,Zt),e(Zt,Vr),e(dt,Gr),e($,Kr),e($,be),w(ct,be,null),e(be,Qr),e(be,mt),e(mt,Xr),e(mt,eo),e(eo,Yr),e(mt,Jr),f(t,ks,h),f(t,ae,h),e(ae,Fe),e(Fe,Eo),w(pt,Eo,null),e(ae,Zr),e(ae,Io),e(Io,en),f(t,bs,h),f(t,T,h),w(ht,T,null),e(T,tn),e(T,jo),e(jo,on),e(T,sn),e(T,ft),e(ft,an),e(ft,to),e(to,rn),e(ft,nn),e(T,ln),e(T,S),w(ut,S,null),e(S,dn),e(S,Po),e(Po,cn),e(S,mn),e(S,U),e(U,pn),e(U,zo),e(zo,hn),e(U,fn),e(U,Oo),e(Oo,un),e(U,gn),e(U,Lo),e(Lo,_n),e(U,kn),e(S,bn),w(ve,S,null),e(T,Fn),e(T,K),w(gt,K,null),e(K,vn),e(K,_t),e(_t,wn),e(_t,Ao),e(Ao,xn),e(_t,yn),e(K,Mn),e(K,W),e(W,Tn),e(W,qo),e(qo,$n),e(W,En),e(W,Co),e(Co,In),e(W,jn),e(W,So),e(So,Pn),e(W,zn),e(T,On),e(T,we),w(kt,we,null),e(we,Ln),e(we,bt),e(bt,An),e(bt,oo),e(oo,qn),e(bt,Cn),e(T,Sn),e(T,xe),w(Ft,xe,null),e(xe,Nn),e(xe,vt),e(vt,Dn),e(vt,No),e(No,Rn),e(vt,Hn),e(T,Bn),e(T,ye),w(wt,ye,null),e(ye,Un),e(ye,xt),e(xt,Wn),e(xt,Do),e(Do,Vn),e(xt,Gn),f(t,Fs,h),f(t,re,h),e(re,Me),e(Me,Ro),w(yt,Ro,null),e(re,Kn),e(re,Ho),e(Ho,Qn),f(t,vs,h),f(t,V,h),w(Mt,V,null),e(V,Xn),e(V,Tt),e(Tt,Yn),e(Tt,$t),e($t,Jn),e(Tt,Zn),e(V,ei),e(V,N),w(Et,N,null),e(N,ti),e(N,ne),e(ne,oi),e(ne,so),e(so,si),e(ne,ai),e(ne,Bo),e(Bo,ri),e(ne,ni),e(N,ii),w(Te,N,null),e(N,li),w($e,N,null),f(t,ws,h),f(t,ie,h),e(ie,Ee),e(Ee,Uo),w(It,Uo,null),e(ie,di),e(ie,Wo),e(Wo,ci),f(t,xs,h),f(t,le,h),w(jt,le,null),e(le,mi),e(le,I),w(Pt,I,null),e(I,pi),e(I,de),e(de,hi),e(de,ao),e(ao,fi),e(de,ui),e(de,Vo),e(Vo,gi),e(de,_i),e(I,ki),w(Ie,I,null),e(I,bi),e(I,Go),e(Go,Fi),e(I,vi),w(je,I,null),e(I,wi),w(Pe,I,null),ys=!0},p(t,[h]){const zt={};h&2&&(zt.$$scope={dirty:h,ctx:t}),ce.$set(zt);const Ko={};h&2&&(Ko.$$scope={dirty:h,ctx:t}),_e.$set(Ko);const Qo={};h&2&&(Qo.$$scope={dirty:h,ctx:t}),ve.$set(Qo);const Xo={};h&2&&(Xo.$$scope={dirty:h,ctx:t}),Te.$set(Xo);const Ot={};h&2&&(Ot.$$scope={dirty:h,ctx:t}),$e.$set(Ot);const Yo={};h&2&&(Yo.$$scope={dirty:h,ctx:t}),Ie.$set(Yo);const Jo={};h&2&&(Jo.$$scope={dirty:h,ctx:t}),je.$set(Jo);const Zo={};h&2&&(Zo.$$scope={dirty:h,ctx:t}),Pe.$set(Zo)},i(t){ys||(x(d.$$.fragment,t),x(ce.$$.fragment,t),x(De.$$.fragment,t),x(Ke.$$.fragment,t),x(Qe.$$.fragment,t),x(Je.$$.fragment,t),x(Ze.$$.fragment,t),x(tt.$$.fragment,t),x(st.$$.fragment,t),x(at.$$.fragment,t),x(_e.$$.fragment,t),x(lt.$$.fragment,t),x(ct.$$.fragment,t),x(pt.$$.fragment,t),x(ht.$$.fragment,t),x(ut.$$.fragment,t),x(ve.$$.fragment,t),x(gt.$$.fragment,t),x(kt.$$.fragment,t),x(Ft.$$.fragment,t),x(wt.$$.fragment,t),x(yt.$$.fragment,t),x(Mt.$$.fragment,t),x(Et.$$.fragment,t),x(Te.$$.fragment,t),x($e.$$.fragment,t),x(It.$$.fragment,t),x(jt.$$.fragment,t),x(Pt.$$.fragment,t),x(Ie.$$.fragment,t),x(je.$$.fragment,t),x(Pe.$$.fragment,t),ys=!0)},o(t){y(d.$$.fragment,t),y(ce.$$.fragment,t),y(De.$$.fragment,t),y(Ke.$$.fragment,t),y(Qe.$$.fragment,t),y(Je.$$.fragment,t),y(Ze.$$.fragment,t),y(tt.$$.fragment,t),y(st.$$.fragment,t),y(at.$$.fragment,t),y(_e.$$.fragment,t),y(lt.$$.fragment,t),y(ct.$$.fragment,t),y(pt.$$.fragment,t),y(ht.$$.fragment,t),y(ut.$$.fragment,t),y(ve.$$.fragment,t),y(gt.$$.fragment,t),y(kt.$$.fragment,t),y(Ft.$$.fragment,t),y(wt.$$.fragment,t),y(yt.$$.fragment,t),y(Mt.$$.fragment,t),y(Et.$$.fragment,t),y(Te.$$.fragment,t),y($e.$$.fragment,t),y(It.$$.fragment,t),y(jt.$$.fragment,t),y(Pt.$$.fragment,t),y(Ie.$$.fragment,t),y(je.$$.fragment,t),y(Pe.$$.fragment,t),ys=!1},d(t){o(p),t&&o(b),t&&o(g),M(d),t&&o(es),M(ce,t),t&&o(ts),t&&o(J),M(De),t&&o(os),t&&o(pe),t&&o(ss),t&&o(Lt),t&&o(as),t&&o(At),t&&o(rs),t&&o(qt),t&&o(ns),t&&o(C),t&&o(is),t&&o(he),t&&o(ls),t&&o(We),t&&o(ds),t&&o(G),t&&o(cs),t&&o(Z),M(Ke),t&&o(ms),M(Qe,t),t&&o(ps),t&&o(Bt),t&&o(hs),t&&o(ee),M(Je),t&&o(fs),t&&o(te),M(Ze),t&&o(us),t&&o(R),M(tt),t&&o(gs),t&&o(oe),M(st),t&&o(_s),t&&o($),M(at),M(_e),M(lt),M(ct),t&&o(ks),t&&o(ae),M(pt),t&&o(bs),t&&o(T),M(ht),M(ut),M(ve),M(gt),M(kt),M(Ft),M(wt),t&&o(Fs),t&&o(re),M(yt),t&&o(vs),t&&o(V),M(Mt),M(Et),M(Te),M($e),t&&o(ws),t&&o(ie),M(It),t&&o(xs),t&&o(le),M(jt),M(Pt),M(Ie),M(je),M(Pe)}}}const rd={local:"maskformer",sections:[{local:"overview",title:"Overview"},{local:"resources",title:"Resources"},{local:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput",title:"MaskFormer specific outputs"},{local:"transformers.MaskFormerConfig",title:"MaskFormerConfig"},{local:"transformers.MaskFormerFeatureExtractor",title:"MaskFormerFeatureExtractor"},{local:"transformers.MaskFormerModel",title:"MaskFormerModel"},{local:"transformers.MaskFormerForInstanceSegmentation",title:"MaskFormerForInstanceSegmentation"}],title:"MaskFormer"};function nd(E){return Kl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class fd extends Bl{constructor(p){super();Ul(this,p,nd,ad,Wl,{})}}export{fd as default,rd as metadata};
