import{S as Il,i as zl,s as xl,e as r,k as i,w as b,t as n,M as Cl,c as a,d as t,m as c,a as s,x as F,h as l,b as d,N as kl,G as e,g as f,y as w,q as y,o as $,B as T,v as Ml,L as Ks}from"../../chunks/vendor-hf-doc-builder.js";import{T as El}from"../../chunks/Tip-hf-doc-builder.js";import{D as le}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Xs}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as ao}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Js}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Al(N){let h,P,_,g,v;return g=new Xs({props:{code:`from transformers import PoolFormerConfig, PoolFormerModel

# Initializing a PoolFormer sail/poolformer_s12 style configuration
configuration = PoolFormerConfig()

# Initializing a model (with random weights) from the sail/poolformer_s12 style configuration
model = PoolFormerModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PoolFormerConfig, PoolFormerModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a PoolFormer sail/poolformer_s12 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = PoolFormerConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model (with random weights) from the sail/poolformer_s12 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = PoolFormerModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){h=r("p"),P=n("Example:"),_=i(),b(g.$$.fragment)},l(m){h=a(m,"P",{});var u=s(h);P=l(u,"Example:"),u.forEach(t),_=c(m),F(g.$$.fragment,m)},m(m,u){f(m,h,u),e(h,P),f(m,_,u),w(g,m,u),v=!0},p:Ks,i(m){v||(y(g.$$.fragment,m),v=!0)},o(m){$(g.$$.fragment,m),v=!1},d(m){m&&t(h),m&&t(_),T(g,m)}}}function Dl(N){let h,P,_,g,v;return{c(){h=r("p"),P=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),_=r("code"),g=n("Module"),v=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(m){h=a(m,"P",{});var u=s(h);P=l(u,"Although the recipe for forward pass needs to be defined within this function, one should call the "),_=a(u,"CODE",{});var L=s(_);g=l(L,"Module"),L.forEach(t),v=l(u,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),u.forEach(t)},m(m,u){f(m,h,u),e(h,P),e(h,_),e(_,g),e(h,v)},d(m){m&&t(h)}}}function Nl(N){let h,P,_,g,v;return g=new Xs({props:{code:`from transformers import PoolFormerFeatureExtractor, PoolFormerModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = PoolFormerFeatureExtractor.from_pretrained("sail/poolformer_s12")
model = PoolFormerModel.from_pretrained("sail/poolformer_s12")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PoolFormerFeatureExtractor, PoolFormerModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = PoolFormerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;sail/poolformer_s12&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = PoolFormerModel.from_pretrained(<span class="hljs-string">&quot;sail/poolformer_s12&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">512</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]`}}),{c(){h=r("p"),P=n("Example:"),_=i(),b(g.$$.fragment)},l(m){h=a(m,"P",{});var u=s(h);P=l(u,"Example:"),u.forEach(t),_=c(m),F(g.$$.fragment,m)},m(m,u){f(m,h,u),e(h,P),f(m,_,u),w(g,m,u),v=!0},p:Ks,i(m){v||(y(g.$$.fragment,m),v=!0)},o(m){$(g.$$.fragment,m),v=!1},d(m){m&&t(h),m&&t(_),T(g,m)}}}function ql(N){let h,P,_,g,v;return{c(){h=r("p"),P=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),_=r("code"),g=n("Module"),v=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(m){h=a(m,"P",{});var u=s(h);P=l(u,"Although the recipe for forward pass needs to be defined within this function, one should call the "),_=a(u,"CODE",{});var L=s(_);g=l(L,"Module"),L.forEach(t),v=l(u,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),u.forEach(t)},m(m,u){f(m,h,u),e(h,P),e(h,_),e(_,g),e(h,v)},d(m){m&&t(h)}}}function jl(N){let h,P,_,g,v;return g=new Xs({props:{code:`from transformers import PoolFormerFeatureExtractor, PoolFormerForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = PoolFormerFeatureExtractor.from_pretrained("sail/poolformer_s12")
model = PoolFormerForImageClassification.from_pretrained("sail/poolformer_s12")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PoolFormerFeatureExtractor, PoolFormerForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = PoolFormerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;sail/poolformer_s12&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = PoolFormerForImageClassification.from_pretrained(<span class="hljs-string">&quot;sail/poolformer_s12&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){h=r("p"),P=n("Example:"),_=i(),b(g.$$.fragment)},l(m){h=a(m,"P",{});var u=s(h);P=l(u,"Example:"),u.forEach(t),_=c(m),F(g.$$.fragment,m)},m(m,u){f(m,h,u),e(h,P),f(m,_,u),w(g,m,u),v=!0},p:Ks,i(m){v||(y(g.$$.fragment,m),v=!0)},o(m){$(g.$$.fragment,m),v=!1},d(m){m&&t(h),m&&t(_),T(g,m)}}}function Ll(N){let h,P,_,g,v,m,u,L,mr,Ct,X,ie,Bo,ze,pr,Uo,fr,kt,ce,hr,xe,gr,ur,Mt,so,_r,At,no,Ho,vr,Dt,de,Pr,Ce,br,Fr,Nt,ke,Qs,qt,lo,wr,jt,B,Me,yr,Ae,$r,Tr,Er,De,Ir,io,zr,xr,Cr,Wo,kr,Lt,me,Go,E,co,Vo,Mr,Ar,Yo,Jo,Dr,Nr,Ko,Xo,qr,jr,mo,Qo,Lr,Sr,po,Zo,Rr,Or,I,z,fo,Br,Ur,et,Hr,Wr,ot,Gr,Vr,ho,Yr,Jr,go,Kr,Xr,x,uo,Qr,Zr,tt,ea,oa,rt,ta,ra,_o,aa,sa,vo,na,la,C,Po,ia,ca,at,da,ma,st,pa,fa,bo,ha,ga,Fo,ua,_a,k,wo,va,Pa,nt,ba,Fa,lt,wa,ya,yo,$a,Ta,$o,Ea,Ia,M,To,za,xa,it,Ca,ka,ct,Ma,Aa,Eo,Da,Na,Io,qa,St,U,ja,Ne,La,Sa,qe,Ra,Oa,Rt,Q,pe,dt,je,Ba,mt,Ua,Ot,A,Le,Ha,Z,Wa,zo,Ga,Va,Se,Ya,Ja,Ka,ee,Xa,xo,Qa,Za,Co,es,os,ts,fe,Bt,oe,he,pt,Re,rs,ft,as,Ut,S,Oe,ss,ht,ns,ls,ge,Be,is,gt,cs,Ht,te,ue,ut,Ue,ds,_t,ms,Wt,R,He,ps,vt,fs,hs,_e,We,gs,Pt,us,Gt,re,ve,bt,Ge,_s,Ft,vs,Vt,O,Ve,Ps,Ye,bs,Je,Fs,ws,ys,q,Ke,$s,ae,Ts,ko,Es,Is,wt,zs,xs,Cs,Pe,ks,be,Yt,se,Fe,yt,Xe,Ms,$t,As,Jt,D,Qe,Ds,Tt,Ns,qs,Ze,js,eo,Ls,Ss,Rs,j,oo,Os,ne,Bs,Mo,Us,Hs,Et,Ws,Gs,Vs,we,Ys,ye,Kt;return m=new ao({}),ze=new ao({}),je=new ao({}),Le=new le({props:{name:"class transformers.PoolFormerConfig",anchor:"transformers.PoolFormerConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"patch_size",val:" = 16"},{name:"stride",val:" = 16"},{name:"pool_size",val:" = 3"},{name:"mlp_ratio",val:" = 4.0"},{name:"depths",val:" = [2, 2, 6, 2]"},{name:"hidden_sizes",val:" = [64, 128, 320, 512]"},{name:"patch_sizes",val:" = [7, 3, 3, 3]"},{name:"strides",val:" = [4, 2, 2, 2]"},{name:"padding",val:" = [2, 1, 1, 1]"},{name:"num_encoder_blocks",val:" = 4"},{name:"drop_path_rate",val:" = 0.0"},{name:"hidden_act",val:" = 'gelu'"},{name:"use_layer_scale",val:" = True"},{name:"layer_scale_init_value",val:" = 1e-05"},{name:"initializer_range",val:" = 0.02"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.PoolFormerConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of channels in the input image.`,name:"num_channels"},{anchor:"transformers.PoolFormerConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
The size of the input patch.`,name:"patch_size"},{anchor:"transformers.PoolFormerConfig.stride",description:`<strong>stride</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
The stride of the input patch.`,name:"stride"},{anchor:"transformers.PoolFormerConfig.pool_size",description:`<strong>pool_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The size of the pooling window.`,name:"pool_size"},{anchor:"transformers.PoolFormerConfig.mlp_ratio",description:`<strong>mlp_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 4.0) &#x2014;
The ratio of the number of channels in the output of the MLP to the number of channels in the input.`,name:"mlp_ratio"},{anchor:"transformers.PoolFormerConfig.depths",description:`<strong>depths</strong> (<code>list</code>, <em>optional</em>, defaults to <code>[2, 2, 6, 2]</code>) &#x2014;
The depth of each encoder block.`,name:"depths"},{anchor:"transformers.PoolFormerConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>list</code>, <em>optional</em>, defaults to <code>[64, 128, 320, 512]</code>) &#x2014;
The hidden sizes of each encoder block.`,name:"hidden_sizes"},{anchor:"transformers.PoolFormerConfig.patch_sizes",description:`<strong>patch_sizes</strong> (<code>list</code>, <em>optional</em>, defaults to <code>[7, 3, 3, 3]</code>) &#x2014;
The size of the input patch for each encoder block.`,name:"patch_sizes"},{anchor:"transformers.PoolFormerConfig.strides",description:`<strong>strides</strong> (<code>list</code>, <em>optional</em>, defaults to <code>[4, 2, 2, 2]</code>) &#x2014;
The stride of the input patch for each encoder block.`,name:"strides"},{anchor:"transformers.PoolFormerConfig.padding",description:`<strong>padding</strong> (<code>list</code>, <em>optional</em>, defaults to <code>[2, 1, 1, 1]</code>) &#x2014;
The padding of the input patch for each encoder block.`,name:"padding"},{anchor:"transformers.PoolFormerConfig.num_encoder_blocks",description:`<strong>num_encoder_blocks</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of encoder blocks.`,name:"num_encoder_blocks"},{anchor:"transformers.PoolFormerConfig.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout rate for the dropout layers.`,name:"drop_path_rate"},{anchor:"transformers.PoolFormerConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The activation function for the hidden layers.`,name:"hidden_act"},{anchor:"transformers.PoolFormerConfig.use_layer_scale",description:`<strong>use_layer_scale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to use layer scale.`,name:"use_layer_scale"},{anchor:"transformers.PoolFormerConfig.layer_scale_init_value",description:`<strong>layer_scale_init_value</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-5) &#x2014;
The initial value for the layer scale.`,name:"layer_scale_init_value"},{anchor:"transformers.PoolFormerConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The initializer range for the weights.`,name:"initializer_range"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/poolformer/configuration_poolformer.py#L29"}}),fe=new Js({props:{anchor:"transformers.PoolFormerConfig.example",$$slots:{default:[Al]},$$scope:{ctx:N}}}),Re=new ao({}),Oe=new le({props:{name:"class transformers.PoolFormerImageProcessor",anchor:"transformers.PoolFormerImageProcessor",parameters:[{name:"do_resize",val:": bool = True"},{name:"size",val:": typing.Dict[str, int] = None"},{name:"crop_pct",val:": int = 0.9"},{name:"resample",val:": Resampling = <Resampling.BICUBIC: 3>"},{name:"do_center_crop",val:": bool = True"},{name:"crop_size",val:": typing.Dict[str, int] = None"},{name:"rescale_factor",val:": typing.Union[int, float] = 0.00392156862745098"},{name:"do_rescale",val:": bool = True"},{name:"do_normalize",val:": bool = True"},{name:"image_mean",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"image_std",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.PoolFormerImageProcessor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the image&#x2019;s (height, width) dimensions to the specified <code>size</code>. Can be overridden by
<code>do_resize</code> in the <code>preprocess</code> method.`,name:"do_resize"},{anchor:"transformers.PoolFormerImageProcessor.size",description:`<strong>size</strong> (<code>Dict[str, int]</code> <em>optional</em>, defaults to <code>{&quot;shortest_edge&quot; -- 224}</code>):
Size of the image after resizing. Can be overridden by <code>size</code> in the <code>preprocess</code> method. If crop_pct is
unset:</p>
<ul>
<li>size is <code>{&quot;height&quot;: h, &quot;width&quot;: w}</code>: the image is resized to <code>(h, w)</code>.</li>
<li>size is <code>{&quot;shortest_edge&quot;: s}</code>: the shortest edge of the image is resized to s whilst maintaining the
aspect ratio.</li>
</ul>
<p>If crop_pct is set:</p>
<ul>
<li>size is <code>{&quot;height&quot;: h, &quot;width&quot;: w}</code>: the image is resized to <code>(int(floor(h/crop_pct)), int(floor(w/crop_pct)))</code></li>
<li>size is <code>{&quot;height&quot;: c, &quot;width&quot;: c}</code>: the shortest edge of the image is resized to <code>int(floor(c/crop_pct)</code>
whilst maintaining the aspect ratio.</li>
<li>size is <code>{&quot;shortest_edge&quot;: c}</code>: the shortest edge of the image is resized to <code>int(floor(c/crop_pct)</code>
whilst maintaining the aspect ratio.</li>
</ul>`,name:"size"},{anchor:"transformers.PoolFormerImageProcessor.crop_pct",description:`<strong>crop_pct</strong> (<code>float</code>, <em>optional</em>, defaults to <code>0.9</code>) &#x2014;
Percentage of the image to crop from the center. Can be overridden by <code>crop_pct</code> in the <code>preprocess</code>
method.`,name:"crop_pct"},{anchor:"transformers.PoolFormerImageProcessor.resample",description:`<strong>resample</strong> (<code>PILImageResampling</code>, <em>optional</em>, defaults to <code>PILImageResampling.BICUBIC</code>) &#x2014;
Resampling filter to use if resizing the image. Can be overridden by <code>resample</code> in the <code>preprocess</code> method.`,name:"resample"},{anchor:"transformers.PoolFormerImageProcessor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to center crop the image. If the input size is smaller than <code>crop_size</code> along any edge, the image
is padded with 0&#x2019;s and then center cropped. Can be overridden by <code>do_center_crop</code> in the <code>preprocess</code>
method.`,name:"do_center_crop"},{anchor:"transformers.PoolFormerImageProcessor.crop_size",description:`<strong>crop_size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>{&quot;height&quot; -- 224, &quot;width&quot;: 224}</code>):
Size of the image after applying center crop. Only has an effect if <code>do_center_crop</code> is set to <code>True</code>. Can
be overridden by the <code>crop_size</code> parameter in the <code>preprocess</code> method.`,name:"crop_size"},{anchor:"transformers.PoolFormerImageProcessor.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to rescale the image by the specified scale <code>rescale_factor</code>. Can be overridden by the <code>do_rescale</code>
parameter in the <code>preprocess</code> method.`,name:"do_rescale"},{anchor:"transformers.PoolFormerImageProcessor.rescale_factor",description:`<strong>rescale_factor</strong> (<code>int</code> or <code>float</code>, <em>optional</em>, defaults to <code>1/255</code>) &#x2014;
Scale factor to use if rescaling the image. Can be overridden by the <code>rescale_factor</code> parameter in the
<code>preprocess</code> method.`,name:"rescale_factor"},{anchor:"transformers.PoolFormerImageProcessor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Controls whether to normalize the image. Can be overridden by the <code>do_normalize</code> parameter in the
<code>preprocess</code> method.`,name:"do_normalize"},{anchor:"transformers.PoolFormerImageProcessor.image_mean",description:`<strong>image_mean</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>IMAGENET_STANDARD_MEAN</code>) &#x2014;
Mean to use if normalizing the image. This is a float or list of floats the length of the number of
channels in the image. Can be overridden by the <code>image_mean</code> parameter in the <code>preprocess</code> method.`,name:"image_mean"},{anchor:"transformers.PoolFormerImageProcessor.image_std",description:`<strong>image_std</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>IMAGENET_STANDARD_STD</code>) &#x2014;
Standard deviation to use if normalizing the image. This is a float or list of floats the length of the
number of channels in the image. Can be overridden by the <code>image_std</code> parameter in the <code>preprocess</code> method.`,name:"image_std"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/poolformer/image_processing_poolformer.py#L53"}}),Be=new le({props:{name:"__call__",anchor:"transformers.PoolFormerImageProcessor.__call__",parameters:[{name:"images",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/image_processing_utils.py#L435"}}),Ue=new ao({}),He=new le({props:{name:"class transformers.PoolFormerImageProcessor",anchor:"transformers.PoolFormerImageProcessor",parameters:[{name:"do_resize",val:": bool = True"},{name:"size",val:": typing.Dict[str, int] = None"},{name:"crop_pct",val:": int = 0.9"},{name:"resample",val:": Resampling = <Resampling.BICUBIC: 3>"},{name:"do_center_crop",val:": bool = True"},{name:"crop_size",val:": typing.Dict[str, int] = None"},{name:"rescale_factor",val:": typing.Union[int, float] = 0.00392156862745098"},{name:"do_rescale",val:": bool = True"},{name:"do_normalize",val:": bool = True"},{name:"image_mean",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"image_std",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.PoolFormerImageProcessor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the image&#x2019;s (height, width) dimensions to the specified <code>size</code>. Can be overridden by
<code>do_resize</code> in the <code>preprocess</code> method.`,name:"do_resize"},{anchor:"transformers.PoolFormerImageProcessor.size",description:`<strong>size</strong> (<code>Dict[str, int]</code> <em>optional</em>, defaults to <code>{&quot;shortest_edge&quot; -- 224}</code>):
Size of the image after resizing. Can be overridden by <code>size</code> in the <code>preprocess</code> method. If crop_pct is
unset:</p>
<ul>
<li>size is <code>{&quot;height&quot;: h, &quot;width&quot;: w}</code>: the image is resized to <code>(h, w)</code>.</li>
<li>size is <code>{&quot;shortest_edge&quot;: s}</code>: the shortest edge of the image is resized to s whilst maintaining the
aspect ratio.</li>
</ul>
<p>If crop_pct is set:</p>
<ul>
<li>size is <code>{&quot;height&quot;: h, &quot;width&quot;: w}</code>: the image is resized to <code>(int(floor(h/crop_pct)), int(floor(w/crop_pct)))</code></li>
<li>size is <code>{&quot;height&quot;: c, &quot;width&quot;: c}</code>: the shortest edge of the image is resized to <code>int(floor(c/crop_pct)</code>
whilst maintaining the aspect ratio.</li>
<li>size is <code>{&quot;shortest_edge&quot;: c}</code>: the shortest edge of the image is resized to <code>int(floor(c/crop_pct)</code>
whilst maintaining the aspect ratio.</li>
</ul>`,name:"size"},{anchor:"transformers.PoolFormerImageProcessor.crop_pct",description:`<strong>crop_pct</strong> (<code>float</code>, <em>optional</em>, defaults to <code>0.9</code>) &#x2014;
Percentage of the image to crop from the center. Can be overridden by <code>crop_pct</code> in the <code>preprocess</code>
method.`,name:"crop_pct"},{anchor:"transformers.PoolFormerImageProcessor.resample",description:`<strong>resample</strong> (<code>PILImageResampling</code>, <em>optional</em>, defaults to <code>PILImageResampling.BICUBIC</code>) &#x2014;
Resampling filter to use if resizing the image. Can be overridden by <code>resample</code> in the <code>preprocess</code> method.`,name:"resample"},{anchor:"transformers.PoolFormerImageProcessor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to center crop the image. If the input size is smaller than <code>crop_size</code> along any edge, the image
is padded with 0&#x2019;s and then center cropped. Can be overridden by <code>do_center_crop</code> in the <code>preprocess</code>
method.`,name:"do_center_crop"},{anchor:"transformers.PoolFormerImageProcessor.crop_size",description:`<strong>crop_size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>{&quot;height&quot; -- 224, &quot;width&quot;: 224}</code>):
Size of the image after applying center crop. Only has an effect if <code>do_center_crop</code> is set to <code>True</code>. Can
be overridden by the <code>crop_size</code> parameter in the <code>preprocess</code> method.`,name:"crop_size"},{anchor:"transformers.PoolFormerImageProcessor.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to rescale the image by the specified scale <code>rescale_factor</code>. Can be overridden by the <code>do_rescale</code>
parameter in the <code>preprocess</code> method.`,name:"do_rescale"},{anchor:"transformers.PoolFormerImageProcessor.rescale_factor",description:`<strong>rescale_factor</strong> (<code>int</code> or <code>float</code>, <em>optional</em>, defaults to <code>1/255</code>) &#x2014;
Scale factor to use if rescaling the image. Can be overridden by the <code>rescale_factor</code> parameter in the
<code>preprocess</code> method.`,name:"rescale_factor"},{anchor:"transformers.PoolFormerImageProcessor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Controls whether to normalize the image. Can be overridden by the <code>do_normalize</code> parameter in the
<code>preprocess</code> method.`,name:"do_normalize"},{anchor:"transformers.PoolFormerImageProcessor.image_mean",description:`<strong>image_mean</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>IMAGENET_STANDARD_MEAN</code>) &#x2014;
Mean to use if normalizing the image. This is a float or list of floats the length of the number of
channels in the image. Can be overridden by the <code>image_mean</code> parameter in the <code>preprocess</code> method.`,name:"image_mean"},{anchor:"transformers.PoolFormerImageProcessor.image_std",description:`<strong>image_std</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>IMAGENET_STANDARD_STD</code>) &#x2014;
Standard deviation to use if normalizing the image. This is a float or list of floats the length of the
number of channels in the image. Can be overridden by the <code>image_std</code> parameter in the <code>preprocess</code> method.`,name:"image_std"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/poolformer/image_processing_poolformer.py#L53"}}),We=new le({props:{name:"preprocess",anchor:"transformers.PoolFormerImageProcessor.preprocess",parameters:[{name:"images",val:": typing.Union[ForwardRef('PIL.Image.Image'), numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[ForwardRef('PIL.Image.Image')], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"do_resize",val:": bool = None"},{name:"size",val:": typing.Dict[str, int] = None"},{name:"crop_pct",val:": int = None"},{name:"resample",val:": Resampling = None"},{name:"do_center_crop",val:": bool = None"},{name:"crop_size",val:": typing.Dict[str, int] = None"},{name:"do_rescale",val:": bool = None"},{name:"rescale_factor",val:": float = None"},{name:"do_normalize",val:": bool = None"},{name:"image_mean",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"image_std",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"data_format",val:": ChannelDimension = <ChannelDimension.FIRST: 'channels_first'>"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.PoolFormerImageProcessor.preprocess.images",description:`<strong>images</strong> (<code>ImageInput</code>) &#x2014;
Image to preprocess.`,name:"images"},{anchor:"transformers.PoolFormerImageProcessor.preprocess.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_resize</code>) &#x2014;
Whether to resize the image.`,name:"do_resize"},{anchor:"transformers.PoolFormerImageProcessor.preprocess.size",description:`<strong>size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>self.size</code>) &#x2014;
Size of the image after applying resize.`,name:"size"},{anchor:"transformers.PoolFormerImageProcessor.preprocess.crop_pct",description:`<strong>crop_pct</strong> (<code>float</code>, <em>optional</em>, defaults to <code>self.crop_pct</code>) &#x2014;
Percentage of the image to crop. Only has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"crop_pct"},{anchor:"transformers.PoolFormerImageProcessor.preprocess.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>self.resample</code>) &#x2014;
Resampling filter to use if resizing the image. This can be one of the enum <code>PILImageResampling</code>, Only
has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.PoolFormerImageProcessor.preprocess.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_center_crop</code>) &#x2014;
Whether to center crop the image.`,name:"do_center_crop"},{anchor:"transformers.PoolFormerImageProcessor.preprocess.crop_size",description:`<strong>crop_size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>self.crop_size</code>) &#x2014;
Size of the image after applying center crop.`,name:"crop_size"},{anchor:"transformers.PoolFormerImageProcessor.preprocess.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_rescale</code>) &#x2014;
Whether to rescale the image values between [0 - 1].`,name:"do_rescale"},{anchor:"transformers.PoolFormerImageProcessor.preprocess.rescale_factor",description:`<strong>rescale_factor</strong> (<code>float</code>, <em>optional</em>, defaults to <code>self.rescale_factor</code>) &#x2014;
Rescale factor to rescale the image by if <code>do_rescale</code> is set to <code>True</code>.`,name:"rescale_factor"},{anchor:"transformers.PoolFormerImageProcessor.preprocess.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_normalize</code>) &#x2014;
Whether to normalize the image.`,name:"do_normalize"},{anchor:"transformers.PoolFormerImageProcessor.preprocess.image_mean",description:`<strong>image_mean</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>self.image_mean</code>) &#x2014;
Image mean.`,name:"image_mean"},{anchor:"transformers.PoolFormerImageProcessor.preprocess.image_std",description:`<strong>image_std</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>self.image_std</code>) &#x2014;
Image standard deviation.`,name:"image_std"},{anchor:"transformers.PoolFormerImageProcessor.preprocess.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <code>TensorType</code>, <em>optional</em>) &#x2014;
The type of tensors to return. Can be one of:<ul>
<li>Unset: Return a list of <code>np.ndarray</code>.</li>
<li><code>TensorType.TENSORFLOW</code> or <code>&apos;tf&apos;</code>: Return a batch of type <code>tf.Tensor</code>.</li>
<li><code>TensorType.PYTORCH</code> or <code>&apos;pt&apos;</code>: Return a batch of type <code>torch.Tensor</code>.</li>
<li><code>TensorType.NUMPY</code> or <code>&apos;np&apos;</code>: Return a batch of type <code>np.ndarray</code>.</li>
<li><code>TensorType.JAX</code> or <code>&apos;jax&apos;</code>: Return a batch of type <code>jax.numpy.ndarray</code>.</li>
</ul>`,name:"return_tensors"},{anchor:"transformers.PoolFormerImageProcessor.preprocess.data_format",description:`<strong>data_format</strong> (<code>ChannelDimension</code> or <code>str</code>, <em>optional</em>, defaults to <code>ChannelDimension.FIRST</code>) &#x2014;
The channel dimension format for the output image. Can be one of:<ul>
<li><code>ChannelDimension.FIRST</code>: image in (num_channels, height, width) format.</li>
<li><code>ChannelDimension.LAST</code>: image in (height, width, num_channels) format.</li>
</ul>`,name:"data_format"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/poolformer/image_processing_poolformer.py#L268"}}),Ge=new ao({}),Ve=new le({props:{name:"class transformers.PoolFormerModel",anchor:"transformers.PoolFormerModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.PoolFormerModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/poolformer/modeling_poolformer.py#L314"}}),Ke=new le({props:{name:"forward",anchor:"transformers.PoolFormerModel.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.FloatTensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.PoolFormerModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerImageProcessor">PoolFormerFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ImageProcessor.__call__">PoolFormerFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/poolformer/modeling_poolformer.py#L327",returnDescription:`
<p>A <code>transformers.modeling_outputs.BaseModelOutputWithNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"
>PoolFormerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.BaseModelOutputWithNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Pe=new El({props:{$$slots:{default:[Dl]},$$scope:{ctx:N}}}),be=new Js({props:{anchor:"transformers.PoolFormerModel.forward.example",$$slots:{default:[Nl]},$$scope:{ctx:N}}}),Xe=new ao({}),Qe=new le({props:{name:"class transformers.PoolFormerForImageClassification",anchor:"transformers.PoolFormerForImageClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.PoolFormerForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/poolformer/modeling_poolformer.py#L382"}}),oo=new le({props:{name:"forward",anchor:"transformers.PoolFormerForImageClassification.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.FloatTensor] = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.PoolFormerForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerImageProcessor">PoolFormerFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ImageProcessor.__call__">PoolFormerFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.PoolFormerForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/poolformer/modeling_poolformer.py#L398",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"
>PoolFormerConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),we=new El({props:{$$slots:{default:[ql]},$$scope:{ctx:N}}}),ye=new Js({props:{anchor:"transformers.PoolFormerForImageClassification.forward.example",$$slots:{default:[jl]},$$scope:{ctx:N}}}),{c(){h=r("meta"),P=i(),_=r("h1"),g=r("a"),v=r("span"),b(m.$$.fragment),u=i(),L=r("span"),mr=n("PoolFormer"),Ct=i(),X=r("h2"),ie=r("a"),Bo=r("span"),b(ze.$$.fragment),pr=i(),Uo=r("span"),fr=n("Overview"),kt=i(),ce=r("p"),hr=n("The PoolFormer model was proposed in "),xe=r("a"),gr=n("MetaFormer is Actually What You Need for Vision"),ur=n("  by Sea AI Labs. Instead of designing complicated token mixer to achieve SOTA performance, the target of this work is to demonstrate the competence of transformer models largely stem from the general architecture MetaFormer."),Mt=i(),so=r("p"),_r=n("The abstract from the paper is the following:"),At=i(),no=r("p"),Ho=r("em"),vr=n("Transformers have shown great potential in computer vision tasks. A common belief is their attention-based token mixer module contributes most to their competence. However, recent works show the attention-based module in transformers can be replaced by spatial MLPs and the resulted models still perform quite well. Based on this observation, we hypothesize that the general architecture of the transformers, instead of the specific token mixer module, is more essential to the model\u2019s performance. To verify this, we deliberately replace the attention module in transformers with an embarrassingly simple spatial pooling operator to conduct only the most basic token mixing. Surprisingly, we observe that the derived model, termed as PoolFormer, achieves competitive performance on multiple computer vision tasks. For example, on ImageNet-1K, PoolFormer achieves 82.1% top-1 accuracy, surpassing well-tuned vision transformer/MLP-like baselines DeiT-B/ResMLP-B24 by 0.3%/1.1% accuracy with 35%/52% fewer parameters and 48%/60% fewer MACs. The effectiveness of PoolFormer verifies our hypothesis and urges us to initiate the concept of \u201CMetaFormer\u201D, a general architecture abstracted from transformers without specifying the token mixer. Based on the extensive experiments, we argue that MetaFormer is the key player in achieving superior results for recent transformer and MLP-like models on vision tasks. This work calls for more future research dedicated to improving MetaFormer instead of focusing on the token mixer modules. Additionally, our proposed PoolFormer could serve as a starting baseline for future MetaFormer architecture design."),Dt=i(),de=r("p"),Pr=n("The figure below illustrates the architecture of PoolFormer. Taken from the "),Ce=r("a"),br=n("original paper"),Fr=n("."),Nt=i(),ke=r("img"),qt=i(),lo=r("p"),wr=n("Tips:"),jt=i(),B=r("ul"),Me=r("li"),yr=n("PoolFormer has a hierarchical architecture, where instead of Attention, a simple Average Pooling layer is present. All checkpoints of the model can be found on the "),Ae=r("a"),$r=n("hub"),Tr=n("."),Er=i(),De=r("li"),Ir=n("One can use "),io=r("a"),zr=n("PoolFormerFeatureExtractor"),xr=n(" to prepare images for the model."),Cr=i(),Wo=r("li"),kr=n("As most models, PoolFormer comes in different sizes, the details of which can be found in the table below."),Lt=i(),me=r("table"),Go=r("thead"),E=r("tr"),co=r("th"),Vo=r("strong"),Mr=n("Model variant"),Ar=i(),Yo=r("th"),Jo=r("strong"),Dr=n("Depths"),Nr=i(),Ko=r("th"),Xo=r("strong"),qr=n("Hidden sizes"),jr=i(),mo=r("th"),Qo=r("strong"),Lr=n("Params (M)"),Sr=i(),po=r("th"),Zo=r("strong"),Rr=n("ImageNet-1k Top 1"),Or=i(),I=r("tbody"),z=r("tr"),fo=r("td"),Br=n("s12"),Ur=i(),et=r("td"),Hr=n("[2, 2, 6, 2]"),Wr=i(),ot=r("td"),Gr=n("[64, 128, 320, 512]"),Vr=i(),ho=r("td"),Yr=n("12"),Jr=i(),go=r("td"),Kr=n("77.2"),Xr=i(),x=r("tr"),uo=r("td"),Qr=n("s24"),Zr=i(),tt=r("td"),ea=n("[4, 4, 12, 4]"),oa=i(),rt=r("td"),ta=n("[64, 128, 320, 512]"),ra=i(),_o=r("td"),aa=n("21"),sa=i(),vo=r("td"),na=n("80.3"),la=i(),C=r("tr"),Po=r("td"),ia=n("s36"),ca=i(),at=r("td"),da=n("[6, 6, 18, 6]"),ma=i(),st=r("td"),pa=n("[64, 128, 320, 512]"),fa=i(),bo=r("td"),ha=n("31"),ga=i(),Fo=r("td"),ua=n("81.4"),_a=i(),k=r("tr"),wo=r("td"),va=n("m36"),Pa=i(),nt=r("td"),ba=n("[6, 6, 18, 6]"),Fa=i(),lt=r("td"),wa=n("[96, 192, 384, 768]"),ya=i(),yo=r("td"),$a=n("56"),Ta=i(),$o=r("td"),Ea=n("82.1"),Ia=i(),M=r("tr"),To=r("td"),za=n("m48"),xa=i(),it=r("td"),Ca=n("[8, 8, 24, 8]"),ka=i(),ct=r("td"),Ma=n("[96, 192, 384, 768]"),Aa=i(),Eo=r("td"),Da=n("73"),Na=i(),Io=r("td"),qa=n("82.5"),St=i(),U=r("p"),ja=n("This model was contributed by "),Ne=r("a"),La=n("heytanay"),Sa=n(". The original code can be found "),qe=r("a"),Ra=n("here"),Oa=n("."),Rt=i(),Q=r("h2"),pe=r("a"),dt=r("span"),b(je.$$.fragment),Ba=i(),mt=r("span"),Ua=n("PoolFormerConfig"),Ot=i(),A=r("div"),b(Le.$$.fragment),Ha=i(),Z=r("p"),Wa=n("This is the configuration class to store the configuration of "),zo=r("a"),Ga=n("PoolFormerModel"),Va=n(`. It is used to instantiate a
PoolFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the PoolFormer
`),Se=r("a"),Ya=n("sail/poolformer_s12"),Ja=n(" architecture."),Ka=i(),ee=r("p"),Xa=n("Configuration objects inherit from "),xo=r("a"),Qa=n("PretrainedConfig"),Za=n(` and can be used to control the model outputs. Read the
documentation from `),Co=r("a"),es=n("PretrainedConfig"),os=n(" for more information."),ts=i(),b(fe.$$.fragment),Bt=i(),oe=r("h2"),he=r("a"),pt=r("span"),b(Re.$$.fragment),rs=i(),ft=r("span"),as=n("PoolFormerFeatureExtractor"),Ut=i(),S=r("div"),b(Oe.$$.fragment),ss=i(),ht=r("p"),ns=n("Constructs a PoolFormer image processor."),ls=i(),ge=r("div"),b(Be.$$.fragment),is=i(),gt=r("p"),cs=n("Preprocess an image or a batch of images."),Ht=i(),te=r("h2"),ue=r("a"),ut=r("span"),b(Ue.$$.fragment),ds=i(),_t=r("span"),ms=n("PoolFormerImageProcessor"),Wt=i(),R=r("div"),b(He.$$.fragment),ps=i(),vt=r("p"),fs=n("Constructs a PoolFormer image processor."),hs=i(),_e=r("div"),b(We.$$.fragment),gs=i(),Pt=r("p"),us=n("Preprocess an image or batch of images."),Gt=i(),re=r("h2"),ve=r("a"),bt=r("span"),b(Ge.$$.fragment),_s=i(),Ft=r("span"),vs=n("PoolFormerModel"),Vt=i(),O=r("div"),b(Ve.$$.fragment),Ps=i(),Ye=r("p"),bs=n(`The bare PoolFormer Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Je=r("a"),Fs=n("torch.nn.Module"),ws=n(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ys=i(),q=r("div"),b(Ke.$$.fragment),$s=i(),ae=r("p"),Ts=n("The "),ko=r("a"),Es=n("PoolFormerModel"),Is=n(" forward method, overrides the "),wt=r("code"),zs=n("__call__"),xs=n(" special method."),Cs=i(),b(Pe.$$.fragment),ks=i(),b(be.$$.fragment),Yt=i(),se=r("h2"),Fe=r("a"),yt=r("span"),b(Xe.$$.fragment),Ms=i(),$t=r("span"),As=n("PoolFormerForImageClassification"),Jt=i(),D=r("div"),b(Qe.$$.fragment),Ds=i(),Tt=r("p"),Ns=n("PoolFormer Model transformer with an image classification head on top"),qs=i(),Ze=r("p"),js=n("This model is a PyTorch "),eo=r("a"),Ls=n("torch.nn.Module"),Ss=n(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Rs=i(),j=r("div"),b(oo.$$.fragment),Os=i(),ne=r("p"),Bs=n("The "),Mo=r("a"),Us=n("PoolFormerForImageClassification"),Hs=n(" forward method, overrides the "),Et=r("code"),Ws=n("__call__"),Gs=n(" special method."),Vs=i(),b(we.$$.fragment),Ys=i(),b(ye.$$.fragment),this.h()},l(o){const p=Cl('[data-svelte="svelte-1phssyn"]',document.head);h=a(p,"META",{name:!0,content:!0}),p.forEach(t),P=c(o),_=a(o,"H1",{class:!0});var to=s(_);g=a(to,"A",{id:!0,class:!0,href:!0});var It=s(g);v=a(It,"SPAN",{});var zt=s(v);F(m.$$.fragment,zt),zt.forEach(t),It.forEach(t),u=c(to),L=a(to,"SPAN",{});var xt=s(L);mr=l(xt,"PoolFormer"),xt.forEach(t),to.forEach(t),Ct=c(o),X=a(o,"H2",{class:!0});var ro=s(X);ie=a(ro,"A",{id:!0,class:!0,href:!0});var Zs=s(ie);Bo=a(Zs,"SPAN",{});var en=s(Bo);F(ze.$$.fragment,en),en.forEach(t),Zs.forEach(t),pr=c(ro),Uo=a(ro,"SPAN",{});var on=s(Uo);fr=l(on,"Overview"),on.forEach(t),ro.forEach(t),kt=c(o),ce=a(o,"P",{});var Xt=s(ce);hr=l(Xt,"The PoolFormer model was proposed in "),xe=a(Xt,"A",{href:!0,rel:!0});var tn=s(xe);gr=l(tn,"MetaFormer is Actually What You Need for Vision"),tn.forEach(t),ur=l(Xt,"  by Sea AI Labs. Instead of designing complicated token mixer to achieve SOTA performance, the target of this work is to demonstrate the competence of transformer models largely stem from the general architecture MetaFormer."),Xt.forEach(t),Mt=c(o),so=a(o,"P",{});var rn=s(so);_r=l(rn,"The abstract from the paper is the following:"),rn.forEach(t),At=c(o),no=a(o,"P",{});var an=s(no);Ho=a(an,"EM",{});var sn=s(Ho);vr=l(sn,"Transformers have shown great potential in computer vision tasks. A common belief is their attention-based token mixer module contributes most to their competence. However, recent works show the attention-based module in transformers can be replaced by spatial MLPs and the resulted models still perform quite well. Based on this observation, we hypothesize that the general architecture of the transformers, instead of the specific token mixer module, is more essential to the model\u2019s performance. To verify this, we deliberately replace the attention module in transformers with an embarrassingly simple spatial pooling operator to conduct only the most basic token mixing. Surprisingly, we observe that the derived model, termed as PoolFormer, achieves competitive performance on multiple computer vision tasks. For example, on ImageNet-1K, PoolFormer achieves 82.1% top-1 accuracy, surpassing well-tuned vision transformer/MLP-like baselines DeiT-B/ResMLP-B24 by 0.3%/1.1% accuracy with 35%/52% fewer parameters and 48%/60% fewer MACs. The effectiveness of PoolFormer verifies our hypothesis and urges us to initiate the concept of \u201CMetaFormer\u201D, a general architecture abstracted from transformers without specifying the token mixer. Based on the extensive experiments, we argue that MetaFormer is the key player in achieving superior results for recent transformer and MLP-like models on vision tasks. This work calls for more future research dedicated to improving MetaFormer instead of focusing on the token mixer modules. Additionally, our proposed PoolFormer could serve as a starting baseline for future MetaFormer architecture design."),sn.forEach(t),an.forEach(t),Dt=c(o),de=a(o,"P",{});var Qt=s(de);Pr=l(Qt,"The figure below illustrates the architecture of PoolFormer. Taken from the "),Ce=a(Qt,"A",{href:!0,rel:!0});var nn=s(Ce);br=l(nn,"original paper"),nn.forEach(t),Fr=l(Qt,"."),Qt.forEach(t),Nt=c(o),ke=a(o,"IMG",{width:!0,src:!0}),qt=c(o),lo=a(o,"P",{});var ln=s(lo);wr=l(ln,"Tips:"),ln.forEach(t),jt=c(o),B=a(o,"UL",{});var Ao=s(B);Me=a(Ao,"LI",{});var Zt=s(Me);yr=l(Zt,"PoolFormer has a hierarchical architecture, where instead of Attention, a simple Average Pooling layer is present. All checkpoints of the model can be found on the "),Ae=a(Zt,"A",{href:!0,rel:!0});var cn=s(Ae);$r=l(cn,"hub"),cn.forEach(t),Tr=l(Zt,"."),Zt.forEach(t),Er=c(Ao),De=a(Ao,"LI",{});var er=s(De);Ir=l(er,"One can use "),io=a(er,"A",{href:!0});var dn=s(io);zr=l(dn,"PoolFormerFeatureExtractor"),dn.forEach(t),xr=l(er," to prepare images for the model."),er.forEach(t),Cr=c(Ao),Wo=a(Ao,"LI",{});var mn=s(Wo);kr=l(mn,"As most models, PoolFormer comes in different sizes, the details of which can be found in the table below."),mn.forEach(t),Ao.forEach(t),Lt=c(o),me=a(o,"TABLE",{});var or=s(me);Go=a(or,"THEAD",{});var pn=s(Go);E=a(pn,"TR",{});var H=s(E);co=a(H,"TH",{align:!0});var fn=s(co);Vo=a(fn,"STRONG",{});var hn=s(Vo);Mr=l(hn,"Model variant"),hn.forEach(t),fn.forEach(t),Ar=c(H),Yo=a(H,"TH",{});var gn=s(Yo);Jo=a(gn,"STRONG",{});var un=s(Jo);Dr=l(un,"Depths"),un.forEach(t),gn.forEach(t),Nr=c(H),Ko=a(H,"TH",{});var _n=s(Ko);Xo=a(_n,"STRONG",{});var vn=s(Xo);qr=l(vn,"Hidden sizes"),vn.forEach(t),_n.forEach(t),jr=c(H),mo=a(H,"TH",{align:!0});var Pn=s(mo);Qo=a(Pn,"STRONG",{});var bn=s(Qo);Lr=l(bn,"Params (M)"),bn.forEach(t),Pn.forEach(t),Sr=c(H),po=a(H,"TH",{align:!0});var Fn=s(po);Zo=a(Fn,"STRONG",{});var wn=s(Zo);Rr=l(wn,"ImageNet-1k Top 1"),wn.forEach(t),Fn.forEach(t),H.forEach(t),pn.forEach(t),Or=c(or),I=a(or,"TBODY",{});var W=s(I);z=a(W,"TR",{});var G=s(z);fo=a(G,"TD",{align:!0});var yn=s(fo);Br=l(yn,"s12"),yn.forEach(t),Ur=c(G),et=a(G,"TD",{});var $n=s(et);Hr=l($n,"[2, 2, 6, 2]"),$n.forEach(t),Wr=c(G),ot=a(G,"TD",{});var Tn=s(ot);Gr=l(Tn,"[64, 128, 320, 512]"),Tn.forEach(t),Vr=c(G),ho=a(G,"TD",{align:!0});var En=s(ho);Yr=l(En,"12"),En.forEach(t),Jr=c(G),go=a(G,"TD",{align:!0});var In=s(go);Kr=l(In,"77.2"),In.forEach(t),G.forEach(t),Xr=c(W),x=a(W,"TR",{});var V=s(x);uo=a(V,"TD",{align:!0});var zn=s(uo);Qr=l(zn,"s24"),zn.forEach(t),Zr=c(V),tt=a(V,"TD",{});var xn=s(tt);ea=l(xn,"[4, 4, 12, 4]"),xn.forEach(t),oa=c(V),rt=a(V,"TD",{});var Cn=s(rt);ta=l(Cn,"[64, 128, 320, 512]"),Cn.forEach(t),ra=c(V),_o=a(V,"TD",{align:!0});var kn=s(_o);aa=l(kn,"21"),kn.forEach(t),sa=c(V),vo=a(V,"TD",{align:!0});var Mn=s(vo);na=l(Mn,"80.3"),Mn.forEach(t),V.forEach(t),la=c(W),C=a(W,"TR",{});var Y=s(C);Po=a(Y,"TD",{align:!0});var An=s(Po);ia=l(An,"s36"),An.forEach(t),ca=c(Y),at=a(Y,"TD",{});var Dn=s(at);da=l(Dn,"[6, 6, 18, 6]"),Dn.forEach(t),ma=c(Y),st=a(Y,"TD",{});var Nn=s(st);pa=l(Nn,"[64, 128, 320, 512]"),Nn.forEach(t),fa=c(Y),bo=a(Y,"TD",{align:!0});var qn=s(bo);ha=l(qn,"31"),qn.forEach(t),ga=c(Y),Fo=a(Y,"TD",{align:!0});var jn=s(Fo);ua=l(jn,"81.4"),jn.forEach(t),Y.forEach(t),_a=c(W),k=a(W,"TR",{});var J=s(k);wo=a(J,"TD",{align:!0});var Ln=s(wo);va=l(Ln,"m36"),Ln.forEach(t),Pa=c(J),nt=a(J,"TD",{});var Sn=s(nt);ba=l(Sn,"[6, 6, 18, 6]"),Sn.forEach(t),Fa=c(J),lt=a(J,"TD",{});var Rn=s(lt);wa=l(Rn,"[96, 192, 384, 768]"),Rn.forEach(t),ya=c(J),yo=a(J,"TD",{align:!0});var On=s(yo);$a=l(On,"56"),On.forEach(t),Ta=c(J),$o=a(J,"TD",{align:!0});var Bn=s($o);Ea=l(Bn,"82.1"),Bn.forEach(t),J.forEach(t),Ia=c(W),M=a(W,"TR",{});var K=s(M);To=a(K,"TD",{align:!0});var Un=s(To);za=l(Un,"m48"),Un.forEach(t),xa=c(K),it=a(K,"TD",{});var Hn=s(it);Ca=l(Hn,"[8, 8, 24, 8]"),Hn.forEach(t),ka=c(K),ct=a(K,"TD",{});var Wn=s(ct);Ma=l(Wn,"[96, 192, 384, 768]"),Wn.forEach(t),Aa=c(K),Eo=a(K,"TD",{align:!0});var Gn=s(Eo);Da=l(Gn,"73"),Gn.forEach(t),Na=c(K),Io=a(K,"TD",{align:!0});var Vn=s(Io);qa=l(Vn,"82.5"),Vn.forEach(t),K.forEach(t),W.forEach(t),or.forEach(t),St=c(o),U=a(o,"P",{});var Do=s(U);ja=l(Do,"This model was contributed by "),Ne=a(Do,"A",{href:!0,rel:!0});var Yn=s(Ne);La=l(Yn,"heytanay"),Yn.forEach(t),Sa=l(Do,". The original code can be found "),qe=a(Do,"A",{href:!0,rel:!0});var Jn=s(qe);Ra=l(Jn,"here"),Jn.forEach(t),Oa=l(Do,"."),Do.forEach(t),Rt=c(o),Q=a(o,"H2",{class:!0});var tr=s(Q);pe=a(tr,"A",{id:!0,class:!0,href:!0});var Kn=s(pe);dt=a(Kn,"SPAN",{});var Xn=s(dt);F(je.$$.fragment,Xn),Xn.forEach(t),Kn.forEach(t),Ba=c(tr),mt=a(tr,"SPAN",{});var Qn=s(mt);Ua=l(Qn,"PoolFormerConfig"),Qn.forEach(t),tr.forEach(t),Ot=c(o),A=a(o,"DIV",{class:!0});var $e=s(A);F(Le.$$.fragment,$e),Ha=c($e),Z=a($e,"P",{});var No=s(Z);Wa=l(No,"This is the configuration class to store the configuration of "),zo=a(No,"A",{href:!0});var Zn=s(zo);Ga=l(Zn,"PoolFormerModel"),Zn.forEach(t),Va=l(No,`. It is used to instantiate a
PoolFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the PoolFormer
`),Se=a(No,"A",{href:!0,rel:!0});var el=s(Se);Ya=l(el,"sail/poolformer_s12"),el.forEach(t),Ja=l(No," architecture."),No.forEach(t),Ka=c($e),ee=a($e,"P",{});var qo=s(ee);Xa=l(qo,"Configuration objects inherit from "),xo=a(qo,"A",{href:!0});var ol=s(xo);Qa=l(ol,"PretrainedConfig"),ol.forEach(t),Za=l(qo,` and can be used to control the model outputs. Read the
documentation from `),Co=a(qo,"A",{href:!0});var tl=s(Co);es=l(tl,"PretrainedConfig"),tl.forEach(t),os=l(qo," for more information."),qo.forEach(t),ts=c($e),F(fe.$$.fragment,$e),$e.forEach(t),Bt=c(o),oe=a(o,"H2",{class:!0});var rr=s(oe);he=a(rr,"A",{id:!0,class:!0,href:!0});var rl=s(he);pt=a(rl,"SPAN",{});var al=s(pt);F(Re.$$.fragment,al),al.forEach(t),rl.forEach(t),rs=c(rr),ft=a(rr,"SPAN",{});var sl=s(ft);as=l(sl,"PoolFormerFeatureExtractor"),sl.forEach(t),rr.forEach(t),Ut=c(o),S=a(o,"DIV",{class:!0});var jo=s(S);F(Oe.$$.fragment,jo),ss=c(jo),ht=a(jo,"P",{});var nl=s(ht);ns=l(nl,"Constructs a PoolFormer image processor."),nl.forEach(t),ls=c(jo),ge=a(jo,"DIV",{class:!0});var ar=s(ge);F(Be.$$.fragment,ar),is=c(ar),gt=a(ar,"P",{});var ll=s(gt);cs=l(ll,"Preprocess an image or a batch of images."),ll.forEach(t),ar.forEach(t),jo.forEach(t),Ht=c(o),te=a(o,"H2",{class:!0});var sr=s(te);ue=a(sr,"A",{id:!0,class:!0,href:!0});var il=s(ue);ut=a(il,"SPAN",{});var cl=s(ut);F(Ue.$$.fragment,cl),cl.forEach(t),il.forEach(t),ds=c(sr),_t=a(sr,"SPAN",{});var dl=s(_t);ms=l(dl,"PoolFormerImageProcessor"),dl.forEach(t),sr.forEach(t),Wt=c(o),R=a(o,"DIV",{class:!0});var Lo=s(R);F(He.$$.fragment,Lo),ps=c(Lo),vt=a(Lo,"P",{});var ml=s(vt);fs=l(ml,"Constructs a PoolFormer image processor."),ml.forEach(t),hs=c(Lo),_e=a(Lo,"DIV",{class:!0});var nr=s(_e);F(We.$$.fragment,nr),gs=c(nr),Pt=a(nr,"P",{});var pl=s(Pt);us=l(pl,"Preprocess an image or batch of images."),pl.forEach(t),nr.forEach(t),Lo.forEach(t),Gt=c(o),re=a(o,"H2",{class:!0});var lr=s(re);ve=a(lr,"A",{id:!0,class:!0,href:!0});var fl=s(ve);bt=a(fl,"SPAN",{});var hl=s(bt);F(Ge.$$.fragment,hl),hl.forEach(t),fl.forEach(t),_s=c(lr),Ft=a(lr,"SPAN",{});var gl=s(Ft);vs=l(gl,"PoolFormerModel"),gl.forEach(t),lr.forEach(t),Vt=c(o),O=a(o,"DIV",{class:!0});var So=s(O);F(Ve.$$.fragment,So),Ps=c(So),Ye=a(So,"P",{});var ir=s(Ye);bs=l(ir,`The bare PoolFormer Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Je=a(ir,"A",{href:!0,rel:!0});var ul=s(Je);Fs=l(ul,"torch.nn.Module"),ul.forEach(t),ws=l(ir,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ir.forEach(t),ys=c(So),q=a(So,"DIV",{class:!0});var Te=s(q);F(Ke.$$.fragment,Te),$s=c(Te),ae=a(Te,"P",{});var Ro=s(ae);Ts=l(Ro,"The "),ko=a(Ro,"A",{href:!0});var _l=s(ko);Es=l(_l,"PoolFormerModel"),_l.forEach(t),Is=l(Ro," forward method, overrides the "),wt=a(Ro,"CODE",{});var vl=s(wt);zs=l(vl,"__call__"),vl.forEach(t),xs=l(Ro," special method."),Ro.forEach(t),Cs=c(Te),F(Pe.$$.fragment,Te),ks=c(Te),F(be.$$.fragment,Te),Te.forEach(t),So.forEach(t),Yt=c(o),se=a(o,"H2",{class:!0});var cr=s(se);Fe=a(cr,"A",{id:!0,class:!0,href:!0});var Pl=s(Fe);yt=a(Pl,"SPAN",{});var bl=s(yt);F(Xe.$$.fragment,bl),bl.forEach(t),Pl.forEach(t),Ms=c(cr),$t=a(cr,"SPAN",{});var Fl=s($t);As=l(Fl,"PoolFormerForImageClassification"),Fl.forEach(t),cr.forEach(t),Jt=c(o),D=a(o,"DIV",{class:!0});var Ee=s(D);F(Qe.$$.fragment,Ee),Ds=c(Ee),Tt=a(Ee,"P",{});var wl=s(Tt);Ns=l(wl,"PoolFormer Model transformer with an image classification head on top"),wl.forEach(t),qs=c(Ee),Ze=a(Ee,"P",{});var dr=s(Ze);js=l(dr,"This model is a PyTorch "),eo=a(dr,"A",{href:!0,rel:!0});var yl=s(eo);Ls=l(yl,"torch.nn.Module"),yl.forEach(t),Ss=l(dr,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),dr.forEach(t),Rs=c(Ee),j=a(Ee,"DIV",{class:!0});var Ie=s(j);F(oo.$$.fragment,Ie),Os=c(Ie),ne=a(Ie,"P",{});var Oo=s(ne);Bs=l(Oo,"The "),Mo=a(Oo,"A",{href:!0});var $l=s(Mo);Us=l($l,"PoolFormerForImageClassification"),$l.forEach(t),Hs=l(Oo," forward method, overrides the "),Et=a(Oo,"CODE",{});var Tl=s(Et);Ws=l(Tl,"__call__"),Tl.forEach(t),Gs=l(Oo," special method."),Oo.forEach(t),Vs=c(Ie),F(we.$$.fragment,Ie),Ys=c(Ie),F(ye.$$.fragment,Ie),Ie.forEach(t),Ee.forEach(t),this.h()},h(){d(h,"name","hf:doc:metadata"),d(h,"content",JSON.stringify(Sl)),d(g,"id","poolformer"),d(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g,"href","#poolformer"),d(_,"class","relative group"),d(ie,"id","overview"),d(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ie,"href","#overview"),d(X,"class","relative group"),d(xe,"href","https://arxiv.org/abs/2111.11418"),d(xe,"rel","nofollow"),d(Ce,"href","https://arxiv.org/abs/2111.11418"),d(Ce,"rel","nofollow"),d(ke,"width","600"),kl(ke.src,Qs="https://user-images.githubusercontent.com/15921929/142746124-1ab7635d-2536-4a0e-ad43-b4fe2c5a525d.png")||d(ke,"src",Qs),d(Ae,"href","https://huggingface.co/models?other=poolformer"),d(Ae,"rel","nofollow"),d(io,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerImageProcessor"),d(co,"align","center"),d(mo,"align","center"),d(po,"align","center"),d(fo,"align","center"),d(ho,"align","center"),d(go,"align","center"),d(uo,"align","center"),d(_o,"align","center"),d(vo,"align","center"),d(Po,"align","center"),d(bo,"align","center"),d(Fo,"align","center"),d(wo,"align","center"),d(yo,"align","center"),d($o,"align","center"),d(To,"align","center"),d(Eo,"align","center"),d(Io,"align","center"),d(Ne,"href","https://huggingface.co/heytanay"),d(Ne,"rel","nofollow"),d(qe,"href","https://github.com/sail-sg/poolformer"),d(qe,"rel","nofollow"),d(pe,"id","transformers.PoolFormerConfig"),d(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pe,"href","#transformers.PoolFormerConfig"),d(Q,"class","relative group"),d(zo,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(Se,"href","https://huggingface.co/sail/poolformer_s12"),d(Se,"rel","nofollow"),d(xo,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),d(Co,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),d(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(he,"id","transformers.PoolFormerImageProcessor"),d(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(he,"href","#transformers.PoolFormerImageProcessor"),d(oe,"class","relative group"),d(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ue,"id","transformers.PoolFormerImageProcessor"),d(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ue,"href","#transformers.PoolFormerImageProcessor"),d(te,"class","relative group"),d(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ve,"id","transformers.PoolFormerModel"),d(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ve,"href","#transformers.PoolFormerModel"),d(re,"class","relative group"),d(Je,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Je,"rel","nofollow"),d(ko,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fe,"id","transformers.PoolFormerForImageClassification"),d(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Fe,"href","#transformers.PoolFormerForImageClassification"),d(se,"class","relative group"),d(eo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(eo,"rel","nofollow"),d(Mo,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,p){e(document.head,h),f(o,P,p),f(o,_,p),e(_,g),e(g,v),w(m,v,null),e(_,u),e(_,L),e(L,mr),f(o,Ct,p),f(o,X,p),e(X,ie),e(ie,Bo),w(ze,Bo,null),e(X,pr),e(X,Uo),e(Uo,fr),f(o,kt,p),f(o,ce,p),e(ce,hr),e(ce,xe),e(xe,gr),e(ce,ur),f(o,Mt,p),f(o,so,p),e(so,_r),f(o,At,p),f(o,no,p),e(no,Ho),e(Ho,vr),f(o,Dt,p),f(o,de,p),e(de,Pr),e(de,Ce),e(Ce,br),e(de,Fr),f(o,Nt,p),f(o,ke,p),f(o,qt,p),f(o,lo,p),e(lo,wr),f(o,jt,p),f(o,B,p),e(B,Me),e(Me,yr),e(Me,Ae),e(Ae,$r),e(Me,Tr),e(B,Er),e(B,De),e(De,Ir),e(De,io),e(io,zr),e(De,xr),e(B,Cr),e(B,Wo),e(Wo,kr),f(o,Lt,p),f(o,me,p),e(me,Go),e(Go,E),e(E,co),e(co,Vo),e(Vo,Mr),e(E,Ar),e(E,Yo),e(Yo,Jo),e(Jo,Dr),e(E,Nr),e(E,Ko),e(Ko,Xo),e(Xo,qr),e(E,jr),e(E,mo),e(mo,Qo),e(Qo,Lr),e(E,Sr),e(E,po),e(po,Zo),e(Zo,Rr),e(me,Or),e(me,I),e(I,z),e(z,fo),e(fo,Br),e(z,Ur),e(z,et),e(et,Hr),e(z,Wr),e(z,ot),e(ot,Gr),e(z,Vr),e(z,ho),e(ho,Yr),e(z,Jr),e(z,go),e(go,Kr),e(I,Xr),e(I,x),e(x,uo),e(uo,Qr),e(x,Zr),e(x,tt),e(tt,ea),e(x,oa),e(x,rt),e(rt,ta),e(x,ra),e(x,_o),e(_o,aa),e(x,sa),e(x,vo),e(vo,na),e(I,la),e(I,C),e(C,Po),e(Po,ia),e(C,ca),e(C,at),e(at,da),e(C,ma),e(C,st),e(st,pa),e(C,fa),e(C,bo),e(bo,ha),e(C,ga),e(C,Fo),e(Fo,ua),e(I,_a),e(I,k),e(k,wo),e(wo,va),e(k,Pa),e(k,nt),e(nt,ba),e(k,Fa),e(k,lt),e(lt,wa),e(k,ya),e(k,yo),e(yo,$a),e(k,Ta),e(k,$o),e($o,Ea),e(I,Ia),e(I,M),e(M,To),e(To,za),e(M,xa),e(M,it),e(it,Ca),e(M,ka),e(M,ct),e(ct,Ma),e(M,Aa),e(M,Eo),e(Eo,Da),e(M,Na),e(M,Io),e(Io,qa),f(o,St,p),f(o,U,p),e(U,ja),e(U,Ne),e(Ne,La),e(U,Sa),e(U,qe),e(qe,Ra),e(U,Oa),f(o,Rt,p),f(o,Q,p),e(Q,pe),e(pe,dt),w(je,dt,null),e(Q,Ba),e(Q,mt),e(mt,Ua),f(o,Ot,p),f(o,A,p),w(Le,A,null),e(A,Ha),e(A,Z),e(Z,Wa),e(Z,zo),e(zo,Ga),e(Z,Va),e(Z,Se),e(Se,Ya),e(Z,Ja),e(A,Ka),e(A,ee),e(ee,Xa),e(ee,xo),e(xo,Qa),e(ee,Za),e(ee,Co),e(Co,es),e(ee,os),e(A,ts),w(fe,A,null),f(o,Bt,p),f(o,oe,p),e(oe,he),e(he,pt),w(Re,pt,null),e(oe,rs),e(oe,ft),e(ft,as),f(o,Ut,p),f(o,S,p),w(Oe,S,null),e(S,ss),e(S,ht),e(ht,ns),e(S,ls),e(S,ge),w(Be,ge,null),e(ge,is),e(ge,gt),e(gt,cs),f(o,Ht,p),f(o,te,p),e(te,ue),e(ue,ut),w(Ue,ut,null),e(te,ds),e(te,_t),e(_t,ms),f(o,Wt,p),f(o,R,p),w(He,R,null),e(R,ps),e(R,vt),e(vt,fs),e(R,hs),e(R,_e),w(We,_e,null),e(_e,gs),e(_e,Pt),e(Pt,us),f(o,Gt,p),f(o,re,p),e(re,ve),e(ve,bt),w(Ge,bt,null),e(re,_s),e(re,Ft),e(Ft,vs),f(o,Vt,p),f(o,O,p),w(Ve,O,null),e(O,Ps),e(O,Ye),e(Ye,bs),e(Ye,Je),e(Je,Fs),e(Ye,ws),e(O,ys),e(O,q),w(Ke,q,null),e(q,$s),e(q,ae),e(ae,Ts),e(ae,ko),e(ko,Es),e(ae,Is),e(ae,wt),e(wt,zs),e(ae,xs),e(q,Cs),w(Pe,q,null),e(q,ks),w(be,q,null),f(o,Yt,p),f(o,se,p),e(se,Fe),e(Fe,yt),w(Xe,yt,null),e(se,Ms),e(se,$t),e($t,As),f(o,Jt,p),f(o,D,p),w(Qe,D,null),e(D,Ds),e(D,Tt),e(Tt,Ns),e(D,qs),e(D,Ze),e(Ze,js),e(Ze,eo),e(eo,Ls),e(Ze,Ss),e(D,Rs),e(D,j),w(oo,j,null),e(j,Os),e(j,ne),e(ne,Bs),e(ne,Mo),e(Mo,Us),e(ne,Hs),e(ne,Et),e(Et,Ws),e(ne,Gs),e(j,Vs),w(we,j,null),e(j,Ys),w(ye,j,null),Kt=!0},p(o,[p]){const to={};p&2&&(to.$$scope={dirty:p,ctx:o}),fe.$set(to);const It={};p&2&&(It.$$scope={dirty:p,ctx:o}),Pe.$set(It);const zt={};p&2&&(zt.$$scope={dirty:p,ctx:o}),be.$set(zt);const xt={};p&2&&(xt.$$scope={dirty:p,ctx:o}),we.$set(xt);const ro={};p&2&&(ro.$$scope={dirty:p,ctx:o}),ye.$set(ro)},i(o){Kt||(y(m.$$.fragment,o),y(ze.$$.fragment,o),y(je.$$.fragment,o),y(Le.$$.fragment,o),y(fe.$$.fragment,o),y(Re.$$.fragment,o),y(Oe.$$.fragment,o),y(Be.$$.fragment,o),y(Ue.$$.fragment,o),y(He.$$.fragment,o),y(We.$$.fragment,o),y(Ge.$$.fragment,o),y(Ve.$$.fragment,o),y(Ke.$$.fragment,o),y(Pe.$$.fragment,o),y(be.$$.fragment,o),y(Xe.$$.fragment,o),y(Qe.$$.fragment,o),y(oo.$$.fragment,o),y(we.$$.fragment,o),y(ye.$$.fragment,o),Kt=!0)},o(o){$(m.$$.fragment,o),$(ze.$$.fragment,o),$(je.$$.fragment,o),$(Le.$$.fragment,o),$(fe.$$.fragment,o),$(Re.$$.fragment,o),$(Oe.$$.fragment,o),$(Be.$$.fragment,o),$(Ue.$$.fragment,o),$(He.$$.fragment,o),$(We.$$.fragment,o),$(Ge.$$.fragment,o),$(Ve.$$.fragment,o),$(Ke.$$.fragment,o),$(Pe.$$.fragment,o),$(be.$$.fragment,o),$(Xe.$$.fragment,o),$(Qe.$$.fragment,o),$(oo.$$.fragment,o),$(we.$$.fragment,o),$(ye.$$.fragment,o),Kt=!1},d(o){t(h),o&&t(P),o&&t(_),T(m),o&&t(Ct),o&&t(X),T(ze),o&&t(kt),o&&t(ce),o&&t(Mt),o&&t(so),o&&t(At),o&&t(no),o&&t(Dt),o&&t(de),o&&t(Nt),o&&t(ke),o&&t(qt),o&&t(lo),o&&t(jt),o&&t(B),o&&t(Lt),o&&t(me),o&&t(St),o&&t(U),o&&t(Rt),o&&t(Q),T(je),o&&t(Ot),o&&t(A),T(Le),T(fe),o&&t(Bt),o&&t(oe),T(Re),o&&t(Ut),o&&t(S),T(Oe),T(Be),o&&t(Ht),o&&t(te),T(Ue),o&&t(Wt),o&&t(R),T(He),T(We),o&&t(Gt),o&&t(re),T(Ge),o&&t(Vt),o&&t(O),T(Ve),T(Ke),T(Pe),T(be),o&&t(Yt),o&&t(se),T(Xe),o&&t(Jt),o&&t(D),T(Qe),T(oo),T(we),T(ye)}}}const Sl={local:"poolformer",sections:[{local:"overview",title:"Overview"},{local:"transformers.PoolFormerConfig",title:"PoolFormerConfig"},{local:"transformers.PoolFormerImageProcessor",title:"PoolFormerFeatureExtractor"},{local:"transformers.PoolFormerImageProcessor",title:"PoolFormerImageProcessor"},{local:"transformers.PoolFormerModel",title:"PoolFormerModel"},{local:"transformers.PoolFormerForImageClassification",title:"PoolFormerForImageClassification"}],title:"PoolFormer"};function Rl(N){return Ml(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Vl extends Il{constructor(h){super();zl(this,h,Rl,Ll,xl,{})}}export{Vl as default,Sl as metadata};
