import{S as Dd,i as qd,s as Ad,e as r,k as c,w as $,t as s,M as Ld,c as n,d as t,m,a as i,x as y,h as a,b as h,G as e,g as f,y as M,q as V,o as E,B as x,v as Rd,L as _s}from"../../chunks/vendor-hf-doc-builder.js";import{T as Pt}from"../../chunks/Tip-hf-doc-builder.js";import{D as ie}from"../../chunks/Docstring-hf-doc-builder.js";import{C as vo}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as ht}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as gs}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Wd(P){let d,T,g,u,v;return u=new vo({props:{code:`from transformers import MobileViTConfig, MobileViTModel

# Initializing a mobilevit-small style configuration
configuration = MobileViTConfig()

# Initializing a model from the mobilevit-small style configuration
model = MobileViTModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTConfig, MobileViTModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a mobilevit-small style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = MobileViTConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the mobilevit-small style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){d=r("p"),T=s("Example:"),g=c(),$(u.$$.fragment)},l(l){d=n(l,"P",{});var p=i(d);T=a(p,"Example:"),p.forEach(t),g=m(l),y(u.$$.fragment,l)},m(l,p){f(l,d,p),e(d,T),f(l,g,p),M(u,l,p),v=!0},p:_s,i(l){v||(V(u.$$.fragment,l),v=!0)},o(l){E(u.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(g),x(u,l)}}}function Ud(P){let d,T,g,u,v;return{c(){d=r("p"),T=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),u=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var p=i(d);T=a(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(p,"CODE",{});var I=i(g);u=a(I,"Module"),I.forEach(t),v=a(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(t)},m(l,p){f(l,d,p),e(d,T),e(d,g),e(g,u),e(d,v)},d(l){l&&t(d)}}}function Bd(P){let d,T,g,u,v;return u=new vo({props:{code:`from transformers import MobileViTFeatureExtractor, MobileViTModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/mobilevit-small")
model = MobileViTModel.from_pretrained("apple/mobilevit-small")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, MobileViTModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTModel.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">640</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>]`}}),{c(){d=r("p"),T=s("Example:"),g=c(),$(u.$$.fragment)},l(l){d=n(l,"P",{});var p=i(d);T=a(p,"Example:"),p.forEach(t),g=m(l),y(u.$$.fragment,l)},m(l,p){f(l,d,p),e(d,T),f(l,g,p),M(u,l,p),v=!0},p:_s,i(l){v||(V(u.$$.fragment,l),v=!0)},o(l){E(u.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(g),x(u,l)}}}function Hd(P){let d,T,g,u,v;return{c(){d=r("p"),T=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),u=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var p=i(d);T=a(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(p,"CODE",{});var I=i(g);u=a(I,"Module"),I.forEach(t),v=a(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(t)},m(l,p){f(l,d,p),e(d,T),e(d,g),e(g,u),e(d,v)},d(l){l&&t(d)}}}function Kd(P){let d,T,g,u,v;return u=new vo({props:{code:`from transformers import MobileViTFeatureExtractor, MobileViTForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/mobilevit-small")
model = MobileViTForImageClassification.from_pretrained("apple/mobilevit-small")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, MobileViTForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTForImageClassification.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){d=r("p"),T=s("Example:"),g=c(),$(u.$$.fragment)},l(l){d=n(l,"P",{});var p=i(d);T=a(p,"Example:"),p.forEach(t),g=m(l),y(u.$$.fragment,l)},m(l,p){f(l,d,p),e(d,T),f(l,g,p),M(u,l,p),v=!0},p:_s,i(l){v||(V(u.$$.fragment,l),v=!0)},o(l){E(u.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(g),x(u,l)}}}function Gd(P){let d,T,g,u,v;return{c(){d=r("p"),T=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),u=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var p=i(d);T=a(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(p,"CODE",{});var I=i(g);u=a(I,"Module"),I.forEach(t),v=a(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(t)},m(l,p){f(l,d,p),e(d,T),e(d,g),e(g,u),e(d,v)},d(l){l&&t(d)}}}function Yd(P){let d,T,g,u,v;return u=new vo({props:{code:`from transformers import MobileViTFeatureExtractor, MobileViTForSemanticSegmentation
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/deeplabv3-mobilevit-small")
model = MobileViTForSemanticSegmentation.from_pretrained("apple/deeplabv3-mobilevit-small")

inputs = feature_extractor(images=image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

# logits are of shape (batch_size, num_labels, height, width)
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, MobileViTForSemanticSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/deeplabv3-mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileViTForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;apple/deeplabv3-mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># logits are of shape (batch_size, num_labels, height, width)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){d=r("p"),T=s("Examples:"),g=c(),$(u.$$.fragment)},l(l){d=n(l,"P",{});var p=i(d);T=a(p,"Examples:"),p.forEach(t),g=m(l),y(u.$$.fragment,l)},m(l,p){f(l,d,p),e(d,T),f(l,g,p),M(u,l,p),v=!0},p:_s,i(l){v||(V(u.$$.fragment,l),v=!0)},o(l){E(u.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(g),x(u,l)}}}function Jd(P){let d,T,g,u,v,l,p,I,Fe,_e,N,ee,te,w,ke,H,Ie,be,q,Ce,oe,Y,Pe,ve,L,je,Te,R,ce,Se,se,C,S,we,j,me,ae,J,re,ze,z,Oe,K,ne,Ne,W,De,qe,U,pe,A,Ae,G,O,Le,D,he,X;return{c(){d=r("p"),T=s("TensorFlow models and layers in "),g=r("code"),u=s("transformers"),v=s(" accept two formats as input:"),l=c(),p=r("ul"),I=r("li"),Fe=s("having all inputs as keyword arguments (like PyTorch models), or"),_e=c(),N=r("li"),ee=s("having all inputs as a list, tuple or dict in the first positional argument."),te=c(),w=r("p"),ke=s(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=r("code"),Ie=s("model.fit()"),be=s(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),q=r("code"),Ce=s("model.fit()"),oe=s(` supports! If, however, you want to use the second
format outside of Keras methods like `),Y=r("code"),Pe=s("fit()"),ve=s(" and "),L=r("code"),je=s("predict()"),Te=s(`, such as when creating your own layers or models with
the Keras `),R=r("code"),ce=s("Functional"),Se=s(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),se=c(),C=r("ul"),S=r("li"),we=s("a single Tensor with "),j=r("code"),me=s("pixel_values"),ae=s(" only and nothing else: "),J=r("code"),re=s("model(pixel_values)"),ze=c(),z=r("li"),Oe=s(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),K=r("code"),ne=s("model([pixel_values, attention_mask])"),Ne=s(" or "),W=r("code"),De=s("model([pixel_values, attention_mask, token_type_ids])"),qe=c(),U=r("li"),pe=s(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),A=r("code"),Ae=s('model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),G=c(),O=r("p"),Le=s(`Note that when creating models and layers with
`),D=r("a"),he=s("subclassing"),X=s(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(_){d=n(_,"P",{});var F=i(d);T=a(F,"TensorFlow models and layers in "),g=n(F,"CODE",{});var Qe=i(g);u=a(Qe,"transformers"),Qe.forEach(t),v=a(F," accept two formats as input:"),F.forEach(t),l=m(_),p=n(_,"UL",{});var le=i(p);I=n(le,"LI",{});var $e=i(I);Fe=a($e,"having all inputs as keyword arguments (like PyTorch models), or"),$e.forEach(t),_e=m(le),N=n(le,"LI",{});var Ze=i(N);ee=a(Ze,"having all inputs as a list, tuple or dict in the first positional argument."),Ze.forEach(t),le.forEach(t),te=m(_),w=n(_,"P",{});var k=i(w);ke=a(k,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=n(k,"CODE",{});var et=i(H);Ie=a(et,"model.fit()"),et.forEach(t),be=a(k,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),q=n(k,"CODE",{});var ye=i(q);Ce=a(ye,"model.fit()"),ye.forEach(t),oe=a(k,` supports! If, however, you want to use the second
format outside of Keras methods like `),Y=n(k,"CODE",{});var Me=i(Y);Pe=a(Me,"fit()"),Me.forEach(t),ve=a(k," and "),L=n(k,"CODE",{});var tt=i(L);je=a(tt,"predict()"),tt.forEach(t),Te=a(k,`, such as when creating your own layers or models with
the Keras `),R=n(k,"CODE",{});var Ve=i(R);ce=a(Ve,"Functional"),Ve.forEach(t),Se=a(k,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),k.forEach(t),se=m(_),C=n(_,"UL",{});var B=i(C);S=n(B,"LI",{});var Q=i(S);we=a(Q,"a single Tensor with "),j=n(Q,"CODE",{});var ot=i(j);me=a(ot,"pixel_values"),ot.forEach(t),ae=a(Q," only and nothing else: "),J=n(Q,"CODE",{});var We=i(J);re=a(We,"model(pixel_values)"),We.forEach(t),Q.forEach(t),ze=m(B),z=n(B,"LI",{});var Z=i(z);Oe=a(Z,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),K=n(Z,"CODE",{});var Be=i(K);ne=a(Be,"model([pixel_values, attention_mask])"),Be.forEach(t),Ne=a(Z," or "),W=n(Z,"CODE",{});var Ee=i(W);De=a(Ee,"model([pixel_values, attention_mask, token_type_ids])"),Ee.forEach(t),Z.forEach(t),qe=m(B),U=n(B,"LI",{});var xe=i(U);pe=a(xe,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),A=n(xe,"CODE",{});var fe=i(A);Ae=a(fe,'model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),fe.forEach(t),xe.forEach(t),B.forEach(t),G=m(_),O=n(_,"P",{});var de=i(O);Le=a(de,`Note that when creating models and layers with
`),D=n(de,"A",{href:!0,rel:!0});var Ue=i(D);he=a(Ue,"subclassing"),Ue.forEach(t),X=a(de,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),de.forEach(t),this.h()},h(){h(D,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),h(D,"rel","nofollow")},m(_,F){f(_,d,F),e(d,T),e(d,g),e(g,u),e(d,v),f(_,l,F),f(_,p,F),e(p,I),e(I,Fe),e(p,_e),e(p,N),e(N,ee),f(_,te,F),f(_,w,F),e(w,ke),e(w,H),e(H,Ie),e(w,be),e(w,q),e(q,Ce),e(w,oe),e(w,Y),e(Y,Pe),e(w,ve),e(w,L),e(L,je),e(w,Te),e(w,R),e(R,ce),e(w,Se),f(_,se,F),f(_,C,F),e(C,S),e(S,we),e(S,j),e(j,me),e(S,ae),e(S,J),e(J,re),e(C,ze),e(C,z),e(z,Oe),e(z,K),e(K,ne),e(z,Ne),e(z,W),e(W,De),e(C,qe),e(C,U),e(U,pe),e(U,A),e(A,Ae),f(_,G,F),f(_,O,F),e(O,Le),e(O,D),e(D,he),e(O,X)},d(_){_&&t(d),_&&t(l),_&&t(p),_&&t(te),_&&t(w),_&&t(se),_&&t(C),_&&t(G),_&&t(O)}}}function Xd(P){let d,T,g,u,v;return{c(){d=r("p"),T=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),u=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var p=i(d);T=a(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(p,"CODE",{});var I=i(g);u=a(I,"Module"),I.forEach(t),v=a(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(t)},m(l,p){f(l,d,p),e(d,T),e(d,g),e(g,u),e(d,v)},d(l){l&&t(d)}}}function Qd(P){let d,T,g,u,v;return u=new vo({props:{code:`from transformers import MobileViTFeatureExtractor, TFMobileViTModel
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/mobilevit-small")
model = TFMobileViTModel.from_pretrained("apple/mobilevit-small")

inputs = feature_extractor(image, return_tensors="tf")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, TFMobileViTModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMobileViTModel.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">640</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>]`}}),{c(){d=r("p"),T=s("Example:"),g=c(),$(u.$$.fragment)},l(l){d=n(l,"P",{});var p=i(d);T=a(p,"Example:"),p.forEach(t),g=m(l),y(u.$$.fragment,l)},m(l,p){f(l,d,p),e(d,T),f(l,g,p),M(u,l,p),v=!0},p:_s,i(l){v||(V(u.$$.fragment,l),v=!0)},o(l){E(u.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(g),x(u,l)}}}function Zd(P){let d,T,g,u,v,l,p,I,Fe,_e,N,ee,te,w,ke,H,Ie,be,q,Ce,oe,Y,Pe,ve,L,je,Te,R,ce,Se,se,C,S,we,j,me,ae,J,re,ze,z,Oe,K,ne,Ne,W,De,qe,U,pe,A,Ae,G,O,Le,D,he,X;return{c(){d=r("p"),T=s("TensorFlow models and layers in "),g=r("code"),u=s("transformers"),v=s(" accept two formats as input:"),l=c(),p=r("ul"),I=r("li"),Fe=s("having all inputs as keyword arguments (like PyTorch models), or"),_e=c(),N=r("li"),ee=s("having all inputs as a list, tuple or dict in the first positional argument."),te=c(),w=r("p"),ke=s(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=r("code"),Ie=s("model.fit()"),be=s(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),q=r("code"),Ce=s("model.fit()"),oe=s(` supports! If, however, you want to use the second
format outside of Keras methods like `),Y=r("code"),Pe=s("fit()"),ve=s(" and "),L=r("code"),je=s("predict()"),Te=s(`, such as when creating your own layers or models with
the Keras `),R=r("code"),ce=s("Functional"),Se=s(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),se=c(),C=r("ul"),S=r("li"),we=s("a single Tensor with "),j=r("code"),me=s("pixel_values"),ae=s(" only and nothing else: "),J=r("code"),re=s("model(pixel_values)"),ze=c(),z=r("li"),Oe=s(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),K=r("code"),ne=s("model([pixel_values, attention_mask])"),Ne=s(" or "),W=r("code"),De=s("model([pixel_values, attention_mask, token_type_ids])"),qe=c(),U=r("li"),pe=s(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),A=r("code"),Ae=s('model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),G=c(),O=r("p"),Le=s(`Note that when creating models and layers with
`),D=r("a"),he=s("subclassing"),X=s(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(_){d=n(_,"P",{});var F=i(d);T=a(F,"TensorFlow models and layers in "),g=n(F,"CODE",{});var Qe=i(g);u=a(Qe,"transformers"),Qe.forEach(t),v=a(F," accept two formats as input:"),F.forEach(t),l=m(_),p=n(_,"UL",{});var le=i(p);I=n(le,"LI",{});var $e=i(I);Fe=a($e,"having all inputs as keyword arguments (like PyTorch models), or"),$e.forEach(t),_e=m(le),N=n(le,"LI",{});var Ze=i(N);ee=a(Ze,"having all inputs as a list, tuple or dict in the first positional argument."),Ze.forEach(t),le.forEach(t),te=m(_),w=n(_,"P",{});var k=i(w);ke=a(k,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=n(k,"CODE",{});var et=i(H);Ie=a(et,"model.fit()"),et.forEach(t),be=a(k,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),q=n(k,"CODE",{});var ye=i(q);Ce=a(ye,"model.fit()"),ye.forEach(t),oe=a(k,` supports! If, however, you want to use the second
format outside of Keras methods like `),Y=n(k,"CODE",{});var Me=i(Y);Pe=a(Me,"fit()"),Me.forEach(t),ve=a(k," and "),L=n(k,"CODE",{});var tt=i(L);je=a(tt,"predict()"),tt.forEach(t),Te=a(k,`, such as when creating your own layers or models with
the Keras `),R=n(k,"CODE",{});var Ve=i(R);ce=a(Ve,"Functional"),Ve.forEach(t),Se=a(k,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),k.forEach(t),se=m(_),C=n(_,"UL",{});var B=i(C);S=n(B,"LI",{});var Q=i(S);we=a(Q,"a single Tensor with "),j=n(Q,"CODE",{});var ot=i(j);me=a(ot,"pixel_values"),ot.forEach(t),ae=a(Q," only and nothing else: "),J=n(Q,"CODE",{});var We=i(J);re=a(We,"model(pixel_values)"),We.forEach(t),Q.forEach(t),ze=m(B),z=n(B,"LI",{});var Z=i(z);Oe=a(Z,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),K=n(Z,"CODE",{});var Be=i(K);ne=a(Be,"model([pixel_values, attention_mask])"),Be.forEach(t),Ne=a(Z," or "),W=n(Z,"CODE",{});var Ee=i(W);De=a(Ee,"model([pixel_values, attention_mask, token_type_ids])"),Ee.forEach(t),Z.forEach(t),qe=m(B),U=n(B,"LI",{});var xe=i(U);pe=a(xe,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),A=n(xe,"CODE",{});var fe=i(A);Ae=a(fe,'model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),fe.forEach(t),xe.forEach(t),B.forEach(t),G=m(_),O=n(_,"P",{});var de=i(O);Le=a(de,`Note that when creating models and layers with
`),D=n(de,"A",{href:!0,rel:!0});var Ue=i(D);he=a(Ue,"subclassing"),Ue.forEach(t),X=a(de,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),de.forEach(t),this.h()},h(){h(D,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),h(D,"rel","nofollow")},m(_,F){f(_,d,F),e(d,T),e(d,g),e(g,u),e(d,v),f(_,l,F),f(_,p,F),e(p,I),e(I,Fe),e(p,_e),e(p,N),e(N,ee),f(_,te,F),f(_,w,F),e(w,ke),e(w,H),e(H,Ie),e(w,be),e(w,q),e(q,Ce),e(w,oe),e(w,Y),e(Y,Pe),e(w,ve),e(w,L),e(L,je),e(w,Te),e(w,R),e(R,ce),e(w,Se),f(_,se,F),f(_,C,F),e(C,S),e(S,we),e(S,j),e(j,me),e(S,ae),e(S,J),e(J,re),e(C,ze),e(C,z),e(z,Oe),e(z,K),e(K,ne),e(z,Ne),e(z,W),e(W,De),e(C,qe),e(C,U),e(U,pe),e(U,A),e(A,Ae),f(_,G,F),f(_,O,F),e(O,Le),e(O,D),e(D,he),e(O,X)},d(_){_&&t(d),_&&t(l),_&&t(p),_&&t(te),_&&t(w),_&&t(se),_&&t(C),_&&t(G),_&&t(O)}}}function ec(P){let d,T,g,u,v;return{c(){d=r("p"),T=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),u=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var p=i(d);T=a(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(p,"CODE",{});var I=i(g);u=a(I,"Module"),I.forEach(t),v=a(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(t)},m(l,p){f(l,d,p),e(d,T),e(d,g),e(g,u),e(d,v)},d(l){l&&t(d)}}}function tc(P){let d,T,g,u,v;return u=new vo({props:{code:`from transformers import MobileViTFeatureExtractor, TFMobileViTForImageClassification
import tensorflow as tf
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/mobilevit-small")
model = TFMobileViTForImageClassification.from_pretrained("apple/mobilevit-small")

inputs = feature_extractor(image, return_tensors="tf")
logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = int(tf.math.argmax(logits, axis=-1))
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, TFMobileViTForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMobileViTForImageClassification.from_pretrained(<span class="hljs-string">&quot;apple/mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = <span class="hljs-built_in">int</span>(tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){d=r("p"),T=s("Example:"),g=c(),$(u.$$.fragment)},l(l){d=n(l,"P",{});var p=i(d);T=a(p,"Example:"),p.forEach(t),g=m(l),y(u.$$.fragment,l)},m(l,p){f(l,d,p),e(d,T),f(l,g,p),M(u,l,p),v=!0},p:_s,i(l){v||(V(u.$$.fragment,l),v=!0)},o(l){E(u.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(g),x(u,l)}}}function oc(P){let d,T,g,u,v,l,p,I,Fe,_e,N,ee,te,w,ke,H,Ie,be,q,Ce,oe,Y,Pe,ve,L,je,Te,R,ce,Se,se,C,S,we,j,me,ae,J,re,ze,z,Oe,K,ne,Ne,W,De,qe,U,pe,A,Ae,G,O,Le,D,he,X;return{c(){d=r("p"),T=s("TensorFlow models and layers in "),g=r("code"),u=s("transformers"),v=s(" accept two formats as input:"),l=c(),p=r("ul"),I=r("li"),Fe=s("having all inputs as keyword arguments (like PyTorch models), or"),_e=c(),N=r("li"),ee=s("having all inputs as a list, tuple or dict in the first positional argument."),te=c(),w=r("p"),ke=s(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=r("code"),Ie=s("model.fit()"),be=s(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),q=r("code"),Ce=s("model.fit()"),oe=s(` supports! If, however, you want to use the second
format outside of Keras methods like `),Y=r("code"),Pe=s("fit()"),ve=s(" and "),L=r("code"),je=s("predict()"),Te=s(`, such as when creating your own layers or models with
the Keras `),R=r("code"),ce=s("Functional"),Se=s(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),se=c(),C=r("ul"),S=r("li"),we=s("a single Tensor with "),j=r("code"),me=s("pixel_values"),ae=s(" only and nothing else: "),J=r("code"),re=s("model(pixel_values)"),ze=c(),z=r("li"),Oe=s(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),K=r("code"),ne=s("model([pixel_values, attention_mask])"),Ne=s(" or "),W=r("code"),De=s("model([pixel_values, attention_mask, token_type_ids])"),qe=c(),U=r("li"),pe=s(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),A=r("code"),Ae=s('model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),G=c(),O=r("p"),Le=s(`Note that when creating models and layers with
`),D=r("a"),he=s("subclassing"),X=s(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(_){d=n(_,"P",{});var F=i(d);T=a(F,"TensorFlow models and layers in "),g=n(F,"CODE",{});var Qe=i(g);u=a(Qe,"transformers"),Qe.forEach(t),v=a(F," accept two formats as input:"),F.forEach(t),l=m(_),p=n(_,"UL",{});var le=i(p);I=n(le,"LI",{});var $e=i(I);Fe=a($e,"having all inputs as keyword arguments (like PyTorch models), or"),$e.forEach(t),_e=m(le),N=n(le,"LI",{});var Ze=i(N);ee=a(Ze,"having all inputs as a list, tuple or dict in the first positional argument."),Ze.forEach(t),le.forEach(t),te=m(_),w=n(_,"P",{});var k=i(w);ke=a(k,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),H=n(k,"CODE",{});var et=i(H);Ie=a(et,"model.fit()"),et.forEach(t),be=a(k,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),q=n(k,"CODE",{});var ye=i(q);Ce=a(ye,"model.fit()"),ye.forEach(t),oe=a(k,` supports! If, however, you want to use the second
format outside of Keras methods like `),Y=n(k,"CODE",{});var Me=i(Y);Pe=a(Me,"fit()"),Me.forEach(t),ve=a(k," and "),L=n(k,"CODE",{});var tt=i(L);je=a(tt,"predict()"),tt.forEach(t),Te=a(k,`, such as when creating your own layers or models with
the Keras `),R=n(k,"CODE",{});var Ve=i(R);ce=a(Ve,"Functional"),Ve.forEach(t),Se=a(k,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),k.forEach(t),se=m(_),C=n(_,"UL",{});var B=i(C);S=n(B,"LI",{});var Q=i(S);we=a(Q,"a single Tensor with "),j=n(Q,"CODE",{});var ot=i(j);me=a(ot,"pixel_values"),ot.forEach(t),ae=a(Q," only and nothing else: "),J=n(Q,"CODE",{});var We=i(J);re=a(We,"model(pixel_values)"),We.forEach(t),Q.forEach(t),ze=m(B),z=n(B,"LI",{});var Z=i(z);Oe=a(Z,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),K=n(Z,"CODE",{});var Be=i(K);ne=a(Be,"model([pixel_values, attention_mask])"),Be.forEach(t),Ne=a(Z," or "),W=n(Z,"CODE",{});var Ee=i(W);De=a(Ee,"model([pixel_values, attention_mask, token_type_ids])"),Ee.forEach(t),Z.forEach(t),qe=m(B),U=n(B,"LI",{});var xe=i(U);pe=a(xe,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),A=n(xe,"CODE",{});var fe=i(A);Ae=a(fe,'model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),fe.forEach(t),xe.forEach(t),B.forEach(t),G=m(_),O=n(_,"P",{});var de=i(O);Le=a(de,`Note that when creating models and layers with
`),D=n(de,"A",{href:!0,rel:!0});var Ue=i(D);he=a(Ue,"subclassing"),Ue.forEach(t),X=a(de,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),de.forEach(t),this.h()},h(){h(D,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),h(D,"rel","nofollow")},m(_,F){f(_,d,F),e(d,T),e(d,g),e(g,u),e(d,v),f(_,l,F),f(_,p,F),e(p,I),e(I,Fe),e(p,_e),e(p,N),e(N,ee),f(_,te,F),f(_,w,F),e(w,ke),e(w,H),e(H,Ie),e(w,be),e(w,q),e(q,Ce),e(w,oe),e(w,Y),e(Y,Pe),e(w,ve),e(w,L),e(L,je),e(w,Te),e(w,R),e(R,ce),e(w,Se),f(_,se,F),f(_,C,F),e(C,S),e(S,we),e(S,j),e(j,me),e(S,ae),e(S,J),e(J,re),e(C,ze),e(C,z),e(z,Oe),e(z,K),e(K,ne),e(z,Ne),e(z,W),e(W,De),e(C,qe),e(C,U),e(U,pe),e(U,A),e(A,Ae),f(_,G,F),f(_,O,F),e(O,Le),e(O,D),e(D,he),e(O,X)},d(_){_&&t(d),_&&t(l),_&&t(p),_&&t(te),_&&t(w),_&&t(se),_&&t(C),_&&t(G),_&&t(O)}}}function sc(P){let d,T,g,u,v;return{c(){d=r("p"),T=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),u=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var p=i(d);T=a(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=n(p,"CODE",{});var I=i(g);u=a(I,"Module"),I.forEach(t),v=a(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(t)},m(l,p){f(l,d,p),e(d,T),e(d,g),e(g,u),e(d,v)},d(l){l&&t(d)}}}function ac(P){let d,T,g,u,v;return u=new vo({props:{code:`from transformers import MobileViTFeatureExtractor, TFMobileViTForSemanticSegmentation
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = MobileViTFeatureExtractor.from_pretrained("apple/deeplabv3-mobilevit-small")
model = TFMobileViTForSemanticSegmentation.from_pretrained("apple/deeplabv3-mobilevit-small")

inputs = feature_extractor(images=image, return_tensors="tf")

outputs = model(**inputs)

# logits are of shape (batch_size, num_labels, height, width)
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileViTFeatureExtractor, TFMobileViTForSemanticSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileViTFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;apple/deeplabv3-mobilevit-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMobileViTForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;apple/deeplabv3-mobilevit-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># logits are of shape (batch_size, num_labels, height, width)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){d=r("p"),T=s("Examples:"),g=c(),$(u.$$.fragment)},l(l){d=n(l,"P",{});var p=i(d);T=a(p,"Examples:"),p.forEach(t),g=m(l),y(u.$$.fragment,l)},m(l,p){f(l,d,p),e(d,T),f(l,g,p),M(u,l,p),v=!0},p:_s,i(l){v||(V(u.$$.fragment,l),v=!0)},o(l){E(u.$$.fragment,l),v=!1},d(l){l&&t(d),l&&t(g),x(u,l)}}}function rc(P){let d,T,g,u,v,l,p,I,Fe,_e,N,ee,te,w,ke,H,Ie,be,q,Ce,oe,Y,Pe,ve,L,je,Te,R,ce,Se,se,C,S,we,j,me,ae,J,re,ze,z,Oe,K,ne,Ne,W,De,qe,U,pe,A,Ae,G,O,Le,D,he,X,_,F,Qe,le,$e,Ze,k,et,ye,Me,tt,Ve,B,Q,ot,We,Z,Be,Ee,xe,fe,de,Ue,Mr,Vr,Pa,st,Er,To,xr,Fr,wo,kr,Ir,$o,Cr,Pr,ja,ut,jt,Rs,yo,jr,Ws,Sr,Sa,He,Mo,zr,gt,Or,bs,Nr,Dr,Vo,qr,Ar,Lr,_t,Rr,vs,Wr,Ur,Ts,Br,Hr,Kr,St,za,bt,zt,Us,Eo,Gr,Bs,Yr,Oa,Ke,xo,Jr,Hs,Xr,Qr,Ot,Fo,Zr,Ks,en,tn,ws,ko,Na,vt,Nt,Gs,Io,on,Ys,sn,Da,Ge,Co,an,Js,rn,nn,Dt,Po,ln,Xs,dn,cn,$s,jo,qa,Tt,qt,Qs,So,mn,Zs,pn,Aa,pt,zo,hn,Oo,fn,No,un,gn,_n,at,Do,bn,wt,vn,ys,Tn,wn,ea,$n,yn,Mn,At,Vn,Lt,La,$t,Rt,ta,qo,En,oa,xn,Ra,Ye,Ao,Fn,sa,kn,In,Lo,Cn,Ro,Pn,jn,Sn,rt,Wo,zn,yt,On,Ms,Nn,Dn,aa,qn,An,Ln,Wt,Rn,Ut,Wa,Mt,Bt,ra,Uo,Wn,na,Un,Ua,Je,Bo,Bn,ia,Hn,Kn,Ho,Gn,Ko,Yn,Jn,Xn,nt,Go,Qn,Vt,Zn,Vs,ei,ti,la,oi,si,ai,Ht,ri,Kt,Ba,Et,Gt,da,Yo,ni,ca,ii,Ha,Re,Jo,li,Xo,di,Es,ci,mi,pi,Qo,hi,Zo,fi,ui,gi,Yt,_i,it,es,bi,xt,vi,xs,Ti,wi,ma,$i,yi,Mi,Jt,Vi,Xt,Ka,Ft,Qt,pa,ts,Ei,ha,xi,Ga,ue,os,Fi,fa,ki,Ii,ss,Ci,Fs,Pi,ji,Si,as,zi,rs,Oi,Ni,Di,Zt,qi,lt,ns,Ai,kt,Li,ks,Ri,Wi,ua,Ui,Bi,Hi,eo,Ki,to,Ya,It,oo,ga,is,Gi,_a,Yi,Ja,ge,ls,Ji,ba,Xi,Qi,ds,Zi,Is,el,tl,ol,cs,sl,ms,al,rl,nl,so,il,dt,ps,ll,Ct,dl,Cs,cl,ml,va,pl,hl,fl,ao,ul,ro,Xa;return l=new ht({}),w=new ht({}),Ee=new vo({props:{code:`from transformers import TFMobileViTForImageClassification
import tensorflow as tf


model_ckpt = "apple/mobilevit-xx-small"
model = TFMobileViTForImageClassification.from_pretrained(model_ckpt)

converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.optimizations = [tf.lite.Optimize.DEFAULT]
converter.target_spec.supported_ops = [
    tf.lite.OpsSet.TFLITE_BUILTINS,
    tf.lite.OpsSet.SELECT_TF_OPS,
]
tflite_model = converter.convert()
tflite_filename = model_ckpt.split("/")[-1] + ".tflite"
with open(tflite_filename, "wb") as f:
    f.write(tflite_model)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFMobileViTForImageClassification
<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf


model_ckpt = <span class="hljs-string">&quot;apple/mobilevit-xx-small&quot;</span>
model = TFMobileViTForImageClassification.from_pretrained(model_ckpt)

converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.optimizations = [tf.lite.Optimize.DEFAULT]
converter.target_spec.supported_ops = [
    tf.lite.OpsSet.TFLITE_BUILTINS,
    tf.lite.OpsSet.SELECT_TF_OPS,
]
tflite_model = converter.convert()
tflite_filename = model_ckpt.split(<span class="hljs-string">&quot;/&quot;</span>)[-<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;.tflite&quot;</span>
<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(tflite_filename, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:
    f.write(tflite_model)`}}),yo=new ht({}),Mo=new ie({props:{name:"class transformers.MobileViTConfig",anchor:"transformers.MobileViTConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"image_size",val:" = 256"},{name:"patch_size",val:" = 2"},{name:"hidden_sizes",val:" = [144, 192, 240]"},{name:"neck_hidden_sizes",val:" = [16, 32, 64, 96, 128, 160, 640]"},{name:"num_attention_heads",val:" = 4"},{name:"mlp_ratio",val:" = 2.0"},{name:"expand_ratio",val:" = 4.0"},{name:"hidden_act",val:" = 'silu'"},{name:"conv_kernel_size",val:" = 3"},{name:"output_stride",val:" = 32"},{name:"hidden_dropout_prob",val:" = 0.1"},{name:"attention_probs_dropout_prob",val:" = 0.0"},{name:"classifier_dropout_prob",val:" = 0.1"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-05"},{name:"qkv_bias",val:" = True"},{name:"aspp_out_channels",val:" = 256"},{name:"atrous_rates",val:" = [6, 12, 18]"},{name:"aspp_dropout_prob",val:" = 0.1"},{name:"semantic_loss_ignore_index",val:" = 255"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.MobileViTConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.MobileViTConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The size (resolution) of each patch.`,name:"patch_size"},{anchor:"transformers.MobileViTConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[144, 192, 240]</code>) &#x2014;
Dimensionality (hidden size) of the Transformer encoders at each stage.`,name:"hidden_sizes"},{anchor:"transformers.MobileViTConfig.neck_hidden_sizes",description:`<strong>neck_hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[16, 32, 64, 96, 128, 160, 640]</code>) &#x2014;
The number of channels for the feature maps of the backbone.`,name:"neck_hidden_sizes"},{anchor:"transformers.MobileViTConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.MobileViTConfig.mlp_ratio",description:`<strong>mlp_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 2.0) &#x2014;
The ratio of the number of channels in the output of the MLP to the number of channels in the input.`,name:"mlp_ratio"},{anchor:"transformers.MobileViTConfig.expand_ratio",description:`<strong>expand_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 4.0) &#x2014;
Expansion factor for the MobileNetv2 layers.`,name:"expand_ratio"},{anchor:"transformers.MobileViTConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;silu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the Transformer encoder and convolution layers.`,name:"hidden_act"},{anchor:"transformers.MobileViTConfig.conv_kernel_size",description:`<strong>conv_kernel_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The size of the convolutional kernel in the MobileViT layer.`,name:"conv_kernel_size"},{anchor:"transformers.MobileViTConfig.output_stride",description:`<strong>output_stride</strong> (<code>int</code>, <code>optional</code>, defaults to 32) &#x2014;
The ratio of the spatial resolution of the output to the resolution of the input image.`,name:"output_stride"},{anchor:"transformers.MobileViTConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probabilitiy for all fully connected layers in the Transformer encoder.`,name:"hidden_dropout_prob"},{anchor:"transformers.MobileViTConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.MobileViTConfig.classifier_dropout_prob",description:`<strong>classifier_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for attached classifiers.`,name:"classifier_dropout_prob"},{anchor:"transformers.MobileViTConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.MobileViTConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-5) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.MobileViTConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to add a bias to the queries, keys and values.`,name:"qkv_bias"},{anchor:"transformers.MobileViTConfig.aspp_out_channels",description:`<strong>aspp_out_channels</strong> (<code>int</code>, <code>optional</code>, defaults to 256) &#x2014;
Number of output channels used in the ASPP layer for semantic segmentation.`,name:"aspp_out_channels"},{anchor:"transformers.MobileViTConfig.atrous_rates",description:`<strong>atrous_rates</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[6, 12, 18]</code>) &#x2014;
Dilation (atrous) factors used in the ASPP layer for semantic segmentation.`,name:"atrous_rates"},{anchor:"transformers.MobileViTConfig.aspp_dropout_prob",description:`<strong>aspp_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the ASPP layer for semantic segmentation.`,name:"aspp_dropout_prob"},{anchor:"transformers.MobileViTConfig.semantic_loss_ignore_index",description:`<strong>semantic_loss_ignore_index</strong> (<code>int</code>, <em>optional</em>, defaults to 255) &#x2014;
The index that is ignored by the loss function of the semantic segmentation model.`,name:"semantic_loss_ignore_index"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/configuration_mobilevit.py#L46"}}),St=new gs({props:{anchor:"transformers.MobileViTConfig.example",$$slots:{default:[Wd]},$$scope:{ctx:P}}}),Eo=new ht({}),xo=new ie({props:{name:"class transformers.MobileViTImageProcessor",anchor:"transformers.MobileViTImageProcessor",parameters:[{name:"do_resize",val:": bool = True"},{name:"size",val:": typing.Dict[str, int] = None"},{name:"resample",val:": Resampling = <Resampling.BILINEAR: 2>"},{name:"do_rescale",val:": bool = True"},{name:"rescale_factor",val:": typing.Union[int, float] = 0.00392156862745098"},{name:"do_center_crop",val:": bool = True"},{name:"crop_size",val:": typing.Dict[str, int] = None"},{name:"do_flip_channel_order",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTImageProcessor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the image&#x2019;s (height, width) dimensions to the specified <code>size</code>. Can be overridden by the
<code>do_resize</code> parameter in the <code>preprocess</code> method.`,name:"do_resize"},{anchor:"transformers.MobileViTImageProcessor.size",description:`<strong>size</strong> (<code>Dict[str, int]</code> <em>optional</em>, defaults to <code>{&quot;shortest_edge&quot; -- 224}</code>):
Controls the size of the output image after resizing. Can be overridden by the <code>size</code> parameter in the
<code>preprocess</code> method.`,name:"size"},{anchor:"transformers.MobileViTImageProcessor.resample",description:`<strong>resample</strong> (<code>PILImageResampling</code>, <em>optional</em>, defaults to <code>PILImageResampling.BILINEAR</code>) &#x2014;
Defines the resampling filter to use if resizing the image. Can be overridden by the <code>resample</code> parameter
in the <code>preprocess</code> method.`,name:"resample"},{anchor:"transformers.MobileViTImageProcessor.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to rescale the image by the specified scale <code>rescale_factor</code>. Can be overridden by the <code>do_rescale</code>
parameter in the <code>preprocess</code> method.`,name:"do_rescale"},{anchor:"transformers.MobileViTImageProcessor.rescale_factor",description:`<strong>rescale_factor</strong> (<code>int</code> or <code>float</code>, <em>optional</em>, defaults to <code>1/255</code>) &#x2014;
Scale factor to use if rescaling the image. Can be overridden by the <code>rescale_factor</code> parameter in the
<code>preprocess</code> method.`,name:"rescale_factor"},{anchor:"transformers.MobileViTImageProcessor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to crop the input at the center. If the input size is smaller than <code>crop_size</code> along any edge, the
image is padded with 0&#x2019;s and then center cropped. Can be overridden by the <code>do_center_crop</code> parameter in
the <code>preprocess</code> method.`,name:"do_center_crop"},{anchor:"transformers.MobileViTImageProcessor.crop_size",description:`<strong>crop_size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>{&quot;height&quot; -- 256, &quot;width&quot;: 256}</code>):
Desired output size <code>(size[&quot;height&quot;], size[&quot;width&quot;])</code> when applying center-cropping. Can be overridden by
the <code>crop_size</code> parameter in the <code>preprocess</code> method.`,name:"crop_size"},{anchor:"transformers.MobileViTImageProcessor.do_flip_channel_order",description:`<strong>do_flip_channel_order</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to flip the color channels from RGB to BGR. Can be overridden by the <code>do_flip_channel_order</code>
parameter in the <code>preprocess</code> method.`,name:"do_flip_channel_order"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/image_processing_mobilevit.py#L76"}}),Fo=new ie({props:{name:"__call__",anchor:"transformers.MobileViTImageProcessor.__call__",parameters:[{name:"images",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/image_processing_utils.py#L435"}}),ko=new ie({props:{name:"post_process_semantic_segmentation",anchor:"transformers.MobileViTImageProcessor.post_process_semantic_segmentation",parameters:[{name:"outputs",val:""},{name:"target_sizes",val:": typing.List[typing.Tuple] = None"}],parametersDescription:[{anchor:"transformers.MobileViTImageProcessor.post_process_semantic_segmentation.Converts",description:`<strong>Converts</strong> the output of <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> into semantic segmentation maps. Only supports &#x2014;
PyTorch. &#x2014;
outputs (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a>):
Raw outputs of the model.
target_sizes (<code>List[Tuple]</code>, <em>optional</em>):
A list of length <code>batch_size</code>, where each item is a <code>Tuple[int, int]</code> corresponding to the requested
final size (height, width) of each prediction. If left to None, predictions will not be resized.`,name:"Converts"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/image_processing_mobilevit.py#L324",returnDescription:`
<p>A list of length <code>batch_size</code>, where each item is a semantic segmentation map of shape (height, width)
corresponding to the target_sizes entry (if <code>target_sizes</code> is specified). Each entry of each
<code>torch.Tensor</code> correspond to a semantic class id.</p>
`,returnType:`
<p><code>List[torch.Tensor]</code></p>
`}}),Io=new ht({}),Co=new ie({props:{name:"class transformers.MobileViTImageProcessor",anchor:"transformers.MobileViTImageProcessor",parameters:[{name:"do_resize",val:": bool = True"},{name:"size",val:": typing.Dict[str, int] = None"},{name:"resample",val:": Resampling = <Resampling.BILINEAR: 2>"},{name:"do_rescale",val:": bool = True"},{name:"rescale_factor",val:": typing.Union[int, float] = 0.00392156862745098"},{name:"do_center_crop",val:": bool = True"},{name:"crop_size",val:": typing.Dict[str, int] = None"},{name:"do_flip_channel_order",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTImageProcessor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the image&#x2019;s (height, width) dimensions to the specified <code>size</code>. Can be overridden by the
<code>do_resize</code> parameter in the <code>preprocess</code> method.`,name:"do_resize"},{anchor:"transformers.MobileViTImageProcessor.size",description:`<strong>size</strong> (<code>Dict[str, int]</code> <em>optional</em>, defaults to <code>{&quot;shortest_edge&quot; -- 224}</code>):
Controls the size of the output image after resizing. Can be overridden by the <code>size</code> parameter in the
<code>preprocess</code> method.`,name:"size"},{anchor:"transformers.MobileViTImageProcessor.resample",description:`<strong>resample</strong> (<code>PILImageResampling</code>, <em>optional</em>, defaults to <code>PILImageResampling.BILINEAR</code>) &#x2014;
Defines the resampling filter to use if resizing the image. Can be overridden by the <code>resample</code> parameter
in the <code>preprocess</code> method.`,name:"resample"},{anchor:"transformers.MobileViTImageProcessor.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to rescale the image by the specified scale <code>rescale_factor</code>. Can be overridden by the <code>do_rescale</code>
parameter in the <code>preprocess</code> method.`,name:"do_rescale"},{anchor:"transformers.MobileViTImageProcessor.rescale_factor",description:`<strong>rescale_factor</strong> (<code>int</code> or <code>float</code>, <em>optional</em>, defaults to <code>1/255</code>) &#x2014;
Scale factor to use if rescaling the image. Can be overridden by the <code>rescale_factor</code> parameter in the
<code>preprocess</code> method.`,name:"rescale_factor"},{anchor:"transformers.MobileViTImageProcessor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to crop the input at the center. If the input size is smaller than <code>crop_size</code> along any edge, the
image is padded with 0&#x2019;s and then center cropped. Can be overridden by the <code>do_center_crop</code> parameter in
the <code>preprocess</code> method.`,name:"do_center_crop"},{anchor:"transformers.MobileViTImageProcessor.crop_size",description:`<strong>crop_size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>{&quot;height&quot; -- 256, &quot;width&quot;: 256}</code>):
Desired output size <code>(size[&quot;height&quot;], size[&quot;width&quot;])</code> when applying center-cropping. Can be overridden by
the <code>crop_size</code> parameter in the <code>preprocess</code> method.`,name:"crop_size"},{anchor:"transformers.MobileViTImageProcessor.do_flip_channel_order",description:`<strong>do_flip_channel_order</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to flip the color channels from RGB to BGR. Can be overridden by the <code>do_flip_channel_order</code>
parameter in the <code>preprocess</code> method.`,name:"do_flip_channel_order"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/image_processing_mobilevit.py#L76"}}),Po=new ie({props:{name:"preprocess",anchor:"transformers.MobileViTImageProcessor.preprocess",parameters:[{name:"images",val:": typing.Union[ForwardRef('PIL.Image.Image'), numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[ForwardRef('PIL.Image.Image')], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"do_resize",val:": bool = None"},{name:"size",val:": typing.Dict[str, int] = None"},{name:"resample",val:": Resampling = None"},{name:"do_rescale",val:": bool = None"},{name:"rescale_factor",val:": float = None"},{name:"do_center_crop",val:": bool = None"},{name:"crop_size",val:": typing.Dict[str, int] = None"},{name:"do_flip_channel_order",val:": bool = None"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"data_format",val:": ChannelDimension = <ChannelDimension.FIRST: 'channels_first'>"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileViTImageProcessor.preprocess.images",description:`<strong>images</strong> (<code>ImageInput</code>) &#x2014;
Image to preprocess.`,name:"images"},{anchor:"transformers.MobileViTImageProcessor.preprocess.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_resize</code>) &#x2014;
Whether to resize the image.`,name:"do_resize"},{anchor:"transformers.MobileViTImageProcessor.preprocess.size",description:`<strong>size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>self.size</code>) &#x2014;
Size of the image after resizing.`,name:"size"},{anchor:"transformers.MobileViTImageProcessor.preprocess.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>self.resample</code>) &#x2014;
Resampling filter to use if resizing the image. This can be one of the enum <code>PILImageResampling</code>, Only
has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.MobileViTImageProcessor.preprocess.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_rescale</code>) &#x2014;
Whether to rescale the image by rescale factor.`,name:"do_rescale"},{anchor:"transformers.MobileViTImageProcessor.preprocess.rescale_factor",description:`<strong>rescale_factor</strong> (<code>float</code>, <em>optional</em>, defaults to <code>self.rescale_factor</code>) &#x2014;
Rescale factor to rescale the image by if <code>do_rescale</code> is set to <code>True</code>.`,name:"rescale_factor"},{anchor:"transformers.MobileViTImageProcessor.preprocess.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_center_crop</code>) &#x2014;
Whether to center crop the image.`,name:"do_center_crop"},{anchor:"transformers.MobileViTImageProcessor.preprocess.crop_size",description:`<strong>crop_size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>self.crop_size</code>) &#x2014;
Size of the center crop if <code>do_center_crop</code> is set to <code>True</code>.`,name:"crop_size"},{anchor:"transformers.MobileViTImageProcessor.preprocess.do_flip_channel_order",description:`<strong>do_flip_channel_order</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_flip_channel_order</code>) &#x2014;
Whether to flip the channel order of the image.`,name:"do_flip_channel_order"},{anchor:"transformers.MobileViTImageProcessor.preprocess.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <code>TensorType</code>, <em>optional</em>) &#x2014;
The type of tensors to return. Can be one of:<ul>
<li>Unset: Return a list of <code>np.ndarray</code>.</li>
<li><code>TensorType.TENSORFLOW</code> or <code>&apos;tf&apos;</code>: Return a batch of type <code>tf.Tensor</code>.</li>
<li><code>TensorType.PYTORCH</code> or <code>&apos;pt&apos;</code>: Return a batch of type <code>torch.Tensor</code>.</li>
<li><code>TensorType.NUMPY</code> or <code>&apos;np&apos;</code>: Return a batch of type <code>np.ndarray</code>.</li>
<li><code>TensorType.JAX</code> or <code>&apos;jax&apos;</code>: Return a batch of type <code>jax.numpy.ndarray</code>.</li>
</ul>`,name:"return_tensors"},{anchor:"transformers.MobileViTImageProcessor.preprocess.data_format",description:`<strong>data_format</strong> (<code>ChannelDimension</code> or <code>str</code>, <em>optional</em>, defaults to <code>ChannelDimension.FIRST</code>) &#x2014;
The channel dimension format for the output image. Can be one of:<ul>
<li><code>ChannelDimension.FIRST</code>: image in (num_channels, height, width) format.</li>
<li><code>ChannelDimension.LAST</code>: image in (height, width, num_channels) format.</li>
</ul>`,name:"data_format"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/image_processing_mobilevit.py#L221"}}),jo=new ie({props:{name:"post_process_semantic_segmentation",anchor:"transformers.MobileViTImageProcessor.post_process_semantic_segmentation",parameters:[{name:"outputs",val:""},{name:"target_sizes",val:": typing.List[typing.Tuple] = None"}],parametersDescription:[{anchor:"transformers.MobileViTImageProcessor.post_process_semantic_segmentation.Converts",description:`<strong>Converts</strong> the output of <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> into semantic segmentation maps. Only supports &#x2014;
PyTorch. &#x2014;
outputs (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a>):
Raw outputs of the model.
target_sizes (<code>List[Tuple]</code>, <em>optional</em>):
A list of length <code>batch_size</code>, where each item is a <code>Tuple[int, int]</code> corresponding to the requested
final size (height, width) of each prediction. If left to None, predictions will not be resized.`,name:"Converts"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/image_processing_mobilevit.py#L324",returnDescription:`
<p>A list of length <code>batch_size</code>, where each item is a semantic segmentation map of shape (height, width)
corresponding to the target_sizes entry (if <code>target_sizes</code> is specified). Each entry of each
<code>torch.Tensor</code> correspond to a semantic class id.</p>
`,returnType:`
<p><code>List[torch.Tensor]</code></p>
`}}),So=new ht({}),zo=new ie({props:{name:"class transformers.MobileViTModel",anchor:"transformers.MobileViTModel",parameters:[{name:"config",val:": MobileViTConfig"},{name:"expand_output",val:": bool = True"}],parametersDescription:[{anchor:"transformers.MobileViTModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L709"}}),Do=new ie({props:{name:"forward",anchor:"transformers.MobileViTModel.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileViTModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTImageProcessor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ImageProcessor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileViTModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileViTModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L746",returnDescription:`
<p>A <code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state after a pooling operation on the spatial dimensions.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),At=new Pt({props:{$$slots:{default:[Ud]},$$scope:{ctx:P}}}),Lt=new gs({props:{anchor:"transformers.MobileViTModel.forward.example",$$slots:{default:[Bd]},$$scope:{ctx:P}}}),qo=new ht({}),Ao=new ie({props:{name:"class transformers.MobileViTForImageClassification",anchor:"transformers.MobileViTForImageClassification",parameters:[{name:"config",val:": MobileViTConfig"}],parametersDescription:[{anchor:"transformers.MobileViTForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L804"}}),Wo=new ie({props:{name:"forward",anchor:"transformers.MobileViTForImageClassification.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileViTForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTImageProcessor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ImageProcessor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileViTForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileViTForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MobileViTForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss). If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L820",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Wt=new Pt({props:{$$slots:{default:[Hd]},$$scope:{ctx:P}}}),Ut=new gs({props:{anchor:"transformers.MobileViTForImageClassification.forward.example",$$slots:{default:[Kd]},$$scope:{ctx:P}}}),Uo=new ht({}),Bo=new ie({props:{name:"class transformers.MobileViTForSemanticSegmentation",anchor:"transformers.MobileViTForSemanticSegmentation",parameters:[{name:"config",val:": MobileViTConfig"}],parametersDescription:[{anchor:"transformers.MobileViTForSemanticSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L1000"}}),Go=new ie({props:{name:"forward",anchor:"transformers.MobileViTForSemanticSegmentation.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileViTForSemanticSegmentation.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTImageProcessor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ImageProcessor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileViTForSemanticSegmentation.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileViTForSemanticSegmentation.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MobileViTForSemanticSegmentation.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Ground truth semantic segmentation maps for computing the loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code>, a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_mobilevit.py#L1011",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput"
>transformers.modeling_outputs.SemanticSegmenterOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels, logits_height, logits_width)</code>) \u2014 Classification scores for each pixel.</p>
<Tip warning={true}>
<p>The logits returned do not necessarily have the same size as the <code>pixel_values</code> passed as inputs. This is
to avoid doing two interpolations and lose some quality when a user needs to resize the logits to the
original image size as post-processing. You should always check your logits shape and resize as needed.</p>
</Tip>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, patch_size, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput"
>transformers.modeling_outputs.SemanticSegmenterOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Ht=new Pt({props:{$$slots:{default:[Gd]},$$scope:{ctx:P}}}),Kt=new gs({props:{anchor:"transformers.MobileViTForSemanticSegmentation.forward.example",$$slots:{default:[Yd]},$$scope:{ctx:P}}}),Yo=new ht({}),Jo=new ie({props:{name:"class transformers.TFMobileViTModel",anchor:"transformers.TFMobileViTModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFMobileViTModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L831"}}),Yt=new Pt({props:{$$slots:{default:[Jd]},$$scope:{ctx:P}}}),es=new ie({props:{name:"call",anchor:"transformers.TFMobileViTModel.call",parameters:[{name:"pixel_values",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TFMobileViTModel.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code>, <code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTImageProcessor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ImageProcessor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.TFMobileViTModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFMobileViTModel.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L839",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) further processed by a
Linear layer and a Tanh activation function. The Linear layer weights are trained from the next sentence
prediction (classification) objective during pretraining.</p>
<p>This output is usually <em>not</em> a good summary of the semantic content of the input, you\u2019re often better with
averaging or pooling the sequence of hidden-states for the whole input sequence.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Jt=new Pt({props:{$$slots:{default:[Xd]},$$scope:{ctx:P}}}),Xt=new gs({props:{anchor:"transformers.TFMobileViTModel.call.example",$$slots:{default:[Qd]},$$scope:{ctx:P}}}),ts=new ht({}),os=new ie({props:{name:"class transformers.TFMobileViTForImageClassification",anchor:"transformers.TFMobileViTForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFMobileViTForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L876"}}),Zt=new Pt({props:{$$slots:{default:[Zd]},$$scope:{ctx:P}}}),ns=new ie({props:{name:"call",anchor:"transformers.TFMobileViTForImageClassification.call",parameters:[{name:"pixel_values",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"transformers.TFMobileViTForImageClassification.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code>, <code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTImageProcessor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ImageProcessor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.TFMobileViTForImageClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFMobileViTForImageClassification.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFMobileViTForImageClassification.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss). If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L889",returnDescription:`
<p>A <code>transformers.modeling_tf_outputs.TFImageClassifierOutputWithNoAttention</code> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for
the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called
feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_tf_outputs.TFImageClassifierOutputWithNoAttention</code> or <code>tuple(tf.Tensor)</code></p>
`}}),eo=new Pt({props:{$$slots:{default:[ec]},$$scope:{ctx:P}}}),to=new gs({props:{anchor:"transformers.TFMobileViTForImageClassification.call.example",$$slots:{default:[tc]},$$scope:{ctx:P}}}),is=new ht({}),ls=new ie({props:{name:"class transformers.TFMobileViTForSemanticSegmentation",anchor:"transformers.TFMobileViTForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFMobileViTForSemanticSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L1057"}}),so=new Pt({props:{$$slots:{default:[oc]},$$scope:{ctx:P}}}),ps=new ie({props:{name:"call",anchor:"transformers.TFMobileViTForSemanticSegmentation.call",parameters:[{name:"pixel_values",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"labels",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code>, <code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTImageProcessor">MobileViTFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ImageProcessor.__call__">MobileViTFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Ground truth semantic segmentation maps for computing the loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code>, a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mobilevit/modeling_tf_mobilevit.py#L1085",returnDescription:`
<p>A <code>transformers.modeling_tf_outputs.TFSemanticSegmenterOutputWithNoAttention</code> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"
>MobileViTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels, logits_height, logits_width)</code>) \u2014 Classification scores for each pixel.</p>
<Tip warning={true}>
<p>The logits returned do not necessarily have the same size as the <code>pixel_values</code> passed as inputs. This is
to avoid doing two interpolations and lose some quality when a user needs to resize the logits to the
original image size as post-processing. You should always check your logits shape and resize as needed.</p>
</Tip>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for
the output of each layer) of shape <code>(batch_size, patch_size, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_tf_outputs.TFSemanticSegmenterOutputWithNoAttention</code> or <code>tuple(tf.Tensor)</code></p>
`}}),ao=new Pt({props:{$$slots:{default:[sc]},$$scope:{ctx:P}}}),ro=new gs({props:{anchor:"transformers.TFMobileViTForSemanticSegmentation.call.example",$$slots:{default:[ac]},$$scope:{ctx:P}}}),{c(){d=r("meta"),T=c(),g=r("h1"),u=r("a"),v=r("span"),$(l.$$.fragment),p=c(),I=r("span"),Fe=s("MobileViT"),_e=c(),N=r("h2"),ee=r("a"),te=r("span"),$(w.$$.fragment),ke=c(),H=r("span"),Ie=s("Overview"),be=c(),q=r("p"),Ce=s("The MobileViT model was proposed in "),oe=r("a"),Y=s("MobileViT: Light-weight, General-purpose, and Mobile-friendly Vision Transformer"),Pe=s(" by Sachin Mehta and Mohammad Rastegari. MobileViT introduces a new layer that replaces local processing in convolutions with global processing using transformers."),ve=c(),L=r("p"),je=s("The abstract from the paper is the following:"),Te=c(),R=r("p"),ce=r("em"),Se=s("Light-weight convolutional neural networks (CNNs) are the de-facto for mobile vision tasks. Their spatial inductive biases allow them to learn representations with fewer parameters across different vision tasks. However, these networks are spatially local. To learn global representations, self-attention-based vision trans-formers (ViTs) have been adopted. Unlike CNNs, ViTs are heavy-weight. In this paper, we ask the following question: is it possible to combine the strengths of CNNs and ViTs to build a light-weight and low latency network for mobile vision tasks? Towards this end, we introduce MobileViT, a light-weight and general-purpose vision transformer for mobile devices. MobileViT presents a different perspective for the global processing of information with transformers, i.e., transformers as convolutions. Our results show that MobileViT significantly outperforms CNN- and ViT-based networks across different tasks and datasets. On the ImageNet-1k dataset, MobileViT achieves top-1 accuracy of 78.4% with about 6 million parameters, which is 3.2% and 6.2% more accurate than MobileNetv3 (CNN-based) and DeIT (ViT-based) for a similar number of parameters. On the MS-COCO object detection task, MobileViT is 5.7% more accurate than MobileNetv3 for a similar number of parameters."),se=c(),C=r("p"),S=s("Tips:"),we=c(),j=r("ul"),me=r("li"),ae=r("p"),J=s("MobileViT is more like a CNN than a Transformer model. It does not work on sequence data but on batches of images. Unlike ViT, there are no embeddings. The backbone model outputs a feature map. You can follow "),re=r("a"),ze=s("this tutorial"),z=s(" for a lightweight introduction."),Oe=c(),K=r("li"),ne=r("p"),Ne=s("One can use "),W=r("a"),De=s("MobileViTFeatureExtractor"),qe=s(" to prepare images for the model. Note that if you do your own preprocessing, the pretrained checkpoints expect images to be in BGR pixel order (not RGB)."),U=c(),pe=r("li"),A=r("p"),Ae=s("The available image classification checkpoints are pre-trained on "),G=r("a"),O=s("ImageNet-1k"),Le=s(" (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes)."),D=c(),he=r("li"),X=r("p"),_=s("The segmentation model uses a "),F=r("a"),Qe=s("DeepLabV3"),le=s(" head. The available semantic segmentation checkpoints are pre-trained on "),$e=r("a"),Ze=s("PASCAL VOC"),k=s("."),et=c(),ye=r("li"),Me=r("p"),tt=s("As the name suggests MobileViT was designed to be performant and efficient on mobile phones. The TensorFlow versions of the MobileViT models are fully compatible with "),Ve=r("a"),B=s("TensorFlow Lite"),Q=s("."),ot=c(),We=r("p"),Z=s(`You can use the following code to convert a MobileViT checkpoint (be it image classification or semantic segmentation) to generate a
TensorFlow Lite model:`),Be=c(),$(Ee.$$.fragment),xe=c(),fe=r("p"),de=s("The resulting model will be just "),Ue=r("strong"),Mr=s("about an MB"),Vr=s(` making it a good fit for mobile applications where resources and network
bandwidth can be constrained.`),Pa=c(),st=r("p"),Er=s("This model was contributed by "),To=r("a"),xr=s("matthijs"),Fr=s(". The TensorFlow version of the model was contributed by "),wo=r("a"),kr=s("sayakpaul"),Ir=s(". The original code and weights can be found "),$o=r("a"),Cr=s("here"),Pr=s("."),ja=c(),ut=r("h2"),jt=r("a"),Rs=r("span"),$(yo.$$.fragment),jr=c(),Ws=r("span"),Sr=s("MobileViTConfig"),Sa=c(),He=r("div"),$(Mo.$$.fragment),zr=c(),gt=r("p"),Or=s("This is the configuration class to store the configuration of a "),bs=r("a"),Nr=s("MobileViTModel"),Dr=s(`. It is used to instantiate a
MobileViT model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MobileViT
`),Vo=r("a"),qr=s("apple/mobilevit-small"),Ar=s(" architecture."),Lr=c(),_t=r("p"),Rr=s("Configuration objects inherit from "),vs=r("a"),Wr=s("PretrainedConfig"),Ur=s(` and can be used to control the model outputs. Read the
documentation from `),Ts=r("a"),Br=s("PretrainedConfig"),Hr=s(" for more information."),Kr=c(),$(St.$$.fragment),za=c(),bt=r("h2"),zt=r("a"),Us=r("span"),$(Eo.$$.fragment),Gr=c(),Bs=r("span"),Yr=s("MobileViTFeatureExtractor"),Oa=c(),Ke=r("div"),$(xo.$$.fragment),Jr=c(),Hs=r("p"),Xr=s("Constructs a MobileViT image processor."),Qr=c(),Ot=r("div"),$(Fo.$$.fragment),Zr=c(),Ks=r("p"),en=s("Preprocess an image or a batch of images."),tn=c(),ws=r("div"),$(ko.$$.fragment),Na=c(),vt=r("h2"),Nt=r("a"),Gs=r("span"),$(Io.$$.fragment),on=c(),Ys=r("span"),sn=s("MobileViTImageProcessor"),Da=c(),Ge=r("div"),$(Co.$$.fragment),an=c(),Js=r("p"),rn=s("Constructs a MobileViT image processor."),nn=c(),Dt=r("div"),$(Po.$$.fragment),ln=c(),Xs=r("p"),dn=s("Preprocess an image or batch of images."),cn=c(),$s=r("div"),$(jo.$$.fragment),qa=c(),Tt=r("h2"),qt=r("a"),Qs=r("span"),$(So.$$.fragment),mn=c(),Zs=r("span"),pn=s("MobileViTModel"),Aa=c(),pt=r("div"),$(zo.$$.fragment),hn=c(),Oo=r("p"),fn=s(`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),No=r("a"),un=s("torch.nn.Module"),gn=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),_n=c(),at=r("div"),$(Do.$$.fragment),bn=c(),wt=r("p"),vn=s("The "),ys=r("a"),Tn=s("MobileViTModel"),wn=s(" forward method, overrides the "),ea=r("code"),$n=s("__call__"),yn=s(" special method."),Mn=c(),$(At.$$.fragment),Vn=c(),$(Lt.$$.fragment),La=c(),$t=r("h2"),Rt=r("a"),ta=r("span"),$(qo.$$.fragment),En=c(),oa=r("span"),xn=s("MobileViTForImageClassification"),Ra=c(),Ye=r("div"),$(Ao.$$.fragment),Fn=c(),sa=r("p"),kn=s(`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),In=c(),Lo=r("p"),Cn=s("This model is a PyTorch "),Ro=r("a"),Pn=s("torch.nn.Module"),jn=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Sn=c(),rt=r("div"),$(Wo.$$.fragment),zn=c(),yt=r("p"),On=s("The "),Ms=r("a"),Nn=s("MobileViTForImageClassification"),Dn=s(" forward method, overrides the "),aa=r("code"),qn=s("__call__"),An=s(" special method."),Ln=c(),$(Wt.$$.fragment),Rn=c(),$(Ut.$$.fragment),Wa=c(),Mt=r("h2"),Bt=r("a"),ra=r("span"),$(Uo.$$.fragment),Wn=c(),na=r("span"),Un=s("MobileViTForSemanticSegmentation"),Ua=c(),Je=r("div"),$(Bo.$$.fragment),Bn=c(),ia=r("p"),Hn=s("MobileViT model with a semantic segmentation head on top, e.g. for Pascal VOC."),Kn=c(),Ho=r("p"),Gn=s("This model is a PyTorch "),Ko=r("a"),Yn=s("torch.nn.Module"),Jn=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Xn=c(),nt=r("div"),$(Go.$$.fragment),Qn=c(),Vt=r("p"),Zn=s("The "),Vs=r("a"),ei=s("MobileViTForSemanticSegmentation"),ti=s(" forward method, overrides the "),la=r("code"),oi=s("__call__"),si=s(" special method."),ai=c(),$(Ht.$$.fragment),ri=c(),$(Kt.$$.fragment),Ba=c(),Et=r("h2"),Gt=r("a"),da=r("span"),$(Yo.$$.fragment),ni=c(),ca=r("span"),ii=s("TFMobileViTModel"),Ha=c(),Re=r("div"),$(Jo.$$.fragment),li=c(),Xo=r("p"),di=s(`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model inherits from `),Es=r("a"),ci=s("TFPreTrainedModel"),mi=s(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),pi=c(),Qo=r("p"),hi=s("This model is also a "),Zo=r("a"),fi=s("tf.keras.Model"),ui=s(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),gi=c(),$(Yt.$$.fragment),_i=c(),it=r("div"),$(es.$$.fragment),bi=c(),xt=r("p"),vi=s("The "),xs=r("a"),Ti=s("TFMobileViTModel"),wi=s(" forward method, overrides the "),ma=r("code"),$i=s("__call__"),yi=s(" special method."),Mi=c(),$(Jt.$$.fragment),Vi=c(),$(Xt.$$.fragment),Ka=c(),Ft=r("h2"),Qt=r("a"),pa=r("span"),$(ts.$$.fragment),Ei=c(),ha=r("span"),xi=s("TFMobileViTForImageClassification"),Ga=c(),ue=r("div"),$(os.$$.fragment),Fi=c(),fa=r("p"),ki=s(`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Ii=c(),ss=r("p"),Ci=s("This model inherits from "),Fs=r("a"),Pi=s("TFPreTrainedModel"),ji=s(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Si=c(),as=r("p"),zi=s("This model is also a "),rs=r("a"),Oi=s("tf.keras.Model"),Ni=s(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Di=c(),$(Zt.$$.fragment),qi=c(),lt=r("div"),$(ns.$$.fragment),Ai=c(),kt=r("p"),Li=s("The "),ks=r("a"),Ri=s("TFMobileViTForImageClassification"),Wi=s(" forward method, overrides the "),ua=r("code"),Ui=s("__call__"),Bi=s(" special method."),Hi=c(),$(eo.$$.fragment),Ki=c(),$(to.$$.fragment),Ya=c(),It=r("h2"),oo=r("a"),ga=r("span"),$(is.$$.fragment),Gi=c(),_a=r("span"),Yi=s("TFMobileViTForSemanticSegmentation"),Ja=c(),ge=r("div"),$(ls.$$.fragment),Ji=c(),ba=r("p"),Xi=s("MobileViT model with a semantic segmentation head on top, e.g. for Pascal VOC."),Qi=c(),ds=r("p"),Zi=s("This model inherits from "),Is=r("a"),el=s("TFPreTrainedModel"),tl=s(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ol=c(),cs=r("p"),sl=s("This model is also a "),ms=r("a"),al=s("tf.keras.Model"),rl=s(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),nl=c(),$(so.$$.fragment),il=c(),dt=r("div"),$(ps.$$.fragment),ll=c(),Ct=r("p"),dl=s("The "),Cs=r("a"),cl=s("TFMobileViTForSemanticSegmentation"),ml=s(" forward method, overrides the "),va=r("code"),pl=s("__call__"),hl=s(" special method."),fl=c(),$(ao.$$.fragment),ul=c(),$(ro.$$.fragment),this.h()},l(o){const b=Ld('[data-svelte="svelte-1phssyn"]',document.head);d=n(b,"META",{name:!0,content:!0}),b.forEach(t),T=m(o),g=n(o,"H1",{class:!0});var hs=i(g);u=n(hs,"A",{id:!0,class:!0,href:!0});var Ta=i(u);v=n(Ta,"SPAN",{});var wa=i(v);y(l.$$.fragment,wa),wa.forEach(t),Ta.forEach(t),p=m(hs),I=n(hs,"SPAN",{});var $a=i(I);Fe=a($a,"MobileViT"),$a.forEach(t),hs.forEach(t),_e=m(o),N=n(o,"H2",{class:!0});var fs=i(N);ee=n(fs,"A",{id:!0,class:!0,href:!0});var ya=i(ee);te=n(ya,"SPAN",{});var Ma=i(te);y(w.$$.fragment,Ma),Ma.forEach(t),ya.forEach(t),ke=m(fs),H=n(fs,"SPAN",{});var Va=i(H);Ie=a(Va,"Overview"),Va.forEach(t),fs.forEach(t),be=m(o),q=n(o,"P",{});var us=i(q);Ce=a(us,"The MobileViT model was proposed in "),oe=n(us,"A",{href:!0,rel:!0});var Ea=i(oe);Y=a(Ea,"MobileViT: Light-weight, General-purpose, and Mobile-friendly Vision Transformer"),Ea.forEach(t),Pe=a(us," by Sachin Mehta and Mohammad Rastegari. MobileViT introduces a new layer that replaces local processing in convolutions with global processing using transformers."),us.forEach(t),ve=m(o),L=n(o,"P",{});var xa=i(L);je=a(xa,"The abstract from the paper is the following:"),xa.forEach(t),Te=m(o),R=n(o,"P",{});var Fa=i(R);ce=n(Fa,"EM",{});var ka=i(ce);Se=a(ka,"Light-weight convolutional neural networks (CNNs) are the de-facto for mobile vision tasks. Their spatial inductive biases allow them to learn representations with fewer parameters across different vision tasks. However, these networks are spatially local. To learn global representations, self-attention-based vision trans-formers (ViTs) have been adopted. Unlike CNNs, ViTs are heavy-weight. In this paper, we ask the following question: is it possible to combine the strengths of CNNs and ViTs to build a light-weight and low latency network for mobile vision tasks? Towards this end, we introduce MobileViT, a light-weight and general-purpose vision transformer for mobile devices. MobileViT presents a different perspective for the global processing of information with transformers, i.e., transformers as convolutions. Our results show that MobileViT significantly outperforms CNN- and ViT-based networks across different tasks and datasets. On the ImageNet-1k dataset, MobileViT achieves top-1 accuracy of 78.4% with about 6 million parameters, which is 3.2% and 6.2% more accurate than MobileNetv3 (CNN-based) and DeIT (ViT-based) for a similar number of parameters. On the MS-COCO object detection task, MobileViT is 5.7% more accurate than MobileNetv3 for a similar number of parameters."),ka.forEach(t),Fa.forEach(t),se=m(o),C=n(o,"P",{});var Ia=i(C);S=a(Ia,"Tips:"),Ia.forEach(t),we=m(o),j=n(o,"UL",{});var Xe=i(j);me=n(Xe,"LI",{});var Ca=i(me);ae=n(Ca,"P",{});var Qa=i(ae);J=a(Qa,"MobileViT is more like a CNN than a Transformer model. It does not work on sequence data but on batches of images. Unlike ViT, there are no embeddings. The backbone model outputs a feature map. You can follow "),re=n(Qa,"A",{href:!0,rel:!0});var gl=i(re);ze=a(gl,"this tutorial"),gl.forEach(t),z=a(Qa," for a lightweight introduction."),Qa.forEach(t),Ca.forEach(t),Oe=m(Xe),K=n(Xe,"LI",{});var _l=i(K);ne=n(_l,"P",{});var Za=i(ne);Ne=a(Za,"One can use "),W=n(Za,"A",{href:!0});var bl=i(W);De=a(bl,"MobileViTFeatureExtractor"),bl.forEach(t),qe=a(Za," to prepare images for the model. Note that if you do your own preprocessing, the pretrained checkpoints expect images to be in BGR pixel order (not RGB)."),Za.forEach(t),_l.forEach(t),U=m(Xe),pe=n(Xe,"LI",{});var vl=i(pe);A=n(vl,"P",{});var er=i(A);Ae=a(er,"The available image classification checkpoints are pre-trained on "),G=n(er,"A",{href:!0,rel:!0});var Tl=i(G);O=a(Tl,"ImageNet-1k"),Tl.forEach(t),Le=a(er," (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes)."),er.forEach(t),vl.forEach(t),D=m(Xe),he=n(Xe,"LI",{});var wl=i(he);X=n(wl,"P",{});var Ps=i(X);_=a(Ps,"The segmentation model uses a "),F=n(Ps,"A",{href:!0,rel:!0});var $l=i(F);Qe=a($l,"DeepLabV3"),$l.forEach(t),le=a(Ps," head. The available semantic segmentation checkpoints are pre-trained on "),$e=n(Ps,"A",{href:!0,rel:!0});var yl=i($e);Ze=a(yl,"PASCAL VOC"),yl.forEach(t),k=a(Ps,"."),Ps.forEach(t),wl.forEach(t),et=m(Xe),ye=n(Xe,"LI",{});var tr=i(ye);Me=n(tr,"P",{});var or=i(Me);tt=a(or,"As the name suggests MobileViT was designed to be performant and efficient on mobile phones. The TensorFlow versions of the MobileViT models are fully compatible with "),Ve=n(or,"A",{href:!0,rel:!0});var Ml=i(Ve);B=a(Ml,"TensorFlow Lite"),Ml.forEach(t),Q=a(or,"."),or.forEach(t),ot=m(tr),We=n(tr,"P",{});var Vl=i(We);Z=a(Vl,`You can use the following code to convert a MobileViT checkpoint (be it image classification or semantic segmentation) to generate a
TensorFlow Lite model:`),Vl.forEach(t),tr.forEach(t),Xe.forEach(t),Be=m(o),y(Ee.$$.fragment,o),xe=m(o),fe=n(o,"P",{});var sr=i(fe);de=a(sr,"The resulting model will be just "),Ue=n(sr,"STRONG",{});var El=i(Ue);Mr=a(El,"about an MB"),El.forEach(t),Vr=a(sr,` making it a good fit for mobile applications where resources and network
bandwidth can be constrained.`),sr.forEach(t),Pa=m(o),st=n(o,"P",{});var no=i(st);Er=a(no,"This model was contributed by "),To=n(no,"A",{href:!0,rel:!0});var xl=i(To);xr=a(xl,"matthijs"),xl.forEach(t),Fr=a(no,". The TensorFlow version of the model was contributed by "),wo=n(no,"A",{href:!0,rel:!0});var Fl=i(wo);kr=a(Fl,"sayakpaul"),Fl.forEach(t),Ir=a(no,". The original code and weights can be found "),$o=n(no,"A",{href:!0,rel:!0});var kl=i($o);Cr=a(kl,"here"),kl.forEach(t),Pr=a(no,"."),no.forEach(t),ja=m(o),ut=n(o,"H2",{class:!0});var ar=i(ut);jt=n(ar,"A",{id:!0,class:!0,href:!0});var Il=i(jt);Rs=n(Il,"SPAN",{});var Cl=i(Rs);y(yo.$$.fragment,Cl),Cl.forEach(t),Il.forEach(t),jr=m(ar),Ws=n(ar,"SPAN",{});var Pl=i(Ws);Sr=a(Pl,"MobileViTConfig"),Pl.forEach(t),ar.forEach(t),Sa=m(o),He=n(o,"DIV",{class:!0});var io=i(He);y(Mo.$$.fragment,io),zr=m(io),gt=n(io,"P",{});var js=i(gt);Or=a(js,"This is the configuration class to store the configuration of a "),bs=n(js,"A",{href:!0});var jl=i(bs);Nr=a(jl,"MobileViTModel"),jl.forEach(t),Dr=a(js,`. It is used to instantiate a
MobileViT model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MobileViT
`),Vo=n(js,"A",{href:!0,rel:!0});var Sl=i(Vo);qr=a(Sl,"apple/mobilevit-small"),Sl.forEach(t),Ar=a(js," architecture."),js.forEach(t),Lr=m(io),_t=n(io,"P",{});var Ss=i(_t);Rr=a(Ss,"Configuration objects inherit from "),vs=n(Ss,"A",{href:!0});var zl=i(vs);Wr=a(zl,"PretrainedConfig"),zl.forEach(t),Ur=a(Ss,` and can be used to control the model outputs. Read the
documentation from `),Ts=n(Ss,"A",{href:!0});var Ol=i(Ts);Br=a(Ol,"PretrainedConfig"),Ol.forEach(t),Hr=a(Ss," for more information."),Ss.forEach(t),Kr=m(io),y(St.$$.fragment,io),io.forEach(t),za=m(o),bt=n(o,"H2",{class:!0});var rr=i(bt);zt=n(rr,"A",{id:!0,class:!0,href:!0});var Nl=i(zt);Us=n(Nl,"SPAN",{});var Dl=i(Us);y(Eo.$$.fragment,Dl),Dl.forEach(t),Nl.forEach(t),Gr=m(rr),Bs=n(rr,"SPAN",{});var ql=i(Bs);Yr=a(ql,"MobileViTFeatureExtractor"),ql.forEach(t),rr.forEach(t),Oa=m(o),Ke=n(o,"DIV",{class:!0});var lo=i(Ke);y(xo.$$.fragment,lo),Jr=m(lo),Hs=n(lo,"P",{});var Al=i(Hs);Xr=a(Al,"Constructs a MobileViT image processor."),Al.forEach(t),Qr=m(lo),Ot=n(lo,"DIV",{class:!0});var nr=i(Ot);y(Fo.$$.fragment,nr),Zr=m(nr),Ks=n(nr,"P",{});var Ll=i(Ks);en=a(Ll,"Preprocess an image or a batch of images."),Ll.forEach(t),nr.forEach(t),tn=m(lo),ws=n(lo,"DIV",{class:!0});var Rl=i(ws);y(ko.$$.fragment,Rl),Rl.forEach(t),lo.forEach(t),Na=m(o),vt=n(o,"H2",{class:!0});var ir=i(vt);Nt=n(ir,"A",{id:!0,class:!0,href:!0});var Wl=i(Nt);Gs=n(Wl,"SPAN",{});var Ul=i(Gs);y(Io.$$.fragment,Ul),Ul.forEach(t),Wl.forEach(t),on=m(ir),Ys=n(ir,"SPAN",{});var Bl=i(Ys);sn=a(Bl,"MobileViTImageProcessor"),Bl.forEach(t),ir.forEach(t),Da=m(o),Ge=n(o,"DIV",{class:!0});var co=i(Ge);y(Co.$$.fragment,co),an=m(co),Js=n(co,"P",{});var Hl=i(Js);rn=a(Hl,"Constructs a MobileViT image processor."),Hl.forEach(t),nn=m(co),Dt=n(co,"DIV",{class:!0});var lr=i(Dt);y(Po.$$.fragment,lr),ln=m(lr),Xs=n(lr,"P",{});var Kl=i(Xs);dn=a(Kl,"Preprocess an image or batch of images."),Kl.forEach(t),lr.forEach(t),cn=m(co),$s=n(co,"DIV",{class:!0});var Gl=i($s);y(jo.$$.fragment,Gl),Gl.forEach(t),co.forEach(t),qa=m(o),Tt=n(o,"H2",{class:!0});var dr=i(Tt);qt=n(dr,"A",{id:!0,class:!0,href:!0});var Yl=i(qt);Qs=n(Yl,"SPAN",{});var Jl=i(Qs);y(So.$$.fragment,Jl),Jl.forEach(t),Yl.forEach(t),mn=m(dr),Zs=n(dr,"SPAN",{});var Xl=i(Zs);pn=a(Xl,"MobileViTModel"),Xl.forEach(t),dr.forEach(t),Aa=m(o),pt=n(o,"DIV",{class:!0});var zs=i(pt);y(zo.$$.fragment,zs),hn=m(zs),Oo=n(zs,"P",{});var cr=i(Oo);fn=a(cr,`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),No=n(cr,"A",{href:!0,rel:!0});var Ql=i(No);un=a(Ql,"torch.nn.Module"),Ql.forEach(t),gn=a(cr,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),cr.forEach(t),_n=m(zs),at=n(zs,"DIV",{class:!0});var mo=i(at);y(Do.$$.fragment,mo),bn=m(mo),wt=n(mo,"P",{});var Os=i(wt);vn=a(Os,"The "),ys=n(Os,"A",{href:!0});var Zl=i(ys);Tn=a(Zl,"MobileViTModel"),Zl.forEach(t),wn=a(Os," forward method, overrides the "),ea=n(Os,"CODE",{});var ed=i(ea);$n=a(ed,"__call__"),ed.forEach(t),yn=a(Os," special method."),Os.forEach(t),Mn=m(mo),y(At.$$.fragment,mo),Vn=m(mo),y(Lt.$$.fragment,mo),mo.forEach(t),zs.forEach(t),La=m(o),$t=n(o,"H2",{class:!0});var mr=i($t);Rt=n(mr,"A",{id:!0,class:!0,href:!0});var td=i(Rt);ta=n(td,"SPAN",{});var od=i(ta);y(qo.$$.fragment,od),od.forEach(t),td.forEach(t),En=m(mr),oa=n(mr,"SPAN",{});var sd=i(oa);xn=a(sd,"MobileViTForImageClassification"),sd.forEach(t),mr.forEach(t),Ra=m(o),Ye=n(o,"DIV",{class:!0});var po=i(Ye);y(Ao.$$.fragment,po),Fn=m(po),sa=n(po,"P",{});var ad=i(sa);kn=a(ad,`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),ad.forEach(t),In=m(po),Lo=n(po,"P",{});var pr=i(Lo);Cn=a(pr,"This model is a PyTorch "),Ro=n(pr,"A",{href:!0,rel:!0});var rd=i(Ro);Pn=a(rd,"torch.nn.Module"),rd.forEach(t),jn=a(pr,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),pr.forEach(t),Sn=m(po),rt=n(po,"DIV",{class:!0});var ho=i(rt);y(Wo.$$.fragment,ho),zn=m(ho),yt=n(ho,"P",{});var Ns=i(yt);On=a(Ns,"The "),Ms=n(Ns,"A",{href:!0});var nd=i(Ms);Nn=a(nd,"MobileViTForImageClassification"),nd.forEach(t),Dn=a(Ns," forward method, overrides the "),aa=n(Ns,"CODE",{});var id=i(aa);qn=a(id,"__call__"),id.forEach(t),An=a(Ns," special method."),Ns.forEach(t),Ln=m(ho),y(Wt.$$.fragment,ho),Rn=m(ho),y(Ut.$$.fragment,ho),ho.forEach(t),po.forEach(t),Wa=m(o),Mt=n(o,"H2",{class:!0});var hr=i(Mt);Bt=n(hr,"A",{id:!0,class:!0,href:!0});var ld=i(Bt);ra=n(ld,"SPAN",{});var dd=i(ra);y(Uo.$$.fragment,dd),dd.forEach(t),ld.forEach(t),Wn=m(hr),na=n(hr,"SPAN",{});var cd=i(na);Un=a(cd,"MobileViTForSemanticSegmentation"),cd.forEach(t),hr.forEach(t),Ua=m(o),Je=n(o,"DIV",{class:!0});var fo=i(Je);y(Bo.$$.fragment,fo),Bn=m(fo),ia=n(fo,"P",{});var md=i(ia);Hn=a(md,"MobileViT model with a semantic segmentation head on top, e.g. for Pascal VOC."),md.forEach(t),Kn=m(fo),Ho=n(fo,"P",{});var fr=i(Ho);Gn=a(fr,"This model is a PyTorch "),Ko=n(fr,"A",{href:!0,rel:!0});var pd=i(Ko);Yn=a(pd,"torch.nn.Module"),pd.forEach(t),Jn=a(fr,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),fr.forEach(t),Xn=m(fo),nt=n(fo,"DIV",{class:!0});var uo=i(nt);y(Go.$$.fragment,uo),Qn=m(uo),Vt=n(uo,"P",{});var Ds=i(Vt);Zn=a(Ds,"The "),Vs=n(Ds,"A",{href:!0});var hd=i(Vs);ei=a(hd,"MobileViTForSemanticSegmentation"),hd.forEach(t),ti=a(Ds," forward method, overrides the "),la=n(Ds,"CODE",{});var fd=i(la);oi=a(fd,"__call__"),fd.forEach(t),si=a(Ds," special method."),Ds.forEach(t),ai=m(uo),y(Ht.$$.fragment,uo),ri=m(uo),y(Kt.$$.fragment,uo),uo.forEach(t),fo.forEach(t),Ba=m(o),Et=n(o,"H2",{class:!0});var ur=i(Et);Gt=n(ur,"A",{id:!0,class:!0,href:!0});var ud=i(Gt);da=n(ud,"SPAN",{});var gd=i(da);y(Yo.$$.fragment,gd),gd.forEach(t),ud.forEach(t),ni=m(ur),ca=n(ur,"SPAN",{});var _d=i(ca);ii=a(_d,"TFMobileViTModel"),_d.forEach(t),ur.forEach(t),Ha=m(o),Re=n(o,"DIV",{class:!0});var ft=i(Re);y(Jo.$$.fragment,ft),li=m(ft),Xo=n(ft,"P",{});var gr=i(Xo);di=a(gr,`The bare MobileViT model outputting raw hidden-states without any specific head on top.
This model inherits from `),Es=n(gr,"A",{href:!0});var bd=i(Es);ci=a(bd,"TFPreTrainedModel"),bd.forEach(t),mi=a(gr,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),gr.forEach(t),pi=m(ft),Qo=n(ft,"P",{});var _r=i(Qo);hi=a(_r,"This model is also a "),Zo=n(_r,"A",{href:!0,rel:!0});var vd=i(Zo);fi=a(vd,"tf.keras.Model"),vd.forEach(t),ui=a(_r,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),_r.forEach(t),gi=m(ft),y(Yt.$$.fragment,ft),_i=m(ft),it=n(ft,"DIV",{class:!0});var go=i(it);y(es.$$.fragment,go),bi=m(go),xt=n(go,"P",{});var qs=i(xt);vi=a(qs,"The "),xs=n(qs,"A",{href:!0});var Td=i(xs);Ti=a(Td,"TFMobileViTModel"),Td.forEach(t),wi=a(qs," forward method, overrides the "),ma=n(qs,"CODE",{});var wd=i(ma);$i=a(wd,"__call__"),wd.forEach(t),yi=a(qs," special method."),qs.forEach(t),Mi=m(go),y(Jt.$$.fragment,go),Vi=m(go),y(Xt.$$.fragment,go),go.forEach(t),ft.forEach(t),Ka=m(o),Ft=n(o,"H2",{class:!0});var br=i(Ft);Qt=n(br,"A",{id:!0,class:!0,href:!0});var $d=i(Qt);pa=n($d,"SPAN",{});var yd=i(pa);y(ts.$$.fragment,yd),yd.forEach(t),$d.forEach(t),Ei=m(br),ha=n(br,"SPAN",{});var Md=i(ha);xi=a(Md,"TFMobileViTForImageClassification"),Md.forEach(t),br.forEach(t),Ga=m(o),ue=n(o,"DIV",{class:!0});var ct=i(ue);y(os.$$.fragment,ct),Fi=m(ct),fa=n(ct,"P",{});var Vd=i(fa);ki=a(Vd,`MobileViT model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Vd.forEach(t),Ii=m(ct),ss=n(ct,"P",{});var vr=i(ss);Ci=a(vr,"This model inherits from "),Fs=n(vr,"A",{href:!0});var Ed=i(Fs);Pi=a(Ed,"TFPreTrainedModel"),Ed.forEach(t),ji=a(vr,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),vr.forEach(t),Si=m(ct),as=n(ct,"P",{});var Tr=i(as);zi=a(Tr,"This model is also a "),rs=n(Tr,"A",{href:!0,rel:!0});var xd=i(rs);Oi=a(xd,"tf.keras.Model"),xd.forEach(t),Ni=a(Tr,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Tr.forEach(t),Di=m(ct),y(Zt.$$.fragment,ct),qi=m(ct),lt=n(ct,"DIV",{class:!0});var _o=i(lt);y(ns.$$.fragment,_o),Ai=m(_o),kt=n(_o,"P",{});var As=i(kt);Li=a(As,"The "),ks=n(As,"A",{href:!0});var Fd=i(ks);Ri=a(Fd,"TFMobileViTForImageClassification"),Fd.forEach(t),Wi=a(As," forward method, overrides the "),ua=n(As,"CODE",{});var kd=i(ua);Ui=a(kd,"__call__"),kd.forEach(t),Bi=a(As," special method."),As.forEach(t),Hi=m(_o),y(eo.$$.fragment,_o),Ki=m(_o),y(to.$$.fragment,_o),_o.forEach(t),ct.forEach(t),Ya=m(o),It=n(o,"H2",{class:!0});var wr=i(It);oo=n(wr,"A",{id:!0,class:!0,href:!0});var Id=i(oo);ga=n(Id,"SPAN",{});var Cd=i(ga);y(is.$$.fragment,Cd),Cd.forEach(t),Id.forEach(t),Gi=m(wr),_a=n(wr,"SPAN",{});var Pd=i(_a);Yi=a(Pd,"TFMobileViTForSemanticSegmentation"),Pd.forEach(t),wr.forEach(t),Ja=m(o),ge=n(o,"DIV",{class:!0});var mt=i(ge);y(ls.$$.fragment,mt),Ji=m(mt),ba=n(mt,"P",{});var jd=i(ba);Xi=a(jd,"MobileViT model with a semantic segmentation head on top, e.g. for Pascal VOC."),jd.forEach(t),Qi=m(mt),ds=n(mt,"P",{});var $r=i(ds);Zi=a($r,"This model inherits from "),Is=n($r,"A",{href:!0});var Sd=i(Is);el=a(Sd,"TFPreTrainedModel"),Sd.forEach(t),tl=a($r,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),$r.forEach(t),ol=m(mt),cs=n(mt,"P",{});var yr=i(cs);sl=a(yr,"This model is also a "),ms=n(yr,"A",{href:!0,rel:!0});var zd=i(ms);al=a(zd,"tf.keras.Model"),zd.forEach(t),rl=a(yr,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),yr.forEach(t),nl=m(mt),y(so.$$.fragment,mt),il=m(mt),dt=n(mt,"DIV",{class:!0});var bo=i(dt);y(ps.$$.fragment,bo),ll=m(bo),Ct=n(bo,"P",{});var Ls=i(Ct);dl=a(Ls,"The "),Cs=n(Ls,"A",{href:!0});var Od=i(Cs);cl=a(Od,"TFMobileViTForSemanticSegmentation"),Od.forEach(t),ml=a(Ls," forward method, overrides the "),va=n(Ls,"CODE",{});var Nd=i(va);pl=a(Nd,"__call__"),Nd.forEach(t),hl=a(Ls," special method."),Ls.forEach(t),fl=m(bo),y(ao.$$.fragment,bo),ul=m(bo),y(ro.$$.fragment,bo),bo.forEach(t),mt.forEach(t),this.h()},h(){h(d,"name","hf:doc:metadata"),h(d,"content",JSON.stringify(nc)),h(u,"id","mobilevit"),h(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(u,"href","#mobilevit"),h(g,"class","relative group"),h(ee,"id","overview"),h(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ee,"href","#overview"),h(N,"class","relative group"),h(oe,"href","https://arxiv.org/abs/2110.02178"),h(oe,"rel","nofollow"),h(re,"href","https://keras.io/examples/vision/mobilevit"),h(re,"rel","nofollow"),h(W,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTImageProcessor"),h(G,"href","https://huggingface.co/datasets/imagenet-1k"),h(G,"rel","nofollow"),h(F,"href","https://arxiv.org/abs/1706.05587"),h(F,"rel","nofollow"),h($e,"href","http://host.robots.ox.ac.uk/pascal/VOC/"),h($e,"rel","nofollow"),h(Ve,"href","https://www.tensorflow.org/lite"),h(Ve,"rel","nofollow"),h(To,"href","https://huggingface.co/Matthijs"),h(To,"rel","nofollow"),h(wo,"href","https://huggingface.co/sayakpaul"),h(wo,"rel","nofollow"),h($o,"href","https://github.com/apple/ml-cvnets"),h($o,"rel","nofollow"),h(jt,"id","transformers.MobileViTConfig"),h(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(jt,"href","#transformers.MobileViTConfig"),h(ut,"class","relative group"),h(bs,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),h(Vo,"href","https://huggingface.co/apple/mobilevit-small"),h(Vo,"rel","nofollow"),h(vs,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),h(Ts,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),h(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(zt,"id","transformers.MobileViTImageProcessor"),h(zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(zt,"href","#transformers.MobileViTImageProcessor"),h(bt,"class","relative group"),h(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Nt,"id","transformers.MobileViTImageProcessor"),h(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Nt,"href","#transformers.MobileViTImageProcessor"),h(vt,"class","relative group"),h(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h($s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(qt,"id","transformers.MobileViTModel"),h(qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(qt,"href","#transformers.MobileViTModel"),h(Tt,"class","relative group"),h(No,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),h(No,"rel","nofollow"),h(ys,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),h(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Rt,"id","transformers.MobileViTForImageClassification"),h(Rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Rt,"href","#transformers.MobileViTForImageClassification"),h($t,"class","relative group"),h(Ro,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),h(Ro,"rel","nofollow"),h(Ms,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),h(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Bt,"id","transformers.MobileViTForSemanticSegmentation"),h(Bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Bt,"href","#transformers.MobileViTForSemanticSegmentation"),h(Mt,"class","relative group"),h(Ko,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),h(Ko,"rel","nofollow"),h(Vs,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),h(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Gt,"id","transformers.TFMobileViTModel"),h(Gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Gt,"href","#transformers.TFMobileViTModel"),h(Et,"class","relative group"),h(Es,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),h(Zo,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),h(Zo,"rel","nofollow"),h(xs,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),h(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Qt,"id","transformers.TFMobileViTForImageClassification"),h(Qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Qt,"href","#transformers.TFMobileViTForImageClassification"),h(Ft,"class","relative group"),h(Fs,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),h(rs,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),h(rs,"rel","nofollow"),h(ks,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),h(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(oo,"id","transformers.TFMobileViTForSemanticSegmentation"),h(oo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(oo,"href","#transformers.TFMobileViTForSemanticSegmentation"),h(It,"class","relative group"),h(Is,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),h(ms,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),h(ms,"rel","nofollow"),h(Cs,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),h(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,b){e(document.head,d),f(o,T,b),f(o,g,b),e(g,u),e(u,v),M(l,v,null),e(g,p),e(g,I),e(I,Fe),f(o,_e,b),f(o,N,b),e(N,ee),e(ee,te),M(w,te,null),e(N,ke),e(N,H),e(H,Ie),f(o,be,b),f(o,q,b),e(q,Ce),e(q,oe),e(oe,Y),e(q,Pe),f(o,ve,b),f(o,L,b),e(L,je),f(o,Te,b),f(o,R,b),e(R,ce),e(ce,Se),f(o,se,b),f(o,C,b),e(C,S),f(o,we,b),f(o,j,b),e(j,me),e(me,ae),e(ae,J),e(ae,re),e(re,ze),e(ae,z),e(j,Oe),e(j,K),e(K,ne),e(ne,Ne),e(ne,W),e(W,De),e(ne,qe),e(j,U),e(j,pe),e(pe,A),e(A,Ae),e(A,G),e(G,O),e(A,Le),e(j,D),e(j,he),e(he,X),e(X,_),e(X,F),e(F,Qe),e(X,le),e(X,$e),e($e,Ze),e(X,k),e(j,et),e(j,ye),e(ye,Me),e(Me,tt),e(Me,Ve),e(Ve,B),e(Me,Q),e(ye,ot),e(ye,We),e(We,Z),f(o,Be,b),M(Ee,o,b),f(o,xe,b),f(o,fe,b),e(fe,de),e(fe,Ue),e(Ue,Mr),e(fe,Vr),f(o,Pa,b),f(o,st,b),e(st,Er),e(st,To),e(To,xr),e(st,Fr),e(st,wo),e(wo,kr),e(st,Ir),e(st,$o),e($o,Cr),e(st,Pr),f(o,ja,b),f(o,ut,b),e(ut,jt),e(jt,Rs),M(yo,Rs,null),e(ut,jr),e(ut,Ws),e(Ws,Sr),f(o,Sa,b),f(o,He,b),M(Mo,He,null),e(He,zr),e(He,gt),e(gt,Or),e(gt,bs),e(bs,Nr),e(gt,Dr),e(gt,Vo),e(Vo,qr),e(gt,Ar),e(He,Lr),e(He,_t),e(_t,Rr),e(_t,vs),e(vs,Wr),e(_t,Ur),e(_t,Ts),e(Ts,Br),e(_t,Hr),e(He,Kr),M(St,He,null),f(o,za,b),f(o,bt,b),e(bt,zt),e(zt,Us),M(Eo,Us,null),e(bt,Gr),e(bt,Bs),e(Bs,Yr),f(o,Oa,b),f(o,Ke,b),M(xo,Ke,null),e(Ke,Jr),e(Ke,Hs),e(Hs,Xr),e(Ke,Qr),e(Ke,Ot),M(Fo,Ot,null),e(Ot,Zr),e(Ot,Ks),e(Ks,en),e(Ke,tn),e(Ke,ws),M(ko,ws,null),f(o,Na,b),f(o,vt,b),e(vt,Nt),e(Nt,Gs),M(Io,Gs,null),e(vt,on),e(vt,Ys),e(Ys,sn),f(o,Da,b),f(o,Ge,b),M(Co,Ge,null),e(Ge,an),e(Ge,Js),e(Js,rn),e(Ge,nn),e(Ge,Dt),M(Po,Dt,null),e(Dt,ln),e(Dt,Xs),e(Xs,dn),e(Ge,cn),e(Ge,$s),M(jo,$s,null),f(o,qa,b),f(o,Tt,b),e(Tt,qt),e(qt,Qs),M(So,Qs,null),e(Tt,mn),e(Tt,Zs),e(Zs,pn),f(o,Aa,b),f(o,pt,b),M(zo,pt,null),e(pt,hn),e(pt,Oo),e(Oo,fn),e(Oo,No),e(No,un),e(Oo,gn),e(pt,_n),e(pt,at),M(Do,at,null),e(at,bn),e(at,wt),e(wt,vn),e(wt,ys),e(ys,Tn),e(wt,wn),e(wt,ea),e(ea,$n),e(wt,yn),e(at,Mn),M(At,at,null),e(at,Vn),M(Lt,at,null),f(o,La,b),f(o,$t,b),e($t,Rt),e(Rt,ta),M(qo,ta,null),e($t,En),e($t,oa),e(oa,xn),f(o,Ra,b),f(o,Ye,b),M(Ao,Ye,null),e(Ye,Fn),e(Ye,sa),e(sa,kn),e(Ye,In),e(Ye,Lo),e(Lo,Cn),e(Lo,Ro),e(Ro,Pn),e(Lo,jn),e(Ye,Sn),e(Ye,rt),M(Wo,rt,null),e(rt,zn),e(rt,yt),e(yt,On),e(yt,Ms),e(Ms,Nn),e(yt,Dn),e(yt,aa),e(aa,qn),e(yt,An),e(rt,Ln),M(Wt,rt,null),e(rt,Rn),M(Ut,rt,null),f(o,Wa,b),f(o,Mt,b),e(Mt,Bt),e(Bt,ra),M(Uo,ra,null),e(Mt,Wn),e(Mt,na),e(na,Un),f(o,Ua,b),f(o,Je,b),M(Bo,Je,null),e(Je,Bn),e(Je,ia),e(ia,Hn),e(Je,Kn),e(Je,Ho),e(Ho,Gn),e(Ho,Ko),e(Ko,Yn),e(Ho,Jn),e(Je,Xn),e(Je,nt),M(Go,nt,null),e(nt,Qn),e(nt,Vt),e(Vt,Zn),e(Vt,Vs),e(Vs,ei),e(Vt,ti),e(Vt,la),e(la,oi),e(Vt,si),e(nt,ai),M(Ht,nt,null),e(nt,ri),M(Kt,nt,null),f(o,Ba,b),f(o,Et,b),e(Et,Gt),e(Gt,da),M(Yo,da,null),e(Et,ni),e(Et,ca),e(ca,ii),f(o,Ha,b),f(o,Re,b),M(Jo,Re,null),e(Re,li),e(Re,Xo),e(Xo,di),e(Xo,Es),e(Es,ci),e(Xo,mi),e(Re,pi),e(Re,Qo),e(Qo,hi),e(Qo,Zo),e(Zo,fi),e(Qo,ui),e(Re,gi),M(Yt,Re,null),e(Re,_i),e(Re,it),M(es,it,null),e(it,bi),e(it,xt),e(xt,vi),e(xt,xs),e(xs,Ti),e(xt,wi),e(xt,ma),e(ma,$i),e(xt,yi),e(it,Mi),M(Jt,it,null),e(it,Vi),M(Xt,it,null),f(o,Ka,b),f(o,Ft,b),e(Ft,Qt),e(Qt,pa),M(ts,pa,null),e(Ft,Ei),e(Ft,ha),e(ha,xi),f(o,Ga,b),f(o,ue,b),M(os,ue,null),e(ue,Fi),e(ue,fa),e(fa,ki),e(ue,Ii),e(ue,ss),e(ss,Ci),e(ss,Fs),e(Fs,Pi),e(ss,ji),e(ue,Si),e(ue,as),e(as,zi),e(as,rs),e(rs,Oi),e(as,Ni),e(ue,Di),M(Zt,ue,null),e(ue,qi),e(ue,lt),M(ns,lt,null),e(lt,Ai),e(lt,kt),e(kt,Li),e(kt,ks),e(ks,Ri),e(kt,Wi),e(kt,ua),e(ua,Ui),e(kt,Bi),e(lt,Hi),M(eo,lt,null),e(lt,Ki),M(to,lt,null),f(o,Ya,b),f(o,It,b),e(It,oo),e(oo,ga),M(is,ga,null),e(It,Gi),e(It,_a),e(_a,Yi),f(o,Ja,b),f(o,ge,b),M(ls,ge,null),e(ge,Ji),e(ge,ba),e(ba,Xi),e(ge,Qi),e(ge,ds),e(ds,Zi),e(ds,Is),e(Is,el),e(ds,tl),e(ge,ol),e(ge,cs),e(cs,sl),e(cs,ms),e(ms,al),e(cs,rl),e(ge,nl),M(so,ge,null),e(ge,il),e(ge,dt),M(ps,dt,null),e(dt,ll),e(dt,Ct),e(Ct,dl),e(Ct,Cs),e(Cs,cl),e(Ct,ml),e(Ct,va),e(va,pl),e(Ct,hl),e(dt,fl),M(ao,dt,null),e(dt,ul),M(ro,dt,null),Xa=!0},p(o,[b]){const hs={};b&2&&(hs.$$scope={dirty:b,ctx:o}),St.$set(hs);const Ta={};b&2&&(Ta.$$scope={dirty:b,ctx:o}),At.$set(Ta);const wa={};b&2&&(wa.$$scope={dirty:b,ctx:o}),Lt.$set(wa);const $a={};b&2&&($a.$$scope={dirty:b,ctx:o}),Wt.$set($a);const fs={};b&2&&(fs.$$scope={dirty:b,ctx:o}),Ut.$set(fs);const ya={};b&2&&(ya.$$scope={dirty:b,ctx:o}),Ht.$set(ya);const Ma={};b&2&&(Ma.$$scope={dirty:b,ctx:o}),Kt.$set(Ma);const Va={};b&2&&(Va.$$scope={dirty:b,ctx:o}),Yt.$set(Va);const us={};b&2&&(us.$$scope={dirty:b,ctx:o}),Jt.$set(us);const Ea={};b&2&&(Ea.$$scope={dirty:b,ctx:o}),Xt.$set(Ea);const xa={};b&2&&(xa.$$scope={dirty:b,ctx:o}),Zt.$set(xa);const Fa={};b&2&&(Fa.$$scope={dirty:b,ctx:o}),eo.$set(Fa);const ka={};b&2&&(ka.$$scope={dirty:b,ctx:o}),to.$set(ka);const Ia={};b&2&&(Ia.$$scope={dirty:b,ctx:o}),so.$set(Ia);const Xe={};b&2&&(Xe.$$scope={dirty:b,ctx:o}),ao.$set(Xe);const Ca={};b&2&&(Ca.$$scope={dirty:b,ctx:o}),ro.$set(Ca)},i(o){Xa||(V(l.$$.fragment,o),V(w.$$.fragment,o),V(Ee.$$.fragment,o),V(yo.$$.fragment,o),V(Mo.$$.fragment,o),V(St.$$.fragment,o),V(Eo.$$.fragment,o),V(xo.$$.fragment,o),V(Fo.$$.fragment,o),V(ko.$$.fragment,o),V(Io.$$.fragment,o),V(Co.$$.fragment,o),V(Po.$$.fragment,o),V(jo.$$.fragment,o),V(So.$$.fragment,o),V(zo.$$.fragment,o),V(Do.$$.fragment,o),V(At.$$.fragment,o),V(Lt.$$.fragment,o),V(qo.$$.fragment,o),V(Ao.$$.fragment,o),V(Wo.$$.fragment,o),V(Wt.$$.fragment,o),V(Ut.$$.fragment,o),V(Uo.$$.fragment,o),V(Bo.$$.fragment,o),V(Go.$$.fragment,o),V(Ht.$$.fragment,o),V(Kt.$$.fragment,o),V(Yo.$$.fragment,o),V(Jo.$$.fragment,o),V(Yt.$$.fragment,o),V(es.$$.fragment,o),V(Jt.$$.fragment,o),V(Xt.$$.fragment,o),V(ts.$$.fragment,o),V(os.$$.fragment,o),V(Zt.$$.fragment,o),V(ns.$$.fragment,o),V(eo.$$.fragment,o),V(to.$$.fragment,o),V(is.$$.fragment,o),V(ls.$$.fragment,o),V(so.$$.fragment,o),V(ps.$$.fragment,o),V(ao.$$.fragment,o),V(ro.$$.fragment,o),Xa=!0)},o(o){E(l.$$.fragment,o),E(w.$$.fragment,o),E(Ee.$$.fragment,o),E(yo.$$.fragment,o),E(Mo.$$.fragment,o),E(St.$$.fragment,o),E(Eo.$$.fragment,o),E(xo.$$.fragment,o),E(Fo.$$.fragment,o),E(ko.$$.fragment,o),E(Io.$$.fragment,o),E(Co.$$.fragment,o),E(Po.$$.fragment,o),E(jo.$$.fragment,o),E(So.$$.fragment,o),E(zo.$$.fragment,o),E(Do.$$.fragment,o),E(At.$$.fragment,o),E(Lt.$$.fragment,o),E(qo.$$.fragment,o),E(Ao.$$.fragment,o),E(Wo.$$.fragment,o),E(Wt.$$.fragment,o),E(Ut.$$.fragment,o),E(Uo.$$.fragment,o),E(Bo.$$.fragment,o),E(Go.$$.fragment,o),E(Ht.$$.fragment,o),E(Kt.$$.fragment,o),E(Yo.$$.fragment,o),E(Jo.$$.fragment,o),E(Yt.$$.fragment,o),E(es.$$.fragment,o),E(Jt.$$.fragment,o),E(Xt.$$.fragment,o),E(ts.$$.fragment,o),E(os.$$.fragment,o),E(Zt.$$.fragment,o),E(ns.$$.fragment,o),E(eo.$$.fragment,o),E(to.$$.fragment,o),E(is.$$.fragment,o),E(ls.$$.fragment,o),E(so.$$.fragment,o),E(ps.$$.fragment,o),E(ao.$$.fragment,o),E(ro.$$.fragment,o),Xa=!1},d(o){t(d),o&&t(T),o&&t(g),x(l),o&&t(_e),o&&t(N),x(w),o&&t(be),o&&t(q),o&&t(ve),o&&t(L),o&&t(Te),o&&t(R),o&&t(se),o&&t(C),o&&t(we),o&&t(j),o&&t(Be),x(Ee,o),o&&t(xe),o&&t(fe),o&&t(Pa),o&&t(st),o&&t(ja),o&&t(ut),x(yo),o&&t(Sa),o&&t(He),x(Mo),x(St),o&&t(za),o&&t(bt),x(Eo),o&&t(Oa),o&&t(Ke),x(xo),x(Fo),x(ko),o&&t(Na),o&&t(vt),x(Io),o&&t(Da),o&&t(Ge),x(Co),x(Po),x(jo),o&&t(qa),o&&t(Tt),x(So),o&&t(Aa),o&&t(pt),x(zo),x(Do),x(At),x(Lt),o&&t(La),o&&t($t),x(qo),o&&t(Ra),o&&t(Ye),x(Ao),x(Wo),x(Wt),x(Ut),o&&t(Wa),o&&t(Mt),x(Uo),o&&t(Ua),o&&t(Je),x(Bo),x(Go),x(Ht),x(Kt),o&&t(Ba),o&&t(Et),x(Yo),o&&t(Ha),o&&t(Re),x(Jo),x(Yt),x(es),x(Jt),x(Xt),o&&t(Ka),o&&t(Ft),x(ts),o&&t(Ga),o&&t(ue),x(os),x(Zt),x(ns),x(eo),x(to),o&&t(Ya),o&&t(It),x(is),o&&t(Ja),o&&t(ge),x(ls),x(so),x(ps),x(ao),x(ro)}}}const nc={local:"mobilevit",sections:[{local:"overview",title:"Overview"},{local:"transformers.MobileViTConfig",title:"MobileViTConfig"},{local:"transformers.MobileViTImageProcessor",title:"MobileViTFeatureExtractor"},{local:"transformers.MobileViTImageProcessor",title:"MobileViTImageProcessor"},{local:"transformers.MobileViTModel",title:"MobileViTModel"},{local:"transformers.MobileViTForImageClassification",title:"MobileViTForImageClassification"},{local:"transformers.MobileViTForSemanticSegmentation",title:"MobileViTForSemanticSegmentation"},{local:"transformers.TFMobileViTModel",title:"TFMobileViTModel"},{local:"transformers.TFMobileViTForImageClassification",title:"TFMobileViTForImageClassification"},{local:"transformers.TFMobileViTForSemanticSegmentation",title:"TFMobileViTForSemanticSegmentation"}],title:"MobileViT"};function ic(P){return Rd(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class fc extends Dd{constructor(d){super();qd(this,d,ic,rc,Ad,{})}}export{fc as default,nc as metadata};
