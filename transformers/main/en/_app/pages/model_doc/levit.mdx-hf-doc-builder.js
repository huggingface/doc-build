import{S as Pn,i as zn,s as An,e as s,k as h,w,t as a,M as Mn,c as n,d as o,m,a as i,x as $,h as r,b as c,N as Nn,G as e,g as u,y as L,q as y,o as T,B as E,v as Vn,L as Ho}from"../../chunks/vendor-hf-doc-builder.js";import{T as Ls}from"../../chunks/Tip-hf-doc-builder.js";import{D as oe}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Bo}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as tt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Uo}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function qn(k){let d,b,v,p,_;return p=new Bo({props:{code:`from transformers import LevitConfig, LevitModel

# Initializing a LeViT levit-128S style configuration
configuration = LevitConfig()

# Initializing a model (with random weights) from the levit-128S style configuration
model = LevitModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LevitConfig, LevitModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a LeViT levit-128S style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = LevitConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model (with random weights) from the levit-128S style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = LevitModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){d=s("p"),b=a("Example:"),v=h(),w(p.$$.fragment)},l(l){d=n(l,"P",{});var g=i(d);b=r(g,"Example:"),g.forEach(o),v=m(l),$(p.$$.fragment,l)},m(l,g){u(l,d,g),e(d,b),u(l,v,g),L(p,l,g),_=!0},p:Ho,i(l){_||(y(p.$$.fragment,l),_=!0)},o(l){T(p.$$.fragment,l),_=!1},d(l){l&&o(d),l&&o(v),E(p,l)}}}function Sn(k){let d,b,v,p,_;return{c(){d=s("p"),b=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),v=s("code"),p=a("Module"),_=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var g=i(d);b=r(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),v=n(g,"CODE",{});var j=i(v);p=r(j,"Module"),j.forEach(o),_=r(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(l,g){u(l,d,g),e(d,b),e(d,v),e(v,p),e(d,_)},d(l){l&&o(d)}}}function Wn(k){let d,b,v,p,_;return p=new Bo({props:{code:`from transformers import LevitFeatureExtractor, LevitModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = LevitFeatureExtractor.from_pretrained("facebook/levit-128S")
model = LevitModel.from_pretrained("facebook/levit-128S")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LevitFeatureExtractor, LevitModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = LevitFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/levit-128S&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = LevitModel.from_pretrained(<span class="hljs-string">&quot;facebook/levit-128S&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">16</span>, <span class="hljs-number">384</span>]`}}),{c(){d=s("p"),b=a("Example:"),v=h(),w(p.$$.fragment)},l(l){d=n(l,"P",{});var g=i(d);b=r(g,"Example:"),g.forEach(o),v=m(l),$(p.$$.fragment,l)},m(l,g){u(l,d,g),e(d,b),u(l,v,g),L(p,l,g),_=!0},p:Ho,i(l){_||(y(p.$$.fragment,l),_=!0)},o(l){T(p.$$.fragment,l),_=!1},d(l){l&&o(d),l&&o(v),E(p,l)}}}function Dn(k){let d,b,v,p,_;return{c(){d=s("p"),b=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),v=s("code"),p=a("Module"),_=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var g=i(d);b=r(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),v=n(g,"CODE",{});var j=i(v);p=r(j,"Module"),j.forEach(o),_=r(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(l,g){u(l,d,g),e(d,b),e(d,v),e(v,p),e(d,_)},d(l){l&&o(d)}}}function On(k){let d,b,v,p,_;return p=new Bo({props:{code:`from transformers import LevitFeatureExtractor, LevitForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = LevitFeatureExtractor.from_pretrained("facebook/levit-128S")
model = LevitForImageClassification.from_pretrained("facebook/levit-128S")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LevitFeatureExtractor, LevitForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = LevitFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/levit-128S&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = LevitForImageClassification.from_pretrained(<span class="hljs-string">&quot;facebook/levit-128S&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){d=s("p"),b=a("Example:"),v=h(),w(p.$$.fragment)},l(l){d=n(l,"P",{});var g=i(d);b=r(g,"Example:"),g.forEach(o),v=m(l),$(p.$$.fragment,l)},m(l,g){u(l,d,g),e(d,b),u(l,v,g),L(p,l,g),_=!0},p:Ho,i(l){_||(y(p.$$.fragment,l),_=!0)},o(l){T(p.$$.fragment,l),_=!1},d(l){l&&o(d),l&&o(v),E(p,l)}}}function Rn(k){let d,b,v,p,_;return{c(){d=s("p"),b=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),v=s("code"),p=a("Module"),_=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=n(l,"P",{});var g=i(d);b=r(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),v=n(g,"CODE",{});var j=i(v);p=r(j,"Module"),j.forEach(o),_=r(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(l,g){u(l,d,g),e(d,b),e(d,v),e(v,p),e(d,_)},d(l){l&&o(d)}}}function Un(k){let d,b,v,p,_;return p=new Bo({props:{code:`from transformers import LevitFeatureExtractor, LevitForImageClassificationWithTeacher
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = LevitFeatureExtractor.from_pretrained("facebook/levit-128S")
model = LevitForImageClassificationWithTeacher.from_pretrained("facebook/levit-128S")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LevitFeatureExtractor, LevitForImageClassificationWithTeacher
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = LevitFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/levit-128S&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = LevitForImageClassificationWithTeacher.from_pretrained(<span class="hljs-string">&quot;facebook/levit-128S&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){d=s("p"),b=a("Example:"),v=h(),w(p.$$.fragment)},l(l){d=n(l,"P",{});var g=i(d);b=r(g,"Example:"),g.forEach(o),v=m(l),$(p.$$.fragment,l)},m(l,g){u(l,d,g),e(d,b),u(l,v,g),L(p,l,g),_=!0},p:Ho,i(l){_||(y(p.$$.fragment,l),_=!0)},o(l){T(p.$$.fragment,l),_=!1},d(l){l&&o(d),l&&o(v),E(p,l)}}}function Hn(k){let d,b,v,p,_,l,g,j,Jo,fo,U,ae,Mt,Ee,Go,Nt,Yo,po,O,Ko,xe,Qo,Xo,ot,Zo,ea,go,at,ta,uo,rt,Vt,oa,vo,re,ys,_o,se,aa,st,ra,sa,bo,nt,na,wo,F,qt,ia,la,H,ca,it,da,ha,lt,ma,fa,pa,Ce,ga,Ie,ua,va,_a,x,ba,ct,wa,$a,dt,La,ya,St,Ta,Ea,Wt,xa,Ca,Dt,Ia,ka,Ot,Fa,ja,Rt,Pa,za,ht,Aa,Ma,Na,mt,ft,Va,qa,Sa,I,Wa,ke,Da,Oa,pt,Ra,Ua,gt,Ha,Ba,ut,Ja,Ga,vt,Ya,Ka,_t,Qa,Xa,$o,R,Za,Fe,er,tr,je,or,ar,Lo,B,ne,Ut,Pe,rr,Ht,sr,yo,z,ze,nr,J,ir,bt,lr,cr,Ae,dr,hr,mr,G,fr,wt,pr,gr,$t,ur,vr,_r,ie,To,Y,le,Bt,Me,br,Jt,wr,Eo,W,Ne,$r,Gt,Lr,yr,ce,Ve,Tr,Yt,Er,xo,K,de,Kt,qe,xr,Qt,Cr,Co,D,Se,Ir,We,kr,De,Fr,jr,Pr,N,Oe,zr,Q,Ar,Lt,Mr,Nr,Xt,Vr,qr,Sr,he,Wr,me,Io,X,fe,Zt,Re,Dr,eo,Or,ko,A,Ue,Rr,to,Ur,Hr,He,Br,Be,Jr,Gr,Yr,V,Je,Kr,Z,Qr,yt,Xr,Zr,oo,es,ts,os,pe,as,ge,Fo,ee,ue,ao,Ge,rs,ro,ss,jo,M,Ye,ns,so,is,ls,Ke,cs,Qe,ds,hs,ms,q,Xe,fs,te,ps,Tt,gs,us,no,vs,_s,bs,ve,ws,_e,Po;return l=new tt({}),Ee=new tt({}),Pe=new tt({}),ze=new oe({props:{name:"class transformers.LevitConfig",anchor:"transformers.LevitConfig",parameters:[{name:"image_size",val:" = 224"},{name:"num_channels",val:" = 3"},{name:"kernel_size",val:" = 3"},{name:"stride",val:" = 2"},{name:"padding",val:" = 1"},{name:"patch_size",val:" = 16"},{name:"hidden_sizes",val:" = [128, 256, 384]"},{name:"num_attention_heads",val:" = [4, 8, 12]"},{name:"depths",val:" = [4, 4, 4]"},{name:"key_dim",val:" = [16, 16, 16]"},{name:"drop_path_rate",val:" = 0"},{name:"mlp_ratio",val:" = [2, 2, 2]"},{name:"attention_ratio",val:" = [2, 2, 2]"},{name:"initializer_range",val:" = 0.02"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LevitConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
The size of the input image.`,name:"image_size"},{anchor:"transformers.LevitConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
Number of channels in the input image.`,name:"num_channels"},{anchor:"transformers.LevitConfig.kernel_size",description:`<strong>kernel_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The kernel size for the initial convolution layers of patch embedding.`,name:"kernel_size"},{anchor:"transformers.LevitConfig.stride",description:`<strong>stride</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The stride size for the initial convolution layers of patch embedding.`,name:"stride"},{anchor:"transformers.LevitConfig.padding",description:`<strong>padding</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The padding size for the initial convolution layers of patch embedding.`,name:"padding"},{anchor:"transformers.LevitConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
The patch size for embeddings.`,name:"patch_size"},{anchor:"transformers.LevitConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[128, 256, 384]</code>) &#x2014;
Dimension of each of the encoder blocks.`,name:"hidden_sizes"},{anchor:"transformers.LevitConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[4, 8, 12]</code>) &#x2014;
Number of attention heads for each attention layer in each block of the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.LevitConfig.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[4, 4, 4]</code>) &#x2014;
The number of layers in each encoder block.`,name:"depths"},{anchor:"transformers.LevitConfig.key_dim",description:`<strong>key_dim</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[16, 16, 16]</code>) &#x2014;
The size of key in each of the encoder blocks.`,name:"key_dim"},{anchor:"transformers.LevitConfig.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dropout probability for stochastic depths, used in the blocks of the Transformer encoder.`,name:"drop_path_rate"},{anchor:"transformers.LevitConfig.mlp_ratios",description:`<strong>mlp_ratios</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[2, 2, 2]</code>) &#x2014;
Ratio of the size of the hidden layer compared to the size of the input layer of the Mix FFNs in the
encoder blocks.`,name:"mlp_ratios"},{anchor:"transformers.LevitConfig.attention_ratios",description:`<strong>attention_ratios</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[2, 2, 2]</code>) &#x2014;
Ratio of the size of the output dimension compared to input dimension of attention layers.`,name:"attention_ratios"},{anchor:"transformers.LevitConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/levit/configuration_levit.py#L35"}}),ie=new Uo({props:{anchor:"transformers.LevitConfig.example",$$slots:{default:[qn]},$$scope:{ctx:k}}}),Me=new tt({}),Ne=new oe({props:{name:"class transformers.models.levit.image_processing_levit.LevitImageProcessor",anchor:"transformers.models.levit.image_processing_levit.LevitImageProcessor",parameters:[{name:"do_resize",val:": bool = True"},{name:"size",val:": typing.Dict[str, int] = None"},{name:"resample",val:": Resampling = <Resampling.BICUBIC: 3>"},{name:"do_center_crop",val:": bool = True"},{name:"crop_size",val:": typing.Dict[str, int] = None"},{name:"do_rescale",val:": bool = True"},{name:"rescale_factor",val:": typing.Union[int, float] = 0.00392156862745098"},{name:"do_normalize",val:": bool = True"},{name:"image_mean",val:": typing.Union[float, typing.Iterable[float], NoneType] = [0.485, 0.456, 0.406]"},{name:"image_std",val:": typing.Union[float, typing.Iterable[float], NoneType] = [0.229, 0.224, 0.225]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.models.levit.image_processing_levit.LevitImageProcessor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Wwhether to resize the shortest edge of the input to int(256/224 *<code>size</code>). Can be overridden by the
<code>do_resize</code> parameter in the <code>preprocess</code> method.`,name:"do_resize"},{anchor:"transformers.models.levit.image_processing_levit.LevitImageProcessor.size",description:`<strong>size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>{&quot;shortest_edge&quot; -- 224}</code>):
Size of the output image after resizing. If size is a dict with keys &#x201C;width&#x201D; and &#x201C;height&#x201D;, the image will
be resized to <code>(size[&quot;height&quot;], size[&quot;width&quot;])</code>. If size is a dict with key &#x201C;shortest_edge&#x201D;, the shortest
edge value <code>c</code> is rescaled to <code>int(c * (256/224))</code>. The smaller edge of the image will be matched to this
value i.e, if height &gt; width, then image will be rescaled to <code>(size[&quot;shortest_egde&quot;] * height / width, size[&quot;shortest_egde&quot;])</code>. Can be overridden by the <code>size</code> parameter in the <code>preprocess</code> method.`,name:"size"},{anchor:"transformers.models.levit.image_processing_levit.LevitImageProcessor.resample",description:`<strong>resample</strong> (<code>PILImageResampling</code>, <em>optional</em>, defaults to <code>PILImageResampling.BICUBIC</code>) &#x2014;
Resampling filter to use if resizing the image. Can be overridden by the <code>resample</code> parameter in the
<code>preprocess</code> method.`,name:"resample"},{anchor:"transformers.models.levit.image_processing_levit.LevitImageProcessor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to center crop the input to <code>(crop_size[&quot;height&quot;], crop_size[&quot;width&quot;])</code>. Can be overridden
by the <code>do_center_crop</code> parameter in the <code>preprocess</code> method.`,name:"do_center_crop"},{anchor:"transformers.models.levit.image_processing_levit.LevitImageProcessor.crop_size",description:`<strong>crop_size</strong> (<code>Dict</code>, <em>optional</em>, defaults to <code>{&quot;height&quot; -- 224, &quot;width&quot;: 224}</code>):
Desired image size after <code>center_crop</code>. Can be overridden by the <code>crop_size</code> parameter in the <code>preprocess</code>
method.`,name:"crop_size"},{anchor:"transformers.models.levit.image_processing_levit.LevitImageProcessor.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Controls whether to rescale the image by the specified scale <code>rescale_factor</code>. Can be overridden by the
<code>do_rescale</code> parameter in the <code>preprocess</code> method.`,name:"do_rescale"},{anchor:"transformers.models.levit.image_processing_levit.LevitImageProcessor.rescale_factor",description:`<strong>rescale_factor</strong> (<code>int</code> or <code>float</code>, <em>optional</em>, defaults to <code>1/255</code>) &#x2014;
Scale factor to use if rescaling the image. Can be overridden by the <code>rescale_factor</code> parameter in the
<code>preprocess</code> method.`,name:"rescale_factor"},{anchor:"transformers.models.levit.image_processing_levit.LevitImageProcessor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Controls whether to normalize the image. Can be overridden by the <code>do_normalize</code> parameter in the
<code>preprocess</code> method.`,name:"do_normalize"},{anchor:"transformers.models.levit.image_processing_levit.LevitImageProcessor.image_mean",description:`<strong>image_mean</strong> (<code>List[int]</code>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
Mean to use if normalizing the image. This is a float or list of floats the length of the number of
channels in the image. Can be overridden by the <code>image_mean</code> parameter in the <code>preprocess</code> method.`,name:"image_mean"},{anchor:"transformers.models.levit.image_processing_levit.LevitImageProcessor.image_std",description:`<strong>image_std</strong> (<code>List[int]</code>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
Standard deviation to use if normalizing the image. This is a float or list of floats the length of the
number of channels in the image. Can be overridden by the <code>image_std</code> parameter in the <code>preprocess</code> method.`,name:"image_std"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/levit/image_processing_levit.py#L48"}}),Ve=new oe({props:{name:"__call__",anchor:"transformers.models.levit.image_processing_levit.LevitImageProcessor.__call__",parameters:[{name:"images",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/image_processing_utils.py#L52"}}),qe=new tt({}),Se=new oe({props:{name:"class transformers.LevitModel",anchor:"transformers.LevitModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.LevitModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/levit/modeling_levit.py#L541"}}),Oe=new oe({props:{name:"forward",anchor:"transformers.LevitModel.forward",parameters:[{name:"pixel_values",val:": FloatTensor = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.LevitModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.LevitModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.LevitModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/levit/modeling_levit.py#L550",returnDescription:`
<p>A <code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"
>LevitConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state after a pooling operation on the spatial dimensions.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),he=new Ls({props:{$$slots:{default:[Sn]},$$scope:{ctx:k}}}),me=new Uo({props:{anchor:"transformers.LevitModel.forward.example",$$slots:{default:[Wn]},$$scope:{ctx:k}}}),Re=new tt({}),Ue=new oe({props:{name:"class transformers.LevitForImageClassification",anchor:"transformers.LevitForImageClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.LevitForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/levit/modeling_levit.py#L602"}}),Je=new oe({props:{name:"forward",anchor:"transformers.LevitForImageClassification.forward",parameters:[{name:"pixel_values",val:": FloatTensor = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.LevitForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.LevitForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.LevitForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.LevitForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/levit/modeling_levit.py#L619",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"
>LevitConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),pe=new Ls({props:{$$slots:{default:[Dn]},$$scope:{ctx:k}}}),ge=new Uo({props:{anchor:"transformers.LevitForImageClassification.forward.example",$$slots:{default:[On]},$$scope:{ctx:k}}}),Ge=new tt({}),Ye=new oe({props:{name:"class transformers.LevitForImageClassificationWithTeacher",anchor:"transformers.LevitForImageClassificationWithTeacher",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.LevitForImageClassificationWithTeacher.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/levit/modeling_levit.py#L690"}}),Xe=new oe({props:{name:"forward",anchor:"transformers.LevitForImageClassificationWithTeacher.forward",parameters:[{name:"pixel_values",val:": FloatTensor = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.LevitForImageClassificationWithTeacher.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.LevitForImageClassificationWithTeacher.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.LevitForImageClassificationWithTeacher.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/levit/modeling_levit.py#L712",returnDescription:`
<p>A <code>transformers.models.levit.modeling_levit.LevitForImageClassificationWithTeacherOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"
>LevitConfig</a>) and inputs.</p>
<ul>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Prediction scores as the average of the <code>cls_logits</code> and <code>distillation_logits</code>.</li>
<li><strong>cls_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Prediction scores of the classification head (i.e. the linear layer on top of the final hidden state of the
class token).</li>
<li><strong>distillation_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Prediction scores of the distillation head (i.e. the linear layer on top of the final hidden state of the
distillation token).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
</ul>
`,returnType:`
<p><code>transformers.models.levit.modeling_levit.LevitForImageClassificationWithTeacherOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ve=new Ls({props:{$$slots:{default:[Rn]},$$scope:{ctx:k}}}),_e=new Uo({props:{anchor:"transformers.LevitForImageClassificationWithTeacher.forward.example",$$slots:{default:[Un]},$$scope:{ctx:k}}}),{c(){d=s("meta"),b=h(),v=s("h1"),p=s("a"),_=s("span"),w(l.$$.fragment),g=h(),j=s("span"),Jo=a("LeViT"),fo=h(),U=s("h2"),ae=s("a"),Mt=s("span"),w(Ee.$$.fragment),Go=h(),Nt=s("span"),Yo=a("Overview"),po=h(),O=s("p"),Ko=a("The LeViT model was proposed in "),xe=s("a"),Qo=a("LeViT: Introducing Convolutions to Vision Transformers"),Xo=a(" by Ben Graham, Alaaeldin El-Nouby, Hugo Touvron, Pierre Stock, Armand Joulin, Herv\xE9 J\xE9gou, Matthijs Douze. LeViT improves the "),ot=s("a"),Zo=a("Vision Transformer (ViT)"),ea=a(" in performance and efficiency by a few architectural differences such as activation maps with decreasing resolutions in Transformers and the introduction of an attention bias to integrate positional information."),go=h(),at=s("p"),ta=a("The abstract from the paper is the following:"),uo=h(),rt=s("p"),Vt=s("em"),oa=a(`We design a family of image classification architectures that optimize the trade-off between accuracy
and efficiency in a high-speed regime. Our work exploits recent findings in attention-based architectures,
which are competitive on highly parallel processing hardware. We revisit principles from the extensive
literature on convolutional neural networks to apply them to transformers, in particular activation maps
with decreasing resolutions. We also introduce the attention bias, a new way to integrate positional information
in vision transformers. As a result, we propose LeVIT: a hybrid neural network for fast inference image classification.
We consider different measures of efficiency on different hardware platforms, so as to best reflect a wide range of
application scenarios. Our extensive experiments empirically validate our technical choices and show they are suitable
to most architectures. Overall, LeViT significantly outperforms existing convnets and vision transformers with respect
to the speed/accuracy tradeoff. For example, at 80% ImageNet top-1 accuracy, LeViT is 5 times faster than EfficientNet on CPU.`),vo=h(),re=s("img"),_o=h(),se=s("small"),aa=a("LeViT Architecture. Taken from the "),st=s("a"),ra=a("original paper"),sa=a("."),bo=h(),nt=s("p"),na=a("Tips:"),wo=h(),F=s("ul"),qt=s("li"),ia=a("Compared to ViT, LeViT models use an additional distillation head to effectively learn from a teacher (which, in the LeViT paper, is a ResNet like-model). The distillation head is learned through backpropagation under supervision of a ResNet like-model. They also draw inspiration from convolution neural networks to use activation maps with decreasing resolutions to increase the efficiency."),la=h(),H=s("li"),ca=a(`There are 2 ways to fine-tune distilled models, either (1) in a classic way, by only placing a prediction head on top
of the final hidden state and not using the distillation head, or (2) by placing both a prediction head and distillation
head on top of the final hidden state. In that case, the prediction head is trained using regular cross-entropy between
the prediction of the head and the ground-truth label, while the distillation prediction head is trained using hard distillation
(cross-entropy between the prediction of the distillation head and the label predicted by the teacher). At inference time,
one takes the average prediction between both heads as final prediction. (2) is also called \u201Cfine-tuning with distillation\u201D,
because one relies on a teacher that has already been fine-tuned on the downstream dataset. In terms of models, (1) corresponds
to `),it=s("a"),da=a("LevitForImageClassification"),ha=a(" and (2) corresponds to "),lt=s("a"),ma=a("LevitForImageClassificationWithTeacher"),fa=a("."),pa=h(),Ce=s("li"),ga=a("All released checkpoints were pre-trained and fine-tuned on  "),Ie=s("a"),ua=a("ImageNet-1k"),va=a(`
(also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes). only. No external data was used. This is in
contrast with the original ViT model, which used external data like the JFT-300M dataset/Imagenet-21k for
pre-training.`),_a=h(),x=s("li"),ba=a("The authors of LeViT released 5 trained LeViT models, which you can directly plug into "),ct=s("a"),wa=a("LevitModel"),$a=a(" or "),dt=s("a"),La=a("LevitForImageClassification"),ya=a(`.
Techniques like data augmentation, optimization, and regularization were used in order to simulate training on a much larger dataset
(while only using ImageNet-1k for pre-training). The 5 variants available are (all trained on images of size 224x224):
`),St=s("em"),Ta=a("facebook/levit-128S"),Ea=a(", "),Wt=s("em"),xa=a("facebook/levit-128"),Ca=a(", "),Dt=s("em"),Ia=a("facebook/levit-192"),ka=a(", "),Ot=s("em"),Fa=a("facebook/levit-256"),ja=a(` and
`),Rt=s("em"),Pa=a("facebook/levit-384"),za=a(". Note that one should use "),ht=s("a"),Aa=a("LevitFeatureExtractor"),Ma=a(` in order to
prepare images for the model.`),Na=h(),mt=s("li"),ft=s("a"),Va=a("LevitForImageClassificationWithTeacher"),qa=a(" currently supports only inference and not training or fine-tuning."),Sa=h(),I=s("li"),Wa=a("You can check out demo notebooks regarding inference as well as fine-tuning on custom data "),ke=s("a"),Da=a("here"),Oa=a(`
(you can just replace `),pt=s("a"),Ra=a("ViTFeatureExtractor"),Ua=a(" by "),gt=s("a"),Ha=a("LevitFeatureExtractor"),Ba=a(" and "),ut=s("a"),Ja=a("ViTForImageClassification"),Ga=a(" by "),vt=s("a"),Ya=a("LevitForImageClassification"),Ka=a(" or "),_t=s("a"),Qa=a("LevitForImageClassificationWithTeacher"),Xa=a(")."),$o=h(),R=s("p"),Za=a("This model was contributed by "),Fe=s("a"),er=a("anugunj"),tr=a(". The original code can be found "),je=s("a"),or=a("here"),ar=a("."),Lo=h(),B=s("h2"),ne=s("a"),Ut=s("span"),w(Pe.$$.fragment),rr=h(),Ht=s("span"),sr=a("LevitConfig"),yo=h(),z=s("div"),w(ze.$$.fragment),nr=h(),J=s("p"),ir=a("This is the configuration class to store the configuration of a "),bt=s("a"),lr=a("LevitModel"),cr=a(`. It is used to instantiate a LeViT
model according to the specified arguments, defining the model architecture. Instantiating a configuration with the
defaults will yield a similar configuration to that of the LeViT
`),Ae=s("a"),dr=a("facebook/levit-128S"),hr=a(" architecture."),mr=h(),G=s("p"),fr=a("Configuration objects inherit from "),wt=s("a"),pr=a("PretrainedConfig"),gr=a(` and can be used to control the model outputs. Read the
documentation from `),$t=s("a"),ur=a("PretrainedConfig"),vr=a(" for more information."),_r=h(),w(ie.$$.fragment),To=h(),Y=s("h2"),le=s("a"),Bt=s("span"),w(Me.$$.fragment),br=h(),Jt=s("span"),wr=a("LevitFeatureExtractor"),Eo=h(),W=s("div"),w(Ne.$$.fragment),$r=h(),Gt=s("p"),Lr=a("Constructs a LeViT image processor."),yr=h(),ce=s("div"),w(Ve.$$.fragment),Tr=h(),Yt=s("p"),Er=a("Preprocess an image or a batch of images."),xo=h(),K=s("h2"),de=s("a"),Kt=s("span"),w(qe.$$.fragment),xr=h(),Qt=s("span"),Cr=a("LevitModel"),Co=h(),D=s("div"),w(Se.$$.fragment),Ir=h(),We=s("p"),kr=a(`The bare Levit model outputting raw features without any specific head on top.
This model is a PyTorch `),De=s("a"),Fr=a("torch.nn.Module"),jr=a(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Pr=h(),N=s("div"),w(Oe.$$.fragment),zr=h(),Q=s("p"),Ar=a("The "),Lt=s("a"),Mr=a("LevitModel"),Nr=a(" forward method, overrides the "),Xt=s("code"),Vr=a("__call__"),qr=a(" special method."),Sr=h(),w(he.$$.fragment),Wr=h(),w(me.$$.fragment),Io=h(),X=s("h2"),fe=s("a"),Zt=s("span"),w(Re.$$.fragment),Dr=h(),eo=s("span"),Or=a("LevitForImageClassification"),ko=h(),A=s("div"),w(Ue.$$.fragment),Rr=h(),to=s("p"),Ur=a(`Levit Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Hr=h(),He=s("p"),Br=a("This model is a PyTorch "),Be=s("a"),Jr=a("torch.nn.Module"),Gr=a(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Yr=h(),V=s("div"),w(Je.$$.fragment),Kr=h(),Z=s("p"),Qr=a("The "),yt=s("a"),Xr=a("LevitForImageClassification"),Zr=a(" forward method, overrides the "),oo=s("code"),es=a("__call__"),ts=a(" special method."),os=h(),w(pe.$$.fragment),as=h(),w(ge.$$.fragment),Fo=h(),ee=s("h2"),ue=s("a"),ao=s("span"),w(Ge.$$.fragment),rs=h(),ro=s("span"),ss=a("LevitForImageClassificationWithTeacher"),jo=h(),M=s("div"),w(Ye.$$.fragment),ns=h(),so=s("p"),is=a(`LeViT Model transformer with image classification heads on top (a linear layer on top of the final hidden state and
a linear layer on top of the final hidden state of the distillation token) e.g. for ImageNet. .. warning::
This model supports inference-only. Fine-tuning with distillation (i.e. with a teacher) is not yet
supported.`),ls=h(),Ke=s("p"),cs=a("This model is a PyTorch "),Qe=s("a"),ds=a("torch.nn.Module"),hs=a(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ms=h(),q=s("div"),w(Xe.$$.fragment),fs=h(),te=s("p"),ps=a("The "),Tt=s("a"),gs=a("LevitForImageClassificationWithTeacher"),us=a(" forward method, overrides the "),no=s("code"),vs=a("__call__"),_s=a(" special method."),bs=h(),w(ve.$$.fragment),ws=h(),w(_e.$$.fragment),this.h()},l(t){const f=Mn('[data-svelte="svelte-1phssyn"]',document.head);d=n(f,"META",{name:!0,content:!0}),f.forEach(o),b=m(t),v=n(t,"H1",{class:!0});var Ze=i(v);p=n(Ze,"A",{id:!0,class:!0,href:!0});var io=i(p);_=n(io,"SPAN",{});var lo=i(_);$(l.$$.fragment,lo),lo.forEach(o),io.forEach(o),g=m(Ze),j=n(Ze,"SPAN",{});var co=i(j);Jo=r(co,"LeViT"),co.forEach(o),Ze.forEach(o),fo=m(t),U=n(t,"H2",{class:!0});var et=i(U);ae=n(et,"A",{id:!0,class:!0,href:!0});var ho=i(ae);Mt=n(ho,"SPAN",{});var mo=i(Mt);$(Ee.$$.fragment,mo),mo.forEach(o),ho.forEach(o),Go=m(et),Nt=n(et,"SPAN",{});var Ts=i(Nt);Yo=r(Ts,"Overview"),Ts.forEach(o),et.forEach(o),po=m(t),O=n(t,"P",{});var Et=i(O);Ko=r(Et,"The LeViT model was proposed in "),xe=n(Et,"A",{href:!0,rel:!0});var Es=i(xe);Qo=r(Es,"LeViT: Introducing Convolutions to Vision Transformers"),Es.forEach(o),Xo=r(Et," by Ben Graham, Alaaeldin El-Nouby, Hugo Touvron, Pierre Stock, Armand Joulin, Herv\xE9 J\xE9gou, Matthijs Douze. LeViT improves the "),ot=n(Et,"A",{href:!0});var xs=i(ot);Zo=r(xs,"Vision Transformer (ViT)"),xs.forEach(o),ea=r(Et," in performance and efficiency by a few architectural differences such as activation maps with decreasing resolutions in Transformers and the introduction of an attention bias to integrate positional information."),Et.forEach(o),go=m(t),at=n(t,"P",{});var Cs=i(at);ta=r(Cs,"The abstract from the paper is the following:"),Cs.forEach(o),uo=m(t),rt=n(t,"P",{});var Is=i(rt);Vt=n(Is,"EM",{});var ks=i(Vt);oa=r(ks,`We design a family of image classification architectures that optimize the trade-off between accuracy
and efficiency in a high-speed regime. Our work exploits recent findings in attention-based architectures,
which are competitive on highly parallel processing hardware. We revisit principles from the extensive
literature on convolutional neural networks to apply them to transformers, in particular activation maps
with decreasing resolutions. We also introduce the attention bias, a new way to integrate positional information
in vision transformers. As a result, we propose LeVIT: a hybrid neural network for fast inference image classification.
We consider different measures of efficiency on different hardware platforms, so as to best reflect a wide range of
application scenarios. Our extensive experiments empirically validate our technical choices and show they are suitable
to most architectures. Overall, LeViT significantly outperforms existing convnets and vision transformers with respect
to the speed/accuracy tradeoff. For example, at 80% ImageNet top-1 accuracy, LeViT is 5 times faster than EfficientNet on CPU.`),ks.forEach(o),Is.forEach(o),vo=m(t),re=n(t,"IMG",{src:!0,alt:!0,width:!0}),_o=m(t),se=n(t,"SMALL",{});var zo=i(se);aa=r(zo,"LeViT Architecture. Taken from the "),st=n(zo,"A",{href:!0});var Fs=i(st);ra=r(Fs,"original paper"),Fs.forEach(o),sa=r(zo,"."),zo.forEach(o),bo=m(t),nt=n(t,"P",{});var js=i(nt);na=r(js,"Tips:"),js.forEach(o),wo=m(t),F=n(t,"UL",{});var S=i(F);qt=n(S,"LI",{});var Ps=i(qt);ia=r(Ps,"Compared to ViT, LeViT models use an additional distillation head to effectively learn from a teacher (which, in the LeViT paper, is a ResNet like-model). The distillation head is learned through backpropagation under supervision of a ResNet like-model. They also draw inspiration from convolution neural networks to use activation maps with decreasing resolutions to increase the efficiency."),Ps.forEach(o),la=m(S),H=n(S,"LI",{});var xt=i(H);ca=r(xt,`There are 2 ways to fine-tune distilled models, either (1) in a classic way, by only placing a prediction head on top
of the final hidden state and not using the distillation head, or (2) by placing both a prediction head and distillation
head on top of the final hidden state. In that case, the prediction head is trained using regular cross-entropy between
the prediction of the head and the ground-truth label, while the distillation prediction head is trained using hard distillation
(cross-entropy between the prediction of the distillation head and the label predicted by the teacher). At inference time,
one takes the average prediction between both heads as final prediction. (2) is also called \u201Cfine-tuning with distillation\u201D,
because one relies on a teacher that has already been fine-tuned on the downstream dataset. In terms of models, (1) corresponds
to `),it=n(xt,"A",{href:!0});var zs=i(it);da=r(zs,"LevitForImageClassification"),zs.forEach(o),ha=r(xt," and (2) corresponds to "),lt=n(xt,"A",{href:!0});var As=i(lt);ma=r(As,"LevitForImageClassificationWithTeacher"),As.forEach(o),fa=r(xt,"."),xt.forEach(o),pa=m(S),Ce=n(S,"LI",{});var Ao=i(Ce);ga=r(Ao,"All released checkpoints were pre-trained and fine-tuned on  "),Ie=n(Ao,"A",{href:!0,rel:!0});var Ms=i(Ie);ua=r(Ms,"ImageNet-1k"),Ms.forEach(o),va=r(Ao,`
(also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes). only. No external data was used. This is in
contrast with the original ViT model, which used external data like the JFT-300M dataset/Imagenet-21k for
pre-training.`),Ao.forEach(o),_a=m(S),x=n(S,"LI",{});var C=i(x);ba=r(C,"The authors of LeViT released 5 trained LeViT models, which you can directly plug into "),ct=n(C,"A",{href:!0});var Ns=i(ct);wa=r(Ns,"LevitModel"),Ns.forEach(o),$a=r(C," or "),dt=n(C,"A",{href:!0});var Vs=i(dt);La=r(Vs,"LevitForImageClassification"),Vs.forEach(o),ya=r(C,`.
Techniques like data augmentation, optimization, and regularization were used in order to simulate training on a much larger dataset
(while only using ImageNet-1k for pre-training). The 5 variants available are (all trained on images of size 224x224):
`),St=n(C,"EM",{});var qs=i(St);Ta=r(qs,"facebook/levit-128S"),qs.forEach(o),Ea=r(C,", "),Wt=n(C,"EM",{});var Ss=i(Wt);xa=r(Ss,"facebook/levit-128"),Ss.forEach(o),Ca=r(C,", "),Dt=n(C,"EM",{});var Ws=i(Dt);Ia=r(Ws,"facebook/levit-192"),Ws.forEach(o),ka=r(C,", "),Ot=n(C,"EM",{});var Ds=i(Ot);Fa=r(Ds,"facebook/levit-256"),Ds.forEach(o),ja=r(C,` and
`),Rt=n(C,"EM",{});var Os=i(Rt);Pa=r(Os,"facebook/levit-384"),Os.forEach(o),za=r(C,". Note that one should use "),ht=n(C,"A",{href:!0});var Rs=i(ht);Aa=r(Rs,"LevitFeatureExtractor"),Rs.forEach(o),Ma=r(C,` in order to
prepare images for the model.`),C.forEach(o),Na=m(S),mt=n(S,"LI",{});var $s=i(mt);ft=n($s,"A",{href:!0});var Us=i(ft);Va=r(Us,"LevitForImageClassificationWithTeacher"),Us.forEach(o),qa=r($s," currently supports only inference and not training or fine-tuning."),$s.forEach(o),Sa=m(S),I=n(S,"LI",{});var P=i(I);Wa=r(P,"You can check out demo notebooks regarding inference as well as fine-tuning on custom data "),ke=n(P,"A",{href:!0,rel:!0});var Hs=i(ke);Da=r(Hs,"here"),Hs.forEach(o),Oa=r(P,`
(you can just replace `),pt=n(P,"A",{href:!0});var Bs=i(pt);Ra=r(Bs,"ViTFeatureExtractor"),Bs.forEach(o),Ua=r(P," by "),gt=n(P,"A",{href:!0});var Js=i(gt);Ha=r(Js,"LevitFeatureExtractor"),Js.forEach(o),Ba=r(P," and "),ut=n(P,"A",{href:!0});var Gs=i(ut);Ja=r(Gs,"ViTForImageClassification"),Gs.forEach(o),Ga=r(P," by "),vt=n(P,"A",{href:!0});var Ys=i(vt);Ya=r(Ys,"LevitForImageClassification"),Ys.forEach(o),Ka=r(P," or "),_t=n(P,"A",{href:!0});var Ks=i(_t);Qa=r(Ks,"LevitForImageClassificationWithTeacher"),Ks.forEach(o),Xa=r(P,")."),P.forEach(o),S.forEach(o),$o=m(t),R=n(t,"P",{});var Ct=i(R);Za=r(Ct,"This model was contributed by "),Fe=n(Ct,"A",{href:!0,rel:!0});var Qs=i(Fe);er=r(Qs,"anugunj"),Qs.forEach(o),tr=r(Ct,". The original code can be found "),je=n(Ct,"A",{href:!0,rel:!0});var Xs=i(je);or=r(Xs,"here"),Xs.forEach(o),ar=r(Ct,"."),Ct.forEach(o),Lo=m(t),B=n(t,"H2",{class:!0});var Mo=i(B);ne=n(Mo,"A",{id:!0,class:!0,href:!0});var Zs=i(ne);Ut=n(Zs,"SPAN",{});var en=i(Ut);$(Pe.$$.fragment,en),en.forEach(o),Zs.forEach(o),rr=m(Mo),Ht=n(Mo,"SPAN",{});var tn=i(Ht);sr=r(tn,"LevitConfig"),tn.forEach(o),Mo.forEach(o),yo=m(t),z=n(t,"DIV",{class:!0});var be=i(z);$(ze.$$.fragment,be),nr=m(be),J=n(be,"P",{});var It=i(J);ir=r(It,"This is the configuration class to store the configuration of a "),bt=n(It,"A",{href:!0});var on=i(bt);lr=r(on,"LevitModel"),on.forEach(o),cr=r(It,`. It is used to instantiate a LeViT
model according to the specified arguments, defining the model architecture. Instantiating a configuration with the
defaults will yield a similar configuration to that of the LeViT
`),Ae=n(It,"A",{href:!0,rel:!0});var an=i(Ae);dr=r(an,"facebook/levit-128S"),an.forEach(o),hr=r(It," architecture."),It.forEach(o),mr=m(be),G=n(be,"P",{});var kt=i(G);fr=r(kt,"Configuration objects inherit from "),wt=n(kt,"A",{href:!0});var rn=i(wt);pr=r(rn,"PretrainedConfig"),rn.forEach(o),gr=r(kt,` and can be used to control the model outputs. Read the
documentation from `),$t=n(kt,"A",{href:!0});var sn=i($t);ur=r(sn,"PretrainedConfig"),sn.forEach(o),vr=r(kt," for more information."),kt.forEach(o),_r=m(be),$(ie.$$.fragment,be),be.forEach(o),To=m(t),Y=n(t,"H2",{class:!0});var No=i(Y);le=n(No,"A",{id:!0,class:!0,href:!0});var nn=i(le);Bt=n(nn,"SPAN",{});var ln=i(Bt);$(Me.$$.fragment,ln),ln.forEach(o),nn.forEach(o),br=m(No),Jt=n(No,"SPAN",{});var cn=i(Jt);wr=r(cn,"LevitFeatureExtractor"),cn.forEach(o),No.forEach(o),Eo=m(t),W=n(t,"DIV",{class:!0});var Ft=i(W);$(Ne.$$.fragment,Ft),$r=m(Ft),Gt=n(Ft,"P",{});var dn=i(Gt);Lr=r(dn,"Constructs a LeViT image processor."),dn.forEach(o),yr=m(Ft),ce=n(Ft,"DIV",{class:!0});var Vo=i(ce);$(Ve.$$.fragment,Vo),Tr=m(Vo),Yt=n(Vo,"P",{});var hn=i(Yt);Er=r(hn,"Preprocess an image or a batch of images."),hn.forEach(o),Vo.forEach(o),Ft.forEach(o),xo=m(t),K=n(t,"H2",{class:!0});var qo=i(K);de=n(qo,"A",{id:!0,class:!0,href:!0});var mn=i(de);Kt=n(mn,"SPAN",{});var fn=i(Kt);$(qe.$$.fragment,fn),fn.forEach(o),mn.forEach(o),xr=m(qo),Qt=n(qo,"SPAN",{});var pn=i(Qt);Cr=r(pn,"LevitModel"),pn.forEach(o),qo.forEach(o),Co=m(t),D=n(t,"DIV",{class:!0});var jt=i(D);$(Se.$$.fragment,jt),Ir=m(jt),We=n(jt,"P",{});var So=i(We);kr=r(So,`The bare Levit model outputting raw features without any specific head on top.
This model is a PyTorch `),De=n(So,"A",{href:!0,rel:!0});var gn=i(De);Fr=r(gn,"torch.nn.Module"),gn.forEach(o),jr=r(So,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),So.forEach(o),Pr=m(jt),N=n(jt,"DIV",{class:!0});var we=i(N);$(Oe.$$.fragment,we),zr=m(we),Q=n(we,"P",{});var Pt=i(Q);Ar=r(Pt,"The "),Lt=n(Pt,"A",{href:!0});var un=i(Lt);Mr=r(un,"LevitModel"),un.forEach(o),Nr=r(Pt," forward method, overrides the "),Xt=n(Pt,"CODE",{});var vn=i(Xt);Vr=r(vn,"__call__"),vn.forEach(o),qr=r(Pt," special method."),Pt.forEach(o),Sr=m(we),$(he.$$.fragment,we),Wr=m(we),$(me.$$.fragment,we),we.forEach(o),jt.forEach(o),Io=m(t),X=n(t,"H2",{class:!0});var Wo=i(X);fe=n(Wo,"A",{id:!0,class:!0,href:!0});var _n=i(fe);Zt=n(_n,"SPAN",{});var bn=i(Zt);$(Re.$$.fragment,bn),bn.forEach(o),_n.forEach(o),Dr=m(Wo),eo=n(Wo,"SPAN",{});var wn=i(eo);Or=r(wn,"LevitForImageClassification"),wn.forEach(o),Wo.forEach(o),ko=m(t),A=n(t,"DIV",{class:!0});var $e=i(A);$(Ue.$$.fragment,$e),Rr=m($e),to=n($e,"P",{});var $n=i(to);Ur=r($n,`Levit Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),$n.forEach(o),Hr=m($e),He=n($e,"P",{});var Do=i(He);Br=r(Do,"This model is a PyTorch "),Be=n(Do,"A",{href:!0,rel:!0});var Ln=i(Be);Jr=r(Ln,"torch.nn.Module"),Ln.forEach(o),Gr=r(Do,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Do.forEach(o),Yr=m($e),V=n($e,"DIV",{class:!0});var Le=i(V);$(Je.$$.fragment,Le),Kr=m(Le),Z=n(Le,"P",{});var zt=i(Z);Qr=r(zt,"The "),yt=n(zt,"A",{href:!0});var yn=i(yt);Xr=r(yn,"LevitForImageClassification"),yn.forEach(o),Zr=r(zt," forward method, overrides the "),oo=n(zt,"CODE",{});var Tn=i(oo);es=r(Tn,"__call__"),Tn.forEach(o),ts=r(zt," special method."),zt.forEach(o),os=m(Le),$(pe.$$.fragment,Le),as=m(Le),$(ge.$$.fragment,Le),Le.forEach(o),$e.forEach(o),Fo=m(t),ee=n(t,"H2",{class:!0});var Oo=i(ee);ue=n(Oo,"A",{id:!0,class:!0,href:!0});var En=i(ue);ao=n(En,"SPAN",{});var xn=i(ao);$(Ge.$$.fragment,xn),xn.forEach(o),En.forEach(o),rs=m(Oo),ro=n(Oo,"SPAN",{});var Cn=i(ro);ss=r(Cn,"LevitForImageClassificationWithTeacher"),Cn.forEach(o),Oo.forEach(o),jo=m(t),M=n(t,"DIV",{class:!0});var ye=i(M);$(Ye.$$.fragment,ye),ns=m(ye),so=n(ye,"P",{});var In=i(so);is=r(In,`LeViT Model transformer with image classification heads on top (a linear layer on top of the final hidden state and
a linear layer on top of the final hidden state of the distillation token) e.g. for ImageNet. .. warning::
This model supports inference-only. Fine-tuning with distillation (i.e. with a teacher) is not yet
supported.`),In.forEach(o),ls=m(ye),Ke=n(ye,"P",{});var Ro=i(Ke);cs=r(Ro,"This model is a PyTorch "),Qe=n(Ro,"A",{href:!0,rel:!0});var kn=i(Qe);ds=r(kn,"torch.nn.Module"),kn.forEach(o),hs=r(Ro,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Ro.forEach(o),ms=m(ye),q=n(ye,"DIV",{class:!0});var Te=i(q);$(Xe.$$.fragment,Te),fs=m(Te),te=n(Te,"P",{});var At=i(te);ps=r(At,"The "),Tt=n(At,"A",{href:!0});var Fn=i(Tt);gs=r(Fn,"LevitForImageClassificationWithTeacher"),Fn.forEach(o),us=r(At," forward method, overrides the "),no=n(At,"CODE",{});var jn=i(no);vs=r(jn,"__call__"),jn.forEach(o),_s=r(At," special method."),At.forEach(o),bs=m(Te),$(ve.$$.fragment,Te),ws=m(Te),$(_e.$$.fragment,Te),Te.forEach(o),ye.forEach(o),this.h()},h(){c(d,"name","hf:doc:metadata"),c(d,"content",JSON.stringify(Bn)),c(p,"id","levit"),c(p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p,"href","#levit"),c(v,"class","relative group"),c(ae,"id","overview"),c(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ae,"href","#overview"),c(U,"class","relative group"),c(xe,"href","https://arxiv.org/abs/2104.01136"),c(xe,"rel","nofollow"),c(ot,"href","vit"),Nn(re.src,ys="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/levit_architecture.png")||c(re,"src",ys),c(re,"alt","drawing"),c(re,"width","600"),c(st,"href","https://arxiv.org/abs/2104.01136"),c(it,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(lt,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(Ie,"href","https://huggingface.co/datasets/imagenet-1k"),c(Ie,"rel","nofollow"),c(ct,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(dt,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(ht,"href","/docs/transformers/main/en/model_doc/levit#transformers.models.levit.image_processing_levit.LevitImageProcessor"),c(ft,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(ke,"href","https://github.com/NielsRogge/Transformers-Tutorials/tree/master/VisionTransformer"),c(ke,"rel","nofollow"),c(pt,"href","/docs/transformers/main/en/model_doc/vit#transformers.models.vit.image_processing_vit.ViTImageProcessor"),c(gt,"href","/docs/transformers/main/en/model_doc/levit#transformers.models.levit.image_processing_levit.LevitImageProcessor"),c(ut,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(vt,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(_t,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(Fe,"href","https://huggingface.co/anugunj"),c(Fe,"rel","nofollow"),c(je,"href","https://github.com/facebookresearch/LeViT"),c(je,"rel","nofollow"),c(ne,"id","transformers.LevitConfig"),c(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ne,"href","#transformers.LevitConfig"),c(B,"class","relative group"),c(bt,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(Ae,"href","https://huggingface.co/facebook/levit-128S"),c(Ae,"rel","nofollow"),c(wt,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),c($t,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),c(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(le,"id","transformers.models.levit.image_processing_levit.LevitImageProcessor"),c(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(le,"href","#transformers.models.levit.image_processing_levit.LevitImageProcessor"),c(Y,"class","relative group"),c(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(de,"id","transformers.LevitModel"),c(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(de,"href","#transformers.LevitModel"),c(K,"class","relative group"),c(De,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(De,"rel","nofollow"),c(Lt,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fe,"id","transformers.LevitForImageClassification"),c(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fe,"href","#transformers.LevitForImageClassification"),c(X,"class","relative group"),c(Be,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Be,"rel","nofollow"),c(yt,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ue,"id","transformers.LevitForImageClassificationWithTeacher"),c(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ue,"href","#transformers.LevitForImageClassificationWithTeacher"),c(ee,"class","relative group"),c(Qe,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Qe,"rel","nofollow"),c(Tt,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,f){e(document.head,d),u(t,b,f),u(t,v,f),e(v,p),e(p,_),L(l,_,null),e(v,g),e(v,j),e(j,Jo),u(t,fo,f),u(t,U,f),e(U,ae),e(ae,Mt),L(Ee,Mt,null),e(U,Go),e(U,Nt),e(Nt,Yo),u(t,po,f),u(t,O,f),e(O,Ko),e(O,xe),e(xe,Qo),e(O,Xo),e(O,ot),e(ot,Zo),e(O,ea),u(t,go,f),u(t,at,f),e(at,ta),u(t,uo,f),u(t,rt,f),e(rt,Vt),e(Vt,oa),u(t,vo,f),u(t,re,f),u(t,_o,f),u(t,se,f),e(se,aa),e(se,st),e(st,ra),e(se,sa),u(t,bo,f),u(t,nt,f),e(nt,na),u(t,wo,f),u(t,F,f),e(F,qt),e(qt,ia),e(F,la),e(F,H),e(H,ca),e(H,it),e(it,da),e(H,ha),e(H,lt),e(lt,ma),e(H,fa),e(F,pa),e(F,Ce),e(Ce,ga),e(Ce,Ie),e(Ie,ua),e(Ce,va),e(F,_a),e(F,x),e(x,ba),e(x,ct),e(ct,wa),e(x,$a),e(x,dt),e(dt,La),e(x,ya),e(x,St),e(St,Ta),e(x,Ea),e(x,Wt),e(Wt,xa),e(x,Ca),e(x,Dt),e(Dt,Ia),e(x,ka),e(x,Ot),e(Ot,Fa),e(x,ja),e(x,Rt),e(Rt,Pa),e(x,za),e(x,ht),e(ht,Aa),e(x,Ma),e(F,Na),e(F,mt),e(mt,ft),e(ft,Va),e(mt,qa),e(F,Sa),e(F,I),e(I,Wa),e(I,ke),e(ke,Da),e(I,Oa),e(I,pt),e(pt,Ra),e(I,Ua),e(I,gt),e(gt,Ha),e(I,Ba),e(I,ut),e(ut,Ja),e(I,Ga),e(I,vt),e(vt,Ya),e(I,Ka),e(I,_t),e(_t,Qa),e(I,Xa),u(t,$o,f),u(t,R,f),e(R,Za),e(R,Fe),e(Fe,er),e(R,tr),e(R,je),e(je,or),e(R,ar),u(t,Lo,f),u(t,B,f),e(B,ne),e(ne,Ut),L(Pe,Ut,null),e(B,rr),e(B,Ht),e(Ht,sr),u(t,yo,f),u(t,z,f),L(ze,z,null),e(z,nr),e(z,J),e(J,ir),e(J,bt),e(bt,lr),e(J,cr),e(J,Ae),e(Ae,dr),e(J,hr),e(z,mr),e(z,G),e(G,fr),e(G,wt),e(wt,pr),e(G,gr),e(G,$t),e($t,ur),e(G,vr),e(z,_r),L(ie,z,null),u(t,To,f),u(t,Y,f),e(Y,le),e(le,Bt),L(Me,Bt,null),e(Y,br),e(Y,Jt),e(Jt,wr),u(t,Eo,f),u(t,W,f),L(Ne,W,null),e(W,$r),e(W,Gt),e(Gt,Lr),e(W,yr),e(W,ce),L(Ve,ce,null),e(ce,Tr),e(ce,Yt),e(Yt,Er),u(t,xo,f),u(t,K,f),e(K,de),e(de,Kt),L(qe,Kt,null),e(K,xr),e(K,Qt),e(Qt,Cr),u(t,Co,f),u(t,D,f),L(Se,D,null),e(D,Ir),e(D,We),e(We,kr),e(We,De),e(De,Fr),e(We,jr),e(D,Pr),e(D,N),L(Oe,N,null),e(N,zr),e(N,Q),e(Q,Ar),e(Q,Lt),e(Lt,Mr),e(Q,Nr),e(Q,Xt),e(Xt,Vr),e(Q,qr),e(N,Sr),L(he,N,null),e(N,Wr),L(me,N,null),u(t,Io,f),u(t,X,f),e(X,fe),e(fe,Zt),L(Re,Zt,null),e(X,Dr),e(X,eo),e(eo,Or),u(t,ko,f),u(t,A,f),L(Ue,A,null),e(A,Rr),e(A,to),e(to,Ur),e(A,Hr),e(A,He),e(He,Br),e(He,Be),e(Be,Jr),e(He,Gr),e(A,Yr),e(A,V),L(Je,V,null),e(V,Kr),e(V,Z),e(Z,Qr),e(Z,yt),e(yt,Xr),e(Z,Zr),e(Z,oo),e(oo,es),e(Z,ts),e(V,os),L(pe,V,null),e(V,as),L(ge,V,null),u(t,Fo,f),u(t,ee,f),e(ee,ue),e(ue,ao),L(Ge,ao,null),e(ee,rs),e(ee,ro),e(ro,ss),u(t,jo,f),u(t,M,f),L(Ye,M,null),e(M,ns),e(M,so),e(so,is),e(M,ls),e(M,Ke),e(Ke,cs),e(Ke,Qe),e(Qe,ds),e(Ke,hs),e(M,ms),e(M,q),L(Xe,q,null),e(q,fs),e(q,te),e(te,ps),e(te,Tt),e(Tt,gs),e(te,us),e(te,no),e(no,vs),e(te,_s),e(q,bs),L(ve,q,null),e(q,ws),L(_e,q,null),Po=!0},p(t,[f]){const Ze={};f&2&&(Ze.$$scope={dirty:f,ctx:t}),ie.$set(Ze);const io={};f&2&&(io.$$scope={dirty:f,ctx:t}),he.$set(io);const lo={};f&2&&(lo.$$scope={dirty:f,ctx:t}),me.$set(lo);const co={};f&2&&(co.$$scope={dirty:f,ctx:t}),pe.$set(co);const et={};f&2&&(et.$$scope={dirty:f,ctx:t}),ge.$set(et);const ho={};f&2&&(ho.$$scope={dirty:f,ctx:t}),ve.$set(ho);const mo={};f&2&&(mo.$$scope={dirty:f,ctx:t}),_e.$set(mo)},i(t){Po||(y(l.$$.fragment,t),y(Ee.$$.fragment,t),y(Pe.$$.fragment,t),y(ze.$$.fragment,t),y(ie.$$.fragment,t),y(Me.$$.fragment,t),y(Ne.$$.fragment,t),y(Ve.$$.fragment,t),y(qe.$$.fragment,t),y(Se.$$.fragment,t),y(Oe.$$.fragment,t),y(he.$$.fragment,t),y(me.$$.fragment,t),y(Re.$$.fragment,t),y(Ue.$$.fragment,t),y(Je.$$.fragment,t),y(pe.$$.fragment,t),y(ge.$$.fragment,t),y(Ge.$$.fragment,t),y(Ye.$$.fragment,t),y(Xe.$$.fragment,t),y(ve.$$.fragment,t),y(_e.$$.fragment,t),Po=!0)},o(t){T(l.$$.fragment,t),T(Ee.$$.fragment,t),T(Pe.$$.fragment,t),T(ze.$$.fragment,t),T(ie.$$.fragment,t),T(Me.$$.fragment,t),T(Ne.$$.fragment,t),T(Ve.$$.fragment,t),T(qe.$$.fragment,t),T(Se.$$.fragment,t),T(Oe.$$.fragment,t),T(he.$$.fragment,t),T(me.$$.fragment,t),T(Re.$$.fragment,t),T(Ue.$$.fragment,t),T(Je.$$.fragment,t),T(pe.$$.fragment,t),T(ge.$$.fragment,t),T(Ge.$$.fragment,t),T(Ye.$$.fragment,t),T(Xe.$$.fragment,t),T(ve.$$.fragment,t),T(_e.$$.fragment,t),Po=!1},d(t){o(d),t&&o(b),t&&o(v),E(l),t&&o(fo),t&&o(U),E(Ee),t&&o(po),t&&o(O),t&&o(go),t&&o(at),t&&o(uo),t&&o(rt),t&&o(vo),t&&o(re),t&&o(_o),t&&o(se),t&&o(bo),t&&o(nt),t&&o(wo),t&&o(F),t&&o($o),t&&o(R),t&&o(Lo),t&&o(B),E(Pe),t&&o(yo),t&&o(z),E(ze),E(ie),t&&o(To),t&&o(Y),E(Me),t&&o(Eo),t&&o(W),E(Ne),E(Ve),t&&o(xo),t&&o(K),E(qe),t&&o(Co),t&&o(D),E(Se),E(Oe),E(he),E(me),t&&o(Io),t&&o(X),E(Re),t&&o(ko),t&&o(A),E(Ue),E(Je),E(pe),E(ge),t&&o(Fo),t&&o(ee),E(Ge),t&&o(jo),t&&o(M),E(Ye),E(Xe),E(ve),E(_e)}}}const Bn={local:"levit",sections:[{local:"overview",title:"Overview"},{local:"transformers.LevitConfig",title:"LevitConfig"},{local:"transformers.models.levit.image_processing_levit.LevitImageProcessor",title:"LevitFeatureExtractor"},{local:"transformers.LevitModel",title:"LevitModel"},{local:"transformers.LevitForImageClassification",title:"LevitForImageClassification"},{local:"transformers.LevitForImageClassificationWithTeacher",title:"LevitForImageClassificationWithTeacher"}],title:"LeViT"};function Jn(k){return Vn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ei extends Pn{constructor(d){super();zn(this,d,Jn,Hn,An,{})}}export{ei as default,Bn as metadata};
