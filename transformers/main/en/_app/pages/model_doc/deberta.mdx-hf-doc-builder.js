import{S as bT,i as kT,s as wT,e as a,k as p,w as T,t as n,M as TT,c as r,d as t,m as h,a as i,x as y,h as s,b as m,G as e,g as b,y as $,q as v,o as D,B as E,v as yT,L as be}from"../../chunks/vendor-hf-doc-builder.js";import{T as rt}from"../../chunks/Tip-hf-doc-builder.js";import{D as te}from"../../chunks/Docstring-hf-doc-builder.js";import{C as ke}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as ot}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as _e}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";import{P as Gc}from"../../chunks/PipelineTag-hf-doc-builder.js";function $T(x){let d,_,c,u,k;return u=new ke({props:{code:`from transformers import DebertaConfig, DebertaModel

# Initializing a DeBERTa microsoft/deberta-base style configuration
configuration = DebertaConfig()

# Initializing a model (with random weights) from the microsoft/deberta-base style configuration
model = DebertaModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DebertaConfig, DebertaModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a DeBERTa microsoft/deberta-base style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = DebertaConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model (with random weights) from the microsoft/deberta-base style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DebertaModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){d=a("p"),_=n("Example:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Example:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function vT(x){let d,_,c,u,k;return u=new ke({props:{code:`from transformers import DebertaTokenizer
tokenizer = DebertaTokenizer.from_pretrained("microsoft/deberta-base")
tokenizer("Hello world")['input_ids']
tokenizer(" Hello world")['input_ids']`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DebertaTokenizer</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer = DebertaTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/deberta-base&quot;</span>)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer(<span class="hljs-string">&quot;Hello world&quot;</span>)[<span class="hljs-string">&#x27;input_ids&#x27;</span>]</span>
[15496, 995]
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer(<span class="hljs-string">&quot; Hello world&quot;</span>)[<span class="hljs-string">&#x27;input_ids&#x27;</span>]</span>
[18435, 995]`}}),{c(){d=a("p"),_=n("be encoded differently whether it is at the beginning of the sentence (without space) or not:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"be encoded differently whether it is at the beginning of the sentence (without space) or not:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function DT(x){let d,_,c,u,k;return{c(){d=a("p"),_=n("When used with "),c=a("code"),u=n("is_split_into_words=True"),k=n(", this tokenizer will add a space before each word (even the first one).")},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"When used with "),c=r(f,"CODE",{});var z=i(c);u=s(z,"is_split_into_words=True"),z.forEach(t),k=s(f,", this tokenizer will add a space before each word (even the first one)."),f.forEach(t)},m(l,f){b(l,d,f),e(d,_),e(d,c),e(c,u),e(d,k)},d(l){l&&t(d)}}}function ET(x){let d,_,c,u,k;return u=new ke({props:{code:`0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1
| first sequence    | second sequence |`,highlighted:`0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1 1
| first sequence    | second sequence |`}}),{c(){d=a("p"),_=n("sequence pair mask has the following format:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"sequence pair mask has the following format:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function FT(x){let d,_,c,u,k;return u=new ke({props:{code:`from transformers import DebertaTokenizerFast
tokenizer = DebertaTokenizerFast.from_pretrained("microsoft/deberta-base")
tokenizer("Hello world")['input_ids']
tokenizer(" Hello world")['input_ids']`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DebertaTokenizerFast</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer = DebertaTokenizerFast.from_pretrained(<span class="hljs-string">&quot;microsoft/deberta-base&quot;</span>)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer(<span class="hljs-string">&quot;Hello world&quot;</span>)[<span class="hljs-string">&#x27;input_ids&#x27;</span>]</span>
[15496, 995]
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer(<span class="hljs-string">&quot; Hello world&quot;</span>)[<span class="hljs-string">&#x27;input_ids&#x27;</span>]</span>
[18435, 995]`}}),{c(){d=a("p"),_=n("be encoded differently whether it is at the beginning of the sentence (without space) or not:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"be encoded differently whether it is at the beginning of the sentence (without space) or not:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function xT(x){let d,_,c,u,k,l,f,z;return{c(){d=a("p"),_=n("When used with "),c=a("code"),u=n("is_split_into_words=True"),k=n(", this tokenizer needs to be instantiated with "),l=a("code"),f=n("add_prefix_space=True"),z=n(".")},l(ae){d=r(ae,"P",{});var V=i(d);_=s(V,"When used with "),c=r(V,"CODE",{});var B=i(c);u=s(B,"is_split_into_words=True"),B.forEach(t),k=s(V,", this tokenizer needs to be instantiated with "),l=r(V,"CODE",{});var oe=i(l);f=s(oe,"add_prefix_space=True"),oe.forEach(t),z=s(V,"."),V.forEach(t)},m(ae,V){b(ae,d,V),e(d,_),e(d,c),e(c,u),e(d,k),e(d,l),e(l,f),e(d,z)},d(ae){ae&&t(d)}}}function qT(x){let d,_,c,u,k;return u=new ke({props:{code:`0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1
| first sequence    | second sequence |`,highlighted:`0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1 1
| first sequence    | second sequence |`}}),{c(){d=a("p"),_=n("sequence pair mask has the following format:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"sequence pair mask has the following format:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function zT(x){let d,_,c,u,k;return{c(){d=a("p"),_=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=n("Module"),k=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r(f,"CODE",{});var z=i(c);u=s(z,"Module"),z.forEach(t),k=s(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(l,f){b(l,d,f),e(d,_),e(d,c),e(c,u),e(d,k)},d(l){l&&t(d)}}}function jT(x){let d,_,c,u,k;return u=new ke({props:{code:`from transformers import DebertaTokenizer, DebertaModel
import torch

tokenizer = DebertaTokenizer.from_pretrained("microsoft/deberta-base")
model = DebertaModel.from_pretrained("microsoft/deberta-base")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DebertaTokenizer, DebertaModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DebertaTokenizer.from_pretrained(<span class="hljs-string">&quot;microsoft/deberta-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DebertaModel.from_pretrained(<span class="hljs-string">&quot;microsoft/deberta-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){d=a("p"),_=n("Example:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Example:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function MT(x){let d,_,c,u,k;return{c(){d=a("p"),_=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=n("Module"),k=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r(f,"CODE",{});var z=i(c);u=s(z,"Module"),z.forEach(t),k=s(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(l,f){b(l,d,f),e(d,_),e(d,c),e(c,u),e(d,k)},d(l){l&&t(d)}}}function CT(x){let d,_,c,u,k;return u=new ke({props:{code:`from transformers import DebertaTokenizer, DebertaForMaskedLM
import torch

tokenizer = DebertaTokenizer.from_pretrained("lsanochkin/deberta-large-feedback")
model = DebertaForMaskedLM.from_pretrained("lsanochkin/deberta-large-feedback")

inputs = tokenizer("The capital of France is [MASK].", return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# retrieve index of [MASK]
mask_token_index = (inputs.input_ids == tokenizer.mask_token_id)[0].nonzero(as_tuple=True)[0]

predicted_token_id = logits[0, mask_token_index].argmax(axis=-1)
tokenizer.decode(predicted_token_id)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DebertaTokenizer, DebertaForMaskedLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DebertaTokenizer.from_pretrained(<span class="hljs-string">&quot;lsanochkin/deberta-large-feedback&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DebertaForMaskedLM.from_pretrained(<span class="hljs-string">&quot;lsanochkin/deberta-large-feedback&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;The capital of France is [MASK].&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># retrieve index of [MASK]</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>mask_token_index = (inputs.input_ids == tokenizer.mask_token_id)[<span class="hljs-number">0</span>].nonzero(as_tuple=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_token_id = logits[<span class="hljs-number">0</span>, mask_token_index].argmax(axis=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.decode(predicted_token_id)
<span class="hljs-string">&#x27; Paris&#x27;</span>`}}),{c(){d=a("p"),_=n("Example:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Example:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function PT(x){let d,_;return d=new ke({props:{code:`labels = tokenizer("The capital of France is Paris.", return_tensors="pt")["input_ids"]
# mask labels of non-[MASK] tokens
labels = torch.where(inputs.input_ids == tokenizer.mask_token_id, labels, -100)

outputs = model(**inputs, labels=labels)
round(outputs.loss.item(), 2)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>labels = tokenizer(<span class="hljs-string">&quot;The capital of France is Paris.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)[<span class="hljs-string">&quot;input_ids&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mask labels of non-[MASK] tokens</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.where(inputs.input_ids == tokenizer.mask_token_id, labels, -<span class="hljs-number">100</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=labels)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(outputs.loss.item(), <span class="hljs-number">2</span>)
<span class="hljs-number">0.54</span>`}}),{c(){T(d.$$.fragment)},l(c){y(d.$$.fragment,c)},m(c,u){$(d,c,u),_=!0},p:be,i(c){_||(v(d.$$.fragment,c),_=!0)},o(c){D(d.$$.fragment,c),_=!1},d(c){E(d,c)}}}function AT(x){let d,_,c,u,k;return{c(){d=a("p"),_=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=n("Module"),k=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r(f,"CODE",{});var z=i(c);u=s(z,"Module"),z.forEach(t),k=s(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(l,f){b(l,d,f),e(d,_),e(d,c),e(c,u),e(d,k)},d(l){l&&t(d)}}}function LT(x){let d,_,c,u,k;return u=new ke({props:{code:`import torch
from transformers import DebertaTokenizer, DebertaForSequenceClassification

tokenizer = DebertaTokenizer.from_pretrained("hf-internal-testing/tiny-random-deberta")
model = DebertaForSequenceClassification.from_pretrained("hf-internal-testing/tiny-random-deberta")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

predicted_class_id = logits.argmax().item()
model.config.id2label[predicted_class_id]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DebertaTokenizer, DebertaForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DebertaTokenizer.from_pretrained(<span class="hljs-string">&quot;hf-internal-testing/tiny-random-deberta&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DebertaForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;hf-internal-testing/tiny-random-deberta&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_id = logits.argmax().item()
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.id2label[predicted_class_id]
<span class="hljs-string">&#x27;LABEL_0&#x27;</span>`}}),{c(){d=a("p"),_=n("Example of single-label classification:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Example of single-label classification:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function BT(x){let d,_;return d=new ke({props:{code:'# To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\nnum_labels = len(model.config.id2label)\nmodel = DebertaForSequenceClassification.from_pretrained("hf-internal-testing/tiny-random-deberta", num_labels=num_labels)\n\nlabels = torch.tensor([1])\nloss = model(**inputs, labels=labels).loss\nround(loss.item(), 2)',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># To train a model on \`num_labels\` classes, you can pass \`num_labels=num_labels\` to \`.from_pretrained(...)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>num_labels = <span class="hljs-built_in">len</span>(model.config.id2label)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DebertaForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;hf-internal-testing/tiny-random-deberta&quot;</span>, num_labels=num_labels)

<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.tensor([<span class="hljs-number">1</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = model(**inputs, labels=labels).loss
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(loss.item(), <span class="hljs-number">2</span>)
<span class="hljs-number">0.69</span>`}}),{c(){T(d.$$.fragment)},l(c){y(d.$$.fragment,c)},m(c,u){$(d,c,u),_=!0},p:be,i(c){_||(v(d.$$.fragment,c),_=!0)},o(c){D(d.$$.fragment,c),_=!1},d(c){E(d,c)}}}function RT(x){let d,_,c,u,k;return u=new ke({props:{code:`import torch
from transformers import DebertaTokenizer, DebertaForSequenceClassification

tokenizer = DebertaTokenizer.from_pretrained("hf-internal-testing/tiny-random-deberta")
model = DebertaForSequenceClassification.from_pretrained("hf-internal-testing/tiny-random-deberta", problem_type="multi_label_classification")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

predicted_class_id = logits.argmax().item()
model.config.id2label[predicted_class_id]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DebertaTokenizer, DebertaForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DebertaTokenizer.from_pretrained(<span class="hljs-string">&quot;hf-internal-testing/tiny-random-deberta&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DebertaForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;hf-internal-testing/tiny-random-deberta&quot;</span>, problem_type=<span class="hljs-string">&quot;multi_label_classification&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_id = logits.argmax().item()
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.id2label[predicted_class_id]
<span class="hljs-string">&#x27;LABEL_0&#x27;</span>`}}),{c(){d=a("p"),_=n("Example of multi-label classification:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Example of multi-label classification:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function IT(x){let d,_;return d=new ke({props:{code:`# To train a model on \`num_labels\` classes, you can pass \`num_labels=num_labels\` to \`.from_pretrained(...)\`
num_labels = len(model.config.id2label)
model = DebertaForSequenceClassification.from_pretrained(
    "hf-internal-testing/tiny-random-deberta", num_labels=num_labels, problem_type="multi_label_classification"
)

labels = torch.nn.functional.one_hot(torch.tensor([predicted_class_id]), num_classes=num_labels).to(
    torch.float
)
loss = model(**inputs, labels=labels).loss
loss.backward()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># To train a model on \`num_labels\` classes, you can pass \`num_labels=num_labels\` to \`.from_pretrained(...)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>num_labels = <span class="hljs-built_in">len</span>(model.config.id2label)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DebertaForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;hf-internal-testing/tiny-random-deberta&quot;</span>, num_labels=num_labels, problem_type=<span class="hljs-string">&quot;multi_label_classification&quot;</span>
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.nn.functional.one_hot(torch.tensor([predicted_class_id]), num_classes=num_labels).to(
<span class="hljs-meta">... </span>    torch.<span class="hljs-built_in">float</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = model(**inputs, labels=labels).loss
<span class="hljs-meta">&gt;&gt;&gt; </span>loss.backward()`}}),{c(){T(d.$$.fragment)},l(c){y(d.$$.fragment,c)},m(c,u){$(d,c,u),_=!0},p:be,i(c){_||(v(d.$$.fragment,c),_=!0)},o(c){D(d.$$.fragment,c),_=!1},d(c){E(d,c)}}}function ST(x){let d,_,c,u,k;return{c(){d=a("p"),_=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=n("Module"),k=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r(f,"CODE",{});var z=i(c);u=s(z,"Module"),z.forEach(t),k=s(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(l,f){b(l,d,f),e(d,_),e(d,c),e(c,u),e(d,k)},d(l){l&&t(d)}}}function OT(x){let d,_,c,u,k;return u=new ke({props:{code:`from transformers import DebertaTokenizer, DebertaForTokenClassification
import torch

tokenizer = DebertaTokenizer.from_pretrained("dbsamu/deberta-base-finetuned-ner")
model = DebertaForTokenClassification.from_pretrained("dbsamu/deberta-base-finetuned-ner")

inputs = tokenizer(
    "HuggingFace is a company based in Paris and New York", add_special_tokens=False, return_tensors="pt"
)

with torch.no_grad():
    logits = model(**inputs).logits

predicted_token_class_ids = logits.argmax(-1)

# Note that tokens are classified rather then input words which means that
# there might be more predicted token classes than words.
# Multiple token classes might account for the same word
predicted_tokens_classes = [model.config.id2label[t.item()] for t in predicted_token_class_ids[0]]
predicted_tokens_classes`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DebertaTokenizer, DebertaForTokenClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DebertaTokenizer.from_pretrained(<span class="hljs-string">&quot;dbsamu/deberta-base-finetuned-ner&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DebertaForTokenClassification.from_pretrained(<span class="hljs-string">&quot;dbsamu/deberta-base-finetuned-ner&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;HuggingFace is a company based in Paris and New York&quot;</span>, add_special_tokens=<span class="hljs-literal">False</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_token_class_ids = logits.argmax(-<span class="hljs-number">1</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Note that tokens are classified rather then input words which means that</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># there might be more predicted token classes than words.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Multiple token classes might account for the same word</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_tokens_classes = [model.config.id2label[t.item()] <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> predicted_token_class_ids[<span class="hljs-number">0</span>]]
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_tokens_classes
[<span class="hljs-string">&#x27;LABEL_0&#x27;</span>, <span class="hljs-string">&#x27;LABEL_0&#x27;</span>, <span class="hljs-string">&#x27;LABEL_0&#x27;</span>, <span class="hljs-string">&#x27;LABEL_0&#x27;</span>, <span class="hljs-string">&#x27;LABEL_0&#x27;</span>, <span class="hljs-string">&#x27;LABEL_0&#x27;</span>, <span class="hljs-string">&#x27;LABEL_0&#x27;</span>, <span class="hljs-string">&#x27;LABEL_0&#x27;</span>, <span class="hljs-string">&#x27;LABEL_0&#x27;</span>, <span class="hljs-string">&#x27;LABEL_0&#x27;</span>, <span class="hljs-string">&#x27;LABEL_0&#x27;</span>, <span class="hljs-string">&#x27;LABEL_0&#x27;</span>]`}}),{c(){d=a("p"),_=n("Example:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Example:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function NT(x){let d,_;return d=new ke({props:{code:`labels = predicted_token_class_ids
loss = model(**inputs, labels=labels).loss
round(loss.item(), 2)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>labels = predicted_token_class_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = model(**inputs, labels=labels).loss
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(loss.item(), <span class="hljs-number">2</span>)
<span class="hljs-number">0.04</span>`}}),{c(){T(d.$$.fragment)},l(c){y(d.$$.fragment,c)},m(c,u){$(d,c,u),_=!0},p:be,i(c){_||(v(d.$$.fragment,c),_=!0)},o(c){D(d.$$.fragment,c),_=!1},d(c){E(d,c)}}}function WT(x){let d,_,c,u,k;return{c(){d=a("p"),_=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=n("Module"),k=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r(f,"CODE",{});var z=i(c);u=s(z,"Module"),z.forEach(t),k=s(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(l,f){b(l,d,f),e(d,_),e(d,c),e(c,u),e(d,k)},d(l){l&&t(d)}}}function HT(x){let d,_,c,u,k;return u=new ke({props:{code:`from transformers import DebertaTokenizer, DebertaForQuestionAnswering
import torch

tokenizer = DebertaTokenizer.from_pretrained("Palak/microsoft_deberta-large_squad")
model = DebertaForQuestionAnswering.from_pretrained("Palak/microsoft_deberta-large_squad")

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"

inputs = tokenizer(question, text, return_tensors="pt")
with torch.no_grad():
    outputs = model(**inputs)

answer_start_index = outputs.start_logits.argmax()
answer_end_index = outputs.end_logits.argmax()

predict_answer_tokens = inputs.input_ids[0, answer_start_index : answer_end_index + 1]
tokenizer.decode(predict_answer_tokens, skip_special_tokens=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DebertaTokenizer, DebertaForQuestionAnswering
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DebertaTokenizer.from_pretrained(<span class="hljs-string">&quot;Palak/microsoft_deberta-large_squad&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DebertaForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;Palak/microsoft_deberta-large_squad&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(question, text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>answer_start_index = outputs.start_logits.argmax()
<span class="hljs-meta">&gt;&gt;&gt; </span>answer_end_index = outputs.end_logits.argmax()

<span class="hljs-meta">&gt;&gt;&gt; </span>predict_answer_tokens = inputs.input_ids[<span class="hljs-number">0</span>, answer_start_index : answer_end_index + <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.decode(predict_answer_tokens, skip_special_tokens=<span class="hljs-literal">True</span>)
<span class="hljs-string">&#x27; a nice puppet&#x27;</span>`}}),{c(){d=a("p"),_=n("Example:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Example:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function UT(x){let d,_;return d=new ke({props:{code:`# target is "nice puppet"
target_start_index = torch.tensor([12])
target_end_index = torch.tensor([14])

outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)
loss = outputs.loss
round(loss.item(), 2)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># target is &quot;nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>target_start_index = torch.tensor([<span class="hljs-number">12</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>target_end_index = torch.tensor([<span class="hljs-number">14</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(loss.item(), <span class="hljs-number">2</span>)
<span class="hljs-number">0.14</span>`}}),{c(){T(d.$$.fragment)},l(c){y(d.$$.fragment,c)},m(c,u){$(d,c,u),_=!0},p:be,i(c){_||(v(d.$$.fragment,c),_=!0)},o(c){D(d.$$.fragment,c),_=!1},d(c){E(d,c)}}}function QT(x){let d,_,c,u,k,l,f,z,ae,V,B,oe,se,F,Ee,G,Fe,we,S,xe,le,J,qe,Te,Q,ze,ye,K,je,$e,ne,M,C,de,X,Me,ve,R,Ce,ce,P,Pe,W,Ae,Le,H,Be,Re,I,re,O,me,Z,A,ue,L,De,fe;return{c(){d=a("p"),_=n("TensorFlow models and layers in "),c=a("code"),u=n("transformers"),k=n(" accept two formats as input:"),l=p(),f=a("ul"),z=a("li"),ae=n("having all inputs as keyword arguments (like PyTorch models), or"),V=p(),B=a("li"),oe=n("having all inputs as a list, tuple or dict in the first positional argument."),se=p(),F=a("p"),Ee=n(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),G=a("code"),Fe=n("model.fit()"),we=n(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),S=a("code"),xe=n("model.fit()"),le=n(` supports! If, however, you want to use the second
format outside of Keras methods like `),J=a("code"),qe=n("fit()"),Te=n(" and "),Q=a("code"),ze=n("predict()"),ye=n(`, such as when creating your own layers or models with
the Keras `),K=a("code"),je=n("Functional"),$e=n(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ne=p(),M=a("ul"),C=a("li"),de=n("a single Tensor with "),X=a("code"),Me=n("input_ids"),ve=n(" only and nothing else: "),R=a("code"),Ce=n("model(input_ids)"),ce=p(),P=a("li"),Pe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),W=a("code"),Ae=n("model([input_ids, attention_mask])"),Le=n(" or "),H=a("code"),Be=n("model([input_ids, attention_mask, token_type_ids])"),Re=p(),I=a("li"),re=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),O=a("code"),me=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),Z=p(),A=a("p"),ue=n(`Note that when creating models and layers with
`),L=a("a"),De=n("subclassing"),fe=n(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(w){d=r(w,"P",{});var q=i(d);_=s(q,"TensorFlow models and layers in "),c=r(q,"CODE",{});var Oe=i(c);u=s(Oe,"transformers"),Oe.forEach(t),k=s(q," accept two formats as input:"),q.forEach(t),l=h(w),f=r(w,"UL",{});var ie=i(f);z=r(ie,"LI",{});var pe=i(z);ae=s(pe,"having all inputs as keyword arguments (like PyTorch models), or"),pe.forEach(t),V=h(ie),B=r(ie,"LI",{});var Ne=i(B);oe=s(Ne,"having all inputs as a list, tuple or dict in the first positional argument."),Ne.forEach(t),ie.forEach(t),se=h(w),F=r(w,"P",{});var j=i(F);Ee=s(j,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),G=r(j,"CODE",{});var We=i(G);Fe=s(We,"model.fit()"),We.forEach(t),we=s(j,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),S=r(j,"CODE",{});var Ke=i(S);xe=s(Ke,"model.fit()"),Ke.forEach(t),le=s(j,` supports! If, however, you want to use the second
format outside of Keras methods like `),J=r(j,"CODE",{});var Ge=i(J);qe=s(Ge,"fit()"),Ge.forEach(t),Te=s(j," and "),Q=r(j,"CODE",{});var Ve=i(Q);ze=s(Ve,"predict()"),Ve.forEach(t),ye=s(j,`, such as when creating your own layers or models with
the Keras `),K=r(j,"CODE",{});var He=i(K);je=s(He,"Functional"),He.forEach(t),$e=s(j,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),j.forEach(t),ne=h(w),M=r(w,"UL",{});var N=i(M);C=r(N,"LI",{});var U=i(C);de=s(U,"a single Tensor with "),X=r(U,"CODE",{});var Je=i(X);Me=s(Je,"input_ids"),Je.forEach(t),ve=s(U," only and nothing else: "),R=r(U,"CODE",{});var Xe=i(R);Ce=s(Xe,"model(input_ids)"),Xe.forEach(t),U.forEach(t),ce=h(N),P=r(N,"LI",{});var Y=i(P);Pe=s(Y,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),W=r(Y,"CODE",{});var ge=i(W);Ae=s(ge,"model([input_ids, attention_mask])"),ge.forEach(t),Le=s(Y," or "),H=r(Y,"CODE",{});var Qe=i(H);Be=s(Qe,"model([input_ids, attention_mask, token_type_ids])"),Qe.forEach(t),Y.forEach(t),Re=h(N),I=r(N,"LI",{});var Ie=i(I);re=s(Ie,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),O=r(Ie,"CODE",{});var Ye=i(O);me=s(Ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),Ye.forEach(t),Ie.forEach(t),N.forEach(t),Z=h(w),A=r(w,"P",{});var ee=i(A);ue=s(ee,`Note that when creating models and layers with
`),L=r(ee,"A",{href:!0,rel:!0});var Ze=i(L);De=s(Ze,"subclassing"),Ze.forEach(t),fe=s(ee,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),ee.forEach(t),this.h()},h(){m(L,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),m(L,"rel","nofollow")},m(w,q){b(w,d,q),e(d,_),e(d,c),e(c,u),e(d,k),b(w,l,q),b(w,f,q),e(f,z),e(z,ae),e(f,V),e(f,B),e(B,oe),b(w,se,q),b(w,F,q),e(F,Ee),e(F,G),e(G,Fe),e(F,we),e(F,S),e(S,xe),e(F,le),e(F,J),e(J,qe),e(F,Te),e(F,Q),e(Q,ze),e(F,ye),e(F,K),e(K,je),e(F,$e),b(w,ne,q),b(w,M,q),e(M,C),e(C,de),e(C,X),e(X,Me),e(C,ve),e(C,R),e(R,Ce),e(M,ce),e(M,P),e(P,Pe),e(P,W),e(W,Ae),e(P,Le),e(P,H),e(H,Be),e(M,Re),e(M,I),e(I,re),e(I,O),e(O,me),b(w,Z,q),b(w,A,q),e(A,ue),e(A,L),e(L,De),e(A,fe)},d(w){w&&t(d),w&&t(l),w&&t(f),w&&t(se),w&&t(F),w&&t(ne),w&&t(M),w&&t(Z),w&&t(A)}}}function KT(x){let d,_,c,u,k;return{c(){d=a("p"),_=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=n("Module"),k=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r(f,"CODE",{});var z=i(c);u=s(z,"Module"),z.forEach(t),k=s(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(l,f){b(l,d,f),e(d,_),e(d,c),e(c,u),e(d,k)},d(l){l&&t(d)}}}function GT(x){let d,_,c,u,k;return u=new ke({props:{code:`from transformers import DebertaTokenizer, TFDebertaModel
import tensorflow as tf

tokenizer = DebertaTokenizer.from_pretrained("kamalkraj/deberta-base")
model = TFDebertaModel.from_pretrained("kamalkraj/deberta-base")

inputs = tokenizer("Hello, my dog is cute", return_tensors="tf")
outputs = model(inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DebertaTokenizer, TFDebertaModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DebertaTokenizer.from_pretrained(<span class="hljs-string">&quot;kamalkraj/deberta-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFDebertaModel.from_pretrained(<span class="hljs-string">&quot;kamalkraj/deberta-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){d=a("p"),_=n("Example:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Example:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function VT(x){let d,_,c,u,k,l,f,z,ae,V,B,oe,se,F,Ee,G,Fe,we,S,xe,le,J,qe,Te,Q,ze,ye,K,je,$e,ne,M,C,de,X,Me,ve,R,Ce,ce,P,Pe,W,Ae,Le,H,Be,Re,I,re,O,me,Z,A,ue,L,De,fe;return{c(){d=a("p"),_=n("TensorFlow models and layers in "),c=a("code"),u=n("transformers"),k=n(" accept two formats as input:"),l=p(),f=a("ul"),z=a("li"),ae=n("having all inputs as keyword arguments (like PyTorch models), or"),V=p(),B=a("li"),oe=n("having all inputs as a list, tuple or dict in the first positional argument."),se=p(),F=a("p"),Ee=n(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),G=a("code"),Fe=n("model.fit()"),we=n(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),S=a("code"),xe=n("model.fit()"),le=n(` supports! If, however, you want to use the second
format outside of Keras methods like `),J=a("code"),qe=n("fit()"),Te=n(" and "),Q=a("code"),ze=n("predict()"),ye=n(`, such as when creating your own layers or models with
the Keras `),K=a("code"),je=n("Functional"),$e=n(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ne=p(),M=a("ul"),C=a("li"),de=n("a single Tensor with "),X=a("code"),Me=n("input_ids"),ve=n(" only and nothing else: "),R=a("code"),Ce=n("model(input_ids)"),ce=p(),P=a("li"),Pe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),W=a("code"),Ae=n("model([input_ids, attention_mask])"),Le=n(" or "),H=a("code"),Be=n("model([input_ids, attention_mask, token_type_ids])"),Re=p(),I=a("li"),re=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),O=a("code"),me=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),Z=p(),A=a("p"),ue=n(`Note that when creating models and layers with
`),L=a("a"),De=n("subclassing"),fe=n(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(w){d=r(w,"P",{});var q=i(d);_=s(q,"TensorFlow models and layers in "),c=r(q,"CODE",{});var Oe=i(c);u=s(Oe,"transformers"),Oe.forEach(t),k=s(q," accept two formats as input:"),q.forEach(t),l=h(w),f=r(w,"UL",{});var ie=i(f);z=r(ie,"LI",{});var pe=i(z);ae=s(pe,"having all inputs as keyword arguments (like PyTorch models), or"),pe.forEach(t),V=h(ie),B=r(ie,"LI",{});var Ne=i(B);oe=s(Ne,"having all inputs as a list, tuple or dict in the first positional argument."),Ne.forEach(t),ie.forEach(t),se=h(w),F=r(w,"P",{});var j=i(F);Ee=s(j,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),G=r(j,"CODE",{});var We=i(G);Fe=s(We,"model.fit()"),We.forEach(t),we=s(j,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),S=r(j,"CODE",{});var Ke=i(S);xe=s(Ke,"model.fit()"),Ke.forEach(t),le=s(j,` supports! If, however, you want to use the second
format outside of Keras methods like `),J=r(j,"CODE",{});var Ge=i(J);qe=s(Ge,"fit()"),Ge.forEach(t),Te=s(j," and "),Q=r(j,"CODE",{});var Ve=i(Q);ze=s(Ve,"predict()"),Ve.forEach(t),ye=s(j,`, such as when creating your own layers or models with
the Keras `),K=r(j,"CODE",{});var He=i(K);je=s(He,"Functional"),He.forEach(t),$e=s(j,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),j.forEach(t),ne=h(w),M=r(w,"UL",{});var N=i(M);C=r(N,"LI",{});var U=i(C);de=s(U,"a single Tensor with "),X=r(U,"CODE",{});var Je=i(X);Me=s(Je,"input_ids"),Je.forEach(t),ve=s(U," only and nothing else: "),R=r(U,"CODE",{});var Xe=i(R);Ce=s(Xe,"model(input_ids)"),Xe.forEach(t),U.forEach(t),ce=h(N),P=r(N,"LI",{});var Y=i(P);Pe=s(Y,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),W=r(Y,"CODE",{});var ge=i(W);Ae=s(ge,"model([input_ids, attention_mask])"),ge.forEach(t),Le=s(Y," or "),H=r(Y,"CODE",{});var Qe=i(H);Be=s(Qe,"model([input_ids, attention_mask, token_type_ids])"),Qe.forEach(t),Y.forEach(t),Re=h(N),I=r(N,"LI",{});var Ie=i(I);re=s(Ie,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),O=r(Ie,"CODE",{});var Ye=i(O);me=s(Ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),Ye.forEach(t),Ie.forEach(t),N.forEach(t),Z=h(w),A=r(w,"P",{});var ee=i(A);ue=s(ee,`Note that when creating models and layers with
`),L=r(ee,"A",{href:!0,rel:!0});var Ze=i(L);De=s(Ze,"subclassing"),Ze.forEach(t),fe=s(ee,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),ee.forEach(t),this.h()},h(){m(L,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),m(L,"rel","nofollow")},m(w,q){b(w,d,q),e(d,_),e(d,c),e(c,u),e(d,k),b(w,l,q),b(w,f,q),e(f,z),e(z,ae),e(f,V),e(f,B),e(B,oe),b(w,se,q),b(w,F,q),e(F,Ee),e(F,G),e(G,Fe),e(F,we),e(F,S),e(S,xe),e(F,le),e(F,J),e(J,qe),e(F,Te),e(F,Q),e(Q,ze),e(F,ye),e(F,K),e(K,je),e(F,$e),b(w,ne,q),b(w,M,q),e(M,C),e(C,de),e(C,X),e(X,Me),e(C,ve),e(C,R),e(R,Ce),e(M,ce),e(M,P),e(P,Pe),e(P,W),e(W,Ae),e(P,Le),e(P,H),e(H,Be),e(M,Re),e(M,I),e(I,re),e(I,O),e(O,me),b(w,Z,q),b(w,A,q),e(A,ue),e(A,L),e(L,De),e(A,fe)},d(w){w&&t(d),w&&t(l),w&&t(f),w&&t(se),w&&t(F),w&&t(ne),w&&t(M),w&&t(Z),w&&t(A)}}}function JT(x){let d,_,c,u,k;return{c(){d=a("p"),_=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=n("Module"),k=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r(f,"CODE",{});var z=i(c);u=s(z,"Module"),z.forEach(t),k=s(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(l,f){b(l,d,f),e(d,_),e(d,c),e(c,u),e(d,k)},d(l){l&&t(d)}}}function XT(x){let d,_,c,u,k;return u=new ke({props:{code:`from transformers import DebertaTokenizer, TFDebertaForMaskedLM
import tensorflow as tf

tokenizer = DebertaTokenizer.from_pretrained("kamalkraj/deberta-base")
model = TFDebertaForMaskedLM.from_pretrained("kamalkraj/deberta-base")

inputs = tokenizer("The capital of France is [MASK].", return_tensors="tf")
logits = model(**inputs).logits

# retrieve index of [MASK]
mask_token_index = tf.where((inputs.input_ids == tokenizer.mask_token_id)[0])
selected_logits = tf.gather_nd(logits[0], indices=mask_token_index)

predicted_token_id = tf.math.argmax(selected_logits, axis=-1)
tokenizer.decode(predicted_token_id)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DebertaTokenizer, TFDebertaForMaskedLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DebertaTokenizer.from_pretrained(<span class="hljs-string">&quot;kamalkraj/deberta-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFDebertaForMaskedLM.from_pretrained(<span class="hljs-string">&quot;kamalkraj/deberta-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;The capital of France is [MASK].&quot;</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># retrieve index of [MASK]</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>mask_token_index = tf.where((inputs.input_ids == tokenizer.mask_token_id)[<span class="hljs-number">0</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>selected_logits = tf.gather_nd(logits[<span class="hljs-number">0</span>], indices=mask_token_index)

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_token_id = tf.math.argmax(selected_logits, axis=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.decode(predicted_token_id)
`}}),{c(){d=a("p"),_=n("Example:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Example:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function YT(x){let d,_;return d=new ke({props:{code:`labels = tokenizer("The capital of France is Paris.", return_tensors="tf")["input_ids"]
# mask labels of non-[MASK] tokens
labels = tf.where(inputs.input_ids == tokenizer.mask_token_id, labels, -100)

outputs = model(**inputs, labels=labels)
round(float(outputs.loss), 2)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>labels = tokenizer(<span class="hljs-string">&quot;The capital of France is Paris.&quot;</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)[<span class="hljs-string">&quot;input_ids&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mask labels of non-[MASK] tokens</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = tf.where(inputs.input_ids == tokenizer.mask_token_id, labels, -<span class="hljs-number">100</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=labels)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(<span class="hljs-built_in">float</span>(outputs.loss), <span class="hljs-number">2</span>)
`}}),{c(){T(d.$$.fragment)},l(c){y(d.$$.fragment,c)},m(c,u){$(d,c,u),_=!0},p:be,i(c){_||(v(d.$$.fragment,c),_=!0)},o(c){D(d.$$.fragment,c),_=!1},d(c){E(d,c)}}}function ZT(x){let d,_,c,u,k,l,f,z,ae,V,B,oe,se,F,Ee,G,Fe,we,S,xe,le,J,qe,Te,Q,ze,ye,K,je,$e,ne,M,C,de,X,Me,ve,R,Ce,ce,P,Pe,W,Ae,Le,H,Be,Re,I,re,O,me,Z,A,ue,L,De,fe;return{c(){d=a("p"),_=n("TensorFlow models and layers in "),c=a("code"),u=n("transformers"),k=n(" accept two formats as input:"),l=p(),f=a("ul"),z=a("li"),ae=n("having all inputs as keyword arguments (like PyTorch models), or"),V=p(),B=a("li"),oe=n("having all inputs as a list, tuple or dict in the first positional argument."),se=p(),F=a("p"),Ee=n(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),G=a("code"),Fe=n("model.fit()"),we=n(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),S=a("code"),xe=n("model.fit()"),le=n(` supports! If, however, you want to use the second
format outside of Keras methods like `),J=a("code"),qe=n("fit()"),Te=n(" and "),Q=a("code"),ze=n("predict()"),ye=n(`, such as when creating your own layers or models with
the Keras `),K=a("code"),je=n("Functional"),$e=n(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ne=p(),M=a("ul"),C=a("li"),de=n("a single Tensor with "),X=a("code"),Me=n("input_ids"),ve=n(" only and nothing else: "),R=a("code"),Ce=n("model(input_ids)"),ce=p(),P=a("li"),Pe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),W=a("code"),Ae=n("model([input_ids, attention_mask])"),Le=n(" or "),H=a("code"),Be=n("model([input_ids, attention_mask, token_type_ids])"),Re=p(),I=a("li"),re=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),O=a("code"),me=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),Z=p(),A=a("p"),ue=n(`Note that when creating models and layers with
`),L=a("a"),De=n("subclassing"),fe=n(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(w){d=r(w,"P",{});var q=i(d);_=s(q,"TensorFlow models and layers in "),c=r(q,"CODE",{});var Oe=i(c);u=s(Oe,"transformers"),Oe.forEach(t),k=s(q," accept two formats as input:"),q.forEach(t),l=h(w),f=r(w,"UL",{});var ie=i(f);z=r(ie,"LI",{});var pe=i(z);ae=s(pe,"having all inputs as keyword arguments (like PyTorch models), or"),pe.forEach(t),V=h(ie),B=r(ie,"LI",{});var Ne=i(B);oe=s(Ne,"having all inputs as a list, tuple or dict in the first positional argument."),Ne.forEach(t),ie.forEach(t),se=h(w),F=r(w,"P",{});var j=i(F);Ee=s(j,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),G=r(j,"CODE",{});var We=i(G);Fe=s(We,"model.fit()"),We.forEach(t),we=s(j,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),S=r(j,"CODE",{});var Ke=i(S);xe=s(Ke,"model.fit()"),Ke.forEach(t),le=s(j,` supports! If, however, you want to use the second
format outside of Keras methods like `),J=r(j,"CODE",{});var Ge=i(J);qe=s(Ge,"fit()"),Ge.forEach(t),Te=s(j," and "),Q=r(j,"CODE",{});var Ve=i(Q);ze=s(Ve,"predict()"),Ve.forEach(t),ye=s(j,`, such as when creating your own layers or models with
the Keras `),K=r(j,"CODE",{});var He=i(K);je=s(He,"Functional"),He.forEach(t),$e=s(j,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),j.forEach(t),ne=h(w),M=r(w,"UL",{});var N=i(M);C=r(N,"LI",{});var U=i(C);de=s(U,"a single Tensor with "),X=r(U,"CODE",{});var Je=i(X);Me=s(Je,"input_ids"),Je.forEach(t),ve=s(U," only and nothing else: "),R=r(U,"CODE",{});var Xe=i(R);Ce=s(Xe,"model(input_ids)"),Xe.forEach(t),U.forEach(t),ce=h(N),P=r(N,"LI",{});var Y=i(P);Pe=s(Y,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),W=r(Y,"CODE",{});var ge=i(W);Ae=s(ge,"model([input_ids, attention_mask])"),ge.forEach(t),Le=s(Y," or "),H=r(Y,"CODE",{});var Qe=i(H);Be=s(Qe,"model([input_ids, attention_mask, token_type_ids])"),Qe.forEach(t),Y.forEach(t),Re=h(N),I=r(N,"LI",{});var Ie=i(I);re=s(Ie,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),O=r(Ie,"CODE",{});var Ye=i(O);me=s(Ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),Ye.forEach(t),Ie.forEach(t),N.forEach(t),Z=h(w),A=r(w,"P",{});var ee=i(A);ue=s(ee,`Note that when creating models and layers with
`),L=r(ee,"A",{href:!0,rel:!0});var Ze=i(L);De=s(Ze,"subclassing"),Ze.forEach(t),fe=s(ee,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),ee.forEach(t),this.h()},h(){m(L,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),m(L,"rel","nofollow")},m(w,q){b(w,d,q),e(d,_),e(d,c),e(c,u),e(d,k),b(w,l,q),b(w,f,q),e(f,z),e(z,ae),e(f,V),e(f,B),e(B,oe),b(w,se,q),b(w,F,q),e(F,Ee),e(F,G),e(G,Fe),e(F,we),e(F,S),e(S,xe),e(F,le),e(F,J),e(J,qe),e(F,Te),e(F,Q),e(Q,ze),e(F,ye),e(F,K),e(K,je),e(F,$e),b(w,ne,q),b(w,M,q),e(M,C),e(C,de),e(C,X),e(X,Me),e(C,ve),e(C,R),e(R,Ce),e(M,ce),e(M,P),e(P,Pe),e(P,W),e(W,Ae),e(P,Le),e(P,H),e(H,Be),e(M,Re),e(M,I),e(I,re),e(I,O),e(O,me),b(w,Z,q),b(w,A,q),e(A,ue),e(A,L),e(L,De),e(A,fe)},d(w){w&&t(d),w&&t(l),w&&t(f),w&&t(se),w&&t(F),w&&t(ne),w&&t(M),w&&t(Z),w&&t(A)}}}function ey(x){let d,_,c,u,k;return{c(){d=a("p"),_=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=n("Module"),k=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r(f,"CODE",{});var z=i(c);u=s(z,"Module"),z.forEach(t),k=s(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(l,f){b(l,d,f),e(d,_),e(d,c),e(c,u),e(d,k)},d(l){l&&t(d)}}}function ty(x){let d,_,c,u,k;return u=new ke({props:{code:`from transformers import DebertaTokenizer, TFDebertaForSequenceClassification
import tensorflow as tf

tokenizer = DebertaTokenizer.from_pretrained("kamalkraj/deberta-base")
model = TFDebertaForSequenceClassification.from_pretrained("kamalkraj/deberta-base")

inputs = tokenizer("Hello, my dog is cute", return_tensors="tf")

logits = model(**inputs).logits

predicted_class_id = int(tf.math.argmax(logits, axis=-1)[0])
model.config.id2label[predicted_class_id]
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DebertaTokenizer, TFDebertaForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DebertaTokenizer.from_pretrained(<span class="hljs-string">&quot;kamalkraj/deberta-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFDebertaForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;kamalkraj/deberta-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_id = <span class="hljs-built_in">int</span>(tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.id2label[predicted_class_id]
`}}),{c(){d=a("p"),_=n("Example:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Example:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function oy(x){let d,_;return d=new ke({props:{code:`# To train a model on \`num_labels\` classes, you can pass \`num_labels=num_labels\` to \`.from_pretrained(...)\`
num_labels = len(model.config.id2label)
model = TFDebertaForSequenceClassification.from_pretrained("kamalkraj/deberta-base", num_labels=num_labels)

labels = tf.constant(1)
loss = model(**inputs, labels=labels).loss
round(float(loss), 2)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># To train a model on \`num_labels\` classes, you can pass \`num_labels=num_labels\` to \`.from_pretrained(...)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>num_labels = <span class="hljs-built_in">len</span>(model.config.id2label)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFDebertaForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;kamalkraj/deberta-base&quot;</span>, num_labels=num_labels)

<span class="hljs-meta">&gt;&gt;&gt; </span>labels = tf.constant(<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = model(**inputs, labels=labels).loss
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(<span class="hljs-built_in">float</span>(loss), <span class="hljs-number">2</span>)
`}}),{c(){T(d.$$.fragment)},l(c){y(d.$$.fragment,c)},m(c,u){$(d,c,u),_=!0},p:be,i(c){_||(v(d.$$.fragment,c),_=!0)},o(c){D(d.$$.fragment,c),_=!1},d(c){E(d,c)}}}function ny(x){let d,_,c,u,k,l,f,z,ae,V,B,oe,se,F,Ee,G,Fe,we,S,xe,le,J,qe,Te,Q,ze,ye,K,je,$e,ne,M,C,de,X,Me,ve,R,Ce,ce,P,Pe,W,Ae,Le,H,Be,Re,I,re,O,me,Z,A,ue,L,De,fe;return{c(){d=a("p"),_=n("TensorFlow models and layers in "),c=a("code"),u=n("transformers"),k=n(" accept two formats as input:"),l=p(),f=a("ul"),z=a("li"),ae=n("having all inputs as keyword arguments (like PyTorch models), or"),V=p(),B=a("li"),oe=n("having all inputs as a list, tuple or dict in the first positional argument."),se=p(),F=a("p"),Ee=n(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),G=a("code"),Fe=n("model.fit()"),we=n(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),S=a("code"),xe=n("model.fit()"),le=n(` supports! If, however, you want to use the second
format outside of Keras methods like `),J=a("code"),qe=n("fit()"),Te=n(" and "),Q=a("code"),ze=n("predict()"),ye=n(`, such as when creating your own layers or models with
the Keras `),K=a("code"),je=n("Functional"),$e=n(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ne=p(),M=a("ul"),C=a("li"),de=n("a single Tensor with "),X=a("code"),Me=n("input_ids"),ve=n(" only and nothing else: "),R=a("code"),Ce=n("model(input_ids)"),ce=p(),P=a("li"),Pe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),W=a("code"),Ae=n("model([input_ids, attention_mask])"),Le=n(" or "),H=a("code"),Be=n("model([input_ids, attention_mask, token_type_ids])"),Re=p(),I=a("li"),re=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),O=a("code"),me=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),Z=p(),A=a("p"),ue=n(`Note that when creating models and layers with
`),L=a("a"),De=n("subclassing"),fe=n(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(w){d=r(w,"P",{});var q=i(d);_=s(q,"TensorFlow models and layers in "),c=r(q,"CODE",{});var Oe=i(c);u=s(Oe,"transformers"),Oe.forEach(t),k=s(q," accept two formats as input:"),q.forEach(t),l=h(w),f=r(w,"UL",{});var ie=i(f);z=r(ie,"LI",{});var pe=i(z);ae=s(pe,"having all inputs as keyword arguments (like PyTorch models), or"),pe.forEach(t),V=h(ie),B=r(ie,"LI",{});var Ne=i(B);oe=s(Ne,"having all inputs as a list, tuple or dict in the first positional argument."),Ne.forEach(t),ie.forEach(t),se=h(w),F=r(w,"P",{});var j=i(F);Ee=s(j,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),G=r(j,"CODE",{});var We=i(G);Fe=s(We,"model.fit()"),We.forEach(t),we=s(j,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),S=r(j,"CODE",{});var Ke=i(S);xe=s(Ke,"model.fit()"),Ke.forEach(t),le=s(j,` supports! If, however, you want to use the second
format outside of Keras methods like `),J=r(j,"CODE",{});var Ge=i(J);qe=s(Ge,"fit()"),Ge.forEach(t),Te=s(j," and "),Q=r(j,"CODE",{});var Ve=i(Q);ze=s(Ve,"predict()"),Ve.forEach(t),ye=s(j,`, such as when creating your own layers or models with
the Keras `),K=r(j,"CODE",{});var He=i(K);je=s(He,"Functional"),He.forEach(t),$e=s(j,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),j.forEach(t),ne=h(w),M=r(w,"UL",{});var N=i(M);C=r(N,"LI",{});var U=i(C);de=s(U,"a single Tensor with "),X=r(U,"CODE",{});var Je=i(X);Me=s(Je,"input_ids"),Je.forEach(t),ve=s(U," only and nothing else: "),R=r(U,"CODE",{});var Xe=i(R);Ce=s(Xe,"model(input_ids)"),Xe.forEach(t),U.forEach(t),ce=h(N),P=r(N,"LI",{});var Y=i(P);Pe=s(Y,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),W=r(Y,"CODE",{});var ge=i(W);Ae=s(ge,"model([input_ids, attention_mask])"),ge.forEach(t),Le=s(Y," or "),H=r(Y,"CODE",{});var Qe=i(H);Be=s(Qe,"model([input_ids, attention_mask, token_type_ids])"),Qe.forEach(t),Y.forEach(t),Re=h(N),I=r(N,"LI",{});var Ie=i(I);re=s(Ie,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),O=r(Ie,"CODE",{});var Ye=i(O);me=s(Ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),Ye.forEach(t),Ie.forEach(t),N.forEach(t),Z=h(w),A=r(w,"P",{});var ee=i(A);ue=s(ee,`Note that when creating models and layers with
`),L=r(ee,"A",{href:!0,rel:!0});var Ze=i(L);De=s(Ze,"subclassing"),Ze.forEach(t),fe=s(ee,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),ee.forEach(t),this.h()},h(){m(L,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),m(L,"rel","nofollow")},m(w,q){b(w,d,q),e(d,_),e(d,c),e(c,u),e(d,k),b(w,l,q),b(w,f,q),e(f,z),e(z,ae),e(f,V),e(f,B),e(B,oe),b(w,se,q),b(w,F,q),e(F,Ee),e(F,G),e(G,Fe),e(F,we),e(F,S),e(S,xe),e(F,le),e(F,J),e(J,qe),e(F,Te),e(F,Q),e(Q,ze),e(F,ye),e(F,K),e(K,je),e(F,$e),b(w,ne,q),b(w,M,q),e(M,C),e(C,de),e(C,X),e(X,Me),e(C,ve),e(C,R),e(R,Ce),e(M,ce),e(M,P),e(P,Pe),e(P,W),e(W,Ae),e(P,Le),e(P,H),e(H,Be),e(M,Re),e(M,I),e(I,re),e(I,O),e(O,me),b(w,Z,q),b(w,A,q),e(A,ue),e(A,L),e(L,De),e(A,fe)},d(w){w&&t(d),w&&t(l),w&&t(f),w&&t(se),w&&t(F),w&&t(ne),w&&t(M),w&&t(Z),w&&t(A)}}}function sy(x){let d,_,c,u,k;return{c(){d=a("p"),_=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=n("Module"),k=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r(f,"CODE",{});var z=i(c);u=s(z,"Module"),z.forEach(t),k=s(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(l,f){b(l,d,f),e(d,_),e(d,c),e(c,u),e(d,k)},d(l){l&&t(d)}}}function ay(x){let d,_,c,u,k;return u=new ke({props:{code:`from transformers import DebertaTokenizer, TFDebertaForTokenClassification
import tensorflow as tf

tokenizer = DebertaTokenizer.from_pretrained("kamalkraj/deberta-base")
model = TFDebertaForTokenClassification.from_pretrained("kamalkraj/deberta-base")

inputs = tokenizer(
    "HuggingFace is a company based in Paris and New York", add_special_tokens=False, return_tensors="tf"
)

logits = model(**inputs).logits
predicted_token_class_ids = tf.math.argmax(logits, axis=-1)

# Note that tokens are classified rather then input words which means that
# there might be more predicted token classes than words.
# Multiple token classes might account for the same word
predicted_tokens_classes = [model.config.id2label[t] for t in predicted_token_class_ids[0].numpy().tolist()]
predicted_tokens_classes
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DebertaTokenizer, TFDebertaForTokenClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DebertaTokenizer.from_pretrained(<span class="hljs-string">&quot;kamalkraj/deberta-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFDebertaForTokenClassification.from_pretrained(<span class="hljs-string">&quot;kamalkraj/deberta-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;HuggingFace is a company based in Paris and New York&quot;</span>, add_special_tokens=<span class="hljs-literal">False</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>logits = model(**inputs).logits
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_token_class_ids = tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Note that tokens are classified rather then input words which means that</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># there might be more predicted token classes than words.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Multiple token classes might account for the same word</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_tokens_classes = [model.config.id2label[t] <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> predicted_token_class_ids[<span class="hljs-number">0</span>].numpy().tolist()]
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_tokens_classes
`}}),{c(){d=a("p"),_=n("Example:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Example:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function ry(x){let d,_;return d=new ke({props:{code:`labels = predicted_token_class_ids
loss = tf.math.reduce_mean(model(**inputs, labels=labels).loss)
round(float(loss), 2)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>labels = predicted_token_class_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = tf.math.reduce_mean(model(**inputs, labels=labels).loss)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(<span class="hljs-built_in">float</span>(loss), <span class="hljs-number">2</span>)
`}}),{c(){T(d.$$.fragment)},l(c){y(d.$$.fragment,c)},m(c,u){$(d,c,u),_=!0},p:be,i(c){_||(v(d.$$.fragment,c),_=!0)},o(c){D(d.$$.fragment,c),_=!1},d(c){E(d,c)}}}function iy(x){let d,_,c,u,k,l,f,z,ae,V,B,oe,se,F,Ee,G,Fe,we,S,xe,le,J,qe,Te,Q,ze,ye,K,je,$e,ne,M,C,de,X,Me,ve,R,Ce,ce,P,Pe,W,Ae,Le,H,Be,Re,I,re,O,me,Z,A,ue,L,De,fe;return{c(){d=a("p"),_=n("TensorFlow models and layers in "),c=a("code"),u=n("transformers"),k=n(" accept two formats as input:"),l=p(),f=a("ul"),z=a("li"),ae=n("having all inputs as keyword arguments (like PyTorch models), or"),V=p(),B=a("li"),oe=n("having all inputs as a list, tuple or dict in the first positional argument."),se=p(),F=a("p"),Ee=n(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),G=a("code"),Fe=n("model.fit()"),we=n(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),S=a("code"),xe=n("model.fit()"),le=n(` supports! If, however, you want to use the second
format outside of Keras methods like `),J=a("code"),qe=n("fit()"),Te=n(" and "),Q=a("code"),ze=n("predict()"),ye=n(`, such as when creating your own layers or models with
the Keras `),K=a("code"),je=n("Functional"),$e=n(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ne=p(),M=a("ul"),C=a("li"),de=n("a single Tensor with "),X=a("code"),Me=n("input_ids"),ve=n(" only and nothing else: "),R=a("code"),Ce=n("model(input_ids)"),ce=p(),P=a("li"),Pe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),W=a("code"),Ae=n("model([input_ids, attention_mask])"),Le=n(" or "),H=a("code"),Be=n("model([input_ids, attention_mask, token_type_ids])"),Re=p(),I=a("li"),re=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),O=a("code"),me=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),Z=p(),A=a("p"),ue=n(`Note that when creating models and layers with
`),L=a("a"),De=n("subclassing"),fe=n(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(w){d=r(w,"P",{});var q=i(d);_=s(q,"TensorFlow models and layers in "),c=r(q,"CODE",{});var Oe=i(c);u=s(Oe,"transformers"),Oe.forEach(t),k=s(q," accept two formats as input:"),q.forEach(t),l=h(w),f=r(w,"UL",{});var ie=i(f);z=r(ie,"LI",{});var pe=i(z);ae=s(pe,"having all inputs as keyword arguments (like PyTorch models), or"),pe.forEach(t),V=h(ie),B=r(ie,"LI",{});var Ne=i(B);oe=s(Ne,"having all inputs as a list, tuple or dict in the first positional argument."),Ne.forEach(t),ie.forEach(t),se=h(w),F=r(w,"P",{});var j=i(F);Ee=s(j,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),G=r(j,"CODE",{});var We=i(G);Fe=s(We,"model.fit()"),We.forEach(t),we=s(j,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),S=r(j,"CODE",{});var Ke=i(S);xe=s(Ke,"model.fit()"),Ke.forEach(t),le=s(j,` supports! If, however, you want to use the second
format outside of Keras methods like `),J=r(j,"CODE",{});var Ge=i(J);qe=s(Ge,"fit()"),Ge.forEach(t),Te=s(j," and "),Q=r(j,"CODE",{});var Ve=i(Q);ze=s(Ve,"predict()"),Ve.forEach(t),ye=s(j,`, such as when creating your own layers or models with
the Keras `),K=r(j,"CODE",{});var He=i(K);je=s(He,"Functional"),He.forEach(t),$e=s(j,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),j.forEach(t),ne=h(w),M=r(w,"UL",{});var N=i(M);C=r(N,"LI",{});var U=i(C);de=s(U,"a single Tensor with "),X=r(U,"CODE",{});var Je=i(X);Me=s(Je,"input_ids"),Je.forEach(t),ve=s(U," only and nothing else: "),R=r(U,"CODE",{});var Xe=i(R);Ce=s(Xe,"model(input_ids)"),Xe.forEach(t),U.forEach(t),ce=h(N),P=r(N,"LI",{});var Y=i(P);Pe=s(Y,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),W=r(Y,"CODE",{});var ge=i(W);Ae=s(ge,"model([input_ids, attention_mask])"),ge.forEach(t),Le=s(Y," or "),H=r(Y,"CODE",{});var Qe=i(H);Be=s(Qe,"model([input_ids, attention_mask, token_type_ids])"),Qe.forEach(t),Y.forEach(t),Re=h(N),I=r(N,"LI",{});var Ie=i(I);re=s(Ie,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),O=r(Ie,"CODE",{});var Ye=i(O);me=s(Ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),Ye.forEach(t),Ie.forEach(t),N.forEach(t),Z=h(w),A=r(w,"P",{});var ee=i(A);ue=s(ee,`Note that when creating models and layers with
`),L=r(ee,"A",{href:!0,rel:!0});var Ze=i(L);De=s(Ze,"subclassing"),Ze.forEach(t),fe=s(ee,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),ee.forEach(t),this.h()},h(){m(L,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),m(L,"rel","nofollow")},m(w,q){b(w,d,q),e(d,_),e(d,c),e(c,u),e(d,k),b(w,l,q),b(w,f,q),e(f,z),e(z,ae),e(f,V),e(f,B),e(B,oe),b(w,se,q),b(w,F,q),e(F,Ee),e(F,G),e(G,Fe),e(F,we),e(F,S),e(S,xe),e(F,le),e(F,J),e(J,qe),e(F,Te),e(F,Q),e(Q,ze),e(F,ye),e(F,K),e(K,je),e(F,$e),b(w,ne,q),b(w,M,q),e(M,C),e(C,de),e(C,X),e(X,Me),e(C,ve),e(C,R),e(R,Ce),e(M,ce),e(M,P),e(P,Pe),e(P,W),e(W,Ae),e(P,Le),e(P,H),e(H,Be),e(M,Re),e(M,I),e(I,re),e(I,O),e(O,me),b(w,Z,q),b(w,A,q),e(A,ue),e(A,L),e(L,De),e(A,fe)},d(w){w&&t(d),w&&t(l),w&&t(f),w&&t(se),w&&t(F),w&&t(ne),w&&t(M),w&&t(Z),w&&t(A)}}}function ly(x){let d,_,c,u,k;return{c(){d=a("p"),_=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),c=a("code"),u=n("Module"),k=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),c=r(f,"CODE",{});var z=i(c);u=s(z,"Module"),z.forEach(t),k=s(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(l,f){b(l,d,f),e(d,_),e(d,c),e(c,u),e(d,k)},d(l){l&&t(d)}}}function dy(x){let d,_,c,u,k;return u=new ke({props:{code:`from transformers import DebertaTokenizer, TFDebertaForQuestionAnswering
import tensorflow as tf

tokenizer = DebertaTokenizer.from_pretrained("kamalkraj/deberta-base")
model = TFDebertaForQuestionAnswering.from_pretrained("kamalkraj/deberta-base")

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"

inputs = tokenizer(question, text, return_tensors="tf")
outputs = model(**inputs)

answer_start_index = int(tf.math.argmax(outputs.start_logits, axis=-1)[0])
answer_end_index = int(tf.math.argmax(outputs.end_logits, axis=-1)[0])

predict_answer_tokens = inputs.input_ids[0, answer_start_index : answer_end_index + 1]
tokenizer.decode(predict_answer_tokens)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DebertaTokenizer, TFDebertaForQuestionAnswering
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DebertaTokenizer.from_pretrained(<span class="hljs-string">&quot;kamalkraj/deberta-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFDebertaForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;kamalkraj/deberta-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(question, text, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>answer_start_index = <span class="hljs-built_in">int</span>(tf.math.argmax(outputs.start_logits, axis=-<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>answer_end_index = <span class="hljs-built_in">int</span>(tf.math.argmax(outputs.end_logits, axis=-<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>predict_answer_tokens = inputs.input_ids[<span class="hljs-number">0</span>, answer_start_index : answer_end_index + <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.decode(predict_answer_tokens)
`}}),{c(){d=a("p"),_=n("Example:"),c=p(),T(u.$$.fragment)},l(l){d=r(l,"P",{});var f=i(d);_=s(f,"Example:"),f.forEach(t),c=h(l),y(u.$$.fragment,l)},m(l,f){b(l,d,f),e(d,_),b(l,c,f),$(u,l,f),k=!0},p:be,i(l){k||(v(u.$$.fragment,l),k=!0)},o(l){D(u.$$.fragment,l),k=!1},d(l){l&&t(d),l&&t(c),E(u,l)}}}function cy(x){let d,_;return d=new ke({props:{code:`# target is "nice puppet"
target_start_index = tf.constant([14])
target_end_index = tf.constant([15])

outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)
loss = tf.math.reduce_mean(outputs.loss)
round(float(loss), 2)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># target is &quot;nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>target_start_index = tf.constant([<span class="hljs-number">14</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>target_end_index = tf.constant([<span class="hljs-number">15</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = tf.math.reduce_mean(outputs.loss)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(<span class="hljs-built_in">float</span>(loss), <span class="hljs-number">2</span>)
`}}),{c(){T(d.$$.fragment)},l(c){y(d.$$.fragment,c)},m(c,u){$(d,c,u),_=!0},p:be,i(c){_||(v(d.$$.fragment,c),_=!0)},o(c){D(d.$$.fragment,c),_=!1},d(c){E(d,c)}}}function py(x){let d,_,c,u,k,l,f,z,ae,V,B,oe,se,F,Ee,G,Fe,we,S,xe,le,J,qe,Te,Q,ze,ye,K,je,$e,ne,M,C,de,X,Me,ve,R,Ce,ce,P,Pe,W,Ae,Le,H,Be,Re,I,re,O,me,Z,A,ue,L,De,fe,w,q,Oe,ie,pe,Ne,j,We,Ke,Ge,Ve,He,N,U,Je,Xe,Y,ge,Qe,Ie,Ye,ee,Ze,Vc,rs,Jc,Xc,Yc,Rt,Er,Zc,ep,is,tp,op,ls,np,sp,yd,ds,$d,vt,It,Fr,ap,rp,cs,ip,lp,ps,dp,cp,pp,St,xr,hp,fp,hs,mp,up,fs,gp,_p,bp,qr,ms,kp,wp,Tp,zr,us,yp,$p,vd,gs,Dd,Ot,Nt,jr,vp,Dp,_s,Ep,Fp,bs,xp,qp,zp,Wt,Mr,jp,Mp,ks,Cp,Pp,ws,Ap,Lp,Bp,Cr,Ts,Rp,Ip,Ed,ys,Fd,Ht,Ut,Pr,Sp,Op,$s,Np,Wp,vs,Hp,Up,Qp,Qt,Ar,Kp,Gp,Ds,Vp,Jp,Es,Xp,Yp,Zp,Lr,Fs,eh,th,xd,ho,Qo,$i,xs,oh,vi,nh,qd,wt,qs,sh,Ct,ah,Br,rh,ih,Rr,lh,dh,zs,ch,ph,hh,fo,fh,Ir,mh,uh,Sr,gh,_h,bh,Ko,zd,mo,Go,Di,js,kh,Ei,wh,jd,he,Ms,Th,Fi,yh,$h,xi,vh,Dh,Vo,Eh,Cs,Fh,qi,xh,qh,zh,Jo,jh,Ps,Mh,Or,Ch,Ph,Ah,Kt,As,Lh,zi,Bh,Rh,Ls,ji,Ih,Sh,Mi,Oh,Nh,Xo,Bs,Wh,uo,Hh,Ci,Uh,Qh,Pi,Kh,Gh,Vh,Dt,Rs,Jh,Ai,Xh,Yh,Yo,Zh,go,ef,Li,tf,of,Bi,nf,sf,af,Nr,Is,Md,_o,Zo,Ri,Ss,rf,Ii,lf,Cd,Se,Os,df,Ns,cf,Si,pf,hf,ff,Oi,mf,uf,en,gf,Ws,_f,Ni,bf,kf,wf,tn,Tf,Hs,yf,Wr,$f,vf,Df,Gt,Us,Ef,Wi,Ff,xf,Qs,Hi,qf,zf,Ui,jf,Mf,Et,Ks,Cf,Qi,Pf,Af,on,Lf,bo,Bf,Ki,Rf,If,Gi,Sf,Of,Pd,ko,nn,Vi,Gs,Nf,Ji,Wf,Ad,Tt,Vs,Hf,Js,Uf,Xs,Qf,Kf,Gf,Ys,Vf,Zs,Jf,Xf,Yf,Ft,ea,Zf,wo,em,Hr,tm,om,Xi,nm,sm,am,sn,rm,an,Ld,To,rn,Yi,ta,im,Zi,lm,Bd,yo,oa,dm,el,cm,Rd,$o,ln,tl,na,pm,ol,hm,Id,yt,sa,fm,vo,mm,nl,um,gm,aa,_m,bm,km,ra,wm,ia,Tm,ym,$m,ht,la,vm,Do,Dm,Ur,Em,Fm,sl,xm,qm,zm,dn,jm,cn,Mm,pn,Sd,Eo,hn,al,da,Cm,rl,Pm,Od,it,ca,Am,il,Lm,Bm,pa,Rm,ha,Im,Sm,Om,fa,Nm,ma,Wm,Hm,Um,et,ua,Qm,Fo,Km,Qr,Gm,Vm,ll,Jm,Xm,Ym,fn,Zm,mn,eu,un,tu,gn,ou,_n,Nd,xo,bn,dl,ga,nu,cl,su,Wd,lt,_a,au,pl,ru,iu,ba,lu,ka,du,cu,pu,wa,hu,Ta,fu,mu,uu,ft,ya,gu,qo,_u,Kr,bu,ku,hl,wu,Tu,yu,kn,$u,wn,vu,Tn,Hd,zo,yn,fl,$a,Du,ml,Eu,Ud,dt,va,Fu,jo,xu,ul,qu,zu,gl,ju,Mu,Cu,Da,Pu,Ea,Au,Lu,Bu,Fa,Ru,xa,Iu,Su,Ou,mt,qa,Nu,Mo,Wu,Gr,Hu,Uu,_l,Qu,Ku,Gu,$n,Vu,vn,Ju,Dn,Qd,Co,En,bl,za,Xu,kl,Yu,Kd,ct,ja,Zu,Ma,eg,Ca,tg,og,ng,Pa,sg,Aa,ag,rg,ig,Fn,lg,xt,La,dg,Po,cg,Vr,pg,hg,wl,fg,mg,ug,xn,gg,qn,Gd,Ao,zn,Tl,Ba,_g,yl,bg,Vd,Pt,Ra,kg,$l,wg,Tg,qt,Ia,yg,vl,$g,vg,Sa,Dg,Dl,Eg,Fg,xg,$t,qg,El,zg,jg,Fl,Mg,Cg,xl,Pg,Ag,ql,Lg,Bg,Jd,Lo,jn,zl,Oa,Rg,jl,Ig,Xd,pt,Na,Sg,Bo,Og,Ml,Ng,Wg,Wa,Hg,Ug,Qg,Ha,Kg,Ua,Gg,Vg,Jg,Mn,Xg,ut,Qa,Yg,Ro,Zg,Jr,e_,t_,Cl,o_,n_,s_,Cn,a_,Pn,r_,An,Yd,Io,Ln,Pl,Ka,i_,Al,l_,Zd,nt,Ga,d_,Ll,c_,p_,Va,h_,Ja,f_,m_,u_,Xa,g_,Ya,__,b_,k_,Bn,w_,gt,Za,T_,So,y_,Xr,$_,v_,Bl,D_,E_,F_,Rn,x_,In,q_,Sn,ec,Oo,On,Rl,er,z_,Il,j_,tc,st,tr,M_,Sl,C_,P_,or,A_,nr,L_,B_,R_,sr,I_,ar,S_,O_,N_,Nn,W_,_t,rr,H_,No,U_,Yr,Q_,K_,Ol,G_,V_,J_,Wn,X_,Hn,Y_,Un,oc,Wo,Qn,Nl,ir,Z_,Wl,eb,nc,at,lr,tb,Ho,ob,Hl,nb,sb,Ul,ab,rb,ib,dr,lb,cr,db,cb,pb,pr,hb,hr,fb,mb,ub,Kn,gb,bt,fr,_b,Uo,bb,Zr,kb,wb,Ql,Tb,yb,$b,Gn,vb,Vn,Db,Jn,sc;return l=new ot({}),F=new ot({}),Z=new ot({}),Oe=new Gc({props:{pipeline:"text-classification"}}),ds=new Gc({props:{pipeline:"token-classification"}}),gs=new Gc({props:{pipeline:"fill-mask"}}),ys=new Gc({props:{pipeline:"question-answering"}}),xs=new ot({}),qs=new te({props:{name:"class transformers.DebertaConfig",anchor:"transformers.DebertaConfig",parameters:[{name:"vocab_size",val:" = 50265"},{name:"hidden_size",val:" = 768"},{name:"num_hidden_layers",val:" = 12"},{name:"num_attention_heads",val:" = 12"},{name:"intermediate_size",val:" = 3072"},{name:"hidden_act",val:" = 'gelu'"},{name:"hidden_dropout_prob",val:" = 0.1"},{name:"attention_probs_dropout_prob",val:" = 0.1"},{name:"max_position_embeddings",val:" = 512"},{name:"type_vocab_size",val:" = 0"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-07"},{name:"relative_attention",val:" = False"},{name:"max_relative_positions",val:" = -1"},{name:"pad_token_id",val:" = 0"},{name:"position_biased_input",val:" = True"},{name:"pos_att_type",val:" = None"},{name:"pooler_dropout",val:" = 0"},{name:"pooler_hidden_act",val:" = 'gelu'"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.DebertaConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 30522) &#x2014;
Vocabulary size of the DeBERTa model. Defines the number of different tokens that can be represented by the
<code>inputs_ids</code> passed when calling <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> or <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a>.`,name:"vocab_size"},{anchor:"transformers.DebertaConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.DebertaConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.DebertaConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.DebertaConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (often named feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.DebertaConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>Callable</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;silu&quot;</code>, <code>&quot;gelu&quot;</code>, <code>&quot;tanh&quot;</code>, <code>&quot;gelu_fast&quot;</code>, <code>&quot;mish&quot;</code>, <code>&quot;linear&quot;</code>, <code>&quot;sigmoid&quot;</code> and <code>&quot;gelu_new&quot;</code>
are supported.`,name:"hidden_act"},{anchor:"transformers.DebertaConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.DebertaConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.DebertaConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048).`,name:"max_position_embeddings"},{anchor:"transformers.DebertaConfig.type_vocab_size",description:`<strong>type_vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The vocabulary size of the <code>token_type_ids</code> passed when calling <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> or <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a>.`,name:"type_vocab_size"},{anchor:"transformers.DebertaConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.DebertaConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.DebertaConfig.relative_attention",description:`<strong>relative_attention</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether use relative position encoding.`,name:"relative_attention"},{anchor:"transformers.DebertaConfig.max_relative_positions",description:`<strong>max_relative_positions</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The range of relative positions <code>[-max_position_embeddings, max_position_embeddings]</code>. Use the same value
as <code>max_position_embeddings</code>.`,name:"max_relative_positions"},{anchor:"transformers.DebertaConfig.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value used to pad input_ids.`,name:"pad_token_id"},{anchor:"transformers.DebertaConfig.position_biased_input",description:`<strong>position_biased_input</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether add absolute position embedding to content embedding.`,name:"position_biased_input"},{anchor:"transformers.DebertaConfig.pos_att_type",description:`<strong>pos_att_type</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
The type of relative position attention, it can be a combination of <code>[&quot;p2c&quot;, &quot;c2p&quot;]</code>, e.g. <code>[&quot;p2c&quot;]</code>,
<code>[&quot;p2c&quot;, &quot;c2p&quot;]</code>.`,name:"pos_att_type"},{anchor:"transformers.DebertaConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, optional, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/configuration_deberta.py#L40"}}),Ko=new _e({props:{anchor:"transformers.DebertaConfig.example",$$slots:{default:[$T]},$$scope:{ctx:x}}}),js=new ot({}),Ms=new te({props:{name:"class transformers.DebertaTokenizer",anchor:"transformers.DebertaTokenizer",parameters:[{name:"vocab_file",val:""},{name:"merges_file",val:""},{name:"errors",val:" = 'replace'"},{name:"bos_token",val:" = '[CLS]'"},{name:"eos_token",val:" = '[SEP]'"},{name:"sep_token",val:" = '[SEP]'"},{name:"cls_token",val:" = '[CLS]'"},{name:"unk_token",val:" = '[UNK]'"},{name:"pad_token",val:" = '[PAD]'"},{name:"mask_token",val:" = '[MASK]'"},{name:"add_prefix_space",val:" = False"},{name:"add_bos_token",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.DebertaTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
Path to the vocabulary file.`,name:"vocab_file"},{anchor:"transformers.DebertaTokenizer.merges_file",description:`<strong>merges_file</strong> (<code>str</code>) &#x2014;
Path to the merges file.`,name:"merges_file"},{anchor:"transformers.DebertaTokenizer.errors",description:`<strong>errors</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;replace&quot;</code>) &#x2014;
Paradigm to follow when decoding bytes to UTF-8. See
<a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow">bytes.decode</a> for more information.`,name:"errors"},{anchor:"transformers.DebertaTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[CLS]&quot;</code>) &#x2014;
The beginning of sequence token.`,name:"bos_token"},{anchor:"transformers.DebertaTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[SEP]&quot;</code>) &#x2014;
The end of sequence token.`,name:"eos_token"},{anchor:"transformers.DebertaTokenizer.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[SEP]&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.DebertaTokenizer.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[CLS]&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.DebertaTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[UNK]&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.DebertaTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[PAD]&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.DebertaTokenizer.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[MASK]&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.DebertaTokenizer.add_prefix_space",description:`<strong>add_prefix_space</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to add an initial space to the input. This allows to treat the leading word just as any
other word. (Deberta tokenizer detect beginning of words by the preceding space).`,name:"add_prefix_space"},{anchor:"transformers.DebertaTokenizer.add_bos_token",description:`<strong>add_bos_token</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to add an initial &lt;|endoftext|&gt; to the input. This allows to treat the leading word just as
any other word.`,name:"add_bos_token"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/tokenization_deberta.py#L112"}}),Vo=new _e({props:{anchor:"transformers.DebertaTokenizer.example",$$slots:{default:[vT]},$$scope:{ctx:x}}}),Jo=new rt({props:{$$slots:{default:[DT]},$$scope:{ctx:x}}}),As=new te({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.DebertaTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.DebertaTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.DebertaTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/tokenization_deberta.py#L289",returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Bs=new te({props:{name:"get_special_tokens_mask",anchor:"transformers.DebertaTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"},{name:"already_has_special_tokens",val:": bool = False"}],parametersDescription:[{anchor:"transformers.DebertaTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.DebertaTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.DebertaTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/tokenization_deberta.py#L314",returnDescription:`
<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Rs=new te({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.DebertaTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.DebertaTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.DebertaTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/tokenization_deberta.py#L341",returnDescription:`
<p>List of <a href="../glossary#token-type-ids">token type IDs</a> according to the given sequence(s).</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Yo=new _e({props:{anchor:"transformers.DebertaTokenizer.create_token_type_ids_from_sequences.example",$$slots:{default:[ET]},$$scope:{ctx:x}}}),Is=new te({props:{name:"save_vocabulary",anchor:"transformers.DebertaTokenizer.save_vocabulary",parameters:[{name:"save_directory",val:": str"},{name:"filename_prefix",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/tokenization_deberta.py#L400"}}),Ss=new ot({}),Os=new te({props:{name:"class transformers.DebertaTokenizerFast",anchor:"transformers.DebertaTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"merges_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"errors",val:" = 'replace'"},{name:"bos_token",val:" = '[CLS]'"},{name:"eos_token",val:" = '[SEP]'"},{name:"sep_token",val:" = '[SEP]'"},{name:"cls_token",val:" = '[CLS]'"},{name:"unk_token",val:" = '[UNK]'"},{name:"pad_token",val:" = '[PAD]'"},{name:"mask_token",val:" = '[MASK]'"},{name:"add_prefix_space",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.DebertaTokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
Path to the vocabulary file.`,name:"vocab_file"},{anchor:"transformers.DebertaTokenizerFast.merges_file",description:`<strong>merges_file</strong> (<code>str</code>) &#x2014;
Path to the merges file.`,name:"merges_file"},{anchor:"transformers.DebertaTokenizerFast.tokenizer_file",description:`<strong>tokenizer_file</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The path to a tokenizer file to use instead of the vocab file.`,name:"tokenizer_file"},{anchor:"transformers.DebertaTokenizerFast.errors",description:`<strong>errors</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;replace&quot;</code>) &#x2014;
Paradigm to follow when decoding bytes to UTF-8. See
<a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow">bytes.decode</a> for more information.`,name:"errors"},{anchor:"transformers.DebertaTokenizerFast.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[CLS]&quot;</code>) &#x2014;
The beginning of sequence token.`,name:"bos_token"},{anchor:"transformers.DebertaTokenizerFast.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[SEP]&quot;</code>) &#x2014;
The end of sequence token.`,name:"eos_token"},{anchor:"transformers.DebertaTokenizerFast.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[SEP]&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.DebertaTokenizerFast.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[CLS]&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.DebertaTokenizerFast.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[UNK]&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.DebertaTokenizerFast.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[PAD]&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.DebertaTokenizerFast.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;[MASK]&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.DebertaTokenizerFast.add_prefix_space",description:`<strong>add_prefix_space</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to add an initial space to the input. This allows to treat the leading word just as any
other word. (Deberta tokenizer detect beginning of words by the preceding space).`,name:"add_prefix_space"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/tokenization_deberta_fast.py#L74"}}),en=new _e({props:{anchor:"transformers.DebertaTokenizerFast.example",$$slots:{default:[FT]},$$scope:{ctx:x}}}),tn=new rt({props:{$$slots:{default:[xT]},$$scope:{ctx:x}}}),Us=new te({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.DebertaTokenizerFast.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.DebertaTokenizerFast.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.DebertaTokenizerFast.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/tokenization_deberta_fast.py#L210",returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Ks=new te({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.DebertaTokenizerFast.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.DebertaTokenizerFast.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.DebertaTokenizerFast.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/tokenization_deberta_fast.py#L235",returnDescription:`
<p>List of <a href="../glossary#token-type-ids">token type IDs</a> according to the given sequence(s).</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),on=new _e({props:{anchor:"transformers.DebertaTokenizerFast.create_token_type_ids_from_sequences.example",$$slots:{default:[qT]},$$scope:{ctx:x}}}),Gs=new ot({}),Vs=new te({props:{name:"class transformers.DebertaModel",anchor:"transformers.DebertaModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.DebertaModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_deberta.py#L927"}}),ea=new te({props:{name:"forward",anchor:"transformers.DebertaModel.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.DebertaModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer">DebertaTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.DebertaModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.DebertaModel.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.DebertaModel.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.DebertaModel.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <em>input_ids</em> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.DebertaModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.DebertaModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.DebertaModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_deberta.py#L951",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput"
>transformers.modeling_outputs.BaseModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"
>DebertaConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput"
>transformers.modeling_outputs.BaseModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),sn=new rt({props:{$$slots:{default:[zT]},$$scope:{ctx:x}}}),an=new _e({props:{anchor:"transformers.DebertaModel.forward.example",$$slots:{default:[jT]},$$scope:{ctx:x}}}),ta=new ot({}),oa=new te({props:{name:"class transformers.DebertaPreTrainedModel",anchor:"transformers.DebertaPreTrainedModel",parameters:[{name:"config",val:": PretrainedConfig"},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_deberta.py#L832"}}),na=new ot({}),sa=new te({props:{name:"class transformers.DebertaForMaskedLM",anchor:"transformers.DebertaForMaskedLM",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.DebertaForMaskedLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_deberta.py#L1039"}}),la=new te({props:{name:"forward",anchor:"transformers.DebertaForMaskedLM.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.Tensor] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.DebertaForMaskedLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer">DebertaTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.DebertaForMaskedLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.DebertaForMaskedLM.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.DebertaForMaskedLM.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.DebertaForMaskedLM.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <em>input_ids</em> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.DebertaForMaskedLM.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.DebertaForMaskedLM.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.DebertaForMaskedLM.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.DebertaForMaskedLM.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the masked language modeling loss. Indices should be in <code>[-100, 0, ..., config.vocab_size]</code> (see <code>input_ids</code> docstring) Tokens with indices set to <code>-100</code> are ignored (masked), the
loss is only computed for the tokens with labels in <code>[0, ..., config.vocab_size]</code>`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_deberta.py#L1058",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.MaskedLMOutput"
>transformers.modeling_outputs.MaskedLMOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"
>DebertaConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Masked language modeling (MLM) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.MaskedLMOutput"
>transformers.modeling_outputs.MaskedLMOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),dn=new rt({props:{$$slots:{default:[MT]},$$scope:{ctx:x}}}),cn=new _e({props:{anchor:"transformers.DebertaForMaskedLM.forward.example",$$slots:{default:[CT]},$$scope:{ctx:x}}}),pn=new _e({props:{anchor:"transformers.DebertaForMaskedLM.forward.example-2",$$slots:{default:[PT]},$$scope:{ctx:x}}}),da=new ot({}),ca=new te({props:{name:"class transformers.DebertaForSequenceClassification",anchor:"transformers.DebertaForSequenceClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.DebertaForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_deberta.py#L1177"}}),ua=new te({props:{name:"forward",anchor:"transformers.DebertaForSequenceClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.Tensor] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.DebertaForSequenceClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer">DebertaTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.DebertaForSequenceClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.DebertaForSequenceClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.DebertaForSequenceClassification.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.DebertaForSequenceClassification.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <em>input_ids</em> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.DebertaForSequenceClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.DebertaForSequenceClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.DebertaForSequenceClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.DebertaForSequenceClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the sequence classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_deberta.py#L1202",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput"
>transformers.modeling_outputs.SequenceClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"
>DebertaConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput"
>transformers.modeling_outputs.SequenceClassifierOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),fn=new rt({props:{$$slots:{default:[AT]},$$scope:{ctx:x}}}),mn=new _e({props:{anchor:"transformers.DebertaForSequenceClassification.forward.example",$$slots:{default:[LT]},$$scope:{ctx:x}}}),un=new _e({props:{anchor:"transformers.DebertaForSequenceClassification.forward.example-2",$$slots:{default:[BT]},$$scope:{ctx:x}}}),gn=new _e({props:{anchor:"transformers.DebertaForSequenceClassification.forward.example-3",$$slots:{default:[RT]},$$scope:{ctx:x}}}),_n=new _e({props:{anchor:"transformers.DebertaForSequenceClassification.forward.example-4",$$slots:{default:[IT]},$$scope:{ctx:x}}}),ga=new ot({}),_a=new te({props:{name:"class transformers.DebertaForTokenClassification",anchor:"transformers.DebertaForTokenClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.DebertaForTokenClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_deberta.py#L1298"}}),ya=new te({props:{name:"forward",anchor:"transformers.DebertaForTokenClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.Tensor] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.DebertaForTokenClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer">DebertaTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.DebertaForTokenClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.DebertaForTokenClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.DebertaForTokenClassification.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.DebertaForTokenClassification.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <em>input_ids</em> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.DebertaForTokenClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.DebertaForTokenClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.DebertaForTokenClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.DebertaForTokenClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the token classification loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>.`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_deberta.py#L1312",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.TokenClassifierOutput"
>transformers.modeling_outputs.TokenClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"
>DebertaConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided)  \u2014 Classification loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.num_labels)</code>) \u2014 Classification scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.TokenClassifierOutput"
>transformers.modeling_outputs.TokenClassifierOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),kn=new rt({props:{$$slots:{default:[ST]},$$scope:{ctx:x}}}),wn=new _e({props:{anchor:"transformers.DebertaForTokenClassification.forward.example",$$slots:{default:[OT]},$$scope:{ctx:x}}}),Tn=new _e({props:{anchor:"transformers.DebertaForTokenClassification.forward.example-2",$$slots:{default:[NT]},$$scope:{ctx:x}}}),$a=new ot({}),va=new te({props:{name:"class transformers.DebertaForQuestionAnswering",anchor:"transformers.DebertaForQuestionAnswering",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.DebertaForQuestionAnswering.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_deberta.py#L1376"}}),qa=new te({props:{name:"forward",anchor:"transformers.DebertaForQuestionAnswering.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.Tensor] = None"},{name:"start_positions",val:": typing.Optional[torch.Tensor] = None"},{name:"end_positions",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.DebertaForQuestionAnswering.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer">DebertaTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.DebertaForQuestionAnswering.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.DebertaForQuestionAnswering.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.DebertaForQuestionAnswering.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.DebertaForQuestionAnswering.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <em>input_ids</em> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.DebertaForQuestionAnswering.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.DebertaForQuestionAnswering.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.DebertaForQuestionAnswering.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.DebertaForQuestionAnswering.forward.start_positions",description:`<strong>start_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for position (index) of the start of the labelled span for computing the token classification loss.
Positions are clamped to the length of the sequence (<code>sequence_length</code>). Position outside of the sequence
are not taken into account for computing the loss.`,name:"start_positions"},{anchor:"transformers.DebertaForQuestionAnswering.forward.end_positions",description:`<strong>end_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for position (index) of the end of the labelled span for computing the token classification loss.
Positions are clamped to the length of the sequence (<code>sequence_length</code>). Position outside of the sequence
are not taken into account for computing the loss.`,name:"end_positions"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_deberta.py#L1389",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.QuestionAnsweringModelOutput"
>transformers.modeling_outputs.QuestionAnsweringModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"
>DebertaConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Total span extraction loss is the sum of a Cross-Entropy for the start and end positions.</p>
</li>
<li>
<p><strong>start_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Span-start scores (before SoftMax).</p>
</li>
<li>
<p><strong>end_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Span-end scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.QuestionAnsweringModelOutput"
>transformers.modeling_outputs.QuestionAnsweringModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),$n=new rt({props:{$$slots:{default:[WT]},$$scope:{ctx:x}}}),vn=new _e({props:{anchor:"transformers.DebertaForQuestionAnswering.forward.example",$$slots:{default:[HT]},$$scope:{ctx:x}}}),Dn=new _e({props:{anchor:"transformers.DebertaForQuestionAnswering.forward.example-2",$$slots:{default:[UT]},$$scope:{ctx:x}}}),za=new ot({}),ja=new te({props:{name:"class transformers.TFDebertaModel",anchor:"transformers.TFDebertaModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFDebertaModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_tf_deberta.py#L1095"}}),Fn=new rt({props:{$$slots:{default:[QT]},$$scope:{ctx:x}}}),La=new te({props:{name:"call",anchor:"transformers.TFDebertaModel.call",parameters:[{name:"input_ids",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"attention_mask",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"token_type_ids",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"position_ids",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"inputs_embeds",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"transformers.TFDebertaModel.call.input_ids",description:`<strong>input_ids</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer">DebertaTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFDebertaModel.call.attention_mask",description:`<strong>attention_mask</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.TFDebertaModel.call.token_type_ids",description:`<strong>token_type_ids</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.TFDebertaModel.call.position_ids",description:`<strong>position_ids</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.TFDebertaModel.call.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <em>input_ids</em> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.TFDebertaModel.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.TFDebertaModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.TFDebertaModel.call.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;\nWhether or not to return a [`~utils.ModelOutput&#x201C;] instead of a plain tuple.",name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_tf_deberta.py#L1101",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutput"
>transformers.modeling_tf_outputs.TFBaseModelOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"
>DebertaConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutput"
>transformers.modeling_tf_outputs.TFBaseModelOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),xn=new rt({props:{$$slots:{default:[KT]},$$scope:{ctx:x}}}),qn=new _e({props:{anchor:"transformers.TFDebertaModel.call.example",$$slots:{default:[GT]},$$scope:{ctx:x}}}),Ba=new ot({}),Ra=new te({props:{name:"class transformers.TFDebertaPreTrainedModel",anchor:"transformers.TFDebertaPreTrainedModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_tf_deberta.py#L995"}}),Ia=new te({props:{name:"call",anchor:"transformers.TFDebertaPreTrainedModel.call",parameters:[{name:"inputs",val:""},{name:"training",val:" = None"},{name:"mask",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/keras/engine/training.py#L559",returnDescription:`
<p>A tensor if there is a single output, or
a list of tensors if there are more than one outputs.</p>
`}}),Oa=new ot({}),Na=new te({props:{name:"class transformers.TFDebertaForMaskedLM",anchor:"transformers.TFDebertaForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFDebertaForMaskedLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_tf_deberta.py#L1143"}}),Mn=new rt({props:{$$slots:{default:[VT]},$$scope:{ctx:x}}}),Qa=new te({props:{name:"call",anchor:"transformers.TFDebertaForMaskedLM.call",parameters:[{name:"input_ids",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"attention_mask",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"token_type_ids",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"position_ids",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"inputs_embeds",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"training",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"transformers.TFDebertaForMaskedLM.call.input_ids",description:`<strong>input_ids</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer">DebertaTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFDebertaForMaskedLM.call.attention_mask",description:`<strong>attention_mask</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.TFDebertaForMaskedLM.call.token_type_ids",description:`<strong>token_type_ids</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.TFDebertaForMaskedLM.call.position_ids",description:`<strong>position_ids</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.TFDebertaForMaskedLM.call.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <em>input_ids</em> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.TFDebertaForMaskedLM.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.TFDebertaForMaskedLM.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.TFDebertaForMaskedLM.call.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;\nWhether or not to return a [`~utils.ModelOutput&#x201C;] instead of a plain tuple.",name:"return_dict"},{anchor:"transformers.TFDebertaForMaskedLM.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> or <code>np.ndarray</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the masked language modeling loss. Indices should be in <code>[-100, 0, ..., config.vocab_size]</code> (see <code>input_ids</code> docstring) Tokens with indices set to <code>-100</code> are ignored (masked), the
loss is only computed for the tokens with labels in <code>[0, ..., config.vocab_size]</code>`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_tf_deberta.py#L1159",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFMaskedLMOutput"
>transformers.modeling_tf_outputs.TFMaskedLMOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"
>DebertaConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(n,)</code>, <em>optional</em>, where n is the number of non-masked labels, returned when <code>labels</code> is provided) \u2014 Masked language modeling (MLM) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFMaskedLMOutput"
>transformers.modeling_tf_outputs.TFMaskedLMOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Cn=new rt({props:{$$slots:{default:[JT]},$$scope:{ctx:x}}}),Pn=new _e({props:{anchor:"transformers.TFDebertaForMaskedLM.call.example",$$slots:{default:[XT]},$$scope:{ctx:x}}}),An=new _e({props:{anchor:"transformers.TFDebertaForMaskedLM.call.example-2",$$slots:{default:[YT]},$$scope:{ctx:x}}}),Ka=new ot({}),Ga=new te({props:{name:"class transformers.TFDebertaForSequenceClassification",anchor:"transformers.TFDebertaForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFDebertaForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_tf_deberta.py#L1226"}}),Bn=new rt({props:{$$slots:{default:[ZT]},$$scope:{ctx:x}}}),Za=new te({props:{name:"call",anchor:"transformers.TFDebertaForSequenceClassification.call",parameters:[{name:"input_ids",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"attention_mask",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"token_type_ids",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"position_ids",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"inputs_embeds",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"training",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"transformers.TFDebertaForSequenceClassification.call.input_ids",description:`<strong>input_ids</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer">DebertaTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFDebertaForSequenceClassification.call.attention_mask",description:`<strong>attention_mask</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.TFDebertaForSequenceClassification.call.token_type_ids",description:`<strong>token_type_ids</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.TFDebertaForSequenceClassification.call.position_ids",description:`<strong>position_ids</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.TFDebertaForSequenceClassification.call.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <em>input_ids</em> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.TFDebertaForSequenceClassification.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.TFDebertaForSequenceClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.TFDebertaForSequenceClassification.call.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;\nWhether or not to return a [`~utils.ModelOutput&#x201C;] instead of a plain tuple.",name:"return_dict"},{anchor:"transformers.TFDebertaForSequenceClassification.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> or <code>np.ndarray</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the sequence classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_tf_deberta.py#L1244",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"
>DebertaConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, )</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Rn=new rt({props:{$$slots:{default:[ey]},$$scope:{ctx:x}}}),In=new _e({props:{anchor:"transformers.TFDebertaForSequenceClassification.call.example",$$slots:{default:[ty]},$$scope:{ctx:x}}}),Sn=new _e({props:{anchor:"transformers.TFDebertaForSequenceClassification.call.example-2",$$slots:{default:[oy]},$$scope:{ctx:x}}}),er=new ot({}),tr=new te({props:{name:"class transformers.TFDebertaForTokenClassification",anchor:"transformers.TFDebertaForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFDebertaForTokenClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_tf_deberta.py#L1314"}}),Nn=new rt({props:{$$slots:{default:[ny]},$$scope:{ctx:x}}}),rr=new te({props:{name:"call",anchor:"transformers.TFDebertaForTokenClassification.call",parameters:[{name:"input_ids",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"attention_mask",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"token_type_ids",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"position_ids",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"inputs_embeds",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"training",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"transformers.TFDebertaForTokenClassification.call.input_ids",description:`<strong>input_ids</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer">DebertaTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFDebertaForTokenClassification.call.attention_mask",description:`<strong>attention_mask</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.TFDebertaForTokenClassification.call.token_type_ids",description:`<strong>token_type_ids</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.TFDebertaForTokenClassification.call.position_ids",description:`<strong>position_ids</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.TFDebertaForTokenClassification.call.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <em>input_ids</em> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.TFDebertaForTokenClassification.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.TFDebertaForTokenClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.TFDebertaForTokenClassification.call.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;\nWhether or not to return a [`~utils.ModelOutput&#x201C;] instead of a plain tuple.",name:"return_dict"},{anchor:"transformers.TFDebertaForTokenClassification.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> or <code>np.ndarray</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the token classification loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>.`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_tf_deberta.py#L1326",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFTokenClassifierOutput"
>transformers.modeling_tf_outputs.TFTokenClassifierOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"
>DebertaConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(n,)</code>, <em>optional</em>, where n is the number of unmasked labels, returned when <code>labels</code> is provided)  \u2014 Classification loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, config.num_labels)</code>) \u2014 Classification scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFTokenClassifierOutput"
>transformers.modeling_tf_outputs.TFTokenClassifierOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Wn=new rt({props:{$$slots:{default:[sy]},$$scope:{ctx:x}}}),Hn=new _e({props:{anchor:"transformers.TFDebertaForTokenClassification.call.example",$$slots:{default:[ay]},$$scope:{ctx:x}}}),Un=new _e({props:{anchor:"transformers.TFDebertaForTokenClassification.call.example-2",$$slots:{default:[ry]},$$scope:{ctx:x}}}),ir=new ot({}),lr=new te({props:{name:"class transformers.TFDebertaForQuestionAnswering",anchor:"transformers.TFDebertaForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFDebertaForQuestionAnswering.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_tf_deberta.py#L1392"}}),Kn=new rt({props:{$$slots:{default:[iy]},$$scope:{ctx:x}}}),fr=new te({props:{name:"call",anchor:"transformers.TFDebertaForQuestionAnswering.call",parameters:[{name:"input_ids",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"attention_mask",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"token_type_ids",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"position_ids",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"inputs_embeds",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"start_positions",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"end_positions",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"training",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"transformers.TFDebertaForQuestionAnswering.call.input_ids",description:`<strong>input_ids</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer">DebertaTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFDebertaForQuestionAnswering.call.attention_mask",description:`<strong>attention_mask</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.TFDebertaForQuestionAnswering.call.token_type_ids",description:`<strong>token_type_ids</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.TFDebertaForQuestionAnswering.call.position_ids",description:`<strong>position_ids</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.TFDebertaForQuestionAnswering.call.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>np.ndarray</code> or <code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <em>input_ids</em> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.TFDebertaForQuestionAnswering.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.TFDebertaForQuestionAnswering.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.TFDebertaForQuestionAnswering.call.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;\nWhether or not to return a [`~utils.ModelOutput&#x201C;] instead of a plain tuple.",name:"return_dict"},{anchor:"transformers.TFDebertaForQuestionAnswering.call.start_positions",description:`<strong>start_positions</strong> (<code>tf.Tensor</code> or <code>np.ndarray</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for position (index) of the start of the labelled span for computing the token classification loss.
Positions are clamped to the length of the sequence (<code>sequence_length</code>). Position outside of the sequence
are not taken into account for computing the loss.`,name:"start_positions"},{anchor:"transformers.TFDebertaForQuestionAnswering.call.end_positions",description:`<strong>end_positions</strong> (<code>tf.Tensor</code> or <code>np.ndarray</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for position (index) of the end of the labelled span for computing the token classification loss.
Positions are clamped to the length of the sequence (<code>sequence_length</code>). Position outside of the sequence
are not taken into account for computing the loss.`,name:"end_positions"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/deberta/modeling_tf_deberta.py#L1403",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput"
>transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"
>DebertaConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, )</code>, <em>optional</em>, returned when <code>start_positions</code> and <code>end_positions</code> are provided) \u2014 Total span extraction loss is the sum of a Cross-Entropy for the start and end positions.</p>
</li>
<li>
<p><strong>start_logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Span-start scores (before SoftMax).</p>
</li>
<li>
<p><strong>end_logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Span-end scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput"
>transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Gn=new rt({props:{$$slots:{default:[ly]},$$scope:{ctx:x}}}),Vn=new _e({props:{anchor:"transformers.TFDebertaForQuestionAnswering.call.example",$$slots:{default:[dy]},$$scope:{ctx:x}}}),Jn=new _e({props:{anchor:"transformers.TFDebertaForQuestionAnswering.call.example-2",$$slots:{default:[cy]},$$scope:{ctx:x}}}),{c(){d=a("meta"),_=p(),c=a("h1"),u=a("a"),k=a("span"),T(l.$$.fragment),f=p(),z=a("span"),ae=n("DeBERTa"),V=p(),B=a("h2"),oe=a("a"),se=a("span"),T(F.$$.fragment),Ee=p(),G=a("span"),Fe=n("Overview"),we=p(),S=a("p"),xe=n("The DeBERTa model was proposed in "),le=a("a"),J=n("DeBERTa: Decoding-enhanced BERT with Disentangled Attention"),qe=n(` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen It is based on Google\u2019s
BERT model released in 2018 and Facebook\u2019s RoBERTa model released in 2019.`),Te=p(),Q=a("p"),ze=n(`It builds on RoBERTa with disentangled attention and enhanced mask decoder training with half of the data used in
RoBERTa.`),ye=p(),K=a("p"),je=n("The abstract from the paper is the following:"),$e=p(),ne=a("p"),M=a("em"),C=n(`Recent progress in pre-trained neural language models has significantly improved the performance of many natural
language processing (NLP) tasks. In this paper we propose a new model architecture DeBERTa (Decoding-enhanced BERT with
disentangled attention) that improves the BERT and RoBERTa models using two novel techniques. The first is the
disentangled attention mechanism, where each word is represented using two vectors that encode its content and
position, respectively, and the attention weights among words are computed using disentangled matrices on their
contents and relative positions. Second, an enhanced mask decoder is used to replace the output softmax layer to
predict the masked tokens for model pretraining. We show that these two techniques significantly improve the efficiency
of model pretraining and performance of downstream tasks. Compared to RoBERTa-Large, a DeBERTa model trained on half of
the training data performs consistently better on a wide range of NLP tasks, achieving improvements on MNLI by +0.9%
(90.2% vs. 91.1%), on SQuAD v2.0 by +2.3% (88.4% vs. 90.7%) and RACE by +3.6% (83.2% vs. 86.8%). The DeBERTa code and
pre-trained models will be made publicly available at `),de=a("a"),X=n("https://github.com/microsoft/DeBERTa"),Me=n("."),ve=p(),R=a("p"),Ce=n("This model was contributed by "),ce=a("a"),P=n("DeBERTa"),Pe=n(`. This model TF 2.0 implementation was
contributed by `),W=a("a"),Ae=n("kamalkraj"),Le=n(" . The original code can be found "),H=a("a"),Be=n("here"),Re=n("."),I=p(),re=a("h2"),O=a("a"),me=a("span"),T(Z.$$.fragment),A=p(),ue=a("span"),L=n("Resources"),De=p(),fe=a("p"),w=n("A list of official Hugging Face and community (indicated by \u{1F30E}) resources to help you get started with DeBERTa. If you\u2019re interested in submitting a resource to be included here, please feel free to open a Pull Request and we\u2019ll review it! The resource should ideally demonstrate something new instead of duplicating an existing resource."),q=p(),T(Oe.$$.fragment),ie=p(),pe=a("ul"),Ne=a("li"),j=n("A blog post on how to "),We=a("a"),Ke=n("Accelerate Large Model Training using DeepSpeed"),Ge=n(" with DeBERTa."),Ve=p(),He=a("li"),N=n("A blog post on "),U=a("a"),Je=n("Supercharged Customer Service with Machine Learning"),Xe=n(" with DeBERTa."),Y=p(),ge=a("li"),Qe=a("a"),Ie=n("DebertaForSequenceClassification"),Ye=n(" is supported by this "),ee=a("a"),Ze=n("example script"),Vc=n(" and "),rs=a("a"),Jc=n("notebook"),Xc=n("."),Yc=p(),Rt=a("li"),Er=a("a"),Zc=n("TFDebertaForSequenceClassification"),ep=n(" is supported by this "),is=a("a"),tp=n("example script"),op=n(" and "),ls=a("a"),np=n("notebook"),sp=n("."),yd=p(),T(ds.$$.fragment),$d=p(),vt=a("ul"),It=a("li"),Fr=a("a"),ap=n("DebertaForTokenClassification"),rp=n(" is supported by this "),cs=a("a"),ip=n("example script"),lp=n(" and "),ps=a("a"),dp=n("notebook"),cp=n("."),pp=p(),St=a("li"),xr=a("a"),hp=n("TFDebertaForTokenClassification"),fp=n(" is supported by this "),hs=a("a"),mp=n("example script"),up=n(" and "),fs=a("a"),gp=n("notebook"),_p=n("."),bp=p(),qr=a("li"),ms=a("a"),kp=n("Token classification"),wp=n(" chapter of the \u{1F917} Hugging Face Course."),Tp=p(),zr=a("li"),us=a("a"),yp=n("Byte-Pair Encoding tokenization"),$p=n(" chapter of the \u{1F917} Hugging Face Course."),vd=p(),T(gs.$$.fragment),Dd=p(),Ot=a("ul"),Nt=a("li"),jr=a("a"),vp=n("DebertaForMaskedLM"),Dp=n(" is supported by this "),_s=a("a"),Ep=n("example script"),Fp=n(" and "),bs=a("a"),xp=n("notebook"),qp=n("."),zp=p(),Wt=a("li"),Mr=a("a"),jp=n("TFDebertaForMaskedLM"),Mp=n(" is supported by this "),ks=a("a"),Cp=n("example script"),Pp=n(" and "),ws=a("a"),Ap=n("notebook"),Lp=n("."),Bp=p(),Cr=a("li"),Ts=a("a"),Rp=n("Masked language modeling"),Ip=n(" chapter of the \u{1F917} Hugging Face Course."),Ed=p(),T(ys.$$.fragment),Fd=p(),Ht=a("ul"),Ut=a("li"),Pr=a("a"),Sp=n("DebertaForQuestionAnswering"),Op=n(" is supported by this "),$s=a("a"),Np=n("example script"),Wp=n(" and "),vs=a("a"),Hp=n("notebook"),Up=n("."),Qp=p(),Qt=a("li"),Ar=a("a"),Kp=n("TFDebertaForQuestionAnswering"),Gp=n(" is supported by this "),Ds=a("a"),Vp=n("example script"),Jp=n(" and "),Es=a("a"),Xp=n("notebook"),Yp=n("."),Zp=p(),Lr=a("li"),Fs=a("a"),eh=n("Question answering"),th=n(" chapter of the \u{1F917} Hugging Face Course."),xd=p(),ho=a("h2"),Qo=a("a"),$i=a("span"),T(xs.$$.fragment),oh=p(),vi=a("span"),nh=n("DebertaConfig"),qd=p(),wt=a("div"),T(qs.$$.fragment),sh=p(),Ct=a("p"),ah=n("This is the configuration class to store the configuration of a "),Br=a("a"),rh=n("DebertaModel"),ih=n(" or a "),Rr=a("a"),lh=n("TFDebertaModel"),dh=n(`. It is
used to instantiate a DeBERTa model according to the specified arguments, defining the model architecture.
Instantiating a configuration with the defaults will yield a similar configuration to that of the DeBERTa
`),zs=a("a"),ch=n("microsoft/deberta-base"),ph=n(" architecture."),hh=p(),fo=a("p"),fh=n("Configuration objects inherit from "),Ir=a("a"),mh=n("PretrainedConfig"),uh=n(` and can be used to control the model outputs. Read the
documentation from `),Sr=a("a"),gh=n("PretrainedConfig"),_h=n(" for more information."),bh=p(),T(Ko.$$.fragment),zd=p(),mo=a("h2"),Go=a("a"),Di=a("span"),T(js.$$.fragment),kh=p(),Ei=a("span"),wh=n("DebertaTokenizer"),jd=p(),he=a("div"),T(Ms.$$.fragment),Th=p(),Fi=a("p"),yh=n("Construct a DeBERTa tokenizer. Based on byte-level Byte-Pair-Encoding."),$h=p(),xi=a("p"),vh=n("This tokenizer has been trained to treat spaces like parts of the tokens (a bit like sentencepiece) so a word will"),Dh=p(),T(Vo.$$.fragment),Eh=p(),Cs=a("p"),Fh=n("You can get around that behavior by passing "),qi=a("code"),xh=n("add_prefix_space=True"),qh=n(` when instantiating this tokenizer or when you
call it on some text, but since the model was not pretrained this way, it might yield a decrease in performance.`),zh=p(),T(Jo.$$.fragment),jh=p(),Ps=a("p"),Mh=n("This tokenizer inherits from "),Or=a("a"),Ch=n("PreTrainedTokenizer"),Ph=n(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),Ah=p(),Kt=a("div"),T(As.$$.fragment),Lh=p(),zi=a("p"),Bh=n(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A DeBERTa sequence has the following format:`),Rh=p(),Ls=a("ul"),ji=a("li"),Ih=n("single sequence: [CLS] X [SEP]"),Sh=p(),Mi=a("li"),Oh=n("pair of sequences: [CLS] A [SEP] B [SEP]"),Nh=p(),Xo=a("div"),T(Bs.$$.fragment),Wh=p(),uo=a("p"),Hh=n(`Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Ci=a("code"),Uh=n("prepare_for_model"),Qh=n(" or "),Pi=a("code"),Kh=n("encode_plus"),Gh=n(" methods."),Vh=p(),Dt=a("div"),T(Rs.$$.fragment),Jh=p(),Ai=a("p"),Xh=n("Create a mask from the two sequences passed to be used in a sequence-pair classification task. A DeBERTa"),Yh=p(),T(Yo.$$.fragment),Zh=p(),go=a("p"),ef=n("If "),Li=a("code"),tf=n("token_ids_1"),of=n(" is "),Bi=a("code"),nf=n("None"),sf=n(", this method only returns the first portion of the mask (0s)."),af=p(),Nr=a("div"),T(Is.$$.fragment),Md=p(),_o=a("h2"),Zo=a("a"),Ri=a("span"),T(Ss.$$.fragment),rf=p(),Ii=a("span"),lf=n("DebertaTokenizerFast"),Cd=p(),Se=a("div"),T(Os.$$.fragment),df=p(),Ns=a("p"),cf=n("Construct a \u201Cfast\u201D DeBERTa tokenizer (backed by HuggingFace\u2019s "),Si=a("em"),pf=n("tokenizers"),hf=n(` library). Based on byte-level
Byte-Pair-Encoding.`),ff=p(),Oi=a("p"),mf=n("This tokenizer has been trained to treat spaces like parts of the tokens (a bit like sentencepiece) so a word will"),uf=p(),T(en.$$.fragment),gf=p(),Ws=a("p"),_f=n("You can get around that behavior by passing "),Ni=a("code"),bf=n("add_prefix_space=True"),kf=n(` when instantiating this tokenizer, but since
the model was not pretrained this way, it might yield a decrease in performance.`),wf=p(),T(tn.$$.fragment),Tf=p(),Hs=a("p"),yf=n("This tokenizer inherits from "),Wr=a("a"),$f=n("PreTrainedTokenizerFast"),vf=n(` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),Df=p(),Gt=a("div"),T(Us.$$.fragment),Ef=p(),Wi=a("p"),Ff=n(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A DeBERTa sequence has the following format:`),xf=p(),Qs=a("ul"),Hi=a("li"),qf=n("single sequence: [CLS] X [SEP]"),zf=p(),Ui=a("li"),jf=n("pair of sequences: [CLS] A [SEP] B [SEP]"),Mf=p(),Et=a("div"),T(Ks.$$.fragment),Cf=p(),Qi=a("p"),Pf=n("Create a mask from the two sequences passed to be used in a sequence-pair classification task. A DeBERTa"),Af=p(),T(on.$$.fragment),Lf=p(),bo=a("p"),Bf=n("If "),Ki=a("code"),Rf=n("token_ids_1"),If=n(" is "),Gi=a("code"),Sf=n("None"),Of=n(", this method only returns the first portion of the mask (0s)."),Pd=p(),ko=a("h2"),nn=a("a"),Vi=a("span"),T(Gs.$$.fragment),Nf=p(),Ji=a("span"),Wf=n("DebertaModel"),Ad=p(),Tt=a("div"),T(Vs.$$.fragment),Hf=p(),Js=a("p"),Uf=n(`The bare DeBERTa Model transformer outputting raw hidden-states without any specific head on top.
The DeBERTa model was proposed in `),Xs=a("a"),Qf=n(`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),Kf=n(` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),Gf=p(),Ys=a("p"),Vf=n("This model is also a PyTorch "),Zs=a("a"),Jf=n("torch.nn.Module"),Xf=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Yf=p(),Ft=a("div"),T(ea.$$.fragment),Zf=p(),wo=a("p"),em=n("The "),Hr=a("a"),tm=n("DebertaModel"),om=n(" forward method, overrides the "),Xi=a("code"),nm=n("__call__"),sm=n(" special method."),am=p(),T(sn.$$.fragment),rm=p(),T(an.$$.fragment),Ld=p(),To=a("h2"),rn=a("a"),Yi=a("span"),T(ta.$$.fragment),im=p(),Zi=a("span"),lm=n("DebertaPreTrainedModel"),Bd=p(),yo=a("div"),T(oa.$$.fragment),dm=p(),el=a("p"),cm=n(`An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained
models.`),Rd=p(),$o=a("h2"),ln=a("a"),tl=a("span"),T(na.$$.fragment),pm=p(),ol=a("span"),hm=n("DebertaForMaskedLM"),Id=p(),yt=a("div"),T(sa.$$.fragment),fm=p(),vo=a("p"),mm=n("DeBERTa Model with a "),nl=a("code"),um=n("language modeling"),gm=n(` head on top.
The DeBERTa model was proposed in `),aa=a("a"),_m=n(`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),bm=n(` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),km=p(),ra=a("p"),wm=n("This model is also a PyTorch "),ia=a("a"),Tm=n("torch.nn.Module"),ym=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),$m=p(),ht=a("div"),T(la.$$.fragment),vm=p(),Do=a("p"),Dm=n("The "),Ur=a("a"),Em=n("DebertaForMaskedLM"),Fm=n(" forward method, overrides the "),sl=a("code"),xm=n("__call__"),qm=n(" special method."),zm=p(),T(dn.$$.fragment),jm=p(),T(cn.$$.fragment),Mm=p(),T(pn.$$.fragment),Sd=p(),Eo=a("h2"),hn=a("a"),al=a("span"),T(da.$$.fragment),Cm=p(),rl=a("span"),Pm=n("DebertaForSequenceClassification"),Od=p(),it=a("div"),T(ca.$$.fragment),Am=p(),il=a("p"),Lm=n(`DeBERTa Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Bm=p(),pa=a("p"),Rm=n("The DeBERTa model was proposed in "),ha=a("a"),Im=n(`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),Sm=n(` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),Om=p(),fa=a("p"),Nm=n("This model is also a PyTorch "),ma=a("a"),Wm=n("torch.nn.Module"),Hm=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Um=p(),et=a("div"),T(ua.$$.fragment),Qm=p(),Fo=a("p"),Km=n("The "),Qr=a("a"),Gm=n("DebertaForSequenceClassification"),Vm=n(" forward method, overrides the "),ll=a("code"),Jm=n("__call__"),Xm=n(" special method."),Ym=p(),T(fn.$$.fragment),Zm=p(),T(mn.$$.fragment),eu=p(),T(un.$$.fragment),tu=p(),T(gn.$$.fragment),ou=p(),T(_n.$$.fragment),Nd=p(),xo=a("h2"),bn=a("a"),dl=a("span"),T(ga.$$.fragment),nu=p(),cl=a("span"),su=n("DebertaForTokenClassification"),Wd=p(),lt=a("div"),T(_a.$$.fragment),au=p(),pl=a("p"),ru=n(`DeBERTa Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g. for
Named-Entity-Recognition (NER) tasks.`),iu=p(),ba=a("p"),lu=n("The DeBERTa model was proposed in "),ka=a("a"),du=n(`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),cu=n(` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),pu=p(),wa=a("p"),hu=n("This model is also a PyTorch "),Ta=a("a"),fu=n("torch.nn.Module"),mu=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),uu=p(),ft=a("div"),T(ya.$$.fragment),gu=p(),qo=a("p"),_u=n("The "),Kr=a("a"),bu=n("DebertaForTokenClassification"),ku=n(" forward method, overrides the "),hl=a("code"),wu=n("__call__"),Tu=n(" special method."),yu=p(),T(kn.$$.fragment),$u=p(),T(wn.$$.fragment),vu=p(),T(Tn.$$.fragment),Hd=p(),zo=a("h2"),yn=a("a"),fl=a("span"),T($a.$$.fragment),Du=p(),ml=a("span"),Eu=n("DebertaForQuestionAnswering"),Ud=p(),dt=a("div"),T(va.$$.fragment),Fu=p(),jo=a("p"),xu=n(`DeBERTa Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),ul=a("code"),qu=n("span start logits"),zu=n(" and "),gl=a("code"),ju=n("span end logits"),Mu=n(")."),Cu=p(),Da=a("p"),Pu=n("The DeBERTa model was proposed in "),Ea=a("a"),Au=n(`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),Lu=n(` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),Bu=p(),Fa=a("p"),Ru=n("This model is also a PyTorch "),xa=a("a"),Iu=n("torch.nn.Module"),Su=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Ou=p(),mt=a("div"),T(qa.$$.fragment),Nu=p(),Mo=a("p"),Wu=n("The "),Gr=a("a"),Hu=n("DebertaForQuestionAnswering"),Uu=n(" forward method, overrides the "),_l=a("code"),Qu=n("__call__"),Ku=n(" special method."),Gu=p(),T($n.$$.fragment),Vu=p(),T(vn.$$.fragment),Ju=p(),T(Dn.$$.fragment),Qd=p(),Co=a("h2"),En=a("a"),bl=a("span"),T(za.$$.fragment),Xu=p(),kl=a("span"),Yu=n("TFDebertaModel"),Kd=p(),ct=a("div"),T(ja.$$.fragment),Zu=p(),Ma=a("p"),eg=n(`The bare DeBERTa Model transformer outputting raw hidden-states without any specific head on top.
The DeBERTa model was proposed in `),Ca=a("a"),tg=n(`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),og=n(` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),ng=p(),Pa=a("p"),sg=n("This model is also a "),Aa=a("a"),ag=n("tf.keras.Model"),rg=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ig=p(),T(Fn.$$.fragment),lg=p(),xt=a("div"),T(La.$$.fragment),dg=p(),Po=a("p"),cg=n("The "),Vr=a("a"),pg=n("TFDebertaModel"),hg=n(" forward method, overrides the "),wl=a("code"),fg=n("__call__"),mg=n(" special method."),ug=p(),T(xn.$$.fragment),gg=p(),T(qn.$$.fragment),Gd=p(),Ao=a("h2"),zn=a("a"),Tl=a("span"),T(Ba.$$.fragment),_g=p(),yl=a("span"),bg=n("TFDebertaPreTrainedModel"),Vd=p(),Pt=a("div"),T(Ra.$$.fragment),kg=p(),$l=a("p"),wg=n(`An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained
models.`),Tg=p(),qt=a("div"),T(Ia.$$.fragment),yg=p(),vl=a("p"),$g=n("Calls the model on new inputs and returns the outputs as tensors."),vg=p(),Sa=a("p"),Dg=n("In this case "),Dl=a("code"),Eg=n("call()"),Fg=n(` just reapplies
all ops in the graph to the new inputs
(e.g. build a new computational graph from the provided inputs).`),xg=p(),$t=a("p"),qg=n(`Note: This method should not be called directly. It is only meant to be
overridden when subclassing `),El=a("code"),zg=n("tf.keras.Model"),jg=n(`.
To call a model on an input, always use the `),Fl=a("code"),Mg=n("__call__()"),Cg=n(` method,
i.e. `),xl=a("code"),Pg=n("model(inputs)"),Ag=n(", which relies on the underlying "),ql=a("code"),Lg=n("call()"),Bg=n(" method."),Jd=p(),Lo=a("h2"),jn=a("a"),zl=a("span"),T(Oa.$$.fragment),Rg=p(),jl=a("span"),Ig=n("TFDebertaForMaskedLM"),Xd=p(),pt=a("div"),T(Na.$$.fragment),Sg=p(),Bo=a("p"),Og=n("DeBERTa Model with a "),Ml=a("code"),Ng=n("language modeling"),Wg=n(` head on top.
The DeBERTa model was proposed in `),Wa=a("a"),Hg=n(`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),Ug=n(` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),Qg=p(),Ha=a("p"),Kg=n("This model is also a "),Ua=a("a"),Gg=n("tf.keras.Model"),Vg=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Jg=p(),T(Mn.$$.fragment),Xg=p(),ut=a("div"),T(Qa.$$.fragment),Yg=p(),Ro=a("p"),Zg=n("The "),Jr=a("a"),e_=n("TFDebertaForMaskedLM"),t_=n(" forward method, overrides the "),Cl=a("code"),o_=n("__call__"),n_=n(" special method."),s_=p(),T(Cn.$$.fragment),a_=p(),T(Pn.$$.fragment),r_=p(),T(An.$$.fragment),Yd=p(),Io=a("h2"),Ln=a("a"),Pl=a("span"),T(Ka.$$.fragment),i_=p(),Al=a("span"),l_=n("TFDebertaForSequenceClassification"),Zd=p(),nt=a("div"),T(Ga.$$.fragment),d_=p(),Ll=a("p"),c_=n(`DeBERTa Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),p_=p(),Va=a("p"),h_=n("The DeBERTa model was proposed in "),Ja=a("a"),f_=n(`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),m_=n(` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),u_=p(),Xa=a("p"),g_=n("This model is also a "),Ya=a("a"),__=n("tf.keras.Model"),b_=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),k_=p(),T(Bn.$$.fragment),w_=p(),gt=a("div"),T(Za.$$.fragment),T_=p(),So=a("p"),y_=n("The "),Xr=a("a"),$_=n("TFDebertaForSequenceClassification"),v_=n(" forward method, overrides the "),Bl=a("code"),D_=n("__call__"),E_=n(" special method."),F_=p(),T(Rn.$$.fragment),x_=p(),T(In.$$.fragment),q_=p(),T(Sn.$$.fragment),ec=p(),Oo=a("h2"),On=a("a"),Rl=a("span"),T(er.$$.fragment),z_=p(),Il=a("span"),j_=n("TFDebertaForTokenClassification"),tc=p(),st=a("div"),T(tr.$$.fragment),M_=p(),Sl=a("p"),C_=n(`DeBERTa Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g. for
Named-Entity-Recognition (NER) tasks.`),P_=p(),or=a("p"),A_=n("The DeBERTa model was proposed in "),nr=a("a"),L_=n(`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),B_=n(` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),R_=p(),sr=a("p"),I_=n("This model is also a "),ar=a("a"),S_=n("tf.keras.Model"),O_=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),N_=p(),T(Nn.$$.fragment),W_=p(),_t=a("div"),T(rr.$$.fragment),H_=p(),No=a("p"),U_=n("The "),Yr=a("a"),Q_=n("TFDebertaForTokenClassification"),K_=n(" forward method, overrides the "),Ol=a("code"),G_=n("__call__"),V_=n(" special method."),J_=p(),T(Wn.$$.fragment),X_=p(),T(Hn.$$.fragment),Y_=p(),T(Un.$$.fragment),oc=p(),Wo=a("h2"),Qn=a("a"),Nl=a("span"),T(ir.$$.fragment),Z_=p(),Wl=a("span"),eb=n("TFDebertaForQuestionAnswering"),nc=p(),at=a("div"),T(lr.$$.fragment),tb=p(),Ho=a("p"),ob=n(`DeBERTa Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),Hl=a("code"),nb=n("span start logits"),sb=n(" and "),Ul=a("code"),ab=n("span end logits"),rb=n(")."),ib=p(),dr=a("p"),lb=n("The DeBERTa model was proposed in "),cr=a("a"),db=n(`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),cb=n(` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),pb=p(),pr=a("p"),hb=n("This model is also a "),hr=a("a"),fb=n("tf.keras.Model"),mb=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ub=p(),T(Kn.$$.fragment),gb=p(),bt=a("div"),T(fr.$$.fragment),_b=p(),Uo=a("p"),bb=n("The "),Zr=a("a"),kb=n("TFDebertaForQuestionAnswering"),wb=n(" forward method, overrides the "),Ql=a("code"),Tb=n("__call__"),yb=n(" special method."),$b=p(),T(Gn.$$.fragment),vb=p(),T(Vn.$$.fragment),Db=p(),T(Jn.$$.fragment),this.h()},l(o){const g=TT('[data-svelte="svelte-1phssyn"]',document.head);d=r(g,"META",{name:!0,content:!0}),g.forEach(t),_=h(o),c=r(o,"H1",{class:!0});var mr=i(c);u=r(mr,"A",{id:!0,class:!0,href:!0});var Kl=i(u);k=r(Kl,"SPAN",{});var Gl=i(k);y(l.$$.fragment,Gl),Gl.forEach(t),Kl.forEach(t),f=h(mr),z=r(mr,"SPAN",{});var Vl=i(z);ae=s(Vl,"DeBERTa"),Vl.forEach(t),mr.forEach(t),V=h(o),B=r(o,"H2",{class:!0});var ur=i(B);oe=r(ur,"A",{id:!0,class:!0,href:!0});var Jl=i(oe);se=r(Jl,"SPAN",{});var Xl=i(se);y(F.$$.fragment,Xl),Xl.forEach(t),Jl.forEach(t),Ee=h(ur),G=r(ur,"SPAN",{});var Yl=i(G);Fe=s(Yl,"Overview"),Yl.forEach(t),ur.forEach(t),we=h(o),S=r(o,"P",{});var gr=i(S);xe=s(gr,"The DeBERTa model was proposed in "),le=r(gr,"A",{href:!0,rel:!0});var Zl=i(le);J=s(Zl,"DeBERTa: Decoding-enhanced BERT with Disentangled Attention"),Zl.forEach(t),qe=s(gr,` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen It is based on Google\u2019s
BERT model released in 2018 and Facebook\u2019s RoBERTa model released in 2019.`),gr.forEach(t),Te=h(o),Q=r(o,"P",{});var ed=i(Q);ze=s(ed,`It builds on RoBERTa with disentangled attention and enhanced mask decoder training with half of the data used in
RoBERTa.`),ed.forEach(t),ye=h(o),K=r(o,"P",{});var td=i(K);je=s(td,"The abstract from the paper is the following:"),td.forEach(t),$e=h(o),ne=r(o,"P",{});var od=i(ne);M=r(od,"EM",{});var _r=i(M);C=s(_r,`Recent progress in pre-trained neural language models has significantly improved the performance of many natural
language processing (NLP) tasks. In this paper we propose a new model architecture DeBERTa (Decoding-enhanced BERT with
disentangled attention) that improves the BERT and RoBERTa models using two novel techniques. The first is the
disentangled attention mechanism, where each word is represented using two vectors that encode its content and
position, respectively, and the attention weights among words are computed using disentangled matrices on their
contents and relative positions. Second, an enhanced mask decoder is used to replace the output softmax layer to
predict the masked tokens for model pretraining. We show that these two techniques significantly improve the efficiency
of model pretraining and performance of downstream tasks. Compared to RoBERTa-Large, a DeBERTa model trained on half of
the training data performs consistently better on a wide range of NLP tasks, achieving improvements on MNLI by +0.9%
(90.2% vs. 91.1%), on SQuAD v2.0 by +2.3% (88.4% vs. 90.7%) and RACE by +3.6% (83.2% vs. 86.8%). The DeBERTa code and
pre-trained models will be made publicly available at `),de=r(_r,"A",{href:!0,rel:!0});var nd=i(de);X=s(nd,"https://github.com/microsoft/DeBERTa"),nd.forEach(t),Me=s(_r,"."),_r.forEach(t),od.forEach(t),ve=h(o),R=r(o,"P",{});var At=i(R);Ce=s(At,"This model was contributed by "),ce=r(At,"A",{href:!0,rel:!0});var sd=i(ce);P=s(sd,"DeBERTa"),sd.forEach(t),Pe=s(At,`. This model TF 2.0 implementation was
contributed by `),W=r(At,"A",{href:!0,rel:!0});var ad=i(W);Ae=s(ad,"kamalkraj"),ad.forEach(t),Le=s(At," . The original code can be found "),H=r(At,"A",{href:!0,rel:!0});var rd=i(H);Be=s(rd,"here"),rd.forEach(t),Re=s(At,"."),At.forEach(t),I=h(o),re=r(o,"H2",{class:!0});var br=i(re);O=r(br,"A",{id:!0,class:!0,href:!0});var id=i(O);me=r(id,"SPAN",{});var ld=i(me);y(Z.$$.fragment,ld),ld.forEach(t),id.forEach(t),A=h(br),ue=r(br,"SPAN",{});var dd=i(ue);L=s(dd,"Resources"),dd.forEach(t),br.forEach(t),De=h(o),fe=r(o,"P",{});var cd=i(fe);w=s(cd,"A list of official Hugging Face and community (indicated by \u{1F30E}) resources to help you get started with DeBERTa. If you\u2019re interested in submitting a resource to be included here, please feel free to open a Pull Request and we\u2019ll review it! The resource should ideally demonstrate something new instead of duplicating an existing resource."),cd.forEach(t),q=h(o),y(Oe.$$.fragment,o),ie=h(o),pe=r(o,"UL",{});var Lt=i(pe);Ne=r(Lt,"LI",{});var kr=i(Ne);j=s(kr,"A blog post on how to "),We=r(kr,"A",{href:!0,rel:!0});var pd=i(We);Ke=s(pd,"Accelerate Large Model Training using DeepSpeed"),pd.forEach(t),Ge=s(kr," with DeBERTa."),kr.forEach(t),Ve=h(Lt),He=r(Lt,"LI",{});var wr=i(He);N=s(wr,"A blog post on "),U=r(wr,"A",{href:!0,rel:!0});var hd=i(U);Je=s(hd,"Supercharged Customer Service with Machine Learning"),hd.forEach(t),Xe=s(wr," with DeBERTa."),wr.forEach(t),Y=h(Lt),ge=r(Lt,"LI",{});var Vt=i(ge);Qe=r(Vt,"A",{href:!0});var fd=i(Qe);Ie=s(fd,"DebertaForSequenceClassification"),fd.forEach(t),Ye=s(Vt," is supported by this "),ee=r(Vt,"A",{href:!0,rel:!0});var md=i(ee);Ze=s(md,"example script"),md.forEach(t),Vc=s(Vt," and "),rs=r(Vt,"A",{href:!0,rel:!0});var ud=i(rs);Jc=s(ud,"notebook"),ud.forEach(t),Xc=s(Vt,"."),Vt.forEach(t),Yc=h(Lt),Rt=r(Lt,"LI",{});var Jt=i(Rt);Er=r(Jt,"A",{href:!0});var gd=i(Er);Zc=s(gd,"TFDebertaForSequenceClassification"),gd.forEach(t),ep=s(Jt," is supported by this "),is=r(Jt,"A",{href:!0,rel:!0});var _d=i(is);tp=s(_d,"example script"),_d.forEach(t),op=s(Jt," and "),ls=r(Jt,"A",{href:!0,rel:!0});var bd=i(ls);np=s(bd,"notebook"),bd.forEach(t),sp=s(Jt,"."),Jt.forEach(t),Lt.forEach(t),yd=h(o),y(ds.$$.fragment,o),$d=h(o),vt=r(o,"UL",{});var Bt=i(vt);It=r(Bt,"LI",{});var Xt=i(It);Fr=r(Xt,"A",{href:!0});var kd=i(Fr);ap=s(kd,"DebertaForTokenClassification"),kd.forEach(t),rp=s(Xt," is supported by this "),cs=r(Xt,"A",{href:!0,rel:!0});var wd=i(cs);ip=s(wd,"example script"),wd.forEach(t),lp=s(Xt," and "),ps=r(Xt,"A",{href:!0,rel:!0});var Td=i(ps);dp=s(Td,"notebook"),Td.forEach(t),cp=s(Xt,"."),Xt.forEach(t),pp=h(Bt),St=r(Bt,"LI",{});var Tr=i(St);xr=r(Tr,"A",{href:!0});var zb=i(xr);hp=s(zb,"TFDebertaForTokenClassification"),zb.forEach(t),fp=s(Tr," is supported by this "),hs=r(Tr,"A",{href:!0,rel:!0});var jb=i(hs);mp=s(jb,"example script"),jb.forEach(t),up=s(Tr," and "),fs=r(Tr,"A",{href:!0,rel:!0});var Mb=i(fs);gp=s(Mb,"notebook"),Mb.forEach(t),_p=s(Tr,"."),Tr.forEach(t),bp=h(Bt),qr=r(Bt,"LI",{});var Eb=i(qr);ms=r(Eb,"A",{href:!0,rel:!0});var Cb=i(ms);kp=s(Cb,"Token classification"),Cb.forEach(t),wp=s(Eb," chapter of the \u{1F917} Hugging Face Course."),Eb.forEach(t),Tp=h(Bt),zr=r(Bt,"LI",{});var Fb=i(zr);us=r(Fb,"A",{href:!0,rel:!0});var Pb=i(us);yp=s(Pb,"Byte-Pair Encoding tokenization"),Pb.forEach(t),$p=s(Fb," chapter of the \u{1F917} Hugging Face Course."),Fb.forEach(t),Bt.forEach(t),vd=h(o),y(gs.$$.fragment,o),Dd=h(o),Ot=r(o,"UL",{});var ei=i(Ot);Nt=r(ei,"LI",{});var yr=i(Nt);jr=r(yr,"A",{href:!0});var Ab=i(jr);vp=s(Ab,"DebertaForMaskedLM"),Ab.forEach(t),Dp=s(yr," is supported by this "),_s=r(yr,"A",{href:!0,rel:!0});var Lb=i(_s);Ep=s(Lb,"example script"),Lb.forEach(t),Fp=s(yr," and "),bs=r(yr,"A",{href:!0,rel:!0});var Bb=i(bs);xp=s(Bb,"notebook"),Bb.forEach(t),qp=s(yr,"."),yr.forEach(t),zp=h(ei),Wt=r(ei,"LI",{});var $r=i(Wt);Mr=r($r,"A",{href:!0});var Rb=i(Mr);jp=s(Rb,"TFDebertaForMaskedLM"),Rb.forEach(t),Mp=s($r," is supported by this "),ks=r($r,"A",{href:!0,rel:!0});var Ib=i(ks);Cp=s(Ib,"example script"),Ib.forEach(t),Pp=s($r," and "),ws=r($r,"A",{href:!0,rel:!0});var Sb=i(ws);Ap=s(Sb,"notebook"),Sb.forEach(t),Lp=s($r,"."),$r.forEach(t),Bp=h(ei),Cr=r(ei,"LI",{});var xb=i(Cr);Ts=r(xb,"A",{href:!0,rel:!0});var Ob=i(Ts);Rp=s(Ob,"Masked language modeling"),Ob.forEach(t),Ip=s(xb," chapter of the \u{1F917} Hugging Face Course."),xb.forEach(t),ei.forEach(t),Ed=h(o),y(ys.$$.fragment,o),Fd=h(o),Ht=r(o,"UL",{});var ti=i(Ht);Ut=r(ti,"LI",{});var vr=i(Ut);Pr=r(vr,"A",{href:!0});var Nb=i(Pr);Sp=s(Nb,"DebertaForQuestionAnswering"),Nb.forEach(t),Op=s(vr," is supported by this "),$s=r(vr,"A",{href:!0,rel:!0});var Wb=i($s);Np=s(Wb,"example script"),Wb.forEach(t),Wp=s(vr," and "),vs=r(vr,"A",{href:!0,rel:!0});var Hb=i(vs);Hp=s(Hb,"notebook"),Hb.forEach(t),Up=s(vr,"."),vr.forEach(t),Qp=h(ti),Qt=r(ti,"LI",{});var Dr=i(Qt);Ar=r(Dr,"A",{href:!0});var Ub=i(Ar);Kp=s(Ub,"TFDebertaForQuestionAnswering"),Ub.forEach(t),Gp=s(Dr," is supported by this "),Ds=r(Dr,"A",{href:!0,rel:!0});var Qb=i(Ds);Vp=s(Qb,"example script"),Qb.forEach(t),Jp=s(Dr," and "),Es=r(Dr,"A",{href:!0,rel:!0});var Kb=i(Es);Xp=s(Kb,"notebook"),Kb.forEach(t),Yp=s(Dr,"."),Dr.forEach(t),Zp=h(ti),Lr=r(ti,"LI",{});var qb=i(Lr);Fs=r(qb,"A",{href:!0,rel:!0});var Gb=i(Fs);eh=s(Gb,"Question answering"),Gb.forEach(t),th=s(qb," chapter of the \u{1F917} Hugging Face Course."),qb.forEach(t),ti.forEach(t),xd=h(o),ho=r(o,"H2",{class:!0});var ac=i(ho);Qo=r(ac,"A",{id:!0,class:!0,href:!0});var Vb=i(Qo);$i=r(Vb,"SPAN",{});var Jb=i($i);y(xs.$$.fragment,Jb),Jb.forEach(t),Vb.forEach(t),oh=h(ac),vi=r(ac,"SPAN",{});var Xb=i(vi);nh=s(Xb,"DebertaConfig"),Xb.forEach(t),ac.forEach(t),qd=h(o),wt=r(o,"DIV",{class:!0});var Xn=i(wt);y(qs.$$.fragment,Xn),sh=h(Xn),Ct=r(Xn,"P",{});var Yn=i(Ct);ah=s(Yn,"This is the configuration class to store the configuration of a "),Br=r(Yn,"A",{href:!0});var Yb=i(Br);rh=s(Yb,"DebertaModel"),Yb.forEach(t),ih=s(Yn," or a "),Rr=r(Yn,"A",{href:!0});var Zb=i(Rr);lh=s(Zb,"TFDebertaModel"),Zb.forEach(t),dh=s(Yn,`. It is
used to instantiate a DeBERTa model according to the specified arguments, defining the model architecture.
Instantiating a configuration with the defaults will yield a similar configuration to that of the DeBERTa
`),zs=r(Yn,"A",{href:!0,rel:!0});var ek=i(zs);ch=s(ek,"microsoft/deberta-base"),ek.forEach(t),ph=s(Yn," architecture."),Yn.forEach(t),hh=h(Xn),fo=r(Xn,"P",{});var oi=i(fo);fh=s(oi,"Configuration objects inherit from "),Ir=r(oi,"A",{href:!0});var tk=i(Ir);mh=s(tk,"PretrainedConfig"),tk.forEach(t),uh=s(oi,` and can be used to control the model outputs. Read the
documentation from `),Sr=r(oi,"A",{href:!0});var ok=i(Sr);gh=s(ok,"PretrainedConfig"),ok.forEach(t),_h=s(oi," for more information."),oi.forEach(t),bh=h(Xn),y(Ko.$$.fragment,Xn),Xn.forEach(t),zd=h(o),mo=r(o,"H2",{class:!0});var rc=i(mo);Go=r(rc,"A",{id:!0,class:!0,href:!0});var nk=i(Go);Di=r(nk,"SPAN",{});var sk=i(Di);y(js.$$.fragment,sk),sk.forEach(t),nk.forEach(t),kh=h(rc),Ei=r(rc,"SPAN",{});var ak=i(Ei);wh=s(ak,"DebertaTokenizer"),ak.forEach(t),rc.forEach(t),jd=h(o),he=r(o,"DIV",{class:!0});var Ue=i(he);y(Ms.$$.fragment,Ue),Th=h(Ue),Fi=r(Ue,"P",{});var rk=i(Fi);yh=s(rk,"Construct a DeBERTa tokenizer. Based on byte-level Byte-Pair-Encoding."),rk.forEach(t),$h=h(Ue),xi=r(Ue,"P",{});var ik=i(xi);vh=s(ik,"This tokenizer has been trained to treat spaces like parts of the tokens (a bit like sentencepiece) so a word will"),ik.forEach(t),Dh=h(Ue),y(Vo.$$.fragment,Ue),Eh=h(Ue),Cs=r(Ue,"P",{});var ic=i(Cs);Fh=s(ic,"You can get around that behavior by passing "),qi=r(ic,"CODE",{});var lk=i(qi);xh=s(lk,"add_prefix_space=True"),lk.forEach(t),qh=s(ic,` when instantiating this tokenizer or when you
call it on some text, but since the model was not pretrained this way, it might yield a decrease in performance.`),ic.forEach(t),zh=h(Ue),y(Jo.$$.fragment,Ue),jh=h(Ue),Ps=r(Ue,"P",{});var lc=i(Ps);Mh=s(lc,"This tokenizer inherits from "),Or=r(lc,"A",{href:!0});var dk=i(Or);Ch=s(dk,"PreTrainedTokenizer"),dk.forEach(t),Ph=s(lc,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),lc.forEach(t),Ah=h(Ue),Kt=r(Ue,"DIV",{class:!0});var ni=i(Kt);y(As.$$.fragment,ni),Lh=h(ni),zi=r(ni,"P",{});var ck=i(zi);Bh=s(ck,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A DeBERTa sequence has the following format:`),ck.forEach(t),Rh=h(ni),Ls=r(ni,"UL",{});var dc=i(Ls);ji=r(dc,"LI",{});var pk=i(ji);Ih=s(pk,"single sequence: [CLS] X [SEP]"),pk.forEach(t),Sh=h(dc),Mi=r(dc,"LI",{});var hk=i(Mi);Oh=s(hk,"pair of sequences: [CLS] A [SEP] B [SEP]"),hk.forEach(t),dc.forEach(t),ni.forEach(t),Nh=h(Ue),Xo=r(Ue,"DIV",{class:!0});var cc=i(Xo);y(Bs.$$.fragment,cc),Wh=h(cc),uo=r(cc,"P",{});var si=i(uo);Hh=s(si,`Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Ci=r(si,"CODE",{});var fk=i(Ci);Uh=s(fk,"prepare_for_model"),fk.forEach(t),Qh=s(si," or "),Pi=r(si,"CODE",{});var mk=i(Pi);Kh=s(mk,"encode_plus"),mk.forEach(t),Gh=s(si," methods."),si.forEach(t),cc.forEach(t),Vh=h(Ue),Dt=r(Ue,"DIV",{class:!0});var Zn=i(Dt);y(Rs.$$.fragment,Zn),Jh=h(Zn),Ai=r(Zn,"P",{});var uk=i(Ai);Xh=s(uk,"Create a mask from the two sequences passed to be used in a sequence-pair classification task. A DeBERTa"),uk.forEach(t),Yh=h(Zn),y(Yo.$$.fragment,Zn),Zh=h(Zn),go=r(Zn,"P",{});var ai=i(go);ef=s(ai,"If "),Li=r(ai,"CODE",{});var gk=i(Li);tf=s(gk,"token_ids_1"),gk.forEach(t),of=s(ai," is "),Bi=r(ai,"CODE",{});var _k=i(Bi);nf=s(_k,"None"),_k.forEach(t),sf=s(ai,", this method only returns the first portion of the mask (0s)."),ai.forEach(t),Zn.forEach(t),af=h(Ue),Nr=r(Ue,"DIV",{class:!0});var bk=i(Nr);y(Is.$$.fragment,bk),bk.forEach(t),Ue.forEach(t),Md=h(o),_o=r(o,"H2",{class:!0});var pc=i(_o);Zo=r(pc,"A",{id:!0,class:!0,href:!0});var kk=i(Zo);Ri=r(kk,"SPAN",{});var wk=i(Ri);y(Ss.$$.fragment,wk),wk.forEach(t),kk.forEach(t),rf=h(pc),Ii=r(pc,"SPAN",{});var Tk=i(Ii);lf=s(Tk,"DebertaTokenizerFast"),Tk.forEach(t),pc.forEach(t),Cd=h(o),Se=r(o,"DIV",{class:!0});var tt=i(Se);y(Os.$$.fragment,tt),df=h(tt),Ns=r(tt,"P",{});var hc=i(Ns);cf=s(hc,"Construct a \u201Cfast\u201D DeBERTa tokenizer (backed by HuggingFace\u2019s "),Si=r(hc,"EM",{});var yk=i(Si);pf=s(yk,"tokenizers"),yk.forEach(t),hf=s(hc,` library). Based on byte-level
Byte-Pair-Encoding.`),hc.forEach(t),ff=h(tt),Oi=r(tt,"P",{});var $k=i(Oi);mf=s($k,"This tokenizer has been trained to treat spaces like parts of the tokens (a bit like sentencepiece) so a word will"),$k.forEach(t),uf=h(tt),y(en.$$.fragment,tt),gf=h(tt),Ws=r(tt,"P",{});var fc=i(Ws);_f=s(fc,"You can get around that behavior by passing "),Ni=r(fc,"CODE",{});var vk=i(Ni);bf=s(vk,"add_prefix_space=True"),vk.forEach(t),kf=s(fc,` when instantiating this tokenizer, but since
the model was not pretrained this way, it might yield a decrease in performance.`),fc.forEach(t),wf=h(tt),y(tn.$$.fragment,tt),Tf=h(tt),Hs=r(tt,"P",{});var mc=i(Hs);yf=s(mc,"This tokenizer inherits from "),Wr=r(mc,"A",{href:!0});var Dk=i(Wr);$f=s(Dk,"PreTrainedTokenizerFast"),Dk.forEach(t),vf=s(mc,` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),mc.forEach(t),Df=h(tt),Gt=r(tt,"DIV",{class:!0});var ri=i(Gt);y(Us.$$.fragment,ri),Ef=h(ri),Wi=r(ri,"P",{});var Ek=i(Wi);Ff=s(Ek,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A DeBERTa sequence has the following format:`),Ek.forEach(t),xf=h(ri),Qs=r(ri,"UL",{});var uc=i(Qs);Hi=r(uc,"LI",{});var Fk=i(Hi);qf=s(Fk,"single sequence: [CLS] X [SEP]"),Fk.forEach(t),zf=h(uc),Ui=r(uc,"LI",{});var xk=i(Ui);jf=s(xk,"pair of sequences: [CLS] A [SEP] B [SEP]"),xk.forEach(t),uc.forEach(t),ri.forEach(t),Mf=h(tt),Et=r(tt,"DIV",{class:!0});var es=i(Et);y(Ks.$$.fragment,es),Cf=h(es),Qi=r(es,"P",{});var qk=i(Qi);Pf=s(qk,"Create a mask from the two sequences passed to be used in a sequence-pair classification task. A DeBERTa"),qk.forEach(t),Af=h(es),y(on.$$.fragment,es),Lf=h(es),bo=r(es,"P",{});var ii=i(bo);Bf=s(ii,"If "),Ki=r(ii,"CODE",{});var zk=i(Ki);Rf=s(zk,"token_ids_1"),zk.forEach(t),If=s(ii," is "),Gi=r(ii,"CODE",{});var jk=i(Gi);Sf=s(jk,"None"),jk.forEach(t),Of=s(ii,", this method only returns the first portion of the mask (0s)."),ii.forEach(t),es.forEach(t),tt.forEach(t),Pd=h(o),ko=r(o,"H2",{class:!0});var gc=i(ko);nn=r(gc,"A",{id:!0,class:!0,href:!0});var Mk=i(nn);Vi=r(Mk,"SPAN",{});var Ck=i(Vi);y(Gs.$$.fragment,Ck),Ck.forEach(t),Mk.forEach(t),Nf=h(gc),Ji=r(gc,"SPAN",{});var Pk=i(Ji);Wf=s(Pk,"DebertaModel"),Pk.forEach(t),gc.forEach(t),Ad=h(o),Tt=r(o,"DIV",{class:!0});var ts=i(Tt);y(Vs.$$.fragment,ts),Hf=h(ts),Js=r(ts,"P",{});var _c=i(Js);Uf=s(_c,`The bare DeBERTa Model transformer outputting raw hidden-states without any specific head on top.
The DeBERTa model was proposed in `),Xs=r(_c,"A",{href:!0,rel:!0});var Ak=i(Xs);Qf=s(Ak,`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),Ak.forEach(t),Kf=s(_c,` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),_c.forEach(t),Gf=h(ts),Ys=r(ts,"P",{});var bc=i(Ys);Vf=s(bc,"This model is also a PyTorch "),Zs=r(bc,"A",{href:!0,rel:!0});var Lk=i(Zs);Jf=s(Lk,"torch.nn.Module"),Lk.forEach(t),Xf=s(bc,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),bc.forEach(t),Yf=h(ts),Ft=r(ts,"DIV",{class:!0});var os=i(Ft);y(ea.$$.fragment,os),Zf=h(os),wo=r(os,"P",{});var li=i(wo);em=s(li,"The "),Hr=r(li,"A",{href:!0});var Bk=i(Hr);tm=s(Bk,"DebertaModel"),Bk.forEach(t),om=s(li," forward method, overrides the "),Xi=r(li,"CODE",{});var Rk=i(Xi);nm=s(Rk,"__call__"),Rk.forEach(t),sm=s(li," special method."),li.forEach(t),am=h(os),y(sn.$$.fragment,os),rm=h(os),y(an.$$.fragment,os),os.forEach(t),ts.forEach(t),Ld=h(o),To=r(o,"H2",{class:!0});var kc=i(To);rn=r(kc,"A",{id:!0,class:!0,href:!0});var Ik=i(rn);Yi=r(Ik,"SPAN",{});var Sk=i(Yi);y(ta.$$.fragment,Sk),Sk.forEach(t),Ik.forEach(t),im=h(kc),Zi=r(kc,"SPAN",{});var Ok=i(Zi);lm=s(Ok,"DebertaPreTrainedModel"),Ok.forEach(t),kc.forEach(t),Bd=h(o),yo=r(o,"DIV",{class:!0});var wc=i(yo);y(oa.$$.fragment,wc),dm=h(wc),el=r(wc,"P",{});var Nk=i(el);cm=s(Nk,`An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained
models.`),Nk.forEach(t),wc.forEach(t),Rd=h(o),$o=r(o,"H2",{class:!0});var Tc=i($o);ln=r(Tc,"A",{id:!0,class:!0,href:!0});var Wk=i(ln);tl=r(Wk,"SPAN",{});var Hk=i(tl);y(na.$$.fragment,Hk),Hk.forEach(t),Wk.forEach(t),pm=h(Tc),ol=r(Tc,"SPAN",{});var Uk=i(ol);hm=s(Uk,"DebertaForMaskedLM"),Uk.forEach(t),Tc.forEach(t),Id=h(o),yt=r(o,"DIV",{class:!0});var ns=i(yt);y(sa.$$.fragment,ns),fm=h(ns),vo=r(ns,"P",{});var di=i(vo);mm=s(di,"DeBERTa Model with a "),nl=r(di,"CODE",{});var Qk=i(nl);um=s(Qk,"language modeling"),Qk.forEach(t),gm=s(di,` head on top.
The DeBERTa model was proposed in `),aa=r(di,"A",{href:!0,rel:!0});var Kk=i(aa);_m=s(Kk,`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),Kk.forEach(t),bm=s(di,` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),di.forEach(t),km=h(ns),ra=r(ns,"P",{});var yc=i(ra);wm=s(yc,"This model is also a PyTorch "),ia=r(yc,"A",{href:!0,rel:!0});var Gk=i(ia);Tm=s(Gk,"torch.nn.Module"),Gk.forEach(t),ym=s(yc,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),yc.forEach(t),$m=h(ns),ht=r(ns,"DIV",{class:!0});var Yt=i(ht);y(la.$$.fragment,Yt),vm=h(Yt),Do=r(Yt,"P",{});var ci=i(Do);Dm=s(ci,"The "),Ur=r(ci,"A",{href:!0});var Vk=i(Ur);Em=s(Vk,"DebertaForMaskedLM"),Vk.forEach(t),Fm=s(ci," forward method, overrides the "),sl=r(ci,"CODE",{});var Jk=i(sl);xm=s(Jk,"__call__"),Jk.forEach(t),qm=s(ci," special method."),ci.forEach(t),zm=h(Yt),y(dn.$$.fragment,Yt),jm=h(Yt),y(cn.$$.fragment,Yt),Mm=h(Yt),y(pn.$$.fragment,Yt),Yt.forEach(t),ns.forEach(t),Sd=h(o),Eo=r(o,"H2",{class:!0});var $c=i(Eo);hn=r($c,"A",{id:!0,class:!0,href:!0});var Xk=i(hn);al=r(Xk,"SPAN",{});var Yk=i(al);y(da.$$.fragment,Yk),Yk.forEach(t),Xk.forEach(t),Cm=h($c),rl=r($c,"SPAN",{});var Zk=i(rl);Pm=s(Zk,"DebertaForSequenceClassification"),Zk.forEach(t),$c.forEach(t),Od=h(o),it=r(o,"DIV",{class:!0});var Zt=i(it);y(ca.$$.fragment,Zt),Am=h(Zt),il=r(Zt,"P",{});var ew=i(il);Lm=s(ew,`DeBERTa Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),ew.forEach(t),Bm=h(Zt),pa=r(Zt,"P",{});var vc=i(pa);Rm=s(vc,"The DeBERTa model was proposed in "),ha=r(vc,"A",{href:!0,rel:!0});var tw=i(ha);Im=s(tw,`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),tw.forEach(t),Sm=s(vc,` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),vc.forEach(t),Om=h(Zt),fa=r(Zt,"P",{});var Dc=i(fa);Nm=s(Dc,"This model is also a PyTorch "),ma=r(Dc,"A",{href:!0,rel:!0});var ow=i(ma);Wm=s(ow,"torch.nn.Module"),ow.forEach(t),Hm=s(Dc,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Dc.forEach(t),Um=h(Zt),et=r(Zt,"DIV",{class:!0});var kt=i(et);y(ua.$$.fragment,kt),Qm=h(kt),Fo=r(kt,"P",{});var pi=i(Fo);Km=s(pi,"The "),Qr=r(pi,"A",{href:!0});var nw=i(Qr);Gm=s(nw,"DebertaForSequenceClassification"),nw.forEach(t),Vm=s(pi," forward method, overrides the "),ll=r(pi,"CODE",{});var sw=i(ll);Jm=s(sw,"__call__"),sw.forEach(t),Xm=s(pi," special method."),pi.forEach(t),Ym=h(kt),y(fn.$$.fragment,kt),Zm=h(kt),y(mn.$$.fragment,kt),eu=h(kt),y(un.$$.fragment,kt),tu=h(kt),y(gn.$$.fragment,kt),ou=h(kt),y(_n.$$.fragment,kt),kt.forEach(t),Zt.forEach(t),Nd=h(o),xo=r(o,"H2",{class:!0});var Ec=i(xo);bn=r(Ec,"A",{id:!0,class:!0,href:!0});var aw=i(bn);dl=r(aw,"SPAN",{});var rw=i(dl);y(ga.$$.fragment,rw),rw.forEach(t),aw.forEach(t),nu=h(Ec),cl=r(Ec,"SPAN",{});var iw=i(cl);su=s(iw,"DebertaForTokenClassification"),iw.forEach(t),Ec.forEach(t),Wd=h(o),lt=r(o,"DIV",{class:!0});var eo=i(lt);y(_a.$$.fragment,eo),au=h(eo),pl=r(eo,"P",{});var lw=i(pl);ru=s(lw,`DeBERTa Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g. for
Named-Entity-Recognition (NER) tasks.`),lw.forEach(t),iu=h(eo),ba=r(eo,"P",{});var Fc=i(ba);lu=s(Fc,"The DeBERTa model was proposed in "),ka=r(Fc,"A",{href:!0,rel:!0});var dw=i(ka);du=s(dw,`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),dw.forEach(t),cu=s(Fc,` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),Fc.forEach(t),pu=h(eo),wa=r(eo,"P",{});var xc=i(wa);hu=s(xc,"This model is also a PyTorch "),Ta=r(xc,"A",{href:!0,rel:!0});var cw=i(Ta);fu=s(cw,"torch.nn.Module"),cw.forEach(t),mu=s(xc,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),xc.forEach(t),uu=h(eo),ft=r(eo,"DIV",{class:!0});var to=i(ft);y(ya.$$.fragment,to),gu=h(to),qo=r(to,"P",{});var hi=i(qo);_u=s(hi,"The "),Kr=r(hi,"A",{href:!0});var pw=i(Kr);bu=s(pw,"DebertaForTokenClassification"),pw.forEach(t),ku=s(hi," forward method, overrides the "),hl=r(hi,"CODE",{});var hw=i(hl);wu=s(hw,"__call__"),hw.forEach(t),Tu=s(hi," special method."),hi.forEach(t),yu=h(to),y(kn.$$.fragment,to),$u=h(to),y(wn.$$.fragment,to),vu=h(to),y(Tn.$$.fragment,to),to.forEach(t),eo.forEach(t),Hd=h(o),zo=r(o,"H2",{class:!0});var qc=i(zo);yn=r(qc,"A",{id:!0,class:!0,href:!0});var fw=i(yn);fl=r(fw,"SPAN",{});var mw=i(fl);y($a.$$.fragment,mw),mw.forEach(t),fw.forEach(t),Du=h(qc),ml=r(qc,"SPAN",{});var uw=i(ml);Eu=s(uw,"DebertaForQuestionAnswering"),uw.forEach(t),qc.forEach(t),Ud=h(o),dt=r(o,"DIV",{class:!0});var oo=i(dt);y(va.$$.fragment,oo),Fu=h(oo),jo=r(oo,"P",{});var fi=i(jo);xu=s(fi,`DeBERTa Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),ul=r(fi,"CODE",{});var gw=i(ul);qu=s(gw,"span start logits"),gw.forEach(t),zu=s(fi," and "),gl=r(fi,"CODE",{});var _w=i(gl);ju=s(_w,"span end logits"),_w.forEach(t),Mu=s(fi,")."),fi.forEach(t),Cu=h(oo),Da=r(oo,"P",{});var zc=i(Da);Pu=s(zc,"The DeBERTa model was proposed in "),Ea=r(zc,"A",{href:!0,rel:!0});var bw=i(Ea);Au=s(bw,`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),bw.forEach(t),Lu=s(zc,` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),zc.forEach(t),Bu=h(oo),Fa=r(oo,"P",{});var jc=i(Fa);Ru=s(jc,"This model is also a PyTorch "),xa=r(jc,"A",{href:!0,rel:!0});var kw=i(xa);Iu=s(kw,"torch.nn.Module"),kw.forEach(t),Su=s(jc,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),jc.forEach(t),Ou=h(oo),mt=r(oo,"DIV",{class:!0});var no=i(mt);y(qa.$$.fragment,no),Nu=h(no),Mo=r(no,"P",{});var mi=i(Mo);Wu=s(mi,"The "),Gr=r(mi,"A",{href:!0});var ww=i(Gr);Hu=s(ww,"DebertaForQuestionAnswering"),ww.forEach(t),Uu=s(mi," forward method, overrides the "),_l=r(mi,"CODE",{});var Tw=i(_l);Qu=s(Tw,"__call__"),Tw.forEach(t),Ku=s(mi," special method."),mi.forEach(t),Gu=h(no),y($n.$$.fragment,no),Vu=h(no),y(vn.$$.fragment,no),Ju=h(no),y(Dn.$$.fragment,no),no.forEach(t),oo.forEach(t),Qd=h(o),Co=r(o,"H2",{class:!0});var Mc=i(Co);En=r(Mc,"A",{id:!0,class:!0,href:!0});var yw=i(En);bl=r(yw,"SPAN",{});var $w=i(bl);y(za.$$.fragment,$w),$w.forEach(t),yw.forEach(t),Xu=h(Mc),kl=r(Mc,"SPAN",{});var vw=i(kl);Yu=s(vw,"TFDebertaModel"),vw.forEach(t),Mc.forEach(t),Kd=h(o),ct=r(o,"DIV",{class:!0});var so=i(ct);y(ja.$$.fragment,so),Zu=h(so),Ma=r(so,"P",{});var Cc=i(Ma);eg=s(Cc,`The bare DeBERTa Model transformer outputting raw hidden-states without any specific head on top.
The DeBERTa model was proposed in `),Ca=r(Cc,"A",{href:!0,rel:!0});var Dw=i(Ca);tg=s(Dw,`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),Dw.forEach(t),og=s(Cc,` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),Cc.forEach(t),ng=h(so),Pa=r(so,"P",{});var Pc=i(Pa);sg=s(Pc,"This model is also a "),Aa=r(Pc,"A",{href:!0,rel:!0});var Ew=i(Aa);ag=s(Ew,"tf.keras.Model"),Ew.forEach(t),rg=s(Pc,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Pc.forEach(t),ig=h(so),y(Fn.$$.fragment,so),lg=h(so),xt=r(so,"DIV",{class:!0});var ss=i(xt);y(La.$$.fragment,ss),dg=h(ss),Po=r(ss,"P",{});var ui=i(Po);cg=s(ui,"The "),Vr=r(ui,"A",{href:!0});var Fw=i(Vr);pg=s(Fw,"TFDebertaModel"),Fw.forEach(t),hg=s(ui," forward method, overrides the "),wl=r(ui,"CODE",{});var xw=i(wl);fg=s(xw,"__call__"),xw.forEach(t),mg=s(ui," special method."),ui.forEach(t),ug=h(ss),y(xn.$$.fragment,ss),gg=h(ss),y(qn.$$.fragment,ss),ss.forEach(t),so.forEach(t),Gd=h(o),Ao=r(o,"H2",{class:!0});var Ac=i(Ao);zn=r(Ac,"A",{id:!0,class:!0,href:!0});var qw=i(zn);Tl=r(qw,"SPAN",{});var zw=i(Tl);y(Ba.$$.fragment,zw),zw.forEach(t),qw.forEach(t),_g=h(Ac),yl=r(Ac,"SPAN",{});var jw=i(yl);bg=s(jw,"TFDebertaPreTrainedModel"),jw.forEach(t),Ac.forEach(t),Vd=h(o),Pt=r(o,"DIV",{class:!0});var gi=i(Pt);y(Ra.$$.fragment,gi),kg=h(gi),$l=r(gi,"P",{});var Mw=i($l);wg=s(Mw,`An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained
models.`),Mw.forEach(t),Tg=h(gi),qt=r(gi,"DIV",{class:!0});var as=i(qt);y(Ia.$$.fragment,as),yg=h(as),vl=r(as,"P",{});var Cw=i(vl);$g=s(Cw,"Calls the model on new inputs and returns the outputs as tensors."),Cw.forEach(t),vg=h(as),Sa=r(as,"P",{});var Lc=i(Sa);Dg=s(Lc,"In this case "),Dl=r(Lc,"CODE",{});var Pw=i(Dl);Eg=s(Pw,"call()"),Pw.forEach(t),Fg=s(Lc,` just reapplies
all ops in the graph to the new inputs
(e.g. build a new computational graph from the provided inputs).`),Lc.forEach(t),xg=h(as),$t=r(as,"P",{});var ao=i($t);qg=s(ao,`Note: This method should not be called directly. It is only meant to be
overridden when subclassing `),El=r(ao,"CODE",{});var Aw=i(El);zg=s(Aw,"tf.keras.Model"),Aw.forEach(t),jg=s(ao,`.
To call a model on an input, always use the `),Fl=r(ao,"CODE",{});var Lw=i(Fl);Mg=s(Lw,"__call__()"),Lw.forEach(t),Cg=s(ao,` method,
i.e. `),xl=r(ao,"CODE",{});var Bw=i(xl);Pg=s(Bw,"model(inputs)"),Bw.forEach(t),Ag=s(ao,", which relies on the underlying "),ql=r(ao,"CODE",{});var Rw=i(ql);Lg=s(Rw,"call()"),Rw.forEach(t),Bg=s(ao," method."),ao.forEach(t),as.forEach(t),gi.forEach(t),Jd=h(o),Lo=r(o,"H2",{class:!0});var Bc=i(Lo);jn=r(Bc,"A",{id:!0,class:!0,href:!0});var Iw=i(jn);zl=r(Iw,"SPAN",{});var Sw=i(zl);y(Oa.$$.fragment,Sw),Sw.forEach(t),Iw.forEach(t),Rg=h(Bc),jl=r(Bc,"SPAN",{});var Ow=i(jl);Ig=s(Ow,"TFDebertaForMaskedLM"),Ow.forEach(t),Bc.forEach(t),Xd=h(o),pt=r(o,"DIV",{class:!0});var ro=i(pt);y(Na.$$.fragment,ro),Sg=h(ro),Bo=r(ro,"P",{});var _i=i(Bo);Og=s(_i,"DeBERTa Model with a "),Ml=r(_i,"CODE",{});var Nw=i(Ml);Ng=s(Nw,"language modeling"),Nw.forEach(t),Wg=s(_i,` head on top.
The DeBERTa model was proposed in `),Wa=r(_i,"A",{href:!0,rel:!0});var Ww=i(Wa);Hg=s(Ww,`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),Ww.forEach(t),Ug=s(_i,` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),_i.forEach(t),Qg=h(ro),Ha=r(ro,"P",{});var Rc=i(Ha);Kg=s(Rc,"This model is also a "),Ua=r(Rc,"A",{href:!0,rel:!0});var Hw=i(Ua);Gg=s(Hw,"tf.keras.Model"),Hw.forEach(t),Vg=s(Rc,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Rc.forEach(t),Jg=h(ro),y(Mn.$$.fragment,ro),Xg=h(ro),ut=r(ro,"DIV",{class:!0});var io=i(ut);y(Qa.$$.fragment,io),Yg=h(io),Ro=r(io,"P",{});var bi=i(Ro);Zg=s(bi,"The "),Jr=r(bi,"A",{href:!0});var Uw=i(Jr);e_=s(Uw,"TFDebertaForMaskedLM"),Uw.forEach(t),t_=s(bi," forward method, overrides the "),Cl=r(bi,"CODE",{});var Qw=i(Cl);o_=s(Qw,"__call__"),Qw.forEach(t),n_=s(bi," special method."),bi.forEach(t),s_=h(io),y(Cn.$$.fragment,io),a_=h(io),y(Pn.$$.fragment,io),r_=h(io),y(An.$$.fragment,io),io.forEach(t),ro.forEach(t),Yd=h(o),Io=r(o,"H2",{class:!0});var Ic=i(Io);Ln=r(Ic,"A",{id:!0,class:!0,href:!0});var Kw=i(Ln);Pl=r(Kw,"SPAN",{});var Gw=i(Pl);y(Ka.$$.fragment,Gw),Gw.forEach(t),Kw.forEach(t),i_=h(Ic),Al=r(Ic,"SPAN",{});var Vw=i(Al);l_=s(Vw,"TFDebertaForSequenceClassification"),Vw.forEach(t),Ic.forEach(t),Zd=h(o),nt=r(o,"DIV",{class:!0});var zt=i(nt);y(Ga.$$.fragment,zt),d_=h(zt),Ll=r(zt,"P",{});var Jw=i(Ll);c_=s(Jw,`DeBERTa Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Jw.forEach(t),p_=h(zt),Va=r(zt,"P",{});var Sc=i(Va);h_=s(Sc,"The DeBERTa model was proposed in "),Ja=r(Sc,"A",{href:!0,rel:!0});var Xw=i(Ja);f_=s(Xw,`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),Xw.forEach(t),m_=s(Sc,` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),Sc.forEach(t),u_=h(zt),Xa=r(zt,"P",{});var Oc=i(Xa);g_=s(Oc,"This model is also a "),Ya=r(Oc,"A",{href:!0,rel:!0});var Yw=i(Ya);__=s(Yw,"tf.keras.Model"),Yw.forEach(t),b_=s(Oc,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Oc.forEach(t),k_=h(zt),y(Bn.$$.fragment,zt),w_=h(zt),gt=r(zt,"DIV",{class:!0});var lo=i(gt);y(Za.$$.fragment,lo),T_=h(lo),So=r(lo,"P",{});var ki=i(So);y_=s(ki,"The "),Xr=r(ki,"A",{href:!0});var Zw=i(Xr);$_=s(Zw,"TFDebertaForSequenceClassification"),Zw.forEach(t),v_=s(ki," forward method, overrides the "),Bl=r(ki,"CODE",{});var eT=i(Bl);D_=s(eT,"__call__"),eT.forEach(t),E_=s(ki," special method."),ki.forEach(t),F_=h(lo),y(Rn.$$.fragment,lo),x_=h(lo),y(In.$$.fragment,lo),q_=h(lo),y(Sn.$$.fragment,lo),lo.forEach(t),zt.forEach(t),ec=h(o),Oo=r(o,"H2",{class:!0});var Nc=i(Oo);On=r(Nc,"A",{id:!0,class:!0,href:!0});var tT=i(On);Rl=r(tT,"SPAN",{});var oT=i(Rl);y(er.$$.fragment,oT),oT.forEach(t),tT.forEach(t),z_=h(Nc),Il=r(Nc,"SPAN",{});var nT=i(Il);j_=s(nT,"TFDebertaForTokenClassification"),nT.forEach(t),Nc.forEach(t),tc=h(o),st=r(o,"DIV",{class:!0});var jt=i(st);y(tr.$$.fragment,jt),M_=h(jt),Sl=r(jt,"P",{});var sT=i(Sl);C_=s(sT,`DeBERTa Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g. for
Named-Entity-Recognition (NER) tasks.`),sT.forEach(t),P_=h(jt),or=r(jt,"P",{});var Wc=i(or);A_=s(Wc,"The DeBERTa model was proposed in "),nr=r(Wc,"A",{href:!0,rel:!0});var aT=i(nr);L_=s(aT,`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),aT.forEach(t),B_=s(Wc,` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),Wc.forEach(t),R_=h(jt),sr=r(jt,"P",{});var Hc=i(sr);I_=s(Hc,"This model is also a "),ar=r(Hc,"A",{href:!0,rel:!0});var rT=i(ar);S_=s(rT,"tf.keras.Model"),rT.forEach(t),O_=s(Hc,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Hc.forEach(t),N_=h(jt),y(Nn.$$.fragment,jt),W_=h(jt),_t=r(jt,"DIV",{class:!0});var co=i(_t);y(rr.$$.fragment,co),H_=h(co),No=r(co,"P",{});var wi=i(No);U_=s(wi,"The "),Yr=r(wi,"A",{href:!0});var iT=i(Yr);Q_=s(iT,"TFDebertaForTokenClassification"),iT.forEach(t),K_=s(wi," forward method, overrides the "),Ol=r(wi,"CODE",{});var lT=i(Ol);G_=s(lT,"__call__"),lT.forEach(t),V_=s(wi," special method."),wi.forEach(t),J_=h(co),y(Wn.$$.fragment,co),X_=h(co),y(Hn.$$.fragment,co),Y_=h(co),y(Un.$$.fragment,co),co.forEach(t),jt.forEach(t),oc=h(o),Wo=r(o,"H2",{class:!0});var Uc=i(Wo);Qn=r(Uc,"A",{id:!0,class:!0,href:!0});var dT=i(Qn);Nl=r(dT,"SPAN",{});var cT=i(Nl);y(ir.$$.fragment,cT),cT.forEach(t),dT.forEach(t),Z_=h(Uc),Wl=r(Uc,"SPAN",{});var pT=i(Wl);eb=s(pT,"TFDebertaForQuestionAnswering"),pT.forEach(t),Uc.forEach(t),nc=h(o),at=r(o,"DIV",{class:!0});var Mt=i(at);y(lr.$$.fragment,Mt),tb=h(Mt),Ho=r(Mt,"P",{});var Ti=i(Ho);ob=s(Ti,`DeBERTa Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),Hl=r(Ti,"CODE",{});var hT=i(Hl);nb=s(hT,"span start logits"),hT.forEach(t),sb=s(Ti," and "),Ul=r(Ti,"CODE",{});var fT=i(Ul);ab=s(fT,"span end logits"),fT.forEach(t),rb=s(Ti,")."),Ti.forEach(t),ib=h(Mt),dr=r(Mt,"P",{});var Qc=i(dr);lb=s(Qc,"The DeBERTa model was proposed in "),cr=r(Qc,"A",{href:!0,rel:!0});var mT=i(cr);db=s(mT,`DeBERTa: Decoding-enhanced BERT with Disentangled
Attention`),mT.forEach(t),cb=s(Qc,` by Pengcheng He, Xiaodong Liu, Jianfeng Gao, Weizhu Chen. It\u2019s build
on top of BERT/RoBERTa with two improvements, i.e. disentangled attention and enhanced mask decoder. With those two
improvements, it out perform BERT/RoBERTa on a majority of tasks with 80GB pretraining data.`),Qc.forEach(t),pb=h(Mt),pr=r(Mt,"P",{});var Kc=i(pr);hb=s(Kc,"This model is also a "),hr=r(Kc,"A",{href:!0,rel:!0});var uT=i(hr);fb=s(uT,"tf.keras.Model"),uT.forEach(t),mb=s(Kc,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Kc.forEach(t),ub=h(Mt),y(Kn.$$.fragment,Mt),gb=h(Mt),bt=r(Mt,"DIV",{class:!0});var po=i(bt);y(fr.$$.fragment,po),_b=h(po),Uo=r(po,"P",{});var yi=i(Uo);bb=s(yi,"The "),Zr=r(yi,"A",{href:!0});var gT=i(Zr);kb=s(gT,"TFDebertaForQuestionAnswering"),gT.forEach(t),wb=s(yi," forward method, overrides the "),Ql=r(yi,"CODE",{});var _T=i(Ql);Tb=s(_T,"__call__"),_T.forEach(t),yb=s(yi," special method."),yi.forEach(t),$b=h(po),y(Gn.$$.fragment,po),vb=h(po),y(Vn.$$.fragment,po),Db=h(po),y(Jn.$$.fragment,po),po.forEach(t),Mt.forEach(t),this.h()},h(){m(d,"name","hf:doc:metadata"),m(d,"content",JSON.stringify(hy)),m(u,"id","deberta"),m(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(u,"href","#deberta"),m(c,"class","relative group"),m(oe,"id","overview"),m(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(oe,"href","#overview"),m(B,"class","relative group"),m(le,"href","https://arxiv.org/abs/2006.03654"),m(le,"rel","nofollow"),m(de,"href","https://github.com/microsoft/DeBERTa"),m(de,"rel","nofollow"),m(ce,"href","https://huggingface.co/DeBERTa"),m(ce,"rel","nofollow"),m(W,"href","https://huggingface.co/kamalkraj"),m(W,"rel","nofollow"),m(H,"href","https://github.com/microsoft/DeBERTa"),m(H,"rel","nofollow"),m(O,"id","resources"),m(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(O,"href","#resources"),m(re,"class","relative group"),m(We,"href","https://huggingface.co/blog/accelerate-deepspeed"),m(We,"rel","nofollow"),m(U,"href","https://huggingface.co/blog/supercharge-customer-service-with-machine-learning"),m(U,"rel","nofollow"),m(Qe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),m(ee,"href","https://github.com/huggingface/transformers/tree/main/examples/pytorch/text-classification"),m(ee,"rel","nofollow"),m(rs,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/text_classification.ipynb"),m(rs,"rel","nofollow"),m(Er,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),m(is,"href","https://github.com/huggingface/transformers/tree/main/examples/tensorflow/text-classification"),m(is,"rel","nofollow"),m(ls,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/text_classification-tf.ipynb"),m(ls,"rel","nofollow"),m(Fr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),m(cs,"href","https://github.com/huggingface/transformers/tree/main/examples/pytorch/token-classification"),m(cs,"rel","nofollow"),m(ps,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/token_classification.ipynb"),m(ps,"rel","nofollow"),m(xr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),m(hs,"href","https://github.com/huggingface/transformers/tree/main/examples/tensorflow/token-classification"),m(hs,"rel","nofollow"),m(fs,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/token_classification-tf.ipynb"),m(fs,"rel","nofollow"),m(ms,"href","https://huggingface.co/course/chapter7/2?fw=pt"),m(ms,"rel","nofollow"),m(us,"href","https://huggingface.co/course/chapter6/5?fw=pt"),m(us,"rel","nofollow"),m(jr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),m(_s,"href","https://github.com/huggingface/transformers/tree/main/examples/pytorch/language-modeling#robertabertdistilbert-and-masked-language-modeling"),m(_s,"rel","nofollow"),m(bs,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/language_modeling.ipynb"),m(bs,"rel","nofollow"),m(Mr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),m(ks,"href","https://github.com/huggingface/transformers/tree/main/examples/tensorflow/language-modeling#run_mlmpy"),m(ks,"rel","nofollow"),m(ws,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/language_modeling-tf.ipynb"),m(ws,"rel","nofollow"),m(Ts,"href","https://huggingface.co/course/chapter7/3?fw=pt"),m(Ts,"rel","nofollow"),m(Pr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),m($s,"href","https://github.com/huggingface/transformers/tree/main/examples/pytorch/question-answering"),m($s,"rel","nofollow"),m(vs,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/question_answering.ipynb"),m(vs,"rel","nofollow"),m(Ar,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),m(Ds,"href","https://github.com/huggingface/transformers/tree/main/examples/tensorflow/question-answering"),m(Ds,"rel","nofollow"),m(Es,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/question_answering-tf.ipynb"),m(Es,"rel","nofollow"),m(Fs,"href","https://huggingface.co/course/chapter7/7?fw=pt"),m(Fs,"rel","nofollow"),m(Qo,"id","transformers.DebertaConfig"),m(Qo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Qo,"href","#transformers.DebertaConfig"),m(ho,"class","relative group"),m(Br,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),m(Rr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),m(zs,"href","https://huggingface.co/microsoft/deberta-base"),m(zs,"rel","nofollow"),m(Ir,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),m(Sr,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),m(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Go,"id","transformers.DebertaTokenizer"),m(Go,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Go,"href","#transformers.DebertaTokenizer"),m(mo,"class","relative group"),m(Or,"href","/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),m(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Zo,"id","transformers.DebertaTokenizerFast"),m(Zo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Zo,"href","#transformers.DebertaTokenizerFast"),m(_o,"class","relative group"),m(Wr,"href","/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast"),m(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(nn,"id","transformers.DebertaModel"),m(nn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(nn,"href","#transformers.DebertaModel"),m(ko,"class","relative group"),m(Xs,"href","https://arxiv.org/abs/2006.03654"),m(Xs,"rel","nofollow"),m(Zs,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),m(Zs,"rel","nofollow"),m(Hr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),m(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(rn,"id","transformers.DebertaPreTrainedModel"),m(rn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(rn,"href","#transformers.DebertaPreTrainedModel"),m(To,"class","relative group"),m(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ln,"id","transformers.DebertaForMaskedLM"),m(ln,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ln,"href","#transformers.DebertaForMaskedLM"),m($o,"class","relative group"),m(aa,"href","https://arxiv.org/abs/2006.03654"),m(aa,"rel","nofollow"),m(ia,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),m(ia,"rel","nofollow"),m(Ur,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),m(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(hn,"id","transformers.DebertaForSequenceClassification"),m(hn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(hn,"href","#transformers.DebertaForSequenceClassification"),m(Eo,"class","relative group"),m(ha,"href","https://arxiv.org/abs/2006.03654"),m(ha,"rel","nofollow"),m(ma,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),m(ma,"rel","nofollow"),m(Qr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),m(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(bn,"id","transformers.DebertaForTokenClassification"),m(bn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(bn,"href","#transformers.DebertaForTokenClassification"),m(xo,"class","relative group"),m(ka,"href","https://arxiv.org/abs/2006.03654"),m(ka,"rel","nofollow"),m(Ta,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),m(Ta,"rel","nofollow"),m(Kr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),m(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(yn,"id","transformers.DebertaForQuestionAnswering"),m(yn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(yn,"href","#transformers.DebertaForQuestionAnswering"),m(zo,"class","relative group"),m(Ea,"href","https://arxiv.org/abs/2006.03654"),m(Ea,"rel","nofollow"),m(xa,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),m(xa,"rel","nofollow"),m(Gr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),m(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(En,"id","transformers.TFDebertaModel"),m(En,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(En,"href","#transformers.TFDebertaModel"),m(Co,"class","relative group"),m(Ca,"href","https://arxiv.org/abs/2006.03654"),m(Ca,"rel","nofollow"),m(Aa,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),m(Aa,"rel","nofollow"),m(Vr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),m(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(zn,"id","transformers.TFDebertaPreTrainedModel"),m(zn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(zn,"href","#transformers.TFDebertaPreTrainedModel"),m(Ao,"class","relative group"),m(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(jn,"id","transformers.TFDebertaForMaskedLM"),m(jn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(jn,"href","#transformers.TFDebertaForMaskedLM"),m(Lo,"class","relative group"),m(Wa,"href","https://arxiv.org/abs/2006.03654"),m(Wa,"rel","nofollow"),m(Ua,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),m(Ua,"rel","nofollow"),m(Jr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),m(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ln,"id","transformers.TFDebertaForSequenceClassification"),m(Ln,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ln,"href","#transformers.TFDebertaForSequenceClassification"),m(Io,"class","relative group"),m(Ja,"href","https://arxiv.org/abs/2006.03654"),m(Ja,"rel","nofollow"),m(Ya,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),m(Ya,"rel","nofollow"),m(Xr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),m(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(On,"id","transformers.TFDebertaForTokenClassification"),m(On,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(On,"href","#transformers.TFDebertaForTokenClassification"),m(Oo,"class","relative group"),m(nr,"href","https://arxiv.org/abs/2006.03654"),m(nr,"rel","nofollow"),m(ar,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),m(ar,"rel","nofollow"),m(Yr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),m(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Qn,"id","transformers.TFDebertaForQuestionAnswering"),m(Qn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Qn,"href","#transformers.TFDebertaForQuestionAnswering"),m(Wo,"class","relative group"),m(cr,"href","https://arxiv.org/abs/2006.03654"),m(cr,"rel","nofollow"),m(hr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),m(hr,"rel","nofollow"),m(Zr,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),m(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,g){e(document.head,d),b(o,_,g),b(o,c,g),e(c,u),e(u,k),$(l,k,null),e(c,f),e(c,z),e(z,ae),b(o,V,g),b(o,B,g),e(B,oe),e(oe,se),$(F,se,null),e(B,Ee),e(B,G),e(G,Fe),b(o,we,g),b(o,S,g),e(S,xe),e(S,le),e(le,J),e(S,qe),b(o,Te,g),b(o,Q,g),e(Q,ze),b(o,ye,g),b(o,K,g),e(K,je),b(o,$e,g),b(o,ne,g),e(ne,M),e(M,C),e(M,de),e(de,X),e(M,Me),b(o,ve,g),b(o,R,g),e(R,Ce),e(R,ce),e(ce,P),e(R,Pe),e(R,W),e(W,Ae),e(R,Le),e(R,H),e(H,Be),e(R,Re),b(o,I,g),b(o,re,g),e(re,O),e(O,me),$(Z,me,null),e(re,A),e(re,ue),e(ue,L),b(o,De,g),b(o,fe,g),e(fe,w),b(o,q,g),$(Oe,o,g),b(o,ie,g),b(o,pe,g),e(pe,Ne),e(Ne,j),e(Ne,We),e(We,Ke),e(Ne,Ge),e(pe,Ve),e(pe,He),e(He,N),e(He,U),e(U,Je),e(He,Xe),e(pe,Y),e(pe,ge),e(ge,Qe),e(Qe,Ie),e(ge,Ye),e(ge,ee),e(ee,Ze),e(ge,Vc),e(ge,rs),e(rs,Jc),e(ge,Xc),e(pe,Yc),e(pe,Rt),e(Rt,Er),e(Er,Zc),e(Rt,ep),e(Rt,is),e(is,tp),e(Rt,op),e(Rt,ls),e(ls,np),e(Rt,sp),b(o,yd,g),$(ds,o,g),b(o,$d,g),b(o,vt,g),e(vt,It),e(It,Fr),e(Fr,ap),e(It,rp),e(It,cs),e(cs,ip),e(It,lp),e(It,ps),e(ps,dp),e(It,cp),e(vt,pp),e(vt,St),e(St,xr),e(xr,hp),e(St,fp),e(St,hs),e(hs,mp),e(St,up),e(St,fs),e(fs,gp),e(St,_p),e(vt,bp),e(vt,qr),e(qr,ms),e(ms,kp),e(qr,wp),e(vt,Tp),e(vt,zr),e(zr,us),e(us,yp),e(zr,$p),b(o,vd,g),$(gs,o,g),b(o,Dd,g),b(o,Ot,g),e(Ot,Nt),e(Nt,jr),e(jr,vp),e(Nt,Dp),e(Nt,_s),e(_s,Ep),e(Nt,Fp),e(Nt,bs),e(bs,xp),e(Nt,qp),e(Ot,zp),e(Ot,Wt),e(Wt,Mr),e(Mr,jp),e(Wt,Mp),e(Wt,ks),e(ks,Cp),e(Wt,Pp),e(Wt,ws),e(ws,Ap),e(Wt,Lp),e(Ot,Bp),e(Ot,Cr),e(Cr,Ts),e(Ts,Rp),e(Cr,Ip),b(o,Ed,g),$(ys,o,g),b(o,Fd,g),b(o,Ht,g),e(Ht,Ut),e(Ut,Pr),e(Pr,Sp),e(Ut,Op),e(Ut,$s),e($s,Np),e(Ut,Wp),e(Ut,vs),e(vs,Hp),e(Ut,Up),e(Ht,Qp),e(Ht,Qt),e(Qt,Ar),e(Ar,Kp),e(Qt,Gp),e(Qt,Ds),e(Ds,Vp),e(Qt,Jp),e(Qt,Es),e(Es,Xp),e(Qt,Yp),e(Ht,Zp),e(Ht,Lr),e(Lr,Fs),e(Fs,eh),e(Lr,th),b(o,xd,g),b(o,ho,g),e(ho,Qo),e(Qo,$i),$(xs,$i,null),e(ho,oh),e(ho,vi),e(vi,nh),b(o,qd,g),b(o,wt,g),$(qs,wt,null),e(wt,sh),e(wt,Ct),e(Ct,ah),e(Ct,Br),e(Br,rh),e(Ct,ih),e(Ct,Rr),e(Rr,lh),e(Ct,dh),e(Ct,zs),e(zs,ch),e(Ct,ph),e(wt,hh),e(wt,fo),e(fo,fh),e(fo,Ir),e(Ir,mh),e(fo,uh),e(fo,Sr),e(Sr,gh),e(fo,_h),e(wt,bh),$(Ko,wt,null),b(o,zd,g),b(o,mo,g),e(mo,Go),e(Go,Di),$(js,Di,null),e(mo,kh),e(mo,Ei),e(Ei,wh),b(o,jd,g),b(o,he,g),$(Ms,he,null),e(he,Th),e(he,Fi),e(Fi,yh),e(he,$h),e(he,xi),e(xi,vh),e(he,Dh),$(Vo,he,null),e(he,Eh),e(he,Cs),e(Cs,Fh),e(Cs,qi),e(qi,xh),e(Cs,qh),e(he,zh),$(Jo,he,null),e(he,jh),e(he,Ps),e(Ps,Mh),e(Ps,Or),e(Or,Ch),e(Ps,Ph),e(he,Ah),e(he,Kt),$(As,Kt,null),e(Kt,Lh),e(Kt,zi),e(zi,Bh),e(Kt,Rh),e(Kt,Ls),e(Ls,ji),e(ji,Ih),e(Ls,Sh),e(Ls,Mi),e(Mi,Oh),e(he,Nh),e(he,Xo),$(Bs,Xo,null),e(Xo,Wh),e(Xo,uo),e(uo,Hh),e(uo,Ci),e(Ci,Uh),e(uo,Qh),e(uo,Pi),e(Pi,Kh),e(uo,Gh),e(he,Vh),e(he,Dt),$(Rs,Dt,null),e(Dt,Jh),e(Dt,Ai),e(Ai,Xh),e(Dt,Yh),$(Yo,Dt,null),e(Dt,Zh),e(Dt,go),e(go,ef),e(go,Li),e(Li,tf),e(go,of),e(go,Bi),e(Bi,nf),e(go,sf),e(he,af),e(he,Nr),$(Is,Nr,null),b(o,Md,g),b(o,_o,g),e(_o,Zo),e(Zo,Ri),$(Ss,Ri,null),e(_o,rf),e(_o,Ii),e(Ii,lf),b(o,Cd,g),b(o,Se,g),$(Os,Se,null),e(Se,df),e(Se,Ns),e(Ns,cf),e(Ns,Si),e(Si,pf),e(Ns,hf),e(Se,ff),e(Se,Oi),e(Oi,mf),e(Se,uf),$(en,Se,null),e(Se,gf),e(Se,Ws),e(Ws,_f),e(Ws,Ni),e(Ni,bf),e(Ws,kf),e(Se,wf),$(tn,Se,null),e(Se,Tf),e(Se,Hs),e(Hs,yf),e(Hs,Wr),e(Wr,$f),e(Hs,vf),e(Se,Df),e(Se,Gt),$(Us,Gt,null),e(Gt,Ef),e(Gt,Wi),e(Wi,Ff),e(Gt,xf),e(Gt,Qs),e(Qs,Hi),e(Hi,qf),e(Qs,zf),e(Qs,Ui),e(Ui,jf),e(Se,Mf),e(Se,Et),$(Ks,Et,null),e(Et,Cf),e(Et,Qi),e(Qi,Pf),e(Et,Af),$(on,Et,null),e(Et,Lf),e(Et,bo),e(bo,Bf),e(bo,Ki),e(Ki,Rf),e(bo,If),e(bo,Gi),e(Gi,Sf),e(bo,Of),b(o,Pd,g),b(o,ko,g),e(ko,nn),e(nn,Vi),$(Gs,Vi,null),e(ko,Nf),e(ko,Ji),e(Ji,Wf),b(o,Ad,g),b(o,Tt,g),$(Vs,Tt,null),e(Tt,Hf),e(Tt,Js),e(Js,Uf),e(Js,Xs),e(Xs,Qf),e(Js,Kf),e(Tt,Gf),e(Tt,Ys),e(Ys,Vf),e(Ys,Zs),e(Zs,Jf),e(Ys,Xf),e(Tt,Yf),e(Tt,Ft),$(ea,Ft,null),e(Ft,Zf),e(Ft,wo),e(wo,em),e(wo,Hr),e(Hr,tm),e(wo,om),e(wo,Xi),e(Xi,nm),e(wo,sm),e(Ft,am),$(sn,Ft,null),e(Ft,rm),$(an,Ft,null),b(o,Ld,g),b(o,To,g),e(To,rn),e(rn,Yi),$(ta,Yi,null),e(To,im),e(To,Zi),e(Zi,lm),b(o,Bd,g),b(o,yo,g),$(oa,yo,null),e(yo,dm),e(yo,el),e(el,cm),b(o,Rd,g),b(o,$o,g),e($o,ln),e(ln,tl),$(na,tl,null),e($o,pm),e($o,ol),e(ol,hm),b(o,Id,g),b(o,yt,g),$(sa,yt,null),e(yt,fm),e(yt,vo),e(vo,mm),e(vo,nl),e(nl,um),e(vo,gm),e(vo,aa),e(aa,_m),e(vo,bm),e(yt,km),e(yt,ra),e(ra,wm),e(ra,ia),e(ia,Tm),e(ra,ym),e(yt,$m),e(yt,ht),$(la,ht,null),e(ht,vm),e(ht,Do),e(Do,Dm),e(Do,Ur),e(Ur,Em),e(Do,Fm),e(Do,sl),e(sl,xm),e(Do,qm),e(ht,zm),$(dn,ht,null),e(ht,jm),$(cn,ht,null),e(ht,Mm),$(pn,ht,null),b(o,Sd,g),b(o,Eo,g),e(Eo,hn),e(hn,al),$(da,al,null),e(Eo,Cm),e(Eo,rl),e(rl,Pm),b(o,Od,g),b(o,it,g),$(ca,it,null),e(it,Am),e(it,il),e(il,Lm),e(it,Bm),e(it,pa),e(pa,Rm),e(pa,ha),e(ha,Im),e(pa,Sm),e(it,Om),e(it,fa),e(fa,Nm),e(fa,ma),e(ma,Wm),e(fa,Hm),e(it,Um),e(it,et),$(ua,et,null),e(et,Qm),e(et,Fo),e(Fo,Km),e(Fo,Qr),e(Qr,Gm),e(Fo,Vm),e(Fo,ll),e(ll,Jm),e(Fo,Xm),e(et,Ym),$(fn,et,null),e(et,Zm),$(mn,et,null),e(et,eu),$(un,et,null),e(et,tu),$(gn,et,null),e(et,ou),$(_n,et,null),b(o,Nd,g),b(o,xo,g),e(xo,bn),e(bn,dl),$(ga,dl,null),e(xo,nu),e(xo,cl),e(cl,su),b(o,Wd,g),b(o,lt,g),$(_a,lt,null),e(lt,au),e(lt,pl),e(pl,ru),e(lt,iu),e(lt,ba),e(ba,lu),e(ba,ka),e(ka,du),e(ba,cu),e(lt,pu),e(lt,wa),e(wa,hu),e(wa,Ta),e(Ta,fu),e(wa,mu),e(lt,uu),e(lt,ft),$(ya,ft,null),e(ft,gu),e(ft,qo),e(qo,_u),e(qo,Kr),e(Kr,bu),e(qo,ku),e(qo,hl),e(hl,wu),e(qo,Tu),e(ft,yu),$(kn,ft,null),e(ft,$u),$(wn,ft,null),e(ft,vu),$(Tn,ft,null),b(o,Hd,g),b(o,zo,g),e(zo,yn),e(yn,fl),$($a,fl,null),e(zo,Du),e(zo,ml),e(ml,Eu),b(o,Ud,g),b(o,dt,g),$(va,dt,null),e(dt,Fu),e(dt,jo),e(jo,xu),e(jo,ul),e(ul,qu),e(jo,zu),e(jo,gl),e(gl,ju),e(jo,Mu),e(dt,Cu),e(dt,Da),e(Da,Pu),e(Da,Ea),e(Ea,Au),e(Da,Lu),e(dt,Bu),e(dt,Fa),e(Fa,Ru),e(Fa,xa),e(xa,Iu),e(Fa,Su),e(dt,Ou),e(dt,mt),$(qa,mt,null),e(mt,Nu),e(mt,Mo),e(Mo,Wu),e(Mo,Gr),e(Gr,Hu),e(Mo,Uu),e(Mo,_l),e(_l,Qu),e(Mo,Ku),e(mt,Gu),$($n,mt,null),e(mt,Vu),$(vn,mt,null),e(mt,Ju),$(Dn,mt,null),b(o,Qd,g),b(o,Co,g),e(Co,En),e(En,bl),$(za,bl,null),e(Co,Xu),e(Co,kl),e(kl,Yu),b(o,Kd,g),b(o,ct,g),$(ja,ct,null),e(ct,Zu),e(ct,Ma),e(Ma,eg),e(Ma,Ca),e(Ca,tg),e(Ma,og),e(ct,ng),e(ct,Pa),e(Pa,sg),e(Pa,Aa),e(Aa,ag),e(Pa,rg),e(ct,ig),$(Fn,ct,null),e(ct,lg),e(ct,xt),$(La,xt,null),e(xt,dg),e(xt,Po),e(Po,cg),e(Po,Vr),e(Vr,pg),e(Po,hg),e(Po,wl),e(wl,fg),e(Po,mg),e(xt,ug),$(xn,xt,null),e(xt,gg),$(qn,xt,null),b(o,Gd,g),b(o,Ao,g),e(Ao,zn),e(zn,Tl),$(Ba,Tl,null),e(Ao,_g),e(Ao,yl),e(yl,bg),b(o,Vd,g),b(o,Pt,g),$(Ra,Pt,null),e(Pt,kg),e(Pt,$l),e($l,wg),e(Pt,Tg),e(Pt,qt),$(Ia,qt,null),e(qt,yg),e(qt,vl),e(vl,$g),e(qt,vg),e(qt,Sa),e(Sa,Dg),e(Sa,Dl),e(Dl,Eg),e(Sa,Fg),e(qt,xg),e(qt,$t),e($t,qg),e($t,El),e(El,zg),e($t,jg),e($t,Fl),e(Fl,Mg),e($t,Cg),e($t,xl),e(xl,Pg),e($t,Ag),e($t,ql),e(ql,Lg),e($t,Bg),b(o,Jd,g),b(o,Lo,g),e(Lo,jn),e(jn,zl),$(Oa,zl,null),e(Lo,Rg),e(Lo,jl),e(jl,Ig),b(o,Xd,g),b(o,pt,g),$(Na,pt,null),e(pt,Sg),e(pt,Bo),e(Bo,Og),e(Bo,Ml),e(Ml,Ng),e(Bo,Wg),e(Bo,Wa),e(Wa,Hg),e(Bo,Ug),e(pt,Qg),e(pt,Ha),e(Ha,Kg),e(Ha,Ua),e(Ua,Gg),e(Ha,Vg),e(pt,Jg),$(Mn,pt,null),e(pt,Xg),e(pt,ut),$(Qa,ut,null),e(ut,Yg),e(ut,Ro),e(Ro,Zg),e(Ro,Jr),e(Jr,e_),e(Ro,t_),e(Ro,Cl),e(Cl,o_),e(Ro,n_),e(ut,s_),$(Cn,ut,null),e(ut,a_),$(Pn,ut,null),e(ut,r_),$(An,ut,null),b(o,Yd,g),b(o,Io,g),e(Io,Ln),e(Ln,Pl),$(Ka,Pl,null),e(Io,i_),e(Io,Al),e(Al,l_),b(o,Zd,g),b(o,nt,g),$(Ga,nt,null),e(nt,d_),e(nt,Ll),e(Ll,c_),e(nt,p_),e(nt,Va),e(Va,h_),e(Va,Ja),e(Ja,f_),e(Va,m_),e(nt,u_),e(nt,Xa),e(Xa,g_),e(Xa,Ya),e(Ya,__),e(Xa,b_),e(nt,k_),$(Bn,nt,null),e(nt,w_),e(nt,gt),$(Za,gt,null),e(gt,T_),e(gt,So),e(So,y_),e(So,Xr),e(Xr,$_),e(So,v_),e(So,Bl),e(Bl,D_),e(So,E_),e(gt,F_),$(Rn,gt,null),e(gt,x_),$(In,gt,null),e(gt,q_),$(Sn,gt,null),b(o,ec,g),b(o,Oo,g),e(Oo,On),e(On,Rl),$(er,Rl,null),e(Oo,z_),e(Oo,Il),e(Il,j_),b(o,tc,g),b(o,st,g),$(tr,st,null),e(st,M_),e(st,Sl),e(Sl,C_),e(st,P_),e(st,or),e(or,A_),e(or,nr),e(nr,L_),e(or,B_),e(st,R_),e(st,sr),e(sr,I_),e(sr,ar),e(ar,S_),e(sr,O_),e(st,N_),$(Nn,st,null),e(st,W_),e(st,_t),$(rr,_t,null),e(_t,H_),e(_t,No),e(No,U_),e(No,Yr),e(Yr,Q_),e(No,K_),e(No,Ol),e(Ol,G_),e(No,V_),e(_t,J_),$(Wn,_t,null),e(_t,X_),$(Hn,_t,null),e(_t,Y_),$(Un,_t,null),b(o,oc,g),b(o,Wo,g),e(Wo,Qn),e(Qn,Nl),$(ir,Nl,null),e(Wo,Z_),e(Wo,Wl),e(Wl,eb),b(o,nc,g),b(o,at,g),$(lr,at,null),e(at,tb),e(at,Ho),e(Ho,ob),e(Ho,Hl),e(Hl,nb),e(Ho,sb),e(Ho,Ul),e(Ul,ab),e(Ho,rb),e(at,ib),e(at,dr),e(dr,lb),e(dr,cr),e(cr,db),e(dr,cb),e(at,pb),e(at,pr),e(pr,hb),e(pr,hr),e(hr,fb),e(pr,mb),e(at,ub),$(Kn,at,null),e(at,gb),e(at,bt),$(fr,bt,null),e(bt,_b),e(bt,Uo),e(Uo,bb),e(Uo,Zr),e(Zr,kb),e(Uo,wb),e(Uo,Ql),e(Ql,Tb),e(Uo,yb),e(bt,$b),$(Gn,bt,null),e(bt,vb),$(Vn,bt,null),e(bt,Db),$(Jn,bt,null),sc=!0},p(o,[g]){const mr={};g&2&&(mr.$$scope={dirty:g,ctx:o}),Ko.$set(mr);const Kl={};g&2&&(Kl.$$scope={dirty:g,ctx:o}),Vo.$set(Kl);const Gl={};g&2&&(Gl.$$scope={dirty:g,ctx:o}),Jo.$set(Gl);const Vl={};g&2&&(Vl.$$scope={dirty:g,ctx:o}),Yo.$set(Vl);const ur={};g&2&&(ur.$$scope={dirty:g,ctx:o}),en.$set(ur);const Jl={};g&2&&(Jl.$$scope={dirty:g,ctx:o}),tn.$set(Jl);const Xl={};g&2&&(Xl.$$scope={dirty:g,ctx:o}),on.$set(Xl);const Yl={};g&2&&(Yl.$$scope={dirty:g,ctx:o}),sn.$set(Yl);const gr={};g&2&&(gr.$$scope={dirty:g,ctx:o}),an.$set(gr);const Zl={};g&2&&(Zl.$$scope={dirty:g,ctx:o}),dn.$set(Zl);const ed={};g&2&&(ed.$$scope={dirty:g,ctx:o}),cn.$set(ed);const td={};g&2&&(td.$$scope={dirty:g,ctx:o}),pn.$set(td);const od={};g&2&&(od.$$scope={dirty:g,ctx:o}),fn.$set(od);const _r={};g&2&&(_r.$$scope={dirty:g,ctx:o}),mn.$set(_r);const nd={};g&2&&(nd.$$scope={dirty:g,ctx:o}),un.$set(nd);const At={};g&2&&(At.$$scope={dirty:g,ctx:o}),gn.$set(At);const sd={};g&2&&(sd.$$scope={dirty:g,ctx:o}),_n.$set(sd);const ad={};g&2&&(ad.$$scope={dirty:g,ctx:o}),kn.$set(ad);const rd={};g&2&&(rd.$$scope={dirty:g,ctx:o}),wn.$set(rd);const br={};g&2&&(br.$$scope={dirty:g,ctx:o}),Tn.$set(br);const id={};g&2&&(id.$$scope={dirty:g,ctx:o}),$n.$set(id);const ld={};g&2&&(ld.$$scope={dirty:g,ctx:o}),vn.$set(ld);const dd={};g&2&&(dd.$$scope={dirty:g,ctx:o}),Dn.$set(dd);const cd={};g&2&&(cd.$$scope={dirty:g,ctx:o}),Fn.$set(cd);const Lt={};g&2&&(Lt.$$scope={dirty:g,ctx:o}),xn.$set(Lt);const kr={};g&2&&(kr.$$scope={dirty:g,ctx:o}),qn.$set(kr);const pd={};g&2&&(pd.$$scope={dirty:g,ctx:o}),Mn.$set(pd);const wr={};g&2&&(wr.$$scope={dirty:g,ctx:o}),Cn.$set(wr);const hd={};g&2&&(hd.$$scope={dirty:g,ctx:o}),Pn.$set(hd);const Vt={};g&2&&(Vt.$$scope={dirty:g,ctx:o}),An.$set(Vt);const fd={};g&2&&(fd.$$scope={dirty:g,ctx:o}),Bn.$set(fd);const md={};g&2&&(md.$$scope={dirty:g,ctx:o}),Rn.$set(md);const ud={};g&2&&(ud.$$scope={dirty:g,ctx:o}),In.$set(ud);const Jt={};g&2&&(Jt.$$scope={dirty:g,ctx:o}),Sn.$set(Jt);const gd={};g&2&&(gd.$$scope={dirty:g,ctx:o}),Nn.$set(gd);const _d={};g&2&&(_d.$$scope={dirty:g,ctx:o}),Wn.$set(_d);const bd={};g&2&&(bd.$$scope={dirty:g,ctx:o}),Hn.$set(bd);const Bt={};g&2&&(Bt.$$scope={dirty:g,ctx:o}),Un.$set(Bt);const Xt={};g&2&&(Xt.$$scope={dirty:g,ctx:o}),Kn.$set(Xt);const kd={};g&2&&(kd.$$scope={dirty:g,ctx:o}),Gn.$set(kd);const wd={};g&2&&(wd.$$scope={dirty:g,ctx:o}),Vn.$set(wd);const Td={};g&2&&(Td.$$scope={dirty:g,ctx:o}),Jn.$set(Td)},i(o){sc||(v(l.$$.fragment,o),v(F.$$.fragment,o),v(Z.$$.fragment,o),v(Oe.$$.fragment,o),v(ds.$$.fragment,o),v(gs.$$.fragment,o),v(ys.$$.fragment,o),v(xs.$$.fragment,o),v(qs.$$.fragment,o),v(Ko.$$.fragment,o),v(js.$$.fragment,o),v(Ms.$$.fragment,o),v(Vo.$$.fragment,o),v(Jo.$$.fragment,o),v(As.$$.fragment,o),v(Bs.$$.fragment,o),v(Rs.$$.fragment,o),v(Yo.$$.fragment,o),v(Is.$$.fragment,o),v(Ss.$$.fragment,o),v(Os.$$.fragment,o),v(en.$$.fragment,o),v(tn.$$.fragment,o),v(Us.$$.fragment,o),v(Ks.$$.fragment,o),v(on.$$.fragment,o),v(Gs.$$.fragment,o),v(Vs.$$.fragment,o),v(ea.$$.fragment,o),v(sn.$$.fragment,o),v(an.$$.fragment,o),v(ta.$$.fragment,o),v(oa.$$.fragment,o),v(na.$$.fragment,o),v(sa.$$.fragment,o),v(la.$$.fragment,o),v(dn.$$.fragment,o),v(cn.$$.fragment,o),v(pn.$$.fragment,o),v(da.$$.fragment,o),v(ca.$$.fragment,o),v(ua.$$.fragment,o),v(fn.$$.fragment,o),v(mn.$$.fragment,o),v(un.$$.fragment,o),v(gn.$$.fragment,o),v(_n.$$.fragment,o),v(ga.$$.fragment,o),v(_a.$$.fragment,o),v(ya.$$.fragment,o),v(kn.$$.fragment,o),v(wn.$$.fragment,o),v(Tn.$$.fragment,o),v($a.$$.fragment,o),v(va.$$.fragment,o),v(qa.$$.fragment,o),v($n.$$.fragment,o),v(vn.$$.fragment,o),v(Dn.$$.fragment,o),v(za.$$.fragment,o),v(ja.$$.fragment,o),v(Fn.$$.fragment,o),v(La.$$.fragment,o),v(xn.$$.fragment,o),v(qn.$$.fragment,o),v(Ba.$$.fragment,o),v(Ra.$$.fragment,o),v(Ia.$$.fragment,o),v(Oa.$$.fragment,o),v(Na.$$.fragment,o),v(Mn.$$.fragment,o),v(Qa.$$.fragment,o),v(Cn.$$.fragment,o),v(Pn.$$.fragment,o),v(An.$$.fragment,o),v(Ka.$$.fragment,o),v(Ga.$$.fragment,o),v(Bn.$$.fragment,o),v(Za.$$.fragment,o),v(Rn.$$.fragment,o),v(In.$$.fragment,o),v(Sn.$$.fragment,o),v(er.$$.fragment,o),v(tr.$$.fragment,o),v(Nn.$$.fragment,o),v(rr.$$.fragment,o),v(Wn.$$.fragment,o),v(Hn.$$.fragment,o),v(Un.$$.fragment,o),v(ir.$$.fragment,o),v(lr.$$.fragment,o),v(Kn.$$.fragment,o),v(fr.$$.fragment,o),v(Gn.$$.fragment,o),v(Vn.$$.fragment,o),v(Jn.$$.fragment,o),sc=!0)},o(o){D(l.$$.fragment,o),D(F.$$.fragment,o),D(Z.$$.fragment,o),D(Oe.$$.fragment,o),D(ds.$$.fragment,o),D(gs.$$.fragment,o),D(ys.$$.fragment,o),D(xs.$$.fragment,o),D(qs.$$.fragment,o),D(Ko.$$.fragment,o),D(js.$$.fragment,o),D(Ms.$$.fragment,o),D(Vo.$$.fragment,o),D(Jo.$$.fragment,o),D(As.$$.fragment,o),D(Bs.$$.fragment,o),D(Rs.$$.fragment,o),D(Yo.$$.fragment,o),D(Is.$$.fragment,o),D(Ss.$$.fragment,o),D(Os.$$.fragment,o),D(en.$$.fragment,o),D(tn.$$.fragment,o),D(Us.$$.fragment,o),D(Ks.$$.fragment,o),D(on.$$.fragment,o),D(Gs.$$.fragment,o),D(Vs.$$.fragment,o),D(ea.$$.fragment,o),D(sn.$$.fragment,o),D(an.$$.fragment,o),D(ta.$$.fragment,o),D(oa.$$.fragment,o),D(na.$$.fragment,o),D(sa.$$.fragment,o),D(la.$$.fragment,o),D(dn.$$.fragment,o),D(cn.$$.fragment,o),D(pn.$$.fragment,o),D(da.$$.fragment,o),D(ca.$$.fragment,o),D(ua.$$.fragment,o),D(fn.$$.fragment,o),D(mn.$$.fragment,o),D(un.$$.fragment,o),D(gn.$$.fragment,o),D(_n.$$.fragment,o),D(ga.$$.fragment,o),D(_a.$$.fragment,o),D(ya.$$.fragment,o),D(kn.$$.fragment,o),D(wn.$$.fragment,o),D(Tn.$$.fragment,o),D($a.$$.fragment,o),D(va.$$.fragment,o),D(qa.$$.fragment,o),D($n.$$.fragment,o),D(vn.$$.fragment,o),D(Dn.$$.fragment,o),D(za.$$.fragment,o),D(ja.$$.fragment,o),D(Fn.$$.fragment,o),D(La.$$.fragment,o),D(xn.$$.fragment,o),D(qn.$$.fragment,o),D(Ba.$$.fragment,o),D(Ra.$$.fragment,o),D(Ia.$$.fragment,o),D(Oa.$$.fragment,o),D(Na.$$.fragment,o),D(Mn.$$.fragment,o),D(Qa.$$.fragment,o),D(Cn.$$.fragment,o),D(Pn.$$.fragment,o),D(An.$$.fragment,o),D(Ka.$$.fragment,o),D(Ga.$$.fragment,o),D(Bn.$$.fragment,o),D(Za.$$.fragment,o),D(Rn.$$.fragment,o),D(In.$$.fragment,o),D(Sn.$$.fragment,o),D(er.$$.fragment,o),D(tr.$$.fragment,o),D(Nn.$$.fragment,o),D(rr.$$.fragment,o),D(Wn.$$.fragment,o),D(Hn.$$.fragment,o),D(Un.$$.fragment,o),D(ir.$$.fragment,o),D(lr.$$.fragment,o),D(Kn.$$.fragment,o),D(fr.$$.fragment,o),D(Gn.$$.fragment,o),D(Vn.$$.fragment,o),D(Jn.$$.fragment,o),sc=!1},d(o){t(d),o&&t(_),o&&t(c),E(l),o&&t(V),o&&t(B),E(F),o&&t(we),o&&t(S),o&&t(Te),o&&t(Q),o&&t(ye),o&&t(K),o&&t($e),o&&t(ne),o&&t(ve),o&&t(R),o&&t(I),o&&t(re),E(Z),o&&t(De),o&&t(fe),o&&t(q),E(Oe,o),o&&t(ie),o&&t(pe),o&&t(yd),E(ds,o),o&&t($d),o&&t(vt),o&&t(vd),E(gs,o),o&&t(Dd),o&&t(Ot),o&&t(Ed),E(ys,o),o&&t(Fd),o&&t(Ht),o&&t(xd),o&&t(ho),E(xs),o&&t(qd),o&&t(wt),E(qs),E(Ko),o&&t(zd),o&&t(mo),E(js),o&&t(jd),o&&t(he),E(Ms),E(Vo),E(Jo),E(As),E(Bs),E(Rs),E(Yo),E(Is),o&&t(Md),o&&t(_o),E(Ss),o&&t(Cd),o&&t(Se),E(Os),E(en),E(tn),E(Us),E(Ks),E(on),o&&t(Pd),o&&t(ko),E(Gs),o&&t(Ad),o&&t(Tt),E(Vs),E(ea),E(sn),E(an),o&&t(Ld),o&&t(To),E(ta),o&&t(Bd),o&&t(yo),E(oa),o&&t(Rd),o&&t($o),E(na),o&&t(Id),o&&t(yt),E(sa),E(la),E(dn),E(cn),E(pn),o&&t(Sd),o&&t(Eo),E(da),o&&t(Od),o&&t(it),E(ca),E(ua),E(fn),E(mn),E(un),E(gn),E(_n),o&&t(Nd),o&&t(xo),E(ga),o&&t(Wd),o&&t(lt),E(_a),E(ya),E(kn),E(wn),E(Tn),o&&t(Hd),o&&t(zo),E($a),o&&t(Ud),o&&t(dt),E(va),E(qa),E($n),E(vn),E(Dn),o&&t(Qd),o&&t(Co),E(za),o&&t(Kd),o&&t(ct),E(ja),E(Fn),E(La),E(xn),E(qn),o&&t(Gd),o&&t(Ao),E(Ba),o&&t(Vd),o&&t(Pt),E(Ra),E(Ia),o&&t(Jd),o&&t(Lo),E(Oa),o&&t(Xd),o&&t(pt),E(Na),E(Mn),E(Qa),E(Cn),E(Pn),E(An),o&&t(Yd),o&&t(Io),E(Ka),o&&t(Zd),o&&t(nt),E(Ga),E(Bn),E(Za),E(Rn),E(In),E(Sn),o&&t(ec),o&&t(Oo),E(er),o&&t(tc),o&&t(st),E(tr),E(Nn),E(rr),E(Wn),E(Hn),E(Un),o&&t(oc),o&&t(Wo),E(ir),o&&t(nc),o&&t(at),E(lr),E(Kn),E(fr),E(Gn),E(Vn),E(Jn)}}}const hy={local:"deberta",sections:[{local:"overview",title:"Overview"},{local:"resources",title:"Resources"},{local:"transformers.DebertaConfig",title:"DebertaConfig"},{local:"transformers.DebertaTokenizer",title:"DebertaTokenizer"},{local:"transformers.DebertaTokenizerFast",title:"DebertaTokenizerFast"},{local:"transformers.DebertaModel",title:"DebertaModel"},{local:"transformers.DebertaPreTrainedModel",title:"DebertaPreTrainedModel"},{local:"transformers.DebertaForMaskedLM",title:"DebertaForMaskedLM"},{local:"transformers.DebertaForSequenceClassification",title:"DebertaForSequenceClassification"},{local:"transformers.DebertaForTokenClassification",title:"DebertaForTokenClassification"},{local:"transformers.DebertaForQuestionAnswering",title:"DebertaForQuestionAnswering"},{local:"transformers.TFDebertaModel",title:"TFDebertaModel"},{local:"transformers.TFDebertaPreTrainedModel",title:"TFDebertaPreTrainedModel"},{local:"transformers.TFDebertaForMaskedLM",title:"TFDebertaForMaskedLM"},{local:"transformers.TFDebertaForSequenceClassification",title:"TFDebertaForSequenceClassification"},{local:"transformers.TFDebertaForTokenClassification",title:"TFDebertaForTokenClassification"},{local:"transformers.TFDebertaForQuestionAnswering",title:"TFDebertaForQuestionAnswering"}],title:"DeBERTa"};function fy(x){return yT(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ty extends bT{constructor(d){super();kT(this,d,fy,py,wT,{})}}export{Ty as default,hy as metadata};
