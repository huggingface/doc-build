import{S as Ap,i as qp,s as Np,e as r,k as c,w as S,t as n,M as Op,c as a,d as t,m,a as s,x as w,h as i,b as l,N as Lp,G as e,g as u,y as T,q as $,o as y,B as F,v as Rp,L as er}from"../../chunks/vendor-hf-doc-builder.js";import{T as pa}from"../../chunks/Tip-hf-doc-builder.js";import{D as k}from"../../chunks/Docstring-hf-doc-builder.js";import{C as tr}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Y}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Qo}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Hp(E){let f,v,_,p,b;return p=new tr({props:{code:`from transformers import SegformerModel, SegformerConfig

# Initializing a SegFormer nvidia/segformer-b0-finetuned-ade-512-512 style configuration
configuration = SegformerConfig()

# Initializing a model from the nvidia/segformer-b0-finetuned-ade-512-512 style configuration
model = SegformerModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerModel, SegformerConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a SegFormer nvidia/segformer-b0-finetuned-ade-512-512 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = SegformerConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the nvidia/segformer-b0-finetuned-ade-512-512 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SegformerModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){f=r("p"),v=n("Example:"),_=c(),S(p.$$.fragment)},l(d){f=a(d,"P",{});var h=s(f);v=i(h,"Example:"),h.forEach(t),_=m(d),w(p.$$.fragment,d)},m(d,h){u(d,f,h),e(f,v),u(d,_,h),T(p,d,h),b=!0},p:er,i(d){b||($(p.$$.fragment,d),b=!0)},o(d){y(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(_),F(p,d)}}}function Wp(E){let f,v,_,p,b;return{c(){f=r("p"),v=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),_=r("code"),p=n("Module"),b=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var h=s(f);v=i(h,"Although the recipe for forward pass needs to be defined within this function, one should call the "),_=a(h,"CODE",{});var x=s(_);p=i(x,"Module"),x.forEach(t),b=i(h,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),h.forEach(t)},m(d,h){u(d,f,h),e(f,v),e(f,_),e(_,p),e(f,b)},d(d){d&&t(f)}}}function Up(E){let f,v,_,p,b;return p=new tr({props:{code:`from transformers import SegformerFeatureExtractor, SegformerModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/mit-b0")
model = SegformerModel.from_pretrained("nvidia/mit-b0")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, SegformerModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SegformerModel.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">256</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>]`}}),{c(){f=r("p"),v=n("Example:"),_=c(),S(p.$$.fragment)},l(d){f=a(d,"P",{});var h=s(f);v=i(h,"Example:"),h.forEach(t),_=m(d),w(p.$$.fragment,d)},m(d,h){u(d,f,h),e(f,v),u(d,_,h),T(p,d,h),b=!0},p:er,i(d){b||($(p.$$.fragment,d),b=!0)},o(d){y(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(_),F(p,d)}}}function Bp(E){let f,v,_,p,b;return{c(){f=r("p"),v=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),_=r("code"),p=n("Module"),b=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var h=s(f);v=i(h,"Although the recipe for forward pass needs to be defined within this function, one should call the "),_=a(h,"CODE",{});var x=s(_);p=i(x,"Module"),x.forEach(t),b=i(h,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),h.forEach(t)},m(d,h){u(d,f,h),e(f,v),e(f,_),e(_,p),e(f,b)},d(d){d&&t(f)}}}function Vp(E){let f,v,_,p,b;return p=new tr({props:{code:`from transformers import SegformerFeatureExtractor, SegformerForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/mit-b0")
model = SegformerForImageClassification.from_pretrained("nvidia/mit-b0")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, SegformerForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SegformerForImageClassification.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){f=r("p"),v=n("Example:"),_=c(),S(p.$$.fragment)},l(d){f=a(d,"P",{});var h=s(f);v=i(h,"Example:"),h.forEach(t),_=m(d),w(p.$$.fragment,d)},m(d,h){u(d,f,h),e(f,v),u(d,_,h),T(p,d,h),b=!0},p:er,i(d){b||($(p.$$.fragment,d),b=!0)},o(d){y(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(_),F(p,d)}}}function Gp(E){let f,v,_,p,b;return{c(){f=r("p"),v=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),_=r("code"),p=n("Module"),b=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var h=s(f);v=i(h,"Although the recipe for forward pass needs to be defined within this function, one should call the "),_=a(h,"CODE",{});var x=s(_);p=i(x,"Module"),x.forEach(t),b=i(h,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),h.forEach(t)},m(d,h){u(d,f,h),e(f,v),e(f,_),e(_,p),e(f,b)},d(d){d&&t(f)}}}function Kp(E){let f,v,_,p,b;return p=new tr({props:{code:`from transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation
from PIL import Image
import requests

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/segformer-b0-finetuned-ade-512-512")
model = SegformerForSemanticSegmentation.from_pretrained("nvidia/segformer-b0-finetuned-ade-512-512")

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
logits = outputs.logits  # shape (batch_size, num_labels, height/4, width/4)
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, SegformerForSemanticSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/segformer-b0-finetuned-ade-512-512&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SegformerForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;nvidia/segformer-b0-finetuned-ade-512-512&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits  <span class="hljs-comment"># shape (batch_size, num_labels, height/4, width/4)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">150</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>]`}}),{c(){f=r("p"),v=n("Examples:"),_=c(),S(p.$$.fragment)},l(d){f=a(d,"P",{});var h=s(f);v=i(h,"Examples:"),h.forEach(t),_=m(d),w(p.$$.fragment,d)},m(d,h){u(d,f,h),e(f,v),u(d,_,h),T(p,d,h),b=!0},p:er,i(d){b||($(p.$$.fragment,d),b=!0)},o(d){y(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(_),F(p,d)}}}function Yp(E){let f,v,_,p,b;return{c(){f=r("p"),v=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),_=r("code"),p=n("Module"),b=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var h=s(f);v=i(h,"Although the recipe for forward pass needs to be defined within this function, one should call the "),_=a(h,"CODE",{});var x=s(_);p=i(x,"Module"),x.forEach(t),b=i(h,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),h.forEach(t)},m(d,h){u(d,f,h),e(f,v),e(f,_),e(_,p),e(f,b)},d(d){d&&t(f)}}}function Jp(E){let f,v,_,p,b;return p=new tr({props:{code:`from transformers import SegformerFeatureExtractor, TFSegformerModel
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/mit-b0")
model = TFSegformerModel.from_pretrained("nvidia/mit-b0")

inputs = feature_extractor(image, return_tensors="tf")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, TFSegformerModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFSegformerModel.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">256</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>]`}}),{c(){f=r("p"),v=n("Example:"),_=c(),S(p.$$.fragment)},l(d){f=a(d,"P",{});var h=s(f);v=i(h,"Example:"),h.forEach(t),_=m(d),w(p.$$.fragment,d)},m(d,h){u(d,f,h),e(f,v),u(d,_,h),T(p,d,h),b=!0},p:er,i(d){b||($(p.$$.fragment,d),b=!0)},o(d){y(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(_),F(p,d)}}}function Xp(E){let f,v,_,p,b;return{c(){f=r("p"),v=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),_=r("code"),p=n("Module"),b=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var h=s(f);v=i(h,"Although the recipe for forward pass needs to be defined within this function, one should call the "),_=a(h,"CODE",{});var x=s(_);p=i(x,"Module"),x.forEach(t),b=i(h,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),h.forEach(t)},m(d,h){u(d,f,h),e(f,v),e(f,_),e(_,p),e(f,b)},d(d){d&&t(f)}}}function Zp(E){let f,v,_,p,b;return p=new tr({props:{code:`from transformers import SegformerFeatureExtractor, TFSegformerForImageClassification
import tensorflow as tf
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/mit-b0")
model = TFSegformerForImageClassification.from_pretrained("nvidia/mit-b0")

inputs = feature_extractor(image, return_tensors="tf")
logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = int(tf.math.argmax(logits, axis=-1))
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, TFSegformerForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFSegformerForImageClassification.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = <span class="hljs-built_in">int</span>(tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){f=r("p"),v=n("Example:"),_=c(),S(p.$$.fragment)},l(d){f=a(d,"P",{});var h=s(f);v=i(h,"Example:"),h.forEach(t),_=m(d),w(p.$$.fragment,d)},m(d,h){u(d,f,h),e(f,v),u(d,_,h),T(p,d,h),b=!0},p:er,i(d){b||($(p.$$.fragment,d),b=!0)},o(d){y(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(_),F(p,d)}}}function Qp(E){let f,v,_,p,b;return{c(){f=r("p"),v=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),_=r("code"),p=n("Module"),b=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var h=s(f);v=i(h,"Although the recipe for forward pass needs to be defined within this function, one should call the "),_=a(h,"CODE",{});var x=s(_);p=i(x,"Module"),x.forEach(t),b=i(h,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),h.forEach(t)},m(d,h){u(d,f,h),e(f,v),e(f,_),e(_,p),e(f,b)},d(d){d&&t(f)}}}function eu(E){let f,v,_,p,b;return p=new tr({props:{code:`from transformers import SegformerFeatureExtractor, TFSegformerForSemanticSegmentation
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/segformer-b0-finetuned-ade-512-512")
model = TFSegformerForSemanticSegmentation.from_pretrained("nvidia/segformer-b0-finetuned-ade-512-512")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs, training=False)
# logits are of shape (batch_size, num_labels, height/4, width/4)
logits = outputs.logits
list(logits.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, TFSegformerForSemanticSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/segformer-b0-finetuned-ade-512-512&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFSegformerForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;nvidia/segformer-b0-finetuned-ade-512-512&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, training=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># logits are of shape (batch_size, num_labels, height/4, width/4)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(logits.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">150</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>]`}}),{c(){f=r("p"),v=n("Examples:"),_=c(),S(p.$$.fragment)},l(d){f=a(d,"P",{});var h=s(f);v=i(h,"Examples:"),h.forEach(t),_=m(d),w(p.$$.fragment,d)},m(d,h){u(d,f,h),e(f,v),u(d,_,h),T(p,d,h),b=!0},p:er,i(d){b||($(p.$$.fragment,d),b=!0)},o(d){y(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(_),F(p,d)}}}function tu(E){let f,v,_,p,b,d,h,x,ti,Ls,ue,Re,ua,Mt,oi,_a,ri,Rs,He,ai,zt,si,ni,Hs,or,ii,Ws,rr,ba,li,Us,We,di,jt,ci,mi,Bs,Dt,Xf,Vs,J,fi,At,gi,hi,qt,pi,ui,Nt,_i,bi,Gs,ar,vi,Ks,P,H,Si,sr,wi,Ti,nr,$i,yi,ir,Fi,Ei,Ot,xi,Ii,ki,_e,Pi,Lt,Ci,Mi,Rt,zi,ji,Di,Ht,Ai,Wt,qi,Ni,Oi,Ut,Li,Bt,Ri,Hi,Wi,Vt,Ui,va,Bi,Vi,Gi,be,Ki,lr,Yi,Ji,Gt,Xi,Zi,Qi,I,el,dr,tl,ol,Sa,rl,al,wa,sl,nl,Ta,il,ll,$a,dl,cl,ya,ml,fl,cr,gl,hl,Fa,pl,ul,Ea,_l,bl,vl,Kt,Sl,Yt,wl,Tl,Ys,Ue,xa,z,mr,Ia,$l,yl,ka,Pa,Fl,El,Ca,Ma,xl,Il,fr,za,kl,Pl,gr,ja,Cl,Ml,hr,Da,zl,jl,j,D,pr,Dl,Al,Aa,ql,Nl,qa,Ol,Ll,ur,Rl,Hl,_r,Wl,Ul,br,Bl,Vl,A,vr,Gl,Kl,Na,Yl,Jl,Oa,Xl,Zl,Sr,Ql,ed,wr,td,od,Tr,rd,ad,q,$r,sd,nd,La,id,ld,Ra,dd,cd,yr,md,fd,Fr,gd,hd,Er,pd,ud,N,xr,_d,bd,Ha,vd,Sd,Wa,wd,Td,Ir,$d,yd,kr,Fd,Ed,Pr,xd,Id,O,Cr,kd,Pd,Ua,Cd,Md,Ba,zd,jd,Mr,Dd,Ad,zr,qd,Nd,jr,Od,Ld,L,Dr,Rd,Hd,Va,Wd,Ud,Ga,Bd,Vd,Ar,Gd,Kd,qr,Yd,Jd,Nr,Xd,Js,Be,Zd,Jt,Qd,ec,Xs,ve,Ve,Ka,Xt,tc,Ya,oc,Zs,W,Zt,rc,Se,ac,Or,sc,nc,Qt,ic,lc,dc,we,cc,Lr,mc,fc,Rr,gc,hc,pc,Ge,Qs,Te,Ke,Ja,eo,uc,Xa,_c,en,U,to,bc,Za,vc,Sc,ge,oo,wc,Qa,Tc,$c,$e,yc,es,Fc,Ec,ts,xc,Ic,kc,Ye,ro,Pc,ao,Cc,Hr,Mc,zc,tn,ye,Je,os,so,jc,rs,Dc,on,B,no,Ac,as,qc,Nc,Xe,io,Oc,ss,Lc,Rc,Ze,lo,Hc,co,Wc,Wr,Uc,Bc,rn,Fe,Qe,ns,mo,Vc,is,Gc,an,me,fo,Kc,go,Yc,ho,Jc,Xc,Zc,X,po,Qc,Ee,em,Ur,tm,om,ls,rm,am,sm,et,nm,tt,sn,xe,ot,ds,uo,im,cs,lm,nn,Ie,_o,dm,Br,bo,ln,ke,rt,ms,vo,cm,fs,mm,dn,V,So,fm,gs,gm,hm,wo,pm,To,um,_m,bm,Z,$o,vm,Pe,Sm,Vr,wm,Tm,hs,$m,ym,Fm,at,Em,st,cn,Ce,nt,ps,yo,xm,us,Im,mn,fe,Fo,km,Eo,Pm,xo,Cm,Mm,zm,Q,Io,jm,Me,Dm,Gr,Am,qm,_s,Nm,Om,Lm,it,Rm,lt,fn,ze,dt,bs,ko,Hm,vs,Wm,gn,je,Po,Um,Kr,Co,hn,De,ct,Ss,Mo,Bm,ws,Vm,pn,G,zo,Gm,jo,Km,Yr,Ym,Jm,Xm,Do,Zm,Ao,Qm,ef,tf,ee,qo,of,Ae,rf,Jr,af,sf,Ts,nf,lf,df,mt,cf,ft,un,qe,gt,$s,No,mf,ys,ff,_n,R,Oo,gf,Fs,hf,pf,Lo,uf,Xr,_f,bf,vf,Ro,Sf,Ho,wf,Tf,$f,te,Wo,yf,Ne,Ff,Zr,Ef,xf,Es,If,kf,Pf,ht,Cf,pt,bn,Oe,ut,xs,Uo,Mf,Is,zf,vn,K,Bo,jf,Vo,Df,Qr,Af,qf,Nf,Go,Of,Ko,Lf,Rf,Hf,oe,Yo,Wf,Le,Uf,ea,Bf,Vf,ks,Gf,Kf,Yf,_t,Jf,bt,Sn;return d=new Y({}),Mt=new Y({}),Xt=new Y({}),Zt=new k({props:{name:"class transformers.SegformerConfig",anchor:"transformers.SegformerConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"num_encoder_blocks",val:" = 4"},{name:"depths",val:" = [2, 2, 2, 2]"},{name:"sr_ratios",val:" = [8, 4, 2, 1]"},{name:"hidden_sizes",val:" = [32, 64, 160, 256]"},{name:"patch_sizes",val:" = [7, 3, 3, 3]"},{name:"strides",val:" = [4, 2, 2, 2]"},{name:"num_attention_heads",val:" = [1, 2, 5, 8]"},{name:"mlp_ratios",val:" = [4, 4, 4, 4]"},{name:"hidden_act",val:" = 'gelu'"},{name:"hidden_dropout_prob",val:" = 0.0"},{name:"attention_probs_dropout_prob",val:" = 0.0"},{name:"classifier_dropout_prob",val:" = 0.1"},{name:"initializer_range",val:" = 0.02"},{name:"drop_path_rate",val:" = 0.1"},{name:"layer_norm_eps",val:" = 1e-06"},{name:"decoder_hidden_size",val:" = 256"},{name:"is_encoder_decoder",val:" = False"},{name:"semantic_loss_ignore_index",val:" = 255"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SegformerConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.SegformerConfig.num_encoder_blocks",description:`<strong>num_encoder_blocks</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of encoder blocks (i.e. stages in the Mix Transformer encoder).`,name:"num_encoder_blocks"},{anchor:"transformers.SegformerConfig.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [2, 2, 2, 2]) &#x2014;
The number of layers in each encoder block.`,name:"depths"},{anchor:"transformers.SegformerConfig.sr_ratios",description:`<strong>sr_ratios</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [8, 4, 2, 1]) &#x2014;
Sequence reduction ratios in each encoder block.`,name:"sr_ratios"},{anchor:"transformers.SegformerConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [32, 64, 160, 256]) &#x2014;
Dimension of each of the encoder blocks.`,name:"hidden_sizes"},{anchor:"transformers.SegformerConfig.patch_sizes",description:`<strong>patch_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [7, 3, 3, 3]) &#x2014;
Patch size before each encoder block.`,name:"patch_sizes"},{anchor:"transformers.SegformerConfig.strides",description:`<strong>strides</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [4, 2, 2, 2]) &#x2014;
Stride before each encoder block.`,name:"strides"},{anchor:"transformers.SegformerConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [1, 2, 5, 8]) &#x2014;
Number of attention heads for each attention layer in each block of the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.SegformerConfig.mlp_ratios",description:`<strong>mlp_ratios</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [4, 4, 4, 4]) &#x2014;
Ratio of the size of the hidden layer compared to the size of the input layer of the Mix FFNs in the
encoder blocks.`,name:"mlp_ratios"},{anchor:"transformers.SegformerConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.SegformerConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.SegformerConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.SegformerConfig.classifier_dropout_prob",description:`<strong>classifier_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability before the classification head.`,name:"classifier_dropout_prob"},{anchor:"transformers.SegformerConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.SegformerConfig.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for stochastic depth, used in the blocks of the Transformer encoder.`,name:"drop_path_rate"},{anchor:"transformers.SegformerConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-6) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.SegformerConfig.decoder_hidden_size",description:`<strong>decoder_hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
The dimension of the all-MLP decode head.`,name:"decoder_hidden_size"},{anchor:"transformers.SegformerConfig.semantic_loss_ignore_index",description:`<strong>semantic_loss_ignore_index</strong> (<code>int</code>, <em>optional</em>, defaults to 255) &#x2014;
The index that is ignored by the loss function of the semantic segmentation model.`,name:"semantic_loss_ignore_index"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/configuration_segformer.py#L38"}}),Ge=new Qo({props:{anchor:"transformers.SegformerConfig.example",$$slots:{default:[Hp]},$$scope:{ctx:E}}}),eo=new Y({}),to=new k({props:{name:"class transformers.SegformerImageProcessor",anchor:"transformers.SegformerImageProcessor",parameters:[{name:"do_resize",val:": bool = True"},{name:"size",val:": typing.Dict[str, int] = None"},{name:"resample",val:": Resampling = <Resampling.BILINEAR: 2>"},{name:"do_rescale",val:": bool = True"},{name:"rescale_factor",val:": typing.Union[int, float] = 0.00392156862745098"},{name:"do_normalize",val:": bool = True"},{name:"image_mean",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"image_std",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"do_reduce_labels",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SegformerImageProcessor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the image&#x2019;s (height, width) dimensions to the specified <code>(size[&quot;height&quot;], size[&quot;width&quot;])</code>. Can be overridden by the <code>do_resize</code> parameter in the <code>preprocess</code> method.`,name:"do_resize"},{anchor:"transformers.SegformerImageProcessor.size",description:`<strong>size</strong> (<code>Dict[str, int]</code> <em>optional</em>, defaults to <code>{&quot;height&quot; -- 512, &quot;width&quot;: 512}</code>):
Size of the output image after resizing. Can be overridden by the <code>size</code> parameter in the <code>preprocess</code>
method.`,name:"size"},{anchor:"transformers.SegformerImageProcessor.resample",description:`<strong>resample</strong> (<code>PILImageResampling</code>, <em>optional</em>, defaults to <code>PILImageResampling.BILINEAR</code>) &#x2014;
Resampling filter to use if resizing the image. Can be overridden by the <code>resample</code> parameter in the
<code>preprocess</code> method.`,name:"resample"},{anchor:"transformers.SegformerImageProcessor.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to rescale the image by the specified scale <code>rescale_factor</code>. Can be overridden by the <code>do_rescale</code>
parameter in the <code>preprocess</code> method.`,name:"do_rescale"},{anchor:"transformers.SegformerImageProcessor.rescale_factor",description:`<strong>rescale_factor</strong> (<code>int</code> or <code>float</code>, <em>optional</em>, defaults to <code>1/255</code>) &#x2014;
Whether to normalize the image. Can be overridden by the <code>do_normalize</code> parameter in the <code>preprocess</code>
method.`,name:"rescale_factor"},{anchor:"transformers.SegformerImageProcessor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to normalize the image. Can be overridden by the <code>do_normalize</code> parameter in the <code>preprocess</code>
method.`,name:"do_normalize"},{anchor:"transformers.SegformerImageProcessor.image_mean",description:`<strong>image_mean</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>IMAGENET_STANDARD_MEAN</code>) &#x2014;
Mean to use if normalizing the image. This is a float or list of floats the length of the number of
channels in the image. Can be overridden by the <code>image_mean</code> parameter in the <code>preprocess</code> method.`,name:"image_mean"},{anchor:"transformers.SegformerImageProcessor.image_std",description:`<strong>image_std</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>IMAGENET_STANDARD_STD</code>) &#x2014;
Standard deviation to use if normalizing the image. This is a float or list of floats the length of the
number of channels in the image. Can be overridden by the <code>image_std</code> parameter in the <code>preprocess</code> method.`,name:"image_std"},{anchor:"transformers.SegformerImageProcessor.do_reduce_labels",description:`<strong>do_reduce_labels</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to reduce all label values of segmentation maps by 1. Usually used for datasets where 0 is
used for background, and background itself is not included in all classes of a dataset (e.g. ADE20k). The
background label will be replaced by 255. Can be overridden by the <code>do_reduce_labels</code> parameter in the
<code>preprocess</code> method.`,name:"do_reduce_labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/image_processing_segformer.py#L50"}}),oo=new k({props:{name:"__call__",anchor:"transformers.SegformerImageProcessor.__call__",parameters:[{name:"images",val:""},{name:"segmentation_maps",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/image_processing_segformer.py#L313"}}),ro=new k({props:{name:"post_process_semantic_segmentation",anchor:"transformers.SegformerImageProcessor.post_process_semantic_segmentation",parameters:[{name:"outputs",val:""},{name:"target_sizes",val:": typing.List[typing.Tuple] = None"}],parametersDescription:[{anchor:"transformers.SegformerImageProcessor.post_process_semantic_segmentation.outputs",description:`<strong>outputs</strong> (<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a>) &#x2014;
Raw outputs of the model.`,name:"outputs"},{anchor:"transformers.SegformerImageProcessor.post_process_semantic_segmentation.target_sizes",description:`<strong>target_sizes</strong> (<code>List[Tuple]</code> of length <code>batch_size</code>, <em>optional</em>) &#x2014;
List of tuples corresponding to the requested final size (height, width) of each prediction. If left to
None, predictions will not be resized.`,name:"target_sizes"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/image_processing_segformer.py#L448",returnDescription:`
<p><code>List[torch.Tensor]</code> of length <code>batch_size</code>, where each item is a semantic
segmentation map of shape (height, width) corresponding to the target_sizes entry (if <code>target_sizes</code> is
specified). Each entry of each <code>torch.Tensor</code> correspond to a semantic class id.</p>
`,returnType:`
<p>semantic_segmentation</p>
`}}),so=new Y({}),no=new k({props:{name:"class transformers.SegformerImageProcessor",anchor:"transformers.SegformerImageProcessor",parameters:[{name:"do_resize",val:": bool = True"},{name:"size",val:": typing.Dict[str, int] = None"},{name:"resample",val:": Resampling = <Resampling.BILINEAR: 2>"},{name:"do_rescale",val:": bool = True"},{name:"rescale_factor",val:": typing.Union[int, float] = 0.00392156862745098"},{name:"do_normalize",val:": bool = True"},{name:"image_mean",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"image_std",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"do_reduce_labels",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SegformerImageProcessor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the image&#x2019;s (height, width) dimensions to the specified <code>(size[&quot;height&quot;], size[&quot;width&quot;])</code>. Can be overridden by the <code>do_resize</code> parameter in the <code>preprocess</code> method.`,name:"do_resize"},{anchor:"transformers.SegformerImageProcessor.size",description:`<strong>size</strong> (<code>Dict[str, int]</code> <em>optional</em>, defaults to <code>{&quot;height&quot; -- 512, &quot;width&quot;: 512}</code>):
Size of the output image after resizing. Can be overridden by the <code>size</code> parameter in the <code>preprocess</code>
method.`,name:"size"},{anchor:"transformers.SegformerImageProcessor.resample",description:`<strong>resample</strong> (<code>PILImageResampling</code>, <em>optional</em>, defaults to <code>PILImageResampling.BILINEAR</code>) &#x2014;
Resampling filter to use if resizing the image. Can be overridden by the <code>resample</code> parameter in the
<code>preprocess</code> method.`,name:"resample"},{anchor:"transformers.SegformerImageProcessor.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to rescale the image by the specified scale <code>rescale_factor</code>. Can be overridden by the <code>do_rescale</code>
parameter in the <code>preprocess</code> method.`,name:"do_rescale"},{anchor:"transformers.SegformerImageProcessor.rescale_factor",description:`<strong>rescale_factor</strong> (<code>int</code> or <code>float</code>, <em>optional</em>, defaults to <code>1/255</code>) &#x2014;
Whether to normalize the image. Can be overridden by the <code>do_normalize</code> parameter in the <code>preprocess</code>
method.`,name:"rescale_factor"},{anchor:"transformers.SegformerImageProcessor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to normalize the image. Can be overridden by the <code>do_normalize</code> parameter in the <code>preprocess</code>
method.`,name:"do_normalize"},{anchor:"transformers.SegformerImageProcessor.image_mean",description:`<strong>image_mean</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>IMAGENET_STANDARD_MEAN</code>) &#x2014;
Mean to use if normalizing the image. This is a float or list of floats the length of the number of
channels in the image. Can be overridden by the <code>image_mean</code> parameter in the <code>preprocess</code> method.`,name:"image_mean"},{anchor:"transformers.SegformerImageProcessor.image_std",description:`<strong>image_std</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>IMAGENET_STANDARD_STD</code>) &#x2014;
Standard deviation to use if normalizing the image. This is a float or list of floats the length of the
number of channels in the image. Can be overridden by the <code>image_std</code> parameter in the <code>preprocess</code> method.`,name:"image_std"},{anchor:"transformers.SegformerImageProcessor.do_reduce_labels",description:`<strong>do_reduce_labels</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to reduce all label values of segmentation maps by 1. Usually used for datasets where 0 is
used for background, and background itself is not included in all classes of a dataset (e.g. ADE20k). The
background label will be replaced by 255. Can be overridden by the <code>do_reduce_labels</code> parameter in the
<code>preprocess</code> method.`,name:"do_reduce_labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/image_processing_segformer.py#L50"}}),io=new k({props:{name:"preprocess",anchor:"transformers.SegformerImageProcessor.preprocess",parameters:[{name:"images",val:": typing.Union[ForwardRef('PIL.Image.Image'), numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[ForwardRef('PIL.Image.Image')], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"segmentation_maps",val:": typing.Union[ForwardRef('PIL.Image.Image'), numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[ForwardRef('PIL.Image.Image')], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')], NoneType] = None"},{name:"do_resize",val:": typing.Optional[bool] = None"},{name:"size",val:": typing.Union[typing.Dict[str, int], NoneType] = None"},{name:"resample",val:": Resampling = None"},{name:"do_rescale",val:": typing.Optional[bool] = None"},{name:"rescale_factor",val:": typing.Optional[float] = None"},{name:"do_normalize",val:": typing.Optional[bool] = None"},{name:"image_mean",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"image_std",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"do_reduce_labels",val:": typing.Optional[bool] = None"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"data_format",val:": ChannelDimension = <ChannelDimension.FIRST: 'channels_first'>"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SegformerImageProcessor.preprocess.images",description:`<strong>images</strong> (<code>ImageInput</code>) &#x2014;
Image to preprocess.`,name:"images"},{anchor:"transformers.SegformerImageProcessor.preprocess.segmentation_maps",description:`<strong>segmentation_maps</strong> (<code>ImageInput</code>, <em>optional</em>) &#x2014;
Segmentation map to preprocess.`,name:"segmentation_maps"},{anchor:"transformers.SegformerImageProcessor.preprocess.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_resize</code>) &#x2014;
Whether to resize the image.`,name:"do_resize"},{anchor:"transformers.SegformerImageProcessor.preprocess.size",description:`<strong>size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>self.size</code>) &#x2014;
Size of the image after <code>resize</code> is applied.`,name:"size"},{anchor:"transformers.SegformerImageProcessor.preprocess.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>self.resample</code>) &#x2014;
Resampling filter to use if resizing the image. This can be one of the enum <code>PILImageResampling</code>, Only
has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.SegformerImageProcessor.preprocess.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_rescale</code>) &#x2014;
Whether to rescale the image values between [0 - 1].`,name:"do_rescale"},{anchor:"transformers.SegformerImageProcessor.preprocess.rescale_factor",description:`<strong>rescale_factor</strong> (<code>float</code>, <em>optional</em>, defaults to <code>self.rescale_factor</code>) &#x2014;
Rescale factor to rescale the image by if <code>do_rescale</code> is set to <code>True</code>.`,name:"rescale_factor"},{anchor:"transformers.SegformerImageProcessor.preprocess.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_normalize</code>) &#x2014;
Whether to normalize the image.`,name:"do_normalize"},{anchor:"transformers.SegformerImageProcessor.preprocess.image_mean",description:`<strong>image_mean</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>self.image_mean</code>) &#x2014;
Image mean.`,name:"image_mean"},{anchor:"transformers.SegformerImageProcessor.preprocess.image_std",description:`<strong>image_std</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>self.image_std</code>) &#x2014;
Image standard deviation.`,name:"image_std"},{anchor:"transformers.SegformerImageProcessor.preprocess.do_reduce_labels",description:`<strong>do_reduce_labels</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_reduce_labels</code>) &#x2014;
Whether or not to reduce all label values of segmentation maps by 1. Usually used for datasets where 0
is used for background, and background itself is not included in all classes of a dataset (e.g.
ADE20k). The background label will be replaced by 255.`,name:"do_reduce_labels"},{anchor:"transformers.SegformerImageProcessor.preprocess.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <code>TensorType</code>, <em>optional</em>) &#x2014;
The type of tensors to return. Can be one of:<ul>
<li>Unset: Return a list of <code>np.ndarray</code>.</li>
<li><code>TensorType.TENSORFLOW</code> or <code>&apos;tf&apos;</code>: Return a batch of type <code>tf.Tensor</code>.</li>
<li><code>TensorType.PYTORCH</code> or <code>&apos;pt&apos;</code>: Return a batch of type <code>torch.Tensor</code>.</li>
<li><code>TensorType.NUMPY</code> or <code>&apos;np&apos;</code>: Return a batch of type <code>np.ndarray</code>.</li>
<li><code>TensorType.JAX</code> or <code>&apos;jax&apos;</code>: Return a batch of type <code>jax.numpy.ndarray</code>.</li>
</ul>`,name:"return_tensors"},{anchor:"transformers.SegformerImageProcessor.preprocess.data_format",description:`<strong>data_format</strong> (<code>ChannelDimension</code> or <code>str</code>, <em>optional</em>, defaults to <code>ChannelDimension.FIRST</code>) &#x2014;
The channel dimension format for the output image. Can be one of:<ul>
<li><code>ChannelDimension.FIRST</code>: image in (num_channels, height, width) format.</li>
<li><code>ChannelDimension.LAST</code>: image in (height, width, num_channels) format.</li>
</ul>`,name:"data_format"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/image_processing_segformer.py#L322"}}),lo=new k({props:{name:"post_process_semantic_segmentation",anchor:"transformers.SegformerImageProcessor.post_process_semantic_segmentation",parameters:[{name:"outputs",val:""},{name:"target_sizes",val:": typing.List[typing.Tuple] = None"}],parametersDescription:[{anchor:"transformers.SegformerImageProcessor.post_process_semantic_segmentation.outputs",description:`<strong>outputs</strong> (<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a>) &#x2014;
Raw outputs of the model.`,name:"outputs"},{anchor:"transformers.SegformerImageProcessor.post_process_semantic_segmentation.target_sizes",description:`<strong>target_sizes</strong> (<code>List[Tuple]</code> of length <code>batch_size</code>, <em>optional</em>) &#x2014;
List of tuples corresponding to the requested final size (height, width) of each prediction. If left to
None, predictions will not be resized.`,name:"target_sizes"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/image_processing_segformer.py#L448",returnDescription:`
<p><code>List[torch.Tensor]</code> of length <code>batch_size</code>, where each item is a semantic
segmentation map of shape (height, width) corresponding to the target_sizes entry (if <code>target_sizes</code> is
specified). Each entry of each <code>torch.Tensor</code> correspond to a semantic class id.</p>
`,returnType:`
<p>semantic_segmentation</p>
`}}),mo=new Y({}),fo=new k({props:{name:"class transformers.SegformerModel",anchor:"transformers.SegformerModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SegformerModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L511"}}),po=new k({props:{name:"forward",anchor:"transformers.SegformerModel.forward",parameters:[{name:"pixel_values",val:": FloatTensor"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.SegformerModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerImageProcessor">SegformerFeatureExtractor</a>. See <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerImageProcessor.__call__">SegformerFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.SegformerModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SegformerModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SegformerModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L530",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput"
>transformers.modeling_outputs.BaseModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput"
>transformers.modeling_outputs.BaseModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),et=new pa({props:{$$slots:{default:[Wp]},$$scope:{ctx:E}}}),tt=new Qo({props:{anchor:"transformers.SegformerModel.forward.example",$$slots:{default:[Up]},$$scope:{ctx:E}}}),uo=new Y({}),_o=new k({props:{name:"class transformers.SegformerDecodeHead",anchor:"transformers.SegformerDecodeHead",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L684"}}),bo=new k({props:{name:"forward",anchor:"transformers.SegformerDecodeHead.forward",parameters:[{name:"encoder_hidden_states",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L709"}}),vo=new Y({}),So=new k({props:{name:"class transformers.SegformerForImageClassification",anchor:"transformers.SegformerForImageClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SegformerForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L577"}}),$o=new k({props:{name:"forward",anchor:"transformers.SegformerForImageClassification.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.FloatTensor] = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.SegformerForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerImageProcessor">SegformerFeatureExtractor</a>. See <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerImageProcessor.__call__">SegformerFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.SegformerForImageClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SegformerForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SegformerForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.SegformerForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L590",returnDescription:`
<p>A <code>transformers.models.segformer.modeling_segformer.SegFormerImageClassifierOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.models.segformer.modeling_segformer.SegFormerImageClassifierOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),at=new pa({props:{$$slots:{default:[Bp]},$$scope:{ctx:E}}}),st=new Qo({props:{anchor:"transformers.SegformerForImageClassification.forward.example",$$slots:{default:[Vp]},$$scope:{ctx:E}}}),yo=new Y({}),Fo=new k({props:{name:"class transformers.SegformerForSemanticSegmentation",anchor:"transformers.SegformerForSemanticSegmentation",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SegformerForSemanticSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L746"}}),Io=new k({props:{name:"forward",anchor:"transformers.SegformerForSemanticSegmentation.forward",parameters:[{name:"pixel_values",val:": FloatTensor"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.SegformerForSemanticSegmentation.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerImageProcessor">SegformerFeatureExtractor</a>. See <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerImageProcessor.__call__">SegformerFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.SegformerForSemanticSegmentation.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SegformerForSemanticSegmentation.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SegformerForSemanticSegmentation.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.SegformerForSemanticSegmentation.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Ground truth semantic segmentation maps for computing the loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code>, a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L755",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput"
>transformers.modeling_outputs.SemanticSegmenterOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels, logits_height, logits_width)</code>) \u2014 Classification scores for each pixel.</p>
<Tip warning={true}>
<p>The logits returned do not necessarily have the same size as the <code>pixel_values</code> passed as inputs. This is
to avoid doing two interpolations and lose some quality when a user needs to resize the logits to the
original image size as post-processing. You should always check your logits shape and resize as needed.</p>
</Tip>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, patch_size, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput"
>transformers.modeling_outputs.SemanticSegmenterOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),it=new pa({props:{$$slots:{default:[Gp]},$$scope:{ctx:E}}}),lt=new Qo({props:{anchor:"transformers.SegformerForSemanticSegmentation.forward.example",$$slots:{default:[Kp]},$$scope:{ctx:E}}}),ko=new Y({}),Po=new k({props:{name:"class transformers.TFSegformerDecodeHead",anchor:"transformers.TFSegformerDecodeHead",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L730"}}),Co=new k({props:{name:"call",anchor:"transformers.TFSegformerDecodeHead.call",parameters:[{name:"encoder_hidden_states",val:""},{name:"training",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L752"}}),Mo=new Y({}),zo=new k({props:{name:"class transformers.TFSegformerModel",anchor:"transformers.TFSegformerModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFSegformerModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L598"}}),qo=new k({props:{name:"call",anchor:"transformers.TFSegformerModel.call",parameters:[{name:"pixel_values",val:": Tensor"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TFSegformerModel.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFSegformerModel.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail. This argument can be used only in eager mode, in graph mode the value in the
config will be used instead.`,name:"output_attentions"},{anchor:"transformers.TFSegformerModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFSegformerModel.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFSegformerModel.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to \`False&#x201C;) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L606",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutput"
>transformers.modeling_tf_outputs.TFBaseModelOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutput"
>transformers.modeling_tf_outputs.TFBaseModelOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),mt=new pa({props:{$$slots:{default:[Yp]},$$scope:{ctx:E}}}),ft=new Qo({props:{anchor:"transformers.TFSegformerModel.call.example",$$slots:{default:[Jp]},$$scope:{ctx:E}}}),No=new Y({}),Oo=new k({props:{name:"class transformers.TFSegformerForImageClassification",anchor:"transformers.TFSegformerForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFSegformerForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L649"}}),Wo=new k({props:{name:"call",anchor:"transformers.TFSegformerForImageClassification.call",parameters:[{name:"pixel_values",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"labels",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.TFSegformerForImageClassification.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFSegformerForImageClassification.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail. This argument can be used only in eager mode, in graph mode the value in the
config will be used instead.`,name:"output_attentions"},{anchor:"transformers.TFSegformerForImageClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFSegformerForImageClassification.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFSegformerForImageClassification.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to \`False&#x201C;) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L659",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, )</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),ht=new pa({props:{$$slots:{default:[Xp]},$$scope:{ctx:E}}}),pt=new Qo({props:{anchor:"transformers.TFSegformerForImageClassification.call.example",$$slots:{default:[Zp]},$$scope:{ctx:E}}}),Uo=new Y({}),Bo=new k({props:{name:"class transformers.TFSegformerForSemanticSegmentation",anchor:"transformers.TFSegformerForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFSegformerForSemanticSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L790"}}),Yo=new k({props:{name:"call",anchor:"transformers.TFSegformerForSemanticSegmentation.call",parameters:[{name:"pixel_values",val:": Tensor"},{name:"labels",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.TFSegformerForSemanticSegmentation.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail. This argument can be used only in eager mode, in graph mode the value in the
config will be used instead.`,name:"output_attentions"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to \`False&#x201C;) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Ground truth semantic segmentation maps for computing the loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code>, a (per-pixel) classification loss is computed
(Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L816",returnDescription:`
<p>A <code>transformers.modeling_tf_outputs.TFSemanticSegmenterOutput</code> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels, logits_height, logits_width)</code>) \u2014 Classification scores for each pixel.</p>
<Tip warning={true}>
<p>The logits returned do not necessarily have the same size as the <code>pixel_values</code> passed as inputs. This is
to avoid doing two interpolations and lose some quality when a user needs to resize the logits to the
original image size as post-processing. You should always check your logits shape and resize as needed.</p>
</Tip>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for
the output of each layer) of shape <code>(batch_size, patch_size, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_tf_outputs.TFSemanticSegmenterOutput</code> or <code>tuple(tf.Tensor)</code></p>
`}}),_t=new pa({props:{$$slots:{default:[Qp]},$$scope:{ctx:E}}}),bt=new Qo({props:{anchor:"transformers.TFSegformerForSemanticSegmentation.call.example",$$slots:{default:[eu]},$$scope:{ctx:E}}}),{c(){f=r("meta"),v=c(),_=r("h1"),p=r("a"),b=r("span"),S(d.$$.fragment),h=c(),x=r("span"),ti=n("SegFormer"),Ls=c(),ue=r("h2"),Re=r("a"),ua=r("span"),S(Mt.$$.fragment),oi=c(),_a=r("span"),ri=n("Overview"),Rs=c(),He=r("p"),ai=n("The SegFormer model was proposed in "),zt=r("a"),si=n("SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers"),ni=n(` by Enze Xie, Wenhai Wang, Zhiding Yu, Anima Anandkumar, Jose M. Alvarez, Ping
Luo. The model consists of a hierarchical Transformer encoder and a lightweight all-MLP decode head to achieve great
results on image segmentation benchmarks such as ADE20K and Cityscapes.`),Hs=c(),or=r("p"),ii=n("The abstract from the paper is the following:"),Ws=c(),rr=r("p"),ba=r("em"),li=n(`We present SegFormer, a simple, efficient yet powerful semantic segmentation framework which unifies Transformers with
lightweight multilayer perception (MLP) decoders. SegFormer has two appealing features: 1) SegFormer comprises a novel
hierarchically structured Transformer encoder which outputs multiscale features. It does not need positional encoding,
thereby avoiding the interpolation of positional codes which leads to decreased performance when the testing resolution
differs from training. 2) SegFormer avoids complex decoders. The proposed MLP decoder aggregates information from
different layers, and thus combining both local attention and global attention to render powerful representations. We
show that this simple and lightweight design is the key to efficient segmentation on Transformers. We scale our
approach up to obtain a series of models from SegFormer-B0 to SegFormer-B5, reaching significantly better performance
and efficiency than previous counterparts. For example, SegFormer-B4 achieves 50.3% mIoU on ADE20K with 64M parameters,
being 5x smaller and 2.2% better than the previous best method. Our best model, SegFormer-B5, achieves 84.0% mIoU on
Cityscapes validation set and shows excellent zero-shot robustness on Cityscapes-C.`),Us=c(),We=r("p"),di=n("The figure below illustrates the architecture of SegFormer. Taken from the "),jt=r("a"),ci=n("original paper"),mi=n("."),Bs=c(),Dt=r("img"),Vs=c(),J=r("p"),fi=n("This model was contributed by "),At=r("a"),gi=n("nielsr"),hi=n(`. The TensorFlow version
of the model was contributed by `),qt=r("a"),pi=n("sayakpaul"),ui=n(". The original code can be found "),Nt=r("a"),_i=n("here"),bi=n("."),Gs=c(),ar=r("p"),vi=n("Tips:"),Ks=c(),P=r("ul"),H=r("li"),Si=n(`SegFormer consists of a hierarchical Transformer encoder, and a lightweight all-MLP decoder head.
`),sr=r("a"),wi=n("SegformerModel"),Ti=n(` is the hierarchical Transformer encoder (which in the paper is also referred to
as Mix Transformer or MiT). `),nr=r("a"),$i=n("SegformerForSemanticSegmentation"),yi=n(` adds the all-MLP decoder head on
top to perform semantic segmentation of images. In addition, there\u2019s
`),ir=r("a"),Fi=n("SegformerForImageClassification"),Ei=n(` which can be used to - you guessed it - classify images. The
authors of SegFormer first pre-trained the Transformer encoder on ImageNet-1k to classify images. Next, they throw
away the classification head, and replace it by the all-MLP decode head. Next, they fine-tune the model altogether on
ADE20K, Cityscapes and COCO-stuff, which are important benchmarks for semantic segmentation. All checkpoints can be
found on the `),Ot=r("a"),xi=n("hub"),Ii=n("."),ki=c(),_e=r("li"),Pi=n("The quickest way to get started with SegFormer is by checking the "),Lt=r("a"),Ci=n("example notebooks"),Mi=n(` (which showcase both inference and
fine-tuning on custom data). One can also check out the `),Rt=r("a"),zi=n("blog post"),ji=n(" introducing SegFormer and illustrating how it can be fine-tuned on custom data."),Di=c(),Ht=r("li"),Ai=n("TensorFlow users should refer to "),Wt=r("a"),qi=n("this repository"),Ni=n(" that shows off-the-shelf inference and fine-tuning."),Oi=c(),Ut=r("li"),Li=n("One can also check out "),Bt=r("a"),Ri=n("this interactive demo on Hugging Face Spaces"),Hi=n(`
to try out a SegFormer model on custom images.`),Wi=c(),Vt=r("li"),Ui=n("SegFormer works on any input size, as it pads the input to be divisible by "),va=r("code"),Bi=n("config.patch_sizes"),Vi=n("."),Gi=c(),be=r("li"),Ki=n("One can use "),lr=r("a"),Yi=n("SegformerFeatureExtractor"),Ji=n(` to prepare images and corresponding segmentation maps
for the model. Note that this feature extractor is fairly basic and does not include all data augmentations used in
the original paper. The original preprocessing pipelines (for the ADE20k dataset for instance) can be found `),Gt=r("a"),Xi=n("here"),Zi=n(`. The most
important preprocessing step is that images and segmentation maps are randomly cropped and padded to the same size,
such as 512x512 or 640x640, after which they are normalized.`),Qi=c(),I=r("li"),el=n("One additional thing to keep in mind is that one can initialize "),dr=r("a"),tl=n("SegformerFeatureExtractor"),ol=n(` with
`),Sa=r("code"),rl=n("reduce_labels"),al=n(" set to "),wa=r("code"),sl=n("True"),nl=n(" or "),Ta=r("code"),il=n("False"),ll=n(`. In some datasets (like ADE20k), the 0 index is used in the annotated
segmentation maps for background. However, ADE20k doesn\u2019t include the \u201Cbackground\u201D class in its 150 labels.
Therefore, `),$a=r("code"),dl=n("reduce_labels"),cl=n(` is used to reduce all labels by 1, and to make sure no loss is computed for the
background class (i.e. it replaces 0 in the annotated maps by 255, which is the `),ya=r("em"),ml=n("ignore_index"),fl=n(` of the loss function
used by `),cr=r("a"),gl=n("SegformerForSemanticSegmentation"),hl=n(`). However, other datasets use the 0 index as
background class and include this class as part of all labels. In that case, `),Fa=r("code"),pl=n("reduce_labels"),ul=n(` should be set to
`),Ea=r("code"),_l=n("False"),bl=n(", as loss should also be computed for the background class."),vl=c(),Kt=r("li"),Sl=n(`As most models, SegFormer comes in different sizes, the details of which can be found in the table below
(taken from Table 7 of the `),Yt=r("a"),wl=n("original paper"),Tl=n(")."),Ys=c(),Ue=r("table"),xa=r("thead"),z=r("tr"),mr=r("th"),Ia=r("strong"),$l=n("Model variant"),yl=c(),ka=r("th"),Pa=r("strong"),Fl=n("Depths"),El=c(),Ca=r("th"),Ma=r("strong"),xl=n("Hidden sizes"),Il=c(),fr=r("th"),za=r("strong"),kl=n("Decoder hidden size"),Pl=c(),gr=r("th"),ja=r("strong"),Cl=n("Params (M)"),Ml=c(),hr=r("th"),Da=r("strong"),zl=n("ImageNet-1k Top 1"),jl=c(),j=r("tbody"),D=r("tr"),pr=r("td"),Dl=n("MiT-b0"),Al=c(),Aa=r("td"),ql=n("[2, 2, 2, 2]"),Nl=c(),qa=r("td"),Ol=n("[32, 64, 160, 256]"),Ll=c(),ur=r("td"),Rl=n("256"),Hl=c(),_r=r("td"),Wl=n("3.7"),Ul=c(),br=r("td"),Bl=n("70.5"),Vl=c(),A=r("tr"),vr=r("td"),Gl=n("MiT-b1"),Kl=c(),Na=r("td"),Yl=n("[2, 2, 2, 2]"),Jl=c(),Oa=r("td"),Xl=n("[64, 128, 320, 512]"),Zl=c(),Sr=r("td"),Ql=n("256"),ed=c(),wr=r("td"),td=n("14.0"),od=c(),Tr=r("td"),rd=n("78.7"),ad=c(),q=r("tr"),$r=r("td"),sd=n("MiT-b2"),nd=c(),La=r("td"),id=n("[3, 4, 6, 3]"),ld=c(),Ra=r("td"),dd=n("[64, 128, 320, 512]"),cd=c(),yr=r("td"),md=n("768"),fd=c(),Fr=r("td"),gd=n("25.4"),hd=c(),Er=r("td"),pd=n("81.6"),ud=c(),N=r("tr"),xr=r("td"),_d=n("MiT-b3"),bd=c(),Ha=r("td"),vd=n("[3, 4, 18, 3]"),Sd=c(),Wa=r("td"),wd=n("[64, 128, 320, 512]"),Td=c(),Ir=r("td"),$d=n("768"),yd=c(),kr=r("td"),Fd=n("45.2"),Ed=c(),Pr=r("td"),xd=n("83.1"),Id=c(),O=r("tr"),Cr=r("td"),kd=n("MiT-b4"),Pd=c(),Ua=r("td"),Cd=n("[3, 8, 27, 3]"),Md=c(),Ba=r("td"),zd=n("[64, 128, 320, 512]"),jd=c(),Mr=r("td"),Dd=n("768"),Ad=c(),zr=r("td"),qd=n("62.6"),Nd=c(),jr=r("td"),Od=n("83.6"),Ld=c(),L=r("tr"),Dr=r("td"),Rd=n("MiT-b5"),Hd=c(),Va=r("td"),Wd=n("[3, 6, 40, 3]"),Ud=c(),Ga=r("td"),Bd=n("[64, 128, 320, 512]"),Vd=c(),Ar=r("td"),Gd=n("768"),Kd=c(),qr=r("td"),Yd=n("82.0"),Jd=c(),Nr=r("td"),Xd=n("83.8"),Js=c(),Be=r("p"),Zd=n(`Note that MiT in the above table refers to the Mix Transformer encoder backbone introduced in SegFormer. For
SegFormer\u2019s results on the segmentation datasets like ADE20k, refer to the `),Jt=r("a"),Qd=n("paper"),ec=n("."),Xs=c(),ve=r("h2"),Ve=r("a"),Ka=r("span"),S(Xt.$$.fragment),tc=c(),Ya=r("span"),oc=n("SegformerConfig"),Zs=c(),W=r("div"),S(Zt.$$.fragment),rc=c(),Se=r("p"),ac=n("This is the configuration class to store the configuration of a "),Or=r("a"),sc=n("SegformerModel"),nc=n(`. It is used to instantiate an
SegFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the SegFormer
`),Qt=r("a"),ic=n("nvidia/segformer-b0-finetuned-ade-512-512"),lc=n(`
architecture.`),dc=c(),we=r("p"),cc=n("Configuration objects inherit from "),Lr=r("a"),mc=n("PretrainedConfig"),fc=n(` and can be used to control the model outputs. Read the
documentation from `),Rr=r("a"),gc=n("PretrainedConfig"),hc=n(" for more information."),pc=c(),S(Ge.$$.fragment),Qs=c(),Te=r("h2"),Ke=r("a"),Ja=r("span"),S(eo.$$.fragment),uc=c(),Xa=r("span"),_c=n("SegformerFeatureExtractor"),en=c(),U=r("div"),S(to.$$.fragment),bc=c(),Za=r("p"),vc=n("Constructs a Segformer image processor."),Sc=c(),ge=r("div"),S(oo.$$.fragment),wc=c(),Qa=r("p"),Tc=n("Preprocesses a batch of images and optionally segmentation maps."),$c=c(),$e=r("p"),yc=n("Overrides the "),es=r("code"),Fc=n("__call__"),Ec=n(" method of the "),ts=r("code"),xc=n("Preprocessor"),Ic=n(` class so that both images and segmentation maps can be
passed in as positional arguments.`),kc=c(),Ye=r("div"),S(ro.$$.fragment),Pc=c(),ao=r("p"),Cc=n("Converts the output of "),Hr=r("a"),Mc=n("SegformerForSemanticSegmentation"),zc=n(` into semantic segmentation maps. Only supports
PyTorch.`),tn=c(),ye=r("h2"),Je=r("a"),os=r("span"),S(so.$$.fragment),jc=c(),rs=r("span"),Dc=n("SegformerImageProcessor"),on=c(),B=r("div"),S(no.$$.fragment),Ac=c(),as=r("p"),qc=n("Constructs a Segformer image processor."),Nc=c(),Xe=r("div"),S(io.$$.fragment),Oc=c(),ss=r("p"),Lc=n("Preprocess an image or batch of images."),Rc=c(),Ze=r("div"),S(lo.$$.fragment),Hc=c(),co=r("p"),Wc=n("Converts the output of "),Wr=r("a"),Uc=n("SegformerForSemanticSegmentation"),Bc=n(` into semantic segmentation maps. Only supports
PyTorch.`),rn=c(),Fe=r("h2"),Qe=r("a"),ns=r("span"),S(mo.$$.fragment),Vc=c(),is=r("span"),Gc=n("SegformerModel"),an=c(),me=r("div"),S(fo.$$.fragment),Kc=c(),go=r("p"),Yc=n(`The bare SegFormer encoder (Mix-Transformer) outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),ho=r("a"),Jc=n("torch.nn.Module"),Xc=n(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Zc=c(),X=r("div"),S(po.$$.fragment),Qc=c(),Ee=r("p"),em=n("The "),Ur=r("a"),tm=n("SegformerModel"),om=n(" forward method, overrides the "),ls=r("code"),rm=n("__call__"),am=n(" special method."),sm=c(),S(et.$$.fragment),nm=c(),S(tt.$$.fragment),sn=c(),xe=r("h2"),ot=r("a"),ds=r("span"),S(uo.$$.fragment),im=c(),cs=r("span"),lm=n("SegformerDecodeHead"),nn=c(),Ie=r("div"),S(_o.$$.fragment),dm=c(),Br=r("div"),S(bo.$$.fragment),ln=c(),ke=r("h2"),rt=r("a"),ms=r("span"),S(vo.$$.fragment),cm=c(),fs=r("span"),mm=n("SegformerForImageClassification"),dn=c(),V=r("div"),S(So.$$.fragment),fm=c(),gs=r("p"),gm=n(`SegFormer Model transformer with an image classification head on top (a linear layer on top of the final hidden
states) e.g. for ImageNet.`),hm=c(),wo=r("p"),pm=n("This model is a PyTorch "),To=r("a"),um=n("torch.nn.Module"),_m=n(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),bm=c(),Z=r("div"),S($o.$$.fragment),vm=c(),Pe=r("p"),Sm=n("The "),Vr=r("a"),wm=n("SegformerForImageClassification"),Tm=n(" forward method, overrides the "),hs=r("code"),$m=n("__call__"),ym=n(" special method."),Fm=c(),S(at.$$.fragment),Em=c(),S(st.$$.fragment),cn=c(),Ce=r("h2"),nt=r("a"),ps=r("span"),S(yo.$$.fragment),xm=c(),us=r("span"),Im=n("SegformerForSemanticSegmentation"),mn=c(),fe=r("div"),S(Fo.$$.fragment),km=c(),Eo=r("p"),Pm=n(`SegFormer Model transformer with an all-MLP decode head on top e.g. for ADE20k, CityScapes.
This model is a PyTorch `),xo=r("a"),Cm=n("torch.nn.Module"),Mm=n(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),zm=c(),Q=r("div"),S(Io.$$.fragment),jm=c(),Me=r("p"),Dm=n("The "),Gr=r("a"),Am=n("SegformerForSemanticSegmentation"),qm=n(" forward method, overrides the "),_s=r("code"),Nm=n("__call__"),Om=n(" special method."),Lm=c(),S(it.$$.fragment),Rm=c(),S(lt.$$.fragment),fn=c(),ze=r("h2"),dt=r("a"),bs=r("span"),S(ko.$$.fragment),Hm=c(),vs=r("span"),Wm=n("TFSegformerDecodeHead"),gn=c(),je=r("div"),S(Po.$$.fragment),Um=c(),Kr=r("div"),S(Co.$$.fragment),hn=c(),De=r("h2"),ct=r("a"),Ss=r("span"),S(Mo.$$.fragment),Bm=c(),ws=r("span"),Vm=n("TFSegformerModel"),pn=c(),G=r("div"),S(zo.$$.fragment),Gm=c(),jo=r("p"),Km=n(`The bare SegFormer encoder (Mix-Transformer) outputting raw hidden-states without any specific head on top.
This model inherits from `),Yr=r("a"),Ym=n("TFPreTrainedModel"),Jm=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Xm=c(),Do=r("p"),Zm=n("This model is also a "),Ao=r("a"),Qm=n("tf.keras.Model"),ef=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),tf=c(),ee=r("div"),S(qo.$$.fragment),of=c(),Ae=r("p"),rf=n("The "),Jr=r("a"),af=n("TFSegformerModel"),sf=n(" forward method, overrides the "),Ts=r("code"),nf=n("__call__"),lf=n(" special method."),df=c(),S(mt.$$.fragment),cf=c(),S(ft.$$.fragment),un=c(),qe=r("h2"),gt=r("a"),$s=r("span"),S(No.$$.fragment),mf=c(),ys=r("span"),ff=n("TFSegformerForImageClassification"),_n=c(),R=r("div"),S(Oo.$$.fragment),gf=c(),Fs=r("p"),hf=n(`SegFormer Model transformer with an image classification head on top (a linear layer on top of the final hidden
states) e.g. for ImageNet.`),pf=c(),Lo=r("p"),uf=n("This model inherits from "),Xr=r("a"),_f=n("TFPreTrainedModel"),bf=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),vf=c(),Ro=r("p"),Sf=n("This model is also a "),Ho=r("a"),wf=n("tf.keras.Model"),Tf=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),$f=c(),te=r("div"),S(Wo.$$.fragment),yf=c(),Ne=r("p"),Ff=n("The "),Zr=r("a"),Ef=n("TFSegformerForImageClassification"),xf=n(" forward method, overrides the "),Es=r("code"),If=n("__call__"),kf=n(" special method."),Pf=c(),S(ht.$$.fragment),Cf=c(),S(pt.$$.fragment),bn=c(),Oe=r("h2"),ut=r("a"),xs=r("span"),S(Uo.$$.fragment),Mf=c(),Is=r("span"),zf=n("TFSegformerForSemanticSegmentation"),vn=c(),K=r("div"),S(Bo.$$.fragment),jf=c(),Vo=r("p"),Df=n(`SegFormer Model transformer with an all-MLP decode head on top e.g. for ADE20k, CityScapes.
This model inherits from `),Qr=r("a"),Af=n("TFPreTrainedModel"),qf=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Nf=c(),Go=r("p"),Of=n("This model is also a "),Ko=r("a"),Lf=n("tf.keras.Model"),Rf=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Hf=c(),oe=r("div"),S(Yo.$$.fragment),Wf=c(),Le=r("p"),Uf=n("The "),ea=r("a"),Bf=n("TFSegformerForSemanticSegmentation"),Vf=n(" forward method, overrides the "),ks=r("code"),Gf=n("__call__"),Kf=n(" special method."),Yf=c(),S(_t.$$.fragment),Jf=c(),S(bt.$$.fragment),this.h()},l(o){const g=Op('[data-svelte="svelte-1phssyn"]',document.head);f=a(g,"META",{name:!0,content:!0}),g.forEach(t),v=m(o),_=a(o,"H1",{class:!0});var Jo=s(_);p=a(Jo,"A",{id:!0,class:!0,href:!0});var Ps=s(p);b=a(Ps,"SPAN",{});var Cs=s(b);w(d.$$.fragment,Cs),Cs.forEach(t),Ps.forEach(t),h=m(Jo),x=a(Jo,"SPAN",{});var Ms=s(x);ti=i(Ms,"SegFormer"),Ms.forEach(t),Jo.forEach(t),Ls=m(o),ue=a(o,"H2",{class:!0});var Xo=s(ue);Re=a(Xo,"A",{id:!0,class:!0,href:!0});var zs=s(Re);ua=a(zs,"SPAN",{});var js=s(ua);w(Mt.$$.fragment,js),js.forEach(t),zs.forEach(t),oi=m(Xo),_a=a(Xo,"SPAN",{});var Ds=s(_a);ri=i(Ds,"Overview"),Ds.forEach(t),Xo.forEach(t),Rs=m(o),He=a(o,"P",{});var Zo=s(He);ai=i(Zo,"The SegFormer model was proposed in "),zt=a(Zo,"A",{href:!0,rel:!0});var As=s(zt);si=i(As,"SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers"),As.forEach(t),ni=i(Zo,` by Enze Xie, Wenhai Wang, Zhiding Yu, Anima Anandkumar, Jose M. Alvarez, Ping
Luo. The model consists of a hierarchical Transformer encoder and a lightweight all-MLP decode head to achieve great
results on image segmentation benchmarks such as ADE20K and Cityscapes.`),Zo.forEach(t),Hs=m(o),or=a(o,"P",{});var qs=s(or);ii=i(qs,"The abstract from the paper is the following:"),qs.forEach(t),Ws=m(o),rr=a(o,"P",{});var Ns=s(rr);ba=a(Ns,"EM",{});var Os=s(ba);li=i(Os,`We present SegFormer, a simple, efficient yet powerful semantic segmentation framework which unifies Transformers with
lightweight multilayer perception (MLP) decoders. SegFormer has two appealing features: 1) SegFormer comprises a novel
hierarchically structured Transformer encoder which outputs multiscale features. It does not need positional encoding,
thereby avoiding the interpolation of positional codes which leads to decreased performance when the testing resolution
differs from training. 2) SegFormer avoids complex decoders. The proposed MLP decoder aggregates information from
different layers, and thus combining both local attention and global attention to render powerful representations. We
show that this simple and lightweight design is the key to efficient segmentation on Transformers. We scale our
approach up to obtain a series of models from SegFormer-B0 to SegFormer-B5, reaching significantly better performance
and efficiency than previous counterparts. For example, SegFormer-B4 achieves 50.3% mIoU on ADE20K with 64M parameters,
being 5x smaller and 2.2% better than the previous best method. Our best model, SegFormer-B5, achieves 84.0% mIoU on
Cityscapes validation set and shows excellent zero-shot robustness on Cityscapes-C.`),Os.forEach(t),Ns.forEach(t),Us=m(o),We=a(o,"P",{});var wn=s(We);di=i(wn,"The figure below illustrates the architecture of SegFormer. Taken from the "),jt=a(wn,"A",{href:!0,rel:!0});var Zf=s(jt);ci=i(Zf,"original paper"),Zf.forEach(t),mi=i(wn,"."),wn.forEach(t),Bs=m(o),Dt=a(o,"IMG",{width:!0,src:!0}),Vs=m(o),J=a(o,"P",{});var vt=s(J);fi=i(vt,"This model was contributed by "),At=a(vt,"A",{href:!0,rel:!0});var Qf=s(At);gi=i(Qf,"nielsr"),Qf.forEach(t),hi=i(vt,`. The TensorFlow version
of the model was contributed by `),qt=a(vt,"A",{href:!0,rel:!0});var eg=s(qt);pi=i(eg,"sayakpaul"),eg.forEach(t),ui=i(vt,". The original code can be found "),Nt=a(vt,"A",{href:!0,rel:!0});var tg=s(Nt);_i=i(tg,"here"),tg.forEach(t),bi=i(vt,"."),vt.forEach(t),Gs=m(o),ar=a(o,"P",{});var og=s(ar);vi=i(og,"Tips:"),og.forEach(t),Ks=m(o),P=a(o,"UL",{});var M=s(P);H=a(M,"LI",{});var he=s(H);Si=i(he,`SegFormer consists of a hierarchical Transformer encoder, and a lightweight all-MLP decoder head.
`),sr=a(he,"A",{href:!0});var rg=s(sr);wi=i(rg,"SegformerModel"),rg.forEach(t),Ti=i(he,` is the hierarchical Transformer encoder (which in the paper is also referred to
as Mix Transformer or MiT). `),nr=a(he,"A",{href:!0});var ag=s(nr);$i=i(ag,"SegformerForSemanticSegmentation"),ag.forEach(t),yi=i(he,` adds the all-MLP decoder head on
top to perform semantic segmentation of images. In addition, there\u2019s
`),ir=a(he,"A",{href:!0});var sg=s(ir);Fi=i(sg,"SegformerForImageClassification"),sg.forEach(t),Ei=i(he,` which can be used to - you guessed it - classify images. The
authors of SegFormer first pre-trained the Transformer encoder on ImageNet-1k to classify images. Next, they throw
away the classification head, and replace it by the all-MLP decode head. Next, they fine-tune the model altogether on
ADE20K, Cityscapes and COCO-stuff, which are important benchmarks for semantic segmentation. All checkpoints can be
found on the `),Ot=a(he,"A",{href:!0,rel:!0});var ng=s(Ot);xi=i(ng,"hub"),ng.forEach(t),Ii=i(he,"."),he.forEach(t),ki=m(M),_e=a(M,"LI",{});var ta=s(_e);Pi=i(ta,"The quickest way to get started with SegFormer is by checking the "),Lt=a(ta,"A",{href:!0,rel:!0});var ig=s(Lt);Ci=i(ig,"example notebooks"),ig.forEach(t),Mi=i(ta,` (which showcase both inference and
fine-tuning on custom data). One can also check out the `),Rt=a(ta,"A",{href:!0,rel:!0});var lg=s(Rt);zi=i(lg,"blog post"),lg.forEach(t),ji=i(ta," introducing SegFormer and illustrating how it can be fine-tuned on custom data."),ta.forEach(t),Di=m(M),Ht=a(M,"LI",{});var Tn=s(Ht);Ai=i(Tn,"TensorFlow users should refer to "),Wt=a(Tn,"A",{href:!0,rel:!0});var dg=s(Wt);qi=i(dg,"this repository"),dg.forEach(t),Ni=i(Tn," that shows off-the-shelf inference and fine-tuning."),Tn.forEach(t),Oi=m(M),Ut=a(M,"LI",{});var $n=s(Ut);Li=i($n,"One can also check out "),Bt=a($n,"A",{href:!0,rel:!0});var cg=s(Bt);Ri=i(cg,"this interactive demo on Hugging Face Spaces"),cg.forEach(t),Hi=i($n,`
to try out a SegFormer model on custom images.`),$n.forEach(t),Wi=m(M),Vt=a(M,"LI",{});var yn=s(Vt);Ui=i(yn,"SegFormer works on any input size, as it pads the input to be divisible by "),va=a(yn,"CODE",{});var mg=s(va);Bi=i(mg,"config.patch_sizes"),mg.forEach(t),Vi=i(yn,"."),yn.forEach(t),Gi=m(M),be=a(M,"LI",{});var oa=s(be);Ki=i(oa,"One can use "),lr=a(oa,"A",{href:!0});var fg=s(lr);Yi=i(fg,"SegformerFeatureExtractor"),fg.forEach(t),Ji=i(oa,` to prepare images and corresponding segmentation maps
for the model. Note that this feature extractor is fairly basic and does not include all data augmentations used in
the original paper. The original preprocessing pipelines (for the ADE20k dataset for instance) can be found `),Gt=a(oa,"A",{href:!0,rel:!0});var gg=s(Gt);Xi=i(gg,"here"),gg.forEach(t),Zi=i(oa,`. The most
important preprocessing step is that images and segmentation maps are randomly cropped and padded to the same size,
such as 512x512 or 640x640, after which they are normalized.`),oa.forEach(t),Qi=m(M),I=a(M,"LI",{});var C=s(I);el=i(C,"One additional thing to keep in mind is that one can initialize "),dr=a(C,"A",{href:!0});var hg=s(dr);tl=i(hg,"SegformerFeatureExtractor"),hg.forEach(t),ol=i(C,` with
`),Sa=a(C,"CODE",{});var pg=s(Sa);rl=i(pg,"reduce_labels"),pg.forEach(t),al=i(C," set to "),wa=a(C,"CODE",{});var ug=s(wa);sl=i(ug,"True"),ug.forEach(t),nl=i(C," or "),Ta=a(C,"CODE",{});var _g=s(Ta);il=i(_g,"False"),_g.forEach(t),ll=i(C,`. In some datasets (like ADE20k), the 0 index is used in the annotated
segmentation maps for background. However, ADE20k doesn\u2019t include the \u201Cbackground\u201D class in its 150 labels.
Therefore, `),$a=a(C,"CODE",{});var bg=s($a);dl=i(bg,"reduce_labels"),bg.forEach(t),cl=i(C,` is used to reduce all labels by 1, and to make sure no loss is computed for the
background class (i.e. it replaces 0 in the annotated maps by 255, which is the `),ya=a(C,"EM",{});var vg=s(ya);ml=i(vg,"ignore_index"),vg.forEach(t),fl=i(C,` of the loss function
used by `),cr=a(C,"A",{href:!0});var Sg=s(cr);gl=i(Sg,"SegformerForSemanticSegmentation"),Sg.forEach(t),hl=i(C,`). However, other datasets use the 0 index as
background class and include this class as part of all labels. In that case, `),Fa=a(C,"CODE",{});var wg=s(Fa);pl=i(wg,"reduce_labels"),wg.forEach(t),ul=i(C,` should be set to
`),Ea=a(C,"CODE",{});var Tg=s(Ea);_l=i(Tg,"False"),Tg.forEach(t),bl=i(C,", as loss should also be computed for the background class."),C.forEach(t),vl=m(M),Kt=a(M,"LI",{});var Fn=s(Kt);Sl=i(Fn,`As most models, SegFormer comes in different sizes, the details of which can be found in the table below
(taken from Table 7 of the `),Yt=a(Fn,"A",{href:!0,rel:!0});var $g=s(Yt);wl=i($g,"original paper"),$g.forEach(t),Tl=i(Fn,")."),Fn.forEach(t),M.forEach(t),Ys=m(o),Ue=a(o,"TABLE",{});var En=s(Ue);xa=a(En,"THEAD",{});var yg=s(xa);z=a(yg,"TR",{});var re=s(z);mr=a(re,"TH",{align:!0});var Fg=s(mr);Ia=a(Fg,"STRONG",{});var Eg=s(Ia);$l=i(Eg,"Model variant"),Eg.forEach(t),Fg.forEach(t),yl=m(re),ka=a(re,"TH",{});var xg=s(ka);Pa=a(xg,"STRONG",{});var Ig=s(Pa);Fl=i(Ig,"Depths"),Ig.forEach(t),xg.forEach(t),El=m(re),Ca=a(re,"TH",{});var kg=s(Ca);Ma=a(kg,"STRONG",{});var Pg=s(Ma);xl=i(Pg,"Hidden sizes"),Pg.forEach(t),kg.forEach(t),Il=m(re),fr=a(re,"TH",{align:!0});var Cg=s(fr);za=a(Cg,"STRONG",{});var Mg=s(za);kl=i(Mg,"Decoder hidden size"),Mg.forEach(t),Cg.forEach(t),Pl=m(re),gr=a(re,"TH",{align:!0});var zg=s(gr);ja=a(zg,"STRONG",{});var jg=s(ja);Cl=i(jg,"Params (M)"),jg.forEach(t),zg.forEach(t),Ml=m(re),hr=a(re,"TH",{align:!0});var Dg=s(hr);Da=a(Dg,"STRONG",{});var Ag=s(Da);zl=i(Ag,"ImageNet-1k Top 1"),Ag.forEach(t),Dg.forEach(t),re.forEach(t),yg.forEach(t),jl=m(En),j=a(En,"TBODY",{});var ae=s(j);D=a(ae,"TR",{});var se=s(D);pr=a(se,"TD",{align:!0});var qg=s(pr);Dl=i(qg,"MiT-b0"),qg.forEach(t),Al=m(se),Aa=a(se,"TD",{});var Ng=s(Aa);ql=i(Ng,"[2, 2, 2, 2]"),Ng.forEach(t),Nl=m(se),qa=a(se,"TD",{});var Og=s(qa);Ol=i(Og,"[32, 64, 160, 256]"),Og.forEach(t),Ll=m(se),ur=a(se,"TD",{align:!0});var Lg=s(ur);Rl=i(Lg,"256"),Lg.forEach(t),Hl=m(se),_r=a(se,"TD",{align:!0});var Rg=s(_r);Wl=i(Rg,"3.7"),Rg.forEach(t),Ul=m(se),br=a(se,"TD",{align:!0});var Hg=s(br);Bl=i(Hg,"70.5"),Hg.forEach(t),se.forEach(t),Vl=m(ae),A=a(ae,"TR",{});var ne=s(A);vr=a(ne,"TD",{align:!0});var Wg=s(vr);Gl=i(Wg,"MiT-b1"),Wg.forEach(t),Kl=m(ne),Na=a(ne,"TD",{});var Ug=s(Na);Yl=i(Ug,"[2, 2, 2, 2]"),Ug.forEach(t),Jl=m(ne),Oa=a(ne,"TD",{});var Bg=s(Oa);Xl=i(Bg,"[64, 128, 320, 512]"),Bg.forEach(t),Zl=m(ne),Sr=a(ne,"TD",{align:!0});var Vg=s(Sr);Ql=i(Vg,"256"),Vg.forEach(t),ed=m(ne),wr=a(ne,"TD",{align:!0});var Gg=s(wr);td=i(Gg,"14.0"),Gg.forEach(t),od=m(ne),Tr=a(ne,"TD",{align:!0});var Kg=s(Tr);rd=i(Kg,"78.7"),Kg.forEach(t),ne.forEach(t),ad=m(ae),q=a(ae,"TR",{});var ie=s(q);$r=a(ie,"TD",{align:!0});var Yg=s($r);sd=i(Yg,"MiT-b2"),Yg.forEach(t),nd=m(ie),La=a(ie,"TD",{});var Jg=s(La);id=i(Jg,"[3, 4, 6, 3]"),Jg.forEach(t),ld=m(ie),Ra=a(ie,"TD",{});var Xg=s(Ra);dd=i(Xg,"[64, 128, 320, 512]"),Xg.forEach(t),cd=m(ie),yr=a(ie,"TD",{align:!0});var Zg=s(yr);md=i(Zg,"768"),Zg.forEach(t),fd=m(ie),Fr=a(ie,"TD",{align:!0});var Qg=s(Fr);gd=i(Qg,"25.4"),Qg.forEach(t),hd=m(ie),Er=a(ie,"TD",{align:!0});var eh=s(Er);pd=i(eh,"81.6"),eh.forEach(t),ie.forEach(t),ud=m(ae),N=a(ae,"TR",{});var le=s(N);xr=a(le,"TD",{align:!0});var th=s(xr);_d=i(th,"MiT-b3"),th.forEach(t),bd=m(le),Ha=a(le,"TD",{});var oh=s(Ha);vd=i(oh,"[3, 4, 18, 3]"),oh.forEach(t),Sd=m(le),Wa=a(le,"TD",{});var rh=s(Wa);wd=i(rh,"[64, 128, 320, 512]"),rh.forEach(t),Td=m(le),Ir=a(le,"TD",{align:!0});var ah=s(Ir);$d=i(ah,"768"),ah.forEach(t),yd=m(le),kr=a(le,"TD",{align:!0});var sh=s(kr);Fd=i(sh,"45.2"),sh.forEach(t),Ed=m(le),Pr=a(le,"TD",{align:!0});var nh=s(Pr);xd=i(nh,"83.1"),nh.forEach(t),le.forEach(t),Id=m(ae),O=a(ae,"TR",{});var de=s(O);Cr=a(de,"TD",{align:!0});var ih=s(Cr);kd=i(ih,"MiT-b4"),ih.forEach(t),Pd=m(de),Ua=a(de,"TD",{});var lh=s(Ua);Cd=i(lh,"[3, 8, 27, 3]"),lh.forEach(t),Md=m(de),Ba=a(de,"TD",{});var dh=s(Ba);zd=i(dh,"[64, 128, 320, 512]"),dh.forEach(t),jd=m(de),Mr=a(de,"TD",{align:!0});var ch=s(Mr);Dd=i(ch,"768"),ch.forEach(t),Ad=m(de),zr=a(de,"TD",{align:!0});var mh=s(zr);qd=i(mh,"62.6"),mh.forEach(t),Nd=m(de),jr=a(de,"TD",{align:!0});var fh=s(jr);Od=i(fh,"83.6"),fh.forEach(t),de.forEach(t),Ld=m(ae),L=a(ae,"TR",{});var ce=s(L);Dr=a(ce,"TD",{align:!0});var gh=s(Dr);Rd=i(gh,"MiT-b5"),gh.forEach(t),Hd=m(ce),Va=a(ce,"TD",{});var hh=s(Va);Wd=i(hh,"[3, 6, 40, 3]"),hh.forEach(t),Ud=m(ce),Ga=a(ce,"TD",{});var ph=s(Ga);Bd=i(ph,"[64, 128, 320, 512]"),ph.forEach(t),Vd=m(ce),Ar=a(ce,"TD",{align:!0});var uh=s(Ar);Gd=i(uh,"768"),uh.forEach(t),Kd=m(ce),qr=a(ce,"TD",{align:!0});var _h=s(qr);Yd=i(_h,"82.0"),_h.forEach(t),Jd=m(ce),Nr=a(ce,"TD",{align:!0});var bh=s(Nr);Xd=i(bh,"83.8"),bh.forEach(t),ce.forEach(t),ae.forEach(t),En.forEach(t),Js=m(o),Be=a(o,"P",{});var xn=s(Be);Zd=i(xn,`Note that MiT in the above table refers to the Mix Transformer encoder backbone introduced in SegFormer. For
SegFormer\u2019s results on the segmentation datasets like ADE20k, refer to the `),Jt=a(xn,"A",{href:!0,rel:!0});var vh=s(Jt);Qd=i(vh,"paper"),vh.forEach(t),ec=i(xn,"."),xn.forEach(t),Xs=m(o),ve=a(o,"H2",{class:!0});var In=s(ve);Ve=a(In,"A",{id:!0,class:!0,href:!0});var Sh=s(Ve);Ka=a(Sh,"SPAN",{});var wh=s(Ka);w(Xt.$$.fragment,wh),wh.forEach(t),Sh.forEach(t),tc=m(In),Ya=a(In,"SPAN",{});var Th=s(Ya);oc=i(Th,"SegformerConfig"),Th.forEach(t),In.forEach(t),Zs=m(o),W=a(o,"DIV",{class:!0});var St=s(W);w(Zt.$$.fragment,St),rc=m(St),Se=a(St,"P",{});var ra=s(Se);ac=i(ra,"This is the configuration class to store the configuration of a "),Or=a(ra,"A",{href:!0});var $h=s(Or);sc=i($h,"SegformerModel"),$h.forEach(t),nc=i(ra,`. It is used to instantiate an
SegFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the SegFormer
`),Qt=a(ra,"A",{href:!0,rel:!0});var yh=s(Qt);ic=i(yh,"nvidia/segformer-b0-finetuned-ade-512-512"),yh.forEach(t),lc=i(ra,`
architecture.`),ra.forEach(t),dc=m(St),we=a(St,"P",{});var aa=s(we);cc=i(aa,"Configuration objects inherit from "),Lr=a(aa,"A",{href:!0});var Fh=s(Lr);mc=i(Fh,"PretrainedConfig"),Fh.forEach(t),fc=i(aa,` and can be used to control the model outputs. Read the
documentation from `),Rr=a(aa,"A",{href:!0});var Eh=s(Rr);gc=i(Eh,"PretrainedConfig"),Eh.forEach(t),hc=i(aa," for more information."),aa.forEach(t),pc=m(St),w(Ge.$$.fragment,St),St.forEach(t),Qs=m(o),Te=a(o,"H2",{class:!0});var kn=s(Te);Ke=a(kn,"A",{id:!0,class:!0,href:!0});var xh=s(Ke);Ja=a(xh,"SPAN",{});var Ih=s(Ja);w(eo.$$.fragment,Ih),Ih.forEach(t),xh.forEach(t),uc=m(kn),Xa=a(kn,"SPAN",{});var kh=s(Xa);_c=i(kh,"SegformerFeatureExtractor"),kh.forEach(t),kn.forEach(t),en=m(o),U=a(o,"DIV",{class:!0});var wt=s(U);w(to.$$.fragment,wt),bc=m(wt),Za=a(wt,"P",{});var Ph=s(Za);vc=i(Ph,"Constructs a Segformer image processor."),Ph.forEach(t),Sc=m(wt),ge=a(wt,"DIV",{class:!0});var sa=s(ge);w(oo.$$.fragment,sa),wc=m(sa),Qa=a(sa,"P",{});var Ch=s(Qa);Tc=i(Ch,"Preprocesses a batch of images and optionally segmentation maps."),Ch.forEach(t),$c=m(sa),$e=a(sa,"P",{});var na=s($e);yc=i(na,"Overrides the "),es=a(na,"CODE",{});var Mh=s(es);Fc=i(Mh,"__call__"),Mh.forEach(t),Ec=i(na," method of the "),ts=a(na,"CODE",{});var zh=s(ts);xc=i(zh,"Preprocessor"),zh.forEach(t),Ic=i(na,` class so that both images and segmentation maps can be
passed in as positional arguments.`),na.forEach(t),sa.forEach(t),kc=m(wt),Ye=a(wt,"DIV",{class:!0});var Pn=s(Ye);w(ro.$$.fragment,Pn),Pc=m(Pn),ao=a(Pn,"P",{});var Cn=s(ao);Cc=i(Cn,"Converts the output of "),Hr=a(Cn,"A",{href:!0});var jh=s(Hr);Mc=i(jh,"SegformerForSemanticSegmentation"),jh.forEach(t),zc=i(Cn,` into semantic segmentation maps. Only supports
PyTorch.`),Cn.forEach(t),Pn.forEach(t),wt.forEach(t),tn=m(o),ye=a(o,"H2",{class:!0});var Mn=s(ye);Je=a(Mn,"A",{id:!0,class:!0,href:!0});var Dh=s(Je);os=a(Dh,"SPAN",{});var Ah=s(os);w(so.$$.fragment,Ah),Ah.forEach(t),Dh.forEach(t),jc=m(Mn),rs=a(Mn,"SPAN",{});var qh=s(rs);Dc=i(qh,"SegformerImageProcessor"),qh.forEach(t),Mn.forEach(t),on=m(o),B=a(o,"DIV",{class:!0});var Tt=s(B);w(no.$$.fragment,Tt),Ac=m(Tt),as=a(Tt,"P",{});var Nh=s(as);qc=i(Nh,"Constructs a Segformer image processor."),Nh.forEach(t),Nc=m(Tt),Xe=a(Tt,"DIV",{class:!0});var zn=s(Xe);w(io.$$.fragment,zn),Oc=m(zn),ss=a(zn,"P",{});var Oh=s(ss);Lc=i(Oh,"Preprocess an image or batch of images."),Oh.forEach(t),zn.forEach(t),Rc=m(Tt),Ze=a(Tt,"DIV",{class:!0});var jn=s(Ze);w(lo.$$.fragment,jn),Hc=m(jn),co=a(jn,"P",{});var Dn=s(co);Wc=i(Dn,"Converts the output of "),Wr=a(Dn,"A",{href:!0});var Lh=s(Wr);Uc=i(Lh,"SegformerForSemanticSegmentation"),Lh.forEach(t),Bc=i(Dn,` into semantic segmentation maps. Only supports
PyTorch.`),Dn.forEach(t),jn.forEach(t),Tt.forEach(t),rn=m(o),Fe=a(o,"H2",{class:!0});var An=s(Fe);Qe=a(An,"A",{id:!0,class:!0,href:!0});var Rh=s(Qe);ns=a(Rh,"SPAN",{});var Hh=s(ns);w(mo.$$.fragment,Hh),Hh.forEach(t),Rh.forEach(t),Vc=m(An),is=a(An,"SPAN",{});var Wh=s(is);Gc=i(Wh,"SegformerModel"),Wh.forEach(t),An.forEach(t),an=m(o),me=a(o,"DIV",{class:!0});var ia=s(me);w(fo.$$.fragment,ia),Kc=m(ia),go=a(ia,"P",{});var qn=s(go);Yc=i(qn,`The bare SegFormer encoder (Mix-Transformer) outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),ho=a(qn,"A",{href:!0,rel:!0});var Uh=s(ho);Jc=i(Uh,"torch.nn.Module"),Uh.forEach(t),Xc=i(qn,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),qn.forEach(t),Zc=m(ia),X=a(ia,"DIV",{class:!0});var $t=s(X);w(po.$$.fragment,$t),Qc=m($t),Ee=a($t,"P",{});var la=s(Ee);em=i(la,"The "),Ur=a(la,"A",{href:!0});var Bh=s(Ur);tm=i(Bh,"SegformerModel"),Bh.forEach(t),om=i(la," forward method, overrides the "),ls=a(la,"CODE",{});var Vh=s(ls);rm=i(Vh,"__call__"),Vh.forEach(t),am=i(la," special method."),la.forEach(t),sm=m($t),w(et.$$.fragment,$t),nm=m($t),w(tt.$$.fragment,$t),$t.forEach(t),ia.forEach(t),sn=m(o),xe=a(o,"H2",{class:!0});var Nn=s(xe);ot=a(Nn,"A",{id:!0,class:!0,href:!0});var Gh=s(ot);ds=a(Gh,"SPAN",{});var Kh=s(ds);w(uo.$$.fragment,Kh),Kh.forEach(t),Gh.forEach(t),im=m(Nn),cs=a(Nn,"SPAN",{});var Yh=s(cs);lm=i(Yh,"SegformerDecodeHead"),Yh.forEach(t),Nn.forEach(t),nn=m(o),Ie=a(o,"DIV",{class:!0});var On=s(Ie);w(_o.$$.fragment,On),dm=m(On),Br=a(On,"DIV",{class:!0});var Jh=s(Br);w(bo.$$.fragment,Jh),Jh.forEach(t),On.forEach(t),ln=m(o),ke=a(o,"H2",{class:!0});var Ln=s(ke);rt=a(Ln,"A",{id:!0,class:!0,href:!0});var Xh=s(rt);ms=a(Xh,"SPAN",{});var Zh=s(ms);w(vo.$$.fragment,Zh),Zh.forEach(t),Xh.forEach(t),cm=m(Ln),fs=a(Ln,"SPAN",{});var Qh=s(fs);mm=i(Qh,"SegformerForImageClassification"),Qh.forEach(t),Ln.forEach(t),dn=m(o),V=a(o,"DIV",{class:!0});var yt=s(V);w(So.$$.fragment,yt),fm=m(yt),gs=a(yt,"P",{});var ep=s(gs);gm=i(ep,`SegFormer Model transformer with an image classification head on top (a linear layer on top of the final hidden
states) e.g. for ImageNet.`),ep.forEach(t),hm=m(yt),wo=a(yt,"P",{});var Rn=s(wo);pm=i(Rn,"This model is a PyTorch "),To=a(Rn,"A",{href:!0,rel:!0});var tp=s(To);um=i(tp,"torch.nn.Module"),tp.forEach(t),_m=i(Rn,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Rn.forEach(t),bm=m(yt),Z=a(yt,"DIV",{class:!0});var Ft=s(Z);w($o.$$.fragment,Ft),vm=m(Ft),Pe=a(Ft,"P",{});var da=s(Pe);Sm=i(da,"The "),Vr=a(da,"A",{href:!0});var op=s(Vr);wm=i(op,"SegformerForImageClassification"),op.forEach(t),Tm=i(da," forward method, overrides the "),hs=a(da,"CODE",{});var rp=s(hs);$m=i(rp,"__call__"),rp.forEach(t),ym=i(da," special method."),da.forEach(t),Fm=m(Ft),w(at.$$.fragment,Ft),Em=m(Ft),w(st.$$.fragment,Ft),Ft.forEach(t),yt.forEach(t),cn=m(o),Ce=a(o,"H2",{class:!0});var Hn=s(Ce);nt=a(Hn,"A",{id:!0,class:!0,href:!0});var ap=s(nt);ps=a(ap,"SPAN",{});var sp=s(ps);w(yo.$$.fragment,sp),sp.forEach(t),ap.forEach(t),xm=m(Hn),us=a(Hn,"SPAN",{});var np=s(us);Im=i(np,"SegformerForSemanticSegmentation"),np.forEach(t),Hn.forEach(t),mn=m(o),fe=a(o,"DIV",{class:!0});var ca=s(fe);w(Fo.$$.fragment,ca),km=m(ca),Eo=a(ca,"P",{});var Wn=s(Eo);Pm=i(Wn,`SegFormer Model transformer with an all-MLP decode head on top e.g. for ADE20k, CityScapes.
This model is a PyTorch `),xo=a(Wn,"A",{href:!0,rel:!0});var ip=s(xo);Cm=i(ip,"torch.nn.Module"),ip.forEach(t),Mm=i(Wn,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Wn.forEach(t),zm=m(ca),Q=a(ca,"DIV",{class:!0});var Et=s(Q);w(Io.$$.fragment,Et),jm=m(Et),Me=a(Et,"P",{});var ma=s(Me);Dm=i(ma,"The "),Gr=a(ma,"A",{href:!0});var lp=s(Gr);Am=i(lp,"SegformerForSemanticSegmentation"),lp.forEach(t),qm=i(ma," forward method, overrides the "),_s=a(ma,"CODE",{});var dp=s(_s);Nm=i(dp,"__call__"),dp.forEach(t),Om=i(ma," special method."),ma.forEach(t),Lm=m(Et),w(it.$$.fragment,Et),Rm=m(Et),w(lt.$$.fragment,Et),Et.forEach(t),ca.forEach(t),fn=m(o),ze=a(o,"H2",{class:!0});var Un=s(ze);dt=a(Un,"A",{id:!0,class:!0,href:!0});var cp=s(dt);bs=a(cp,"SPAN",{});var mp=s(bs);w(ko.$$.fragment,mp),mp.forEach(t),cp.forEach(t),Hm=m(Un),vs=a(Un,"SPAN",{});var fp=s(vs);Wm=i(fp,"TFSegformerDecodeHead"),fp.forEach(t),Un.forEach(t),gn=m(o),je=a(o,"DIV",{class:!0});var Bn=s(je);w(Po.$$.fragment,Bn),Um=m(Bn),Kr=a(Bn,"DIV",{class:!0});var gp=s(Kr);w(Co.$$.fragment,gp),gp.forEach(t),Bn.forEach(t),hn=m(o),De=a(o,"H2",{class:!0});var Vn=s(De);ct=a(Vn,"A",{id:!0,class:!0,href:!0});var hp=s(ct);Ss=a(hp,"SPAN",{});var pp=s(Ss);w(Mo.$$.fragment,pp),pp.forEach(t),hp.forEach(t),Bm=m(Vn),ws=a(Vn,"SPAN",{});var up=s(ws);Vm=i(up,"TFSegformerModel"),up.forEach(t),Vn.forEach(t),pn=m(o),G=a(o,"DIV",{class:!0});var xt=s(G);w(zo.$$.fragment,xt),Gm=m(xt),jo=a(xt,"P",{});var Gn=s(jo);Km=i(Gn,`The bare SegFormer encoder (Mix-Transformer) outputting raw hidden-states without any specific head on top.
This model inherits from `),Yr=a(Gn,"A",{href:!0});var _p=s(Yr);Ym=i(_p,"TFPreTrainedModel"),_p.forEach(t),Jm=i(Gn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Gn.forEach(t),Xm=m(xt),Do=a(xt,"P",{});var Kn=s(Do);Zm=i(Kn,"This model is also a "),Ao=a(Kn,"A",{href:!0,rel:!0});var bp=s(Ao);Qm=i(bp,"tf.keras.Model"),bp.forEach(t),ef=i(Kn,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Kn.forEach(t),tf=m(xt),ee=a(xt,"DIV",{class:!0});var It=s(ee);w(qo.$$.fragment,It),of=m(It),Ae=a(It,"P",{});var fa=s(Ae);rf=i(fa,"The "),Jr=a(fa,"A",{href:!0});var vp=s(Jr);af=i(vp,"TFSegformerModel"),vp.forEach(t),sf=i(fa," forward method, overrides the "),Ts=a(fa,"CODE",{});var Sp=s(Ts);nf=i(Sp,"__call__"),Sp.forEach(t),lf=i(fa," special method."),fa.forEach(t),df=m(It),w(mt.$$.fragment,It),cf=m(It),w(ft.$$.fragment,It),It.forEach(t),xt.forEach(t),un=m(o),qe=a(o,"H2",{class:!0});var Yn=s(qe);gt=a(Yn,"A",{id:!0,class:!0,href:!0});var wp=s(gt);$s=a(wp,"SPAN",{});var Tp=s($s);w(No.$$.fragment,Tp),Tp.forEach(t),wp.forEach(t),mf=m(Yn),ys=a(Yn,"SPAN",{});var $p=s(ys);ff=i($p,"TFSegformerForImageClassification"),$p.forEach(t),Yn.forEach(t),_n=m(o),R=a(o,"DIV",{class:!0});var pe=s(R);w(Oo.$$.fragment,pe),gf=m(pe),Fs=a(pe,"P",{});var yp=s(Fs);hf=i(yp,`SegFormer Model transformer with an image classification head on top (a linear layer on top of the final hidden
states) e.g. for ImageNet.`),yp.forEach(t),pf=m(pe),Lo=a(pe,"P",{});var Jn=s(Lo);uf=i(Jn,"This model inherits from "),Xr=a(Jn,"A",{href:!0});var Fp=s(Xr);_f=i(Fp,"TFPreTrainedModel"),Fp.forEach(t),bf=i(Jn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Jn.forEach(t),vf=m(pe),Ro=a(pe,"P",{});var Xn=s(Ro);Sf=i(Xn,"This model is also a "),Ho=a(Xn,"A",{href:!0,rel:!0});var Ep=s(Ho);wf=i(Ep,"tf.keras.Model"),Ep.forEach(t),Tf=i(Xn,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Xn.forEach(t),$f=m(pe),te=a(pe,"DIV",{class:!0});var kt=s(te);w(Wo.$$.fragment,kt),yf=m(kt),Ne=a(kt,"P",{});var ga=s(Ne);Ff=i(ga,"The "),Zr=a(ga,"A",{href:!0});var xp=s(Zr);Ef=i(xp,"TFSegformerForImageClassification"),xp.forEach(t),xf=i(ga," forward method, overrides the "),Es=a(ga,"CODE",{});var Ip=s(Es);If=i(Ip,"__call__"),Ip.forEach(t),kf=i(ga," special method."),ga.forEach(t),Pf=m(kt),w(ht.$$.fragment,kt),Cf=m(kt),w(pt.$$.fragment,kt),kt.forEach(t),pe.forEach(t),bn=m(o),Oe=a(o,"H2",{class:!0});var Zn=s(Oe);ut=a(Zn,"A",{id:!0,class:!0,href:!0});var kp=s(ut);xs=a(kp,"SPAN",{});var Pp=s(xs);w(Uo.$$.fragment,Pp),Pp.forEach(t),kp.forEach(t),Mf=m(Zn),Is=a(Zn,"SPAN",{});var Cp=s(Is);zf=i(Cp,"TFSegformerForSemanticSegmentation"),Cp.forEach(t),Zn.forEach(t),vn=m(o),K=a(o,"DIV",{class:!0});var Pt=s(K);w(Bo.$$.fragment,Pt),jf=m(Pt),Vo=a(Pt,"P",{});var Qn=s(Vo);Df=i(Qn,`SegFormer Model transformer with an all-MLP decode head on top e.g. for ADE20k, CityScapes.
This model inherits from `),Qr=a(Qn,"A",{href:!0});var Mp=s(Qr);Af=i(Mp,"TFPreTrainedModel"),Mp.forEach(t),qf=i(Qn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Qn.forEach(t),Nf=m(Pt),Go=a(Pt,"P",{});var ei=s(Go);Of=i(ei,"This model is also a "),Ko=a(ei,"A",{href:!0,rel:!0});var zp=s(Ko);Lf=i(zp,"tf.keras.Model"),zp.forEach(t),Rf=i(ei,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ei.forEach(t),Hf=m(Pt),oe=a(Pt,"DIV",{class:!0});var Ct=s(oe);w(Yo.$$.fragment,Ct),Wf=m(Ct),Le=a(Ct,"P",{});var ha=s(Le);Uf=i(ha,"The "),ea=a(ha,"A",{href:!0});var jp=s(ea);Bf=i(jp,"TFSegformerForSemanticSegmentation"),jp.forEach(t),Vf=i(ha," forward method, overrides the "),ks=a(ha,"CODE",{});var Dp=s(ks);Gf=i(Dp,"__call__"),Dp.forEach(t),Kf=i(ha," special method."),ha.forEach(t),Yf=m(Ct),w(_t.$$.fragment,Ct),Jf=m(Ct),w(bt.$$.fragment,Ct),Ct.forEach(t),Pt.forEach(t),this.h()},h(){l(f,"name","hf:doc:metadata"),l(f,"content",JSON.stringify(ou)),l(p,"id","segformer"),l(p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(p,"href","#segformer"),l(_,"class","relative group"),l(Re,"id","overview"),l(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Re,"href","#overview"),l(ue,"class","relative group"),l(zt,"href","https://arxiv.org/abs/2105.15203"),l(zt,"rel","nofollow"),l(jt,"href","https://arxiv.org/abs/2105.15203"),l(jt,"rel","nofollow"),l(Dt,"width","600"),Lp(Dt.src,Xf="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/segformer_architecture.png")||l(Dt,"src",Xf),l(At,"href","https://huggingface.co/nielsr"),l(At,"rel","nofollow"),l(qt,"href","https://huggingface.co/sayakpaul"),l(qt,"rel","nofollow"),l(Nt,"href","https://github.com/NVlabs/SegFormer"),l(Nt,"rel","nofollow"),l(sr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),l(nr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),l(ir,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),l(Ot,"href","https://huggingface.co/models?other=segformer"),l(Ot,"rel","nofollow"),l(Lt,"href","https://github.com/NielsRogge/Transformers-Tutorials/tree/master/SegFormer"),l(Lt,"rel","nofollow"),l(Rt,"href","https://huggingface.co/blog/fine-tune-segformer"),l(Rt,"rel","nofollow"),l(Wt,"href","https://github.com/deep-diver/segformer-tf-transformers"),l(Wt,"rel","nofollow"),l(Bt,"href","https://huggingface.co/spaces/chansung/segformer-tf-transformers"),l(Bt,"rel","nofollow"),l(lr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerImageProcessor"),l(Gt,"href","https://github.com/NVlabs/SegFormer/blob/master/local_configs/_base_/datasets/ade20k_repeat.py"),l(Gt,"rel","nofollow"),l(dr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerImageProcessor"),l(cr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),l(Yt,"href","https://arxiv.org/abs/2105.15203"),l(Yt,"rel","nofollow"),l(mr,"align","center"),l(fr,"align","center"),l(gr,"align","center"),l(hr,"align","center"),l(pr,"align","center"),l(ur,"align","center"),l(_r,"align","center"),l(br,"align","center"),l(vr,"align","center"),l(Sr,"align","center"),l(wr,"align","center"),l(Tr,"align","center"),l($r,"align","center"),l(yr,"align","center"),l(Fr,"align","center"),l(Er,"align","center"),l(xr,"align","center"),l(Ir,"align","center"),l(kr,"align","center"),l(Pr,"align","center"),l(Cr,"align","center"),l(Mr,"align","center"),l(zr,"align","center"),l(jr,"align","center"),l(Dr,"align","center"),l(Ar,"align","center"),l(qr,"align","center"),l(Nr,"align","center"),l(Jt,"href","https://arxiv.org/abs/2105.15203"),l(Jt,"rel","nofollow"),l(Ve,"id","transformers.SegformerConfig"),l(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ve,"href","#transformers.SegformerConfig"),l(ve,"class","relative group"),l(Or,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),l(Qt,"href","https://huggingface.co/nvidia/segformer-b0-finetuned-ade-512-512"),l(Qt,"rel","nofollow"),l(Lr,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),l(Rr,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),l(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Ke,"id","transformers.SegformerImageProcessor"),l(Ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ke,"href","#transformers.SegformerImageProcessor"),l(Te,"class","relative group"),l(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Hr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),l(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Je,"id","transformers.SegformerImageProcessor"),l(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Je,"href","#transformers.SegformerImageProcessor"),l(ye,"class","relative group"),l(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Wr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),l(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Qe,"id","transformers.SegformerModel"),l(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Qe,"href","#transformers.SegformerModel"),l(Fe,"class","relative group"),l(ho,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(ho,"rel","nofollow"),l(Ur,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),l(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ot,"id","transformers.SegformerDecodeHead"),l(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ot,"href","#transformers.SegformerDecodeHead"),l(xe,"class","relative group"),l(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(rt,"id","transformers.SegformerForImageClassification"),l(rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(rt,"href","#transformers.SegformerForImageClassification"),l(ke,"class","relative group"),l(To,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(To,"rel","nofollow"),l(Vr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),l(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(nt,"id","transformers.SegformerForSemanticSegmentation"),l(nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(nt,"href","#transformers.SegformerForSemanticSegmentation"),l(Ce,"class","relative group"),l(xo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(xo,"rel","nofollow"),l(Gr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),l(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(dt,"id","transformers.TFSegformerDecodeHead"),l(dt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(dt,"href","#transformers.TFSegformerDecodeHead"),l(ze,"class","relative group"),l(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ct,"id","transformers.TFSegformerModel"),l(ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ct,"href","#transformers.TFSegformerModel"),l(De,"class","relative group"),l(Yr,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),l(Ao,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(Ao,"rel","nofollow"),l(Jr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),l(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(gt,"id","transformers.TFSegformerForImageClassification"),l(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(gt,"href","#transformers.TFSegformerForImageClassification"),l(qe,"class","relative group"),l(Xr,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),l(Ho,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(Ho,"rel","nofollow"),l(Zr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),l(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ut,"id","transformers.TFSegformerForSemanticSegmentation"),l(ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ut,"href","#transformers.TFSegformerForSemanticSegmentation"),l(Oe,"class","relative group"),l(Qr,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),l(Ko,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(Ko,"rel","nofollow"),l(ea,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),l(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,g){e(document.head,f),u(o,v,g),u(o,_,g),e(_,p),e(p,b),T(d,b,null),e(_,h),e(_,x),e(x,ti),u(o,Ls,g),u(o,ue,g),e(ue,Re),e(Re,ua),T(Mt,ua,null),e(ue,oi),e(ue,_a),e(_a,ri),u(o,Rs,g),u(o,He,g),e(He,ai),e(He,zt),e(zt,si),e(He,ni),u(o,Hs,g),u(o,or,g),e(or,ii),u(o,Ws,g),u(o,rr,g),e(rr,ba),e(ba,li),u(o,Us,g),u(o,We,g),e(We,di),e(We,jt),e(jt,ci),e(We,mi),u(o,Bs,g),u(o,Dt,g),u(o,Vs,g),u(o,J,g),e(J,fi),e(J,At),e(At,gi),e(J,hi),e(J,qt),e(qt,pi),e(J,ui),e(J,Nt),e(Nt,_i),e(J,bi),u(o,Gs,g),u(o,ar,g),e(ar,vi),u(o,Ks,g),u(o,P,g),e(P,H),e(H,Si),e(H,sr),e(sr,wi),e(H,Ti),e(H,nr),e(nr,$i),e(H,yi),e(H,ir),e(ir,Fi),e(H,Ei),e(H,Ot),e(Ot,xi),e(H,Ii),e(P,ki),e(P,_e),e(_e,Pi),e(_e,Lt),e(Lt,Ci),e(_e,Mi),e(_e,Rt),e(Rt,zi),e(_e,ji),e(P,Di),e(P,Ht),e(Ht,Ai),e(Ht,Wt),e(Wt,qi),e(Ht,Ni),e(P,Oi),e(P,Ut),e(Ut,Li),e(Ut,Bt),e(Bt,Ri),e(Ut,Hi),e(P,Wi),e(P,Vt),e(Vt,Ui),e(Vt,va),e(va,Bi),e(Vt,Vi),e(P,Gi),e(P,be),e(be,Ki),e(be,lr),e(lr,Yi),e(be,Ji),e(be,Gt),e(Gt,Xi),e(be,Zi),e(P,Qi),e(P,I),e(I,el),e(I,dr),e(dr,tl),e(I,ol),e(I,Sa),e(Sa,rl),e(I,al),e(I,wa),e(wa,sl),e(I,nl),e(I,Ta),e(Ta,il),e(I,ll),e(I,$a),e($a,dl),e(I,cl),e(I,ya),e(ya,ml),e(I,fl),e(I,cr),e(cr,gl),e(I,hl),e(I,Fa),e(Fa,pl),e(I,ul),e(I,Ea),e(Ea,_l),e(I,bl),e(P,vl),e(P,Kt),e(Kt,Sl),e(Kt,Yt),e(Yt,wl),e(Kt,Tl),u(o,Ys,g),u(o,Ue,g),e(Ue,xa),e(xa,z),e(z,mr),e(mr,Ia),e(Ia,$l),e(z,yl),e(z,ka),e(ka,Pa),e(Pa,Fl),e(z,El),e(z,Ca),e(Ca,Ma),e(Ma,xl),e(z,Il),e(z,fr),e(fr,za),e(za,kl),e(z,Pl),e(z,gr),e(gr,ja),e(ja,Cl),e(z,Ml),e(z,hr),e(hr,Da),e(Da,zl),e(Ue,jl),e(Ue,j),e(j,D),e(D,pr),e(pr,Dl),e(D,Al),e(D,Aa),e(Aa,ql),e(D,Nl),e(D,qa),e(qa,Ol),e(D,Ll),e(D,ur),e(ur,Rl),e(D,Hl),e(D,_r),e(_r,Wl),e(D,Ul),e(D,br),e(br,Bl),e(j,Vl),e(j,A),e(A,vr),e(vr,Gl),e(A,Kl),e(A,Na),e(Na,Yl),e(A,Jl),e(A,Oa),e(Oa,Xl),e(A,Zl),e(A,Sr),e(Sr,Ql),e(A,ed),e(A,wr),e(wr,td),e(A,od),e(A,Tr),e(Tr,rd),e(j,ad),e(j,q),e(q,$r),e($r,sd),e(q,nd),e(q,La),e(La,id),e(q,ld),e(q,Ra),e(Ra,dd),e(q,cd),e(q,yr),e(yr,md),e(q,fd),e(q,Fr),e(Fr,gd),e(q,hd),e(q,Er),e(Er,pd),e(j,ud),e(j,N),e(N,xr),e(xr,_d),e(N,bd),e(N,Ha),e(Ha,vd),e(N,Sd),e(N,Wa),e(Wa,wd),e(N,Td),e(N,Ir),e(Ir,$d),e(N,yd),e(N,kr),e(kr,Fd),e(N,Ed),e(N,Pr),e(Pr,xd),e(j,Id),e(j,O),e(O,Cr),e(Cr,kd),e(O,Pd),e(O,Ua),e(Ua,Cd),e(O,Md),e(O,Ba),e(Ba,zd),e(O,jd),e(O,Mr),e(Mr,Dd),e(O,Ad),e(O,zr),e(zr,qd),e(O,Nd),e(O,jr),e(jr,Od),e(j,Ld),e(j,L),e(L,Dr),e(Dr,Rd),e(L,Hd),e(L,Va),e(Va,Wd),e(L,Ud),e(L,Ga),e(Ga,Bd),e(L,Vd),e(L,Ar),e(Ar,Gd),e(L,Kd),e(L,qr),e(qr,Yd),e(L,Jd),e(L,Nr),e(Nr,Xd),u(o,Js,g),u(o,Be,g),e(Be,Zd),e(Be,Jt),e(Jt,Qd),e(Be,ec),u(o,Xs,g),u(o,ve,g),e(ve,Ve),e(Ve,Ka),T(Xt,Ka,null),e(ve,tc),e(ve,Ya),e(Ya,oc),u(o,Zs,g),u(o,W,g),T(Zt,W,null),e(W,rc),e(W,Se),e(Se,ac),e(Se,Or),e(Or,sc),e(Se,nc),e(Se,Qt),e(Qt,ic),e(Se,lc),e(W,dc),e(W,we),e(we,cc),e(we,Lr),e(Lr,mc),e(we,fc),e(we,Rr),e(Rr,gc),e(we,hc),e(W,pc),T(Ge,W,null),u(o,Qs,g),u(o,Te,g),e(Te,Ke),e(Ke,Ja),T(eo,Ja,null),e(Te,uc),e(Te,Xa),e(Xa,_c),u(o,en,g),u(o,U,g),T(to,U,null),e(U,bc),e(U,Za),e(Za,vc),e(U,Sc),e(U,ge),T(oo,ge,null),e(ge,wc),e(ge,Qa),e(Qa,Tc),e(ge,$c),e(ge,$e),e($e,yc),e($e,es),e(es,Fc),e($e,Ec),e($e,ts),e(ts,xc),e($e,Ic),e(U,kc),e(U,Ye),T(ro,Ye,null),e(Ye,Pc),e(Ye,ao),e(ao,Cc),e(ao,Hr),e(Hr,Mc),e(ao,zc),u(o,tn,g),u(o,ye,g),e(ye,Je),e(Je,os),T(so,os,null),e(ye,jc),e(ye,rs),e(rs,Dc),u(o,on,g),u(o,B,g),T(no,B,null),e(B,Ac),e(B,as),e(as,qc),e(B,Nc),e(B,Xe),T(io,Xe,null),e(Xe,Oc),e(Xe,ss),e(ss,Lc),e(B,Rc),e(B,Ze),T(lo,Ze,null),e(Ze,Hc),e(Ze,co),e(co,Wc),e(co,Wr),e(Wr,Uc),e(co,Bc),u(o,rn,g),u(o,Fe,g),e(Fe,Qe),e(Qe,ns),T(mo,ns,null),e(Fe,Vc),e(Fe,is),e(is,Gc),u(o,an,g),u(o,me,g),T(fo,me,null),e(me,Kc),e(me,go),e(go,Yc),e(go,ho),e(ho,Jc),e(go,Xc),e(me,Zc),e(me,X),T(po,X,null),e(X,Qc),e(X,Ee),e(Ee,em),e(Ee,Ur),e(Ur,tm),e(Ee,om),e(Ee,ls),e(ls,rm),e(Ee,am),e(X,sm),T(et,X,null),e(X,nm),T(tt,X,null),u(o,sn,g),u(o,xe,g),e(xe,ot),e(ot,ds),T(uo,ds,null),e(xe,im),e(xe,cs),e(cs,lm),u(o,nn,g),u(o,Ie,g),T(_o,Ie,null),e(Ie,dm),e(Ie,Br),T(bo,Br,null),u(o,ln,g),u(o,ke,g),e(ke,rt),e(rt,ms),T(vo,ms,null),e(ke,cm),e(ke,fs),e(fs,mm),u(o,dn,g),u(o,V,g),T(So,V,null),e(V,fm),e(V,gs),e(gs,gm),e(V,hm),e(V,wo),e(wo,pm),e(wo,To),e(To,um),e(wo,_m),e(V,bm),e(V,Z),T($o,Z,null),e(Z,vm),e(Z,Pe),e(Pe,Sm),e(Pe,Vr),e(Vr,wm),e(Pe,Tm),e(Pe,hs),e(hs,$m),e(Pe,ym),e(Z,Fm),T(at,Z,null),e(Z,Em),T(st,Z,null),u(o,cn,g),u(o,Ce,g),e(Ce,nt),e(nt,ps),T(yo,ps,null),e(Ce,xm),e(Ce,us),e(us,Im),u(o,mn,g),u(o,fe,g),T(Fo,fe,null),e(fe,km),e(fe,Eo),e(Eo,Pm),e(Eo,xo),e(xo,Cm),e(Eo,Mm),e(fe,zm),e(fe,Q),T(Io,Q,null),e(Q,jm),e(Q,Me),e(Me,Dm),e(Me,Gr),e(Gr,Am),e(Me,qm),e(Me,_s),e(_s,Nm),e(Me,Om),e(Q,Lm),T(it,Q,null),e(Q,Rm),T(lt,Q,null),u(o,fn,g),u(o,ze,g),e(ze,dt),e(dt,bs),T(ko,bs,null),e(ze,Hm),e(ze,vs),e(vs,Wm),u(o,gn,g),u(o,je,g),T(Po,je,null),e(je,Um),e(je,Kr),T(Co,Kr,null),u(o,hn,g),u(o,De,g),e(De,ct),e(ct,Ss),T(Mo,Ss,null),e(De,Bm),e(De,ws),e(ws,Vm),u(o,pn,g),u(o,G,g),T(zo,G,null),e(G,Gm),e(G,jo),e(jo,Km),e(jo,Yr),e(Yr,Ym),e(jo,Jm),e(G,Xm),e(G,Do),e(Do,Zm),e(Do,Ao),e(Ao,Qm),e(Do,ef),e(G,tf),e(G,ee),T(qo,ee,null),e(ee,of),e(ee,Ae),e(Ae,rf),e(Ae,Jr),e(Jr,af),e(Ae,sf),e(Ae,Ts),e(Ts,nf),e(Ae,lf),e(ee,df),T(mt,ee,null),e(ee,cf),T(ft,ee,null),u(o,un,g),u(o,qe,g),e(qe,gt),e(gt,$s),T(No,$s,null),e(qe,mf),e(qe,ys),e(ys,ff),u(o,_n,g),u(o,R,g),T(Oo,R,null),e(R,gf),e(R,Fs),e(Fs,hf),e(R,pf),e(R,Lo),e(Lo,uf),e(Lo,Xr),e(Xr,_f),e(Lo,bf),e(R,vf),e(R,Ro),e(Ro,Sf),e(Ro,Ho),e(Ho,wf),e(Ro,Tf),e(R,$f),e(R,te),T(Wo,te,null),e(te,yf),e(te,Ne),e(Ne,Ff),e(Ne,Zr),e(Zr,Ef),e(Ne,xf),e(Ne,Es),e(Es,If),e(Ne,kf),e(te,Pf),T(ht,te,null),e(te,Cf),T(pt,te,null),u(o,bn,g),u(o,Oe,g),e(Oe,ut),e(ut,xs),T(Uo,xs,null),e(Oe,Mf),e(Oe,Is),e(Is,zf),u(o,vn,g),u(o,K,g),T(Bo,K,null),e(K,jf),e(K,Vo),e(Vo,Df),e(Vo,Qr),e(Qr,Af),e(Vo,qf),e(K,Nf),e(K,Go),e(Go,Of),e(Go,Ko),e(Ko,Lf),e(Go,Rf),e(K,Hf),e(K,oe),T(Yo,oe,null),e(oe,Wf),e(oe,Le),e(Le,Uf),e(Le,ea),e(ea,Bf),e(Le,Vf),e(Le,ks),e(ks,Gf),e(Le,Kf),e(oe,Yf),T(_t,oe,null),e(oe,Jf),T(bt,oe,null),Sn=!0},p(o,[g]){const Jo={};g&2&&(Jo.$$scope={dirty:g,ctx:o}),Ge.$set(Jo);const Ps={};g&2&&(Ps.$$scope={dirty:g,ctx:o}),et.$set(Ps);const Cs={};g&2&&(Cs.$$scope={dirty:g,ctx:o}),tt.$set(Cs);const Ms={};g&2&&(Ms.$$scope={dirty:g,ctx:o}),at.$set(Ms);const Xo={};g&2&&(Xo.$$scope={dirty:g,ctx:o}),st.$set(Xo);const zs={};g&2&&(zs.$$scope={dirty:g,ctx:o}),it.$set(zs);const js={};g&2&&(js.$$scope={dirty:g,ctx:o}),lt.$set(js);const Ds={};g&2&&(Ds.$$scope={dirty:g,ctx:o}),mt.$set(Ds);const Zo={};g&2&&(Zo.$$scope={dirty:g,ctx:o}),ft.$set(Zo);const As={};g&2&&(As.$$scope={dirty:g,ctx:o}),ht.$set(As);const qs={};g&2&&(qs.$$scope={dirty:g,ctx:o}),pt.$set(qs);const Ns={};g&2&&(Ns.$$scope={dirty:g,ctx:o}),_t.$set(Ns);const Os={};g&2&&(Os.$$scope={dirty:g,ctx:o}),bt.$set(Os)},i(o){Sn||($(d.$$.fragment,o),$(Mt.$$.fragment,o),$(Xt.$$.fragment,o),$(Zt.$$.fragment,o),$(Ge.$$.fragment,o),$(eo.$$.fragment,o),$(to.$$.fragment,o),$(oo.$$.fragment,o),$(ro.$$.fragment,o),$(so.$$.fragment,o),$(no.$$.fragment,o),$(io.$$.fragment,o),$(lo.$$.fragment,o),$(mo.$$.fragment,o),$(fo.$$.fragment,o),$(po.$$.fragment,o),$(et.$$.fragment,o),$(tt.$$.fragment,o),$(uo.$$.fragment,o),$(_o.$$.fragment,o),$(bo.$$.fragment,o),$(vo.$$.fragment,o),$(So.$$.fragment,o),$($o.$$.fragment,o),$(at.$$.fragment,o),$(st.$$.fragment,o),$(yo.$$.fragment,o),$(Fo.$$.fragment,o),$(Io.$$.fragment,o),$(it.$$.fragment,o),$(lt.$$.fragment,o),$(ko.$$.fragment,o),$(Po.$$.fragment,o),$(Co.$$.fragment,o),$(Mo.$$.fragment,o),$(zo.$$.fragment,o),$(qo.$$.fragment,o),$(mt.$$.fragment,o),$(ft.$$.fragment,o),$(No.$$.fragment,o),$(Oo.$$.fragment,o),$(Wo.$$.fragment,o),$(ht.$$.fragment,o),$(pt.$$.fragment,o),$(Uo.$$.fragment,o),$(Bo.$$.fragment,o),$(Yo.$$.fragment,o),$(_t.$$.fragment,o),$(bt.$$.fragment,o),Sn=!0)},o(o){y(d.$$.fragment,o),y(Mt.$$.fragment,o),y(Xt.$$.fragment,o),y(Zt.$$.fragment,o),y(Ge.$$.fragment,o),y(eo.$$.fragment,o),y(to.$$.fragment,o),y(oo.$$.fragment,o),y(ro.$$.fragment,o),y(so.$$.fragment,o),y(no.$$.fragment,o),y(io.$$.fragment,o),y(lo.$$.fragment,o),y(mo.$$.fragment,o),y(fo.$$.fragment,o),y(po.$$.fragment,o),y(et.$$.fragment,o),y(tt.$$.fragment,o),y(uo.$$.fragment,o),y(_o.$$.fragment,o),y(bo.$$.fragment,o),y(vo.$$.fragment,o),y(So.$$.fragment,o),y($o.$$.fragment,o),y(at.$$.fragment,o),y(st.$$.fragment,o),y(yo.$$.fragment,o),y(Fo.$$.fragment,o),y(Io.$$.fragment,o),y(it.$$.fragment,o),y(lt.$$.fragment,o),y(ko.$$.fragment,o),y(Po.$$.fragment,o),y(Co.$$.fragment,o),y(Mo.$$.fragment,o),y(zo.$$.fragment,o),y(qo.$$.fragment,o),y(mt.$$.fragment,o),y(ft.$$.fragment,o),y(No.$$.fragment,o),y(Oo.$$.fragment,o),y(Wo.$$.fragment,o),y(ht.$$.fragment,o),y(pt.$$.fragment,o),y(Uo.$$.fragment,o),y(Bo.$$.fragment,o),y(Yo.$$.fragment,o),y(_t.$$.fragment,o),y(bt.$$.fragment,o),Sn=!1},d(o){t(f),o&&t(v),o&&t(_),F(d),o&&t(Ls),o&&t(ue),F(Mt),o&&t(Rs),o&&t(He),o&&t(Hs),o&&t(or),o&&t(Ws),o&&t(rr),o&&t(Us),o&&t(We),o&&t(Bs),o&&t(Dt),o&&t(Vs),o&&t(J),o&&t(Gs),o&&t(ar),o&&t(Ks),o&&t(P),o&&t(Ys),o&&t(Ue),o&&t(Js),o&&t(Be),o&&t(Xs),o&&t(ve),F(Xt),o&&t(Zs),o&&t(W),F(Zt),F(Ge),o&&t(Qs),o&&t(Te),F(eo),o&&t(en),o&&t(U),F(to),F(oo),F(ro),o&&t(tn),o&&t(ye),F(so),o&&t(on),o&&t(B),F(no),F(io),F(lo),o&&t(rn),o&&t(Fe),F(mo),o&&t(an),o&&t(me),F(fo),F(po),F(et),F(tt),o&&t(sn),o&&t(xe),F(uo),o&&t(nn),o&&t(Ie),F(_o),F(bo),o&&t(ln),o&&t(ke),F(vo),o&&t(dn),o&&t(V),F(So),F($o),F(at),F(st),o&&t(cn),o&&t(Ce),F(yo),o&&t(mn),o&&t(fe),F(Fo),F(Io),F(it),F(lt),o&&t(fn),o&&t(ze),F(ko),o&&t(gn),o&&t(je),F(Po),F(Co),o&&t(hn),o&&t(De),F(Mo),o&&t(pn),o&&t(G),F(zo),F(qo),F(mt),F(ft),o&&t(un),o&&t(qe),F(No),o&&t(_n),o&&t(R),F(Oo),F(Wo),F(ht),F(pt),o&&t(bn),o&&t(Oe),F(Uo),o&&t(vn),o&&t(K),F(Bo),F(Yo),F(_t),F(bt)}}}const ou={local:"segformer",sections:[{local:"overview",title:"Overview"},{local:"transformers.SegformerConfig",title:"SegformerConfig"},{local:"transformers.SegformerImageProcessor",title:"SegformerFeatureExtractor"},{local:"transformers.SegformerImageProcessor",title:"SegformerImageProcessor"},{local:"transformers.SegformerModel",title:"SegformerModel"},{local:"transformers.SegformerDecodeHead",title:"SegformerDecodeHead"},{local:"transformers.SegformerForImageClassification",title:"SegformerForImageClassification"},{local:"transformers.SegformerForSemanticSegmentation",title:"SegformerForSemanticSegmentation"},{local:"transformers.TFSegformerDecodeHead",title:"TFSegformerDecodeHead"},{local:"transformers.TFSegformerModel",title:"TFSegformerModel"},{local:"transformers.TFSegformerForImageClassification",title:"TFSegformerForImageClassification"},{local:"transformers.TFSegformerForSemanticSegmentation",title:"TFSegformerForSemanticSegmentation"}],title:"SegFormer"};function ru(E){return Rp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class cu extends Ap{constructor(f){super();qp(this,f,ru,tu,Np,{})}}export{cu as default,ou as metadata};
