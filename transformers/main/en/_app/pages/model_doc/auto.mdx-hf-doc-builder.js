import{S as Nka,i as qka,s as jka,e as a,k as l,w as F,t as o,M as Dka,c as n,d as t,m as i,a as s,x as T,h as r,b as d,G as e,g as b,y as M,q as E,o as C,B as w,v as Gka,L as q}from"../../chunks/vendor-hf-doc-builder.js";import{T as mgo}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as B}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Oka($){let g,v,u,f,p,m,h,He,Ld,og,wt,yd,xd,Mk,rg,Qe,Ze,$d,_s,Ek,bs,vs,Ck,kd,Fs,wk,Sd,tg,ln;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),m=a("code"),h=o("~transformer.PretrainedConfig"),He=o(`, make sure its
`),Ld=a("code"),og=o("model_type"),wt=o(" attribute is set to the same key you use when registering the config (here "),yd=a("code"),xd=o('"new-model"'),Mk=o(")."),rg=l(),Qe=a("p"),Ze=o("Likewise, if your "),$d=a("code"),_s=o("NewModel"),Ek=o(" is a subclass of "),bs=a("a"),vs=o("PreTrainedModel"),Ck=o(`, make sure its
`),kd=a("code"),Fs=o("config_class"),wk=o(` attribute is set to the same class you use when registering the model (here
`),Sd=a("code"),tg=o("NewModelConfig"),ln=o(")."),this.h()},l(Ke){g=n(Ke,"P",{});var ye=s(g);v=r(ye,"If your "),u=n(ye,"CODE",{});var Wq=s(u);f=r(Wq,"NewModelConfig"),Wq.forEach(t),p=r(ye," is a subclass of "),m=n(ye,"CODE",{});var Rd=s(m);h=r(Rd,"~transformer.PretrainedConfig"),Rd.forEach(t),He=r(ye,`, make sure its
`),Ld=n(ye,"CODE",{});var Uq=s(Ld);og=r(Uq,"model_type"),Uq.forEach(t),wt=r(ye," attribute is set to the same key you use when registering the config (here "),yd=n(ye,"CODE",{});var Hq=s(yd);xd=r(Hq,'"new-model"'),Hq.forEach(t),Mk=r(ye,")."),ye.forEach(t),rg=i(Ke),Qe=n(Ke,"P",{});var Po=s(Qe);Ze=r(Po,"Likewise, if your "),$d=n(Po,"CODE",{});var dn=s($d);_s=r(dn,"NewModel"),dn.forEach(t),Ek=r(Po," is a subclass of "),bs=n(Po,"A",{href:!0});var Jq=s(bs);vs=r(Jq,"PreTrainedModel"),Jq.forEach(t),Ck=r(Po,`, make sure its
`),kd=n(Po,"CODE",{});var ag=s(kd);Fs=r(ag,"config_class"),ag.forEach(t),wk=r(Po,` attribute is set to the same class you use when registering the model (here
`),Sd=n(Po,"CODE",{});var Yq=s(Sd);tg=r(Yq,"NewModelConfig"),Yq.forEach(t),ln=r(Po,")."),Po.forEach(t),this.h()},h(){d(bs,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Ke,ye){b(Ke,g,ye),e(g,v),e(g,u),e(u,f),e(g,p),e(g,m),e(m,h),e(g,He),e(g,Ld),e(Ld,og),e(g,wt),e(g,yd),e(yd,xd),e(g,Mk),b(Ke,rg,ye),b(Ke,Qe,ye),e(Qe,Ze),e(Qe,$d),e($d,_s),e(Qe,Ek),e(Qe,bs),e(bs,vs),e(Qe,Ck),e(Qe,kd),e(kd,Fs),e(Qe,wk),e(Qe,Sd),e(Sd,tg),e(Qe,ln)},d(Ke){Ke&&t(g),Ke&&t(rg),Ke&&t(Qe)}}}function Vka($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function Xka($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function zka($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var He=s(u);f=r(He,"use_auth_token=True"),He.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(m,h){b(m,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(m){m&&t(g)}}}function Qka($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function Wka($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var He=s(u);f=r(He,"use_auth_token=True"),He.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(m,h){b(m,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(m){m&&t(g)}}}function Uka($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoImageProcessor

# Download image processor from huggingface.co and cache.
image_processor = AutoImageProcessor.from_pretrained("google/vit-base-patch16-224-in21k")

# If image processor files are in a directory (e.g. image processor was saved using *save_pretrained('./test/saved_model/')*)
image_processor = AutoImageProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoImageProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download image processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image_processor = AutoImageProcessor.from_pretrained(<span class="hljs-string">&quot;google/vit-base-patch16-224-in21k&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If image processor files are in a directory (e.g. image processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image_processor = AutoImageProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function Hka($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var He=s(u);f=r(He,"use_auth_token=True"),He.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(m,h){b(m,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(m){m&&t(g)}}}function Jka($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function Yka($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function Zka($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function Kka($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function eSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function oSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function rSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function tSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForDepthEstimation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForDepthEstimation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDepthEstimation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDepthEstimation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function aSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForDepthEstimation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDepthEstimation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForDepthEstimation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForDepthEstimation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDepthEstimation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDepthEstimation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDepthEstimation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDepthEstimation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function nSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function sSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function lSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function iSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function dSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function mSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function cSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function fSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function gSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function hSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function uSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function pSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function _Sa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function bSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function vSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function FSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function TSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function MSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ESa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function CSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function wSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ASa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function LSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ySa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function xSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function $Sa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function kSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function SSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function RSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function PSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function BSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ISa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function NSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function qSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function jSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function DSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function GSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function OSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function VSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function XSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function zSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function QSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function WSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function USa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function HSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function JSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function YSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForZeroShotObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForZeroShotObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForZeroShotObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ZSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForZeroShotObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForZeroShotObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForZeroShotObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForZeroShotObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForZeroShotObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function KSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function eRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function oRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function rRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function tRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function aRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function nRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function sRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function lRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function iRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function dRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function mRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function cRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function fRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function gRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function hRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function uRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function pRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function _Ra($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function bRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function vRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function FRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function TRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function MRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/layoutlm_pt_model_config.json")
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
    "./pt_model/layoutlm_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/layoutlm_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/layoutlm_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ERa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function CRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function wRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ARa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function LRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function yRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function xRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function $Ra($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function kRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function SRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function RRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function PRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function BRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function IRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function NRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function qRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function jRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function DRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function GRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ORa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function VRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function XRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function zRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function QRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function WRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function URa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function HRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function JRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function YRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ZRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function KRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ePa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function oPa($){let g,v,u,f,p,m,h,He,Ld,og,wt,yd,xd,Mk,rg,Qe,Ze,$d,_s,Ek,bs,vs,Ck,kd,Fs,wk,Sd,tg,ln,Ke,ye,Wq,Rd,Uq,Hq,Po,dn,Jq,ag,Yq,cgo,vio,Pd,ng,Vhe,Ak,fgo,Xhe,ggo,Fio,Ts,hgo,zhe,ugo,pgo,Qhe,_go,bgo,Tio,Lk,Mio,Zq,vgo,Eio,sg,Cio,Bd,lg,Whe,yk,Fgo,Uhe,Tgo,wio,Bo,xk,Mgo,$k,Ego,Kq,Cgo,wgo,Ago,kk,Lgo,Hhe,ygo,xgo,$go,Vr,Sk,kgo,Jhe,Sgo,Rgo,Id,Pgo,Yhe,Bgo,Igo,Zhe,Ngo,qgo,jgo,A,ig,Khe,Dgo,Ggo,ej,Ogo,Vgo,Xgo,dg,eue,zgo,Qgo,oj,Wgo,Ugo,Hgo,mg,oue,Jgo,Ygo,rj,Zgo,Kgo,eho,cg,rue,oho,rho,tj,tho,aho,nho,fg,tue,sho,lho,aj,iho,dho,mho,gg,aue,cho,fho,nj,gho,hho,uho,hg,nue,pho,_ho,sj,bho,vho,Fho,ug,sue,Tho,Mho,lj,Eho,Cho,who,pg,lue,Aho,Lho,ij,yho,xho,$ho,_g,iue,kho,Sho,dj,Rho,Pho,Bho,bg,due,Iho,Nho,mj,qho,jho,Dho,vg,mue,Gho,Oho,cj,Vho,Xho,zho,Fg,cue,Qho,Who,fj,Uho,Hho,Jho,Tg,fue,Yho,Zho,gj,Kho,euo,ouo,Mg,gue,ruo,tuo,hj,auo,nuo,suo,Eg,hue,luo,iuo,uj,duo,muo,cuo,Cg,uue,fuo,guo,pj,huo,uuo,puo,wg,pue,_uo,buo,_j,vuo,Fuo,Tuo,Ag,_ue,Muo,Euo,bj,Cuo,wuo,Auo,Lg,bue,Luo,yuo,vj,xuo,$uo,kuo,yg,vue,Suo,Ruo,Fj,Puo,Buo,Iuo,xg,Fue,Nuo,quo,Tj,juo,Duo,Guo,$g,Tue,Ouo,Vuo,Mj,Xuo,zuo,Quo,kg,Mue,Wuo,Uuo,Ej,Huo,Juo,Yuo,Sg,Eue,Zuo,Kuo,Cj,epo,opo,rpo,Rg,Cue,tpo,apo,wj,npo,spo,lpo,Pg,wue,ipo,dpo,Aj,mpo,cpo,fpo,Bg,Aue,gpo,hpo,Lj,upo,ppo,_po,Ig,Lue,bpo,vpo,yj,Fpo,Tpo,Mpo,Ng,yue,Epo,Cpo,xj,wpo,Apo,Lpo,qg,xue,ypo,xpo,$j,$po,kpo,Spo,jg,$ue,Rpo,Ppo,kj,Bpo,Ipo,Npo,Dg,kue,qpo,jpo,Sj,Dpo,Gpo,Opo,Gg,Sue,Vpo,Xpo,Rj,zpo,Qpo,Wpo,Og,Rue,Upo,Hpo,Pj,Jpo,Ypo,Zpo,Vg,Pue,Kpo,e_o,Bj,o_o,r_o,t_o,Xg,Bue,a_o,n_o,Ij,s_o,l_o,i_o,zg,Iue,d_o,m_o,Nj,c_o,f_o,g_o,Qg,Nue,h_o,u_o,qj,p_o,__o,b_o,Wg,que,v_o,F_o,jj,T_o,M_o,E_o,Ug,jue,C_o,w_o,Dj,A_o,L_o,y_o,Hg,Due,x_o,$_o,Gj,k_o,S_o,R_o,Jg,Gue,P_o,B_o,Oj,I_o,N_o,q_o,Yg,Oue,j_o,D_o,Vj,G_o,O_o,V_o,Zg,Vue,X_o,z_o,Xj,Q_o,W_o,U_o,Kg,Xue,H_o,J_o,zj,Y_o,Z_o,K_o,eh,zue,e1o,o1o,Qj,r1o,t1o,a1o,oh,Que,n1o,s1o,Wj,l1o,i1o,d1o,rh,Wue,m1o,c1o,Uj,f1o,g1o,h1o,th,Uue,u1o,p1o,Hj,_1o,b1o,v1o,ah,Hue,F1o,T1o,Jj,M1o,E1o,C1o,nh,Jue,w1o,A1o,Yj,L1o,y1o,x1o,sh,Yue,$1o,k1o,Zj,S1o,R1o,P1o,lh,Zue,B1o,I1o,Kj,N1o,q1o,j1o,ih,Kue,D1o,G1o,eD,O1o,V1o,X1o,dh,epe,z1o,Q1o,oD,W1o,U1o,H1o,mh,ope,J1o,Y1o,rD,Z1o,K1o,e2o,ch,rpe,o2o,r2o,tD,t2o,a2o,n2o,fh,tpe,s2o,l2o,aD,i2o,d2o,m2o,gh,ape,c2o,f2o,nD,g2o,h2o,u2o,hh,npe,p2o,_2o,sD,b2o,v2o,F2o,uh,spe,T2o,M2o,lD,E2o,C2o,w2o,ph,lpe,A2o,L2o,iD,y2o,x2o,$2o,_h,ipe,k2o,S2o,dD,R2o,P2o,B2o,bh,dpe,I2o,N2o,mD,q2o,j2o,D2o,vh,mpe,G2o,O2o,cD,V2o,X2o,z2o,Fh,cpe,Q2o,W2o,fD,U2o,H2o,J2o,Th,fpe,Y2o,Z2o,gD,K2o,ebo,obo,Mh,gpe,rbo,tbo,hD,abo,nbo,sbo,Eh,hpe,lbo,ibo,uD,dbo,mbo,cbo,Ch,upe,fbo,gbo,pD,hbo,ubo,pbo,wh,ppe,_bo,bbo,_D,vbo,Fbo,Tbo,Ah,_pe,Mbo,Ebo,bD,Cbo,wbo,Abo,Lh,bpe,Lbo,ybo,vD,xbo,$bo,kbo,yh,vpe,Sbo,Rbo,FD,Pbo,Bbo,Ibo,xh,Fpe,Nbo,qbo,TD,jbo,Dbo,Gbo,$h,Tpe,Obo,Vbo,MD,Xbo,zbo,Qbo,kh,Mpe,Wbo,Ubo,ED,Hbo,Jbo,Ybo,Sh,Epe,Zbo,Kbo,CD,evo,ovo,rvo,Rh,Cpe,tvo,avo,wD,nvo,svo,lvo,Ph,wpe,ivo,dvo,AD,mvo,cvo,fvo,Bh,Ape,gvo,hvo,LD,uvo,pvo,_vo,Ih,Lpe,bvo,vvo,yD,Fvo,Tvo,Mvo,Nh,ype,Evo,Cvo,xD,wvo,Avo,Lvo,qh,xpe,yvo,xvo,$D,$vo,kvo,Svo,jh,$pe,Rvo,Pvo,kD,Bvo,Ivo,Nvo,Dh,kpe,qvo,jvo,SD,Dvo,Gvo,Ovo,Gh,Spe,Vvo,Xvo,RD,zvo,Qvo,Wvo,Oh,Rpe,Uvo,Hvo,PD,Jvo,Yvo,Zvo,Vh,Ppe,Kvo,eFo,BD,oFo,rFo,tFo,Xh,Bpe,aFo,nFo,ID,sFo,lFo,iFo,zh,Ipe,dFo,mFo,ND,cFo,fFo,gFo,Qh,Npe,hFo,uFo,qD,pFo,_Fo,bFo,Wh,qpe,vFo,FFo,jD,TFo,MFo,EFo,Uh,jpe,CFo,wFo,DD,AFo,LFo,yFo,Hh,Dpe,xFo,$Fo,GD,kFo,SFo,RFo,Jh,Gpe,PFo,BFo,OD,IFo,NFo,qFo,Yh,Ope,jFo,DFo,VD,GFo,OFo,VFo,Zh,Vpe,XFo,zFo,XD,QFo,WFo,UFo,Kh,Xpe,HFo,JFo,zD,YFo,ZFo,KFo,eu,zpe,eTo,oTo,QD,rTo,tTo,aTo,ou,Qpe,nTo,sTo,WD,lTo,iTo,dTo,ru,Wpe,mTo,cTo,UD,fTo,gTo,hTo,tu,Upe,uTo,pTo,HD,_To,bTo,vTo,au,Hpe,FTo,TTo,JD,MTo,ETo,CTo,nu,Jpe,wTo,ATo,YD,LTo,yTo,xTo,su,Ype,$To,kTo,ZD,STo,RTo,PTo,lu,Zpe,BTo,ITo,KD,NTo,qTo,jTo,iu,Kpe,DTo,GTo,eG,OTo,VTo,XTo,du,e_e,zTo,QTo,oG,WTo,UTo,HTo,mu,o_e,JTo,YTo,rG,ZTo,KTo,eMo,cu,r_e,oMo,rMo,tG,tMo,aMo,nMo,fu,t_e,sMo,lMo,aG,iMo,dMo,mMo,gu,a_e,cMo,fMo,nG,gMo,hMo,uMo,hu,n_e,pMo,_Mo,sG,bMo,vMo,FMo,uu,s_e,TMo,MMo,lG,EMo,CMo,wMo,pu,l_e,AMo,LMo,iG,yMo,xMo,$Mo,_u,i_e,kMo,SMo,dG,RMo,PMo,BMo,bu,d_e,IMo,NMo,mG,qMo,jMo,DMo,vu,m_e,GMo,OMo,cG,VMo,XMo,zMo,Fu,c_e,QMo,WMo,fG,UMo,HMo,JMo,Tu,f_e,YMo,ZMo,gG,KMo,eEo,oEo,Mu,g_e,rEo,tEo,hG,aEo,nEo,sEo,Eu,h_e,lEo,iEo,uG,dEo,mEo,cEo,Cu,u_e,fEo,gEo,pG,hEo,uEo,pEo,wu,p_e,_Eo,bEo,_G,vEo,FEo,TEo,Au,__e,MEo,EEo,bG,CEo,wEo,AEo,Lu,b_e,LEo,yEo,vG,xEo,$Eo,kEo,yu,v_e,SEo,REo,FG,PEo,BEo,IEo,xu,F_e,NEo,qEo,TG,jEo,DEo,GEo,$u,T_e,OEo,VEo,MG,XEo,zEo,QEo,ku,M_e,WEo,UEo,EG,HEo,JEo,YEo,Su,E_e,ZEo,KEo,CG,e4o,o4o,r4o,Ru,C_e,t4o,a4o,wG,n4o,s4o,l4o,Pu,w_e,i4o,d4o,AG,m4o,c4o,f4o,Bu,A_e,g4o,h4o,LG,u4o,p4o,_4o,Iu,L_e,b4o,v4o,yG,F4o,T4o,M4o,Nu,y_e,E4o,C4o,xG,w4o,A4o,L4o,qu,x_e,y4o,x4o,$G,$4o,k4o,S4o,ju,$_e,R4o,P4o,kG,B4o,I4o,N4o,Du,q4o,Gu,Rk,j4o,k_e,D4o,Aio,Nd,Ou,S_e,Pk,G4o,R_e,O4o,Lio,Io,Bk,V4o,Ik,X4o,SG,z4o,Q4o,W4o,Nk,U4o,P_e,H4o,J4o,Y4o,Xr,qk,Z4o,B_e,K4o,eCo,mn,oCo,I_e,rCo,tCo,N_e,aCo,nCo,q_e,sCo,lCo,iCo,k,Ms,j_e,dCo,mCo,RG,cCo,fCo,PG,gCo,hCo,uCo,Es,D_e,pCo,_Co,BG,bCo,vCo,IG,FCo,TCo,MCo,Cs,G_e,ECo,CCo,NG,wCo,ACo,qG,LCo,yCo,xCo,Vu,O_e,$Co,kCo,jG,SCo,RCo,PCo,ws,V_e,BCo,ICo,DG,NCo,qCo,GG,jCo,DCo,GCo,Xu,X_e,OCo,VCo,OG,XCo,zCo,QCo,zu,z_e,WCo,UCo,VG,HCo,JCo,YCo,Qu,Q_e,ZCo,KCo,XG,e3o,o3o,r3o,As,W_e,t3o,a3o,zG,n3o,s3o,QG,l3o,i3o,d3o,Ls,U_e,m3o,c3o,WG,f3o,g3o,UG,h3o,u3o,p3o,ys,H_e,_3o,b3o,HG,v3o,F3o,JG,T3o,M3o,E3o,Wu,J_e,C3o,w3o,YG,A3o,L3o,y3o,Uu,Y_e,x3o,$3o,ZG,k3o,S3o,R3o,Hu,Z_e,P3o,B3o,KG,I3o,N3o,q3o,xs,K_e,j3o,D3o,eO,G3o,O3o,oO,V3o,X3o,z3o,Ju,e1e,Q3o,W3o,rO,U3o,H3o,J3o,$s,o1e,Y3o,Z3o,tO,K3o,e5o,aO,o5o,r5o,t5o,ks,r1e,a5o,n5o,nO,s5o,l5o,sO,i5o,d5o,m5o,Ss,t1e,c5o,f5o,lO,g5o,h5o,iO,u5o,p5o,_5o,Rs,a1e,b5o,v5o,dO,F5o,T5o,mO,M5o,E5o,C5o,Ps,n1e,w5o,A5o,cO,L5o,y5o,fO,x5o,$5o,k5o,Yu,s1e,S5o,R5o,gO,P5o,B5o,I5o,Bs,l1e,N5o,q5o,hO,j5o,D5o,uO,G5o,O5o,V5o,Is,i1e,X5o,z5o,pO,Q5o,W5o,_O,U5o,H5o,J5o,Ns,d1e,Y5o,Z5o,bO,K5o,e0o,vO,o0o,r0o,t0o,qs,m1e,a0o,n0o,FO,s0o,l0o,TO,i0o,d0o,m0o,js,c1e,c0o,f0o,MO,g0o,h0o,EO,u0o,p0o,_0o,Ds,f1e,b0o,v0o,CO,F0o,T0o,wO,M0o,E0o,C0o,Gs,g1e,w0o,A0o,AO,L0o,y0o,LO,x0o,$0o,k0o,Zu,h1e,S0o,R0o,yO,P0o,B0o,I0o,Ku,u1e,N0o,q0o,xO,j0o,D0o,G0o,Os,p1e,O0o,V0o,$O,X0o,z0o,kO,Q0o,W0o,U0o,ep,_1e,H0o,J0o,SO,Y0o,Z0o,K0o,Vs,b1e,ewo,owo,RO,rwo,two,PO,awo,nwo,swo,Xs,v1e,lwo,iwo,BO,dwo,mwo,IO,cwo,fwo,gwo,zs,F1e,hwo,uwo,NO,pwo,_wo,qO,bwo,vwo,Fwo,op,T1e,Two,Mwo,jO,Ewo,Cwo,wwo,rp,M1e,Awo,Lwo,DO,ywo,xwo,$wo,Qs,E1e,kwo,Swo,GO,Rwo,Pwo,OO,Bwo,Iwo,Nwo,Ws,C1e,qwo,jwo,VO,Dwo,Gwo,XO,Owo,Vwo,Xwo,Us,w1e,zwo,Qwo,zO,Wwo,Uwo,QO,Hwo,Jwo,Ywo,tp,A1e,Zwo,Kwo,WO,eAo,oAo,rAo,Hs,L1e,tAo,aAo,UO,nAo,sAo,HO,lAo,iAo,dAo,ap,y1e,mAo,cAo,JO,fAo,gAo,hAo,Js,x1e,uAo,pAo,YO,_Ao,bAo,ZO,vAo,FAo,TAo,Ys,$1e,MAo,EAo,KO,CAo,wAo,eV,AAo,LAo,yAo,Zs,k1e,xAo,$Ao,oV,kAo,SAo,rV,RAo,PAo,BAo,Ks,S1e,IAo,NAo,tV,qAo,jAo,aV,DAo,GAo,OAo,el,R1e,VAo,XAo,nV,zAo,QAo,sV,WAo,UAo,HAo,ol,P1e,JAo,YAo,lV,ZAo,KAo,iV,e6o,o6o,r6o,rl,B1e,t6o,a6o,dV,n6o,s6o,mV,l6o,i6o,d6o,tl,I1e,m6o,c6o,cV,f6o,g6o,fV,h6o,u6o,p6o,np,N1e,_6o,b6o,gV,v6o,F6o,T6o,al,q1e,M6o,E6o,hV,C6o,w6o,uV,A6o,L6o,y6o,sp,j1e,x6o,$6o,pV,k6o,S6o,R6o,lp,D1e,P6o,B6o,_V,I6o,N6o,q6o,nl,G1e,j6o,D6o,bV,G6o,O6o,vV,V6o,X6o,z6o,sl,O1e,Q6o,W6o,FV,U6o,H6o,TV,J6o,Y6o,Z6o,ll,V1e,K6o,e7o,MV,o7o,r7o,EV,t7o,a7o,n7o,ip,X1e,s7o,l7o,CV,i7o,d7o,m7o,il,z1e,c7o,f7o,wV,g7o,h7o,AV,u7o,p7o,_7o,dl,Q1e,b7o,v7o,LV,F7o,T7o,yV,M7o,E7o,C7o,ml,W1e,w7o,A7o,xV,L7o,y7o,$V,x7o,$7o,k7o,cl,U1e,S7o,R7o,kV,P7o,B7o,SV,I7o,N7o,q7o,fl,H1e,j7o,D7o,RV,G7o,O7o,PV,V7o,X7o,z7o,gl,J1e,Q7o,W7o,BV,U7o,H7o,IV,J7o,Y7o,Z7o,hl,Y1e,K7o,e8o,NV,o8o,r8o,qV,t8o,a8o,n8o,ul,Z1e,s8o,l8o,jV,i8o,d8o,DV,m8o,c8o,f8o,dp,K1e,g8o,h8o,GV,u8o,p8o,_8o,pl,e2e,b8o,v8o,OV,F8o,T8o,VV,M8o,E8o,C8o,_l,o2e,w8o,A8o,XV,L8o,y8o,zV,x8o,$8o,k8o,bl,r2e,S8o,R8o,QV,P8o,B8o,WV,I8o,N8o,q8o,mp,t2e,j8o,D8o,UV,G8o,O8o,V8o,cp,a2e,X8o,z8o,HV,Q8o,W8o,U8o,fp,n2e,H8o,J8o,JV,Y8o,Z8o,K8o,gp,s2e,eLo,oLo,YV,rLo,tLo,aLo,vl,l2e,nLo,sLo,ZV,lLo,iLo,KV,dLo,mLo,cLo,hp,i2e,fLo,gLo,eX,hLo,uLo,pLo,Fl,d2e,_Lo,bLo,oX,vLo,FLo,rX,TLo,MLo,ELo,Tl,m2e,CLo,wLo,tX,ALo,LLo,aX,yLo,xLo,$Lo,Ml,c2e,kLo,SLo,nX,RLo,PLo,sX,BLo,ILo,NLo,El,f2e,qLo,jLo,lX,DLo,GLo,iX,OLo,VLo,XLo,Cl,g2e,zLo,QLo,dX,WLo,ULo,mX,HLo,JLo,YLo,up,h2e,ZLo,KLo,cX,eyo,oyo,ryo,wl,u2e,tyo,ayo,fX,nyo,syo,gX,lyo,iyo,dyo,pp,p2e,myo,cyo,hX,fyo,gyo,hyo,_p,_2e,uyo,pyo,uX,_yo,byo,vyo,Al,b2e,Fyo,Tyo,pX,Myo,Eyo,_X,Cyo,wyo,Ayo,Ll,v2e,Lyo,yyo,bX,xyo,$yo,vX,kyo,Syo,Ryo,yl,F2e,Pyo,Byo,FX,Iyo,Nyo,TX,qyo,jyo,Dyo,xl,T2e,Gyo,Oyo,MX,Vyo,Xyo,EX,zyo,Qyo,Wyo,bp,M2e,Uyo,Hyo,CX,Jyo,Yyo,Zyo,vp,E2e,Kyo,e9o,wX,o9o,r9o,t9o,Fp,C2e,a9o,n9o,AX,s9o,l9o,i9o,$l,w2e,d9o,m9o,LX,c9o,f9o,yX,g9o,h9o,u9o,kl,A2e,p9o,_9o,xX,b9o,v9o,$X,F9o,T9o,M9o,Tp,L2e,E9o,C9o,kX,w9o,A9o,L9o,Mp,y2e,y9o,x9o,SX,$9o,k9o,S9o,Ep,x2e,R9o,P9o,RX,B9o,I9o,N9o,Cp,$2e,q9o,j9o,PX,D9o,G9o,O9o,Sl,k2e,V9o,X9o,BX,z9o,Q9o,IX,W9o,U9o,H9o,Rl,S2e,J9o,Y9o,NX,Z9o,K9o,qX,exo,oxo,rxo,wp,R2e,txo,axo,jX,nxo,sxo,lxo,Ap,P2e,ixo,dxo,DX,mxo,cxo,fxo,Pl,B2e,gxo,hxo,GX,uxo,pxo,OX,_xo,bxo,vxo,Bl,I2e,Fxo,Txo,VX,Mxo,Exo,XX,Cxo,wxo,Axo,Il,N2e,Lxo,yxo,zX,xxo,$xo,QX,kxo,Sxo,Rxo,Nl,q2e,Pxo,Bxo,WX,Ixo,Nxo,UX,qxo,jxo,Dxo,Lp,Gxo,yp,jk,Oxo,j2e,Vxo,yio,qd,xp,D2e,Dk,Xxo,G2e,zxo,xio,No,Gk,Qxo,Ok,Wxo,HX,Uxo,Hxo,Jxo,Vk,Yxo,O2e,Zxo,Kxo,e$o,eo,Xk,o$o,V2e,r$o,t$o,cn,a$o,X2e,n$o,s$o,z2e,l$o,i$o,Q2e,d$o,m$o,c$o,z,$p,W2e,f$o,g$o,JX,h$o,u$o,p$o,kp,U2e,_$o,b$o,YX,v$o,F$o,T$o,Sp,H2e,M$o,E$o,ZX,C$o,w$o,A$o,Rp,J2e,L$o,y$o,KX,x$o,$$o,k$o,Pp,Y2e,S$o,R$o,ez,P$o,B$o,I$o,Bp,Z2e,N$o,q$o,oz,j$o,D$o,G$o,Ip,K2e,O$o,V$o,rz,X$o,z$o,Q$o,Np,ebe,W$o,U$o,tz,H$o,J$o,Y$o,qp,obe,Z$o,K$o,az,eko,oko,rko,jp,rbe,tko,ako,nz,nko,sko,lko,Dp,tbe,iko,dko,sz,mko,cko,fko,Gp,abe,gko,hko,lz,uko,pko,_ko,Op,nbe,bko,vko,iz,Fko,Tko,Mko,Vp,sbe,Eko,Cko,dz,wko,Ako,Lko,Xp,lbe,yko,xko,mz,$ko,kko,Sko,zp,ibe,Rko,Pko,cz,Bko,Iko,Nko,Qp,dbe,qko,jko,fz,Dko,Gko,Oko,Wp,mbe,Vko,Xko,gz,zko,Qko,Wko,Up,cbe,Uko,Hko,hz,Jko,Yko,Zko,Hp,fbe,Kko,eSo,uz,oSo,rSo,tSo,Jp,gbe,aSo,nSo,pz,sSo,lSo,iSo,Yp,hbe,dSo,mSo,_z,cSo,fSo,gSo,Zp,ube,hSo,uSo,bz,pSo,_So,bSo,Kp,pbe,vSo,FSo,vz,TSo,MSo,ESo,e_,_be,CSo,wSo,Fz,ASo,LSo,ySo,o_,bbe,xSo,$So,Tz,kSo,SSo,RSo,r_,vbe,PSo,BSo,Mz,ISo,NSo,qSo,t_,Fbe,jSo,DSo,Ez,GSo,OSo,VSo,a_,Tbe,XSo,zSo,Cz,QSo,WSo,USo,n_,Mbe,HSo,JSo,wz,YSo,ZSo,KSo,s_,Ebe,eRo,oRo,Az,rRo,tRo,aRo,l_,Cbe,nRo,sRo,Lz,lRo,iRo,dRo,i_,wbe,mRo,cRo,yz,fRo,gRo,hRo,d_,Abe,uRo,pRo,xz,_Ro,bRo,vRo,m_,Lbe,FRo,TRo,$z,MRo,ERo,CRo,c_,ybe,wRo,ARo,kz,LRo,yRo,xRo,f_,xbe,$Ro,kRo,Sz,SRo,RRo,PRo,g_,$be,BRo,IRo,Rz,NRo,qRo,jRo,h_,kbe,DRo,GRo,Pz,ORo,VRo,XRo,u_,Sbe,zRo,QRo,Bz,WRo,URo,HRo,p_,Rbe,JRo,YRo,Iz,ZRo,KRo,ePo,__,Pbe,oPo,rPo,Nz,tPo,aPo,nPo,b_,Bbe,sPo,lPo,qz,iPo,dPo,mPo,v_,Ibe,cPo,fPo,jz,gPo,hPo,uPo,F_,Nbe,pPo,_Po,Dz,bPo,vPo,FPo,T_,qbe,TPo,MPo,Gz,EPo,CPo,wPo,M_,APo,E_,LPo,C_,zk,yPo,jbe,xPo,$io,jd,w_,Dbe,Qk,$Po,Gbe,kPo,kio,qo,Wk,SPo,Uk,RPo,Oz,PPo,BPo,IPo,Hk,NPo,Obe,qPo,jPo,DPo,oo,Jk,GPo,Vbe,OPo,VPo,fn,XPo,Xbe,zPo,QPo,zbe,WPo,UPo,Qbe,HPo,JPo,YPo,oe,A_,Wbe,ZPo,KPo,Vz,eBo,oBo,rBo,L_,Ube,tBo,aBo,Xz,nBo,sBo,lBo,y_,Hbe,iBo,dBo,zz,mBo,cBo,fBo,x_,Jbe,gBo,hBo,Qz,uBo,pBo,_Bo,$_,Ybe,bBo,vBo,Wz,FBo,TBo,MBo,k_,Zbe,EBo,CBo,Uz,wBo,ABo,LBo,S_,Kbe,yBo,xBo,Hz,$Bo,kBo,SBo,R_,eve,RBo,PBo,Jz,BBo,IBo,NBo,P_,ove,qBo,jBo,Yz,DBo,GBo,OBo,B_,rve,VBo,XBo,Zz,zBo,QBo,WBo,I_,tve,UBo,HBo,Kz,JBo,YBo,ZBo,N_,ave,KBo,eIo,eQ,oIo,rIo,tIo,q_,nve,aIo,nIo,oQ,sIo,lIo,iIo,j_,sve,dIo,mIo,rQ,cIo,fIo,gIo,D_,lve,hIo,uIo,tQ,pIo,_Io,bIo,G_,ive,vIo,FIo,aQ,TIo,MIo,EIo,O_,dve,CIo,wIo,nQ,AIo,LIo,yIo,V_,mve,xIo,$Io,sQ,kIo,SIo,RIo,X_,cve,PIo,BIo,lQ,IIo,NIo,qIo,z_,fve,jIo,DIo,iQ,GIo,OIo,VIo,Q_,gve,XIo,zIo,dQ,QIo,WIo,UIo,W_,hve,HIo,JIo,mQ,YIo,ZIo,KIo,U_,uve,eNo,oNo,cQ,rNo,tNo,aNo,H_,pve,nNo,sNo,fQ,lNo,iNo,dNo,J_,_ve,mNo,cNo,gQ,fNo,gNo,hNo,Y_,bve,uNo,pNo,hQ,_No,bNo,vNo,Z_,vve,FNo,TNo,uQ,MNo,ENo,CNo,K_,Fve,wNo,ANo,pQ,LNo,yNo,xNo,e1,Tve,$No,kNo,_Q,SNo,RNo,PNo,o1,Mve,BNo,INo,bQ,NNo,qNo,jNo,r1,DNo,t1,GNo,a1,Yk,ONo,Eve,VNo,Sio,Dd,n1,Cve,Zk,XNo,wve,zNo,Rio,jo,Kk,QNo,eS,WNo,vQ,UNo,HNo,JNo,oS,YNo,Ave,ZNo,KNo,eqo,ro,rS,oqo,Lve,rqo,tqo,Gd,aqo,yve,nqo,sqo,xve,lqo,iqo,dqo,ie,s1,$ve,mqo,cqo,FQ,fqo,gqo,hqo,l1,kve,uqo,pqo,TQ,_qo,bqo,vqo,i1,Sve,Fqo,Tqo,MQ,Mqo,Eqo,Cqo,d1,Rve,wqo,Aqo,EQ,Lqo,yqo,xqo,m1,Pve,$qo,kqo,CQ,Sqo,Rqo,Pqo,c1,Bve,Bqo,Iqo,wQ,Nqo,qqo,jqo,f1,Ive,Dqo,Gqo,AQ,Oqo,Vqo,Xqo,g1,Nve,zqo,Qqo,LQ,Wqo,Uqo,Hqo,h1,qve,Jqo,Yqo,yQ,Zqo,Kqo,ejo,u1,jve,ojo,rjo,xQ,tjo,ajo,njo,p1,Dve,sjo,ljo,$Q,ijo,djo,mjo,_1,Gve,cjo,fjo,kQ,gjo,hjo,ujo,b1,Ove,pjo,_jo,SQ,bjo,vjo,Fjo,v1,Vve,Tjo,Mjo,RQ,Ejo,Cjo,wjo,F1,Xve,Ajo,Ljo,PQ,yjo,xjo,$jo,T1,zve,kjo,Sjo,BQ,Rjo,Pjo,Bjo,M1,Qve,Ijo,Njo,IQ,qjo,jjo,Djo,E1,Wve,Gjo,Ojo,NQ,Vjo,Xjo,zjo,C1,Uve,Qjo,Wjo,qQ,Ujo,Hjo,Jjo,w1,Hve,Yjo,Zjo,jQ,Kjo,eDo,oDo,A1,Jve,rDo,tDo,DQ,aDo,nDo,sDo,L1,Yve,lDo,iDo,GQ,dDo,mDo,cDo,y1,Zve,fDo,gDo,OQ,hDo,uDo,pDo,x1,_Do,$1,bDo,k1,tS,vDo,Kve,FDo,Pio,Od,S1,eFe,aS,TDo,oFe,MDo,Bio,Do,nS,EDo,Vd,CDo,VQ,wDo,ADo,XQ,LDo,yDo,xDo,sS,$Do,rFe,kDo,SDo,RDo,At,lS,PDo,tFe,BDo,IDo,Xd,NDo,aFe,qDo,jDo,zQ,DDo,GDo,ODo,R1,VDo,to,iS,XDo,nFe,zDo,QDo,gn,WDo,sFe,UDo,HDo,lFe,JDo,YDo,iFe,ZDo,KDo,eGo,y,P1,dFe,oGo,rGo,QQ,tGo,aGo,nGo,B1,mFe,sGo,lGo,WQ,iGo,dGo,mGo,I1,cFe,cGo,fGo,UQ,gGo,hGo,uGo,N1,fFe,pGo,_Go,HQ,bGo,vGo,FGo,q1,gFe,TGo,MGo,JQ,EGo,CGo,wGo,j1,hFe,AGo,LGo,YQ,yGo,xGo,$Go,D1,uFe,kGo,SGo,ZQ,RGo,PGo,BGo,G1,pFe,IGo,NGo,KQ,qGo,jGo,DGo,O1,_Fe,GGo,OGo,eW,VGo,XGo,zGo,V1,bFe,QGo,WGo,oW,UGo,HGo,JGo,X1,vFe,YGo,ZGo,rW,KGo,eOo,oOo,z1,FFe,rOo,tOo,tW,aOo,nOo,sOo,Q1,TFe,lOo,iOo,aW,dOo,mOo,cOo,W1,MFe,fOo,gOo,nW,hOo,uOo,pOo,U1,EFe,_Oo,bOo,sW,vOo,FOo,TOo,H1,CFe,MOo,EOo,lW,COo,wOo,AOo,J1,wFe,LOo,yOo,iW,xOo,$Oo,kOo,Y1,AFe,SOo,ROo,dW,POo,BOo,IOo,Z1,LFe,NOo,qOo,mW,jOo,DOo,GOo,K1,yFe,OOo,VOo,cW,XOo,zOo,QOo,e2,xFe,WOo,UOo,fW,HOo,JOo,YOo,o2,$Fe,ZOo,KOo,gW,eVo,oVo,rVo,r2,kFe,tVo,aVo,hW,nVo,sVo,lVo,t2,SFe,iVo,dVo,uW,mVo,cVo,fVo,a2,RFe,gVo,hVo,pW,uVo,pVo,_Vo,n2,PFe,bVo,vVo,_W,FVo,TVo,MVo,s2,BFe,EVo,CVo,bW,wVo,AVo,LVo,l2,IFe,yVo,xVo,vW,$Vo,kVo,SVo,i2,NFe,RVo,PVo,FW,BVo,IVo,NVo,d2,qFe,qVo,jVo,TW,DVo,GVo,OVo,m2,jFe,VVo,XVo,MW,zVo,QVo,WVo,c2,DFe,UVo,HVo,EW,JVo,YVo,ZVo,f2,GFe,KVo,eXo,CW,oXo,rXo,tXo,g2,OFe,aXo,nXo,wW,sXo,lXo,iXo,h2,VFe,dXo,mXo,AW,cXo,fXo,gXo,u2,XFe,hXo,uXo,LW,pXo,_Xo,bXo,p2,zFe,vXo,FXo,yW,TXo,MXo,EXo,_2,QFe,CXo,wXo,xW,AXo,LXo,yXo,b2,WFe,xXo,$Xo,$W,kXo,SXo,RXo,v2,UFe,PXo,BXo,kW,IXo,NXo,qXo,ql,HFe,jXo,DXo,SW,GXo,OXo,RW,VXo,XXo,zXo,F2,JFe,QXo,WXo,PW,UXo,HXo,JXo,T2,YFe,YXo,ZXo,BW,KXo,ezo,ozo,M2,ZFe,rzo,tzo,IW,azo,nzo,szo,E2,KFe,lzo,izo,NW,dzo,mzo,czo,C2,eTe,fzo,gzo,qW,hzo,uzo,pzo,w2,oTe,_zo,bzo,jW,vzo,Fzo,Tzo,A2,rTe,Mzo,Ezo,DW,Czo,wzo,Azo,L2,tTe,Lzo,yzo,GW,xzo,$zo,kzo,y2,aTe,Szo,Rzo,OW,Pzo,Bzo,Izo,x2,nTe,Nzo,qzo,VW,jzo,Dzo,Gzo,$2,sTe,Ozo,Vzo,XW,Xzo,zzo,Qzo,k2,lTe,Wzo,Uzo,zW,Hzo,Jzo,Yzo,S2,iTe,Zzo,Kzo,QW,eQo,oQo,rQo,R2,dTe,tQo,aQo,WW,nQo,sQo,lQo,P2,mTe,iQo,dQo,UW,mQo,cQo,fQo,B2,cTe,gQo,hQo,HW,uQo,pQo,_Qo,I2,fTe,bQo,vQo,JW,FQo,TQo,MQo,N2,gTe,EQo,CQo,YW,wQo,AQo,LQo,q2,hTe,yQo,xQo,ZW,$Qo,kQo,SQo,j2,uTe,RQo,PQo,KW,BQo,IQo,NQo,D2,pTe,qQo,jQo,eU,DQo,GQo,OQo,G2,_Te,VQo,XQo,oU,zQo,QQo,WQo,O2,bTe,UQo,HQo,rU,JQo,YQo,ZQo,V2,vTe,KQo,eWo,tU,oWo,rWo,tWo,X2,FTe,aWo,nWo,aU,sWo,lWo,iWo,z2,TTe,dWo,mWo,nU,cWo,fWo,gWo,Q2,MTe,hWo,uWo,sU,pWo,_Wo,bWo,W2,ETe,vWo,FWo,lU,TWo,MWo,EWo,U2,CTe,CWo,wWo,iU,AWo,LWo,yWo,H2,wTe,xWo,$Wo,dU,kWo,SWo,RWo,J2,ATe,PWo,BWo,mU,IWo,NWo,qWo,Y2,LTe,jWo,DWo,cU,GWo,OWo,VWo,Z2,yTe,XWo,zWo,fU,QWo,WWo,UWo,K2,xTe,HWo,JWo,gU,YWo,ZWo,KWo,eb,$Te,eUo,oUo,hU,rUo,tUo,aUo,ob,kTe,nUo,sUo,uU,lUo,iUo,dUo,rb,STe,mUo,cUo,pU,fUo,gUo,hUo,tb,RTe,uUo,pUo,_U,_Uo,bUo,vUo,ab,PTe,FUo,TUo,bU,MUo,EUo,CUo,nb,BTe,wUo,AUo,vU,LUo,yUo,xUo,sb,ITe,$Uo,kUo,FU,SUo,RUo,PUo,lb,NTe,BUo,IUo,TU,NUo,qUo,jUo,ib,qTe,DUo,GUo,MU,OUo,VUo,XUo,db,jTe,zUo,QUo,EU,WUo,UUo,HUo,mb,DTe,JUo,YUo,CU,ZUo,KUo,eHo,cb,GTe,oHo,rHo,wU,tHo,aHo,nHo,fb,OTe,sHo,lHo,AU,iHo,dHo,mHo,gb,VTe,cHo,fHo,LU,gHo,hHo,uHo,hb,XTe,pHo,_Ho,yU,bHo,vHo,FHo,ub,zTe,THo,MHo,xU,EHo,CHo,wHo,pb,QTe,AHo,LHo,$U,yHo,xHo,$Ho,_b,WTe,kHo,SHo,kU,RHo,PHo,BHo,bb,UTe,IHo,NHo,SU,qHo,jHo,DHo,vb,HTe,GHo,OHo,RU,VHo,XHo,zHo,Fb,JTe,QHo,WHo,PU,UHo,HHo,JHo,Tb,YTe,YHo,ZHo,BU,KHo,eJo,oJo,Mb,ZTe,rJo,tJo,IU,aJo,nJo,sJo,Eb,KTe,lJo,iJo,NU,dJo,mJo,cJo,Cb,eMe,fJo,gJo,qU,hJo,uJo,pJo,wb,oMe,_Jo,bJo,jU,vJo,FJo,TJo,Ab,rMe,MJo,EJo,DU,CJo,wJo,AJo,Lb,tMe,LJo,yJo,GU,xJo,$Jo,kJo,yb,aMe,SJo,RJo,OU,PJo,BJo,IJo,xb,nMe,NJo,qJo,VU,jJo,DJo,GJo,$b,sMe,OJo,VJo,XU,XJo,zJo,QJo,kb,lMe,WJo,UJo,zU,HJo,JJo,YJo,Sb,iMe,ZJo,KJo,QU,eYo,oYo,rYo,Rb,dMe,tYo,aYo,WU,nYo,sYo,lYo,Pb,mMe,iYo,dYo,UU,mYo,cYo,fYo,Bb,cMe,gYo,hYo,HU,uYo,pYo,_Yo,Ib,fMe,bYo,vYo,JU,FYo,TYo,MYo,Nb,gMe,EYo,CYo,YU,wYo,AYo,LYo,qb,hMe,yYo,xYo,ZU,$Yo,kYo,SYo,jb,uMe,RYo,PYo,KU,BYo,IYo,NYo,Db,pMe,qYo,jYo,eH,DYo,GYo,OYo,Gb,_Me,VYo,XYo,oH,zYo,QYo,WYo,Ob,bMe,UYo,HYo,rH,JYo,YYo,ZYo,Vb,vMe,KYo,eZo,tH,oZo,rZo,tZo,Xb,FMe,aZo,nZo,aH,sZo,lZo,iZo,zb,TMe,dZo,mZo,nH,cZo,fZo,gZo,Qb,MMe,hZo,uZo,sH,pZo,_Zo,bZo,Wb,EMe,vZo,FZo,lH,TZo,MZo,EZo,Ub,CMe,CZo,wZo,iH,AZo,LZo,yZo,Hb,wMe,xZo,$Zo,dH,kZo,SZo,RZo,Jb,AMe,PZo,BZo,mH,IZo,NZo,qZo,Yb,LMe,jZo,DZo,cH,GZo,OZo,VZo,Zb,yMe,XZo,zZo,fH,QZo,WZo,UZo,Kb,xMe,HZo,JZo,gH,YZo,ZZo,KZo,ev,$Me,eKo,oKo,hH,rKo,tKo,aKo,ov,kMe,nKo,sKo,uH,lKo,iKo,dKo,rv,SMe,mKo,cKo,pH,fKo,gKo,hKo,tv,RMe,uKo,pKo,_H,_Ko,bKo,vKo,av,PMe,FKo,TKo,bH,MKo,EKo,CKo,nv,wKo,BMe,AKo,LKo,IMe,yKo,xKo,sv,Iio,zd,lv,NMe,dS,$Ko,qMe,kKo,Nio,Go,mS,SKo,Qd,RKo,vH,PKo,BKo,FH,IKo,NKo,qKo,cS,jKo,jMe,DKo,GKo,OKo,Lt,fS,VKo,DMe,XKo,zKo,Wd,QKo,GMe,WKo,UKo,TH,HKo,JKo,YKo,iv,ZKo,ao,gS,KKo,OMe,eer,oer,hn,rer,VMe,ter,aer,XMe,ner,ser,zMe,ler,ier,der,G,dv,QMe,mer,cer,MH,fer,ger,her,mv,WMe,uer,per,EH,_er,ber,ver,cv,UMe,Fer,Ter,CH,Mer,Eer,Cer,fv,HMe,wer,Aer,wH,Ler,yer,xer,gv,JMe,$er,ker,AH,Ser,Rer,Per,hv,YMe,Ber,Ier,LH,Ner,qer,jer,uv,ZMe,Der,Ger,yH,Oer,Ver,Xer,pv,KMe,zer,Qer,xH,Wer,Uer,Her,_v,eEe,Jer,Yer,$H,Zer,Ker,eor,bv,oEe,oor,ror,kH,tor,aor,nor,vv,rEe,sor,lor,SH,ior,dor,mor,Fv,tEe,cor,gor,RH,hor,uor,por,Tv,aEe,_or,bor,PH,vor,For,Tor,Mv,nEe,Mor,Eor,BH,Cor,wor,Aor,Ev,sEe,Lor,yor,IH,xor,$or,kor,Cv,lEe,Sor,Ror,NH,Por,Bor,Ior,wv,iEe,Nor,qor,qH,jor,Dor,Gor,Av,dEe,Oor,Vor,jH,Xor,zor,Qor,Lv,mEe,Wor,Uor,DH,Hor,Jor,Yor,yv,cEe,Zor,Kor,GH,err,orr,rrr,xv,fEe,trr,arr,OH,nrr,srr,lrr,$v,gEe,irr,drr,VH,mrr,crr,frr,kv,hEe,grr,hrr,XH,urr,prr,_rr,Sv,uEe,brr,vrr,zH,Frr,Trr,Mrr,Rv,pEe,Err,Crr,QH,wrr,Arr,Lrr,Pv,_Ee,yrr,xrr,WH,$rr,krr,Srr,Bv,bEe,Rrr,Prr,UH,Brr,Irr,Nrr,Iv,vEe,qrr,jrr,HH,Drr,Grr,Orr,Nv,FEe,Vrr,Xrr,JH,zrr,Qrr,Wrr,qv,TEe,Urr,Hrr,YH,Jrr,Yrr,Zrr,jv,MEe,Krr,etr,ZH,otr,rtr,ttr,Dv,EEe,atr,ntr,KH,str,ltr,itr,Gv,CEe,dtr,mtr,eJ,ctr,ftr,gtr,Ov,wEe,htr,utr,oJ,ptr,_tr,btr,Vv,AEe,vtr,Ftr,rJ,Ttr,Mtr,Etr,Xv,LEe,Ctr,wtr,tJ,Atr,Ltr,ytr,zv,yEe,xtr,$tr,aJ,ktr,Str,Rtr,Qv,xEe,Ptr,Btr,nJ,Itr,Ntr,qtr,Wv,$Ee,jtr,Dtr,sJ,Gtr,Otr,Vtr,Uv,kEe,Xtr,ztr,lJ,Qtr,Wtr,Utr,Hv,SEe,Htr,Jtr,iJ,Ytr,Ztr,Ktr,Jv,REe,ear,oar,dJ,rar,tar,aar,Yv,PEe,nar,sar,mJ,lar,iar,dar,Zv,BEe,mar,car,cJ,far,gar,har,Kv,IEe,uar,par,fJ,_ar,bar,Far,eF,NEe,Tar,Mar,gJ,Ear,Car,war,oF,qEe,Aar,Lar,hJ,yar,xar,$ar,rF,jEe,kar,Sar,uJ,Rar,Par,Bar,tF,DEe,Iar,Nar,pJ,qar,jar,Dar,aF,GEe,Gar,Oar,_J,Var,Xar,zar,nF,Qar,OEe,War,Uar,VEe,Har,Jar,sF,qio,Ud,lF,XEe,hS,Yar,zEe,Zar,jio,Oo,uS,Kar,Hd,enr,bJ,onr,rnr,vJ,tnr,anr,nnr,pS,snr,QEe,lnr,inr,dnr,yt,_S,mnr,WEe,cnr,fnr,Jd,gnr,UEe,hnr,unr,FJ,pnr,_nr,bnr,iF,vnr,no,bS,Fnr,HEe,Tnr,Mnr,un,Enr,JEe,Cnr,wnr,YEe,Anr,Lnr,ZEe,ynr,xnr,$nr,W,dF,KEe,knr,Snr,TJ,Rnr,Pnr,Bnr,mF,e4e,Inr,Nnr,MJ,qnr,jnr,Dnr,cF,o4e,Gnr,Onr,EJ,Vnr,Xnr,znr,fF,r4e,Qnr,Wnr,CJ,Unr,Hnr,Jnr,gF,t4e,Ynr,Znr,wJ,Knr,esr,osr,hF,a4e,rsr,tsr,AJ,asr,nsr,ssr,uF,n4e,lsr,isr,LJ,dsr,msr,csr,pF,s4e,fsr,gsr,yJ,hsr,usr,psr,_F,l4e,_sr,bsr,xJ,vsr,Fsr,Tsr,bF,i4e,Msr,Esr,$J,Csr,wsr,Asr,vF,d4e,Lsr,ysr,kJ,xsr,$sr,ksr,FF,m4e,Ssr,Rsr,SJ,Psr,Bsr,Isr,TF,c4e,Nsr,qsr,RJ,jsr,Dsr,Gsr,MF,f4e,Osr,Vsr,PJ,Xsr,zsr,Qsr,EF,g4e,Wsr,Usr,BJ,Hsr,Jsr,Ysr,CF,h4e,Zsr,Ksr,IJ,elr,olr,rlr,wF,u4e,tlr,alr,NJ,nlr,slr,llr,AF,p4e,ilr,dlr,qJ,mlr,clr,flr,LF,_4e,glr,hlr,jJ,ulr,plr,_lr,yF,b4e,blr,vlr,DJ,Flr,Tlr,Mlr,xF,v4e,Elr,Clr,GJ,wlr,Alr,Llr,$F,F4e,ylr,xlr,OJ,$lr,klr,Slr,kF,T4e,Rlr,Plr,VJ,Blr,Ilr,Nlr,SF,M4e,qlr,jlr,XJ,Dlr,Glr,Olr,RF,E4e,Vlr,Xlr,zJ,zlr,Qlr,Wlr,PF,C4e,Ulr,Hlr,QJ,Jlr,Ylr,Zlr,BF,w4e,Klr,eir,WJ,oir,rir,tir,IF,A4e,air,nir,UJ,sir,lir,iir,NF,L4e,dir,mir,HJ,cir,fir,gir,qF,y4e,hir,uir,JJ,pir,_ir,bir,jF,x4e,vir,Fir,YJ,Tir,Mir,Eir,DF,$4e,Cir,wir,ZJ,Air,Lir,yir,GF,k4e,xir,$ir,KJ,kir,Sir,Rir,OF,S4e,Pir,Bir,eY,Iir,Nir,qir,VF,R4e,jir,Dir,oY,Gir,Oir,Vir,XF,P4e,Xir,zir,rY,Qir,Wir,Uir,zF,B4e,Hir,Jir,tY,Yir,Zir,Kir,QF,I4e,edr,odr,aY,rdr,tdr,adr,WF,N4e,ndr,sdr,nY,ldr,idr,ddr,UF,q4e,mdr,cdr,sY,fdr,gdr,hdr,HF,j4e,udr,pdr,lY,_dr,bdr,vdr,JF,D4e,Fdr,Tdr,iY,Mdr,Edr,Cdr,YF,G4e,wdr,Adr,dY,Ldr,ydr,xdr,ZF,$dr,O4e,kdr,Sdr,V4e,Rdr,Pdr,KF,Dio,Yd,eT,X4e,vS,Bdr,z4e,Idr,Gio,Vo,FS,Ndr,Zd,qdr,mY,jdr,Ddr,cY,Gdr,Odr,Vdr,TS,Xdr,Q4e,zdr,Qdr,Wdr,xt,MS,Udr,W4e,Hdr,Jdr,Kd,Ydr,U4e,Zdr,Kdr,fY,emr,omr,rmr,oT,tmr,so,ES,amr,H4e,nmr,smr,pn,lmr,J4e,imr,dmr,Y4e,mmr,cmr,Z4e,fmr,gmr,hmr,CS,rT,K4e,umr,pmr,gY,_mr,bmr,vmr,tT,eCe,Fmr,Tmr,hY,Mmr,Emr,Cmr,aT,wmr,oCe,Amr,Lmr,rCe,ymr,xmr,nT,Oio,em,sT,tCe,wS,$mr,aCe,kmr,Vio,Xo,AS,Smr,om,Rmr,uY,Pmr,Bmr,pY,Imr,Nmr,qmr,LS,jmr,nCe,Dmr,Gmr,Omr,$t,yS,Vmr,sCe,Xmr,zmr,rm,Qmr,lCe,Wmr,Umr,_Y,Hmr,Jmr,Ymr,lT,Zmr,lo,xS,Kmr,iCe,ecr,ocr,_n,rcr,dCe,tcr,acr,mCe,ncr,scr,cCe,lcr,icr,dcr,Y,iT,fCe,mcr,ccr,bY,fcr,gcr,hcr,dT,gCe,ucr,pcr,vY,_cr,bcr,vcr,mT,hCe,Fcr,Tcr,FY,Mcr,Ecr,Ccr,cT,uCe,wcr,Acr,TY,Lcr,ycr,xcr,fT,pCe,$cr,kcr,MY,Scr,Rcr,Pcr,gT,_Ce,Bcr,Icr,EY,Ncr,qcr,jcr,hT,bCe,Dcr,Gcr,CY,Ocr,Vcr,Xcr,uT,vCe,zcr,Qcr,wY,Wcr,Ucr,Hcr,pT,FCe,Jcr,Ycr,AY,Zcr,Kcr,efr,_T,TCe,ofr,rfr,LY,tfr,afr,nfr,bT,MCe,sfr,lfr,yY,ifr,dfr,mfr,vT,ECe,cfr,ffr,xY,gfr,hfr,ufr,FT,CCe,pfr,_fr,$Y,bfr,vfr,Ffr,TT,wCe,Tfr,Mfr,kY,Efr,Cfr,wfr,MT,ACe,Afr,Lfr,SY,yfr,xfr,$fr,ET,LCe,kfr,Sfr,RY,Rfr,Pfr,Bfr,CT,yCe,Ifr,Nfr,PY,qfr,jfr,Dfr,wT,xCe,Gfr,Ofr,BY,Vfr,Xfr,zfr,AT,$Ce,Qfr,Wfr,IY,Ufr,Hfr,Jfr,LT,kCe,Yfr,Zfr,NY,Kfr,egr,ogr,yT,SCe,rgr,tgr,qY,agr,ngr,sgr,xT,RCe,lgr,igr,jY,dgr,mgr,cgr,$T,PCe,fgr,ggr,DY,hgr,ugr,pgr,kT,BCe,_gr,bgr,GY,vgr,Fgr,Tgr,ST,ICe,Mgr,Egr,OY,Cgr,wgr,Agr,RT,NCe,Lgr,ygr,VY,xgr,$gr,kgr,PT,qCe,Sgr,Rgr,XY,Pgr,Bgr,Igr,BT,jCe,Ngr,qgr,zY,jgr,Dgr,Ggr,IT,DCe,Ogr,Vgr,QY,Xgr,zgr,Qgr,NT,GCe,Wgr,Ugr,WY,Hgr,Jgr,Ygr,qT,OCe,Zgr,Kgr,UY,ehr,ohr,rhr,jT,VCe,thr,ahr,HY,nhr,shr,lhr,DT,XCe,ihr,dhr,JY,mhr,chr,fhr,GT,zCe,ghr,hhr,YY,uhr,phr,_hr,OT,QCe,bhr,vhr,ZY,Fhr,Thr,Mhr,VT,WCe,Ehr,Chr,UCe,whr,Ahr,Lhr,XT,HCe,yhr,xhr,KY,$hr,khr,Shr,zT,JCe,Rhr,Phr,eZ,Bhr,Ihr,Nhr,QT,YCe,qhr,jhr,oZ,Dhr,Ghr,Ohr,WT,ZCe,Vhr,Xhr,rZ,zhr,Qhr,Whr,UT,Uhr,KCe,Hhr,Jhr,e3e,Yhr,Zhr,HT,Xio,tm,JT,o3e,$S,Khr,r3e,eur,zio,zo,kS,our,am,rur,tZ,tur,aur,aZ,nur,sur,lur,SS,iur,t3e,dur,mur,cur,kt,RS,fur,a3e,gur,hur,nm,uur,n3e,pur,_ur,nZ,bur,vur,Fur,YT,Tur,io,PS,Mur,s3e,Eur,Cur,bn,wur,l3e,Aur,Lur,i3e,yur,xur,d3e,$ur,kur,Sur,ge,ZT,m3e,Rur,Pur,sZ,Bur,Iur,Nur,KT,c3e,qur,jur,lZ,Dur,Gur,Our,eM,f3e,Vur,Xur,iZ,zur,Qur,Wur,oM,g3e,Uur,Hur,dZ,Jur,Yur,Zur,rM,h3e,Kur,epr,mZ,opr,rpr,tpr,tM,u3e,apr,npr,cZ,spr,lpr,ipr,aM,p3e,dpr,mpr,fZ,cpr,fpr,gpr,nM,_3e,hpr,upr,gZ,ppr,_pr,bpr,sM,b3e,vpr,Fpr,hZ,Tpr,Mpr,Epr,lM,v3e,Cpr,wpr,uZ,Apr,Lpr,ypr,iM,F3e,xpr,$pr,pZ,kpr,Spr,Rpr,dM,T3e,Ppr,Bpr,_Z,Ipr,Npr,qpr,mM,M3e,jpr,Dpr,bZ,Gpr,Opr,Vpr,cM,E3e,Xpr,zpr,vZ,Qpr,Wpr,Upr,fM,C3e,Hpr,Jpr,FZ,Ypr,Zpr,Kpr,gM,w3e,e_r,o_r,TZ,r_r,t_r,a_r,hM,A3e,n_r,s_r,MZ,l_r,i_r,d_r,uM,L3e,m_r,c_r,EZ,f_r,g_r,h_r,pM,y3e,u_r,p_r,CZ,__r,b_r,v_r,_M,x3e,F_r,T_r,wZ,M_r,E_r,C_r,bM,$3e,w_r,A_r,AZ,L_r,y_r,x_r,vM,$_r,k3e,k_r,S_r,S3e,R_r,P_r,FM,Qio,sm,TM,R3e,BS,B_r,P3e,I_r,Wio,Qo,IS,N_r,lm,q_r,LZ,j_r,D_r,yZ,G_r,O_r,V_r,NS,X_r,B3e,z_r,Q_r,W_r,St,qS,U_r,I3e,H_r,J_r,im,Y_r,N3e,Z_r,K_r,xZ,e1r,o1r,r1r,MM,t1r,mo,jS,a1r,q3e,n1r,s1r,vn,l1r,j3e,i1r,d1r,D3e,m1r,c1r,G3e,f1r,g1r,h1r,I,EM,O3e,u1r,p1r,$Z,_1r,b1r,v1r,CM,V3e,F1r,T1r,kZ,M1r,E1r,C1r,wM,X3e,w1r,A1r,SZ,L1r,y1r,x1r,AM,z3e,$1r,k1r,RZ,S1r,R1r,P1r,LM,Q3e,B1r,I1r,PZ,N1r,q1r,j1r,yM,W3e,D1r,G1r,BZ,O1r,V1r,X1r,xM,U3e,z1r,Q1r,IZ,W1r,U1r,H1r,$M,H3e,J1r,Y1r,NZ,Z1r,K1r,e2r,kM,J3e,o2r,r2r,qZ,t2r,a2r,n2r,SM,Y3e,s2r,l2r,jZ,i2r,d2r,m2r,RM,Z3e,c2r,f2r,DZ,g2r,h2r,u2r,PM,K3e,p2r,_2r,GZ,b2r,v2r,F2r,BM,e5e,T2r,M2r,OZ,E2r,C2r,w2r,IM,o5e,A2r,L2r,VZ,y2r,x2r,$2r,NM,r5e,k2r,S2r,XZ,R2r,P2r,B2r,qM,t5e,I2r,N2r,zZ,q2r,j2r,D2r,jM,a5e,G2r,O2r,QZ,V2r,X2r,z2r,DM,n5e,Q2r,W2r,WZ,U2r,H2r,J2r,GM,s5e,Y2r,Z2r,UZ,K2r,ebr,obr,OM,l5e,rbr,tbr,HZ,abr,nbr,sbr,VM,i5e,lbr,ibr,JZ,dbr,mbr,cbr,XM,d5e,fbr,gbr,YZ,hbr,ubr,pbr,zM,m5e,_br,bbr,ZZ,vbr,Fbr,Tbr,QM,c5e,Mbr,Ebr,KZ,Cbr,wbr,Abr,WM,f5e,Lbr,ybr,eK,xbr,$br,kbr,UM,g5e,Sbr,Rbr,oK,Pbr,Bbr,Ibr,HM,h5e,Nbr,qbr,rK,jbr,Dbr,Gbr,JM,u5e,Obr,Vbr,tK,Xbr,zbr,Qbr,YM,p5e,Wbr,Ubr,aK,Hbr,Jbr,Ybr,ZM,_5e,Zbr,Kbr,nK,evr,ovr,rvr,KM,b5e,tvr,avr,sK,nvr,svr,lvr,eE,v5e,ivr,dvr,lK,mvr,cvr,fvr,oE,F5e,gvr,hvr,iK,uvr,pvr,_vr,rE,T5e,bvr,vvr,dK,Fvr,Tvr,Mvr,tE,M5e,Evr,Cvr,mK,wvr,Avr,Lvr,aE,E5e,yvr,xvr,cK,$vr,kvr,Svr,nE,C5e,Rvr,Pvr,fK,Bvr,Ivr,Nvr,sE,w5e,qvr,jvr,gK,Dvr,Gvr,Ovr,lE,A5e,Vvr,Xvr,hK,zvr,Qvr,Wvr,iE,L5e,Uvr,Hvr,uK,Jvr,Yvr,Zvr,dE,y5e,Kvr,eFr,pK,oFr,rFr,tFr,mE,x5e,aFr,nFr,_K,sFr,lFr,iFr,cE,$5e,dFr,mFr,bK,cFr,fFr,gFr,fE,k5e,hFr,uFr,vK,pFr,_Fr,bFr,gE,S5e,vFr,FFr,FK,TFr,MFr,EFr,hE,R5e,CFr,wFr,TK,AFr,LFr,yFr,uE,P5e,xFr,$Fr,MK,kFr,SFr,RFr,pE,B5e,PFr,BFr,EK,IFr,NFr,qFr,_E,I5e,jFr,DFr,CK,GFr,OFr,VFr,bE,N5e,XFr,zFr,wK,QFr,WFr,UFr,vE,q5e,HFr,JFr,AK,YFr,ZFr,KFr,FE,j5e,eTr,oTr,LK,rTr,tTr,aTr,TE,D5e,nTr,sTr,yK,lTr,iTr,dTr,ME,G5e,mTr,cTr,xK,fTr,gTr,hTr,EE,O5e,uTr,pTr,$K,_Tr,bTr,vTr,CE,V5e,FTr,TTr,kK,MTr,ETr,CTr,wE,X5e,wTr,ATr,SK,LTr,yTr,xTr,AE,$Tr,z5e,kTr,STr,Q5e,RTr,PTr,LE,Uio,dm,yE,W5e,DS,BTr,U5e,ITr,Hio,Wo,GS,NTr,mm,qTr,RK,jTr,DTr,PK,GTr,OTr,VTr,OS,XTr,H5e,zTr,QTr,WTr,Rt,VS,UTr,J5e,HTr,JTr,cm,YTr,Y5e,ZTr,KTr,BK,eMr,oMr,rMr,xE,tMr,co,XS,aMr,Z5e,nMr,sMr,Fn,lMr,K5e,iMr,dMr,e0e,mMr,cMr,o0e,fMr,gMr,hMr,K,$E,r0e,uMr,pMr,IK,_Mr,bMr,vMr,kE,t0e,FMr,TMr,NK,MMr,EMr,CMr,SE,a0e,wMr,AMr,qK,LMr,yMr,xMr,RE,n0e,$Mr,kMr,jK,SMr,RMr,PMr,PE,s0e,BMr,IMr,DK,NMr,qMr,jMr,BE,l0e,DMr,GMr,GK,OMr,VMr,XMr,IE,i0e,zMr,QMr,OK,WMr,UMr,HMr,NE,d0e,JMr,YMr,VK,ZMr,KMr,eEr,qE,m0e,oEr,rEr,XK,tEr,aEr,nEr,jE,c0e,sEr,lEr,zK,iEr,dEr,mEr,DE,f0e,cEr,fEr,QK,gEr,hEr,uEr,GE,g0e,pEr,_Er,WK,bEr,vEr,FEr,OE,h0e,TEr,MEr,UK,EEr,CEr,wEr,VE,u0e,AEr,LEr,HK,yEr,xEr,$Er,XE,p0e,kEr,SEr,JK,REr,PEr,BEr,zE,_0e,IEr,NEr,YK,qEr,jEr,DEr,QE,b0e,GEr,OEr,ZK,VEr,XEr,zEr,WE,v0e,QEr,WEr,KK,UEr,HEr,JEr,UE,F0e,YEr,ZEr,eee,KEr,e4r,o4r,HE,T0e,r4r,t4r,oee,a4r,n4r,s4r,JE,M0e,l4r,i4r,ree,d4r,m4r,c4r,YE,E0e,f4r,g4r,tee,h4r,u4r,p4r,ZE,C0e,_4r,b4r,aee,v4r,F4r,T4r,KE,w0e,M4r,E4r,nee,C4r,w4r,A4r,e4,A0e,L4r,y4r,see,x4r,$4r,k4r,o4,L0e,S4r,R4r,lee,P4r,B4r,I4r,r4,y0e,N4r,q4r,iee,j4r,D4r,G4r,t4,x0e,O4r,V4r,dee,X4r,z4r,Q4r,a4,$0e,W4r,U4r,mee,H4r,J4r,Y4r,n4,k0e,Z4r,K4r,cee,eCr,oCr,rCr,s4,S0e,tCr,aCr,fee,nCr,sCr,lCr,l4,R0e,iCr,dCr,gee,mCr,cCr,fCr,i4,P0e,gCr,hCr,hee,uCr,pCr,_Cr,d4,bCr,B0e,vCr,FCr,I0e,TCr,MCr,m4,Jio,fm,c4,N0e,zS,ECr,q0e,CCr,Yio,Uo,QS,wCr,gm,ACr,uee,LCr,yCr,pee,xCr,$Cr,kCr,WS,SCr,j0e,RCr,PCr,BCr,Pt,US,ICr,D0e,NCr,qCr,hm,jCr,G0e,DCr,GCr,_ee,OCr,VCr,XCr,f4,zCr,fo,HS,QCr,O0e,WCr,UCr,Tn,HCr,V0e,JCr,YCr,X0e,ZCr,KCr,z0e,e3r,o3r,r3r,Ye,g4,Q0e,t3r,a3r,bee,n3r,s3r,l3r,h4,W0e,i3r,d3r,vee,m3r,c3r,f3r,u4,U0e,g3r,h3r,Fee,u3r,p3r,_3r,p4,H0e,b3r,v3r,Tee,F3r,T3r,M3r,_4,J0e,E3r,C3r,Mee,w3r,A3r,L3r,b4,Y0e,y3r,x3r,Eee,$3r,k3r,S3r,v4,Z0e,R3r,P3r,Cee,B3r,I3r,N3r,F4,q3r,K0e,j3r,D3r,ewe,G3r,O3r,T4,Zio,um,M4,owe,JS,V3r,rwe,X3r,Kio,Ho,YS,z3r,pm,Q3r,wee,W3r,U3r,Aee,H3r,J3r,Y3r,ZS,Z3r,twe,K3r,e5r,o5r,Bt,KS,r5r,awe,t5r,a5r,_m,n5r,nwe,s5r,l5r,Lee,i5r,d5r,m5r,E4,c5r,go,eR,f5r,swe,g5r,h5r,Mn,u5r,lwe,p5r,_5r,iwe,b5r,v5r,dwe,F5r,T5r,M5r,U,C4,mwe,E5r,C5r,yee,w5r,A5r,L5r,w4,cwe,y5r,x5r,xee,$5r,k5r,S5r,A4,fwe,R5r,P5r,$ee,B5r,I5r,N5r,L4,gwe,q5r,j5r,kee,D5r,G5r,O5r,y4,hwe,V5r,X5r,See,z5r,Q5r,W5r,x4,uwe,U5r,H5r,Ree,J5r,Y5r,Z5r,$4,pwe,K5r,e0r,Pee,o0r,r0r,t0r,k4,_we,a0r,n0r,Bee,s0r,l0r,i0r,S4,bwe,d0r,m0r,Iee,c0r,f0r,g0r,R4,vwe,h0r,u0r,Nee,p0r,_0r,b0r,P4,Fwe,v0r,F0r,qee,T0r,M0r,E0r,B4,Twe,C0r,w0r,jee,A0r,L0r,y0r,I4,Mwe,x0r,$0r,Dee,k0r,S0r,R0r,N4,Ewe,P0r,B0r,Gee,I0r,N0r,q0r,q4,Cwe,j0r,D0r,Oee,G0r,O0r,V0r,j4,wwe,X0r,z0r,Vee,Q0r,W0r,U0r,D4,Awe,H0r,J0r,Xee,Y0r,Z0r,K0r,G4,Lwe,ewr,owr,zee,rwr,twr,awr,O4,ywe,nwr,swr,Qee,lwr,iwr,dwr,V4,xwe,mwr,cwr,Wee,fwr,gwr,hwr,X4,$we,uwr,pwr,Uee,_wr,bwr,vwr,z4,kwe,Fwr,Twr,Hee,Mwr,Ewr,Cwr,Q4,Swe,wwr,Awr,Jee,Lwr,ywr,xwr,W4,Rwe,$wr,kwr,Yee,Swr,Rwr,Pwr,U4,Pwe,Bwr,Iwr,Zee,Nwr,qwr,jwr,H4,Bwe,Dwr,Gwr,Kee,Owr,Vwr,Xwr,J4,Iwe,zwr,Qwr,eoe,Wwr,Uwr,Hwr,Y4,Nwe,Jwr,Ywr,ooe,Zwr,Kwr,eAr,Z4,qwe,oAr,rAr,roe,tAr,aAr,nAr,K4,jwe,sAr,lAr,toe,iAr,dAr,mAr,eC,Dwe,cAr,fAr,aoe,gAr,hAr,uAr,oC,Gwe,pAr,_Ar,noe,bAr,vAr,FAr,rC,Owe,TAr,MAr,soe,EAr,CAr,wAr,tC,Vwe,AAr,LAr,loe,yAr,xAr,$Ar,aC,Xwe,kAr,SAr,ioe,RAr,PAr,BAr,nC,zwe,IAr,NAr,doe,qAr,jAr,DAr,sC,Qwe,GAr,OAr,moe,VAr,XAr,zAr,lC,Wwe,QAr,WAr,coe,UAr,HAr,JAr,iC,Uwe,YAr,ZAr,foe,KAr,e6r,o6r,dC,Hwe,r6r,t6r,goe,a6r,n6r,s6r,mC,Jwe,l6r,i6r,hoe,d6r,m6r,c6r,cC,Ywe,f6r,g6r,uoe,h6r,u6r,p6r,fC,_6r,Zwe,b6r,v6r,Kwe,F6r,T6r,gC,edo,bm,hC,eAe,oR,M6r,oAe,E6r,odo,Jo,rR,C6r,vm,w6r,poe,A6r,L6r,_oe,y6r,x6r,$6r,tR,k6r,rAe,S6r,R6r,P6r,It,aR,B6r,tAe,I6r,N6r,Fm,q6r,aAe,j6r,D6r,boe,G6r,O6r,V6r,uC,X6r,ho,nR,z6r,nAe,Q6r,W6r,En,U6r,sAe,H6r,J6r,lAe,Y6r,Z6r,iAe,K6r,e7r,o7r,O,pC,dAe,r7r,t7r,voe,a7r,n7r,s7r,_C,mAe,l7r,i7r,Foe,d7r,m7r,c7r,bC,cAe,f7r,g7r,Toe,h7r,u7r,p7r,vC,fAe,_7r,b7r,Moe,v7r,F7r,T7r,FC,gAe,M7r,E7r,Eoe,C7r,w7r,A7r,TC,hAe,L7r,y7r,Coe,x7r,$7r,k7r,MC,uAe,S7r,R7r,woe,P7r,B7r,I7r,EC,pAe,N7r,q7r,Aoe,j7r,D7r,G7r,CC,_Ae,O7r,V7r,Loe,X7r,z7r,Q7r,wC,bAe,W7r,U7r,yoe,H7r,J7r,Y7r,AC,vAe,Z7r,K7r,xoe,e8r,o8r,r8r,LC,FAe,t8r,a8r,$oe,n8r,s8r,l8r,yC,TAe,i8r,d8r,koe,m8r,c8r,f8r,xC,MAe,g8r,h8r,Soe,u8r,p8r,_8r,$C,EAe,b8r,v8r,Roe,F8r,T8r,M8r,kC,CAe,E8r,C8r,Poe,w8r,A8r,L8r,SC,wAe,y8r,x8r,Boe,$8r,k8r,S8r,RC,AAe,R8r,P8r,Ioe,B8r,I8r,N8r,PC,LAe,q8r,j8r,Noe,D8r,G8r,O8r,BC,yAe,V8r,X8r,qoe,z8r,Q8r,W8r,IC,xAe,U8r,H8r,joe,J8r,Y8r,Z8r,NC,$Ae,K8r,eLr,Doe,oLr,rLr,tLr,qC,kAe,aLr,nLr,Goe,sLr,lLr,iLr,jC,SAe,dLr,mLr,Ooe,cLr,fLr,gLr,DC,RAe,hLr,uLr,Voe,pLr,_Lr,bLr,GC,PAe,vLr,FLr,Xoe,TLr,MLr,ELr,OC,BAe,CLr,wLr,zoe,ALr,LLr,yLr,VC,IAe,xLr,$Lr,Qoe,kLr,SLr,RLr,XC,NAe,PLr,BLr,Woe,ILr,NLr,qLr,zC,qAe,jLr,DLr,Uoe,GLr,OLr,VLr,QC,jAe,XLr,zLr,Hoe,QLr,WLr,ULr,WC,DAe,HLr,JLr,Joe,YLr,ZLr,KLr,UC,GAe,eyr,oyr,Yoe,ryr,tyr,ayr,HC,OAe,nyr,syr,Zoe,lyr,iyr,dyr,JC,VAe,myr,cyr,Koe,fyr,gyr,hyr,YC,XAe,uyr,pyr,ere,_yr,byr,vyr,ZC,zAe,Fyr,Tyr,ore,Myr,Eyr,Cyr,KC,QAe,wyr,Ayr,rre,Lyr,yyr,xyr,e3,WAe,$yr,kyr,tre,Syr,Ryr,Pyr,o3,UAe,Byr,Iyr,are,Nyr,qyr,jyr,r3,HAe,Dyr,Gyr,nre,Oyr,Vyr,Xyr,t3,JAe,zyr,Qyr,sre,Wyr,Uyr,Hyr,a3,YAe,Jyr,Yyr,lre,Zyr,Kyr,e9r,n3,ZAe,o9r,r9r,ire,t9r,a9r,n9r,s3,KAe,s9r,l9r,dre,i9r,d9r,m9r,l3,e6e,c9r,f9r,mre,g9r,h9r,u9r,i3,o6e,p9r,_9r,cre,b9r,v9r,F9r,d3,r6e,T9r,M9r,fre,E9r,C9r,w9r,m3,t6e,A9r,L9r,gre,y9r,x9r,$9r,c3,k9r,a6e,S9r,R9r,n6e,P9r,B9r,f3,rdo,Tm,g3,s6e,sR,I9r,l6e,N9r,tdo,Yo,lR,q9r,Mm,j9r,hre,D9r,G9r,ure,O9r,V9r,X9r,iR,z9r,i6e,Q9r,W9r,U9r,Nt,dR,H9r,d6e,J9r,Y9r,Em,Z9r,m6e,K9r,exr,pre,oxr,rxr,txr,h3,axr,uo,mR,nxr,c6e,sxr,lxr,Cn,ixr,f6e,dxr,mxr,g6e,cxr,fxr,h6e,gxr,hxr,uxr,u6e,u3,p6e,pxr,_xr,_re,bxr,vxr,Fxr,p3,Txr,_6e,Mxr,Exr,b6e,Cxr,wxr,_3,ado,Cm,b3,v6e,cR,Axr,F6e,Lxr,ndo,Zo,fR,yxr,wm,xxr,bre,$xr,kxr,vre,Sxr,Rxr,Pxr,gR,Bxr,T6e,Ixr,Nxr,qxr,qt,hR,jxr,M6e,Dxr,Gxr,Am,Oxr,E6e,Vxr,Xxr,Fre,zxr,Qxr,Wxr,v3,Uxr,po,uR,Hxr,C6e,Jxr,Yxr,wn,Zxr,w6e,Kxr,e$r,A6e,o$r,r$r,L6e,t$r,a$r,n$r,Lm,F3,y6e,s$r,l$r,Tre,i$r,d$r,m$r,T3,x6e,c$r,f$r,Mre,g$r,h$r,u$r,M3,$6e,p$r,_$r,Ere,b$r,v$r,F$r,E3,T$r,k6e,M$r,E$r,S6e,C$r,w$r,C3,sdo,ym,w3,R6e,pR,A$r,P6e,L$r,ldo,Ko,_R,y$r,xm,x$r,Cre,$$r,k$r,wre,S$r,R$r,P$r,bR,B$r,B6e,I$r,N$r,q$r,jt,vR,j$r,I6e,D$r,G$r,$m,O$r,N6e,V$r,X$r,Are,z$r,Q$r,W$r,A3,U$r,_o,FR,H$r,q6e,J$r,Y$r,An,Z$r,j6e,K$r,ekr,D6e,okr,rkr,G6e,tkr,akr,nkr,Fe,L3,O6e,skr,lkr,Lre,ikr,dkr,mkr,y3,V6e,ckr,fkr,yre,gkr,hkr,ukr,x3,X6e,pkr,_kr,xre,bkr,vkr,Fkr,$3,z6e,Tkr,Mkr,$re,Ekr,Ckr,wkr,jl,Q6e,Akr,Lkr,kre,ykr,xkr,Sre,$kr,kkr,Skr,k3,W6e,Rkr,Pkr,Rre,Bkr,Ikr,Nkr,Dl,U6e,qkr,jkr,Pre,Dkr,Gkr,Bre,Okr,Vkr,Xkr,S3,H6e,zkr,Qkr,Ire,Wkr,Ukr,Hkr,R3,J6e,Jkr,Ykr,Nre,Zkr,Kkr,eSr,Dt,Y6e,oSr,rSr,qre,tSr,aSr,jre,nSr,sSr,Dre,lSr,iSr,dSr,P3,Z6e,mSr,cSr,Gre,fSr,gSr,hSr,B3,K6e,uSr,pSr,Ore,_Sr,bSr,vSr,I3,e7e,FSr,TSr,Vre,MSr,ESr,CSr,N3,o7e,wSr,ASr,Xre,LSr,ySr,xSr,q3,r7e,$Sr,kSr,zre,SSr,RSr,PSr,j3,t7e,BSr,ISr,Qre,NSr,qSr,jSr,D3,a7e,DSr,GSr,Wre,OSr,VSr,XSr,G3,n7e,zSr,QSr,Ure,WSr,USr,HSr,O3,s7e,JSr,YSr,Hre,ZSr,KSr,eRr,V3,oRr,l7e,rRr,tRr,i7e,aRr,nRr,X3,ido,km,z3,d7e,TR,sRr,m7e,lRr,ddo,er,MR,iRr,Sm,dRr,Jre,mRr,cRr,Yre,fRr,gRr,hRr,ER,uRr,c7e,pRr,_Rr,bRr,Gt,CR,vRr,f7e,FRr,TRr,Rm,MRr,g7e,ERr,CRr,Zre,wRr,ARr,LRr,Q3,yRr,bo,wR,xRr,h7e,$Rr,kRr,Ln,SRr,u7e,RRr,PRr,p7e,BRr,IRr,_7e,NRr,qRr,jRr,b7e,W3,v7e,DRr,GRr,Kre,ORr,VRr,XRr,U3,zRr,F7e,QRr,WRr,T7e,URr,HRr,H3,mdo,Pm,J3,M7e,AR,JRr,E7e,YRr,cdo,or,LR,ZRr,Bm,KRr,ete,ePr,oPr,ote,rPr,tPr,aPr,yR,nPr,C7e,sPr,lPr,iPr,Ot,xR,dPr,w7e,mPr,cPr,Im,fPr,A7e,gPr,hPr,rte,uPr,pPr,_Pr,Y3,bPr,vo,$R,vPr,L7e,FPr,TPr,yn,MPr,y7e,EPr,CPr,x7e,wPr,APr,$7e,LPr,yPr,xPr,k7e,Z3,S7e,$Pr,kPr,tte,SPr,RPr,PPr,K3,BPr,R7e,IPr,NPr,P7e,qPr,jPr,e5,fdo,Nm,o5,B7e,kR,DPr,I7e,GPr,gdo,rr,SR,OPr,qm,VPr,ate,XPr,zPr,nte,QPr,WPr,UPr,RR,HPr,N7e,JPr,YPr,ZPr,Vt,PR,KPr,q7e,eBr,oBr,jm,rBr,j7e,tBr,aBr,ste,nBr,sBr,lBr,r5,iBr,Fo,BR,dBr,D7e,mBr,cBr,xn,fBr,G7e,gBr,hBr,O7e,uBr,pBr,V7e,_Br,bBr,vBr,X7e,t5,z7e,FBr,TBr,lte,MBr,EBr,CBr,a5,wBr,Q7e,ABr,LBr,W7e,yBr,xBr,n5,hdo,Dm,s5,U7e,IR,$Br,H7e,kBr,udo,tr,NR,SBr,Gm,RBr,ite,PBr,BBr,dte,IBr,NBr,qBr,qR,jBr,J7e,DBr,GBr,OBr,Xt,jR,VBr,Y7e,XBr,zBr,Om,QBr,Z7e,WBr,UBr,mte,HBr,JBr,YBr,l5,ZBr,To,DR,KBr,K7e,eIr,oIr,$n,rIr,e8e,tIr,aIr,o8e,nIr,sIr,r8e,lIr,iIr,dIr,Ne,i5,t8e,mIr,cIr,cte,fIr,gIr,hIr,d5,a8e,uIr,pIr,fte,_Ir,bIr,vIr,m5,n8e,FIr,TIr,gte,MIr,EIr,CIr,c5,s8e,wIr,AIr,hte,LIr,yIr,xIr,f5,l8e,$Ir,kIr,ute,SIr,RIr,PIr,g5,i8e,BIr,IIr,pte,NIr,qIr,jIr,h5,d8e,DIr,GIr,_te,OIr,VIr,XIr,u5,m8e,zIr,QIr,bte,WIr,UIr,HIr,p5,c8e,JIr,YIr,vte,ZIr,KIr,eNr,_5,oNr,f8e,rNr,tNr,g8e,aNr,nNr,b5,pdo,Vm,v5,h8e,GR,sNr,u8e,lNr,_do,ar,OR,iNr,Xm,dNr,Fte,mNr,cNr,Tte,fNr,gNr,hNr,VR,uNr,p8e,pNr,_Nr,bNr,zt,XR,vNr,_8e,FNr,TNr,zm,MNr,b8e,ENr,CNr,Mte,wNr,ANr,LNr,F5,yNr,Mo,zR,xNr,v8e,$Nr,kNr,kn,SNr,F8e,RNr,PNr,T8e,BNr,INr,M8e,NNr,qNr,jNr,Ft,T5,E8e,DNr,GNr,Ete,ONr,VNr,XNr,M5,C8e,zNr,QNr,Cte,WNr,UNr,HNr,E5,w8e,JNr,YNr,wte,ZNr,KNr,eqr,C5,A8e,oqr,rqr,Ate,tqr,aqr,nqr,w5,L8e,sqr,lqr,Lte,iqr,dqr,mqr,A5,cqr,y8e,fqr,gqr,x8e,hqr,uqr,L5,bdo,Qm,y5,$8e,QR,pqr,k8e,_qr,vdo,nr,WR,bqr,Wm,vqr,yte,Fqr,Tqr,xte,Mqr,Eqr,Cqr,UR,wqr,S8e,Aqr,Lqr,yqr,Qt,HR,xqr,R8e,$qr,kqr,Um,Sqr,P8e,Rqr,Pqr,$te,Bqr,Iqr,Nqr,x5,qqr,Eo,JR,jqr,B8e,Dqr,Gqr,Sn,Oqr,I8e,Vqr,Xqr,N8e,zqr,Qqr,q8e,Wqr,Uqr,Hqr,xe,$5,j8e,Jqr,Yqr,kte,Zqr,Kqr,ejr,k5,D8e,ojr,rjr,Ste,tjr,ajr,njr,S5,G8e,sjr,ljr,Rte,ijr,djr,mjr,R5,O8e,cjr,fjr,Pte,gjr,hjr,ujr,P5,V8e,pjr,_jr,Bte,bjr,vjr,Fjr,B5,X8e,Tjr,Mjr,Ite,Ejr,Cjr,wjr,I5,z8e,Ajr,Ljr,Nte,yjr,xjr,$jr,N5,Q8e,kjr,Sjr,qte,Rjr,Pjr,Bjr,q5,W8e,Ijr,Njr,jte,qjr,jjr,Djr,j5,U8e,Gjr,Ojr,Dte,Vjr,Xjr,zjr,D5,Qjr,H8e,Wjr,Ujr,J8e,Hjr,Jjr,G5,Fdo,Hm,O5,Y8e,YR,Yjr,Z8e,Zjr,Tdo,sr,ZR,Kjr,Jm,eDr,Gte,oDr,rDr,Ote,tDr,aDr,nDr,KR,sDr,K8e,lDr,iDr,dDr,Wt,eP,mDr,eLe,cDr,fDr,Ym,gDr,oLe,hDr,uDr,Vte,pDr,_Dr,bDr,V5,vDr,Co,oP,FDr,rLe,TDr,MDr,Rn,EDr,tLe,CDr,wDr,aLe,ADr,LDr,nLe,yDr,xDr,$Dr,Zm,X5,sLe,kDr,SDr,Xte,RDr,PDr,BDr,z5,lLe,IDr,NDr,zte,qDr,jDr,DDr,Q5,iLe,GDr,ODr,Qte,VDr,XDr,zDr,W5,QDr,dLe,WDr,UDr,mLe,HDr,JDr,U5,Mdo,Km,H5,cLe,rP,YDr,fLe,ZDr,Edo,lr,tP,KDr,ec,eGr,Wte,oGr,rGr,Ute,tGr,aGr,nGr,aP,sGr,gLe,lGr,iGr,dGr,Ut,nP,mGr,hLe,cGr,fGr,oc,gGr,uLe,hGr,uGr,Hte,pGr,_Gr,bGr,J5,vGr,wo,sP,FGr,pLe,TGr,MGr,Pn,EGr,_Le,CGr,wGr,bLe,AGr,LGr,vLe,yGr,xGr,$Gr,Tt,Y5,FLe,kGr,SGr,Jte,RGr,PGr,BGr,Z5,TLe,IGr,NGr,Yte,qGr,jGr,DGr,K5,MLe,GGr,OGr,Zte,VGr,XGr,zGr,e0,ELe,QGr,WGr,Kte,UGr,HGr,JGr,o0,CLe,YGr,ZGr,eae,KGr,eOr,oOr,r0,rOr,wLe,tOr,aOr,ALe,nOr,sOr,t0,Cdo,rc,a0,LLe,lP,lOr,yLe,iOr,wdo,ir,iP,dOr,tc,mOr,oae,cOr,fOr,rae,gOr,hOr,uOr,dP,pOr,xLe,_Or,bOr,vOr,Ht,mP,FOr,$Le,TOr,MOr,ac,EOr,kLe,COr,wOr,tae,AOr,LOr,yOr,n0,xOr,Ao,cP,$Or,SLe,kOr,SOr,Bn,ROr,RLe,POr,BOr,PLe,IOr,NOr,BLe,qOr,jOr,DOr,In,s0,ILe,GOr,OOr,aae,VOr,XOr,zOr,l0,NLe,QOr,WOr,nae,UOr,HOr,JOr,i0,qLe,YOr,ZOr,sae,KOr,eVr,oVr,d0,jLe,rVr,tVr,lae,aVr,nVr,sVr,m0,lVr,DLe,iVr,dVr,GLe,mVr,cVr,c0,Ado,nc,f0,OLe,fP,fVr,VLe,gVr,Ldo,dr,gP,hVr,sc,uVr,iae,pVr,_Vr,dae,bVr,vVr,FVr,hP,TVr,XLe,MVr,EVr,CVr,Jt,uP,wVr,zLe,AVr,LVr,lc,yVr,QLe,xVr,$Vr,mae,kVr,SVr,RVr,g0,PVr,Lo,pP,BVr,WLe,IVr,NVr,Nn,qVr,ULe,jVr,DVr,HLe,GVr,OVr,JLe,VVr,XVr,zVr,Mt,h0,YLe,QVr,WVr,cae,UVr,HVr,JVr,u0,ZLe,YVr,ZVr,fae,KVr,eXr,oXr,p0,KLe,rXr,tXr,gae,aXr,nXr,sXr,_0,eye,lXr,iXr,hae,dXr,mXr,cXr,b0,oye,fXr,gXr,uae,hXr,uXr,pXr,v0,_Xr,rye,bXr,vXr,tye,FXr,TXr,F0,ydo,ic,T0,aye,_P,MXr,nye,EXr,xdo,mr,bP,CXr,dc,wXr,pae,AXr,LXr,_ae,yXr,xXr,$Xr,vP,kXr,sye,SXr,RXr,PXr,Yt,FP,BXr,lye,IXr,NXr,mc,qXr,iye,jXr,DXr,bae,GXr,OXr,VXr,M0,XXr,yo,TP,zXr,dye,QXr,WXr,qn,UXr,mye,HXr,JXr,cye,YXr,ZXr,fye,KXr,ezr,ozr,gye,E0,hye,rzr,tzr,vae,azr,nzr,szr,C0,lzr,uye,izr,dzr,pye,mzr,czr,w0,$do,cc,A0,_ye,MP,fzr,bye,gzr,kdo,cr,EP,hzr,fc,uzr,Fae,pzr,_zr,Tae,bzr,vzr,Fzr,CP,Tzr,vye,Mzr,Ezr,Czr,Zt,wP,wzr,Fye,Azr,Lzr,gc,yzr,Tye,xzr,$zr,Mae,kzr,Szr,Rzr,L0,Pzr,xo,AP,Bzr,Mye,Izr,Nzr,jn,qzr,Eye,jzr,Dzr,Cye,Gzr,Ozr,wye,Vzr,Xzr,zzr,fr,y0,Aye,Qzr,Wzr,Eae,Uzr,Hzr,Jzr,x0,Lye,Yzr,Zzr,Cae,Kzr,eQr,oQr,$0,yye,rQr,tQr,wae,aQr,nQr,sQr,k0,xye,lQr,iQr,Aae,dQr,mQr,cQr,S0,$ye,fQr,gQr,Lae,hQr,uQr,pQr,R0,kye,_Qr,bQr,yae,vQr,FQr,TQr,P0,MQr,Sye,EQr,CQr,Rye,wQr,AQr,B0,Sdo,hc,I0,Pye,LP,LQr,Bye,yQr,Rdo,gr,yP,xQr,uc,$Qr,xae,kQr,SQr,$ae,RQr,PQr,BQr,xP,IQr,Iye,NQr,qQr,jQr,Kt,$P,DQr,Nye,GQr,OQr,pc,VQr,qye,XQr,zQr,kae,QQr,WQr,UQr,N0,HQr,$o,kP,JQr,jye,YQr,ZQr,Dn,KQr,Dye,eWr,oWr,Gye,rWr,tWr,Oye,aWr,nWr,sWr,Vye,q0,Xye,lWr,iWr,Sae,dWr,mWr,cWr,j0,fWr,zye,gWr,hWr,Qye,uWr,pWr,D0,Pdo,_c,G0,Wye,SP,_Wr,Uye,bWr,Bdo,hr,RP,vWr,bc,FWr,Rae,TWr,MWr,Pae,EWr,CWr,wWr,PP,AWr,Hye,LWr,yWr,xWr,ea,BP,$Wr,Jye,kWr,SWr,vc,RWr,Yye,PWr,BWr,Bae,IWr,NWr,qWr,O0,jWr,ko,IP,DWr,Zye,GWr,OWr,Gn,VWr,Kye,XWr,zWr,e9e,QWr,WWr,o9e,UWr,HWr,JWr,r9e,V0,t9e,YWr,ZWr,Iae,KWr,eUr,oUr,X0,rUr,a9e,tUr,aUr,n9e,nUr,sUr,z0,Ido,Fc,Q0,s9e,NP,lUr,l9e,iUr,Ndo,ur,qP,dUr,Tc,mUr,Nae,cUr,fUr,qae,gUr,hUr,uUr,jP,pUr,i9e,_Ur,bUr,vUr,oa,DP,FUr,d9e,TUr,MUr,Mc,EUr,m9e,CUr,wUr,jae,AUr,LUr,yUr,W0,xUr,zr,GP,$Ur,c9e,kUr,SUr,On,RUr,f9e,PUr,BUr,g9e,IUr,NUr,h9e,qUr,jUr,DUr,P,U0,u9e,GUr,OUr,Dae,VUr,XUr,zUr,H0,p9e,QUr,WUr,Gae,UUr,HUr,JUr,J0,_9e,YUr,ZUr,Oae,KUr,eHr,oHr,Y0,b9e,rHr,tHr,Vae,aHr,nHr,sHr,Z0,v9e,lHr,iHr,Xae,dHr,mHr,cHr,K0,F9e,fHr,gHr,zae,hHr,uHr,pHr,ew,T9e,_Hr,bHr,Qae,vHr,FHr,THr,ow,M9e,MHr,EHr,Wae,CHr,wHr,AHr,rw,E9e,LHr,yHr,Uae,xHr,$Hr,kHr,tw,C9e,SHr,RHr,Hae,PHr,BHr,IHr,aw,w9e,NHr,qHr,Jae,jHr,DHr,GHr,nw,A9e,OHr,VHr,Yae,XHr,zHr,QHr,sw,L9e,WHr,UHr,Zae,HHr,JHr,YHr,lw,y9e,ZHr,KHr,Kae,eJr,oJr,rJr,iw,x9e,tJr,aJr,ene,nJr,sJr,lJr,dw,$9e,iJr,dJr,one,mJr,cJr,fJr,mw,k9e,gJr,hJr,rne,uJr,pJr,_Jr,cw,S9e,bJr,vJr,tne,FJr,TJr,MJr,fw,R9e,EJr,CJr,ane,wJr,AJr,LJr,gw,P9e,yJr,xJr,nne,$Jr,kJr,SJr,Gl,B9e,RJr,PJr,sne,BJr,IJr,lne,NJr,qJr,jJr,hw,I9e,DJr,GJr,ine,OJr,VJr,XJr,uw,N9e,zJr,QJr,dne,WJr,UJr,HJr,pw,q9e,JJr,YJr,mne,ZJr,KJr,eYr,_w,j9e,oYr,rYr,cne,tYr,aYr,nYr,bw,D9e,sYr,lYr,fne,iYr,dYr,mYr,vw,G9e,cYr,fYr,gne,gYr,hYr,uYr,Fw,O9e,pYr,_Yr,hne,bYr,vYr,FYr,Tw,V9e,TYr,MYr,une,EYr,CYr,wYr,Mw,X9e,AYr,LYr,pne,yYr,xYr,$Yr,Ew,z9e,kYr,SYr,_ne,RYr,PYr,BYr,Cw,Q9e,IYr,NYr,bne,qYr,jYr,DYr,ww,W9e,GYr,OYr,vne,VYr,XYr,zYr,Aw,U9e,QYr,WYr,Fne,UYr,HYr,JYr,Lw,H9e,YYr,ZYr,Tne,KYr,eZr,oZr,yw,J9e,rZr,tZr,Mne,aZr,nZr,sZr,xw,Y9e,lZr,iZr,Ene,dZr,mZr,cZr,$w,Z9e,fZr,gZr,Cne,hZr,uZr,pZr,kw,K9e,_Zr,bZr,wne,vZr,FZr,TZr,Sw,exe,MZr,EZr,Ane,CZr,wZr,AZr,Rw,oxe,LZr,yZr,Lne,xZr,$Zr,kZr,Pw,rxe,SZr,RZr,yne,PZr,BZr,IZr,Bw,txe,NZr,qZr,xne,jZr,DZr,GZr,Iw,axe,OZr,VZr,$ne,XZr,zZr,QZr,Nw,nxe,WZr,UZr,kne,HZr,JZr,YZr,qw,sxe,ZZr,KZr,Sne,eKr,oKr,rKr,jw,lxe,tKr,aKr,Rne,nKr,sKr,lKr,Dw,ixe,iKr,dKr,Pne,mKr,cKr,fKr,Gw,dxe,gKr,hKr,Bne,uKr,pKr,_Kr,Ow,mxe,bKr,vKr,Ine,FKr,TKr,MKr,Vw,cxe,EKr,CKr,Nne,wKr,AKr,LKr,Xw,fxe,yKr,xKr,qne,$Kr,kKr,SKr,zw,gxe,RKr,PKr,jne,BKr,IKr,NKr,Qw,hxe,qKr,jKr,Dne,DKr,GKr,OKr,Ww,uxe,VKr,XKr,Gne,zKr,QKr,WKr,Uw,pxe,UKr,HKr,One,JKr,YKr,ZKr,Hw,_xe,KKr,eet,Vne,oet,ret,tet,Jw,bxe,aet,net,Xne,set,iet,det,Yw,qdo,Ec,Zw,vxe,OP,met,Fxe,cet,jdo,pr,VP,fet,Cc,get,zne,het,uet,Qne,pet,_et,bet,XP,vet,Txe,Fet,Tet,Met,ra,zP,Eet,Mxe,Cet,wet,wc,Aet,Exe,Let,yet,Wne,xet,$et,ket,Kw,Set,Qr,QP,Ret,Cxe,Pet,Bet,Vn,Iet,wxe,Net,qet,Axe,jet,Det,Lxe,Get,Oet,Vet,de,eA,yxe,Xet,zet,Une,Qet,Wet,Uet,oA,xxe,Het,Jet,Hne,Yet,Zet,Ket,rA,$xe,eot,oot,Jne,rot,tot,aot,tA,kxe,not,sot,Yne,lot,iot,dot,aA,Sxe,mot,cot,Zne,fot,got,hot,nA,Rxe,uot,pot,Kne,_ot,bot,vot,sA,Pxe,Fot,Tot,ese,Mot,Eot,Cot,lA,Bxe,wot,Aot,ose,Lot,yot,xot,iA,Ixe,$ot,kot,rse,Sot,Rot,Pot,dA,Nxe,Bot,Iot,tse,Not,qot,jot,mA,qxe,Dot,Got,ase,Oot,Vot,Xot,cA,jxe,zot,Qot,nse,Wot,Uot,Hot,fA,Dxe,Jot,Yot,sse,Zot,Kot,ert,gA,Gxe,ort,rrt,lse,trt,art,nrt,hA,Oxe,srt,lrt,ise,irt,drt,mrt,uA,Vxe,crt,frt,dse,grt,hrt,urt,pA,Xxe,prt,_rt,mse,brt,vrt,Frt,_A,zxe,Trt,Mrt,cse,Ert,Crt,wrt,bA,Qxe,Art,Lrt,fse,yrt,xrt,$rt,vA,Wxe,krt,Srt,gse,Rrt,Prt,Brt,FA,Uxe,Irt,Nrt,hse,qrt,jrt,Drt,TA,Hxe,Grt,Ort,use,Vrt,Xrt,zrt,MA,Jxe,Qrt,Wrt,pse,Urt,Hrt,Jrt,EA,Ddo,Ac,CA,Yxe,WP,Yrt,Zxe,Zrt,Gdo,_r,UP,Krt,Lc,ett,_se,ott,rtt,bse,ttt,att,ntt,HP,stt,Kxe,ltt,itt,dtt,ta,JP,mtt,e$e,ctt,ftt,yc,gtt,o$e,htt,utt,vse,ptt,_tt,btt,wA,vtt,Wr,YP,Ftt,r$e,Ttt,Mtt,Xn,Ett,t$e,Ctt,wtt,a$e,Att,Ltt,n$e,ytt,xtt,$tt,Ce,AA,s$e,ktt,Stt,Fse,Rtt,Ptt,Btt,LA,l$e,Itt,Ntt,Tse,qtt,jtt,Dtt,yA,i$e,Gtt,Ott,Mse,Vtt,Xtt,ztt,xA,d$e,Qtt,Wtt,Ese,Utt,Htt,Jtt,$A,m$e,Ytt,Ztt,Cse,Ktt,eat,oat,kA,c$e,rat,tat,wse,aat,nat,sat,SA,f$e,lat,iat,Ase,dat,mat,cat,RA,g$e,fat,gat,Lse,hat,uat,pat,PA,h$e,_at,bat,yse,vat,Fat,Tat,BA,u$e,Mat,Eat,xse,Cat,wat,Aat,IA,p$e,Lat,yat,$se,xat,$at,kat,NA,_$e,Sat,Rat,kse,Pat,Bat,Iat,qA,b$e,Nat,qat,Sse,jat,Dat,Gat,jA,v$e,Oat,Vat,Rse,Xat,zat,Qat,DA,Odo,xc,GA,F$e,ZP,Wat,T$e,Uat,Vdo,br,KP,Hat,$c,Jat,Pse,Yat,Zat,Bse,Kat,ent,ont,eB,rnt,M$e,tnt,ant,nnt,aa,oB,snt,E$e,lnt,int,kc,dnt,C$e,mnt,cnt,Ise,fnt,gnt,hnt,OA,unt,Ur,rB,pnt,w$e,_nt,bnt,zn,vnt,A$e,Fnt,Tnt,L$e,Mnt,Ent,y$e,Cnt,wnt,Ant,$e,VA,x$e,Lnt,ynt,Nse,xnt,$nt,knt,XA,$$e,Snt,Rnt,qse,Pnt,Bnt,Int,zA,k$e,Nnt,qnt,jse,jnt,Dnt,Gnt,Ol,S$e,Ont,Vnt,Dse,Xnt,znt,Gse,Qnt,Wnt,Unt,QA,R$e,Hnt,Jnt,Ose,Ynt,Znt,Knt,WA,P$e,est,ost,Vse,rst,tst,ast,UA,B$e,nst,sst,Xse,lst,ist,dst,HA,I$e,mst,cst,zse,fst,gst,hst,JA,N$e,ust,pst,Qse,_st,bst,vst,YA,q$e,Fst,Tst,Wse,Mst,Est,Cst,ZA,Xdo,Sc,KA,j$e,tB,wst,D$e,Ast,zdo,vr,aB,Lst,Rc,yst,Use,xst,$st,Hse,kst,Sst,Rst,nB,Pst,G$e,Bst,Ist,Nst,na,sB,qst,O$e,jst,Dst,Pc,Gst,V$e,Ost,Vst,Jse,Xst,zst,Qst,e6,Wst,Hr,lB,Ust,X$e,Hst,Jst,Qn,Yst,z$e,Zst,Kst,Q$e,elt,olt,W$e,rlt,tlt,alt,Bc,o6,U$e,nlt,slt,Yse,llt,ilt,dlt,r6,H$e,mlt,clt,Zse,flt,glt,hlt,t6,J$e,ult,plt,Kse,_lt,blt,vlt,a6,Qdo,Ic,n6,Y$e,iB,Flt,Z$e,Tlt,Wdo,Fr,dB,Mlt,Nc,Elt,ele,Clt,wlt,ole,Alt,Llt,ylt,mB,xlt,K$e,$lt,klt,Slt,sa,cB,Rlt,eke,Plt,Blt,qc,Ilt,oke,Nlt,qlt,rle,jlt,Dlt,Glt,s6,Olt,Jr,fB,Vlt,rke,Xlt,zlt,Wn,Qlt,tke,Wlt,Ult,ake,Hlt,Jlt,nke,Ylt,Zlt,Klt,he,l6,ske,eit,oit,tle,rit,tit,ait,i6,lke,nit,sit,ale,lit,iit,dit,d6,ike,mit,cit,nle,fit,git,hit,m6,dke,uit,pit,sle,_it,bit,vit,c6,mke,Fit,Tit,lle,Mit,Eit,Cit,f6,cke,wit,Ait,ile,Lit,yit,xit,g6,fke,$it,kit,dle,Sit,Rit,Pit,h6,gke,Bit,Iit,mle,Nit,qit,jit,u6,hke,Dit,Git,cle,Oit,Vit,Xit,p6,uke,zit,Qit,fle,Wit,Uit,Hit,_6,pke,Jit,Yit,gle,Zit,Kit,edt,b6,_ke,odt,rdt,hle,tdt,adt,ndt,v6,bke,sdt,ldt,ule,idt,ddt,mdt,F6,vke,cdt,fdt,ple,gdt,hdt,udt,T6,Fke,pdt,_dt,_le,bdt,vdt,Fdt,M6,Tke,Tdt,Mdt,ble,Edt,Cdt,wdt,E6,Mke,Adt,Ldt,vle,ydt,xdt,$dt,C6,Eke,kdt,Sdt,Fle,Rdt,Pdt,Bdt,w6,Cke,Idt,Ndt,Tle,qdt,jdt,Ddt,A6,wke,Gdt,Odt,Mle,Vdt,Xdt,zdt,L6,Ake,Qdt,Wdt,Ele,Udt,Hdt,Jdt,y6,Udo,jc,x6,Lke,gB,Ydt,yke,Zdt,Hdo,Tr,hB,Kdt,Dc,emt,Cle,omt,rmt,wle,tmt,amt,nmt,uB,smt,xke,lmt,imt,dmt,la,pB,mmt,$ke,cmt,fmt,Gc,gmt,kke,hmt,umt,Ale,pmt,_mt,bmt,$6,vmt,Yr,_B,Fmt,Ske,Tmt,Mmt,Un,Emt,Rke,Cmt,wmt,Pke,Amt,Lmt,Bke,ymt,xmt,$mt,ke,k6,Ike,kmt,Smt,Lle,Rmt,Pmt,Bmt,S6,Nke,Imt,Nmt,yle,qmt,jmt,Dmt,R6,qke,Gmt,Omt,xle,Vmt,Xmt,zmt,P6,jke,Qmt,Wmt,$le,Umt,Hmt,Jmt,B6,Dke,Ymt,Zmt,kle,Kmt,ect,oct,I6,Gke,rct,tct,Sle,act,nct,sct,N6,Oke,lct,ict,Rle,dct,mct,cct,q6,Vke,fct,gct,Ple,hct,uct,pct,j6,Xke,_ct,bct,Ble,vct,Fct,Tct,D6,zke,Mct,Ect,Ile,Cct,wct,Act,G6,Jdo,Oc,O6,Qke,bB,Lct,Wke,yct,Ydo,Mr,vB,xct,Vc,$ct,Nle,kct,Sct,qle,Rct,Pct,Bct,FB,Ict,Uke,Nct,qct,jct,ia,TB,Dct,Hke,Gct,Oct,Xc,Vct,Jke,Xct,zct,jle,Qct,Wct,Uct,V6,Hct,Zr,MB,Jct,Yke,Yct,Zct,Hn,Kct,Zke,eft,oft,Kke,rft,tft,eSe,aft,nft,sft,ae,X6,oSe,lft,ift,Dle,dft,mft,cft,z6,rSe,fft,gft,Gle,hft,uft,pft,Q6,tSe,_ft,bft,Ole,vft,Fft,Tft,W6,aSe,Mft,Eft,Vle,Cft,wft,Aft,U6,nSe,Lft,yft,Xle,xft,$ft,kft,H6,sSe,Sft,Rft,zle,Pft,Bft,Ift,J6,lSe,Nft,qft,Qle,jft,Dft,Gft,Y6,iSe,Oft,Vft,Wle,Xft,zft,Qft,Z6,dSe,Wft,Uft,Ule,Hft,Jft,Yft,K6,mSe,Zft,Kft,Hle,egt,ogt,rgt,e7,cSe,tgt,agt,Jle,ngt,sgt,lgt,o7,fSe,igt,dgt,Yle,mgt,cgt,fgt,r7,gSe,ggt,hgt,Zle,ugt,pgt,_gt,t7,hSe,bgt,vgt,Kle,Fgt,Tgt,Mgt,a7,uSe,Egt,Cgt,eie,wgt,Agt,Lgt,n7,pSe,ygt,xgt,oie,$gt,kgt,Sgt,s7,_Se,Rgt,Pgt,rie,Bgt,Igt,Ngt,l7,bSe,qgt,jgt,tie,Dgt,Ggt,Ogt,i7,vSe,Vgt,Xgt,aie,zgt,Qgt,Wgt,d7,FSe,Ugt,Hgt,nie,Jgt,Ygt,Zgt,m7,TSe,Kgt,eht,sie,oht,rht,tht,c7,MSe,aht,nht,lie,sht,lht,iht,f7,ESe,dht,mht,iie,cht,fht,ght,g7,CSe,hht,uht,die,pht,_ht,bht,h7,wSe,vht,Fht,mie,Tht,Mht,Eht,u7,ASe,Cht,wht,cie,Aht,Lht,yht,p7,LSe,xht,$ht,fie,kht,Sht,Rht,_7,ySe,Pht,Bht,gie,Iht,Nht,qht,b7,Zdo,zc,v7,xSe,EB,jht,$Se,Dht,Kdo,Er,CB,Ght,Qc,Oht,hie,Vht,Xht,uie,zht,Qht,Wht,wB,Uht,kSe,Hht,Jht,Yht,da,AB,Zht,SSe,Kht,eut,Wc,out,RSe,rut,tut,pie,aut,nut,sut,F7,lut,Kr,LB,iut,PSe,dut,mut,Jn,cut,BSe,fut,gut,ISe,hut,uut,NSe,put,_ut,but,Me,T7,qSe,vut,Fut,_ie,Tut,Mut,Eut,M7,jSe,Cut,wut,bie,Aut,Lut,yut,E7,DSe,xut,$ut,vie,kut,Sut,Rut,C7,GSe,Put,But,Fie,Iut,Nut,qut,w7,OSe,jut,Dut,Tie,Gut,Out,Vut,A7,VSe,Xut,zut,Mie,Qut,Wut,Uut,L7,XSe,Hut,Jut,Eie,Yut,Zut,Kut,y7,zSe,ept,opt,Cie,rpt,tpt,apt,x7,QSe,npt,spt,wie,lpt,ipt,dpt,$7,WSe,mpt,cpt,Aie,fpt,gpt,hpt,k7,USe,upt,ppt,Lie,_pt,bpt,vpt,S7,HSe,Fpt,Tpt,yie,Mpt,Ept,Cpt,R7,JSe,wpt,Apt,xie,Lpt,ypt,xpt,P7,YSe,$pt,kpt,$ie,Spt,Rpt,Ppt,B7,ZSe,Bpt,Ipt,kie,Npt,qpt,jpt,I7,KSe,Dpt,Gpt,Sie,Opt,Vpt,Xpt,N7,eRe,zpt,Qpt,Rie,Wpt,Upt,Hpt,q7,emo,Uc,j7,oRe,yB,Jpt,rRe,Ypt,omo,Cr,xB,Zpt,Hc,Kpt,Pie,e_t,o_t,Bie,r_t,t_t,a_t,$B,n_t,tRe,s_t,l_t,i_t,ma,kB,d_t,aRe,m_t,c_t,Jc,f_t,nRe,g_t,h_t,Iie,u_t,p_t,__t,D7,b_t,et,SB,v_t,sRe,F_t,T_t,Yn,M_t,lRe,E_t,C_t,iRe,w_t,A_t,dRe,L_t,y_t,x_t,RB,G7,mRe,$_t,k_t,Nie,S_t,R_t,P_t,O7,cRe,B_t,I_t,qie,N_t,q_t,j_t,V7,rmo,Yc,X7,fRe,PB,D_t,gRe,G_t,tmo,wr,BB,O_t,Zc,V_t,jie,X_t,z_t,Die,Q_t,W_t,U_t,IB,H_t,hRe,J_t,Y_t,Z_t,ca,NB,K_t,uRe,e1t,o1t,Kc,r1t,pRe,t1t,a1t,Gie,n1t,s1t,l1t,z7,i1t,ot,qB,d1t,_Re,m1t,c1t,Zn,f1t,bRe,g1t,h1t,vRe,u1t,p1t,FRe,_1t,b1t,v1t,TRe,Q7,MRe,F1t,T1t,Oie,M1t,E1t,C1t,W7,amo,ef,U7,ERe,jB,w1t,CRe,A1t,nmo,Ar,DB,L1t,of,y1t,Vie,x1t,$1t,Xie,k1t,S1t,R1t,GB,P1t,wRe,B1t,I1t,N1t,fa,OB,q1t,ARe,j1t,D1t,rf,G1t,LRe,O1t,V1t,zie,X1t,z1t,Q1t,H7,W1t,rt,VB,U1t,yRe,H1t,J1t,Kn,Y1t,xRe,Z1t,K1t,$Re,e2t,o2t,kRe,r2t,t2t,a2t,SRe,J7,RRe,n2t,s2t,Qie,l2t,i2t,d2t,Y7,smo,tf,Z7,PRe,XB,m2t,BRe,c2t,lmo,Lr,zB,f2t,af,g2t,Wie,h2t,u2t,Uie,p2t,_2t,b2t,QB,v2t,IRe,F2t,T2t,M2t,ga,WB,E2t,NRe,C2t,w2t,nf,A2t,qRe,L2t,y2t,Hie,x2t,$2t,k2t,K7,S2t,tt,UB,R2t,jRe,P2t,B2t,es,I2t,DRe,N2t,q2t,GRe,j2t,D2t,ORe,G2t,O2t,V2t,me,e8,VRe,X2t,z2t,Jie,Q2t,W2t,U2t,o8,XRe,H2t,J2t,Yie,Y2t,Z2t,K2t,r8,zRe,ebt,obt,Zie,rbt,tbt,abt,t8,QRe,nbt,sbt,Kie,lbt,ibt,dbt,a8,WRe,mbt,cbt,ede,fbt,gbt,hbt,n8,URe,ubt,pbt,ode,_bt,bbt,vbt,s8,HRe,Fbt,Tbt,rde,Mbt,Ebt,Cbt,l8,JRe,wbt,Abt,tde,Lbt,ybt,xbt,i8,YRe,$bt,kbt,ade,Sbt,Rbt,Pbt,d8,ZRe,Bbt,Ibt,nde,Nbt,qbt,jbt,m8,KRe,Dbt,Gbt,sde,Obt,Vbt,Xbt,c8,ePe,zbt,Qbt,lde,Wbt,Ubt,Hbt,f8,oPe,Jbt,Ybt,ide,Zbt,Kbt,evt,g8,rPe,ovt,rvt,dde,tvt,avt,nvt,h8,tPe,svt,lvt,mde,ivt,dvt,mvt,u8,aPe,cvt,fvt,cde,gvt,hvt,uvt,p8,nPe,pvt,_vt,fde,bvt,vvt,Fvt,_8,sPe,Tvt,Mvt,gde,Evt,Cvt,wvt,b8,lPe,Avt,Lvt,hde,yvt,xvt,$vt,v8,iPe,kvt,Svt,ude,Rvt,Pvt,Bvt,F8,dPe,Ivt,Nvt,pde,qvt,jvt,Dvt,T8,mPe,Gvt,Ovt,_de,Vvt,Xvt,zvt,M8,imo,sf,E8,cPe,HB,Qvt,fPe,Wvt,dmo,yr,JB,Uvt,lf,Hvt,bde,Jvt,Yvt,vde,Zvt,Kvt,eFt,YB,oFt,gPe,rFt,tFt,aFt,ha,ZB,nFt,hPe,sFt,lFt,df,iFt,uPe,dFt,mFt,Fde,cFt,fFt,gFt,C8,hFt,at,KB,uFt,pPe,pFt,_Ft,os,bFt,_Pe,vFt,FFt,bPe,TFt,MFt,vPe,EFt,CFt,wFt,ue,w8,FPe,AFt,LFt,Tde,yFt,xFt,$Ft,A8,TPe,kFt,SFt,Mde,RFt,PFt,BFt,L8,MPe,IFt,NFt,Ede,qFt,jFt,DFt,y8,EPe,GFt,OFt,Cde,VFt,XFt,zFt,x8,CPe,QFt,WFt,wde,UFt,HFt,JFt,$8,wPe,YFt,ZFt,Ade,KFt,eTt,oTt,k8,APe,rTt,tTt,Lde,aTt,nTt,sTt,S8,LPe,lTt,iTt,yde,dTt,mTt,cTt,R8,yPe,fTt,gTt,xde,hTt,uTt,pTt,P8,xPe,_Tt,bTt,$de,vTt,FTt,TTt,B8,$Pe,MTt,ETt,kde,CTt,wTt,ATt,I8,kPe,LTt,yTt,Sde,xTt,$Tt,kTt,N8,SPe,STt,RTt,Rde,PTt,BTt,ITt,q8,RPe,NTt,qTt,Pde,jTt,DTt,GTt,j8,PPe,OTt,VTt,Bde,XTt,zTt,QTt,D8,BPe,WTt,UTt,Ide,HTt,JTt,YTt,G8,IPe,ZTt,KTt,Nde,eMt,oMt,rMt,O8,NPe,tMt,aMt,qde,nMt,sMt,lMt,V8,qPe,iMt,dMt,jde,mMt,cMt,fMt,X8,jPe,gMt,hMt,Dde,uMt,pMt,_Mt,z8,DPe,bMt,vMt,Gde,FMt,TMt,MMt,Q8,mmo,mf,W8,GPe,eI,EMt,OPe,CMt,cmo,xr,oI,wMt,cf,AMt,Ode,LMt,yMt,Vde,xMt,$Mt,kMt,rI,SMt,VPe,RMt,PMt,BMt,ua,tI,IMt,XPe,NMt,qMt,ff,jMt,zPe,DMt,GMt,Xde,OMt,VMt,XMt,U8,zMt,nt,aI,QMt,QPe,WMt,UMt,rs,HMt,WPe,JMt,YMt,UPe,ZMt,KMt,HPe,eEt,oEt,rEt,JPe,H8,YPe,tEt,aEt,zde,nEt,sEt,lEt,J8,fmo,gf,Y8,ZPe,nI,iEt,KPe,dEt,gmo,$r,sI,mEt,hf,cEt,Qde,fEt,gEt,Wde,hEt,uEt,pEt,lI,_Et,eBe,bEt,vEt,FEt,pa,iI,TEt,oBe,MEt,EEt,uf,CEt,rBe,wEt,AEt,Ude,LEt,yEt,xEt,Z8,$Et,st,dI,kEt,tBe,SEt,REt,ts,PEt,aBe,BEt,IEt,nBe,NEt,qEt,sBe,jEt,DEt,GEt,mI,K8,lBe,OEt,VEt,Hde,XEt,zEt,QEt,eL,iBe,WEt,UEt,Jde,HEt,JEt,YEt,oL,hmo,pf,rL,dBe,cI,ZEt,mBe,KEt,umo,kr,fI,e4t,_f,o4t,Yde,r4t,t4t,Zde,a4t,n4t,s4t,gI,l4t,cBe,i4t,d4t,m4t,_a,hI,c4t,fBe,f4t,g4t,bf,h4t,gBe,u4t,p4t,Kde,_4t,b4t,v4t,tL,F4t,lt,uI,T4t,hBe,M4t,E4t,as,C4t,uBe,w4t,A4t,pBe,L4t,y4t,_Be,x4t,$4t,k4t,ne,aL,bBe,S4t,R4t,eme,P4t,B4t,I4t,nL,vBe,N4t,q4t,ome,j4t,D4t,G4t,sL,FBe,O4t,V4t,rme,X4t,z4t,Q4t,lL,TBe,W4t,U4t,tme,H4t,J4t,Y4t,iL,MBe,Z4t,K4t,ame,eCt,oCt,rCt,dL,EBe,tCt,aCt,nme,nCt,sCt,lCt,mL,CBe,iCt,dCt,sme,mCt,cCt,fCt,cL,wBe,gCt,hCt,lme,uCt,pCt,_Ct,fL,ABe,bCt,vCt,ime,FCt,TCt,MCt,gL,LBe,ECt,CCt,dme,wCt,ACt,LCt,hL,yBe,yCt,xCt,mme,$Ct,kCt,SCt,uL,xBe,RCt,PCt,cme,BCt,ICt,NCt,pL,$Be,qCt,jCt,fme,DCt,GCt,OCt,_L,kBe,VCt,XCt,gme,zCt,QCt,WCt,bL,SBe,UCt,HCt,hme,JCt,YCt,ZCt,vL,RBe,KCt,e3t,ume,o3t,r3t,t3t,FL,PBe,a3t,n3t,pme,s3t,l3t,i3t,TL,BBe,d3t,m3t,_me,c3t,f3t,g3t,ML,IBe,h3t,u3t,bme,p3t,_3t,b3t,EL,NBe,v3t,F3t,vme,T3t,M3t,E3t,CL,qBe,C3t,w3t,Fme,A3t,L3t,y3t,wL,jBe,x3t,$3t,Tme,k3t,S3t,R3t,AL,DBe,P3t,B3t,Mme,I3t,N3t,q3t,LL,GBe,j3t,D3t,Eme,G3t,O3t,V3t,yL,OBe,X3t,z3t,Cme,Q3t,W3t,U3t,xL,VBe,H3t,J3t,wme,Y3t,Z3t,K3t,$L,XBe,e5t,o5t,Ame,r5t,t5t,a5t,kL,pmo,vf,SL,zBe,pI,n5t,QBe,s5t,_mo,Sr,_I,l5t,Ff,i5t,Lme,d5t,m5t,yme,c5t,f5t,g5t,bI,h5t,WBe,u5t,p5t,_5t,ba,vI,b5t,UBe,v5t,F5t,Tf,T5t,HBe,M5t,E5t,xme,C5t,w5t,A5t,RL,L5t,it,FI,y5t,JBe,x5t,$5t,ns,k5t,YBe,S5t,R5t,ZBe,P5t,B5t,KBe,I5t,N5t,q5t,Se,PL,eIe,j5t,D5t,$me,G5t,O5t,V5t,BL,oIe,X5t,z5t,kme,Q5t,W5t,U5t,IL,rIe,H5t,J5t,Sme,Y5t,Z5t,K5t,NL,tIe,e0t,o0t,Rme,r0t,t0t,a0t,qL,aIe,n0t,s0t,Pme,l0t,i0t,d0t,jL,nIe,m0t,c0t,Bme,f0t,g0t,h0t,DL,sIe,u0t,p0t,Ime,_0t,b0t,v0t,GL,lIe,F0t,T0t,Nme,M0t,E0t,C0t,OL,iIe,w0t,A0t,qme,L0t,y0t,x0t,VL,dIe,$0t,k0t,jme,S0t,R0t,P0t,XL,bmo,Mf,zL,mIe,TI,B0t,cIe,I0t,vmo,Rr,MI,N0t,Ef,q0t,Dme,j0t,D0t,Gme,G0t,O0t,V0t,EI,X0t,fIe,z0t,Q0t,W0t,va,CI,U0t,gIe,H0t,J0t,Cf,Y0t,hIe,Z0t,K0t,Ome,ewt,owt,rwt,QL,twt,dt,wI,awt,uIe,nwt,swt,ss,lwt,pIe,iwt,dwt,_Ie,mwt,cwt,bIe,fwt,gwt,hwt,we,WL,vIe,uwt,pwt,Vme,_wt,bwt,vwt,UL,FIe,Fwt,Twt,Xme,Mwt,Ewt,Cwt,HL,TIe,wwt,Awt,zme,Lwt,ywt,xwt,JL,MIe,$wt,kwt,Qme,Swt,Rwt,Pwt,YL,EIe,Bwt,Iwt,Wme,Nwt,qwt,jwt,ZL,CIe,Dwt,Gwt,Ume,Owt,Vwt,Xwt,KL,wIe,zwt,Qwt,Hme,Wwt,Uwt,Hwt,ey,AIe,Jwt,Ywt,Jme,Zwt,Kwt,eAt,oy,LIe,oAt,rAt,Yme,tAt,aAt,nAt,ry,yIe,sAt,lAt,Zme,iAt,dAt,mAt,ty,xIe,cAt,fAt,Kme,gAt,hAt,uAt,ay,$Ie,pAt,_At,ece,bAt,vAt,FAt,ny,kIe,TAt,MAt,oce,EAt,CAt,wAt,sy,Fmo,wf,ly,SIe,AI,AAt,RIe,LAt,Tmo,Pr,LI,yAt,Af,xAt,rce,$At,kAt,tce,SAt,RAt,PAt,yI,BAt,PIe,IAt,NAt,qAt,Fa,xI,jAt,BIe,DAt,GAt,Lf,OAt,IIe,VAt,XAt,ace,zAt,QAt,WAt,iy,UAt,mt,$I,HAt,NIe,JAt,YAt,ls,ZAt,qIe,KAt,e6t,jIe,o6t,r6t,DIe,t6t,a6t,n6t,Re,dy,GIe,s6t,l6t,nce,i6t,d6t,m6t,my,OIe,c6t,f6t,sce,g6t,h6t,u6t,cy,VIe,p6t,_6t,lce,b6t,v6t,F6t,fy,XIe,T6t,M6t,ice,E6t,C6t,w6t,gy,zIe,A6t,L6t,dce,y6t,x6t,$6t,hy,QIe,k6t,S6t,mce,R6t,P6t,B6t,uy,WIe,I6t,N6t,cce,q6t,j6t,D6t,py,UIe,G6t,O6t,fce,V6t,X6t,z6t,_y,HIe,Q6t,W6t,gce,U6t,H6t,J6t,by,JIe,Y6t,Z6t,hce,K6t,e7t,o7t,vy,Mmo,yf,Fy,YIe,kI,r7t,ZIe,t7t,Emo,Br,SI,a7t,xf,n7t,uce,s7t,l7t,pce,i7t,d7t,m7t,RI,c7t,KIe,f7t,g7t,h7t,Ta,PI,u7t,eNe,p7t,_7t,$f,b7t,oNe,v7t,F7t,_ce,T7t,M7t,E7t,Ty,C7t,ct,BI,w7t,rNe,A7t,L7t,is,y7t,tNe,x7t,$7t,aNe,k7t,S7t,nNe,R7t,P7t,B7t,Pe,My,sNe,I7t,N7t,bce,q7t,j7t,D7t,Ey,lNe,G7t,O7t,vce,V7t,X7t,z7t,Cy,iNe,Q7t,W7t,Fce,U7t,H7t,J7t,wy,dNe,Y7t,Z7t,Tce,K7t,e8t,o8t,Ay,mNe,r8t,t8t,Mce,a8t,n8t,s8t,Ly,cNe,l8t,i8t,Ece,d8t,m8t,c8t,yy,fNe,f8t,g8t,Cce,h8t,u8t,p8t,xy,gNe,_8t,b8t,wce,v8t,F8t,T8t,$y,hNe,M8t,E8t,Ace,C8t,w8t,A8t,ky,uNe,L8t,y8t,Lce,x8t,$8t,k8t,Sy,Cmo,kf,Ry,pNe,II,S8t,_Ne,R8t,wmo,Ir,NI,P8t,Sf,B8t,yce,I8t,N8t,xce,q8t,j8t,D8t,qI,G8t,bNe,O8t,V8t,X8t,Ma,jI,z8t,vNe,Q8t,W8t,Rf,U8t,FNe,H8t,J8t,$ce,Y8t,Z8t,K8t,Py,eLt,ft,DI,oLt,TNe,rLt,tLt,ds,aLt,MNe,nLt,sLt,ENe,lLt,iLt,CNe,dLt,mLt,cLt,Be,By,wNe,fLt,gLt,kce,hLt,uLt,pLt,Iy,ANe,_Lt,bLt,Sce,vLt,FLt,TLt,Ny,LNe,MLt,ELt,Rce,CLt,wLt,ALt,qy,yNe,LLt,yLt,Pce,xLt,$Lt,kLt,jy,xNe,SLt,RLt,Bce,PLt,BLt,ILt,Dy,$Ne,NLt,qLt,Ice,jLt,DLt,GLt,Gy,kNe,OLt,VLt,Nce,XLt,zLt,QLt,Oy,SNe,WLt,ULt,qce,HLt,JLt,YLt,Vy,RNe,ZLt,KLt,jce,eyt,oyt,ryt,Xy,PNe,tyt,ayt,Dce,nyt,syt,lyt,zy,Amo,Pf,Qy,BNe,GI,iyt,INe,dyt,Lmo,Nr,OI,myt,Bf,cyt,Gce,fyt,gyt,Oce,hyt,uyt,pyt,VI,_yt,NNe,byt,vyt,Fyt,Ea,XI,Tyt,qNe,Myt,Eyt,If,Cyt,jNe,wyt,Ayt,Vce,Lyt,yyt,xyt,Wy,$yt,gt,zI,kyt,DNe,Syt,Ryt,ms,Pyt,GNe,Byt,Iyt,ONe,Nyt,qyt,VNe,jyt,Dyt,Gyt,Ie,Uy,XNe,Oyt,Vyt,Xce,Xyt,zyt,Qyt,Hy,zNe,Wyt,Uyt,zce,Hyt,Jyt,Yyt,Jy,QNe,Zyt,Kyt,Qce,e9t,o9t,r9t,Yy,WNe,t9t,a9t,Wce,n9t,s9t,l9t,Zy,UNe,i9t,d9t,Uce,m9t,c9t,f9t,Ky,HNe,g9t,h9t,Hce,u9t,p9t,_9t,e9,JNe,b9t,v9t,Jce,F9t,T9t,M9t,o9,YNe,E9t,C9t,Yce,w9t,A9t,L9t,r9,ZNe,y9t,x9t,Zce,$9t,k9t,S9t,t9,KNe,R9t,P9t,Kce,B9t,I9t,N9t,a9,ymo,Nf,n9,eqe,QI,q9t,oqe,j9t,xmo,qr,WI,D9t,qf,G9t,efe,O9t,V9t,ofe,X9t,z9t,Q9t,UI,W9t,rqe,U9t,H9t,J9t,Ca,HI,Y9t,tqe,Z9t,K9t,jf,ext,aqe,oxt,rxt,rfe,txt,axt,nxt,s9,sxt,ht,JI,lxt,nqe,ixt,dxt,cs,mxt,sqe,cxt,fxt,lqe,gxt,hxt,iqe,uxt,pxt,_xt,We,l9,dqe,bxt,vxt,tfe,Fxt,Txt,Mxt,i9,mqe,Ext,Cxt,afe,wxt,Axt,Lxt,d9,cqe,yxt,xxt,nfe,$xt,kxt,Sxt,m9,fqe,Rxt,Pxt,sfe,Bxt,Ixt,Nxt,c9,gqe,qxt,jxt,lfe,Dxt,Gxt,Oxt,f9,hqe,Vxt,Xxt,ife,zxt,Qxt,Wxt,g9,uqe,Uxt,Hxt,dfe,Jxt,Yxt,Zxt,h9,pqe,Kxt,e$t,mfe,o$t,r$t,t$t,u9,$mo,Df,p9,_qe,YI,a$t,bqe,n$t,kmo,jr,ZI,s$t,Gf,l$t,cfe,i$t,d$t,ffe,m$t,c$t,f$t,KI,g$t,vqe,h$t,u$t,p$t,wa,eN,_$t,Fqe,b$t,v$t,Of,F$t,Tqe,T$t,M$t,gfe,E$t,C$t,w$t,_9,A$t,ut,oN,L$t,Mqe,y$t,x$t,fs,$$t,Eqe,k$t,S$t,Cqe,R$t,P$t,wqe,B$t,I$t,N$t,Ue,b9,Aqe,q$t,j$t,hfe,D$t,G$t,O$t,v9,Lqe,V$t,X$t,ufe,z$t,Q$t,W$t,F9,yqe,U$t,H$t,pfe,J$t,Y$t,Z$t,T9,xqe,K$t,ekt,_fe,okt,rkt,tkt,M9,$qe,akt,nkt,bfe,skt,lkt,ikt,E9,kqe,dkt,mkt,vfe,ckt,fkt,gkt,C9,Sqe,hkt,ukt,Ffe,pkt,_kt,bkt,w9,Rqe,vkt,Fkt,Tfe,Tkt,Mkt,Ekt,A9,Smo,Vf,L9,Pqe,rN,Ckt,Bqe,wkt,Rmo,Dr,tN,Akt,Xf,Lkt,Mfe,ykt,xkt,Efe,$kt,kkt,Skt,aN,Rkt,Iqe,Pkt,Bkt,Ikt,Aa,nN,Nkt,Nqe,qkt,jkt,zf,Dkt,qqe,Gkt,Okt,Cfe,Vkt,Xkt,zkt,y9,Qkt,pt,sN,Wkt,jqe,Ukt,Hkt,gs,Jkt,Dqe,Ykt,Zkt,Gqe,Kkt,eSt,Oqe,oSt,rSt,tSt,Vqe,x9,Xqe,aSt,nSt,wfe,sSt,lSt,iSt,$9,Pmo,Qf,k9,zqe,lN,dSt,Qqe,mSt,Bmo,Gr,iN,cSt,Wf,fSt,Afe,gSt,hSt,Lfe,uSt,pSt,_St,dN,bSt,Wqe,vSt,FSt,TSt,La,mN,MSt,Uqe,ESt,CSt,Uf,wSt,Hqe,ASt,LSt,yfe,ySt,xSt,$St,S9,kSt,_t,cN,SSt,Jqe,RSt,PSt,hs,BSt,Yqe,ISt,NSt,Zqe,qSt,jSt,Kqe,DSt,GSt,OSt,fN,R9,eje,VSt,XSt,xfe,zSt,QSt,WSt,P9,oje,USt,HSt,$fe,JSt,YSt,ZSt,B9,Imo,Hf,I9,rje,gN,KSt,tje,eRt,Nmo,Or,hN,oRt,Jf,rRt,kfe,tRt,aRt,Sfe,nRt,sRt,lRt,uN,iRt,aje,dRt,mRt,cRt,ya,pN,fRt,nje,gRt,hRt,Yf,uRt,sje,pRt,_Rt,Rfe,bRt,vRt,FRt,N9,TRt,bt,_N,MRt,lje,ERt,CRt,us,wRt,ije,ARt,LRt,dje,yRt,xRt,mje,$Rt,kRt,SRt,cje,q9,fje,RRt,PRt,Pfe,BRt,IRt,NRt,j9,qmo;return m=new re({}),ln=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Ak=new re({}),Lk=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sg=new mgo({props:{warning:!0,$$slots:{default:[Oka]},$$scope:{ctx:$}}}),yk=new re({}),xk=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L680"}}),Sk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L703"}}),Du=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Vka]},$$scope:{ctx:$}}}),Rk=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L826"}}),Pk=new re({}),Bk=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L458"}}),qk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L472"}}),Lp=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Xka]},$$scope:{ctx:$}}}),jk=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L673"}}),Dk=new re({}),Gk=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L206"}}),Xk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L220"}}),M_=new mgo({props:{$$slots:{default:[zka]},$$scope:{ctx:$}}}),E_=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Qka]},$$scope:{ctx:$}}}),zk=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L347"}}),Qk=new re({}),Wk=new R({props:{name:"class transformers.AutoImageProcessor",anchor:"transformers.AutoImageProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/image_processing_auto.py#L190"}}),Jk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoImageProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoImageProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained image_processor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a image processor file saved using the
<a href="/docs/transformers/main/en/internal/image_processing_utils#transformers.ImageProcessingMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved image processor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoImageProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model image processor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoImageProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the image processor files and override the cached versions if
they exist.`,name:"force_download"},{anchor:"transformers.AutoImageProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoImageProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoImageProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoImageProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoImageProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final image processor object. If <code>True</code>, then this
functions returns a <code>Tuple(image_processor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not image processor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>image_processor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoImageProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoImageProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are image processor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> image processor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/image_processing_auto.py#L204"}}),r1=new mgo({props:{$$slots:{default:[Wka]},$$scope:{ctx:$}}}),t1=new N({props:{anchor:"transformers.AutoImageProcessor.from_pretrained.example",$$slots:{default:[Uka]},$$scope:{ctx:$}}}),Yk=new R({props:{name:"register",anchor:"transformers.AutoImageProcessor.register",parameters:[{name:"config_class",val:""},{name:"image_processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoImageProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoImageProcessor.register.image_processor_class",description:'<strong>image_processor_class</strong> (<a href="/docs/transformers/main/en/internal/image_processing_utils#transformers.ImageProcessingMixin">ImageProcessingMixin</a>) &#x2014; The image processor to register.',name:"image_processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/image_processing_auto.py#L349"}}),Zk=new re({}),Kk=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L98"}}),rS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L112"}}),x1=new mgo({props:{$$slots:{default:[Hka]},$$scope:{ctx:$}}}),$1=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Jka]},$$scope:{ctx:$}}}),tS=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L293"}}),aS=new re({}),nS=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L906"}}),lS=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clipseg#transformers.CLIPSegConfig">CLIPSegConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clipseg#transformers.CLIPSegModel">CLIPSegModel</a> (CLIPSeg model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel">ConditionalDetrModel</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel">ErnieModel</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmModel">EsmModel</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel">GPTNeoXJapaneseModel</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/jukebox#transformers.JukeboxConfig">JukeboxConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/jukebox#transformers.JukeboxModel">JukeboxModel</a> (Jukebox model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig">LiltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltModel">LiltModel</a> (LiLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMModel">MarkupLMModel</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config">MobileNetV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model">MobileNetV2Model</a> (MobileNetV2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertModel">RoCBertModel</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersConfig">SwitchTransformersConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersModel">SwitchTransformersModel</a> (SwitchTransformers model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/table-transformer#transformers.TableTransformerConfig">TableTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/table-transformer#transformers.TableTransformerModel">TableTransformerModel</a> (Table Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerConfig">TimeSeriesTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerModel">TimeSeriesTransformerModel</a> (Time Series Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel">ViTMSNModel</a> (ViTMSN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperModel">WhisperModel</a> (Whisper model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig">XCLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel">XCLIPModel</a> (X-CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R1=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Yka]},$$scope:{ctx:$}}}),iS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sv=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Zka]},$$scope:{ctx:$}}}),dS=new re({}),mS=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L913"}}),fS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining">ErnieForPreTraining</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForPreTraining">RoCBertForPreTraining</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersConfig">SwitchTransformersConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersForConditionalGeneration">SwitchTransformersForConditionalGeneration</a> (SwitchTransformers model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iv=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Kka]},$$scope:{ctx:$}}}),gS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eSa]},$$scope:{ctx:$}}}),hS=new re({}),uS=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L928"}}),_S=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM">ErnieForCausalLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM">GPTNeoXJapaneseForCausalLM</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForCausalLM">RoCBertForCausalLM</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[oSa]},$$scope:{ctx:$}}}),bS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rSa]},$$scope:{ctx:$}}}),vS=new re({}),FS=new R({props:{name:"class transformers.AutoModelForDepthEstimation",anchor:"transformers.AutoModelForDepthEstimation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1071"}}),MS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDepthEstimation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDepthEstimation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForDepthEstimation">DPTForDepthEstimation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNForDepthEstimation">GLPNForDepthEstimation</a> (GLPN model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new N({props:{anchor:"transformers.AutoModelForDepthEstimation.from_config.example",$$slots:{default:[tSa]},$$scope:{ctx:$}}}),ES=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDepthEstimation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new N({props:{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.example",$$slots:{default:[aSa]},$$scope:{ctx:$}}}),wS=new re({}),AS=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L935"}}),yS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM">ErnieForMaskedLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForMaskedLM">RoCBertForMaskedLM</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[nSa]},$$scope:{ctx:$}}}),xS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[sSa]},$$scope:{ctx:$}}}),$S=new re({}),kS=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L942"}}),RS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersConfig">SwitchTransformersConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersForConditionalGeneration">SwitchTransformersForConditionalGeneration</a> (SwitchTransformers model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[lSa]},$$scope:{ctx:$}}}),PS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[iSa]},$$scope:{ctx:$}}}),BS=new re({}),IS=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L951"}}),qS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification">ErnieForSequenceClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForSequenceClassification">EsmForSequenceClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig">LiltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltForSequenceClassification">LiltForSequenceClassification</a> (LiLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification">MarkupLMForSequenceClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForSequenceClassification">RoCBertForSequenceClassification</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[dSa]},$$scope:{ctx:$}}}),jS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[mSa]},$$scope:{ctx:$}}}),DS=new re({}),GS=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1007"}}),VS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice">ErnieForMultipleChoice</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForMultipleChoice">RoCBertForMultipleChoice</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[cSa]},$$scope:{ctx:$}}}),XS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m4=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[fSa]},$$scope:{ctx:$}}}),zS=new re({}),QS=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1014"}}),US=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction">ErnieForNextSentencePrediction</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f4=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[gSa]},$$scope:{ctx:$}}}),HS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T4=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[hSa]},$$scope:{ctx:$}}}),JS=new re({}),YS=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1000"}}),KS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification">ErnieForTokenClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForTokenClassification">EsmForTokenClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig">LiltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltForTokenClassification">LiltForTokenClassification</a> (LiLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification">MarkupLMForTokenClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForTokenClassification">RoCBertForTokenClassification</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E4=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[uSa]},$$scope:{ctx:$}}}),eR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[pSa]},$$scope:{ctx:$}}}),oR=new re({}),rR=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L960"}}),aR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForQuestionAnswering">BloomForQuestionAnswering</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering">ErnieForQuestionAnswering</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig">LiltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltForQuestionAnswering">LiltForQuestionAnswering</a> (LiLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering">MarkupLMForQuestionAnswering</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForQuestionAnswering">OPTForQuestionAnswering</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForQuestionAnswering">RoCBertForQuestionAnswering</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_Sa]},$$scope:{ctx:$}}}),nR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[bSa]},$$scope:{ctx:$}}}),sR=new re({}),lR=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L967"}}),dR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h3=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[vSa]},$$scope:{ctx:$}}}),mR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[FSa]},$$scope:{ctx:$}}}),cR=new re({}),fR=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L989"}}),hR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering">LayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new N({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[TSa]},$$scope:{ctx:$}}}),uR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new N({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[MSa]},$$scope:{ctx:$}}}),pR=new re({}),_R=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1023"}}),vR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config">MobileNetV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForImageClassification">MobileNetV2ForImageClassification</a> (MobileNetV2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification">ViTMSNForImageClassification</a> (ViTMSN model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[ESa]},$$scope:{ctx:$}}}),FR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[CSa]},$$scope:{ctx:$}}}),TR=new re({}),MR=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1078"}}),CR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new N({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[wSa]},$$scope:{ctx:$}}}),wR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new N({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[ASa]},$$scope:{ctx:$}}}),AR=new re({}),LR=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1085"}}),xR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[LSa]},$$scope:{ctx:$}}}),$R=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ySa]},$$scope:{ctx:$}}}),kR=new re({}),SR=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L978"}}),PR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[xSa]},$$scope:{ctx:$}}}),BR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[$Sa]},$$scope:{ctx:$}}}),IR=new re({}),NR=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1092"}}),jR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[kSa]},$$scope:{ctx:$}}}),DR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[SSa]},$$scope:{ctx:$}}}),GR=new re({}),OR=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1115"}}),XR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[RSa]},$$scope:{ctx:$}}}),zR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[PSa]},$$scope:{ctx:$}}}),QR=new re({}),WR=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1099"}}),HR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[BSa]},$$scope:{ctx:$}}}),JR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[ISa]},$$scope:{ctx:$}}}),YR=new re({}),ZR=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1106"}}),eP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperForConditionalGeneration">WhisperForConditionalGeneration</a> (Whisper model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[NSa]},$$scope:{ctx:$}}}),oP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qSa]},$$scope:{ctx:$}}}),rP=new re({}),tP=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1124"}}),nP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J5=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[jSa]},$$scope:{ctx:$}}}),sP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[DSa]},$$scope:{ctx:$}}}),lP=new re({}),iP=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1131"}}),mP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[GSa]},$$scope:{ctx:$}}}),cP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c0=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[OSa]},$$scope:{ctx:$}}}),fP=new re({}),gP=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1055"}}),uP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection">ConditionalDetrForObjectDetection</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection">DeformableDetrForObjectDetection</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/table-transformer#transformers.TableTransformerConfig">TableTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/table-transformer#transformers.TableTransformerForObjectDetection">TableTransformerForObjectDetection</a> (Table Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g0=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[VSa]},$$scope:{ctx:$}}}),pP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[XSa]},$$scope:{ctx:$}}}),_P=new re({}),bP=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1030"}}),FP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[zSa]},$$scope:{ctx:$}}}),TP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[QSa]},$$scope:{ctx:$}}}),MP=new re({}),EP=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1037"}}),wP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config">MobileNetV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForSemanticSegmentation">MobileNetV2ForSemanticSegmentation</a> (MobileNetV2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[WSa]},$$scope:{ctx:$}}}),AP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[USa]},$$scope:{ctx:$}}}),LP=new re({}),yP=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1046"}}),$P=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[HSa]},$$scope:{ctx:$}}}),kP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[JSa]},$$scope:{ctx:$}}}),SP=new re({}),RP=new R({props:{name:"class transformers.AutoModelForZeroShotObjectDetection",anchor:"transformers.AutoModelForZeroShotObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1062"}}),BP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection">OwlViTForObjectDetection</a> (OWL-ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O0=new N({props:{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config.example",$$slots:{default:[YSa]},$$scope:{ctx:$}}}),IP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new N({props:{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.example",$$slots:{default:[ZSa]},$$scope:{ctx:$}}}),NP=new re({}),qP=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),DP=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.TFCvtModel">TFCvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.TFEsmModel">TFEsmModel</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel">TFGroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperModel">TFWhisperModel</a> (Whisper model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W0=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[KSa]},$$scope:{ctx:$}}}),GP=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Yw=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[eRa]},$$scope:{ctx:$}}}),OP=new re({}),VP=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),zP=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Kw=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[oRa]},$$scope:{ctx:$}}}),QP=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EA=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[rRa]},$$scope:{ctx:$}}}),WP=new re({}),UP=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),JP=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wA=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[tRa]},$$scope:{ctx:$}}}),YP=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DA=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[aRa]},$$scope:{ctx:$}}}),ZP=new re({}),KP=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),oB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.TFCvtForImageClassification">TFCvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OA=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[nRa]},$$scope:{ctx:$}}}),rB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZA=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[sRa]},$$scope:{ctx:$}}}),tB=new re({}),aB=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),sB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e6=new N({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[lRa]},$$scope:{ctx:$}}}),lB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a6=new N({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[iRa]},$$scope:{ctx:$}}}),iB=new re({}),dB=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),cB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.TFEsmForMaskedLM">TFEsmForMaskedLM</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s6=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[dRa]},$$scope:{ctx:$}}}),fB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y6=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mRa]},$$scope:{ctx:$}}}),gB=new re({}),hB=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),pB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$6=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[cRa]},$$scope:{ctx:$}}}),_B=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G6=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[fRa]},$$scope:{ctx:$}}}),bB=new re({}),vB=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),TB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.TFEsmForSequenceClassification">TFEsmForSequenceClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V6=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[gRa]},$$scope:{ctx:$}}}),MB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b7=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[hRa]},$$scope:{ctx:$}}}),EB=new re({}),CB=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L570"}}),AB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[uRa]},$$scope:{ctx:$}}}),LB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q7=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pRa]},$$scope:{ctx:$}}}),yB=new re({}),xB=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L577"}}),kB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D7=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_Ra]},$$scope:{ctx:$}}}),SB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V7=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bRa]},$$scope:{ctx:$}}}),PB=new re({}),BB=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L550"}}),NB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z7=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[vRa]},$$scope:{ctx:$}}}),qB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W7=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[FRa]},$$scope:{ctx:$}}}),jB=new re({}),DB=new R({props:{name:"class transformers.TFAutoModelForDocumentQuestionAnswering",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),OB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering">TFLayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H7=new N({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[TRa]},$$scope:{ctx:$}}}),VB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new N({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[MRa]},$$scope:{ctx:$}}}),XB=new re({}),zB=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L561"}}),WB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.TFEsmForTokenClassification">TFEsmForTokenClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K7=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[ERa]},$$scope:{ctx:$}}}),UB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M8=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[CRa]},$$scope:{ctx:$}}}),HB=new re({}),JB=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L532"}}),ZB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C8=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[wRa]},$$scope:{ctx:$}}}),KB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q8=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ARa]},$$scope:{ctx:$}}}),eI=new re({}),oI=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),tI=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U8=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[LRa]},$$scope:{ctx:$}}}),aI=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J8=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[yRa]},$$scope:{ctx:$}}}),nI=new re({}),sI=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L586"}}),iI=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperForConditionalGeneration">TFWhisperForConditionalGeneration</a> (Whisper model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z8=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[xRa]},$$scope:{ctx:$}}}),dI=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oL=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[$Ra]},$$scope:{ctx:$}}}),cI=new re({}),fI=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),hI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tL=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[kRa]},$$scope:{ctx:$}}}),uI=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kL=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[SRa]},$$scope:{ctx:$}}}),pI=new re({}),_I=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),vI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RL=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[RRa]},$$scope:{ctx:$}}}),FI=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XL=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[PRa]},$$scope:{ctx:$}}}),TI=new re({}),MI=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),CI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QL=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[BRa]},$$scope:{ctx:$}}}),wI=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sy=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[IRa]},$$scope:{ctx:$}}}),AI=new re({}),LI=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),xI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iy=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[NRa]},$$scope:{ctx:$}}}),$I=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vy=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[qRa]},$$scope:{ctx:$}}}),kI=new re({}),SI=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),PI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ty=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[jRa]},$$scope:{ctx:$}}}),BI=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Sy=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[DRa]},$$scope:{ctx:$}}}),II=new re({}),NI=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),jI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Py=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[GRa]},$$scope:{ctx:$}}}),DI=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zy=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ORa]},$$scope:{ctx:$}}}),GI=new re({}),OI=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),XI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Wy=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[VRa]},$$scope:{ctx:$}}}),zI=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a9=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[XRa]},$$scope:{ctx:$}}}),QI=new re({}),WI=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),HI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s9=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[zRa]},$$scope:{ctx:$}}}),JI=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u9=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[QRa]},$$scope:{ctx:$}}}),YI=new re({}),ZI=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),eN=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_9=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[WRa]},$$scope:{ctx:$}}}),oN=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A9=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[URa]},$$scope:{ctx:$}}}),rN=new re({}),tN=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),nN=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y9=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[HRa]},$$scope:{ctx:$}}}),sN=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$9=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[JRa]},$$scope:{ctx:$}}}),lN=new re({}),iN=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),mN=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S9=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[YRa]},$$scope:{ctx:$}}}),cN=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B9=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZRa]},$$scope:{ctx:$}}}),gN=new re({}),hN=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),pN=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N9=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[KRa]},$$scope:{ctx:$}}}),_N=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j9=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ePa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(m.$$.fragment),h=l(),He=a("span"),Ld=o("Auto Classes"),og=l(),wt=a("p"),yd=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xd=a("code"),Mk=o("from_pretrained()"),rg=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Qe=l(),Ze=a("p"),$d=o("Instantiating one of "),_s=a("a"),Ek=o("AutoConfig"),bs=o(", "),vs=a("a"),Ck=o("AutoModel"),kd=o(`, and
`),Fs=a("a"),wk=o("AutoTokenizer"),Sd=o(" will directly create a class of the relevant architecture. For instance"),tg=l(),F(ln.$$.fragment),Ke=l(),ye=a("p"),Wq=o("will create a model that is an instance of "),Rd=a("a"),Uq=o("BertModel"),Hq=o("."),Po=l(),dn=a("p"),Jq=o("There is one class of "),ag=a("code"),Yq=o("AutoModel"),cgo=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vio=l(),Pd=a("h2"),ng=a("a"),Vhe=a("span"),F(Ak.$$.fragment),fgo=l(),Xhe=a("span"),ggo=o("Extending the Auto Classes"),Fio=l(),Ts=a("p"),hgo=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),zhe=a("code"),ugo=o("NewModel"),pgo=o(", make sure you have a "),Qhe=a("code"),_go=o("NewModelConfig"),bgo=o(` then you can add those to the auto
classes like this:`),Tio=l(),F(Lk.$$.fragment),Mio=l(),Zq=a("p"),vgo=o("You will then be able to use the auto classes like you would usually do!"),Eio=l(),F(sg.$$.fragment),Cio=l(),Bd=a("h2"),lg=a("a"),Whe=a("span"),F(yk.$$.fragment),Fgo=l(),Uhe=a("span"),Tgo=o("AutoConfig"),wio=l(),Bo=a("div"),F(xk.$$.fragment),Mgo=l(),$k=a("p"),Ego=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Kq=a("a"),Cgo=o("from_pretrained()"),wgo=o(" class method."),Ago=l(),kk=a("p"),Lgo=o("This class cannot be instantiated directly using "),Hhe=a("code"),ygo=o("__init__()"),xgo=o(" (throws an error)."),$go=l(),Vr=a("div"),F(Sk.$$.fragment),kgo=l(),Jhe=a("p"),Sgo=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Rgo=l(),Id=a("p"),Pgo=o("The configuration class to instantiate is selected based on the "),Yhe=a("code"),Bgo=o("model_type"),Igo=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zhe=a("code"),Ngo=o("pretrained_model_name_or_path"),qgo=o(":"),jgo=l(),A=a("ul"),ig=a("li"),Khe=a("strong"),Dgo=o("albert"),Ggo=o(" \u2014 "),ej=a("a"),Ogo=o("AlbertConfig"),Vgo=o(" (ALBERT model)"),Xgo=l(),dg=a("li"),eue=a("strong"),zgo=o("bart"),Qgo=o(" \u2014 "),oj=a("a"),Wgo=o("BartConfig"),Ugo=o(" (BART model)"),Hgo=l(),mg=a("li"),oue=a("strong"),Jgo=o("beit"),Ygo=o(" \u2014 "),rj=a("a"),Zgo=o("BeitConfig"),Kgo=o(" (BEiT model)"),eho=l(),cg=a("li"),rue=a("strong"),oho=o("bert"),rho=o(" \u2014 "),tj=a("a"),tho=o("BertConfig"),aho=o(" (BERT model)"),nho=l(),fg=a("li"),tue=a("strong"),sho=o("bert-generation"),lho=o(" \u2014 "),aj=a("a"),iho=o("BertGenerationConfig"),dho=o(" (Bert Generation model)"),mho=l(),gg=a("li"),aue=a("strong"),cho=o("big_bird"),fho=o(" \u2014 "),nj=a("a"),gho=o("BigBirdConfig"),hho=o(" (BigBird model)"),uho=l(),hg=a("li"),nue=a("strong"),pho=o("bigbird_pegasus"),_ho=o(" \u2014 "),sj=a("a"),bho=o("BigBirdPegasusConfig"),vho=o(" (BigBird-Pegasus model)"),Fho=l(),ug=a("li"),sue=a("strong"),Tho=o("blenderbot"),Mho=o(" \u2014 "),lj=a("a"),Eho=o("BlenderbotConfig"),Cho=o(" (Blenderbot model)"),who=l(),pg=a("li"),lue=a("strong"),Aho=o("blenderbot-small"),Lho=o(" \u2014 "),ij=a("a"),yho=o("BlenderbotSmallConfig"),xho=o(" (BlenderbotSmall model)"),$ho=l(),_g=a("li"),iue=a("strong"),kho=o("bloom"),Sho=o(" \u2014 "),dj=a("a"),Rho=o("BloomConfig"),Pho=o(" (BLOOM model)"),Bho=l(),bg=a("li"),due=a("strong"),Iho=o("camembert"),Nho=o(" \u2014 "),mj=a("a"),qho=o("CamembertConfig"),jho=o(" (CamemBERT model)"),Dho=l(),vg=a("li"),mue=a("strong"),Gho=o("canine"),Oho=o(" \u2014 "),cj=a("a"),Vho=o("CanineConfig"),Xho=o(" (CANINE model)"),zho=l(),Fg=a("li"),cue=a("strong"),Qho=o("clip"),Who=o(" \u2014 "),fj=a("a"),Uho=o("CLIPConfig"),Hho=o(" (CLIP model)"),Jho=l(),Tg=a("li"),fue=a("strong"),Yho=o("clipseg"),Zho=o(" \u2014 "),gj=a("a"),Kho=o("CLIPSegConfig"),euo=o(" (CLIPSeg model)"),ouo=l(),Mg=a("li"),gue=a("strong"),ruo=o("codegen"),tuo=o(" \u2014 "),hj=a("a"),auo=o("CodeGenConfig"),nuo=o(" (CodeGen model)"),suo=l(),Eg=a("li"),hue=a("strong"),luo=o("conditional_detr"),iuo=o(" \u2014 "),uj=a("a"),duo=o("ConditionalDetrConfig"),muo=o(" (Conditional DETR model)"),cuo=l(),Cg=a("li"),uue=a("strong"),fuo=o("convbert"),guo=o(" \u2014 "),pj=a("a"),huo=o("ConvBertConfig"),uuo=o(" (ConvBERT model)"),puo=l(),wg=a("li"),pue=a("strong"),_uo=o("convnext"),buo=o(" \u2014 "),_j=a("a"),vuo=o("ConvNextConfig"),Fuo=o(" (ConvNeXT model)"),Tuo=l(),Ag=a("li"),_ue=a("strong"),Muo=o("ctrl"),Euo=o(" \u2014 "),bj=a("a"),Cuo=o("CTRLConfig"),wuo=o(" (CTRL model)"),Auo=l(),Lg=a("li"),bue=a("strong"),Luo=o("cvt"),yuo=o(" \u2014 "),vj=a("a"),xuo=o("CvtConfig"),$uo=o(" (CvT model)"),kuo=l(),yg=a("li"),vue=a("strong"),Suo=o("data2vec-audio"),Ruo=o(" \u2014 "),Fj=a("a"),Puo=o("Data2VecAudioConfig"),Buo=o(" (Data2VecAudio model)"),Iuo=l(),xg=a("li"),Fue=a("strong"),Nuo=o("data2vec-text"),quo=o(" \u2014 "),Tj=a("a"),juo=o("Data2VecTextConfig"),Duo=o(" (Data2VecText model)"),Guo=l(),$g=a("li"),Tue=a("strong"),Ouo=o("data2vec-vision"),Vuo=o(" \u2014 "),Mj=a("a"),Xuo=o("Data2VecVisionConfig"),zuo=o(" (Data2VecVision model)"),Quo=l(),kg=a("li"),Mue=a("strong"),Wuo=o("deberta"),Uuo=o(" \u2014 "),Ej=a("a"),Huo=o("DebertaConfig"),Juo=o(" (DeBERTa model)"),Yuo=l(),Sg=a("li"),Eue=a("strong"),Zuo=o("deberta-v2"),Kuo=o(" \u2014 "),Cj=a("a"),epo=o("DebertaV2Config"),opo=o(" (DeBERTa-v2 model)"),rpo=l(),Rg=a("li"),Cue=a("strong"),tpo=o("decision_transformer"),apo=o(" \u2014 "),wj=a("a"),npo=o("DecisionTransformerConfig"),spo=o(" (Decision Transformer model)"),lpo=l(),Pg=a("li"),wue=a("strong"),ipo=o("deformable_detr"),dpo=o(" \u2014 "),Aj=a("a"),mpo=o("DeformableDetrConfig"),cpo=o(" (Deformable DETR model)"),fpo=l(),Bg=a("li"),Aue=a("strong"),gpo=o("deit"),hpo=o(" \u2014 "),Lj=a("a"),upo=o("DeiTConfig"),ppo=o(" (DeiT model)"),_po=l(),Ig=a("li"),Lue=a("strong"),bpo=o("detr"),vpo=o(" \u2014 "),yj=a("a"),Fpo=o("DetrConfig"),Tpo=o(" (DETR model)"),Mpo=l(),Ng=a("li"),yue=a("strong"),Epo=o("distilbert"),Cpo=o(" \u2014 "),xj=a("a"),wpo=o("DistilBertConfig"),Apo=o(" (DistilBERT model)"),Lpo=l(),qg=a("li"),xue=a("strong"),ypo=o("donut-swin"),xpo=o(" \u2014 "),$j=a("a"),$po=o("DonutSwinConfig"),kpo=o(" (DonutSwin model)"),Spo=l(),jg=a("li"),$ue=a("strong"),Rpo=o("dpr"),Ppo=o(" \u2014 "),kj=a("a"),Bpo=o("DPRConfig"),Ipo=o(" (DPR model)"),Npo=l(),Dg=a("li"),kue=a("strong"),qpo=o("dpt"),jpo=o(" \u2014 "),Sj=a("a"),Dpo=o("DPTConfig"),Gpo=o(" (DPT model)"),Opo=l(),Gg=a("li"),Sue=a("strong"),Vpo=o("electra"),Xpo=o(" \u2014 "),Rj=a("a"),zpo=o("ElectraConfig"),Qpo=o(" (ELECTRA model)"),Wpo=l(),Og=a("li"),Rue=a("strong"),Upo=o("encoder-decoder"),Hpo=o(" \u2014 "),Pj=a("a"),Jpo=o("EncoderDecoderConfig"),Ypo=o(" (Encoder decoder model)"),Zpo=l(),Vg=a("li"),Pue=a("strong"),Kpo=o("ernie"),e_o=o(" \u2014 "),Bj=a("a"),o_o=o("ErnieConfig"),r_o=o(" (ERNIE model)"),t_o=l(),Xg=a("li"),Bue=a("strong"),a_o=o("esm"),n_o=o(" \u2014 "),Ij=a("a"),s_o=o("EsmConfig"),l_o=o(" (ESM model)"),i_o=l(),zg=a("li"),Iue=a("strong"),d_o=o("flaubert"),m_o=o(" \u2014 "),Nj=a("a"),c_o=o("FlaubertConfig"),f_o=o(" (FlauBERT model)"),g_o=l(),Qg=a("li"),Nue=a("strong"),h_o=o("flava"),u_o=o(" \u2014 "),qj=a("a"),p_o=o("FlavaConfig"),__o=o(" (FLAVA model)"),b_o=l(),Wg=a("li"),que=a("strong"),v_o=o("fnet"),F_o=o(" \u2014 "),jj=a("a"),T_o=o("FNetConfig"),M_o=o(" (FNet model)"),E_o=l(),Ug=a("li"),jue=a("strong"),C_o=o("fsmt"),w_o=o(" \u2014 "),Dj=a("a"),A_o=o("FSMTConfig"),L_o=o(" (FairSeq Machine-Translation model)"),y_o=l(),Hg=a("li"),Due=a("strong"),x_o=o("funnel"),$_o=o(" \u2014 "),Gj=a("a"),k_o=o("FunnelConfig"),S_o=o(" (Funnel Transformer model)"),R_o=l(),Jg=a("li"),Gue=a("strong"),P_o=o("glpn"),B_o=o(" \u2014 "),Oj=a("a"),I_o=o("GLPNConfig"),N_o=o(" (GLPN model)"),q_o=l(),Yg=a("li"),Oue=a("strong"),j_o=o("gpt2"),D_o=o(" \u2014 "),Vj=a("a"),G_o=o("GPT2Config"),O_o=o(" (OpenAI GPT-2 model)"),V_o=l(),Zg=a("li"),Vue=a("strong"),X_o=o("gpt_neo"),z_o=o(" \u2014 "),Xj=a("a"),Q_o=o("GPTNeoConfig"),W_o=o(" (GPT Neo model)"),U_o=l(),Kg=a("li"),Xue=a("strong"),H_o=o("gpt_neox"),J_o=o(" \u2014 "),zj=a("a"),Y_o=o("GPTNeoXConfig"),Z_o=o(" (GPT NeoX model)"),K_o=l(),eh=a("li"),zue=a("strong"),e1o=o("gpt_neox_japanese"),o1o=o(" \u2014 "),Qj=a("a"),r1o=o("GPTNeoXJapaneseConfig"),t1o=o(" (GPT NeoX Japanese model)"),a1o=l(),oh=a("li"),Que=a("strong"),n1o=o("gptj"),s1o=o(" \u2014 "),Wj=a("a"),l1o=o("GPTJConfig"),i1o=o(" (GPT-J model)"),d1o=l(),rh=a("li"),Wue=a("strong"),m1o=o("groupvit"),c1o=o(" \u2014 "),Uj=a("a"),f1o=o("GroupViTConfig"),g1o=o(" (GroupViT model)"),h1o=l(),th=a("li"),Uue=a("strong"),u1o=o("hubert"),p1o=o(" \u2014 "),Hj=a("a"),_1o=o("HubertConfig"),b1o=o(" (Hubert model)"),v1o=l(),ah=a("li"),Hue=a("strong"),F1o=o("ibert"),T1o=o(" \u2014 "),Jj=a("a"),M1o=o("IBertConfig"),E1o=o(" (I-BERT model)"),C1o=l(),nh=a("li"),Jue=a("strong"),w1o=o("imagegpt"),A1o=o(" \u2014 "),Yj=a("a"),L1o=o("ImageGPTConfig"),y1o=o(" (ImageGPT model)"),x1o=l(),sh=a("li"),Yue=a("strong"),$1o=o("jukebox"),k1o=o(" \u2014 "),Zj=a("a"),S1o=o("JukeboxConfig"),R1o=o(" (Jukebox model)"),P1o=l(),lh=a("li"),Zue=a("strong"),B1o=o("layoutlm"),I1o=o(" \u2014 "),Kj=a("a"),N1o=o("LayoutLMConfig"),q1o=o(" (LayoutLM model)"),j1o=l(),ih=a("li"),Kue=a("strong"),D1o=o("layoutlmv2"),G1o=o(" \u2014 "),eD=a("a"),O1o=o("LayoutLMv2Config"),V1o=o(" (LayoutLMv2 model)"),X1o=l(),dh=a("li"),epe=a("strong"),z1o=o("layoutlmv3"),Q1o=o(" \u2014 "),oD=a("a"),W1o=o("LayoutLMv3Config"),U1o=o(" (LayoutLMv3 model)"),H1o=l(),mh=a("li"),ope=a("strong"),J1o=o("led"),Y1o=o(" \u2014 "),rD=a("a"),Z1o=o("LEDConfig"),K1o=o(" (LED model)"),e2o=l(),ch=a("li"),rpe=a("strong"),o2o=o("levit"),r2o=o(" \u2014 "),tD=a("a"),t2o=o("LevitConfig"),a2o=o(" (LeViT model)"),n2o=l(),fh=a("li"),tpe=a("strong"),s2o=o("lilt"),l2o=o(" \u2014 "),aD=a("a"),i2o=o("LiltConfig"),d2o=o(" (LiLT model)"),m2o=l(),gh=a("li"),ape=a("strong"),c2o=o("longformer"),f2o=o(" \u2014 "),nD=a("a"),g2o=o("LongformerConfig"),h2o=o(" (Longformer model)"),u2o=l(),hh=a("li"),npe=a("strong"),p2o=o("longt5"),_2o=o(" \u2014 "),sD=a("a"),b2o=o("LongT5Config"),v2o=o(" (LongT5 model)"),F2o=l(),uh=a("li"),spe=a("strong"),T2o=o("luke"),M2o=o(" \u2014 "),lD=a("a"),E2o=o("LukeConfig"),C2o=o(" (LUKE model)"),w2o=l(),ph=a("li"),lpe=a("strong"),A2o=o("lxmert"),L2o=o(" \u2014 "),iD=a("a"),y2o=o("LxmertConfig"),x2o=o(" (LXMERT model)"),$2o=l(),_h=a("li"),ipe=a("strong"),k2o=o("m2m_100"),S2o=o(" \u2014 "),dD=a("a"),R2o=o("M2M100Config"),P2o=o(" (M2M100 model)"),B2o=l(),bh=a("li"),dpe=a("strong"),I2o=o("marian"),N2o=o(" \u2014 "),mD=a("a"),q2o=o("MarianConfig"),j2o=o(" (Marian model)"),D2o=l(),vh=a("li"),mpe=a("strong"),G2o=o("markuplm"),O2o=o(" \u2014 "),cD=a("a"),V2o=o("MarkupLMConfig"),X2o=o(" (MarkupLM model)"),z2o=l(),Fh=a("li"),cpe=a("strong"),Q2o=o("maskformer"),W2o=o(" \u2014 "),fD=a("a"),U2o=o("MaskFormerConfig"),H2o=o(" (MaskFormer model)"),J2o=l(),Th=a("li"),fpe=a("strong"),Y2o=o("mbart"),Z2o=o(" \u2014 "),gD=a("a"),K2o=o("MBartConfig"),ebo=o(" (mBART model)"),obo=l(),Mh=a("li"),gpe=a("strong"),rbo=o("mctct"),tbo=o(" \u2014 "),hD=a("a"),abo=o("MCTCTConfig"),nbo=o(" (M-CTC-T model)"),sbo=l(),Eh=a("li"),hpe=a("strong"),lbo=o("megatron-bert"),ibo=o(" \u2014 "),uD=a("a"),dbo=o("MegatronBertConfig"),mbo=o(" (Megatron-BERT model)"),cbo=l(),Ch=a("li"),upe=a("strong"),fbo=o("mobilebert"),gbo=o(" \u2014 "),pD=a("a"),hbo=o("MobileBertConfig"),ubo=o(" (MobileBERT model)"),pbo=l(),wh=a("li"),ppe=a("strong"),_bo=o("mobilenet_v2"),bbo=o(" \u2014 "),_D=a("a"),vbo=o("MobileNetV2Config"),Fbo=o(" (MobileNetV2 model)"),Tbo=l(),Ah=a("li"),_pe=a("strong"),Mbo=o("mobilevit"),Ebo=o(" \u2014 "),bD=a("a"),Cbo=o("MobileViTConfig"),wbo=o(" (MobileViT model)"),Abo=l(),Lh=a("li"),bpe=a("strong"),Lbo=o("mpnet"),ybo=o(" \u2014 "),vD=a("a"),xbo=o("MPNetConfig"),$bo=o(" (MPNet model)"),kbo=l(),yh=a("li"),vpe=a("strong"),Sbo=o("mt5"),Rbo=o(" \u2014 "),FD=a("a"),Pbo=o("MT5Config"),Bbo=o(" (MT5 model)"),Ibo=l(),xh=a("li"),Fpe=a("strong"),Nbo=o("mvp"),qbo=o(" \u2014 "),TD=a("a"),jbo=o("MvpConfig"),Dbo=o(" (MVP model)"),Gbo=l(),$h=a("li"),Tpe=a("strong"),Obo=o("nezha"),Vbo=o(" \u2014 "),MD=a("a"),Xbo=o("NezhaConfig"),zbo=o(" (Nezha model)"),Qbo=l(),kh=a("li"),Mpe=a("strong"),Wbo=o("nystromformer"),Ubo=o(" \u2014 "),ED=a("a"),Hbo=o("NystromformerConfig"),Jbo=o(" (Nystr\xF6mformer model)"),Ybo=l(),Sh=a("li"),Epe=a("strong"),Zbo=o("openai-gpt"),Kbo=o(" \u2014 "),CD=a("a"),evo=o("OpenAIGPTConfig"),ovo=o(" (OpenAI GPT model)"),rvo=l(),Rh=a("li"),Cpe=a("strong"),tvo=o("opt"),avo=o(" \u2014 "),wD=a("a"),nvo=o("OPTConfig"),svo=o(" (OPT model)"),lvo=l(),Ph=a("li"),wpe=a("strong"),ivo=o("owlvit"),dvo=o(" \u2014 "),AD=a("a"),mvo=o("OwlViTConfig"),cvo=o(" (OWL-ViT model)"),fvo=l(),Bh=a("li"),Ape=a("strong"),gvo=o("pegasus"),hvo=o(" \u2014 "),LD=a("a"),uvo=o("PegasusConfig"),pvo=o(" (Pegasus model)"),_vo=l(),Ih=a("li"),Lpe=a("strong"),bvo=o("pegasus_x"),vvo=o(" \u2014 "),yD=a("a"),Fvo=o("PegasusXConfig"),Tvo=o(" (PEGASUS-X model)"),Mvo=l(),Nh=a("li"),ype=a("strong"),Evo=o("perceiver"),Cvo=o(" \u2014 "),xD=a("a"),wvo=o("PerceiverConfig"),Avo=o(" (Perceiver model)"),Lvo=l(),qh=a("li"),xpe=a("strong"),yvo=o("plbart"),xvo=o(" \u2014 "),$D=a("a"),$vo=o("PLBartConfig"),kvo=o(" (PLBart model)"),Svo=l(),jh=a("li"),$pe=a("strong"),Rvo=o("poolformer"),Pvo=o(" \u2014 "),kD=a("a"),Bvo=o("PoolFormerConfig"),Ivo=o(" (PoolFormer model)"),Nvo=l(),Dh=a("li"),kpe=a("strong"),qvo=o("prophetnet"),jvo=o(" \u2014 "),SD=a("a"),Dvo=o("ProphetNetConfig"),Gvo=o(" (ProphetNet model)"),Ovo=l(),Gh=a("li"),Spe=a("strong"),Vvo=o("qdqbert"),Xvo=o(" \u2014 "),RD=a("a"),zvo=o("QDQBertConfig"),Qvo=o(" (QDQBert model)"),Wvo=l(),Oh=a("li"),Rpe=a("strong"),Uvo=o("rag"),Hvo=o(" \u2014 "),PD=a("a"),Jvo=o("RagConfig"),Yvo=o(" (RAG model)"),Zvo=l(),Vh=a("li"),Ppe=a("strong"),Kvo=o("realm"),eFo=o(" \u2014 "),BD=a("a"),oFo=o("RealmConfig"),rFo=o(" (REALM model)"),tFo=l(),Xh=a("li"),Bpe=a("strong"),aFo=o("reformer"),nFo=o(" \u2014 "),ID=a("a"),sFo=o("ReformerConfig"),lFo=o(" (Reformer model)"),iFo=l(),zh=a("li"),Ipe=a("strong"),dFo=o("regnet"),mFo=o(" \u2014 "),ND=a("a"),cFo=o("RegNetConfig"),fFo=o(" (RegNet model)"),gFo=l(),Qh=a("li"),Npe=a("strong"),hFo=o("rembert"),uFo=o(" \u2014 "),qD=a("a"),pFo=o("RemBertConfig"),_Fo=o(" (RemBERT model)"),bFo=l(),Wh=a("li"),qpe=a("strong"),vFo=o("resnet"),FFo=o(" \u2014 "),jD=a("a"),TFo=o("ResNetConfig"),MFo=o(" (ResNet model)"),EFo=l(),Uh=a("li"),jpe=a("strong"),CFo=o("retribert"),wFo=o(" \u2014 "),DD=a("a"),AFo=o("RetriBertConfig"),LFo=o(" (RetriBERT model)"),yFo=l(),Hh=a("li"),Dpe=a("strong"),xFo=o("roberta"),$Fo=o(" \u2014 "),GD=a("a"),kFo=o("RobertaConfig"),SFo=o(" (RoBERTa model)"),RFo=l(),Jh=a("li"),Gpe=a("strong"),PFo=o("roc_bert"),BFo=o(" \u2014 "),OD=a("a"),IFo=o("RoCBertConfig"),NFo=o(" (RoCBert model)"),qFo=l(),Yh=a("li"),Ope=a("strong"),jFo=o("roformer"),DFo=o(" \u2014 "),VD=a("a"),GFo=o("RoFormerConfig"),OFo=o(" (RoFormer model)"),VFo=l(),Zh=a("li"),Vpe=a("strong"),XFo=o("segformer"),zFo=o(" \u2014 "),XD=a("a"),QFo=o("SegformerConfig"),WFo=o(" (SegFormer model)"),UFo=l(),Kh=a("li"),Xpe=a("strong"),HFo=o("sew"),JFo=o(" \u2014 "),zD=a("a"),YFo=o("SEWConfig"),ZFo=o(" (SEW model)"),KFo=l(),eu=a("li"),zpe=a("strong"),eTo=o("sew-d"),oTo=o(" \u2014 "),QD=a("a"),rTo=o("SEWDConfig"),tTo=o(" (SEW-D model)"),aTo=l(),ou=a("li"),Qpe=a("strong"),nTo=o("speech-encoder-decoder"),sTo=o(" \u2014 "),WD=a("a"),lTo=o("SpeechEncoderDecoderConfig"),iTo=o(" (Speech Encoder decoder model)"),dTo=l(),ru=a("li"),Wpe=a("strong"),mTo=o("speech_to_text"),cTo=o(" \u2014 "),UD=a("a"),fTo=o("Speech2TextConfig"),gTo=o(" (Speech2Text model)"),hTo=l(),tu=a("li"),Upe=a("strong"),uTo=o("speech_to_text_2"),pTo=o(" \u2014 "),HD=a("a"),_To=o("Speech2Text2Config"),bTo=o(" (Speech2Text2 model)"),vTo=l(),au=a("li"),Hpe=a("strong"),FTo=o("splinter"),TTo=o(" \u2014 "),JD=a("a"),MTo=o("SplinterConfig"),ETo=o(" (Splinter model)"),CTo=l(),nu=a("li"),Jpe=a("strong"),wTo=o("squeezebert"),ATo=o(" \u2014 "),YD=a("a"),LTo=o("SqueezeBertConfig"),yTo=o(" (SqueezeBERT model)"),xTo=l(),su=a("li"),Ype=a("strong"),$To=o("swin"),kTo=o(" \u2014 "),ZD=a("a"),STo=o("SwinConfig"),RTo=o(" (Swin Transformer model)"),PTo=l(),lu=a("li"),Zpe=a("strong"),BTo=o("swinv2"),ITo=o(" \u2014 "),KD=a("a"),NTo=o("Swinv2Config"),qTo=o(" (Swin Transformer V2 model)"),jTo=l(),iu=a("li"),Kpe=a("strong"),DTo=o("switch_transformers"),GTo=o(" \u2014 "),eG=a("a"),OTo=o("SwitchTransformersConfig"),VTo=o(" (SwitchTransformers model)"),XTo=l(),du=a("li"),e_e=a("strong"),zTo=o("t5"),QTo=o(" \u2014 "),oG=a("a"),WTo=o("T5Config"),UTo=o(" (T5 model)"),HTo=l(),mu=a("li"),o_e=a("strong"),JTo=o("table-transformer"),YTo=o(" \u2014 "),rG=a("a"),ZTo=o("TableTransformerConfig"),KTo=o(" (Table Transformer model)"),eMo=l(),cu=a("li"),r_e=a("strong"),oMo=o("tapas"),rMo=o(" \u2014 "),tG=a("a"),tMo=o("TapasConfig"),aMo=o(" (TAPAS model)"),nMo=l(),fu=a("li"),t_e=a("strong"),sMo=o("time_series_transformer"),lMo=o(" \u2014 "),aG=a("a"),iMo=o("TimeSeriesTransformerConfig"),dMo=o(" (Time Series Transformer model)"),mMo=l(),gu=a("li"),a_e=a("strong"),cMo=o("trajectory_transformer"),fMo=o(" \u2014 "),nG=a("a"),gMo=o("TrajectoryTransformerConfig"),hMo=o(" (Trajectory Transformer model)"),uMo=l(),hu=a("li"),n_e=a("strong"),pMo=o("transfo-xl"),_Mo=o(" \u2014 "),sG=a("a"),bMo=o("TransfoXLConfig"),vMo=o(" (Transformer-XL model)"),FMo=l(),uu=a("li"),s_e=a("strong"),TMo=o("trocr"),MMo=o(" \u2014 "),lG=a("a"),EMo=o("TrOCRConfig"),CMo=o(" (TrOCR model)"),wMo=l(),pu=a("li"),l_e=a("strong"),AMo=o("unispeech"),LMo=o(" \u2014 "),iG=a("a"),yMo=o("UniSpeechConfig"),xMo=o(" (UniSpeech model)"),$Mo=l(),_u=a("li"),i_e=a("strong"),kMo=o("unispeech-sat"),SMo=o(" \u2014 "),dG=a("a"),RMo=o("UniSpeechSatConfig"),PMo=o(" (UniSpeechSat model)"),BMo=l(),bu=a("li"),d_e=a("strong"),IMo=o("van"),NMo=o(" \u2014 "),mG=a("a"),qMo=o("VanConfig"),jMo=o(" (VAN model)"),DMo=l(),vu=a("li"),m_e=a("strong"),GMo=o("videomae"),OMo=o(" \u2014 "),cG=a("a"),VMo=o("VideoMAEConfig"),XMo=o(" (VideoMAE model)"),zMo=l(),Fu=a("li"),c_e=a("strong"),QMo=o("vilt"),WMo=o(" \u2014 "),fG=a("a"),UMo=o("ViltConfig"),HMo=o(" (ViLT model)"),JMo=l(),Tu=a("li"),f_e=a("strong"),YMo=o("vision-encoder-decoder"),ZMo=o(" \u2014 "),gG=a("a"),KMo=o("VisionEncoderDecoderConfig"),eEo=o(" (Vision Encoder decoder model)"),oEo=l(),Mu=a("li"),g_e=a("strong"),rEo=o("vision-text-dual-encoder"),tEo=o(" \u2014 "),hG=a("a"),aEo=o("VisionTextDualEncoderConfig"),nEo=o(" (VisionTextDualEncoder model)"),sEo=l(),Eu=a("li"),h_e=a("strong"),lEo=o("visual_bert"),iEo=o(" \u2014 "),uG=a("a"),dEo=o("VisualBertConfig"),mEo=o(" (VisualBERT model)"),cEo=l(),Cu=a("li"),u_e=a("strong"),fEo=o("vit"),gEo=o(" \u2014 "),pG=a("a"),hEo=o("ViTConfig"),uEo=o(" (ViT model)"),pEo=l(),wu=a("li"),p_e=a("strong"),_Eo=o("vit_mae"),bEo=o(" \u2014 "),_G=a("a"),vEo=o("ViTMAEConfig"),FEo=o(" (ViTMAE model)"),TEo=l(),Au=a("li"),__e=a("strong"),MEo=o("vit_msn"),EEo=o(" \u2014 "),bG=a("a"),CEo=o("ViTMSNConfig"),wEo=o(" (ViTMSN model)"),AEo=l(),Lu=a("li"),b_e=a("strong"),LEo=o("wav2vec2"),yEo=o(" \u2014 "),vG=a("a"),xEo=o("Wav2Vec2Config"),$Eo=o(" (Wav2Vec2 model)"),kEo=l(),yu=a("li"),v_e=a("strong"),SEo=o("wav2vec2-conformer"),REo=o(" \u2014 "),FG=a("a"),PEo=o("Wav2Vec2ConformerConfig"),BEo=o(" (Wav2Vec2-Conformer model)"),IEo=l(),xu=a("li"),F_e=a("strong"),NEo=o("wavlm"),qEo=o(" \u2014 "),TG=a("a"),jEo=o("WavLMConfig"),DEo=o(" (WavLM model)"),GEo=l(),$u=a("li"),T_e=a("strong"),OEo=o("whisper"),VEo=o(" \u2014 "),MG=a("a"),XEo=o("WhisperConfig"),zEo=o(" (Whisper model)"),QEo=l(),ku=a("li"),M_e=a("strong"),WEo=o("xclip"),UEo=o(" \u2014 "),EG=a("a"),HEo=o("XCLIPConfig"),JEo=o(" (X-CLIP model)"),YEo=l(),Su=a("li"),E_e=a("strong"),ZEo=o("xglm"),KEo=o(" \u2014 "),CG=a("a"),e4o=o("XGLMConfig"),o4o=o(" (XGLM model)"),r4o=l(),Ru=a("li"),C_e=a("strong"),t4o=o("xlm"),a4o=o(" \u2014 "),wG=a("a"),n4o=o("XLMConfig"),s4o=o(" (XLM model)"),l4o=l(),Pu=a("li"),w_e=a("strong"),i4o=o("xlm-prophetnet"),d4o=o(" \u2014 "),AG=a("a"),m4o=o("XLMProphetNetConfig"),c4o=o(" (XLM-ProphetNet model)"),f4o=l(),Bu=a("li"),A_e=a("strong"),g4o=o("xlm-roberta"),h4o=o(" \u2014 "),LG=a("a"),u4o=o("XLMRobertaConfig"),p4o=o(" (XLM-RoBERTa model)"),_4o=l(),Iu=a("li"),L_e=a("strong"),b4o=o("xlm-roberta-xl"),v4o=o(" \u2014 "),yG=a("a"),F4o=o("XLMRobertaXLConfig"),T4o=o(" (XLM-RoBERTa-XL model)"),M4o=l(),Nu=a("li"),y_e=a("strong"),E4o=o("xlnet"),C4o=o(" \u2014 "),xG=a("a"),w4o=o("XLNetConfig"),A4o=o(" (XLNet model)"),L4o=l(),qu=a("li"),x_e=a("strong"),y4o=o("yolos"),x4o=o(" \u2014 "),$G=a("a"),$4o=o("YolosConfig"),k4o=o(" (YOLOS model)"),S4o=l(),ju=a("li"),$_e=a("strong"),R4o=o("yoso"),P4o=o(" \u2014 "),kG=a("a"),B4o=o("YosoConfig"),I4o=o(" (YOSO model)"),N4o=l(),F(Du.$$.fragment),q4o=l(),Gu=a("div"),F(Rk.$$.fragment),j4o=l(),k_e=a("p"),D4o=o("Register a new configuration for this class."),Aio=l(),Nd=a("h2"),Ou=a("a"),S_e=a("span"),F(Pk.$$.fragment),G4o=l(),R_e=a("span"),O4o=o("AutoTokenizer"),Lio=l(),Io=a("div"),F(Bk.$$.fragment),V4o=l(),Ik=a("p"),X4o=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),SG=a("a"),z4o=o("AutoTokenizer.from_pretrained()"),Q4o=o(" class method."),W4o=l(),Nk=a("p"),U4o=o("This class cannot be instantiated directly using "),P_e=a("code"),H4o=o("__init__()"),J4o=o(" (throws an error)."),Y4o=l(),Xr=a("div"),F(qk.$$.fragment),Z4o=l(),B_e=a("p"),K4o=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),eCo=l(),mn=a("p"),oCo=o("The tokenizer class to instantiate is selected based on the "),I_e=a("code"),rCo=o("model_type"),tCo=o(` property of the config object (either
passed as an argument or loaded from `),N_e=a("code"),aCo=o("pretrained_model_name_or_path"),nCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=a("code"),sCo=o("pretrained_model_name_or_path"),lCo=o(":"),iCo=l(),k=a("ul"),Ms=a("li"),j_e=a("strong"),dCo=o("albert"),mCo=o(" \u2014 "),RG=a("a"),cCo=o("AlbertTokenizer"),fCo=o(" or "),PG=a("a"),gCo=o("AlbertTokenizerFast"),hCo=o(" (ALBERT model)"),uCo=l(),Es=a("li"),D_e=a("strong"),pCo=o("bart"),_Co=o(" \u2014 "),BG=a("a"),bCo=o("BartTokenizer"),vCo=o(" or "),IG=a("a"),FCo=o("BartTokenizerFast"),TCo=o(" (BART model)"),MCo=l(),Cs=a("li"),G_e=a("strong"),ECo=o("barthez"),CCo=o(" \u2014 "),NG=a("a"),wCo=o("BarthezTokenizer"),ACo=o(" or "),qG=a("a"),LCo=o("BarthezTokenizerFast"),yCo=o(" (BARThez model)"),xCo=l(),Vu=a("li"),O_e=a("strong"),$Co=o("bartpho"),kCo=o(" \u2014 "),jG=a("a"),SCo=o("BartphoTokenizer"),RCo=o(" (BARTpho model)"),PCo=l(),ws=a("li"),V_e=a("strong"),BCo=o("bert"),ICo=o(" \u2014 "),DG=a("a"),NCo=o("BertTokenizer"),qCo=o(" or "),GG=a("a"),jCo=o("BertTokenizerFast"),DCo=o(" (BERT model)"),GCo=l(),Xu=a("li"),X_e=a("strong"),OCo=o("bert-generation"),VCo=o(" \u2014 "),OG=a("a"),XCo=o("BertGenerationTokenizer"),zCo=o(" (Bert Generation model)"),QCo=l(),zu=a("li"),z_e=a("strong"),WCo=o("bert-japanese"),UCo=o(" \u2014 "),VG=a("a"),HCo=o("BertJapaneseTokenizer"),JCo=o(" (BertJapanese model)"),YCo=l(),Qu=a("li"),Q_e=a("strong"),ZCo=o("bertweet"),KCo=o(" \u2014 "),XG=a("a"),e3o=o("BertweetTokenizer"),o3o=o(" (BERTweet model)"),r3o=l(),As=a("li"),W_e=a("strong"),t3o=o("big_bird"),a3o=o(" \u2014 "),zG=a("a"),n3o=o("BigBirdTokenizer"),s3o=o(" or "),QG=a("a"),l3o=o("BigBirdTokenizerFast"),i3o=o(" (BigBird model)"),d3o=l(),Ls=a("li"),U_e=a("strong"),m3o=o("bigbird_pegasus"),c3o=o(" \u2014 "),WG=a("a"),f3o=o("PegasusTokenizer"),g3o=o(" or "),UG=a("a"),h3o=o("PegasusTokenizerFast"),u3o=o(" (BigBird-Pegasus model)"),p3o=l(),ys=a("li"),H_e=a("strong"),_3o=o("blenderbot"),b3o=o(" \u2014 "),HG=a("a"),v3o=o("BlenderbotTokenizer"),F3o=o(" or "),JG=a("a"),T3o=o("BlenderbotTokenizerFast"),M3o=o(" (Blenderbot model)"),E3o=l(),Wu=a("li"),J_e=a("strong"),C3o=o("blenderbot-small"),w3o=o(" \u2014 "),YG=a("a"),A3o=o("BlenderbotSmallTokenizer"),L3o=o(" (BlenderbotSmall model)"),y3o=l(),Uu=a("li"),Y_e=a("strong"),x3o=o("bloom"),$3o=o(" \u2014 "),ZG=a("a"),k3o=o("BloomTokenizerFast"),S3o=o(" (BLOOM model)"),R3o=l(),Hu=a("li"),Z_e=a("strong"),P3o=o("byt5"),B3o=o(" \u2014 "),KG=a("a"),I3o=o("ByT5Tokenizer"),N3o=o(" (ByT5 model)"),q3o=l(),xs=a("li"),K_e=a("strong"),j3o=o("camembert"),D3o=o(" \u2014 "),eO=a("a"),G3o=o("CamembertTokenizer"),O3o=o(" or "),oO=a("a"),V3o=o("CamembertTokenizerFast"),X3o=o(" (CamemBERT model)"),z3o=l(),Ju=a("li"),e1e=a("strong"),Q3o=o("canine"),W3o=o(" \u2014 "),rO=a("a"),U3o=o("CanineTokenizer"),H3o=o(" (CANINE model)"),J3o=l(),$s=a("li"),o1e=a("strong"),Y3o=o("clip"),Z3o=o(" \u2014 "),tO=a("a"),K3o=o("CLIPTokenizer"),e5o=o(" or "),aO=a("a"),o5o=o("CLIPTokenizerFast"),r5o=o(" (CLIP model)"),t5o=l(),ks=a("li"),r1e=a("strong"),a5o=o("clipseg"),n5o=o(" \u2014 "),nO=a("a"),s5o=o("CLIPTokenizer"),l5o=o(" or "),sO=a("a"),i5o=o("CLIPTokenizerFast"),d5o=o(" (CLIPSeg model)"),m5o=l(),Ss=a("li"),t1e=a("strong"),c5o=o("codegen"),f5o=o(" \u2014 "),lO=a("a"),g5o=o("CodeGenTokenizer"),h5o=o(" or "),iO=a("a"),u5o=o("CodeGenTokenizerFast"),p5o=o(" (CodeGen model)"),_5o=l(),Rs=a("li"),a1e=a("strong"),b5o=o("convbert"),v5o=o(" \u2014 "),dO=a("a"),F5o=o("ConvBertTokenizer"),T5o=o(" or "),mO=a("a"),M5o=o("ConvBertTokenizerFast"),E5o=o(" (ConvBERT model)"),C5o=l(),Ps=a("li"),n1e=a("strong"),w5o=o("cpm"),A5o=o(" \u2014 "),cO=a("a"),L5o=o("CpmTokenizer"),y5o=o(" or "),fO=a("a"),x5o=o("CpmTokenizerFast"),$5o=o(" (CPM model)"),k5o=l(),Yu=a("li"),s1e=a("strong"),S5o=o("ctrl"),R5o=o(" \u2014 "),gO=a("a"),P5o=o("CTRLTokenizer"),B5o=o(" (CTRL model)"),I5o=l(),Bs=a("li"),l1e=a("strong"),N5o=o("data2vec-text"),q5o=o(" \u2014 "),hO=a("a"),j5o=o("RobertaTokenizer"),D5o=o(" or "),uO=a("a"),G5o=o("RobertaTokenizerFast"),O5o=o(" (Data2VecText model)"),V5o=l(),Is=a("li"),i1e=a("strong"),X5o=o("deberta"),z5o=o(" \u2014 "),pO=a("a"),Q5o=o("DebertaTokenizer"),W5o=o(" or "),_O=a("a"),U5o=o("DebertaTokenizerFast"),H5o=o(" (DeBERTa model)"),J5o=l(),Ns=a("li"),d1e=a("strong"),Y5o=o("deberta-v2"),Z5o=o(" \u2014 "),bO=a("a"),K5o=o("DebertaV2Tokenizer"),e0o=o(" or "),vO=a("a"),o0o=o("DebertaV2TokenizerFast"),r0o=o(" (DeBERTa-v2 model)"),t0o=l(),qs=a("li"),m1e=a("strong"),a0o=o("distilbert"),n0o=o(" \u2014 "),FO=a("a"),s0o=o("DistilBertTokenizer"),l0o=o(" or "),TO=a("a"),i0o=o("DistilBertTokenizerFast"),d0o=o(" (DistilBERT model)"),m0o=l(),js=a("li"),c1e=a("strong"),c0o=o("dpr"),f0o=o(" \u2014 "),MO=a("a"),g0o=o("DPRQuestionEncoderTokenizer"),h0o=o(" or "),EO=a("a"),u0o=o("DPRQuestionEncoderTokenizerFast"),p0o=o(" (DPR model)"),_0o=l(),Ds=a("li"),f1e=a("strong"),b0o=o("electra"),v0o=o(" \u2014 "),CO=a("a"),F0o=o("ElectraTokenizer"),T0o=o(" or "),wO=a("a"),M0o=o("ElectraTokenizerFast"),E0o=o(" (ELECTRA model)"),C0o=l(),Gs=a("li"),g1e=a("strong"),w0o=o("ernie"),A0o=o(" \u2014 "),AO=a("a"),L0o=o("BertTokenizer"),y0o=o(" or "),LO=a("a"),x0o=o("BertTokenizerFast"),$0o=o(" (ERNIE model)"),k0o=l(),Zu=a("li"),h1e=a("strong"),S0o=o("esm"),R0o=o(" \u2014 "),yO=a("a"),P0o=o("EsmTokenizer"),B0o=o(" (ESM model)"),I0o=l(),Ku=a("li"),u1e=a("strong"),N0o=o("flaubert"),q0o=o(" \u2014 "),xO=a("a"),j0o=o("FlaubertTokenizer"),D0o=o(" (FlauBERT model)"),G0o=l(),Os=a("li"),p1e=a("strong"),O0o=o("fnet"),V0o=o(" \u2014 "),$O=a("a"),X0o=o("FNetTokenizer"),z0o=o(" or "),kO=a("a"),Q0o=o("FNetTokenizerFast"),W0o=o(" (FNet model)"),U0o=l(),ep=a("li"),_1e=a("strong"),H0o=o("fsmt"),J0o=o(" \u2014 "),SO=a("a"),Y0o=o("FSMTTokenizer"),Z0o=o(" (FairSeq Machine-Translation model)"),K0o=l(),Vs=a("li"),b1e=a("strong"),ewo=o("funnel"),owo=o(" \u2014 "),RO=a("a"),rwo=o("FunnelTokenizer"),two=o(" or "),PO=a("a"),awo=o("FunnelTokenizerFast"),nwo=o(" (Funnel Transformer model)"),swo=l(),Xs=a("li"),v1e=a("strong"),lwo=o("gpt2"),iwo=o(" \u2014 "),BO=a("a"),dwo=o("GPT2Tokenizer"),mwo=o(" or "),IO=a("a"),cwo=o("GPT2TokenizerFast"),fwo=o(" (OpenAI GPT-2 model)"),gwo=l(),zs=a("li"),F1e=a("strong"),hwo=o("gpt_neo"),uwo=o(" \u2014 "),NO=a("a"),pwo=o("GPT2Tokenizer"),_wo=o(" or "),qO=a("a"),bwo=o("GPT2TokenizerFast"),vwo=o(" (GPT Neo model)"),Fwo=l(),op=a("li"),T1e=a("strong"),Two=o("gpt_neox"),Mwo=o(" \u2014 "),jO=a("a"),Ewo=o("GPTNeoXTokenizerFast"),Cwo=o(" (GPT NeoX model)"),wwo=l(),rp=a("li"),M1e=a("strong"),Awo=o("gpt_neox_japanese"),Lwo=o(" \u2014 "),DO=a("a"),ywo=o("GPTNeoXJapaneseTokenizer"),xwo=o(" (GPT NeoX Japanese model)"),$wo=l(),Qs=a("li"),E1e=a("strong"),kwo=o("gptj"),Swo=o(" \u2014 "),GO=a("a"),Rwo=o("GPT2Tokenizer"),Pwo=o(" or "),OO=a("a"),Bwo=o("GPT2TokenizerFast"),Iwo=o(" (GPT-J model)"),Nwo=l(),Ws=a("li"),C1e=a("strong"),qwo=o("groupvit"),jwo=o(" \u2014 "),VO=a("a"),Dwo=o("CLIPTokenizer"),Gwo=o(" or "),XO=a("a"),Owo=o("CLIPTokenizerFast"),Vwo=o(" (GroupViT model)"),Xwo=l(),Us=a("li"),w1e=a("strong"),zwo=o("herbert"),Qwo=o(" \u2014 "),zO=a("a"),Wwo=o("HerbertTokenizer"),Uwo=o(" or "),QO=a("a"),Hwo=o("HerbertTokenizerFast"),Jwo=o(" (HerBERT model)"),Ywo=l(),tp=a("li"),A1e=a("strong"),Zwo=o("hubert"),Kwo=o(" \u2014 "),WO=a("a"),eAo=o("Wav2Vec2CTCTokenizer"),oAo=o(" (Hubert model)"),rAo=l(),Hs=a("li"),L1e=a("strong"),tAo=o("ibert"),aAo=o(" \u2014 "),UO=a("a"),nAo=o("RobertaTokenizer"),sAo=o(" or "),HO=a("a"),lAo=o("RobertaTokenizerFast"),iAo=o(" (I-BERT model)"),dAo=l(),ap=a("li"),y1e=a("strong"),mAo=o("jukebox"),cAo=o(" \u2014 "),JO=a("a"),fAo=o("JukeboxTokenizer"),gAo=o(" (Jukebox model)"),hAo=l(),Js=a("li"),x1e=a("strong"),uAo=o("layoutlm"),pAo=o(" \u2014 "),YO=a("a"),_Ao=o("LayoutLMTokenizer"),bAo=o(" or "),ZO=a("a"),vAo=o("LayoutLMTokenizerFast"),FAo=o(" (LayoutLM model)"),TAo=l(),Ys=a("li"),$1e=a("strong"),MAo=o("layoutlmv2"),EAo=o(" \u2014 "),KO=a("a"),CAo=o("LayoutLMv2Tokenizer"),wAo=o(" or "),eV=a("a"),AAo=o("LayoutLMv2TokenizerFast"),LAo=o(" (LayoutLMv2 model)"),yAo=l(),Zs=a("li"),k1e=a("strong"),xAo=o("layoutlmv3"),$Ao=o(" \u2014 "),oV=a("a"),kAo=o("LayoutLMv3Tokenizer"),SAo=o(" or "),rV=a("a"),RAo=o("LayoutLMv3TokenizerFast"),PAo=o(" (LayoutLMv3 model)"),BAo=l(),Ks=a("li"),S1e=a("strong"),IAo=o("layoutxlm"),NAo=o(" \u2014 "),tV=a("a"),qAo=o("LayoutXLMTokenizer"),jAo=o(" or "),aV=a("a"),DAo=o("LayoutXLMTokenizerFast"),GAo=o(" (LayoutXLM model)"),OAo=l(),el=a("li"),R1e=a("strong"),VAo=o("led"),XAo=o(" \u2014 "),nV=a("a"),zAo=o("LEDTokenizer"),QAo=o(" or "),sV=a("a"),WAo=o("LEDTokenizerFast"),UAo=o(" (LED model)"),HAo=l(),ol=a("li"),P1e=a("strong"),JAo=o("lilt"),YAo=o(" \u2014 "),lV=a("a"),ZAo=o("LayoutLMv3Tokenizer"),KAo=o(" or "),iV=a("a"),e6o=o("LayoutLMv3TokenizerFast"),o6o=o(" (LiLT model)"),r6o=l(),rl=a("li"),B1e=a("strong"),t6o=o("longformer"),a6o=o(" \u2014 "),dV=a("a"),n6o=o("LongformerTokenizer"),s6o=o(" or "),mV=a("a"),l6o=o("LongformerTokenizerFast"),i6o=o(" (Longformer model)"),d6o=l(),tl=a("li"),I1e=a("strong"),m6o=o("longt5"),c6o=o(" \u2014 "),cV=a("a"),f6o=o("T5Tokenizer"),g6o=o(" or "),fV=a("a"),h6o=o("T5TokenizerFast"),u6o=o(" (LongT5 model)"),p6o=l(),np=a("li"),N1e=a("strong"),_6o=o("luke"),b6o=o(" \u2014 "),gV=a("a"),v6o=o("LukeTokenizer"),F6o=o(" (LUKE model)"),T6o=l(),al=a("li"),q1e=a("strong"),M6o=o("lxmert"),E6o=o(" \u2014 "),hV=a("a"),C6o=o("LxmertTokenizer"),w6o=o(" or "),uV=a("a"),A6o=o("LxmertTokenizerFast"),L6o=o(" (LXMERT model)"),y6o=l(),sp=a("li"),j1e=a("strong"),x6o=o("m2m_100"),$6o=o(" \u2014 "),pV=a("a"),k6o=o("M2M100Tokenizer"),S6o=o(" (M2M100 model)"),R6o=l(),lp=a("li"),D1e=a("strong"),P6o=o("marian"),B6o=o(" \u2014 "),_V=a("a"),I6o=o("MarianTokenizer"),N6o=o(" (Marian model)"),q6o=l(),nl=a("li"),G1e=a("strong"),j6o=o("mbart"),D6o=o(" \u2014 "),bV=a("a"),G6o=o("MBartTokenizer"),O6o=o(" or "),vV=a("a"),V6o=o("MBartTokenizerFast"),X6o=o(" (mBART model)"),z6o=l(),sl=a("li"),O1e=a("strong"),Q6o=o("mbart50"),W6o=o(" \u2014 "),FV=a("a"),U6o=o("MBart50Tokenizer"),H6o=o(" or "),TV=a("a"),J6o=o("MBart50TokenizerFast"),Y6o=o(" (mBART-50 model)"),Z6o=l(),ll=a("li"),V1e=a("strong"),K6o=o("megatron-bert"),e7o=o(" \u2014 "),MV=a("a"),o7o=o("BertTokenizer"),r7o=o(" or "),EV=a("a"),t7o=o("BertTokenizerFast"),a7o=o(" (Megatron-BERT model)"),n7o=l(),ip=a("li"),X1e=a("strong"),s7o=o("mluke"),l7o=o(" \u2014 "),CV=a("a"),i7o=o("MLukeTokenizer"),d7o=o(" (mLUKE model)"),m7o=l(),il=a("li"),z1e=a("strong"),c7o=o("mobilebert"),f7o=o(" \u2014 "),wV=a("a"),g7o=o("MobileBertTokenizer"),h7o=o(" or "),AV=a("a"),u7o=o("MobileBertTokenizerFast"),p7o=o(" (MobileBERT model)"),_7o=l(),dl=a("li"),Q1e=a("strong"),b7o=o("mpnet"),v7o=o(" \u2014 "),LV=a("a"),F7o=o("MPNetTokenizer"),T7o=o(" or "),yV=a("a"),M7o=o("MPNetTokenizerFast"),E7o=o(" (MPNet model)"),C7o=l(),ml=a("li"),W1e=a("strong"),w7o=o("mt5"),A7o=o(" \u2014 "),xV=a("a"),L7o=o("MT5Tokenizer"),y7o=o(" or "),$V=a("a"),x7o=o("MT5TokenizerFast"),$7o=o(" (MT5 model)"),k7o=l(),cl=a("li"),U1e=a("strong"),S7o=o("mvp"),R7o=o(" \u2014 "),kV=a("a"),P7o=o("MvpTokenizer"),B7o=o(" or "),SV=a("a"),I7o=o("MvpTokenizerFast"),N7o=o(" (MVP model)"),q7o=l(),fl=a("li"),H1e=a("strong"),j7o=o("nezha"),D7o=o(" \u2014 "),RV=a("a"),G7o=o("BertTokenizer"),O7o=o(" or "),PV=a("a"),V7o=o("BertTokenizerFast"),X7o=o(" (Nezha model)"),z7o=l(),gl=a("li"),J1e=a("strong"),Q7o=o("nllb"),W7o=o(" \u2014 "),BV=a("a"),U7o=o("NllbTokenizer"),H7o=o(" or "),IV=a("a"),J7o=o("NllbTokenizerFast"),Y7o=o(" (NLLB model)"),Z7o=l(),hl=a("li"),Y1e=a("strong"),K7o=o("nystromformer"),e8o=o(" \u2014 "),NV=a("a"),o8o=o("AlbertTokenizer"),r8o=o(" or "),qV=a("a"),t8o=o("AlbertTokenizerFast"),a8o=o(" (Nystr\xF6mformer model)"),n8o=l(),ul=a("li"),Z1e=a("strong"),s8o=o("openai-gpt"),l8o=o(" \u2014 "),jV=a("a"),i8o=o("OpenAIGPTTokenizer"),d8o=o(" or "),DV=a("a"),m8o=o("OpenAIGPTTokenizerFast"),c8o=o(" (OpenAI GPT model)"),f8o=l(),dp=a("li"),K1e=a("strong"),g8o=o("opt"),h8o=o(" \u2014 "),GV=a("a"),u8o=o("GPT2Tokenizer"),p8o=o(" (OPT model)"),_8o=l(),pl=a("li"),e2e=a("strong"),b8o=o("owlvit"),v8o=o(" \u2014 "),OV=a("a"),F8o=o("CLIPTokenizer"),T8o=o(" or "),VV=a("a"),M8o=o("CLIPTokenizerFast"),E8o=o(" (OWL-ViT model)"),C8o=l(),_l=a("li"),o2e=a("strong"),w8o=o("pegasus"),A8o=o(" \u2014 "),XV=a("a"),L8o=o("PegasusTokenizer"),y8o=o(" or "),zV=a("a"),x8o=o("PegasusTokenizerFast"),$8o=o(" (Pegasus model)"),k8o=l(),bl=a("li"),r2e=a("strong"),S8o=o("pegasus_x"),R8o=o(" \u2014 "),QV=a("a"),P8o=o("PegasusTokenizer"),B8o=o(" or "),WV=a("a"),I8o=o("PegasusTokenizerFast"),N8o=o(" (PEGASUS-X model)"),q8o=l(),mp=a("li"),t2e=a("strong"),j8o=o("perceiver"),D8o=o(" \u2014 "),UV=a("a"),G8o=o("PerceiverTokenizer"),O8o=o(" (Perceiver model)"),V8o=l(),cp=a("li"),a2e=a("strong"),X8o=o("phobert"),z8o=o(" \u2014 "),HV=a("a"),Q8o=o("PhobertTokenizer"),W8o=o(" (PhoBERT model)"),U8o=l(),fp=a("li"),n2e=a("strong"),H8o=o("plbart"),J8o=o(" \u2014 "),JV=a("a"),Y8o=o("PLBartTokenizer"),Z8o=o(" (PLBart model)"),K8o=l(),gp=a("li"),s2e=a("strong"),eLo=o("prophetnet"),oLo=o(" \u2014 "),YV=a("a"),rLo=o("ProphetNetTokenizer"),tLo=o(" (ProphetNet model)"),aLo=l(),vl=a("li"),l2e=a("strong"),nLo=o("qdqbert"),sLo=o(" \u2014 "),ZV=a("a"),lLo=o("BertTokenizer"),iLo=o(" or "),KV=a("a"),dLo=o("BertTokenizerFast"),mLo=o(" (QDQBert model)"),cLo=l(),hp=a("li"),i2e=a("strong"),fLo=o("rag"),gLo=o(" \u2014 "),eX=a("a"),hLo=o("RagTokenizer"),uLo=o(" (RAG model)"),pLo=l(),Fl=a("li"),d2e=a("strong"),_Lo=o("realm"),bLo=o(" \u2014 "),oX=a("a"),vLo=o("RealmTokenizer"),FLo=o(" or "),rX=a("a"),TLo=o("RealmTokenizerFast"),MLo=o(" (REALM model)"),ELo=l(),Tl=a("li"),m2e=a("strong"),CLo=o("reformer"),wLo=o(" \u2014 "),tX=a("a"),ALo=o("ReformerTokenizer"),LLo=o(" or "),aX=a("a"),yLo=o("ReformerTokenizerFast"),xLo=o(" (Reformer model)"),$Lo=l(),Ml=a("li"),c2e=a("strong"),kLo=o("rembert"),SLo=o(" \u2014 "),nX=a("a"),RLo=o("RemBertTokenizer"),PLo=o(" or "),sX=a("a"),BLo=o("RemBertTokenizerFast"),ILo=o(" (RemBERT model)"),NLo=l(),El=a("li"),f2e=a("strong"),qLo=o("retribert"),jLo=o(" \u2014 "),lX=a("a"),DLo=o("RetriBertTokenizer"),GLo=o(" or "),iX=a("a"),OLo=o("RetriBertTokenizerFast"),VLo=o(" (RetriBERT model)"),XLo=l(),Cl=a("li"),g2e=a("strong"),zLo=o("roberta"),QLo=o(" \u2014 "),dX=a("a"),WLo=o("RobertaTokenizer"),ULo=o(" or "),mX=a("a"),HLo=o("RobertaTokenizerFast"),JLo=o(" (RoBERTa model)"),YLo=l(),up=a("li"),h2e=a("strong"),ZLo=o("roc_bert"),KLo=o(" \u2014 "),cX=a("a"),eyo=o("RoCBertTokenizer"),oyo=o(" (RoCBert model)"),ryo=l(),wl=a("li"),u2e=a("strong"),tyo=o("roformer"),ayo=o(" \u2014 "),fX=a("a"),nyo=o("RoFormerTokenizer"),syo=o(" or "),gX=a("a"),lyo=o("RoFormerTokenizerFast"),iyo=o(" (RoFormer model)"),dyo=l(),pp=a("li"),p2e=a("strong"),myo=o("speech_to_text"),cyo=o(" \u2014 "),hX=a("a"),fyo=o("Speech2TextTokenizer"),gyo=o(" (Speech2Text model)"),hyo=l(),_p=a("li"),_2e=a("strong"),uyo=o("speech_to_text_2"),pyo=o(" \u2014 "),uX=a("a"),_yo=o("Speech2Text2Tokenizer"),byo=o(" (Speech2Text2 model)"),vyo=l(),Al=a("li"),b2e=a("strong"),Fyo=o("splinter"),Tyo=o(" \u2014 "),pX=a("a"),Myo=o("SplinterTokenizer"),Eyo=o(" or "),_X=a("a"),Cyo=o("SplinterTokenizerFast"),wyo=o(" (Splinter model)"),Ayo=l(),Ll=a("li"),v2e=a("strong"),Lyo=o("squeezebert"),yyo=o(" \u2014 "),bX=a("a"),xyo=o("SqueezeBertTokenizer"),$yo=o(" or "),vX=a("a"),kyo=o("SqueezeBertTokenizerFast"),Syo=o(" (SqueezeBERT model)"),Ryo=l(),yl=a("li"),F2e=a("strong"),Pyo=o("switch_transformers"),Byo=o(" \u2014 "),FX=a("a"),Iyo=o("T5Tokenizer"),Nyo=o(" or "),TX=a("a"),qyo=o("T5TokenizerFast"),jyo=o(" (SwitchTransformers model)"),Dyo=l(),xl=a("li"),T2e=a("strong"),Gyo=o("t5"),Oyo=o(" \u2014 "),MX=a("a"),Vyo=o("T5Tokenizer"),Xyo=o(" or "),EX=a("a"),zyo=o("T5TokenizerFast"),Qyo=o(" (T5 model)"),Wyo=l(),bp=a("li"),M2e=a("strong"),Uyo=o("tapas"),Hyo=o(" \u2014 "),CX=a("a"),Jyo=o("TapasTokenizer"),Yyo=o(" (TAPAS model)"),Zyo=l(),vp=a("li"),E2e=a("strong"),Kyo=o("tapex"),e9o=o(" \u2014 "),wX=a("a"),o9o=o("TapexTokenizer"),r9o=o(" (TAPEX model)"),t9o=l(),Fp=a("li"),C2e=a("strong"),a9o=o("transfo-xl"),n9o=o(" \u2014 "),AX=a("a"),s9o=o("TransfoXLTokenizer"),l9o=o(" (Transformer-XL model)"),i9o=l(),$l=a("li"),w2e=a("strong"),d9o=o("vilt"),m9o=o(" \u2014 "),LX=a("a"),c9o=o("BertTokenizer"),f9o=o(" or "),yX=a("a"),g9o=o("BertTokenizerFast"),h9o=o(" (ViLT model)"),u9o=l(),kl=a("li"),A2e=a("strong"),p9o=o("visual_bert"),_9o=o(" \u2014 "),xX=a("a"),b9o=o("BertTokenizer"),v9o=o(" or "),$X=a("a"),F9o=o("BertTokenizerFast"),T9o=o(" (VisualBERT model)"),M9o=l(),Tp=a("li"),L2e=a("strong"),E9o=o("wav2vec2"),C9o=o(" \u2014 "),kX=a("a"),w9o=o("Wav2Vec2CTCTokenizer"),A9o=o(" (Wav2Vec2 model)"),L9o=l(),Mp=a("li"),y2e=a("strong"),y9o=o("wav2vec2-conformer"),x9o=o(" \u2014 "),SX=a("a"),$9o=o("Wav2Vec2CTCTokenizer"),k9o=o(" (Wav2Vec2-Conformer model)"),S9o=l(),Ep=a("li"),x2e=a("strong"),R9o=o("wav2vec2_phoneme"),P9o=o(" \u2014 "),RX=a("a"),B9o=o("Wav2Vec2PhonemeCTCTokenizer"),I9o=o(" (Wav2Vec2Phoneme model)"),N9o=l(),Cp=a("li"),$2e=a("strong"),q9o=o("whisper"),j9o=o(" \u2014 "),PX=a("a"),D9o=o("WhisperTokenizer"),G9o=o(" (Whisper model)"),O9o=l(),Sl=a("li"),k2e=a("strong"),V9o=o("xclip"),X9o=o(" \u2014 "),BX=a("a"),z9o=o("CLIPTokenizer"),Q9o=o(" or "),IX=a("a"),W9o=o("CLIPTokenizerFast"),U9o=o(" (X-CLIP model)"),H9o=l(),Rl=a("li"),S2e=a("strong"),J9o=o("xglm"),Y9o=o(" \u2014 "),NX=a("a"),Z9o=o("XGLMTokenizer"),K9o=o(" or "),qX=a("a"),exo=o("XGLMTokenizerFast"),oxo=o(" (XGLM model)"),rxo=l(),wp=a("li"),R2e=a("strong"),txo=o("xlm"),axo=o(" \u2014 "),jX=a("a"),nxo=o("XLMTokenizer"),sxo=o(" (XLM model)"),lxo=l(),Ap=a("li"),P2e=a("strong"),ixo=o("xlm-prophetnet"),dxo=o(" \u2014 "),DX=a("a"),mxo=o("XLMProphetNetTokenizer"),cxo=o(" (XLM-ProphetNet model)"),fxo=l(),Pl=a("li"),B2e=a("strong"),gxo=o("xlm-roberta"),hxo=o(" \u2014 "),GX=a("a"),uxo=o("XLMRobertaTokenizer"),pxo=o(" or "),OX=a("a"),_xo=o("XLMRobertaTokenizerFast"),bxo=o(" (XLM-RoBERTa model)"),vxo=l(),Bl=a("li"),I2e=a("strong"),Fxo=o("xlm-roberta-xl"),Txo=o(" \u2014 "),VX=a("a"),Mxo=o("XLMRobertaTokenizer"),Exo=o(" or "),XX=a("a"),Cxo=o("XLMRobertaTokenizerFast"),wxo=o(" (XLM-RoBERTa-XL model)"),Axo=l(),Il=a("li"),N2e=a("strong"),Lxo=o("xlnet"),yxo=o(" \u2014 "),zX=a("a"),xxo=o("XLNetTokenizer"),$xo=o(" or "),QX=a("a"),kxo=o("XLNetTokenizerFast"),Sxo=o(" (XLNet model)"),Rxo=l(),Nl=a("li"),q2e=a("strong"),Pxo=o("yoso"),Bxo=o(" \u2014 "),WX=a("a"),Ixo=o("AlbertTokenizer"),Nxo=o(" or "),UX=a("a"),qxo=o("AlbertTokenizerFast"),jxo=o(" (YOSO model)"),Dxo=l(),F(Lp.$$.fragment),Gxo=l(),yp=a("div"),F(jk.$$.fragment),Oxo=l(),j2e=a("p"),Vxo=o("Register a new tokenizer in this mapping."),yio=l(),qd=a("h2"),xp=a("a"),D2e=a("span"),F(Dk.$$.fragment),Xxo=l(),G2e=a("span"),zxo=o("AutoFeatureExtractor"),xio=l(),No=a("div"),F(Gk.$$.fragment),Qxo=l(),Ok=a("p"),Wxo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HX=a("a"),Uxo=o("AutoFeatureExtractor.from_pretrained()"),Hxo=o(" class method."),Jxo=l(),Vk=a("p"),Yxo=o("This class cannot be instantiated directly using "),O2e=a("code"),Zxo=o("__init__()"),Kxo=o(" (throws an error)."),e$o=l(),eo=a("div"),F(Xk.$$.fragment),o$o=l(),V2e=a("p"),r$o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),t$o=l(),cn=a("p"),a$o=o("The feature extractor class to instantiate is selected based on the "),X2e=a("code"),n$o=o("model_type"),s$o=o(` property of the config object
(either passed as an argument or loaded from `),z2e=a("code"),l$o=o("pretrained_model_name_or_path"),i$o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Q2e=a("code"),d$o=o("pretrained_model_name_or_path"),m$o=o(":"),c$o=l(),z=a("ul"),$p=a("li"),W2e=a("strong"),f$o=o("beit"),g$o=o(" \u2014 "),JX=a("a"),h$o=o("BeitFeatureExtractor"),u$o=o(" (BEiT model)"),p$o=l(),kp=a("li"),U2e=a("strong"),_$o=o("clip"),b$o=o(" \u2014 "),YX=a("a"),v$o=o("CLIPFeatureExtractor"),F$o=o(" (CLIP model)"),T$o=l(),Sp=a("li"),H2e=a("strong"),M$o=o("clipseg"),E$o=o(" \u2014 "),ZX=a("a"),C$o=o("ViTFeatureExtractor"),w$o=o(" (CLIPSeg model)"),A$o=l(),Rp=a("li"),J2e=a("strong"),L$o=o("conditional_detr"),y$o=o(" \u2014 "),KX=a("a"),x$o=o("ConditionalDetrFeatureExtractor"),$$o=o(" (Conditional DETR model)"),k$o=l(),Pp=a("li"),Y2e=a("strong"),S$o=o("convnext"),R$o=o(" \u2014 "),ez=a("a"),P$o=o("ConvNextFeatureExtractor"),B$o=o(" (ConvNeXT model)"),I$o=l(),Bp=a("li"),Z2e=a("strong"),N$o=o("cvt"),q$o=o(" \u2014 "),oz=a("a"),j$o=o("ConvNextFeatureExtractor"),D$o=o(" (CvT model)"),G$o=l(),Ip=a("li"),K2e=a("strong"),O$o=o("data2vec-audio"),V$o=o(" \u2014 "),rz=a("a"),X$o=o("Wav2Vec2FeatureExtractor"),z$o=o(" (Data2VecAudio model)"),Q$o=l(),Np=a("li"),ebe=a("strong"),W$o=o("data2vec-vision"),U$o=o(" \u2014 "),tz=a("a"),H$o=o("BeitFeatureExtractor"),J$o=o(" (Data2VecVision model)"),Y$o=l(),qp=a("li"),obe=a("strong"),Z$o=o("deformable_detr"),K$o=o(" \u2014 "),az=a("a"),eko=o("DeformableDetrFeatureExtractor"),oko=o(" (Deformable DETR model)"),rko=l(),jp=a("li"),rbe=a("strong"),tko=o("deit"),ako=o(" \u2014 "),nz=a("a"),nko=o("DeiTFeatureExtractor"),sko=o(" (DeiT model)"),lko=l(),Dp=a("li"),tbe=a("strong"),iko=o("detr"),dko=o(" \u2014 "),sz=a("a"),mko=o("DetrFeatureExtractor"),cko=o(" (DETR model)"),fko=l(),Gp=a("li"),abe=a("strong"),gko=o("donut-swin"),hko=o(" \u2014 "),lz=a("a"),uko=o("DonutFeatureExtractor"),pko=o(" (DonutSwin model)"),_ko=l(),Op=a("li"),nbe=a("strong"),bko=o("dpt"),vko=o(" \u2014 "),iz=a("a"),Fko=o("DPTFeatureExtractor"),Tko=o(" (DPT model)"),Mko=l(),Vp=a("li"),sbe=a("strong"),Eko=o("flava"),Cko=o(" \u2014 "),dz=a("a"),wko=o("FlavaFeatureExtractor"),Ako=o(" (FLAVA model)"),Lko=l(),Xp=a("li"),lbe=a("strong"),yko=o("glpn"),xko=o(" \u2014 "),mz=a("a"),$ko=o("GLPNFeatureExtractor"),kko=o(" (GLPN model)"),Sko=l(),zp=a("li"),ibe=a("strong"),Rko=o("groupvit"),Pko=o(" \u2014 "),cz=a("a"),Bko=o("CLIPFeatureExtractor"),Iko=o(" (GroupViT model)"),Nko=l(),Qp=a("li"),dbe=a("strong"),qko=o("hubert"),jko=o(" \u2014 "),fz=a("a"),Dko=o("Wav2Vec2FeatureExtractor"),Gko=o(" (Hubert model)"),Oko=l(),Wp=a("li"),mbe=a("strong"),Vko=o("imagegpt"),Xko=o(" \u2014 "),gz=a("a"),zko=o("ImageGPTFeatureExtractor"),Qko=o(" (ImageGPT model)"),Wko=l(),Up=a("li"),cbe=a("strong"),Uko=o("layoutlmv2"),Hko=o(" \u2014 "),hz=a("a"),Jko=o("LayoutLMv2FeatureExtractor"),Yko=o(" (LayoutLMv2 model)"),Zko=l(),Hp=a("li"),fbe=a("strong"),Kko=o("layoutlmv3"),eSo=o(" \u2014 "),uz=a("a"),oSo=o("LayoutLMv3FeatureExtractor"),rSo=o(" (LayoutLMv3 model)"),tSo=l(),Jp=a("li"),gbe=a("strong"),aSo=o("levit"),nSo=o(" \u2014 "),pz=a("a"),sSo=o("LevitFeatureExtractor"),lSo=o(" (LeViT model)"),iSo=l(),Yp=a("li"),hbe=a("strong"),dSo=o("maskformer"),mSo=o(" \u2014 "),_z=a("a"),cSo=o("MaskFormerFeatureExtractor"),fSo=o(" (MaskFormer model)"),gSo=l(),Zp=a("li"),ube=a("strong"),hSo=o("mctct"),uSo=o(" \u2014 "),bz=a("a"),pSo=o("MCTCTFeatureExtractor"),_So=o(" (M-CTC-T model)"),bSo=l(),Kp=a("li"),pbe=a("strong"),vSo=o("mobilenet_v2"),FSo=o(" \u2014 "),vz=a("a"),TSo=o("MobileNetV2FeatureExtractor"),MSo=o(" (MobileNetV2 model)"),ESo=l(),e_=a("li"),_be=a("strong"),CSo=o("mobilevit"),wSo=o(" \u2014 "),Fz=a("a"),ASo=o("MobileViTFeatureExtractor"),LSo=o(" (MobileViT model)"),ySo=l(),o_=a("li"),bbe=a("strong"),xSo=o("owlvit"),$So=o(" \u2014 "),Tz=a("a"),kSo=o("OwlViTFeatureExtractor"),SSo=o(" (OWL-ViT model)"),RSo=l(),r_=a("li"),vbe=a("strong"),PSo=o("perceiver"),BSo=o(" \u2014 "),Mz=a("a"),ISo=o("PerceiverFeatureExtractor"),NSo=o(" (Perceiver model)"),qSo=l(),t_=a("li"),Fbe=a("strong"),jSo=o("poolformer"),DSo=o(" \u2014 "),Ez=a("a"),GSo=o("PoolFormerFeatureExtractor"),OSo=o(" (PoolFormer model)"),VSo=l(),a_=a("li"),Tbe=a("strong"),XSo=o("regnet"),zSo=o(" \u2014 "),Cz=a("a"),QSo=o("ConvNextFeatureExtractor"),WSo=o(" (RegNet model)"),USo=l(),n_=a("li"),Mbe=a("strong"),HSo=o("resnet"),JSo=o(" \u2014 "),wz=a("a"),YSo=o("ConvNextFeatureExtractor"),ZSo=o(" (ResNet model)"),KSo=l(),s_=a("li"),Ebe=a("strong"),eRo=o("segformer"),oRo=o(" \u2014 "),Az=a("a"),rRo=o("SegformerFeatureExtractor"),tRo=o(" (SegFormer model)"),aRo=l(),l_=a("li"),Cbe=a("strong"),nRo=o("speech_to_text"),sRo=o(" \u2014 "),Lz=a("a"),lRo=o("Speech2TextFeatureExtractor"),iRo=o(" (Speech2Text model)"),dRo=l(),i_=a("li"),wbe=a("strong"),mRo=o("swin"),cRo=o(" \u2014 "),yz=a("a"),fRo=o("ViTFeatureExtractor"),gRo=o(" (Swin Transformer model)"),hRo=l(),d_=a("li"),Abe=a("strong"),uRo=o("swinv2"),pRo=o(" \u2014 "),xz=a("a"),_Ro=o("ViTFeatureExtractor"),bRo=o(" (Swin Transformer V2 model)"),vRo=l(),m_=a("li"),Lbe=a("strong"),FRo=o("table-transformer"),TRo=o(" \u2014 "),$z=a("a"),MRo=o("DetrFeatureExtractor"),ERo=o(" (Table Transformer model)"),CRo=l(),c_=a("li"),ybe=a("strong"),wRo=o("van"),ARo=o(" \u2014 "),kz=a("a"),LRo=o("ConvNextFeatureExtractor"),yRo=o(" (VAN model)"),xRo=l(),f_=a("li"),xbe=a("strong"),$Ro=o("videomae"),kRo=o(" \u2014 "),Sz=a("a"),SRo=o("VideoMAEFeatureExtractor"),RRo=o(" (VideoMAE model)"),PRo=l(),g_=a("li"),$be=a("strong"),BRo=o("vilt"),IRo=o(" \u2014 "),Rz=a("a"),NRo=o("ViltFeatureExtractor"),qRo=o(" (ViLT model)"),jRo=l(),h_=a("li"),kbe=a("strong"),DRo=o("vit"),GRo=o(" \u2014 "),Pz=a("a"),ORo=o("ViTFeatureExtractor"),VRo=o(" (ViT model)"),XRo=l(),u_=a("li"),Sbe=a("strong"),zRo=o("vit_mae"),QRo=o(" \u2014 "),Bz=a("a"),WRo=o("ViTFeatureExtractor"),URo=o(" (ViTMAE model)"),HRo=l(),p_=a("li"),Rbe=a("strong"),JRo=o("vit_msn"),YRo=o(" \u2014 "),Iz=a("a"),ZRo=o("ViTFeatureExtractor"),KRo=o(" (ViTMSN model)"),ePo=l(),__=a("li"),Pbe=a("strong"),oPo=o("wav2vec2"),rPo=o(" \u2014 "),Nz=a("a"),tPo=o("Wav2Vec2FeatureExtractor"),aPo=o(" (Wav2Vec2 model)"),nPo=l(),b_=a("li"),Bbe=a("strong"),sPo=o("wav2vec2-conformer"),lPo=o(" \u2014 "),qz=a("a"),iPo=o("Wav2Vec2FeatureExtractor"),dPo=o(" (Wav2Vec2-Conformer model)"),mPo=l(),v_=a("li"),Ibe=a("strong"),cPo=o("whisper"),fPo=o(" \u2014 "),jz=a("a"),gPo=o("WhisperFeatureExtractor"),hPo=o(" (Whisper model)"),uPo=l(),F_=a("li"),Nbe=a("strong"),pPo=o("xclip"),_Po=o(" \u2014 "),Dz=a("a"),bPo=o("CLIPFeatureExtractor"),vPo=o(" (X-CLIP model)"),FPo=l(),T_=a("li"),qbe=a("strong"),TPo=o("yolos"),MPo=o(" \u2014 "),Gz=a("a"),EPo=o("YolosFeatureExtractor"),CPo=o(" (YOLOS model)"),wPo=l(),F(M_.$$.fragment),APo=l(),F(E_.$$.fragment),LPo=l(),C_=a("div"),F(zk.$$.fragment),yPo=l(),jbe=a("p"),xPo=o("Register a new feature extractor for this class."),$io=l(),jd=a("h2"),w_=a("a"),Dbe=a("span"),F(Qk.$$.fragment),$Po=l(),Gbe=a("span"),kPo=o("AutoImageProcessor"),kio=l(),qo=a("div"),F(Wk.$$.fragment),SPo=l(),Uk=a("p"),RPo=o(`This is a generic image processor class that will be instantiated as one of the image processor classes of the
library when created with the `),Oz=a("a"),PPo=o("AutoImageProcessor.from_pretrained()"),BPo=o(" class method."),IPo=l(),Hk=a("p"),NPo=o("This class cannot be instantiated directly using "),Obe=a("code"),qPo=o("__init__()"),jPo=o(" (throws an error)."),DPo=l(),oo=a("div"),F(Jk.$$.fragment),GPo=l(),Vbe=a("p"),OPo=o("Instantiate one of the image processor classes of the library from a pretrained model vocabulary."),VPo=l(),fn=a("p"),XPo=o("The image processor class to instantiate is selected based on the "),Xbe=a("code"),zPo=o("model_type"),QPo=o(` property of the config object
(either passed as an argument or loaded from `),zbe=a("code"),WPo=o("pretrained_model_name_or_path"),UPo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qbe=a("code"),HPo=o("pretrained_model_name_or_path"),JPo=o(":"),YPo=l(),oe=a("ul"),A_=a("li"),Wbe=a("strong"),ZPo=o("beit"),KPo=o(" \u2014 "),Vz=a("a"),eBo=o("BeitImageProcessor"),oBo=o(" (BEiT model)"),rBo=l(),L_=a("li"),Ube=a("strong"),tBo=o("clip"),aBo=o(" \u2014 "),Xz=a("a"),nBo=o("CLIPImageProcessor"),sBo=o(" (CLIP model)"),lBo=l(),y_=a("li"),Hbe=a("strong"),iBo=o("convnext"),dBo=o(" \u2014 "),zz=a("a"),mBo=o("ConvNextImageProcessor"),cBo=o(" (ConvNeXT model)"),fBo=l(),x_=a("li"),Jbe=a("strong"),gBo=o("cvt"),hBo=o(" \u2014 "),Qz=a("a"),uBo=o("ConvNextImageProcessor"),pBo=o(" (CvT model)"),_Bo=l(),$_=a("li"),Ybe=a("strong"),bBo=o("data2vec-vision"),vBo=o(" \u2014 "),Wz=a("a"),FBo=o("BeitImageProcessor"),TBo=o(" (Data2VecVision model)"),MBo=l(),k_=a("li"),Zbe=a("strong"),EBo=o("deit"),CBo=o(" \u2014 "),Uz=a("a"),wBo=o("DeiTImageProcessor"),ABo=o(" (DeiT model)"),LBo=l(),S_=a("li"),Kbe=a("strong"),yBo=o("dpt"),xBo=o(" \u2014 "),Hz=a("a"),$Bo=o("DPTImageProcessor"),kBo=o(" (DPT model)"),SBo=l(),R_=a("li"),eve=a("strong"),RBo=o("flava"),PBo=o(" \u2014 "),Jz=a("a"),BBo=o("FlavaImageProcessor"),IBo=o(" (FLAVA model)"),NBo=l(),P_=a("li"),ove=a("strong"),qBo=o("glpn"),jBo=o(" \u2014 "),Yz=a("a"),DBo=o("GLPNImageProcessor"),GBo=o(" (GLPN model)"),OBo=l(),B_=a("li"),rve=a("strong"),VBo=o("groupvit"),XBo=o(" \u2014 "),Zz=a("a"),zBo=o("CLIPImageProcessor"),QBo=o(" (GroupViT model)"),WBo=l(),I_=a("li"),tve=a("strong"),UBo=o("imagegpt"),HBo=o(" \u2014 "),Kz=a("a"),JBo=o("ImageGPTImageProcessor"),YBo=o(" (ImageGPT model)"),ZBo=l(),N_=a("li"),ave=a("strong"),KBo=o("layoutlmv2"),eIo=o(" \u2014 "),eQ=a("a"),oIo=o("LayoutLMv2ImageProcessor"),rIo=o(" (LayoutLMv2 model)"),tIo=l(),q_=a("li"),nve=a("strong"),aIo=o("layoutlmv3"),nIo=o(" \u2014 "),oQ=a("a"),sIo=o("LayoutLMv3ImageProcessor"),lIo=o(" (LayoutLMv3 model)"),iIo=l(),j_=a("li"),sve=a("strong"),dIo=o("levit"),mIo=o(" \u2014 "),rQ=a("a"),cIo=o("LevitImageProcessor"),fIo=o(" (LeViT model)"),gIo=l(),D_=a("li"),lve=a("strong"),hIo=o("mobilenet_v2"),uIo=o(" \u2014 "),tQ=a("a"),pIo=o("MobileNetV2ImageProcessor"),_Io=o(" (MobileNetV2 model)"),bIo=l(),G_=a("li"),ive=a("strong"),vIo=o("mobilevit"),FIo=o(" \u2014 "),aQ=a("a"),TIo=o("MobileViTImageProcessor"),MIo=o(" (MobileViT model)"),EIo=l(),O_=a("li"),dve=a("strong"),CIo=o("perceiver"),wIo=o(" \u2014 "),nQ=a("a"),AIo=o("PerceiverImageProcessor"),LIo=o(" (Perceiver model)"),yIo=l(),V_=a("li"),mve=a("strong"),xIo=o("poolformer"),$Io=o(" \u2014 "),sQ=a("a"),kIo=o("PoolFormerImageProcessor"),SIo=o(" (PoolFormer model)"),RIo=l(),X_=a("li"),cve=a("strong"),PIo=o("regnet"),BIo=o(" \u2014 "),lQ=a("a"),IIo=o("ConvNextImageProcessor"),NIo=o(" (RegNet model)"),qIo=l(),z_=a("li"),fve=a("strong"),jIo=o("resnet"),DIo=o(" \u2014 "),iQ=a("a"),GIo=o("ConvNextImageProcessor"),OIo=o(" (ResNet model)"),VIo=l(),Q_=a("li"),gve=a("strong"),XIo=o("segformer"),zIo=o(" \u2014 "),dQ=a("a"),QIo=o("SegformerImageProcessor"),WIo=o(" (SegFormer model)"),UIo=l(),W_=a("li"),hve=a("strong"),HIo=o("swin"),JIo=o(" \u2014 "),mQ=a("a"),YIo=o("ViTImageProcessor"),ZIo=o(" (Swin Transformer model)"),KIo=l(),U_=a("li"),uve=a("strong"),eNo=o("swinv2"),oNo=o(" \u2014 "),cQ=a("a"),rNo=o("ViTImageProcessor"),tNo=o(" (Swin Transformer V2 model)"),aNo=l(),H_=a("li"),pve=a("strong"),nNo=o("van"),sNo=o(" \u2014 "),fQ=a("a"),lNo=o("ConvNextImageProcessor"),iNo=o(" (VAN model)"),dNo=l(),J_=a("li"),_ve=a("strong"),mNo=o("videomae"),cNo=o(" \u2014 "),gQ=a("a"),fNo=o("VideoMAEImageProcessor"),gNo=o(" (VideoMAE model)"),hNo=l(),Y_=a("li"),bve=a("strong"),uNo=o("vilt"),pNo=o(" \u2014 "),hQ=a("a"),_No=o("ViltImageProcessor"),bNo=o(" (ViLT model)"),vNo=l(),Z_=a("li"),vve=a("strong"),FNo=o("vit"),TNo=o(" \u2014 "),uQ=a("a"),MNo=o("ViTImageProcessor"),ENo=o(" (ViT model)"),CNo=l(),K_=a("li"),Fve=a("strong"),wNo=o("vit_mae"),ANo=o(" \u2014 "),pQ=a("a"),LNo=o("ViTImageProcessor"),yNo=o(" (ViTMAE model)"),xNo=l(),e1=a("li"),Tve=a("strong"),$No=o("vit_msn"),kNo=o(" \u2014 "),_Q=a("a"),SNo=o("ViTImageProcessor"),RNo=o(" (ViTMSN model)"),PNo=l(),o1=a("li"),Mve=a("strong"),BNo=o("xclip"),INo=o(" \u2014 "),bQ=a("a"),NNo=o("CLIPImageProcessor"),qNo=o(" (X-CLIP model)"),jNo=l(),F(r1.$$.fragment),DNo=l(),F(t1.$$.fragment),GNo=l(),a1=a("div"),F(Yk.$$.fragment),ONo=l(),Eve=a("p"),VNo=o("Register a new image processor for this class."),Sio=l(),Dd=a("h2"),n1=a("a"),Cve=a("span"),F(Zk.$$.fragment),XNo=l(),wve=a("span"),zNo=o("AutoProcessor"),Rio=l(),jo=a("div"),F(Kk.$$.fragment),QNo=l(),eS=a("p"),WNo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vQ=a("a"),UNo=o("AutoProcessor.from_pretrained()"),HNo=o(" class method."),JNo=l(),oS=a("p"),YNo=o("This class cannot be instantiated directly using "),Ave=a("code"),ZNo=o("__init__()"),KNo=o(" (throws an error)."),eqo=l(),ro=a("div"),F(rS.$$.fragment),oqo=l(),Lve=a("p"),rqo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),tqo=l(),Gd=a("p"),aqo=o("The processor class to instantiate is selected based on the "),yve=a("code"),nqo=o("model_type"),sqo=o(` property of the config object (either
passed as an argument or loaded from `),xve=a("code"),lqo=o("pretrained_model_name_or_path"),iqo=o(" if possible):"),dqo=l(),ie=a("ul"),s1=a("li"),$ve=a("strong"),mqo=o("clip"),cqo=o(" \u2014 "),FQ=a("a"),fqo=o("CLIPProcessor"),gqo=o(" (CLIP model)"),hqo=l(),l1=a("li"),kve=a("strong"),uqo=o("clipseg"),pqo=o(" \u2014 "),TQ=a("a"),_qo=o("CLIPSegProcessor"),bqo=o(" (CLIPSeg model)"),vqo=l(),i1=a("li"),Sve=a("strong"),Fqo=o("flava"),Tqo=o(" \u2014 "),MQ=a("a"),Mqo=o("FlavaProcessor"),Eqo=o(" (FLAVA model)"),Cqo=l(),d1=a("li"),Rve=a("strong"),wqo=o("groupvit"),Aqo=o(" \u2014 "),EQ=a("a"),Lqo=o("CLIPProcessor"),yqo=o(" (GroupViT model)"),xqo=l(),m1=a("li"),Pve=a("strong"),$qo=o("layoutlmv2"),kqo=o(" \u2014 "),CQ=a("a"),Sqo=o("LayoutLMv2Processor"),Rqo=o(" (LayoutLMv2 model)"),Pqo=l(),c1=a("li"),Bve=a("strong"),Bqo=o("layoutlmv3"),Iqo=o(" \u2014 "),wQ=a("a"),Nqo=o("LayoutLMv3Processor"),qqo=o(" (LayoutLMv3 model)"),jqo=l(),f1=a("li"),Ive=a("strong"),Dqo=o("layoutxlm"),Gqo=o(" \u2014 "),AQ=a("a"),Oqo=o("LayoutXLMProcessor"),Vqo=o(" (LayoutXLM model)"),Xqo=l(),g1=a("li"),Nve=a("strong"),zqo=o("markuplm"),Qqo=o(" \u2014 "),LQ=a("a"),Wqo=o("MarkupLMProcessor"),Uqo=o(" (MarkupLM model)"),Hqo=l(),h1=a("li"),qve=a("strong"),Jqo=o("owlvit"),Yqo=o(" \u2014 "),yQ=a("a"),Zqo=o("OwlViTProcessor"),Kqo=o(" (OWL-ViT model)"),ejo=l(),u1=a("li"),jve=a("strong"),ojo=o("sew"),rjo=o(" \u2014 "),xQ=a("a"),tjo=o("Wav2Vec2Processor"),ajo=o(" (SEW model)"),njo=l(),p1=a("li"),Dve=a("strong"),sjo=o("sew-d"),ljo=o(" \u2014 "),$Q=a("a"),ijo=o("Wav2Vec2Processor"),djo=o(" (SEW-D model)"),mjo=l(),_1=a("li"),Gve=a("strong"),cjo=o("speech_to_text"),fjo=o(" \u2014 "),kQ=a("a"),gjo=o("Speech2TextProcessor"),hjo=o(" (Speech2Text model)"),ujo=l(),b1=a("li"),Ove=a("strong"),pjo=o("speech_to_text_2"),_jo=o(" \u2014 "),SQ=a("a"),bjo=o("Speech2Text2Processor"),vjo=o(" (Speech2Text2 model)"),Fjo=l(),v1=a("li"),Vve=a("strong"),Tjo=o("trocr"),Mjo=o(" \u2014 "),RQ=a("a"),Ejo=o("TrOCRProcessor"),Cjo=o(" (TrOCR model)"),wjo=l(),F1=a("li"),Xve=a("strong"),Ajo=o("unispeech"),Ljo=o(" \u2014 "),PQ=a("a"),yjo=o("Wav2Vec2Processor"),xjo=o(" (UniSpeech model)"),$jo=l(),T1=a("li"),zve=a("strong"),kjo=o("unispeech-sat"),Sjo=o(" \u2014 "),BQ=a("a"),Rjo=o("Wav2Vec2Processor"),Pjo=o(" (UniSpeechSat model)"),Bjo=l(),M1=a("li"),Qve=a("strong"),Ijo=o("vilt"),Njo=o(" \u2014 "),IQ=a("a"),qjo=o("ViltProcessor"),jjo=o(" (ViLT model)"),Djo=l(),E1=a("li"),Wve=a("strong"),Gjo=o("vision-text-dual-encoder"),Ojo=o(" \u2014 "),NQ=a("a"),Vjo=o("VisionTextDualEncoderProcessor"),Xjo=o(" (VisionTextDualEncoder model)"),zjo=l(),C1=a("li"),Uve=a("strong"),Qjo=o("wav2vec2"),Wjo=o(" \u2014 "),qQ=a("a"),Ujo=o("Wav2Vec2Processor"),Hjo=o(" (Wav2Vec2 model)"),Jjo=l(),w1=a("li"),Hve=a("strong"),Yjo=o("wav2vec2-conformer"),Zjo=o(" \u2014 "),jQ=a("a"),Kjo=o("Wav2Vec2Processor"),eDo=o(" (Wav2Vec2-Conformer model)"),oDo=l(),A1=a("li"),Jve=a("strong"),rDo=o("wavlm"),tDo=o(" \u2014 "),DQ=a("a"),aDo=o("Wav2Vec2Processor"),nDo=o(" (WavLM model)"),sDo=l(),L1=a("li"),Yve=a("strong"),lDo=o("whisper"),iDo=o(" \u2014 "),GQ=a("a"),dDo=o("WhisperProcessor"),mDo=o(" (Whisper model)"),cDo=l(),y1=a("li"),Zve=a("strong"),fDo=o("xclip"),gDo=o(" \u2014 "),OQ=a("a"),hDo=o("XCLIPProcessor"),uDo=o(" (X-CLIP model)"),pDo=l(),F(x1.$$.fragment),_Do=l(),F($1.$$.fragment),bDo=l(),k1=a("div"),F(tS.$$.fragment),vDo=l(),Kve=a("p"),FDo=o("Register a new processor for this class."),Pio=l(),Od=a("h2"),S1=a("a"),eFe=a("span"),F(aS.$$.fragment),TDo=l(),oFe=a("span"),MDo=o("AutoModel"),Bio=l(),Do=a("div"),F(nS.$$.fragment),EDo=l(),Vd=a("p"),CDo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VQ=a("a"),wDo=o("from_pretrained()"),ADo=o(" class method or the "),XQ=a("a"),LDo=o("from_config()"),yDo=o(` class
method.`),xDo=l(),sS=a("p"),$Do=o("This class cannot be instantiated directly using "),rFe=a("code"),kDo=o("__init__()"),SDo=o(" (throws an error)."),RDo=l(),At=a("div"),F(lS.$$.fragment),PDo=l(),tFe=a("p"),BDo=o("Instantiates one of the base model classes of the library from a configuration."),IDo=l(),Xd=a("p"),NDo=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),qDo=o("not"),jDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=a("a"),DDo=o("from_pretrained()"),GDo=o(" to load the model weights."),ODo=l(),F(R1.$$.fragment),VDo=l(),to=a("div"),F(iS.$$.fragment),XDo=l(),nFe=a("p"),zDo=o("Instantiate one of the base model classes of the library from a pretrained model."),QDo=l(),gn=a("p"),WDo=o("The model class to instantiate is selected based on the "),sFe=a("code"),UDo=o("model_type"),HDo=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),JDo=o("pretrained_model_name_or_path"),YDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),ZDo=o("pretrained_model_name_or_path"),KDo=o(":"),eGo=l(),y=a("ul"),P1=a("li"),dFe=a("strong"),oGo=o("albert"),rGo=o(" \u2014 "),QQ=a("a"),tGo=o("AlbertModel"),aGo=o(" (ALBERT model)"),nGo=l(),B1=a("li"),mFe=a("strong"),sGo=o("bart"),lGo=o(" \u2014 "),WQ=a("a"),iGo=o("BartModel"),dGo=o(" (BART model)"),mGo=l(),I1=a("li"),cFe=a("strong"),cGo=o("beit"),fGo=o(" \u2014 "),UQ=a("a"),gGo=o("BeitModel"),hGo=o(" (BEiT model)"),uGo=l(),N1=a("li"),fFe=a("strong"),pGo=o("bert"),_Go=o(" \u2014 "),HQ=a("a"),bGo=o("BertModel"),vGo=o(" (BERT model)"),FGo=l(),q1=a("li"),gFe=a("strong"),TGo=o("bert-generation"),MGo=o(" \u2014 "),JQ=a("a"),EGo=o("BertGenerationEncoder"),CGo=o(" (Bert Generation model)"),wGo=l(),j1=a("li"),hFe=a("strong"),AGo=o("big_bird"),LGo=o(" \u2014 "),YQ=a("a"),yGo=o("BigBirdModel"),xGo=o(" (BigBird model)"),$Go=l(),D1=a("li"),uFe=a("strong"),kGo=o("bigbird_pegasus"),SGo=o(" \u2014 "),ZQ=a("a"),RGo=o("BigBirdPegasusModel"),PGo=o(" (BigBird-Pegasus model)"),BGo=l(),G1=a("li"),pFe=a("strong"),IGo=o("blenderbot"),NGo=o(" \u2014 "),KQ=a("a"),qGo=o("BlenderbotModel"),jGo=o(" (Blenderbot model)"),DGo=l(),O1=a("li"),_Fe=a("strong"),GGo=o("blenderbot-small"),OGo=o(" \u2014 "),eW=a("a"),VGo=o("BlenderbotSmallModel"),XGo=o(" (BlenderbotSmall model)"),zGo=l(),V1=a("li"),bFe=a("strong"),QGo=o("bloom"),WGo=o(" \u2014 "),oW=a("a"),UGo=o("BloomModel"),HGo=o(" (BLOOM model)"),JGo=l(),X1=a("li"),vFe=a("strong"),YGo=o("camembert"),ZGo=o(" \u2014 "),rW=a("a"),KGo=o("CamembertModel"),eOo=o(" (CamemBERT model)"),oOo=l(),z1=a("li"),FFe=a("strong"),rOo=o("canine"),tOo=o(" \u2014 "),tW=a("a"),aOo=o("CanineModel"),nOo=o(" (CANINE model)"),sOo=l(),Q1=a("li"),TFe=a("strong"),lOo=o("clip"),iOo=o(" \u2014 "),aW=a("a"),dOo=o("CLIPModel"),mOo=o(" (CLIP model)"),cOo=l(),W1=a("li"),MFe=a("strong"),fOo=o("clipseg"),gOo=o(" \u2014 "),nW=a("a"),hOo=o("CLIPSegModel"),uOo=o(" (CLIPSeg model)"),pOo=l(),U1=a("li"),EFe=a("strong"),_Oo=o("codegen"),bOo=o(" \u2014 "),sW=a("a"),vOo=o("CodeGenModel"),FOo=o(" (CodeGen model)"),TOo=l(),H1=a("li"),CFe=a("strong"),MOo=o("conditional_detr"),EOo=o(" \u2014 "),lW=a("a"),COo=o("ConditionalDetrModel"),wOo=o(" (Conditional DETR model)"),AOo=l(),J1=a("li"),wFe=a("strong"),LOo=o("convbert"),yOo=o(" \u2014 "),iW=a("a"),xOo=o("ConvBertModel"),$Oo=o(" (ConvBERT model)"),kOo=l(),Y1=a("li"),AFe=a("strong"),SOo=o("convnext"),ROo=o(" \u2014 "),dW=a("a"),POo=o("ConvNextModel"),BOo=o(" (ConvNeXT model)"),IOo=l(),Z1=a("li"),LFe=a("strong"),NOo=o("ctrl"),qOo=o(" \u2014 "),mW=a("a"),jOo=o("CTRLModel"),DOo=o(" (CTRL model)"),GOo=l(),K1=a("li"),yFe=a("strong"),OOo=o("cvt"),VOo=o(" \u2014 "),cW=a("a"),XOo=o("CvtModel"),zOo=o(" (CvT model)"),QOo=l(),e2=a("li"),xFe=a("strong"),WOo=o("data2vec-audio"),UOo=o(" \u2014 "),fW=a("a"),HOo=o("Data2VecAudioModel"),JOo=o(" (Data2VecAudio model)"),YOo=l(),o2=a("li"),$Fe=a("strong"),ZOo=o("data2vec-text"),KOo=o(" \u2014 "),gW=a("a"),eVo=o("Data2VecTextModel"),oVo=o(" (Data2VecText model)"),rVo=l(),r2=a("li"),kFe=a("strong"),tVo=o("data2vec-vision"),aVo=o(" \u2014 "),hW=a("a"),nVo=o("Data2VecVisionModel"),sVo=o(" (Data2VecVision model)"),lVo=l(),t2=a("li"),SFe=a("strong"),iVo=o("deberta"),dVo=o(" \u2014 "),uW=a("a"),mVo=o("DebertaModel"),cVo=o(" (DeBERTa model)"),fVo=l(),a2=a("li"),RFe=a("strong"),gVo=o("deberta-v2"),hVo=o(" \u2014 "),pW=a("a"),uVo=o("DebertaV2Model"),pVo=o(" (DeBERTa-v2 model)"),_Vo=l(),n2=a("li"),PFe=a("strong"),bVo=o("decision_transformer"),vVo=o(" \u2014 "),_W=a("a"),FVo=o("DecisionTransformerModel"),TVo=o(" (Decision Transformer model)"),MVo=l(),s2=a("li"),BFe=a("strong"),EVo=o("deformable_detr"),CVo=o(" \u2014 "),bW=a("a"),wVo=o("DeformableDetrModel"),AVo=o(" (Deformable DETR model)"),LVo=l(),l2=a("li"),IFe=a("strong"),yVo=o("deit"),xVo=o(" \u2014 "),vW=a("a"),$Vo=o("DeiTModel"),kVo=o(" (DeiT model)"),SVo=l(),i2=a("li"),NFe=a("strong"),RVo=o("detr"),PVo=o(" \u2014 "),FW=a("a"),BVo=o("DetrModel"),IVo=o(" (DETR model)"),NVo=l(),d2=a("li"),qFe=a("strong"),qVo=o("distilbert"),jVo=o(" \u2014 "),TW=a("a"),DVo=o("DistilBertModel"),GVo=o(" (DistilBERT model)"),OVo=l(),m2=a("li"),jFe=a("strong"),VVo=o("donut-swin"),XVo=o(" \u2014 "),MW=a("a"),zVo=o("DonutSwinModel"),QVo=o(" (DonutSwin model)"),WVo=l(),c2=a("li"),DFe=a("strong"),UVo=o("dpr"),HVo=o(" \u2014 "),EW=a("a"),JVo=o("DPRQuestionEncoder"),YVo=o(" (DPR model)"),ZVo=l(),f2=a("li"),GFe=a("strong"),KVo=o("dpt"),eXo=o(" \u2014 "),CW=a("a"),oXo=o("DPTModel"),rXo=o(" (DPT model)"),tXo=l(),g2=a("li"),OFe=a("strong"),aXo=o("electra"),nXo=o(" \u2014 "),wW=a("a"),sXo=o("ElectraModel"),lXo=o(" (ELECTRA model)"),iXo=l(),h2=a("li"),VFe=a("strong"),dXo=o("ernie"),mXo=o(" \u2014 "),AW=a("a"),cXo=o("ErnieModel"),fXo=o(" (ERNIE model)"),gXo=l(),u2=a("li"),XFe=a("strong"),hXo=o("esm"),uXo=o(" \u2014 "),LW=a("a"),pXo=o("EsmModel"),_Xo=o(" (ESM model)"),bXo=l(),p2=a("li"),zFe=a("strong"),vXo=o("flaubert"),FXo=o(" \u2014 "),yW=a("a"),TXo=o("FlaubertModel"),MXo=o(" (FlauBERT model)"),EXo=l(),_2=a("li"),QFe=a("strong"),CXo=o("flava"),wXo=o(" \u2014 "),xW=a("a"),AXo=o("FlavaModel"),LXo=o(" (FLAVA model)"),yXo=l(),b2=a("li"),WFe=a("strong"),xXo=o("fnet"),$Xo=o(" \u2014 "),$W=a("a"),kXo=o("FNetModel"),SXo=o(" (FNet model)"),RXo=l(),v2=a("li"),UFe=a("strong"),PXo=o("fsmt"),BXo=o(" \u2014 "),kW=a("a"),IXo=o("FSMTModel"),NXo=o(" (FairSeq Machine-Translation model)"),qXo=l(),ql=a("li"),HFe=a("strong"),jXo=o("funnel"),DXo=o(" \u2014 "),SW=a("a"),GXo=o("FunnelModel"),OXo=o(" or "),RW=a("a"),VXo=o("FunnelBaseModel"),XXo=o(" (Funnel Transformer model)"),zXo=l(),F2=a("li"),JFe=a("strong"),QXo=o("glpn"),WXo=o(" \u2014 "),PW=a("a"),UXo=o("GLPNModel"),HXo=o(" (GLPN model)"),JXo=l(),T2=a("li"),YFe=a("strong"),YXo=o("gpt2"),ZXo=o(" \u2014 "),BW=a("a"),KXo=o("GPT2Model"),ezo=o(" (OpenAI GPT-2 model)"),ozo=l(),M2=a("li"),ZFe=a("strong"),rzo=o("gpt_neo"),tzo=o(" \u2014 "),IW=a("a"),azo=o("GPTNeoModel"),nzo=o(" (GPT Neo model)"),szo=l(),E2=a("li"),KFe=a("strong"),lzo=o("gpt_neox"),izo=o(" \u2014 "),NW=a("a"),dzo=o("GPTNeoXModel"),mzo=o(" (GPT NeoX model)"),czo=l(),C2=a("li"),eTe=a("strong"),fzo=o("gpt_neox_japanese"),gzo=o(" \u2014 "),qW=a("a"),hzo=o("GPTNeoXJapaneseModel"),uzo=o(" (GPT NeoX Japanese model)"),pzo=l(),w2=a("li"),oTe=a("strong"),_zo=o("gptj"),bzo=o(" \u2014 "),jW=a("a"),vzo=o("GPTJModel"),Fzo=o(" (GPT-J model)"),Tzo=l(),A2=a("li"),rTe=a("strong"),Mzo=o("groupvit"),Ezo=o(" \u2014 "),DW=a("a"),Czo=o("GroupViTModel"),wzo=o(" (GroupViT model)"),Azo=l(),L2=a("li"),tTe=a("strong"),Lzo=o("hubert"),yzo=o(" \u2014 "),GW=a("a"),xzo=o("HubertModel"),$zo=o(" (Hubert model)"),kzo=l(),y2=a("li"),aTe=a("strong"),Szo=o("ibert"),Rzo=o(" \u2014 "),OW=a("a"),Pzo=o("IBertModel"),Bzo=o(" (I-BERT model)"),Izo=l(),x2=a("li"),nTe=a("strong"),Nzo=o("imagegpt"),qzo=o(" \u2014 "),VW=a("a"),jzo=o("ImageGPTModel"),Dzo=o(" (ImageGPT model)"),Gzo=l(),$2=a("li"),sTe=a("strong"),Ozo=o("jukebox"),Vzo=o(" \u2014 "),XW=a("a"),Xzo=o("JukeboxModel"),zzo=o(" (Jukebox model)"),Qzo=l(),k2=a("li"),lTe=a("strong"),Wzo=o("layoutlm"),Uzo=o(" \u2014 "),zW=a("a"),Hzo=o("LayoutLMModel"),Jzo=o(" (LayoutLM model)"),Yzo=l(),S2=a("li"),iTe=a("strong"),Zzo=o("layoutlmv2"),Kzo=o(" \u2014 "),QW=a("a"),eQo=o("LayoutLMv2Model"),oQo=o(" (LayoutLMv2 model)"),rQo=l(),R2=a("li"),dTe=a("strong"),tQo=o("layoutlmv3"),aQo=o(" \u2014 "),WW=a("a"),nQo=o("LayoutLMv3Model"),sQo=o(" (LayoutLMv3 model)"),lQo=l(),P2=a("li"),mTe=a("strong"),iQo=o("led"),dQo=o(" \u2014 "),UW=a("a"),mQo=o("LEDModel"),cQo=o(" (LED model)"),fQo=l(),B2=a("li"),cTe=a("strong"),gQo=o("levit"),hQo=o(" \u2014 "),HW=a("a"),uQo=o("LevitModel"),pQo=o(" (LeViT model)"),_Qo=l(),I2=a("li"),fTe=a("strong"),bQo=o("lilt"),vQo=o(" \u2014 "),JW=a("a"),FQo=o("LiltModel"),TQo=o(" (LiLT model)"),MQo=l(),N2=a("li"),gTe=a("strong"),EQo=o("longformer"),CQo=o(" \u2014 "),YW=a("a"),wQo=o("LongformerModel"),AQo=o(" (Longformer model)"),LQo=l(),q2=a("li"),hTe=a("strong"),yQo=o("longt5"),xQo=o(" \u2014 "),ZW=a("a"),$Qo=o("LongT5Model"),kQo=o(" (LongT5 model)"),SQo=l(),j2=a("li"),uTe=a("strong"),RQo=o("luke"),PQo=o(" \u2014 "),KW=a("a"),BQo=o("LukeModel"),IQo=o(" (LUKE model)"),NQo=l(),D2=a("li"),pTe=a("strong"),qQo=o("lxmert"),jQo=o(" \u2014 "),eU=a("a"),DQo=o("LxmertModel"),GQo=o(" (LXMERT model)"),OQo=l(),G2=a("li"),_Te=a("strong"),VQo=o("m2m_100"),XQo=o(" \u2014 "),oU=a("a"),zQo=o("M2M100Model"),QQo=o(" (M2M100 model)"),WQo=l(),O2=a("li"),bTe=a("strong"),UQo=o("marian"),HQo=o(" \u2014 "),rU=a("a"),JQo=o("MarianModel"),YQo=o(" (Marian model)"),ZQo=l(),V2=a("li"),vTe=a("strong"),KQo=o("markuplm"),eWo=o(" \u2014 "),tU=a("a"),oWo=o("MarkupLMModel"),rWo=o(" (MarkupLM model)"),tWo=l(),X2=a("li"),FTe=a("strong"),aWo=o("maskformer"),nWo=o(" \u2014 "),aU=a("a"),sWo=o("MaskFormerModel"),lWo=o(" (MaskFormer model)"),iWo=l(),z2=a("li"),TTe=a("strong"),dWo=o("mbart"),mWo=o(" \u2014 "),nU=a("a"),cWo=o("MBartModel"),fWo=o(" (mBART model)"),gWo=l(),Q2=a("li"),MTe=a("strong"),hWo=o("mctct"),uWo=o(" \u2014 "),sU=a("a"),pWo=o("MCTCTModel"),_Wo=o(" (M-CTC-T model)"),bWo=l(),W2=a("li"),ETe=a("strong"),vWo=o("megatron-bert"),FWo=o(" \u2014 "),lU=a("a"),TWo=o("MegatronBertModel"),MWo=o(" (Megatron-BERT model)"),EWo=l(),U2=a("li"),CTe=a("strong"),CWo=o("mobilebert"),wWo=o(" \u2014 "),iU=a("a"),AWo=o("MobileBertModel"),LWo=o(" (MobileBERT model)"),yWo=l(),H2=a("li"),wTe=a("strong"),xWo=o("mobilenet_v2"),$Wo=o(" \u2014 "),dU=a("a"),kWo=o("MobileNetV2Model"),SWo=o(" (MobileNetV2 model)"),RWo=l(),J2=a("li"),ATe=a("strong"),PWo=o("mobilevit"),BWo=o(" \u2014 "),mU=a("a"),IWo=o("MobileViTModel"),NWo=o(" (MobileViT model)"),qWo=l(),Y2=a("li"),LTe=a("strong"),jWo=o("mpnet"),DWo=o(" \u2014 "),cU=a("a"),GWo=o("MPNetModel"),OWo=o(" (MPNet model)"),VWo=l(),Z2=a("li"),yTe=a("strong"),XWo=o("mt5"),zWo=o(" \u2014 "),fU=a("a"),QWo=o("MT5Model"),WWo=o(" (MT5 model)"),UWo=l(),K2=a("li"),xTe=a("strong"),HWo=o("mvp"),JWo=o(" \u2014 "),gU=a("a"),YWo=o("MvpModel"),ZWo=o(" (MVP model)"),KWo=l(),eb=a("li"),$Te=a("strong"),eUo=o("nezha"),oUo=o(" \u2014 "),hU=a("a"),rUo=o("NezhaModel"),tUo=o(" (Nezha model)"),aUo=l(),ob=a("li"),kTe=a("strong"),nUo=o("nllb"),sUo=o(" \u2014 "),uU=a("a"),lUo=o("M2M100Model"),iUo=o(" (NLLB model)"),dUo=l(),rb=a("li"),STe=a("strong"),mUo=o("nystromformer"),cUo=o(" \u2014 "),pU=a("a"),fUo=o("NystromformerModel"),gUo=o(" (Nystr\xF6mformer model)"),hUo=l(),tb=a("li"),RTe=a("strong"),uUo=o("openai-gpt"),pUo=o(" \u2014 "),_U=a("a"),_Uo=o("OpenAIGPTModel"),bUo=o(" (OpenAI GPT model)"),vUo=l(),ab=a("li"),PTe=a("strong"),FUo=o("opt"),TUo=o(" \u2014 "),bU=a("a"),MUo=o("OPTModel"),EUo=o(" (OPT model)"),CUo=l(),nb=a("li"),BTe=a("strong"),wUo=o("owlvit"),AUo=o(" \u2014 "),vU=a("a"),LUo=o("OwlViTModel"),yUo=o(" (OWL-ViT model)"),xUo=l(),sb=a("li"),ITe=a("strong"),$Uo=o("pegasus"),kUo=o(" \u2014 "),FU=a("a"),SUo=o("PegasusModel"),RUo=o(" (Pegasus model)"),PUo=l(),lb=a("li"),NTe=a("strong"),BUo=o("pegasus_x"),IUo=o(" \u2014 "),TU=a("a"),NUo=o("PegasusXModel"),qUo=o(" (PEGASUS-X model)"),jUo=l(),ib=a("li"),qTe=a("strong"),DUo=o("perceiver"),GUo=o(" \u2014 "),MU=a("a"),OUo=o("PerceiverModel"),VUo=o(" (Perceiver model)"),XUo=l(),db=a("li"),jTe=a("strong"),zUo=o("plbart"),QUo=o(" \u2014 "),EU=a("a"),WUo=o("PLBartModel"),UUo=o(" (PLBart model)"),HUo=l(),mb=a("li"),DTe=a("strong"),JUo=o("poolformer"),YUo=o(" \u2014 "),CU=a("a"),ZUo=o("PoolFormerModel"),KUo=o(" (PoolFormer model)"),eHo=l(),cb=a("li"),GTe=a("strong"),oHo=o("prophetnet"),rHo=o(" \u2014 "),wU=a("a"),tHo=o("ProphetNetModel"),aHo=o(" (ProphetNet model)"),nHo=l(),fb=a("li"),OTe=a("strong"),sHo=o("qdqbert"),lHo=o(" \u2014 "),AU=a("a"),iHo=o("QDQBertModel"),dHo=o(" (QDQBert model)"),mHo=l(),gb=a("li"),VTe=a("strong"),cHo=o("reformer"),fHo=o(" \u2014 "),LU=a("a"),gHo=o("ReformerModel"),hHo=o(" (Reformer model)"),uHo=l(),hb=a("li"),XTe=a("strong"),pHo=o("regnet"),_Ho=o(" \u2014 "),yU=a("a"),bHo=o("RegNetModel"),vHo=o(" (RegNet model)"),FHo=l(),ub=a("li"),zTe=a("strong"),THo=o("rembert"),MHo=o(" \u2014 "),xU=a("a"),EHo=o("RemBertModel"),CHo=o(" (RemBERT model)"),wHo=l(),pb=a("li"),QTe=a("strong"),AHo=o("resnet"),LHo=o(" \u2014 "),$U=a("a"),yHo=o("ResNetModel"),xHo=o(" (ResNet model)"),$Ho=l(),_b=a("li"),WTe=a("strong"),kHo=o("retribert"),SHo=o(" \u2014 "),kU=a("a"),RHo=o("RetriBertModel"),PHo=o(" (RetriBERT model)"),BHo=l(),bb=a("li"),UTe=a("strong"),IHo=o("roberta"),NHo=o(" \u2014 "),SU=a("a"),qHo=o("RobertaModel"),jHo=o(" (RoBERTa model)"),DHo=l(),vb=a("li"),HTe=a("strong"),GHo=o("roc_bert"),OHo=o(" \u2014 "),RU=a("a"),VHo=o("RoCBertModel"),XHo=o(" (RoCBert model)"),zHo=l(),Fb=a("li"),JTe=a("strong"),QHo=o("roformer"),WHo=o(" \u2014 "),PU=a("a"),UHo=o("RoFormerModel"),HHo=o(" (RoFormer model)"),JHo=l(),Tb=a("li"),YTe=a("strong"),YHo=o("segformer"),ZHo=o(" \u2014 "),BU=a("a"),KHo=o("SegformerModel"),eJo=o(" (SegFormer model)"),oJo=l(),Mb=a("li"),ZTe=a("strong"),rJo=o("sew"),tJo=o(" \u2014 "),IU=a("a"),aJo=o("SEWModel"),nJo=o(" (SEW model)"),sJo=l(),Eb=a("li"),KTe=a("strong"),lJo=o("sew-d"),iJo=o(" \u2014 "),NU=a("a"),dJo=o("SEWDModel"),mJo=o(" (SEW-D model)"),cJo=l(),Cb=a("li"),eMe=a("strong"),fJo=o("speech_to_text"),gJo=o(" \u2014 "),qU=a("a"),hJo=o("Speech2TextModel"),uJo=o(" (Speech2Text model)"),pJo=l(),wb=a("li"),oMe=a("strong"),_Jo=o("splinter"),bJo=o(" \u2014 "),jU=a("a"),vJo=o("SplinterModel"),FJo=o(" (Splinter model)"),TJo=l(),Ab=a("li"),rMe=a("strong"),MJo=o("squeezebert"),EJo=o(" \u2014 "),DU=a("a"),CJo=o("SqueezeBertModel"),wJo=o(" (SqueezeBERT model)"),AJo=l(),Lb=a("li"),tMe=a("strong"),LJo=o("swin"),yJo=o(" \u2014 "),GU=a("a"),xJo=o("SwinModel"),$Jo=o(" (Swin Transformer model)"),kJo=l(),yb=a("li"),aMe=a("strong"),SJo=o("swinv2"),RJo=o(" \u2014 "),OU=a("a"),PJo=o("Swinv2Model"),BJo=o(" (Swin Transformer V2 model)"),IJo=l(),xb=a("li"),nMe=a("strong"),NJo=o("switch_transformers"),qJo=o(" \u2014 "),VU=a("a"),jJo=o("SwitchTransformersModel"),DJo=o(" (SwitchTransformers model)"),GJo=l(),$b=a("li"),sMe=a("strong"),OJo=o("t5"),VJo=o(" \u2014 "),XU=a("a"),XJo=o("T5Model"),zJo=o(" (T5 model)"),QJo=l(),kb=a("li"),lMe=a("strong"),WJo=o("table-transformer"),UJo=o(" \u2014 "),zU=a("a"),HJo=o("TableTransformerModel"),JJo=o(" (Table Transformer model)"),YJo=l(),Sb=a("li"),iMe=a("strong"),ZJo=o("tapas"),KJo=o(" \u2014 "),QU=a("a"),eYo=o("TapasModel"),oYo=o(" (TAPAS model)"),rYo=l(),Rb=a("li"),dMe=a("strong"),tYo=o("time_series_transformer"),aYo=o(" \u2014 "),WU=a("a"),nYo=o("TimeSeriesTransformerModel"),sYo=o(" (Time Series Transformer model)"),lYo=l(),Pb=a("li"),mMe=a("strong"),iYo=o("trajectory_transformer"),dYo=o(" \u2014 "),UU=a("a"),mYo=o("TrajectoryTransformerModel"),cYo=o(" (Trajectory Transformer model)"),fYo=l(),Bb=a("li"),cMe=a("strong"),gYo=o("transfo-xl"),hYo=o(" \u2014 "),HU=a("a"),uYo=o("TransfoXLModel"),pYo=o(" (Transformer-XL model)"),_Yo=l(),Ib=a("li"),fMe=a("strong"),bYo=o("unispeech"),vYo=o(" \u2014 "),JU=a("a"),FYo=o("UniSpeechModel"),TYo=o(" (UniSpeech model)"),MYo=l(),Nb=a("li"),gMe=a("strong"),EYo=o("unispeech-sat"),CYo=o(" \u2014 "),YU=a("a"),wYo=o("UniSpeechSatModel"),AYo=o(" (UniSpeechSat model)"),LYo=l(),qb=a("li"),hMe=a("strong"),yYo=o("van"),xYo=o(" \u2014 "),ZU=a("a"),$Yo=o("VanModel"),kYo=o(" (VAN model)"),SYo=l(),jb=a("li"),uMe=a("strong"),RYo=o("videomae"),PYo=o(" \u2014 "),KU=a("a"),BYo=o("VideoMAEModel"),IYo=o(" (VideoMAE model)"),NYo=l(),Db=a("li"),pMe=a("strong"),qYo=o("vilt"),jYo=o(" \u2014 "),eH=a("a"),DYo=o("ViltModel"),GYo=o(" (ViLT model)"),OYo=l(),Gb=a("li"),_Me=a("strong"),VYo=o("vision-text-dual-encoder"),XYo=o(" \u2014 "),oH=a("a"),zYo=o("VisionTextDualEncoderModel"),QYo=o(" (VisionTextDualEncoder model)"),WYo=l(),Ob=a("li"),bMe=a("strong"),UYo=o("visual_bert"),HYo=o(" \u2014 "),rH=a("a"),JYo=o("VisualBertModel"),YYo=o(" (VisualBERT model)"),ZYo=l(),Vb=a("li"),vMe=a("strong"),KYo=o("vit"),eZo=o(" \u2014 "),tH=a("a"),oZo=o("ViTModel"),rZo=o(" (ViT model)"),tZo=l(),Xb=a("li"),FMe=a("strong"),aZo=o("vit_mae"),nZo=o(" \u2014 "),aH=a("a"),sZo=o("ViTMAEModel"),lZo=o(" (ViTMAE model)"),iZo=l(),zb=a("li"),TMe=a("strong"),dZo=o("vit_msn"),mZo=o(" \u2014 "),nH=a("a"),cZo=o("ViTMSNModel"),fZo=o(" (ViTMSN model)"),gZo=l(),Qb=a("li"),MMe=a("strong"),hZo=o("wav2vec2"),uZo=o(" \u2014 "),sH=a("a"),pZo=o("Wav2Vec2Model"),_Zo=o(" (Wav2Vec2 model)"),bZo=l(),Wb=a("li"),EMe=a("strong"),vZo=o("wav2vec2-conformer"),FZo=o(" \u2014 "),lH=a("a"),TZo=o("Wav2Vec2ConformerModel"),MZo=o(" (Wav2Vec2-Conformer model)"),EZo=l(),Ub=a("li"),CMe=a("strong"),CZo=o("wavlm"),wZo=o(" \u2014 "),iH=a("a"),AZo=o("WavLMModel"),LZo=o(" (WavLM model)"),yZo=l(),Hb=a("li"),wMe=a("strong"),xZo=o("whisper"),$Zo=o(" \u2014 "),dH=a("a"),kZo=o("WhisperModel"),SZo=o(" (Whisper model)"),RZo=l(),Jb=a("li"),AMe=a("strong"),PZo=o("xclip"),BZo=o(" \u2014 "),mH=a("a"),IZo=o("XCLIPModel"),NZo=o(" (X-CLIP model)"),qZo=l(),Yb=a("li"),LMe=a("strong"),jZo=o("xglm"),DZo=o(" \u2014 "),cH=a("a"),GZo=o("XGLMModel"),OZo=o(" (XGLM model)"),VZo=l(),Zb=a("li"),yMe=a("strong"),XZo=o("xlm"),zZo=o(" \u2014 "),fH=a("a"),QZo=o("XLMModel"),WZo=o(" (XLM model)"),UZo=l(),Kb=a("li"),xMe=a("strong"),HZo=o("xlm-prophetnet"),JZo=o(" \u2014 "),gH=a("a"),YZo=o("XLMProphetNetModel"),ZZo=o(" (XLM-ProphetNet model)"),KZo=l(),ev=a("li"),$Me=a("strong"),eKo=o("xlm-roberta"),oKo=o(" \u2014 "),hH=a("a"),rKo=o("XLMRobertaModel"),tKo=o(" (XLM-RoBERTa model)"),aKo=l(),ov=a("li"),kMe=a("strong"),nKo=o("xlm-roberta-xl"),sKo=o(" \u2014 "),uH=a("a"),lKo=o("XLMRobertaXLModel"),iKo=o(" (XLM-RoBERTa-XL model)"),dKo=l(),rv=a("li"),SMe=a("strong"),mKo=o("xlnet"),cKo=o(" \u2014 "),pH=a("a"),fKo=o("XLNetModel"),gKo=o(" (XLNet model)"),hKo=l(),tv=a("li"),RMe=a("strong"),uKo=o("yolos"),pKo=o(" \u2014 "),_H=a("a"),_Ko=o("YolosModel"),bKo=o(" (YOLOS model)"),vKo=l(),av=a("li"),PMe=a("strong"),FKo=o("yoso"),TKo=o(" \u2014 "),bH=a("a"),MKo=o("YosoModel"),EKo=o(" (YOSO model)"),CKo=l(),nv=a("p"),wKo=o("The model is set in evaluation mode by default using "),BMe=a("code"),AKo=o("model.eval()"),LKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IMe=a("code"),yKo=o("model.train()"),xKo=l(),F(sv.$$.fragment),Iio=l(),zd=a("h2"),lv=a("a"),NMe=a("span"),F(dS.$$.fragment),$Ko=l(),qMe=a("span"),kKo=o("AutoModelForPreTraining"),Nio=l(),Go=a("div"),F(mS.$$.fragment),SKo=l(),Qd=a("p"),RKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vH=a("a"),PKo=o("from_pretrained()"),BKo=o(" class method or the "),FH=a("a"),IKo=o("from_config()"),NKo=o(` class
method.`),qKo=l(),cS=a("p"),jKo=o("This class cannot be instantiated directly using "),jMe=a("code"),DKo=o("__init__()"),GKo=o(" (throws an error)."),OKo=l(),Lt=a("div"),F(fS.$$.fragment),VKo=l(),DMe=a("p"),XKo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),zKo=l(),Wd=a("p"),QKo=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),WKo=o("not"),UKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),HKo=o("from_pretrained()"),JKo=o(" to load the model weights."),YKo=l(),F(iv.$$.fragment),ZKo=l(),ao=a("div"),F(gS.$$.fragment),KKo=l(),OMe=a("p"),eer=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),oer=l(),hn=a("p"),rer=o("The model class to instantiate is selected based on the "),VMe=a("code"),ter=o("model_type"),aer=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),ner=o("pretrained_model_name_or_path"),ser=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),ler=o("pretrained_model_name_or_path"),ier=o(":"),der=l(),G=a("ul"),dv=a("li"),QMe=a("strong"),mer=o("albert"),cer=o(" \u2014 "),MH=a("a"),fer=o("AlbertForPreTraining"),ger=o(" (ALBERT model)"),her=l(),mv=a("li"),WMe=a("strong"),uer=o("bart"),per=o(" \u2014 "),EH=a("a"),_er=o("BartForConditionalGeneration"),ber=o(" (BART model)"),ver=l(),cv=a("li"),UMe=a("strong"),Fer=o("bert"),Ter=o(" \u2014 "),CH=a("a"),Mer=o("BertForPreTraining"),Eer=o(" (BERT model)"),Cer=l(),fv=a("li"),HMe=a("strong"),wer=o("big_bird"),Aer=o(" \u2014 "),wH=a("a"),Ler=o("BigBirdForPreTraining"),yer=o(" (BigBird model)"),xer=l(),gv=a("li"),JMe=a("strong"),$er=o("bloom"),ker=o(" \u2014 "),AH=a("a"),Ser=o("BloomForCausalLM"),Rer=o(" (BLOOM model)"),Per=l(),hv=a("li"),YMe=a("strong"),Ber=o("camembert"),Ier=o(" \u2014 "),LH=a("a"),Ner=o("CamembertForMaskedLM"),qer=o(" (CamemBERT model)"),jer=l(),uv=a("li"),ZMe=a("strong"),Der=o("ctrl"),Ger=o(" \u2014 "),yH=a("a"),Oer=o("CTRLLMHeadModel"),Ver=o(" (CTRL model)"),Xer=l(),pv=a("li"),KMe=a("strong"),zer=o("data2vec-text"),Qer=o(" \u2014 "),xH=a("a"),Wer=o("Data2VecTextForMaskedLM"),Uer=o(" (Data2VecText model)"),Her=l(),_v=a("li"),eEe=a("strong"),Jer=o("deberta"),Yer=o(" \u2014 "),$H=a("a"),Zer=o("DebertaForMaskedLM"),Ker=o(" (DeBERTa model)"),eor=l(),bv=a("li"),oEe=a("strong"),oor=o("deberta-v2"),ror=o(" \u2014 "),kH=a("a"),tor=o("DebertaV2ForMaskedLM"),aor=o(" (DeBERTa-v2 model)"),nor=l(),vv=a("li"),rEe=a("strong"),sor=o("distilbert"),lor=o(" \u2014 "),SH=a("a"),ior=o("DistilBertForMaskedLM"),dor=o(" (DistilBERT model)"),mor=l(),Fv=a("li"),tEe=a("strong"),cor=o("electra"),gor=o(" \u2014 "),RH=a("a"),hor=o("ElectraForPreTraining"),uor=o(" (ELECTRA model)"),por=l(),Tv=a("li"),aEe=a("strong"),_or=o("ernie"),bor=o(" \u2014 "),PH=a("a"),vor=o("ErnieForPreTraining"),For=o(" (ERNIE model)"),Tor=l(),Mv=a("li"),nEe=a("strong"),Mor=o("flaubert"),Eor=o(" \u2014 "),BH=a("a"),Cor=o("FlaubertWithLMHeadModel"),wor=o(" (FlauBERT model)"),Aor=l(),Ev=a("li"),sEe=a("strong"),Lor=o("flava"),yor=o(" \u2014 "),IH=a("a"),xor=o("FlavaForPreTraining"),$or=o(" (FLAVA model)"),kor=l(),Cv=a("li"),lEe=a("strong"),Sor=o("fnet"),Ror=o(" \u2014 "),NH=a("a"),Por=o("FNetForPreTraining"),Bor=o(" (FNet model)"),Ior=l(),wv=a("li"),iEe=a("strong"),Nor=o("fsmt"),qor=o(" \u2014 "),qH=a("a"),jor=o("FSMTForConditionalGeneration"),Dor=o(" (FairSeq Machine-Translation model)"),Gor=l(),Av=a("li"),dEe=a("strong"),Oor=o("funnel"),Vor=o(" \u2014 "),jH=a("a"),Xor=o("FunnelForPreTraining"),zor=o(" (Funnel Transformer model)"),Qor=l(),Lv=a("li"),mEe=a("strong"),Wor=o("gpt2"),Uor=o(" \u2014 "),DH=a("a"),Hor=o("GPT2LMHeadModel"),Jor=o(" (OpenAI GPT-2 model)"),Yor=l(),yv=a("li"),cEe=a("strong"),Zor=o("ibert"),Kor=o(" \u2014 "),GH=a("a"),err=o("IBertForMaskedLM"),orr=o(" (I-BERT model)"),rrr=l(),xv=a("li"),fEe=a("strong"),trr=o("layoutlm"),arr=o(" \u2014 "),OH=a("a"),nrr=o("LayoutLMForMaskedLM"),srr=o(" (LayoutLM model)"),lrr=l(),$v=a("li"),gEe=a("strong"),irr=o("longformer"),drr=o(" \u2014 "),VH=a("a"),mrr=o("LongformerForMaskedLM"),crr=o(" (Longformer model)"),frr=l(),kv=a("li"),hEe=a("strong"),grr=o("luke"),hrr=o(" \u2014 "),XH=a("a"),urr=o("LukeForMaskedLM"),prr=o(" (LUKE model)"),_rr=l(),Sv=a("li"),uEe=a("strong"),brr=o("lxmert"),vrr=o(" \u2014 "),zH=a("a"),Frr=o("LxmertForPreTraining"),Trr=o(" (LXMERT model)"),Mrr=l(),Rv=a("li"),pEe=a("strong"),Err=o("megatron-bert"),Crr=o(" \u2014 "),QH=a("a"),wrr=o("MegatronBertForPreTraining"),Arr=o(" (Megatron-BERT model)"),Lrr=l(),Pv=a("li"),_Ee=a("strong"),yrr=o("mobilebert"),xrr=o(" \u2014 "),WH=a("a"),$rr=o("MobileBertForPreTraining"),krr=o(" (MobileBERT model)"),Srr=l(),Bv=a("li"),bEe=a("strong"),Rrr=o("mpnet"),Prr=o(" \u2014 "),UH=a("a"),Brr=o("MPNetForMaskedLM"),Irr=o(" (MPNet model)"),Nrr=l(),Iv=a("li"),vEe=a("strong"),qrr=o("mvp"),jrr=o(" \u2014 "),HH=a("a"),Drr=o("MvpForConditionalGeneration"),Grr=o(" (MVP model)"),Orr=l(),Nv=a("li"),FEe=a("strong"),Vrr=o("nezha"),Xrr=o(" \u2014 "),JH=a("a"),zrr=o("NezhaForPreTraining"),Qrr=o(" (Nezha model)"),Wrr=l(),qv=a("li"),TEe=a("strong"),Urr=o("openai-gpt"),Hrr=o(" \u2014 "),YH=a("a"),Jrr=o("OpenAIGPTLMHeadModel"),Yrr=o(" (OpenAI GPT model)"),Zrr=l(),jv=a("li"),MEe=a("strong"),Krr=o("retribert"),etr=o(" \u2014 "),ZH=a("a"),otr=o("RetriBertModel"),rtr=o(" (RetriBERT model)"),ttr=l(),Dv=a("li"),EEe=a("strong"),atr=o("roberta"),ntr=o(" \u2014 "),KH=a("a"),str=o("RobertaForMaskedLM"),ltr=o(" (RoBERTa model)"),itr=l(),Gv=a("li"),CEe=a("strong"),dtr=o("roc_bert"),mtr=o(" \u2014 "),eJ=a("a"),ctr=o("RoCBertForPreTraining"),ftr=o(" (RoCBert model)"),gtr=l(),Ov=a("li"),wEe=a("strong"),htr=o("splinter"),utr=o(" \u2014 "),oJ=a("a"),ptr=o("SplinterForPreTraining"),_tr=o(" (Splinter model)"),btr=l(),Vv=a("li"),AEe=a("strong"),vtr=o("squeezebert"),Ftr=o(" \u2014 "),rJ=a("a"),Ttr=o("SqueezeBertForMaskedLM"),Mtr=o(" (SqueezeBERT model)"),Etr=l(),Xv=a("li"),LEe=a("strong"),Ctr=o("switch_transformers"),wtr=o(" \u2014 "),tJ=a("a"),Atr=o("SwitchTransformersForConditionalGeneration"),Ltr=o(" (SwitchTransformers model)"),ytr=l(),zv=a("li"),yEe=a("strong"),xtr=o("t5"),$tr=o(" \u2014 "),aJ=a("a"),ktr=o("T5ForConditionalGeneration"),Str=o(" (T5 model)"),Rtr=l(),Qv=a("li"),xEe=a("strong"),Ptr=o("tapas"),Btr=o(" \u2014 "),nJ=a("a"),Itr=o("TapasForMaskedLM"),Ntr=o(" (TAPAS model)"),qtr=l(),Wv=a("li"),$Ee=a("strong"),jtr=o("transfo-xl"),Dtr=o(" \u2014 "),sJ=a("a"),Gtr=o("TransfoXLLMHeadModel"),Otr=o(" (Transformer-XL model)"),Vtr=l(),Uv=a("li"),kEe=a("strong"),Xtr=o("unispeech"),ztr=o(" \u2014 "),lJ=a("a"),Qtr=o("UniSpeechForPreTraining"),Wtr=o(" (UniSpeech model)"),Utr=l(),Hv=a("li"),SEe=a("strong"),Htr=o("unispeech-sat"),Jtr=o(" \u2014 "),iJ=a("a"),Ytr=o("UniSpeechSatForPreTraining"),Ztr=o(" (UniSpeechSat model)"),Ktr=l(),Jv=a("li"),REe=a("strong"),ear=o("videomae"),oar=o(" \u2014 "),dJ=a("a"),rar=o("VideoMAEForPreTraining"),tar=o(" (VideoMAE model)"),aar=l(),Yv=a("li"),PEe=a("strong"),nar=o("visual_bert"),sar=o(" \u2014 "),mJ=a("a"),lar=o("VisualBertForPreTraining"),iar=o(" (VisualBERT model)"),dar=l(),Zv=a("li"),BEe=a("strong"),mar=o("vit_mae"),car=o(" \u2014 "),cJ=a("a"),far=o("ViTMAEForPreTraining"),gar=o(" (ViTMAE model)"),har=l(),Kv=a("li"),IEe=a("strong"),uar=o("wav2vec2"),par=o(" \u2014 "),fJ=a("a"),_ar=o("Wav2Vec2ForPreTraining"),bar=o(" (Wav2Vec2 model)"),Far=l(),eF=a("li"),NEe=a("strong"),Tar=o("wav2vec2-conformer"),Mar=o(" \u2014 "),gJ=a("a"),Ear=o("Wav2Vec2ConformerForPreTraining"),Car=o(" (Wav2Vec2-Conformer model)"),war=l(),oF=a("li"),qEe=a("strong"),Aar=o("xlm"),Lar=o(" \u2014 "),hJ=a("a"),yar=o("XLMWithLMHeadModel"),xar=o(" (XLM model)"),$ar=l(),rF=a("li"),jEe=a("strong"),kar=o("xlm-roberta"),Sar=o(" \u2014 "),uJ=a("a"),Rar=o("XLMRobertaForMaskedLM"),Par=o(" (XLM-RoBERTa model)"),Bar=l(),tF=a("li"),DEe=a("strong"),Iar=o("xlm-roberta-xl"),Nar=o(" \u2014 "),pJ=a("a"),qar=o("XLMRobertaXLForMaskedLM"),jar=o(" (XLM-RoBERTa-XL model)"),Dar=l(),aF=a("li"),GEe=a("strong"),Gar=o("xlnet"),Oar=o(" \u2014 "),_J=a("a"),Var=o("XLNetLMHeadModel"),Xar=o(" (XLNet model)"),zar=l(),nF=a("p"),Qar=o("The model is set in evaluation mode by default using "),OEe=a("code"),War=o("model.eval()"),Uar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VEe=a("code"),Har=o("model.train()"),Jar=l(),F(sF.$$.fragment),qio=l(),Ud=a("h2"),lF=a("a"),XEe=a("span"),F(hS.$$.fragment),Yar=l(),zEe=a("span"),Zar=o("AutoModelForCausalLM"),jio=l(),Oo=a("div"),F(uS.$$.fragment),Kar=l(),Hd=a("p"),enr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bJ=a("a"),onr=o("from_pretrained()"),rnr=o(" class method or the "),vJ=a("a"),tnr=o("from_config()"),anr=o(` class
method.`),nnr=l(),pS=a("p"),snr=o("This class cannot be instantiated directly using "),QEe=a("code"),lnr=o("__init__()"),inr=o(" (throws an error)."),dnr=l(),yt=a("div"),F(_S.$$.fragment),mnr=l(),WEe=a("p"),cnr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fnr=l(),Jd=a("p"),gnr=o(`Note:
Loading a model from its configuration file does `),UEe=a("strong"),hnr=o("not"),unr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=a("a"),pnr=o("from_pretrained()"),_nr=o(" to load the model weights."),bnr=l(),F(iF.$$.fragment),vnr=l(),no=a("div"),F(bS.$$.fragment),Fnr=l(),HEe=a("p"),Tnr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mnr=l(),un=a("p"),Enr=o("The model class to instantiate is selected based on the "),JEe=a("code"),Cnr=o("model_type"),wnr=o(` property of the config object (either
passed as an argument or loaded from `),YEe=a("code"),Anr=o("pretrained_model_name_or_path"),Lnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZEe=a("code"),ynr=o("pretrained_model_name_or_path"),xnr=o(":"),$nr=l(),W=a("ul"),dF=a("li"),KEe=a("strong"),knr=o("bart"),Snr=o(" \u2014 "),TJ=a("a"),Rnr=o("BartForCausalLM"),Pnr=o(" (BART model)"),Bnr=l(),mF=a("li"),e4e=a("strong"),Inr=o("bert"),Nnr=o(" \u2014 "),MJ=a("a"),qnr=o("BertLMHeadModel"),jnr=o(" (BERT model)"),Dnr=l(),cF=a("li"),o4e=a("strong"),Gnr=o("bert-generation"),Onr=o(" \u2014 "),EJ=a("a"),Vnr=o("BertGenerationDecoder"),Xnr=o(" (Bert Generation model)"),znr=l(),fF=a("li"),r4e=a("strong"),Qnr=o("big_bird"),Wnr=o(" \u2014 "),CJ=a("a"),Unr=o("BigBirdForCausalLM"),Hnr=o(" (BigBird model)"),Jnr=l(),gF=a("li"),t4e=a("strong"),Ynr=o("bigbird_pegasus"),Znr=o(" \u2014 "),wJ=a("a"),Knr=o("BigBirdPegasusForCausalLM"),esr=o(" (BigBird-Pegasus model)"),osr=l(),hF=a("li"),a4e=a("strong"),rsr=o("blenderbot"),tsr=o(" \u2014 "),AJ=a("a"),asr=o("BlenderbotForCausalLM"),nsr=o(" (Blenderbot model)"),ssr=l(),uF=a("li"),n4e=a("strong"),lsr=o("blenderbot-small"),isr=o(" \u2014 "),LJ=a("a"),dsr=o("BlenderbotSmallForCausalLM"),msr=o(" (BlenderbotSmall model)"),csr=l(),pF=a("li"),s4e=a("strong"),fsr=o("bloom"),gsr=o(" \u2014 "),yJ=a("a"),hsr=o("BloomForCausalLM"),usr=o(" (BLOOM model)"),psr=l(),_F=a("li"),l4e=a("strong"),_sr=o("camembert"),bsr=o(" \u2014 "),xJ=a("a"),vsr=o("CamembertForCausalLM"),Fsr=o(" (CamemBERT model)"),Tsr=l(),bF=a("li"),i4e=a("strong"),Msr=o("codegen"),Esr=o(" \u2014 "),$J=a("a"),Csr=o("CodeGenForCausalLM"),wsr=o(" (CodeGen model)"),Asr=l(),vF=a("li"),d4e=a("strong"),Lsr=o("ctrl"),ysr=o(" \u2014 "),kJ=a("a"),xsr=o("CTRLLMHeadModel"),$sr=o(" (CTRL model)"),ksr=l(),FF=a("li"),m4e=a("strong"),Ssr=o("data2vec-text"),Rsr=o(" \u2014 "),SJ=a("a"),Psr=o("Data2VecTextForCausalLM"),Bsr=o(" (Data2VecText model)"),Isr=l(),TF=a("li"),c4e=a("strong"),Nsr=o("electra"),qsr=o(" \u2014 "),RJ=a("a"),jsr=o("ElectraForCausalLM"),Dsr=o(" (ELECTRA model)"),Gsr=l(),MF=a("li"),f4e=a("strong"),Osr=o("ernie"),Vsr=o(" \u2014 "),PJ=a("a"),Xsr=o("ErnieForCausalLM"),zsr=o(" (ERNIE model)"),Qsr=l(),EF=a("li"),g4e=a("strong"),Wsr=o("gpt2"),Usr=o(" \u2014 "),BJ=a("a"),Hsr=o("GPT2LMHeadModel"),Jsr=o(" (OpenAI GPT-2 model)"),Ysr=l(),CF=a("li"),h4e=a("strong"),Zsr=o("gpt_neo"),Ksr=o(" \u2014 "),IJ=a("a"),elr=o("GPTNeoForCausalLM"),olr=o(" (GPT Neo model)"),rlr=l(),wF=a("li"),u4e=a("strong"),tlr=o("gpt_neox"),alr=o(" \u2014 "),NJ=a("a"),nlr=o("GPTNeoXForCausalLM"),slr=o(" (GPT NeoX model)"),llr=l(),AF=a("li"),p4e=a("strong"),ilr=o("gpt_neox_japanese"),dlr=o(" \u2014 "),qJ=a("a"),mlr=o("GPTNeoXJapaneseForCausalLM"),clr=o(" (GPT NeoX Japanese model)"),flr=l(),LF=a("li"),_4e=a("strong"),glr=o("gptj"),hlr=o(" \u2014 "),jJ=a("a"),ulr=o("GPTJForCausalLM"),plr=o(" (GPT-J model)"),_lr=l(),yF=a("li"),b4e=a("strong"),blr=o("marian"),vlr=o(" \u2014 "),DJ=a("a"),Flr=o("MarianForCausalLM"),Tlr=o(" (Marian model)"),Mlr=l(),xF=a("li"),v4e=a("strong"),Elr=o("mbart"),Clr=o(" \u2014 "),GJ=a("a"),wlr=o("MBartForCausalLM"),Alr=o(" (mBART model)"),Llr=l(),$F=a("li"),F4e=a("strong"),ylr=o("megatron-bert"),xlr=o(" \u2014 "),OJ=a("a"),$lr=o("MegatronBertForCausalLM"),klr=o(" (Megatron-BERT model)"),Slr=l(),kF=a("li"),T4e=a("strong"),Rlr=o("mvp"),Plr=o(" \u2014 "),VJ=a("a"),Blr=o("MvpForCausalLM"),Ilr=o(" (MVP model)"),Nlr=l(),SF=a("li"),M4e=a("strong"),qlr=o("openai-gpt"),jlr=o(" \u2014 "),XJ=a("a"),Dlr=o("OpenAIGPTLMHeadModel"),Glr=o(" (OpenAI GPT model)"),Olr=l(),RF=a("li"),E4e=a("strong"),Vlr=o("opt"),Xlr=o(" \u2014 "),zJ=a("a"),zlr=o("OPTForCausalLM"),Qlr=o(" (OPT model)"),Wlr=l(),PF=a("li"),C4e=a("strong"),Ulr=o("pegasus"),Hlr=o(" \u2014 "),QJ=a("a"),Jlr=o("PegasusForCausalLM"),Ylr=o(" (Pegasus model)"),Zlr=l(),BF=a("li"),w4e=a("strong"),Klr=o("plbart"),eir=o(" \u2014 "),WJ=a("a"),oir=o("PLBartForCausalLM"),rir=o(" (PLBart model)"),tir=l(),IF=a("li"),A4e=a("strong"),air=o("prophetnet"),nir=o(" \u2014 "),UJ=a("a"),sir=o("ProphetNetForCausalLM"),lir=o(" (ProphetNet model)"),iir=l(),NF=a("li"),L4e=a("strong"),dir=o("qdqbert"),mir=o(" \u2014 "),HJ=a("a"),cir=o("QDQBertLMHeadModel"),fir=o(" (QDQBert model)"),gir=l(),qF=a("li"),y4e=a("strong"),hir=o("reformer"),uir=o(" \u2014 "),JJ=a("a"),pir=o("ReformerModelWithLMHead"),_ir=o(" (Reformer model)"),bir=l(),jF=a("li"),x4e=a("strong"),vir=o("rembert"),Fir=o(" \u2014 "),YJ=a("a"),Tir=o("RemBertForCausalLM"),Mir=o(" (RemBERT model)"),Eir=l(),DF=a("li"),$4e=a("strong"),Cir=o("roberta"),wir=o(" \u2014 "),ZJ=a("a"),Air=o("RobertaForCausalLM"),Lir=o(" (RoBERTa model)"),yir=l(),GF=a("li"),k4e=a("strong"),xir=o("roc_bert"),$ir=o(" \u2014 "),KJ=a("a"),kir=o("RoCBertForCausalLM"),Sir=o(" (RoCBert model)"),Rir=l(),OF=a("li"),S4e=a("strong"),Pir=o("roformer"),Bir=o(" \u2014 "),eY=a("a"),Iir=o("RoFormerForCausalLM"),Nir=o(" (RoFormer model)"),qir=l(),VF=a("li"),R4e=a("strong"),jir=o("speech_to_text_2"),Dir=o(" \u2014 "),oY=a("a"),Gir=o("Speech2Text2ForCausalLM"),Oir=o(" (Speech2Text2 model)"),Vir=l(),XF=a("li"),P4e=a("strong"),Xir=o("transfo-xl"),zir=o(" \u2014 "),rY=a("a"),Qir=o("TransfoXLLMHeadModel"),Wir=o(" (Transformer-XL model)"),Uir=l(),zF=a("li"),B4e=a("strong"),Hir=o("trocr"),Jir=o(" \u2014 "),tY=a("a"),Yir=o("TrOCRForCausalLM"),Zir=o(" (TrOCR model)"),Kir=l(),QF=a("li"),I4e=a("strong"),edr=o("xglm"),odr=o(" \u2014 "),aY=a("a"),rdr=o("XGLMForCausalLM"),tdr=o(" (XGLM model)"),adr=l(),WF=a("li"),N4e=a("strong"),ndr=o("xlm"),sdr=o(" \u2014 "),nY=a("a"),ldr=o("XLMWithLMHeadModel"),idr=o(" (XLM model)"),ddr=l(),UF=a("li"),q4e=a("strong"),mdr=o("xlm-prophetnet"),cdr=o(" \u2014 "),sY=a("a"),fdr=o("XLMProphetNetForCausalLM"),gdr=o(" (XLM-ProphetNet model)"),hdr=l(),HF=a("li"),j4e=a("strong"),udr=o("xlm-roberta"),pdr=o(" \u2014 "),lY=a("a"),_dr=o("XLMRobertaForCausalLM"),bdr=o(" (XLM-RoBERTa model)"),vdr=l(),JF=a("li"),D4e=a("strong"),Fdr=o("xlm-roberta-xl"),Tdr=o(" \u2014 "),iY=a("a"),Mdr=o("XLMRobertaXLForCausalLM"),Edr=o(" (XLM-RoBERTa-XL model)"),Cdr=l(),YF=a("li"),G4e=a("strong"),wdr=o("xlnet"),Adr=o(" \u2014 "),dY=a("a"),Ldr=o("XLNetLMHeadModel"),ydr=o(" (XLNet model)"),xdr=l(),ZF=a("p"),$dr=o("The model is set in evaluation mode by default using "),O4e=a("code"),kdr=o("model.eval()"),Sdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V4e=a("code"),Rdr=o("model.train()"),Pdr=l(),F(KF.$$.fragment),Dio=l(),Yd=a("h2"),eT=a("a"),X4e=a("span"),F(vS.$$.fragment),Bdr=l(),z4e=a("span"),Idr=o("AutoModelForDepthEstimation"),Gio=l(),Vo=a("div"),F(FS.$$.fragment),Ndr=l(),Zd=a("p"),qdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a depth estimation head) when created
with the `),mY=a("a"),jdr=o("from_pretrained()"),Ddr=o(" class method or the "),cY=a("a"),Gdr=o("from_config()"),Odr=o(` class
method.`),Vdr=l(),TS=a("p"),Xdr=o("This class cannot be instantiated directly using "),Q4e=a("code"),zdr=o("__init__()"),Qdr=o(" (throws an error)."),Wdr=l(),xt=a("div"),F(MS.$$.fragment),Udr=l(),W4e=a("p"),Hdr=o("Instantiates one of the model classes of the library (with a depth estimation head) from a configuration."),Jdr=l(),Kd=a("p"),Ydr=o(`Note:
Loading a model from its configuration file does `),U4e=a("strong"),Zdr=o("not"),Kdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),emr=o("from_pretrained()"),omr=o(" to load the model weights."),rmr=l(),F(oT.$$.fragment),tmr=l(),so=a("div"),F(ES.$$.fragment),amr=l(),H4e=a("p"),nmr=o("Instantiate one of the model classes of the library (with a depth estimation head) from a pretrained model."),smr=l(),pn=a("p"),lmr=o("The model class to instantiate is selected based on the "),J4e=a("code"),imr=o("model_type"),dmr=o(` property of the config object (either
passed as an argument or loaded from `),Y4e=a("code"),mmr=o("pretrained_model_name_or_path"),cmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=a("code"),fmr=o("pretrained_model_name_or_path"),gmr=o(":"),hmr=l(),CS=a("ul"),rT=a("li"),K4e=a("strong"),umr=o("dpt"),pmr=o(" \u2014 "),gY=a("a"),_mr=o("DPTForDepthEstimation"),bmr=o(" (DPT model)"),vmr=l(),tT=a("li"),eCe=a("strong"),Fmr=o("glpn"),Tmr=o(" \u2014 "),hY=a("a"),Mmr=o("GLPNForDepthEstimation"),Emr=o(" (GLPN model)"),Cmr=l(),aT=a("p"),wmr=o("The model is set in evaluation mode by default using "),oCe=a("code"),Amr=o("model.eval()"),Lmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rCe=a("code"),ymr=o("model.train()"),xmr=l(),F(nT.$$.fragment),Oio=l(),em=a("h2"),sT=a("a"),tCe=a("span"),F(wS.$$.fragment),$mr=l(),aCe=a("span"),kmr=o("AutoModelForMaskedLM"),Vio=l(),Xo=a("div"),F(AS.$$.fragment),Smr=l(),om=a("p"),Rmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uY=a("a"),Pmr=o("from_pretrained()"),Bmr=o(" class method or the "),pY=a("a"),Imr=o("from_config()"),Nmr=o(` class
method.`),qmr=l(),LS=a("p"),jmr=o("This class cannot be instantiated directly using "),nCe=a("code"),Dmr=o("__init__()"),Gmr=o(" (throws an error)."),Omr=l(),$t=a("div"),F(yS.$$.fragment),Vmr=l(),sCe=a("p"),Xmr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zmr=l(),rm=a("p"),Qmr=o(`Note:
Loading a model from its configuration file does `),lCe=a("strong"),Wmr=o("not"),Umr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=a("a"),Hmr=o("from_pretrained()"),Jmr=o(" to load the model weights."),Ymr=l(),F(lT.$$.fragment),Zmr=l(),lo=a("div"),F(xS.$$.fragment),Kmr=l(),iCe=a("p"),ecr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ocr=l(),_n=a("p"),rcr=o("The model class to instantiate is selected based on the "),dCe=a("code"),tcr=o("model_type"),acr=o(` property of the config object (either
passed as an argument or loaded from `),mCe=a("code"),ncr=o("pretrained_model_name_or_path"),scr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=a("code"),lcr=o("pretrained_model_name_or_path"),icr=o(":"),dcr=l(),Y=a("ul"),iT=a("li"),fCe=a("strong"),mcr=o("albert"),ccr=o(" \u2014 "),bY=a("a"),fcr=o("AlbertForMaskedLM"),gcr=o(" (ALBERT model)"),hcr=l(),dT=a("li"),gCe=a("strong"),ucr=o("bart"),pcr=o(" \u2014 "),vY=a("a"),_cr=o("BartForConditionalGeneration"),bcr=o(" (BART model)"),vcr=l(),mT=a("li"),hCe=a("strong"),Fcr=o("bert"),Tcr=o(" \u2014 "),FY=a("a"),Mcr=o("BertForMaskedLM"),Ecr=o(" (BERT model)"),Ccr=l(),cT=a("li"),uCe=a("strong"),wcr=o("big_bird"),Acr=o(" \u2014 "),TY=a("a"),Lcr=o("BigBirdForMaskedLM"),ycr=o(" (BigBird model)"),xcr=l(),fT=a("li"),pCe=a("strong"),$cr=o("camembert"),kcr=o(" \u2014 "),MY=a("a"),Scr=o("CamembertForMaskedLM"),Rcr=o(" (CamemBERT model)"),Pcr=l(),gT=a("li"),_Ce=a("strong"),Bcr=o("convbert"),Icr=o(" \u2014 "),EY=a("a"),Ncr=o("ConvBertForMaskedLM"),qcr=o(" (ConvBERT model)"),jcr=l(),hT=a("li"),bCe=a("strong"),Dcr=o("data2vec-text"),Gcr=o(" \u2014 "),CY=a("a"),Ocr=o("Data2VecTextForMaskedLM"),Vcr=o(" (Data2VecText model)"),Xcr=l(),uT=a("li"),vCe=a("strong"),zcr=o("deberta"),Qcr=o(" \u2014 "),wY=a("a"),Wcr=o("DebertaForMaskedLM"),Ucr=o(" (DeBERTa model)"),Hcr=l(),pT=a("li"),FCe=a("strong"),Jcr=o("deberta-v2"),Ycr=o(" \u2014 "),AY=a("a"),Zcr=o("DebertaV2ForMaskedLM"),Kcr=o(" (DeBERTa-v2 model)"),efr=l(),_T=a("li"),TCe=a("strong"),ofr=o("distilbert"),rfr=o(" \u2014 "),LY=a("a"),tfr=o("DistilBertForMaskedLM"),afr=o(" (DistilBERT model)"),nfr=l(),bT=a("li"),MCe=a("strong"),sfr=o("electra"),lfr=o(" \u2014 "),yY=a("a"),ifr=o("ElectraForMaskedLM"),dfr=o(" (ELECTRA model)"),mfr=l(),vT=a("li"),ECe=a("strong"),cfr=o("ernie"),ffr=o(" \u2014 "),xY=a("a"),gfr=o("ErnieForMaskedLM"),hfr=o(" (ERNIE model)"),ufr=l(),FT=a("li"),CCe=a("strong"),pfr=o("flaubert"),_fr=o(" \u2014 "),$Y=a("a"),bfr=o("FlaubertWithLMHeadModel"),vfr=o(" (FlauBERT model)"),Ffr=l(),TT=a("li"),wCe=a("strong"),Tfr=o("fnet"),Mfr=o(" \u2014 "),kY=a("a"),Efr=o("FNetForMaskedLM"),Cfr=o(" (FNet model)"),wfr=l(),MT=a("li"),ACe=a("strong"),Afr=o("funnel"),Lfr=o(" \u2014 "),SY=a("a"),yfr=o("FunnelForMaskedLM"),xfr=o(" (Funnel Transformer model)"),$fr=l(),ET=a("li"),LCe=a("strong"),kfr=o("ibert"),Sfr=o(" \u2014 "),RY=a("a"),Rfr=o("IBertForMaskedLM"),Pfr=o(" (I-BERT model)"),Bfr=l(),CT=a("li"),yCe=a("strong"),Ifr=o("layoutlm"),Nfr=o(" \u2014 "),PY=a("a"),qfr=o("LayoutLMForMaskedLM"),jfr=o(" (LayoutLM model)"),Dfr=l(),wT=a("li"),xCe=a("strong"),Gfr=o("longformer"),Ofr=o(" \u2014 "),BY=a("a"),Vfr=o("LongformerForMaskedLM"),Xfr=o(" (Longformer model)"),zfr=l(),AT=a("li"),$Ce=a("strong"),Qfr=o("luke"),Wfr=o(" \u2014 "),IY=a("a"),Ufr=o("LukeForMaskedLM"),Hfr=o(" (LUKE model)"),Jfr=l(),LT=a("li"),kCe=a("strong"),Yfr=o("mbart"),Zfr=o(" \u2014 "),NY=a("a"),Kfr=o("MBartForConditionalGeneration"),egr=o(" (mBART model)"),ogr=l(),yT=a("li"),SCe=a("strong"),rgr=o("megatron-bert"),tgr=o(" \u2014 "),qY=a("a"),agr=o("MegatronBertForMaskedLM"),ngr=o(" (Megatron-BERT model)"),sgr=l(),xT=a("li"),RCe=a("strong"),lgr=o("mobilebert"),igr=o(" \u2014 "),jY=a("a"),dgr=o("MobileBertForMaskedLM"),mgr=o(" (MobileBERT model)"),cgr=l(),$T=a("li"),PCe=a("strong"),fgr=o("mpnet"),ggr=o(" \u2014 "),DY=a("a"),hgr=o("MPNetForMaskedLM"),ugr=o(" (MPNet model)"),pgr=l(),kT=a("li"),BCe=a("strong"),_gr=o("mvp"),bgr=o(" \u2014 "),GY=a("a"),vgr=o("MvpForConditionalGeneration"),Fgr=o(" (MVP model)"),Tgr=l(),ST=a("li"),ICe=a("strong"),Mgr=o("nezha"),Egr=o(" \u2014 "),OY=a("a"),Cgr=o("NezhaForMaskedLM"),wgr=o(" (Nezha model)"),Agr=l(),RT=a("li"),NCe=a("strong"),Lgr=o("nystromformer"),ygr=o(" \u2014 "),VY=a("a"),xgr=o("NystromformerForMaskedLM"),$gr=o(" (Nystr\xF6mformer model)"),kgr=l(),PT=a("li"),qCe=a("strong"),Sgr=o("perceiver"),Rgr=o(" \u2014 "),XY=a("a"),Pgr=o("PerceiverForMaskedLM"),Bgr=o(" (Perceiver model)"),Igr=l(),BT=a("li"),jCe=a("strong"),Ngr=o("qdqbert"),qgr=o(" \u2014 "),zY=a("a"),jgr=o("QDQBertForMaskedLM"),Dgr=o(" (QDQBert model)"),Ggr=l(),IT=a("li"),DCe=a("strong"),Ogr=o("reformer"),Vgr=o(" \u2014 "),QY=a("a"),Xgr=o("ReformerForMaskedLM"),zgr=o(" (Reformer model)"),Qgr=l(),NT=a("li"),GCe=a("strong"),Wgr=o("rembert"),Ugr=o(" \u2014 "),WY=a("a"),Hgr=o("RemBertForMaskedLM"),Jgr=o(" (RemBERT model)"),Ygr=l(),qT=a("li"),OCe=a("strong"),Zgr=o("roberta"),Kgr=o(" \u2014 "),UY=a("a"),ehr=o("RobertaForMaskedLM"),ohr=o(" (RoBERTa model)"),rhr=l(),jT=a("li"),VCe=a("strong"),thr=o("roc_bert"),ahr=o(" \u2014 "),HY=a("a"),nhr=o("RoCBertForMaskedLM"),shr=o(" (RoCBert model)"),lhr=l(),DT=a("li"),XCe=a("strong"),ihr=o("roformer"),dhr=o(" \u2014 "),JY=a("a"),mhr=o("RoFormerForMaskedLM"),chr=o(" (RoFormer model)"),fhr=l(),GT=a("li"),zCe=a("strong"),ghr=o("squeezebert"),hhr=o(" \u2014 "),YY=a("a"),uhr=o("SqueezeBertForMaskedLM"),phr=o(" (SqueezeBERT model)"),_hr=l(),OT=a("li"),QCe=a("strong"),bhr=o("tapas"),vhr=o(" \u2014 "),ZY=a("a"),Fhr=o("TapasForMaskedLM"),Thr=o(" (TAPAS model)"),Mhr=l(),VT=a("li"),WCe=a("strong"),Ehr=o("wav2vec2"),Chr=o(" \u2014 "),UCe=a("code"),whr=o("Wav2Vec2ForMaskedLM"),Ahr=o(" (Wav2Vec2 model)"),Lhr=l(),XT=a("li"),HCe=a("strong"),yhr=o("xlm"),xhr=o(" \u2014 "),KY=a("a"),$hr=o("XLMWithLMHeadModel"),khr=o(" (XLM model)"),Shr=l(),zT=a("li"),JCe=a("strong"),Rhr=o("xlm-roberta"),Phr=o(" \u2014 "),eZ=a("a"),Bhr=o("XLMRobertaForMaskedLM"),Ihr=o(" (XLM-RoBERTa model)"),Nhr=l(),QT=a("li"),YCe=a("strong"),qhr=o("xlm-roberta-xl"),jhr=o(" \u2014 "),oZ=a("a"),Dhr=o("XLMRobertaXLForMaskedLM"),Ghr=o(" (XLM-RoBERTa-XL model)"),Ohr=l(),WT=a("li"),ZCe=a("strong"),Vhr=o("yoso"),Xhr=o(" \u2014 "),rZ=a("a"),zhr=o("YosoForMaskedLM"),Qhr=o(" (YOSO model)"),Whr=l(),UT=a("p"),Uhr=o("The model is set in evaluation mode by default using "),KCe=a("code"),Hhr=o("model.eval()"),Jhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e3e=a("code"),Yhr=o("model.train()"),Zhr=l(),F(HT.$$.fragment),Xio=l(),tm=a("h2"),JT=a("a"),o3e=a("span"),F($S.$$.fragment),Khr=l(),r3e=a("span"),eur=o("AutoModelForSeq2SeqLM"),zio=l(),zo=a("div"),F(kS.$$.fragment),our=l(),am=a("p"),rur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tZ=a("a"),tur=o("from_pretrained()"),aur=o(" class method or the "),aZ=a("a"),nur=o("from_config()"),sur=o(` class
method.`),lur=l(),SS=a("p"),iur=o("This class cannot be instantiated directly using "),t3e=a("code"),dur=o("__init__()"),mur=o(" (throws an error)."),cur=l(),kt=a("div"),F(RS.$$.fragment),fur=l(),a3e=a("p"),gur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hur=l(),nm=a("p"),uur=o(`Note:
Loading a model from its configuration file does `),n3e=a("strong"),pur=o("not"),_ur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=a("a"),bur=o("from_pretrained()"),vur=o(" to load the model weights."),Fur=l(),F(YT.$$.fragment),Tur=l(),io=a("div"),F(PS.$$.fragment),Mur=l(),s3e=a("p"),Eur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cur=l(),bn=a("p"),wur=o("The model class to instantiate is selected based on the "),l3e=a("code"),Aur=o("model_type"),Lur=o(` property of the config object (either
passed as an argument or loaded from `),i3e=a("code"),yur=o("pretrained_model_name_or_path"),xur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=a("code"),$ur=o("pretrained_model_name_or_path"),kur=o(":"),Sur=l(),ge=a("ul"),ZT=a("li"),m3e=a("strong"),Rur=o("bart"),Pur=o(" \u2014 "),sZ=a("a"),Bur=o("BartForConditionalGeneration"),Iur=o(" (BART model)"),Nur=l(),KT=a("li"),c3e=a("strong"),qur=o("bigbird_pegasus"),jur=o(" \u2014 "),lZ=a("a"),Dur=o("BigBirdPegasusForConditionalGeneration"),Gur=o(" (BigBird-Pegasus model)"),Our=l(),eM=a("li"),f3e=a("strong"),Vur=o("blenderbot"),Xur=o(" \u2014 "),iZ=a("a"),zur=o("BlenderbotForConditionalGeneration"),Qur=o(" (Blenderbot model)"),Wur=l(),oM=a("li"),g3e=a("strong"),Uur=o("blenderbot-small"),Hur=o(" \u2014 "),dZ=a("a"),Jur=o("BlenderbotSmallForConditionalGeneration"),Yur=o(" (BlenderbotSmall model)"),Zur=l(),rM=a("li"),h3e=a("strong"),Kur=o("encoder-decoder"),epr=o(" \u2014 "),mZ=a("a"),opr=o("EncoderDecoderModel"),rpr=o(" (Encoder decoder model)"),tpr=l(),tM=a("li"),u3e=a("strong"),apr=o("fsmt"),npr=o(" \u2014 "),cZ=a("a"),spr=o("FSMTForConditionalGeneration"),lpr=o(" (FairSeq Machine-Translation model)"),ipr=l(),aM=a("li"),p3e=a("strong"),dpr=o("led"),mpr=o(" \u2014 "),fZ=a("a"),cpr=o("LEDForConditionalGeneration"),fpr=o(" (LED model)"),gpr=l(),nM=a("li"),_3e=a("strong"),hpr=o("longt5"),upr=o(" \u2014 "),gZ=a("a"),ppr=o("LongT5ForConditionalGeneration"),_pr=o(" (LongT5 model)"),bpr=l(),sM=a("li"),b3e=a("strong"),vpr=o("m2m_100"),Fpr=o(" \u2014 "),hZ=a("a"),Tpr=o("M2M100ForConditionalGeneration"),Mpr=o(" (M2M100 model)"),Epr=l(),lM=a("li"),v3e=a("strong"),Cpr=o("marian"),wpr=o(" \u2014 "),uZ=a("a"),Apr=o("MarianMTModel"),Lpr=o(" (Marian model)"),ypr=l(),iM=a("li"),F3e=a("strong"),xpr=o("mbart"),$pr=o(" \u2014 "),pZ=a("a"),kpr=o("MBartForConditionalGeneration"),Spr=o(" (mBART model)"),Rpr=l(),dM=a("li"),T3e=a("strong"),Ppr=o("mt5"),Bpr=o(" \u2014 "),_Z=a("a"),Ipr=o("MT5ForConditionalGeneration"),Npr=o(" (MT5 model)"),qpr=l(),mM=a("li"),M3e=a("strong"),jpr=o("mvp"),Dpr=o(" \u2014 "),bZ=a("a"),Gpr=o("MvpForConditionalGeneration"),Opr=o(" (MVP model)"),Vpr=l(),cM=a("li"),E3e=a("strong"),Xpr=o("nllb"),zpr=o(" \u2014 "),vZ=a("a"),Qpr=o("M2M100ForConditionalGeneration"),Wpr=o(" (NLLB model)"),Upr=l(),fM=a("li"),C3e=a("strong"),Hpr=o("pegasus"),Jpr=o(" \u2014 "),FZ=a("a"),Ypr=o("PegasusForConditionalGeneration"),Zpr=o(" (Pegasus model)"),Kpr=l(),gM=a("li"),w3e=a("strong"),e_r=o("pegasus_x"),o_r=o(" \u2014 "),TZ=a("a"),r_r=o("PegasusXForConditionalGeneration"),t_r=o(" (PEGASUS-X model)"),a_r=l(),hM=a("li"),A3e=a("strong"),n_r=o("plbart"),s_r=o(" \u2014 "),MZ=a("a"),l_r=o("PLBartForConditionalGeneration"),i_r=o(" (PLBart model)"),d_r=l(),uM=a("li"),L3e=a("strong"),m_r=o("prophetnet"),c_r=o(" \u2014 "),EZ=a("a"),f_r=o("ProphetNetForConditionalGeneration"),g_r=o(" (ProphetNet model)"),h_r=l(),pM=a("li"),y3e=a("strong"),u_r=o("switch_transformers"),p_r=o(" \u2014 "),CZ=a("a"),__r=o("SwitchTransformersForConditionalGeneration"),b_r=o(" (SwitchTransformers model)"),v_r=l(),_M=a("li"),x3e=a("strong"),F_r=o("t5"),T_r=o(" \u2014 "),wZ=a("a"),M_r=o("T5ForConditionalGeneration"),E_r=o(" (T5 model)"),C_r=l(),bM=a("li"),$3e=a("strong"),w_r=o("xlm-prophetnet"),A_r=o(" \u2014 "),AZ=a("a"),L_r=o("XLMProphetNetForConditionalGeneration"),y_r=o(" (XLM-ProphetNet model)"),x_r=l(),vM=a("p"),$_r=o("The model is set in evaluation mode by default using "),k3e=a("code"),k_r=o("model.eval()"),S_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S3e=a("code"),R_r=o("model.train()"),P_r=l(),F(FM.$$.fragment),Qio=l(),sm=a("h2"),TM=a("a"),R3e=a("span"),F(BS.$$.fragment),B_r=l(),P3e=a("span"),I_r=o("AutoModelForSequenceClassification"),Wio=l(),Qo=a("div"),F(IS.$$.fragment),N_r=l(),lm=a("p"),q_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LZ=a("a"),j_r=o("from_pretrained()"),D_r=o(" class method or the "),yZ=a("a"),G_r=o("from_config()"),O_r=o(` class
method.`),V_r=l(),NS=a("p"),X_r=o("This class cannot be instantiated directly using "),B3e=a("code"),z_r=o("__init__()"),Q_r=o(" (throws an error)."),W_r=l(),St=a("div"),F(qS.$$.fragment),U_r=l(),I3e=a("p"),H_r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),J_r=l(),im=a("p"),Y_r=o(`Note:
Loading a model from its configuration file does `),N3e=a("strong"),Z_r=o("not"),K_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=a("a"),e1r=o("from_pretrained()"),o1r=o(" to load the model weights."),r1r=l(),F(MM.$$.fragment),t1r=l(),mo=a("div"),F(jS.$$.fragment),a1r=l(),q3e=a("p"),n1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),s1r=l(),vn=a("p"),l1r=o("The model class to instantiate is selected based on the "),j3e=a("code"),i1r=o("model_type"),d1r=o(` property of the config object (either
passed as an argument or loaded from `),D3e=a("code"),m1r=o("pretrained_model_name_or_path"),c1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=a("code"),f1r=o("pretrained_model_name_or_path"),g1r=o(":"),h1r=l(),I=a("ul"),EM=a("li"),O3e=a("strong"),u1r=o("albert"),p1r=o(" \u2014 "),$Z=a("a"),_1r=o("AlbertForSequenceClassification"),b1r=o(" (ALBERT model)"),v1r=l(),CM=a("li"),V3e=a("strong"),F1r=o("bart"),T1r=o(" \u2014 "),kZ=a("a"),M1r=o("BartForSequenceClassification"),E1r=o(" (BART model)"),C1r=l(),wM=a("li"),X3e=a("strong"),w1r=o("bert"),A1r=o(" \u2014 "),SZ=a("a"),L1r=o("BertForSequenceClassification"),y1r=o(" (BERT model)"),x1r=l(),AM=a("li"),z3e=a("strong"),$1r=o("big_bird"),k1r=o(" \u2014 "),RZ=a("a"),S1r=o("BigBirdForSequenceClassification"),R1r=o(" (BigBird model)"),P1r=l(),LM=a("li"),Q3e=a("strong"),B1r=o("bigbird_pegasus"),I1r=o(" \u2014 "),PZ=a("a"),N1r=o("BigBirdPegasusForSequenceClassification"),q1r=o(" (BigBird-Pegasus model)"),j1r=l(),yM=a("li"),W3e=a("strong"),D1r=o("bloom"),G1r=o(" \u2014 "),BZ=a("a"),O1r=o("BloomForSequenceClassification"),V1r=o(" (BLOOM model)"),X1r=l(),xM=a("li"),U3e=a("strong"),z1r=o("camembert"),Q1r=o(" \u2014 "),IZ=a("a"),W1r=o("CamembertForSequenceClassification"),U1r=o(" (CamemBERT model)"),H1r=l(),$M=a("li"),H3e=a("strong"),J1r=o("canine"),Y1r=o(" \u2014 "),NZ=a("a"),Z1r=o("CanineForSequenceClassification"),K1r=o(" (CANINE model)"),e2r=l(),kM=a("li"),J3e=a("strong"),o2r=o("convbert"),r2r=o(" \u2014 "),qZ=a("a"),t2r=o("ConvBertForSequenceClassification"),a2r=o(" (ConvBERT model)"),n2r=l(),SM=a("li"),Y3e=a("strong"),s2r=o("ctrl"),l2r=o(" \u2014 "),jZ=a("a"),i2r=o("CTRLForSequenceClassification"),d2r=o(" (CTRL model)"),m2r=l(),RM=a("li"),Z3e=a("strong"),c2r=o("data2vec-text"),f2r=o(" \u2014 "),DZ=a("a"),g2r=o("Data2VecTextForSequenceClassification"),h2r=o(" (Data2VecText model)"),u2r=l(),PM=a("li"),K3e=a("strong"),p2r=o("deberta"),_2r=o(" \u2014 "),GZ=a("a"),b2r=o("DebertaForSequenceClassification"),v2r=o(" (DeBERTa model)"),F2r=l(),BM=a("li"),e5e=a("strong"),T2r=o("deberta-v2"),M2r=o(" \u2014 "),OZ=a("a"),E2r=o("DebertaV2ForSequenceClassification"),C2r=o(" (DeBERTa-v2 model)"),w2r=l(),IM=a("li"),o5e=a("strong"),A2r=o("distilbert"),L2r=o(" \u2014 "),VZ=a("a"),y2r=o("DistilBertForSequenceClassification"),x2r=o(" (DistilBERT model)"),$2r=l(),NM=a("li"),r5e=a("strong"),k2r=o("electra"),S2r=o(" \u2014 "),XZ=a("a"),R2r=o("ElectraForSequenceClassification"),P2r=o(" (ELECTRA model)"),B2r=l(),qM=a("li"),t5e=a("strong"),I2r=o("ernie"),N2r=o(" \u2014 "),zZ=a("a"),q2r=o("ErnieForSequenceClassification"),j2r=o(" (ERNIE model)"),D2r=l(),jM=a("li"),a5e=a("strong"),G2r=o("esm"),O2r=o(" \u2014 "),QZ=a("a"),V2r=o("EsmForSequenceClassification"),X2r=o(" (ESM model)"),z2r=l(),DM=a("li"),n5e=a("strong"),Q2r=o("flaubert"),W2r=o(" \u2014 "),WZ=a("a"),U2r=o("FlaubertForSequenceClassification"),H2r=o(" (FlauBERT model)"),J2r=l(),GM=a("li"),s5e=a("strong"),Y2r=o("fnet"),Z2r=o(" \u2014 "),UZ=a("a"),K2r=o("FNetForSequenceClassification"),ebr=o(" (FNet model)"),obr=l(),OM=a("li"),l5e=a("strong"),rbr=o("funnel"),tbr=o(" \u2014 "),HZ=a("a"),abr=o("FunnelForSequenceClassification"),nbr=o(" (Funnel Transformer model)"),sbr=l(),VM=a("li"),i5e=a("strong"),lbr=o("gpt2"),ibr=o(" \u2014 "),JZ=a("a"),dbr=o("GPT2ForSequenceClassification"),mbr=o(" (OpenAI GPT-2 model)"),cbr=l(),XM=a("li"),d5e=a("strong"),fbr=o("gpt_neo"),gbr=o(" \u2014 "),YZ=a("a"),hbr=o("GPTNeoForSequenceClassification"),ubr=o(" (GPT Neo model)"),pbr=l(),zM=a("li"),m5e=a("strong"),_br=o("gptj"),bbr=o(" \u2014 "),ZZ=a("a"),vbr=o("GPTJForSequenceClassification"),Fbr=o(" (GPT-J model)"),Tbr=l(),QM=a("li"),c5e=a("strong"),Mbr=o("ibert"),Ebr=o(" \u2014 "),KZ=a("a"),Cbr=o("IBertForSequenceClassification"),wbr=o(" (I-BERT model)"),Abr=l(),WM=a("li"),f5e=a("strong"),Lbr=o("layoutlm"),ybr=o(" \u2014 "),eK=a("a"),xbr=o("LayoutLMForSequenceClassification"),$br=o(" (LayoutLM model)"),kbr=l(),UM=a("li"),g5e=a("strong"),Sbr=o("layoutlmv2"),Rbr=o(" \u2014 "),oK=a("a"),Pbr=o("LayoutLMv2ForSequenceClassification"),Bbr=o(" (LayoutLMv2 model)"),Ibr=l(),HM=a("li"),h5e=a("strong"),Nbr=o("layoutlmv3"),qbr=o(" \u2014 "),rK=a("a"),jbr=o("LayoutLMv3ForSequenceClassification"),Dbr=o(" (LayoutLMv3 model)"),Gbr=l(),JM=a("li"),u5e=a("strong"),Obr=o("led"),Vbr=o(" \u2014 "),tK=a("a"),Xbr=o("LEDForSequenceClassification"),zbr=o(" (LED model)"),Qbr=l(),YM=a("li"),p5e=a("strong"),Wbr=o("lilt"),Ubr=o(" \u2014 "),aK=a("a"),Hbr=o("LiltForSequenceClassification"),Jbr=o(" (LiLT model)"),Ybr=l(),ZM=a("li"),_5e=a("strong"),Zbr=o("longformer"),Kbr=o(" \u2014 "),nK=a("a"),evr=o("LongformerForSequenceClassification"),ovr=o(" (Longformer model)"),rvr=l(),KM=a("li"),b5e=a("strong"),tvr=o("luke"),avr=o(" \u2014 "),sK=a("a"),nvr=o("LukeForSequenceClassification"),svr=o(" (LUKE model)"),lvr=l(),eE=a("li"),v5e=a("strong"),ivr=o("markuplm"),dvr=o(" \u2014 "),lK=a("a"),mvr=o("MarkupLMForSequenceClassification"),cvr=o(" (MarkupLM model)"),fvr=l(),oE=a("li"),F5e=a("strong"),gvr=o("mbart"),hvr=o(" \u2014 "),iK=a("a"),uvr=o("MBartForSequenceClassification"),pvr=o(" (mBART model)"),_vr=l(),rE=a("li"),T5e=a("strong"),bvr=o("megatron-bert"),vvr=o(" \u2014 "),dK=a("a"),Fvr=o("MegatronBertForSequenceClassification"),Tvr=o(" (Megatron-BERT model)"),Mvr=l(),tE=a("li"),M5e=a("strong"),Evr=o("mobilebert"),Cvr=o(" \u2014 "),mK=a("a"),wvr=o("MobileBertForSequenceClassification"),Avr=o(" (MobileBERT model)"),Lvr=l(),aE=a("li"),E5e=a("strong"),yvr=o("mpnet"),xvr=o(" \u2014 "),cK=a("a"),$vr=o("MPNetForSequenceClassification"),kvr=o(" (MPNet model)"),Svr=l(),nE=a("li"),C5e=a("strong"),Rvr=o("mvp"),Pvr=o(" \u2014 "),fK=a("a"),Bvr=o("MvpForSequenceClassification"),Ivr=o(" (MVP model)"),Nvr=l(),sE=a("li"),w5e=a("strong"),qvr=o("nezha"),jvr=o(" \u2014 "),gK=a("a"),Dvr=o("NezhaForSequenceClassification"),Gvr=o(" (Nezha model)"),Ovr=l(),lE=a("li"),A5e=a("strong"),Vvr=o("nystromformer"),Xvr=o(" \u2014 "),hK=a("a"),zvr=o("NystromformerForSequenceClassification"),Qvr=o(" (Nystr\xF6mformer model)"),Wvr=l(),iE=a("li"),L5e=a("strong"),Uvr=o("openai-gpt"),Hvr=o(" \u2014 "),uK=a("a"),Jvr=o("OpenAIGPTForSequenceClassification"),Yvr=o(" (OpenAI GPT model)"),Zvr=l(),dE=a("li"),y5e=a("strong"),Kvr=o("opt"),eFr=o(" \u2014 "),pK=a("a"),oFr=o("OPTForSequenceClassification"),rFr=o(" (OPT model)"),tFr=l(),mE=a("li"),x5e=a("strong"),aFr=o("perceiver"),nFr=o(" \u2014 "),_K=a("a"),sFr=o("PerceiverForSequenceClassification"),lFr=o(" (Perceiver model)"),iFr=l(),cE=a("li"),$5e=a("strong"),dFr=o("plbart"),mFr=o(" \u2014 "),bK=a("a"),cFr=o("PLBartForSequenceClassification"),fFr=o(" (PLBart model)"),gFr=l(),fE=a("li"),k5e=a("strong"),hFr=o("qdqbert"),uFr=o(" \u2014 "),vK=a("a"),pFr=o("QDQBertForSequenceClassification"),_Fr=o(" (QDQBert model)"),bFr=l(),gE=a("li"),S5e=a("strong"),vFr=o("reformer"),FFr=o(" \u2014 "),FK=a("a"),TFr=o("ReformerForSequenceClassification"),MFr=o(" (Reformer model)"),EFr=l(),hE=a("li"),R5e=a("strong"),CFr=o("rembert"),wFr=o(" \u2014 "),TK=a("a"),AFr=o("RemBertForSequenceClassification"),LFr=o(" (RemBERT model)"),yFr=l(),uE=a("li"),P5e=a("strong"),xFr=o("roberta"),$Fr=o(" \u2014 "),MK=a("a"),kFr=o("RobertaForSequenceClassification"),SFr=o(" (RoBERTa model)"),RFr=l(),pE=a("li"),B5e=a("strong"),PFr=o("roc_bert"),BFr=o(" \u2014 "),EK=a("a"),IFr=o("RoCBertForSequenceClassification"),NFr=o(" (RoCBert model)"),qFr=l(),_E=a("li"),I5e=a("strong"),jFr=o("roformer"),DFr=o(" \u2014 "),CK=a("a"),GFr=o("RoFormerForSequenceClassification"),OFr=o(" (RoFormer model)"),VFr=l(),bE=a("li"),N5e=a("strong"),XFr=o("squeezebert"),zFr=o(" \u2014 "),wK=a("a"),QFr=o("SqueezeBertForSequenceClassification"),WFr=o(" (SqueezeBERT model)"),UFr=l(),vE=a("li"),q5e=a("strong"),HFr=o("tapas"),JFr=o(" \u2014 "),AK=a("a"),YFr=o("TapasForSequenceClassification"),ZFr=o(" (TAPAS model)"),KFr=l(),FE=a("li"),j5e=a("strong"),eTr=o("transfo-xl"),oTr=o(" \u2014 "),LK=a("a"),rTr=o("TransfoXLForSequenceClassification"),tTr=o(" (Transformer-XL model)"),aTr=l(),TE=a("li"),D5e=a("strong"),nTr=o("xlm"),sTr=o(" \u2014 "),yK=a("a"),lTr=o("XLMForSequenceClassification"),iTr=o(" (XLM model)"),dTr=l(),ME=a("li"),G5e=a("strong"),mTr=o("xlm-roberta"),cTr=o(" \u2014 "),xK=a("a"),fTr=o("XLMRobertaForSequenceClassification"),gTr=o(" (XLM-RoBERTa model)"),hTr=l(),EE=a("li"),O5e=a("strong"),uTr=o("xlm-roberta-xl"),pTr=o(" \u2014 "),$K=a("a"),_Tr=o("XLMRobertaXLForSequenceClassification"),bTr=o(" (XLM-RoBERTa-XL model)"),vTr=l(),CE=a("li"),V5e=a("strong"),FTr=o("xlnet"),TTr=o(" \u2014 "),kK=a("a"),MTr=o("XLNetForSequenceClassification"),ETr=o(" (XLNet model)"),CTr=l(),wE=a("li"),X5e=a("strong"),wTr=o("yoso"),ATr=o(" \u2014 "),SK=a("a"),LTr=o("YosoForSequenceClassification"),yTr=o(" (YOSO model)"),xTr=l(),AE=a("p"),$Tr=o("The model is set in evaluation mode by default using "),z5e=a("code"),kTr=o("model.eval()"),STr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q5e=a("code"),RTr=o("model.train()"),PTr=l(),F(LE.$$.fragment),Uio=l(),dm=a("h2"),yE=a("a"),W5e=a("span"),F(DS.$$.fragment),BTr=l(),U5e=a("span"),ITr=o("AutoModelForMultipleChoice"),Hio=l(),Wo=a("div"),F(GS.$$.fragment),NTr=l(),mm=a("p"),qTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RK=a("a"),jTr=o("from_pretrained()"),DTr=o(" class method or the "),PK=a("a"),GTr=o("from_config()"),OTr=o(` class
method.`),VTr=l(),OS=a("p"),XTr=o("This class cannot be instantiated directly using "),H5e=a("code"),zTr=o("__init__()"),QTr=o(" (throws an error)."),WTr=l(),Rt=a("div"),F(VS.$$.fragment),UTr=l(),J5e=a("p"),HTr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JTr=l(),cm=a("p"),YTr=o(`Note:
Loading a model from its configuration file does `),Y5e=a("strong"),ZTr=o("not"),KTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),eMr=o("from_pretrained()"),oMr=o(" to load the model weights."),rMr=l(),F(xE.$$.fragment),tMr=l(),co=a("div"),F(XS.$$.fragment),aMr=l(),Z5e=a("p"),nMr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sMr=l(),Fn=a("p"),lMr=o("The model class to instantiate is selected based on the "),K5e=a("code"),iMr=o("model_type"),dMr=o(` property of the config object (either
passed as an argument or loaded from `),e0e=a("code"),mMr=o("pretrained_model_name_or_path"),cMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o0e=a("code"),fMr=o("pretrained_model_name_or_path"),gMr=o(":"),hMr=l(),K=a("ul"),$E=a("li"),r0e=a("strong"),uMr=o("albert"),pMr=o(" \u2014 "),IK=a("a"),_Mr=o("AlbertForMultipleChoice"),bMr=o(" (ALBERT model)"),vMr=l(),kE=a("li"),t0e=a("strong"),FMr=o("bert"),TMr=o(" \u2014 "),NK=a("a"),MMr=o("BertForMultipleChoice"),EMr=o(" (BERT model)"),CMr=l(),SE=a("li"),a0e=a("strong"),wMr=o("big_bird"),AMr=o(" \u2014 "),qK=a("a"),LMr=o("BigBirdForMultipleChoice"),yMr=o(" (BigBird model)"),xMr=l(),RE=a("li"),n0e=a("strong"),$Mr=o("camembert"),kMr=o(" \u2014 "),jK=a("a"),SMr=o("CamembertForMultipleChoice"),RMr=o(" (CamemBERT model)"),PMr=l(),PE=a("li"),s0e=a("strong"),BMr=o("canine"),IMr=o(" \u2014 "),DK=a("a"),NMr=o("CanineForMultipleChoice"),qMr=o(" (CANINE model)"),jMr=l(),BE=a("li"),l0e=a("strong"),DMr=o("convbert"),GMr=o(" \u2014 "),GK=a("a"),OMr=o("ConvBertForMultipleChoice"),VMr=o(" (ConvBERT model)"),XMr=l(),IE=a("li"),i0e=a("strong"),zMr=o("data2vec-text"),QMr=o(" \u2014 "),OK=a("a"),WMr=o("Data2VecTextForMultipleChoice"),UMr=o(" (Data2VecText model)"),HMr=l(),NE=a("li"),d0e=a("strong"),JMr=o("deberta-v2"),YMr=o(" \u2014 "),VK=a("a"),ZMr=o("DebertaV2ForMultipleChoice"),KMr=o(" (DeBERTa-v2 model)"),eEr=l(),qE=a("li"),m0e=a("strong"),oEr=o("distilbert"),rEr=o(" \u2014 "),XK=a("a"),tEr=o("DistilBertForMultipleChoice"),aEr=o(" (DistilBERT model)"),nEr=l(),jE=a("li"),c0e=a("strong"),sEr=o("electra"),lEr=o(" \u2014 "),zK=a("a"),iEr=o("ElectraForMultipleChoice"),dEr=o(" (ELECTRA model)"),mEr=l(),DE=a("li"),f0e=a("strong"),cEr=o("ernie"),fEr=o(" \u2014 "),QK=a("a"),gEr=o("ErnieForMultipleChoice"),hEr=o(" (ERNIE model)"),uEr=l(),GE=a("li"),g0e=a("strong"),pEr=o("flaubert"),_Er=o(" \u2014 "),WK=a("a"),bEr=o("FlaubertForMultipleChoice"),vEr=o(" (FlauBERT model)"),FEr=l(),OE=a("li"),h0e=a("strong"),TEr=o("fnet"),MEr=o(" \u2014 "),UK=a("a"),EEr=o("FNetForMultipleChoice"),CEr=o(" (FNet model)"),wEr=l(),VE=a("li"),u0e=a("strong"),AEr=o("funnel"),LEr=o(" \u2014 "),HK=a("a"),yEr=o("FunnelForMultipleChoice"),xEr=o(" (Funnel Transformer model)"),$Er=l(),XE=a("li"),p0e=a("strong"),kEr=o("ibert"),SEr=o(" \u2014 "),JK=a("a"),REr=o("IBertForMultipleChoice"),PEr=o(" (I-BERT model)"),BEr=l(),zE=a("li"),_0e=a("strong"),IEr=o("longformer"),NEr=o(" \u2014 "),YK=a("a"),qEr=o("LongformerForMultipleChoice"),jEr=o(" (Longformer model)"),DEr=l(),QE=a("li"),b0e=a("strong"),GEr=o("luke"),OEr=o(" \u2014 "),ZK=a("a"),VEr=o("LukeForMultipleChoice"),XEr=o(" (LUKE model)"),zEr=l(),WE=a("li"),v0e=a("strong"),QEr=o("megatron-bert"),WEr=o(" \u2014 "),KK=a("a"),UEr=o("MegatronBertForMultipleChoice"),HEr=o(" (Megatron-BERT model)"),JEr=l(),UE=a("li"),F0e=a("strong"),YEr=o("mobilebert"),ZEr=o(" \u2014 "),eee=a("a"),KEr=o("MobileBertForMultipleChoice"),e4r=o(" (MobileBERT model)"),o4r=l(),HE=a("li"),T0e=a("strong"),r4r=o("mpnet"),t4r=o(" \u2014 "),oee=a("a"),a4r=o("MPNetForMultipleChoice"),n4r=o(" (MPNet model)"),s4r=l(),JE=a("li"),M0e=a("strong"),l4r=o("nezha"),i4r=o(" \u2014 "),ree=a("a"),d4r=o("NezhaForMultipleChoice"),m4r=o(" (Nezha model)"),c4r=l(),YE=a("li"),E0e=a("strong"),f4r=o("nystromformer"),g4r=o(" \u2014 "),tee=a("a"),h4r=o("NystromformerForMultipleChoice"),u4r=o(" (Nystr\xF6mformer model)"),p4r=l(),ZE=a("li"),C0e=a("strong"),_4r=o("qdqbert"),b4r=o(" \u2014 "),aee=a("a"),v4r=o("QDQBertForMultipleChoice"),F4r=o(" (QDQBert model)"),T4r=l(),KE=a("li"),w0e=a("strong"),M4r=o("rembert"),E4r=o(" \u2014 "),nee=a("a"),C4r=o("RemBertForMultipleChoice"),w4r=o(" (RemBERT model)"),A4r=l(),e4=a("li"),A0e=a("strong"),L4r=o("roberta"),y4r=o(" \u2014 "),see=a("a"),x4r=o("RobertaForMultipleChoice"),$4r=o(" (RoBERTa model)"),k4r=l(),o4=a("li"),L0e=a("strong"),S4r=o("roc_bert"),R4r=o(" \u2014 "),lee=a("a"),P4r=o("RoCBertForMultipleChoice"),B4r=o(" (RoCBert model)"),I4r=l(),r4=a("li"),y0e=a("strong"),N4r=o("roformer"),q4r=o(" \u2014 "),iee=a("a"),j4r=o("RoFormerForMultipleChoice"),D4r=o(" (RoFormer model)"),G4r=l(),t4=a("li"),x0e=a("strong"),O4r=o("squeezebert"),V4r=o(" \u2014 "),dee=a("a"),X4r=o("SqueezeBertForMultipleChoice"),z4r=o(" (SqueezeBERT model)"),Q4r=l(),a4=a("li"),$0e=a("strong"),W4r=o("xlm"),U4r=o(" \u2014 "),mee=a("a"),H4r=o("XLMForMultipleChoice"),J4r=o(" (XLM model)"),Y4r=l(),n4=a("li"),k0e=a("strong"),Z4r=o("xlm-roberta"),K4r=o(" \u2014 "),cee=a("a"),eCr=o("XLMRobertaForMultipleChoice"),oCr=o(" (XLM-RoBERTa model)"),rCr=l(),s4=a("li"),S0e=a("strong"),tCr=o("xlm-roberta-xl"),aCr=o(" \u2014 "),fee=a("a"),nCr=o("XLMRobertaXLForMultipleChoice"),sCr=o(" (XLM-RoBERTa-XL model)"),lCr=l(),l4=a("li"),R0e=a("strong"),iCr=o("xlnet"),dCr=o(" \u2014 "),gee=a("a"),mCr=o("XLNetForMultipleChoice"),cCr=o(" (XLNet model)"),fCr=l(),i4=a("li"),P0e=a("strong"),gCr=o("yoso"),hCr=o(" \u2014 "),hee=a("a"),uCr=o("YosoForMultipleChoice"),pCr=o(" (YOSO model)"),_Cr=l(),d4=a("p"),bCr=o("The model is set in evaluation mode by default using "),B0e=a("code"),vCr=o("model.eval()"),FCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I0e=a("code"),TCr=o("model.train()"),MCr=l(),F(m4.$$.fragment),Jio=l(),fm=a("h2"),c4=a("a"),N0e=a("span"),F(zS.$$.fragment),ECr=l(),q0e=a("span"),CCr=o("AutoModelForNextSentencePrediction"),Yio=l(),Uo=a("div"),F(QS.$$.fragment),wCr=l(),gm=a("p"),ACr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uee=a("a"),LCr=o("from_pretrained()"),yCr=o(" class method or the "),pee=a("a"),xCr=o("from_config()"),$Cr=o(` class
method.`),kCr=l(),WS=a("p"),SCr=o("This class cannot be instantiated directly using "),j0e=a("code"),RCr=o("__init__()"),PCr=o(" (throws an error)."),BCr=l(),Pt=a("div"),F(US.$$.fragment),ICr=l(),D0e=a("p"),NCr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qCr=l(),hm=a("p"),jCr=o(`Note:
Loading a model from its configuration file does `),G0e=a("strong"),DCr=o("not"),GCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=a("a"),OCr=o("from_pretrained()"),VCr=o(" to load the model weights."),XCr=l(),F(f4.$$.fragment),zCr=l(),fo=a("div"),F(HS.$$.fragment),QCr=l(),O0e=a("p"),WCr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UCr=l(),Tn=a("p"),HCr=o("The model class to instantiate is selected based on the "),V0e=a("code"),JCr=o("model_type"),YCr=o(` property of the config object (either
passed as an argument or loaded from `),X0e=a("code"),ZCr=o("pretrained_model_name_or_path"),KCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z0e=a("code"),e3r=o("pretrained_model_name_or_path"),o3r=o(":"),r3r=l(),Ye=a("ul"),g4=a("li"),Q0e=a("strong"),t3r=o("bert"),a3r=o(" \u2014 "),bee=a("a"),n3r=o("BertForNextSentencePrediction"),s3r=o(" (BERT model)"),l3r=l(),h4=a("li"),W0e=a("strong"),i3r=o("ernie"),d3r=o(" \u2014 "),vee=a("a"),m3r=o("ErnieForNextSentencePrediction"),c3r=o(" (ERNIE model)"),f3r=l(),u4=a("li"),U0e=a("strong"),g3r=o("fnet"),h3r=o(" \u2014 "),Fee=a("a"),u3r=o("FNetForNextSentencePrediction"),p3r=o(" (FNet model)"),_3r=l(),p4=a("li"),H0e=a("strong"),b3r=o("megatron-bert"),v3r=o(" \u2014 "),Tee=a("a"),F3r=o("MegatronBertForNextSentencePrediction"),T3r=o(" (Megatron-BERT model)"),M3r=l(),_4=a("li"),J0e=a("strong"),E3r=o("mobilebert"),C3r=o(" \u2014 "),Mee=a("a"),w3r=o("MobileBertForNextSentencePrediction"),A3r=o(" (MobileBERT model)"),L3r=l(),b4=a("li"),Y0e=a("strong"),y3r=o("nezha"),x3r=o(" \u2014 "),Eee=a("a"),$3r=o("NezhaForNextSentencePrediction"),k3r=o(" (Nezha model)"),S3r=l(),v4=a("li"),Z0e=a("strong"),R3r=o("qdqbert"),P3r=o(" \u2014 "),Cee=a("a"),B3r=o("QDQBertForNextSentencePrediction"),I3r=o(" (QDQBert model)"),N3r=l(),F4=a("p"),q3r=o("The model is set in evaluation mode by default using "),K0e=a("code"),j3r=o("model.eval()"),D3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ewe=a("code"),G3r=o("model.train()"),O3r=l(),F(T4.$$.fragment),Zio=l(),um=a("h2"),M4=a("a"),owe=a("span"),F(JS.$$.fragment),V3r=l(),rwe=a("span"),X3r=o("AutoModelForTokenClassification"),Kio=l(),Ho=a("div"),F(YS.$$.fragment),z3r=l(),pm=a("p"),Q3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wee=a("a"),W3r=o("from_pretrained()"),U3r=o(" class method or the "),Aee=a("a"),H3r=o("from_config()"),J3r=o(` class
method.`),Y3r=l(),ZS=a("p"),Z3r=o("This class cannot be instantiated directly using "),twe=a("code"),K3r=o("__init__()"),e5r=o(" (throws an error)."),o5r=l(),Bt=a("div"),F(KS.$$.fragment),r5r=l(),awe=a("p"),t5r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),a5r=l(),_m=a("p"),n5r=o(`Note:
Loading a model from its configuration file does `),nwe=a("strong"),s5r=o("not"),l5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=a("a"),i5r=o("from_pretrained()"),d5r=o(" to load the model weights."),m5r=l(),F(E4.$$.fragment),c5r=l(),go=a("div"),F(eR.$$.fragment),f5r=l(),swe=a("p"),g5r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),h5r=l(),Mn=a("p"),u5r=o("The model class to instantiate is selected based on the "),lwe=a("code"),p5r=o("model_type"),_5r=o(` property of the config object (either
passed as an argument or loaded from `),iwe=a("code"),b5r=o("pretrained_model_name_or_path"),v5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dwe=a("code"),F5r=o("pretrained_model_name_or_path"),T5r=o(":"),M5r=l(),U=a("ul"),C4=a("li"),mwe=a("strong"),E5r=o("albert"),C5r=o(" \u2014 "),yee=a("a"),w5r=o("AlbertForTokenClassification"),A5r=o(" (ALBERT model)"),L5r=l(),w4=a("li"),cwe=a("strong"),y5r=o("bert"),x5r=o(" \u2014 "),xee=a("a"),$5r=o("BertForTokenClassification"),k5r=o(" (BERT model)"),S5r=l(),A4=a("li"),fwe=a("strong"),R5r=o("big_bird"),P5r=o(" \u2014 "),$ee=a("a"),B5r=o("BigBirdForTokenClassification"),I5r=o(" (BigBird model)"),N5r=l(),L4=a("li"),gwe=a("strong"),q5r=o("bloom"),j5r=o(" \u2014 "),kee=a("a"),D5r=o("BloomForTokenClassification"),G5r=o(" (BLOOM model)"),O5r=l(),y4=a("li"),hwe=a("strong"),V5r=o("camembert"),X5r=o(" \u2014 "),See=a("a"),z5r=o("CamembertForTokenClassification"),Q5r=o(" (CamemBERT model)"),W5r=l(),x4=a("li"),uwe=a("strong"),U5r=o("canine"),H5r=o(" \u2014 "),Ree=a("a"),J5r=o("CanineForTokenClassification"),Y5r=o(" (CANINE model)"),Z5r=l(),$4=a("li"),pwe=a("strong"),K5r=o("convbert"),e0r=o(" \u2014 "),Pee=a("a"),o0r=o("ConvBertForTokenClassification"),r0r=o(" (ConvBERT model)"),t0r=l(),k4=a("li"),_we=a("strong"),a0r=o("data2vec-text"),n0r=o(" \u2014 "),Bee=a("a"),s0r=o("Data2VecTextForTokenClassification"),l0r=o(" (Data2VecText model)"),i0r=l(),S4=a("li"),bwe=a("strong"),d0r=o("deberta"),m0r=o(" \u2014 "),Iee=a("a"),c0r=o("DebertaForTokenClassification"),f0r=o(" (DeBERTa model)"),g0r=l(),R4=a("li"),vwe=a("strong"),h0r=o("deberta-v2"),u0r=o(" \u2014 "),Nee=a("a"),p0r=o("DebertaV2ForTokenClassification"),_0r=o(" (DeBERTa-v2 model)"),b0r=l(),P4=a("li"),Fwe=a("strong"),v0r=o("distilbert"),F0r=o(" \u2014 "),qee=a("a"),T0r=o("DistilBertForTokenClassification"),M0r=o(" (DistilBERT model)"),E0r=l(),B4=a("li"),Twe=a("strong"),C0r=o("electra"),w0r=o(" \u2014 "),jee=a("a"),A0r=o("ElectraForTokenClassification"),L0r=o(" (ELECTRA model)"),y0r=l(),I4=a("li"),Mwe=a("strong"),x0r=o("ernie"),$0r=o(" \u2014 "),Dee=a("a"),k0r=o("ErnieForTokenClassification"),S0r=o(" (ERNIE model)"),R0r=l(),N4=a("li"),Ewe=a("strong"),P0r=o("esm"),B0r=o(" \u2014 "),Gee=a("a"),I0r=o("EsmForTokenClassification"),N0r=o(" (ESM model)"),q0r=l(),q4=a("li"),Cwe=a("strong"),j0r=o("flaubert"),D0r=o(" \u2014 "),Oee=a("a"),G0r=o("FlaubertForTokenClassification"),O0r=o(" (FlauBERT model)"),V0r=l(),j4=a("li"),wwe=a("strong"),X0r=o("fnet"),z0r=o(" \u2014 "),Vee=a("a"),Q0r=o("FNetForTokenClassification"),W0r=o(" (FNet model)"),U0r=l(),D4=a("li"),Awe=a("strong"),H0r=o("funnel"),J0r=o(" \u2014 "),Xee=a("a"),Y0r=o("FunnelForTokenClassification"),Z0r=o(" (Funnel Transformer model)"),K0r=l(),G4=a("li"),Lwe=a("strong"),ewr=o("gpt2"),owr=o(" \u2014 "),zee=a("a"),rwr=o("GPT2ForTokenClassification"),twr=o(" (OpenAI GPT-2 model)"),awr=l(),O4=a("li"),ywe=a("strong"),nwr=o("ibert"),swr=o(" \u2014 "),Qee=a("a"),lwr=o("IBertForTokenClassification"),iwr=o(" (I-BERT model)"),dwr=l(),V4=a("li"),xwe=a("strong"),mwr=o("layoutlm"),cwr=o(" \u2014 "),Wee=a("a"),fwr=o("LayoutLMForTokenClassification"),gwr=o(" (LayoutLM model)"),hwr=l(),X4=a("li"),$we=a("strong"),uwr=o("layoutlmv2"),pwr=o(" \u2014 "),Uee=a("a"),_wr=o("LayoutLMv2ForTokenClassification"),bwr=o(" (LayoutLMv2 model)"),vwr=l(),z4=a("li"),kwe=a("strong"),Fwr=o("layoutlmv3"),Twr=o(" \u2014 "),Hee=a("a"),Mwr=o("LayoutLMv3ForTokenClassification"),Ewr=o(" (LayoutLMv3 model)"),Cwr=l(),Q4=a("li"),Swe=a("strong"),wwr=o("lilt"),Awr=o(" \u2014 "),Jee=a("a"),Lwr=o("LiltForTokenClassification"),ywr=o(" (LiLT model)"),xwr=l(),W4=a("li"),Rwe=a("strong"),$wr=o("longformer"),kwr=o(" \u2014 "),Yee=a("a"),Swr=o("LongformerForTokenClassification"),Rwr=o(" (Longformer model)"),Pwr=l(),U4=a("li"),Pwe=a("strong"),Bwr=o("luke"),Iwr=o(" \u2014 "),Zee=a("a"),Nwr=o("LukeForTokenClassification"),qwr=o(" (LUKE model)"),jwr=l(),H4=a("li"),Bwe=a("strong"),Dwr=o("markuplm"),Gwr=o(" \u2014 "),Kee=a("a"),Owr=o("MarkupLMForTokenClassification"),Vwr=o(" (MarkupLM model)"),Xwr=l(),J4=a("li"),Iwe=a("strong"),zwr=o("megatron-bert"),Qwr=o(" \u2014 "),eoe=a("a"),Wwr=o("MegatronBertForTokenClassification"),Uwr=o(" (Megatron-BERT model)"),Hwr=l(),Y4=a("li"),Nwe=a("strong"),Jwr=o("mobilebert"),Ywr=o(" \u2014 "),ooe=a("a"),Zwr=o("MobileBertForTokenClassification"),Kwr=o(" (MobileBERT model)"),eAr=l(),Z4=a("li"),qwe=a("strong"),oAr=o("mpnet"),rAr=o(" \u2014 "),roe=a("a"),tAr=o("MPNetForTokenClassification"),aAr=o(" (MPNet model)"),nAr=l(),K4=a("li"),jwe=a("strong"),sAr=o("nezha"),lAr=o(" \u2014 "),toe=a("a"),iAr=o("NezhaForTokenClassification"),dAr=o(" (Nezha model)"),mAr=l(),eC=a("li"),Dwe=a("strong"),cAr=o("nystromformer"),fAr=o(" \u2014 "),aoe=a("a"),gAr=o("NystromformerForTokenClassification"),hAr=o(" (Nystr\xF6mformer model)"),uAr=l(),oC=a("li"),Gwe=a("strong"),pAr=o("qdqbert"),_Ar=o(" \u2014 "),noe=a("a"),bAr=o("QDQBertForTokenClassification"),vAr=o(" (QDQBert model)"),FAr=l(),rC=a("li"),Owe=a("strong"),TAr=o("rembert"),MAr=o(" \u2014 "),soe=a("a"),EAr=o("RemBertForTokenClassification"),CAr=o(" (RemBERT model)"),wAr=l(),tC=a("li"),Vwe=a("strong"),AAr=o("roberta"),LAr=o(" \u2014 "),loe=a("a"),yAr=o("RobertaForTokenClassification"),xAr=o(" (RoBERTa model)"),$Ar=l(),aC=a("li"),Xwe=a("strong"),kAr=o("roc_bert"),SAr=o(" \u2014 "),ioe=a("a"),RAr=o("RoCBertForTokenClassification"),PAr=o(" (RoCBert model)"),BAr=l(),nC=a("li"),zwe=a("strong"),IAr=o("roformer"),NAr=o(" \u2014 "),doe=a("a"),qAr=o("RoFormerForTokenClassification"),jAr=o(" (RoFormer model)"),DAr=l(),sC=a("li"),Qwe=a("strong"),GAr=o("squeezebert"),OAr=o(" \u2014 "),moe=a("a"),VAr=o("SqueezeBertForTokenClassification"),XAr=o(" (SqueezeBERT model)"),zAr=l(),lC=a("li"),Wwe=a("strong"),QAr=o("xlm"),WAr=o(" \u2014 "),coe=a("a"),UAr=o("XLMForTokenClassification"),HAr=o(" (XLM model)"),JAr=l(),iC=a("li"),Uwe=a("strong"),YAr=o("xlm-roberta"),ZAr=o(" \u2014 "),foe=a("a"),KAr=o("XLMRobertaForTokenClassification"),e6r=o(" (XLM-RoBERTa model)"),o6r=l(),dC=a("li"),Hwe=a("strong"),r6r=o("xlm-roberta-xl"),t6r=o(" \u2014 "),goe=a("a"),a6r=o("XLMRobertaXLForTokenClassification"),n6r=o(" (XLM-RoBERTa-XL model)"),s6r=l(),mC=a("li"),Jwe=a("strong"),l6r=o("xlnet"),i6r=o(" \u2014 "),hoe=a("a"),d6r=o("XLNetForTokenClassification"),m6r=o(" (XLNet model)"),c6r=l(),cC=a("li"),Ywe=a("strong"),f6r=o("yoso"),g6r=o(" \u2014 "),uoe=a("a"),h6r=o("YosoForTokenClassification"),u6r=o(" (YOSO model)"),p6r=l(),fC=a("p"),_6r=o("The model is set in evaluation mode by default using "),Zwe=a("code"),b6r=o("model.eval()"),v6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kwe=a("code"),F6r=o("model.train()"),T6r=l(),F(gC.$$.fragment),edo=l(),bm=a("h2"),hC=a("a"),eAe=a("span"),F(oR.$$.fragment),M6r=l(),oAe=a("span"),E6r=o("AutoModelForQuestionAnswering"),odo=l(),Jo=a("div"),F(rR.$$.fragment),C6r=l(),vm=a("p"),w6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),poe=a("a"),A6r=o("from_pretrained()"),L6r=o(" class method or the "),_oe=a("a"),y6r=o("from_config()"),x6r=o(` class
method.`),$6r=l(),tR=a("p"),k6r=o("This class cannot be instantiated directly using "),rAe=a("code"),S6r=o("__init__()"),R6r=o(" (throws an error)."),P6r=l(),It=a("div"),F(aR.$$.fragment),B6r=l(),tAe=a("p"),I6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),N6r=l(),Fm=a("p"),q6r=o(`Note:
Loading a model from its configuration file does `),aAe=a("strong"),j6r=o("not"),D6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=a("a"),G6r=o("from_pretrained()"),O6r=o(" to load the model weights."),V6r=l(),F(uC.$$.fragment),X6r=l(),ho=a("div"),F(nR.$$.fragment),z6r=l(),nAe=a("p"),Q6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W6r=l(),En=a("p"),U6r=o("The model class to instantiate is selected based on the "),sAe=a("code"),H6r=o("model_type"),J6r=o(` property of the config object (either
passed as an argument or loaded from `),lAe=a("code"),Y6r=o("pretrained_model_name_or_path"),Z6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iAe=a("code"),K6r=o("pretrained_model_name_or_path"),e7r=o(":"),o7r=l(),O=a("ul"),pC=a("li"),dAe=a("strong"),r7r=o("albert"),t7r=o(" \u2014 "),voe=a("a"),a7r=o("AlbertForQuestionAnswering"),n7r=o(" (ALBERT model)"),s7r=l(),_C=a("li"),mAe=a("strong"),l7r=o("bart"),i7r=o(" \u2014 "),Foe=a("a"),d7r=o("BartForQuestionAnswering"),m7r=o(" (BART model)"),c7r=l(),bC=a("li"),cAe=a("strong"),f7r=o("bert"),g7r=o(" \u2014 "),Toe=a("a"),h7r=o("BertForQuestionAnswering"),u7r=o(" (BERT model)"),p7r=l(),vC=a("li"),fAe=a("strong"),_7r=o("big_bird"),b7r=o(" \u2014 "),Moe=a("a"),v7r=o("BigBirdForQuestionAnswering"),F7r=o(" (BigBird model)"),T7r=l(),FC=a("li"),gAe=a("strong"),M7r=o("bigbird_pegasus"),E7r=o(" \u2014 "),Eoe=a("a"),C7r=o("BigBirdPegasusForQuestionAnswering"),w7r=o(" (BigBird-Pegasus model)"),A7r=l(),TC=a("li"),hAe=a("strong"),L7r=o("bloom"),y7r=o(" \u2014 "),Coe=a("a"),x7r=o("BloomForQuestionAnswering"),$7r=o(" (BLOOM model)"),k7r=l(),MC=a("li"),uAe=a("strong"),S7r=o("camembert"),R7r=o(" \u2014 "),woe=a("a"),P7r=o("CamembertForQuestionAnswering"),B7r=o(" (CamemBERT model)"),I7r=l(),EC=a("li"),pAe=a("strong"),N7r=o("canine"),q7r=o(" \u2014 "),Aoe=a("a"),j7r=o("CanineForQuestionAnswering"),D7r=o(" (CANINE model)"),G7r=l(),CC=a("li"),_Ae=a("strong"),O7r=o("convbert"),V7r=o(" \u2014 "),Loe=a("a"),X7r=o("ConvBertForQuestionAnswering"),z7r=o(" (ConvBERT model)"),Q7r=l(),wC=a("li"),bAe=a("strong"),W7r=o("data2vec-text"),U7r=o(" \u2014 "),yoe=a("a"),H7r=o("Data2VecTextForQuestionAnswering"),J7r=o(" (Data2VecText model)"),Y7r=l(),AC=a("li"),vAe=a("strong"),Z7r=o("deberta"),K7r=o(" \u2014 "),xoe=a("a"),e8r=o("DebertaForQuestionAnswering"),o8r=o(" (DeBERTa model)"),r8r=l(),LC=a("li"),FAe=a("strong"),t8r=o("deberta-v2"),a8r=o(" \u2014 "),$oe=a("a"),n8r=o("DebertaV2ForQuestionAnswering"),s8r=o(" (DeBERTa-v2 model)"),l8r=l(),yC=a("li"),TAe=a("strong"),i8r=o("distilbert"),d8r=o(" \u2014 "),koe=a("a"),m8r=o("DistilBertForQuestionAnswering"),c8r=o(" (DistilBERT model)"),f8r=l(),xC=a("li"),MAe=a("strong"),g8r=o("electra"),h8r=o(" \u2014 "),Soe=a("a"),u8r=o("ElectraForQuestionAnswering"),p8r=o(" (ELECTRA model)"),_8r=l(),$C=a("li"),EAe=a("strong"),b8r=o("ernie"),v8r=o(" \u2014 "),Roe=a("a"),F8r=o("ErnieForQuestionAnswering"),T8r=o(" (ERNIE model)"),M8r=l(),kC=a("li"),CAe=a("strong"),E8r=o("flaubert"),C8r=o(" \u2014 "),Poe=a("a"),w8r=o("FlaubertForQuestionAnsweringSimple"),A8r=o(" (FlauBERT model)"),L8r=l(),SC=a("li"),wAe=a("strong"),y8r=o("fnet"),x8r=o(" \u2014 "),Boe=a("a"),$8r=o("FNetForQuestionAnswering"),k8r=o(" (FNet model)"),S8r=l(),RC=a("li"),AAe=a("strong"),R8r=o("funnel"),P8r=o(" \u2014 "),Ioe=a("a"),B8r=o("FunnelForQuestionAnswering"),I8r=o(" (Funnel Transformer model)"),N8r=l(),PC=a("li"),LAe=a("strong"),q8r=o("gptj"),j8r=o(" \u2014 "),Noe=a("a"),D8r=o("GPTJForQuestionAnswering"),G8r=o(" (GPT-J model)"),O8r=l(),BC=a("li"),yAe=a("strong"),V8r=o("ibert"),X8r=o(" \u2014 "),qoe=a("a"),z8r=o("IBertForQuestionAnswering"),Q8r=o(" (I-BERT model)"),W8r=l(),IC=a("li"),xAe=a("strong"),U8r=o("layoutlmv2"),H8r=o(" \u2014 "),joe=a("a"),J8r=o("LayoutLMv2ForQuestionAnswering"),Y8r=o(" (LayoutLMv2 model)"),Z8r=l(),NC=a("li"),$Ae=a("strong"),K8r=o("layoutlmv3"),eLr=o(" \u2014 "),Doe=a("a"),oLr=o("LayoutLMv3ForQuestionAnswering"),rLr=o(" (LayoutLMv3 model)"),tLr=l(),qC=a("li"),kAe=a("strong"),aLr=o("led"),nLr=o(" \u2014 "),Goe=a("a"),sLr=o("LEDForQuestionAnswering"),lLr=o(" (LED model)"),iLr=l(),jC=a("li"),SAe=a("strong"),dLr=o("lilt"),mLr=o(" \u2014 "),Ooe=a("a"),cLr=o("LiltForQuestionAnswering"),fLr=o(" (LiLT model)"),gLr=l(),DC=a("li"),RAe=a("strong"),hLr=o("longformer"),uLr=o(" \u2014 "),Voe=a("a"),pLr=o("LongformerForQuestionAnswering"),_Lr=o(" (Longformer model)"),bLr=l(),GC=a("li"),PAe=a("strong"),vLr=o("luke"),FLr=o(" \u2014 "),Xoe=a("a"),TLr=o("LukeForQuestionAnswering"),MLr=o(" (LUKE model)"),ELr=l(),OC=a("li"),BAe=a("strong"),CLr=o("lxmert"),wLr=o(" \u2014 "),zoe=a("a"),ALr=o("LxmertForQuestionAnswering"),LLr=o(" (LXMERT model)"),yLr=l(),VC=a("li"),IAe=a("strong"),xLr=o("markuplm"),$Lr=o(" \u2014 "),Qoe=a("a"),kLr=o("MarkupLMForQuestionAnswering"),SLr=o(" (MarkupLM model)"),RLr=l(),XC=a("li"),NAe=a("strong"),PLr=o("mbart"),BLr=o(" \u2014 "),Woe=a("a"),ILr=o("MBartForQuestionAnswering"),NLr=o(" (mBART model)"),qLr=l(),zC=a("li"),qAe=a("strong"),jLr=o("megatron-bert"),DLr=o(" \u2014 "),Uoe=a("a"),GLr=o("MegatronBertForQuestionAnswering"),OLr=o(" (Megatron-BERT model)"),VLr=l(),QC=a("li"),jAe=a("strong"),XLr=o("mobilebert"),zLr=o(" \u2014 "),Hoe=a("a"),QLr=o("MobileBertForQuestionAnswering"),WLr=o(" (MobileBERT model)"),ULr=l(),WC=a("li"),DAe=a("strong"),HLr=o("mpnet"),JLr=o(" \u2014 "),Joe=a("a"),YLr=o("MPNetForQuestionAnswering"),ZLr=o(" (MPNet model)"),KLr=l(),UC=a("li"),GAe=a("strong"),eyr=o("mvp"),oyr=o(" \u2014 "),Yoe=a("a"),ryr=o("MvpForQuestionAnswering"),tyr=o(" (MVP model)"),ayr=l(),HC=a("li"),OAe=a("strong"),nyr=o("nezha"),syr=o(" \u2014 "),Zoe=a("a"),lyr=o("NezhaForQuestionAnswering"),iyr=o(" (Nezha model)"),dyr=l(),JC=a("li"),VAe=a("strong"),myr=o("nystromformer"),cyr=o(" \u2014 "),Koe=a("a"),fyr=o("NystromformerForQuestionAnswering"),gyr=o(" (Nystr\xF6mformer model)"),hyr=l(),YC=a("li"),XAe=a("strong"),uyr=o("opt"),pyr=o(" \u2014 "),ere=a("a"),_yr=o("OPTForQuestionAnswering"),byr=o(" (OPT model)"),vyr=l(),ZC=a("li"),zAe=a("strong"),Fyr=o("qdqbert"),Tyr=o(" \u2014 "),ore=a("a"),Myr=o("QDQBertForQuestionAnswering"),Eyr=o(" (QDQBert model)"),Cyr=l(),KC=a("li"),QAe=a("strong"),wyr=o("reformer"),Ayr=o(" \u2014 "),rre=a("a"),Lyr=o("ReformerForQuestionAnswering"),yyr=o(" (Reformer model)"),xyr=l(),e3=a("li"),WAe=a("strong"),$yr=o("rembert"),kyr=o(" \u2014 "),tre=a("a"),Syr=o("RemBertForQuestionAnswering"),Ryr=o(" (RemBERT model)"),Pyr=l(),o3=a("li"),UAe=a("strong"),Byr=o("roberta"),Iyr=o(" \u2014 "),are=a("a"),Nyr=o("RobertaForQuestionAnswering"),qyr=o(" (RoBERTa model)"),jyr=l(),r3=a("li"),HAe=a("strong"),Dyr=o("roc_bert"),Gyr=o(" \u2014 "),nre=a("a"),Oyr=o("RoCBertForQuestionAnswering"),Vyr=o(" (RoCBert model)"),Xyr=l(),t3=a("li"),JAe=a("strong"),zyr=o("roformer"),Qyr=o(" \u2014 "),sre=a("a"),Wyr=o("RoFormerForQuestionAnswering"),Uyr=o(" (RoFormer model)"),Hyr=l(),a3=a("li"),YAe=a("strong"),Jyr=o("splinter"),Yyr=o(" \u2014 "),lre=a("a"),Zyr=o("SplinterForQuestionAnswering"),Kyr=o(" (Splinter model)"),e9r=l(),n3=a("li"),ZAe=a("strong"),o9r=o("squeezebert"),r9r=o(" \u2014 "),ire=a("a"),t9r=o("SqueezeBertForQuestionAnswering"),a9r=o(" (SqueezeBERT model)"),n9r=l(),s3=a("li"),KAe=a("strong"),s9r=o("xlm"),l9r=o(" \u2014 "),dre=a("a"),i9r=o("XLMForQuestionAnsweringSimple"),d9r=o(" (XLM model)"),m9r=l(),l3=a("li"),e6e=a("strong"),c9r=o("xlm-roberta"),f9r=o(" \u2014 "),mre=a("a"),g9r=o("XLMRobertaForQuestionAnswering"),h9r=o(" (XLM-RoBERTa model)"),u9r=l(),i3=a("li"),o6e=a("strong"),p9r=o("xlm-roberta-xl"),_9r=o(" \u2014 "),cre=a("a"),b9r=o("XLMRobertaXLForQuestionAnswering"),v9r=o(" (XLM-RoBERTa-XL model)"),F9r=l(),d3=a("li"),r6e=a("strong"),T9r=o("xlnet"),M9r=o(" \u2014 "),fre=a("a"),E9r=o("XLNetForQuestionAnsweringSimple"),C9r=o(" (XLNet model)"),w9r=l(),m3=a("li"),t6e=a("strong"),A9r=o("yoso"),L9r=o(" \u2014 "),gre=a("a"),y9r=o("YosoForQuestionAnswering"),x9r=o(" (YOSO model)"),$9r=l(),c3=a("p"),k9r=o("The model is set in evaluation mode by default using "),a6e=a("code"),S9r=o("model.eval()"),R9r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n6e=a("code"),P9r=o("model.train()"),B9r=l(),F(f3.$$.fragment),rdo=l(),Tm=a("h2"),g3=a("a"),s6e=a("span"),F(sR.$$.fragment),I9r=l(),l6e=a("span"),N9r=o("AutoModelForTableQuestionAnswering"),tdo=l(),Yo=a("div"),F(lR.$$.fragment),q9r=l(),Mm=a("p"),j9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hre=a("a"),D9r=o("from_pretrained()"),G9r=o(" class method or the "),ure=a("a"),O9r=o("from_config()"),V9r=o(` class
method.`),X9r=l(),iR=a("p"),z9r=o("This class cannot be instantiated directly using "),i6e=a("code"),Q9r=o("__init__()"),W9r=o(" (throws an error)."),U9r=l(),Nt=a("div"),F(dR.$$.fragment),H9r=l(),d6e=a("p"),J9r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Y9r=l(),Em=a("p"),Z9r=o(`Note:
Loading a model from its configuration file does `),m6e=a("strong"),K9r=o("not"),exr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pre=a("a"),oxr=o("from_pretrained()"),rxr=o(" to load the model weights."),txr=l(),F(h3.$$.fragment),axr=l(),uo=a("div"),F(mR.$$.fragment),nxr=l(),c6e=a("p"),sxr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lxr=l(),Cn=a("p"),ixr=o("The model class to instantiate is selected based on the "),f6e=a("code"),dxr=o("model_type"),mxr=o(` property of the config object (either
passed as an argument or loaded from `),g6e=a("code"),cxr=o("pretrained_model_name_or_path"),fxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h6e=a("code"),gxr=o("pretrained_model_name_or_path"),hxr=o(":"),uxr=l(),u6e=a("ul"),u3=a("li"),p6e=a("strong"),pxr=o("tapas"),_xr=o(" \u2014 "),_re=a("a"),bxr=o("TapasForQuestionAnswering"),vxr=o(" (TAPAS model)"),Fxr=l(),p3=a("p"),Txr=o("The model is set in evaluation mode by default using "),_6e=a("code"),Mxr=o("model.eval()"),Exr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b6e=a("code"),Cxr=o("model.train()"),wxr=l(),F(_3.$$.fragment),ado=l(),Cm=a("h2"),b3=a("a"),v6e=a("span"),F(cR.$$.fragment),Axr=l(),F6e=a("span"),Lxr=o("AutoModelForDocumentQuestionAnswering"),ndo=l(),Zo=a("div"),F(fR.$$.fragment),yxr=l(),wm=a("p"),xxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),bre=a("a"),$xr=o("from_pretrained()"),kxr=o(" class method or the "),vre=a("a"),Sxr=o("from_config()"),Rxr=o(` class
method.`),Pxr=l(),gR=a("p"),Bxr=o("This class cannot be instantiated directly using "),T6e=a("code"),Ixr=o("__init__()"),Nxr=o(" (throws an error)."),qxr=l(),qt=a("div"),F(hR.$$.fragment),jxr=l(),M6e=a("p"),Dxr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),Gxr=l(),Am=a("p"),Oxr=o(`Note:
Loading a model from its configuration file does `),E6e=a("strong"),Vxr=o("not"),Xxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fre=a("a"),zxr=o("from_pretrained()"),Qxr=o(" to load the model weights."),Wxr=l(),F(v3.$$.fragment),Uxr=l(),po=a("div"),F(uR.$$.fragment),Hxr=l(),C6e=a("p"),Jxr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),Yxr=l(),wn=a("p"),Zxr=o("The model class to instantiate is selected based on the "),w6e=a("code"),Kxr=o("model_type"),e$r=o(` property of the config object (either
passed as an argument or loaded from `),A6e=a("code"),o$r=o("pretrained_model_name_or_path"),r$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=a("code"),t$r=o("pretrained_model_name_or_path"),a$r=o(":"),n$r=l(),Lm=a("ul"),F3=a("li"),y6e=a("strong"),s$r=o("layoutlm"),l$r=o(" \u2014 "),Tre=a("a"),i$r=o("LayoutLMForQuestionAnswering"),d$r=o(" (LayoutLM model)"),m$r=l(),T3=a("li"),x6e=a("strong"),c$r=o("layoutlmv2"),f$r=o(" \u2014 "),Mre=a("a"),g$r=o("LayoutLMv2ForQuestionAnswering"),h$r=o(" (LayoutLMv2 model)"),u$r=l(),M3=a("li"),$6e=a("strong"),p$r=o("layoutlmv3"),_$r=o(" \u2014 "),Ere=a("a"),b$r=o("LayoutLMv3ForQuestionAnswering"),v$r=o(" (LayoutLMv3 model)"),F$r=l(),E3=a("p"),T$r=o("The model is set in evaluation mode by default using "),k6e=a("code"),M$r=o("model.eval()"),E$r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S6e=a("code"),C$r=o("model.train()"),w$r=l(),F(C3.$$.fragment),sdo=l(),ym=a("h2"),w3=a("a"),R6e=a("span"),F(pR.$$.fragment),A$r=l(),P6e=a("span"),L$r=o("AutoModelForImageClassification"),ldo=l(),Ko=a("div"),F(_R.$$.fragment),y$r=l(),xm=a("p"),x$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Cre=a("a"),$$r=o("from_pretrained()"),k$r=o(" class method or the "),wre=a("a"),S$r=o("from_config()"),R$r=o(` class
method.`),P$r=l(),bR=a("p"),B$r=o("This class cannot be instantiated directly using "),B6e=a("code"),I$r=o("__init__()"),N$r=o(" (throws an error)."),q$r=l(),jt=a("div"),F(vR.$$.fragment),j$r=l(),I6e=a("p"),D$r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),G$r=l(),$m=a("p"),O$r=o(`Note:
Loading a model from its configuration file does `),N6e=a("strong"),V$r=o("not"),X$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=a("a"),z$r=o("from_pretrained()"),Q$r=o(" to load the model weights."),W$r=l(),F(A3.$$.fragment),U$r=l(),_o=a("div"),F(FR.$$.fragment),H$r=l(),q6e=a("p"),J$r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Y$r=l(),An=a("p"),Z$r=o("The model class to instantiate is selected based on the "),j6e=a("code"),K$r=o("model_type"),ekr=o(` property of the config object (either
passed as an argument or loaded from `),D6e=a("code"),okr=o("pretrained_model_name_or_path"),rkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=a("code"),tkr=o("pretrained_model_name_or_path"),akr=o(":"),nkr=l(),Fe=a("ul"),L3=a("li"),O6e=a("strong"),skr=o("beit"),lkr=o(" \u2014 "),Lre=a("a"),ikr=o("BeitForImageClassification"),dkr=o(" (BEiT model)"),mkr=l(),y3=a("li"),V6e=a("strong"),ckr=o("convnext"),fkr=o(" \u2014 "),yre=a("a"),gkr=o("ConvNextForImageClassification"),hkr=o(" (ConvNeXT model)"),ukr=l(),x3=a("li"),X6e=a("strong"),pkr=o("cvt"),_kr=o(" \u2014 "),xre=a("a"),bkr=o("CvtForImageClassification"),vkr=o(" (CvT model)"),Fkr=l(),$3=a("li"),z6e=a("strong"),Tkr=o("data2vec-vision"),Mkr=o(" \u2014 "),$re=a("a"),Ekr=o("Data2VecVisionForImageClassification"),Ckr=o(" (Data2VecVision model)"),wkr=l(),jl=a("li"),Q6e=a("strong"),Akr=o("deit"),Lkr=o(" \u2014 "),kre=a("a"),ykr=o("DeiTForImageClassification"),xkr=o(" or "),Sre=a("a"),$kr=o("DeiTForImageClassificationWithTeacher"),kkr=o(" (DeiT model)"),Skr=l(),k3=a("li"),W6e=a("strong"),Rkr=o("imagegpt"),Pkr=o(" \u2014 "),Rre=a("a"),Bkr=o("ImageGPTForImageClassification"),Ikr=o(" (ImageGPT model)"),Nkr=l(),Dl=a("li"),U6e=a("strong"),qkr=o("levit"),jkr=o(" \u2014 "),Pre=a("a"),Dkr=o("LevitForImageClassification"),Gkr=o(" or "),Bre=a("a"),Okr=o("LevitForImageClassificationWithTeacher"),Vkr=o(" (LeViT model)"),Xkr=l(),S3=a("li"),H6e=a("strong"),zkr=o("mobilenet_v2"),Qkr=o(" \u2014 "),Ire=a("a"),Wkr=o("MobileNetV2ForImageClassification"),Ukr=o(" (MobileNetV2 model)"),Hkr=l(),R3=a("li"),J6e=a("strong"),Jkr=o("mobilevit"),Ykr=o(" \u2014 "),Nre=a("a"),Zkr=o("MobileViTForImageClassification"),Kkr=o(" (MobileViT model)"),eSr=l(),Dt=a("li"),Y6e=a("strong"),oSr=o("perceiver"),rSr=o(" \u2014 "),qre=a("a"),tSr=o("PerceiverForImageClassificationLearned"),aSr=o(" or "),jre=a("a"),nSr=o("PerceiverForImageClassificationFourier"),sSr=o(" or "),Dre=a("a"),lSr=o("PerceiverForImageClassificationConvProcessing"),iSr=o(" (Perceiver model)"),dSr=l(),P3=a("li"),Z6e=a("strong"),mSr=o("poolformer"),cSr=o(" \u2014 "),Gre=a("a"),fSr=o("PoolFormerForImageClassification"),gSr=o(" (PoolFormer model)"),hSr=l(),B3=a("li"),K6e=a("strong"),uSr=o("regnet"),pSr=o(" \u2014 "),Ore=a("a"),_Sr=o("RegNetForImageClassification"),bSr=o(" (RegNet model)"),vSr=l(),I3=a("li"),e7e=a("strong"),FSr=o("resnet"),TSr=o(" \u2014 "),Vre=a("a"),MSr=o("ResNetForImageClassification"),ESr=o(" (ResNet model)"),CSr=l(),N3=a("li"),o7e=a("strong"),wSr=o("segformer"),ASr=o(" \u2014 "),Xre=a("a"),LSr=o("SegformerForImageClassification"),ySr=o(" (SegFormer model)"),xSr=l(),q3=a("li"),r7e=a("strong"),$Sr=o("swin"),kSr=o(" \u2014 "),zre=a("a"),SSr=o("SwinForImageClassification"),RSr=o(" (Swin Transformer model)"),PSr=l(),j3=a("li"),t7e=a("strong"),BSr=o("swinv2"),ISr=o(" \u2014 "),Qre=a("a"),NSr=o("Swinv2ForImageClassification"),qSr=o(" (Swin Transformer V2 model)"),jSr=l(),D3=a("li"),a7e=a("strong"),DSr=o("van"),GSr=o(" \u2014 "),Wre=a("a"),OSr=o("VanForImageClassification"),VSr=o(" (VAN model)"),XSr=l(),G3=a("li"),n7e=a("strong"),zSr=o("vit"),QSr=o(" \u2014 "),Ure=a("a"),WSr=o("ViTForImageClassification"),USr=o(" (ViT model)"),HSr=l(),O3=a("li"),s7e=a("strong"),JSr=o("vit_msn"),YSr=o(" \u2014 "),Hre=a("a"),ZSr=o("ViTMSNForImageClassification"),KSr=o(" (ViTMSN model)"),eRr=l(),V3=a("p"),oRr=o("The model is set in evaluation mode by default using "),l7e=a("code"),rRr=o("model.eval()"),tRr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i7e=a("code"),aRr=o("model.train()"),nRr=l(),F(X3.$$.fragment),ido=l(),km=a("h2"),z3=a("a"),d7e=a("span"),F(TR.$$.fragment),sRr=l(),m7e=a("span"),lRr=o("AutoModelForVideoClassification"),ddo=l(),er=a("div"),F(MR.$$.fragment),iRr=l(),Sm=a("p"),dRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),Jre=a("a"),mRr=o("from_pretrained()"),cRr=o(" class method or the "),Yre=a("a"),fRr=o("from_config()"),gRr=o(` class
method.`),hRr=l(),ER=a("p"),uRr=o("This class cannot be instantiated directly using "),c7e=a("code"),pRr=o("__init__()"),_Rr=o(" (throws an error)."),bRr=l(),Gt=a("div"),F(CR.$$.fragment),vRr=l(),f7e=a("p"),FRr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),TRr=l(),Rm=a("p"),MRr=o(`Note:
Loading a model from its configuration file does `),g7e=a("strong"),ERr=o("not"),CRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zre=a("a"),wRr=o("from_pretrained()"),ARr=o(" to load the model weights."),LRr=l(),F(Q3.$$.fragment),yRr=l(),bo=a("div"),F(wR.$$.fragment),xRr=l(),h7e=a("p"),$Rr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),kRr=l(),Ln=a("p"),SRr=o("The model class to instantiate is selected based on the "),u7e=a("code"),RRr=o("model_type"),PRr=o(` property of the config object (either
passed as an argument or loaded from `),p7e=a("code"),BRr=o("pretrained_model_name_or_path"),IRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_7e=a("code"),NRr=o("pretrained_model_name_or_path"),qRr=o(":"),jRr=l(),b7e=a("ul"),W3=a("li"),v7e=a("strong"),DRr=o("videomae"),GRr=o(" \u2014 "),Kre=a("a"),ORr=o("VideoMAEForVideoClassification"),VRr=o(" (VideoMAE model)"),XRr=l(),U3=a("p"),zRr=o("The model is set in evaluation mode by default using "),F7e=a("code"),QRr=o("model.eval()"),WRr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T7e=a("code"),URr=o("model.train()"),HRr=l(),F(H3.$$.fragment),mdo=l(),Pm=a("h2"),J3=a("a"),M7e=a("span"),F(AR.$$.fragment),JRr=l(),E7e=a("span"),YRr=o("AutoModelForVision2Seq"),cdo=l(),or=a("div"),F(LR.$$.fragment),ZRr=l(),Bm=a("p"),KRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ete=a("a"),ePr=o("from_pretrained()"),oPr=o(" class method or the "),ote=a("a"),rPr=o("from_config()"),tPr=o(` class
method.`),aPr=l(),yR=a("p"),nPr=o("This class cannot be instantiated directly using "),C7e=a("code"),sPr=o("__init__()"),lPr=o(" (throws an error)."),iPr=l(),Ot=a("div"),F(xR.$$.fragment),dPr=l(),w7e=a("p"),mPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cPr=l(),Im=a("p"),fPr=o(`Note:
Loading a model from its configuration file does `),A7e=a("strong"),gPr=o("not"),hPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rte=a("a"),uPr=o("from_pretrained()"),pPr=o(" to load the model weights."),_Pr=l(),F(Y3.$$.fragment),bPr=l(),vo=a("div"),F($R.$$.fragment),vPr=l(),L7e=a("p"),FPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TPr=l(),yn=a("p"),MPr=o("The model class to instantiate is selected based on the "),y7e=a("code"),EPr=o("model_type"),CPr=o(` property of the config object (either
passed as an argument or loaded from `),x7e=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=a("code"),LPr=o("pretrained_model_name_or_path"),yPr=o(":"),xPr=l(),k7e=a("ul"),Z3=a("li"),S7e=a("strong"),$Pr=o("vision-encoder-decoder"),kPr=o(" \u2014 "),tte=a("a"),SPr=o("VisionEncoderDecoderModel"),RPr=o(" (Vision Encoder decoder model)"),PPr=l(),K3=a("p"),BPr=o("The model is set in evaluation mode by default using "),R7e=a("code"),IPr=o("model.eval()"),NPr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P7e=a("code"),qPr=o("model.train()"),jPr=l(),F(e5.$$.fragment),fdo=l(),Nm=a("h2"),o5=a("a"),B7e=a("span"),F(kR.$$.fragment),DPr=l(),I7e=a("span"),GPr=o("AutoModelForVisualQuestionAnswering"),gdo=l(),rr=a("div"),F(SR.$$.fragment),OPr=l(),qm=a("p"),VPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),ate=a("a"),XPr=o("from_pretrained()"),zPr=o(" class method or the "),nte=a("a"),QPr=o("from_config()"),WPr=o(` class
method.`),UPr=l(),RR=a("p"),HPr=o("This class cannot be instantiated directly using "),N7e=a("code"),JPr=o("__init__()"),YPr=o(" (throws an error)."),ZPr=l(),Vt=a("div"),F(PR.$$.fragment),KPr=l(),q7e=a("p"),eBr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),oBr=l(),jm=a("p"),rBr=o(`Note:
Loading a model from its configuration file does `),j7e=a("strong"),tBr=o("not"),aBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ste=a("a"),nBr=o("from_pretrained()"),sBr=o(" to load the model weights."),lBr=l(),F(r5.$$.fragment),iBr=l(),Fo=a("div"),F(BR.$$.fragment),dBr=l(),D7e=a("p"),mBr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),cBr=l(),xn=a("p"),fBr=o("The model class to instantiate is selected based on the "),G7e=a("code"),gBr=o("model_type"),hBr=o(` property of the config object (either
passed as an argument or loaded from `),O7e=a("code"),uBr=o("pretrained_model_name_or_path"),pBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=a("code"),_Br=o("pretrained_model_name_or_path"),bBr=o(":"),vBr=l(),X7e=a("ul"),t5=a("li"),z7e=a("strong"),FBr=o("vilt"),TBr=o(" \u2014 "),lte=a("a"),MBr=o("ViltForQuestionAnswering"),EBr=o(" (ViLT model)"),CBr=l(),a5=a("p"),wBr=o("The model is set in evaluation mode by default using "),Q7e=a("code"),ABr=o("model.eval()"),LBr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W7e=a("code"),yBr=o("model.train()"),xBr=l(),F(n5.$$.fragment),hdo=l(),Dm=a("h2"),s5=a("a"),U7e=a("span"),F(IR.$$.fragment),$Br=l(),H7e=a("span"),kBr=o("AutoModelForAudioClassification"),udo=l(),tr=a("div"),F(NR.$$.fragment),SBr=l(),Gm=a("p"),RBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ite=a("a"),PBr=o("from_pretrained()"),BBr=o(" class method or the "),dte=a("a"),IBr=o("from_config()"),NBr=o(` class
method.`),qBr=l(),qR=a("p"),jBr=o("This class cannot be instantiated directly using "),J7e=a("code"),DBr=o("__init__()"),GBr=o(" (throws an error)."),OBr=l(),Xt=a("div"),F(jR.$$.fragment),VBr=l(),Y7e=a("p"),XBr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),zBr=l(),Om=a("p"),QBr=o(`Note:
Loading a model from its configuration file does `),Z7e=a("strong"),WBr=o("not"),UBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=a("a"),HBr=o("from_pretrained()"),JBr=o(" to load the model weights."),YBr=l(),F(l5.$$.fragment),ZBr=l(),To=a("div"),F(DR.$$.fragment),KBr=l(),K7e=a("p"),eIr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),oIr=l(),$n=a("p"),rIr=o("The model class to instantiate is selected based on the "),e8e=a("code"),tIr=o("model_type"),aIr=o(` property of the config object (either
passed as an argument or loaded from `),o8e=a("code"),nIr=o("pretrained_model_name_or_path"),sIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r8e=a("code"),lIr=o("pretrained_model_name_or_path"),iIr=o(":"),dIr=l(),Ne=a("ul"),i5=a("li"),t8e=a("strong"),mIr=o("data2vec-audio"),cIr=o(" \u2014 "),cte=a("a"),fIr=o("Data2VecAudioForSequenceClassification"),gIr=o(" (Data2VecAudio model)"),hIr=l(),d5=a("li"),a8e=a("strong"),uIr=o("hubert"),pIr=o(" \u2014 "),fte=a("a"),_Ir=o("HubertForSequenceClassification"),bIr=o(" (Hubert model)"),vIr=l(),m5=a("li"),n8e=a("strong"),FIr=o("sew"),TIr=o(" \u2014 "),gte=a("a"),MIr=o("SEWForSequenceClassification"),EIr=o(" (SEW model)"),CIr=l(),c5=a("li"),s8e=a("strong"),wIr=o("sew-d"),AIr=o(" \u2014 "),hte=a("a"),LIr=o("SEWDForSequenceClassification"),yIr=o(" (SEW-D model)"),xIr=l(),f5=a("li"),l8e=a("strong"),$Ir=o("unispeech"),kIr=o(" \u2014 "),ute=a("a"),SIr=o("UniSpeechForSequenceClassification"),RIr=o(" (UniSpeech model)"),PIr=l(),g5=a("li"),i8e=a("strong"),BIr=o("unispeech-sat"),IIr=o(" \u2014 "),pte=a("a"),NIr=o("UniSpeechSatForSequenceClassification"),qIr=o(" (UniSpeechSat model)"),jIr=l(),h5=a("li"),d8e=a("strong"),DIr=o("wav2vec2"),GIr=o(" \u2014 "),_te=a("a"),OIr=o("Wav2Vec2ForSequenceClassification"),VIr=o(" (Wav2Vec2 model)"),XIr=l(),u5=a("li"),m8e=a("strong"),zIr=o("wav2vec2-conformer"),QIr=o(" \u2014 "),bte=a("a"),WIr=o("Wav2Vec2ConformerForSequenceClassification"),UIr=o(" (Wav2Vec2-Conformer model)"),HIr=l(),p5=a("li"),c8e=a("strong"),JIr=o("wavlm"),YIr=o(" \u2014 "),vte=a("a"),ZIr=o("WavLMForSequenceClassification"),KIr=o(" (WavLM model)"),eNr=l(),_5=a("p"),oNr=o("The model is set in evaluation mode by default using "),f8e=a("code"),rNr=o("model.eval()"),tNr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g8e=a("code"),aNr=o("model.train()"),nNr=l(),F(b5.$$.fragment),pdo=l(),Vm=a("h2"),v5=a("a"),h8e=a("span"),F(GR.$$.fragment),sNr=l(),u8e=a("span"),lNr=o("AutoModelForAudioFrameClassification"),_do=l(),ar=a("div"),F(OR.$$.fragment),iNr=l(),Xm=a("p"),dNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Fte=a("a"),mNr=o("from_pretrained()"),cNr=o(" class method or the "),Tte=a("a"),fNr=o("from_config()"),gNr=o(` class
method.`),hNr=l(),VR=a("p"),uNr=o("This class cannot be instantiated directly using "),p8e=a("code"),pNr=o("__init__()"),_Nr=o(" (throws an error)."),bNr=l(),zt=a("div"),F(XR.$$.fragment),vNr=l(),_8e=a("p"),FNr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),TNr=l(),zm=a("p"),MNr=o(`Note:
Loading a model from its configuration file does `),b8e=a("strong"),ENr=o("not"),CNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mte=a("a"),wNr=o("from_pretrained()"),ANr=o(" to load the model weights."),LNr=l(),F(F5.$$.fragment),yNr=l(),Mo=a("div"),F(zR.$$.fragment),xNr=l(),v8e=a("p"),$Nr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),kNr=l(),kn=a("p"),SNr=o("The model class to instantiate is selected based on the "),F8e=a("code"),RNr=o("model_type"),PNr=o(` property of the config object (either
passed as an argument or loaded from `),T8e=a("code"),BNr=o("pretrained_model_name_or_path"),INr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M8e=a("code"),NNr=o("pretrained_model_name_or_path"),qNr=o(":"),jNr=l(),Ft=a("ul"),T5=a("li"),E8e=a("strong"),DNr=o("data2vec-audio"),GNr=o(" \u2014 "),Ete=a("a"),ONr=o("Data2VecAudioForAudioFrameClassification"),VNr=o(" (Data2VecAudio model)"),XNr=l(),M5=a("li"),C8e=a("strong"),zNr=o("unispeech-sat"),QNr=o(" \u2014 "),Cte=a("a"),WNr=o("UniSpeechSatForAudioFrameClassification"),UNr=o(" (UniSpeechSat model)"),HNr=l(),E5=a("li"),w8e=a("strong"),JNr=o("wav2vec2"),YNr=o(" \u2014 "),wte=a("a"),ZNr=o("Wav2Vec2ForAudioFrameClassification"),KNr=o(" (Wav2Vec2 model)"),eqr=l(),C5=a("li"),A8e=a("strong"),oqr=o("wav2vec2-conformer"),rqr=o(" \u2014 "),Ate=a("a"),tqr=o("Wav2Vec2ConformerForAudioFrameClassification"),aqr=o(" (Wav2Vec2-Conformer model)"),nqr=l(),w5=a("li"),L8e=a("strong"),sqr=o("wavlm"),lqr=o(" \u2014 "),Lte=a("a"),iqr=o("WavLMForAudioFrameClassification"),dqr=o(" (WavLM model)"),mqr=l(),A5=a("p"),cqr=o("The model is set in evaluation mode by default using "),y8e=a("code"),fqr=o("model.eval()"),gqr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x8e=a("code"),hqr=o("model.train()"),uqr=l(),F(L5.$$.fragment),bdo=l(),Qm=a("h2"),y5=a("a"),$8e=a("span"),F(QR.$$.fragment),pqr=l(),k8e=a("span"),_qr=o("AutoModelForCTC"),vdo=l(),nr=a("div"),F(WR.$$.fragment),bqr=l(),Wm=a("p"),vqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yte=a("a"),Fqr=o("from_pretrained()"),Tqr=o(" class method or the "),xte=a("a"),Mqr=o("from_config()"),Eqr=o(` class
method.`),Cqr=l(),UR=a("p"),wqr=o("This class cannot be instantiated directly using "),S8e=a("code"),Aqr=o("__init__()"),Lqr=o(" (throws an error)."),yqr=l(),Qt=a("div"),F(HR.$$.fragment),xqr=l(),R8e=a("p"),$qr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),kqr=l(),Um=a("p"),Sqr=o(`Note:
Loading a model from its configuration file does `),P8e=a("strong"),Rqr=o("not"),Pqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$te=a("a"),Bqr=o("from_pretrained()"),Iqr=o(" to load the model weights."),Nqr=l(),F(x5.$$.fragment),qqr=l(),Eo=a("div"),F(JR.$$.fragment),jqr=l(),B8e=a("p"),Dqr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Gqr=l(),Sn=a("p"),Oqr=o("The model class to instantiate is selected based on the "),I8e=a("code"),Vqr=o("model_type"),Xqr=o(` property of the config object (either
passed as an argument or loaded from `),N8e=a("code"),zqr=o("pretrained_model_name_or_path"),Qqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q8e=a("code"),Wqr=o("pretrained_model_name_or_path"),Uqr=o(":"),Hqr=l(),xe=a("ul"),$5=a("li"),j8e=a("strong"),Jqr=o("data2vec-audio"),Yqr=o(" \u2014 "),kte=a("a"),Zqr=o("Data2VecAudioForCTC"),Kqr=o(" (Data2VecAudio model)"),ejr=l(),k5=a("li"),D8e=a("strong"),ojr=o("hubert"),rjr=o(" \u2014 "),Ste=a("a"),tjr=o("HubertForCTC"),ajr=o(" (Hubert model)"),njr=l(),S5=a("li"),G8e=a("strong"),sjr=o("mctct"),ljr=o(" \u2014 "),Rte=a("a"),ijr=o("MCTCTForCTC"),djr=o(" (M-CTC-T model)"),mjr=l(),R5=a("li"),O8e=a("strong"),cjr=o("sew"),fjr=o(" \u2014 "),Pte=a("a"),gjr=o("SEWForCTC"),hjr=o(" (SEW model)"),ujr=l(),P5=a("li"),V8e=a("strong"),pjr=o("sew-d"),_jr=o(" \u2014 "),Bte=a("a"),bjr=o("SEWDForCTC"),vjr=o(" (SEW-D model)"),Fjr=l(),B5=a("li"),X8e=a("strong"),Tjr=o("unispeech"),Mjr=o(" \u2014 "),Ite=a("a"),Ejr=o("UniSpeechForCTC"),Cjr=o(" (UniSpeech model)"),wjr=l(),I5=a("li"),z8e=a("strong"),Ajr=o("unispeech-sat"),Ljr=o(" \u2014 "),Nte=a("a"),yjr=o("UniSpeechSatForCTC"),xjr=o(" (UniSpeechSat model)"),$jr=l(),N5=a("li"),Q8e=a("strong"),kjr=o("wav2vec2"),Sjr=o(" \u2014 "),qte=a("a"),Rjr=o("Wav2Vec2ForCTC"),Pjr=o(" (Wav2Vec2 model)"),Bjr=l(),q5=a("li"),W8e=a("strong"),Ijr=o("wav2vec2-conformer"),Njr=o(" \u2014 "),jte=a("a"),qjr=o("Wav2Vec2ConformerForCTC"),jjr=o(" (Wav2Vec2-Conformer model)"),Djr=l(),j5=a("li"),U8e=a("strong"),Gjr=o("wavlm"),Ojr=o(" \u2014 "),Dte=a("a"),Vjr=o("WavLMForCTC"),Xjr=o(" (WavLM model)"),zjr=l(),D5=a("p"),Qjr=o("The model is set in evaluation mode by default using "),H8e=a("code"),Wjr=o("model.eval()"),Ujr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J8e=a("code"),Hjr=o("model.train()"),Jjr=l(),F(G5.$$.fragment),Fdo=l(),Hm=a("h2"),O5=a("a"),Y8e=a("span"),F(YR.$$.fragment),Yjr=l(),Z8e=a("span"),Zjr=o("AutoModelForSpeechSeq2Seq"),Tdo=l(),sr=a("div"),F(ZR.$$.fragment),Kjr=l(),Jm=a("p"),eDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Gte=a("a"),oDr=o("from_pretrained()"),rDr=o(" class method or the "),Ote=a("a"),tDr=o("from_config()"),aDr=o(` class
method.`),nDr=l(),KR=a("p"),sDr=o("This class cannot be instantiated directly using "),K8e=a("code"),lDr=o("__init__()"),iDr=o(" (throws an error)."),dDr=l(),Wt=a("div"),F(eP.$$.fragment),mDr=l(),eLe=a("p"),cDr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fDr=l(),Ym=a("p"),gDr=o(`Note:
Loading a model from its configuration file does `),oLe=a("strong"),hDr=o("not"),uDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vte=a("a"),pDr=o("from_pretrained()"),_Dr=o(" to load the model weights."),bDr=l(),F(V5.$$.fragment),vDr=l(),Co=a("div"),F(oP.$$.fragment),FDr=l(),rLe=a("p"),TDr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),MDr=l(),Rn=a("p"),EDr=o("The model class to instantiate is selected based on the "),tLe=a("code"),CDr=o("model_type"),wDr=o(` property of the config object (either
passed as an argument or loaded from `),aLe=a("code"),ADr=o("pretrained_model_name_or_path"),LDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nLe=a("code"),yDr=o("pretrained_model_name_or_path"),xDr=o(":"),$Dr=l(),Zm=a("ul"),X5=a("li"),sLe=a("strong"),kDr=o("speech-encoder-decoder"),SDr=o(" \u2014 "),Xte=a("a"),RDr=o("SpeechEncoderDecoderModel"),PDr=o(" (Speech Encoder decoder model)"),BDr=l(),z5=a("li"),lLe=a("strong"),IDr=o("speech_to_text"),NDr=o(" \u2014 "),zte=a("a"),qDr=o("Speech2TextForConditionalGeneration"),jDr=o(" (Speech2Text model)"),DDr=l(),Q5=a("li"),iLe=a("strong"),GDr=o("whisper"),ODr=o(" \u2014 "),Qte=a("a"),VDr=o("WhisperForConditionalGeneration"),XDr=o(" (Whisper model)"),zDr=l(),W5=a("p"),QDr=o("The model is set in evaluation mode by default using "),dLe=a("code"),WDr=o("model.eval()"),UDr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mLe=a("code"),HDr=o("model.train()"),JDr=l(),F(U5.$$.fragment),Mdo=l(),Km=a("h2"),H5=a("a"),cLe=a("span"),F(rP.$$.fragment),YDr=l(),fLe=a("span"),ZDr=o("AutoModelForAudioXVector"),Edo=l(),lr=a("div"),F(tP.$$.fragment),KDr=l(),ec=a("p"),eGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Wte=a("a"),oGr=o("from_pretrained()"),rGr=o(" class method or the "),Ute=a("a"),tGr=o("from_config()"),aGr=o(` class
method.`),nGr=l(),aP=a("p"),sGr=o("This class cannot be instantiated directly using "),gLe=a("code"),lGr=o("__init__()"),iGr=o(" (throws an error)."),dGr=l(),Ut=a("div"),F(nP.$$.fragment),mGr=l(),hLe=a("p"),cGr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),fGr=l(),oc=a("p"),gGr=o(`Note:
Loading a model from its configuration file does `),uLe=a("strong"),hGr=o("not"),uGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hte=a("a"),pGr=o("from_pretrained()"),_Gr=o(" to load the model weights."),bGr=l(),F(J5.$$.fragment),vGr=l(),wo=a("div"),F(sP.$$.fragment),FGr=l(),pLe=a("p"),TGr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),MGr=l(),Pn=a("p"),EGr=o("The model class to instantiate is selected based on the "),_Le=a("code"),CGr=o("model_type"),wGr=o(` property of the config object (either
passed as an argument or loaded from `),bLe=a("code"),AGr=o("pretrained_model_name_or_path"),LGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vLe=a("code"),yGr=o("pretrained_model_name_or_path"),xGr=o(":"),$Gr=l(),Tt=a("ul"),Y5=a("li"),FLe=a("strong"),kGr=o("data2vec-audio"),SGr=o(" \u2014 "),Jte=a("a"),RGr=o("Data2VecAudioForXVector"),PGr=o(" (Data2VecAudio model)"),BGr=l(),Z5=a("li"),TLe=a("strong"),IGr=o("unispeech-sat"),NGr=o(" \u2014 "),Yte=a("a"),qGr=o("UniSpeechSatForXVector"),jGr=o(" (UniSpeechSat model)"),DGr=l(),K5=a("li"),MLe=a("strong"),GGr=o("wav2vec2"),OGr=o(" \u2014 "),Zte=a("a"),VGr=o("Wav2Vec2ForXVector"),XGr=o(" (Wav2Vec2 model)"),zGr=l(),e0=a("li"),ELe=a("strong"),QGr=o("wav2vec2-conformer"),WGr=o(" \u2014 "),Kte=a("a"),UGr=o("Wav2Vec2ConformerForXVector"),HGr=o(" (Wav2Vec2-Conformer model)"),JGr=l(),o0=a("li"),CLe=a("strong"),YGr=o("wavlm"),ZGr=o(" \u2014 "),eae=a("a"),KGr=o("WavLMForXVector"),eOr=o(" (WavLM model)"),oOr=l(),r0=a("p"),rOr=o("The model is set in evaluation mode by default using "),wLe=a("code"),tOr=o("model.eval()"),aOr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ALe=a("code"),nOr=o("model.train()"),sOr=l(),F(t0.$$.fragment),Cdo=l(),rc=a("h2"),a0=a("a"),LLe=a("span"),F(lP.$$.fragment),lOr=l(),yLe=a("span"),iOr=o("AutoModelForMaskedImageModeling"),wdo=l(),ir=a("div"),F(iP.$$.fragment),dOr=l(),tc=a("p"),mOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),oae=a("a"),cOr=o("from_pretrained()"),fOr=o(" class method or the "),rae=a("a"),gOr=o("from_config()"),hOr=o(` class
method.`),uOr=l(),dP=a("p"),pOr=o("This class cannot be instantiated directly using "),xLe=a("code"),_Or=o("__init__()"),bOr=o(" (throws an error)."),vOr=l(),Ht=a("div"),F(mP.$$.fragment),FOr=l(),$Le=a("p"),TOr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),MOr=l(),ac=a("p"),EOr=o(`Note:
Loading a model from its configuration file does `),kLe=a("strong"),COr=o("not"),wOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tae=a("a"),AOr=o("from_pretrained()"),LOr=o(" to load the model weights."),yOr=l(),F(n0.$$.fragment),xOr=l(),Ao=a("div"),F(cP.$$.fragment),$Or=l(),SLe=a("p"),kOr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),SOr=l(),Bn=a("p"),ROr=o("The model class to instantiate is selected based on the "),RLe=a("code"),POr=o("model_type"),BOr=o(` property of the config object (either
passed as an argument or loaded from `),PLe=a("code"),IOr=o("pretrained_model_name_or_path"),NOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BLe=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(":"),DOr=l(),In=a("ul"),s0=a("li"),ILe=a("strong"),GOr=o("deit"),OOr=o(" \u2014 "),aae=a("a"),VOr=o("DeiTForMaskedImageModeling"),XOr=o(" (DeiT model)"),zOr=l(),l0=a("li"),NLe=a("strong"),QOr=o("swin"),WOr=o(" \u2014 "),nae=a("a"),UOr=o("SwinForMaskedImageModeling"),HOr=o(" (Swin Transformer model)"),JOr=l(),i0=a("li"),qLe=a("strong"),YOr=o("swinv2"),ZOr=o(" \u2014 "),sae=a("a"),KOr=o("Swinv2ForMaskedImageModeling"),eVr=o(" (Swin Transformer V2 model)"),oVr=l(),d0=a("li"),jLe=a("strong"),rVr=o("vit"),tVr=o(" \u2014 "),lae=a("a"),aVr=o("ViTForMaskedImageModeling"),nVr=o(" (ViT model)"),sVr=l(),m0=a("p"),lVr=o("The model is set in evaluation mode by default using "),DLe=a("code"),iVr=o("model.eval()"),dVr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GLe=a("code"),mVr=o("model.train()"),cVr=l(),F(c0.$$.fragment),Ado=l(),nc=a("h2"),f0=a("a"),OLe=a("span"),F(fP.$$.fragment),fVr=l(),VLe=a("span"),gVr=o("AutoModelForObjectDetection"),Ldo=l(),dr=a("div"),F(gP.$$.fragment),hVr=l(),sc=a("p"),uVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),iae=a("a"),pVr=o("from_pretrained()"),_Vr=o(" class method or the "),dae=a("a"),bVr=o("from_config()"),vVr=o(` class
method.`),FVr=l(),hP=a("p"),TVr=o("This class cannot be instantiated directly using "),XLe=a("code"),MVr=o("__init__()"),EVr=o(" (throws an error)."),CVr=l(),Jt=a("div"),F(uP.$$.fragment),wVr=l(),zLe=a("p"),AVr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),LVr=l(),lc=a("p"),yVr=o(`Note:
Loading a model from its configuration file does `),QLe=a("strong"),xVr=o("not"),$Vr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mae=a("a"),kVr=o("from_pretrained()"),SVr=o(" to load the model weights."),RVr=l(),F(g0.$$.fragment),PVr=l(),Lo=a("div"),F(pP.$$.fragment),BVr=l(),WLe=a("p"),IVr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),NVr=l(),Nn=a("p"),qVr=o("The model class to instantiate is selected based on the "),ULe=a("code"),jVr=o("model_type"),DVr=o(` property of the config object (either
passed as an argument or loaded from `),HLe=a("code"),GVr=o("pretrained_model_name_or_path"),OVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JLe=a("code"),VVr=o("pretrained_model_name_or_path"),XVr=o(":"),zVr=l(),Mt=a("ul"),h0=a("li"),YLe=a("strong"),QVr=o("conditional_detr"),WVr=o(" \u2014 "),cae=a("a"),UVr=o("ConditionalDetrForObjectDetection"),HVr=o(" (Conditional DETR model)"),JVr=l(),u0=a("li"),ZLe=a("strong"),YVr=o("deformable_detr"),ZVr=o(" \u2014 "),fae=a("a"),KVr=o("DeformableDetrForObjectDetection"),eXr=o(" (Deformable DETR model)"),oXr=l(),p0=a("li"),KLe=a("strong"),rXr=o("detr"),tXr=o(" \u2014 "),gae=a("a"),aXr=o("DetrForObjectDetection"),nXr=o(" (DETR model)"),sXr=l(),_0=a("li"),eye=a("strong"),lXr=o("table-transformer"),iXr=o(" \u2014 "),hae=a("a"),dXr=o("TableTransformerForObjectDetection"),mXr=o(" (Table Transformer model)"),cXr=l(),b0=a("li"),oye=a("strong"),fXr=o("yolos"),gXr=o(" \u2014 "),uae=a("a"),hXr=o("YolosForObjectDetection"),uXr=o(" (YOLOS model)"),pXr=l(),v0=a("p"),_Xr=o("The model is set in evaluation mode by default using "),rye=a("code"),bXr=o("model.eval()"),vXr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tye=a("code"),FXr=o("model.train()"),TXr=l(),F(F0.$$.fragment),ydo=l(),ic=a("h2"),T0=a("a"),aye=a("span"),F(_P.$$.fragment),MXr=l(),nye=a("span"),EXr=o("AutoModelForImageSegmentation"),xdo=l(),mr=a("div"),F(bP.$$.fragment),CXr=l(),dc=a("p"),wXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pae=a("a"),AXr=o("from_pretrained()"),LXr=o(" class method or the "),_ae=a("a"),yXr=o("from_config()"),xXr=o(` class
method.`),$Xr=l(),vP=a("p"),kXr=o("This class cannot be instantiated directly using "),sye=a("code"),SXr=o("__init__()"),RXr=o(" (throws an error)."),PXr=l(),Yt=a("div"),F(FP.$$.fragment),BXr=l(),lye=a("p"),IXr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),NXr=l(),mc=a("p"),qXr=o(`Note:
Loading a model from its configuration file does `),iye=a("strong"),jXr=o("not"),DXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bae=a("a"),GXr=o("from_pretrained()"),OXr=o(" to load the model weights."),VXr=l(),F(M0.$$.fragment),XXr=l(),yo=a("div"),F(TP.$$.fragment),zXr=l(),dye=a("p"),QXr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),WXr=l(),qn=a("p"),UXr=o("The model class to instantiate is selected based on the "),mye=a("code"),HXr=o("model_type"),JXr=o(` property of the config object (either
passed as an argument or loaded from `),cye=a("code"),YXr=o("pretrained_model_name_or_path"),ZXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fye=a("code"),KXr=o("pretrained_model_name_or_path"),ezr=o(":"),ozr=l(),gye=a("ul"),E0=a("li"),hye=a("strong"),rzr=o("detr"),tzr=o(" \u2014 "),vae=a("a"),azr=o("DetrForSegmentation"),nzr=o(" (DETR model)"),szr=l(),C0=a("p"),lzr=o("The model is set in evaluation mode by default using "),uye=a("code"),izr=o("model.eval()"),dzr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pye=a("code"),mzr=o("model.train()"),czr=l(),F(w0.$$.fragment),$do=l(),cc=a("h2"),A0=a("a"),_ye=a("span"),F(MP.$$.fragment),fzr=l(),bye=a("span"),gzr=o("AutoModelForSemanticSegmentation"),kdo=l(),cr=a("div"),F(EP.$$.fragment),hzr=l(),fc=a("p"),uzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Fae=a("a"),pzr=o("from_pretrained()"),_zr=o(" class method or the "),Tae=a("a"),bzr=o("from_config()"),vzr=o(` class
method.`),Fzr=l(),CP=a("p"),Tzr=o("This class cannot be instantiated directly using "),vye=a("code"),Mzr=o("__init__()"),Ezr=o(" (throws an error)."),Czr=l(),Zt=a("div"),F(wP.$$.fragment),wzr=l(),Fye=a("p"),Azr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Lzr=l(),gc=a("p"),yzr=o(`Note:
Loading a model from its configuration file does `),Tye=a("strong"),xzr=o("not"),$zr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mae=a("a"),kzr=o("from_pretrained()"),Szr=o(" to load the model weights."),Rzr=l(),F(L0.$$.fragment),Pzr=l(),xo=a("div"),F(AP.$$.fragment),Bzr=l(),Mye=a("p"),Izr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Nzr=l(),jn=a("p"),qzr=o("The model class to instantiate is selected based on the "),Eye=a("code"),jzr=o("model_type"),Dzr=o(` property of the config object (either
passed as an argument or loaded from `),Cye=a("code"),Gzr=o("pretrained_model_name_or_path"),Ozr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wye=a("code"),Vzr=o("pretrained_model_name_or_path"),Xzr=o(":"),zzr=l(),fr=a("ul"),y0=a("li"),Aye=a("strong"),Qzr=o("beit"),Wzr=o(" \u2014 "),Eae=a("a"),Uzr=o("BeitForSemanticSegmentation"),Hzr=o(" (BEiT model)"),Jzr=l(),x0=a("li"),Lye=a("strong"),Yzr=o("data2vec-vision"),Zzr=o(" \u2014 "),Cae=a("a"),Kzr=o("Data2VecVisionForSemanticSegmentation"),eQr=o(" (Data2VecVision model)"),oQr=l(),$0=a("li"),yye=a("strong"),rQr=o("dpt"),tQr=o(" \u2014 "),wae=a("a"),aQr=o("DPTForSemanticSegmentation"),nQr=o(" (DPT model)"),sQr=l(),k0=a("li"),xye=a("strong"),lQr=o("mobilenet_v2"),iQr=o(" \u2014 "),Aae=a("a"),dQr=o("MobileNetV2ForSemanticSegmentation"),mQr=o(" (MobileNetV2 model)"),cQr=l(),S0=a("li"),$ye=a("strong"),fQr=o("mobilevit"),gQr=o(" \u2014 "),Lae=a("a"),hQr=o("MobileViTForSemanticSegmentation"),uQr=o(" (MobileViT model)"),pQr=l(),R0=a("li"),kye=a("strong"),_Qr=o("segformer"),bQr=o(" \u2014 "),yae=a("a"),vQr=o("SegformerForSemanticSegmentation"),FQr=o(" (SegFormer model)"),TQr=l(),P0=a("p"),MQr=o("The model is set in evaluation mode by default using "),Sye=a("code"),EQr=o("model.eval()"),CQr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rye=a("code"),wQr=o("model.train()"),AQr=l(),F(B0.$$.fragment),Sdo=l(),hc=a("h2"),I0=a("a"),Pye=a("span"),F(LP.$$.fragment),LQr=l(),Bye=a("span"),yQr=o("AutoModelForInstanceSegmentation"),Rdo=l(),gr=a("div"),F(yP.$$.fragment),xQr=l(),uc=a("p"),$Qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),xae=a("a"),kQr=o("from_pretrained()"),SQr=o(" class method or the "),$ae=a("a"),RQr=o("from_config()"),PQr=o(` class
method.`),BQr=l(),xP=a("p"),IQr=o("This class cannot be instantiated directly using "),Iye=a("code"),NQr=o("__init__()"),qQr=o(" (throws an error)."),jQr=l(),Kt=a("div"),F($P.$$.fragment),DQr=l(),Nye=a("p"),GQr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),OQr=l(),pc=a("p"),VQr=o(`Note:
Loading a model from its configuration file does `),qye=a("strong"),XQr=o("not"),zQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kae=a("a"),QQr=o("from_pretrained()"),WQr=o(" to load the model weights."),UQr=l(),F(N0.$$.fragment),HQr=l(),$o=a("div"),F(kP.$$.fragment),JQr=l(),jye=a("p"),YQr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ZQr=l(),Dn=a("p"),KQr=o("The model class to instantiate is selected based on the "),Dye=a("code"),eWr=o("model_type"),oWr=o(` property of the config object (either
passed as an argument or loaded from `),Gye=a("code"),rWr=o("pretrained_model_name_or_path"),tWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oye=a("code"),aWr=o("pretrained_model_name_or_path"),nWr=o(":"),sWr=l(),Vye=a("ul"),q0=a("li"),Xye=a("strong"),lWr=o("maskformer"),iWr=o(" \u2014 "),Sae=a("a"),dWr=o("MaskFormerForInstanceSegmentation"),mWr=o(" (MaskFormer model)"),cWr=l(),j0=a("p"),fWr=o("The model is set in evaluation mode by default using "),zye=a("code"),gWr=o("model.eval()"),hWr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qye=a("code"),uWr=o("model.train()"),pWr=l(),F(D0.$$.fragment),Pdo=l(),_c=a("h2"),G0=a("a"),Wye=a("span"),F(SP.$$.fragment),_Wr=l(),Uye=a("span"),bWr=o("AutoModelForZeroShotObjectDetection"),Bdo=l(),hr=a("div"),F(RP.$$.fragment),vWr=l(),bc=a("p"),FWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a zero-shot object detection head) when created
with the `),Rae=a("a"),TWr=o("from_pretrained()"),MWr=o(" class method or the "),Pae=a("a"),EWr=o("from_config()"),CWr=o(` class
method.`),wWr=l(),PP=a("p"),AWr=o("This class cannot be instantiated directly using "),Hye=a("code"),LWr=o("__init__()"),yWr=o(" (throws an error)."),xWr=l(),ea=a("div"),F(BP.$$.fragment),$Wr=l(),Jye=a("p"),kWr=o("Instantiates one of the model classes of the library (with a zero-shot object detection head) from a configuration."),SWr=l(),vc=a("p"),RWr=o(`Note:
Loading a model from its configuration file does `),Yye=a("strong"),PWr=o("not"),BWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bae=a("a"),IWr=o("from_pretrained()"),NWr=o(" to load the model weights."),qWr=l(),F(O0.$$.fragment),jWr=l(),ko=a("div"),F(IP.$$.fragment),DWr=l(),Zye=a("p"),GWr=o("Instantiate one of the model classes of the library (with a zero-shot object detection head) from a pretrained model."),OWr=l(),Gn=a("p"),VWr=o("The model class to instantiate is selected based on the "),Kye=a("code"),XWr=o("model_type"),zWr=o(` property of the config object (either
passed as an argument or loaded from `),e9e=a("code"),QWr=o("pretrained_model_name_or_path"),WWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o9e=a("code"),UWr=o("pretrained_model_name_or_path"),HWr=o(":"),JWr=l(),r9e=a("ul"),V0=a("li"),t9e=a("strong"),YWr=o("owlvit"),ZWr=o(" \u2014 "),Iae=a("a"),KWr=o("OwlViTForObjectDetection"),eUr=o(" (OWL-ViT model)"),oUr=l(),X0=a("p"),rUr=o("The model is set in evaluation mode by default using "),a9e=a("code"),tUr=o("model.eval()"),aUr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n9e=a("code"),nUr=o("model.train()"),sUr=l(),F(z0.$$.fragment),Ido=l(),Fc=a("h2"),Q0=a("a"),s9e=a("span"),F(NP.$$.fragment),lUr=l(),l9e=a("span"),iUr=o("TFAutoModel"),Ndo=l(),ur=a("div"),F(qP.$$.fragment),dUr=l(),Tc=a("p"),mUr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Nae=a("a"),cUr=o("from_pretrained()"),fUr=o(" class method or the "),qae=a("a"),gUr=o("from_config()"),hUr=o(` class
method.`),uUr=l(),jP=a("p"),pUr=o("This class cannot be instantiated directly using "),i9e=a("code"),_Ur=o("__init__()"),bUr=o(" (throws an error)."),vUr=l(),oa=a("div"),F(DP.$$.fragment),FUr=l(),d9e=a("p"),TUr=o("Instantiates one of the base model classes of the library from a configuration."),MUr=l(),Mc=a("p"),EUr=o(`Note:
Loading a model from its configuration file does `),m9e=a("strong"),CUr=o("not"),wUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jae=a("a"),AUr=o("from_pretrained()"),LUr=o(" to load the model weights."),yUr=l(),F(W0.$$.fragment),xUr=l(),zr=a("div"),F(GP.$$.fragment),$Ur=l(),c9e=a("p"),kUr=o("Instantiate one of the base model classes of the library from a pretrained model."),SUr=l(),On=a("p"),RUr=o("The model class to instantiate is selected based on the "),f9e=a("code"),PUr=o("model_type"),BUr=o(` property of the config object (either
passed as an argument or loaded from `),g9e=a("code"),IUr=o("pretrained_model_name_or_path"),NUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h9e=a("code"),qUr=o("pretrained_model_name_or_path"),jUr=o(":"),DUr=l(),P=a("ul"),U0=a("li"),u9e=a("strong"),GUr=o("albert"),OUr=o(" \u2014 "),Dae=a("a"),VUr=o("TFAlbertModel"),XUr=o(" (ALBERT model)"),zUr=l(),H0=a("li"),p9e=a("strong"),QUr=o("bart"),WUr=o(" \u2014 "),Gae=a("a"),UUr=o("TFBartModel"),HUr=o(" (BART model)"),JUr=l(),J0=a("li"),_9e=a("strong"),YUr=o("bert"),ZUr=o(" \u2014 "),Oae=a("a"),KUr=o("TFBertModel"),eHr=o(" (BERT model)"),oHr=l(),Y0=a("li"),b9e=a("strong"),rHr=o("blenderbot"),tHr=o(" \u2014 "),Vae=a("a"),aHr=o("TFBlenderbotModel"),nHr=o(" (Blenderbot model)"),sHr=l(),Z0=a("li"),v9e=a("strong"),lHr=o("blenderbot-small"),iHr=o(" \u2014 "),Xae=a("a"),dHr=o("TFBlenderbotSmallModel"),mHr=o(" (BlenderbotSmall model)"),cHr=l(),K0=a("li"),F9e=a("strong"),fHr=o("camembert"),gHr=o(" \u2014 "),zae=a("a"),hHr=o("TFCamembertModel"),uHr=o(" (CamemBERT model)"),pHr=l(),ew=a("li"),T9e=a("strong"),_Hr=o("clip"),bHr=o(" \u2014 "),Qae=a("a"),vHr=o("TFCLIPModel"),FHr=o(" (CLIP model)"),THr=l(),ow=a("li"),M9e=a("strong"),MHr=o("convbert"),EHr=o(" \u2014 "),Wae=a("a"),CHr=o("TFConvBertModel"),wHr=o(" (ConvBERT model)"),AHr=l(),rw=a("li"),E9e=a("strong"),LHr=o("convnext"),yHr=o(" \u2014 "),Uae=a("a"),xHr=o("TFConvNextModel"),$Hr=o(" (ConvNeXT model)"),kHr=l(),tw=a("li"),C9e=a("strong"),SHr=o("ctrl"),RHr=o(" \u2014 "),Hae=a("a"),PHr=o("TFCTRLModel"),BHr=o(" (CTRL model)"),IHr=l(),aw=a("li"),w9e=a("strong"),NHr=o("cvt"),qHr=o(" \u2014 "),Jae=a("a"),jHr=o("TFCvtModel"),DHr=o(" (CvT model)"),GHr=l(),nw=a("li"),A9e=a("strong"),OHr=o("data2vec-vision"),VHr=o(" \u2014 "),Yae=a("a"),XHr=o("TFData2VecVisionModel"),zHr=o(" (Data2VecVision model)"),QHr=l(),sw=a("li"),L9e=a("strong"),WHr=o("deberta"),UHr=o(" \u2014 "),Zae=a("a"),HHr=o("TFDebertaModel"),JHr=o(" (DeBERTa model)"),YHr=l(),lw=a("li"),y9e=a("strong"),ZHr=o("deberta-v2"),KHr=o(" \u2014 "),Kae=a("a"),eJr=o("TFDebertaV2Model"),oJr=o(" (DeBERTa-v2 model)"),rJr=l(),iw=a("li"),x9e=a("strong"),tJr=o("deit"),aJr=o(" \u2014 "),ene=a("a"),nJr=o("TFDeiTModel"),sJr=o(" (DeiT model)"),lJr=l(),dw=a("li"),$9e=a("strong"),iJr=o("distilbert"),dJr=o(" \u2014 "),one=a("a"),mJr=o("TFDistilBertModel"),cJr=o(" (DistilBERT model)"),fJr=l(),mw=a("li"),k9e=a("strong"),gJr=o("dpr"),hJr=o(" \u2014 "),rne=a("a"),uJr=o("TFDPRQuestionEncoder"),pJr=o(" (DPR model)"),_Jr=l(),cw=a("li"),S9e=a("strong"),bJr=o("electra"),vJr=o(" \u2014 "),tne=a("a"),FJr=o("TFElectraModel"),TJr=o(" (ELECTRA model)"),MJr=l(),fw=a("li"),R9e=a("strong"),EJr=o("esm"),CJr=o(" \u2014 "),ane=a("a"),wJr=o("TFEsmModel"),AJr=o(" (ESM model)"),LJr=l(),gw=a("li"),P9e=a("strong"),yJr=o("flaubert"),xJr=o(" \u2014 "),nne=a("a"),$Jr=o("TFFlaubertModel"),kJr=o(" (FlauBERT model)"),SJr=l(),Gl=a("li"),B9e=a("strong"),RJr=o("funnel"),PJr=o(" \u2014 "),sne=a("a"),BJr=o("TFFunnelModel"),IJr=o(" or "),lne=a("a"),NJr=o("TFFunnelBaseModel"),qJr=o(" (Funnel Transformer model)"),jJr=l(),hw=a("li"),I9e=a("strong"),DJr=o("gpt2"),GJr=o(" \u2014 "),ine=a("a"),OJr=o("TFGPT2Model"),VJr=o(" (OpenAI GPT-2 model)"),XJr=l(),uw=a("li"),N9e=a("strong"),zJr=o("gptj"),QJr=o(" \u2014 "),dne=a("a"),WJr=o("TFGPTJModel"),UJr=o(" (GPT-J model)"),HJr=l(),pw=a("li"),q9e=a("strong"),JJr=o("groupvit"),YJr=o(" \u2014 "),mne=a("a"),ZJr=o("TFGroupViTModel"),KJr=o(" (GroupViT model)"),eYr=l(),_w=a("li"),j9e=a("strong"),oYr=o("hubert"),rYr=o(" \u2014 "),cne=a("a"),tYr=o("TFHubertModel"),aYr=o(" (Hubert model)"),nYr=l(),bw=a("li"),D9e=a("strong"),sYr=o("layoutlm"),lYr=o(" \u2014 "),fne=a("a"),iYr=o("TFLayoutLMModel"),dYr=o(" (LayoutLM model)"),mYr=l(),vw=a("li"),G9e=a("strong"),cYr=o("layoutlmv3"),fYr=o(" \u2014 "),gne=a("a"),gYr=o("TFLayoutLMv3Model"),hYr=o(" (LayoutLMv3 model)"),uYr=l(),Fw=a("li"),O9e=a("strong"),pYr=o("led"),_Yr=o(" \u2014 "),hne=a("a"),bYr=o("TFLEDModel"),vYr=o(" (LED model)"),FYr=l(),Tw=a("li"),V9e=a("strong"),TYr=o("longformer"),MYr=o(" \u2014 "),une=a("a"),EYr=o("TFLongformerModel"),CYr=o(" (Longformer model)"),wYr=l(),Mw=a("li"),X9e=a("strong"),AYr=o("lxmert"),LYr=o(" \u2014 "),pne=a("a"),yYr=o("TFLxmertModel"),xYr=o(" (LXMERT model)"),$Yr=l(),Ew=a("li"),z9e=a("strong"),kYr=o("marian"),SYr=o(" \u2014 "),_ne=a("a"),RYr=o("TFMarianModel"),PYr=o(" (Marian model)"),BYr=l(),Cw=a("li"),Q9e=a("strong"),IYr=o("mbart"),NYr=o(" \u2014 "),bne=a("a"),qYr=o("TFMBartModel"),jYr=o(" (mBART model)"),DYr=l(),ww=a("li"),W9e=a("strong"),GYr=o("mobilebert"),OYr=o(" \u2014 "),vne=a("a"),VYr=o("TFMobileBertModel"),XYr=o(" (MobileBERT model)"),zYr=l(),Aw=a("li"),U9e=a("strong"),QYr=o("mobilevit"),WYr=o(" \u2014 "),Fne=a("a"),UYr=o("TFMobileViTModel"),HYr=o(" (MobileViT model)"),JYr=l(),Lw=a("li"),H9e=a("strong"),YYr=o("mpnet"),ZYr=o(" \u2014 "),Tne=a("a"),KYr=o("TFMPNetModel"),eZr=o(" (MPNet model)"),oZr=l(),yw=a("li"),J9e=a("strong"),rZr=o("mt5"),tZr=o(" \u2014 "),Mne=a("a"),aZr=o("TFMT5Model"),nZr=o(" (MT5 model)"),sZr=l(),xw=a("li"),Y9e=a("strong"),lZr=o("openai-gpt"),iZr=o(" \u2014 "),Ene=a("a"),dZr=o("TFOpenAIGPTModel"),mZr=o(" (OpenAI GPT model)"),cZr=l(),$w=a("li"),Z9e=a("strong"),fZr=o("opt"),gZr=o(" \u2014 "),Cne=a("a"),hZr=o("TFOPTModel"),uZr=o(" (OPT model)"),pZr=l(),kw=a("li"),K9e=a("strong"),_Zr=o("pegasus"),bZr=o(" \u2014 "),wne=a("a"),vZr=o("TFPegasusModel"),FZr=o(" (Pegasus model)"),TZr=l(),Sw=a("li"),exe=a("strong"),MZr=o("regnet"),EZr=o(" \u2014 "),Ane=a("a"),CZr=o("TFRegNetModel"),wZr=o(" (RegNet model)"),AZr=l(),Rw=a("li"),oxe=a("strong"),LZr=o("rembert"),yZr=o(" \u2014 "),Lne=a("a"),xZr=o("TFRemBertModel"),$Zr=o(" (RemBERT model)"),kZr=l(),Pw=a("li"),rxe=a("strong"),SZr=o("resnet"),RZr=o(" \u2014 "),yne=a("a"),PZr=o("TFResNetModel"),BZr=o(" (ResNet model)"),IZr=l(),Bw=a("li"),txe=a("strong"),NZr=o("roberta"),qZr=o(" \u2014 "),xne=a("a"),jZr=o("TFRobertaModel"),DZr=o(" (RoBERTa model)"),GZr=l(),Iw=a("li"),axe=a("strong"),OZr=o("roformer"),VZr=o(" \u2014 "),$ne=a("a"),XZr=o("TFRoFormerModel"),zZr=o(" (RoFormer model)"),QZr=l(),Nw=a("li"),nxe=a("strong"),WZr=o("segformer"),UZr=o(" \u2014 "),kne=a("a"),HZr=o("TFSegformerModel"),JZr=o(" (SegFormer model)"),YZr=l(),qw=a("li"),sxe=a("strong"),ZZr=o("speech_to_text"),KZr=o(" \u2014 "),Sne=a("a"),eKr=o("TFSpeech2TextModel"),oKr=o(" (Speech2Text model)"),rKr=l(),jw=a("li"),lxe=a("strong"),tKr=o("swin"),aKr=o(" \u2014 "),Rne=a("a"),nKr=o("TFSwinModel"),sKr=o(" (Swin Transformer model)"),lKr=l(),Dw=a("li"),ixe=a("strong"),iKr=o("t5"),dKr=o(" \u2014 "),Pne=a("a"),mKr=o("TFT5Model"),cKr=o(" (T5 model)"),fKr=l(),Gw=a("li"),dxe=a("strong"),gKr=o("tapas"),hKr=o(" \u2014 "),Bne=a("a"),uKr=o("TFTapasModel"),pKr=o(" (TAPAS model)"),_Kr=l(),Ow=a("li"),mxe=a("strong"),bKr=o("transfo-xl"),vKr=o(" \u2014 "),Ine=a("a"),FKr=o("TFTransfoXLModel"),TKr=o(" (Transformer-XL model)"),MKr=l(),Vw=a("li"),cxe=a("strong"),EKr=o("vit"),CKr=o(" \u2014 "),Nne=a("a"),wKr=o("TFViTModel"),AKr=o(" (ViT model)"),LKr=l(),Xw=a("li"),fxe=a("strong"),yKr=o("vit_mae"),xKr=o(" \u2014 "),qne=a("a"),$Kr=o("TFViTMAEModel"),kKr=o(" (ViTMAE model)"),SKr=l(),zw=a("li"),gxe=a("strong"),RKr=o("wav2vec2"),PKr=o(" \u2014 "),jne=a("a"),BKr=o("TFWav2Vec2Model"),IKr=o(" (Wav2Vec2 model)"),NKr=l(),Qw=a("li"),hxe=a("strong"),qKr=o("whisper"),jKr=o(" \u2014 "),Dne=a("a"),DKr=o("TFWhisperModel"),GKr=o(" (Whisper model)"),OKr=l(),Ww=a("li"),uxe=a("strong"),VKr=o("xglm"),XKr=o(" \u2014 "),Gne=a("a"),zKr=o("TFXGLMModel"),QKr=o(" (XGLM model)"),WKr=l(),Uw=a("li"),pxe=a("strong"),UKr=o("xlm"),HKr=o(" \u2014 "),One=a("a"),JKr=o("TFXLMModel"),YKr=o(" (XLM model)"),ZKr=l(),Hw=a("li"),_xe=a("strong"),KKr=o("xlm-roberta"),eet=o(" \u2014 "),Vne=a("a"),oet=o("TFXLMRobertaModel"),ret=o(" (XLM-RoBERTa model)"),tet=l(),Jw=a("li"),bxe=a("strong"),aet=o("xlnet"),net=o(" \u2014 "),Xne=a("a"),set=o("TFXLNetModel"),iet=o(" (XLNet model)"),det=l(),F(Yw.$$.fragment),qdo=l(),Ec=a("h2"),Zw=a("a"),vxe=a("span"),F(OP.$$.fragment),met=l(),Fxe=a("span"),cet=o("TFAutoModelForPreTraining"),jdo=l(),pr=a("div"),F(VP.$$.fragment),fet=l(),Cc=a("p"),get=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zne=a("a"),het=o("from_pretrained()"),uet=o(" class method or the "),Qne=a("a"),pet=o("from_config()"),_et=o(` class
method.`),bet=l(),XP=a("p"),vet=o("This class cannot be instantiated directly using "),Txe=a("code"),Fet=o("__init__()"),Tet=o(" (throws an error)."),Met=l(),ra=a("div"),F(zP.$$.fragment),Eet=l(),Mxe=a("p"),Cet=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wet=l(),wc=a("p"),Aet=o(`Note:
Loading a model from its configuration file does `),Exe=a("strong"),Let=o("not"),yet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wne=a("a"),xet=o("from_pretrained()"),$et=o(" to load the model weights."),ket=l(),F(Kw.$$.fragment),Set=l(),Qr=a("div"),F(QP.$$.fragment),Ret=l(),Cxe=a("p"),Pet=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Bet=l(),Vn=a("p"),Iet=o("The model class to instantiate is selected based on the "),wxe=a("code"),Net=o("model_type"),qet=o(` property of the config object (either
passed as an argument or loaded from `),Axe=a("code"),jet=o("pretrained_model_name_or_path"),Det=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lxe=a("code"),Get=o("pretrained_model_name_or_path"),Oet=o(":"),Vet=l(),de=a("ul"),eA=a("li"),yxe=a("strong"),Xet=o("albert"),zet=o(" \u2014 "),Une=a("a"),Qet=o("TFAlbertForPreTraining"),Wet=o(" (ALBERT model)"),Uet=l(),oA=a("li"),xxe=a("strong"),Het=o("bart"),Jet=o(" \u2014 "),Hne=a("a"),Yet=o("TFBartForConditionalGeneration"),Zet=o(" (BART model)"),Ket=l(),rA=a("li"),$xe=a("strong"),eot=o("bert"),oot=o(" \u2014 "),Jne=a("a"),rot=o("TFBertForPreTraining"),tot=o(" (BERT model)"),aot=l(),tA=a("li"),kxe=a("strong"),not=o("camembert"),sot=o(" \u2014 "),Yne=a("a"),lot=o("TFCamembertForMaskedLM"),iot=o(" (CamemBERT model)"),dot=l(),aA=a("li"),Sxe=a("strong"),mot=o("ctrl"),cot=o(" \u2014 "),Zne=a("a"),fot=o("TFCTRLLMHeadModel"),got=o(" (CTRL model)"),hot=l(),nA=a("li"),Rxe=a("strong"),uot=o("distilbert"),pot=o(" \u2014 "),Kne=a("a"),_ot=o("TFDistilBertForMaskedLM"),bot=o(" (DistilBERT model)"),vot=l(),sA=a("li"),Pxe=a("strong"),Fot=o("electra"),Tot=o(" \u2014 "),ese=a("a"),Mot=o("TFElectraForPreTraining"),Eot=o(" (ELECTRA model)"),Cot=l(),lA=a("li"),Bxe=a("strong"),wot=o("flaubert"),Aot=o(" \u2014 "),ose=a("a"),Lot=o("TFFlaubertWithLMHeadModel"),yot=o(" (FlauBERT model)"),xot=l(),iA=a("li"),Ixe=a("strong"),$ot=o("funnel"),kot=o(" \u2014 "),rse=a("a"),Sot=o("TFFunnelForPreTraining"),Rot=o(" (Funnel Transformer model)"),Pot=l(),dA=a("li"),Nxe=a("strong"),Bot=o("gpt2"),Iot=o(" \u2014 "),tse=a("a"),Not=o("TFGPT2LMHeadModel"),qot=o(" (OpenAI GPT-2 model)"),jot=l(),mA=a("li"),qxe=a("strong"),Dot=o("layoutlm"),Got=o(" \u2014 "),ase=a("a"),Oot=o("TFLayoutLMForMaskedLM"),Vot=o(" (LayoutLM model)"),Xot=l(),cA=a("li"),jxe=a("strong"),zot=o("lxmert"),Qot=o(" \u2014 "),nse=a("a"),Wot=o("TFLxmertForPreTraining"),Uot=o(" (LXMERT model)"),Hot=l(),fA=a("li"),Dxe=a("strong"),Jot=o("mobilebert"),Yot=o(" \u2014 "),sse=a("a"),Zot=o("TFMobileBertForPreTraining"),Kot=o(" (MobileBERT model)"),ert=l(),gA=a("li"),Gxe=a("strong"),ort=o("mpnet"),rrt=o(" \u2014 "),lse=a("a"),trt=o("TFMPNetForMaskedLM"),art=o(" (MPNet model)"),nrt=l(),hA=a("li"),Oxe=a("strong"),srt=o("openai-gpt"),lrt=o(" \u2014 "),ise=a("a"),irt=o("TFOpenAIGPTLMHeadModel"),drt=o(" (OpenAI GPT model)"),mrt=l(),uA=a("li"),Vxe=a("strong"),crt=o("roberta"),frt=o(" \u2014 "),dse=a("a"),grt=o("TFRobertaForMaskedLM"),hrt=o(" (RoBERTa model)"),urt=l(),pA=a("li"),Xxe=a("strong"),prt=o("t5"),_rt=o(" \u2014 "),mse=a("a"),brt=o("TFT5ForConditionalGeneration"),vrt=o(" (T5 model)"),Frt=l(),_A=a("li"),zxe=a("strong"),Trt=o("tapas"),Mrt=o(" \u2014 "),cse=a("a"),Ert=o("TFTapasForMaskedLM"),Crt=o(" (TAPAS model)"),wrt=l(),bA=a("li"),Qxe=a("strong"),Art=o("transfo-xl"),Lrt=o(" \u2014 "),fse=a("a"),yrt=o("TFTransfoXLLMHeadModel"),xrt=o(" (Transformer-XL model)"),$rt=l(),vA=a("li"),Wxe=a("strong"),krt=o("vit_mae"),Srt=o(" \u2014 "),gse=a("a"),Rrt=o("TFViTMAEForPreTraining"),Prt=o(" (ViTMAE model)"),Brt=l(),FA=a("li"),Uxe=a("strong"),Irt=o("xlm"),Nrt=o(" \u2014 "),hse=a("a"),qrt=o("TFXLMWithLMHeadModel"),jrt=o(" (XLM model)"),Drt=l(),TA=a("li"),Hxe=a("strong"),Grt=o("xlm-roberta"),Ort=o(" \u2014 "),use=a("a"),Vrt=o("TFXLMRobertaForMaskedLM"),Xrt=o(" (XLM-RoBERTa model)"),zrt=l(),MA=a("li"),Jxe=a("strong"),Qrt=o("xlnet"),Wrt=o(" \u2014 "),pse=a("a"),Urt=o("TFXLNetLMHeadModel"),Hrt=o(" (XLNet model)"),Jrt=l(),F(EA.$$.fragment),Ddo=l(),Ac=a("h2"),CA=a("a"),Yxe=a("span"),F(WP.$$.fragment),Yrt=l(),Zxe=a("span"),Zrt=o("TFAutoModelForCausalLM"),Gdo=l(),_r=a("div"),F(UP.$$.fragment),Krt=l(),Lc=a("p"),ett=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_se=a("a"),ott=o("from_pretrained()"),rtt=o(" class method or the "),bse=a("a"),ttt=o("from_config()"),att=o(` class
method.`),ntt=l(),HP=a("p"),stt=o("This class cannot be instantiated directly using "),Kxe=a("code"),ltt=o("__init__()"),itt=o(" (throws an error)."),dtt=l(),ta=a("div"),F(JP.$$.fragment),mtt=l(),e$e=a("p"),ctt=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ftt=l(),yc=a("p"),gtt=o(`Note:
Loading a model from its configuration file does `),o$e=a("strong"),htt=o("not"),utt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vse=a("a"),ptt=o("from_pretrained()"),_tt=o(" to load the model weights."),btt=l(),F(wA.$$.fragment),vtt=l(),Wr=a("div"),F(YP.$$.fragment),Ftt=l(),r$e=a("p"),Ttt=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mtt=l(),Xn=a("p"),Ett=o("The model class to instantiate is selected based on the "),t$e=a("code"),Ctt=o("model_type"),wtt=o(` property of the config object (either
passed as an argument or loaded from `),a$e=a("code"),Att=o("pretrained_model_name_or_path"),Ltt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n$e=a("code"),ytt=o("pretrained_model_name_or_path"),xtt=o(":"),$tt=l(),Ce=a("ul"),AA=a("li"),s$e=a("strong"),ktt=o("bert"),Stt=o(" \u2014 "),Fse=a("a"),Rtt=o("TFBertLMHeadModel"),Ptt=o(" (BERT model)"),Btt=l(),LA=a("li"),l$e=a("strong"),Itt=o("camembert"),Ntt=o(" \u2014 "),Tse=a("a"),qtt=o("TFCamembertForCausalLM"),jtt=o(" (CamemBERT model)"),Dtt=l(),yA=a("li"),i$e=a("strong"),Gtt=o("ctrl"),Ott=o(" \u2014 "),Mse=a("a"),Vtt=o("TFCTRLLMHeadModel"),Xtt=o(" (CTRL model)"),ztt=l(),xA=a("li"),d$e=a("strong"),Qtt=o("gpt2"),Wtt=o(" \u2014 "),Ese=a("a"),Utt=o("TFGPT2LMHeadModel"),Htt=o(" (OpenAI GPT-2 model)"),Jtt=l(),$A=a("li"),m$e=a("strong"),Ytt=o("gptj"),Ztt=o(" \u2014 "),Cse=a("a"),Ktt=o("TFGPTJForCausalLM"),eat=o(" (GPT-J model)"),oat=l(),kA=a("li"),c$e=a("strong"),rat=o("openai-gpt"),tat=o(" \u2014 "),wse=a("a"),aat=o("TFOpenAIGPTLMHeadModel"),nat=o(" (OpenAI GPT model)"),sat=l(),SA=a("li"),f$e=a("strong"),lat=o("opt"),iat=o(" \u2014 "),Ase=a("a"),dat=o("TFOPTForCausalLM"),mat=o(" (OPT model)"),cat=l(),RA=a("li"),g$e=a("strong"),fat=o("rembert"),gat=o(" \u2014 "),Lse=a("a"),hat=o("TFRemBertForCausalLM"),uat=o(" (RemBERT model)"),pat=l(),PA=a("li"),h$e=a("strong"),_at=o("roberta"),bat=o(" \u2014 "),yse=a("a"),vat=o("TFRobertaForCausalLM"),Fat=o(" (RoBERTa model)"),Tat=l(),BA=a("li"),u$e=a("strong"),Mat=o("roformer"),Eat=o(" \u2014 "),xse=a("a"),Cat=o("TFRoFormerForCausalLM"),wat=o(" (RoFormer model)"),Aat=l(),IA=a("li"),p$e=a("strong"),Lat=o("transfo-xl"),yat=o(" \u2014 "),$se=a("a"),xat=o("TFTransfoXLLMHeadModel"),$at=o(" (Transformer-XL model)"),kat=l(),NA=a("li"),_$e=a("strong"),Sat=o("xglm"),Rat=o(" \u2014 "),kse=a("a"),Pat=o("TFXGLMForCausalLM"),Bat=o(" (XGLM model)"),Iat=l(),qA=a("li"),b$e=a("strong"),Nat=o("xlm"),qat=o(" \u2014 "),Sse=a("a"),jat=o("TFXLMWithLMHeadModel"),Dat=o(" (XLM model)"),Gat=l(),jA=a("li"),v$e=a("strong"),Oat=o("xlnet"),Vat=o(" \u2014 "),Rse=a("a"),Xat=o("TFXLNetLMHeadModel"),zat=o(" (XLNet model)"),Qat=l(),F(DA.$$.fragment),Odo=l(),xc=a("h2"),GA=a("a"),F$e=a("span"),F(ZP.$$.fragment),Wat=l(),T$e=a("span"),Uat=o("TFAutoModelForImageClassification"),Vdo=l(),br=a("div"),F(KP.$$.fragment),Hat=l(),$c=a("p"),Jat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Pse=a("a"),Yat=o("from_pretrained()"),Zat=o(" class method or the "),Bse=a("a"),Kat=o("from_config()"),ent=o(` class
method.`),ont=l(),eB=a("p"),rnt=o("This class cannot be instantiated directly using "),M$e=a("code"),tnt=o("__init__()"),ant=o(" (throws an error)."),nnt=l(),aa=a("div"),F(oB.$$.fragment),snt=l(),E$e=a("p"),lnt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),int=l(),kc=a("p"),dnt=o(`Note:
Loading a model from its configuration file does `),C$e=a("strong"),mnt=o("not"),cnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ise=a("a"),fnt=o("from_pretrained()"),gnt=o(" to load the model weights."),hnt=l(),F(OA.$$.fragment),unt=l(),Ur=a("div"),F(rB.$$.fragment),pnt=l(),w$e=a("p"),_nt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bnt=l(),zn=a("p"),vnt=o("The model class to instantiate is selected based on the "),A$e=a("code"),Fnt=o("model_type"),Tnt=o(` property of the config object (either
passed as an argument or loaded from `),L$e=a("code"),Mnt=o("pretrained_model_name_or_path"),Ent=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y$e=a("code"),Cnt=o("pretrained_model_name_or_path"),wnt=o(":"),Ant=l(),$e=a("ul"),VA=a("li"),x$e=a("strong"),Lnt=o("convnext"),ynt=o(" \u2014 "),Nse=a("a"),xnt=o("TFConvNextForImageClassification"),$nt=o(" (ConvNeXT model)"),knt=l(),XA=a("li"),$$e=a("strong"),Snt=o("cvt"),Rnt=o(" \u2014 "),qse=a("a"),Pnt=o("TFCvtForImageClassification"),Bnt=o(" (CvT model)"),Int=l(),zA=a("li"),k$e=a("strong"),Nnt=o("data2vec-vision"),qnt=o(" \u2014 "),jse=a("a"),jnt=o("TFData2VecVisionForImageClassification"),Dnt=o(" (Data2VecVision model)"),Gnt=l(),Ol=a("li"),S$e=a("strong"),Ont=o("deit"),Vnt=o(" \u2014 "),Dse=a("a"),Xnt=o("TFDeiTForImageClassification"),znt=o(" or "),Gse=a("a"),Qnt=o("TFDeiTForImageClassificationWithTeacher"),Wnt=o(" (DeiT model)"),Unt=l(),QA=a("li"),R$e=a("strong"),Hnt=o("mobilevit"),Jnt=o(" \u2014 "),Ose=a("a"),Ynt=o("TFMobileViTForImageClassification"),Znt=o(" (MobileViT model)"),Knt=l(),WA=a("li"),P$e=a("strong"),est=o("regnet"),ost=o(" \u2014 "),Vse=a("a"),rst=o("TFRegNetForImageClassification"),tst=o(" (RegNet model)"),ast=l(),UA=a("li"),B$e=a("strong"),nst=o("resnet"),sst=o(" \u2014 "),Xse=a("a"),lst=o("TFResNetForImageClassification"),ist=o(" (ResNet model)"),dst=l(),HA=a("li"),I$e=a("strong"),mst=o("segformer"),cst=o(" \u2014 "),zse=a("a"),fst=o("TFSegformerForImageClassification"),gst=o(" (SegFormer model)"),hst=l(),JA=a("li"),N$e=a("strong"),ust=o("swin"),pst=o(" \u2014 "),Qse=a("a"),_st=o("TFSwinForImageClassification"),bst=o(" (Swin Transformer model)"),vst=l(),YA=a("li"),q$e=a("strong"),Fst=o("vit"),Tst=o(" \u2014 "),Wse=a("a"),Mst=o("TFViTForImageClassification"),Est=o(" (ViT model)"),Cst=l(),F(ZA.$$.fragment),Xdo=l(),Sc=a("h2"),KA=a("a"),j$e=a("span"),F(tB.$$.fragment),wst=l(),D$e=a("span"),Ast=o("TFAutoModelForSemanticSegmentation"),zdo=l(),vr=a("div"),F(aB.$$.fragment),Lst=l(),Rc=a("p"),yst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Use=a("a"),xst=o("from_pretrained()"),$st=o(" class method or the "),Hse=a("a"),kst=o("from_config()"),Sst=o(` class
method.`),Rst=l(),nB=a("p"),Pst=o("This class cannot be instantiated directly using "),G$e=a("code"),Bst=o("__init__()"),Ist=o(" (throws an error)."),Nst=l(),na=a("div"),F(sB.$$.fragment),qst=l(),O$e=a("p"),jst=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Dst=l(),Pc=a("p"),Gst=o(`Note:
Loading a model from its configuration file does `),V$e=a("strong"),Ost=o("not"),Vst=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jse=a("a"),Xst=o("from_pretrained()"),zst=o(" to load the model weights."),Qst=l(),F(e6.$$.fragment),Wst=l(),Hr=a("div"),F(lB.$$.fragment),Ust=l(),X$e=a("p"),Hst=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jst=l(),Qn=a("p"),Yst=o("The model class to instantiate is selected based on the "),z$e=a("code"),Zst=o("model_type"),Kst=o(` property of the config object (either
passed as an argument or loaded from `),Q$e=a("code"),elt=o("pretrained_model_name_or_path"),olt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W$e=a("code"),rlt=o("pretrained_model_name_or_path"),tlt=o(":"),alt=l(),Bc=a("ul"),o6=a("li"),U$e=a("strong"),nlt=o("data2vec-vision"),slt=o(" \u2014 "),Yse=a("a"),llt=o("TFData2VecVisionForSemanticSegmentation"),ilt=o(" (Data2VecVision model)"),dlt=l(),r6=a("li"),H$e=a("strong"),mlt=o("mobilevit"),clt=o(" \u2014 "),Zse=a("a"),flt=o("TFMobileViTForSemanticSegmentation"),glt=o(" (MobileViT model)"),hlt=l(),t6=a("li"),J$e=a("strong"),ult=o("segformer"),plt=o(" \u2014 "),Kse=a("a"),_lt=o("TFSegformerForSemanticSegmentation"),blt=o(" (SegFormer model)"),vlt=l(),F(a6.$$.fragment),Qdo=l(),Ic=a("h2"),n6=a("a"),Y$e=a("span"),F(iB.$$.fragment),Flt=l(),Z$e=a("span"),Tlt=o("TFAutoModelForMaskedLM"),Wdo=l(),Fr=a("div"),F(dB.$$.fragment),Mlt=l(),Nc=a("p"),Elt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ele=a("a"),Clt=o("from_pretrained()"),wlt=o(" class method or the "),ole=a("a"),Alt=o("from_config()"),Llt=o(` class
method.`),ylt=l(),mB=a("p"),xlt=o("This class cannot be instantiated directly using "),K$e=a("code"),$lt=o("__init__()"),klt=o(" (throws an error)."),Slt=l(),sa=a("div"),F(cB.$$.fragment),Rlt=l(),eke=a("p"),Plt=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Blt=l(),qc=a("p"),Ilt=o(`Note:
Loading a model from its configuration file does `),oke=a("strong"),Nlt=o("not"),qlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rle=a("a"),jlt=o("from_pretrained()"),Dlt=o(" to load the model weights."),Glt=l(),F(s6.$$.fragment),Olt=l(),Jr=a("div"),F(fB.$$.fragment),Vlt=l(),rke=a("p"),Xlt=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zlt=l(),Wn=a("p"),Qlt=o("The model class to instantiate is selected based on the "),tke=a("code"),Wlt=o("model_type"),Ult=o(` property of the config object (either
passed as an argument or loaded from `),ake=a("code"),Hlt=o("pretrained_model_name_or_path"),Jlt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nke=a("code"),Ylt=o("pretrained_model_name_or_path"),Zlt=o(":"),Klt=l(),he=a("ul"),l6=a("li"),ske=a("strong"),eit=o("albert"),oit=o(" \u2014 "),tle=a("a"),rit=o("TFAlbertForMaskedLM"),tit=o(" (ALBERT model)"),ait=l(),i6=a("li"),lke=a("strong"),nit=o("bert"),sit=o(" \u2014 "),ale=a("a"),lit=o("TFBertForMaskedLM"),iit=o(" (BERT model)"),dit=l(),d6=a("li"),ike=a("strong"),mit=o("camembert"),cit=o(" \u2014 "),nle=a("a"),fit=o("TFCamembertForMaskedLM"),git=o(" (CamemBERT model)"),hit=l(),m6=a("li"),dke=a("strong"),uit=o("convbert"),pit=o(" \u2014 "),sle=a("a"),_it=o("TFConvBertForMaskedLM"),bit=o(" (ConvBERT model)"),vit=l(),c6=a("li"),mke=a("strong"),Fit=o("deberta"),Tit=o(" \u2014 "),lle=a("a"),Mit=o("TFDebertaForMaskedLM"),Eit=o(" (DeBERTa model)"),Cit=l(),f6=a("li"),cke=a("strong"),wit=o("deberta-v2"),Ait=o(" \u2014 "),ile=a("a"),Lit=o("TFDebertaV2ForMaskedLM"),yit=o(" (DeBERTa-v2 model)"),xit=l(),g6=a("li"),fke=a("strong"),$it=o("distilbert"),kit=o(" \u2014 "),dle=a("a"),Sit=o("TFDistilBertForMaskedLM"),Rit=o(" (DistilBERT model)"),Pit=l(),h6=a("li"),gke=a("strong"),Bit=o("electra"),Iit=o(" \u2014 "),mle=a("a"),Nit=o("TFElectraForMaskedLM"),qit=o(" (ELECTRA model)"),jit=l(),u6=a("li"),hke=a("strong"),Dit=o("esm"),Git=o(" \u2014 "),cle=a("a"),Oit=o("TFEsmForMaskedLM"),Vit=o(" (ESM model)"),Xit=l(),p6=a("li"),uke=a("strong"),zit=o("flaubert"),Qit=o(" \u2014 "),fle=a("a"),Wit=o("TFFlaubertWithLMHeadModel"),Uit=o(" (FlauBERT model)"),Hit=l(),_6=a("li"),pke=a("strong"),Jit=o("funnel"),Yit=o(" \u2014 "),gle=a("a"),Zit=o("TFFunnelForMaskedLM"),Kit=o(" (Funnel Transformer model)"),edt=l(),b6=a("li"),_ke=a("strong"),odt=o("layoutlm"),rdt=o(" \u2014 "),hle=a("a"),tdt=o("TFLayoutLMForMaskedLM"),adt=o(" (LayoutLM model)"),ndt=l(),v6=a("li"),bke=a("strong"),sdt=o("longformer"),ldt=o(" \u2014 "),ule=a("a"),idt=o("TFLongformerForMaskedLM"),ddt=o(" (Longformer model)"),mdt=l(),F6=a("li"),vke=a("strong"),cdt=o("mobilebert"),fdt=o(" \u2014 "),ple=a("a"),gdt=o("TFMobileBertForMaskedLM"),hdt=o(" (MobileBERT model)"),udt=l(),T6=a("li"),Fke=a("strong"),pdt=o("mpnet"),_dt=o(" \u2014 "),_le=a("a"),bdt=o("TFMPNetForMaskedLM"),vdt=o(" (MPNet model)"),Fdt=l(),M6=a("li"),Tke=a("strong"),Tdt=o("rembert"),Mdt=o(" \u2014 "),ble=a("a"),Edt=o("TFRemBertForMaskedLM"),Cdt=o(" (RemBERT model)"),wdt=l(),E6=a("li"),Mke=a("strong"),Adt=o("roberta"),Ldt=o(" \u2014 "),vle=a("a"),ydt=o("TFRobertaForMaskedLM"),xdt=o(" (RoBERTa model)"),$dt=l(),C6=a("li"),Eke=a("strong"),kdt=o("roformer"),Sdt=o(" \u2014 "),Fle=a("a"),Rdt=o("TFRoFormerForMaskedLM"),Pdt=o(" (RoFormer model)"),Bdt=l(),w6=a("li"),Cke=a("strong"),Idt=o("tapas"),Ndt=o(" \u2014 "),Tle=a("a"),qdt=o("TFTapasForMaskedLM"),jdt=o(" (TAPAS model)"),Ddt=l(),A6=a("li"),wke=a("strong"),Gdt=o("xlm"),Odt=o(" \u2014 "),Mle=a("a"),Vdt=o("TFXLMWithLMHeadModel"),Xdt=o(" (XLM model)"),zdt=l(),L6=a("li"),Ake=a("strong"),Qdt=o("xlm-roberta"),Wdt=o(" \u2014 "),Ele=a("a"),Udt=o("TFXLMRobertaForMaskedLM"),Hdt=o(" (XLM-RoBERTa model)"),Jdt=l(),F(y6.$$.fragment),Udo=l(),jc=a("h2"),x6=a("a"),Lke=a("span"),F(gB.$$.fragment),Ydt=l(),yke=a("span"),Zdt=o("TFAutoModelForSeq2SeqLM"),Hdo=l(),Tr=a("div"),F(hB.$$.fragment),Kdt=l(),Dc=a("p"),emt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cle=a("a"),omt=o("from_pretrained()"),rmt=o(" class method or the "),wle=a("a"),tmt=o("from_config()"),amt=o(` class
method.`),nmt=l(),uB=a("p"),smt=o("This class cannot be instantiated directly using "),xke=a("code"),lmt=o("__init__()"),imt=o(" (throws an error)."),dmt=l(),la=a("div"),F(pB.$$.fragment),mmt=l(),$ke=a("p"),cmt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fmt=l(),Gc=a("p"),gmt=o(`Note:
Loading a model from its configuration file does `),kke=a("strong"),hmt=o("not"),umt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ale=a("a"),pmt=o("from_pretrained()"),_mt=o(" to load the model weights."),bmt=l(),F($6.$$.fragment),vmt=l(),Yr=a("div"),F(_B.$$.fragment),Fmt=l(),Ske=a("p"),Tmt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Mmt=l(),Un=a("p"),Emt=o("The model class to instantiate is selected based on the "),Rke=a("code"),Cmt=o("model_type"),wmt=o(` property of the config object (either
passed as an argument or loaded from `),Pke=a("code"),Amt=o("pretrained_model_name_or_path"),Lmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bke=a("code"),ymt=o("pretrained_model_name_or_path"),xmt=o(":"),$mt=l(),ke=a("ul"),k6=a("li"),Ike=a("strong"),kmt=o("bart"),Smt=o(" \u2014 "),Lle=a("a"),Rmt=o("TFBartForConditionalGeneration"),Pmt=o(" (BART model)"),Bmt=l(),S6=a("li"),Nke=a("strong"),Imt=o("blenderbot"),Nmt=o(" \u2014 "),yle=a("a"),qmt=o("TFBlenderbotForConditionalGeneration"),jmt=o(" (Blenderbot model)"),Dmt=l(),R6=a("li"),qke=a("strong"),Gmt=o("blenderbot-small"),Omt=o(" \u2014 "),xle=a("a"),Vmt=o("TFBlenderbotSmallForConditionalGeneration"),Xmt=o(" (BlenderbotSmall model)"),zmt=l(),P6=a("li"),jke=a("strong"),Qmt=o("encoder-decoder"),Wmt=o(" \u2014 "),$le=a("a"),Umt=o("TFEncoderDecoderModel"),Hmt=o(" (Encoder decoder model)"),Jmt=l(),B6=a("li"),Dke=a("strong"),Ymt=o("led"),Zmt=o(" \u2014 "),kle=a("a"),Kmt=o("TFLEDForConditionalGeneration"),ect=o(" (LED model)"),oct=l(),I6=a("li"),Gke=a("strong"),rct=o("marian"),tct=o(" \u2014 "),Sle=a("a"),act=o("TFMarianMTModel"),nct=o(" (Marian model)"),sct=l(),N6=a("li"),Oke=a("strong"),lct=o("mbart"),ict=o(" \u2014 "),Rle=a("a"),dct=o("TFMBartForConditionalGeneration"),mct=o(" (mBART model)"),cct=l(),q6=a("li"),Vke=a("strong"),fct=o("mt5"),gct=o(" \u2014 "),Ple=a("a"),hct=o("TFMT5ForConditionalGeneration"),uct=o(" (MT5 model)"),pct=l(),j6=a("li"),Xke=a("strong"),_ct=o("pegasus"),bct=o(" \u2014 "),Ble=a("a"),vct=o("TFPegasusForConditionalGeneration"),Fct=o(" (Pegasus model)"),Tct=l(),D6=a("li"),zke=a("strong"),Mct=o("t5"),Ect=o(" \u2014 "),Ile=a("a"),Cct=o("TFT5ForConditionalGeneration"),wct=o(" (T5 model)"),Act=l(),F(G6.$$.fragment),Jdo=l(),Oc=a("h2"),O6=a("a"),Qke=a("span"),F(bB.$$.fragment),Lct=l(),Wke=a("span"),yct=o("TFAutoModelForSequenceClassification"),Ydo=l(),Mr=a("div"),F(vB.$$.fragment),xct=l(),Vc=a("p"),$ct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nle=a("a"),kct=o("from_pretrained()"),Sct=o(" class method or the "),qle=a("a"),Rct=o("from_config()"),Pct=o(` class
method.`),Bct=l(),FB=a("p"),Ict=o("This class cannot be instantiated directly using "),Uke=a("code"),Nct=o("__init__()"),qct=o(" (throws an error)."),jct=l(),ia=a("div"),F(TB.$$.fragment),Dct=l(),Hke=a("p"),Gct=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Oct=l(),Xc=a("p"),Vct=o(`Note:
Loading a model from its configuration file does `),Jke=a("strong"),Xct=o("not"),zct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jle=a("a"),Qct=o("from_pretrained()"),Wct=o(" to load the model weights."),Uct=l(),F(V6.$$.fragment),Hct=l(),Zr=a("div"),F(MB.$$.fragment),Jct=l(),Yke=a("p"),Yct=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Zct=l(),Hn=a("p"),Kct=o("The model class to instantiate is selected based on the "),Zke=a("code"),eft=o("model_type"),oft=o(` property of the config object (either
passed as an argument or loaded from `),Kke=a("code"),rft=o("pretrained_model_name_or_path"),tft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eSe=a("code"),aft=o("pretrained_model_name_or_path"),nft=o(":"),sft=l(),ae=a("ul"),X6=a("li"),oSe=a("strong"),lft=o("albert"),ift=o(" \u2014 "),Dle=a("a"),dft=o("TFAlbertForSequenceClassification"),mft=o(" (ALBERT model)"),cft=l(),z6=a("li"),rSe=a("strong"),fft=o("bert"),gft=o(" \u2014 "),Gle=a("a"),hft=o("TFBertForSequenceClassification"),uft=o(" (BERT model)"),pft=l(),Q6=a("li"),tSe=a("strong"),_ft=o("camembert"),bft=o(" \u2014 "),Ole=a("a"),vft=o("TFCamembertForSequenceClassification"),Fft=o(" (CamemBERT model)"),Tft=l(),W6=a("li"),aSe=a("strong"),Mft=o("convbert"),Eft=o(" \u2014 "),Vle=a("a"),Cft=o("TFConvBertForSequenceClassification"),wft=o(" (ConvBERT model)"),Aft=l(),U6=a("li"),nSe=a("strong"),Lft=o("ctrl"),yft=o(" \u2014 "),Xle=a("a"),xft=o("TFCTRLForSequenceClassification"),$ft=o(" (CTRL model)"),kft=l(),H6=a("li"),sSe=a("strong"),Sft=o("deberta"),Rft=o(" \u2014 "),zle=a("a"),Pft=o("TFDebertaForSequenceClassification"),Bft=o(" (DeBERTa model)"),Ift=l(),J6=a("li"),lSe=a("strong"),Nft=o("deberta-v2"),qft=o(" \u2014 "),Qle=a("a"),jft=o("TFDebertaV2ForSequenceClassification"),Dft=o(" (DeBERTa-v2 model)"),Gft=l(),Y6=a("li"),iSe=a("strong"),Oft=o("distilbert"),Vft=o(" \u2014 "),Wle=a("a"),Xft=o("TFDistilBertForSequenceClassification"),zft=o(" (DistilBERT model)"),Qft=l(),Z6=a("li"),dSe=a("strong"),Wft=o("electra"),Uft=o(" \u2014 "),Ule=a("a"),Hft=o("TFElectraForSequenceClassification"),Jft=o(" (ELECTRA model)"),Yft=l(),K6=a("li"),mSe=a("strong"),Zft=o("esm"),Kft=o(" \u2014 "),Hle=a("a"),egt=o("TFEsmForSequenceClassification"),ogt=o(" (ESM model)"),rgt=l(),e7=a("li"),cSe=a("strong"),tgt=o("flaubert"),agt=o(" \u2014 "),Jle=a("a"),ngt=o("TFFlaubertForSequenceClassification"),sgt=o(" (FlauBERT model)"),lgt=l(),o7=a("li"),fSe=a("strong"),igt=o("funnel"),dgt=o(" \u2014 "),Yle=a("a"),mgt=o("TFFunnelForSequenceClassification"),cgt=o(" (Funnel Transformer model)"),fgt=l(),r7=a("li"),gSe=a("strong"),ggt=o("gpt2"),hgt=o(" \u2014 "),Zle=a("a"),ugt=o("TFGPT2ForSequenceClassification"),pgt=o(" (OpenAI GPT-2 model)"),_gt=l(),t7=a("li"),hSe=a("strong"),bgt=o("gptj"),vgt=o(" \u2014 "),Kle=a("a"),Fgt=o("TFGPTJForSequenceClassification"),Tgt=o(" (GPT-J model)"),Mgt=l(),a7=a("li"),uSe=a("strong"),Egt=o("layoutlm"),Cgt=o(" \u2014 "),eie=a("a"),wgt=o("TFLayoutLMForSequenceClassification"),Agt=o(" (LayoutLM model)"),Lgt=l(),n7=a("li"),pSe=a("strong"),ygt=o("layoutlmv3"),xgt=o(" \u2014 "),oie=a("a"),$gt=o("TFLayoutLMv3ForSequenceClassification"),kgt=o(" (LayoutLMv3 model)"),Sgt=l(),s7=a("li"),_Se=a("strong"),Rgt=o("longformer"),Pgt=o(" \u2014 "),rie=a("a"),Bgt=o("TFLongformerForSequenceClassification"),Igt=o(" (Longformer model)"),Ngt=l(),l7=a("li"),bSe=a("strong"),qgt=o("mobilebert"),jgt=o(" \u2014 "),tie=a("a"),Dgt=o("TFMobileBertForSequenceClassification"),Ggt=o(" (MobileBERT model)"),Ogt=l(),i7=a("li"),vSe=a("strong"),Vgt=o("mpnet"),Xgt=o(" \u2014 "),aie=a("a"),zgt=o("TFMPNetForSequenceClassification"),Qgt=o(" (MPNet model)"),Wgt=l(),d7=a("li"),FSe=a("strong"),Ugt=o("openai-gpt"),Hgt=o(" \u2014 "),nie=a("a"),Jgt=o("TFOpenAIGPTForSequenceClassification"),Ygt=o(" (OpenAI GPT model)"),Zgt=l(),m7=a("li"),TSe=a("strong"),Kgt=o("rembert"),eht=o(" \u2014 "),sie=a("a"),oht=o("TFRemBertForSequenceClassification"),rht=o(" (RemBERT model)"),tht=l(),c7=a("li"),MSe=a("strong"),aht=o("roberta"),nht=o(" \u2014 "),lie=a("a"),sht=o("TFRobertaForSequenceClassification"),lht=o(" (RoBERTa model)"),iht=l(),f7=a("li"),ESe=a("strong"),dht=o("roformer"),mht=o(" \u2014 "),iie=a("a"),cht=o("TFRoFormerForSequenceClassification"),fht=o(" (RoFormer model)"),ght=l(),g7=a("li"),CSe=a("strong"),hht=o("tapas"),uht=o(" \u2014 "),die=a("a"),pht=o("TFTapasForSequenceClassification"),_ht=o(" (TAPAS model)"),bht=l(),h7=a("li"),wSe=a("strong"),vht=o("transfo-xl"),Fht=o(" \u2014 "),mie=a("a"),Tht=o("TFTransfoXLForSequenceClassification"),Mht=o(" (Transformer-XL model)"),Eht=l(),u7=a("li"),ASe=a("strong"),Cht=o("xlm"),wht=o(" \u2014 "),cie=a("a"),Aht=o("TFXLMForSequenceClassification"),Lht=o(" (XLM model)"),yht=l(),p7=a("li"),LSe=a("strong"),xht=o("xlm-roberta"),$ht=o(" \u2014 "),fie=a("a"),kht=o("TFXLMRobertaForSequenceClassification"),Sht=o(" (XLM-RoBERTa model)"),Rht=l(),_7=a("li"),ySe=a("strong"),Pht=o("xlnet"),Bht=o(" \u2014 "),gie=a("a"),Iht=o("TFXLNetForSequenceClassification"),Nht=o(" (XLNet model)"),qht=l(),F(b7.$$.fragment),Zdo=l(),zc=a("h2"),v7=a("a"),xSe=a("span"),F(EB.$$.fragment),jht=l(),$Se=a("span"),Dht=o("TFAutoModelForMultipleChoice"),Kdo=l(),Er=a("div"),F(CB.$$.fragment),Ght=l(),Qc=a("p"),Oht=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hie=a("a"),Vht=o("from_pretrained()"),Xht=o(" class method or the "),uie=a("a"),zht=o("from_config()"),Qht=o(` class
method.`),Wht=l(),wB=a("p"),Uht=o("This class cannot be instantiated directly using "),kSe=a("code"),Hht=o("__init__()"),Jht=o(" (throws an error)."),Yht=l(),da=a("div"),F(AB.$$.fragment),Zht=l(),SSe=a("p"),Kht=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eut=l(),Wc=a("p"),out=o(`Note:
Loading a model from its configuration file does `),RSe=a("strong"),rut=o("not"),tut=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pie=a("a"),aut=o("from_pretrained()"),nut=o(" to load the model weights."),sut=l(),F(F7.$$.fragment),lut=l(),Kr=a("div"),F(LB.$$.fragment),iut=l(),PSe=a("p"),dut=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mut=l(),Jn=a("p"),cut=o("The model class to instantiate is selected based on the "),BSe=a("code"),fut=o("model_type"),gut=o(` property of the config object (either
passed as an argument or loaded from `),ISe=a("code"),hut=o("pretrained_model_name_or_path"),uut=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NSe=a("code"),put=o("pretrained_model_name_or_path"),_ut=o(":"),but=l(),Me=a("ul"),T7=a("li"),qSe=a("strong"),vut=o("albert"),Fut=o(" \u2014 "),_ie=a("a"),Tut=o("TFAlbertForMultipleChoice"),Mut=o(" (ALBERT model)"),Eut=l(),M7=a("li"),jSe=a("strong"),Cut=o("bert"),wut=o(" \u2014 "),bie=a("a"),Aut=o("TFBertForMultipleChoice"),Lut=o(" (BERT model)"),yut=l(),E7=a("li"),DSe=a("strong"),xut=o("camembert"),$ut=o(" \u2014 "),vie=a("a"),kut=o("TFCamembertForMultipleChoice"),Sut=o(" (CamemBERT model)"),Rut=l(),C7=a("li"),GSe=a("strong"),Put=o("convbert"),But=o(" \u2014 "),Fie=a("a"),Iut=o("TFConvBertForMultipleChoice"),Nut=o(" (ConvBERT model)"),qut=l(),w7=a("li"),OSe=a("strong"),jut=o("distilbert"),Dut=o(" \u2014 "),Tie=a("a"),Gut=o("TFDistilBertForMultipleChoice"),Out=o(" (DistilBERT model)"),Vut=l(),A7=a("li"),VSe=a("strong"),Xut=o("electra"),zut=o(" \u2014 "),Mie=a("a"),Qut=o("TFElectraForMultipleChoice"),Wut=o(" (ELECTRA model)"),Uut=l(),L7=a("li"),XSe=a("strong"),Hut=o("flaubert"),Jut=o(" \u2014 "),Eie=a("a"),Yut=o("TFFlaubertForMultipleChoice"),Zut=o(" (FlauBERT model)"),Kut=l(),y7=a("li"),zSe=a("strong"),ept=o("funnel"),opt=o(" \u2014 "),Cie=a("a"),rpt=o("TFFunnelForMultipleChoice"),tpt=o(" (Funnel Transformer model)"),apt=l(),x7=a("li"),QSe=a("strong"),npt=o("longformer"),spt=o(" \u2014 "),wie=a("a"),lpt=o("TFLongformerForMultipleChoice"),ipt=o(" (Longformer model)"),dpt=l(),$7=a("li"),WSe=a("strong"),mpt=o("mobilebert"),cpt=o(" \u2014 "),Aie=a("a"),fpt=o("TFMobileBertForMultipleChoice"),gpt=o(" (MobileBERT model)"),hpt=l(),k7=a("li"),USe=a("strong"),upt=o("mpnet"),ppt=o(" \u2014 "),Lie=a("a"),_pt=o("TFMPNetForMultipleChoice"),bpt=o(" (MPNet model)"),vpt=l(),S7=a("li"),HSe=a("strong"),Fpt=o("rembert"),Tpt=o(" \u2014 "),yie=a("a"),Mpt=o("TFRemBertForMultipleChoice"),Ept=o(" (RemBERT model)"),Cpt=l(),R7=a("li"),JSe=a("strong"),wpt=o("roberta"),Apt=o(" \u2014 "),xie=a("a"),Lpt=o("TFRobertaForMultipleChoice"),ypt=o(" (RoBERTa model)"),xpt=l(),P7=a("li"),YSe=a("strong"),$pt=o("roformer"),kpt=o(" \u2014 "),$ie=a("a"),Spt=o("TFRoFormerForMultipleChoice"),Rpt=o(" (RoFormer model)"),Ppt=l(),B7=a("li"),ZSe=a("strong"),Bpt=o("xlm"),Ipt=o(" \u2014 "),kie=a("a"),Npt=o("TFXLMForMultipleChoice"),qpt=o(" (XLM model)"),jpt=l(),I7=a("li"),KSe=a("strong"),Dpt=o("xlm-roberta"),Gpt=o(" \u2014 "),Sie=a("a"),Opt=o("TFXLMRobertaForMultipleChoice"),Vpt=o(" (XLM-RoBERTa model)"),Xpt=l(),N7=a("li"),eRe=a("strong"),zpt=o("xlnet"),Qpt=o(" \u2014 "),Rie=a("a"),Wpt=o("TFXLNetForMultipleChoice"),Upt=o(" (XLNet model)"),Hpt=l(),F(q7.$$.fragment),emo=l(),Uc=a("h2"),j7=a("a"),oRe=a("span"),F(yB.$$.fragment),Jpt=l(),rRe=a("span"),Ypt=o("TFAutoModelForNextSentencePrediction"),omo=l(),Cr=a("div"),F(xB.$$.fragment),Zpt=l(),Hc=a("p"),Kpt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Pie=a("a"),e_t=o("from_pretrained()"),o_t=o(" class method or the "),Bie=a("a"),r_t=o("from_config()"),t_t=o(` class
method.`),a_t=l(),$B=a("p"),n_t=o("This class cannot be instantiated directly using "),tRe=a("code"),s_t=o("__init__()"),l_t=o(" (throws an error)."),i_t=l(),ma=a("div"),F(kB.$$.fragment),d_t=l(),aRe=a("p"),m_t=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),c_t=l(),Jc=a("p"),f_t=o(`Note:
Loading a model from its configuration file does `),nRe=a("strong"),g_t=o("not"),h_t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iie=a("a"),u_t=o("from_pretrained()"),p_t=o(" to load the model weights."),__t=l(),F(D7.$$.fragment),b_t=l(),et=a("div"),F(SB.$$.fragment),v_t=l(),sRe=a("p"),F_t=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),T_t=l(),Yn=a("p"),M_t=o("The model class to instantiate is selected based on the "),lRe=a("code"),E_t=o("model_type"),C_t=o(` property of the config object (either
passed as an argument or loaded from `),iRe=a("code"),w_t=o("pretrained_model_name_or_path"),A_t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dRe=a("code"),L_t=o("pretrained_model_name_or_path"),y_t=o(":"),x_t=l(),RB=a("ul"),G7=a("li"),mRe=a("strong"),$_t=o("bert"),k_t=o(" \u2014 "),Nie=a("a"),S_t=o("TFBertForNextSentencePrediction"),R_t=o(" (BERT model)"),P_t=l(),O7=a("li"),cRe=a("strong"),B_t=o("mobilebert"),I_t=o(" \u2014 "),qie=a("a"),N_t=o("TFMobileBertForNextSentencePrediction"),q_t=o(" (MobileBERT model)"),j_t=l(),F(V7.$$.fragment),rmo=l(),Yc=a("h2"),X7=a("a"),fRe=a("span"),F(PB.$$.fragment),D_t=l(),gRe=a("span"),G_t=o("TFAutoModelForTableQuestionAnswering"),tmo=l(),wr=a("div"),F(BB.$$.fragment),O_t=l(),Zc=a("p"),V_t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jie=a("a"),X_t=o("from_pretrained()"),z_t=o(" class method or the "),Die=a("a"),Q_t=o("from_config()"),W_t=o(` class
method.`),U_t=l(),IB=a("p"),H_t=o("This class cannot be instantiated directly using "),hRe=a("code"),J_t=o("__init__()"),Y_t=o(" (throws an error)."),Z_t=l(),ca=a("div"),F(NB.$$.fragment),K_t=l(),uRe=a("p"),e1t=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),o1t=l(),Kc=a("p"),r1t=o(`Note:
Loading a model from its configuration file does `),pRe=a("strong"),t1t=o("not"),a1t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gie=a("a"),n1t=o("from_pretrained()"),s1t=o(" to load the model weights."),l1t=l(),F(z7.$$.fragment),i1t=l(),ot=a("div"),F(qB.$$.fragment),d1t=l(),_Re=a("p"),m1t=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),c1t=l(),Zn=a("p"),f1t=o("The model class to instantiate is selected based on the "),bRe=a("code"),g1t=o("model_type"),h1t=o(` property of the config object (either
passed as an argument or loaded from `),vRe=a("code"),u1t=o("pretrained_model_name_or_path"),p1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FRe=a("code"),_1t=o("pretrained_model_name_or_path"),b1t=o(":"),v1t=l(),TRe=a("ul"),Q7=a("li"),MRe=a("strong"),F1t=o("tapas"),T1t=o(" \u2014 "),Oie=a("a"),M1t=o("TFTapasForQuestionAnswering"),E1t=o(" (TAPAS model)"),C1t=l(),F(W7.$$.fragment),amo=l(),ef=a("h2"),U7=a("a"),ERe=a("span"),F(jB.$$.fragment),w1t=l(),CRe=a("span"),A1t=o("TFAutoModelForDocumentQuestionAnswering"),nmo=l(),Ar=a("div"),F(DB.$$.fragment),L1t=l(),of=a("p"),y1t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Vie=a("a"),x1t=o("from_pretrained()"),$1t=o(" class method or the "),Xie=a("a"),k1t=o("from_config()"),S1t=o(` class
method.`),R1t=l(),GB=a("p"),P1t=o("This class cannot be instantiated directly using "),wRe=a("code"),B1t=o("__init__()"),I1t=o(" (throws an error)."),N1t=l(),fa=a("div"),F(OB.$$.fragment),q1t=l(),ARe=a("p"),j1t=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),D1t=l(),rf=a("p"),G1t=o(`Note:
Loading a model from its configuration file does `),LRe=a("strong"),O1t=o("not"),V1t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zie=a("a"),X1t=o("from_pretrained()"),z1t=o(" to load the model weights."),Q1t=l(),F(H7.$$.fragment),W1t=l(),rt=a("div"),F(VB.$$.fragment),U1t=l(),yRe=a("p"),H1t=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),J1t=l(),Kn=a("p"),Y1t=o("The model class to instantiate is selected based on the "),xRe=a("code"),Z1t=o("model_type"),K1t=o(` property of the config object (either
passed as an argument or loaded from `),$Re=a("code"),e2t=o("pretrained_model_name_or_path"),o2t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kRe=a("code"),r2t=o("pretrained_model_name_or_path"),t2t=o(":"),a2t=l(),SRe=a("ul"),J7=a("li"),RRe=a("strong"),n2t=o("layoutlm"),s2t=o(" \u2014 "),Qie=a("a"),l2t=o("TFLayoutLMForQuestionAnswering"),i2t=o(" (LayoutLM model)"),d2t=l(),F(Y7.$$.fragment),smo=l(),tf=a("h2"),Z7=a("a"),PRe=a("span"),F(XB.$$.fragment),m2t=l(),BRe=a("span"),c2t=o("TFAutoModelForTokenClassification"),lmo=l(),Lr=a("div"),F(zB.$$.fragment),f2t=l(),af=a("p"),g2t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Wie=a("a"),h2t=o("from_pretrained()"),u2t=o(" class method or the "),Uie=a("a"),p2t=o("from_config()"),_2t=o(` class
method.`),b2t=l(),QB=a("p"),v2t=o("This class cannot be instantiated directly using "),IRe=a("code"),F2t=o("__init__()"),T2t=o(" (throws an error)."),M2t=l(),ga=a("div"),F(WB.$$.fragment),E2t=l(),NRe=a("p"),C2t=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),w2t=l(),nf=a("p"),A2t=o(`Note:
Loading a model from its configuration file does `),qRe=a("strong"),L2t=o("not"),y2t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hie=a("a"),x2t=o("from_pretrained()"),$2t=o(" to load the model weights."),k2t=l(),F(K7.$$.fragment),S2t=l(),tt=a("div"),F(UB.$$.fragment),R2t=l(),jRe=a("p"),P2t=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),B2t=l(),es=a("p"),I2t=o("The model class to instantiate is selected based on the "),DRe=a("code"),N2t=o("model_type"),q2t=o(` property of the config object (either
passed as an argument or loaded from `),GRe=a("code"),j2t=o("pretrained_model_name_or_path"),D2t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ORe=a("code"),G2t=o("pretrained_model_name_or_path"),O2t=o(":"),V2t=l(),me=a("ul"),e8=a("li"),VRe=a("strong"),X2t=o("albert"),z2t=o(" \u2014 "),Jie=a("a"),Q2t=o("TFAlbertForTokenClassification"),W2t=o(" (ALBERT model)"),U2t=l(),o8=a("li"),XRe=a("strong"),H2t=o("bert"),J2t=o(" \u2014 "),Yie=a("a"),Y2t=o("TFBertForTokenClassification"),Z2t=o(" (BERT model)"),K2t=l(),r8=a("li"),zRe=a("strong"),ebt=o("camembert"),obt=o(" \u2014 "),Zie=a("a"),rbt=o("TFCamembertForTokenClassification"),tbt=o(" (CamemBERT model)"),abt=l(),t8=a("li"),QRe=a("strong"),nbt=o("convbert"),sbt=o(" \u2014 "),Kie=a("a"),lbt=o("TFConvBertForTokenClassification"),ibt=o(" (ConvBERT model)"),dbt=l(),a8=a("li"),WRe=a("strong"),mbt=o("deberta"),cbt=o(" \u2014 "),ede=a("a"),fbt=o("TFDebertaForTokenClassification"),gbt=o(" (DeBERTa model)"),hbt=l(),n8=a("li"),URe=a("strong"),ubt=o("deberta-v2"),pbt=o(" \u2014 "),ode=a("a"),_bt=o("TFDebertaV2ForTokenClassification"),bbt=o(" (DeBERTa-v2 model)"),vbt=l(),s8=a("li"),HRe=a("strong"),Fbt=o("distilbert"),Tbt=o(" \u2014 "),rde=a("a"),Mbt=o("TFDistilBertForTokenClassification"),Ebt=o(" (DistilBERT model)"),Cbt=l(),l8=a("li"),JRe=a("strong"),wbt=o("electra"),Abt=o(" \u2014 "),tde=a("a"),Lbt=o("TFElectraForTokenClassification"),ybt=o(" (ELECTRA model)"),xbt=l(),i8=a("li"),YRe=a("strong"),$bt=o("esm"),kbt=o(" \u2014 "),ade=a("a"),Sbt=o("TFEsmForTokenClassification"),Rbt=o(" (ESM model)"),Pbt=l(),d8=a("li"),ZRe=a("strong"),Bbt=o("flaubert"),Ibt=o(" \u2014 "),nde=a("a"),Nbt=o("TFFlaubertForTokenClassification"),qbt=o(" (FlauBERT model)"),jbt=l(),m8=a("li"),KRe=a("strong"),Dbt=o("funnel"),Gbt=o(" \u2014 "),sde=a("a"),Obt=o("TFFunnelForTokenClassification"),Vbt=o(" (Funnel Transformer model)"),Xbt=l(),c8=a("li"),ePe=a("strong"),zbt=o("layoutlm"),Qbt=o(" \u2014 "),lde=a("a"),Wbt=o("TFLayoutLMForTokenClassification"),Ubt=o(" (LayoutLM model)"),Hbt=l(),f8=a("li"),oPe=a("strong"),Jbt=o("layoutlmv3"),Ybt=o(" \u2014 "),ide=a("a"),Zbt=o("TFLayoutLMv3ForTokenClassification"),Kbt=o(" (LayoutLMv3 model)"),evt=l(),g8=a("li"),rPe=a("strong"),ovt=o("longformer"),rvt=o(" \u2014 "),dde=a("a"),tvt=o("TFLongformerForTokenClassification"),avt=o(" (Longformer model)"),nvt=l(),h8=a("li"),tPe=a("strong"),svt=o("mobilebert"),lvt=o(" \u2014 "),mde=a("a"),ivt=o("TFMobileBertForTokenClassification"),dvt=o(" (MobileBERT model)"),mvt=l(),u8=a("li"),aPe=a("strong"),cvt=o("mpnet"),fvt=o(" \u2014 "),cde=a("a"),gvt=o("TFMPNetForTokenClassification"),hvt=o(" (MPNet model)"),uvt=l(),p8=a("li"),nPe=a("strong"),pvt=o("rembert"),_vt=o(" \u2014 "),fde=a("a"),bvt=o("TFRemBertForTokenClassification"),vvt=o(" (RemBERT model)"),Fvt=l(),_8=a("li"),sPe=a("strong"),Tvt=o("roberta"),Mvt=o(" \u2014 "),gde=a("a"),Evt=o("TFRobertaForTokenClassification"),Cvt=o(" (RoBERTa model)"),wvt=l(),b8=a("li"),lPe=a("strong"),Avt=o("roformer"),Lvt=o(" \u2014 "),hde=a("a"),yvt=o("TFRoFormerForTokenClassification"),xvt=o(" (RoFormer model)"),$vt=l(),v8=a("li"),iPe=a("strong"),kvt=o("xlm"),Svt=o(" \u2014 "),ude=a("a"),Rvt=o("TFXLMForTokenClassification"),Pvt=o(" (XLM model)"),Bvt=l(),F8=a("li"),dPe=a("strong"),Ivt=o("xlm-roberta"),Nvt=o(" \u2014 "),pde=a("a"),qvt=o("TFXLMRobertaForTokenClassification"),jvt=o(" (XLM-RoBERTa model)"),Dvt=l(),T8=a("li"),mPe=a("strong"),Gvt=o("xlnet"),Ovt=o(" \u2014 "),_de=a("a"),Vvt=o("TFXLNetForTokenClassification"),Xvt=o(" (XLNet model)"),zvt=l(),F(M8.$$.fragment),imo=l(),sf=a("h2"),E8=a("a"),cPe=a("span"),F(HB.$$.fragment),Qvt=l(),fPe=a("span"),Wvt=o("TFAutoModelForQuestionAnswering"),dmo=l(),yr=a("div"),F(JB.$$.fragment),Uvt=l(),lf=a("p"),Hvt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bde=a("a"),Jvt=o("from_pretrained()"),Yvt=o(" class method or the "),vde=a("a"),Zvt=o("from_config()"),Kvt=o(` class
method.`),eFt=l(),YB=a("p"),oFt=o("This class cannot be instantiated directly using "),gPe=a("code"),rFt=o("__init__()"),tFt=o(" (throws an error)."),aFt=l(),ha=a("div"),F(ZB.$$.fragment),nFt=l(),hPe=a("p"),sFt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lFt=l(),df=a("p"),iFt=o(`Note:
Loading a model from its configuration file does `),uPe=a("strong"),dFt=o("not"),mFt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fde=a("a"),cFt=o("from_pretrained()"),fFt=o(" to load the model weights."),gFt=l(),F(C8.$$.fragment),hFt=l(),at=a("div"),F(KB.$$.fragment),uFt=l(),pPe=a("p"),pFt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Ft=l(),os=a("p"),bFt=o("The model class to instantiate is selected based on the "),_Pe=a("code"),vFt=o("model_type"),FFt=o(` property of the config object (either
passed as an argument or loaded from `),bPe=a("code"),TFt=o("pretrained_model_name_or_path"),MFt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vPe=a("code"),EFt=o("pretrained_model_name_or_path"),CFt=o(":"),wFt=l(),ue=a("ul"),w8=a("li"),FPe=a("strong"),AFt=o("albert"),LFt=o(" \u2014 "),Tde=a("a"),yFt=o("TFAlbertForQuestionAnswering"),xFt=o(" (ALBERT model)"),$Ft=l(),A8=a("li"),TPe=a("strong"),kFt=o("bert"),SFt=o(" \u2014 "),Mde=a("a"),RFt=o("TFBertForQuestionAnswering"),PFt=o(" (BERT model)"),BFt=l(),L8=a("li"),MPe=a("strong"),IFt=o("camembert"),NFt=o(" \u2014 "),Ede=a("a"),qFt=o("TFCamembertForQuestionAnswering"),jFt=o(" (CamemBERT model)"),DFt=l(),y8=a("li"),EPe=a("strong"),GFt=o("convbert"),OFt=o(" \u2014 "),Cde=a("a"),VFt=o("TFConvBertForQuestionAnswering"),XFt=o(" (ConvBERT model)"),zFt=l(),x8=a("li"),CPe=a("strong"),QFt=o("deberta"),WFt=o(" \u2014 "),wde=a("a"),UFt=o("TFDebertaForQuestionAnswering"),HFt=o(" (DeBERTa model)"),JFt=l(),$8=a("li"),wPe=a("strong"),YFt=o("deberta-v2"),ZFt=o(" \u2014 "),Ade=a("a"),KFt=o("TFDebertaV2ForQuestionAnswering"),eTt=o(" (DeBERTa-v2 model)"),oTt=l(),k8=a("li"),APe=a("strong"),rTt=o("distilbert"),tTt=o(" \u2014 "),Lde=a("a"),aTt=o("TFDistilBertForQuestionAnswering"),nTt=o(" (DistilBERT model)"),sTt=l(),S8=a("li"),LPe=a("strong"),lTt=o("electra"),iTt=o(" \u2014 "),yde=a("a"),dTt=o("TFElectraForQuestionAnswering"),mTt=o(" (ELECTRA model)"),cTt=l(),R8=a("li"),yPe=a("strong"),fTt=o("flaubert"),gTt=o(" \u2014 "),xde=a("a"),hTt=o("TFFlaubertForQuestionAnsweringSimple"),uTt=o(" (FlauBERT model)"),pTt=l(),P8=a("li"),xPe=a("strong"),_Tt=o("funnel"),bTt=o(" \u2014 "),$de=a("a"),vTt=o("TFFunnelForQuestionAnswering"),FTt=o(" (Funnel Transformer model)"),TTt=l(),B8=a("li"),$Pe=a("strong"),MTt=o("gptj"),ETt=o(" \u2014 "),kde=a("a"),CTt=o("TFGPTJForQuestionAnswering"),wTt=o(" (GPT-J model)"),ATt=l(),I8=a("li"),kPe=a("strong"),LTt=o("layoutlmv3"),yTt=o(" \u2014 "),Sde=a("a"),xTt=o("TFLayoutLMv3ForQuestionAnswering"),$Tt=o(" (LayoutLMv3 model)"),kTt=l(),N8=a("li"),SPe=a("strong"),STt=o("longformer"),RTt=o(" \u2014 "),Rde=a("a"),PTt=o("TFLongformerForQuestionAnswering"),BTt=o(" (Longformer model)"),ITt=l(),q8=a("li"),RPe=a("strong"),NTt=o("mobilebert"),qTt=o(" \u2014 "),Pde=a("a"),jTt=o("TFMobileBertForQuestionAnswering"),DTt=o(" (MobileBERT model)"),GTt=l(),j8=a("li"),PPe=a("strong"),OTt=o("mpnet"),VTt=o(" \u2014 "),Bde=a("a"),XTt=o("TFMPNetForQuestionAnswering"),zTt=o(" (MPNet model)"),QTt=l(),D8=a("li"),BPe=a("strong"),WTt=o("rembert"),UTt=o(" \u2014 "),Ide=a("a"),HTt=o("TFRemBertForQuestionAnswering"),JTt=o(" (RemBERT model)"),YTt=l(),G8=a("li"),IPe=a("strong"),ZTt=o("roberta"),KTt=o(" \u2014 "),Nde=a("a"),eMt=o("TFRobertaForQuestionAnswering"),oMt=o(" (RoBERTa model)"),rMt=l(),O8=a("li"),NPe=a("strong"),tMt=o("roformer"),aMt=o(" \u2014 "),qde=a("a"),nMt=o("TFRoFormerForQuestionAnswering"),sMt=o(" (RoFormer model)"),lMt=l(),V8=a("li"),qPe=a("strong"),iMt=o("xlm"),dMt=o(" \u2014 "),jde=a("a"),mMt=o("TFXLMForQuestionAnsweringSimple"),cMt=o(" (XLM model)"),fMt=l(),X8=a("li"),jPe=a("strong"),gMt=o("xlm-roberta"),hMt=o(" \u2014 "),Dde=a("a"),uMt=o("TFXLMRobertaForQuestionAnswering"),pMt=o(" (XLM-RoBERTa model)"),_Mt=l(),z8=a("li"),DPe=a("strong"),bMt=o("xlnet"),vMt=o(" \u2014 "),Gde=a("a"),FMt=o("TFXLNetForQuestionAnsweringSimple"),TMt=o(" (XLNet model)"),MMt=l(),F(Q8.$$.fragment),mmo=l(),mf=a("h2"),W8=a("a"),GPe=a("span"),F(eI.$$.fragment),EMt=l(),OPe=a("span"),CMt=o("TFAutoModelForVision2Seq"),cmo=l(),xr=a("div"),F(oI.$$.fragment),wMt=l(),cf=a("p"),AMt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ode=a("a"),LMt=o("from_pretrained()"),yMt=o(" class method or the "),Vde=a("a"),xMt=o("from_config()"),$Mt=o(` class
method.`),kMt=l(),rI=a("p"),SMt=o("This class cannot be instantiated directly using "),VPe=a("code"),RMt=o("__init__()"),PMt=o(" (throws an error)."),BMt=l(),ua=a("div"),F(tI.$$.fragment),IMt=l(),XPe=a("p"),NMt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qMt=l(),ff=a("p"),jMt=o(`Note:
Loading a model from its configuration file does `),zPe=a("strong"),DMt=o("not"),GMt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=a("a"),OMt=o("from_pretrained()"),VMt=o(" to load the model weights."),XMt=l(),F(U8.$$.fragment),zMt=l(),nt=a("div"),F(aI.$$.fragment),QMt=l(),QPe=a("p"),WMt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UMt=l(),rs=a("p"),HMt=o("The model class to instantiate is selected based on the "),WPe=a("code"),JMt=o("model_type"),YMt=o(` property of the config object (either
passed as an argument or loaded from `),UPe=a("code"),ZMt=o("pretrained_model_name_or_path"),KMt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HPe=a("code"),eEt=o("pretrained_model_name_or_path"),oEt=o(":"),rEt=l(),JPe=a("ul"),H8=a("li"),YPe=a("strong"),tEt=o("vision-encoder-decoder"),aEt=o(" \u2014 "),zde=a("a"),nEt=o("TFVisionEncoderDecoderModel"),sEt=o(" (Vision Encoder decoder model)"),lEt=l(),F(J8.$$.fragment),fmo=l(),gf=a("h2"),Y8=a("a"),ZPe=a("span"),F(nI.$$.fragment),iEt=l(),KPe=a("span"),dEt=o("TFAutoModelForSpeechSeq2Seq"),gmo=l(),$r=a("div"),F(sI.$$.fragment),mEt=l(),hf=a("p"),cEt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Qde=a("a"),fEt=o("from_pretrained()"),gEt=o(" class method or the "),Wde=a("a"),hEt=o("from_config()"),uEt=o(` class
method.`),pEt=l(),lI=a("p"),_Et=o("This class cannot be instantiated directly using "),eBe=a("code"),bEt=o("__init__()"),vEt=o(" (throws an error)."),FEt=l(),pa=a("div"),F(iI.$$.fragment),TEt=l(),oBe=a("p"),MEt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),EEt=l(),uf=a("p"),CEt=o(`Note:
Loading a model from its configuration file does `),rBe=a("strong"),wEt=o("not"),AEt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ude=a("a"),LEt=o("from_pretrained()"),yEt=o(" to load the model weights."),xEt=l(),F(Z8.$$.fragment),$Et=l(),st=a("div"),F(dI.$$.fragment),kEt=l(),tBe=a("p"),SEt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),REt=l(),ts=a("p"),PEt=o("The model class to instantiate is selected based on the "),aBe=a("code"),BEt=o("model_type"),IEt=o(` property of the config object (either
passed as an argument or loaded from `),nBe=a("code"),NEt=o("pretrained_model_name_or_path"),qEt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sBe=a("code"),jEt=o("pretrained_model_name_or_path"),DEt=o(":"),GEt=l(),mI=a("ul"),K8=a("li"),lBe=a("strong"),OEt=o("speech_to_text"),VEt=o(" \u2014 "),Hde=a("a"),XEt=o("TFSpeech2TextForConditionalGeneration"),zEt=o(" (Speech2Text model)"),QEt=l(),eL=a("li"),iBe=a("strong"),WEt=o("whisper"),UEt=o(" \u2014 "),Jde=a("a"),HEt=o("TFWhisperForConditionalGeneration"),JEt=o(" (Whisper model)"),YEt=l(),F(oL.$$.fragment),hmo=l(),pf=a("h2"),rL=a("a"),dBe=a("span"),F(cI.$$.fragment),ZEt=l(),mBe=a("span"),KEt=o("FlaxAutoModel"),umo=l(),kr=a("div"),F(fI.$$.fragment),e4t=l(),_f=a("p"),o4t=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Yde=a("a"),r4t=o("from_pretrained()"),t4t=o(" class method or the "),Zde=a("a"),a4t=o("from_config()"),n4t=o(` class
method.`),s4t=l(),gI=a("p"),l4t=o("This class cannot be instantiated directly using "),cBe=a("code"),i4t=o("__init__()"),d4t=o(" (throws an error)."),m4t=l(),_a=a("div"),F(hI.$$.fragment),c4t=l(),fBe=a("p"),f4t=o("Instantiates one of the base model classes of the library from a configuration."),g4t=l(),bf=a("p"),h4t=o(`Note:
Loading a model from its configuration file does `),gBe=a("strong"),u4t=o("not"),p4t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kde=a("a"),_4t=o("from_pretrained()"),b4t=o(" to load the model weights."),v4t=l(),F(tL.$$.fragment),F4t=l(),lt=a("div"),F(uI.$$.fragment),T4t=l(),hBe=a("p"),M4t=o("Instantiate one of the base model classes of the library from a pretrained model."),E4t=l(),as=a("p"),C4t=o("The model class to instantiate is selected based on the "),uBe=a("code"),w4t=o("model_type"),A4t=o(` property of the config object (either
passed as an argument or loaded from `),pBe=a("code"),L4t=o("pretrained_model_name_or_path"),y4t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Be=a("code"),x4t=o("pretrained_model_name_or_path"),$4t=o(":"),k4t=l(),ne=a("ul"),aL=a("li"),bBe=a("strong"),S4t=o("albert"),R4t=o(" \u2014 "),eme=a("a"),P4t=o("FlaxAlbertModel"),B4t=o(" (ALBERT model)"),I4t=l(),nL=a("li"),vBe=a("strong"),N4t=o("bart"),q4t=o(" \u2014 "),ome=a("a"),j4t=o("FlaxBartModel"),D4t=o(" (BART model)"),G4t=l(),sL=a("li"),FBe=a("strong"),O4t=o("beit"),V4t=o(" \u2014 "),rme=a("a"),X4t=o("FlaxBeitModel"),z4t=o(" (BEiT model)"),Q4t=l(),lL=a("li"),TBe=a("strong"),W4t=o("bert"),U4t=o(" \u2014 "),tme=a("a"),H4t=o("FlaxBertModel"),J4t=o(" (BERT model)"),Y4t=l(),iL=a("li"),MBe=a("strong"),Z4t=o("big_bird"),K4t=o(" \u2014 "),ame=a("a"),eCt=o("FlaxBigBirdModel"),oCt=o(" (BigBird model)"),rCt=l(),dL=a("li"),EBe=a("strong"),tCt=o("blenderbot"),aCt=o(" \u2014 "),nme=a("a"),nCt=o("FlaxBlenderbotModel"),sCt=o(" (Blenderbot model)"),lCt=l(),mL=a("li"),CBe=a("strong"),iCt=o("blenderbot-small"),dCt=o(" \u2014 "),sme=a("a"),mCt=o("FlaxBlenderbotSmallModel"),cCt=o(" (BlenderbotSmall model)"),fCt=l(),cL=a("li"),wBe=a("strong"),gCt=o("clip"),hCt=o(" \u2014 "),lme=a("a"),uCt=o("FlaxCLIPModel"),pCt=o(" (CLIP model)"),_Ct=l(),fL=a("li"),ABe=a("strong"),bCt=o("distilbert"),vCt=o(" \u2014 "),ime=a("a"),FCt=o("FlaxDistilBertModel"),TCt=o(" (DistilBERT model)"),MCt=l(),gL=a("li"),LBe=a("strong"),ECt=o("electra"),CCt=o(" \u2014 "),dme=a("a"),wCt=o("FlaxElectraModel"),ACt=o(" (ELECTRA model)"),LCt=l(),hL=a("li"),yBe=a("strong"),yCt=o("gpt2"),xCt=o(" \u2014 "),mme=a("a"),$Ct=o("FlaxGPT2Model"),kCt=o(" (OpenAI GPT-2 model)"),SCt=l(),uL=a("li"),xBe=a("strong"),RCt=o("gpt_neo"),PCt=o(" \u2014 "),cme=a("a"),BCt=o("FlaxGPTNeoModel"),ICt=o(" (GPT Neo model)"),NCt=l(),pL=a("li"),$Be=a("strong"),qCt=o("gptj"),jCt=o(" \u2014 "),fme=a("a"),DCt=o("FlaxGPTJModel"),GCt=o(" (GPT-J model)"),OCt=l(),_L=a("li"),kBe=a("strong"),VCt=o("longt5"),XCt=o(" \u2014 "),gme=a("a"),zCt=o("FlaxLongT5Model"),QCt=o(" (LongT5 model)"),WCt=l(),bL=a("li"),SBe=a("strong"),UCt=o("marian"),HCt=o(" \u2014 "),hme=a("a"),JCt=o("FlaxMarianModel"),YCt=o(" (Marian model)"),ZCt=l(),vL=a("li"),RBe=a("strong"),KCt=o("mbart"),e3t=o(" \u2014 "),ume=a("a"),o3t=o("FlaxMBartModel"),r3t=o(" (mBART model)"),t3t=l(),FL=a("li"),PBe=a("strong"),a3t=o("mt5"),n3t=o(" \u2014 "),pme=a("a"),s3t=o("FlaxMT5Model"),l3t=o(" (MT5 model)"),i3t=l(),TL=a("li"),BBe=a("strong"),d3t=o("opt"),m3t=o(" \u2014 "),_me=a("a"),c3t=o("FlaxOPTModel"),f3t=o(" (OPT model)"),g3t=l(),ML=a("li"),IBe=a("strong"),h3t=o("pegasus"),u3t=o(" \u2014 "),bme=a("a"),p3t=o("FlaxPegasusModel"),_3t=o(" (Pegasus model)"),b3t=l(),EL=a("li"),NBe=a("strong"),v3t=o("roberta"),F3t=o(" \u2014 "),vme=a("a"),T3t=o("FlaxRobertaModel"),M3t=o(" (RoBERTa model)"),E3t=l(),CL=a("li"),qBe=a("strong"),C3t=o("roformer"),w3t=o(" \u2014 "),Fme=a("a"),A3t=o("FlaxRoFormerModel"),L3t=o(" (RoFormer model)"),y3t=l(),wL=a("li"),jBe=a("strong"),x3t=o("t5"),$3t=o(" \u2014 "),Tme=a("a"),k3t=o("FlaxT5Model"),S3t=o(" (T5 model)"),R3t=l(),AL=a("li"),DBe=a("strong"),P3t=o("vision-text-dual-encoder"),B3t=o(" \u2014 "),Mme=a("a"),I3t=o("FlaxVisionTextDualEncoderModel"),N3t=o(" (VisionTextDualEncoder model)"),q3t=l(),LL=a("li"),GBe=a("strong"),j3t=o("vit"),D3t=o(" \u2014 "),Eme=a("a"),G3t=o("FlaxViTModel"),O3t=o(" (ViT model)"),V3t=l(),yL=a("li"),OBe=a("strong"),X3t=o("wav2vec2"),z3t=o(" \u2014 "),Cme=a("a"),Q3t=o("FlaxWav2Vec2Model"),W3t=o(" (Wav2Vec2 model)"),U3t=l(),xL=a("li"),VBe=a("strong"),H3t=o("xglm"),J3t=o(" \u2014 "),wme=a("a"),Y3t=o("FlaxXGLMModel"),Z3t=o(" (XGLM model)"),K3t=l(),$L=a("li"),XBe=a("strong"),e5t=o("xlm-roberta"),o5t=o(" \u2014 "),Ame=a("a"),r5t=o("FlaxXLMRobertaModel"),t5t=o(" (XLM-RoBERTa model)"),a5t=l(),F(kL.$$.fragment),pmo=l(),vf=a("h2"),SL=a("a"),zBe=a("span"),F(pI.$$.fragment),n5t=l(),QBe=a("span"),s5t=o("FlaxAutoModelForCausalLM"),_mo=l(),Sr=a("div"),F(_I.$$.fragment),l5t=l(),Ff=a("p"),i5t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Lme=a("a"),d5t=o("from_pretrained()"),m5t=o(" class method or the "),yme=a("a"),c5t=o("from_config()"),f5t=o(` class
method.`),g5t=l(),bI=a("p"),h5t=o("This class cannot be instantiated directly using "),WBe=a("code"),u5t=o("__init__()"),p5t=o(" (throws an error)."),_5t=l(),ba=a("div"),F(vI.$$.fragment),b5t=l(),UBe=a("p"),v5t=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),F5t=l(),Tf=a("p"),T5t=o(`Note:
Loading a model from its configuration file does `),HBe=a("strong"),M5t=o("not"),E5t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xme=a("a"),C5t=o("from_pretrained()"),w5t=o(" to load the model weights."),A5t=l(),F(RL.$$.fragment),L5t=l(),it=a("div"),F(FI.$$.fragment),y5t=l(),JBe=a("p"),x5t=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$5t=l(),ns=a("p"),k5t=o("The model class to instantiate is selected based on the "),YBe=a("code"),S5t=o("model_type"),R5t=o(` property of the config object (either
passed as an argument or loaded from `),ZBe=a("code"),P5t=o("pretrained_model_name_or_path"),B5t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KBe=a("code"),I5t=o("pretrained_model_name_or_path"),N5t=o(":"),q5t=l(),Se=a("ul"),PL=a("li"),eIe=a("strong"),j5t=o("bart"),D5t=o(" \u2014 "),$me=a("a"),G5t=o("FlaxBartForCausalLM"),O5t=o(" (BART model)"),V5t=l(),BL=a("li"),oIe=a("strong"),X5t=o("bert"),z5t=o(" \u2014 "),kme=a("a"),Q5t=o("FlaxBertForCausalLM"),W5t=o(" (BERT model)"),U5t=l(),IL=a("li"),rIe=a("strong"),H5t=o("big_bird"),J5t=o(" \u2014 "),Sme=a("a"),Y5t=o("FlaxBigBirdForCausalLM"),Z5t=o(" (BigBird model)"),K5t=l(),NL=a("li"),tIe=a("strong"),e0t=o("electra"),o0t=o(" \u2014 "),Rme=a("a"),r0t=o("FlaxElectraForCausalLM"),t0t=o(" (ELECTRA model)"),a0t=l(),qL=a("li"),aIe=a("strong"),n0t=o("gpt2"),s0t=o(" \u2014 "),Pme=a("a"),l0t=o("FlaxGPT2LMHeadModel"),i0t=o(" (OpenAI GPT-2 model)"),d0t=l(),jL=a("li"),nIe=a("strong"),m0t=o("gpt_neo"),c0t=o(" \u2014 "),Bme=a("a"),f0t=o("FlaxGPTNeoForCausalLM"),g0t=o(" (GPT Neo model)"),h0t=l(),DL=a("li"),sIe=a("strong"),u0t=o("gptj"),p0t=o(" \u2014 "),Ime=a("a"),_0t=o("FlaxGPTJForCausalLM"),b0t=o(" (GPT-J model)"),v0t=l(),GL=a("li"),lIe=a("strong"),F0t=o("opt"),T0t=o(" \u2014 "),Nme=a("a"),M0t=o("FlaxOPTForCausalLM"),E0t=o(" (OPT model)"),C0t=l(),OL=a("li"),iIe=a("strong"),w0t=o("roberta"),A0t=o(" \u2014 "),qme=a("a"),L0t=o("FlaxRobertaForCausalLM"),y0t=o(" (RoBERTa model)"),x0t=l(),VL=a("li"),dIe=a("strong"),$0t=o("xglm"),k0t=o(" \u2014 "),jme=a("a"),S0t=o("FlaxXGLMForCausalLM"),R0t=o(" (XGLM model)"),P0t=l(),F(XL.$$.fragment),bmo=l(),Mf=a("h2"),zL=a("a"),mIe=a("span"),F(TI.$$.fragment),B0t=l(),cIe=a("span"),I0t=o("FlaxAutoModelForPreTraining"),vmo=l(),Rr=a("div"),F(MI.$$.fragment),N0t=l(),Ef=a("p"),q0t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dme=a("a"),j0t=o("from_pretrained()"),D0t=o(" class method or the "),Gme=a("a"),G0t=o("from_config()"),O0t=o(` class
method.`),V0t=l(),EI=a("p"),X0t=o("This class cannot be instantiated directly using "),fIe=a("code"),z0t=o("__init__()"),Q0t=o(" (throws an error)."),W0t=l(),va=a("div"),F(CI.$$.fragment),U0t=l(),gIe=a("p"),H0t=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),J0t=l(),Cf=a("p"),Y0t=o(`Note:
Loading a model from its configuration file does `),hIe=a("strong"),Z0t=o("not"),K0t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ome=a("a"),ewt=o("from_pretrained()"),owt=o(" to load the model weights."),rwt=l(),F(QL.$$.fragment),twt=l(),dt=a("div"),F(wI.$$.fragment),awt=l(),uIe=a("p"),nwt=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),swt=l(),ss=a("p"),lwt=o("The model class to instantiate is selected based on the "),pIe=a("code"),iwt=o("model_type"),dwt=o(` property of the config object (either
passed as an argument or loaded from `),_Ie=a("code"),mwt=o("pretrained_model_name_or_path"),cwt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bIe=a("code"),fwt=o("pretrained_model_name_or_path"),gwt=o(":"),hwt=l(),we=a("ul"),WL=a("li"),vIe=a("strong"),uwt=o("albert"),pwt=o(" \u2014 "),Vme=a("a"),_wt=o("FlaxAlbertForPreTraining"),bwt=o(" (ALBERT model)"),vwt=l(),UL=a("li"),FIe=a("strong"),Fwt=o("bart"),Twt=o(" \u2014 "),Xme=a("a"),Mwt=o("FlaxBartForConditionalGeneration"),Ewt=o(" (BART model)"),Cwt=l(),HL=a("li"),TIe=a("strong"),wwt=o("bert"),Awt=o(" \u2014 "),zme=a("a"),Lwt=o("FlaxBertForPreTraining"),ywt=o(" (BERT model)"),xwt=l(),JL=a("li"),MIe=a("strong"),$wt=o("big_bird"),kwt=o(" \u2014 "),Qme=a("a"),Swt=o("FlaxBigBirdForPreTraining"),Rwt=o(" (BigBird model)"),Pwt=l(),YL=a("li"),EIe=a("strong"),Bwt=o("electra"),Iwt=o(" \u2014 "),Wme=a("a"),Nwt=o("FlaxElectraForPreTraining"),qwt=o(" (ELECTRA model)"),jwt=l(),ZL=a("li"),CIe=a("strong"),Dwt=o("longt5"),Gwt=o(" \u2014 "),Ume=a("a"),Owt=o("FlaxLongT5ForConditionalGeneration"),Vwt=o(" (LongT5 model)"),Xwt=l(),KL=a("li"),wIe=a("strong"),zwt=o("mbart"),Qwt=o(" \u2014 "),Hme=a("a"),Wwt=o("FlaxMBartForConditionalGeneration"),Uwt=o(" (mBART model)"),Hwt=l(),ey=a("li"),AIe=a("strong"),Jwt=o("mt5"),Ywt=o(" \u2014 "),Jme=a("a"),Zwt=o("FlaxMT5ForConditionalGeneration"),Kwt=o(" (MT5 model)"),eAt=l(),oy=a("li"),LIe=a("strong"),oAt=o("roberta"),rAt=o(" \u2014 "),Yme=a("a"),tAt=o("FlaxRobertaForMaskedLM"),aAt=o(" (RoBERTa model)"),nAt=l(),ry=a("li"),yIe=a("strong"),sAt=o("roformer"),lAt=o(" \u2014 "),Zme=a("a"),iAt=o("FlaxRoFormerForMaskedLM"),dAt=o(" (RoFormer model)"),mAt=l(),ty=a("li"),xIe=a("strong"),cAt=o("t5"),fAt=o(" \u2014 "),Kme=a("a"),gAt=o("FlaxT5ForConditionalGeneration"),hAt=o(" (T5 model)"),uAt=l(),ay=a("li"),$Ie=a("strong"),pAt=o("wav2vec2"),_At=o(" \u2014 "),ece=a("a"),bAt=o("FlaxWav2Vec2ForPreTraining"),vAt=o(" (Wav2Vec2 model)"),FAt=l(),ny=a("li"),kIe=a("strong"),TAt=o("xlm-roberta"),MAt=o(" \u2014 "),oce=a("a"),EAt=o("FlaxXLMRobertaForMaskedLM"),CAt=o(" (XLM-RoBERTa model)"),wAt=l(),F(sy.$$.fragment),Fmo=l(),wf=a("h2"),ly=a("a"),SIe=a("span"),F(AI.$$.fragment),AAt=l(),RIe=a("span"),LAt=o("FlaxAutoModelForMaskedLM"),Tmo=l(),Pr=a("div"),F(LI.$$.fragment),yAt=l(),Af=a("p"),xAt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rce=a("a"),$At=o("from_pretrained()"),kAt=o(" class method or the "),tce=a("a"),SAt=o("from_config()"),RAt=o(` class
method.`),PAt=l(),yI=a("p"),BAt=o("This class cannot be instantiated directly using "),PIe=a("code"),IAt=o("__init__()"),NAt=o(" (throws an error)."),qAt=l(),Fa=a("div"),F(xI.$$.fragment),jAt=l(),BIe=a("p"),DAt=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GAt=l(),Lf=a("p"),OAt=o(`Note:
Loading a model from its configuration file does `),IIe=a("strong"),VAt=o("not"),XAt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ace=a("a"),zAt=o("from_pretrained()"),QAt=o(" to load the model weights."),WAt=l(),F(iy.$$.fragment),UAt=l(),mt=a("div"),F($I.$$.fragment),HAt=l(),NIe=a("p"),JAt=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),YAt=l(),ls=a("p"),ZAt=o("The model class to instantiate is selected based on the "),qIe=a("code"),KAt=o("model_type"),e6t=o(` property of the config object (either
passed as an argument or loaded from `),jIe=a("code"),o6t=o("pretrained_model_name_or_path"),r6t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DIe=a("code"),t6t=o("pretrained_model_name_or_path"),a6t=o(":"),n6t=l(),Re=a("ul"),dy=a("li"),GIe=a("strong"),s6t=o("albert"),l6t=o(" \u2014 "),nce=a("a"),i6t=o("FlaxAlbertForMaskedLM"),d6t=o(" (ALBERT model)"),m6t=l(),my=a("li"),OIe=a("strong"),c6t=o("bart"),f6t=o(" \u2014 "),sce=a("a"),g6t=o("FlaxBartForConditionalGeneration"),h6t=o(" (BART model)"),u6t=l(),cy=a("li"),VIe=a("strong"),p6t=o("bert"),_6t=o(" \u2014 "),lce=a("a"),b6t=o("FlaxBertForMaskedLM"),v6t=o(" (BERT model)"),F6t=l(),fy=a("li"),XIe=a("strong"),T6t=o("big_bird"),M6t=o(" \u2014 "),ice=a("a"),E6t=o("FlaxBigBirdForMaskedLM"),C6t=o(" (BigBird model)"),w6t=l(),gy=a("li"),zIe=a("strong"),A6t=o("distilbert"),L6t=o(" \u2014 "),dce=a("a"),y6t=o("FlaxDistilBertForMaskedLM"),x6t=o(" (DistilBERT model)"),$6t=l(),hy=a("li"),QIe=a("strong"),k6t=o("electra"),S6t=o(" \u2014 "),mce=a("a"),R6t=o("FlaxElectraForMaskedLM"),P6t=o(" (ELECTRA model)"),B6t=l(),uy=a("li"),WIe=a("strong"),I6t=o("mbart"),N6t=o(" \u2014 "),cce=a("a"),q6t=o("FlaxMBartForConditionalGeneration"),j6t=o(" (mBART model)"),D6t=l(),py=a("li"),UIe=a("strong"),G6t=o("roberta"),O6t=o(" \u2014 "),fce=a("a"),V6t=o("FlaxRobertaForMaskedLM"),X6t=o(" (RoBERTa model)"),z6t=l(),_y=a("li"),HIe=a("strong"),Q6t=o("roformer"),W6t=o(" \u2014 "),gce=a("a"),U6t=o("FlaxRoFormerForMaskedLM"),H6t=o(" (RoFormer model)"),J6t=l(),by=a("li"),JIe=a("strong"),Y6t=o("xlm-roberta"),Z6t=o(" \u2014 "),hce=a("a"),K6t=o("FlaxXLMRobertaForMaskedLM"),e7t=o(" (XLM-RoBERTa model)"),o7t=l(),F(vy.$$.fragment),Mmo=l(),yf=a("h2"),Fy=a("a"),YIe=a("span"),F(kI.$$.fragment),r7t=l(),ZIe=a("span"),t7t=o("FlaxAutoModelForSeq2SeqLM"),Emo=l(),Br=a("div"),F(SI.$$.fragment),a7t=l(),xf=a("p"),n7t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uce=a("a"),s7t=o("from_pretrained()"),l7t=o(" class method or the "),pce=a("a"),i7t=o("from_config()"),d7t=o(` class
method.`),m7t=l(),RI=a("p"),c7t=o("This class cannot be instantiated directly using "),KIe=a("code"),f7t=o("__init__()"),g7t=o(" (throws an error)."),h7t=l(),Ta=a("div"),F(PI.$$.fragment),u7t=l(),eNe=a("p"),p7t=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_7t=l(),$f=a("p"),b7t=o(`Note:
Loading a model from its configuration file does `),oNe=a("strong"),v7t=o("not"),F7t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ce=a("a"),T7t=o("from_pretrained()"),M7t=o(" to load the model weights."),E7t=l(),F(Ty.$$.fragment),C7t=l(),ct=a("div"),F(BI.$$.fragment),w7t=l(),rNe=a("p"),A7t=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),L7t=l(),is=a("p"),y7t=o("The model class to instantiate is selected based on the "),tNe=a("code"),x7t=o("model_type"),$7t=o(` property of the config object (either
passed as an argument or loaded from `),aNe=a("code"),k7t=o("pretrained_model_name_or_path"),S7t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nNe=a("code"),R7t=o("pretrained_model_name_or_path"),P7t=o(":"),B7t=l(),Pe=a("ul"),My=a("li"),sNe=a("strong"),I7t=o("bart"),N7t=o(" \u2014 "),bce=a("a"),q7t=o("FlaxBartForConditionalGeneration"),j7t=o(" (BART model)"),D7t=l(),Ey=a("li"),lNe=a("strong"),G7t=o("blenderbot"),O7t=o(" \u2014 "),vce=a("a"),V7t=o("FlaxBlenderbotForConditionalGeneration"),X7t=o(" (Blenderbot model)"),z7t=l(),Cy=a("li"),iNe=a("strong"),Q7t=o("blenderbot-small"),W7t=o(" \u2014 "),Fce=a("a"),U7t=o("FlaxBlenderbotSmallForConditionalGeneration"),H7t=o(" (BlenderbotSmall model)"),J7t=l(),wy=a("li"),dNe=a("strong"),Y7t=o("encoder-decoder"),Z7t=o(" \u2014 "),Tce=a("a"),K7t=o("FlaxEncoderDecoderModel"),e8t=o(" (Encoder decoder model)"),o8t=l(),Ay=a("li"),mNe=a("strong"),r8t=o("longt5"),t8t=o(" \u2014 "),Mce=a("a"),a8t=o("FlaxLongT5ForConditionalGeneration"),n8t=o(" (LongT5 model)"),s8t=l(),Ly=a("li"),cNe=a("strong"),l8t=o("marian"),i8t=o(" \u2014 "),Ece=a("a"),d8t=o("FlaxMarianMTModel"),m8t=o(" (Marian model)"),c8t=l(),yy=a("li"),fNe=a("strong"),f8t=o("mbart"),g8t=o(" \u2014 "),Cce=a("a"),h8t=o("FlaxMBartForConditionalGeneration"),u8t=o(" (mBART model)"),p8t=l(),xy=a("li"),gNe=a("strong"),_8t=o("mt5"),b8t=o(" \u2014 "),wce=a("a"),v8t=o("FlaxMT5ForConditionalGeneration"),F8t=o(" (MT5 model)"),T8t=l(),$y=a("li"),hNe=a("strong"),M8t=o("pegasus"),E8t=o(" \u2014 "),Ace=a("a"),C8t=o("FlaxPegasusForConditionalGeneration"),w8t=o(" (Pegasus model)"),A8t=l(),ky=a("li"),uNe=a("strong"),L8t=o("t5"),y8t=o(" \u2014 "),Lce=a("a"),x8t=o("FlaxT5ForConditionalGeneration"),$8t=o(" (T5 model)"),k8t=l(),F(Sy.$$.fragment),Cmo=l(),kf=a("h2"),Ry=a("a"),pNe=a("span"),F(II.$$.fragment),S8t=l(),_Ne=a("span"),R8t=o("FlaxAutoModelForSequenceClassification"),wmo=l(),Ir=a("div"),F(NI.$$.fragment),P8t=l(),Sf=a("p"),B8t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yce=a("a"),I8t=o("from_pretrained()"),N8t=o(" class method or the "),xce=a("a"),q8t=o("from_config()"),j8t=o(` class
method.`),D8t=l(),qI=a("p"),G8t=o("This class cannot be instantiated directly using "),bNe=a("code"),O8t=o("__init__()"),V8t=o(" (throws an error)."),X8t=l(),Ma=a("div"),F(jI.$$.fragment),z8t=l(),vNe=a("p"),Q8t=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),W8t=l(),Rf=a("p"),U8t=o(`Note:
Loading a model from its configuration file does `),FNe=a("strong"),H8t=o("not"),J8t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ce=a("a"),Y8t=o("from_pretrained()"),Z8t=o(" to load the model weights."),K8t=l(),F(Py.$$.fragment),eLt=l(),ft=a("div"),F(DI.$$.fragment),oLt=l(),TNe=a("p"),rLt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tLt=l(),ds=a("p"),aLt=o("The model class to instantiate is selected based on the "),MNe=a("code"),nLt=o("model_type"),sLt=o(` property of the config object (either
passed as an argument or loaded from `),ENe=a("code"),lLt=o("pretrained_model_name_or_path"),iLt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CNe=a("code"),dLt=o("pretrained_model_name_or_path"),mLt=o(":"),cLt=l(),Be=a("ul"),By=a("li"),wNe=a("strong"),fLt=o("albert"),gLt=o(" \u2014 "),kce=a("a"),hLt=o("FlaxAlbertForSequenceClassification"),uLt=o(" (ALBERT model)"),pLt=l(),Iy=a("li"),ANe=a("strong"),_Lt=o("bart"),bLt=o(" \u2014 "),Sce=a("a"),vLt=o("FlaxBartForSequenceClassification"),FLt=o(" (BART model)"),TLt=l(),Ny=a("li"),LNe=a("strong"),MLt=o("bert"),ELt=o(" \u2014 "),Rce=a("a"),CLt=o("FlaxBertForSequenceClassification"),wLt=o(" (BERT model)"),ALt=l(),qy=a("li"),yNe=a("strong"),LLt=o("big_bird"),yLt=o(" \u2014 "),Pce=a("a"),xLt=o("FlaxBigBirdForSequenceClassification"),$Lt=o(" (BigBird model)"),kLt=l(),jy=a("li"),xNe=a("strong"),SLt=o("distilbert"),RLt=o(" \u2014 "),Bce=a("a"),PLt=o("FlaxDistilBertForSequenceClassification"),BLt=o(" (DistilBERT model)"),ILt=l(),Dy=a("li"),$Ne=a("strong"),NLt=o("electra"),qLt=o(" \u2014 "),Ice=a("a"),jLt=o("FlaxElectraForSequenceClassification"),DLt=o(" (ELECTRA model)"),GLt=l(),Gy=a("li"),kNe=a("strong"),OLt=o("mbart"),VLt=o(" \u2014 "),Nce=a("a"),XLt=o("FlaxMBartForSequenceClassification"),zLt=o(" (mBART model)"),QLt=l(),Oy=a("li"),SNe=a("strong"),WLt=o("roberta"),ULt=o(" \u2014 "),qce=a("a"),HLt=o("FlaxRobertaForSequenceClassification"),JLt=o(" (RoBERTa model)"),YLt=l(),Vy=a("li"),RNe=a("strong"),ZLt=o("roformer"),KLt=o(" \u2014 "),jce=a("a"),eyt=o("FlaxRoFormerForSequenceClassification"),oyt=o(" (RoFormer model)"),ryt=l(),Xy=a("li"),PNe=a("strong"),tyt=o("xlm-roberta"),ayt=o(" \u2014 "),Dce=a("a"),nyt=o("FlaxXLMRobertaForSequenceClassification"),syt=o(" (XLM-RoBERTa model)"),lyt=l(),F(zy.$$.fragment),Amo=l(),Pf=a("h2"),Qy=a("a"),BNe=a("span"),F(GI.$$.fragment),iyt=l(),INe=a("span"),dyt=o("FlaxAutoModelForQuestionAnswering"),Lmo=l(),Nr=a("div"),F(OI.$$.fragment),myt=l(),Bf=a("p"),cyt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Gce=a("a"),fyt=o("from_pretrained()"),gyt=o(" class method or the "),Oce=a("a"),hyt=o("from_config()"),uyt=o(` class
method.`),pyt=l(),VI=a("p"),_yt=o("This class cannot be instantiated directly using "),NNe=a("code"),byt=o("__init__()"),vyt=o(" (throws an error)."),Fyt=l(),Ea=a("div"),F(XI.$$.fragment),Tyt=l(),qNe=a("p"),Myt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Eyt=l(),If=a("p"),Cyt=o(`Note:
Loading a model from its configuration file does `),jNe=a("strong"),wyt=o("not"),Ayt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vce=a("a"),Lyt=o("from_pretrained()"),yyt=o(" to load the model weights."),xyt=l(),F(Wy.$$.fragment),$yt=l(),gt=a("div"),F(zI.$$.fragment),kyt=l(),DNe=a("p"),Syt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ryt=l(),ms=a("p"),Pyt=o("The model class to instantiate is selected based on the "),GNe=a("code"),Byt=o("model_type"),Iyt=o(` property of the config object (either
passed as an argument or loaded from `),ONe=a("code"),Nyt=o("pretrained_model_name_or_path"),qyt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VNe=a("code"),jyt=o("pretrained_model_name_or_path"),Dyt=o(":"),Gyt=l(),Ie=a("ul"),Uy=a("li"),XNe=a("strong"),Oyt=o("albert"),Vyt=o(" \u2014 "),Xce=a("a"),Xyt=o("FlaxAlbertForQuestionAnswering"),zyt=o(" (ALBERT model)"),Qyt=l(),Hy=a("li"),zNe=a("strong"),Wyt=o("bart"),Uyt=o(" \u2014 "),zce=a("a"),Hyt=o("FlaxBartForQuestionAnswering"),Jyt=o(" (BART model)"),Yyt=l(),Jy=a("li"),QNe=a("strong"),Zyt=o("bert"),Kyt=o(" \u2014 "),Qce=a("a"),e9t=o("FlaxBertForQuestionAnswering"),o9t=o(" (BERT model)"),r9t=l(),Yy=a("li"),WNe=a("strong"),t9t=o("big_bird"),a9t=o(" \u2014 "),Wce=a("a"),n9t=o("FlaxBigBirdForQuestionAnswering"),s9t=o(" (BigBird model)"),l9t=l(),Zy=a("li"),UNe=a("strong"),i9t=o("distilbert"),d9t=o(" \u2014 "),Uce=a("a"),m9t=o("FlaxDistilBertForQuestionAnswering"),c9t=o(" (DistilBERT model)"),f9t=l(),Ky=a("li"),HNe=a("strong"),g9t=o("electra"),h9t=o(" \u2014 "),Hce=a("a"),u9t=o("FlaxElectraForQuestionAnswering"),p9t=o(" (ELECTRA model)"),_9t=l(),e9=a("li"),JNe=a("strong"),b9t=o("mbart"),v9t=o(" \u2014 "),Jce=a("a"),F9t=o("FlaxMBartForQuestionAnswering"),T9t=o(" (mBART model)"),M9t=l(),o9=a("li"),YNe=a("strong"),E9t=o("roberta"),C9t=o(" \u2014 "),Yce=a("a"),w9t=o("FlaxRobertaForQuestionAnswering"),A9t=o(" (RoBERTa model)"),L9t=l(),r9=a("li"),ZNe=a("strong"),y9t=o("roformer"),x9t=o(" \u2014 "),Zce=a("a"),$9t=o("FlaxRoFormerForQuestionAnswering"),k9t=o(" (RoFormer model)"),S9t=l(),t9=a("li"),KNe=a("strong"),R9t=o("xlm-roberta"),P9t=o(" \u2014 "),Kce=a("a"),B9t=o("FlaxXLMRobertaForQuestionAnswering"),I9t=o(" (XLM-RoBERTa model)"),N9t=l(),F(a9.$$.fragment),ymo=l(),Nf=a("h2"),n9=a("a"),eqe=a("span"),F(QI.$$.fragment),q9t=l(),oqe=a("span"),j9t=o("FlaxAutoModelForTokenClassification"),xmo=l(),qr=a("div"),F(WI.$$.fragment),D9t=l(),qf=a("p"),G9t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),efe=a("a"),O9t=o("from_pretrained()"),V9t=o(" class method or the "),ofe=a("a"),X9t=o("from_config()"),z9t=o(` class
method.`),Q9t=l(),UI=a("p"),W9t=o("This class cannot be instantiated directly using "),rqe=a("code"),U9t=o("__init__()"),H9t=o(" (throws an error)."),J9t=l(),Ca=a("div"),F(HI.$$.fragment),Y9t=l(),tqe=a("p"),Z9t=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),K9t=l(),jf=a("p"),ext=o(`Note:
Loading a model from its configuration file does `),aqe=a("strong"),oxt=o("not"),rxt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rfe=a("a"),txt=o("from_pretrained()"),axt=o(" to load the model weights."),nxt=l(),F(s9.$$.fragment),sxt=l(),ht=a("div"),F(JI.$$.fragment),lxt=l(),nqe=a("p"),ixt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dxt=l(),cs=a("p"),mxt=o("The model class to instantiate is selected based on the "),sqe=a("code"),cxt=o("model_type"),fxt=o(` property of the config object (either
passed as an argument or loaded from `),lqe=a("code"),gxt=o("pretrained_model_name_or_path"),hxt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iqe=a("code"),uxt=o("pretrained_model_name_or_path"),pxt=o(":"),_xt=l(),We=a("ul"),l9=a("li"),dqe=a("strong"),bxt=o("albert"),vxt=o(" \u2014 "),tfe=a("a"),Fxt=o("FlaxAlbertForTokenClassification"),Txt=o(" (ALBERT model)"),Mxt=l(),i9=a("li"),mqe=a("strong"),Ext=o("bert"),Cxt=o(" \u2014 "),afe=a("a"),wxt=o("FlaxBertForTokenClassification"),Axt=o(" (BERT model)"),Lxt=l(),d9=a("li"),cqe=a("strong"),yxt=o("big_bird"),xxt=o(" \u2014 "),nfe=a("a"),$xt=o("FlaxBigBirdForTokenClassification"),kxt=o(" (BigBird model)"),Sxt=l(),m9=a("li"),fqe=a("strong"),Rxt=o("distilbert"),Pxt=o(" \u2014 "),sfe=a("a"),Bxt=o("FlaxDistilBertForTokenClassification"),Ixt=o(" (DistilBERT model)"),Nxt=l(),c9=a("li"),gqe=a("strong"),qxt=o("electra"),jxt=o(" \u2014 "),lfe=a("a"),Dxt=o("FlaxElectraForTokenClassification"),Gxt=o(" (ELECTRA model)"),Oxt=l(),f9=a("li"),hqe=a("strong"),Vxt=o("roberta"),Xxt=o(" \u2014 "),ife=a("a"),zxt=o("FlaxRobertaForTokenClassification"),Qxt=o(" (RoBERTa model)"),Wxt=l(),g9=a("li"),uqe=a("strong"),Uxt=o("roformer"),Hxt=o(" \u2014 "),dfe=a("a"),Jxt=o("FlaxRoFormerForTokenClassification"),Yxt=o(" (RoFormer model)"),Zxt=l(),h9=a("li"),pqe=a("strong"),Kxt=o("xlm-roberta"),e$t=o(" \u2014 "),mfe=a("a"),o$t=o("FlaxXLMRobertaForTokenClassification"),r$t=o(" (XLM-RoBERTa model)"),t$t=l(),F(u9.$$.fragment),$mo=l(),Df=a("h2"),p9=a("a"),_qe=a("span"),F(YI.$$.fragment),a$t=l(),bqe=a("span"),n$t=o("FlaxAutoModelForMultipleChoice"),kmo=l(),jr=a("div"),F(ZI.$$.fragment),s$t=l(),Gf=a("p"),l$t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cfe=a("a"),i$t=o("from_pretrained()"),d$t=o(" class method or the "),ffe=a("a"),m$t=o("from_config()"),c$t=o(` class
method.`),f$t=l(),KI=a("p"),g$t=o("This class cannot be instantiated directly using "),vqe=a("code"),h$t=o("__init__()"),u$t=o(" (throws an error)."),p$t=l(),wa=a("div"),F(eN.$$.fragment),_$t=l(),Fqe=a("p"),b$t=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),v$t=l(),Of=a("p"),F$t=o(`Note:
Loading a model from its configuration file does `),Tqe=a("strong"),T$t=o("not"),M$t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gfe=a("a"),E$t=o("from_pretrained()"),C$t=o(" to load the model weights."),w$t=l(),F(_9.$$.fragment),A$t=l(),ut=a("div"),F(oN.$$.fragment),L$t=l(),Mqe=a("p"),y$t=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),x$t=l(),fs=a("p"),$$t=o("The model class to instantiate is selected based on the "),Eqe=a("code"),k$t=o("model_type"),S$t=o(` property of the config object (either
passed as an argument or loaded from `),Cqe=a("code"),R$t=o("pretrained_model_name_or_path"),P$t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wqe=a("code"),B$t=o("pretrained_model_name_or_path"),I$t=o(":"),N$t=l(),Ue=a("ul"),b9=a("li"),Aqe=a("strong"),q$t=o("albert"),j$t=o(" \u2014 "),hfe=a("a"),D$t=o("FlaxAlbertForMultipleChoice"),G$t=o(" (ALBERT model)"),O$t=l(),v9=a("li"),Lqe=a("strong"),V$t=o("bert"),X$t=o(" \u2014 "),ufe=a("a"),z$t=o("FlaxBertForMultipleChoice"),Q$t=o(" (BERT model)"),W$t=l(),F9=a("li"),yqe=a("strong"),U$t=o("big_bird"),H$t=o(" \u2014 "),pfe=a("a"),J$t=o("FlaxBigBirdForMultipleChoice"),Y$t=o(" (BigBird model)"),Z$t=l(),T9=a("li"),xqe=a("strong"),K$t=o("distilbert"),ekt=o(" \u2014 "),_fe=a("a"),okt=o("FlaxDistilBertForMultipleChoice"),rkt=o(" (DistilBERT model)"),tkt=l(),M9=a("li"),$qe=a("strong"),akt=o("electra"),nkt=o(" \u2014 "),bfe=a("a"),skt=o("FlaxElectraForMultipleChoice"),lkt=o(" (ELECTRA model)"),ikt=l(),E9=a("li"),kqe=a("strong"),dkt=o("roberta"),mkt=o(" \u2014 "),vfe=a("a"),ckt=o("FlaxRobertaForMultipleChoice"),fkt=o(" (RoBERTa model)"),gkt=l(),C9=a("li"),Sqe=a("strong"),hkt=o("roformer"),ukt=o(" \u2014 "),Ffe=a("a"),pkt=o("FlaxRoFormerForMultipleChoice"),_kt=o(" (RoFormer model)"),bkt=l(),w9=a("li"),Rqe=a("strong"),vkt=o("xlm-roberta"),Fkt=o(" \u2014 "),Tfe=a("a"),Tkt=o("FlaxXLMRobertaForMultipleChoice"),Mkt=o(" (XLM-RoBERTa model)"),Ekt=l(),F(A9.$$.fragment),Smo=l(),Vf=a("h2"),L9=a("a"),Pqe=a("span"),F(rN.$$.fragment),Ckt=l(),Bqe=a("span"),wkt=o("FlaxAutoModelForNextSentencePrediction"),Rmo=l(),Dr=a("div"),F(tN.$$.fragment),Akt=l(),Xf=a("p"),Lkt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Mfe=a("a"),ykt=o("from_pretrained()"),xkt=o(" class method or the "),Efe=a("a"),$kt=o("from_config()"),kkt=o(` class
method.`),Skt=l(),aN=a("p"),Rkt=o("This class cannot be instantiated directly using "),Iqe=a("code"),Pkt=o("__init__()"),Bkt=o(" (throws an error)."),Ikt=l(),Aa=a("div"),F(nN.$$.fragment),Nkt=l(),Nqe=a("p"),qkt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jkt=l(),zf=a("p"),Dkt=o(`Note:
Loading a model from its configuration file does `),qqe=a("strong"),Gkt=o("not"),Okt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cfe=a("a"),Vkt=o("from_pretrained()"),Xkt=o(" to load the model weights."),zkt=l(),F(y9.$$.fragment),Qkt=l(),pt=a("div"),F(sN.$$.fragment),Wkt=l(),jqe=a("p"),Ukt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Hkt=l(),gs=a("p"),Jkt=o("The model class to instantiate is selected based on the "),Dqe=a("code"),Ykt=o("model_type"),Zkt=o(` property of the config object (either
passed as an argument or loaded from `),Gqe=a("code"),Kkt=o("pretrained_model_name_or_path"),eSt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oqe=a("code"),oSt=o("pretrained_model_name_or_path"),rSt=o(":"),tSt=l(),Vqe=a("ul"),x9=a("li"),Xqe=a("strong"),aSt=o("bert"),nSt=o(" \u2014 "),wfe=a("a"),sSt=o("FlaxBertForNextSentencePrediction"),lSt=o(" (BERT model)"),iSt=l(),F($9.$$.fragment),Pmo=l(),Qf=a("h2"),k9=a("a"),zqe=a("span"),F(lN.$$.fragment),dSt=l(),Qqe=a("span"),mSt=o("FlaxAutoModelForImageClassification"),Bmo=l(),Gr=a("div"),F(iN.$$.fragment),cSt=l(),Wf=a("p"),fSt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Afe=a("a"),gSt=o("from_pretrained()"),hSt=o(" class method or the "),Lfe=a("a"),uSt=o("from_config()"),pSt=o(` class
method.`),_St=l(),dN=a("p"),bSt=o("This class cannot be instantiated directly using "),Wqe=a("code"),vSt=o("__init__()"),FSt=o(" (throws an error)."),TSt=l(),La=a("div"),F(mN.$$.fragment),MSt=l(),Uqe=a("p"),ESt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),CSt=l(),Uf=a("p"),wSt=o(`Note:
Loading a model from its configuration file does `),Hqe=a("strong"),ASt=o("not"),LSt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yfe=a("a"),ySt=o("from_pretrained()"),xSt=o(" to load the model weights."),$St=l(),F(S9.$$.fragment),kSt=l(),_t=a("div"),F(cN.$$.fragment),SSt=l(),Jqe=a("p"),RSt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PSt=l(),hs=a("p"),BSt=o("The model class to instantiate is selected based on the "),Yqe=a("code"),ISt=o("model_type"),NSt=o(` property of the config object (either
passed as an argument or loaded from `),Zqe=a("code"),qSt=o("pretrained_model_name_or_path"),jSt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kqe=a("code"),DSt=o("pretrained_model_name_or_path"),GSt=o(":"),OSt=l(),fN=a("ul"),R9=a("li"),eje=a("strong"),VSt=o("beit"),XSt=o(" \u2014 "),xfe=a("a"),zSt=o("FlaxBeitForImageClassification"),QSt=o(" (BEiT model)"),WSt=l(),P9=a("li"),oje=a("strong"),USt=o("vit"),HSt=o(" \u2014 "),$fe=a("a"),JSt=o("FlaxViTForImageClassification"),YSt=o(" (ViT model)"),ZSt=l(),F(B9.$$.fragment),Imo=l(),Hf=a("h2"),I9=a("a"),rje=a("span"),F(gN.$$.fragment),KSt=l(),tje=a("span"),eRt=o("FlaxAutoModelForVision2Seq"),Nmo=l(),Or=a("div"),F(hN.$$.fragment),oRt=l(),Jf=a("p"),rRt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kfe=a("a"),tRt=o("from_pretrained()"),aRt=o(" class method or the "),Sfe=a("a"),nRt=o("from_config()"),sRt=o(` class
method.`),lRt=l(),uN=a("p"),iRt=o("This class cannot be instantiated directly using "),aje=a("code"),dRt=o("__init__()"),mRt=o(" (throws an error)."),cRt=l(),ya=a("div"),F(pN.$$.fragment),fRt=l(),nje=a("p"),gRt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hRt=l(),Yf=a("p"),uRt=o(`Note:
Loading a model from its configuration file does `),sje=a("strong"),pRt=o("not"),_Rt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rfe=a("a"),bRt=o("from_pretrained()"),vRt=o(" to load the model weights."),FRt=l(),F(N9.$$.fragment),TRt=l(),bt=a("div"),F(_N.$$.fragment),MRt=l(),lje=a("p"),ERt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),CRt=l(),us=a("p"),wRt=o("The model class to instantiate is selected based on the "),ije=a("code"),ARt=o("model_type"),LRt=o(` property of the config object (either
passed as an argument or loaded from `),dje=a("code"),yRt=o("pretrained_model_name_or_path"),xRt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mje=a("code"),$Rt=o("pretrained_model_name_or_path"),kRt=o(":"),SRt=l(),cje=a("ul"),q9=a("li"),fje=a("strong"),RRt=o("vision-encoder-decoder"),PRt=o(" \u2014 "),Pfe=a("a"),BRt=o("FlaxVisionEncoderDecoderModel"),IRt=o(" (Vision Encoder decoder model)"),NRt=l(),F(j9.$$.fragment),this.h()},l(c){const _=Dka('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(c),u=n(c,"H1",{class:!0});var bN=s(u);f=n(bN,"A",{id:!0,class:!0,href:!0});var gje=s(f);p=n(gje,"SPAN",{});var hje=s(p);T(m.$$.fragment,hje),hje.forEach(t),gje.forEach(t),h=i(bN),He=n(bN,"SPAN",{});var uje=s(He);Ld=r(uje,"Auto Classes"),uje.forEach(t),bN.forEach(t),og=i(c),wt=n(c,"P",{});var vN=s(wt);yd=r(vN,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xd=n(vN,"CODE",{});var pje=s(xd);Mk=r(pje,"from_pretrained()"),pje.forEach(t),rg=r(vN,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),vN.forEach(t),Qe=i(c),Ze=n(c,"P",{});var ps=s(Ze);$d=r(ps,"Instantiating one of "),_s=n(ps,"A",{href:!0});var _je=s(_s);Ek=r(_je,"AutoConfig"),_je.forEach(t),bs=r(ps,", "),vs=n(ps,"A",{href:!0});var bje=s(vs);Ck=r(bje,"AutoModel"),bje.forEach(t),kd=r(ps,`, and
`),Fs=n(ps,"A",{href:!0});var vje=s(Fs);wk=r(vje,"AutoTokenizer"),vje.forEach(t),Sd=r(ps," will directly create a class of the relevant architecture. For instance"),ps.forEach(t),tg=i(c),T(ln.$$.fragment,c),Ke=i(c),ye=n(c,"P",{});var FN=s(ye);Wq=r(FN,"will create a model that is an instance of "),Rd=n(FN,"A",{href:!0});var Fje=s(Rd);Uq=r(Fje,"BertModel"),Fje.forEach(t),Hq=r(FN,"."),FN.forEach(t),Po=i(c),dn=n(c,"P",{});var TN=s(dn);Jq=r(TN,"There is one class of "),ag=n(TN,"CODE",{});var Tje=s(ag);Yq=r(Tje,"AutoModel"),Tje.forEach(t),cgo=r(TN," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),TN.forEach(t),vio=i(c),Pd=n(c,"H2",{class:!0});var MN=s(Pd);ng=n(MN,"A",{id:!0,class:!0,href:!0});var Mje=s(ng);Vhe=n(Mje,"SPAN",{});var Eje=s(Vhe);T(Ak.$$.fragment,Eje),Eje.forEach(t),Mje.forEach(t),fgo=i(MN),Xhe=n(MN,"SPAN",{});var Cje=s(Xhe);ggo=r(Cje,"Extending the Auto Classes"),Cje.forEach(t),MN.forEach(t),Fio=i(c),Ts=n(c,"P",{});var Zf=s(Ts);hgo=r(Zf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),zhe=n(Zf,"CODE",{});var wje=s(zhe);ugo=r(wje,"NewModel"),wje.forEach(t),pgo=r(Zf,", make sure you have a "),Qhe=n(Zf,"CODE",{});var Aje=s(Qhe);_go=r(Aje,"NewModelConfig"),Aje.forEach(t),bgo=r(Zf,` then you can add those to the auto
classes like this:`),Zf.forEach(t),Tio=i(c),T(Lk.$$.fragment,c),Mio=i(c),Zq=n(c,"P",{});var Lje=s(Zq);vgo=r(Lje,"You will then be able to use the auto classes like you would usually do!"),Lje.forEach(t),Eio=i(c),T(sg.$$.fragment,c),Cio=i(c),Bd=n(c,"H2",{class:!0});var EN=s(Bd);lg=n(EN,"A",{id:!0,class:!0,href:!0});var yje=s(lg);Whe=n(yje,"SPAN",{});var xje=s(Whe);T(yk.$$.fragment,xje),xje.forEach(t),yje.forEach(t),Fgo=i(EN),Uhe=n(EN,"SPAN",{});var $je=s(Uhe);Tgo=r($je,"AutoConfig"),$je.forEach(t),EN.forEach(t),wio=i(c),Bo=n(c,"DIV",{class:!0});var Et=s(Bo);T(xk.$$.fragment,Et),Mgo=i(Et),$k=n(Et,"P",{});var CN=s($k);Ego=r(CN,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Kq=n(CN,"A",{href:!0});var kje=s(Kq);Cgo=r(kje,"from_pretrained()"),kje.forEach(t),wgo=r(CN," class method."),CN.forEach(t),Ago=i(Et),kk=n(Et,"P",{});var wN=s(kk);Lgo=r(wN,"This class cannot be instantiated directly using "),Hhe=n(wN,"CODE",{});var Sje=s(Hhe);ygo=r(Sje,"__init__()"),Sje.forEach(t),xgo=r(wN," (throws an error)."),wN.forEach(t),$go=i(Et),Vr=n(Et,"DIV",{class:!0});var Ct=s(Vr);T(Sk.$$.fragment,Ct),kgo=i(Ct),Jhe=n(Ct,"P",{});var Rje=s(Jhe);Sgo=r(Rje,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Rje.forEach(t),Rgo=i(Ct),Id=n(Ct,"P",{});var Kf=s(Id);Pgo=r(Kf,"The configuration class to instantiate is selected based on the "),Yhe=n(Kf,"CODE",{});var Pje=s(Yhe);Bgo=r(Pje,"model_type"),Pje.forEach(t),Igo=r(Kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zhe=n(Kf,"CODE",{});var Bje=s(Zhe);Ngo=r(Bje,"pretrained_model_name_or_path"),Bje.forEach(t),qgo=r(Kf,":"),Kf.forEach(t),jgo=i(Ct),A=n(Ct,"UL",{});var L=s(A);ig=n(L,"LI",{});var D9=s(ig);Khe=n(D9,"STRONG",{});var Ije=s(Khe);Dgo=r(Ije,"albert"),Ije.forEach(t),Ggo=r(D9," \u2014 "),ej=n(D9,"A",{href:!0});var Nje=s(ej);Ogo=r(Nje,"AlbertConfig"),Nje.forEach(t),Vgo=r(D9," (ALBERT model)"),D9.forEach(t),Xgo=i(L),dg=n(L,"LI",{});var G9=s(dg);eue=n(G9,"STRONG",{});var qje=s(eue);zgo=r(qje,"bart"),qje.forEach(t),Qgo=r(G9," \u2014 "),oj=n(G9,"A",{href:!0});var jje=s(oj);Wgo=r(jje,"BartConfig"),jje.forEach(t),Ugo=r(G9," (BART model)"),G9.forEach(t),Hgo=i(L),mg=n(L,"LI",{});var O9=s(mg);oue=n(O9,"STRONG",{});var Dje=s(oue);Jgo=r(Dje,"beit"),Dje.forEach(t),Ygo=r(O9," \u2014 "),rj=n(O9,"A",{href:!0});var Gje=s(rj);Zgo=r(Gje,"BeitConfig"),Gje.forEach(t),Kgo=r(O9," (BEiT model)"),O9.forEach(t),eho=i(L),cg=n(L,"LI",{});var V9=s(cg);rue=n(V9,"STRONG",{});var Oje=s(rue);oho=r(Oje,"bert"),Oje.forEach(t),rho=r(V9," \u2014 "),tj=n(V9,"A",{href:!0});var Vje=s(tj);tho=r(Vje,"BertConfig"),Vje.forEach(t),aho=r(V9," (BERT model)"),V9.forEach(t),nho=i(L),fg=n(L,"LI",{});var X9=s(fg);tue=n(X9,"STRONG",{});var Xje=s(tue);sho=r(Xje,"bert-generation"),Xje.forEach(t),lho=r(X9," \u2014 "),aj=n(X9,"A",{href:!0});var zje=s(aj);iho=r(zje,"BertGenerationConfig"),zje.forEach(t),dho=r(X9," (Bert Generation model)"),X9.forEach(t),mho=i(L),gg=n(L,"LI",{});var z9=s(gg);aue=n(z9,"STRONG",{});var Qje=s(aue);cho=r(Qje,"big_bird"),Qje.forEach(t),fho=r(z9," \u2014 "),nj=n(z9,"A",{href:!0});var Wje=s(nj);gho=r(Wje,"BigBirdConfig"),Wje.forEach(t),hho=r(z9," (BigBird model)"),z9.forEach(t),uho=i(L),hg=n(L,"LI",{});var Q9=s(hg);nue=n(Q9,"STRONG",{});var Uje=s(nue);pho=r(Uje,"bigbird_pegasus"),Uje.forEach(t),_ho=r(Q9," \u2014 "),sj=n(Q9,"A",{href:!0});var Hje=s(sj);bho=r(Hje,"BigBirdPegasusConfig"),Hje.forEach(t),vho=r(Q9," (BigBird-Pegasus model)"),Q9.forEach(t),Fho=i(L),ug=n(L,"LI",{});var W9=s(ug);sue=n(W9,"STRONG",{});var Jje=s(sue);Tho=r(Jje,"blenderbot"),Jje.forEach(t),Mho=r(W9," \u2014 "),lj=n(W9,"A",{href:!0});var Yje=s(lj);Eho=r(Yje,"BlenderbotConfig"),Yje.forEach(t),Cho=r(W9," (Blenderbot model)"),W9.forEach(t),who=i(L),pg=n(L,"LI",{});var U9=s(pg);lue=n(U9,"STRONG",{});var Zje=s(lue);Aho=r(Zje,"blenderbot-small"),Zje.forEach(t),Lho=r(U9," \u2014 "),ij=n(U9,"A",{href:!0});var Kje=s(ij);yho=r(Kje,"BlenderbotSmallConfig"),Kje.forEach(t),xho=r(U9," (BlenderbotSmall model)"),U9.forEach(t),$ho=i(L),_g=n(L,"LI",{});var H9=s(_g);iue=n(H9,"STRONG",{});var eDe=s(iue);kho=r(eDe,"bloom"),eDe.forEach(t),Sho=r(H9," \u2014 "),dj=n(H9,"A",{href:!0});var oDe=s(dj);Rho=r(oDe,"BloomConfig"),oDe.forEach(t),Pho=r(H9," (BLOOM model)"),H9.forEach(t),Bho=i(L),bg=n(L,"LI",{});var J9=s(bg);due=n(J9,"STRONG",{});var rDe=s(due);Iho=r(rDe,"camembert"),rDe.forEach(t),Nho=r(J9," \u2014 "),mj=n(J9,"A",{href:!0});var tDe=s(mj);qho=r(tDe,"CamembertConfig"),tDe.forEach(t),jho=r(J9," (CamemBERT model)"),J9.forEach(t),Dho=i(L),vg=n(L,"LI",{});var Y9=s(vg);mue=n(Y9,"STRONG",{});var aDe=s(mue);Gho=r(aDe,"canine"),aDe.forEach(t),Oho=r(Y9," \u2014 "),cj=n(Y9,"A",{href:!0});var nDe=s(cj);Vho=r(nDe,"CanineConfig"),nDe.forEach(t),Xho=r(Y9," (CANINE model)"),Y9.forEach(t),zho=i(L),Fg=n(L,"LI",{});var Z9=s(Fg);cue=n(Z9,"STRONG",{});var sDe=s(cue);Qho=r(sDe,"clip"),sDe.forEach(t),Who=r(Z9," \u2014 "),fj=n(Z9,"A",{href:!0});var lDe=s(fj);Uho=r(lDe,"CLIPConfig"),lDe.forEach(t),Hho=r(Z9," (CLIP model)"),Z9.forEach(t),Jho=i(L),Tg=n(L,"LI",{});var K9=s(Tg);fue=n(K9,"STRONG",{});var iDe=s(fue);Yho=r(iDe,"clipseg"),iDe.forEach(t),Zho=r(K9," \u2014 "),gj=n(K9,"A",{href:!0});var dDe=s(gj);Kho=r(dDe,"CLIPSegConfig"),dDe.forEach(t),euo=r(K9," (CLIPSeg model)"),K9.forEach(t),ouo=i(L),Mg=n(L,"LI",{});var ex=s(Mg);gue=n(ex,"STRONG",{});var mDe=s(gue);ruo=r(mDe,"codegen"),mDe.forEach(t),tuo=r(ex," \u2014 "),hj=n(ex,"A",{href:!0});var cDe=s(hj);auo=r(cDe,"CodeGenConfig"),cDe.forEach(t),nuo=r(ex," (CodeGen model)"),ex.forEach(t),suo=i(L),Eg=n(L,"LI",{});var ox=s(Eg);hue=n(ox,"STRONG",{});var fDe=s(hue);luo=r(fDe,"conditional_detr"),fDe.forEach(t),iuo=r(ox," \u2014 "),uj=n(ox,"A",{href:!0});var gDe=s(uj);duo=r(gDe,"ConditionalDetrConfig"),gDe.forEach(t),muo=r(ox," (Conditional DETR model)"),ox.forEach(t),cuo=i(L),Cg=n(L,"LI",{});var rx=s(Cg);uue=n(rx,"STRONG",{});var hDe=s(uue);fuo=r(hDe,"convbert"),hDe.forEach(t),guo=r(rx," \u2014 "),pj=n(rx,"A",{href:!0});var uDe=s(pj);huo=r(uDe,"ConvBertConfig"),uDe.forEach(t),uuo=r(rx," (ConvBERT model)"),rx.forEach(t),puo=i(L),wg=n(L,"LI",{});var tx=s(wg);pue=n(tx,"STRONG",{});var pDe=s(pue);_uo=r(pDe,"convnext"),pDe.forEach(t),buo=r(tx," \u2014 "),_j=n(tx,"A",{href:!0});var _De=s(_j);vuo=r(_De,"ConvNextConfig"),_De.forEach(t),Fuo=r(tx," (ConvNeXT model)"),tx.forEach(t),Tuo=i(L),Ag=n(L,"LI",{});var ax=s(Ag);_ue=n(ax,"STRONG",{});var bDe=s(_ue);Muo=r(bDe,"ctrl"),bDe.forEach(t),Euo=r(ax," \u2014 "),bj=n(ax,"A",{href:!0});var vDe=s(bj);Cuo=r(vDe,"CTRLConfig"),vDe.forEach(t),wuo=r(ax," (CTRL model)"),ax.forEach(t),Auo=i(L),Lg=n(L,"LI",{});var nx=s(Lg);bue=n(nx,"STRONG",{});var FDe=s(bue);Luo=r(FDe,"cvt"),FDe.forEach(t),yuo=r(nx," \u2014 "),vj=n(nx,"A",{href:!0});var TDe=s(vj);xuo=r(TDe,"CvtConfig"),TDe.forEach(t),$uo=r(nx," (CvT model)"),nx.forEach(t),kuo=i(L),yg=n(L,"LI",{});var sx=s(yg);vue=n(sx,"STRONG",{});var MDe=s(vue);Suo=r(MDe,"data2vec-audio"),MDe.forEach(t),Ruo=r(sx," \u2014 "),Fj=n(sx,"A",{href:!0});var EDe=s(Fj);Puo=r(EDe,"Data2VecAudioConfig"),EDe.forEach(t),Buo=r(sx," (Data2VecAudio model)"),sx.forEach(t),Iuo=i(L),xg=n(L,"LI",{});var lx=s(xg);Fue=n(lx,"STRONG",{});var CDe=s(Fue);Nuo=r(CDe,"data2vec-text"),CDe.forEach(t),quo=r(lx," \u2014 "),Tj=n(lx,"A",{href:!0});var wDe=s(Tj);juo=r(wDe,"Data2VecTextConfig"),wDe.forEach(t),Duo=r(lx," (Data2VecText model)"),lx.forEach(t),Guo=i(L),$g=n(L,"LI",{});var ix=s($g);Tue=n(ix,"STRONG",{});var ADe=s(Tue);Ouo=r(ADe,"data2vec-vision"),ADe.forEach(t),Vuo=r(ix," \u2014 "),Mj=n(ix,"A",{href:!0});var LDe=s(Mj);Xuo=r(LDe,"Data2VecVisionConfig"),LDe.forEach(t),zuo=r(ix," (Data2VecVision model)"),ix.forEach(t),Quo=i(L),kg=n(L,"LI",{});var dx=s(kg);Mue=n(dx,"STRONG",{});var yDe=s(Mue);Wuo=r(yDe,"deberta"),yDe.forEach(t),Uuo=r(dx," \u2014 "),Ej=n(dx,"A",{href:!0});var xDe=s(Ej);Huo=r(xDe,"DebertaConfig"),xDe.forEach(t),Juo=r(dx," (DeBERTa model)"),dx.forEach(t),Yuo=i(L),Sg=n(L,"LI",{});var mx=s(Sg);Eue=n(mx,"STRONG",{});var $De=s(Eue);Zuo=r($De,"deberta-v2"),$De.forEach(t),Kuo=r(mx," \u2014 "),Cj=n(mx,"A",{href:!0});var kDe=s(Cj);epo=r(kDe,"DebertaV2Config"),kDe.forEach(t),opo=r(mx," (DeBERTa-v2 model)"),mx.forEach(t),rpo=i(L),Rg=n(L,"LI",{});var cx=s(Rg);Cue=n(cx,"STRONG",{});var SDe=s(Cue);tpo=r(SDe,"decision_transformer"),SDe.forEach(t),apo=r(cx," \u2014 "),wj=n(cx,"A",{href:!0});var RDe=s(wj);npo=r(RDe,"DecisionTransformerConfig"),RDe.forEach(t),spo=r(cx," (Decision Transformer model)"),cx.forEach(t),lpo=i(L),Pg=n(L,"LI",{});var fx=s(Pg);wue=n(fx,"STRONG",{});var PDe=s(wue);ipo=r(PDe,"deformable_detr"),PDe.forEach(t),dpo=r(fx," \u2014 "),Aj=n(fx,"A",{href:!0});var BDe=s(Aj);mpo=r(BDe,"DeformableDetrConfig"),BDe.forEach(t),cpo=r(fx," (Deformable DETR model)"),fx.forEach(t),fpo=i(L),Bg=n(L,"LI",{});var gx=s(Bg);Aue=n(gx,"STRONG",{});var IDe=s(Aue);gpo=r(IDe,"deit"),IDe.forEach(t),hpo=r(gx," \u2014 "),Lj=n(gx,"A",{href:!0});var NDe=s(Lj);upo=r(NDe,"DeiTConfig"),NDe.forEach(t),ppo=r(gx," (DeiT model)"),gx.forEach(t),_po=i(L),Ig=n(L,"LI",{});var qDe=s(Ig);Lue=n(qDe,"STRONG",{});var qRt=s(Lue);bpo=r(qRt,"detr"),qRt.forEach(t),vpo=r(qDe," \u2014 "),yj=n(qDe,"A",{href:!0});var jRt=s(yj);Fpo=r(jRt,"DetrConfig"),jRt.forEach(t),Tpo=r(qDe," (DETR model)"),qDe.forEach(t),Mpo=i(L),Ng=n(L,"LI",{});var jDe=s(Ng);yue=n(jDe,"STRONG",{});var DRt=s(yue);Epo=r(DRt,"distilbert"),DRt.forEach(t),Cpo=r(jDe," \u2014 "),xj=n(jDe,"A",{href:!0});var GRt=s(xj);wpo=r(GRt,"DistilBertConfig"),GRt.forEach(t),Apo=r(jDe," (DistilBERT model)"),jDe.forEach(t),Lpo=i(L),qg=n(L,"LI",{});var DDe=s(qg);xue=n(DDe,"STRONG",{});var ORt=s(xue);ypo=r(ORt,"donut-swin"),ORt.forEach(t),xpo=r(DDe," \u2014 "),$j=n(DDe,"A",{href:!0});var VRt=s($j);$po=r(VRt,"DonutSwinConfig"),VRt.forEach(t),kpo=r(DDe," (DonutSwin model)"),DDe.forEach(t),Spo=i(L),jg=n(L,"LI",{});var GDe=s(jg);$ue=n(GDe,"STRONG",{});var XRt=s($ue);Rpo=r(XRt,"dpr"),XRt.forEach(t),Ppo=r(GDe," \u2014 "),kj=n(GDe,"A",{href:!0});var zRt=s(kj);Bpo=r(zRt,"DPRConfig"),zRt.forEach(t),Ipo=r(GDe," (DPR model)"),GDe.forEach(t),Npo=i(L),Dg=n(L,"LI",{});var ODe=s(Dg);kue=n(ODe,"STRONG",{});var QRt=s(kue);qpo=r(QRt,"dpt"),QRt.forEach(t),jpo=r(ODe," \u2014 "),Sj=n(ODe,"A",{href:!0});var WRt=s(Sj);Dpo=r(WRt,"DPTConfig"),WRt.forEach(t),Gpo=r(ODe," (DPT model)"),ODe.forEach(t),Opo=i(L),Gg=n(L,"LI",{});var VDe=s(Gg);Sue=n(VDe,"STRONG",{});var URt=s(Sue);Vpo=r(URt,"electra"),URt.forEach(t),Xpo=r(VDe," \u2014 "),Rj=n(VDe,"A",{href:!0});var HRt=s(Rj);zpo=r(HRt,"ElectraConfig"),HRt.forEach(t),Qpo=r(VDe," (ELECTRA model)"),VDe.forEach(t),Wpo=i(L),Og=n(L,"LI",{});var XDe=s(Og);Rue=n(XDe,"STRONG",{});var JRt=s(Rue);Upo=r(JRt,"encoder-decoder"),JRt.forEach(t),Hpo=r(XDe," \u2014 "),Pj=n(XDe,"A",{href:!0});var YRt=s(Pj);Jpo=r(YRt,"EncoderDecoderConfig"),YRt.forEach(t),Ypo=r(XDe," (Encoder decoder model)"),XDe.forEach(t),Zpo=i(L),Vg=n(L,"LI",{});var zDe=s(Vg);Pue=n(zDe,"STRONG",{});var ZRt=s(Pue);Kpo=r(ZRt,"ernie"),ZRt.forEach(t),e_o=r(zDe," \u2014 "),Bj=n(zDe,"A",{href:!0});var KRt=s(Bj);o_o=r(KRt,"ErnieConfig"),KRt.forEach(t),r_o=r(zDe," (ERNIE model)"),zDe.forEach(t),t_o=i(L),Xg=n(L,"LI",{});var QDe=s(Xg);Bue=n(QDe,"STRONG",{});var ePt=s(Bue);a_o=r(ePt,"esm"),ePt.forEach(t),n_o=r(QDe," \u2014 "),Ij=n(QDe,"A",{href:!0});var oPt=s(Ij);s_o=r(oPt,"EsmConfig"),oPt.forEach(t),l_o=r(QDe," (ESM model)"),QDe.forEach(t),i_o=i(L),zg=n(L,"LI",{});var WDe=s(zg);Iue=n(WDe,"STRONG",{});var rPt=s(Iue);d_o=r(rPt,"flaubert"),rPt.forEach(t),m_o=r(WDe," \u2014 "),Nj=n(WDe,"A",{href:!0});var tPt=s(Nj);c_o=r(tPt,"FlaubertConfig"),tPt.forEach(t),f_o=r(WDe," (FlauBERT model)"),WDe.forEach(t),g_o=i(L),Qg=n(L,"LI",{});var UDe=s(Qg);Nue=n(UDe,"STRONG",{});var aPt=s(Nue);h_o=r(aPt,"flava"),aPt.forEach(t),u_o=r(UDe," \u2014 "),qj=n(UDe,"A",{href:!0});var nPt=s(qj);p_o=r(nPt,"FlavaConfig"),nPt.forEach(t),__o=r(UDe," (FLAVA model)"),UDe.forEach(t),b_o=i(L),Wg=n(L,"LI",{});var HDe=s(Wg);que=n(HDe,"STRONG",{});var sPt=s(que);v_o=r(sPt,"fnet"),sPt.forEach(t),F_o=r(HDe," \u2014 "),jj=n(HDe,"A",{href:!0});var lPt=s(jj);T_o=r(lPt,"FNetConfig"),lPt.forEach(t),M_o=r(HDe," (FNet model)"),HDe.forEach(t),E_o=i(L),Ug=n(L,"LI",{});var JDe=s(Ug);jue=n(JDe,"STRONG",{});var iPt=s(jue);C_o=r(iPt,"fsmt"),iPt.forEach(t),w_o=r(JDe," \u2014 "),Dj=n(JDe,"A",{href:!0});var dPt=s(Dj);A_o=r(dPt,"FSMTConfig"),dPt.forEach(t),L_o=r(JDe," (FairSeq Machine-Translation model)"),JDe.forEach(t),y_o=i(L),Hg=n(L,"LI",{});var YDe=s(Hg);Due=n(YDe,"STRONG",{});var mPt=s(Due);x_o=r(mPt,"funnel"),mPt.forEach(t),$_o=r(YDe," \u2014 "),Gj=n(YDe,"A",{href:!0});var cPt=s(Gj);k_o=r(cPt,"FunnelConfig"),cPt.forEach(t),S_o=r(YDe," (Funnel Transformer model)"),YDe.forEach(t),R_o=i(L),Jg=n(L,"LI",{});var ZDe=s(Jg);Gue=n(ZDe,"STRONG",{});var fPt=s(Gue);P_o=r(fPt,"glpn"),fPt.forEach(t),B_o=r(ZDe," \u2014 "),Oj=n(ZDe,"A",{href:!0});var gPt=s(Oj);I_o=r(gPt,"GLPNConfig"),gPt.forEach(t),N_o=r(ZDe," (GLPN model)"),ZDe.forEach(t),q_o=i(L),Yg=n(L,"LI",{});var KDe=s(Yg);Oue=n(KDe,"STRONG",{});var hPt=s(Oue);j_o=r(hPt,"gpt2"),hPt.forEach(t),D_o=r(KDe," \u2014 "),Vj=n(KDe,"A",{href:!0});var uPt=s(Vj);G_o=r(uPt,"GPT2Config"),uPt.forEach(t),O_o=r(KDe," (OpenAI GPT-2 model)"),KDe.forEach(t),V_o=i(L),Zg=n(L,"LI",{});var eGe=s(Zg);Vue=n(eGe,"STRONG",{});var pPt=s(Vue);X_o=r(pPt,"gpt_neo"),pPt.forEach(t),z_o=r(eGe," \u2014 "),Xj=n(eGe,"A",{href:!0});var _Pt=s(Xj);Q_o=r(_Pt,"GPTNeoConfig"),_Pt.forEach(t),W_o=r(eGe," (GPT Neo model)"),eGe.forEach(t),U_o=i(L),Kg=n(L,"LI",{});var oGe=s(Kg);Xue=n(oGe,"STRONG",{});var bPt=s(Xue);H_o=r(bPt,"gpt_neox"),bPt.forEach(t),J_o=r(oGe," \u2014 "),zj=n(oGe,"A",{href:!0});var vPt=s(zj);Y_o=r(vPt,"GPTNeoXConfig"),vPt.forEach(t),Z_o=r(oGe," (GPT NeoX model)"),oGe.forEach(t),K_o=i(L),eh=n(L,"LI",{});var rGe=s(eh);zue=n(rGe,"STRONG",{});var FPt=s(zue);e1o=r(FPt,"gpt_neox_japanese"),FPt.forEach(t),o1o=r(rGe," \u2014 "),Qj=n(rGe,"A",{href:!0});var TPt=s(Qj);r1o=r(TPt,"GPTNeoXJapaneseConfig"),TPt.forEach(t),t1o=r(rGe," (GPT NeoX Japanese model)"),rGe.forEach(t),a1o=i(L),oh=n(L,"LI",{});var tGe=s(oh);Que=n(tGe,"STRONG",{});var MPt=s(Que);n1o=r(MPt,"gptj"),MPt.forEach(t),s1o=r(tGe," \u2014 "),Wj=n(tGe,"A",{href:!0});var EPt=s(Wj);l1o=r(EPt,"GPTJConfig"),EPt.forEach(t),i1o=r(tGe," (GPT-J model)"),tGe.forEach(t),d1o=i(L),rh=n(L,"LI",{});var aGe=s(rh);Wue=n(aGe,"STRONG",{});var CPt=s(Wue);m1o=r(CPt,"groupvit"),CPt.forEach(t),c1o=r(aGe," \u2014 "),Uj=n(aGe,"A",{href:!0});var wPt=s(Uj);f1o=r(wPt,"GroupViTConfig"),wPt.forEach(t),g1o=r(aGe," (GroupViT model)"),aGe.forEach(t),h1o=i(L),th=n(L,"LI",{});var nGe=s(th);Uue=n(nGe,"STRONG",{});var APt=s(Uue);u1o=r(APt,"hubert"),APt.forEach(t),p1o=r(nGe," \u2014 "),Hj=n(nGe,"A",{href:!0});var LPt=s(Hj);_1o=r(LPt,"HubertConfig"),LPt.forEach(t),b1o=r(nGe," (Hubert model)"),nGe.forEach(t),v1o=i(L),ah=n(L,"LI",{});var sGe=s(ah);Hue=n(sGe,"STRONG",{});var yPt=s(Hue);F1o=r(yPt,"ibert"),yPt.forEach(t),T1o=r(sGe," \u2014 "),Jj=n(sGe,"A",{href:!0});var xPt=s(Jj);M1o=r(xPt,"IBertConfig"),xPt.forEach(t),E1o=r(sGe," (I-BERT model)"),sGe.forEach(t),C1o=i(L),nh=n(L,"LI",{});var lGe=s(nh);Jue=n(lGe,"STRONG",{});var $Pt=s(Jue);w1o=r($Pt,"imagegpt"),$Pt.forEach(t),A1o=r(lGe," \u2014 "),Yj=n(lGe,"A",{href:!0});var kPt=s(Yj);L1o=r(kPt,"ImageGPTConfig"),kPt.forEach(t),y1o=r(lGe," (ImageGPT model)"),lGe.forEach(t),x1o=i(L),sh=n(L,"LI",{});var iGe=s(sh);Yue=n(iGe,"STRONG",{});var SPt=s(Yue);$1o=r(SPt,"jukebox"),SPt.forEach(t),k1o=r(iGe," \u2014 "),Zj=n(iGe,"A",{href:!0});var RPt=s(Zj);S1o=r(RPt,"JukeboxConfig"),RPt.forEach(t),R1o=r(iGe," (Jukebox model)"),iGe.forEach(t),P1o=i(L),lh=n(L,"LI",{});var dGe=s(lh);Zue=n(dGe,"STRONG",{});var PPt=s(Zue);B1o=r(PPt,"layoutlm"),PPt.forEach(t),I1o=r(dGe," \u2014 "),Kj=n(dGe,"A",{href:!0});var BPt=s(Kj);N1o=r(BPt,"LayoutLMConfig"),BPt.forEach(t),q1o=r(dGe," (LayoutLM model)"),dGe.forEach(t),j1o=i(L),ih=n(L,"LI",{});var mGe=s(ih);Kue=n(mGe,"STRONG",{});var IPt=s(Kue);D1o=r(IPt,"layoutlmv2"),IPt.forEach(t),G1o=r(mGe," \u2014 "),eD=n(mGe,"A",{href:!0});var NPt=s(eD);O1o=r(NPt,"LayoutLMv2Config"),NPt.forEach(t),V1o=r(mGe," (LayoutLMv2 model)"),mGe.forEach(t),X1o=i(L),dh=n(L,"LI",{});var cGe=s(dh);epe=n(cGe,"STRONG",{});var qPt=s(epe);z1o=r(qPt,"layoutlmv3"),qPt.forEach(t),Q1o=r(cGe," \u2014 "),oD=n(cGe,"A",{href:!0});var jPt=s(oD);W1o=r(jPt,"LayoutLMv3Config"),jPt.forEach(t),U1o=r(cGe," (LayoutLMv3 model)"),cGe.forEach(t),H1o=i(L),mh=n(L,"LI",{});var fGe=s(mh);ope=n(fGe,"STRONG",{});var DPt=s(ope);J1o=r(DPt,"led"),DPt.forEach(t),Y1o=r(fGe," \u2014 "),rD=n(fGe,"A",{href:!0});var GPt=s(rD);Z1o=r(GPt,"LEDConfig"),GPt.forEach(t),K1o=r(fGe," (LED model)"),fGe.forEach(t),e2o=i(L),ch=n(L,"LI",{});var gGe=s(ch);rpe=n(gGe,"STRONG",{});var OPt=s(rpe);o2o=r(OPt,"levit"),OPt.forEach(t),r2o=r(gGe," \u2014 "),tD=n(gGe,"A",{href:!0});var VPt=s(tD);t2o=r(VPt,"LevitConfig"),VPt.forEach(t),a2o=r(gGe," (LeViT model)"),gGe.forEach(t),n2o=i(L),fh=n(L,"LI",{});var hGe=s(fh);tpe=n(hGe,"STRONG",{});var XPt=s(tpe);s2o=r(XPt,"lilt"),XPt.forEach(t),l2o=r(hGe," \u2014 "),aD=n(hGe,"A",{href:!0});var zPt=s(aD);i2o=r(zPt,"LiltConfig"),zPt.forEach(t),d2o=r(hGe," (LiLT model)"),hGe.forEach(t),m2o=i(L),gh=n(L,"LI",{});var uGe=s(gh);ape=n(uGe,"STRONG",{});var QPt=s(ape);c2o=r(QPt,"longformer"),QPt.forEach(t),f2o=r(uGe," \u2014 "),nD=n(uGe,"A",{href:!0});var WPt=s(nD);g2o=r(WPt,"LongformerConfig"),WPt.forEach(t),h2o=r(uGe," (Longformer model)"),uGe.forEach(t),u2o=i(L),hh=n(L,"LI",{});var pGe=s(hh);npe=n(pGe,"STRONG",{});var UPt=s(npe);p2o=r(UPt,"longt5"),UPt.forEach(t),_2o=r(pGe," \u2014 "),sD=n(pGe,"A",{href:!0});var HPt=s(sD);b2o=r(HPt,"LongT5Config"),HPt.forEach(t),v2o=r(pGe," (LongT5 model)"),pGe.forEach(t),F2o=i(L),uh=n(L,"LI",{});var _Ge=s(uh);spe=n(_Ge,"STRONG",{});var JPt=s(spe);T2o=r(JPt,"luke"),JPt.forEach(t),M2o=r(_Ge," \u2014 "),lD=n(_Ge,"A",{href:!0});var YPt=s(lD);E2o=r(YPt,"LukeConfig"),YPt.forEach(t),C2o=r(_Ge," (LUKE model)"),_Ge.forEach(t),w2o=i(L),ph=n(L,"LI",{});var bGe=s(ph);lpe=n(bGe,"STRONG",{});var ZPt=s(lpe);A2o=r(ZPt,"lxmert"),ZPt.forEach(t),L2o=r(bGe," \u2014 "),iD=n(bGe,"A",{href:!0});var KPt=s(iD);y2o=r(KPt,"LxmertConfig"),KPt.forEach(t),x2o=r(bGe," (LXMERT model)"),bGe.forEach(t),$2o=i(L),_h=n(L,"LI",{});var vGe=s(_h);ipe=n(vGe,"STRONG",{});var eBt=s(ipe);k2o=r(eBt,"m2m_100"),eBt.forEach(t),S2o=r(vGe," \u2014 "),dD=n(vGe,"A",{href:!0});var oBt=s(dD);R2o=r(oBt,"M2M100Config"),oBt.forEach(t),P2o=r(vGe," (M2M100 model)"),vGe.forEach(t),B2o=i(L),bh=n(L,"LI",{});var FGe=s(bh);dpe=n(FGe,"STRONG",{});var rBt=s(dpe);I2o=r(rBt,"marian"),rBt.forEach(t),N2o=r(FGe," \u2014 "),mD=n(FGe,"A",{href:!0});var tBt=s(mD);q2o=r(tBt,"MarianConfig"),tBt.forEach(t),j2o=r(FGe," (Marian model)"),FGe.forEach(t),D2o=i(L),vh=n(L,"LI",{});var TGe=s(vh);mpe=n(TGe,"STRONG",{});var aBt=s(mpe);G2o=r(aBt,"markuplm"),aBt.forEach(t),O2o=r(TGe," \u2014 "),cD=n(TGe,"A",{href:!0});var nBt=s(cD);V2o=r(nBt,"MarkupLMConfig"),nBt.forEach(t),X2o=r(TGe," (MarkupLM model)"),TGe.forEach(t),z2o=i(L),Fh=n(L,"LI",{});var MGe=s(Fh);cpe=n(MGe,"STRONG",{});var sBt=s(cpe);Q2o=r(sBt,"maskformer"),sBt.forEach(t),W2o=r(MGe," \u2014 "),fD=n(MGe,"A",{href:!0});var lBt=s(fD);U2o=r(lBt,"MaskFormerConfig"),lBt.forEach(t),H2o=r(MGe," (MaskFormer model)"),MGe.forEach(t),J2o=i(L),Th=n(L,"LI",{});var EGe=s(Th);fpe=n(EGe,"STRONG",{});var iBt=s(fpe);Y2o=r(iBt,"mbart"),iBt.forEach(t),Z2o=r(EGe," \u2014 "),gD=n(EGe,"A",{href:!0});var dBt=s(gD);K2o=r(dBt,"MBartConfig"),dBt.forEach(t),ebo=r(EGe," (mBART model)"),EGe.forEach(t),obo=i(L),Mh=n(L,"LI",{});var CGe=s(Mh);gpe=n(CGe,"STRONG",{});var mBt=s(gpe);rbo=r(mBt,"mctct"),mBt.forEach(t),tbo=r(CGe," \u2014 "),hD=n(CGe,"A",{href:!0});var cBt=s(hD);abo=r(cBt,"MCTCTConfig"),cBt.forEach(t),nbo=r(CGe," (M-CTC-T model)"),CGe.forEach(t),sbo=i(L),Eh=n(L,"LI",{});var wGe=s(Eh);hpe=n(wGe,"STRONG",{});var fBt=s(hpe);lbo=r(fBt,"megatron-bert"),fBt.forEach(t),ibo=r(wGe," \u2014 "),uD=n(wGe,"A",{href:!0});var gBt=s(uD);dbo=r(gBt,"MegatronBertConfig"),gBt.forEach(t),mbo=r(wGe," (Megatron-BERT model)"),wGe.forEach(t),cbo=i(L),Ch=n(L,"LI",{});var AGe=s(Ch);upe=n(AGe,"STRONG",{});var hBt=s(upe);fbo=r(hBt,"mobilebert"),hBt.forEach(t),gbo=r(AGe," \u2014 "),pD=n(AGe,"A",{href:!0});var uBt=s(pD);hbo=r(uBt,"MobileBertConfig"),uBt.forEach(t),ubo=r(AGe," (MobileBERT model)"),AGe.forEach(t),pbo=i(L),wh=n(L,"LI",{});var LGe=s(wh);ppe=n(LGe,"STRONG",{});var pBt=s(ppe);_bo=r(pBt,"mobilenet_v2"),pBt.forEach(t),bbo=r(LGe," \u2014 "),_D=n(LGe,"A",{href:!0});var _Bt=s(_D);vbo=r(_Bt,"MobileNetV2Config"),_Bt.forEach(t),Fbo=r(LGe," (MobileNetV2 model)"),LGe.forEach(t),Tbo=i(L),Ah=n(L,"LI",{});var yGe=s(Ah);_pe=n(yGe,"STRONG",{});var bBt=s(_pe);Mbo=r(bBt,"mobilevit"),bBt.forEach(t),Ebo=r(yGe," \u2014 "),bD=n(yGe,"A",{href:!0});var vBt=s(bD);Cbo=r(vBt,"MobileViTConfig"),vBt.forEach(t),wbo=r(yGe," (MobileViT model)"),yGe.forEach(t),Abo=i(L),Lh=n(L,"LI",{});var xGe=s(Lh);bpe=n(xGe,"STRONG",{});var FBt=s(bpe);Lbo=r(FBt,"mpnet"),FBt.forEach(t),ybo=r(xGe," \u2014 "),vD=n(xGe,"A",{href:!0});var TBt=s(vD);xbo=r(TBt,"MPNetConfig"),TBt.forEach(t),$bo=r(xGe," (MPNet model)"),xGe.forEach(t),kbo=i(L),yh=n(L,"LI",{});var $Ge=s(yh);vpe=n($Ge,"STRONG",{});var MBt=s(vpe);Sbo=r(MBt,"mt5"),MBt.forEach(t),Rbo=r($Ge," \u2014 "),FD=n($Ge,"A",{href:!0});var EBt=s(FD);Pbo=r(EBt,"MT5Config"),EBt.forEach(t),Bbo=r($Ge," (MT5 model)"),$Ge.forEach(t),Ibo=i(L),xh=n(L,"LI",{});var kGe=s(xh);Fpe=n(kGe,"STRONG",{});var CBt=s(Fpe);Nbo=r(CBt,"mvp"),CBt.forEach(t),qbo=r(kGe," \u2014 "),TD=n(kGe,"A",{href:!0});var wBt=s(TD);jbo=r(wBt,"MvpConfig"),wBt.forEach(t),Dbo=r(kGe," (MVP model)"),kGe.forEach(t),Gbo=i(L),$h=n(L,"LI",{});var SGe=s($h);Tpe=n(SGe,"STRONG",{});var ABt=s(Tpe);Obo=r(ABt,"nezha"),ABt.forEach(t),Vbo=r(SGe," \u2014 "),MD=n(SGe,"A",{href:!0});var LBt=s(MD);Xbo=r(LBt,"NezhaConfig"),LBt.forEach(t),zbo=r(SGe," (Nezha model)"),SGe.forEach(t),Qbo=i(L),kh=n(L,"LI",{});var RGe=s(kh);Mpe=n(RGe,"STRONG",{});var yBt=s(Mpe);Wbo=r(yBt,"nystromformer"),yBt.forEach(t),Ubo=r(RGe," \u2014 "),ED=n(RGe,"A",{href:!0});var xBt=s(ED);Hbo=r(xBt,"NystromformerConfig"),xBt.forEach(t),Jbo=r(RGe," (Nystr\xF6mformer model)"),RGe.forEach(t),Ybo=i(L),Sh=n(L,"LI",{});var PGe=s(Sh);Epe=n(PGe,"STRONG",{});var $Bt=s(Epe);Zbo=r($Bt,"openai-gpt"),$Bt.forEach(t),Kbo=r(PGe," \u2014 "),CD=n(PGe,"A",{href:!0});var kBt=s(CD);evo=r(kBt,"OpenAIGPTConfig"),kBt.forEach(t),ovo=r(PGe," (OpenAI GPT model)"),PGe.forEach(t),rvo=i(L),Rh=n(L,"LI",{});var BGe=s(Rh);Cpe=n(BGe,"STRONG",{});var SBt=s(Cpe);tvo=r(SBt,"opt"),SBt.forEach(t),avo=r(BGe," \u2014 "),wD=n(BGe,"A",{href:!0});var RBt=s(wD);nvo=r(RBt,"OPTConfig"),RBt.forEach(t),svo=r(BGe," (OPT model)"),BGe.forEach(t),lvo=i(L),Ph=n(L,"LI",{});var IGe=s(Ph);wpe=n(IGe,"STRONG",{});var PBt=s(wpe);ivo=r(PBt,"owlvit"),PBt.forEach(t),dvo=r(IGe," \u2014 "),AD=n(IGe,"A",{href:!0});var BBt=s(AD);mvo=r(BBt,"OwlViTConfig"),BBt.forEach(t),cvo=r(IGe," (OWL-ViT model)"),IGe.forEach(t),fvo=i(L),Bh=n(L,"LI",{});var NGe=s(Bh);Ape=n(NGe,"STRONG",{});var IBt=s(Ape);gvo=r(IBt,"pegasus"),IBt.forEach(t),hvo=r(NGe," \u2014 "),LD=n(NGe,"A",{href:!0});var NBt=s(LD);uvo=r(NBt,"PegasusConfig"),NBt.forEach(t),pvo=r(NGe," (Pegasus model)"),NGe.forEach(t),_vo=i(L),Ih=n(L,"LI",{});var qGe=s(Ih);Lpe=n(qGe,"STRONG",{});var qBt=s(Lpe);bvo=r(qBt,"pegasus_x"),qBt.forEach(t),vvo=r(qGe," \u2014 "),yD=n(qGe,"A",{href:!0});var jBt=s(yD);Fvo=r(jBt,"PegasusXConfig"),jBt.forEach(t),Tvo=r(qGe," (PEGASUS-X model)"),qGe.forEach(t),Mvo=i(L),Nh=n(L,"LI",{});var jGe=s(Nh);ype=n(jGe,"STRONG",{});var DBt=s(ype);Evo=r(DBt,"perceiver"),DBt.forEach(t),Cvo=r(jGe," \u2014 "),xD=n(jGe,"A",{href:!0});var GBt=s(xD);wvo=r(GBt,"PerceiverConfig"),GBt.forEach(t),Avo=r(jGe," (Perceiver model)"),jGe.forEach(t),Lvo=i(L),qh=n(L,"LI",{});var DGe=s(qh);xpe=n(DGe,"STRONG",{});var OBt=s(xpe);yvo=r(OBt,"plbart"),OBt.forEach(t),xvo=r(DGe," \u2014 "),$D=n(DGe,"A",{href:!0});var VBt=s($D);$vo=r(VBt,"PLBartConfig"),VBt.forEach(t),kvo=r(DGe," (PLBart model)"),DGe.forEach(t),Svo=i(L),jh=n(L,"LI",{});var GGe=s(jh);$pe=n(GGe,"STRONG",{});var XBt=s($pe);Rvo=r(XBt,"poolformer"),XBt.forEach(t),Pvo=r(GGe," \u2014 "),kD=n(GGe,"A",{href:!0});var zBt=s(kD);Bvo=r(zBt,"PoolFormerConfig"),zBt.forEach(t),Ivo=r(GGe," (PoolFormer model)"),GGe.forEach(t),Nvo=i(L),Dh=n(L,"LI",{});var OGe=s(Dh);kpe=n(OGe,"STRONG",{});var QBt=s(kpe);qvo=r(QBt,"prophetnet"),QBt.forEach(t),jvo=r(OGe," \u2014 "),SD=n(OGe,"A",{href:!0});var WBt=s(SD);Dvo=r(WBt,"ProphetNetConfig"),WBt.forEach(t),Gvo=r(OGe," (ProphetNet model)"),OGe.forEach(t),Ovo=i(L),Gh=n(L,"LI",{});var VGe=s(Gh);Spe=n(VGe,"STRONG",{});var UBt=s(Spe);Vvo=r(UBt,"qdqbert"),UBt.forEach(t),Xvo=r(VGe," \u2014 "),RD=n(VGe,"A",{href:!0});var HBt=s(RD);zvo=r(HBt,"QDQBertConfig"),HBt.forEach(t),Qvo=r(VGe," (QDQBert model)"),VGe.forEach(t),Wvo=i(L),Oh=n(L,"LI",{});var XGe=s(Oh);Rpe=n(XGe,"STRONG",{});var JBt=s(Rpe);Uvo=r(JBt,"rag"),JBt.forEach(t),Hvo=r(XGe," \u2014 "),PD=n(XGe,"A",{href:!0});var YBt=s(PD);Jvo=r(YBt,"RagConfig"),YBt.forEach(t),Yvo=r(XGe," (RAG model)"),XGe.forEach(t),Zvo=i(L),Vh=n(L,"LI",{});var zGe=s(Vh);Ppe=n(zGe,"STRONG",{});var ZBt=s(Ppe);Kvo=r(ZBt,"realm"),ZBt.forEach(t),eFo=r(zGe," \u2014 "),BD=n(zGe,"A",{href:!0});var KBt=s(BD);oFo=r(KBt,"RealmConfig"),KBt.forEach(t),rFo=r(zGe," (REALM model)"),zGe.forEach(t),tFo=i(L),Xh=n(L,"LI",{});var QGe=s(Xh);Bpe=n(QGe,"STRONG",{});var eIt=s(Bpe);aFo=r(eIt,"reformer"),eIt.forEach(t),nFo=r(QGe," \u2014 "),ID=n(QGe,"A",{href:!0});var oIt=s(ID);sFo=r(oIt,"ReformerConfig"),oIt.forEach(t),lFo=r(QGe," (Reformer model)"),QGe.forEach(t),iFo=i(L),zh=n(L,"LI",{});var WGe=s(zh);Ipe=n(WGe,"STRONG",{});var rIt=s(Ipe);dFo=r(rIt,"regnet"),rIt.forEach(t),mFo=r(WGe," \u2014 "),ND=n(WGe,"A",{href:!0});var tIt=s(ND);cFo=r(tIt,"RegNetConfig"),tIt.forEach(t),fFo=r(WGe," (RegNet model)"),WGe.forEach(t),gFo=i(L),Qh=n(L,"LI",{});var UGe=s(Qh);Npe=n(UGe,"STRONG",{});var aIt=s(Npe);hFo=r(aIt,"rembert"),aIt.forEach(t),uFo=r(UGe," \u2014 "),qD=n(UGe,"A",{href:!0});var nIt=s(qD);pFo=r(nIt,"RemBertConfig"),nIt.forEach(t),_Fo=r(UGe," (RemBERT model)"),UGe.forEach(t),bFo=i(L),Wh=n(L,"LI",{});var HGe=s(Wh);qpe=n(HGe,"STRONG",{});var sIt=s(qpe);vFo=r(sIt,"resnet"),sIt.forEach(t),FFo=r(HGe," \u2014 "),jD=n(HGe,"A",{href:!0});var lIt=s(jD);TFo=r(lIt,"ResNetConfig"),lIt.forEach(t),MFo=r(HGe," (ResNet model)"),HGe.forEach(t),EFo=i(L),Uh=n(L,"LI",{});var JGe=s(Uh);jpe=n(JGe,"STRONG",{});var iIt=s(jpe);CFo=r(iIt,"retribert"),iIt.forEach(t),wFo=r(JGe," \u2014 "),DD=n(JGe,"A",{href:!0});var dIt=s(DD);AFo=r(dIt,"RetriBertConfig"),dIt.forEach(t),LFo=r(JGe," (RetriBERT model)"),JGe.forEach(t),yFo=i(L),Hh=n(L,"LI",{});var YGe=s(Hh);Dpe=n(YGe,"STRONG",{});var mIt=s(Dpe);xFo=r(mIt,"roberta"),mIt.forEach(t),$Fo=r(YGe," \u2014 "),GD=n(YGe,"A",{href:!0});var cIt=s(GD);kFo=r(cIt,"RobertaConfig"),cIt.forEach(t),SFo=r(YGe," (RoBERTa model)"),YGe.forEach(t),RFo=i(L),Jh=n(L,"LI",{});var ZGe=s(Jh);Gpe=n(ZGe,"STRONG",{});var fIt=s(Gpe);PFo=r(fIt,"roc_bert"),fIt.forEach(t),BFo=r(ZGe," \u2014 "),OD=n(ZGe,"A",{href:!0});var gIt=s(OD);IFo=r(gIt,"RoCBertConfig"),gIt.forEach(t),NFo=r(ZGe," (RoCBert model)"),ZGe.forEach(t),qFo=i(L),Yh=n(L,"LI",{});var KGe=s(Yh);Ope=n(KGe,"STRONG",{});var hIt=s(Ope);jFo=r(hIt,"roformer"),hIt.forEach(t),DFo=r(KGe," \u2014 "),VD=n(KGe,"A",{href:!0});var uIt=s(VD);GFo=r(uIt,"RoFormerConfig"),uIt.forEach(t),OFo=r(KGe," (RoFormer model)"),KGe.forEach(t),VFo=i(L),Zh=n(L,"LI",{});var eOe=s(Zh);Vpe=n(eOe,"STRONG",{});var pIt=s(Vpe);XFo=r(pIt,"segformer"),pIt.forEach(t),zFo=r(eOe," \u2014 "),XD=n(eOe,"A",{href:!0});var _It=s(XD);QFo=r(_It,"SegformerConfig"),_It.forEach(t),WFo=r(eOe," (SegFormer model)"),eOe.forEach(t),UFo=i(L),Kh=n(L,"LI",{});var oOe=s(Kh);Xpe=n(oOe,"STRONG",{});var bIt=s(Xpe);HFo=r(bIt,"sew"),bIt.forEach(t),JFo=r(oOe," \u2014 "),zD=n(oOe,"A",{href:!0});var vIt=s(zD);YFo=r(vIt,"SEWConfig"),vIt.forEach(t),ZFo=r(oOe," (SEW model)"),oOe.forEach(t),KFo=i(L),eu=n(L,"LI",{});var rOe=s(eu);zpe=n(rOe,"STRONG",{});var FIt=s(zpe);eTo=r(FIt,"sew-d"),FIt.forEach(t),oTo=r(rOe," \u2014 "),QD=n(rOe,"A",{href:!0});var TIt=s(QD);rTo=r(TIt,"SEWDConfig"),TIt.forEach(t),tTo=r(rOe," (SEW-D model)"),rOe.forEach(t),aTo=i(L),ou=n(L,"LI",{});var tOe=s(ou);Qpe=n(tOe,"STRONG",{});var MIt=s(Qpe);nTo=r(MIt,"speech-encoder-decoder"),MIt.forEach(t),sTo=r(tOe," \u2014 "),WD=n(tOe,"A",{href:!0});var EIt=s(WD);lTo=r(EIt,"SpeechEncoderDecoderConfig"),EIt.forEach(t),iTo=r(tOe," (Speech Encoder decoder model)"),tOe.forEach(t),dTo=i(L),ru=n(L,"LI",{});var aOe=s(ru);Wpe=n(aOe,"STRONG",{});var CIt=s(Wpe);mTo=r(CIt,"speech_to_text"),CIt.forEach(t),cTo=r(aOe," \u2014 "),UD=n(aOe,"A",{href:!0});var wIt=s(UD);fTo=r(wIt,"Speech2TextConfig"),wIt.forEach(t),gTo=r(aOe," (Speech2Text model)"),aOe.forEach(t),hTo=i(L),tu=n(L,"LI",{});var nOe=s(tu);Upe=n(nOe,"STRONG",{});var AIt=s(Upe);uTo=r(AIt,"speech_to_text_2"),AIt.forEach(t),pTo=r(nOe," \u2014 "),HD=n(nOe,"A",{href:!0});var LIt=s(HD);_To=r(LIt,"Speech2Text2Config"),LIt.forEach(t),bTo=r(nOe," (Speech2Text2 model)"),nOe.forEach(t),vTo=i(L),au=n(L,"LI",{});var sOe=s(au);Hpe=n(sOe,"STRONG",{});var yIt=s(Hpe);FTo=r(yIt,"splinter"),yIt.forEach(t),TTo=r(sOe," \u2014 "),JD=n(sOe,"A",{href:!0});var xIt=s(JD);MTo=r(xIt,"SplinterConfig"),xIt.forEach(t),ETo=r(sOe," (Splinter model)"),sOe.forEach(t),CTo=i(L),nu=n(L,"LI",{});var lOe=s(nu);Jpe=n(lOe,"STRONG",{});var $It=s(Jpe);wTo=r($It,"squeezebert"),$It.forEach(t),ATo=r(lOe," \u2014 "),YD=n(lOe,"A",{href:!0});var kIt=s(YD);LTo=r(kIt,"SqueezeBertConfig"),kIt.forEach(t),yTo=r(lOe," (SqueezeBERT model)"),lOe.forEach(t),xTo=i(L),su=n(L,"LI",{});var iOe=s(su);Ype=n(iOe,"STRONG",{});var SIt=s(Ype);$To=r(SIt,"swin"),SIt.forEach(t),kTo=r(iOe," \u2014 "),ZD=n(iOe,"A",{href:!0});var RIt=s(ZD);STo=r(RIt,"SwinConfig"),RIt.forEach(t),RTo=r(iOe," (Swin Transformer model)"),iOe.forEach(t),PTo=i(L),lu=n(L,"LI",{});var dOe=s(lu);Zpe=n(dOe,"STRONG",{});var PIt=s(Zpe);BTo=r(PIt,"swinv2"),PIt.forEach(t),ITo=r(dOe," \u2014 "),KD=n(dOe,"A",{href:!0});var BIt=s(KD);NTo=r(BIt,"Swinv2Config"),BIt.forEach(t),qTo=r(dOe," (Swin Transformer V2 model)"),dOe.forEach(t),jTo=i(L),iu=n(L,"LI",{});var mOe=s(iu);Kpe=n(mOe,"STRONG",{});var IIt=s(Kpe);DTo=r(IIt,"switch_transformers"),IIt.forEach(t),GTo=r(mOe," \u2014 "),eG=n(mOe,"A",{href:!0});var NIt=s(eG);OTo=r(NIt,"SwitchTransformersConfig"),NIt.forEach(t),VTo=r(mOe," (SwitchTransformers model)"),mOe.forEach(t),XTo=i(L),du=n(L,"LI",{});var cOe=s(du);e_e=n(cOe,"STRONG",{});var qIt=s(e_e);zTo=r(qIt,"t5"),qIt.forEach(t),QTo=r(cOe," \u2014 "),oG=n(cOe,"A",{href:!0});var jIt=s(oG);WTo=r(jIt,"T5Config"),jIt.forEach(t),UTo=r(cOe," (T5 model)"),cOe.forEach(t),HTo=i(L),mu=n(L,"LI",{});var fOe=s(mu);o_e=n(fOe,"STRONG",{});var DIt=s(o_e);JTo=r(DIt,"table-transformer"),DIt.forEach(t),YTo=r(fOe," \u2014 "),rG=n(fOe,"A",{href:!0});var GIt=s(rG);ZTo=r(GIt,"TableTransformerConfig"),GIt.forEach(t),KTo=r(fOe," (Table Transformer model)"),fOe.forEach(t),eMo=i(L),cu=n(L,"LI",{});var gOe=s(cu);r_e=n(gOe,"STRONG",{});var OIt=s(r_e);oMo=r(OIt,"tapas"),OIt.forEach(t),rMo=r(gOe," \u2014 "),tG=n(gOe,"A",{href:!0});var VIt=s(tG);tMo=r(VIt,"TapasConfig"),VIt.forEach(t),aMo=r(gOe," (TAPAS model)"),gOe.forEach(t),nMo=i(L),fu=n(L,"LI",{});var hOe=s(fu);t_e=n(hOe,"STRONG",{});var XIt=s(t_e);sMo=r(XIt,"time_series_transformer"),XIt.forEach(t),lMo=r(hOe," \u2014 "),aG=n(hOe,"A",{href:!0});var zIt=s(aG);iMo=r(zIt,"TimeSeriesTransformerConfig"),zIt.forEach(t),dMo=r(hOe," (Time Series Transformer model)"),hOe.forEach(t),mMo=i(L),gu=n(L,"LI",{});var uOe=s(gu);a_e=n(uOe,"STRONG",{});var QIt=s(a_e);cMo=r(QIt,"trajectory_transformer"),QIt.forEach(t),fMo=r(uOe," \u2014 "),nG=n(uOe,"A",{href:!0});var WIt=s(nG);gMo=r(WIt,"TrajectoryTransformerConfig"),WIt.forEach(t),hMo=r(uOe," (Trajectory Transformer model)"),uOe.forEach(t),uMo=i(L),hu=n(L,"LI",{});var pOe=s(hu);n_e=n(pOe,"STRONG",{});var UIt=s(n_e);pMo=r(UIt,"transfo-xl"),UIt.forEach(t),_Mo=r(pOe," \u2014 "),sG=n(pOe,"A",{href:!0});var HIt=s(sG);bMo=r(HIt,"TransfoXLConfig"),HIt.forEach(t),vMo=r(pOe," (Transformer-XL model)"),pOe.forEach(t),FMo=i(L),uu=n(L,"LI",{});var _Oe=s(uu);s_e=n(_Oe,"STRONG",{});var JIt=s(s_e);TMo=r(JIt,"trocr"),JIt.forEach(t),MMo=r(_Oe," \u2014 "),lG=n(_Oe,"A",{href:!0});var YIt=s(lG);EMo=r(YIt,"TrOCRConfig"),YIt.forEach(t),CMo=r(_Oe," (TrOCR model)"),_Oe.forEach(t),wMo=i(L),pu=n(L,"LI",{});var bOe=s(pu);l_e=n(bOe,"STRONG",{});var ZIt=s(l_e);AMo=r(ZIt,"unispeech"),ZIt.forEach(t),LMo=r(bOe," \u2014 "),iG=n(bOe,"A",{href:!0});var KIt=s(iG);yMo=r(KIt,"UniSpeechConfig"),KIt.forEach(t),xMo=r(bOe," (UniSpeech model)"),bOe.forEach(t),$Mo=i(L),_u=n(L,"LI",{});var vOe=s(_u);i_e=n(vOe,"STRONG",{});var eNt=s(i_e);kMo=r(eNt,"unispeech-sat"),eNt.forEach(t),SMo=r(vOe," \u2014 "),dG=n(vOe,"A",{href:!0});var oNt=s(dG);RMo=r(oNt,"UniSpeechSatConfig"),oNt.forEach(t),PMo=r(vOe," (UniSpeechSat model)"),vOe.forEach(t),BMo=i(L),bu=n(L,"LI",{});var FOe=s(bu);d_e=n(FOe,"STRONG",{});var rNt=s(d_e);IMo=r(rNt,"van"),rNt.forEach(t),NMo=r(FOe," \u2014 "),mG=n(FOe,"A",{href:!0});var tNt=s(mG);qMo=r(tNt,"VanConfig"),tNt.forEach(t),jMo=r(FOe," (VAN model)"),FOe.forEach(t),DMo=i(L),vu=n(L,"LI",{});var TOe=s(vu);m_e=n(TOe,"STRONG",{});var aNt=s(m_e);GMo=r(aNt,"videomae"),aNt.forEach(t),OMo=r(TOe," \u2014 "),cG=n(TOe,"A",{href:!0});var nNt=s(cG);VMo=r(nNt,"VideoMAEConfig"),nNt.forEach(t),XMo=r(TOe," (VideoMAE model)"),TOe.forEach(t),zMo=i(L),Fu=n(L,"LI",{});var MOe=s(Fu);c_e=n(MOe,"STRONG",{});var sNt=s(c_e);QMo=r(sNt,"vilt"),sNt.forEach(t),WMo=r(MOe," \u2014 "),fG=n(MOe,"A",{href:!0});var lNt=s(fG);UMo=r(lNt,"ViltConfig"),lNt.forEach(t),HMo=r(MOe," (ViLT model)"),MOe.forEach(t),JMo=i(L),Tu=n(L,"LI",{});var EOe=s(Tu);f_e=n(EOe,"STRONG",{});var iNt=s(f_e);YMo=r(iNt,"vision-encoder-decoder"),iNt.forEach(t),ZMo=r(EOe," \u2014 "),gG=n(EOe,"A",{href:!0});var dNt=s(gG);KMo=r(dNt,"VisionEncoderDecoderConfig"),dNt.forEach(t),eEo=r(EOe," (Vision Encoder decoder model)"),EOe.forEach(t),oEo=i(L),Mu=n(L,"LI",{});var COe=s(Mu);g_e=n(COe,"STRONG",{});var mNt=s(g_e);rEo=r(mNt,"vision-text-dual-encoder"),mNt.forEach(t),tEo=r(COe," \u2014 "),hG=n(COe,"A",{href:!0});var cNt=s(hG);aEo=r(cNt,"VisionTextDualEncoderConfig"),cNt.forEach(t),nEo=r(COe," (VisionTextDualEncoder model)"),COe.forEach(t),sEo=i(L),Eu=n(L,"LI",{});var wOe=s(Eu);h_e=n(wOe,"STRONG",{});var fNt=s(h_e);lEo=r(fNt,"visual_bert"),fNt.forEach(t),iEo=r(wOe," \u2014 "),uG=n(wOe,"A",{href:!0});var gNt=s(uG);dEo=r(gNt,"VisualBertConfig"),gNt.forEach(t),mEo=r(wOe," (VisualBERT model)"),wOe.forEach(t),cEo=i(L),Cu=n(L,"LI",{});var AOe=s(Cu);u_e=n(AOe,"STRONG",{});var hNt=s(u_e);fEo=r(hNt,"vit"),hNt.forEach(t),gEo=r(AOe," \u2014 "),pG=n(AOe,"A",{href:!0});var uNt=s(pG);hEo=r(uNt,"ViTConfig"),uNt.forEach(t),uEo=r(AOe," (ViT model)"),AOe.forEach(t),pEo=i(L),wu=n(L,"LI",{});var LOe=s(wu);p_e=n(LOe,"STRONG",{});var pNt=s(p_e);_Eo=r(pNt,"vit_mae"),pNt.forEach(t),bEo=r(LOe," \u2014 "),_G=n(LOe,"A",{href:!0});var _Nt=s(_G);vEo=r(_Nt,"ViTMAEConfig"),_Nt.forEach(t),FEo=r(LOe," (ViTMAE model)"),LOe.forEach(t),TEo=i(L),Au=n(L,"LI",{});var yOe=s(Au);__e=n(yOe,"STRONG",{});var bNt=s(__e);MEo=r(bNt,"vit_msn"),bNt.forEach(t),EEo=r(yOe," \u2014 "),bG=n(yOe,"A",{href:!0});var vNt=s(bG);CEo=r(vNt,"ViTMSNConfig"),vNt.forEach(t),wEo=r(yOe," (ViTMSN model)"),yOe.forEach(t),AEo=i(L),Lu=n(L,"LI",{});var xOe=s(Lu);b_e=n(xOe,"STRONG",{});var FNt=s(b_e);LEo=r(FNt,"wav2vec2"),FNt.forEach(t),yEo=r(xOe," \u2014 "),vG=n(xOe,"A",{href:!0});var TNt=s(vG);xEo=r(TNt,"Wav2Vec2Config"),TNt.forEach(t),$Eo=r(xOe," (Wav2Vec2 model)"),xOe.forEach(t),kEo=i(L),yu=n(L,"LI",{});var $Oe=s(yu);v_e=n($Oe,"STRONG",{});var MNt=s(v_e);SEo=r(MNt,"wav2vec2-conformer"),MNt.forEach(t),REo=r($Oe," \u2014 "),FG=n($Oe,"A",{href:!0});var ENt=s(FG);PEo=r(ENt,"Wav2Vec2ConformerConfig"),ENt.forEach(t),BEo=r($Oe," (Wav2Vec2-Conformer model)"),$Oe.forEach(t),IEo=i(L),xu=n(L,"LI",{});var kOe=s(xu);F_e=n(kOe,"STRONG",{});var CNt=s(F_e);NEo=r(CNt,"wavlm"),CNt.forEach(t),qEo=r(kOe," \u2014 "),TG=n(kOe,"A",{href:!0});var wNt=s(TG);jEo=r(wNt,"WavLMConfig"),wNt.forEach(t),DEo=r(kOe," (WavLM model)"),kOe.forEach(t),GEo=i(L),$u=n(L,"LI",{});var SOe=s($u);T_e=n(SOe,"STRONG",{});var ANt=s(T_e);OEo=r(ANt,"whisper"),ANt.forEach(t),VEo=r(SOe," \u2014 "),MG=n(SOe,"A",{href:!0});var LNt=s(MG);XEo=r(LNt,"WhisperConfig"),LNt.forEach(t),zEo=r(SOe," (Whisper model)"),SOe.forEach(t),QEo=i(L),ku=n(L,"LI",{});var ROe=s(ku);M_e=n(ROe,"STRONG",{});var yNt=s(M_e);WEo=r(yNt,"xclip"),yNt.forEach(t),UEo=r(ROe," \u2014 "),EG=n(ROe,"A",{href:!0});var xNt=s(EG);HEo=r(xNt,"XCLIPConfig"),xNt.forEach(t),JEo=r(ROe," (X-CLIP model)"),ROe.forEach(t),YEo=i(L),Su=n(L,"LI",{});var POe=s(Su);E_e=n(POe,"STRONG",{});var $Nt=s(E_e);ZEo=r($Nt,"xglm"),$Nt.forEach(t),KEo=r(POe," \u2014 "),CG=n(POe,"A",{href:!0});var kNt=s(CG);e4o=r(kNt,"XGLMConfig"),kNt.forEach(t),o4o=r(POe," (XGLM model)"),POe.forEach(t),r4o=i(L),Ru=n(L,"LI",{});var BOe=s(Ru);C_e=n(BOe,"STRONG",{});var SNt=s(C_e);t4o=r(SNt,"xlm"),SNt.forEach(t),a4o=r(BOe," \u2014 "),wG=n(BOe,"A",{href:!0});var RNt=s(wG);n4o=r(RNt,"XLMConfig"),RNt.forEach(t),s4o=r(BOe," (XLM model)"),BOe.forEach(t),l4o=i(L),Pu=n(L,"LI",{});var IOe=s(Pu);w_e=n(IOe,"STRONG",{});var PNt=s(w_e);i4o=r(PNt,"xlm-prophetnet"),PNt.forEach(t),d4o=r(IOe," \u2014 "),AG=n(IOe,"A",{href:!0});var BNt=s(AG);m4o=r(BNt,"XLMProphetNetConfig"),BNt.forEach(t),c4o=r(IOe," (XLM-ProphetNet model)"),IOe.forEach(t),f4o=i(L),Bu=n(L,"LI",{});var NOe=s(Bu);A_e=n(NOe,"STRONG",{});var INt=s(A_e);g4o=r(INt,"xlm-roberta"),INt.forEach(t),h4o=r(NOe," \u2014 "),LG=n(NOe,"A",{href:!0});var NNt=s(LG);u4o=r(NNt,"XLMRobertaConfig"),NNt.forEach(t),p4o=r(NOe," (XLM-RoBERTa model)"),NOe.forEach(t),_4o=i(L),Iu=n(L,"LI",{});var qOe=s(Iu);L_e=n(qOe,"STRONG",{});var qNt=s(L_e);b4o=r(qNt,"xlm-roberta-xl"),qNt.forEach(t),v4o=r(qOe," \u2014 "),yG=n(qOe,"A",{href:!0});var jNt=s(yG);F4o=r(jNt,"XLMRobertaXLConfig"),jNt.forEach(t),T4o=r(qOe," (XLM-RoBERTa-XL model)"),qOe.forEach(t),M4o=i(L),Nu=n(L,"LI",{});var jOe=s(Nu);y_e=n(jOe,"STRONG",{});var DNt=s(y_e);E4o=r(DNt,"xlnet"),DNt.forEach(t),C4o=r(jOe," \u2014 "),xG=n(jOe,"A",{href:!0});var GNt=s(xG);w4o=r(GNt,"XLNetConfig"),GNt.forEach(t),A4o=r(jOe," (XLNet model)"),jOe.forEach(t),L4o=i(L),qu=n(L,"LI",{});var DOe=s(qu);x_e=n(DOe,"STRONG",{});var ONt=s(x_e);y4o=r(ONt,"yolos"),ONt.forEach(t),x4o=r(DOe," \u2014 "),$G=n(DOe,"A",{href:!0});var VNt=s($G);$4o=r(VNt,"YolosConfig"),VNt.forEach(t),k4o=r(DOe," (YOLOS model)"),DOe.forEach(t),S4o=i(L),ju=n(L,"LI",{});var GOe=s(ju);$_e=n(GOe,"STRONG",{});var XNt=s($_e);R4o=r(XNt,"yoso"),XNt.forEach(t),P4o=r(GOe," \u2014 "),kG=n(GOe,"A",{href:!0});var zNt=s(kG);B4o=r(zNt,"YosoConfig"),zNt.forEach(t),I4o=r(GOe," (YOSO model)"),GOe.forEach(t),L.forEach(t),N4o=i(Ct),T(Du.$$.fragment,Ct),Ct.forEach(t),q4o=i(Et),Gu=n(Et,"DIV",{class:!0});var jmo=s(Gu);T(Rk.$$.fragment,jmo),j4o=i(jmo),k_e=n(jmo,"P",{});var QNt=s(k_e);D4o=r(QNt,"Register a new configuration for this class."),QNt.forEach(t),jmo.forEach(t),Et.forEach(t),Aio=i(c),Nd=n(c,"H2",{class:!0});var Dmo=s(Nd);Ou=n(Dmo,"A",{id:!0,class:!0,href:!0});var WNt=s(Ou);S_e=n(WNt,"SPAN",{});var UNt=s(S_e);T(Pk.$$.fragment,UNt),UNt.forEach(t),WNt.forEach(t),G4o=i(Dmo),R_e=n(Dmo,"SPAN",{});var HNt=s(R_e);O4o=r(HNt,"AutoTokenizer"),HNt.forEach(t),Dmo.forEach(t),Lio=i(c),Io=n(c,"DIV",{class:!0});var Vl=s(Io);T(Bk.$$.fragment,Vl),V4o=i(Vl),Ik=n(Vl,"P",{});var Gmo=s(Ik);X4o=r(Gmo,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),SG=n(Gmo,"A",{href:!0});var JNt=s(SG);z4o=r(JNt,"AutoTokenizer.from_pretrained()"),JNt.forEach(t),Q4o=r(Gmo," class method."),Gmo.forEach(t),W4o=i(Vl),Nk=n(Vl,"P",{});var Omo=s(Nk);U4o=r(Omo,"This class cannot be instantiated directly using "),P_e=n(Omo,"CODE",{});var YNt=s(P_e);H4o=r(YNt,"__init__()"),YNt.forEach(t),J4o=r(Omo," (throws an error)."),Omo.forEach(t),Y4o=i(Vl),Xr=n(Vl,"DIV",{class:!0});var Xl=s(Xr);T(qk.$$.fragment,Xl),Z4o=i(Xl),B_e=n(Xl,"P",{});var ZNt=s(B_e);K4o=r(ZNt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ZNt.forEach(t),eCo=i(Xl),mn=n(Xl,"P",{});var hx=s(mn);oCo=r(hx,"The tokenizer class to instantiate is selected based on the "),I_e=n(hx,"CODE",{});var KNt=s(I_e);rCo=r(KNt,"model_type"),KNt.forEach(t),tCo=r(hx,` property of the config object (either
passed as an argument or loaded from `),N_e=n(hx,"CODE",{});var eqt=s(N_e);aCo=r(eqt,"pretrained_model_name_or_path"),eqt.forEach(t),nCo=r(hx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=n(hx,"CODE",{});var oqt=s(q_e);sCo=r(oqt,"pretrained_model_name_or_path"),oqt.forEach(t),lCo=r(hx,":"),hx.forEach(t),iCo=i(Xl),k=n(Xl,"UL",{});var S=s(k);Ms=n(S,"LI",{});var AN=s(Ms);j_e=n(AN,"STRONG",{});var rqt=s(j_e);dCo=r(rqt,"albert"),rqt.forEach(t),mCo=r(AN," \u2014 "),RG=n(AN,"A",{href:!0});var tqt=s(RG);cCo=r(tqt,"AlbertTokenizer"),tqt.forEach(t),fCo=r(AN," or "),PG=n(AN,"A",{href:!0});var aqt=s(PG);gCo=r(aqt,"AlbertTokenizerFast"),aqt.forEach(t),hCo=r(AN," (ALBERT model)"),AN.forEach(t),uCo=i(S),Es=n(S,"LI",{});var LN=s(Es);D_e=n(LN,"STRONG",{});var nqt=s(D_e);pCo=r(nqt,"bart"),nqt.forEach(t),_Co=r(LN," \u2014 "),BG=n(LN,"A",{href:!0});var sqt=s(BG);bCo=r(sqt,"BartTokenizer"),sqt.forEach(t),vCo=r(LN," or "),IG=n(LN,"A",{href:!0});var lqt=s(IG);FCo=r(lqt,"BartTokenizerFast"),lqt.forEach(t),TCo=r(LN," (BART model)"),LN.forEach(t),MCo=i(S),Cs=n(S,"LI",{});var yN=s(Cs);G_e=n(yN,"STRONG",{});var iqt=s(G_e);ECo=r(iqt,"barthez"),iqt.forEach(t),CCo=r(yN," \u2014 "),NG=n(yN,"A",{href:!0});var dqt=s(NG);wCo=r(dqt,"BarthezTokenizer"),dqt.forEach(t),ACo=r(yN," or "),qG=n(yN,"A",{href:!0});var mqt=s(qG);LCo=r(mqt,"BarthezTokenizerFast"),mqt.forEach(t),yCo=r(yN," (BARThez model)"),yN.forEach(t),xCo=i(S),Vu=n(S,"LI",{});var OOe=s(Vu);O_e=n(OOe,"STRONG",{});var cqt=s(O_e);$Co=r(cqt,"bartpho"),cqt.forEach(t),kCo=r(OOe," \u2014 "),jG=n(OOe,"A",{href:!0});var fqt=s(jG);SCo=r(fqt,"BartphoTokenizer"),fqt.forEach(t),RCo=r(OOe," (BARTpho model)"),OOe.forEach(t),PCo=i(S),ws=n(S,"LI",{});var xN=s(ws);V_e=n(xN,"STRONG",{});var gqt=s(V_e);BCo=r(gqt,"bert"),gqt.forEach(t),ICo=r(xN," \u2014 "),DG=n(xN,"A",{href:!0});var hqt=s(DG);NCo=r(hqt,"BertTokenizer"),hqt.forEach(t),qCo=r(xN," or "),GG=n(xN,"A",{href:!0});var uqt=s(GG);jCo=r(uqt,"BertTokenizerFast"),uqt.forEach(t),DCo=r(xN," (BERT model)"),xN.forEach(t),GCo=i(S),Xu=n(S,"LI",{});var VOe=s(Xu);X_e=n(VOe,"STRONG",{});var pqt=s(X_e);OCo=r(pqt,"bert-generation"),pqt.forEach(t),VCo=r(VOe," \u2014 "),OG=n(VOe,"A",{href:!0});var _qt=s(OG);XCo=r(_qt,"BertGenerationTokenizer"),_qt.forEach(t),zCo=r(VOe," (Bert Generation model)"),VOe.forEach(t),QCo=i(S),zu=n(S,"LI",{});var XOe=s(zu);z_e=n(XOe,"STRONG",{});var bqt=s(z_e);WCo=r(bqt,"bert-japanese"),bqt.forEach(t),UCo=r(XOe," \u2014 "),VG=n(XOe,"A",{href:!0});var vqt=s(VG);HCo=r(vqt,"BertJapaneseTokenizer"),vqt.forEach(t),JCo=r(XOe," (BertJapanese model)"),XOe.forEach(t),YCo=i(S),Qu=n(S,"LI",{});var zOe=s(Qu);Q_e=n(zOe,"STRONG",{});var Fqt=s(Q_e);ZCo=r(Fqt,"bertweet"),Fqt.forEach(t),KCo=r(zOe," \u2014 "),XG=n(zOe,"A",{href:!0});var Tqt=s(XG);e3o=r(Tqt,"BertweetTokenizer"),Tqt.forEach(t),o3o=r(zOe," (BERTweet model)"),zOe.forEach(t),r3o=i(S),As=n(S,"LI",{});var $N=s(As);W_e=n($N,"STRONG",{});var Mqt=s(W_e);t3o=r(Mqt,"big_bird"),Mqt.forEach(t),a3o=r($N," \u2014 "),zG=n($N,"A",{href:!0});var Eqt=s(zG);n3o=r(Eqt,"BigBirdTokenizer"),Eqt.forEach(t),s3o=r($N," or "),QG=n($N,"A",{href:!0});var Cqt=s(QG);l3o=r(Cqt,"BigBirdTokenizerFast"),Cqt.forEach(t),i3o=r($N," (BigBird model)"),$N.forEach(t),d3o=i(S),Ls=n(S,"LI",{});var kN=s(Ls);U_e=n(kN,"STRONG",{});var wqt=s(U_e);m3o=r(wqt,"bigbird_pegasus"),wqt.forEach(t),c3o=r(kN," \u2014 "),WG=n(kN,"A",{href:!0});var Aqt=s(WG);f3o=r(Aqt,"PegasusTokenizer"),Aqt.forEach(t),g3o=r(kN," or "),UG=n(kN,"A",{href:!0});var Lqt=s(UG);h3o=r(Lqt,"PegasusTokenizerFast"),Lqt.forEach(t),u3o=r(kN," (BigBird-Pegasus model)"),kN.forEach(t),p3o=i(S),ys=n(S,"LI",{});var SN=s(ys);H_e=n(SN,"STRONG",{});var yqt=s(H_e);_3o=r(yqt,"blenderbot"),yqt.forEach(t),b3o=r(SN," \u2014 "),HG=n(SN,"A",{href:!0});var xqt=s(HG);v3o=r(xqt,"BlenderbotTokenizer"),xqt.forEach(t),F3o=r(SN," or "),JG=n(SN,"A",{href:!0});var $qt=s(JG);T3o=r($qt,"BlenderbotTokenizerFast"),$qt.forEach(t),M3o=r(SN," (Blenderbot model)"),SN.forEach(t),E3o=i(S),Wu=n(S,"LI",{});var QOe=s(Wu);J_e=n(QOe,"STRONG",{});var kqt=s(J_e);C3o=r(kqt,"blenderbot-small"),kqt.forEach(t),w3o=r(QOe," \u2014 "),YG=n(QOe,"A",{href:!0});var Sqt=s(YG);A3o=r(Sqt,"BlenderbotSmallTokenizer"),Sqt.forEach(t),L3o=r(QOe," (BlenderbotSmall model)"),QOe.forEach(t),y3o=i(S),Uu=n(S,"LI",{});var WOe=s(Uu);Y_e=n(WOe,"STRONG",{});var Rqt=s(Y_e);x3o=r(Rqt,"bloom"),Rqt.forEach(t),$3o=r(WOe," \u2014 "),ZG=n(WOe,"A",{href:!0});var Pqt=s(ZG);k3o=r(Pqt,"BloomTokenizerFast"),Pqt.forEach(t),S3o=r(WOe," (BLOOM model)"),WOe.forEach(t),R3o=i(S),Hu=n(S,"LI",{});var UOe=s(Hu);Z_e=n(UOe,"STRONG",{});var Bqt=s(Z_e);P3o=r(Bqt,"byt5"),Bqt.forEach(t),B3o=r(UOe," \u2014 "),KG=n(UOe,"A",{href:!0});var Iqt=s(KG);I3o=r(Iqt,"ByT5Tokenizer"),Iqt.forEach(t),N3o=r(UOe," (ByT5 model)"),UOe.forEach(t),q3o=i(S),xs=n(S,"LI",{});var RN=s(xs);K_e=n(RN,"STRONG",{});var Nqt=s(K_e);j3o=r(Nqt,"camembert"),Nqt.forEach(t),D3o=r(RN," \u2014 "),eO=n(RN,"A",{href:!0});var qqt=s(eO);G3o=r(qqt,"CamembertTokenizer"),qqt.forEach(t),O3o=r(RN," or "),oO=n(RN,"A",{href:!0});var jqt=s(oO);V3o=r(jqt,"CamembertTokenizerFast"),jqt.forEach(t),X3o=r(RN," (CamemBERT model)"),RN.forEach(t),z3o=i(S),Ju=n(S,"LI",{});var HOe=s(Ju);e1e=n(HOe,"STRONG",{});var Dqt=s(e1e);Q3o=r(Dqt,"canine"),Dqt.forEach(t),W3o=r(HOe," \u2014 "),rO=n(HOe,"A",{href:!0});var Gqt=s(rO);U3o=r(Gqt,"CanineTokenizer"),Gqt.forEach(t),H3o=r(HOe," (CANINE model)"),HOe.forEach(t),J3o=i(S),$s=n(S,"LI",{});var PN=s($s);o1e=n(PN,"STRONG",{});var Oqt=s(o1e);Y3o=r(Oqt,"clip"),Oqt.forEach(t),Z3o=r(PN," \u2014 "),tO=n(PN,"A",{href:!0});var Vqt=s(tO);K3o=r(Vqt,"CLIPTokenizer"),Vqt.forEach(t),e5o=r(PN," or "),aO=n(PN,"A",{href:!0});var Xqt=s(aO);o5o=r(Xqt,"CLIPTokenizerFast"),Xqt.forEach(t),r5o=r(PN," (CLIP model)"),PN.forEach(t),t5o=i(S),ks=n(S,"LI",{});var BN=s(ks);r1e=n(BN,"STRONG",{});var zqt=s(r1e);a5o=r(zqt,"clipseg"),zqt.forEach(t),n5o=r(BN," \u2014 "),nO=n(BN,"A",{href:!0});var Qqt=s(nO);s5o=r(Qqt,"CLIPTokenizer"),Qqt.forEach(t),l5o=r(BN," or "),sO=n(BN,"A",{href:!0});var Wqt=s(sO);i5o=r(Wqt,"CLIPTokenizerFast"),Wqt.forEach(t),d5o=r(BN," (CLIPSeg model)"),BN.forEach(t),m5o=i(S),Ss=n(S,"LI",{});var IN=s(Ss);t1e=n(IN,"STRONG",{});var Uqt=s(t1e);c5o=r(Uqt,"codegen"),Uqt.forEach(t),f5o=r(IN," \u2014 "),lO=n(IN,"A",{href:!0});var Hqt=s(lO);g5o=r(Hqt,"CodeGenTokenizer"),Hqt.forEach(t),h5o=r(IN," or "),iO=n(IN,"A",{href:!0});var Jqt=s(iO);u5o=r(Jqt,"CodeGenTokenizerFast"),Jqt.forEach(t),p5o=r(IN," (CodeGen model)"),IN.forEach(t),_5o=i(S),Rs=n(S,"LI",{});var NN=s(Rs);a1e=n(NN,"STRONG",{});var Yqt=s(a1e);b5o=r(Yqt,"convbert"),Yqt.forEach(t),v5o=r(NN," \u2014 "),dO=n(NN,"A",{href:!0});var Zqt=s(dO);F5o=r(Zqt,"ConvBertTokenizer"),Zqt.forEach(t),T5o=r(NN," or "),mO=n(NN,"A",{href:!0});var Kqt=s(mO);M5o=r(Kqt,"ConvBertTokenizerFast"),Kqt.forEach(t),E5o=r(NN," (ConvBERT model)"),NN.forEach(t),C5o=i(S),Ps=n(S,"LI",{});var qN=s(Ps);n1e=n(qN,"STRONG",{});var ejt=s(n1e);w5o=r(ejt,"cpm"),ejt.forEach(t),A5o=r(qN," \u2014 "),cO=n(qN,"A",{href:!0});var ojt=s(cO);L5o=r(ojt,"CpmTokenizer"),ojt.forEach(t),y5o=r(qN," or "),fO=n(qN,"A",{href:!0});var rjt=s(fO);x5o=r(rjt,"CpmTokenizerFast"),rjt.forEach(t),$5o=r(qN," (CPM model)"),qN.forEach(t),k5o=i(S),Yu=n(S,"LI",{});var JOe=s(Yu);s1e=n(JOe,"STRONG",{});var tjt=s(s1e);S5o=r(tjt,"ctrl"),tjt.forEach(t),R5o=r(JOe," \u2014 "),gO=n(JOe,"A",{href:!0});var ajt=s(gO);P5o=r(ajt,"CTRLTokenizer"),ajt.forEach(t),B5o=r(JOe," (CTRL model)"),JOe.forEach(t),I5o=i(S),Bs=n(S,"LI",{});var jN=s(Bs);l1e=n(jN,"STRONG",{});var njt=s(l1e);N5o=r(njt,"data2vec-text"),njt.forEach(t),q5o=r(jN," \u2014 "),hO=n(jN,"A",{href:!0});var sjt=s(hO);j5o=r(sjt,"RobertaTokenizer"),sjt.forEach(t),D5o=r(jN," or "),uO=n(jN,"A",{href:!0});var ljt=s(uO);G5o=r(ljt,"RobertaTokenizerFast"),ljt.forEach(t),O5o=r(jN," (Data2VecText model)"),jN.forEach(t),V5o=i(S),Is=n(S,"LI",{});var DN=s(Is);i1e=n(DN,"STRONG",{});var ijt=s(i1e);X5o=r(ijt,"deberta"),ijt.forEach(t),z5o=r(DN," \u2014 "),pO=n(DN,"A",{href:!0});var djt=s(pO);Q5o=r(djt,"DebertaTokenizer"),djt.forEach(t),W5o=r(DN," or "),_O=n(DN,"A",{href:!0});var mjt=s(_O);U5o=r(mjt,"DebertaTokenizerFast"),mjt.forEach(t),H5o=r(DN," (DeBERTa model)"),DN.forEach(t),J5o=i(S),Ns=n(S,"LI",{});var GN=s(Ns);d1e=n(GN,"STRONG",{});var cjt=s(d1e);Y5o=r(cjt,"deberta-v2"),cjt.forEach(t),Z5o=r(GN," \u2014 "),bO=n(GN,"A",{href:!0});var fjt=s(bO);K5o=r(fjt,"DebertaV2Tokenizer"),fjt.forEach(t),e0o=r(GN," or "),vO=n(GN,"A",{href:!0});var gjt=s(vO);o0o=r(gjt,"DebertaV2TokenizerFast"),gjt.forEach(t),r0o=r(GN," (DeBERTa-v2 model)"),GN.forEach(t),t0o=i(S),qs=n(S,"LI",{});var ON=s(qs);m1e=n(ON,"STRONG",{});var hjt=s(m1e);a0o=r(hjt,"distilbert"),hjt.forEach(t),n0o=r(ON," \u2014 "),FO=n(ON,"A",{href:!0});var ujt=s(FO);s0o=r(ujt,"DistilBertTokenizer"),ujt.forEach(t),l0o=r(ON," or "),TO=n(ON,"A",{href:!0});var pjt=s(TO);i0o=r(pjt,"DistilBertTokenizerFast"),pjt.forEach(t),d0o=r(ON," (DistilBERT model)"),ON.forEach(t),m0o=i(S),js=n(S,"LI",{});var VN=s(js);c1e=n(VN,"STRONG",{});var _jt=s(c1e);c0o=r(_jt,"dpr"),_jt.forEach(t),f0o=r(VN," \u2014 "),MO=n(VN,"A",{href:!0});var bjt=s(MO);g0o=r(bjt,"DPRQuestionEncoderTokenizer"),bjt.forEach(t),h0o=r(VN," or "),EO=n(VN,"A",{href:!0});var vjt=s(EO);u0o=r(vjt,"DPRQuestionEncoderTokenizerFast"),vjt.forEach(t),p0o=r(VN," (DPR model)"),VN.forEach(t),_0o=i(S),Ds=n(S,"LI",{});var XN=s(Ds);f1e=n(XN,"STRONG",{});var Fjt=s(f1e);b0o=r(Fjt,"electra"),Fjt.forEach(t),v0o=r(XN," \u2014 "),CO=n(XN,"A",{href:!0});var Tjt=s(CO);F0o=r(Tjt,"ElectraTokenizer"),Tjt.forEach(t),T0o=r(XN," or "),wO=n(XN,"A",{href:!0});var Mjt=s(wO);M0o=r(Mjt,"ElectraTokenizerFast"),Mjt.forEach(t),E0o=r(XN," (ELECTRA model)"),XN.forEach(t),C0o=i(S),Gs=n(S,"LI",{});var zN=s(Gs);g1e=n(zN,"STRONG",{});var Ejt=s(g1e);w0o=r(Ejt,"ernie"),Ejt.forEach(t),A0o=r(zN," \u2014 "),AO=n(zN,"A",{href:!0});var Cjt=s(AO);L0o=r(Cjt,"BertTokenizer"),Cjt.forEach(t),y0o=r(zN," or "),LO=n(zN,"A",{href:!0});var wjt=s(LO);x0o=r(wjt,"BertTokenizerFast"),wjt.forEach(t),$0o=r(zN," (ERNIE model)"),zN.forEach(t),k0o=i(S),Zu=n(S,"LI",{});var YOe=s(Zu);h1e=n(YOe,"STRONG",{});var Ajt=s(h1e);S0o=r(Ajt,"esm"),Ajt.forEach(t),R0o=r(YOe," \u2014 "),yO=n(YOe,"A",{href:!0});var Ljt=s(yO);P0o=r(Ljt,"EsmTokenizer"),Ljt.forEach(t),B0o=r(YOe," (ESM model)"),YOe.forEach(t),I0o=i(S),Ku=n(S,"LI",{});var ZOe=s(Ku);u1e=n(ZOe,"STRONG",{});var yjt=s(u1e);N0o=r(yjt,"flaubert"),yjt.forEach(t),q0o=r(ZOe," \u2014 "),xO=n(ZOe,"A",{href:!0});var xjt=s(xO);j0o=r(xjt,"FlaubertTokenizer"),xjt.forEach(t),D0o=r(ZOe," (FlauBERT model)"),ZOe.forEach(t),G0o=i(S),Os=n(S,"LI",{});var QN=s(Os);p1e=n(QN,"STRONG",{});var $jt=s(p1e);O0o=r($jt,"fnet"),$jt.forEach(t),V0o=r(QN," \u2014 "),$O=n(QN,"A",{href:!0});var kjt=s($O);X0o=r(kjt,"FNetTokenizer"),kjt.forEach(t),z0o=r(QN," or "),kO=n(QN,"A",{href:!0});var Sjt=s(kO);Q0o=r(Sjt,"FNetTokenizerFast"),Sjt.forEach(t),W0o=r(QN," (FNet model)"),QN.forEach(t),U0o=i(S),ep=n(S,"LI",{});var KOe=s(ep);_1e=n(KOe,"STRONG",{});var Rjt=s(_1e);H0o=r(Rjt,"fsmt"),Rjt.forEach(t),J0o=r(KOe," \u2014 "),SO=n(KOe,"A",{href:!0});var Pjt=s(SO);Y0o=r(Pjt,"FSMTTokenizer"),Pjt.forEach(t),Z0o=r(KOe," (FairSeq Machine-Translation model)"),KOe.forEach(t),K0o=i(S),Vs=n(S,"LI",{});var WN=s(Vs);b1e=n(WN,"STRONG",{});var Bjt=s(b1e);ewo=r(Bjt,"funnel"),Bjt.forEach(t),owo=r(WN," \u2014 "),RO=n(WN,"A",{href:!0});var Ijt=s(RO);rwo=r(Ijt,"FunnelTokenizer"),Ijt.forEach(t),two=r(WN," or "),PO=n(WN,"A",{href:!0});var Njt=s(PO);awo=r(Njt,"FunnelTokenizerFast"),Njt.forEach(t),nwo=r(WN," (Funnel Transformer model)"),WN.forEach(t),swo=i(S),Xs=n(S,"LI",{});var UN=s(Xs);v1e=n(UN,"STRONG",{});var qjt=s(v1e);lwo=r(qjt,"gpt2"),qjt.forEach(t),iwo=r(UN," \u2014 "),BO=n(UN,"A",{href:!0});var jjt=s(BO);dwo=r(jjt,"GPT2Tokenizer"),jjt.forEach(t),mwo=r(UN," or "),IO=n(UN,"A",{href:!0});var Djt=s(IO);cwo=r(Djt,"GPT2TokenizerFast"),Djt.forEach(t),fwo=r(UN," (OpenAI GPT-2 model)"),UN.forEach(t),gwo=i(S),zs=n(S,"LI",{});var HN=s(zs);F1e=n(HN,"STRONG",{});var Gjt=s(F1e);hwo=r(Gjt,"gpt_neo"),Gjt.forEach(t),uwo=r(HN," \u2014 "),NO=n(HN,"A",{href:!0});var Ojt=s(NO);pwo=r(Ojt,"GPT2Tokenizer"),Ojt.forEach(t),_wo=r(HN," or "),qO=n(HN,"A",{href:!0});var Vjt=s(qO);bwo=r(Vjt,"GPT2TokenizerFast"),Vjt.forEach(t),vwo=r(HN," (GPT Neo model)"),HN.forEach(t),Fwo=i(S),op=n(S,"LI",{});var eVe=s(op);T1e=n(eVe,"STRONG",{});var Xjt=s(T1e);Two=r(Xjt,"gpt_neox"),Xjt.forEach(t),Mwo=r(eVe," \u2014 "),jO=n(eVe,"A",{href:!0});var zjt=s(jO);Ewo=r(zjt,"GPTNeoXTokenizerFast"),zjt.forEach(t),Cwo=r(eVe," (GPT NeoX model)"),eVe.forEach(t),wwo=i(S),rp=n(S,"LI",{});var oVe=s(rp);M1e=n(oVe,"STRONG",{});var Qjt=s(M1e);Awo=r(Qjt,"gpt_neox_japanese"),Qjt.forEach(t),Lwo=r(oVe," \u2014 "),DO=n(oVe,"A",{href:!0});var Wjt=s(DO);ywo=r(Wjt,"GPTNeoXJapaneseTokenizer"),Wjt.forEach(t),xwo=r(oVe," (GPT NeoX Japanese model)"),oVe.forEach(t),$wo=i(S),Qs=n(S,"LI",{});var JN=s(Qs);E1e=n(JN,"STRONG",{});var Ujt=s(E1e);kwo=r(Ujt,"gptj"),Ujt.forEach(t),Swo=r(JN," \u2014 "),GO=n(JN,"A",{href:!0});var Hjt=s(GO);Rwo=r(Hjt,"GPT2Tokenizer"),Hjt.forEach(t),Pwo=r(JN," or "),OO=n(JN,"A",{href:!0});var Jjt=s(OO);Bwo=r(Jjt,"GPT2TokenizerFast"),Jjt.forEach(t),Iwo=r(JN," (GPT-J model)"),JN.forEach(t),Nwo=i(S),Ws=n(S,"LI",{});var YN=s(Ws);C1e=n(YN,"STRONG",{});var Yjt=s(C1e);qwo=r(Yjt,"groupvit"),Yjt.forEach(t),jwo=r(YN," \u2014 "),VO=n(YN,"A",{href:!0});var Zjt=s(VO);Dwo=r(Zjt,"CLIPTokenizer"),Zjt.forEach(t),Gwo=r(YN," or "),XO=n(YN,"A",{href:!0});var Kjt=s(XO);Owo=r(Kjt,"CLIPTokenizerFast"),Kjt.forEach(t),Vwo=r(YN," (GroupViT model)"),YN.forEach(t),Xwo=i(S),Us=n(S,"LI",{});var ZN=s(Us);w1e=n(ZN,"STRONG",{});var eDt=s(w1e);zwo=r(eDt,"herbert"),eDt.forEach(t),Qwo=r(ZN," \u2014 "),zO=n(ZN,"A",{href:!0});var oDt=s(zO);Wwo=r(oDt,"HerbertTokenizer"),oDt.forEach(t),Uwo=r(ZN," or "),QO=n(ZN,"A",{href:!0});var rDt=s(QO);Hwo=r(rDt,"HerbertTokenizerFast"),rDt.forEach(t),Jwo=r(ZN," (HerBERT model)"),ZN.forEach(t),Ywo=i(S),tp=n(S,"LI",{});var rVe=s(tp);A1e=n(rVe,"STRONG",{});var tDt=s(A1e);Zwo=r(tDt,"hubert"),tDt.forEach(t),Kwo=r(rVe," \u2014 "),WO=n(rVe,"A",{href:!0});var aDt=s(WO);eAo=r(aDt,"Wav2Vec2CTCTokenizer"),aDt.forEach(t),oAo=r(rVe," (Hubert model)"),rVe.forEach(t),rAo=i(S),Hs=n(S,"LI",{});var KN=s(Hs);L1e=n(KN,"STRONG",{});var nDt=s(L1e);tAo=r(nDt,"ibert"),nDt.forEach(t),aAo=r(KN," \u2014 "),UO=n(KN,"A",{href:!0});var sDt=s(UO);nAo=r(sDt,"RobertaTokenizer"),sDt.forEach(t),sAo=r(KN," or "),HO=n(KN,"A",{href:!0});var lDt=s(HO);lAo=r(lDt,"RobertaTokenizerFast"),lDt.forEach(t),iAo=r(KN," (I-BERT model)"),KN.forEach(t),dAo=i(S),ap=n(S,"LI",{});var tVe=s(ap);y1e=n(tVe,"STRONG",{});var iDt=s(y1e);mAo=r(iDt,"jukebox"),iDt.forEach(t),cAo=r(tVe," \u2014 "),JO=n(tVe,"A",{href:!0});var dDt=s(JO);fAo=r(dDt,"JukeboxTokenizer"),dDt.forEach(t),gAo=r(tVe," (Jukebox model)"),tVe.forEach(t),hAo=i(S),Js=n(S,"LI",{});var eq=s(Js);x1e=n(eq,"STRONG",{});var mDt=s(x1e);uAo=r(mDt,"layoutlm"),mDt.forEach(t),pAo=r(eq," \u2014 "),YO=n(eq,"A",{href:!0});var cDt=s(YO);_Ao=r(cDt,"LayoutLMTokenizer"),cDt.forEach(t),bAo=r(eq," or "),ZO=n(eq,"A",{href:!0});var fDt=s(ZO);vAo=r(fDt,"LayoutLMTokenizerFast"),fDt.forEach(t),FAo=r(eq," (LayoutLM model)"),eq.forEach(t),TAo=i(S),Ys=n(S,"LI",{});var oq=s(Ys);$1e=n(oq,"STRONG",{});var gDt=s($1e);MAo=r(gDt,"layoutlmv2"),gDt.forEach(t),EAo=r(oq," \u2014 "),KO=n(oq,"A",{href:!0});var hDt=s(KO);CAo=r(hDt,"LayoutLMv2Tokenizer"),hDt.forEach(t),wAo=r(oq," or "),eV=n(oq,"A",{href:!0});var uDt=s(eV);AAo=r(uDt,"LayoutLMv2TokenizerFast"),uDt.forEach(t),LAo=r(oq," (LayoutLMv2 model)"),oq.forEach(t),yAo=i(S),Zs=n(S,"LI",{});var rq=s(Zs);k1e=n(rq,"STRONG",{});var pDt=s(k1e);xAo=r(pDt,"layoutlmv3"),pDt.forEach(t),$Ao=r(rq," \u2014 "),oV=n(rq,"A",{href:!0});var _Dt=s(oV);kAo=r(_Dt,"LayoutLMv3Tokenizer"),_Dt.forEach(t),SAo=r(rq," or "),rV=n(rq,"A",{href:!0});var bDt=s(rV);RAo=r(bDt,"LayoutLMv3TokenizerFast"),bDt.forEach(t),PAo=r(rq," (LayoutLMv3 model)"),rq.forEach(t),BAo=i(S),Ks=n(S,"LI",{});var tq=s(Ks);S1e=n(tq,"STRONG",{});var vDt=s(S1e);IAo=r(vDt,"layoutxlm"),vDt.forEach(t),NAo=r(tq," \u2014 "),tV=n(tq,"A",{href:!0});var FDt=s(tV);qAo=r(FDt,"LayoutXLMTokenizer"),FDt.forEach(t),jAo=r(tq," or "),aV=n(tq,"A",{href:!0});var TDt=s(aV);DAo=r(TDt,"LayoutXLMTokenizerFast"),TDt.forEach(t),GAo=r(tq," (LayoutXLM model)"),tq.forEach(t),OAo=i(S),el=n(S,"LI",{});var aq=s(el);R1e=n(aq,"STRONG",{});var MDt=s(R1e);VAo=r(MDt,"led"),MDt.forEach(t),XAo=r(aq," \u2014 "),nV=n(aq,"A",{href:!0});var EDt=s(nV);zAo=r(EDt,"LEDTokenizer"),EDt.forEach(t),QAo=r(aq," or "),sV=n(aq,"A",{href:!0});var CDt=s(sV);WAo=r(CDt,"LEDTokenizerFast"),CDt.forEach(t),UAo=r(aq," (LED model)"),aq.forEach(t),HAo=i(S),ol=n(S,"LI",{});var nq=s(ol);P1e=n(nq,"STRONG",{});var wDt=s(P1e);JAo=r(wDt,"lilt"),wDt.forEach(t),YAo=r(nq," \u2014 "),lV=n(nq,"A",{href:!0});var ADt=s(lV);ZAo=r(ADt,"LayoutLMv3Tokenizer"),ADt.forEach(t),KAo=r(nq," or "),iV=n(nq,"A",{href:!0});var LDt=s(iV);e6o=r(LDt,"LayoutLMv3TokenizerFast"),LDt.forEach(t),o6o=r(nq," (LiLT model)"),nq.forEach(t),r6o=i(S),rl=n(S,"LI",{});var sq=s(rl);B1e=n(sq,"STRONG",{});var yDt=s(B1e);t6o=r(yDt,"longformer"),yDt.forEach(t),a6o=r(sq," \u2014 "),dV=n(sq,"A",{href:!0});var xDt=s(dV);n6o=r(xDt,"LongformerTokenizer"),xDt.forEach(t),s6o=r(sq," or "),mV=n(sq,"A",{href:!0});var $Dt=s(mV);l6o=r($Dt,"LongformerTokenizerFast"),$Dt.forEach(t),i6o=r(sq," (Longformer model)"),sq.forEach(t),d6o=i(S),tl=n(S,"LI",{});var lq=s(tl);I1e=n(lq,"STRONG",{});var kDt=s(I1e);m6o=r(kDt,"longt5"),kDt.forEach(t),c6o=r(lq," \u2014 "),cV=n(lq,"A",{href:!0});var SDt=s(cV);f6o=r(SDt,"T5Tokenizer"),SDt.forEach(t),g6o=r(lq," or "),fV=n(lq,"A",{href:!0});var RDt=s(fV);h6o=r(RDt,"T5TokenizerFast"),RDt.forEach(t),u6o=r(lq," (LongT5 model)"),lq.forEach(t),p6o=i(S),np=n(S,"LI",{});var aVe=s(np);N1e=n(aVe,"STRONG",{});var PDt=s(N1e);_6o=r(PDt,"luke"),PDt.forEach(t),b6o=r(aVe," \u2014 "),gV=n(aVe,"A",{href:!0});var BDt=s(gV);v6o=r(BDt,"LukeTokenizer"),BDt.forEach(t),F6o=r(aVe," (LUKE model)"),aVe.forEach(t),T6o=i(S),al=n(S,"LI",{});var iq=s(al);q1e=n(iq,"STRONG",{});var IDt=s(q1e);M6o=r(IDt,"lxmert"),IDt.forEach(t),E6o=r(iq," \u2014 "),hV=n(iq,"A",{href:!0});var NDt=s(hV);C6o=r(NDt,"LxmertTokenizer"),NDt.forEach(t),w6o=r(iq," or "),uV=n(iq,"A",{href:!0});var qDt=s(uV);A6o=r(qDt,"LxmertTokenizerFast"),qDt.forEach(t),L6o=r(iq," (LXMERT model)"),iq.forEach(t),y6o=i(S),sp=n(S,"LI",{});var nVe=s(sp);j1e=n(nVe,"STRONG",{});var jDt=s(j1e);x6o=r(jDt,"m2m_100"),jDt.forEach(t),$6o=r(nVe," \u2014 "),pV=n(nVe,"A",{href:!0});var DDt=s(pV);k6o=r(DDt,"M2M100Tokenizer"),DDt.forEach(t),S6o=r(nVe," (M2M100 model)"),nVe.forEach(t),R6o=i(S),lp=n(S,"LI",{});var sVe=s(lp);D1e=n(sVe,"STRONG",{});var GDt=s(D1e);P6o=r(GDt,"marian"),GDt.forEach(t),B6o=r(sVe," \u2014 "),_V=n(sVe,"A",{href:!0});var ODt=s(_V);I6o=r(ODt,"MarianTokenizer"),ODt.forEach(t),N6o=r(sVe," (Marian model)"),sVe.forEach(t),q6o=i(S),nl=n(S,"LI",{});var dq=s(nl);G1e=n(dq,"STRONG",{});var VDt=s(G1e);j6o=r(VDt,"mbart"),VDt.forEach(t),D6o=r(dq," \u2014 "),bV=n(dq,"A",{href:!0});var XDt=s(bV);G6o=r(XDt,"MBartTokenizer"),XDt.forEach(t),O6o=r(dq," or "),vV=n(dq,"A",{href:!0});var zDt=s(vV);V6o=r(zDt,"MBartTokenizerFast"),zDt.forEach(t),X6o=r(dq," (mBART model)"),dq.forEach(t),z6o=i(S),sl=n(S,"LI",{});var mq=s(sl);O1e=n(mq,"STRONG",{});var QDt=s(O1e);Q6o=r(QDt,"mbart50"),QDt.forEach(t),W6o=r(mq," \u2014 "),FV=n(mq,"A",{href:!0});var WDt=s(FV);U6o=r(WDt,"MBart50Tokenizer"),WDt.forEach(t),H6o=r(mq," or "),TV=n(mq,"A",{href:!0});var UDt=s(TV);J6o=r(UDt,"MBart50TokenizerFast"),UDt.forEach(t),Y6o=r(mq," (mBART-50 model)"),mq.forEach(t),Z6o=i(S),ll=n(S,"LI",{});var cq=s(ll);V1e=n(cq,"STRONG",{});var HDt=s(V1e);K6o=r(HDt,"megatron-bert"),HDt.forEach(t),e7o=r(cq," \u2014 "),MV=n(cq,"A",{href:!0});var JDt=s(MV);o7o=r(JDt,"BertTokenizer"),JDt.forEach(t),r7o=r(cq," or "),EV=n(cq,"A",{href:!0});var YDt=s(EV);t7o=r(YDt,"BertTokenizerFast"),YDt.forEach(t),a7o=r(cq," (Megatron-BERT model)"),cq.forEach(t),n7o=i(S),ip=n(S,"LI",{});var lVe=s(ip);X1e=n(lVe,"STRONG",{});var ZDt=s(X1e);s7o=r(ZDt,"mluke"),ZDt.forEach(t),l7o=r(lVe," \u2014 "),CV=n(lVe,"A",{href:!0});var KDt=s(CV);i7o=r(KDt,"MLukeTokenizer"),KDt.forEach(t),d7o=r(lVe," (mLUKE model)"),lVe.forEach(t),m7o=i(S),il=n(S,"LI",{});var fq=s(il);z1e=n(fq,"STRONG",{});var eGt=s(z1e);c7o=r(eGt,"mobilebert"),eGt.forEach(t),f7o=r(fq," \u2014 "),wV=n(fq,"A",{href:!0});var oGt=s(wV);g7o=r(oGt,"MobileBertTokenizer"),oGt.forEach(t),h7o=r(fq," or "),AV=n(fq,"A",{href:!0});var rGt=s(AV);u7o=r(rGt,"MobileBertTokenizerFast"),rGt.forEach(t),p7o=r(fq," (MobileBERT model)"),fq.forEach(t),_7o=i(S),dl=n(S,"LI",{});var gq=s(dl);Q1e=n(gq,"STRONG",{});var tGt=s(Q1e);b7o=r(tGt,"mpnet"),tGt.forEach(t),v7o=r(gq," \u2014 "),LV=n(gq,"A",{href:!0});var aGt=s(LV);F7o=r(aGt,"MPNetTokenizer"),aGt.forEach(t),T7o=r(gq," or "),yV=n(gq,"A",{href:!0});var nGt=s(yV);M7o=r(nGt,"MPNetTokenizerFast"),nGt.forEach(t),E7o=r(gq," (MPNet model)"),gq.forEach(t),C7o=i(S),ml=n(S,"LI",{});var hq=s(ml);W1e=n(hq,"STRONG",{});var sGt=s(W1e);w7o=r(sGt,"mt5"),sGt.forEach(t),A7o=r(hq," \u2014 "),xV=n(hq,"A",{href:!0});var lGt=s(xV);L7o=r(lGt,"MT5Tokenizer"),lGt.forEach(t),y7o=r(hq," or "),$V=n(hq,"A",{href:!0});var iGt=s($V);x7o=r(iGt,"MT5TokenizerFast"),iGt.forEach(t),$7o=r(hq," (MT5 model)"),hq.forEach(t),k7o=i(S),cl=n(S,"LI",{});var uq=s(cl);U1e=n(uq,"STRONG",{});var dGt=s(U1e);S7o=r(dGt,"mvp"),dGt.forEach(t),R7o=r(uq," \u2014 "),kV=n(uq,"A",{href:!0});var mGt=s(kV);P7o=r(mGt,"MvpTokenizer"),mGt.forEach(t),B7o=r(uq," or "),SV=n(uq,"A",{href:!0});var cGt=s(SV);I7o=r(cGt,"MvpTokenizerFast"),cGt.forEach(t),N7o=r(uq," (MVP model)"),uq.forEach(t),q7o=i(S),fl=n(S,"LI",{});var pq=s(fl);H1e=n(pq,"STRONG",{});var fGt=s(H1e);j7o=r(fGt,"nezha"),fGt.forEach(t),D7o=r(pq," \u2014 "),RV=n(pq,"A",{href:!0});var gGt=s(RV);G7o=r(gGt,"BertTokenizer"),gGt.forEach(t),O7o=r(pq," or "),PV=n(pq,"A",{href:!0});var hGt=s(PV);V7o=r(hGt,"BertTokenizerFast"),hGt.forEach(t),X7o=r(pq," (Nezha model)"),pq.forEach(t),z7o=i(S),gl=n(S,"LI",{});var _q=s(gl);J1e=n(_q,"STRONG",{});var uGt=s(J1e);Q7o=r(uGt,"nllb"),uGt.forEach(t),W7o=r(_q," \u2014 "),BV=n(_q,"A",{href:!0});var pGt=s(BV);U7o=r(pGt,"NllbTokenizer"),pGt.forEach(t),H7o=r(_q," or "),IV=n(_q,"A",{href:!0});var _Gt=s(IV);J7o=r(_Gt,"NllbTokenizerFast"),_Gt.forEach(t),Y7o=r(_q," (NLLB model)"),_q.forEach(t),Z7o=i(S),hl=n(S,"LI",{});var bq=s(hl);Y1e=n(bq,"STRONG",{});var bGt=s(Y1e);K7o=r(bGt,"nystromformer"),bGt.forEach(t),e8o=r(bq," \u2014 "),NV=n(bq,"A",{href:!0});var vGt=s(NV);o8o=r(vGt,"AlbertTokenizer"),vGt.forEach(t),r8o=r(bq," or "),qV=n(bq,"A",{href:!0});var FGt=s(qV);t8o=r(FGt,"AlbertTokenizerFast"),FGt.forEach(t),a8o=r(bq," (Nystr\xF6mformer model)"),bq.forEach(t),n8o=i(S),ul=n(S,"LI",{});var vq=s(ul);Z1e=n(vq,"STRONG",{});var TGt=s(Z1e);s8o=r(TGt,"openai-gpt"),TGt.forEach(t),l8o=r(vq," \u2014 "),jV=n(vq,"A",{href:!0});var MGt=s(jV);i8o=r(MGt,"OpenAIGPTTokenizer"),MGt.forEach(t),d8o=r(vq," or "),DV=n(vq,"A",{href:!0});var EGt=s(DV);m8o=r(EGt,"OpenAIGPTTokenizerFast"),EGt.forEach(t),c8o=r(vq," (OpenAI GPT model)"),vq.forEach(t),f8o=i(S),dp=n(S,"LI",{});var iVe=s(dp);K1e=n(iVe,"STRONG",{});var CGt=s(K1e);g8o=r(CGt,"opt"),CGt.forEach(t),h8o=r(iVe," \u2014 "),GV=n(iVe,"A",{href:!0});var wGt=s(GV);u8o=r(wGt,"GPT2Tokenizer"),wGt.forEach(t),p8o=r(iVe," (OPT model)"),iVe.forEach(t),_8o=i(S),pl=n(S,"LI",{});var Fq=s(pl);e2e=n(Fq,"STRONG",{});var AGt=s(e2e);b8o=r(AGt,"owlvit"),AGt.forEach(t),v8o=r(Fq," \u2014 "),OV=n(Fq,"A",{href:!0});var LGt=s(OV);F8o=r(LGt,"CLIPTokenizer"),LGt.forEach(t),T8o=r(Fq," or "),VV=n(Fq,"A",{href:!0});var yGt=s(VV);M8o=r(yGt,"CLIPTokenizerFast"),yGt.forEach(t),E8o=r(Fq," (OWL-ViT model)"),Fq.forEach(t),C8o=i(S),_l=n(S,"LI",{});var Tq=s(_l);o2e=n(Tq,"STRONG",{});var xGt=s(o2e);w8o=r(xGt,"pegasus"),xGt.forEach(t),A8o=r(Tq," \u2014 "),XV=n(Tq,"A",{href:!0});var $Gt=s(XV);L8o=r($Gt,"PegasusTokenizer"),$Gt.forEach(t),y8o=r(Tq," or "),zV=n(Tq,"A",{href:!0});var kGt=s(zV);x8o=r(kGt,"PegasusTokenizerFast"),kGt.forEach(t),$8o=r(Tq," (Pegasus model)"),Tq.forEach(t),k8o=i(S),bl=n(S,"LI",{});var Mq=s(bl);r2e=n(Mq,"STRONG",{});var SGt=s(r2e);S8o=r(SGt,"pegasus_x"),SGt.forEach(t),R8o=r(Mq," \u2014 "),QV=n(Mq,"A",{href:!0});var RGt=s(QV);P8o=r(RGt,"PegasusTokenizer"),RGt.forEach(t),B8o=r(Mq," or "),WV=n(Mq,"A",{href:!0});var PGt=s(WV);I8o=r(PGt,"PegasusTokenizerFast"),PGt.forEach(t),N8o=r(Mq," (PEGASUS-X model)"),Mq.forEach(t),q8o=i(S),mp=n(S,"LI",{});var dVe=s(mp);t2e=n(dVe,"STRONG",{});var BGt=s(t2e);j8o=r(BGt,"perceiver"),BGt.forEach(t),D8o=r(dVe," \u2014 "),UV=n(dVe,"A",{href:!0});var IGt=s(UV);G8o=r(IGt,"PerceiverTokenizer"),IGt.forEach(t),O8o=r(dVe," (Perceiver model)"),dVe.forEach(t),V8o=i(S),cp=n(S,"LI",{});var mVe=s(cp);a2e=n(mVe,"STRONG",{});var NGt=s(a2e);X8o=r(NGt,"phobert"),NGt.forEach(t),z8o=r(mVe," \u2014 "),HV=n(mVe,"A",{href:!0});var qGt=s(HV);Q8o=r(qGt,"PhobertTokenizer"),qGt.forEach(t),W8o=r(mVe," (PhoBERT model)"),mVe.forEach(t),U8o=i(S),fp=n(S,"LI",{});var cVe=s(fp);n2e=n(cVe,"STRONG",{});var jGt=s(n2e);H8o=r(jGt,"plbart"),jGt.forEach(t),J8o=r(cVe," \u2014 "),JV=n(cVe,"A",{href:!0});var DGt=s(JV);Y8o=r(DGt,"PLBartTokenizer"),DGt.forEach(t),Z8o=r(cVe," (PLBart model)"),cVe.forEach(t),K8o=i(S),gp=n(S,"LI",{});var fVe=s(gp);s2e=n(fVe,"STRONG",{});var GGt=s(s2e);eLo=r(GGt,"prophetnet"),GGt.forEach(t),oLo=r(fVe," \u2014 "),YV=n(fVe,"A",{href:!0});var OGt=s(YV);rLo=r(OGt,"ProphetNetTokenizer"),OGt.forEach(t),tLo=r(fVe," (ProphetNet model)"),fVe.forEach(t),aLo=i(S),vl=n(S,"LI",{});var Eq=s(vl);l2e=n(Eq,"STRONG",{});var VGt=s(l2e);nLo=r(VGt,"qdqbert"),VGt.forEach(t),sLo=r(Eq," \u2014 "),ZV=n(Eq,"A",{href:!0});var XGt=s(ZV);lLo=r(XGt,"BertTokenizer"),XGt.forEach(t),iLo=r(Eq," or "),KV=n(Eq,"A",{href:!0});var zGt=s(KV);dLo=r(zGt,"BertTokenizerFast"),zGt.forEach(t),mLo=r(Eq," (QDQBert model)"),Eq.forEach(t),cLo=i(S),hp=n(S,"LI",{});var gVe=s(hp);i2e=n(gVe,"STRONG",{});var QGt=s(i2e);fLo=r(QGt,"rag"),QGt.forEach(t),gLo=r(gVe," \u2014 "),eX=n(gVe,"A",{href:!0});var WGt=s(eX);hLo=r(WGt,"RagTokenizer"),WGt.forEach(t),uLo=r(gVe," (RAG model)"),gVe.forEach(t),pLo=i(S),Fl=n(S,"LI",{});var Cq=s(Fl);d2e=n(Cq,"STRONG",{});var UGt=s(d2e);_Lo=r(UGt,"realm"),UGt.forEach(t),bLo=r(Cq," \u2014 "),oX=n(Cq,"A",{href:!0});var HGt=s(oX);vLo=r(HGt,"RealmTokenizer"),HGt.forEach(t),FLo=r(Cq," or "),rX=n(Cq,"A",{href:!0});var JGt=s(rX);TLo=r(JGt,"RealmTokenizerFast"),JGt.forEach(t),MLo=r(Cq," (REALM model)"),Cq.forEach(t),ELo=i(S),Tl=n(S,"LI",{});var wq=s(Tl);m2e=n(wq,"STRONG",{});var YGt=s(m2e);CLo=r(YGt,"reformer"),YGt.forEach(t),wLo=r(wq," \u2014 "),tX=n(wq,"A",{href:!0});var ZGt=s(tX);ALo=r(ZGt,"ReformerTokenizer"),ZGt.forEach(t),LLo=r(wq," or "),aX=n(wq,"A",{href:!0});var KGt=s(aX);yLo=r(KGt,"ReformerTokenizerFast"),KGt.forEach(t),xLo=r(wq," (Reformer model)"),wq.forEach(t),$Lo=i(S),Ml=n(S,"LI",{});var Aq=s(Ml);c2e=n(Aq,"STRONG",{});var eOt=s(c2e);kLo=r(eOt,"rembert"),eOt.forEach(t),SLo=r(Aq," \u2014 "),nX=n(Aq,"A",{href:!0});var oOt=s(nX);RLo=r(oOt,"RemBertTokenizer"),oOt.forEach(t),PLo=r(Aq," or "),sX=n(Aq,"A",{href:!0});var rOt=s(sX);BLo=r(rOt,"RemBertTokenizerFast"),rOt.forEach(t),ILo=r(Aq," (RemBERT model)"),Aq.forEach(t),NLo=i(S),El=n(S,"LI",{});var Lq=s(El);f2e=n(Lq,"STRONG",{});var tOt=s(f2e);qLo=r(tOt,"retribert"),tOt.forEach(t),jLo=r(Lq," \u2014 "),lX=n(Lq,"A",{href:!0});var aOt=s(lX);DLo=r(aOt,"RetriBertTokenizer"),aOt.forEach(t),GLo=r(Lq," or "),iX=n(Lq,"A",{href:!0});var nOt=s(iX);OLo=r(nOt,"RetriBertTokenizerFast"),nOt.forEach(t),VLo=r(Lq," (RetriBERT model)"),Lq.forEach(t),XLo=i(S),Cl=n(S,"LI",{});var yq=s(Cl);g2e=n(yq,"STRONG",{});var sOt=s(g2e);zLo=r(sOt,"roberta"),sOt.forEach(t),QLo=r(yq," \u2014 "),dX=n(yq,"A",{href:!0});var lOt=s(dX);WLo=r(lOt,"RobertaTokenizer"),lOt.forEach(t),ULo=r(yq," or "),mX=n(yq,"A",{href:!0});var iOt=s(mX);HLo=r(iOt,"RobertaTokenizerFast"),iOt.forEach(t),JLo=r(yq," (RoBERTa model)"),yq.forEach(t),YLo=i(S),up=n(S,"LI",{});var hVe=s(up);h2e=n(hVe,"STRONG",{});var dOt=s(h2e);ZLo=r(dOt,"roc_bert"),dOt.forEach(t),KLo=r(hVe," \u2014 "),cX=n(hVe,"A",{href:!0});var mOt=s(cX);eyo=r(mOt,"RoCBertTokenizer"),mOt.forEach(t),oyo=r(hVe," (RoCBert model)"),hVe.forEach(t),ryo=i(S),wl=n(S,"LI",{});var xq=s(wl);u2e=n(xq,"STRONG",{});var cOt=s(u2e);tyo=r(cOt,"roformer"),cOt.forEach(t),ayo=r(xq," \u2014 "),fX=n(xq,"A",{href:!0});var fOt=s(fX);nyo=r(fOt,"RoFormerTokenizer"),fOt.forEach(t),syo=r(xq," or "),gX=n(xq,"A",{href:!0});var gOt=s(gX);lyo=r(gOt,"RoFormerTokenizerFast"),gOt.forEach(t),iyo=r(xq," (RoFormer model)"),xq.forEach(t),dyo=i(S),pp=n(S,"LI",{});var uVe=s(pp);p2e=n(uVe,"STRONG",{});var hOt=s(p2e);myo=r(hOt,"speech_to_text"),hOt.forEach(t),cyo=r(uVe," \u2014 "),hX=n(uVe,"A",{href:!0});var uOt=s(hX);fyo=r(uOt,"Speech2TextTokenizer"),uOt.forEach(t),gyo=r(uVe," (Speech2Text model)"),uVe.forEach(t),hyo=i(S),_p=n(S,"LI",{});var pVe=s(_p);_2e=n(pVe,"STRONG",{});var pOt=s(_2e);uyo=r(pOt,"speech_to_text_2"),pOt.forEach(t),pyo=r(pVe," \u2014 "),uX=n(pVe,"A",{href:!0});var _Ot=s(uX);_yo=r(_Ot,"Speech2Text2Tokenizer"),_Ot.forEach(t),byo=r(pVe," (Speech2Text2 model)"),pVe.forEach(t),vyo=i(S),Al=n(S,"LI",{});var $q=s(Al);b2e=n($q,"STRONG",{});var bOt=s(b2e);Fyo=r(bOt,"splinter"),bOt.forEach(t),Tyo=r($q," \u2014 "),pX=n($q,"A",{href:!0});var vOt=s(pX);Myo=r(vOt,"SplinterTokenizer"),vOt.forEach(t),Eyo=r($q," or "),_X=n($q,"A",{href:!0});var FOt=s(_X);Cyo=r(FOt,"SplinterTokenizerFast"),FOt.forEach(t),wyo=r($q," (Splinter model)"),$q.forEach(t),Ayo=i(S),Ll=n(S,"LI",{});var kq=s(Ll);v2e=n(kq,"STRONG",{});var TOt=s(v2e);Lyo=r(TOt,"squeezebert"),TOt.forEach(t),yyo=r(kq," \u2014 "),bX=n(kq,"A",{href:!0});var MOt=s(bX);xyo=r(MOt,"SqueezeBertTokenizer"),MOt.forEach(t),$yo=r(kq," or "),vX=n(kq,"A",{href:!0});var EOt=s(vX);kyo=r(EOt,"SqueezeBertTokenizerFast"),EOt.forEach(t),Syo=r(kq," (SqueezeBERT model)"),kq.forEach(t),Ryo=i(S),yl=n(S,"LI",{});var Sq=s(yl);F2e=n(Sq,"STRONG",{});var COt=s(F2e);Pyo=r(COt,"switch_transformers"),COt.forEach(t),Byo=r(Sq," \u2014 "),FX=n(Sq,"A",{href:!0});var wOt=s(FX);Iyo=r(wOt,"T5Tokenizer"),wOt.forEach(t),Nyo=r(Sq," or "),TX=n(Sq,"A",{href:!0});var AOt=s(TX);qyo=r(AOt,"T5TokenizerFast"),AOt.forEach(t),jyo=r(Sq," (SwitchTransformers model)"),Sq.forEach(t),Dyo=i(S),xl=n(S,"LI",{});var Rq=s(xl);T2e=n(Rq,"STRONG",{});var LOt=s(T2e);Gyo=r(LOt,"t5"),LOt.forEach(t),Oyo=r(Rq," \u2014 "),MX=n(Rq,"A",{href:!0});var yOt=s(MX);Vyo=r(yOt,"T5Tokenizer"),yOt.forEach(t),Xyo=r(Rq," or "),EX=n(Rq,"A",{href:!0});var xOt=s(EX);zyo=r(xOt,"T5TokenizerFast"),xOt.forEach(t),Qyo=r(Rq," (T5 model)"),Rq.forEach(t),Wyo=i(S),bp=n(S,"LI",{});var _Ve=s(bp);M2e=n(_Ve,"STRONG",{});var $Ot=s(M2e);Uyo=r($Ot,"tapas"),$Ot.forEach(t),Hyo=r(_Ve," \u2014 "),CX=n(_Ve,"A",{href:!0});var kOt=s(CX);Jyo=r(kOt,"TapasTokenizer"),kOt.forEach(t),Yyo=r(_Ve," (TAPAS model)"),_Ve.forEach(t),Zyo=i(S),vp=n(S,"LI",{});var bVe=s(vp);E2e=n(bVe,"STRONG",{});var SOt=s(E2e);Kyo=r(SOt,"tapex"),SOt.forEach(t),e9o=r(bVe," \u2014 "),wX=n(bVe,"A",{href:!0});var ROt=s(wX);o9o=r(ROt,"TapexTokenizer"),ROt.forEach(t),r9o=r(bVe," (TAPEX model)"),bVe.forEach(t),t9o=i(S),Fp=n(S,"LI",{});var vVe=s(Fp);C2e=n(vVe,"STRONG",{});var POt=s(C2e);a9o=r(POt,"transfo-xl"),POt.forEach(t),n9o=r(vVe," \u2014 "),AX=n(vVe,"A",{href:!0});var BOt=s(AX);s9o=r(BOt,"TransfoXLTokenizer"),BOt.forEach(t),l9o=r(vVe," (Transformer-XL model)"),vVe.forEach(t),i9o=i(S),$l=n(S,"LI",{});var Pq=s($l);w2e=n(Pq,"STRONG",{});var IOt=s(w2e);d9o=r(IOt,"vilt"),IOt.forEach(t),m9o=r(Pq," \u2014 "),LX=n(Pq,"A",{href:!0});var NOt=s(LX);c9o=r(NOt,"BertTokenizer"),NOt.forEach(t),f9o=r(Pq," or "),yX=n(Pq,"A",{href:!0});var qOt=s(yX);g9o=r(qOt,"BertTokenizerFast"),qOt.forEach(t),h9o=r(Pq," (ViLT model)"),Pq.forEach(t),u9o=i(S),kl=n(S,"LI",{});var Bq=s(kl);A2e=n(Bq,"STRONG",{});var jOt=s(A2e);p9o=r(jOt,"visual_bert"),jOt.forEach(t),_9o=r(Bq," \u2014 "),xX=n(Bq,"A",{href:!0});var DOt=s(xX);b9o=r(DOt,"BertTokenizer"),DOt.forEach(t),v9o=r(Bq," or "),$X=n(Bq,"A",{href:!0});var GOt=s($X);F9o=r(GOt,"BertTokenizerFast"),GOt.forEach(t),T9o=r(Bq," (VisualBERT model)"),Bq.forEach(t),M9o=i(S),Tp=n(S,"LI",{});var FVe=s(Tp);L2e=n(FVe,"STRONG",{});var OOt=s(L2e);E9o=r(OOt,"wav2vec2"),OOt.forEach(t),C9o=r(FVe," \u2014 "),kX=n(FVe,"A",{href:!0});var VOt=s(kX);w9o=r(VOt,"Wav2Vec2CTCTokenizer"),VOt.forEach(t),A9o=r(FVe," (Wav2Vec2 model)"),FVe.forEach(t),L9o=i(S),Mp=n(S,"LI",{});var TVe=s(Mp);y2e=n(TVe,"STRONG",{});var XOt=s(y2e);y9o=r(XOt,"wav2vec2-conformer"),XOt.forEach(t),x9o=r(TVe," \u2014 "),SX=n(TVe,"A",{href:!0});var zOt=s(SX);$9o=r(zOt,"Wav2Vec2CTCTokenizer"),zOt.forEach(t),k9o=r(TVe," (Wav2Vec2-Conformer model)"),TVe.forEach(t),S9o=i(S),Ep=n(S,"LI",{});var MVe=s(Ep);x2e=n(MVe,"STRONG",{});var QOt=s(x2e);R9o=r(QOt,"wav2vec2_phoneme"),QOt.forEach(t),P9o=r(MVe," \u2014 "),RX=n(MVe,"A",{href:!0});var WOt=s(RX);B9o=r(WOt,"Wav2Vec2PhonemeCTCTokenizer"),WOt.forEach(t),I9o=r(MVe," (Wav2Vec2Phoneme model)"),MVe.forEach(t),N9o=i(S),Cp=n(S,"LI",{});var EVe=s(Cp);$2e=n(EVe,"STRONG",{});var UOt=s($2e);q9o=r(UOt,"whisper"),UOt.forEach(t),j9o=r(EVe," \u2014 "),PX=n(EVe,"A",{href:!0});var HOt=s(PX);D9o=r(HOt,"WhisperTokenizer"),HOt.forEach(t),G9o=r(EVe," (Whisper model)"),EVe.forEach(t),O9o=i(S),Sl=n(S,"LI",{});var Iq=s(Sl);k2e=n(Iq,"STRONG",{});var JOt=s(k2e);V9o=r(JOt,"xclip"),JOt.forEach(t),X9o=r(Iq," \u2014 "),BX=n(Iq,"A",{href:!0});var YOt=s(BX);z9o=r(YOt,"CLIPTokenizer"),YOt.forEach(t),Q9o=r(Iq," or "),IX=n(Iq,"A",{href:!0});var ZOt=s(IX);W9o=r(ZOt,"CLIPTokenizerFast"),ZOt.forEach(t),U9o=r(Iq," (X-CLIP model)"),Iq.forEach(t),H9o=i(S),Rl=n(S,"LI",{});var Nq=s(Rl);S2e=n(Nq,"STRONG",{});var KOt=s(S2e);J9o=r(KOt,"xglm"),KOt.forEach(t),Y9o=r(Nq," \u2014 "),NX=n(Nq,"A",{href:!0});var eVt=s(NX);Z9o=r(eVt,"XGLMTokenizer"),eVt.forEach(t),K9o=r(Nq," or "),qX=n(Nq,"A",{href:!0});var oVt=s(qX);exo=r(oVt,"XGLMTokenizerFast"),oVt.forEach(t),oxo=r(Nq," (XGLM model)"),Nq.forEach(t),rxo=i(S),wp=n(S,"LI",{});var CVe=s(wp);R2e=n(CVe,"STRONG",{});var rVt=s(R2e);txo=r(rVt,"xlm"),rVt.forEach(t),axo=r(CVe," \u2014 "),jX=n(CVe,"A",{href:!0});var tVt=s(jX);nxo=r(tVt,"XLMTokenizer"),tVt.forEach(t),sxo=r(CVe," (XLM model)"),CVe.forEach(t),lxo=i(S),Ap=n(S,"LI",{});var wVe=s(Ap);P2e=n(wVe,"STRONG",{});var aVt=s(P2e);ixo=r(aVt,"xlm-prophetnet"),aVt.forEach(t),dxo=r(wVe," \u2014 "),DX=n(wVe,"A",{href:!0});var nVt=s(DX);mxo=r(nVt,"XLMProphetNetTokenizer"),nVt.forEach(t),cxo=r(wVe," (XLM-ProphetNet model)"),wVe.forEach(t),fxo=i(S),Pl=n(S,"LI",{});var qq=s(Pl);B2e=n(qq,"STRONG",{});var sVt=s(B2e);gxo=r(sVt,"xlm-roberta"),sVt.forEach(t),hxo=r(qq," \u2014 "),GX=n(qq,"A",{href:!0});var lVt=s(GX);uxo=r(lVt,"XLMRobertaTokenizer"),lVt.forEach(t),pxo=r(qq," or "),OX=n(qq,"A",{href:!0});var iVt=s(OX);_xo=r(iVt,"XLMRobertaTokenizerFast"),iVt.forEach(t),bxo=r(qq," (XLM-RoBERTa model)"),qq.forEach(t),vxo=i(S),Bl=n(S,"LI",{});var jq=s(Bl);I2e=n(jq,"STRONG",{});var dVt=s(I2e);Fxo=r(dVt,"xlm-roberta-xl"),dVt.forEach(t),Txo=r(jq," \u2014 "),VX=n(jq,"A",{href:!0});var mVt=s(VX);Mxo=r(mVt,"XLMRobertaTokenizer"),mVt.forEach(t),Exo=r(jq," or "),XX=n(jq,"A",{href:!0});var cVt=s(XX);Cxo=r(cVt,"XLMRobertaTokenizerFast"),cVt.forEach(t),wxo=r(jq," (XLM-RoBERTa-XL model)"),jq.forEach(t),Axo=i(S),Il=n(S,"LI",{});var Dq=s(Il);N2e=n(Dq,"STRONG",{});var fVt=s(N2e);Lxo=r(fVt,"xlnet"),fVt.forEach(t),yxo=r(Dq," \u2014 "),zX=n(Dq,"A",{href:!0});var gVt=s(zX);xxo=r(gVt,"XLNetTokenizer"),gVt.forEach(t),$xo=r(Dq," or "),QX=n(Dq,"A",{href:!0});var hVt=s(QX);kxo=r(hVt,"XLNetTokenizerFast"),hVt.forEach(t),Sxo=r(Dq," (XLNet model)"),Dq.forEach(t),Rxo=i(S),Nl=n(S,"LI",{});var Gq=s(Nl);q2e=n(Gq,"STRONG",{});var uVt=s(q2e);Pxo=r(uVt,"yoso"),uVt.forEach(t),Bxo=r(Gq," \u2014 "),WX=n(Gq,"A",{href:!0});var pVt=s(WX);Ixo=r(pVt,"AlbertTokenizer"),pVt.forEach(t),Nxo=r(Gq," or "),UX=n(Gq,"A",{href:!0});var _Vt=s(UX);qxo=r(_Vt,"AlbertTokenizerFast"),_Vt.forEach(t),jxo=r(Gq," (YOSO model)"),Gq.forEach(t),S.forEach(t),Dxo=i(Xl),T(Lp.$$.fragment,Xl),Xl.forEach(t),Gxo=i(Vl),yp=n(Vl,"DIV",{class:!0});var Vmo=s(yp);T(jk.$$.fragment,Vmo),Oxo=i(Vmo),j2e=n(Vmo,"P",{});var bVt=s(j2e);Vxo=r(bVt,"Register a new tokenizer in this mapping."),bVt.forEach(t),Vmo.forEach(t),Vl.forEach(t),yio=i(c),qd=n(c,"H2",{class:!0});var Xmo=s(qd);xp=n(Xmo,"A",{id:!0,class:!0,href:!0});var vVt=s(xp);D2e=n(vVt,"SPAN",{});var FVt=s(D2e);T(Dk.$$.fragment,FVt),FVt.forEach(t),vVt.forEach(t),Xxo=i(Xmo),G2e=n(Xmo,"SPAN",{});var TVt=s(G2e);zxo=r(TVt,"AutoFeatureExtractor"),TVt.forEach(t),Xmo.forEach(t),xio=i(c),No=n(c,"DIV",{class:!0});var zl=s(No);T(Gk.$$.fragment,zl),Qxo=i(zl),Ok=n(zl,"P",{});var zmo=s(Ok);Wxo=r(zmo,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HX=n(zmo,"A",{href:!0});var MVt=s(HX);Uxo=r(MVt,"AutoFeatureExtractor.from_pretrained()"),MVt.forEach(t),Hxo=r(zmo," class method."),zmo.forEach(t),Jxo=i(zl),Vk=n(zl,"P",{});var Qmo=s(Vk);Yxo=r(Qmo,"This class cannot be instantiated directly using "),O2e=n(Qmo,"CODE",{});var EVt=s(O2e);Zxo=r(EVt,"__init__()"),EVt.forEach(t),Kxo=r(Qmo," (throws an error)."),Qmo.forEach(t),e$o=i(zl),eo=n(zl,"DIV",{class:!0});var xa=s(eo);T(Xk.$$.fragment,xa),o$o=i(xa),V2e=n(xa,"P",{});var CVt=s(V2e);r$o=r(CVt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),CVt.forEach(t),t$o=i(xa),cn=n(xa,"P",{});var ux=s(cn);a$o=r(ux,"The feature extractor class to instantiate is selected based on the "),X2e=n(ux,"CODE",{});var wVt=s(X2e);n$o=r(wVt,"model_type"),wVt.forEach(t),s$o=r(ux,` property of the config object
(either passed as an argument or loaded from `),z2e=n(ux,"CODE",{});var AVt=s(z2e);l$o=r(AVt,"pretrained_model_name_or_path"),AVt.forEach(t),i$o=r(ux,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Q2e=n(ux,"CODE",{});var LVt=s(Q2e);d$o=r(LVt,"pretrained_model_name_or_path"),LVt.forEach(t),m$o=r(ux,":"),ux.forEach(t),c$o=i(xa),z=n(xa,"UL",{});var Q=s(z);$p=n(Q,"LI",{});var AVe=s($p);W2e=n(AVe,"STRONG",{});var yVt=s(W2e);f$o=r(yVt,"beit"),yVt.forEach(t),g$o=r(AVe," \u2014 "),JX=n(AVe,"A",{href:!0});var xVt=s(JX);h$o=r(xVt,"BeitFeatureExtractor"),xVt.forEach(t),u$o=r(AVe," (BEiT model)"),AVe.forEach(t),p$o=i(Q),kp=n(Q,"LI",{});var LVe=s(kp);U2e=n(LVe,"STRONG",{});var $Vt=s(U2e);_$o=r($Vt,"clip"),$Vt.forEach(t),b$o=r(LVe," \u2014 "),YX=n(LVe,"A",{href:!0});var kVt=s(YX);v$o=r(kVt,"CLIPFeatureExtractor"),kVt.forEach(t),F$o=r(LVe," (CLIP model)"),LVe.forEach(t),T$o=i(Q),Sp=n(Q,"LI",{});var yVe=s(Sp);H2e=n(yVe,"STRONG",{});var SVt=s(H2e);M$o=r(SVt,"clipseg"),SVt.forEach(t),E$o=r(yVe," \u2014 "),ZX=n(yVe,"A",{href:!0});var RVt=s(ZX);C$o=r(RVt,"ViTFeatureExtractor"),RVt.forEach(t),w$o=r(yVe," (CLIPSeg model)"),yVe.forEach(t),A$o=i(Q),Rp=n(Q,"LI",{});var xVe=s(Rp);J2e=n(xVe,"STRONG",{});var PVt=s(J2e);L$o=r(PVt,"conditional_detr"),PVt.forEach(t),y$o=r(xVe," \u2014 "),KX=n(xVe,"A",{href:!0});var BVt=s(KX);x$o=r(BVt,"ConditionalDetrFeatureExtractor"),BVt.forEach(t),$$o=r(xVe," (Conditional DETR model)"),xVe.forEach(t),k$o=i(Q),Pp=n(Q,"LI",{});var $Ve=s(Pp);Y2e=n($Ve,"STRONG",{});var IVt=s(Y2e);S$o=r(IVt,"convnext"),IVt.forEach(t),R$o=r($Ve," \u2014 "),ez=n($Ve,"A",{href:!0});var NVt=s(ez);P$o=r(NVt,"ConvNextFeatureExtractor"),NVt.forEach(t),B$o=r($Ve," (ConvNeXT model)"),$Ve.forEach(t),I$o=i(Q),Bp=n(Q,"LI",{});var kVe=s(Bp);Z2e=n(kVe,"STRONG",{});var qVt=s(Z2e);N$o=r(qVt,"cvt"),qVt.forEach(t),q$o=r(kVe," \u2014 "),oz=n(kVe,"A",{href:!0});var jVt=s(oz);j$o=r(jVt,"ConvNextFeatureExtractor"),jVt.forEach(t),D$o=r(kVe," (CvT model)"),kVe.forEach(t),G$o=i(Q),Ip=n(Q,"LI",{});var SVe=s(Ip);K2e=n(SVe,"STRONG",{});var DVt=s(K2e);O$o=r(DVt,"data2vec-audio"),DVt.forEach(t),V$o=r(SVe," \u2014 "),rz=n(SVe,"A",{href:!0});var GVt=s(rz);X$o=r(GVt,"Wav2Vec2FeatureExtractor"),GVt.forEach(t),z$o=r(SVe," (Data2VecAudio model)"),SVe.forEach(t),Q$o=i(Q),Np=n(Q,"LI",{});var RVe=s(Np);ebe=n(RVe,"STRONG",{});var OVt=s(ebe);W$o=r(OVt,"data2vec-vision"),OVt.forEach(t),U$o=r(RVe," \u2014 "),tz=n(RVe,"A",{href:!0});var VVt=s(tz);H$o=r(VVt,"BeitFeatureExtractor"),VVt.forEach(t),J$o=r(RVe," (Data2VecVision model)"),RVe.forEach(t),Y$o=i(Q),qp=n(Q,"LI",{});var PVe=s(qp);obe=n(PVe,"STRONG",{});var XVt=s(obe);Z$o=r(XVt,"deformable_detr"),XVt.forEach(t),K$o=r(PVe," \u2014 "),az=n(PVe,"A",{href:!0});var zVt=s(az);eko=r(zVt,"DeformableDetrFeatureExtractor"),zVt.forEach(t),oko=r(PVe," (Deformable DETR model)"),PVe.forEach(t),rko=i(Q),jp=n(Q,"LI",{});var BVe=s(jp);rbe=n(BVe,"STRONG",{});var QVt=s(rbe);tko=r(QVt,"deit"),QVt.forEach(t),ako=r(BVe," \u2014 "),nz=n(BVe,"A",{href:!0});var WVt=s(nz);nko=r(WVt,"DeiTFeatureExtractor"),WVt.forEach(t),sko=r(BVe," (DeiT model)"),BVe.forEach(t),lko=i(Q),Dp=n(Q,"LI",{});var IVe=s(Dp);tbe=n(IVe,"STRONG",{});var UVt=s(tbe);iko=r(UVt,"detr"),UVt.forEach(t),dko=r(IVe," \u2014 "),sz=n(IVe,"A",{href:!0});var HVt=s(sz);mko=r(HVt,"DetrFeatureExtractor"),HVt.forEach(t),cko=r(IVe," (DETR model)"),IVe.forEach(t),fko=i(Q),Gp=n(Q,"LI",{});var NVe=s(Gp);abe=n(NVe,"STRONG",{});var JVt=s(abe);gko=r(JVt,"donut-swin"),JVt.forEach(t),hko=r(NVe," \u2014 "),lz=n(NVe,"A",{href:!0});var YVt=s(lz);uko=r(YVt,"DonutFeatureExtractor"),YVt.forEach(t),pko=r(NVe," (DonutSwin model)"),NVe.forEach(t),_ko=i(Q),Op=n(Q,"LI",{});var qVe=s(Op);nbe=n(qVe,"STRONG",{});var ZVt=s(nbe);bko=r(ZVt,"dpt"),ZVt.forEach(t),vko=r(qVe," \u2014 "),iz=n(qVe,"A",{href:!0});var KVt=s(iz);Fko=r(KVt,"DPTFeatureExtractor"),KVt.forEach(t),Tko=r(qVe," (DPT model)"),qVe.forEach(t),Mko=i(Q),Vp=n(Q,"LI",{});var jVe=s(Vp);sbe=n(jVe,"STRONG",{});var eXt=s(sbe);Eko=r(eXt,"flava"),eXt.forEach(t),Cko=r(jVe," \u2014 "),dz=n(jVe,"A",{href:!0});var oXt=s(dz);wko=r(oXt,"FlavaFeatureExtractor"),oXt.forEach(t),Ako=r(jVe," (FLAVA model)"),jVe.forEach(t),Lko=i(Q),Xp=n(Q,"LI",{});var DVe=s(Xp);lbe=n(DVe,"STRONG",{});var rXt=s(lbe);yko=r(rXt,"glpn"),rXt.forEach(t),xko=r(DVe," \u2014 "),mz=n(DVe,"A",{href:!0});var tXt=s(mz);$ko=r(tXt,"GLPNFeatureExtractor"),tXt.forEach(t),kko=r(DVe," (GLPN model)"),DVe.forEach(t),Sko=i(Q),zp=n(Q,"LI",{});var GVe=s(zp);ibe=n(GVe,"STRONG",{});var aXt=s(ibe);Rko=r(aXt,"groupvit"),aXt.forEach(t),Pko=r(GVe," \u2014 "),cz=n(GVe,"A",{href:!0});var nXt=s(cz);Bko=r(nXt,"CLIPFeatureExtractor"),nXt.forEach(t),Iko=r(GVe," (GroupViT model)"),GVe.forEach(t),Nko=i(Q),Qp=n(Q,"LI",{});var OVe=s(Qp);dbe=n(OVe,"STRONG",{});var sXt=s(dbe);qko=r(sXt,"hubert"),sXt.forEach(t),jko=r(OVe," \u2014 "),fz=n(OVe,"A",{href:!0});var lXt=s(fz);Dko=r(lXt,"Wav2Vec2FeatureExtractor"),lXt.forEach(t),Gko=r(OVe," (Hubert model)"),OVe.forEach(t),Oko=i(Q),Wp=n(Q,"LI",{});var VVe=s(Wp);mbe=n(VVe,"STRONG",{});var iXt=s(mbe);Vko=r(iXt,"imagegpt"),iXt.forEach(t),Xko=r(VVe," \u2014 "),gz=n(VVe,"A",{href:!0});var dXt=s(gz);zko=r(dXt,"ImageGPTFeatureExtractor"),dXt.forEach(t),Qko=r(VVe," (ImageGPT model)"),VVe.forEach(t),Wko=i(Q),Up=n(Q,"LI",{});var XVe=s(Up);cbe=n(XVe,"STRONG",{});var mXt=s(cbe);Uko=r(mXt,"layoutlmv2"),mXt.forEach(t),Hko=r(XVe," \u2014 "),hz=n(XVe,"A",{href:!0});var cXt=s(hz);Jko=r(cXt,"LayoutLMv2FeatureExtractor"),cXt.forEach(t),Yko=r(XVe," (LayoutLMv2 model)"),XVe.forEach(t),Zko=i(Q),Hp=n(Q,"LI",{});var zVe=s(Hp);fbe=n(zVe,"STRONG",{});var fXt=s(fbe);Kko=r(fXt,"layoutlmv3"),fXt.forEach(t),eSo=r(zVe," \u2014 "),uz=n(zVe,"A",{href:!0});var gXt=s(uz);oSo=r(gXt,"LayoutLMv3FeatureExtractor"),gXt.forEach(t),rSo=r(zVe," (LayoutLMv3 model)"),zVe.forEach(t),tSo=i(Q),Jp=n(Q,"LI",{});var QVe=s(Jp);gbe=n(QVe,"STRONG",{});var hXt=s(gbe);aSo=r(hXt,"levit"),hXt.forEach(t),nSo=r(QVe," \u2014 "),pz=n(QVe,"A",{href:!0});var uXt=s(pz);sSo=r(uXt,"LevitFeatureExtractor"),uXt.forEach(t),lSo=r(QVe," (LeViT model)"),QVe.forEach(t),iSo=i(Q),Yp=n(Q,"LI",{});var WVe=s(Yp);hbe=n(WVe,"STRONG",{});var pXt=s(hbe);dSo=r(pXt,"maskformer"),pXt.forEach(t),mSo=r(WVe," \u2014 "),_z=n(WVe,"A",{href:!0});var _Xt=s(_z);cSo=r(_Xt,"MaskFormerFeatureExtractor"),_Xt.forEach(t),fSo=r(WVe," (MaskFormer model)"),WVe.forEach(t),gSo=i(Q),Zp=n(Q,"LI",{});var UVe=s(Zp);ube=n(UVe,"STRONG",{});var bXt=s(ube);hSo=r(bXt,"mctct"),bXt.forEach(t),uSo=r(UVe," \u2014 "),bz=n(UVe,"A",{href:!0});var vXt=s(bz);pSo=r(vXt,"MCTCTFeatureExtractor"),vXt.forEach(t),_So=r(UVe," (M-CTC-T model)"),UVe.forEach(t),bSo=i(Q),Kp=n(Q,"LI",{});var HVe=s(Kp);pbe=n(HVe,"STRONG",{});var FXt=s(pbe);vSo=r(FXt,"mobilenet_v2"),FXt.forEach(t),FSo=r(HVe," \u2014 "),vz=n(HVe,"A",{href:!0});var TXt=s(vz);TSo=r(TXt,"MobileNetV2FeatureExtractor"),TXt.forEach(t),MSo=r(HVe," (MobileNetV2 model)"),HVe.forEach(t),ESo=i(Q),e_=n(Q,"LI",{});var JVe=s(e_);_be=n(JVe,"STRONG",{});var MXt=s(_be);CSo=r(MXt,"mobilevit"),MXt.forEach(t),wSo=r(JVe," \u2014 "),Fz=n(JVe,"A",{href:!0});var EXt=s(Fz);ASo=r(EXt,"MobileViTFeatureExtractor"),EXt.forEach(t),LSo=r(JVe," (MobileViT model)"),JVe.forEach(t),ySo=i(Q),o_=n(Q,"LI",{});var YVe=s(o_);bbe=n(YVe,"STRONG",{});var CXt=s(bbe);xSo=r(CXt,"owlvit"),CXt.forEach(t),$So=r(YVe," \u2014 "),Tz=n(YVe,"A",{href:!0});var wXt=s(Tz);kSo=r(wXt,"OwlViTFeatureExtractor"),wXt.forEach(t),SSo=r(YVe," (OWL-ViT model)"),YVe.forEach(t),RSo=i(Q),r_=n(Q,"LI",{});var ZVe=s(r_);vbe=n(ZVe,"STRONG",{});var AXt=s(vbe);PSo=r(AXt,"perceiver"),AXt.forEach(t),BSo=r(ZVe," \u2014 "),Mz=n(ZVe,"A",{href:!0});var LXt=s(Mz);ISo=r(LXt,"PerceiverFeatureExtractor"),LXt.forEach(t),NSo=r(ZVe," (Perceiver model)"),ZVe.forEach(t),qSo=i(Q),t_=n(Q,"LI",{});var KVe=s(t_);Fbe=n(KVe,"STRONG",{});var yXt=s(Fbe);jSo=r(yXt,"poolformer"),yXt.forEach(t),DSo=r(KVe," \u2014 "),Ez=n(KVe,"A",{href:!0});var xXt=s(Ez);GSo=r(xXt,"PoolFormerFeatureExtractor"),xXt.forEach(t),OSo=r(KVe," (PoolFormer model)"),KVe.forEach(t),VSo=i(Q),a_=n(Q,"LI",{});var eXe=s(a_);Tbe=n(eXe,"STRONG",{});var $Xt=s(Tbe);XSo=r($Xt,"regnet"),$Xt.forEach(t),zSo=r(eXe," \u2014 "),Cz=n(eXe,"A",{href:!0});var kXt=s(Cz);QSo=r(kXt,"ConvNextFeatureExtractor"),kXt.forEach(t),WSo=r(eXe," (RegNet model)"),eXe.forEach(t),USo=i(Q),n_=n(Q,"LI",{});var oXe=s(n_);Mbe=n(oXe,"STRONG",{});var SXt=s(Mbe);HSo=r(SXt,"resnet"),SXt.forEach(t),JSo=r(oXe," \u2014 "),wz=n(oXe,"A",{href:!0});var RXt=s(wz);YSo=r(RXt,"ConvNextFeatureExtractor"),RXt.forEach(t),ZSo=r(oXe," (ResNet model)"),oXe.forEach(t),KSo=i(Q),s_=n(Q,"LI",{});var rXe=s(s_);Ebe=n(rXe,"STRONG",{});var PXt=s(Ebe);eRo=r(PXt,"segformer"),PXt.forEach(t),oRo=r(rXe," \u2014 "),Az=n(rXe,"A",{href:!0});var BXt=s(Az);rRo=r(BXt,"SegformerFeatureExtractor"),BXt.forEach(t),tRo=r(rXe," (SegFormer model)"),rXe.forEach(t),aRo=i(Q),l_=n(Q,"LI",{});var tXe=s(l_);Cbe=n(tXe,"STRONG",{});var IXt=s(Cbe);nRo=r(IXt,"speech_to_text"),IXt.forEach(t),sRo=r(tXe," \u2014 "),Lz=n(tXe,"A",{href:!0});var NXt=s(Lz);lRo=r(NXt,"Speech2TextFeatureExtractor"),NXt.forEach(t),iRo=r(tXe," (Speech2Text model)"),tXe.forEach(t),dRo=i(Q),i_=n(Q,"LI",{});var aXe=s(i_);wbe=n(aXe,"STRONG",{});var qXt=s(wbe);mRo=r(qXt,"swin"),qXt.forEach(t),cRo=r(aXe," \u2014 "),yz=n(aXe,"A",{href:!0});var jXt=s(yz);fRo=r(jXt,"ViTFeatureExtractor"),jXt.forEach(t),gRo=r(aXe," (Swin Transformer model)"),aXe.forEach(t),hRo=i(Q),d_=n(Q,"LI",{});var nXe=s(d_);Abe=n(nXe,"STRONG",{});var DXt=s(Abe);uRo=r(DXt,"swinv2"),DXt.forEach(t),pRo=r(nXe," \u2014 "),xz=n(nXe,"A",{href:!0});var GXt=s(xz);_Ro=r(GXt,"ViTFeatureExtractor"),GXt.forEach(t),bRo=r(nXe," (Swin Transformer V2 model)"),nXe.forEach(t),vRo=i(Q),m_=n(Q,"LI",{});var sXe=s(m_);Lbe=n(sXe,"STRONG",{});var OXt=s(Lbe);FRo=r(OXt,"table-transformer"),OXt.forEach(t),TRo=r(sXe," \u2014 "),$z=n(sXe,"A",{href:!0});var VXt=s($z);MRo=r(VXt,"DetrFeatureExtractor"),VXt.forEach(t),ERo=r(sXe," (Table Transformer model)"),sXe.forEach(t),CRo=i(Q),c_=n(Q,"LI",{});var lXe=s(c_);ybe=n(lXe,"STRONG",{});var XXt=s(ybe);wRo=r(XXt,"van"),XXt.forEach(t),ARo=r(lXe," \u2014 "),kz=n(lXe,"A",{href:!0});var zXt=s(kz);LRo=r(zXt,"ConvNextFeatureExtractor"),zXt.forEach(t),yRo=r(lXe," (VAN model)"),lXe.forEach(t),xRo=i(Q),f_=n(Q,"LI",{});var iXe=s(f_);xbe=n(iXe,"STRONG",{});var QXt=s(xbe);$Ro=r(QXt,"videomae"),QXt.forEach(t),kRo=r(iXe," \u2014 "),Sz=n(iXe,"A",{href:!0});var WXt=s(Sz);SRo=r(WXt,"VideoMAEFeatureExtractor"),WXt.forEach(t),RRo=r(iXe," (VideoMAE model)"),iXe.forEach(t),PRo=i(Q),g_=n(Q,"LI",{});var dXe=s(g_);$be=n(dXe,"STRONG",{});var UXt=s($be);BRo=r(UXt,"vilt"),UXt.forEach(t),IRo=r(dXe," \u2014 "),Rz=n(dXe,"A",{href:!0});var HXt=s(Rz);NRo=r(HXt,"ViltFeatureExtractor"),HXt.forEach(t),qRo=r(dXe," (ViLT model)"),dXe.forEach(t),jRo=i(Q),h_=n(Q,"LI",{});var mXe=s(h_);kbe=n(mXe,"STRONG",{});var JXt=s(kbe);DRo=r(JXt,"vit"),JXt.forEach(t),GRo=r(mXe," \u2014 "),Pz=n(mXe,"A",{href:!0});var YXt=s(Pz);ORo=r(YXt,"ViTFeatureExtractor"),YXt.forEach(t),VRo=r(mXe," (ViT model)"),mXe.forEach(t),XRo=i(Q),u_=n(Q,"LI",{});var cXe=s(u_);Sbe=n(cXe,"STRONG",{});var ZXt=s(Sbe);zRo=r(ZXt,"vit_mae"),ZXt.forEach(t),QRo=r(cXe," \u2014 "),Bz=n(cXe,"A",{href:!0});var KXt=s(Bz);WRo=r(KXt,"ViTFeatureExtractor"),KXt.forEach(t),URo=r(cXe," (ViTMAE model)"),cXe.forEach(t),HRo=i(Q),p_=n(Q,"LI",{});var fXe=s(p_);Rbe=n(fXe,"STRONG",{});var ezt=s(Rbe);JRo=r(ezt,"vit_msn"),ezt.forEach(t),YRo=r(fXe," \u2014 "),Iz=n(fXe,"A",{href:!0});var ozt=s(Iz);ZRo=r(ozt,"ViTFeatureExtractor"),ozt.forEach(t),KRo=r(fXe," (ViTMSN model)"),fXe.forEach(t),ePo=i(Q),__=n(Q,"LI",{});var gXe=s(__);Pbe=n(gXe,"STRONG",{});var rzt=s(Pbe);oPo=r(rzt,"wav2vec2"),rzt.forEach(t),rPo=r(gXe," \u2014 "),Nz=n(gXe,"A",{href:!0});var tzt=s(Nz);tPo=r(tzt,"Wav2Vec2FeatureExtractor"),tzt.forEach(t),aPo=r(gXe," (Wav2Vec2 model)"),gXe.forEach(t),nPo=i(Q),b_=n(Q,"LI",{});var hXe=s(b_);Bbe=n(hXe,"STRONG",{});var azt=s(Bbe);sPo=r(azt,"wav2vec2-conformer"),azt.forEach(t),lPo=r(hXe," \u2014 "),qz=n(hXe,"A",{href:!0});var nzt=s(qz);iPo=r(nzt,"Wav2Vec2FeatureExtractor"),nzt.forEach(t),dPo=r(hXe," (Wav2Vec2-Conformer model)"),hXe.forEach(t),mPo=i(Q),v_=n(Q,"LI",{});var uXe=s(v_);Ibe=n(uXe,"STRONG",{});var szt=s(Ibe);cPo=r(szt,"whisper"),szt.forEach(t),fPo=r(uXe," \u2014 "),jz=n(uXe,"A",{href:!0});var lzt=s(jz);gPo=r(lzt,"WhisperFeatureExtractor"),lzt.forEach(t),hPo=r(uXe," (Whisper model)"),uXe.forEach(t),uPo=i(Q),F_=n(Q,"LI",{});var pXe=s(F_);Nbe=n(pXe,"STRONG",{});var izt=s(Nbe);pPo=r(izt,"xclip"),izt.forEach(t),_Po=r(pXe," \u2014 "),Dz=n(pXe,"A",{href:!0});var dzt=s(Dz);bPo=r(dzt,"CLIPFeatureExtractor"),dzt.forEach(t),vPo=r(pXe," (X-CLIP model)"),pXe.forEach(t),FPo=i(Q),T_=n(Q,"LI",{});var _Xe=s(T_);qbe=n(_Xe,"STRONG",{});var mzt=s(qbe);TPo=r(mzt,"yolos"),mzt.forEach(t),MPo=r(_Xe," \u2014 "),Gz=n(_Xe,"A",{href:!0});var czt=s(Gz);EPo=r(czt,"YolosFeatureExtractor"),czt.forEach(t),CPo=r(_Xe," (YOLOS model)"),_Xe.forEach(t),Q.forEach(t),wPo=i(xa),T(M_.$$.fragment,xa),APo=i(xa),T(E_.$$.fragment,xa),xa.forEach(t),LPo=i(zl),C_=n(zl,"DIV",{class:!0});var Wmo=s(C_);T(zk.$$.fragment,Wmo),yPo=i(Wmo),jbe=n(Wmo,"P",{});var fzt=s(jbe);xPo=r(fzt,"Register a new feature extractor for this class."),fzt.forEach(t),Wmo.forEach(t),zl.forEach(t),$io=i(c),jd=n(c,"H2",{class:!0});var Umo=s(jd);w_=n(Umo,"A",{id:!0,class:!0,href:!0});var gzt=s(w_);Dbe=n(gzt,"SPAN",{});var hzt=s(Dbe);T(Qk.$$.fragment,hzt),hzt.forEach(t),gzt.forEach(t),$Po=i(Umo),Gbe=n(Umo,"SPAN",{});var uzt=s(Gbe);kPo=r(uzt,"AutoImageProcessor"),uzt.forEach(t),Umo.forEach(t),kio=i(c),qo=n(c,"DIV",{class:!0});var Ql=s(qo);T(Wk.$$.fragment,Ql),SPo=i(Ql),Uk=n(Ql,"P",{});var Hmo=s(Uk);RPo=r(Hmo,`This is a generic image processor class that will be instantiated as one of the image processor classes of the
library when created with the `),Oz=n(Hmo,"A",{href:!0});var pzt=s(Oz);PPo=r(pzt,"AutoImageProcessor.from_pretrained()"),pzt.forEach(t),BPo=r(Hmo," class method."),Hmo.forEach(t),IPo=i(Ql),Hk=n(Ql,"P",{});var Jmo=s(Hk);NPo=r(Jmo,"This class cannot be instantiated directly using "),Obe=n(Jmo,"CODE",{});var _zt=s(Obe);qPo=r(_zt,"__init__()"),_zt.forEach(t),jPo=r(Jmo," (throws an error)."),Jmo.forEach(t),DPo=i(Ql),oo=n(Ql,"DIV",{class:!0});var $a=s(oo);T(Jk.$$.fragment,$a),GPo=i($a),Vbe=n($a,"P",{});var bzt=s(Vbe);OPo=r(bzt,"Instantiate one of the image processor classes of the library from a pretrained model vocabulary."),bzt.forEach(t),VPo=i($a),fn=n($a,"P",{});var px=s(fn);XPo=r(px,"The image processor class to instantiate is selected based on the "),Xbe=n(px,"CODE",{});var vzt=s(Xbe);zPo=r(vzt,"model_type"),vzt.forEach(t),QPo=r(px,` property of the config object
(either passed as an argument or loaded from `),zbe=n(px,"CODE",{});var Fzt=s(zbe);WPo=r(Fzt,"pretrained_model_name_or_path"),Fzt.forEach(t),UPo=r(px,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Qbe=n(px,"CODE",{});var Tzt=s(Qbe);HPo=r(Tzt,"pretrained_model_name_or_path"),Tzt.forEach(t),JPo=r(px,":"),px.forEach(t),YPo=i($a),oe=n($a,"UL",{});var te=s(oe);A_=n(te,"LI",{});var bXe=s(A_);Wbe=n(bXe,"STRONG",{});var Mzt=s(Wbe);ZPo=r(Mzt,"beit"),Mzt.forEach(t),KPo=r(bXe," \u2014 "),Vz=n(bXe,"A",{href:!0});var Ezt=s(Vz);eBo=r(Ezt,"BeitImageProcessor"),Ezt.forEach(t),oBo=r(bXe," (BEiT model)"),bXe.forEach(t),rBo=i(te),L_=n(te,"LI",{});var vXe=s(L_);Ube=n(vXe,"STRONG",{});var Czt=s(Ube);tBo=r(Czt,"clip"),Czt.forEach(t),aBo=r(vXe," \u2014 "),Xz=n(vXe,"A",{href:!0});var wzt=s(Xz);nBo=r(wzt,"CLIPImageProcessor"),wzt.forEach(t),sBo=r(vXe," (CLIP model)"),vXe.forEach(t),lBo=i(te),y_=n(te,"LI",{});var FXe=s(y_);Hbe=n(FXe,"STRONG",{});var Azt=s(Hbe);iBo=r(Azt,"convnext"),Azt.forEach(t),dBo=r(FXe," \u2014 "),zz=n(FXe,"A",{href:!0});var Lzt=s(zz);mBo=r(Lzt,"ConvNextImageProcessor"),Lzt.forEach(t),cBo=r(FXe," (ConvNeXT model)"),FXe.forEach(t),fBo=i(te),x_=n(te,"LI",{});var TXe=s(x_);Jbe=n(TXe,"STRONG",{});var yzt=s(Jbe);gBo=r(yzt,"cvt"),yzt.forEach(t),hBo=r(TXe," \u2014 "),Qz=n(TXe,"A",{href:!0});var xzt=s(Qz);uBo=r(xzt,"ConvNextImageProcessor"),xzt.forEach(t),pBo=r(TXe," (CvT model)"),TXe.forEach(t),_Bo=i(te),$_=n(te,"LI",{});var MXe=s($_);Ybe=n(MXe,"STRONG",{});var $zt=s(Ybe);bBo=r($zt,"data2vec-vision"),$zt.forEach(t),vBo=r(MXe," \u2014 "),Wz=n(MXe,"A",{href:!0});var kzt=s(Wz);FBo=r(kzt,"BeitImageProcessor"),kzt.forEach(t),TBo=r(MXe," (Data2VecVision model)"),MXe.forEach(t),MBo=i(te),k_=n(te,"LI",{});var EXe=s(k_);Zbe=n(EXe,"STRONG",{});var Szt=s(Zbe);EBo=r(Szt,"deit"),Szt.forEach(t),CBo=r(EXe," \u2014 "),Uz=n(EXe,"A",{href:!0});var Rzt=s(Uz);wBo=r(Rzt,"DeiTImageProcessor"),Rzt.forEach(t),ABo=r(EXe," (DeiT model)"),EXe.forEach(t),LBo=i(te),S_=n(te,"LI",{});var CXe=s(S_);Kbe=n(CXe,"STRONG",{});var Pzt=s(Kbe);yBo=r(Pzt,"dpt"),Pzt.forEach(t),xBo=r(CXe," \u2014 "),Hz=n(CXe,"A",{href:!0});var Bzt=s(Hz);$Bo=r(Bzt,"DPTImageProcessor"),Bzt.forEach(t),kBo=r(CXe," (DPT model)"),CXe.forEach(t),SBo=i(te),R_=n(te,"LI",{});var wXe=s(R_);eve=n(wXe,"STRONG",{});var Izt=s(eve);RBo=r(Izt,"flava"),Izt.forEach(t),PBo=r(wXe," \u2014 "),Jz=n(wXe,"A",{href:!0});var Nzt=s(Jz);BBo=r(Nzt,"FlavaImageProcessor"),Nzt.forEach(t),IBo=r(wXe," (FLAVA model)"),wXe.forEach(t),NBo=i(te),P_=n(te,"LI",{});var AXe=s(P_);ove=n(AXe,"STRONG",{});var qzt=s(ove);qBo=r(qzt,"glpn"),qzt.forEach(t),jBo=r(AXe," \u2014 "),Yz=n(AXe,"A",{href:!0});var jzt=s(Yz);DBo=r(jzt,"GLPNImageProcessor"),jzt.forEach(t),GBo=r(AXe," (GLPN model)"),AXe.forEach(t),OBo=i(te),B_=n(te,"LI",{});var LXe=s(B_);rve=n(LXe,"STRONG",{});var Dzt=s(rve);VBo=r(Dzt,"groupvit"),Dzt.forEach(t),XBo=r(LXe," \u2014 "),Zz=n(LXe,"A",{href:!0});var Gzt=s(Zz);zBo=r(Gzt,"CLIPImageProcessor"),Gzt.forEach(t),QBo=r(LXe," (GroupViT model)"),LXe.forEach(t),WBo=i(te),I_=n(te,"LI",{});var yXe=s(I_);tve=n(yXe,"STRONG",{});var Ozt=s(tve);UBo=r(Ozt,"imagegpt"),Ozt.forEach(t),HBo=r(yXe," \u2014 "),Kz=n(yXe,"A",{href:!0});var Vzt=s(Kz);JBo=r(Vzt,"ImageGPTImageProcessor"),Vzt.forEach(t),YBo=r(yXe," (ImageGPT model)"),yXe.forEach(t),ZBo=i(te),N_=n(te,"LI",{});var xXe=s(N_);ave=n(xXe,"STRONG",{});var Xzt=s(ave);KBo=r(Xzt,"layoutlmv2"),Xzt.forEach(t),eIo=r(xXe," \u2014 "),eQ=n(xXe,"A",{href:!0});var zzt=s(eQ);oIo=r(zzt,"LayoutLMv2ImageProcessor"),zzt.forEach(t),rIo=r(xXe," (LayoutLMv2 model)"),xXe.forEach(t),tIo=i(te),q_=n(te,"LI",{});var $Xe=s(q_);nve=n($Xe,"STRONG",{});var Qzt=s(nve);aIo=r(Qzt,"layoutlmv3"),Qzt.forEach(t),nIo=r($Xe," \u2014 "),oQ=n($Xe,"A",{href:!0});var Wzt=s(oQ);sIo=r(Wzt,"LayoutLMv3ImageProcessor"),Wzt.forEach(t),lIo=r($Xe," (LayoutLMv3 model)"),$Xe.forEach(t),iIo=i(te),j_=n(te,"LI",{});var kXe=s(j_);sve=n(kXe,"STRONG",{});var Uzt=s(sve);dIo=r(Uzt,"levit"),Uzt.forEach(t),mIo=r(kXe," \u2014 "),rQ=n(kXe,"A",{href:!0});var Hzt=s(rQ);cIo=r(Hzt,"LevitImageProcessor"),Hzt.forEach(t),fIo=r(kXe," (LeViT model)"),kXe.forEach(t),gIo=i(te),D_=n(te,"LI",{});var SXe=s(D_);lve=n(SXe,"STRONG",{});var Jzt=s(lve);hIo=r(Jzt,"mobilenet_v2"),Jzt.forEach(t),uIo=r(SXe," \u2014 "),tQ=n(SXe,"A",{href:!0});var Yzt=s(tQ);pIo=r(Yzt,"MobileNetV2ImageProcessor"),Yzt.forEach(t),_Io=r(SXe," (MobileNetV2 model)"),SXe.forEach(t),bIo=i(te),G_=n(te,"LI",{});var RXe=s(G_);ive=n(RXe,"STRONG",{});var Zzt=s(ive);vIo=r(Zzt,"mobilevit"),Zzt.forEach(t),FIo=r(RXe," \u2014 "),aQ=n(RXe,"A",{href:!0});var Kzt=s(aQ);TIo=r(Kzt,"MobileViTImageProcessor"),Kzt.forEach(t),MIo=r(RXe," (MobileViT model)"),RXe.forEach(t),EIo=i(te),O_=n(te,"LI",{});var PXe=s(O_);dve=n(PXe,"STRONG",{});var eQt=s(dve);CIo=r(eQt,"perceiver"),eQt.forEach(t),wIo=r(PXe," \u2014 "),nQ=n(PXe,"A",{href:!0});var oQt=s(nQ);AIo=r(oQt,"PerceiverImageProcessor"),oQt.forEach(t),LIo=r(PXe," (Perceiver model)"),PXe.forEach(t),yIo=i(te),V_=n(te,"LI",{});var BXe=s(V_);mve=n(BXe,"STRONG",{});var rQt=s(mve);xIo=r(rQt,"poolformer"),rQt.forEach(t),$Io=r(BXe," \u2014 "),sQ=n(BXe,"A",{href:!0});var tQt=s(sQ);kIo=r(tQt,"PoolFormerImageProcessor"),tQt.forEach(t),SIo=r(BXe," (PoolFormer model)"),BXe.forEach(t),RIo=i(te),X_=n(te,"LI",{});var IXe=s(X_);cve=n(IXe,"STRONG",{});var aQt=s(cve);PIo=r(aQt,"regnet"),aQt.forEach(t),BIo=r(IXe," \u2014 "),lQ=n(IXe,"A",{href:!0});var nQt=s(lQ);IIo=r(nQt,"ConvNextImageProcessor"),nQt.forEach(t),NIo=r(IXe," (RegNet model)"),IXe.forEach(t),qIo=i(te),z_=n(te,"LI",{});var NXe=s(z_);fve=n(NXe,"STRONG",{});var sQt=s(fve);jIo=r(sQt,"resnet"),sQt.forEach(t),DIo=r(NXe," \u2014 "),iQ=n(NXe,"A",{href:!0});var lQt=s(iQ);GIo=r(lQt,"ConvNextImageProcessor"),lQt.forEach(t),OIo=r(NXe," (ResNet model)"),NXe.forEach(t),VIo=i(te),Q_=n(te,"LI",{});var qXe=s(Q_);gve=n(qXe,"STRONG",{});var iQt=s(gve);XIo=r(iQt,"segformer"),iQt.forEach(t),zIo=r(qXe," \u2014 "),dQ=n(qXe,"A",{href:!0});var dQt=s(dQ);QIo=r(dQt,"SegformerImageProcessor"),dQt.forEach(t),WIo=r(qXe," (SegFormer model)"),qXe.forEach(t),UIo=i(te),W_=n(te,"LI",{});var jXe=s(W_);hve=n(jXe,"STRONG",{});var mQt=s(hve);HIo=r(mQt,"swin"),mQt.forEach(t),JIo=r(jXe," \u2014 "),mQ=n(jXe,"A",{href:!0});var cQt=s(mQ);YIo=r(cQt,"ViTImageProcessor"),cQt.forEach(t),ZIo=r(jXe," (Swin Transformer model)"),jXe.forEach(t),KIo=i(te),U_=n(te,"LI",{});var DXe=s(U_);uve=n(DXe,"STRONG",{});var fQt=s(uve);eNo=r(fQt,"swinv2"),fQt.forEach(t),oNo=r(DXe," \u2014 "),cQ=n(DXe,"A",{href:!0});var gQt=s(cQ);rNo=r(gQt,"ViTImageProcessor"),gQt.forEach(t),tNo=r(DXe," (Swin Transformer V2 model)"),DXe.forEach(t),aNo=i(te),H_=n(te,"LI",{});var GXe=s(H_);pve=n(GXe,"STRONG",{});var hQt=s(pve);nNo=r(hQt,"van"),hQt.forEach(t),sNo=r(GXe," \u2014 "),fQ=n(GXe,"A",{href:!0});var uQt=s(fQ);lNo=r(uQt,"ConvNextImageProcessor"),uQt.forEach(t),iNo=r(GXe," (VAN model)"),GXe.forEach(t),dNo=i(te),J_=n(te,"LI",{});var OXe=s(J_);_ve=n(OXe,"STRONG",{});var pQt=s(_ve);mNo=r(pQt,"videomae"),pQt.forEach(t),cNo=r(OXe," \u2014 "),gQ=n(OXe,"A",{href:!0});var _Qt=s(gQ);fNo=r(_Qt,"VideoMAEImageProcessor"),_Qt.forEach(t),gNo=r(OXe," (VideoMAE model)"),OXe.forEach(t),hNo=i(te),Y_=n(te,"LI",{});var VXe=s(Y_);bve=n(VXe,"STRONG",{});var bQt=s(bve);uNo=r(bQt,"vilt"),bQt.forEach(t),pNo=r(VXe," \u2014 "),hQ=n(VXe,"A",{href:!0});var vQt=s(hQ);_No=r(vQt,"ViltImageProcessor"),vQt.forEach(t),bNo=r(VXe," (ViLT model)"),VXe.forEach(t),vNo=i(te),Z_=n(te,"LI",{});var XXe=s(Z_);vve=n(XXe,"STRONG",{});var FQt=s(vve);FNo=r(FQt,"vit"),FQt.forEach(t),TNo=r(XXe," \u2014 "),uQ=n(XXe,"A",{href:!0});var TQt=s(uQ);MNo=r(TQt,"ViTImageProcessor"),TQt.forEach(t),ENo=r(XXe," (ViT model)"),XXe.forEach(t),CNo=i(te),K_=n(te,"LI",{});var zXe=s(K_);Fve=n(zXe,"STRONG",{});var MQt=s(Fve);wNo=r(MQt,"vit_mae"),MQt.forEach(t),ANo=r(zXe," \u2014 "),pQ=n(zXe,"A",{href:!0});var EQt=s(pQ);LNo=r(EQt,"ViTImageProcessor"),EQt.forEach(t),yNo=r(zXe," (ViTMAE model)"),zXe.forEach(t),xNo=i(te),e1=n(te,"LI",{});var QXe=s(e1);Tve=n(QXe,"STRONG",{});var CQt=s(Tve);$No=r(CQt,"vit_msn"),CQt.forEach(t),kNo=r(QXe," \u2014 "),_Q=n(QXe,"A",{href:!0});var wQt=s(_Q);SNo=r(wQt,"ViTImageProcessor"),wQt.forEach(t),RNo=r(QXe," (ViTMSN model)"),QXe.forEach(t),PNo=i(te),o1=n(te,"LI",{});var WXe=s(o1);Mve=n(WXe,"STRONG",{});var AQt=s(Mve);BNo=r(AQt,"xclip"),AQt.forEach(t),INo=r(WXe," \u2014 "),bQ=n(WXe,"A",{href:!0});var LQt=s(bQ);NNo=r(LQt,"CLIPImageProcessor"),LQt.forEach(t),qNo=r(WXe," (X-CLIP model)"),WXe.forEach(t),te.forEach(t),jNo=i($a),T(r1.$$.fragment,$a),DNo=i($a),T(t1.$$.fragment,$a),$a.forEach(t),GNo=i(Ql),a1=n(Ql,"DIV",{class:!0});var Ymo=s(a1);T(Yk.$$.fragment,Ymo),ONo=i(Ymo),Eve=n(Ymo,"P",{});var yQt=s(Eve);VNo=r(yQt,"Register a new image processor for this class."),yQt.forEach(t),Ymo.forEach(t),Ql.forEach(t),Sio=i(c),Dd=n(c,"H2",{class:!0});var Zmo=s(Dd);n1=n(Zmo,"A",{id:!0,class:!0,href:!0});var xQt=s(n1);Cve=n(xQt,"SPAN",{});var $Qt=s(Cve);T(Zk.$$.fragment,$Qt),$Qt.forEach(t),xQt.forEach(t),XNo=i(Zmo),wve=n(Zmo,"SPAN",{});var kQt=s(wve);zNo=r(kQt,"AutoProcessor"),kQt.forEach(t),Zmo.forEach(t),Rio=i(c),jo=n(c,"DIV",{class:!0});var Wl=s(jo);T(Kk.$$.fragment,Wl),QNo=i(Wl),eS=n(Wl,"P",{});var Kmo=s(eS);WNo=r(Kmo,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vQ=n(Kmo,"A",{href:!0});var SQt=s(vQ);UNo=r(SQt,"AutoProcessor.from_pretrained()"),SQt.forEach(t),HNo=r(Kmo," class method."),Kmo.forEach(t),JNo=i(Wl),oS=n(Wl,"P",{});var eco=s(oS);YNo=r(eco,"This class cannot be instantiated directly using "),Ave=n(eco,"CODE",{});var RQt=s(Ave);ZNo=r(RQt,"__init__()"),RQt.forEach(t),KNo=r(eco," (throws an error)."),eco.forEach(t),eqo=i(Wl),ro=n(Wl,"DIV",{class:!0});var ka=s(ro);T(rS.$$.fragment,ka),oqo=i(ka),Lve=n(ka,"P",{});var PQt=s(Lve);rqo=r(PQt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),PQt.forEach(t),tqo=i(ka),Gd=n(ka,"P",{});var Bfe=s(Gd);aqo=r(Bfe,"The processor class to instantiate is selected based on the "),yve=n(Bfe,"CODE",{});var BQt=s(yve);nqo=r(BQt,"model_type"),BQt.forEach(t),sqo=r(Bfe,` property of the config object (either
passed as an argument or loaded from `),xve=n(Bfe,"CODE",{});var IQt=s(xve);lqo=r(IQt,"pretrained_model_name_or_path"),IQt.forEach(t),iqo=r(Bfe," if possible):"),Bfe.forEach(t),dqo=i(ka),ie=n(ka,"UL",{});var ce=s(ie);s1=n(ce,"LI",{});var UXe=s(s1);$ve=n(UXe,"STRONG",{});var NQt=s($ve);mqo=r(NQt,"clip"),NQt.forEach(t),cqo=r(UXe," \u2014 "),FQ=n(UXe,"A",{href:!0});var qQt=s(FQ);fqo=r(qQt,"CLIPProcessor"),qQt.forEach(t),gqo=r(UXe," (CLIP model)"),UXe.forEach(t),hqo=i(ce),l1=n(ce,"LI",{});var HXe=s(l1);kve=n(HXe,"STRONG",{});var jQt=s(kve);uqo=r(jQt,"clipseg"),jQt.forEach(t),pqo=r(HXe," \u2014 "),TQ=n(HXe,"A",{href:!0});var DQt=s(TQ);_qo=r(DQt,"CLIPSegProcessor"),DQt.forEach(t),bqo=r(HXe," (CLIPSeg model)"),HXe.forEach(t),vqo=i(ce),i1=n(ce,"LI",{});var JXe=s(i1);Sve=n(JXe,"STRONG",{});var GQt=s(Sve);Fqo=r(GQt,"flava"),GQt.forEach(t),Tqo=r(JXe," \u2014 "),MQ=n(JXe,"A",{href:!0});var OQt=s(MQ);Mqo=r(OQt,"FlavaProcessor"),OQt.forEach(t),Eqo=r(JXe," (FLAVA model)"),JXe.forEach(t),Cqo=i(ce),d1=n(ce,"LI",{});var YXe=s(d1);Rve=n(YXe,"STRONG",{});var VQt=s(Rve);wqo=r(VQt,"groupvit"),VQt.forEach(t),Aqo=r(YXe," \u2014 "),EQ=n(YXe,"A",{href:!0});var XQt=s(EQ);Lqo=r(XQt,"CLIPProcessor"),XQt.forEach(t),yqo=r(YXe," (GroupViT model)"),YXe.forEach(t),xqo=i(ce),m1=n(ce,"LI",{});var ZXe=s(m1);Pve=n(ZXe,"STRONG",{});var zQt=s(Pve);$qo=r(zQt,"layoutlmv2"),zQt.forEach(t),kqo=r(ZXe," \u2014 "),CQ=n(ZXe,"A",{href:!0});var QQt=s(CQ);Sqo=r(QQt,"LayoutLMv2Processor"),QQt.forEach(t),Rqo=r(ZXe," (LayoutLMv2 model)"),ZXe.forEach(t),Pqo=i(ce),c1=n(ce,"LI",{});var KXe=s(c1);Bve=n(KXe,"STRONG",{});var WQt=s(Bve);Bqo=r(WQt,"layoutlmv3"),WQt.forEach(t),Iqo=r(KXe," \u2014 "),wQ=n(KXe,"A",{href:!0});var UQt=s(wQ);Nqo=r(UQt,"LayoutLMv3Processor"),UQt.forEach(t),qqo=r(KXe," (LayoutLMv3 model)"),KXe.forEach(t),jqo=i(ce),f1=n(ce,"LI",{});var eze=s(f1);Ive=n(eze,"STRONG",{});var HQt=s(Ive);Dqo=r(HQt,"layoutxlm"),HQt.forEach(t),Gqo=r(eze," \u2014 "),AQ=n(eze,"A",{href:!0});var JQt=s(AQ);Oqo=r(JQt,"LayoutXLMProcessor"),JQt.forEach(t),Vqo=r(eze," (LayoutXLM model)"),eze.forEach(t),Xqo=i(ce),g1=n(ce,"LI",{});var oze=s(g1);Nve=n(oze,"STRONG",{});var YQt=s(Nve);zqo=r(YQt,"markuplm"),YQt.forEach(t),Qqo=r(oze," \u2014 "),LQ=n(oze,"A",{href:!0});var ZQt=s(LQ);Wqo=r(ZQt,"MarkupLMProcessor"),ZQt.forEach(t),Uqo=r(oze," (MarkupLM model)"),oze.forEach(t),Hqo=i(ce),h1=n(ce,"LI",{});var rze=s(h1);qve=n(rze,"STRONG",{});var KQt=s(qve);Jqo=r(KQt,"owlvit"),KQt.forEach(t),Yqo=r(rze," \u2014 "),yQ=n(rze,"A",{href:!0});var eWt=s(yQ);Zqo=r(eWt,"OwlViTProcessor"),eWt.forEach(t),Kqo=r(rze," (OWL-ViT model)"),rze.forEach(t),ejo=i(ce),u1=n(ce,"LI",{});var tze=s(u1);jve=n(tze,"STRONG",{});var oWt=s(jve);ojo=r(oWt,"sew"),oWt.forEach(t),rjo=r(tze," \u2014 "),xQ=n(tze,"A",{href:!0});var rWt=s(xQ);tjo=r(rWt,"Wav2Vec2Processor"),rWt.forEach(t),ajo=r(tze," (SEW model)"),tze.forEach(t),njo=i(ce),p1=n(ce,"LI",{});var aze=s(p1);Dve=n(aze,"STRONG",{});var tWt=s(Dve);sjo=r(tWt,"sew-d"),tWt.forEach(t),ljo=r(aze," \u2014 "),$Q=n(aze,"A",{href:!0});var aWt=s($Q);ijo=r(aWt,"Wav2Vec2Processor"),aWt.forEach(t),djo=r(aze," (SEW-D model)"),aze.forEach(t),mjo=i(ce),_1=n(ce,"LI",{});var nze=s(_1);Gve=n(nze,"STRONG",{});var nWt=s(Gve);cjo=r(nWt,"speech_to_text"),nWt.forEach(t),fjo=r(nze," \u2014 "),kQ=n(nze,"A",{href:!0});var sWt=s(kQ);gjo=r(sWt,"Speech2TextProcessor"),sWt.forEach(t),hjo=r(nze," (Speech2Text model)"),nze.forEach(t),ujo=i(ce),b1=n(ce,"LI",{});var sze=s(b1);Ove=n(sze,"STRONG",{});var lWt=s(Ove);pjo=r(lWt,"speech_to_text_2"),lWt.forEach(t),_jo=r(sze," \u2014 "),SQ=n(sze,"A",{href:!0});var iWt=s(SQ);bjo=r(iWt,"Speech2Text2Processor"),iWt.forEach(t),vjo=r(sze," (Speech2Text2 model)"),sze.forEach(t),Fjo=i(ce),v1=n(ce,"LI",{});var lze=s(v1);Vve=n(lze,"STRONG",{});var dWt=s(Vve);Tjo=r(dWt,"trocr"),dWt.forEach(t),Mjo=r(lze," \u2014 "),RQ=n(lze,"A",{href:!0});var mWt=s(RQ);Ejo=r(mWt,"TrOCRProcessor"),mWt.forEach(t),Cjo=r(lze," (TrOCR model)"),lze.forEach(t),wjo=i(ce),F1=n(ce,"LI",{});var ize=s(F1);Xve=n(ize,"STRONG",{});var cWt=s(Xve);Ajo=r(cWt,"unispeech"),cWt.forEach(t),Ljo=r(ize," \u2014 "),PQ=n(ize,"A",{href:!0});var fWt=s(PQ);yjo=r(fWt,"Wav2Vec2Processor"),fWt.forEach(t),xjo=r(ize," (UniSpeech model)"),ize.forEach(t),$jo=i(ce),T1=n(ce,"LI",{});var dze=s(T1);zve=n(dze,"STRONG",{});var gWt=s(zve);kjo=r(gWt,"unispeech-sat"),gWt.forEach(t),Sjo=r(dze," \u2014 "),BQ=n(dze,"A",{href:!0});var hWt=s(BQ);Rjo=r(hWt,"Wav2Vec2Processor"),hWt.forEach(t),Pjo=r(dze," (UniSpeechSat model)"),dze.forEach(t),Bjo=i(ce),M1=n(ce,"LI",{});var mze=s(M1);Qve=n(mze,"STRONG",{});var uWt=s(Qve);Ijo=r(uWt,"vilt"),uWt.forEach(t),Njo=r(mze," \u2014 "),IQ=n(mze,"A",{href:!0});var pWt=s(IQ);qjo=r(pWt,"ViltProcessor"),pWt.forEach(t),jjo=r(mze," (ViLT model)"),mze.forEach(t),Djo=i(ce),E1=n(ce,"LI",{});var cze=s(E1);Wve=n(cze,"STRONG",{});var _Wt=s(Wve);Gjo=r(_Wt,"vision-text-dual-encoder"),_Wt.forEach(t),Ojo=r(cze," \u2014 "),NQ=n(cze,"A",{href:!0});var bWt=s(NQ);Vjo=r(bWt,"VisionTextDualEncoderProcessor"),bWt.forEach(t),Xjo=r(cze," (VisionTextDualEncoder model)"),cze.forEach(t),zjo=i(ce),C1=n(ce,"LI",{});var fze=s(C1);Uve=n(fze,"STRONG",{});var vWt=s(Uve);Qjo=r(vWt,"wav2vec2"),vWt.forEach(t),Wjo=r(fze," \u2014 "),qQ=n(fze,"A",{href:!0});var FWt=s(qQ);Ujo=r(FWt,"Wav2Vec2Processor"),FWt.forEach(t),Hjo=r(fze," (Wav2Vec2 model)"),fze.forEach(t),Jjo=i(ce),w1=n(ce,"LI",{});var gze=s(w1);Hve=n(gze,"STRONG",{});var TWt=s(Hve);Yjo=r(TWt,"wav2vec2-conformer"),TWt.forEach(t),Zjo=r(gze," \u2014 "),jQ=n(gze,"A",{href:!0});var MWt=s(jQ);Kjo=r(MWt,"Wav2Vec2Processor"),MWt.forEach(t),eDo=r(gze," (Wav2Vec2-Conformer model)"),gze.forEach(t),oDo=i(ce),A1=n(ce,"LI",{});var hze=s(A1);Jve=n(hze,"STRONG",{});var EWt=s(Jve);rDo=r(EWt,"wavlm"),EWt.forEach(t),tDo=r(hze," \u2014 "),DQ=n(hze,"A",{href:!0});var CWt=s(DQ);aDo=r(CWt,"Wav2Vec2Processor"),CWt.forEach(t),nDo=r(hze," (WavLM model)"),hze.forEach(t),sDo=i(ce),L1=n(ce,"LI",{});var uze=s(L1);Yve=n(uze,"STRONG",{});var wWt=s(Yve);lDo=r(wWt,"whisper"),wWt.forEach(t),iDo=r(uze," \u2014 "),GQ=n(uze,"A",{href:!0});var AWt=s(GQ);dDo=r(AWt,"WhisperProcessor"),AWt.forEach(t),mDo=r(uze," (Whisper model)"),uze.forEach(t),cDo=i(ce),y1=n(ce,"LI",{});var pze=s(y1);Zve=n(pze,"STRONG",{});var LWt=s(Zve);fDo=r(LWt,"xclip"),LWt.forEach(t),gDo=r(pze," \u2014 "),OQ=n(pze,"A",{href:!0});var yWt=s(OQ);hDo=r(yWt,"XCLIPProcessor"),yWt.forEach(t),uDo=r(pze," (X-CLIP model)"),pze.forEach(t),ce.forEach(t),pDo=i(ka),T(x1.$$.fragment,ka),_Do=i(ka),T($1.$$.fragment,ka),ka.forEach(t),bDo=i(Wl),k1=n(Wl,"DIV",{class:!0});var oco=s(k1);T(tS.$$.fragment,oco),vDo=i(oco),Kve=n(oco,"P",{});var xWt=s(Kve);FDo=r(xWt,"Register a new processor for this class."),xWt.forEach(t),oco.forEach(t),Wl.forEach(t),Pio=i(c),Od=n(c,"H2",{class:!0});var rco=s(Od);S1=n(rco,"A",{id:!0,class:!0,href:!0});var $Wt=s(S1);eFe=n($Wt,"SPAN",{});var kWt=s(eFe);T(aS.$$.fragment,kWt),kWt.forEach(t),$Wt.forEach(t),TDo=i(rco),oFe=n(rco,"SPAN",{});var SWt=s(oFe);MDo=r(SWt,"AutoModel"),SWt.forEach(t),rco.forEach(t),Bio=i(c),Do=n(c,"DIV",{class:!0});var Ul=s(Do);T(nS.$$.fragment,Ul),EDo=i(Ul),Vd=n(Ul,"P",{});var Ife=s(Vd);CDo=r(Ife,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VQ=n(Ife,"A",{href:!0});var RWt=s(VQ);wDo=r(RWt,"from_pretrained()"),RWt.forEach(t),ADo=r(Ife," class method or the "),XQ=n(Ife,"A",{href:!0});var PWt=s(XQ);LDo=r(PWt,"from_config()"),PWt.forEach(t),yDo=r(Ife,` class
method.`),Ife.forEach(t),xDo=i(Ul),sS=n(Ul,"P",{});var tco=s(sS);$Do=r(tco,"This class cannot be instantiated directly using "),rFe=n(tco,"CODE",{});var BWt=s(rFe);kDo=r(BWt,"__init__()"),BWt.forEach(t),SDo=r(tco," (throws an error)."),tco.forEach(t),RDo=i(Ul),At=n(Ul,"DIV",{class:!0});var _x=s(At);T(lS.$$.fragment,_x),PDo=i(_x),tFe=n(_x,"P",{});var IWt=s(tFe);BDo=r(IWt,"Instantiates one of the base model classes of the library from a configuration."),IWt.forEach(t),IDo=i(_x),Xd=n(_x,"P",{});var Nfe=s(Xd);NDo=r(Nfe,`Note:
Loading a model from its configuration file does `),aFe=n(Nfe,"STRONG",{});var NWt=s(aFe);qDo=r(NWt,"not"),NWt.forEach(t),jDo=r(Nfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=n(Nfe,"A",{href:!0});var qWt=s(zQ);DDo=r(qWt,"from_pretrained()"),qWt.forEach(t),GDo=r(Nfe," to load the model weights."),Nfe.forEach(t),ODo=i(_x),T(R1.$$.fragment,_x),_x.forEach(t),VDo=i(Ul),to=n(Ul,"DIV",{class:!0});var Sa=s(to);T(iS.$$.fragment,Sa),XDo=i(Sa),nFe=n(Sa,"P",{});var jWt=s(nFe);zDo=r(jWt,"Instantiate one of the base model classes of the library from a pretrained model."),jWt.forEach(t),QDo=i(Sa),gn=n(Sa,"P",{});var bx=s(gn);WDo=r(bx,"The model class to instantiate is selected based on the "),sFe=n(bx,"CODE",{});var DWt=s(sFe);UDo=r(DWt,"model_type"),DWt.forEach(t),HDo=r(bx,` property of the config object (either
passed as an argument or loaded from `),lFe=n(bx,"CODE",{});var GWt=s(lFe);JDo=r(GWt,"pretrained_model_name_or_path"),GWt.forEach(t),YDo=r(bx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(bx,"CODE",{});var OWt=s(iFe);ZDo=r(OWt,"pretrained_model_name_or_path"),OWt.forEach(t),KDo=r(bx,":"),bx.forEach(t),eGo=i(Sa),y=n(Sa,"UL",{});var x=s(y);P1=n(x,"LI",{});var _ze=s(P1);dFe=n(_ze,"STRONG",{});var VWt=s(dFe);oGo=r(VWt,"albert"),VWt.forEach(t),rGo=r(_ze," \u2014 "),QQ=n(_ze,"A",{href:!0});var XWt=s(QQ);tGo=r(XWt,"AlbertModel"),XWt.forEach(t),aGo=r(_ze," (ALBERT model)"),_ze.forEach(t),nGo=i(x),B1=n(x,"LI",{});var bze=s(B1);mFe=n(bze,"STRONG",{});var zWt=s(mFe);sGo=r(zWt,"bart"),zWt.forEach(t),lGo=r(bze," \u2014 "),WQ=n(bze,"A",{href:!0});var QWt=s(WQ);iGo=r(QWt,"BartModel"),QWt.forEach(t),dGo=r(bze," (BART model)"),bze.forEach(t),mGo=i(x),I1=n(x,"LI",{});var vze=s(I1);cFe=n(vze,"STRONG",{});var WWt=s(cFe);cGo=r(WWt,"beit"),WWt.forEach(t),fGo=r(vze," \u2014 "),UQ=n(vze,"A",{href:!0});var UWt=s(UQ);gGo=r(UWt,"BeitModel"),UWt.forEach(t),hGo=r(vze," (BEiT model)"),vze.forEach(t),uGo=i(x),N1=n(x,"LI",{});var Fze=s(N1);fFe=n(Fze,"STRONG",{});var HWt=s(fFe);pGo=r(HWt,"bert"),HWt.forEach(t),_Go=r(Fze," \u2014 "),HQ=n(Fze,"A",{href:!0});var JWt=s(HQ);bGo=r(JWt,"BertModel"),JWt.forEach(t),vGo=r(Fze," (BERT model)"),Fze.forEach(t),FGo=i(x),q1=n(x,"LI",{});var Tze=s(q1);gFe=n(Tze,"STRONG",{});var YWt=s(gFe);TGo=r(YWt,"bert-generation"),YWt.forEach(t),MGo=r(Tze," \u2014 "),JQ=n(Tze,"A",{href:!0});var ZWt=s(JQ);EGo=r(ZWt,"BertGenerationEncoder"),ZWt.forEach(t),CGo=r(Tze," (Bert Generation model)"),Tze.forEach(t),wGo=i(x),j1=n(x,"LI",{});var Mze=s(j1);hFe=n(Mze,"STRONG",{});var KWt=s(hFe);AGo=r(KWt,"big_bird"),KWt.forEach(t),LGo=r(Mze," \u2014 "),YQ=n(Mze,"A",{href:!0});var eUt=s(YQ);yGo=r(eUt,"BigBirdModel"),eUt.forEach(t),xGo=r(Mze," (BigBird model)"),Mze.forEach(t),$Go=i(x),D1=n(x,"LI",{});var Eze=s(D1);uFe=n(Eze,"STRONG",{});var oUt=s(uFe);kGo=r(oUt,"bigbird_pegasus"),oUt.forEach(t),SGo=r(Eze," \u2014 "),ZQ=n(Eze,"A",{href:!0});var rUt=s(ZQ);RGo=r(rUt,"BigBirdPegasusModel"),rUt.forEach(t),PGo=r(Eze," (BigBird-Pegasus model)"),Eze.forEach(t),BGo=i(x),G1=n(x,"LI",{});var Cze=s(G1);pFe=n(Cze,"STRONG",{});var tUt=s(pFe);IGo=r(tUt,"blenderbot"),tUt.forEach(t),NGo=r(Cze," \u2014 "),KQ=n(Cze,"A",{href:!0});var aUt=s(KQ);qGo=r(aUt,"BlenderbotModel"),aUt.forEach(t),jGo=r(Cze," (Blenderbot model)"),Cze.forEach(t),DGo=i(x),O1=n(x,"LI",{});var wze=s(O1);_Fe=n(wze,"STRONG",{});var nUt=s(_Fe);GGo=r(nUt,"blenderbot-small"),nUt.forEach(t),OGo=r(wze," \u2014 "),eW=n(wze,"A",{href:!0});var sUt=s(eW);VGo=r(sUt,"BlenderbotSmallModel"),sUt.forEach(t),XGo=r(wze," (BlenderbotSmall model)"),wze.forEach(t),zGo=i(x),V1=n(x,"LI",{});var Aze=s(V1);bFe=n(Aze,"STRONG",{});var lUt=s(bFe);QGo=r(lUt,"bloom"),lUt.forEach(t),WGo=r(Aze," \u2014 "),oW=n(Aze,"A",{href:!0});var iUt=s(oW);UGo=r(iUt,"BloomModel"),iUt.forEach(t),HGo=r(Aze," (BLOOM model)"),Aze.forEach(t),JGo=i(x),X1=n(x,"LI",{});var Lze=s(X1);vFe=n(Lze,"STRONG",{});var dUt=s(vFe);YGo=r(dUt,"camembert"),dUt.forEach(t),ZGo=r(Lze," \u2014 "),rW=n(Lze,"A",{href:!0});var mUt=s(rW);KGo=r(mUt,"CamembertModel"),mUt.forEach(t),eOo=r(Lze," (CamemBERT model)"),Lze.forEach(t),oOo=i(x),z1=n(x,"LI",{});var yze=s(z1);FFe=n(yze,"STRONG",{});var cUt=s(FFe);rOo=r(cUt,"canine"),cUt.forEach(t),tOo=r(yze," \u2014 "),tW=n(yze,"A",{href:!0});var fUt=s(tW);aOo=r(fUt,"CanineModel"),fUt.forEach(t),nOo=r(yze," (CANINE model)"),yze.forEach(t),sOo=i(x),Q1=n(x,"LI",{});var xze=s(Q1);TFe=n(xze,"STRONG",{});var gUt=s(TFe);lOo=r(gUt,"clip"),gUt.forEach(t),iOo=r(xze," \u2014 "),aW=n(xze,"A",{href:!0});var hUt=s(aW);dOo=r(hUt,"CLIPModel"),hUt.forEach(t),mOo=r(xze," (CLIP model)"),xze.forEach(t),cOo=i(x),W1=n(x,"LI",{});var $ze=s(W1);MFe=n($ze,"STRONG",{});var uUt=s(MFe);fOo=r(uUt,"clipseg"),uUt.forEach(t),gOo=r($ze," \u2014 "),nW=n($ze,"A",{href:!0});var pUt=s(nW);hOo=r(pUt,"CLIPSegModel"),pUt.forEach(t),uOo=r($ze," (CLIPSeg model)"),$ze.forEach(t),pOo=i(x),U1=n(x,"LI",{});var kze=s(U1);EFe=n(kze,"STRONG",{});var _Ut=s(EFe);_Oo=r(_Ut,"codegen"),_Ut.forEach(t),bOo=r(kze," \u2014 "),sW=n(kze,"A",{href:!0});var bUt=s(sW);vOo=r(bUt,"CodeGenModel"),bUt.forEach(t),FOo=r(kze," (CodeGen model)"),kze.forEach(t),TOo=i(x),H1=n(x,"LI",{});var Sze=s(H1);CFe=n(Sze,"STRONG",{});var vUt=s(CFe);MOo=r(vUt,"conditional_detr"),vUt.forEach(t),EOo=r(Sze," \u2014 "),lW=n(Sze,"A",{href:!0});var FUt=s(lW);COo=r(FUt,"ConditionalDetrModel"),FUt.forEach(t),wOo=r(Sze," (Conditional DETR model)"),Sze.forEach(t),AOo=i(x),J1=n(x,"LI",{});var Rze=s(J1);wFe=n(Rze,"STRONG",{});var TUt=s(wFe);LOo=r(TUt,"convbert"),TUt.forEach(t),yOo=r(Rze," \u2014 "),iW=n(Rze,"A",{href:!0});var MUt=s(iW);xOo=r(MUt,"ConvBertModel"),MUt.forEach(t),$Oo=r(Rze," (ConvBERT model)"),Rze.forEach(t),kOo=i(x),Y1=n(x,"LI",{});var Pze=s(Y1);AFe=n(Pze,"STRONG",{});var EUt=s(AFe);SOo=r(EUt,"convnext"),EUt.forEach(t),ROo=r(Pze," \u2014 "),dW=n(Pze,"A",{href:!0});var CUt=s(dW);POo=r(CUt,"ConvNextModel"),CUt.forEach(t),BOo=r(Pze," (ConvNeXT model)"),Pze.forEach(t),IOo=i(x),Z1=n(x,"LI",{});var Bze=s(Z1);LFe=n(Bze,"STRONG",{});var wUt=s(LFe);NOo=r(wUt,"ctrl"),wUt.forEach(t),qOo=r(Bze," \u2014 "),mW=n(Bze,"A",{href:!0});var AUt=s(mW);jOo=r(AUt,"CTRLModel"),AUt.forEach(t),DOo=r(Bze," (CTRL model)"),Bze.forEach(t),GOo=i(x),K1=n(x,"LI",{});var Ize=s(K1);yFe=n(Ize,"STRONG",{});var LUt=s(yFe);OOo=r(LUt,"cvt"),LUt.forEach(t),VOo=r(Ize," \u2014 "),cW=n(Ize,"A",{href:!0});var yUt=s(cW);XOo=r(yUt,"CvtModel"),yUt.forEach(t),zOo=r(Ize," (CvT model)"),Ize.forEach(t),QOo=i(x),e2=n(x,"LI",{});var Nze=s(e2);xFe=n(Nze,"STRONG",{});var xUt=s(xFe);WOo=r(xUt,"data2vec-audio"),xUt.forEach(t),UOo=r(Nze," \u2014 "),fW=n(Nze,"A",{href:!0});var $Ut=s(fW);HOo=r($Ut,"Data2VecAudioModel"),$Ut.forEach(t),JOo=r(Nze," (Data2VecAudio model)"),Nze.forEach(t),YOo=i(x),o2=n(x,"LI",{});var qze=s(o2);$Fe=n(qze,"STRONG",{});var kUt=s($Fe);ZOo=r(kUt,"data2vec-text"),kUt.forEach(t),KOo=r(qze," \u2014 "),gW=n(qze,"A",{href:!0});var SUt=s(gW);eVo=r(SUt,"Data2VecTextModel"),SUt.forEach(t),oVo=r(qze," (Data2VecText model)"),qze.forEach(t),rVo=i(x),r2=n(x,"LI",{});var jze=s(r2);kFe=n(jze,"STRONG",{});var RUt=s(kFe);tVo=r(RUt,"data2vec-vision"),RUt.forEach(t),aVo=r(jze," \u2014 "),hW=n(jze,"A",{href:!0});var PUt=s(hW);nVo=r(PUt,"Data2VecVisionModel"),PUt.forEach(t),sVo=r(jze," (Data2VecVision model)"),jze.forEach(t),lVo=i(x),t2=n(x,"LI",{});var Dze=s(t2);SFe=n(Dze,"STRONG",{});var BUt=s(SFe);iVo=r(BUt,"deberta"),BUt.forEach(t),dVo=r(Dze," \u2014 "),uW=n(Dze,"A",{href:!0});var IUt=s(uW);mVo=r(IUt,"DebertaModel"),IUt.forEach(t),cVo=r(Dze," (DeBERTa model)"),Dze.forEach(t),fVo=i(x),a2=n(x,"LI",{});var Gze=s(a2);RFe=n(Gze,"STRONG",{});var NUt=s(RFe);gVo=r(NUt,"deberta-v2"),NUt.forEach(t),hVo=r(Gze," \u2014 "),pW=n(Gze,"A",{href:!0});var qUt=s(pW);uVo=r(qUt,"DebertaV2Model"),qUt.forEach(t),pVo=r(Gze," (DeBERTa-v2 model)"),Gze.forEach(t),_Vo=i(x),n2=n(x,"LI",{});var Oze=s(n2);PFe=n(Oze,"STRONG",{});var jUt=s(PFe);bVo=r(jUt,"decision_transformer"),jUt.forEach(t),vVo=r(Oze," \u2014 "),_W=n(Oze,"A",{href:!0});var DUt=s(_W);FVo=r(DUt,"DecisionTransformerModel"),DUt.forEach(t),TVo=r(Oze," (Decision Transformer model)"),Oze.forEach(t),MVo=i(x),s2=n(x,"LI",{});var Vze=s(s2);BFe=n(Vze,"STRONG",{});var GUt=s(BFe);EVo=r(GUt,"deformable_detr"),GUt.forEach(t),CVo=r(Vze," \u2014 "),bW=n(Vze,"A",{href:!0});var OUt=s(bW);wVo=r(OUt,"DeformableDetrModel"),OUt.forEach(t),AVo=r(Vze," (Deformable DETR model)"),Vze.forEach(t),LVo=i(x),l2=n(x,"LI",{});var Xze=s(l2);IFe=n(Xze,"STRONG",{});var VUt=s(IFe);yVo=r(VUt,"deit"),VUt.forEach(t),xVo=r(Xze," \u2014 "),vW=n(Xze,"A",{href:!0});var XUt=s(vW);$Vo=r(XUt,"DeiTModel"),XUt.forEach(t),kVo=r(Xze," (DeiT model)"),Xze.forEach(t),SVo=i(x),i2=n(x,"LI",{});var zze=s(i2);NFe=n(zze,"STRONG",{});var zUt=s(NFe);RVo=r(zUt,"detr"),zUt.forEach(t),PVo=r(zze," \u2014 "),FW=n(zze,"A",{href:!0});var QUt=s(FW);BVo=r(QUt,"DetrModel"),QUt.forEach(t),IVo=r(zze," (DETR model)"),zze.forEach(t),NVo=i(x),d2=n(x,"LI",{});var Qze=s(d2);qFe=n(Qze,"STRONG",{});var WUt=s(qFe);qVo=r(WUt,"distilbert"),WUt.forEach(t),jVo=r(Qze," \u2014 "),TW=n(Qze,"A",{href:!0});var UUt=s(TW);DVo=r(UUt,"DistilBertModel"),UUt.forEach(t),GVo=r(Qze," (DistilBERT model)"),Qze.forEach(t),OVo=i(x),m2=n(x,"LI",{});var Wze=s(m2);jFe=n(Wze,"STRONG",{});var HUt=s(jFe);VVo=r(HUt,"donut-swin"),HUt.forEach(t),XVo=r(Wze," \u2014 "),MW=n(Wze,"A",{href:!0});var JUt=s(MW);zVo=r(JUt,"DonutSwinModel"),JUt.forEach(t),QVo=r(Wze," (DonutSwin model)"),Wze.forEach(t),WVo=i(x),c2=n(x,"LI",{});var Uze=s(c2);DFe=n(Uze,"STRONG",{});var YUt=s(DFe);UVo=r(YUt,"dpr"),YUt.forEach(t),HVo=r(Uze," \u2014 "),EW=n(Uze,"A",{href:!0});var ZUt=s(EW);JVo=r(ZUt,"DPRQuestionEncoder"),ZUt.forEach(t),YVo=r(Uze," (DPR model)"),Uze.forEach(t),ZVo=i(x),f2=n(x,"LI",{});var Hze=s(f2);GFe=n(Hze,"STRONG",{});var KUt=s(GFe);KVo=r(KUt,"dpt"),KUt.forEach(t),eXo=r(Hze," \u2014 "),CW=n(Hze,"A",{href:!0});var eHt=s(CW);oXo=r(eHt,"DPTModel"),eHt.forEach(t),rXo=r(Hze," (DPT model)"),Hze.forEach(t),tXo=i(x),g2=n(x,"LI",{});var Jze=s(g2);OFe=n(Jze,"STRONG",{});var oHt=s(OFe);aXo=r(oHt,"electra"),oHt.forEach(t),nXo=r(Jze," \u2014 "),wW=n(Jze,"A",{href:!0});var rHt=s(wW);sXo=r(rHt,"ElectraModel"),rHt.forEach(t),lXo=r(Jze," (ELECTRA model)"),Jze.forEach(t),iXo=i(x),h2=n(x,"LI",{});var Yze=s(h2);VFe=n(Yze,"STRONG",{});var tHt=s(VFe);dXo=r(tHt,"ernie"),tHt.forEach(t),mXo=r(Yze," \u2014 "),AW=n(Yze,"A",{href:!0});var aHt=s(AW);cXo=r(aHt,"ErnieModel"),aHt.forEach(t),fXo=r(Yze," (ERNIE model)"),Yze.forEach(t),gXo=i(x),u2=n(x,"LI",{});var Zze=s(u2);XFe=n(Zze,"STRONG",{});var nHt=s(XFe);hXo=r(nHt,"esm"),nHt.forEach(t),uXo=r(Zze," \u2014 "),LW=n(Zze,"A",{href:!0});var sHt=s(LW);pXo=r(sHt,"EsmModel"),sHt.forEach(t),_Xo=r(Zze," (ESM model)"),Zze.forEach(t),bXo=i(x),p2=n(x,"LI",{});var Kze=s(p2);zFe=n(Kze,"STRONG",{});var lHt=s(zFe);vXo=r(lHt,"flaubert"),lHt.forEach(t),FXo=r(Kze," \u2014 "),yW=n(Kze,"A",{href:!0});var iHt=s(yW);TXo=r(iHt,"FlaubertModel"),iHt.forEach(t),MXo=r(Kze," (FlauBERT model)"),Kze.forEach(t),EXo=i(x),_2=n(x,"LI",{});var eQe=s(_2);QFe=n(eQe,"STRONG",{});var dHt=s(QFe);CXo=r(dHt,"flava"),dHt.forEach(t),wXo=r(eQe," \u2014 "),xW=n(eQe,"A",{href:!0});var mHt=s(xW);AXo=r(mHt,"FlavaModel"),mHt.forEach(t),LXo=r(eQe," (FLAVA model)"),eQe.forEach(t),yXo=i(x),b2=n(x,"LI",{});var oQe=s(b2);WFe=n(oQe,"STRONG",{});var cHt=s(WFe);xXo=r(cHt,"fnet"),cHt.forEach(t),$Xo=r(oQe," \u2014 "),$W=n(oQe,"A",{href:!0});var fHt=s($W);kXo=r(fHt,"FNetModel"),fHt.forEach(t),SXo=r(oQe," (FNet model)"),oQe.forEach(t),RXo=i(x),v2=n(x,"LI",{});var rQe=s(v2);UFe=n(rQe,"STRONG",{});var gHt=s(UFe);PXo=r(gHt,"fsmt"),gHt.forEach(t),BXo=r(rQe," \u2014 "),kW=n(rQe,"A",{href:!0});var hHt=s(kW);IXo=r(hHt,"FSMTModel"),hHt.forEach(t),NXo=r(rQe," (FairSeq Machine-Translation model)"),rQe.forEach(t),qXo=i(x),ql=n(x,"LI",{});var Oq=s(ql);HFe=n(Oq,"STRONG",{});var uHt=s(HFe);jXo=r(uHt,"funnel"),uHt.forEach(t),DXo=r(Oq," \u2014 "),SW=n(Oq,"A",{href:!0});var pHt=s(SW);GXo=r(pHt,"FunnelModel"),pHt.forEach(t),OXo=r(Oq," or "),RW=n(Oq,"A",{href:!0});var _Ht=s(RW);VXo=r(_Ht,"FunnelBaseModel"),_Ht.forEach(t),XXo=r(Oq," (Funnel Transformer model)"),Oq.forEach(t),zXo=i(x),F2=n(x,"LI",{});var tQe=s(F2);JFe=n(tQe,"STRONG",{});var bHt=s(JFe);QXo=r(bHt,"glpn"),bHt.forEach(t),WXo=r(tQe," \u2014 "),PW=n(tQe,"A",{href:!0});var vHt=s(PW);UXo=r(vHt,"GLPNModel"),vHt.forEach(t),HXo=r(tQe," (GLPN model)"),tQe.forEach(t),JXo=i(x),T2=n(x,"LI",{});var aQe=s(T2);YFe=n(aQe,"STRONG",{});var FHt=s(YFe);YXo=r(FHt,"gpt2"),FHt.forEach(t),ZXo=r(aQe," \u2014 "),BW=n(aQe,"A",{href:!0});var THt=s(BW);KXo=r(THt,"GPT2Model"),THt.forEach(t),ezo=r(aQe," (OpenAI GPT-2 model)"),aQe.forEach(t),ozo=i(x),M2=n(x,"LI",{});var nQe=s(M2);ZFe=n(nQe,"STRONG",{});var MHt=s(ZFe);rzo=r(MHt,"gpt_neo"),MHt.forEach(t),tzo=r(nQe," \u2014 "),IW=n(nQe,"A",{href:!0});var EHt=s(IW);azo=r(EHt,"GPTNeoModel"),EHt.forEach(t),nzo=r(nQe," (GPT Neo model)"),nQe.forEach(t),szo=i(x),E2=n(x,"LI",{});var sQe=s(E2);KFe=n(sQe,"STRONG",{});var CHt=s(KFe);lzo=r(CHt,"gpt_neox"),CHt.forEach(t),izo=r(sQe," \u2014 "),NW=n(sQe,"A",{href:!0});var wHt=s(NW);dzo=r(wHt,"GPTNeoXModel"),wHt.forEach(t),mzo=r(sQe," (GPT NeoX model)"),sQe.forEach(t),czo=i(x),C2=n(x,"LI",{});var lQe=s(C2);eTe=n(lQe,"STRONG",{});var AHt=s(eTe);fzo=r(AHt,"gpt_neox_japanese"),AHt.forEach(t),gzo=r(lQe," \u2014 "),qW=n(lQe,"A",{href:!0});var LHt=s(qW);hzo=r(LHt,"GPTNeoXJapaneseModel"),LHt.forEach(t),uzo=r(lQe," (GPT NeoX Japanese model)"),lQe.forEach(t),pzo=i(x),w2=n(x,"LI",{});var iQe=s(w2);oTe=n(iQe,"STRONG",{});var yHt=s(oTe);_zo=r(yHt,"gptj"),yHt.forEach(t),bzo=r(iQe," \u2014 "),jW=n(iQe,"A",{href:!0});var xHt=s(jW);vzo=r(xHt,"GPTJModel"),xHt.forEach(t),Fzo=r(iQe," (GPT-J model)"),iQe.forEach(t),Tzo=i(x),A2=n(x,"LI",{});var dQe=s(A2);rTe=n(dQe,"STRONG",{});var $Ht=s(rTe);Mzo=r($Ht,"groupvit"),$Ht.forEach(t),Ezo=r(dQe," \u2014 "),DW=n(dQe,"A",{href:!0});var kHt=s(DW);Czo=r(kHt,"GroupViTModel"),kHt.forEach(t),wzo=r(dQe," (GroupViT model)"),dQe.forEach(t),Azo=i(x),L2=n(x,"LI",{});var mQe=s(L2);tTe=n(mQe,"STRONG",{});var SHt=s(tTe);Lzo=r(SHt,"hubert"),SHt.forEach(t),yzo=r(mQe," \u2014 "),GW=n(mQe,"A",{href:!0});var RHt=s(GW);xzo=r(RHt,"HubertModel"),RHt.forEach(t),$zo=r(mQe," (Hubert model)"),mQe.forEach(t),kzo=i(x),y2=n(x,"LI",{});var cQe=s(y2);aTe=n(cQe,"STRONG",{});var PHt=s(aTe);Szo=r(PHt,"ibert"),PHt.forEach(t),Rzo=r(cQe," \u2014 "),OW=n(cQe,"A",{href:!0});var BHt=s(OW);Pzo=r(BHt,"IBertModel"),BHt.forEach(t),Bzo=r(cQe," (I-BERT model)"),cQe.forEach(t),Izo=i(x),x2=n(x,"LI",{});var fQe=s(x2);nTe=n(fQe,"STRONG",{});var IHt=s(nTe);Nzo=r(IHt,"imagegpt"),IHt.forEach(t),qzo=r(fQe," \u2014 "),VW=n(fQe,"A",{href:!0});var NHt=s(VW);jzo=r(NHt,"ImageGPTModel"),NHt.forEach(t),Dzo=r(fQe," (ImageGPT model)"),fQe.forEach(t),Gzo=i(x),$2=n(x,"LI",{});var gQe=s($2);sTe=n(gQe,"STRONG",{});var qHt=s(sTe);Ozo=r(qHt,"jukebox"),qHt.forEach(t),Vzo=r(gQe," \u2014 "),XW=n(gQe,"A",{href:!0});var jHt=s(XW);Xzo=r(jHt,"JukeboxModel"),jHt.forEach(t),zzo=r(gQe," (Jukebox model)"),gQe.forEach(t),Qzo=i(x),k2=n(x,"LI",{});var hQe=s(k2);lTe=n(hQe,"STRONG",{});var DHt=s(lTe);Wzo=r(DHt,"layoutlm"),DHt.forEach(t),Uzo=r(hQe," \u2014 "),zW=n(hQe,"A",{href:!0});var GHt=s(zW);Hzo=r(GHt,"LayoutLMModel"),GHt.forEach(t),Jzo=r(hQe," (LayoutLM model)"),hQe.forEach(t),Yzo=i(x),S2=n(x,"LI",{});var uQe=s(S2);iTe=n(uQe,"STRONG",{});var OHt=s(iTe);Zzo=r(OHt,"layoutlmv2"),OHt.forEach(t),Kzo=r(uQe," \u2014 "),QW=n(uQe,"A",{href:!0});var VHt=s(QW);eQo=r(VHt,"LayoutLMv2Model"),VHt.forEach(t),oQo=r(uQe," (LayoutLMv2 model)"),uQe.forEach(t),rQo=i(x),R2=n(x,"LI",{});var pQe=s(R2);dTe=n(pQe,"STRONG",{});var XHt=s(dTe);tQo=r(XHt,"layoutlmv3"),XHt.forEach(t),aQo=r(pQe," \u2014 "),WW=n(pQe,"A",{href:!0});var zHt=s(WW);nQo=r(zHt,"LayoutLMv3Model"),zHt.forEach(t),sQo=r(pQe," (LayoutLMv3 model)"),pQe.forEach(t),lQo=i(x),P2=n(x,"LI",{});var _Qe=s(P2);mTe=n(_Qe,"STRONG",{});var QHt=s(mTe);iQo=r(QHt,"led"),QHt.forEach(t),dQo=r(_Qe," \u2014 "),UW=n(_Qe,"A",{href:!0});var WHt=s(UW);mQo=r(WHt,"LEDModel"),WHt.forEach(t),cQo=r(_Qe," (LED model)"),_Qe.forEach(t),fQo=i(x),B2=n(x,"LI",{});var bQe=s(B2);cTe=n(bQe,"STRONG",{});var UHt=s(cTe);gQo=r(UHt,"levit"),UHt.forEach(t),hQo=r(bQe," \u2014 "),HW=n(bQe,"A",{href:!0});var HHt=s(HW);uQo=r(HHt,"LevitModel"),HHt.forEach(t),pQo=r(bQe," (LeViT model)"),bQe.forEach(t),_Qo=i(x),I2=n(x,"LI",{});var vQe=s(I2);fTe=n(vQe,"STRONG",{});var JHt=s(fTe);bQo=r(JHt,"lilt"),JHt.forEach(t),vQo=r(vQe," \u2014 "),JW=n(vQe,"A",{href:!0});var YHt=s(JW);FQo=r(YHt,"LiltModel"),YHt.forEach(t),TQo=r(vQe," (LiLT model)"),vQe.forEach(t),MQo=i(x),N2=n(x,"LI",{});var FQe=s(N2);gTe=n(FQe,"STRONG",{});var ZHt=s(gTe);EQo=r(ZHt,"longformer"),ZHt.forEach(t),CQo=r(FQe," \u2014 "),YW=n(FQe,"A",{href:!0});var KHt=s(YW);wQo=r(KHt,"LongformerModel"),KHt.forEach(t),AQo=r(FQe," (Longformer model)"),FQe.forEach(t),LQo=i(x),q2=n(x,"LI",{});var TQe=s(q2);hTe=n(TQe,"STRONG",{});var eJt=s(hTe);yQo=r(eJt,"longt5"),eJt.forEach(t),xQo=r(TQe," \u2014 "),ZW=n(TQe,"A",{href:!0});var oJt=s(ZW);$Qo=r(oJt,"LongT5Model"),oJt.forEach(t),kQo=r(TQe," (LongT5 model)"),TQe.forEach(t),SQo=i(x),j2=n(x,"LI",{});var MQe=s(j2);uTe=n(MQe,"STRONG",{});var rJt=s(uTe);RQo=r(rJt,"luke"),rJt.forEach(t),PQo=r(MQe," \u2014 "),KW=n(MQe,"A",{href:!0});var tJt=s(KW);BQo=r(tJt,"LukeModel"),tJt.forEach(t),IQo=r(MQe," (LUKE model)"),MQe.forEach(t),NQo=i(x),D2=n(x,"LI",{});var EQe=s(D2);pTe=n(EQe,"STRONG",{});var aJt=s(pTe);qQo=r(aJt,"lxmert"),aJt.forEach(t),jQo=r(EQe," \u2014 "),eU=n(EQe,"A",{href:!0});var nJt=s(eU);DQo=r(nJt,"LxmertModel"),nJt.forEach(t),GQo=r(EQe," (LXMERT model)"),EQe.forEach(t),OQo=i(x),G2=n(x,"LI",{});var CQe=s(G2);_Te=n(CQe,"STRONG",{});var sJt=s(_Te);VQo=r(sJt,"m2m_100"),sJt.forEach(t),XQo=r(CQe," \u2014 "),oU=n(CQe,"A",{href:!0});var lJt=s(oU);zQo=r(lJt,"M2M100Model"),lJt.forEach(t),QQo=r(CQe," (M2M100 model)"),CQe.forEach(t),WQo=i(x),O2=n(x,"LI",{});var wQe=s(O2);bTe=n(wQe,"STRONG",{});var iJt=s(bTe);UQo=r(iJt,"marian"),iJt.forEach(t),HQo=r(wQe," \u2014 "),rU=n(wQe,"A",{href:!0});var dJt=s(rU);JQo=r(dJt,"MarianModel"),dJt.forEach(t),YQo=r(wQe," (Marian model)"),wQe.forEach(t),ZQo=i(x),V2=n(x,"LI",{});var AQe=s(V2);vTe=n(AQe,"STRONG",{});var mJt=s(vTe);KQo=r(mJt,"markuplm"),mJt.forEach(t),eWo=r(AQe," \u2014 "),tU=n(AQe,"A",{href:!0});var cJt=s(tU);oWo=r(cJt,"MarkupLMModel"),cJt.forEach(t),rWo=r(AQe," (MarkupLM model)"),AQe.forEach(t),tWo=i(x),X2=n(x,"LI",{});var LQe=s(X2);FTe=n(LQe,"STRONG",{});var fJt=s(FTe);aWo=r(fJt,"maskformer"),fJt.forEach(t),nWo=r(LQe," \u2014 "),aU=n(LQe,"A",{href:!0});var gJt=s(aU);sWo=r(gJt,"MaskFormerModel"),gJt.forEach(t),lWo=r(LQe," (MaskFormer model)"),LQe.forEach(t),iWo=i(x),z2=n(x,"LI",{});var yQe=s(z2);TTe=n(yQe,"STRONG",{});var hJt=s(TTe);dWo=r(hJt,"mbart"),hJt.forEach(t),mWo=r(yQe," \u2014 "),nU=n(yQe,"A",{href:!0});var uJt=s(nU);cWo=r(uJt,"MBartModel"),uJt.forEach(t),fWo=r(yQe," (mBART model)"),yQe.forEach(t),gWo=i(x),Q2=n(x,"LI",{});var xQe=s(Q2);MTe=n(xQe,"STRONG",{});var pJt=s(MTe);hWo=r(pJt,"mctct"),pJt.forEach(t),uWo=r(xQe," \u2014 "),sU=n(xQe,"A",{href:!0});var _Jt=s(sU);pWo=r(_Jt,"MCTCTModel"),_Jt.forEach(t),_Wo=r(xQe," (M-CTC-T model)"),xQe.forEach(t),bWo=i(x),W2=n(x,"LI",{});var $Qe=s(W2);ETe=n($Qe,"STRONG",{});var bJt=s(ETe);vWo=r(bJt,"megatron-bert"),bJt.forEach(t),FWo=r($Qe," \u2014 "),lU=n($Qe,"A",{href:!0});var vJt=s(lU);TWo=r(vJt,"MegatronBertModel"),vJt.forEach(t),MWo=r($Qe," (Megatron-BERT model)"),$Qe.forEach(t),EWo=i(x),U2=n(x,"LI",{});var kQe=s(U2);CTe=n(kQe,"STRONG",{});var FJt=s(CTe);CWo=r(FJt,"mobilebert"),FJt.forEach(t),wWo=r(kQe," \u2014 "),iU=n(kQe,"A",{href:!0});var TJt=s(iU);AWo=r(TJt,"MobileBertModel"),TJt.forEach(t),LWo=r(kQe," (MobileBERT model)"),kQe.forEach(t),yWo=i(x),H2=n(x,"LI",{});var SQe=s(H2);wTe=n(SQe,"STRONG",{});var MJt=s(wTe);xWo=r(MJt,"mobilenet_v2"),MJt.forEach(t),$Wo=r(SQe," \u2014 "),dU=n(SQe,"A",{href:!0});var EJt=s(dU);kWo=r(EJt,"MobileNetV2Model"),EJt.forEach(t),SWo=r(SQe," (MobileNetV2 model)"),SQe.forEach(t),RWo=i(x),J2=n(x,"LI",{});var RQe=s(J2);ATe=n(RQe,"STRONG",{});var CJt=s(ATe);PWo=r(CJt,"mobilevit"),CJt.forEach(t),BWo=r(RQe," \u2014 "),mU=n(RQe,"A",{href:!0});var wJt=s(mU);IWo=r(wJt,"MobileViTModel"),wJt.forEach(t),NWo=r(RQe," (MobileViT model)"),RQe.forEach(t),qWo=i(x),Y2=n(x,"LI",{});var PQe=s(Y2);LTe=n(PQe,"STRONG",{});var AJt=s(LTe);jWo=r(AJt,"mpnet"),AJt.forEach(t),DWo=r(PQe," \u2014 "),cU=n(PQe,"A",{href:!0});var LJt=s(cU);GWo=r(LJt,"MPNetModel"),LJt.forEach(t),OWo=r(PQe," (MPNet model)"),PQe.forEach(t),VWo=i(x),Z2=n(x,"LI",{});var BQe=s(Z2);yTe=n(BQe,"STRONG",{});var yJt=s(yTe);XWo=r(yJt,"mt5"),yJt.forEach(t),zWo=r(BQe," \u2014 "),fU=n(BQe,"A",{href:!0});var xJt=s(fU);QWo=r(xJt,"MT5Model"),xJt.forEach(t),WWo=r(BQe," (MT5 model)"),BQe.forEach(t),UWo=i(x),K2=n(x,"LI",{});var IQe=s(K2);xTe=n(IQe,"STRONG",{});var $Jt=s(xTe);HWo=r($Jt,"mvp"),$Jt.forEach(t),JWo=r(IQe," \u2014 "),gU=n(IQe,"A",{href:!0});var kJt=s(gU);YWo=r(kJt,"MvpModel"),kJt.forEach(t),ZWo=r(IQe," (MVP model)"),IQe.forEach(t),KWo=i(x),eb=n(x,"LI",{});var NQe=s(eb);$Te=n(NQe,"STRONG",{});var SJt=s($Te);eUo=r(SJt,"nezha"),SJt.forEach(t),oUo=r(NQe," \u2014 "),hU=n(NQe,"A",{href:!0});var RJt=s(hU);rUo=r(RJt,"NezhaModel"),RJt.forEach(t),tUo=r(NQe," (Nezha model)"),NQe.forEach(t),aUo=i(x),ob=n(x,"LI",{});var qQe=s(ob);kTe=n(qQe,"STRONG",{});var PJt=s(kTe);nUo=r(PJt,"nllb"),PJt.forEach(t),sUo=r(qQe," \u2014 "),uU=n(qQe,"A",{href:!0});var BJt=s(uU);lUo=r(BJt,"M2M100Model"),BJt.forEach(t),iUo=r(qQe," (NLLB model)"),qQe.forEach(t),dUo=i(x),rb=n(x,"LI",{});var jQe=s(rb);STe=n(jQe,"STRONG",{});var IJt=s(STe);mUo=r(IJt,"nystromformer"),IJt.forEach(t),cUo=r(jQe," \u2014 "),pU=n(jQe,"A",{href:!0});var NJt=s(pU);fUo=r(NJt,"NystromformerModel"),NJt.forEach(t),gUo=r(jQe," (Nystr\xF6mformer model)"),jQe.forEach(t),hUo=i(x),tb=n(x,"LI",{});var DQe=s(tb);RTe=n(DQe,"STRONG",{});var qJt=s(RTe);uUo=r(qJt,"openai-gpt"),qJt.forEach(t),pUo=r(DQe," \u2014 "),_U=n(DQe,"A",{href:!0});var jJt=s(_U);_Uo=r(jJt,"OpenAIGPTModel"),jJt.forEach(t),bUo=r(DQe," (OpenAI GPT model)"),DQe.forEach(t),vUo=i(x),ab=n(x,"LI",{});var GQe=s(ab);PTe=n(GQe,"STRONG",{});var DJt=s(PTe);FUo=r(DJt,"opt"),DJt.forEach(t),TUo=r(GQe," \u2014 "),bU=n(GQe,"A",{href:!0});var GJt=s(bU);MUo=r(GJt,"OPTModel"),GJt.forEach(t),EUo=r(GQe," (OPT model)"),GQe.forEach(t),CUo=i(x),nb=n(x,"LI",{});var OQe=s(nb);BTe=n(OQe,"STRONG",{});var OJt=s(BTe);wUo=r(OJt,"owlvit"),OJt.forEach(t),AUo=r(OQe," \u2014 "),vU=n(OQe,"A",{href:!0});var VJt=s(vU);LUo=r(VJt,"OwlViTModel"),VJt.forEach(t),yUo=r(OQe," (OWL-ViT model)"),OQe.forEach(t),xUo=i(x),sb=n(x,"LI",{});var VQe=s(sb);ITe=n(VQe,"STRONG",{});var XJt=s(ITe);$Uo=r(XJt,"pegasus"),XJt.forEach(t),kUo=r(VQe," \u2014 "),FU=n(VQe,"A",{href:!0});var zJt=s(FU);SUo=r(zJt,"PegasusModel"),zJt.forEach(t),RUo=r(VQe," (Pegasus model)"),VQe.forEach(t),PUo=i(x),lb=n(x,"LI",{});var XQe=s(lb);NTe=n(XQe,"STRONG",{});var QJt=s(NTe);BUo=r(QJt,"pegasus_x"),QJt.forEach(t),IUo=r(XQe," \u2014 "),TU=n(XQe,"A",{href:!0});var WJt=s(TU);NUo=r(WJt,"PegasusXModel"),WJt.forEach(t),qUo=r(XQe," (PEGASUS-X model)"),XQe.forEach(t),jUo=i(x),ib=n(x,"LI",{});var zQe=s(ib);qTe=n(zQe,"STRONG",{});var UJt=s(qTe);DUo=r(UJt,"perceiver"),UJt.forEach(t),GUo=r(zQe," \u2014 "),MU=n(zQe,"A",{href:!0});var HJt=s(MU);OUo=r(HJt,"PerceiverModel"),HJt.forEach(t),VUo=r(zQe," (Perceiver model)"),zQe.forEach(t),XUo=i(x),db=n(x,"LI",{});var QQe=s(db);jTe=n(QQe,"STRONG",{});var JJt=s(jTe);zUo=r(JJt,"plbart"),JJt.forEach(t),QUo=r(QQe," \u2014 "),EU=n(QQe,"A",{href:!0});var YJt=s(EU);WUo=r(YJt,"PLBartModel"),YJt.forEach(t),UUo=r(QQe," (PLBart model)"),QQe.forEach(t),HUo=i(x),mb=n(x,"LI",{});var WQe=s(mb);DTe=n(WQe,"STRONG",{});var ZJt=s(DTe);JUo=r(ZJt,"poolformer"),ZJt.forEach(t),YUo=r(WQe," \u2014 "),CU=n(WQe,"A",{href:!0});var KJt=s(CU);ZUo=r(KJt,"PoolFormerModel"),KJt.forEach(t),KUo=r(WQe," (PoolFormer model)"),WQe.forEach(t),eHo=i(x),cb=n(x,"LI",{});var UQe=s(cb);GTe=n(UQe,"STRONG",{});var eYt=s(GTe);oHo=r(eYt,"prophetnet"),eYt.forEach(t),rHo=r(UQe," \u2014 "),wU=n(UQe,"A",{href:!0});var oYt=s(wU);tHo=r(oYt,"ProphetNetModel"),oYt.forEach(t),aHo=r(UQe," (ProphetNet model)"),UQe.forEach(t),nHo=i(x),fb=n(x,"LI",{});var HQe=s(fb);OTe=n(HQe,"STRONG",{});var rYt=s(OTe);sHo=r(rYt,"qdqbert"),rYt.forEach(t),lHo=r(HQe," \u2014 "),AU=n(HQe,"A",{href:!0});var tYt=s(AU);iHo=r(tYt,"QDQBertModel"),tYt.forEach(t),dHo=r(HQe," (QDQBert model)"),HQe.forEach(t),mHo=i(x),gb=n(x,"LI",{});var JQe=s(gb);VTe=n(JQe,"STRONG",{});var aYt=s(VTe);cHo=r(aYt,"reformer"),aYt.forEach(t),fHo=r(JQe," \u2014 "),LU=n(JQe,"A",{href:!0});var nYt=s(LU);gHo=r(nYt,"ReformerModel"),nYt.forEach(t),hHo=r(JQe," (Reformer model)"),JQe.forEach(t),uHo=i(x),hb=n(x,"LI",{});var YQe=s(hb);XTe=n(YQe,"STRONG",{});var sYt=s(XTe);pHo=r(sYt,"regnet"),sYt.forEach(t),_Ho=r(YQe," \u2014 "),yU=n(YQe,"A",{href:!0});var lYt=s(yU);bHo=r(lYt,"RegNetModel"),lYt.forEach(t),vHo=r(YQe," (RegNet model)"),YQe.forEach(t),FHo=i(x),ub=n(x,"LI",{});var ZQe=s(ub);zTe=n(ZQe,"STRONG",{});var iYt=s(zTe);THo=r(iYt,"rembert"),iYt.forEach(t),MHo=r(ZQe," \u2014 "),xU=n(ZQe,"A",{href:!0});var dYt=s(xU);EHo=r(dYt,"RemBertModel"),dYt.forEach(t),CHo=r(ZQe," (RemBERT model)"),ZQe.forEach(t),wHo=i(x),pb=n(x,"LI",{});var KQe=s(pb);QTe=n(KQe,"STRONG",{});var mYt=s(QTe);AHo=r(mYt,"resnet"),mYt.forEach(t),LHo=r(KQe," \u2014 "),$U=n(KQe,"A",{href:!0});var cYt=s($U);yHo=r(cYt,"ResNetModel"),cYt.forEach(t),xHo=r(KQe," (ResNet model)"),KQe.forEach(t),$Ho=i(x),_b=n(x,"LI",{});var eWe=s(_b);WTe=n(eWe,"STRONG",{});var fYt=s(WTe);kHo=r(fYt,"retribert"),fYt.forEach(t),SHo=r(eWe," \u2014 "),kU=n(eWe,"A",{href:!0});var gYt=s(kU);RHo=r(gYt,"RetriBertModel"),gYt.forEach(t),PHo=r(eWe," (RetriBERT model)"),eWe.forEach(t),BHo=i(x),bb=n(x,"LI",{});var oWe=s(bb);UTe=n(oWe,"STRONG",{});var hYt=s(UTe);IHo=r(hYt,"roberta"),hYt.forEach(t),NHo=r(oWe," \u2014 "),SU=n(oWe,"A",{href:!0});var uYt=s(SU);qHo=r(uYt,"RobertaModel"),uYt.forEach(t),jHo=r(oWe," (RoBERTa model)"),oWe.forEach(t),DHo=i(x),vb=n(x,"LI",{});var rWe=s(vb);HTe=n(rWe,"STRONG",{});var pYt=s(HTe);GHo=r(pYt,"roc_bert"),pYt.forEach(t),OHo=r(rWe," \u2014 "),RU=n(rWe,"A",{href:!0});var _Yt=s(RU);VHo=r(_Yt,"RoCBertModel"),_Yt.forEach(t),XHo=r(rWe," (RoCBert model)"),rWe.forEach(t),zHo=i(x),Fb=n(x,"LI",{});var tWe=s(Fb);JTe=n(tWe,"STRONG",{});var bYt=s(JTe);QHo=r(bYt,"roformer"),bYt.forEach(t),WHo=r(tWe," \u2014 "),PU=n(tWe,"A",{href:!0});var vYt=s(PU);UHo=r(vYt,"RoFormerModel"),vYt.forEach(t),HHo=r(tWe," (RoFormer model)"),tWe.forEach(t),JHo=i(x),Tb=n(x,"LI",{});var aWe=s(Tb);YTe=n(aWe,"STRONG",{});var FYt=s(YTe);YHo=r(FYt,"segformer"),FYt.forEach(t),ZHo=r(aWe," \u2014 "),BU=n(aWe,"A",{href:!0});var TYt=s(BU);KHo=r(TYt,"SegformerModel"),TYt.forEach(t),eJo=r(aWe," (SegFormer model)"),aWe.forEach(t),oJo=i(x),Mb=n(x,"LI",{});var nWe=s(Mb);ZTe=n(nWe,"STRONG",{});var MYt=s(ZTe);rJo=r(MYt,"sew"),MYt.forEach(t),tJo=r(nWe," \u2014 "),IU=n(nWe,"A",{href:!0});var EYt=s(IU);aJo=r(EYt,"SEWModel"),EYt.forEach(t),nJo=r(nWe," (SEW model)"),nWe.forEach(t),sJo=i(x),Eb=n(x,"LI",{});var sWe=s(Eb);KTe=n(sWe,"STRONG",{});var CYt=s(KTe);lJo=r(CYt,"sew-d"),CYt.forEach(t),iJo=r(sWe," \u2014 "),NU=n(sWe,"A",{href:!0});var wYt=s(NU);dJo=r(wYt,"SEWDModel"),wYt.forEach(t),mJo=r(sWe," (SEW-D model)"),sWe.forEach(t),cJo=i(x),Cb=n(x,"LI",{});var lWe=s(Cb);eMe=n(lWe,"STRONG",{});var AYt=s(eMe);fJo=r(AYt,"speech_to_text"),AYt.forEach(t),gJo=r(lWe," \u2014 "),qU=n(lWe,"A",{href:!0});var LYt=s(qU);hJo=r(LYt,"Speech2TextModel"),LYt.forEach(t),uJo=r(lWe," (Speech2Text model)"),lWe.forEach(t),pJo=i(x),wb=n(x,"LI",{});var iWe=s(wb);oMe=n(iWe,"STRONG",{});var yYt=s(oMe);_Jo=r(yYt,"splinter"),yYt.forEach(t),bJo=r(iWe," \u2014 "),jU=n(iWe,"A",{href:!0});var xYt=s(jU);vJo=r(xYt,"SplinterModel"),xYt.forEach(t),FJo=r(iWe," (Splinter model)"),iWe.forEach(t),TJo=i(x),Ab=n(x,"LI",{});var dWe=s(Ab);rMe=n(dWe,"STRONG",{});var $Yt=s(rMe);MJo=r($Yt,"squeezebert"),$Yt.forEach(t),EJo=r(dWe," \u2014 "),DU=n(dWe,"A",{href:!0});var kYt=s(DU);CJo=r(kYt,"SqueezeBertModel"),kYt.forEach(t),wJo=r(dWe," (SqueezeBERT model)"),dWe.forEach(t),AJo=i(x),Lb=n(x,"LI",{});var mWe=s(Lb);tMe=n(mWe,"STRONG",{});var SYt=s(tMe);LJo=r(SYt,"swin"),SYt.forEach(t),yJo=r(mWe," \u2014 "),GU=n(mWe,"A",{href:!0});var RYt=s(GU);xJo=r(RYt,"SwinModel"),RYt.forEach(t),$Jo=r(mWe," (Swin Transformer model)"),mWe.forEach(t),kJo=i(x),yb=n(x,"LI",{});var cWe=s(yb);aMe=n(cWe,"STRONG",{});var PYt=s(aMe);SJo=r(PYt,"swinv2"),PYt.forEach(t),RJo=r(cWe," \u2014 "),OU=n(cWe,"A",{href:!0});var BYt=s(OU);PJo=r(BYt,"Swinv2Model"),BYt.forEach(t),BJo=r(cWe," (Swin Transformer V2 model)"),cWe.forEach(t),IJo=i(x),xb=n(x,"LI",{});var fWe=s(xb);nMe=n(fWe,"STRONG",{});var IYt=s(nMe);NJo=r(IYt,"switch_transformers"),IYt.forEach(t),qJo=r(fWe," \u2014 "),VU=n(fWe,"A",{href:!0});var NYt=s(VU);jJo=r(NYt,"SwitchTransformersModel"),NYt.forEach(t),DJo=r(fWe," (SwitchTransformers model)"),fWe.forEach(t),GJo=i(x),$b=n(x,"LI",{});var gWe=s($b);sMe=n(gWe,"STRONG",{});var qYt=s(sMe);OJo=r(qYt,"t5"),qYt.forEach(t),VJo=r(gWe," \u2014 "),XU=n(gWe,"A",{href:!0});var jYt=s(XU);XJo=r(jYt,"T5Model"),jYt.forEach(t),zJo=r(gWe," (T5 model)"),gWe.forEach(t),QJo=i(x),kb=n(x,"LI",{});var hWe=s(kb);lMe=n(hWe,"STRONG",{});var DYt=s(lMe);WJo=r(DYt,"table-transformer"),DYt.forEach(t),UJo=r(hWe," \u2014 "),zU=n(hWe,"A",{href:!0});var GYt=s(zU);HJo=r(GYt,"TableTransformerModel"),GYt.forEach(t),JJo=r(hWe," (Table Transformer model)"),hWe.forEach(t),YJo=i(x),Sb=n(x,"LI",{});var uWe=s(Sb);iMe=n(uWe,"STRONG",{});var OYt=s(iMe);ZJo=r(OYt,"tapas"),OYt.forEach(t),KJo=r(uWe," \u2014 "),QU=n(uWe,"A",{href:!0});var VYt=s(QU);eYo=r(VYt,"TapasModel"),VYt.forEach(t),oYo=r(uWe," (TAPAS model)"),uWe.forEach(t),rYo=i(x),Rb=n(x,"LI",{});var pWe=s(Rb);dMe=n(pWe,"STRONG",{});var XYt=s(dMe);tYo=r(XYt,"time_series_transformer"),XYt.forEach(t),aYo=r(pWe," \u2014 "),WU=n(pWe,"A",{href:!0});var zYt=s(WU);nYo=r(zYt,"TimeSeriesTransformerModel"),zYt.forEach(t),sYo=r(pWe," (Time Series Transformer model)"),pWe.forEach(t),lYo=i(x),Pb=n(x,"LI",{});var _We=s(Pb);mMe=n(_We,"STRONG",{});var QYt=s(mMe);iYo=r(QYt,"trajectory_transformer"),QYt.forEach(t),dYo=r(_We," \u2014 "),UU=n(_We,"A",{href:!0});var WYt=s(UU);mYo=r(WYt,"TrajectoryTransformerModel"),WYt.forEach(t),cYo=r(_We," (Trajectory Transformer model)"),_We.forEach(t),fYo=i(x),Bb=n(x,"LI",{});var bWe=s(Bb);cMe=n(bWe,"STRONG",{});var UYt=s(cMe);gYo=r(UYt,"transfo-xl"),UYt.forEach(t),hYo=r(bWe," \u2014 "),HU=n(bWe,"A",{href:!0});var HYt=s(HU);uYo=r(HYt,"TransfoXLModel"),HYt.forEach(t),pYo=r(bWe," (Transformer-XL model)"),bWe.forEach(t),_Yo=i(x),Ib=n(x,"LI",{});var vWe=s(Ib);fMe=n(vWe,"STRONG",{});var JYt=s(fMe);bYo=r(JYt,"unispeech"),JYt.forEach(t),vYo=r(vWe," \u2014 "),JU=n(vWe,"A",{href:!0});var YYt=s(JU);FYo=r(YYt,"UniSpeechModel"),YYt.forEach(t),TYo=r(vWe," (UniSpeech model)"),vWe.forEach(t),MYo=i(x),Nb=n(x,"LI",{});var FWe=s(Nb);gMe=n(FWe,"STRONG",{});var ZYt=s(gMe);EYo=r(ZYt,"unispeech-sat"),ZYt.forEach(t),CYo=r(FWe," \u2014 "),YU=n(FWe,"A",{href:!0});var KYt=s(YU);wYo=r(KYt,"UniSpeechSatModel"),KYt.forEach(t),AYo=r(FWe," (UniSpeechSat model)"),FWe.forEach(t),LYo=i(x),qb=n(x,"LI",{});var TWe=s(qb);hMe=n(TWe,"STRONG",{});var eZt=s(hMe);yYo=r(eZt,"van"),eZt.forEach(t),xYo=r(TWe," \u2014 "),ZU=n(TWe,"A",{href:!0});var oZt=s(ZU);$Yo=r(oZt,"VanModel"),oZt.forEach(t),kYo=r(TWe," (VAN model)"),TWe.forEach(t),SYo=i(x),jb=n(x,"LI",{});var MWe=s(jb);uMe=n(MWe,"STRONG",{});var rZt=s(uMe);RYo=r(rZt,"videomae"),rZt.forEach(t),PYo=r(MWe," \u2014 "),KU=n(MWe,"A",{href:!0});var tZt=s(KU);BYo=r(tZt,"VideoMAEModel"),tZt.forEach(t),IYo=r(MWe," (VideoMAE model)"),MWe.forEach(t),NYo=i(x),Db=n(x,"LI",{});var EWe=s(Db);pMe=n(EWe,"STRONG",{});var aZt=s(pMe);qYo=r(aZt,"vilt"),aZt.forEach(t),jYo=r(EWe," \u2014 "),eH=n(EWe,"A",{href:!0});var nZt=s(eH);DYo=r(nZt,"ViltModel"),nZt.forEach(t),GYo=r(EWe," (ViLT model)"),EWe.forEach(t),OYo=i(x),Gb=n(x,"LI",{});var CWe=s(Gb);_Me=n(CWe,"STRONG",{});var sZt=s(_Me);VYo=r(sZt,"vision-text-dual-encoder"),sZt.forEach(t),XYo=r(CWe," \u2014 "),oH=n(CWe,"A",{href:!0});var lZt=s(oH);zYo=r(lZt,"VisionTextDualEncoderModel"),lZt.forEach(t),QYo=r(CWe," (VisionTextDualEncoder model)"),CWe.forEach(t),WYo=i(x),Ob=n(x,"LI",{});var wWe=s(Ob);bMe=n(wWe,"STRONG",{});var iZt=s(bMe);UYo=r(iZt,"visual_bert"),iZt.forEach(t),HYo=r(wWe," \u2014 "),rH=n(wWe,"A",{href:!0});var dZt=s(rH);JYo=r(dZt,"VisualBertModel"),dZt.forEach(t),YYo=r(wWe," (VisualBERT model)"),wWe.forEach(t),ZYo=i(x),Vb=n(x,"LI",{});var AWe=s(Vb);vMe=n(AWe,"STRONG",{});var mZt=s(vMe);KYo=r(mZt,"vit"),mZt.forEach(t),eZo=r(AWe," \u2014 "),tH=n(AWe,"A",{href:!0});var cZt=s(tH);oZo=r(cZt,"ViTModel"),cZt.forEach(t),rZo=r(AWe," (ViT model)"),AWe.forEach(t),tZo=i(x),Xb=n(x,"LI",{});var LWe=s(Xb);FMe=n(LWe,"STRONG",{});var fZt=s(FMe);aZo=r(fZt,"vit_mae"),fZt.forEach(t),nZo=r(LWe," \u2014 "),aH=n(LWe,"A",{href:!0});var gZt=s(aH);sZo=r(gZt,"ViTMAEModel"),gZt.forEach(t),lZo=r(LWe," (ViTMAE model)"),LWe.forEach(t),iZo=i(x),zb=n(x,"LI",{});var yWe=s(zb);TMe=n(yWe,"STRONG",{});var hZt=s(TMe);dZo=r(hZt,"vit_msn"),hZt.forEach(t),mZo=r(yWe," \u2014 "),nH=n(yWe,"A",{href:!0});var uZt=s(nH);cZo=r(uZt,"ViTMSNModel"),uZt.forEach(t),fZo=r(yWe," (ViTMSN model)"),yWe.forEach(t),gZo=i(x),Qb=n(x,"LI",{});var xWe=s(Qb);MMe=n(xWe,"STRONG",{});var pZt=s(MMe);hZo=r(pZt,"wav2vec2"),pZt.forEach(t),uZo=r(xWe," \u2014 "),sH=n(xWe,"A",{href:!0});var _Zt=s(sH);pZo=r(_Zt,"Wav2Vec2Model"),_Zt.forEach(t),_Zo=r(xWe," (Wav2Vec2 model)"),xWe.forEach(t),bZo=i(x),Wb=n(x,"LI",{});var $We=s(Wb);EMe=n($We,"STRONG",{});var bZt=s(EMe);vZo=r(bZt,"wav2vec2-conformer"),bZt.forEach(t),FZo=r($We," \u2014 "),lH=n($We,"A",{href:!0});var vZt=s(lH);TZo=r(vZt,"Wav2Vec2ConformerModel"),vZt.forEach(t),MZo=r($We," (Wav2Vec2-Conformer model)"),$We.forEach(t),EZo=i(x),Ub=n(x,"LI",{});var kWe=s(Ub);CMe=n(kWe,"STRONG",{});var FZt=s(CMe);CZo=r(FZt,"wavlm"),FZt.forEach(t),wZo=r(kWe," \u2014 "),iH=n(kWe,"A",{href:!0});var TZt=s(iH);AZo=r(TZt,"WavLMModel"),TZt.forEach(t),LZo=r(kWe," (WavLM model)"),kWe.forEach(t),yZo=i(x),Hb=n(x,"LI",{});var SWe=s(Hb);wMe=n(SWe,"STRONG",{});var MZt=s(wMe);xZo=r(MZt,"whisper"),MZt.forEach(t),$Zo=r(SWe," \u2014 "),dH=n(SWe,"A",{href:!0});var EZt=s(dH);kZo=r(EZt,"WhisperModel"),EZt.forEach(t),SZo=r(SWe," (Whisper model)"),SWe.forEach(t),RZo=i(x),Jb=n(x,"LI",{});var RWe=s(Jb);AMe=n(RWe,"STRONG",{});var CZt=s(AMe);PZo=r(CZt,"xclip"),CZt.forEach(t),BZo=r(RWe," \u2014 "),mH=n(RWe,"A",{href:!0});var wZt=s(mH);IZo=r(wZt,"XCLIPModel"),wZt.forEach(t),NZo=r(RWe," (X-CLIP model)"),RWe.forEach(t),qZo=i(x),Yb=n(x,"LI",{});var PWe=s(Yb);LMe=n(PWe,"STRONG",{});var AZt=s(LMe);jZo=r(AZt,"xglm"),AZt.forEach(t),DZo=r(PWe," \u2014 "),cH=n(PWe,"A",{href:!0});var LZt=s(cH);GZo=r(LZt,"XGLMModel"),LZt.forEach(t),OZo=r(PWe," (XGLM model)"),PWe.forEach(t),VZo=i(x),Zb=n(x,"LI",{});var BWe=s(Zb);yMe=n(BWe,"STRONG",{});var yZt=s(yMe);XZo=r(yZt,"xlm"),yZt.forEach(t),zZo=r(BWe," \u2014 "),fH=n(BWe,"A",{href:!0});var xZt=s(fH);QZo=r(xZt,"XLMModel"),xZt.forEach(t),WZo=r(BWe," (XLM model)"),BWe.forEach(t),UZo=i(x),Kb=n(x,"LI",{});var IWe=s(Kb);xMe=n(IWe,"STRONG",{});var $Zt=s(xMe);HZo=r($Zt,"xlm-prophetnet"),$Zt.forEach(t),JZo=r(IWe," \u2014 "),gH=n(IWe,"A",{href:!0});var kZt=s(gH);YZo=r(kZt,"XLMProphetNetModel"),kZt.forEach(t),ZZo=r(IWe," (XLM-ProphetNet model)"),IWe.forEach(t),KZo=i(x),ev=n(x,"LI",{});var NWe=s(ev);$Me=n(NWe,"STRONG",{});var SZt=s($Me);eKo=r(SZt,"xlm-roberta"),SZt.forEach(t),oKo=r(NWe," \u2014 "),hH=n(NWe,"A",{href:!0});var RZt=s(hH);rKo=r(RZt,"XLMRobertaModel"),RZt.forEach(t),tKo=r(NWe," (XLM-RoBERTa model)"),NWe.forEach(t),aKo=i(x),ov=n(x,"LI",{});var qWe=s(ov);kMe=n(qWe,"STRONG",{});var PZt=s(kMe);nKo=r(PZt,"xlm-roberta-xl"),PZt.forEach(t),sKo=r(qWe," \u2014 "),uH=n(qWe,"A",{href:!0});var BZt=s(uH);lKo=r(BZt,"XLMRobertaXLModel"),BZt.forEach(t),iKo=r(qWe," (XLM-RoBERTa-XL model)"),qWe.forEach(t),dKo=i(x),rv=n(x,"LI",{});var jWe=s(rv);SMe=n(jWe,"STRONG",{});var IZt=s(SMe);mKo=r(IZt,"xlnet"),IZt.forEach(t),cKo=r(jWe," \u2014 "),pH=n(jWe,"A",{href:!0});var NZt=s(pH);fKo=r(NZt,"XLNetModel"),NZt.forEach(t),gKo=r(jWe," (XLNet model)"),jWe.forEach(t),hKo=i(x),tv=n(x,"LI",{});var DWe=s(tv);RMe=n(DWe,"STRONG",{});var qZt=s(RMe);uKo=r(qZt,"yolos"),qZt.forEach(t),pKo=r(DWe," \u2014 "),_H=n(DWe,"A",{href:!0});var jZt=s(_H);_Ko=r(jZt,"YolosModel"),jZt.forEach(t),bKo=r(DWe," (YOLOS model)"),DWe.forEach(t),vKo=i(x),av=n(x,"LI",{});var GWe=s(av);PMe=n(GWe,"STRONG",{});var DZt=s(PMe);FKo=r(DZt,"yoso"),DZt.forEach(t),TKo=r(GWe," \u2014 "),bH=n(GWe,"A",{href:!0});var GZt=s(bH);MKo=r(GZt,"YosoModel"),GZt.forEach(t),EKo=r(GWe," (YOSO model)"),GWe.forEach(t),x.forEach(t),CKo=i(Sa),nv=n(Sa,"P",{});var OWe=s(nv);wKo=r(OWe,"The model is set in evaluation mode by default using "),BMe=n(OWe,"CODE",{});var OZt=s(BMe);AKo=r(OZt,"model.eval()"),OZt.forEach(t),LKo=r(OWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IMe=n(OWe,"CODE",{});var VZt=s(IMe);yKo=r(VZt,"model.train()"),VZt.forEach(t),OWe.forEach(t),xKo=i(Sa),T(sv.$$.fragment,Sa),Sa.forEach(t),Ul.forEach(t),Iio=i(c),zd=n(c,"H2",{class:!0});var aco=s(zd);lv=n(aco,"A",{id:!0,class:!0,href:!0});var XZt=s(lv);NMe=n(XZt,"SPAN",{});var zZt=s(NMe);T(dS.$$.fragment,zZt),zZt.forEach(t),XZt.forEach(t),$Ko=i(aco),qMe=n(aco,"SPAN",{});var QZt=s(qMe);kKo=r(QZt,"AutoModelForPreTraining"),QZt.forEach(t),aco.forEach(t),Nio=i(c),Go=n(c,"DIV",{class:!0});var Hl=s(Go);T(mS.$$.fragment,Hl),SKo=i(Hl),Qd=n(Hl,"P",{});var qfe=s(Qd);RKo=r(qfe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vH=n(qfe,"A",{href:!0});var WZt=s(vH);PKo=r(WZt,"from_pretrained()"),WZt.forEach(t),BKo=r(qfe," class method or the "),FH=n(qfe,"A",{href:!0});var UZt=s(FH);IKo=r(UZt,"from_config()"),UZt.forEach(t),NKo=r(qfe,` class
method.`),qfe.forEach(t),qKo=i(Hl),cS=n(Hl,"P",{});var nco=s(cS);jKo=r(nco,"This class cannot be instantiated directly using "),jMe=n(nco,"CODE",{});var HZt=s(jMe);DKo=r(HZt,"__init__()"),HZt.forEach(t),GKo=r(nco," (throws an error)."),nco.forEach(t),OKo=i(Hl),Lt=n(Hl,"DIV",{class:!0});var vx=s(Lt);T(fS.$$.fragment,vx),VKo=i(vx),DMe=n(vx,"P",{});var JZt=s(DMe);XKo=r(JZt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JZt.forEach(t),zKo=i(vx),Wd=n(vx,"P",{});var jfe=s(Wd);QKo=r(jfe,`Note:
Loading a model from its configuration file does `),GMe=n(jfe,"STRONG",{});var YZt=s(GMe);WKo=r(YZt,"not"),YZt.forEach(t),UKo=r(jfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(jfe,"A",{href:!0});var ZZt=s(TH);HKo=r(ZZt,"from_pretrained()"),ZZt.forEach(t),JKo=r(jfe," to load the model weights."),jfe.forEach(t),YKo=i(vx),T(iv.$$.fragment,vx),vx.forEach(t),ZKo=i(Hl),ao=n(Hl,"DIV",{class:!0});var Ra=s(ao);T(gS.$$.fragment,Ra),KKo=i(Ra),OMe=n(Ra,"P",{});var KZt=s(OMe);eer=r(KZt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),KZt.forEach(t),oer=i(Ra),hn=n(Ra,"P",{});var Fx=s(hn);rer=r(Fx,"The model class to instantiate is selected based on the "),VMe=n(Fx,"CODE",{});var eKt=s(VMe);ter=r(eKt,"model_type"),eKt.forEach(t),aer=r(Fx,` property of the config object (either
passed as an argument or loaded from `),XMe=n(Fx,"CODE",{});var oKt=s(XMe);ner=r(oKt,"pretrained_model_name_or_path"),oKt.forEach(t),ser=r(Fx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n(Fx,"CODE",{});var rKt=s(zMe);ler=r(rKt,"pretrained_model_name_or_path"),rKt.forEach(t),ier=r(Fx,":"),Fx.forEach(t),der=i(Ra),G=n(Ra,"UL",{});var V=s(G);dv=n(V,"LI",{});var VWe=s(dv);QMe=n(VWe,"STRONG",{});var tKt=s(QMe);mer=r(tKt,"albert"),tKt.forEach(t),cer=r(VWe," \u2014 "),MH=n(VWe,"A",{href:!0});var aKt=s(MH);fer=r(aKt,"AlbertForPreTraining"),aKt.forEach(t),ger=r(VWe," (ALBERT model)"),VWe.forEach(t),her=i(V),mv=n(V,"LI",{});var XWe=s(mv);WMe=n(XWe,"STRONG",{});var nKt=s(WMe);uer=r(nKt,"bart"),nKt.forEach(t),per=r(XWe," \u2014 "),EH=n(XWe,"A",{href:!0});var sKt=s(EH);_er=r(sKt,"BartForConditionalGeneration"),sKt.forEach(t),ber=r(XWe," (BART model)"),XWe.forEach(t),ver=i(V),cv=n(V,"LI",{});var zWe=s(cv);UMe=n(zWe,"STRONG",{});var lKt=s(UMe);Fer=r(lKt,"bert"),lKt.forEach(t),Ter=r(zWe," \u2014 "),CH=n(zWe,"A",{href:!0});var iKt=s(CH);Mer=r(iKt,"BertForPreTraining"),iKt.forEach(t),Eer=r(zWe," (BERT model)"),zWe.forEach(t),Cer=i(V),fv=n(V,"LI",{});var QWe=s(fv);HMe=n(QWe,"STRONG",{});var dKt=s(HMe);wer=r(dKt,"big_bird"),dKt.forEach(t),Aer=r(QWe," \u2014 "),wH=n(QWe,"A",{href:!0});var mKt=s(wH);Ler=r(mKt,"BigBirdForPreTraining"),mKt.forEach(t),yer=r(QWe," (BigBird model)"),QWe.forEach(t),xer=i(V),gv=n(V,"LI",{});var WWe=s(gv);JMe=n(WWe,"STRONG",{});var cKt=s(JMe);$er=r(cKt,"bloom"),cKt.forEach(t),ker=r(WWe," \u2014 "),AH=n(WWe,"A",{href:!0});var fKt=s(AH);Ser=r(fKt,"BloomForCausalLM"),fKt.forEach(t),Rer=r(WWe," (BLOOM model)"),WWe.forEach(t),Per=i(V),hv=n(V,"LI",{});var UWe=s(hv);YMe=n(UWe,"STRONG",{});var gKt=s(YMe);Ber=r(gKt,"camembert"),gKt.forEach(t),Ier=r(UWe," \u2014 "),LH=n(UWe,"A",{href:!0});var hKt=s(LH);Ner=r(hKt,"CamembertForMaskedLM"),hKt.forEach(t),qer=r(UWe," (CamemBERT model)"),UWe.forEach(t),jer=i(V),uv=n(V,"LI",{});var HWe=s(uv);ZMe=n(HWe,"STRONG",{});var uKt=s(ZMe);Der=r(uKt,"ctrl"),uKt.forEach(t),Ger=r(HWe," \u2014 "),yH=n(HWe,"A",{href:!0});var pKt=s(yH);Oer=r(pKt,"CTRLLMHeadModel"),pKt.forEach(t),Ver=r(HWe," (CTRL model)"),HWe.forEach(t),Xer=i(V),pv=n(V,"LI",{});var JWe=s(pv);KMe=n(JWe,"STRONG",{});var _Kt=s(KMe);zer=r(_Kt,"data2vec-text"),_Kt.forEach(t),Qer=r(JWe," \u2014 "),xH=n(JWe,"A",{href:!0});var bKt=s(xH);Wer=r(bKt,"Data2VecTextForMaskedLM"),bKt.forEach(t),Uer=r(JWe," (Data2VecText model)"),JWe.forEach(t),Her=i(V),_v=n(V,"LI",{});var YWe=s(_v);eEe=n(YWe,"STRONG",{});var vKt=s(eEe);Jer=r(vKt,"deberta"),vKt.forEach(t),Yer=r(YWe," \u2014 "),$H=n(YWe,"A",{href:!0});var FKt=s($H);Zer=r(FKt,"DebertaForMaskedLM"),FKt.forEach(t),Ker=r(YWe," (DeBERTa model)"),YWe.forEach(t),eor=i(V),bv=n(V,"LI",{});var ZWe=s(bv);oEe=n(ZWe,"STRONG",{});var TKt=s(oEe);oor=r(TKt,"deberta-v2"),TKt.forEach(t),ror=r(ZWe," \u2014 "),kH=n(ZWe,"A",{href:!0});var MKt=s(kH);tor=r(MKt,"DebertaV2ForMaskedLM"),MKt.forEach(t),aor=r(ZWe," (DeBERTa-v2 model)"),ZWe.forEach(t),nor=i(V),vv=n(V,"LI",{});var KWe=s(vv);rEe=n(KWe,"STRONG",{});var EKt=s(rEe);sor=r(EKt,"distilbert"),EKt.forEach(t),lor=r(KWe," \u2014 "),SH=n(KWe,"A",{href:!0});var CKt=s(SH);ior=r(CKt,"DistilBertForMaskedLM"),CKt.forEach(t),dor=r(KWe," (DistilBERT model)"),KWe.forEach(t),mor=i(V),Fv=n(V,"LI",{});var eUe=s(Fv);tEe=n(eUe,"STRONG",{});var wKt=s(tEe);cor=r(wKt,"electra"),wKt.forEach(t),gor=r(eUe," \u2014 "),RH=n(eUe,"A",{href:!0});var AKt=s(RH);hor=r(AKt,"ElectraForPreTraining"),AKt.forEach(t),uor=r(eUe," (ELECTRA model)"),eUe.forEach(t),por=i(V),Tv=n(V,"LI",{});var oUe=s(Tv);aEe=n(oUe,"STRONG",{});var LKt=s(aEe);_or=r(LKt,"ernie"),LKt.forEach(t),bor=r(oUe," \u2014 "),PH=n(oUe,"A",{href:!0});var yKt=s(PH);vor=r(yKt,"ErnieForPreTraining"),yKt.forEach(t),For=r(oUe," (ERNIE model)"),oUe.forEach(t),Tor=i(V),Mv=n(V,"LI",{});var rUe=s(Mv);nEe=n(rUe,"STRONG",{});var xKt=s(nEe);Mor=r(xKt,"flaubert"),xKt.forEach(t),Eor=r(rUe," \u2014 "),BH=n(rUe,"A",{href:!0});var $Kt=s(BH);Cor=r($Kt,"FlaubertWithLMHeadModel"),$Kt.forEach(t),wor=r(rUe," (FlauBERT model)"),rUe.forEach(t),Aor=i(V),Ev=n(V,"LI",{});var tUe=s(Ev);sEe=n(tUe,"STRONG",{});var kKt=s(sEe);Lor=r(kKt,"flava"),kKt.forEach(t),yor=r(tUe," \u2014 "),IH=n(tUe,"A",{href:!0});var SKt=s(IH);xor=r(SKt,"FlavaForPreTraining"),SKt.forEach(t),$or=r(tUe," (FLAVA model)"),tUe.forEach(t),kor=i(V),Cv=n(V,"LI",{});var aUe=s(Cv);lEe=n(aUe,"STRONG",{});var RKt=s(lEe);Sor=r(RKt,"fnet"),RKt.forEach(t),Ror=r(aUe," \u2014 "),NH=n(aUe,"A",{href:!0});var PKt=s(NH);Por=r(PKt,"FNetForPreTraining"),PKt.forEach(t),Bor=r(aUe," (FNet model)"),aUe.forEach(t),Ior=i(V),wv=n(V,"LI",{});var nUe=s(wv);iEe=n(nUe,"STRONG",{});var BKt=s(iEe);Nor=r(BKt,"fsmt"),BKt.forEach(t),qor=r(nUe," \u2014 "),qH=n(nUe,"A",{href:!0});var IKt=s(qH);jor=r(IKt,"FSMTForConditionalGeneration"),IKt.forEach(t),Dor=r(nUe," (FairSeq Machine-Translation model)"),nUe.forEach(t),Gor=i(V),Av=n(V,"LI",{});var sUe=s(Av);dEe=n(sUe,"STRONG",{});var NKt=s(dEe);Oor=r(NKt,"funnel"),NKt.forEach(t),Vor=r(sUe," \u2014 "),jH=n(sUe,"A",{href:!0});var qKt=s(jH);Xor=r(qKt,"FunnelForPreTraining"),qKt.forEach(t),zor=r(sUe," (Funnel Transformer model)"),sUe.forEach(t),Qor=i(V),Lv=n(V,"LI",{});var lUe=s(Lv);mEe=n(lUe,"STRONG",{});var jKt=s(mEe);Wor=r(jKt,"gpt2"),jKt.forEach(t),Uor=r(lUe," \u2014 "),DH=n(lUe,"A",{href:!0});var DKt=s(DH);Hor=r(DKt,"GPT2LMHeadModel"),DKt.forEach(t),Jor=r(lUe," (OpenAI GPT-2 model)"),lUe.forEach(t),Yor=i(V),yv=n(V,"LI",{});var iUe=s(yv);cEe=n(iUe,"STRONG",{});var GKt=s(cEe);Zor=r(GKt,"ibert"),GKt.forEach(t),Kor=r(iUe," \u2014 "),GH=n(iUe,"A",{href:!0});var OKt=s(GH);err=r(OKt,"IBertForMaskedLM"),OKt.forEach(t),orr=r(iUe," (I-BERT model)"),iUe.forEach(t),rrr=i(V),xv=n(V,"LI",{});var dUe=s(xv);fEe=n(dUe,"STRONG",{});var VKt=s(fEe);trr=r(VKt,"layoutlm"),VKt.forEach(t),arr=r(dUe," \u2014 "),OH=n(dUe,"A",{href:!0});var XKt=s(OH);nrr=r(XKt,"LayoutLMForMaskedLM"),XKt.forEach(t),srr=r(dUe," (LayoutLM model)"),dUe.forEach(t),lrr=i(V),$v=n(V,"LI",{});var mUe=s($v);gEe=n(mUe,"STRONG",{});var zKt=s(gEe);irr=r(zKt,"longformer"),zKt.forEach(t),drr=r(mUe," \u2014 "),VH=n(mUe,"A",{href:!0});var QKt=s(VH);mrr=r(QKt,"LongformerForMaskedLM"),QKt.forEach(t),crr=r(mUe," (Longformer model)"),mUe.forEach(t),frr=i(V),kv=n(V,"LI",{});var cUe=s(kv);hEe=n(cUe,"STRONG",{});var WKt=s(hEe);grr=r(WKt,"luke"),WKt.forEach(t),hrr=r(cUe," \u2014 "),XH=n(cUe,"A",{href:!0});var UKt=s(XH);urr=r(UKt,"LukeForMaskedLM"),UKt.forEach(t),prr=r(cUe," (LUKE model)"),cUe.forEach(t),_rr=i(V),Sv=n(V,"LI",{});var fUe=s(Sv);uEe=n(fUe,"STRONG",{});var HKt=s(uEe);brr=r(HKt,"lxmert"),HKt.forEach(t),vrr=r(fUe," \u2014 "),zH=n(fUe,"A",{href:!0});var JKt=s(zH);Frr=r(JKt,"LxmertForPreTraining"),JKt.forEach(t),Trr=r(fUe," (LXMERT model)"),fUe.forEach(t),Mrr=i(V),Rv=n(V,"LI",{});var gUe=s(Rv);pEe=n(gUe,"STRONG",{});var YKt=s(pEe);Err=r(YKt,"megatron-bert"),YKt.forEach(t),Crr=r(gUe," \u2014 "),QH=n(gUe,"A",{href:!0});var ZKt=s(QH);wrr=r(ZKt,"MegatronBertForPreTraining"),ZKt.forEach(t),Arr=r(gUe," (Megatron-BERT model)"),gUe.forEach(t),Lrr=i(V),Pv=n(V,"LI",{});var hUe=s(Pv);_Ee=n(hUe,"STRONG",{});var KKt=s(_Ee);yrr=r(KKt,"mobilebert"),KKt.forEach(t),xrr=r(hUe," \u2014 "),WH=n(hUe,"A",{href:!0});var eea=s(WH);$rr=r(eea,"MobileBertForPreTraining"),eea.forEach(t),krr=r(hUe," (MobileBERT model)"),hUe.forEach(t),Srr=i(V),Bv=n(V,"LI",{});var uUe=s(Bv);bEe=n(uUe,"STRONG",{});var oea=s(bEe);Rrr=r(oea,"mpnet"),oea.forEach(t),Prr=r(uUe," \u2014 "),UH=n(uUe,"A",{href:!0});var rea=s(UH);Brr=r(rea,"MPNetForMaskedLM"),rea.forEach(t),Irr=r(uUe," (MPNet model)"),uUe.forEach(t),Nrr=i(V),Iv=n(V,"LI",{});var pUe=s(Iv);vEe=n(pUe,"STRONG",{});var tea=s(vEe);qrr=r(tea,"mvp"),tea.forEach(t),jrr=r(pUe," \u2014 "),HH=n(pUe,"A",{href:!0});var aea=s(HH);Drr=r(aea,"MvpForConditionalGeneration"),aea.forEach(t),Grr=r(pUe," (MVP model)"),pUe.forEach(t),Orr=i(V),Nv=n(V,"LI",{});var _Ue=s(Nv);FEe=n(_Ue,"STRONG",{});var nea=s(FEe);Vrr=r(nea,"nezha"),nea.forEach(t),Xrr=r(_Ue," \u2014 "),JH=n(_Ue,"A",{href:!0});var sea=s(JH);zrr=r(sea,"NezhaForPreTraining"),sea.forEach(t),Qrr=r(_Ue," (Nezha model)"),_Ue.forEach(t),Wrr=i(V),qv=n(V,"LI",{});var bUe=s(qv);TEe=n(bUe,"STRONG",{});var lea=s(TEe);Urr=r(lea,"openai-gpt"),lea.forEach(t),Hrr=r(bUe," \u2014 "),YH=n(bUe,"A",{href:!0});var iea=s(YH);Jrr=r(iea,"OpenAIGPTLMHeadModel"),iea.forEach(t),Yrr=r(bUe," (OpenAI GPT model)"),bUe.forEach(t),Zrr=i(V),jv=n(V,"LI",{});var vUe=s(jv);MEe=n(vUe,"STRONG",{});var dea=s(MEe);Krr=r(dea,"retribert"),dea.forEach(t),etr=r(vUe," \u2014 "),ZH=n(vUe,"A",{href:!0});var mea=s(ZH);otr=r(mea,"RetriBertModel"),mea.forEach(t),rtr=r(vUe," (RetriBERT model)"),vUe.forEach(t),ttr=i(V),Dv=n(V,"LI",{});var FUe=s(Dv);EEe=n(FUe,"STRONG",{});var cea=s(EEe);atr=r(cea,"roberta"),cea.forEach(t),ntr=r(FUe," \u2014 "),KH=n(FUe,"A",{href:!0});var fea=s(KH);str=r(fea,"RobertaForMaskedLM"),fea.forEach(t),ltr=r(FUe," (RoBERTa model)"),FUe.forEach(t),itr=i(V),Gv=n(V,"LI",{});var TUe=s(Gv);CEe=n(TUe,"STRONG",{});var gea=s(CEe);dtr=r(gea,"roc_bert"),gea.forEach(t),mtr=r(TUe," \u2014 "),eJ=n(TUe,"A",{href:!0});var hea=s(eJ);ctr=r(hea,"RoCBertForPreTraining"),hea.forEach(t),ftr=r(TUe," (RoCBert model)"),TUe.forEach(t),gtr=i(V),Ov=n(V,"LI",{});var MUe=s(Ov);wEe=n(MUe,"STRONG",{});var uea=s(wEe);htr=r(uea,"splinter"),uea.forEach(t),utr=r(MUe," \u2014 "),oJ=n(MUe,"A",{href:!0});var pea=s(oJ);ptr=r(pea,"SplinterForPreTraining"),pea.forEach(t),_tr=r(MUe," (Splinter model)"),MUe.forEach(t),btr=i(V),Vv=n(V,"LI",{});var EUe=s(Vv);AEe=n(EUe,"STRONG",{});var _ea=s(AEe);vtr=r(_ea,"squeezebert"),_ea.forEach(t),Ftr=r(EUe," \u2014 "),rJ=n(EUe,"A",{href:!0});var bea=s(rJ);Ttr=r(bea,"SqueezeBertForMaskedLM"),bea.forEach(t),Mtr=r(EUe," (SqueezeBERT model)"),EUe.forEach(t),Etr=i(V),Xv=n(V,"LI",{});var CUe=s(Xv);LEe=n(CUe,"STRONG",{});var vea=s(LEe);Ctr=r(vea,"switch_transformers"),vea.forEach(t),wtr=r(CUe," \u2014 "),tJ=n(CUe,"A",{href:!0});var Fea=s(tJ);Atr=r(Fea,"SwitchTransformersForConditionalGeneration"),Fea.forEach(t),Ltr=r(CUe," (SwitchTransformers model)"),CUe.forEach(t),ytr=i(V),zv=n(V,"LI",{});var wUe=s(zv);yEe=n(wUe,"STRONG",{});var Tea=s(yEe);xtr=r(Tea,"t5"),Tea.forEach(t),$tr=r(wUe," \u2014 "),aJ=n(wUe,"A",{href:!0});var Mea=s(aJ);ktr=r(Mea,"T5ForConditionalGeneration"),Mea.forEach(t),Str=r(wUe," (T5 model)"),wUe.forEach(t),Rtr=i(V),Qv=n(V,"LI",{});var AUe=s(Qv);xEe=n(AUe,"STRONG",{});var Eea=s(xEe);Ptr=r(Eea,"tapas"),Eea.forEach(t),Btr=r(AUe," \u2014 "),nJ=n(AUe,"A",{href:!0});var Cea=s(nJ);Itr=r(Cea,"TapasForMaskedLM"),Cea.forEach(t),Ntr=r(AUe," (TAPAS model)"),AUe.forEach(t),qtr=i(V),Wv=n(V,"LI",{});var LUe=s(Wv);$Ee=n(LUe,"STRONG",{});var wea=s($Ee);jtr=r(wea,"transfo-xl"),wea.forEach(t),Dtr=r(LUe," \u2014 "),sJ=n(LUe,"A",{href:!0});var Aea=s(sJ);Gtr=r(Aea,"TransfoXLLMHeadModel"),Aea.forEach(t),Otr=r(LUe," (Transformer-XL model)"),LUe.forEach(t),Vtr=i(V),Uv=n(V,"LI",{});var yUe=s(Uv);kEe=n(yUe,"STRONG",{});var Lea=s(kEe);Xtr=r(Lea,"unispeech"),Lea.forEach(t),ztr=r(yUe," \u2014 "),lJ=n(yUe,"A",{href:!0});var yea=s(lJ);Qtr=r(yea,"UniSpeechForPreTraining"),yea.forEach(t),Wtr=r(yUe," (UniSpeech model)"),yUe.forEach(t),Utr=i(V),Hv=n(V,"LI",{});var xUe=s(Hv);SEe=n(xUe,"STRONG",{});var xea=s(SEe);Htr=r(xea,"unispeech-sat"),xea.forEach(t),Jtr=r(xUe," \u2014 "),iJ=n(xUe,"A",{href:!0});var $ea=s(iJ);Ytr=r($ea,"UniSpeechSatForPreTraining"),$ea.forEach(t),Ztr=r(xUe," (UniSpeechSat model)"),xUe.forEach(t),Ktr=i(V),Jv=n(V,"LI",{});var $Ue=s(Jv);REe=n($Ue,"STRONG",{});var kea=s(REe);ear=r(kea,"videomae"),kea.forEach(t),oar=r($Ue," \u2014 "),dJ=n($Ue,"A",{href:!0});var Sea=s(dJ);rar=r(Sea,"VideoMAEForPreTraining"),Sea.forEach(t),tar=r($Ue," (VideoMAE model)"),$Ue.forEach(t),aar=i(V),Yv=n(V,"LI",{});var kUe=s(Yv);PEe=n(kUe,"STRONG",{});var Rea=s(PEe);nar=r(Rea,"visual_bert"),Rea.forEach(t),sar=r(kUe," \u2014 "),mJ=n(kUe,"A",{href:!0});var Pea=s(mJ);lar=r(Pea,"VisualBertForPreTraining"),Pea.forEach(t),iar=r(kUe," (VisualBERT model)"),kUe.forEach(t),dar=i(V),Zv=n(V,"LI",{});var SUe=s(Zv);BEe=n(SUe,"STRONG",{});var Bea=s(BEe);mar=r(Bea,"vit_mae"),Bea.forEach(t),car=r(SUe," \u2014 "),cJ=n(SUe,"A",{href:!0});var Iea=s(cJ);far=r(Iea,"ViTMAEForPreTraining"),Iea.forEach(t),gar=r(SUe," (ViTMAE model)"),SUe.forEach(t),har=i(V),Kv=n(V,"LI",{});var RUe=s(Kv);IEe=n(RUe,"STRONG",{});var Nea=s(IEe);uar=r(Nea,"wav2vec2"),Nea.forEach(t),par=r(RUe," \u2014 "),fJ=n(RUe,"A",{href:!0});var qea=s(fJ);_ar=r(qea,"Wav2Vec2ForPreTraining"),qea.forEach(t),bar=r(RUe," (Wav2Vec2 model)"),RUe.forEach(t),Far=i(V),eF=n(V,"LI",{});var PUe=s(eF);NEe=n(PUe,"STRONG",{});var jea=s(NEe);Tar=r(jea,"wav2vec2-conformer"),jea.forEach(t),Mar=r(PUe," \u2014 "),gJ=n(PUe,"A",{href:!0});var Dea=s(gJ);Ear=r(Dea,"Wav2Vec2ConformerForPreTraining"),Dea.forEach(t),Car=r(PUe," (Wav2Vec2-Conformer model)"),PUe.forEach(t),war=i(V),oF=n(V,"LI",{});var BUe=s(oF);qEe=n(BUe,"STRONG",{});var Gea=s(qEe);Aar=r(Gea,"xlm"),Gea.forEach(t),Lar=r(BUe," \u2014 "),hJ=n(BUe,"A",{href:!0});var Oea=s(hJ);yar=r(Oea,"XLMWithLMHeadModel"),Oea.forEach(t),xar=r(BUe," (XLM model)"),BUe.forEach(t),$ar=i(V),rF=n(V,"LI",{});var IUe=s(rF);jEe=n(IUe,"STRONG",{});var Vea=s(jEe);kar=r(Vea,"xlm-roberta"),Vea.forEach(t),Sar=r(IUe," \u2014 "),uJ=n(IUe,"A",{href:!0});var Xea=s(uJ);Rar=r(Xea,"XLMRobertaForMaskedLM"),Xea.forEach(t),Par=r(IUe," (XLM-RoBERTa model)"),IUe.forEach(t),Bar=i(V),tF=n(V,"LI",{});var NUe=s(tF);DEe=n(NUe,"STRONG",{});var zea=s(DEe);Iar=r(zea,"xlm-roberta-xl"),zea.forEach(t),Nar=r(NUe," \u2014 "),pJ=n(NUe,"A",{href:!0});var Qea=s(pJ);qar=r(Qea,"XLMRobertaXLForMaskedLM"),Qea.forEach(t),jar=r(NUe," (XLM-RoBERTa-XL model)"),NUe.forEach(t),Dar=i(V),aF=n(V,"LI",{});var qUe=s(aF);GEe=n(qUe,"STRONG",{});var Wea=s(GEe);Gar=r(Wea,"xlnet"),Wea.forEach(t),Oar=r(qUe," \u2014 "),_J=n(qUe,"A",{href:!0});var Uea=s(_J);Var=r(Uea,"XLNetLMHeadModel"),Uea.forEach(t),Xar=r(qUe," (XLNet model)"),qUe.forEach(t),V.forEach(t),zar=i(Ra),nF=n(Ra,"P",{});var jUe=s(nF);Qar=r(jUe,"The model is set in evaluation mode by default using "),OEe=n(jUe,"CODE",{});var Hea=s(OEe);War=r(Hea,"model.eval()"),Hea.forEach(t),Uar=r(jUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VEe=n(jUe,"CODE",{});var Jea=s(VEe);Har=r(Jea,"model.train()"),Jea.forEach(t),jUe.forEach(t),Jar=i(Ra),T(sF.$$.fragment,Ra),Ra.forEach(t),Hl.forEach(t),qio=i(c),Ud=n(c,"H2",{class:!0});var sco=s(Ud);lF=n(sco,"A",{id:!0,class:!0,href:!0});var Yea=s(lF);XEe=n(Yea,"SPAN",{});var Zea=s(XEe);T(hS.$$.fragment,Zea),Zea.forEach(t),Yea.forEach(t),Yar=i(sco),zEe=n(sco,"SPAN",{});var Kea=s(zEe);Zar=r(Kea,"AutoModelForCausalLM"),Kea.forEach(t),sco.forEach(t),jio=i(c),Oo=n(c,"DIV",{class:!0});var Jl=s(Oo);T(uS.$$.fragment,Jl),Kar=i(Jl),Hd=n(Jl,"P",{});var Dfe=s(Hd);enr=r(Dfe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bJ=n(Dfe,"A",{href:!0});var eoa=s(bJ);onr=r(eoa,"from_pretrained()"),eoa.forEach(t),rnr=r(Dfe," class method or the "),vJ=n(Dfe,"A",{href:!0});var ooa=s(vJ);tnr=r(ooa,"from_config()"),ooa.forEach(t),anr=r(Dfe,` class
method.`),Dfe.forEach(t),nnr=i(Jl),pS=n(Jl,"P",{});var lco=s(pS);snr=r(lco,"This class cannot be instantiated directly using "),QEe=n(lco,"CODE",{});var roa=s(QEe);lnr=r(roa,"__init__()"),roa.forEach(t),inr=r(lco," (throws an error)."),lco.forEach(t),dnr=i(Jl),yt=n(Jl,"DIV",{class:!0});var Tx=s(yt);T(_S.$$.fragment,Tx),mnr=i(Tx),WEe=n(Tx,"P",{});var toa=s(WEe);cnr=r(toa,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),toa.forEach(t),fnr=i(Tx),Jd=n(Tx,"P",{});var Gfe=s(Jd);gnr=r(Gfe,`Note:
Loading a model from its configuration file does `),UEe=n(Gfe,"STRONG",{});var aoa=s(UEe);hnr=r(aoa,"not"),aoa.forEach(t),unr=r(Gfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=n(Gfe,"A",{href:!0});var noa=s(FJ);pnr=r(noa,"from_pretrained()"),noa.forEach(t),_nr=r(Gfe," to load the model weights."),Gfe.forEach(t),bnr=i(Tx),T(iF.$$.fragment,Tx),Tx.forEach(t),vnr=i(Jl),no=n(Jl,"DIV",{class:!0});var Pa=s(no);T(bS.$$.fragment,Pa),Fnr=i(Pa),HEe=n(Pa,"P",{});var soa=s(HEe);Tnr=r(soa,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),soa.forEach(t),Mnr=i(Pa),un=n(Pa,"P",{});var Mx=s(un);Enr=r(Mx,"The model class to instantiate is selected based on the "),JEe=n(Mx,"CODE",{});var loa=s(JEe);Cnr=r(loa,"model_type"),loa.forEach(t),wnr=r(Mx,` property of the config object (either
passed as an argument or loaded from `),YEe=n(Mx,"CODE",{});var ioa=s(YEe);Anr=r(ioa,"pretrained_model_name_or_path"),ioa.forEach(t),Lnr=r(Mx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZEe=n(Mx,"CODE",{});var doa=s(ZEe);ynr=r(doa,"pretrained_model_name_or_path"),doa.forEach(t),xnr=r(Mx,":"),Mx.forEach(t),$nr=i(Pa),W=n(Pa,"UL",{});var H=s(W);dF=n(H,"LI",{});var DUe=s(dF);KEe=n(DUe,"STRONG",{});var moa=s(KEe);knr=r(moa,"bart"),moa.forEach(t),Snr=r(DUe," \u2014 "),TJ=n(DUe,"A",{href:!0});var coa=s(TJ);Rnr=r(coa,"BartForCausalLM"),coa.forEach(t),Pnr=r(DUe," (BART model)"),DUe.forEach(t),Bnr=i(H),mF=n(H,"LI",{});var GUe=s(mF);e4e=n(GUe,"STRONG",{});var foa=s(e4e);Inr=r(foa,"bert"),foa.forEach(t),Nnr=r(GUe," \u2014 "),MJ=n(GUe,"A",{href:!0});var goa=s(MJ);qnr=r(goa,"BertLMHeadModel"),goa.forEach(t),jnr=r(GUe," (BERT model)"),GUe.forEach(t),Dnr=i(H),cF=n(H,"LI",{});var OUe=s(cF);o4e=n(OUe,"STRONG",{});var hoa=s(o4e);Gnr=r(hoa,"bert-generation"),hoa.forEach(t),Onr=r(OUe," \u2014 "),EJ=n(OUe,"A",{href:!0});var uoa=s(EJ);Vnr=r(uoa,"BertGenerationDecoder"),uoa.forEach(t),Xnr=r(OUe," (Bert Generation model)"),OUe.forEach(t),znr=i(H),fF=n(H,"LI",{});var VUe=s(fF);r4e=n(VUe,"STRONG",{});var poa=s(r4e);Qnr=r(poa,"big_bird"),poa.forEach(t),Wnr=r(VUe," \u2014 "),CJ=n(VUe,"A",{href:!0});var _oa=s(CJ);Unr=r(_oa,"BigBirdForCausalLM"),_oa.forEach(t),Hnr=r(VUe," (BigBird model)"),VUe.forEach(t),Jnr=i(H),gF=n(H,"LI",{});var XUe=s(gF);t4e=n(XUe,"STRONG",{});var boa=s(t4e);Ynr=r(boa,"bigbird_pegasus"),boa.forEach(t),Znr=r(XUe," \u2014 "),wJ=n(XUe,"A",{href:!0});var voa=s(wJ);Knr=r(voa,"BigBirdPegasusForCausalLM"),voa.forEach(t),esr=r(XUe," (BigBird-Pegasus model)"),XUe.forEach(t),osr=i(H),hF=n(H,"LI",{});var zUe=s(hF);a4e=n(zUe,"STRONG",{});var Foa=s(a4e);rsr=r(Foa,"blenderbot"),Foa.forEach(t),tsr=r(zUe," \u2014 "),AJ=n(zUe,"A",{href:!0});var Toa=s(AJ);asr=r(Toa,"BlenderbotForCausalLM"),Toa.forEach(t),nsr=r(zUe," (Blenderbot model)"),zUe.forEach(t),ssr=i(H),uF=n(H,"LI",{});var QUe=s(uF);n4e=n(QUe,"STRONG",{});var Moa=s(n4e);lsr=r(Moa,"blenderbot-small"),Moa.forEach(t),isr=r(QUe," \u2014 "),LJ=n(QUe,"A",{href:!0});var Eoa=s(LJ);dsr=r(Eoa,"BlenderbotSmallForCausalLM"),Eoa.forEach(t),msr=r(QUe," (BlenderbotSmall model)"),QUe.forEach(t),csr=i(H),pF=n(H,"LI",{});var WUe=s(pF);s4e=n(WUe,"STRONG",{});var Coa=s(s4e);fsr=r(Coa,"bloom"),Coa.forEach(t),gsr=r(WUe," \u2014 "),yJ=n(WUe,"A",{href:!0});var woa=s(yJ);hsr=r(woa,"BloomForCausalLM"),woa.forEach(t),usr=r(WUe," (BLOOM model)"),WUe.forEach(t),psr=i(H),_F=n(H,"LI",{});var UUe=s(_F);l4e=n(UUe,"STRONG",{});var Aoa=s(l4e);_sr=r(Aoa,"camembert"),Aoa.forEach(t),bsr=r(UUe," \u2014 "),xJ=n(UUe,"A",{href:!0});var Loa=s(xJ);vsr=r(Loa,"CamembertForCausalLM"),Loa.forEach(t),Fsr=r(UUe," (CamemBERT model)"),UUe.forEach(t),Tsr=i(H),bF=n(H,"LI",{});var HUe=s(bF);i4e=n(HUe,"STRONG",{});var yoa=s(i4e);Msr=r(yoa,"codegen"),yoa.forEach(t),Esr=r(HUe," \u2014 "),$J=n(HUe,"A",{href:!0});var xoa=s($J);Csr=r(xoa,"CodeGenForCausalLM"),xoa.forEach(t),wsr=r(HUe," (CodeGen model)"),HUe.forEach(t),Asr=i(H),vF=n(H,"LI",{});var JUe=s(vF);d4e=n(JUe,"STRONG",{});var $oa=s(d4e);Lsr=r($oa,"ctrl"),$oa.forEach(t),ysr=r(JUe," \u2014 "),kJ=n(JUe,"A",{href:!0});var koa=s(kJ);xsr=r(koa,"CTRLLMHeadModel"),koa.forEach(t),$sr=r(JUe," (CTRL model)"),JUe.forEach(t),ksr=i(H),FF=n(H,"LI",{});var YUe=s(FF);m4e=n(YUe,"STRONG",{});var Soa=s(m4e);Ssr=r(Soa,"data2vec-text"),Soa.forEach(t),Rsr=r(YUe," \u2014 "),SJ=n(YUe,"A",{href:!0});var Roa=s(SJ);Psr=r(Roa,"Data2VecTextForCausalLM"),Roa.forEach(t),Bsr=r(YUe," (Data2VecText model)"),YUe.forEach(t),Isr=i(H),TF=n(H,"LI",{});var ZUe=s(TF);c4e=n(ZUe,"STRONG",{});var Poa=s(c4e);Nsr=r(Poa,"electra"),Poa.forEach(t),qsr=r(ZUe," \u2014 "),RJ=n(ZUe,"A",{href:!0});var Boa=s(RJ);jsr=r(Boa,"ElectraForCausalLM"),Boa.forEach(t),Dsr=r(ZUe," (ELECTRA model)"),ZUe.forEach(t),Gsr=i(H),MF=n(H,"LI",{});var KUe=s(MF);f4e=n(KUe,"STRONG",{});var Ioa=s(f4e);Osr=r(Ioa,"ernie"),Ioa.forEach(t),Vsr=r(KUe," \u2014 "),PJ=n(KUe,"A",{href:!0});var Noa=s(PJ);Xsr=r(Noa,"ErnieForCausalLM"),Noa.forEach(t),zsr=r(KUe," (ERNIE model)"),KUe.forEach(t),Qsr=i(H),EF=n(H,"LI",{});var eHe=s(EF);g4e=n(eHe,"STRONG",{});var qoa=s(g4e);Wsr=r(qoa,"gpt2"),qoa.forEach(t),Usr=r(eHe," \u2014 "),BJ=n(eHe,"A",{href:!0});var joa=s(BJ);Hsr=r(joa,"GPT2LMHeadModel"),joa.forEach(t),Jsr=r(eHe," (OpenAI GPT-2 model)"),eHe.forEach(t),Ysr=i(H),CF=n(H,"LI",{});var oHe=s(CF);h4e=n(oHe,"STRONG",{});var Doa=s(h4e);Zsr=r(Doa,"gpt_neo"),Doa.forEach(t),Ksr=r(oHe," \u2014 "),IJ=n(oHe,"A",{href:!0});var Goa=s(IJ);elr=r(Goa,"GPTNeoForCausalLM"),Goa.forEach(t),olr=r(oHe," (GPT Neo model)"),oHe.forEach(t),rlr=i(H),wF=n(H,"LI",{});var rHe=s(wF);u4e=n(rHe,"STRONG",{});var Ooa=s(u4e);tlr=r(Ooa,"gpt_neox"),Ooa.forEach(t),alr=r(rHe," \u2014 "),NJ=n(rHe,"A",{href:!0});var Voa=s(NJ);nlr=r(Voa,"GPTNeoXForCausalLM"),Voa.forEach(t),slr=r(rHe," (GPT NeoX model)"),rHe.forEach(t),llr=i(H),AF=n(H,"LI",{});var tHe=s(AF);p4e=n(tHe,"STRONG",{});var Xoa=s(p4e);ilr=r(Xoa,"gpt_neox_japanese"),Xoa.forEach(t),dlr=r(tHe," \u2014 "),qJ=n(tHe,"A",{href:!0});var zoa=s(qJ);mlr=r(zoa,"GPTNeoXJapaneseForCausalLM"),zoa.forEach(t),clr=r(tHe," (GPT NeoX Japanese model)"),tHe.forEach(t),flr=i(H),LF=n(H,"LI",{});var aHe=s(LF);_4e=n(aHe,"STRONG",{});var Qoa=s(_4e);glr=r(Qoa,"gptj"),Qoa.forEach(t),hlr=r(aHe," \u2014 "),jJ=n(aHe,"A",{href:!0});var Woa=s(jJ);ulr=r(Woa,"GPTJForCausalLM"),Woa.forEach(t),plr=r(aHe," (GPT-J model)"),aHe.forEach(t),_lr=i(H),yF=n(H,"LI",{});var nHe=s(yF);b4e=n(nHe,"STRONG",{});var Uoa=s(b4e);blr=r(Uoa,"marian"),Uoa.forEach(t),vlr=r(nHe," \u2014 "),DJ=n(nHe,"A",{href:!0});var Hoa=s(DJ);Flr=r(Hoa,"MarianForCausalLM"),Hoa.forEach(t),Tlr=r(nHe," (Marian model)"),nHe.forEach(t),Mlr=i(H),xF=n(H,"LI",{});var sHe=s(xF);v4e=n(sHe,"STRONG",{});var Joa=s(v4e);Elr=r(Joa,"mbart"),Joa.forEach(t),Clr=r(sHe," \u2014 "),GJ=n(sHe,"A",{href:!0});var Yoa=s(GJ);wlr=r(Yoa,"MBartForCausalLM"),Yoa.forEach(t),Alr=r(sHe," (mBART model)"),sHe.forEach(t),Llr=i(H),$F=n(H,"LI",{});var lHe=s($F);F4e=n(lHe,"STRONG",{});var Zoa=s(F4e);ylr=r(Zoa,"megatron-bert"),Zoa.forEach(t),xlr=r(lHe," \u2014 "),OJ=n(lHe,"A",{href:!0});var Koa=s(OJ);$lr=r(Koa,"MegatronBertForCausalLM"),Koa.forEach(t),klr=r(lHe," (Megatron-BERT model)"),lHe.forEach(t),Slr=i(H),kF=n(H,"LI",{});var iHe=s(kF);T4e=n(iHe,"STRONG",{});var era=s(T4e);Rlr=r(era,"mvp"),era.forEach(t),Plr=r(iHe," \u2014 "),VJ=n(iHe,"A",{href:!0});var ora=s(VJ);Blr=r(ora,"MvpForCausalLM"),ora.forEach(t),Ilr=r(iHe," (MVP model)"),iHe.forEach(t),Nlr=i(H),SF=n(H,"LI",{});var dHe=s(SF);M4e=n(dHe,"STRONG",{});var rra=s(M4e);qlr=r(rra,"openai-gpt"),rra.forEach(t),jlr=r(dHe," \u2014 "),XJ=n(dHe,"A",{href:!0});var tra=s(XJ);Dlr=r(tra,"OpenAIGPTLMHeadModel"),tra.forEach(t),Glr=r(dHe," (OpenAI GPT model)"),dHe.forEach(t),Olr=i(H),RF=n(H,"LI",{});var mHe=s(RF);E4e=n(mHe,"STRONG",{});var ara=s(E4e);Vlr=r(ara,"opt"),ara.forEach(t),Xlr=r(mHe," \u2014 "),zJ=n(mHe,"A",{href:!0});var nra=s(zJ);zlr=r(nra,"OPTForCausalLM"),nra.forEach(t),Qlr=r(mHe," (OPT model)"),mHe.forEach(t),Wlr=i(H),PF=n(H,"LI",{});var cHe=s(PF);C4e=n(cHe,"STRONG",{});var sra=s(C4e);Ulr=r(sra,"pegasus"),sra.forEach(t),Hlr=r(cHe," \u2014 "),QJ=n(cHe,"A",{href:!0});var lra=s(QJ);Jlr=r(lra,"PegasusForCausalLM"),lra.forEach(t),Ylr=r(cHe," (Pegasus model)"),cHe.forEach(t),Zlr=i(H),BF=n(H,"LI",{});var fHe=s(BF);w4e=n(fHe,"STRONG",{});var ira=s(w4e);Klr=r(ira,"plbart"),ira.forEach(t),eir=r(fHe," \u2014 "),WJ=n(fHe,"A",{href:!0});var dra=s(WJ);oir=r(dra,"PLBartForCausalLM"),dra.forEach(t),rir=r(fHe," (PLBart model)"),fHe.forEach(t),tir=i(H),IF=n(H,"LI",{});var gHe=s(IF);A4e=n(gHe,"STRONG",{});var mra=s(A4e);air=r(mra,"prophetnet"),mra.forEach(t),nir=r(gHe," \u2014 "),UJ=n(gHe,"A",{href:!0});var cra=s(UJ);sir=r(cra,"ProphetNetForCausalLM"),cra.forEach(t),lir=r(gHe," (ProphetNet model)"),gHe.forEach(t),iir=i(H),NF=n(H,"LI",{});var hHe=s(NF);L4e=n(hHe,"STRONG",{});var fra=s(L4e);dir=r(fra,"qdqbert"),fra.forEach(t),mir=r(hHe," \u2014 "),HJ=n(hHe,"A",{href:!0});var gra=s(HJ);cir=r(gra,"QDQBertLMHeadModel"),gra.forEach(t),fir=r(hHe," (QDQBert model)"),hHe.forEach(t),gir=i(H),qF=n(H,"LI",{});var uHe=s(qF);y4e=n(uHe,"STRONG",{});var hra=s(y4e);hir=r(hra,"reformer"),hra.forEach(t),uir=r(uHe," \u2014 "),JJ=n(uHe,"A",{href:!0});var ura=s(JJ);pir=r(ura,"ReformerModelWithLMHead"),ura.forEach(t),_ir=r(uHe," (Reformer model)"),uHe.forEach(t),bir=i(H),jF=n(H,"LI",{});var pHe=s(jF);x4e=n(pHe,"STRONG",{});var pra=s(x4e);vir=r(pra,"rembert"),pra.forEach(t),Fir=r(pHe," \u2014 "),YJ=n(pHe,"A",{href:!0});var _ra=s(YJ);Tir=r(_ra,"RemBertForCausalLM"),_ra.forEach(t),Mir=r(pHe," (RemBERT model)"),pHe.forEach(t),Eir=i(H),DF=n(H,"LI",{});var _He=s(DF);$4e=n(_He,"STRONG",{});var bra=s($4e);Cir=r(bra,"roberta"),bra.forEach(t),wir=r(_He," \u2014 "),ZJ=n(_He,"A",{href:!0});var vra=s(ZJ);Air=r(vra,"RobertaForCausalLM"),vra.forEach(t),Lir=r(_He," (RoBERTa model)"),_He.forEach(t),yir=i(H),GF=n(H,"LI",{});var bHe=s(GF);k4e=n(bHe,"STRONG",{});var Fra=s(k4e);xir=r(Fra,"roc_bert"),Fra.forEach(t),$ir=r(bHe," \u2014 "),KJ=n(bHe,"A",{href:!0});var Tra=s(KJ);kir=r(Tra,"RoCBertForCausalLM"),Tra.forEach(t),Sir=r(bHe," (RoCBert model)"),bHe.forEach(t),Rir=i(H),OF=n(H,"LI",{});var vHe=s(OF);S4e=n(vHe,"STRONG",{});var Mra=s(S4e);Pir=r(Mra,"roformer"),Mra.forEach(t),Bir=r(vHe," \u2014 "),eY=n(vHe,"A",{href:!0});var Era=s(eY);Iir=r(Era,"RoFormerForCausalLM"),Era.forEach(t),Nir=r(vHe," (RoFormer model)"),vHe.forEach(t),qir=i(H),VF=n(H,"LI",{});var FHe=s(VF);R4e=n(FHe,"STRONG",{});var Cra=s(R4e);jir=r(Cra,"speech_to_text_2"),Cra.forEach(t),Dir=r(FHe," \u2014 "),oY=n(FHe,"A",{href:!0});var wra=s(oY);Gir=r(wra,"Speech2Text2ForCausalLM"),wra.forEach(t),Oir=r(FHe," (Speech2Text2 model)"),FHe.forEach(t),Vir=i(H),XF=n(H,"LI",{});var THe=s(XF);P4e=n(THe,"STRONG",{});var Ara=s(P4e);Xir=r(Ara,"transfo-xl"),Ara.forEach(t),zir=r(THe," \u2014 "),rY=n(THe,"A",{href:!0});var Lra=s(rY);Qir=r(Lra,"TransfoXLLMHeadModel"),Lra.forEach(t),Wir=r(THe," (Transformer-XL model)"),THe.forEach(t),Uir=i(H),zF=n(H,"LI",{});var MHe=s(zF);B4e=n(MHe,"STRONG",{});var yra=s(B4e);Hir=r(yra,"trocr"),yra.forEach(t),Jir=r(MHe," \u2014 "),tY=n(MHe,"A",{href:!0});var xra=s(tY);Yir=r(xra,"TrOCRForCausalLM"),xra.forEach(t),Zir=r(MHe," (TrOCR model)"),MHe.forEach(t),Kir=i(H),QF=n(H,"LI",{});var EHe=s(QF);I4e=n(EHe,"STRONG",{});var $ra=s(I4e);edr=r($ra,"xglm"),$ra.forEach(t),odr=r(EHe," \u2014 "),aY=n(EHe,"A",{href:!0});var kra=s(aY);rdr=r(kra,"XGLMForCausalLM"),kra.forEach(t),tdr=r(EHe," (XGLM model)"),EHe.forEach(t),adr=i(H),WF=n(H,"LI",{});var CHe=s(WF);N4e=n(CHe,"STRONG",{});var Sra=s(N4e);ndr=r(Sra,"xlm"),Sra.forEach(t),sdr=r(CHe," \u2014 "),nY=n(CHe,"A",{href:!0});var Rra=s(nY);ldr=r(Rra,"XLMWithLMHeadModel"),Rra.forEach(t),idr=r(CHe," (XLM model)"),CHe.forEach(t),ddr=i(H),UF=n(H,"LI",{});var wHe=s(UF);q4e=n(wHe,"STRONG",{});var Pra=s(q4e);mdr=r(Pra,"xlm-prophetnet"),Pra.forEach(t),cdr=r(wHe," \u2014 "),sY=n(wHe,"A",{href:!0});var Bra=s(sY);fdr=r(Bra,"XLMProphetNetForCausalLM"),Bra.forEach(t),gdr=r(wHe," (XLM-ProphetNet model)"),wHe.forEach(t),hdr=i(H),HF=n(H,"LI",{});var AHe=s(HF);j4e=n(AHe,"STRONG",{});var Ira=s(j4e);udr=r(Ira,"xlm-roberta"),Ira.forEach(t),pdr=r(AHe," \u2014 "),lY=n(AHe,"A",{href:!0});var Nra=s(lY);_dr=r(Nra,"XLMRobertaForCausalLM"),Nra.forEach(t),bdr=r(AHe," (XLM-RoBERTa model)"),AHe.forEach(t),vdr=i(H),JF=n(H,"LI",{});var LHe=s(JF);D4e=n(LHe,"STRONG",{});var qra=s(D4e);Fdr=r(qra,"xlm-roberta-xl"),qra.forEach(t),Tdr=r(LHe," \u2014 "),iY=n(LHe,"A",{href:!0});var jra=s(iY);Mdr=r(jra,"XLMRobertaXLForCausalLM"),jra.forEach(t),Edr=r(LHe," (XLM-RoBERTa-XL model)"),LHe.forEach(t),Cdr=i(H),YF=n(H,"LI",{});var yHe=s(YF);G4e=n(yHe,"STRONG",{});var Dra=s(G4e);wdr=r(Dra,"xlnet"),Dra.forEach(t),Adr=r(yHe," \u2014 "),dY=n(yHe,"A",{href:!0});var Gra=s(dY);Ldr=r(Gra,"XLNetLMHeadModel"),Gra.forEach(t),ydr=r(yHe," (XLNet model)"),yHe.forEach(t),H.forEach(t),xdr=i(Pa),ZF=n(Pa,"P",{});var xHe=s(ZF);$dr=r(xHe,"The model is set in evaluation mode by default using "),O4e=n(xHe,"CODE",{});var Ora=s(O4e);kdr=r(Ora,"model.eval()"),Ora.forEach(t),Sdr=r(xHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V4e=n(xHe,"CODE",{});var Vra=s(V4e);Rdr=r(Vra,"model.train()"),Vra.forEach(t),xHe.forEach(t),Pdr=i(Pa),T(KF.$$.fragment,Pa),Pa.forEach(t),Jl.forEach(t),Dio=i(c),Yd=n(c,"H2",{class:!0});var ico=s(Yd);eT=n(ico,"A",{id:!0,class:!0,href:!0});var Xra=s(eT);X4e=n(Xra,"SPAN",{});var zra=s(X4e);T(vS.$$.fragment,zra),zra.forEach(t),Xra.forEach(t),Bdr=i(ico),z4e=n(ico,"SPAN",{});var Qra=s(z4e);Idr=r(Qra,"AutoModelForDepthEstimation"),Qra.forEach(t),ico.forEach(t),Gio=i(c),Vo=n(c,"DIV",{class:!0});var Yl=s(Vo);T(FS.$$.fragment,Yl),Ndr=i(Yl),Zd=n(Yl,"P",{});var Ofe=s(Zd);qdr=r(Ofe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a depth estimation head) when created
with the `),mY=n(Ofe,"A",{href:!0});var Wra=s(mY);jdr=r(Wra,"from_pretrained()"),Wra.forEach(t),Ddr=r(Ofe," class method or the "),cY=n(Ofe,"A",{href:!0});var Ura=s(cY);Gdr=r(Ura,"from_config()"),Ura.forEach(t),Odr=r(Ofe,` class
method.`),Ofe.forEach(t),Vdr=i(Yl),TS=n(Yl,"P",{});var dco=s(TS);Xdr=r(dco,"This class cannot be instantiated directly using "),Q4e=n(dco,"CODE",{});var Hra=s(Q4e);zdr=r(Hra,"__init__()"),Hra.forEach(t),Qdr=r(dco," (throws an error)."),dco.forEach(t),Wdr=i(Yl),xt=n(Yl,"DIV",{class:!0});var Ex=s(xt);T(MS.$$.fragment,Ex),Udr=i(Ex),W4e=n(Ex,"P",{});var Jra=s(W4e);Hdr=r(Jra,"Instantiates one of the model classes of the library (with a depth estimation head) from a configuration."),Jra.forEach(t),Jdr=i(Ex),Kd=n(Ex,"P",{});var Vfe=s(Kd);Ydr=r(Vfe,`Note:
Loading a model from its configuration file does `),U4e=n(Vfe,"STRONG",{});var Yra=s(U4e);Zdr=r(Yra,"not"),Yra.forEach(t),Kdr=r(Vfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(Vfe,"A",{href:!0});var Zra=s(fY);emr=r(Zra,"from_pretrained()"),Zra.forEach(t),omr=r(Vfe," to load the model weights."),Vfe.forEach(t),rmr=i(Ex),T(oT.$$.fragment,Ex),Ex.forEach(t),tmr=i(Yl),so=n(Yl,"DIV",{class:!0});var Ba=s(so);T(ES.$$.fragment,Ba),amr=i(Ba),H4e=n(Ba,"P",{});var Kra=s(H4e);nmr=r(Kra,"Instantiate one of the model classes of the library (with a depth estimation head) from a pretrained model."),Kra.forEach(t),smr=i(Ba),pn=n(Ba,"P",{});var Cx=s(pn);lmr=r(Cx,"The model class to instantiate is selected based on the "),J4e=n(Cx,"CODE",{});var eta=s(J4e);imr=r(eta,"model_type"),eta.forEach(t),dmr=r(Cx,` property of the config object (either
passed as an argument or loaded from `),Y4e=n(Cx,"CODE",{});var ota=s(Y4e);mmr=r(ota,"pretrained_model_name_or_path"),ota.forEach(t),cmr=r(Cx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=n(Cx,"CODE",{});var rta=s(Z4e);fmr=r(rta,"pretrained_model_name_or_path"),rta.forEach(t),gmr=r(Cx,":"),Cx.forEach(t),hmr=i(Ba),CS=n(Ba,"UL",{});var mco=s(CS);rT=n(mco,"LI",{});var $He=s(rT);K4e=n($He,"STRONG",{});var tta=s(K4e);umr=r(tta,"dpt"),tta.forEach(t),pmr=r($He," \u2014 "),gY=n($He,"A",{href:!0});var ata=s(gY);_mr=r(ata,"DPTForDepthEstimation"),ata.forEach(t),bmr=r($He," (DPT model)"),$He.forEach(t),vmr=i(mco),tT=n(mco,"LI",{});var kHe=s(tT);eCe=n(kHe,"STRONG",{});var nta=s(eCe);Fmr=r(nta,"glpn"),nta.forEach(t),Tmr=r(kHe," \u2014 "),hY=n(kHe,"A",{href:!0});var sta=s(hY);Mmr=r(sta,"GLPNForDepthEstimation"),sta.forEach(t),Emr=r(kHe," (GLPN model)"),kHe.forEach(t),mco.forEach(t),Cmr=i(Ba),aT=n(Ba,"P",{});var SHe=s(aT);wmr=r(SHe,"The model is set in evaluation mode by default using "),oCe=n(SHe,"CODE",{});var lta=s(oCe);Amr=r(lta,"model.eval()"),lta.forEach(t),Lmr=r(SHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rCe=n(SHe,"CODE",{});var ita=s(rCe);ymr=r(ita,"model.train()"),ita.forEach(t),SHe.forEach(t),xmr=i(Ba),T(nT.$$.fragment,Ba),Ba.forEach(t),Yl.forEach(t),Oio=i(c),em=n(c,"H2",{class:!0});var cco=s(em);sT=n(cco,"A",{id:!0,class:!0,href:!0});var dta=s(sT);tCe=n(dta,"SPAN",{});var mta=s(tCe);T(wS.$$.fragment,mta),mta.forEach(t),dta.forEach(t),$mr=i(cco),aCe=n(cco,"SPAN",{});var cta=s(aCe);kmr=r(cta,"AutoModelForMaskedLM"),cta.forEach(t),cco.forEach(t),Vio=i(c),Xo=n(c,"DIV",{class:!0});var Zl=s(Xo);T(AS.$$.fragment,Zl),Smr=i(Zl),om=n(Zl,"P",{});var Xfe=s(om);Rmr=r(Xfe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uY=n(Xfe,"A",{href:!0});var fta=s(uY);Pmr=r(fta,"from_pretrained()"),fta.forEach(t),Bmr=r(Xfe," class method or the "),pY=n(Xfe,"A",{href:!0});var gta=s(pY);Imr=r(gta,"from_config()"),gta.forEach(t),Nmr=r(Xfe,` class
method.`),Xfe.forEach(t),qmr=i(Zl),LS=n(Zl,"P",{});var fco=s(LS);jmr=r(fco,"This class cannot be instantiated directly using "),nCe=n(fco,"CODE",{});var hta=s(nCe);Dmr=r(hta,"__init__()"),hta.forEach(t),Gmr=r(fco," (throws an error)."),fco.forEach(t),Omr=i(Zl),$t=n(Zl,"DIV",{class:!0});var wx=s($t);T(yS.$$.fragment,wx),Vmr=i(wx),sCe=n(wx,"P",{});var uta=s(sCe);Xmr=r(uta,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uta.forEach(t),zmr=i(wx),rm=n(wx,"P",{});var zfe=s(rm);Qmr=r(zfe,`Note:
Loading a model from its configuration file does `),lCe=n(zfe,"STRONG",{});var pta=s(lCe);Wmr=r(pta,"not"),pta.forEach(t),Umr=r(zfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=n(zfe,"A",{href:!0});var _ta=s(_Y);Hmr=r(_ta,"from_pretrained()"),_ta.forEach(t),Jmr=r(zfe," to load the model weights."),zfe.forEach(t),Ymr=i(wx),T(lT.$$.fragment,wx),wx.forEach(t),Zmr=i(Zl),lo=n(Zl,"DIV",{class:!0});var Ia=s(lo);T(xS.$$.fragment,Ia),Kmr=i(Ia),iCe=n(Ia,"P",{});var bta=s(iCe);ecr=r(bta,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bta.forEach(t),ocr=i(Ia),_n=n(Ia,"P",{});var Ax=s(_n);rcr=r(Ax,"The model class to instantiate is selected based on the "),dCe=n(Ax,"CODE",{});var vta=s(dCe);tcr=r(vta,"model_type"),vta.forEach(t),acr=r(Ax,` property of the config object (either
passed as an argument or loaded from `),mCe=n(Ax,"CODE",{});var Fta=s(mCe);ncr=r(Fta,"pretrained_model_name_or_path"),Fta.forEach(t),scr=r(Ax,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=n(Ax,"CODE",{});var Tta=s(cCe);lcr=r(Tta,"pretrained_model_name_or_path"),Tta.forEach(t),icr=r(Ax,":"),Ax.forEach(t),dcr=i(Ia),Y=n(Ia,"UL",{});var Z=s(Y);iT=n(Z,"LI",{});var RHe=s(iT);fCe=n(RHe,"STRONG",{});var Mta=s(fCe);mcr=r(Mta,"albert"),Mta.forEach(t),ccr=r(RHe," \u2014 "),bY=n(RHe,"A",{href:!0});var Eta=s(bY);fcr=r(Eta,"AlbertForMaskedLM"),Eta.forEach(t),gcr=r(RHe," (ALBERT model)"),RHe.forEach(t),hcr=i(Z),dT=n(Z,"LI",{});var PHe=s(dT);gCe=n(PHe,"STRONG",{});var Cta=s(gCe);ucr=r(Cta,"bart"),Cta.forEach(t),pcr=r(PHe," \u2014 "),vY=n(PHe,"A",{href:!0});var wta=s(vY);_cr=r(wta,"BartForConditionalGeneration"),wta.forEach(t),bcr=r(PHe," (BART model)"),PHe.forEach(t),vcr=i(Z),mT=n(Z,"LI",{});var BHe=s(mT);hCe=n(BHe,"STRONG",{});var Ata=s(hCe);Fcr=r(Ata,"bert"),Ata.forEach(t),Tcr=r(BHe," \u2014 "),FY=n(BHe,"A",{href:!0});var Lta=s(FY);Mcr=r(Lta,"BertForMaskedLM"),Lta.forEach(t),Ecr=r(BHe," (BERT model)"),BHe.forEach(t),Ccr=i(Z),cT=n(Z,"LI",{});var IHe=s(cT);uCe=n(IHe,"STRONG",{});var yta=s(uCe);wcr=r(yta,"big_bird"),yta.forEach(t),Acr=r(IHe," \u2014 "),TY=n(IHe,"A",{href:!0});var xta=s(TY);Lcr=r(xta,"BigBirdForMaskedLM"),xta.forEach(t),ycr=r(IHe," (BigBird model)"),IHe.forEach(t),xcr=i(Z),fT=n(Z,"LI",{});var NHe=s(fT);pCe=n(NHe,"STRONG",{});var $ta=s(pCe);$cr=r($ta,"camembert"),$ta.forEach(t),kcr=r(NHe," \u2014 "),MY=n(NHe,"A",{href:!0});var kta=s(MY);Scr=r(kta,"CamembertForMaskedLM"),kta.forEach(t),Rcr=r(NHe," (CamemBERT model)"),NHe.forEach(t),Pcr=i(Z),gT=n(Z,"LI",{});var qHe=s(gT);_Ce=n(qHe,"STRONG",{});var Sta=s(_Ce);Bcr=r(Sta,"convbert"),Sta.forEach(t),Icr=r(qHe," \u2014 "),EY=n(qHe,"A",{href:!0});var Rta=s(EY);Ncr=r(Rta,"ConvBertForMaskedLM"),Rta.forEach(t),qcr=r(qHe," (ConvBERT model)"),qHe.forEach(t),jcr=i(Z),hT=n(Z,"LI",{});var jHe=s(hT);bCe=n(jHe,"STRONG",{});var Pta=s(bCe);Dcr=r(Pta,"data2vec-text"),Pta.forEach(t),Gcr=r(jHe," \u2014 "),CY=n(jHe,"A",{href:!0});var Bta=s(CY);Ocr=r(Bta,"Data2VecTextForMaskedLM"),Bta.forEach(t),Vcr=r(jHe," (Data2VecText model)"),jHe.forEach(t),Xcr=i(Z),uT=n(Z,"LI",{});var DHe=s(uT);vCe=n(DHe,"STRONG",{});var Ita=s(vCe);zcr=r(Ita,"deberta"),Ita.forEach(t),Qcr=r(DHe," \u2014 "),wY=n(DHe,"A",{href:!0});var Nta=s(wY);Wcr=r(Nta,"DebertaForMaskedLM"),Nta.forEach(t),Ucr=r(DHe," (DeBERTa model)"),DHe.forEach(t),Hcr=i(Z),pT=n(Z,"LI",{});var GHe=s(pT);FCe=n(GHe,"STRONG",{});var qta=s(FCe);Jcr=r(qta,"deberta-v2"),qta.forEach(t),Ycr=r(GHe," \u2014 "),AY=n(GHe,"A",{href:!0});var jta=s(AY);Zcr=r(jta,"DebertaV2ForMaskedLM"),jta.forEach(t),Kcr=r(GHe," (DeBERTa-v2 model)"),GHe.forEach(t),efr=i(Z),_T=n(Z,"LI",{});var OHe=s(_T);TCe=n(OHe,"STRONG",{});var Dta=s(TCe);ofr=r(Dta,"distilbert"),Dta.forEach(t),rfr=r(OHe," \u2014 "),LY=n(OHe,"A",{href:!0});var Gta=s(LY);tfr=r(Gta,"DistilBertForMaskedLM"),Gta.forEach(t),afr=r(OHe," (DistilBERT model)"),OHe.forEach(t),nfr=i(Z),bT=n(Z,"LI",{});var VHe=s(bT);MCe=n(VHe,"STRONG",{});var Ota=s(MCe);sfr=r(Ota,"electra"),Ota.forEach(t),lfr=r(VHe," \u2014 "),yY=n(VHe,"A",{href:!0});var Vta=s(yY);ifr=r(Vta,"ElectraForMaskedLM"),Vta.forEach(t),dfr=r(VHe," (ELECTRA model)"),VHe.forEach(t),mfr=i(Z),vT=n(Z,"LI",{});var XHe=s(vT);ECe=n(XHe,"STRONG",{});var Xta=s(ECe);cfr=r(Xta,"ernie"),Xta.forEach(t),ffr=r(XHe," \u2014 "),xY=n(XHe,"A",{href:!0});var zta=s(xY);gfr=r(zta,"ErnieForMaskedLM"),zta.forEach(t),hfr=r(XHe," (ERNIE model)"),XHe.forEach(t),ufr=i(Z),FT=n(Z,"LI",{});var zHe=s(FT);CCe=n(zHe,"STRONG",{});var Qta=s(CCe);pfr=r(Qta,"flaubert"),Qta.forEach(t),_fr=r(zHe," \u2014 "),$Y=n(zHe,"A",{href:!0});var Wta=s($Y);bfr=r(Wta,"FlaubertWithLMHeadModel"),Wta.forEach(t),vfr=r(zHe," (FlauBERT model)"),zHe.forEach(t),Ffr=i(Z),TT=n(Z,"LI",{});var QHe=s(TT);wCe=n(QHe,"STRONG",{});var Uta=s(wCe);Tfr=r(Uta,"fnet"),Uta.forEach(t),Mfr=r(QHe," \u2014 "),kY=n(QHe,"A",{href:!0});var Hta=s(kY);Efr=r(Hta,"FNetForMaskedLM"),Hta.forEach(t),Cfr=r(QHe," (FNet model)"),QHe.forEach(t),wfr=i(Z),MT=n(Z,"LI",{});var WHe=s(MT);ACe=n(WHe,"STRONG",{});var Jta=s(ACe);Afr=r(Jta,"funnel"),Jta.forEach(t),Lfr=r(WHe," \u2014 "),SY=n(WHe,"A",{href:!0});var Yta=s(SY);yfr=r(Yta,"FunnelForMaskedLM"),Yta.forEach(t),xfr=r(WHe," (Funnel Transformer model)"),WHe.forEach(t),$fr=i(Z),ET=n(Z,"LI",{});var UHe=s(ET);LCe=n(UHe,"STRONG",{});var Zta=s(LCe);kfr=r(Zta,"ibert"),Zta.forEach(t),Sfr=r(UHe," \u2014 "),RY=n(UHe,"A",{href:!0});var Kta=s(RY);Rfr=r(Kta,"IBertForMaskedLM"),Kta.forEach(t),Pfr=r(UHe," (I-BERT model)"),UHe.forEach(t),Bfr=i(Z),CT=n(Z,"LI",{});var HHe=s(CT);yCe=n(HHe,"STRONG",{});var eaa=s(yCe);Ifr=r(eaa,"layoutlm"),eaa.forEach(t),Nfr=r(HHe," \u2014 "),PY=n(HHe,"A",{href:!0});var oaa=s(PY);qfr=r(oaa,"LayoutLMForMaskedLM"),oaa.forEach(t),jfr=r(HHe," (LayoutLM model)"),HHe.forEach(t),Dfr=i(Z),wT=n(Z,"LI",{});var JHe=s(wT);xCe=n(JHe,"STRONG",{});var raa=s(xCe);Gfr=r(raa,"longformer"),raa.forEach(t),Ofr=r(JHe," \u2014 "),BY=n(JHe,"A",{href:!0});var taa=s(BY);Vfr=r(taa,"LongformerForMaskedLM"),taa.forEach(t),Xfr=r(JHe," (Longformer model)"),JHe.forEach(t),zfr=i(Z),AT=n(Z,"LI",{});var YHe=s(AT);$Ce=n(YHe,"STRONG",{});var aaa=s($Ce);Qfr=r(aaa,"luke"),aaa.forEach(t),Wfr=r(YHe," \u2014 "),IY=n(YHe,"A",{href:!0});var naa=s(IY);Ufr=r(naa,"LukeForMaskedLM"),naa.forEach(t),Hfr=r(YHe," (LUKE model)"),YHe.forEach(t),Jfr=i(Z),LT=n(Z,"LI",{});var ZHe=s(LT);kCe=n(ZHe,"STRONG",{});var saa=s(kCe);Yfr=r(saa,"mbart"),saa.forEach(t),Zfr=r(ZHe," \u2014 "),NY=n(ZHe,"A",{href:!0});var laa=s(NY);Kfr=r(laa,"MBartForConditionalGeneration"),laa.forEach(t),egr=r(ZHe," (mBART model)"),ZHe.forEach(t),ogr=i(Z),yT=n(Z,"LI",{});var KHe=s(yT);SCe=n(KHe,"STRONG",{});var iaa=s(SCe);rgr=r(iaa,"megatron-bert"),iaa.forEach(t),tgr=r(KHe," \u2014 "),qY=n(KHe,"A",{href:!0});var daa=s(qY);agr=r(daa,"MegatronBertForMaskedLM"),daa.forEach(t),ngr=r(KHe," (Megatron-BERT model)"),KHe.forEach(t),sgr=i(Z),xT=n(Z,"LI",{});var eJe=s(xT);RCe=n(eJe,"STRONG",{});var maa=s(RCe);lgr=r(maa,"mobilebert"),maa.forEach(t),igr=r(eJe," \u2014 "),jY=n(eJe,"A",{href:!0});var caa=s(jY);dgr=r(caa,"MobileBertForMaskedLM"),caa.forEach(t),mgr=r(eJe," (MobileBERT model)"),eJe.forEach(t),cgr=i(Z),$T=n(Z,"LI",{});var oJe=s($T);PCe=n(oJe,"STRONG",{});var faa=s(PCe);fgr=r(faa,"mpnet"),faa.forEach(t),ggr=r(oJe," \u2014 "),DY=n(oJe,"A",{href:!0});var gaa=s(DY);hgr=r(gaa,"MPNetForMaskedLM"),gaa.forEach(t),ugr=r(oJe," (MPNet model)"),oJe.forEach(t),pgr=i(Z),kT=n(Z,"LI",{});var rJe=s(kT);BCe=n(rJe,"STRONG",{});var haa=s(BCe);_gr=r(haa,"mvp"),haa.forEach(t),bgr=r(rJe," \u2014 "),GY=n(rJe,"A",{href:!0});var uaa=s(GY);vgr=r(uaa,"MvpForConditionalGeneration"),uaa.forEach(t),Fgr=r(rJe," (MVP model)"),rJe.forEach(t),Tgr=i(Z),ST=n(Z,"LI",{});var tJe=s(ST);ICe=n(tJe,"STRONG",{});var paa=s(ICe);Mgr=r(paa,"nezha"),paa.forEach(t),Egr=r(tJe," \u2014 "),OY=n(tJe,"A",{href:!0});var _aa=s(OY);Cgr=r(_aa,"NezhaForMaskedLM"),_aa.forEach(t),wgr=r(tJe," (Nezha model)"),tJe.forEach(t),Agr=i(Z),RT=n(Z,"LI",{});var aJe=s(RT);NCe=n(aJe,"STRONG",{});var baa=s(NCe);Lgr=r(baa,"nystromformer"),baa.forEach(t),ygr=r(aJe," \u2014 "),VY=n(aJe,"A",{href:!0});var vaa=s(VY);xgr=r(vaa,"NystromformerForMaskedLM"),vaa.forEach(t),$gr=r(aJe," (Nystr\xF6mformer model)"),aJe.forEach(t),kgr=i(Z),PT=n(Z,"LI",{});var nJe=s(PT);qCe=n(nJe,"STRONG",{});var Faa=s(qCe);Sgr=r(Faa,"perceiver"),Faa.forEach(t),Rgr=r(nJe," \u2014 "),XY=n(nJe,"A",{href:!0});var Taa=s(XY);Pgr=r(Taa,"PerceiverForMaskedLM"),Taa.forEach(t),Bgr=r(nJe," (Perceiver model)"),nJe.forEach(t),Igr=i(Z),BT=n(Z,"LI",{});var sJe=s(BT);jCe=n(sJe,"STRONG",{});var Maa=s(jCe);Ngr=r(Maa,"qdqbert"),Maa.forEach(t),qgr=r(sJe," \u2014 "),zY=n(sJe,"A",{href:!0});var Eaa=s(zY);jgr=r(Eaa,"QDQBertForMaskedLM"),Eaa.forEach(t),Dgr=r(sJe," (QDQBert model)"),sJe.forEach(t),Ggr=i(Z),IT=n(Z,"LI",{});var lJe=s(IT);DCe=n(lJe,"STRONG",{});var Caa=s(DCe);Ogr=r(Caa,"reformer"),Caa.forEach(t),Vgr=r(lJe," \u2014 "),QY=n(lJe,"A",{href:!0});var waa=s(QY);Xgr=r(waa,"ReformerForMaskedLM"),waa.forEach(t),zgr=r(lJe," (Reformer model)"),lJe.forEach(t),Qgr=i(Z),NT=n(Z,"LI",{});var iJe=s(NT);GCe=n(iJe,"STRONG",{});var Aaa=s(GCe);Wgr=r(Aaa,"rembert"),Aaa.forEach(t),Ugr=r(iJe," \u2014 "),WY=n(iJe,"A",{href:!0});var Laa=s(WY);Hgr=r(Laa,"RemBertForMaskedLM"),Laa.forEach(t),Jgr=r(iJe," (RemBERT model)"),iJe.forEach(t),Ygr=i(Z),qT=n(Z,"LI",{});var dJe=s(qT);OCe=n(dJe,"STRONG",{});var yaa=s(OCe);Zgr=r(yaa,"roberta"),yaa.forEach(t),Kgr=r(dJe," \u2014 "),UY=n(dJe,"A",{href:!0});var xaa=s(UY);ehr=r(xaa,"RobertaForMaskedLM"),xaa.forEach(t),ohr=r(dJe," (RoBERTa model)"),dJe.forEach(t),rhr=i(Z),jT=n(Z,"LI",{});var mJe=s(jT);VCe=n(mJe,"STRONG",{});var $aa=s(VCe);thr=r($aa,"roc_bert"),$aa.forEach(t),ahr=r(mJe," \u2014 "),HY=n(mJe,"A",{href:!0});var kaa=s(HY);nhr=r(kaa,"RoCBertForMaskedLM"),kaa.forEach(t),shr=r(mJe," (RoCBert model)"),mJe.forEach(t),lhr=i(Z),DT=n(Z,"LI",{});var cJe=s(DT);XCe=n(cJe,"STRONG",{});var Saa=s(XCe);ihr=r(Saa,"roformer"),Saa.forEach(t),dhr=r(cJe," \u2014 "),JY=n(cJe,"A",{href:!0});var Raa=s(JY);mhr=r(Raa,"RoFormerForMaskedLM"),Raa.forEach(t),chr=r(cJe," (RoFormer model)"),cJe.forEach(t),fhr=i(Z),GT=n(Z,"LI",{});var fJe=s(GT);zCe=n(fJe,"STRONG",{});var Paa=s(zCe);ghr=r(Paa,"squeezebert"),Paa.forEach(t),hhr=r(fJe," \u2014 "),YY=n(fJe,"A",{href:!0});var Baa=s(YY);uhr=r(Baa,"SqueezeBertForMaskedLM"),Baa.forEach(t),phr=r(fJe," (SqueezeBERT model)"),fJe.forEach(t),_hr=i(Z),OT=n(Z,"LI",{});var gJe=s(OT);QCe=n(gJe,"STRONG",{});var Iaa=s(QCe);bhr=r(Iaa,"tapas"),Iaa.forEach(t),vhr=r(gJe," \u2014 "),ZY=n(gJe,"A",{href:!0});var Naa=s(ZY);Fhr=r(Naa,"TapasForMaskedLM"),Naa.forEach(t),Thr=r(gJe," (TAPAS model)"),gJe.forEach(t),Mhr=i(Z),VT=n(Z,"LI",{});var hJe=s(VT);WCe=n(hJe,"STRONG",{});var qaa=s(WCe);Ehr=r(qaa,"wav2vec2"),qaa.forEach(t),Chr=r(hJe," \u2014 "),UCe=n(hJe,"CODE",{});var jaa=s(UCe);whr=r(jaa,"Wav2Vec2ForMaskedLM"),jaa.forEach(t),Ahr=r(hJe," (Wav2Vec2 model)"),hJe.forEach(t),Lhr=i(Z),XT=n(Z,"LI",{});var uJe=s(XT);HCe=n(uJe,"STRONG",{});var Daa=s(HCe);yhr=r(Daa,"xlm"),Daa.forEach(t),xhr=r(uJe," \u2014 "),KY=n(uJe,"A",{href:!0});var Gaa=s(KY);$hr=r(Gaa,"XLMWithLMHeadModel"),Gaa.forEach(t),khr=r(uJe," (XLM model)"),uJe.forEach(t),Shr=i(Z),zT=n(Z,"LI",{});var pJe=s(zT);JCe=n(pJe,"STRONG",{});var Oaa=s(JCe);Rhr=r(Oaa,"xlm-roberta"),Oaa.forEach(t),Phr=r(pJe," \u2014 "),eZ=n(pJe,"A",{href:!0});var Vaa=s(eZ);Bhr=r(Vaa,"XLMRobertaForMaskedLM"),Vaa.forEach(t),Ihr=r(pJe," (XLM-RoBERTa model)"),pJe.forEach(t),Nhr=i(Z),QT=n(Z,"LI",{});var _Je=s(QT);YCe=n(_Je,"STRONG",{});var Xaa=s(YCe);qhr=r(Xaa,"xlm-roberta-xl"),Xaa.forEach(t),jhr=r(_Je," \u2014 "),oZ=n(_Je,"A",{href:!0});var zaa=s(oZ);Dhr=r(zaa,"XLMRobertaXLForMaskedLM"),zaa.forEach(t),Ghr=r(_Je," (XLM-RoBERTa-XL model)"),_Je.forEach(t),Ohr=i(Z),WT=n(Z,"LI",{});var bJe=s(WT);ZCe=n(bJe,"STRONG",{});var Qaa=s(ZCe);Vhr=r(Qaa,"yoso"),Qaa.forEach(t),Xhr=r(bJe," \u2014 "),rZ=n(bJe,"A",{href:!0});var Waa=s(rZ);zhr=r(Waa,"YosoForMaskedLM"),Waa.forEach(t),Qhr=r(bJe," (YOSO model)"),bJe.forEach(t),Z.forEach(t),Whr=i(Ia),UT=n(Ia,"P",{});var vJe=s(UT);Uhr=r(vJe,"The model is set in evaluation mode by default using "),KCe=n(vJe,"CODE",{});var Uaa=s(KCe);Hhr=r(Uaa,"model.eval()"),Uaa.forEach(t),Jhr=r(vJe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e3e=n(vJe,"CODE",{});var Haa=s(e3e);Yhr=r(Haa,"model.train()"),Haa.forEach(t),vJe.forEach(t),Zhr=i(Ia),T(HT.$$.fragment,Ia),Ia.forEach(t),Zl.forEach(t),Xio=i(c),tm=n(c,"H2",{class:!0});var gco=s(tm);JT=n(gco,"A",{id:!0,class:!0,href:!0});var Jaa=s(JT);o3e=n(Jaa,"SPAN",{});var Yaa=s(o3e);T($S.$$.fragment,Yaa),Yaa.forEach(t),Jaa.forEach(t),Khr=i(gco),r3e=n(gco,"SPAN",{});var Zaa=s(r3e);eur=r(Zaa,"AutoModelForSeq2SeqLM"),Zaa.forEach(t),gco.forEach(t),zio=i(c),zo=n(c,"DIV",{class:!0});var Kl=s(zo);T(kS.$$.fragment,Kl),our=i(Kl),am=n(Kl,"P",{});var Qfe=s(am);rur=r(Qfe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tZ=n(Qfe,"A",{href:!0});var Kaa=s(tZ);tur=r(Kaa,"from_pretrained()"),Kaa.forEach(t),aur=r(Qfe," class method or the "),aZ=n(Qfe,"A",{href:!0});var ena=s(aZ);nur=r(ena,"from_config()"),ena.forEach(t),sur=r(Qfe,` class
method.`),Qfe.forEach(t),lur=i(Kl),SS=n(Kl,"P",{});var hco=s(SS);iur=r(hco,"This class cannot be instantiated directly using "),t3e=n(hco,"CODE",{});var ona=s(t3e);dur=r(ona,"__init__()"),ona.forEach(t),mur=r(hco," (throws an error)."),hco.forEach(t),cur=i(Kl),kt=n(Kl,"DIV",{class:!0});var Lx=s(kt);T(RS.$$.fragment,Lx),fur=i(Lx),a3e=n(Lx,"P",{});var rna=s(a3e);gur=r(rna,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rna.forEach(t),hur=i(Lx),nm=n(Lx,"P",{});var Wfe=s(nm);uur=r(Wfe,`Note:
Loading a model from its configuration file does `),n3e=n(Wfe,"STRONG",{});var tna=s(n3e);pur=r(tna,"not"),tna.forEach(t),_ur=r(Wfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=n(Wfe,"A",{href:!0});var ana=s(nZ);bur=r(ana,"from_pretrained()"),ana.forEach(t),vur=r(Wfe," to load the model weights."),Wfe.forEach(t),Fur=i(Lx),T(YT.$$.fragment,Lx),Lx.forEach(t),Tur=i(Kl),io=n(Kl,"DIV",{class:!0});var Na=s(io);T(PS.$$.fragment,Na),Mur=i(Na),s3e=n(Na,"P",{});var nna=s(s3e);Eur=r(nna,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),nna.forEach(t),Cur=i(Na),bn=n(Na,"P",{});var yx=s(bn);wur=r(yx,"The model class to instantiate is selected based on the "),l3e=n(yx,"CODE",{});var sna=s(l3e);Aur=r(sna,"model_type"),sna.forEach(t),Lur=r(yx,` property of the config object (either
passed as an argument or loaded from `),i3e=n(yx,"CODE",{});var lna=s(i3e);yur=r(lna,"pretrained_model_name_or_path"),lna.forEach(t),xur=r(yx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d3e=n(yx,"CODE",{});var ina=s(d3e);$ur=r(ina,"pretrained_model_name_or_path"),ina.forEach(t),kur=r(yx,":"),yx.forEach(t),Sur=i(Na),ge=n(Na,"UL",{});var _e=s(ge);ZT=n(_e,"LI",{});var FJe=s(ZT);m3e=n(FJe,"STRONG",{});var dna=s(m3e);Rur=r(dna,"bart"),dna.forEach(t),Pur=r(FJe," \u2014 "),sZ=n(FJe,"A",{href:!0});var mna=s(sZ);Bur=r(mna,"BartForConditionalGeneration"),mna.forEach(t),Iur=r(FJe," (BART model)"),FJe.forEach(t),Nur=i(_e),KT=n(_e,"LI",{});var TJe=s(KT);c3e=n(TJe,"STRONG",{});var cna=s(c3e);qur=r(cna,"bigbird_pegasus"),cna.forEach(t),jur=r(TJe," \u2014 "),lZ=n(TJe,"A",{href:!0});var fna=s(lZ);Dur=r(fna,"BigBirdPegasusForConditionalGeneration"),fna.forEach(t),Gur=r(TJe," (BigBird-Pegasus model)"),TJe.forEach(t),Our=i(_e),eM=n(_e,"LI",{});var MJe=s(eM);f3e=n(MJe,"STRONG",{});var gna=s(f3e);Vur=r(gna,"blenderbot"),gna.forEach(t),Xur=r(MJe," \u2014 "),iZ=n(MJe,"A",{href:!0});var hna=s(iZ);zur=r(hna,"BlenderbotForConditionalGeneration"),hna.forEach(t),Qur=r(MJe," (Blenderbot model)"),MJe.forEach(t),Wur=i(_e),oM=n(_e,"LI",{});var EJe=s(oM);g3e=n(EJe,"STRONG",{});var una=s(g3e);Uur=r(una,"blenderbot-small"),una.forEach(t),Hur=r(EJe," \u2014 "),dZ=n(EJe,"A",{href:!0});var pna=s(dZ);Jur=r(pna,"BlenderbotSmallForConditionalGeneration"),pna.forEach(t),Yur=r(EJe," (BlenderbotSmall model)"),EJe.forEach(t),Zur=i(_e),rM=n(_e,"LI",{});var CJe=s(rM);h3e=n(CJe,"STRONG",{});var _na=s(h3e);Kur=r(_na,"encoder-decoder"),_na.forEach(t),epr=r(CJe," \u2014 "),mZ=n(CJe,"A",{href:!0});var bna=s(mZ);opr=r(bna,"EncoderDecoderModel"),bna.forEach(t),rpr=r(CJe," (Encoder decoder model)"),CJe.forEach(t),tpr=i(_e),tM=n(_e,"LI",{});var wJe=s(tM);u3e=n(wJe,"STRONG",{});var vna=s(u3e);apr=r(vna,"fsmt"),vna.forEach(t),npr=r(wJe," \u2014 "),cZ=n(wJe,"A",{href:!0});var Fna=s(cZ);spr=r(Fna,"FSMTForConditionalGeneration"),Fna.forEach(t),lpr=r(wJe," (FairSeq Machine-Translation model)"),wJe.forEach(t),ipr=i(_e),aM=n(_e,"LI",{});var AJe=s(aM);p3e=n(AJe,"STRONG",{});var Tna=s(p3e);dpr=r(Tna,"led"),Tna.forEach(t),mpr=r(AJe," \u2014 "),fZ=n(AJe,"A",{href:!0});var Mna=s(fZ);cpr=r(Mna,"LEDForConditionalGeneration"),Mna.forEach(t),fpr=r(AJe," (LED model)"),AJe.forEach(t),gpr=i(_e),nM=n(_e,"LI",{});var LJe=s(nM);_3e=n(LJe,"STRONG",{});var Ena=s(_3e);hpr=r(Ena,"longt5"),Ena.forEach(t),upr=r(LJe," \u2014 "),gZ=n(LJe,"A",{href:!0});var Cna=s(gZ);ppr=r(Cna,"LongT5ForConditionalGeneration"),Cna.forEach(t),_pr=r(LJe," (LongT5 model)"),LJe.forEach(t),bpr=i(_e),sM=n(_e,"LI",{});var yJe=s(sM);b3e=n(yJe,"STRONG",{});var wna=s(b3e);vpr=r(wna,"m2m_100"),wna.forEach(t),Fpr=r(yJe," \u2014 "),hZ=n(yJe,"A",{href:!0});var Ana=s(hZ);Tpr=r(Ana,"M2M100ForConditionalGeneration"),Ana.forEach(t),Mpr=r(yJe," (M2M100 model)"),yJe.forEach(t),Epr=i(_e),lM=n(_e,"LI",{});var xJe=s(lM);v3e=n(xJe,"STRONG",{});var Lna=s(v3e);Cpr=r(Lna,"marian"),Lna.forEach(t),wpr=r(xJe," \u2014 "),uZ=n(xJe,"A",{href:!0});var yna=s(uZ);Apr=r(yna,"MarianMTModel"),yna.forEach(t),Lpr=r(xJe," (Marian model)"),xJe.forEach(t),ypr=i(_e),iM=n(_e,"LI",{});var $Je=s(iM);F3e=n($Je,"STRONG",{});var xna=s(F3e);xpr=r(xna,"mbart"),xna.forEach(t),$pr=r($Je," \u2014 "),pZ=n($Je,"A",{href:!0});var $na=s(pZ);kpr=r($na,"MBartForConditionalGeneration"),$na.forEach(t),Spr=r($Je," (mBART model)"),$Je.forEach(t),Rpr=i(_e),dM=n(_e,"LI",{});var kJe=s(dM);T3e=n(kJe,"STRONG",{});var kna=s(T3e);Ppr=r(kna,"mt5"),kna.forEach(t),Bpr=r(kJe," \u2014 "),_Z=n(kJe,"A",{href:!0});var Sna=s(_Z);Ipr=r(Sna,"MT5ForConditionalGeneration"),Sna.forEach(t),Npr=r(kJe," (MT5 model)"),kJe.forEach(t),qpr=i(_e),mM=n(_e,"LI",{});var SJe=s(mM);M3e=n(SJe,"STRONG",{});var Rna=s(M3e);jpr=r(Rna,"mvp"),Rna.forEach(t),Dpr=r(SJe," \u2014 "),bZ=n(SJe,"A",{href:!0});var Pna=s(bZ);Gpr=r(Pna,"MvpForConditionalGeneration"),Pna.forEach(t),Opr=r(SJe," (MVP model)"),SJe.forEach(t),Vpr=i(_e),cM=n(_e,"LI",{});var RJe=s(cM);E3e=n(RJe,"STRONG",{});var Bna=s(E3e);Xpr=r(Bna,"nllb"),Bna.forEach(t),zpr=r(RJe," \u2014 "),vZ=n(RJe,"A",{href:!0});var Ina=s(vZ);Qpr=r(Ina,"M2M100ForConditionalGeneration"),Ina.forEach(t),Wpr=r(RJe," (NLLB model)"),RJe.forEach(t),Upr=i(_e),fM=n(_e,"LI",{});var PJe=s(fM);C3e=n(PJe,"STRONG",{});var Nna=s(C3e);Hpr=r(Nna,"pegasus"),Nna.forEach(t),Jpr=r(PJe," \u2014 "),FZ=n(PJe,"A",{href:!0});var qna=s(FZ);Ypr=r(qna,"PegasusForConditionalGeneration"),qna.forEach(t),Zpr=r(PJe," (Pegasus model)"),PJe.forEach(t),Kpr=i(_e),gM=n(_e,"LI",{});var BJe=s(gM);w3e=n(BJe,"STRONG",{});var jna=s(w3e);e_r=r(jna,"pegasus_x"),jna.forEach(t),o_r=r(BJe," \u2014 "),TZ=n(BJe,"A",{href:!0});var Dna=s(TZ);r_r=r(Dna,"PegasusXForConditionalGeneration"),Dna.forEach(t),t_r=r(BJe," (PEGASUS-X model)"),BJe.forEach(t),a_r=i(_e),hM=n(_e,"LI",{});var IJe=s(hM);A3e=n(IJe,"STRONG",{});var Gna=s(A3e);n_r=r(Gna,"plbart"),Gna.forEach(t),s_r=r(IJe," \u2014 "),MZ=n(IJe,"A",{href:!0});var Ona=s(MZ);l_r=r(Ona,"PLBartForConditionalGeneration"),Ona.forEach(t),i_r=r(IJe," (PLBart model)"),IJe.forEach(t),d_r=i(_e),uM=n(_e,"LI",{});var NJe=s(uM);L3e=n(NJe,"STRONG",{});var Vna=s(L3e);m_r=r(Vna,"prophetnet"),Vna.forEach(t),c_r=r(NJe," \u2014 "),EZ=n(NJe,"A",{href:!0});var Xna=s(EZ);f_r=r(Xna,"ProphetNetForConditionalGeneration"),Xna.forEach(t),g_r=r(NJe," (ProphetNet model)"),NJe.forEach(t),h_r=i(_e),pM=n(_e,"LI",{});var qJe=s(pM);y3e=n(qJe,"STRONG",{});var zna=s(y3e);u_r=r(zna,"switch_transformers"),zna.forEach(t),p_r=r(qJe," \u2014 "),CZ=n(qJe,"A",{href:!0});var Qna=s(CZ);__r=r(Qna,"SwitchTransformersForConditionalGeneration"),Qna.forEach(t),b_r=r(qJe," (SwitchTransformers model)"),qJe.forEach(t),v_r=i(_e),_M=n(_e,"LI",{});var jJe=s(_M);x3e=n(jJe,"STRONG",{});var Wna=s(x3e);F_r=r(Wna,"t5"),Wna.forEach(t),T_r=r(jJe," \u2014 "),wZ=n(jJe,"A",{href:!0});var Una=s(wZ);M_r=r(Una,"T5ForConditionalGeneration"),Una.forEach(t),E_r=r(jJe," (T5 model)"),jJe.forEach(t),C_r=i(_e),bM=n(_e,"LI",{});var DJe=s(bM);$3e=n(DJe,"STRONG",{});var Hna=s($3e);w_r=r(Hna,"xlm-prophetnet"),Hna.forEach(t),A_r=r(DJe," \u2014 "),AZ=n(DJe,"A",{href:!0});var Jna=s(AZ);L_r=r(Jna,"XLMProphetNetForConditionalGeneration"),Jna.forEach(t),y_r=r(DJe," (XLM-ProphetNet model)"),DJe.forEach(t),_e.forEach(t),x_r=i(Na),vM=n(Na,"P",{});var GJe=s(vM);$_r=r(GJe,"The model is set in evaluation mode by default using "),k3e=n(GJe,"CODE",{});var Yna=s(k3e);k_r=r(Yna,"model.eval()"),Yna.forEach(t),S_r=r(GJe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S3e=n(GJe,"CODE",{});var Zna=s(S3e);R_r=r(Zna,"model.train()"),Zna.forEach(t),GJe.forEach(t),P_r=i(Na),T(FM.$$.fragment,Na),Na.forEach(t),Kl.forEach(t),Qio=i(c),sm=n(c,"H2",{class:!0});var uco=s(sm);TM=n(uco,"A",{id:!0,class:!0,href:!0});var Kna=s(TM);R3e=n(Kna,"SPAN",{});var esa=s(R3e);T(BS.$$.fragment,esa),esa.forEach(t),Kna.forEach(t),B_r=i(uco),P3e=n(uco,"SPAN",{});var osa=s(P3e);I_r=r(osa,"AutoModelForSequenceClassification"),osa.forEach(t),uco.forEach(t),Wio=i(c),Qo=n(c,"DIV",{class:!0});var ei=s(Qo);T(IS.$$.fragment,ei),N_r=i(ei),lm=n(ei,"P",{});var Ufe=s(lm);q_r=r(Ufe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LZ=n(Ufe,"A",{href:!0});var rsa=s(LZ);j_r=r(rsa,"from_pretrained()"),rsa.forEach(t),D_r=r(Ufe," class method or the "),yZ=n(Ufe,"A",{href:!0});var tsa=s(yZ);G_r=r(tsa,"from_config()"),tsa.forEach(t),O_r=r(Ufe,` class
method.`),Ufe.forEach(t),V_r=i(ei),NS=n(ei,"P",{});var pco=s(NS);X_r=r(pco,"This class cannot be instantiated directly using "),B3e=n(pco,"CODE",{});var asa=s(B3e);z_r=r(asa,"__init__()"),asa.forEach(t),Q_r=r(pco," (throws an error)."),pco.forEach(t),W_r=i(ei),St=n(ei,"DIV",{class:!0});var xx=s(St);T(qS.$$.fragment,xx),U_r=i(xx),I3e=n(xx,"P",{});var nsa=s(I3e);H_r=r(nsa,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nsa.forEach(t),J_r=i(xx),im=n(xx,"P",{});var Hfe=s(im);Y_r=r(Hfe,`Note:
Loading a model from its configuration file does `),N3e=n(Hfe,"STRONG",{});var ssa=s(N3e);Z_r=r(ssa,"not"),ssa.forEach(t),K_r=r(Hfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=n(Hfe,"A",{href:!0});var lsa=s(xZ);e1r=r(lsa,"from_pretrained()"),lsa.forEach(t),o1r=r(Hfe," to load the model weights."),Hfe.forEach(t),r1r=i(xx),T(MM.$$.fragment,xx),xx.forEach(t),t1r=i(ei),mo=n(ei,"DIV",{class:!0});var qa=s(mo);T(jS.$$.fragment,qa),a1r=i(qa),q3e=n(qa,"P",{});var isa=s(q3e);n1r=r(isa,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),isa.forEach(t),s1r=i(qa),vn=n(qa,"P",{});var $x=s(vn);l1r=r($x,"The model class to instantiate is selected based on the "),j3e=n($x,"CODE",{});var dsa=s(j3e);i1r=r(dsa,"model_type"),dsa.forEach(t),d1r=r($x,` property of the config object (either
passed as an argument or loaded from `),D3e=n($x,"CODE",{});var msa=s(D3e);m1r=r(msa,"pretrained_model_name_or_path"),msa.forEach(t),c1r=r($x,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=n($x,"CODE",{});var csa=s(G3e);f1r=r(csa,"pretrained_model_name_or_path"),csa.forEach(t),g1r=r($x,":"),$x.forEach(t),h1r=i(qa),I=n(qa,"UL",{});var D=s(I);EM=n(D,"LI",{});var OJe=s(EM);O3e=n(OJe,"STRONG",{});var fsa=s(O3e);u1r=r(fsa,"albert"),fsa.forEach(t),p1r=r(OJe," \u2014 "),$Z=n(OJe,"A",{href:!0});var gsa=s($Z);_1r=r(gsa,"AlbertForSequenceClassification"),gsa.forEach(t),b1r=r(OJe," (ALBERT model)"),OJe.forEach(t),v1r=i(D),CM=n(D,"LI",{});var VJe=s(CM);V3e=n(VJe,"STRONG",{});var hsa=s(V3e);F1r=r(hsa,"bart"),hsa.forEach(t),T1r=r(VJe," \u2014 "),kZ=n(VJe,"A",{href:!0});var usa=s(kZ);M1r=r(usa,"BartForSequenceClassification"),usa.forEach(t),E1r=r(VJe," (BART model)"),VJe.forEach(t),C1r=i(D),wM=n(D,"LI",{});var XJe=s(wM);X3e=n(XJe,"STRONG",{});var psa=s(X3e);w1r=r(psa,"bert"),psa.forEach(t),A1r=r(XJe," \u2014 "),SZ=n(XJe,"A",{href:!0});var _sa=s(SZ);L1r=r(_sa,"BertForSequenceClassification"),_sa.forEach(t),y1r=r(XJe," (BERT model)"),XJe.forEach(t),x1r=i(D),AM=n(D,"LI",{});var zJe=s(AM);z3e=n(zJe,"STRONG",{});var bsa=s(z3e);$1r=r(bsa,"big_bird"),bsa.forEach(t),k1r=r(zJe," \u2014 "),RZ=n(zJe,"A",{href:!0});var vsa=s(RZ);S1r=r(vsa,"BigBirdForSequenceClassification"),vsa.forEach(t),R1r=r(zJe," (BigBird model)"),zJe.forEach(t),P1r=i(D),LM=n(D,"LI",{});var QJe=s(LM);Q3e=n(QJe,"STRONG",{});var Fsa=s(Q3e);B1r=r(Fsa,"bigbird_pegasus"),Fsa.forEach(t),I1r=r(QJe," \u2014 "),PZ=n(QJe,"A",{href:!0});var Tsa=s(PZ);N1r=r(Tsa,"BigBirdPegasusForSequenceClassification"),Tsa.forEach(t),q1r=r(QJe," (BigBird-Pegasus model)"),QJe.forEach(t),j1r=i(D),yM=n(D,"LI",{});var WJe=s(yM);W3e=n(WJe,"STRONG",{});var Msa=s(W3e);D1r=r(Msa,"bloom"),Msa.forEach(t),G1r=r(WJe," \u2014 "),BZ=n(WJe,"A",{href:!0});var Esa=s(BZ);O1r=r(Esa,"BloomForSequenceClassification"),Esa.forEach(t),V1r=r(WJe," (BLOOM model)"),WJe.forEach(t),X1r=i(D),xM=n(D,"LI",{});var UJe=s(xM);U3e=n(UJe,"STRONG",{});var Csa=s(U3e);z1r=r(Csa,"camembert"),Csa.forEach(t),Q1r=r(UJe," \u2014 "),IZ=n(UJe,"A",{href:!0});var wsa=s(IZ);W1r=r(wsa,"CamembertForSequenceClassification"),wsa.forEach(t),U1r=r(UJe," (CamemBERT model)"),UJe.forEach(t),H1r=i(D),$M=n(D,"LI",{});var HJe=s($M);H3e=n(HJe,"STRONG",{});var Asa=s(H3e);J1r=r(Asa,"canine"),Asa.forEach(t),Y1r=r(HJe," \u2014 "),NZ=n(HJe,"A",{href:!0});var Lsa=s(NZ);Z1r=r(Lsa,"CanineForSequenceClassification"),Lsa.forEach(t),K1r=r(HJe," (CANINE model)"),HJe.forEach(t),e2r=i(D),kM=n(D,"LI",{});var JJe=s(kM);J3e=n(JJe,"STRONG",{});var ysa=s(J3e);o2r=r(ysa,"convbert"),ysa.forEach(t),r2r=r(JJe," \u2014 "),qZ=n(JJe,"A",{href:!0});var xsa=s(qZ);t2r=r(xsa,"ConvBertForSequenceClassification"),xsa.forEach(t),a2r=r(JJe," (ConvBERT model)"),JJe.forEach(t),n2r=i(D),SM=n(D,"LI",{});var YJe=s(SM);Y3e=n(YJe,"STRONG",{});var $sa=s(Y3e);s2r=r($sa,"ctrl"),$sa.forEach(t),l2r=r(YJe," \u2014 "),jZ=n(YJe,"A",{href:!0});var ksa=s(jZ);i2r=r(ksa,"CTRLForSequenceClassification"),ksa.forEach(t),d2r=r(YJe," (CTRL model)"),YJe.forEach(t),m2r=i(D),RM=n(D,"LI",{});var ZJe=s(RM);Z3e=n(ZJe,"STRONG",{});var Ssa=s(Z3e);c2r=r(Ssa,"data2vec-text"),Ssa.forEach(t),f2r=r(ZJe," \u2014 "),DZ=n(ZJe,"A",{href:!0});var Rsa=s(DZ);g2r=r(Rsa,"Data2VecTextForSequenceClassification"),Rsa.forEach(t),h2r=r(ZJe," (Data2VecText model)"),ZJe.forEach(t),u2r=i(D),PM=n(D,"LI",{});var KJe=s(PM);K3e=n(KJe,"STRONG",{});var Psa=s(K3e);p2r=r(Psa,"deberta"),Psa.forEach(t),_2r=r(KJe," \u2014 "),GZ=n(KJe,"A",{href:!0});var Bsa=s(GZ);b2r=r(Bsa,"DebertaForSequenceClassification"),Bsa.forEach(t),v2r=r(KJe," (DeBERTa model)"),KJe.forEach(t),F2r=i(D),BM=n(D,"LI",{});var eYe=s(BM);e5e=n(eYe,"STRONG",{});var Isa=s(e5e);T2r=r(Isa,"deberta-v2"),Isa.forEach(t),M2r=r(eYe," \u2014 "),OZ=n(eYe,"A",{href:!0});var Nsa=s(OZ);E2r=r(Nsa,"DebertaV2ForSequenceClassification"),Nsa.forEach(t),C2r=r(eYe," (DeBERTa-v2 model)"),eYe.forEach(t),w2r=i(D),IM=n(D,"LI",{});var oYe=s(IM);o5e=n(oYe,"STRONG",{});var qsa=s(o5e);A2r=r(qsa,"distilbert"),qsa.forEach(t),L2r=r(oYe," \u2014 "),VZ=n(oYe,"A",{href:!0});var jsa=s(VZ);y2r=r(jsa,"DistilBertForSequenceClassification"),jsa.forEach(t),x2r=r(oYe," (DistilBERT model)"),oYe.forEach(t),$2r=i(D),NM=n(D,"LI",{});var rYe=s(NM);r5e=n(rYe,"STRONG",{});var Dsa=s(r5e);k2r=r(Dsa,"electra"),Dsa.forEach(t),S2r=r(rYe," \u2014 "),XZ=n(rYe,"A",{href:!0});var Gsa=s(XZ);R2r=r(Gsa,"ElectraForSequenceClassification"),Gsa.forEach(t),P2r=r(rYe," (ELECTRA model)"),rYe.forEach(t),B2r=i(D),qM=n(D,"LI",{});var tYe=s(qM);t5e=n(tYe,"STRONG",{});var Osa=s(t5e);I2r=r(Osa,"ernie"),Osa.forEach(t),N2r=r(tYe," \u2014 "),zZ=n(tYe,"A",{href:!0});var Vsa=s(zZ);q2r=r(Vsa,"ErnieForSequenceClassification"),Vsa.forEach(t),j2r=r(tYe," (ERNIE model)"),tYe.forEach(t),D2r=i(D),jM=n(D,"LI",{});var aYe=s(jM);a5e=n(aYe,"STRONG",{});var Xsa=s(a5e);G2r=r(Xsa,"esm"),Xsa.forEach(t),O2r=r(aYe," \u2014 "),QZ=n(aYe,"A",{href:!0});var zsa=s(QZ);V2r=r(zsa,"EsmForSequenceClassification"),zsa.forEach(t),X2r=r(aYe," (ESM model)"),aYe.forEach(t),z2r=i(D),DM=n(D,"LI",{});var nYe=s(DM);n5e=n(nYe,"STRONG",{});var Qsa=s(n5e);Q2r=r(Qsa,"flaubert"),Qsa.forEach(t),W2r=r(nYe," \u2014 "),WZ=n(nYe,"A",{href:!0});var Wsa=s(WZ);U2r=r(Wsa,"FlaubertForSequenceClassification"),Wsa.forEach(t),H2r=r(nYe," (FlauBERT model)"),nYe.forEach(t),J2r=i(D),GM=n(D,"LI",{});var sYe=s(GM);s5e=n(sYe,"STRONG",{});var Usa=s(s5e);Y2r=r(Usa,"fnet"),Usa.forEach(t),Z2r=r(sYe," \u2014 "),UZ=n(sYe,"A",{href:!0});var Hsa=s(UZ);K2r=r(Hsa,"FNetForSequenceClassification"),Hsa.forEach(t),ebr=r(sYe," (FNet model)"),sYe.forEach(t),obr=i(D),OM=n(D,"LI",{});var lYe=s(OM);l5e=n(lYe,"STRONG",{});var Jsa=s(l5e);rbr=r(Jsa,"funnel"),Jsa.forEach(t),tbr=r(lYe," \u2014 "),HZ=n(lYe,"A",{href:!0});var Ysa=s(HZ);abr=r(Ysa,"FunnelForSequenceClassification"),Ysa.forEach(t),nbr=r(lYe," (Funnel Transformer model)"),lYe.forEach(t),sbr=i(D),VM=n(D,"LI",{});var iYe=s(VM);i5e=n(iYe,"STRONG",{});var Zsa=s(i5e);lbr=r(Zsa,"gpt2"),Zsa.forEach(t),ibr=r(iYe," \u2014 "),JZ=n(iYe,"A",{href:!0});var Ksa=s(JZ);dbr=r(Ksa,"GPT2ForSequenceClassification"),Ksa.forEach(t),mbr=r(iYe," (OpenAI GPT-2 model)"),iYe.forEach(t),cbr=i(D),XM=n(D,"LI",{});var dYe=s(XM);d5e=n(dYe,"STRONG",{});var ela=s(d5e);fbr=r(ela,"gpt_neo"),ela.forEach(t),gbr=r(dYe," \u2014 "),YZ=n(dYe,"A",{href:!0});var ola=s(YZ);hbr=r(ola,"GPTNeoForSequenceClassification"),ola.forEach(t),ubr=r(dYe," (GPT Neo model)"),dYe.forEach(t),pbr=i(D),zM=n(D,"LI",{});var mYe=s(zM);m5e=n(mYe,"STRONG",{});var rla=s(m5e);_br=r(rla,"gptj"),rla.forEach(t),bbr=r(mYe," \u2014 "),ZZ=n(mYe,"A",{href:!0});var tla=s(ZZ);vbr=r(tla,"GPTJForSequenceClassification"),tla.forEach(t),Fbr=r(mYe," (GPT-J model)"),mYe.forEach(t),Tbr=i(D),QM=n(D,"LI",{});var cYe=s(QM);c5e=n(cYe,"STRONG",{});var ala=s(c5e);Mbr=r(ala,"ibert"),ala.forEach(t),Ebr=r(cYe," \u2014 "),KZ=n(cYe,"A",{href:!0});var nla=s(KZ);Cbr=r(nla,"IBertForSequenceClassification"),nla.forEach(t),wbr=r(cYe," (I-BERT model)"),cYe.forEach(t),Abr=i(D),WM=n(D,"LI",{});var fYe=s(WM);f5e=n(fYe,"STRONG",{});var sla=s(f5e);Lbr=r(sla,"layoutlm"),sla.forEach(t),ybr=r(fYe," \u2014 "),eK=n(fYe,"A",{href:!0});var lla=s(eK);xbr=r(lla,"LayoutLMForSequenceClassification"),lla.forEach(t),$br=r(fYe," (LayoutLM model)"),fYe.forEach(t),kbr=i(D),UM=n(D,"LI",{});var gYe=s(UM);g5e=n(gYe,"STRONG",{});var ila=s(g5e);Sbr=r(ila,"layoutlmv2"),ila.forEach(t),Rbr=r(gYe," \u2014 "),oK=n(gYe,"A",{href:!0});var dla=s(oK);Pbr=r(dla,"LayoutLMv2ForSequenceClassification"),dla.forEach(t),Bbr=r(gYe," (LayoutLMv2 model)"),gYe.forEach(t),Ibr=i(D),HM=n(D,"LI",{});var hYe=s(HM);h5e=n(hYe,"STRONG",{});var mla=s(h5e);Nbr=r(mla,"layoutlmv3"),mla.forEach(t),qbr=r(hYe," \u2014 "),rK=n(hYe,"A",{href:!0});var cla=s(rK);jbr=r(cla,"LayoutLMv3ForSequenceClassification"),cla.forEach(t),Dbr=r(hYe," (LayoutLMv3 model)"),hYe.forEach(t),Gbr=i(D),JM=n(D,"LI",{});var uYe=s(JM);u5e=n(uYe,"STRONG",{});var fla=s(u5e);Obr=r(fla,"led"),fla.forEach(t),Vbr=r(uYe," \u2014 "),tK=n(uYe,"A",{href:!0});var gla=s(tK);Xbr=r(gla,"LEDForSequenceClassification"),gla.forEach(t),zbr=r(uYe," (LED model)"),uYe.forEach(t),Qbr=i(D),YM=n(D,"LI",{});var pYe=s(YM);p5e=n(pYe,"STRONG",{});var hla=s(p5e);Wbr=r(hla,"lilt"),hla.forEach(t),Ubr=r(pYe," \u2014 "),aK=n(pYe,"A",{href:!0});var ula=s(aK);Hbr=r(ula,"LiltForSequenceClassification"),ula.forEach(t),Jbr=r(pYe," (LiLT model)"),pYe.forEach(t),Ybr=i(D),ZM=n(D,"LI",{});var _Ye=s(ZM);_5e=n(_Ye,"STRONG",{});var pla=s(_5e);Zbr=r(pla,"longformer"),pla.forEach(t),Kbr=r(_Ye," \u2014 "),nK=n(_Ye,"A",{href:!0});var _la=s(nK);evr=r(_la,"LongformerForSequenceClassification"),_la.forEach(t),ovr=r(_Ye," (Longformer model)"),_Ye.forEach(t),rvr=i(D),KM=n(D,"LI",{});var bYe=s(KM);b5e=n(bYe,"STRONG",{});var bla=s(b5e);tvr=r(bla,"luke"),bla.forEach(t),avr=r(bYe," \u2014 "),sK=n(bYe,"A",{href:!0});var vla=s(sK);nvr=r(vla,"LukeForSequenceClassification"),vla.forEach(t),svr=r(bYe," (LUKE model)"),bYe.forEach(t),lvr=i(D),eE=n(D,"LI",{});var vYe=s(eE);v5e=n(vYe,"STRONG",{});var Fla=s(v5e);ivr=r(Fla,"markuplm"),Fla.forEach(t),dvr=r(vYe," \u2014 "),lK=n(vYe,"A",{href:!0});var Tla=s(lK);mvr=r(Tla,"MarkupLMForSequenceClassification"),Tla.forEach(t),cvr=r(vYe," (MarkupLM model)"),vYe.forEach(t),fvr=i(D),oE=n(D,"LI",{});var FYe=s(oE);F5e=n(FYe,"STRONG",{});var Mla=s(F5e);gvr=r(Mla,"mbart"),Mla.forEach(t),hvr=r(FYe," \u2014 "),iK=n(FYe,"A",{href:!0});var Ela=s(iK);uvr=r(Ela,"MBartForSequenceClassification"),Ela.forEach(t),pvr=r(FYe," (mBART model)"),FYe.forEach(t),_vr=i(D),rE=n(D,"LI",{});var TYe=s(rE);T5e=n(TYe,"STRONG",{});var Cla=s(T5e);bvr=r(Cla,"megatron-bert"),Cla.forEach(t),vvr=r(TYe," \u2014 "),dK=n(TYe,"A",{href:!0});var wla=s(dK);Fvr=r(wla,"MegatronBertForSequenceClassification"),wla.forEach(t),Tvr=r(TYe," (Megatron-BERT model)"),TYe.forEach(t),Mvr=i(D),tE=n(D,"LI",{});var MYe=s(tE);M5e=n(MYe,"STRONG",{});var Ala=s(M5e);Evr=r(Ala,"mobilebert"),Ala.forEach(t),Cvr=r(MYe," \u2014 "),mK=n(MYe,"A",{href:!0});var Lla=s(mK);wvr=r(Lla,"MobileBertForSequenceClassification"),Lla.forEach(t),Avr=r(MYe," (MobileBERT model)"),MYe.forEach(t),Lvr=i(D),aE=n(D,"LI",{});var EYe=s(aE);E5e=n(EYe,"STRONG",{});var yla=s(E5e);yvr=r(yla,"mpnet"),yla.forEach(t),xvr=r(EYe," \u2014 "),cK=n(EYe,"A",{href:!0});var xla=s(cK);$vr=r(xla,"MPNetForSequenceClassification"),xla.forEach(t),kvr=r(EYe," (MPNet model)"),EYe.forEach(t),Svr=i(D),nE=n(D,"LI",{});var CYe=s(nE);C5e=n(CYe,"STRONG",{});var $la=s(C5e);Rvr=r($la,"mvp"),$la.forEach(t),Pvr=r(CYe," \u2014 "),fK=n(CYe,"A",{href:!0});var kla=s(fK);Bvr=r(kla,"MvpForSequenceClassification"),kla.forEach(t),Ivr=r(CYe," (MVP model)"),CYe.forEach(t),Nvr=i(D),sE=n(D,"LI",{});var wYe=s(sE);w5e=n(wYe,"STRONG",{});var Sla=s(w5e);qvr=r(Sla,"nezha"),Sla.forEach(t),jvr=r(wYe," \u2014 "),gK=n(wYe,"A",{href:!0});var Rla=s(gK);Dvr=r(Rla,"NezhaForSequenceClassification"),Rla.forEach(t),Gvr=r(wYe," (Nezha model)"),wYe.forEach(t),Ovr=i(D),lE=n(D,"LI",{});var AYe=s(lE);A5e=n(AYe,"STRONG",{});var Pla=s(A5e);Vvr=r(Pla,"nystromformer"),Pla.forEach(t),Xvr=r(AYe," \u2014 "),hK=n(AYe,"A",{href:!0});var Bla=s(hK);zvr=r(Bla,"NystromformerForSequenceClassification"),Bla.forEach(t),Qvr=r(AYe," (Nystr\xF6mformer model)"),AYe.forEach(t),Wvr=i(D),iE=n(D,"LI",{});var LYe=s(iE);L5e=n(LYe,"STRONG",{});var Ila=s(L5e);Uvr=r(Ila,"openai-gpt"),Ila.forEach(t),Hvr=r(LYe," \u2014 "),uK=n(LYe,"A",{href:!0});var Nla=s(uK);Jvr=r(Nla,"OpenAIGPTForSequenceClassification"),Nla.forEach(t),Yvr=r(LYe," (OpenAI GPT model)"),LYe.forEach(t),Zvr=i(D),dE=n(D,"LI",{});var yYe=s(dE);y5e=n(yYe,"STRONG",{});var qla=s(y5e);Kvr=r(qla,"opt"),qla.forEach(t),eFr=r(yYe," \u2014 "),pK=n(yYe,"A",{href:!0});var jla=s(pK);oFr=r(jla,"OPTForSequenceClassification"),jla.forEach(t),rFr=r(yYe," (OPT model)"),yYe.forEach(t),tFr=i(D),mE=n(D,"LI",{});var xYe=s(mE);x5e=n(xYe,"STRONG",{});var Dla=s(x5e);aFr=r(Dla,"perceiver"),Dla.forEach(t),nFr=r(xYe," \u2014 "),_K=n(xYe,"A",{href:!0});var Gla=s(_K);sFr=r(Gla,"PerceiverForSequenceClassification"),Gla.forEach(t),lFr=r(xYe," (Perceiver model)"),xYe.forEach(t),iFr=i(D),cE=n(D,"LI",{});var $Ye=s(cE);$5e=n($Ye,"STRONG",{});var Ola=s($5e);dFr=r(Ola,"plbart"),Ola.forEach(t),mFr=r($Ye," \u2014 "),bK=n($Ye,"A",{href:!0});var Vla=s(bK);cFr=r(Vla,"PLBartForSequenceClassification"),Vla.forEach(t),fFr=r($Ye," (PLBart model)"),$Ye.forEach(t),gFr=i(D),fE=n(D,"LI",{});var kYe=s(fE);k5e=n(kYe,"STRONG",{});var Xla=s(k5e);hFr=r(Xla,"qdqbert"),Xla.forEach(t),uFr=r(kYe," \u2014 "),vK=n(kYe,"A",{href:!0});var zla=s(vK);pFr=r(zla,"QDQBertForSequenceClassification"),zla.forEach(t),_Fr=r(kYe," (QDQBert model)"),kYe.forEach(t),bFr=i(D),gE=n(D,"LI",{});var SYe=s(gE);S5e=n(SYe,"STRONG",{});var Qla=s(S5e);vFr=r(Qla,"reformer"),Qla.forEach(t),FFr=r(SYe," \u2014 "),FK=n(SYe,"A",{href:!0});var Wla=s(FK);TFr=r(Wla,"ReformerForSequenceClassification"),Wla.forEach(t),MFr=r(SYe," (Reformer model)"),SYe.forEach(t),EFr=i(D),hE=n(D,"LI",{});var RYe=s(hE);R5e=n(RYe,"STRONG",{});var Ula=s(R5e);CFr=r(Ula,"rembert"),Ula.forEach(t),wFr=r(RYe," \u2014 "),TK=n(RYe,"A",{href:!0});var Hla=s(TK);AFr=r(Hla,"RemBertForSequenceClassification"),Hla.forEach(t),LFr=r(RYe," (RemBERT model)"),RYe.forEach(t),yFr=i(D),uE=n(D,"LI",{});var PYe=s(uE);P5e=n(PYe,"STRONG",{});var Jla=s(P5e);xFr=r(Jla,"roberta"),Jla.forEach(t),$Fr=r(PYe," \u2014 "),MK=n(PYe,"A",{href:!0});var Yla=s(MK);kFr=r(Yla,"RobertaForSequenceClassification"),Yla.forEach(t),SFr=r(PYe," (RoBERTa model)"),PYe.forEach(t),RFr=i(D),pE=n(D,"LI",{});var BYe=s(pE);B5e=n(BYe,"STRONG",{});var Zla=s(B5e);PFr=r(Zla,"roc_bert"),Zla.forEach(t),BFr=r(BYe," \u2014 "),EK=n(BYe,"A",{href:!0});var Kla=s(EK);IFr=r(Kla,"RoCBertForSequenceClassification"),Kla.forEach(t),NFr=r(BYe," (RoCBert model)"),BYe.forEach(t),qFr=i(D),_E=n(D,"LI",{});var IYe=s(_E);I5e=n(IYe,"STRONG",{});var eia=s(I5e);jFr=r(eia,"roformer"),eia.forEach(t),DFr=r(IYe," \u2014 "),CK=n(IYe,"A",{href:!0});var oia=s(CK);GFr=r(oia,"RoFormerForSequenceClassification"),oia.forEach(t),OFr=r(IYe," (RoFormer model)"),IYe.forEach(t),VFr=i(D),bE=n(D,"LI",{});var NYe=s(bE);N5e=n(NYe,"STRONG",{});var ria=s(N5e);XFr=r(ria,"squeezebert"),ria.forEach(t),zFr=r(NYe," \u2014 "),wK=n(NYe,"A",{href:!0});var tia=s(wK);QFr=r(tia,"SqueezeBertForSequenceClassification"),tia.forEach(t),WFr=r(NYe," (SqueezeBERT model)"),NYe.forEach(t),UFr=i(D),vE=n(D,"LI",{});var qYe=s(vE);q5e=n(qYe,"STRONG",{});var aia=s(q5e);HFr=r(aia,"tapas"),aia.forEach(t),JFr=r(qYe," \u2014 "),AK=n(qYe,"A",{href:!0});var nia=s(AK);YFr=r(nia,"TapasForSequenceClassification"),nia.forEach(t),ZFr=r(qYe," (TAPAS model)"),qYe.forEach(t),KFr=i(D),FE=n(D,"LI",{});var jYe=s(FE);j5e=n(jYe,"STRONG",{});var sia=s(j5e);eTr=r(sia,"transfo-xl"),sia.forEach(t),oTr=r(jYe," \u2014 "),LK=n(jYe,"A",{href:!0});var lia=s(LK);rTr=r(lia,"TransfoXLForSequenceClassification"),lia.forEach(t),tTr=r(jYe," (Transformer-XL model)"),jYe.forEach(t),aTr=i(D),TE=n(D,"LI",{});var DYe=s(TE);D5e=n(DYe,"STRONG",{});var iia=s(D5e);nTr=r(iia,"xlm"),iia.forEach(t),sTr=r(DYe," \u2014 "),yK=n(DYe,"A",{href:!0});var dia=s(yK);lTr=r(dia,"XLMForSequenceClassification"),dia.forEach(t),iTr=r(DYe," (XLM model)"),DYe.forEach(t),dTr=i(D),ME=n(D,"LI",{});var GYe=s(ME);G5e=n(GYe,"STRONG",{});var mia=s(G5e);mTr=r(mia,"xlm-roberta"),mia.forEach(t),cTr=r(GYe," \u2014 "),xK=n(GYe,"A",{href:!0});var cia=s(xK);fTr=r(cia,"XLMRobertaForSequenceClassification"),cia.forEach(t),gTr=r(GYe," (XLM-RoBERTa model)"),GYe.forEach(t),hTr=i(D),EE=n(D,"LI",{});var OYe=s(EE);O5e=n(OYe,"STRONG",{});var fia=s(O5e);uTr=r(fia,"xlm-roberta-xl"),fia.forEach(t),pTr=r(OYe," \u2014 "),$K=n(OYe,"A",{href:!0});var gia=s($K);_Tr=r(gia,"XLMRobertaXLForSequenceClassification"),gia.forEach(t),bTr=r(OYe," (XLM-RoBERTa-XL model)"),OYe.forEach(t),vTr=i(D),CE=n(D,"LI",{});var VYe=s(CE);V5e=n(VYe,"STRONG",{});var hia=s(V5e);FTr=r(hia,"xlnet"),hia.forEach(t),TTr=r(VYe," \u2014 "),kK=n(VYe,"A",{href:!0});var uia=s(kK);MTr=r(uia,"XLNetForSequenceClassification"),uia.forEach(t),ETr=r(VYe," (XLNet model)"),VYe.forEach(t),CTr=i(D),wE=n(D,"LI",{});var XYe=s(wE);X5e=n(XYe,"STRONG",{});var pia=s(X5e);wTr=r(pia,"yoso"),pia.forEach(t),ATr=r(XYe," \u2014 "),SK=n(XYe,"A",{href:!0});var _ia=s(SK);LTr=r(_ia,"YosoForSequenceClassification"),_ia.forEach(t),yTr=r(XYe," (YOSO model)"),XYe.forEach(t),D.forEach(t),xTr=i(qa),AE=n(qa,"P",{});var zYe=s(AE);$Tr=r(zYe,"The model is set in evaluation mode by default using "),z5e=n(zYe,"CODE",{});var bia=s(z5e);kTr=r(bia,"model.eval()"),bia.forEach(t),STr=r(zYe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q5e=n(zYe,"CODE",{});var via=s(Q5e);RTr=r(via,"model.train()"),via.forEach(t),zYe.forEach(t),PTr=i(qa),T(LE.$$.fragment,qa),qa.forEach(t),ei.forEach(t),Uio=i(c),dm=n(c,"H2",{class:!0});var _co=s(dm);yE=n(_co,"A",{id:!0,class:!0,href:!0});var Fia=s(yE);W5e=n(Fia,"SPAN",{});var Tia=s(W5e);T(DS.$$.fragment,Tia),Tia.forEach(t),Fia.forEach(t),BTr=i(_co),U5e=n(_co,"SPAN",{});var Mia=s(U5e);ITr=r(Mia,"AutoModelForMultipleChoice"),Mia.forEach(t),_co.forEach(t),Hio=i(c),Wo=n(c,"DIV",{class:!0});var oi=s(Wo);T(GS.$$.fragment,oi),NTr=i(oi),mm=n(oi,"P",{});var Jfe=s(mm);qTr=r(Jfe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RK=n(Jfe,"A",{href:!0});var Eia=s(RK);jTr=r(Eia,"from_pretrained()"),Eia.forEach(t),DTr=r(Jfe," class method or the "),PK=n(Jfe,"A",{href:!0});var Cia=s(PK);GTr=r(Cia,"from_config()"),Cia.forEach(t),OTr=r(Jfe,` class
method.`),Jfe.forEach(t),VTr=i(oi),OS=n(oi,"P",{});var bco=s(OS);XTr=r(bco,"This class cannot be instantiated directly using "),H5e=n(bco,"CODE",{});var wia=s(H5e);zTr=r(wia,"__init__()"),wia.forEach(t),QTr=r(bco," (throws an error)."),bco.forEach(t),WTr=i(oi),Rt=n(oi,"DIV",{class:!0});var kx=s(Rt);T(VS.$$.fragment,kx),UTr=i(kx),J5e=n(kx,"P",{});var Aia=s(J5e);HTr=r(Aia,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Aia.forEach(t),JTr=i(kx),cm=n(kx,"P",{});var Yfe=s(cm);YTr=r(Yfe,`Note:
Loading a model from its configuration file does `),Y5e=n(Yfe,"STRONG",{});var Lia=s(Y5e);ZTr=r(Lia,"not"),Lia.forEach(t),KTr=r(Yfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(Yfe,"A",{href:!0});var yia=s(BK);eMr=r(yia,"from_pretrained()"),yia.forEach(t),oMr=r(Yfe," to load the model weights."),Yfe.forEach(t),rMr=i(kx),T(xE.$$.fragment,kx),kx.forEach(t),tMr=i(oi),co=n(oi,"DIV",{class:!0});var ja=s(co);T(XS.$$.fragment,ja),aMr=i(ja),Z5e=n(ja,"P",{});var xia=s(Z5e);nMr=r(xia,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xia.forEach(t),sMr=i(ja),Fn=n(ja,"P",{});var Sx=s(Fn);lMr=r(Sx,"The model class to instantiate is selected based on the "),K5e=n(Sx,"CODE",{});var $ia=s(K5e);iMr=r($ia,"model_type"),$ia.forEach(t),dMr=r(Sx,` property of the config object (either
passed as an argument or loaded from `),e0e=n(Sx,"CODE",{});var kia=s(e0e);mMr=r(kia,"pretrained_model_name_or_path"),kia.forEach(t),cMr=r(Sx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o0e=n(Sx,"CODE",{});var Sia=s(o0e);fMr=r(Sia,"pretrained_model_name_or_path"),Sia.forEach(t),gMr=r(Sx,":"),Sx.forEach(t),hMr=i(ja),K=n(ja,"UL",{});var ee=s(K);$E=n(ee,"LI",{});var QYe=s($E);r0e=n(QYe,"STRONG",{});var Ria=s(r0e);uMr=r(Ria,"albert"),Ria.forEach(t),pMr=r(QYe," \u2014 "),IK=n(QYe,"A",{href:!0});var Pia=s(IK);_Mr=r(Pia,"AlbertForMultipleChoice"),Pia.forEach(t),bMr=r(QYe," (ALBERT model)"),QYe.forEach(t),vMr=i(ee),kE=n(ee,"LI",{});var WYe=s(kE);t0e=n(WYe,"STRONG",{});var Bia=s(t0e);FMr=r(Bia,"bert"),Bia.forEach(t),TMr=r(WYe," \u2014 "),NK=n(WYe,"A",{href:!0});var Iia=s(NK);MMr=r(Iia,"BertForMultipleChoice"),Iia.forEach(t),EMr=r(WYe," (BERT model)"),WYe.forEach(t),CMr=i(ee),SE=n(ee,"LI",{});var UYe=s(SE);a0e=n(UYe,"STRONG",{});var Nia=s(a0e);wMr=r(Nia,"big_bird"),Nia.forEach(t),AMr=r(UYe," \u2014 "),qK=n(UYe,"A",{href:!0});var qia=s(qK);LMr=r(qia,"BigBirdForMultipleChoice"),qia.forEach(t),yMr=r(UYe," (BigBird model)"),UYe.forEach(t),xMr=i(ee),RE=n(ee,"LI",{});var HYe=s(RE);n0e=n(HYe,"STRONG",{});var jia=s(n0e);$Mr=r(jia,"camembert"),jia.forEach(t),kMr=r(HYe," \u2014 "),jK=n(HYe,"A",{href:!0});var Dia=s(jK);SMr=r(Dia,"CamembertForMultipleChoice"),Dia.forEach(t),RMr=r(HYe," (CamemBERT model)"),HYe.forEach(t),PMr=i(ee),PE=n(ee,"LI",{});var JYe=s(PE);s0e=n(JYe,"STRONG",{});var Gia=s(s0e);BMr=r(Gia,"canine"),Gia.forEach(t),IMr=r(JYe," \u2014 "),DK=n(JYe,"A",{href:!0});var Oia=s(DK);NMr=r(Oia,"CanineForMultipleChoice"),Oia.forEach(t),qMr=r(JYe," (CANINE model)"),JYe.forEach(t),jMr=i(ee),BE=n(ee,"LI",{});var YYe=s(BE);l0e=n(YYe,"STRONG",{});var Via=s(l0e);DMr=r(Via,"convbert"),Via.forEach(t),GMr=r(YYe," \u2014 "),GK=n(YYe,"A",{href:!0});var Xia=s(GK);OMr=r(Xia,"ConvBertForMultipleChoice"),Xia.forEach(t),VMr=r(YYe," (ConvBERT model)"),YYe.forEach(t),XMr=i(ee),IE=n(ee,"LI",{});var ZYe=s(IE);i0e=n(ZYe,"STRONG",{});var zia=s(i0e);zMr=r(zia,"data2vec-text"),zia.forEach(t),QMr=r(ZYe," \u2014 "),OK=n(ZYe,"A",{href:!0});var Qia=s(OK);WMr=r(Qia,"Data2VecTextForMultipleChoice"),Qia.forEach(t),UMr=r(ZYe," (Data2VecText model)"),ZYe.forEach(t),HMr=i(ee),NE=n(ee,"LI",{});var KYe=s(NE);d0e=n(KYe,"STRONG",{});var Wia=s(d0e);JMr=r(Wia,"deberta-v2"),Wia.forEach(t),YMr=r(KYe," \u2014 "),VK=n(KYe,"A",{href:!0});var Uia=s(VK);ZMr=r(Uia,"DebertaV2ForMultipleChoice"),Uia.forEach(t),KMr=r(KYe," (DeBERTa-v2 model)"),KYe.forEach(t),eEr=i(ee),qE=n(ee,"LI",{});var eZe=s(qE);m0e=n(eZe,"STRONG",{});var Hia=s(m0e);oEr=r(Hia,"distilbert"),Hia.forEach(t),rEr=r(eZe," \u2014 "),XK=n(eZe,"A",{href:!0});var Jia=s(XK);tEr=r(Jia,"DistilBertForMultipleChoice"),Jia.forEach(t),aEr=r(eZe," (DistilBERT model)"),eZe.forEach(t),nEr=i(ee),jE=n(ee,"LI",{});var oZe=s(jE);c0e=n(oZe,"STRONG",{});var Yia=s(c0e);sEr=r(Yia,"electra"),Yia.forEach(t),lEr=r(oZe," \u2014 "),zK=n(oZe,"A",{href:!0});var Zia=s(zK);iEr=r(Zia,"ElectraForMultipleChoice"),Zia.forEach(t),dEr=r(oZe," (ELECTRA model)"),oZe.forEach(t),mEr=i(ee),DE=n(ee,"LI",{});var rZe=s(DE);f0e=n(rZe,"STRONG",{});var Kia=s(f0e);cEr=r(Kia,"ernie"),Kia.forEach(t),fEr=r(rZe," \u2014 "),QK=n(rZe,"A",{href:!0});var eda=s(QK);gEr=r(eda,"ErnieForMultipleChoice"),eda.forEach(t),hEr=r(rZe," (ERNIE model)"),rZe.forEach(t),uEr=i(ee),GE=n(ee,"LI",{});var tZe=s(GE);g0e=n(tZe,"STRONG",{});var oda=s(g0e);pEr=r(oda,"flaubert"),oda.forEach(t),_Er=r(tZe," \u2014 "),WK=n(tZe,"A",{href:!0});var rda=s(WK);bEr=r(rda,"FlaubertForMultipleChoice"),rda.forEach(t),vEr=r(tZe," (FlauBERT model)"),tZe.forEach(t),FEr=i(ee),OE=n(ee,"LI",{});var aZe=s(OE);h0e=n(aZe,"STRONG",{});var tda=s(h0e);TEr=r(tda,"fnet"),tda.forEach(t),MEr=r(aZe," \u2014 "),UK=n(aZe,"A",{href:!0});var ada=s(UK);EEr=r(ada,"FNetForMultipleChoice"),ada.forEach(t),CEr=r(aZe," (FNet model)"),aZe.forEach(t),wEr=i(ee),VE=n(ee,"LI",{});var nZe=s(VE);u0e=n(nZe,"STRONG",{});var nda=s(u0e);AEr=r(nda,"funnel"),nda.forEach(t),LEr=r(nZe," \u2014 "),HK=n(nZe,"A",{href:!0});var sda=s(HK);yEr=r(sda,"FunnelForMultipleChoice"),sda.forEach(t),xEr=r(nZe," (Funnel Transformer model)"),nZe.forEach(t),$Er=i(ee),XE=n(ee,"LI",{});var sZe=s(XE);p0e=n(sZe,"STRONG",{});var lda=s(p0e);kEr=r(lda,"ibert"),lda.forEach(t),SEr=r(sZe," \u2014 "),JK=n(sZe,"A",{href:!0});var ida=s(JK);REr=r(ida,"IBertForMultipleChoice"),ida.forEach(t),PEr=r(sZe," (I-BERT model)"),sZe.forEach(t),BEr=i(ee),zE=n(ee,"LI",{});var lZe=s(zE);_0e=n(lZe,"STRONG",{});var dda=s(_0e);IEr=r(dda,"longformer"),dda.forEach(t),NEr=r(lZe," \u2014 "),YK=n(lZe,"A",{href:!0});var mda=s(YK);qEr=r(mda,"LongformerForMultipleChoice"),mda.forEach(t),jEr=r(lZe," (Longformer model)"),lZe.forEach(t),DEr=i(ee),QE=n(ee,"LI",{});var iZe=s(QE);b0e=n(iZe,"STRONG",{});var cda=s(b0e);GEr=r(cda,"luke"),cda.forEach(t),OEr=r(iZe," \u2014 "),ZK=n(iZe,"A",{href:!0});var fda=s(ZK);VEr=r(fda,"LukeForMultipleChoice"),fda.forEach(t),XEr=r(iZe," (LUKE model)"),iZe.forEach(t),zEr=i(ee),WE=n(ee,"LI",{});var dZe=s(WE);v0e=n(dZe,"STRONG",{});var gda=s(v0e);QEr=r(gda,"megatron-bert"),gda.forEach(t),WEr=r(dZe," \u2014 "),KK=n(dZe,"A",{href:!0});var hda=s(KK);UEr=r(hda,"MegatronBertForMultipleChoice"),hda.forEach(t),HEr=r(dZe," (Megatron-BERT model)"),dZe.forEach(t),JEr=i(ee),UE=n(ee,"LI",{});var mZe=s(UE);F0e=n(mZe,"STRONG",{});var uda=s(F0e);YEr=r(uda,"mobilebert"),uda.forEach(t),ZEr=r(mZe," \u2014 "),eee=n(mZe,"A",{href:!0});var pda=s(eee);KEr=r(pda,"MobileBertForMultipleChoice"),pda.forEach(t),e4r=r(mZe," (MobileBERT model)"),mZe.forEach(t),o4r=i(ee),HE=n(ee,"LI",{});var cZe=s(HE);T0e=n(cZe,"STRONG",{});var _da=s(T0e);r4r=r(_da,"mpnet"),_da.forEach(t),t4r=r(cZe," \u2014 "),oee=n(cZe,"A",{href:!0});var bda=s(oee);a4r=r(bda,"MPNetForMultipleChoice"),bda.forEach(t),n4r=r(cZe," (MPNet model)"),cZe.forEach(t),s4r=i(ee),JE=n(ee,"LI",{});var fZe=s(JE);M0e=n(fZe,"STRONG",{});var vda=s(M0e);l4r=r(vda,"nezha"),vda.forEach(t),i4r=r(fZe," \u2014 "),ree=n(fZe,"A",{href:!0});var Fda=s(ree);d4r=r(Fda,"NezhaForMultipleChoice"),Fda.forEach(t),m4r=r(fZe," (Nezha model)"),fZe.forEach(t),c4r=i(ee),YE=n(ee,"LI",{});var gZe=s(YE);E0e=n(gZe,"STRONG",{});var Tda=s(E0e);f4r=r(Tda,"nystromformer"),Tda.forEach(t),g4r=r(gZe," \u2014 "),tee=n(gZe,"A",{href:!0});var Mda=s(tee);h4r=r(Mda,"NystromformerForMultipleChoice"),Mda.forEach(t),u4r=r(gZe," (Nystr\xF6mformer model)"),gZe.forEach(t),p4r=i(ee),ZE=n(ee,"LI",{});var hZe=s(ZE);C0e=n(hZe,"STRONG",{});var Eda=s(C0e);_4r=r(Eda,"qdqbert"),Eda.forEach(t),b4r=r(hZe," \u2014 "),aee=n(hZe,"A",{href:!0});var Cda=s(aee);v4r=r(Cda,"QDQBertForMultipleChoice"),Cda.forEach(t),F4r=r(hZe," (QDQBert model)"),hZe.forEach(t),T4r=i(ee),KE=n(ee,"LI",{});var uZe=s(KE);w0e=n(uZe,"STRONG",{});var wda=s(w0e);M4r=r(wda,"rembert"),wda.forEach(t),E4r=r(uZe," \u2014 "),nee=n(uZe,"A",{href:!0});var Ada=s(nee);C4r=r(Ada,"RemBertForMultipleChoice"),Ada.forEach(t),w4r=r(uZe," (RemBERT model)"),uZe.forEach(t),A4r=i(ee),e4=n(ee,"LI",{});var pZe=s(e4);A0e=n(pZe,"STRONG",{});var Lda=s(A0e);L4r=r(Lda,"roberta"),Lda.forEach(t),y4r=r(pZe," \u2014 "),see=n(pZe,"A",{href:!0});var yda=s(see);x4r=r(yda,"RobertaForMultipleChoice"),yda.forEach(t),$4r=r(pZe," (RoBERTa model)"),pZe.forEach(t),k4r=i(ee),o4=n(ee,"LI",{});var _Ze=s(o4);L0e=n(_Ze,"STRONG",{});var xda=s(L0e);S4r=r(xda,"roc_bert"),xda.forEach(t),R4r=r(_Ze," \u2014 "),lee=n(_Ze,"A",{href:!0});var $da=s(lee);P4r=r($da,"RoCBertForMultipleChoice"),$da.forEach(t),B4r=r(_Ze," (RoCBert model)"),_Ze.forEach(t),I4r=i(ee),r4=n(ee,"LI",{});var bZe=s(r4);y0e=n(bZe,"STRONG",{});var kda=s(y0e);N4r=r(kda,"roformer"),kda.forEach(t),q4r=r(bZe," \u2014 "),iee=n(bZe,"A",{href:!0});var Sda=s(iee);j4r=r(Sda,"RoFormerForMultipleChoice"),Sda.forEach(t),D4r=r(bZe," (RoFormer model)"),bZe.forEach(t),G4r=i(ee),t4=n(ee,"LI",{});var vZe=s(t4);x0e=n(vZe,"STRONG",{});var Rda=s(x0e);O4r=r(Rda,"squeezebert"),Rda.forEach(t),V4r=r(vZe," \u2014 "),dee=n(vZe,"A",{href:!0});var Pda=s(dee);X4r=r(Pda,"SqueezeBertForMultipleChoice"),Pda.forEach(t),z4r=r(vZe," (SqueezeBERT model)"),vZe.forEach(t),Q4r=i(ee),a4=n(ee,"LI",{});var FZe=s(a4);$0e=n(FZe,"STRONG",{});var Bda=s($0e);W4r=r(Bda,"xlm"),Bda.forEach(t),U4r=r(FZe," \u2014 "),mee=n(FZe,"A",{href:!0});var Ida=s(mee);H4r=r(Ida,"XLMForMultipleChoice"),Ida.forEach(t),J4r=r(FZe," (XLM model)"),FZe.forEach(t),Y4r=i(ee),n4=n(ee,"LI",{});var TZe=s(n4);k0e=n(TZe,"STRONG",{});var Nda=s(k0e);Z4r=r(Nda,"xlm-roberta"),Nda.forEach(t),K4r=r(TZe," \u2014 "),cee=n(TZe,"A",{href:!0});var qda=s(cee);eCr=r(qda,"XLMRobertaForMultipleChoice"),qda.forEach(t),oCr=r(TZe," (XLM-RoBERTa model)"),TZe.forEach(t),rCr=i(ee),s4=n(ee,"LI",{});var MZe=s(s4);S0e=n(MZe,"STRONG",{});var jda=s(S0e);tCr=r(jda,"xlm-roberta-xl"),jda.forEach(t),aCr=r(MZe," \u2014 "),fee=n(MZe,"A",{href:!0});var Dda=s(fee);nCr=r(Dda,"XLMRobertaXLForMultipleChoice"),Dda.forEach(t),sCr=r(MZe," (XLM-RoBERTa-XL model)"),MZe.forEach(t),lCr=i(ee),l4=n(ee,"LI",{});var EZe=s(l4);R0e=n(EZe,"STRONG",{});var Gda=s(R0e);iCr=r(Gda,"xlnet"),Gda.forEach(t),dCr=r(EZe," \u2014 "),gee=n(EZe,"A",{href:!0});var Oda=s(gee);mCr=r(Oda,"XLNetForMultipleChoice"),Oda.forEach(t),cCr=r(EZe," (XLNet model)"),EZe.forEach(t),fCr=i(ee),i4=n(ee,"LI",{});var CZe=s(i4);P0e=n(CZe,"STRONG",{});var Vda=s(P0e);gCr=r(Vda,"yoso"),Vda.forEach(t),hCr=r(CZe," \u2014 "),hee=n(CZe,"A",{href:!0});var Xda=s(hee);uCr=r(Xda,"YosoForMultipleChoice"),Xda.forEach(t),pCr=r(CZe," (YOSO model)"),CZe.forEach(t),ee.forEach(t),_Cr=i(ja),d4=n(ja,"P",{});var wZe=s(d4);bCr=r(wZe,"The model is set in evaluation mode by default using "),B0e=n(wZe,"CODE",{});var zda=s(B0e);vCr=r(zda,"model.eval()"),zda.forEach(t),FCr=r(wZe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I0e=n(wZe,"CODE",{});var Qda=s(I0e);TCr=r(Qda,"model.train()"),Qda.forEach(t),wZe.forEach(t),MCr=i(ja),T(m4.$$.fragment,ja),ja.forEach(t),oi.forEach(t),Jio=i(c),fm=n(c,"H2",{class:!0});var vco=s(fm);c4=n(vco,"A",{id:!0,class:!0,href:!0});var Wda=s(c4);N0e=n(Wda,"SPAN",{});var Uda=s(N0e);T(zS.$$.fragment,Uda),Uda.forEach(t),Wda.forEach(t),ECr=i(vco),q0e=n(vco,"SPAN",{});var Hda=s(q0e);CCr=r(Hda,"AutoModelForNextSentencePrediction"),Hda.forEach(t),vco.forEach(t),Yio=i(c),Uo=n(c,"DIV",{class:!0});var ri=s(Uo);T(QS.$$.fragment,ri),wCr=i(ri),gm=n(ri,"P",{});var Zfe=s(gm);ACr=r(Zfe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uee=n(Zfe,"A",{href:!0});var Jda=s(uee);LCr=r(Jda,"from_pretrained()"),Jda.forEach(t),yCr=r(Zfe," class method or the "),pee=n(Zfe,"A",{href:!0});var Yda=s(pee);xCr=r(Yda,"from_config()"),Yda.forEach(t),$Cr=r(Zfe,` class
method.`),Zfe.forEach(t),kCr=i(ri),WS=n(ri,"P",{});var Fco=s(WS);SCr=r(Fco,"This class cannot be instantiated directly using "),j0e=n(Fco,"CODE",{});var Zda=s(j0e);RCr=r(Zda,"__init__()"),Zda.forEach(t),PCr=r(Fco," (throws an error)."),Fco.forEach(t),BCr=i(ri),Pt=n(ri,"DIV",{class:!0});var Rx=s(Pt);T(US.$$.fragment,Rx),ICr=i(Rx),D0e=n(Rx,"P",{});var Kda=s(D0e);NCr=r(Kda,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Kda.forEach(t),qCr=i(Rx),hm=n(Rx,"P",{});var Kfe=s(hm);jCr=r(Kfe,`Note:
Loading a model from its configuration file does `),G0e=n(Kfe,"STRONG",{});var ema=s(G0e);DCr=r(ema,"not"),ema.forEach(t),GCr=r(Kfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=n(Kfe,"A",{href:!0});var oma=s(_ee);OCr=r(oma,"from_pretrained()"),oma.forEach(t),VCr=r(Kfe," to load the model weights."),Kfe.forEach(t),XCr=i(Rx),T(f4.$$.fragment,Rx),Rx.forEach(t),zCr=i(ri),fo=n(ri,"DIV",{class:!0});var Da=s(fo);T(HS.$$.fragment,Da),QCr=i(Da),O0e=n(Da,"P",{});var rma=s(O0e);WCr=r(rma,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rma.forEach(t),UCr=i(Da),Tn=n(Da,"P",{});var Px=s(Tn);HCr=r(Px,"The model class to instantiate is selected based on the "),V0e=n(Px,"CODE",{});var tma=s(V0e);JCr=r(tma,"model_type"),tma.forEach(t),YCr=r(Px,` property of the config object (either
passed as an argument or loaded from `),X0e=n(Px,"CODE",{});var ama=s(X0e);ZCr=r(ama,"pretrained_model_name_or_path"),ama.forEach(t),KCr=r(Px,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z0e=n(Px,"CODE",{});var nma=s(z0e);e3r=r(nma,"pretrained_model_name_or_path"),nma.forEach(t),o3r=r(Px,":"),Px.forEach(t),r3r=i(Da),Ye=n(Da,"UL",{});var vt=s(Ye);g4=n(vt,"LI",{});var AZe=s(g4);Q0e=n(AZe,"STRONG",{});var sma=s(Q0e);t3r=r(sma,"bert"),sma.forEach(t),a3r=r(AZe," \u2014 "),bee=n(AZe,"A",{href:!0});var lma=s(bee);n3r=r(lma,"BertForNextSentencePrediction"),lma.forEach(t),s3r=r(AZe," (BERT model)"),AZe.forEach(t),l3r=i(vt),h4=n(vt,"LI",{});var LZe=s(h4);W0e=n(LZe,"STRONG",{});var ima=s(W0e);i3r=r(ima,"ernie"),ima.forEach(t),d3r=r(LZe," \u2014 "),vee=n(LZe,"A",{href:!0});var dma=s(vee);m3r=r(dma,"ErnieForNextSentencePrediction"),dma.forEach(t),c3r=r(LZe," (ERNIE model)"),LZe.forEach(t),f3r=i(vt),u4=n(vt,"LI",{});var yZe=s(u4);U0e=n(yZe,"STRONG",{});var mma=s(U0e);g3r=r(mma,"fnet"),mma.forEach(t),h3r=r(yZe," \u2014 "),Fee=n(yZe,"A",{href:!0});var cma=s(Fee);u3r=r(cma,"FNetForNextSentencePrediction"),cma.forEach(t),p3r=r(yZe," (FNet model)"),yZe.forEach(t),_3r=i(vt),p4=n(vt,"LI",{});var xZe=s(p4);H0e=n(xZe,"STRONG",{});var fma=s(H0e);b3r=r(fma,"megatron-bert"),fma.forEach(t),v3r=r(xZe," \u2014 "),Tee=n(xZe,"A",{href:!0});var gma=s(Tee);F3r=r(gma,"MegatronBertForNextSentencePrediction"),gma.forEach(t),T3r=r(xZe," (Megatron-BERT model)"),xZe.forEach(t),M3r=i(vt),_4=n(vt,"LI",{});var $Ze=s(_4);J0e=n($Ze,"STRONG",{});var hma=s(J0e);E3r=r(hma,"mobilebert"),hma.forEach(t),C3r=r($Ze," \u2014 "),Mee=n($Ze,"A",{href:!0});var uma=s(Mee);w3r=r(uma,"MobileBertForNextSentencePrediction"),uma.forEach(t),A3r=r($Ze," (MobileBERT model)"),$Ze.forEach(t),L3r=i(vt),b4=n(vt,"LI",{});var kZe=s(b4);Y0e=n(kZe,"STRONG",{});var pma=s(Y0e);y3r=r(pma,"nezha"),pma.forEach(t),x3r=r(kZe," \u2014 "),Eee=n(kZe,"A",{href:!0});var _ma=s(Eee);$3r=r(_ma,"NezhaForNextSentencePrediction"),_ma.forEach(t),k3r=r(kZe," (Nezha model)"),kZe.forEach(t),S3r=i(vt),v4=n(vt,"LI",{});var SZe=s(v4);Z0e=n(SZe,"STRONG",{});var bma=s(Z0e);R3r=r(bma,"qdqbert"),bma.forEach(t),P3r=r(SZe," \u2014 "),Cee=n(SZe,"A",{href:!0});var vma=s(Cee);B3r=r(vma,"QDQBertForNextSentencePrediction"),vma.forEach(t),I3r=r(SZe," (QDQBert model)"),SZe.forEach(t),vt.forEach(t),N3r=i(Da),F4=n(Da,"P",{});var RZe=s(F4);q3r=r(RZe,"The model is set in evaluation mode by default using "),K0e=n(RZe,"CODE",{});var Fma=s(K0e);j3r=r(Fma,"model.eval()"),Fma.forEach(t),D3r=r(RZe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ewe=n(RZe,"CODE",{});var Tma=s(ewe);G3r=r(Tma,"model.train()"),Tma.forEach(t),RZe.forEach(t),O3r=i(Da),T(T4.$$.fragment,Da),Da.forEach(t),ri.forEach(t),Zio=i(c),um=n(c,"H2",{class:!0});var Tco=s(um);M4=n(Tco,"A",{id:!0,class:!0,href:!0});var Mma=s(M4);owe=n(Mma,"SPAN",{});var Ema=s(owe);T(JS.$$.fragment,Ema),Ema.forEach(t),Mma.forEach(t),V3r=i(Tco),rwe=n(Tco,"SPAN",{});var Cma=s(rwe);X3r=r(Cma,"AutoModelForTokenClassification"),Cma.forEach(t),Tco.forEach(t),Kio=i(c),Ho=n(c,"DIV",{class:!0});var ti=s(Ho);T(YS.$$.fragment,ti),z3r=i(ti),pm=n(ti,"P",{});var ege=s(pm);Q3r=r(ege,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wee=n(ege,"A",{href:!0});var wma=s(wee);W3r=r(wma,"from_pretrained()"),wma.forEach(t),U3r=r(ege," class method or the "),Aee=n(ege,"A",{href:!0});var Ama=s(Aee);H3r=r(Ama,"from_config()"),Ama.forEach(t),J3r=r(ege,` class
method.`),ege.forEach(t),Y3r=i(ti),ZS=n(ti,"P",{});var Mco=s(ZS);Z3r=r(Mco,"This class cannot be instantiated directly using "),twe=n(Mco,"CODE",{});var Lma=s(twe);K3r=r(Lma,"__init__()"),Lma.forEach(t),e5r=r(Mco," (throws an error)."),Mco.forEach(t),o5r=i(ti),Bt=n(ti,"DIV",{class:!0});var Bx=s(Bt);T(KS.$$.fragment,Bx),r5r=i(Bx),awe=n(Bx,"P",{});var yma=s(awe);t5r=r(yma,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yma.forEach(t),a5r=i(Bx),_m=n(Bx,"P",{});var oge=s(_m);n5r=r(oge,`Note:
Loading a model from its configuration file does `),nwe=n(oge,"STRONG",{});var xma=s(nwe);s5r=r(xma,"not"),xma.forEach(t),l5r=r(oge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=n(oge,"A",{href:!0});var $ma=s(Lee);i5r=r($ma,"from_pretrained()"),$ma.forEach(t),d5r=r(oge," to load the model weights."),oge.forEach(t),m5r=i(Bx),T(E4.$$.fragment,Bx),Bx.forEach(t),c5r=i(ti),go=n(ti,"DIV",{class:!0});var Ga=s(go);T(eR.$$.fragment,Ga),f5r=i(Ga),swe=n(Ga,"P",{});var kma=s(swe);g5r=r(kma,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kma.forEach(t),h5r=i(Ga),Mn=n(Ga,"P",{});var Ix=s(Mn);u5r=r(Ix,"The model class to instantiate is selected based on the "),lwe=n(Ix,"CODE",{});var Sma=s(lwe);p5r=r(Sma,"model_type"),Sma.forEach(t),_5r=r(Ix,` property of the config object (either
passed as an argument or loaded from `),iwe=n(Ix,"CODE",{});var Rma=s(iwe);b5r=r(Rma,"pretrained_model_name_or_path"),Rma.forEach(t),v5r=r(Ix,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dwe=n(Ix,"CODE",{});var Pma=s(dwe);F5r=r(Pma,"pretrained_model_name_or_path"),Pma.forEach(t),T5r=r(Ix,":"),Ix.forEach(t),M5r=i(Ga),U=n(Ga,"UL",{});var J=s(U);C4=n(J,"LI",{});var PZe=s(C4);mwe=n(PZe,"STRONG",{});var Bma=s(mwe);E5r=r(Bma,"albert"),Bma.forEach(t),C5r=r(PZe," \u2014 "),yee=n(PZe,"A",{href:!0});var Ima=s(yee);w5r=r(Ima,"AlbertForTokenClassification"),Ima.forEach(t),A5r=r(PZe," (ALBERT model)"),PZe.forEach(t),L5r=i(J),w4=n(J,"LI",{});var BZe=s(w4);cwe=n(BZe,"STRONG",{});var Nma=s(cwe);y5r=r(Nma,"bert"),Nma.forEach(t),x5r=r(BZe," \u2014 "),xee=n(BZe,"A",{href:!0});var qma=s(xee);$5r=r(qma,"BertForTokenClassification"),qma.forEach(t),k5r=r(BZe," (BERT model)"),BZe.forEach(t),S5r=i(J),A4=n(J,"LI",{});var IZe=s(A4);fwe=n(IZe,"STRONG",{});var jma=s(fwe);R5r=r(jma,"big_bird"),jma.forEach(t),P5r=r(IZe," \u2014 "),$ee=n(IZe,"A",{href:!0});var Dma=s($ee);B5r=r(Dma,"BigBirdForTokenClassification"),Dma.forEach(t),I5r=r(IZe," (BigBird model)"),IZe.forEach(t),N5r=i(J),L4=n(J,"LI",{});var NZe=s(L4);gwe=n(NZe,"STRONG",{});var Gma=s(gwe);q5r=r(Gma,"bloom"),Gma.forEach(t),j5r=r(NZe," \u2014 "),kee=n(NZe,"A",{href:!0});var Oma=s(kee);D5r=r(Oma,"BloomForTokenClassification"),Oma.forEach(t),G5r=r(NZe," (BLOOM model)"),NZe.forEach(t),O5r=i(J),y4=n(J,"LI",{});var qZe=s(y4);hwe=n(qZe,"STRONG",{});var Vma=s(hwe);V5r=r(Vma,"camembert"),Vma.forEach(t),X5r=r(qZe," \u2014 "),See=n(qZe,"A",{href:!0});var Xma=s(See);z5r=r(Xma,"CamembertForTokenClassification"),Xma.forEach(t),Q5r=r(qZe," (CamemBERT model)"),qZe.forEach(t),W5r=i(J),x4=n(J,"LI",{});var jZe=s(x4);uwe=n(jZe,"STRONG",{});var zma=s(uwe);U5r=r(zma,"canine"),zma.forEach(t),H5r=r(jZe," \u2014 "),Ree=n(jZe,"A",{href:!0});var Qma=s(Ree);J5r=r(Qma,"CanineForTokenClassification"),Qma.forEach(t),Y5r=r(jZe," (CANINE model)"),jZe.forEach(t),Z5r=i(J),$4=n(J,"LI",{});var DZe=s($4);pwe=n(DZe,"STRONG",{});var Wma=s(pwe);K5r=r(Wma,"convbert"),Wma.forEach(t),e0r=r(DZe," \u2014 "),Pee=n(DZe,"A",{href:!0});var Uma=s(Pee);o0r=r(Uma,"ConvBertForTokenClassification"),Uma.forEach(t),r0r=r(DZe," (ConvBERT model)"),DZe.forEach(t),t0r=i(J),k4=n(J,"LI",{});var GZe=s(k4);_we=n(GZe,"STRONG",{});var Hma=s(_we);a0r=r(Hma,"data2vec-text"),Hma.forEach(t),n0r=r(GZe," \u2014 "),Bee=n(GZe,"A",{href:!0});var Jma=s(Bee);s0r=r(Jma,"Data2VecTextForTokenClassification"),Jma.forEach(t),l0r=r(GZe," (Data2VecText model)"),GZe.forEach(t),i0r=i(J),S4=n(J,"LI",{});var OZe=s(S4);bwe=n(OZe,"STRONG",{});var Yma=s(bwe);d0r=r(Yma,"deberta"),Yma.forEach(t),m0r=r(OZe," \u2014 "),Iee=n(OZe,"A",{href:!0});var Zma=s(Iee);c0r=r(Zma,"DebertaForTokenClassification"),Zma.forEach(t),f0r=r(OZe," (DeBERTa model)"),OZe.forEach(t),g0r=i(J),R4=n(J,"LI",{});var VZe=s(R4);vwe=n(VZe,"STRONG",{});var Kma=s(vwe);h0r=r(Kma,"deberta-v2"),Kma.forEach(t),u0r=r(VZe," \u2014 "),Nee=n(VZe,"A",{href:!0});var eca=s(Nee);p0r=r(eca,"DebertaV2ForTokenClassification"),eca.forEach(t),_0r=r(VZe," (DeBERTa-v2 model)"),VZe.forEach(t),b0r=i(J),P4=n(J,"LI",{});var XZe=s(P4);Fwe=n(XZe,"STRONG",{});var oca=s(Fwe);v0r=r(oca,"distilbert"),oca.forEach(t),F0r=r(XZe," \u2014 "),qee=n(XZe,"A",{href:!0});var rca=s(qee);T0r=r(rca,"DistilBertForTokenClassification"),rca.forEach(t),M0r=r(XZe," (DistilBERT model)"),XZe.forEach(t),E0r=i(J),B4=n(J,"LI",{});var zZe=s(B4);Twe=n(zZe,"STRONG",{});var tca=s(Twe);C0r=r(tca,"electra"),tca.forEach(t),w0r=r(zZe," \u2014 "),jee=n(zZe,"A",{href:!0});var aca=s(jee);A0r=r(aca,"ElectraForTokenClassification"),aca.forEach(t),L0r=r(zZe," (ELECTRA model)"),zZe.forEach(t),y0r=i(J),I4=n(J,"LI",{});var QZe=s(I4);Mwe=n(QZe,"STRONG",{});var nca=s(Mwe);x0r=r(nca,"ernie"),nca.forEach(t),$0r=r(QZe," \u2014 "),Dee=n(QZe,"A",{href:!0});var sca=s(Dee);k0r=r(sca,"ErnieForTokenClassification"),sca.forEach(t),S0r=r(QZe," (ERNIE model)"),QZe.forEach(t),R0r=i(J),N4=n(J,"LI",{});var WZe=s(N4);Ewe=n(WZe,"STRONG",{});var lca=s(Ewe);P0r=r(lca,"esm"),lca.forEach(t),B0r=r(WZe," \u2014 "),Gee=n(WZe,"A",{href:!0});var ica=s(Gee);I0r=r(ica,"EsmForTokenClassification"),ica.forEach(t),N0r=r(WZe," (ESM model)"),WZe.forEach(t),q0r=i(J),q4=n(J,"LI",{});var UZe=s(q4);Cwe=n(UZe,"STRONG",{});var dca=s(Cwe);j0r=r(dca,"flaubert"),dca.forEach(t),D0r=r(UZe," \u2014 "),Oee=n(UZe,"A",{href:!0});var mca=s(Oee);G0r=r(mca,"FlaubertForTokenClassification"),mca.forEach(t),O0r=r(UZe," (FlauBERT model)"),UZe.forEach(t),V0r=i(J),j4=n(J,"LI",{});var HZe=s(j4);wwe=n(HZe,"STRONG",{});var cca=s(wwe);X0r=r(cca,"fnet"),cca.forEach(t),z0r=r(HZe," \u2014 "),Vee=n(HZe,"A",{href:!0});var fca=s(Vee);Q0r=r(fca,"FNetForTokenClassification"),fca.forEach(t),W0r=r(HZe," (FNet model)"),HZe.forEach(t),U0r=i(J),D4=n(J,"LI",{});var JZe=s(D4);Awe=n(JZe,"STRONG",{});var gca=s(Awe);H0r=r(gca,"funnel"),gca.forEach(t),J0r=r(JZe," \u2014 "),Xee=n(JZe,"A",{href:!0});var hca=s(Xee);Y0r=r(hca,"FunnelForTokenClassification"),hca.forEach(t),Z0r=r(JZe," (Funnel Transformer model)"),JZe.forEach(t),K0r=i(J),G4=n(J,"LI",{});var YZe=s(G4);Lwe=n(YZe,"STRONG",{});var uca=s(Lwe);ewr=r(uca,"gpt2"),uca.forEach(t),owr=r(YZe," \u2014 "),zee=n(YZe,"A",{href:!0});var pca=s(zee);rwr=r(pca,"GPT2ForTokenClassification"),pca.forEach(t),twr=r(YZe," (OpenAI GPT-2 model)"),YZe.forEach(t),awr=i(J),O4=n(J,"LI",{});var ZZe=s(O4);ywe=n(ZZe,"STRONG",{});var _ca=s(ywe);nwr=r(_ca,"ibert"),_ca.forEach(t),swr=r(ZZe," \u2014 "),Qee=n(ZZe,"A",{href:!0});var bca=s(Qee);lwr=r(bca,"IBertForTokenClassification"),bca.forEach(t),iwr=r(ZZe," (I-BERT model)"),ZZe.forEach(t),dwr=i(J),V4=n(J,"LI",{});var KZe=s(V4);xwe=n(KZe,"STRONG",{});var vca=s(xwe);mwr=r(vca,"layoutlm"),vca.forEach(t),cwr=r(KZe," \u2014 "),Wee=n(KZe,"A",{href:!0});var Fca=s(Wee);fwr=r(Fca,"LayoutLMForTokenClassification"),Fca.forEach(t),gwr=r(KZe," (LayoutLM model)"),KZe.forEach(t),hwr=i(J),X4=n(J,"LI",{});var eKe=s(X4);$we=n(eKe,"STRONG",{});var Tca=s($we);uwr=r(Tca,"layoutlmv2"),Tca.forEach(t),pwr=r(eKe," \u2014 "),Uee=n(eKe,"A",{href:!0});var Mca=s(Uee);_wr=r(Mca,"LayoutLMv2ForTokenClassification"),Mca.forEach(t),bwr=r(eKe," (LayoutLMv2 model)"),eKe.forEach(t),vwr=i(J),z4=n(J,"LI",{});var oKe=s(z4);kwe=n(oKe,"STRONG",{});var Eca=s(kwe);Fwr=r(Eca,"layoutlmv3"),Eca.forEach(t),Twr=r(oKe," \u2014 "),Hee=n(oKe,"A",{href:!0});var Cca=s(Hee);Mwr=r(Cca,"LayoutLMv3ForTokenClassification"),Cca.forEach(t),Ewr=r(oKe," (LayoutLMv3 model)"),oKe.forEach(t),Cwr=i(J),Q4=n(J,"LI",{});var rKe=s(Q4);Swe=n(rKe,"STRONG",{});var wca=s(Swe);wwr=r(wca,"lilt"),wca.forEach(t),Awr=r(rKe," \u2014 "),Jee=n(rKe,"A",{href:!0});var Aca=s(Jee);Lwr=r(Aca,"LiltForTokenClassification"),Aca.forEach(t),ywr=r(rKe," (LiLT model)"),rKe.forEach(t),xwr=i(J),W4=n(J,"LI",{});var tKe=s(W4);Rwe=n(tKe,"STRONG",{});var Lca=s(Rwe);$wr=r(Lca,"longformer"),Lca.forEach(t),kwr=r(tKe," \u2014 "),Yee=n(tKe,"A",{href:!0});var yca=s(Yee);Swr=r(yca,"LongformerForTokenClassification"),yca.forEach(t),Rwr=r(tKe," (Longformer model)"),tKe.forEach(t),Pwr=i(J),U4=n(J,"LI",{});var aKe=s(U4);Pwe=n(aKe,"STRONG",{});var xca=s(Pwe);Bwr=r(xca,"luke"),xca.forEach(t),Iwr=r(aKe," \u2014 "),Zee=n(aKe,"A",{href:!0});var $ca=s(Zee);Nwr=r($ca,"LukeForTokenClassification"),$ca.forEach(t),qwr=r(aKe," (LUKE model)"),aKe.forEach(t),jwr=i(J),H4=n(J,"LI",{});var nKe=s(H4);Bwe=n(nKe,"STRONG",{});var kca=s(Bwe);Dwr=r(kca,"markuplm"),kca.forEach(t),Gwr=r(nKe," \u2014 "),Kee=n(nKe,"A",{href:!0});var Sca=s(Kee);Owr=r(Sca,"MarkupLMForTokenClassification"),Sca.forEach(t),Vwr=r(nKe," (MarkupLM model)"),nKe.forEach(t),Xwr=i(J),J4=n(J,"LI",{});var sKe=s(J4);Iwe=n(sKe,"STRONG",{});var Rca=s(Iwe);zwr=r(Rca,"megatron-bert"),Rca.forEach(t),Qwr=r(sKe," \u2014 "),eoe=n(sKe,"A",{href:!0});var Pca=s(eoe);Wwr=r(Pca,"MegatronBertForTokenClassification"),Pca.forEach(t),Uwr=r(sKe," (Megatron-BERT model)"),sKe.forEach(t),Hwr=i(J),Y4=n(J,"LI",{});var lKe=s(Y4);Nwe=n(lKe,"STRONG",{});var Bca=s(Nwe);Jwr=r(Bca,"mobilebert"),Bca.forEach(t),Ywr=r(lKe," \u2014 "),ooe=n(lKe,"A",{href:!0});var Ica=s(ooe);Zwr=r(Ica,"MobileBertForTokenClassification"),Ica.forEach(t),Kwr=r(lKe," (MobileBERT model)"),lKe.forEach(t),eAr=i(J),Z4=n(J,"LI",{});var iKe=s(Z4);qwe=n(iKe,"STRONG",{});var Nca=s(qwe);oAr=r(Nca,"mpnet"),Nca.forEach(t),rAr=r(iKe," \u2014 "),roe=n(iKe,"A",{href:!0});var qca=s(roe);tAr=r(qca,"MPNetForTokenClassification"),qca.forEach(t),aAr=r(iKe," (MPNet model)"),iKe.forEach(t),nAr=i(J),K4=n(J,"LI",{});var dKe=s(K4);jwe=n(dKe,"STRONG",{});var jca=s(jwe);sAr=r(jca,"nezha"),jca.forEach(t),lAr=r(dKe," \u2014 "),toe=n(dKe,"A",{href:!0});var Dca=s(toe);iAr=r(Dca,"NezhaForTokenClassification"),Dca.forEach(t),dAr=r(dKe," (Nezha model)"),dKe.forEach(t),mAr=i(J),eC=n(J,"LI",{});var mKe=s(eC);Dwe=n(mKe,"STRONG",{});var Gca=s(Dwe);cAr=r(Gca,"nystromformer"),Gca.forEach(t),fAr=r(mKe," \u2014 "),aoe=n(mKe,"A",{href:!0});var Oca=s(aoe);gAr=r(Oca,"NystromformerForTokenClassification"),Oca.forEach(t),hAr=r(mKe," (Nystr\xF6mformer model)"),mKe.forEach(t),uAr=i(J),oC=n(J,"LI",{});var cKe=s(oC);Gwe=n(cKe,"STRONG",{});var Vca=s(Gwe);pAr=r(Vca,"qdqbert"),Vca.forEach(t),_Ar=r(cKe," \u2014 "),noe=n(cKe,"A",{href:!0});var Xca=s(noe);bAr=r(Xca,"QDQBertForTokenClassification"),Xca.forEach(t),vAr=r(cKe," (QDQBert model)"),cKe.forEach(t),FAr=i(J),rC=n(J,"LI",{});var fKe=s(rC);Owe=n(fKe,"STRONG",{});var zca=s(Owe);TAr=r(zca,"rembert"),zca.forEach(t),MAr=r(fKe," \u2014 "),soe=n(fKe,"A",{href:!0});var Qca=s(soe);EAr=r(Qca,"RemBertForTokenClassification"),Qca.forEach(t),CAr=r(fKe," (RemBERT model)"),fKe.forEach(t),wAr=i(J),tC=n(J,"LI",{});var gKe=s(tC);Vwe=n(gKe,"STRONG",{});var Wca=s(Vwe);AAr=r(Wca,"roberta"),Wca.forEach(t),LAr=r(gKe," \u2014 "),loe=n(gKe,"A",{href:!0});var Uca=s(loe);yAr=r(Uca,"RobertaForTokenClassification"),Uca.forEach(t),xAr=r(gKe," (RoBERTa model)"),gKe.forEach(t),$Ar=i(J),aC=n(J,"LI",{});var hKe=s(aC);Xwe=n(hKe,"STRONG",{});var Hca=s(Xwe);kAr=r(Hca,"roc_bert"),Hca.forEach(t),SAr=r(hKe," \u2014 "),ioe=n(hKe,"A",{href:!0});var Jca=s(ioe);RAr=r(Jca,"RoCBertForTokenClassification"),Jca.forEach(t),PAr=r(hKe," (RoCBert model)"),hKe.forEach(t),BAr=i(J),nC=n(J,"LI",{});var uKe=s(nC);zwe=n(uKe,"STRONG",{});var Yca=s(zwe);IAr=r(Yca,"roformer"),Yca.forEach(t),NAr=r(uKe," \u2014 "),doe=n(uKe,"A",{href:!0});var Zca=s(doe);qAr=r(Zca,"RoFormerForTokenClassification"),Zca.forEach(t),jAr=r(uKe," (RoFormer model)"),uKe.forEach(t),DAr=i(J),sC=n(J,"LI",{});var pKe=s(sC);Qwe=n(pKe,"STRONG",{});var Kca=s(Qwe);GAr=r(Kca,"squeezebert"),Kca.forEach(t),OAr=r(pKe," \u2014 "),moe=n(pKe,"A",{href:!0});var efa=s(moe);VAr=r(efa,"SqueezeBertForTokenClassification"),efa.forEach(t),XAr=r(pKe," (SqueezeBERT model)"),pKe.forEach(t),zAr=i(J),lC=n(J,"LI",{});var _Ke=s(lC);Wwe=n(_Ke,"STRONG",{});var ofa=s(Wwe);QAr=r(ofa,"xlm"),ofa.forEach(t),WAr=r(_Ke," \u2014 "),coe=n(_Ke,"A",{href:!0});var rfa=s(coe);UAr=r(rfa,"XLMForTokenClassification"),rfa.forEach(t),HAr=r(_Ke," (XLM model)"),_Ke.forEach(t),JAr=i(J),iC=n(J,"LI",{});var bKe=s(iC);Uwe=n(bKe,"STRONG",{});var tfa=s(Uwe);YAr=r(tfa,"xlm-roberta"),tfa.forEach(t),ZAr=r(bKe," \u2014 "),foe=n(bKe,"A",{href:!0});var afa=s(foe);KAr=r(afa,"XLMRobertaForTokenClassification"),afa.forEach(t),e6r=r(bKe," (XLM-RoBERTa model)"),bKe.forEach(t),o6r=i(J),dC=n(J,"LI",{});var vKe=s(dC);Hwe=n(vKe,"STRONG",{});var nfa=s(Hwe);r6r=r(nfa,"xlm-roberta-xl"),nfa.forEach(t),t6r=r(vKe," \u2014 "),goe=n(vKe,"A",{href:!0});var sfa=s(goe);a6r=r(sfa,"XLMRobertaXLForTokenClassification"),sfa.forEach(t),n6r=r(vKe," (XLM-RoBERTa-XL model)"),vKe.forEach(t),s6r=i(J),mC=n(J,"LI",{});var FKe=s(mC);Jwe=n(FKe,"STRONG",{});var lfa=s(Jwe);l6r=r(lfa,"xlnet"),lfa.forEach(t),i6r=r(FKe," \u2014 "),hoe=n(FKe,"A",{href:!0});var ifa=s(hoe);d6r=r(ifa,"XLNetForTokenClassification"),ifa.forEach(t),m6r=r(FKe," (XLNet model)"),FKe.forEach(t),c6r=i(J),cC=n(J,"LI",{});var TKe=s(cC);Ywe=n(TKe,"STRONG",{});var dfa=s(Ywe);f6r=r(dfa,"yoso"),dfa.forEach(t),g6r=r(TKe," \u2014 "),uoe=n(TKe,"A",{href:!0});var mfa=s(uoe);h6r=r(mfa,"YosoForTokenClassification"),mfa.forEach(t),u6r=r(TKe," (YOSO model)"),TKe.forEach(t),J.forEach(t),p6r=i(Ga),fC=n(Ga,"P",{});var MKe=s(fC);_6r=r(MKe,"The model is set in evaluation mode by default using "),Zwe=n(MKe,"CODE",{});var cfa=s(Zwe);b6r=r(cfa,"model.eval()"),cfa.forEach(t),v6r=r(MKe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kwe=n(MKe,"CODE",{});var ffa=s(Kwe);F6r=r(ffa,"model.train()"),ffa.forEach(t),MKe.forEach(t),T6r=i(Ga),T(gC.$$.fragment,Ga),Ga.forEach(t),ti.forEach(t),edo=i(c),bm=n(c,"H2",{class:!0});var Eco=s(bm);hC=n(Eco,"A",{id:!0,class:!0,href:!0});var gfa=s(hC);eAe=n(gfa,"SPAN",{});var hfa=s(eAe);T(oR.$$.fragment,hfa),hfa.forEach(t),gfa.forEach(t),M6r=i(Eco),oAe=n(Eco,"SPAN",{});var ufa=s(oAe);E6r=r(ufa,"AutoModelForQuestionAnswering"),ufa.forEach(t),Eco.forEach(t),odo=i(c),Jo=n(c,"DIV",{class:!0});var ai=s(Jo);T(rR.$$.fragment,ai),C6r=i(ai),vm=n(ai,"P",{});var rge=s(vm);w6r=r(rge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),poe=n(rge,"A",{href:!0});var pfa=s(poe);A6r=r(pfa,"from_pretrained()"),pfa.forEach(t),L6r=r(rge," class method or the "),_oe=n(rge,"A",{href:!0});var _fa=s(_oe);y6r=r(_fa,"from_config()"),_fa.forEach(t),x6r=r(rge,` class
method.`),rge.forEach(t),$6r=i(ai),tR=n(ai,"P",{});var Cco=s(tR);k6r=r(Cco,"This class cannot be instantiated directly using "),rAe=n(Cco,"CODE",{});var bfa=s(rAe);S6r=r(bfa,"__init__()"),bfa.forEach(t),R6r=r(Cco," (throws an error)."),Cco.forEach(t),P6r=i(ai),It=n(ai,"DIV",{class:!0});var Nx=s(It);T(aR.$$.fragment,Nx),B6r=i(Nx),tAe=n(Nx,"P",{});var vfa=s(tAe);I6r=r(vfa,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vfa.forEach(t),N6r=i(Nx),Fm=n(Nx,"P",{});var tge=s(Fm);q6r=r(tge,`Note:
Loading a model from its configuration file does `),aAe=n(tge,"STRONG",{});var Ffa=s(aAe);j6r=r(Ffa,"not"),Ffa.forEach(t),D6r=r(tge,` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=n(tge,"A",{href:!0});var Tfa=s(boe);G6r=r(Tfa,"from_pretrained()"),Tfa.forEach(t),O6r=r(tge," to load the model weights."),tge.forEach(t),V6r=i(Nx),T(uC.$$.fragment,Nx),Nx.forEach(t),X6r=i(ai),ho=n(ai,"DIV",{class:!0});var Oa=s(ho);T(nR.$$.fragment,Oa),z6r=i(Oa),nAe=n(Oa,"P",{});var Mfa=s(nAe);Q6r=r(Mfa,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Mfa.forEach(t),W6r=i(Oa),En=n(Oa,"P",{});var qx=s(En);U6r=r(qx,"The model class to instantiate is selected based on the "),sAe=n(qx,"CODE",{});var Efa=s(sAe);H6r=r(Efa,"model_type"),Efa.forEach(t),J6r=r(qx,` property of the config object (either
passed as an argument or loaded from `),lAe=n(qx,"CODE",{});var Cfa=s(lAe);Y6r=r(Cfa,"pretrained_model_name_or_path"),Cfa.forEach(t),Z6r=r(qx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iAe=n(qx,"CODE",{});var wfa=s(iAe);K6r=r(wfa,"pretrained_model_name_or_path"),wfa.forEach(t),e7r=r(qx,":"),qx.forEach(t),o7r=i(Oa),O=n(Oa,"UL",{});var X=s(O);pC=n(X,"LI",{});var EKe=s(pC);dAe=n(EKe,"STRONG",{});var Afa=s(dAe);r7r=r(Afa,"albert"),Afa.forEach(t),t7r=r(EKe," \u2014 "),voe=n(EKe,"A",{href:!0});var Lfa=s(voe);a7r=r(Lfa,"AlbertForQuestionAnswering"),Lfa.forEach(t),n7r=r(EKe," (ALBERT model)"),EKe.forEach(t),s7r=i(X),_C=n(X,"LI",{});var CKe=s(_C);mAe=n(CKe,"STRONG",{});var yfa=s(mAe);l7r=r(yfa,"bart"),yfa.forEach(t),i7r=r(CKe," \u2014 "),Foe=n(CKe,"A",{href:!0});var xfa=s(Foe);d7r=r(xfa,"BartForQuestionAnswering"),xfa.forEach(t),m7r=r(CKe," (BART model)"),CKe.forEach(t),c7r=i(X),bC=n(X,"LI",{});var wKe=s(bC);cAe=n(wKe,"STRONG",{});var $fa=s(cAe);f7r=r($fa,"bert"),$fa.forEach(t),g7r=r(wKe," \u2014 "),Toe=n(wKe,"A",{href:!0});var kfa=s(Toe);h7r=r(kfa,"BertForQuestionAnswering"),kfa.forEach(t),u7r=r(wKe," (BERT model)"),wKe.forEach(t),p7r=i(X),vC=n(X,"LI",{});var AKe=s(vC);fAe=n(AKe,"STRONG",{});var Sfa=s(fAe);_7r=r(Sfa,"big_bird"),Sfa.forEach(t),b7r=r(AKe," \u2014 "),Moe=n(AKe,"A",{href:!0});var Rfa=s(Moe);v7r=r(Rfa,"BigBirdForQuestionAnswering"),Rfa.forEach(t),F7r=r(AKe," (BigBird model)"),AKe.forEach(t),T7r=i(X),FC=n(X,"LI",{});var LKe=s(FC);gAe=n(LKe,"STRONG",{});var Pfa=s(gAe);M7r=r(Pfa,"bigbird_pegasus"),Pfa.forEach(t),E7r=r(LKe," \u2014 "),Eoe=n(LKe,"A",{href:!0});var Bfa=s(Eoe);C7r=r(Bfa,"BigBirdPegasusForQuestionAnswering"),Bfa.forEach(t),w7r=r(LKe," (BigBird-Pegasus model)"),LKe.forEach(t),A7r=i(X),TC=n(X,"LI",{});var yKe=s(TC);hAe=n(yKe,"STRONG",{});var Ifa=s(hAe);L7r=r(Ifa,"bloom"),Ifa.forEach(t),y7r=r(yKe," \u2014 "),Coe=n(yKe,"A",{href:!0});var Nfa=s(Coe);x7r=r(Nfa,"BloomForQuestionAnswering"),Nfa.forEach(t),$7r=r(yKe," (BLOOM model)"),yKe.forEach(t),k7r=i(X),MC=n(X,"LI",{});var xKe=s(MC);uAe=n(xKe,"STRONG",{});var qfa=s(uAe);S7r=r(qfa,"camembert"),qfa.forEach(t),R7r=r(xKe," \u2014 "),woe=n(xKe,"A",{href:!0});var jfa=s(woe);P7r=r(jfa,"CamembertForQuestionAnswering"),jfa.forEach(t),B7r=r(xKe," (CamemBERT model)"),xKe.forEach(t),I7r=i(X),EC=n(X,"LI",{});var $Ke=s(EC);pAe=n($Ke,"STRONG",{});var Dfa=s(pAe);N7r=r(Dfa,"canine"),Dfa.forEach(t),q7r=r($Ke," \u2014 "),Aoe=n($Ke,"A",{href:!0});var Gfa=s(Aoe);j7r=r(Gfa,"CanineForQuestionAnswering"),Gfa.forEach(t),D7r=r($Ke," (CANINE model)"),$Ke.forEach(t),G7r=i(X),CC=n(X,"LI",{});var kKe=s(CC);_Ae=n(kKe,"STRONG",{});var Ofa=s(_Ae);O7r=r(Ofa,"convbert"),Ofa.forEach(t),V7r=r(kKe," \u2014 "),Loe=n(kKe,"A",{href:!0});var Vfa=s(Loe);X7r=r(Vfa,"ConvBertForQuestionAnswering"),Vfa.forEach(t),z7r=r(kKe," (ConvBERT model)"),kKe.forEach(t),Q7r=i(X),wC=n(X,"LI",{});var SKe=s(wC);bAe=n(SKe,"STRONG",{});var Xfa=s(bAe);W7r=r(Xfa,"data2vec-text"),Xfa.forEach(t),U7r=r(SKe," \u2014 "),yoe=n(SKe,"A",{href:!0});var zfa=s(yoe);H7r=r(zfa,"Data2VecTextForQuestionAnswering"),zfa.forEach(t),J7r=r(SKe," (Data2VecText model)"),SKe.forEach(t),Y7r=i(X),AC=n(X,"LI",{});var RKe=s(AC);vAe=n(RKe,"STRONG",{});var Qfa=s(vAe);Z7r=r(Qfa,"deberta"),Qfa.forEach(t),K7r=r(RKe," \u2014 "),xoe=n(RKe,"A",{href:!0});var Wfa=s(xoe);e8r=r(Wfa,"DebertaForQuestionAnswering"),Wfa.forEach(t),o8r=r(RKe," (DeBERTa model)"),RKe.forEach(t),r8r=i(X),LC=n(X,"LI",{});var PKe=s(LC);FAe=n(PKe,"STRONG",{});var Ufa=s(FAe);t8r=r(Ufa,"deberta-v2"),Ufa.forEach(t),a8r=r(PKe," \u2014 "),$oe=n(PKe,"A",{href:!0});var Hfa=s($oe);n8r=r(Hfa,"DebertaV2ForQuestionAnswering"),Hfa.forEach(t),s8r=r(PKe," (DeBERTa-v2 model)"),PKe.forEach(t),l8r=i(X),yC=n(X,"LI",{});var BKe=s(yC);TAe=n(BKe,"STRONG",{});var Jfa=s(TAe);i8r=r(Jfa,"distilbert"),Jfa.forEach(t),d8r=r(BKe," \u2014 "),koe=n(BKe,"A",{href:!0});var Yfa=s(koe);m8r=r(Yfa,"DistilBertForQuestionAnswering"),Yfa.forEach(t),c8r=r(BKe," (DistilBERT model)"),BKe.forEach(t),f8r=i(X),xC=n(X,"LI",{});var IKe=s(xC);MAe=n(IKe,"STRONG",{});var Zfa=s(MAe);g8r=r(Zfa,"electra"),Zfa.forEach(t),h8r=r(IKe," \u2014 "),Soe=n(IKe,"A",{href:!0});var Kfa=s(Soe);u8r=r(Kfa,"ElectraForQuestionAnswering"),Kfa.forEach(t),p8r=r(IKe," (ELECTRA model)"),IKe.forEach(t),_8r=i(X),$C=n(X,"LI",{});var NKe=s($C);EAe=n(NKe,"STRONG",{});var ega=s(EAe);b8r=r(ega,"ernie"),ega.forEach(t),v8r=r(NKe," \u2014 "),Roe=n(NKe,"A",{href:!0});var oga=s(Roe);F8r=r(oga,"ErnieForQuestionAnswering"),oga.forEach(t),T8r=r(NKe," (ERNIE model)"),NKe.forEach(t),M8r=i(X),kC=n(X,"LI",{});var qKe=s(kC);CAe=n(qKe,"STRONG",{});var rga=s(CAe);E8r=r(rga,"flaubert"),rga.forEach(t),C8r=r(qKe," \u2014 "),Poe=n(qKe,"A",{href:!0});var tga=s(Poe);w8r=r(tga,"FlaubertForQuestionAnsweringSimple"),tga.forEach(t),A8r=r(qKe," (FlauBERT model)"),qKe.forEach(t),L8r=i(X),SC=n(X,"LI",{});var jKe=s(SC);wAe=n(jKe,"STRONG",{});var aga=s(wAe);y8r=r(aga,"fnet"),aga.forEach(t),x8r=r(jKe," \u2014 "),Boe=n(jKe,"A",{href:!0});var nga=s(Boe);$8r=r(nga,"FNetForQuestionAnswering"),nga.forEach(t),k8r=r(jKe," (FNet model)"),jKe.forEach(t),S8r=i(X),RC=n(X,"LI",{});var DKe=s(RC);AAe=n(DKe,"STRONG",{});var sga=s(AAe);R8r=r(sga,"funnel"),sga.forEach(t),P8r=r(DKe," \u2014 "),Ioe=n(DKe,"A",{href:!0});var lga=s(Ioe);B8r=r(lga,"FunnelForQuestionAnswering"),lga.forEach(t),I8r=r(DKe," (Funnel Transformer model)"),DKe.forEach(t),N8r=i(X),PC=n(X,"LI",{});var GKe=s(PC);LAe=n(GKe,"STRONG",{});var iga=s(LAe);q8r=r(iga,"gptj"),iga.forEach(t),j8r=r(GKe," \u2014 "),Noe=n(GKe,"A",{href:!0});var dga=s(Noe);D8r=r(dga,"GPTJForQuestionAnswering"),dga.forEach(t),G8r=r(GKe," (GPT-J model)"),GKe.forEach(t),O8r=i(X),BC=n(X,"LI",{});var OKe=s(BC);yAe=n(OKe,"STRONG",{});var mga=s(yAe);V8r=r(mga,"ibert"),mga.forEach(t),X8r=r(OKe," \u2014 "),qoe=n(OKe,"A",{href:!0});var cga=s(qoe);z8r=r(cga,"IBertForQuestionAnswering"),cga.forEach(t),Q8r=r(OKe," (I-BERT model)"),OKe.forEach(t),W8r=i(X),IC=n(X,"LI",{});var VKe=s(IC);xAe=n(VKe,"STRONG",{});var fga=s(xAe);U8r=r(fga,"layoutlmv2"),fga.forEach(t),H8r=r(VKe," \u2014 "),joe=n(VKe,"A",{href:!0});var gga=s(joe);J8r=r(gga,"LayoutLMv2ForQuestionAnswering"),gga.forEach(t),Y8r=r(VKe," (LayoutLMv2 model)"),VKe.forEach(t),Z8r=i(X),NC=n(X,"LI",{});var XKe=s(NC);$Ae=n(XKe,"STRONG",{});var hga=s($Ae);K8r=r(hga,"layoutlmv3"),hga.forEach(t),eLr=r(XKe," \u2014 "),Doe=n(XKe,"A",{href:!0});var uga=s(Doe);oLr=r(uga,"LayoutLMv3ForQuestionAnswering"),uga.forEach(t),rLr=r(XKe," (LayoutLMv3 model)"),XKe.forEach(t),tLr=i(X),qC=n(X,"LI",{});var zKe=s(qC);kAe=n(zKe,"STRONG",{});var pga=s(kAe);aLr=r(pga,"led"),pga.forEach(t),nLr=r(zKe," \u2014 "),Goe=n(zKe,"A",{href:!0});var _ga=s(Goe);sLr=r(_ga,"LEDForQuestionAnswering"),_ga.forEach(t),lLr=r(zKe," (LED model)"),zKe.forEach(t),iLr=i(X),jC=n(X,"LI",{});var QKe=s(jC);SAe=n(QKe,"STRONG",{});var bga=s(SAe);dLr=r(bga,"lilt"),bga.forEach(t),mLr=r(QKe," \u2014 "),Ooe=n(QKe,"A",{href:!0});var vga=s(Ooe);cLr=r(vga,"LiltForQuestionAnswering"),vga.forEach(t),fLr=r(QKe," (LiLT model)"),QKe.forEach(t),gLr=i(X),DC=n(X,"LI",{});var WKe=s(DC);RAe=n(WKe,"STRONG",{});var Fga=s(RAe);hLr=r(Fga,"longformer"),Fga.forEach(t),uLr=r(WKe," \u2014 "),Voe=n(WKe,"A",{href:!0});var Tga=s(Voe);pLr=r(Tga,"LongformerForQuestionAnswering"),Tga.forEach(t),_Lr=r(WKe," (Longformer model)"),WKe.forEach(t),bLr=i(X),GC=n(X,"LI",{});var UKe=s(GC);PAe=n(UKe,"STRONG",{});var Mga=s(PAe);vLr=r(Mga,"luke"),Mga.forEach(t),FLr=r(UKe," \u2014 "),Xoe=n(UKe,"A",{href:!0});var Ega=s(Xoe);TLr=r(Ega,"LukeForQuestionAnswering"),Ega.forEach(t),MLr=r(UKe," (LUKE model)"),UKe.forEach(t),ELr=i(X),OC=n(X,"LI",{});var HKe=s(OC);BAe=n(HKe,"STRONG",{});var Cga=s(BAe);CLr=r(Cga,"lxmert"),Cga.forEach(t),wLr=r(HKe," \u2014 "),zoe=n(HKe,"A",{href:!0});var wga=s(zoe);ALr=r(wga,"LxmertForQuestionAnswering"),wga.forEach(t),LLr=r(HKe," (LXMERT model)"),HKe.forEach(t),yLr=i(X),VC=n(X,"LI",{});var JKe=s(VC);IAe=n(JKe,"STRONG",{});var Aga=s(IAe);xLr=r(Aga,"markuplm"),Aga.forEach(t),$Lr=r(JKe," \u2014 "),Qoe=n(JKe,"A",{href:!0});var Lga=s(Qoe);kLr=r(Lga,"MarkupLMForQuestionAnswering"),Lga.forEach(t),SLr=r(JKe," (MarkupLM model)"),JKe.forEach(t),RLr=i(X),XC=n(X,"LI",{});var YKe=s(XC);NAe=n(YKe,"STRONG",{});var yga=s(NAe);PLr=r(yga,"mbart"),yga.forEach(t),BLr=r(YKe," \u2014 "),Woe=n(YKe,"A",{href:!0});var xga=s(Woe);ILr=r(xga,"MBartForQuestionAnswering"),xga.forEach(t),NLr=r(YKe," (mBART model)"),YKe.forEach(t),qLr=i(X),zC=n(X,"LI",{});var ZKe=s(zC);qAe=n(ZKe,"STRONG",{});var $ga=s(qAe);jLr=r($ga,"megatron-bert"),$ga.forEach(t),DLr=r(ZKe," \u2014 "),Uoe=n(ZKe,"A",{href:!0});var kga=s(Uoe);GLr=r(kga,"MegatronBertForQuestionAnswering"),kga.forEach(t),OLr=r(ZKe," (Megatron-BERT model)"),ZKe.forEach(t),VLr=i(X),QC=n(X,"LI",{});var KKe=s(QC);jAe=n(KKe,"STRONG",{});var Sga=s(jAe);XLr=r(Sga,"mobilebert"),Sga.forEach(t),zLr=r(KKe," \u2014 "),Hoe=n(KKe,"A",{href:!0});var Rga=s(Hoe);QLr=r(Rga,"MobileBertForQuestionAnswering"),Rga.forEach(t),WLr=r(KKe," (MobileBERT model)"),KKe.forEach(t),ULr=i(X),WC=n(X,"LI",{});var eeo=s(WC);DAe=n(eeo,"STRONG",{});var Pga=s(DAe);HLr=r(Pga,"mpnet"),Pga.forEach(t),JLr=r(eeo," \u2014 "),Joe=n(eeo,"A",{href:!0});var Bga=s(Joe);YLr=r(Bga,"MPNetForQuestionAnswering"),Bga.forEach(t),ZLr=r(eeo," (MPNet model)"),eeo.forEach(t),KLr=i(X),UC=n(X,"LI",{});var oeo=s(UC);GAe=n(oeo,"STRONG",{});var Iga=s(GAe);eyr=r(Iga,"mvp"),Iga.forEach(t),oyr=r(oeo," \u2014 "),Yoe=n(oeo,"A",{href:!0});var Nga=s(Yoe);ryr=r(Nga,"MvpForQuestionAnswering"),Nga.forEach(t),tyr=r(oeo," (MVP model)"),oeo.forEach(t),ayr=i(X),HC=n(X,"LI",{});var reo=s(HC);OAe=n(reo,"STRONG",{});var qga=s(OAe);nyr=r(qga,"nezha"),qga.forEach(t),syr=r(reo," \u2014 "),Zoe=n(reo,"A",{href:!0});var jga=s(Zoe);lyr=r(jga,"NezhaForQuestionAnswering"),jga.forEach(t),iyr=r(reo," (Nezha model)"),reo.forEach(t),dyr=i(X),JC=n(X,"LI",{});var teo=s(JC);VAe=n(teo,"STRONG",{});var Dga=s(VAe);myr=r(Dga,"nystromformer"),Dga.forEach(t),cyr=r(teo," \u2014 "),Koe=n(teo,"A",{href:!0});var Gga=s(Koe);fyr=r(Gga,"NystromformerForQuestionAnswering"),Gga.forEach(t),gyr=r(teo," (Nystr\xF6mformer model)"),teo.forEach(t),hyr=i(X),YC=n(X,"LI",{});var aeo=s(YC);XAe=n(aeo,"STRONG",{});var Oga=s(XAe);uyr=r(Oga,"opt"),Oga.forEach(t),pyr=r(aeo," \u2014 "),ere=n(aeo,"A",{href:!0});var Vga=s(ere);_yr=r(Vga,"OPTForQuestionAnswering"),Vga.forEach(t),byr=r(aeo," (OPT model)"),aeo.forEach(t),vyr=i(X),ZC=n(X,"LI",{});var neo=s(ZC);zAe=n(neo,"STRONG",{});var Xga=s(zAe);Fyr=r(Xga,"qdqbert"),Xga.forEach(t),Tyr=r(neo," \u2014 "),ore=n(neo,"A",{href:!0});var zga=s(ore);Myr=r(zga,"QDQBertForQuestionAnswering"),zga.forEach(t),Eyr=r(neo," (QDQBert model)"),neo.forEach(t),Cyr=i(X),KC=n(X,"LI",{});var seo=s(KC);QAe=n(seo,"STRONG",{});var Qga=s(QAe);wyr=r(Qga,"reformer"),Qga.forEach(t),Ayr=r(seo," \u2014 "),rre=n(seo,"A",{href:!0});var Wga=s(rre);Lyr=r(Wga,"ReformerForQuestionAnswering"),Wga.forEach(t),yyr=r(seo," (Reformer model)"),seo.forEach(t),xyr=i(X),e3=n(X,"LI",{});var leo=s(e3);WAe=n(leo,"STRONG",{});var Uga=s(WAe);$yr=r(Uga,"rembert"),Uga.forEach(t),kyr=r(leo," \u2014 "),tre=n(leo,"A",{href:!0});var Hga=s(tre);Syr=r(Hga,"RemBertForQuestionAnswering"),Hga.forEach(t),Ryr=r(leo," (RemBERT model)"),leo.forEach(t),Pyr=i(X),o3=n(X,"LI",{});var ieo=s(o3);UAe=n(ieo,"STRONG",{});var Jga=s(UAe);Byr=r(Jga,"roberta"),Jga.forEach(t),Iyr=r(ieo," \u2014 "),are=n(ieo,"A",{href:!0});var Yga=s(are);Nyr=r(Yga,"RobertaForQuestionAnswering"),Yga.forEach(t),qyr=r(ieo," (RoBERTa model)"),ieo.forEach(t),jyr=i(X),r3=n(X,"LI",{});var deo=s(r3);HAe=n(deo,"STRONG",{});var Zga=s(HAe);Dyr=r(Zga,"roc_bert"),Zga.forEach(t),Gyr=r(deo," \u2014 "),nre=n(deo,"A",{href:!0});var Kga=s(nre);Oyr=r(Kga,"RoCBertForQuestionAnswering"),Kga.forEach(t),Vyr=r(deo," (RoCBert model)"),deo.forEach(t),Xyr=i(X),t3=n(X,"LI",{});var meo=s(t3);JAe=n(meo,"STRONG",{});var eha=s(JAe);zyr=r(eha,"roformer"),eha.forEach(t),Qyr=r(meo," \u2014 "),sre=n(meo,"A",{href:!0});var oha=s(sre);Wyr=r(oha,"RoFormerForQuestionAnswering"),oha.forEach(t),Uyr=r(meo," (RoFormer model)"),meo.forEach(t),Hyr=i(X),a3=n(X,"LI",{});var ceo=s(a3);YAe=n(ceo,"STRONG",{});var rha=s(YAe);Jyr=r(rha,"splinter"),rha.forEach(t),Yyr=r(ceo," \u2014 "),lre=n(ceo,"A",{href:!0});var tha=s(lre);Zyr=r(tha,"SplinterForQuestionAnswering"),tha.forEach(t),Kyr=r(ceo," (Splinter model)"),ceo.forEach(t),e9r=i(X),n3=n(X,"LI",{});var feo=s(n3);ZAe=n(feo,"STRONG",{});var aha=s(ZAe);o9r=r(aha,"squeezebert"),aha.forEach(t),r9r=r(feo," \u2014 "),ire=n(feo,"A",{href:!0});var nha=s(ire);t9r=r(nha,"SqueezeBertForQuestionAnswering"),nha.forEach(t),a9r=r(feo," (SqueezeBERT model)"),feo.forEach(t),n9r=i(X),s3=n(X,"LI",{});var geo=s(s3);KAe=n(geo,"STRONG",{});var sha=s(KAe);s9r=r(sha,"xlm"),sha.forEach(t),l9r=r(geo," \u2014 "),dre=n(geo,"A",{href:!0});var lha=s(dre);i9r=r(lha,"XLMForQuestionAnsweringSimple"),lha.forEach(t),d9r=r(geo," (XLM model)"),geo.forEach(t),m9r=i(X),l3=n(X,"LI",{});var heo=s(l3);e6e=n(heo,"STRONG",{});var iha=s(e6e);c9r=r(iha,"xlm-roberta"),iha.forEach(t),f9r=r(heo," \u2014 "),mre=n(heo,"A",{href:!0});var dha=s(mre);g9r=r(dha,"XLMRobertaForQuestionAnswering"),dha.forEach(t),h9r=r(heo," (XLM-RoBERTa model)"),heo.forEach(t),u9r=i(X),i3=n(X,"LI",{});var ueo=s(i3);o6e=n(ueo,"STRONG",{});var mha=s(o6e);p9r=r(mha,"xlm-roberta-xl"),mha.forEach(t),_9r=r(ueo," \u2014 "),cre=n(ueo,"A",{href:!0});var cha=s(cre);b9r=r(cha,"XLMRobertaXLForQuestionAnswering"),cha.forEach(t),v9r=r(ueo," (XLM-RoBERTa-XL model)"),ueo.forEach(t),F9r=i(X),d3=n(X,"LI",{});var peo=s(d3);r6e=n(peo,"STRONG",{});var fha=s(r6e);T9r=r(fha,"xlnet"),fha.forEach(t),M9r=r(peo," \u2014 "),fre=n(peo,"A",{href:!0});var gha=s(fre);E9r=r(gha,"XLNetForQuestionAnsweringSimple"),gha.forEach(t),C9r=r(peo," (XLNet model)"),peo.forEach(t),w9r=i(X),m3=n(X,"LI",{});var _eo=s(m3);t6e=n(_eo,"STRONG",{});var hha=s(t6e);A9r=r(hha,"yoso"),hha.forEach(t),L9r=r(_eo," \u2014 "),gre=n(_eo,"A",{href:!0});var uha=s(gre);y9r=r(uha,"YosoForQuestionAnswering"),uha.forEach(t),x9r=r(_eo," (YOSO model)"),_eo.forEach(t),X.forEach(t),$9r=i(Oa),c3=n(Oa,"P",{});var beo=s(c3);k9r=r(beo,"The model is set in evaluation mode by default using "),a6e=n(beo,"CODE",{});var pha=s(a6e);S9r=r(pha,"model.eval()"),pha.forEach(t),R9r=r(beo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n6e=n(beo,"CODE",{});var _ha=s(n6e);P9r=r(_ha,"model.train()"),_ha.forEach(t),beo.forEach(t),B9r=i(Oa),T(f3.$$.fragment,Oa),Oa.forEach(t),ai.forEach(t),rdo=i(c),Tm=n(c,"H2",{class:!0});var wco=s(Tm);g3=n(wco,"A",{id:!0,class:!0,href:!0});var bha=s(g3);s6e=n(bha,"SPAN",{});var vha=s(s6e);T(sR.$$.fragment,vha),vha.forEach(t),bha.forEach(t),I9r=i(wco),l6e=n(wco,"SPAN",{});var Fha=s(l6e);N9r=r(Fha,"AutoModelForTableQuestionAnswering"),Fha.forEach(t),wco.forEach(t),tdo=i(c),Yo=n(c,"DIV",{class:!0});var ni=s(Yo);T(lR.$$.fragment,ni),q9r=i(ni),Mm=n(ni,"P",{});var age=s(Mm);j9r=r(age,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hre=n(age,"A",{href:!0});var Tha=s(hre);D9r=r(Tha,"from_pretrained()"),Tha.forEach(t),G9r=r(age," class method or the "),ure=n(age,"A",{href:!0});var Mha=s(ure);O9r=r(Mha,"from_config()"),Mha.forEach(t),V9r=r(age,` class
method.`),age.forEach(t),X9r=i(ni),iR=n(ni,"P",{});var Aco=s(iR);z9r=r(Aco,"This class cannot be instantiated directly using "),i6e=n(Aco,"CODE",{});var Eha=s(i6e);Q9r=r(Eha,"__init__()"),Eha.forEach(t),W9r=r(Aco," (throws an error)."),Aco.forEach(t),U9r=i(ni),Nt=n(ni,"DIV",{class:!0});var jx=s(Nt);T(dR.$$.fragment,jx),H9r=i(jx),d6e=n(jx,"P",{});var Cha=s(d6e);J9r=r(Cha,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Cha.forEach(t),Y9r=i(jx),Em=n(jx,"P",{});var nge=s(Em);Z9r=r(nge,`Note:
Loading a model from its configuration file does `),m6e=n(nge,"STRONG",{});var wha=s(m6e);K9r=r(wha,"not"),wha.forEach(t),exr=r(nge,` load the model weights. It only affects the
model\u2019s configuration. Use `),pre=n(nge,"A",{href:!0});var Aha=s(pre);oxr=r(Aha,"from_pretrained()"),Aha.forEach(t),rxr=r(nge," to load the model weights."),nge.forEach(t),txr=i(jx),T(h3.$$.fragment,jx),jx.forEach(t),axr=i(ni),uo=n(ni,"DIV",{class:!0});var Va=s(uo);T(mR.$$.fragment,Va),nxr=i(Va),c6e=n(Va,"P",{});var Lha=s(c6e);sxr=r(Lha,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lha.forEach(t),lxr=i(Va),Cn=n(Va,"P",{});var Dx=s(Cn);ixr=r(Dx,"The model class to instantiate is selected based on the "),f6e=n(Dx,"CODE",{});var yha=s(f6e);dxr=r(yha,"model_type"),yha.forEach(t),mxr=r(Dx,` property of the config object (either
passed as an argument or loaded from `),g6e=n(Dx,"CODE",{});var xha=s(g6e);cxr=r(xha,"pretrained_model_name_or_path"),xha.forEach(t),fxr=r(Dx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h6e=n(Dx,"CODE",{});var $ha=s(h6e);gxr=r($ha,"pretrained_model_name_or_path"),$ha.forEach(t),hxr=r(Dx,":"),Dx.forEach(t),uxr=i(Va),u6e=n(Va,"UL",{});var kha=s(u6e);u3=n(kha,"LI",{});var veo=s(u3);p6e=n(veo,"STRONG",{});var Sha=s(p6e);pxr=r(Sha,"tapas"),Sha.forEach(t),_xr=r(veo," \u2014 "),_re=n(veo,"A",{href:!0});var Rha=s(_re);bxr=r(Rha,"TapasForQuestionAnswering"),Rha.forEach(t),vxr=r(veo," (TAPAS model)"),veo.forEach(t),kha.forEach(t),Fxr=i(Va),p3=n(Va,"P",{});var Feo=s(p3);Txr=r(Feo,"The model is set in evaluation mode by default using "),_6e=n(Feo,"CODE",{});var Pha=s(_6e);Mxr=r(Pha,"model.eval()"),Pha.forEach(t),Exr=r(Feo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b6e=n(Feo,"CODE",{});var Bha=s(b6e);Cxr=r(Bha,"model.train()"),Bha.forEach(t),Feo.forEach(t),wxr=i(Va),T(_3.$$.fragment,Va),Va.forEach(t),ni.forEach(t),ado=i(c),Cm=n(c,"H2",{class:!0});var Lco=s(Cm);b3=n(Lco,"A",{id:!0,class:!0,href:!0});var Iha=s(b3);v6e=n(Iha,"SPAN",{});var Nha=s(v6e);T(cR.$$.fragment,Nha),Nha.forEach(t),Iha.forEach(t),Axr=i(Lco),F6e=n(Lco,"SPAN",{});var qha=s(F6e);Lxr=r(qha,"AutoModelForDocumentQuestionAnswering"),qha.forEach(t),Lco.forEach(t),ndo=i(c),Zo=n(c,"DIV",{class:!0});var si=s(Zo);T(fR.$$.fragment,si),yxr=i(si),wm=n(si,"P",{});var sge=s(wm);xxr=r(sge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),bre=n(sge,"A",{href:!0});var jha=s(bre);$xr=r(jha,"from_pretrained()"),jha.forEach(t),kxr=r(sge," class method or the "),vre=n(sge,"A",{href:!0});var Dha=s(vre);Sxr=r(Dha,"from_config()"),Dha.forEach(t),Rxr=r(sge,` class
method.`),sge.forEach(t),Pxr=i(si),gR=n(si,"P",{});var yco=s(gR);Bxr=r(yco,"This class cannot be instantiated directly using "),T6e=n(yco,"CODE",{});var Gha=s(T6e);Ixr=r(Gha,"__init__()"),Gha.forEach(t),Nxr=r(yco," (throws an error)."),yco.forEach(t),qxr=i(si),qt=n(si,"DIV",{class:!0});var Gx=s(qt);T(hR.$$.fragment,Gx),jxr=i(Gx),M6e=n(Gx,"P",{});var Oha=s(M6e);Dxr=r(Oha,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),Oha.forEach(t),Gxr=i(Gx),Am=n(Gx,"P",{});var lge=s(Am);Oxr=r(lge,`Note:
Loading a model from its configuration file does `),E6e=n(lge,"STRONG",{});var Vha=s(E6e);Vxr=r(Vha,"not"),Vha.forEach(t),Xxr=r(lge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fre=n(lge,"A",{href:!0});var Xha=s(Fre);zxr=r(Xha,"from_pretrained()"),Xha.forEach(t),Qxr=r(lge," to load the model weights."),lge.forEach(t),Wxr=i(Gx),T(v3.$$.fragment,Gx),Gx.forEach(t),Uxr=i(si),po=n(si,"DIV",{class:!0});var Xa=s(po);T(uR.$$.fragment,Xa),Hxr=i(Xa),C6e=n(Xa,"P",{});var zha=s(C6e);Jxr=r(zha,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),zha.forEach(t),Yxr=i(Xa),wn=n(Xa,"P",{});var Ox=s(wn);Zxr=r(Ox,"The model class to instantiate is selected based on the "),w6e=n(Ox,"CODE",{});var Qha=s(w6e);Kxr=r(Qha,"model_type"),Qha.forEach(t),e$r=r(Ox,` property of the config object (either
passed as an argument or loaded from `),A6e=n(Ox,"CODE",{});var Wha=s(A6e);o$r=r(Wha,"pretrained_model_name_or_path"),Wha.forEach(t),r$r=r(Ox,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=n(Ox,"CODE",{});var Uha=s(L6e);t$r=r(Uha,"pretrained_model_name_or_path"),Uha.forEach(t),a$r=r(Ox,":"),Ox.forEach(t),n$r=i(Xa),Lm=n(Xa,"UL",{});var ige=s(Lm);F3=n(ige,"LI",{});var Teo=s(F3);y6e=n(Teo,"STRONG",{});var Hha=s(y6e);s$r=r(Hha,"layoutlm"),Hha.forEach(t),l$r=r(Teo," \u2014 "),Tre=n(Teo,"A",{href:!0});var Jha=s(Tre);i$r=r(Jha,"LayoutLMForQuestionAnswering"),Jha.forEach(t),d$r=r(Teo," (LayoutLM model)"),Teo.forEach(t),m$r=i(ige),T3=n(ige,"LI",{});var Meo=s(T3);x6e=n(Meo,"STRONG",{});var Yha=s(x6e);c$r=r(Yha,"layoutlmv2"),Yha.forEach(t),f$r=r(Meo," \u2014 "),Mre=n(Meo,"A",{href:!0});var Zha=s(Mre);g$r=r(Zha,"LayoutLMv2ForQuestionAnswering"),Zha.forEach(t),h$r=r(Meo," (LayoutLMv2 model)"),Meo.forEach(t),u$r=i(ige),M3=n(ige,"LI",{});var Eeo=s(M3);$6e=n(Eeo,"STRONG",{});var Kha=s($6e);p$r=r(Kha,"layoutlmv3"),Kha.forEach(t),_$r=r(Eeo," \u2014 "),Ere=n(Eeo,"A",{href:!0});var eua=s(Ere);b$r=r(eua,"LayoutLMv3ForQuestionAnswering"),eua.forEach(t),v$r=r(Eeo," (LayoutLMv3 model)"),Eeo.forEach(t),ige.forEach(t),F$r=i(Xa),E3=n(Xa,"P",{});var Ceo=s(E3);T$r=r(Ceo,"The model is set in evaluation mode by default using "),k6e=n(Ceo,"CODE",{});var oua=s(k6e);M$r=r(oua,"model.eval()"),oua.forEach(t),E$r=r(Ceo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S6e=n(Ceo,"CODE",{});var rua=s(S6e);C$r=r(rua,"model.train()"),rua.forEach(t),Ceo.forEach(t),w$r=i(Xa),T(C3.$$.fragment,Xa),Xa.forEach(t),si.forEach(t),sdo=i(c),ym=n(c,"H2",{class:!0});var xco=s(ym);w3=n(xco,"A",{id:!0,class:!0,href:!0});var tua=s(w3);R6e=n(tua,"SPAN",{});var aua=s(R6e);T(pR.$$.fragment,aua),aua.forEach(t),tua.forEach(t),A$r=i(xco),P6e=n(xco,"SPAN",{});var nua=s(P6e);L$r=r(nua,"AutoModelForImageClassification"),nua.forEach(t),xco.forEach(t),ldo=i(c),Ko=n(c,"DIV",{class:!0});var li=s(Ko);T(_R.$$.fragment,li),y$r=i(li),xm=n(li,"P",{});var dge=s(xm);x$r=r(dge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Cre=n(dge,"A",{href:!0});var sua=s(Cre);$$r=r(sua,"from_pretrained()"),sua.forEach(t),k$r=r(dge," class method or the "),wre=n(dge,"A",{href:!0});var lua=s(wre);S$r=r(lua,"from_config()"),lua.forEach(t),R$r=r(dge,` class
method.`),dge.forEach(t),P$r=i(li),bR=n(li,"P",{});var $co=s(bR);B$r=r($co,"This class cannot be instantiated directly using "),B6e=n($co,"CODE",{});var iua=s(B6e);I$r=r(iua,"__init__()"),iua.forEach(t),N$r=r($co," (throws an error)."),$co.forEach(t),q$r=i(li),jt=n(li,"DIV",{class:!0});var Vx=s(jt);T(vR.$$.fragment,Vx),j$r=i(Vx),I6e=n(Vx,"P",{});var dua=s(I6e);D$r=r(dua,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dua.forEach(t),G$r=i(Vx),$m=n(Vx,"P",{});var mge=s($m);O$r=r(mge,`Note:
Loading a model from its configuration file does `),N6e=n(mge,"STRONG",{});var mua=s(N6e);V$r=r(mua,"not"),mua.forEach(t),X$r=r(mge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=n(mge,"A",{href:!0});var cua=s(Are);z$r=r(cua,"from_pretrained()"),cua.forEach(t),Q$r=r(mge," to load the model weights."),mge.forEach(t),W$r=i(Vx),T(A3.$$.fragment,Vx),Vx.forEach(t),U$r=i(li),_o=n(li,"DIV",{class:!0});var za=s(_o);T(FR.$$.fragment,za),H$r=i(za),q6e=n(za,"P",{});var fua=s(q6e);J$r=r(fua,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fua.forEach(t),Y$r=i(za),An=n(za,"P",{});var Xx=s(An);Z$r=r(Xx,"The model class to instantiate is selected based on the "),j6e=n(Xx,"CODE",{});var gua=s(j6e);K$r=r(gua,"model_type"),gua.forEach(t),ekr=r(Xx,` property of the config object (either
passed as an argument or loaded from `),D6e=n(Xx,"CODE",{});var hua=s(D6e);okr=r(hua,"pretrained_model_name_or_path"),hua.forEach(t),rkr=r(Xx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=n(Xx,"CODE",{});var uua=s(G6e);tkr=r(uua,"pretrained_model_name_or_path"),uua.forEach(t),akr=r(Xx,":"),Xx.forEach(t),nkr=i(za),Fe=n(za,"UL",{});var Te=s(Fe);L3=n(Te,"LI",{});var weo=s(L3);O6e=n(weo,"STRONG",{});var pua=s(O6e);skr=r(pua,"beit"),pua.forEach(t),lkr=r(weo," \u2014 "),Lre=n(weo,"A",{href:!0});var _ua=s(Lre);ikr=r(_ua,"BeitForImageClassification"),_ua.forEach(t),dkr=r(weo," (BEiT model)"),weo.forEach(t),mkr=i(Te),y3=n(Te,"LI",{});var Aeo=s(y3);V6e=n(Aeo,"STRONG",{});var bua=s(V6e);ckr=r(bua,"convnext"),bua.forEach(t),fkr=r(Aeo," \u2014 "),yre=n(Aeo,"A",{href:!0});var vua=s(yre);gkr=r(vua,"ConvNextForImageClassification"),vua.forEach(t),hkr=r(Aeo," (ConvNeXT model)"),Aeo.forEach(t),ukr=i(Te),x3=n(Te,"LI",{});var Leo=s(x3);X6e=n(Leo,"STRONG",{});var Fua=s(X6e);pkr=r(Fua,"cvt"),Fua.forEach(t),_kr=r(Leo," \u2014 "),xre=n(Leo,"A",{href:!0});var Tua=s(xre);bkr=r(Tua,"CvtForImageClassification"),Tua.forEach(t),vkr=r(Leo," (CvT model)"),Leo.forEach(t),Fkr=i(Te),$3=n(Te,"LI",{});var yeo=s($3);z6e=n(yeo,"STRONG",{});var Mua=s(z6e);Tkr=r(Mua,"data2vec-vision"),Mua.forEach(t),Mkr=r(yeo," \u2014 "),$re=n(yeo,"A",{href:!0});var Eua=s($re);Ekr=r(Eua,"Data2VecVisionForImageClassification"),Eua.forEach(t),Ckr=r(yeo," (Data2VecVision model)"),yeo.forEach(t),wkr=i(Te),jl=n(Te,"LI",{});var Vq=s(jl);Q6e=n(Vq,"STRONG",{});var Cua=s(Q6e);Akr=r(Cua,"deit"),Cua.forEach(t),Lkr=r(Vq," \u2014 "),kre=n(Vq,"A",{href:!0});var wua=s(kre);ykr=r(wua,"DeiTForImageClassification"),wua.forEach(t),xkr=r(Vq," or "),Sre=n(Vq,"A",{href:!0});var Aua=s(Sre);$kr=r(Aua,"DeiTForImageClassificationWithTeacher"),Aua.forEach(t),kkr=r(Vq," (DeiT model)"),Vq.forEach(t),Skr=i(Te),k3=n(Te,"LI",{});var xeo=s(k3);W6e=n(xeo,"STRONG",{});var Lua=s(W6e);Rkr=r(Lua,"imagegpt"),Lua.forEach(t),Pkr=r(xeo," \u2014 "),Rre=n(xeo,"A",{href:!0});var yua=s(Rre);Bkr=r(yua,"ImageGPTForImageClassification"),yua.forEach(t),Ikr=r(xeo," (ImageGPT model)"),xeo.forEach(t),Nkr=i(Te),Dl=n(Te,"LI",{});var Xq=s(Dl);U6e=n(Xq,"STRONG",{});var xua=s(U6e);qkr=r(xua,"levit"),xua.forEach(t),jkr=r(Xq," \u2014 "),Pre=n(Xq,"A",{href:!0});var $ua=s(Pre);Dkr=r($ua,"LevitForImageClassification"),$ua.forEach(t),Gkr=r(Xq," or "),Bre=n(Xq,"A",{href:!0});var kua=s(Bre);Okr=r(kua,"LevitForImageClassificationWithTeacher"),kua.forEach(t),Vkr=r(Xq," (LeViT model)"),Xq.forEach(t),Xkr=i(Te),S3=n(Te,"LI",{});var $eo=s(S3);H6e=n($eo,"STRONG",{});var Sua=s(H6e);zkr=r(Sua,"mobilenet_v2"),Sua.forEach(t),Qkr=r($eo," \u2014 "),Ire=n($eo,"A",{href:!0});var Rua=s(Ire);Wkr=r(Rua,"MobileNetV2ForImageClassification"),Rua.forEach(t),Ukr=r($eo," (MobileNetV2 model)"),$eo.forEach(t),Hkr=i(Te),R3=n(Te,"LI",{});var keo=s(R3);J6e=n(keo,"STRONG",{});var Pua=s(J6e);Jkr=r(Pua,"mobilevit"),Pua.forEach(t),Ykr=r(keo," \u2014 "),Nre=n(keo,"A",{href:!0});var Bua=s(Nre);Zkr=r(Bua,"MobileViTForImageClassification"),Bua.forEach(t),Kkr=r(keo," (MobileViT model)"),keo.forEach(t),eSr=i(Te),Dt=n(Te,"LI",{});var eg=s(Dt);Y6e=n(eg,"STRONG",{});var Iua=s(Y6e);oSr=r(Iua,"perceiver"),Iua.forEach(t),rSr=r(eg," \u2014 "),qre=n(eg,"A",{href:!0});var Nua=s(qre);tSr=r(Nua,"PerceiverForImageClassificationLearned"),Nua.forEach(t),aSr=r(eg," or "),jre=n(eg,"A",{href:!0});var qua=s(jre);nSr=r(qua,"PerceiverForImageClassificationFourier"),qua.forEach(t),sSr=r(eg," or "),Dre=n(eg,"A",{href:!0});var jua=s(Dre);lSr=r(jua,"PerceiverForImageClassificationConvProcessing"),jua.forEach(t),iSr=r(eg," (Perceiver model)"),eg.forEach(t),dSr=i(Te),P3=n(Te,"LI",{});var Seo=s(P3);Z6e=n(Seo,"STRONG",{});var Dua=s(Z6e);mSr=r(Dua,"poolformer"),Dua.forEach(t),cSr=r(Seo," \u2014 "),Gre=n(Seo,"A",{href:!0});var Gua=s(Gre);fSr=r(Gua,"PoolFormerForImageClassification"),Gua.forEach(t),gSr=r(Seo," (PoolFormer model)"),Seo.forEach(t),hSr=i(Te),B3=n(Te,"LI",{});var Reo=s(B3);K6e=n(Reo,"STRONG",{});var Oua=s(K6e);uSr=r(Oua,"regnet"),Oua.forEach(t),pSr=r(Reo," \u2014 "),Ore=n(Reo,"A",{href:!0});var Vua=s(Ore);_Sr=r(Vua,"RegNetForImageClassification"),Vua.forEach(t),bSr=r(Reo," (RegNet model)"),Reo.forEach(t),vSr=i(Te),I3=n(Te,"LI",{});var Peo=s(I3);e7e=n(Peo,"STRONG",{});var Xua=s(e7e);FSr=r(Xua,"resnet"),Xua.forEach(t),TSr=r(Peo," \u2014 "),Vre=n(Peo,"A",{href:!0});var zua=s(Vre);MSr=r(zua,"ResNetForImageClassification"),zua.forEach(t),ESr=r(Peo," (ResNet model)"),Peo.forEach(t),CSr=i(Te),N3=n(Te,"LI",{});var Beo=s(N3);o7e=n(Beo,"STRONG",{});var Qua=s(o7e);wSr=r(Qua,"segformer"),Qua.forEach(t),ASr=r(Beo," \u2014 "),Xre=n(Beo,"A",{href:!0});var Wua=s(Xre);LSr=r(Wua,"SegformerForImageClassification"),Wua.forEach(t),ySr=r(Beo," (SegFormer model)"),Beo.forEach(t),xSr=i(Te),q3=n(Te,"LI",{});var Ieo=s(q3);r7e=n(Ieo,"STRONG",{});var Uua=s(r7e);$Sr=r(Uua,"swin"),Uua.forEach(t),kSr=r(Ieo," \u2014 "),zre=n(Ieo,"A",{href:!0});var Hua=s(zre);SSr=r(Hua,"SwinForImageClassification"),Hua.forEach(t),RSr=r(Ieo," (Swin Transformer model)"),Ieo.forEach(t),PSr=i(Te),j3=n(Te,"LI",{});var Neo=s(j3);t7e=n(Neo,"STRONG",{});var Jua=s(t7e);BSr=r(Jua,"swinv2"),Jua.forEach(t),ISr=r(Neo," \u2014 "),Qre=n(Neo,"A",{href:!0});var Yua=s(Qre);NSr=r(Yua,"Swinv2ForImageClassification"),Yua.forEach(t),qSr=r(Neo," (Swin Transformer V2 model)"),Neo.forEach(t),jSr=i(Te),D3=n(Te,"LI",{});var qeo=s(D3);a7e=n(qeo,"STRONG",{});var Zua=s(a7e);DSr=r(Zua,"van"),Zua.forEach(t),GSr=r(qeo," \u2014 "),Wre=n(qeo,"A",{href:!0});var Kua=s(Wre);OSr=r(Kua,"VanForImageClassification"),Kua.forEach(t),VSr=r(qeo," (VAN model)"),qeo.forEach(t),XSr=i(Te),G3=n(Te,"LI",{});var jeo=s(G3);n7e=n(jeo,"STRONG",{});var epa=s(n7e);zSr=r(epa,"vit"),epa.forEach(t),QSr=r(jeo," \u2014 "),Ure=n(jeo,"A",{href:!0});var opa=s(Ure);WSr=r(opa,"ViTForImageClassification"),opa.forEach(t),USr=r(jeo," (ViT model)"),jeo.forEach(t),HSr=i(Te),O3=n(Te,"LI",{});var Deo=s(O3);s7e=n(Deo,"STRONG",{});var rpa=s(s7e);JSr=r(rpa,"vit_msn"),rpa.forEach(t),YSr=r(Deo," \u2014 "),Hre=n(Deo,"A",{href:!0});var tpa=s(Hre);ZSr=r(tpa,"ViTMSNForImageClassification"),tpa.forEach(t),KSr=r(Deo," (ViTMSN model)"),Deo.forEach(t),Te.forEach(t),eRr=i(za),V3=n(za,"P",{});var Geo=s(V3);oRr=r(Geo,"The model is set in evaluation mode by default using "),l7e=n(Geo,"CODE",{});var apa=s(l7e);rRr=r(apa,"model.eval()"),apa.forEach(t),tRr=r(Geo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i7e=n(Geo,"CODE",{});var npa=s(i7e);aRr=r(npa,"model.train()"),npa.forEach(t),Geo.forEach(t),nRr=i(za),T(X3.$$.fragment,za),za.forEach(t),li.forEach(t),ido=i(c),km=n(c,"H2",{class:!0});var kco=s(km);z3=n(kco,"A",{id:!0,class:!0,href:!0});var spa=s(z3);d7e=n(spa,"SPAN",{});var lpa=s(d7e);T(TR.$$.fragment,lpa),lpa.forEach(t),spa.forEach(t),sRr=i(kco),m7e=n(kco,"SPAN",{});var ipa=s(m7e);lRr=r(ipa,"AutoModelForVideoClassification"),ipa.forEach(t),kco.forEach(t),ddo=i(c),er=n(c,"DIV",{class:!0});var ii=s(er);T(MR.$$.fragment,ii),iRr=i(ii),Sm=n(ii,"P",{});var cge=s(Sm);dRr=r(cge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),Jre=n(cge,"A",{href:!0});var dpa=s(Jre);mRr=r(dpa,"from_pretrained()"),dpa.forEach(t),cRr=r(cge," class method or the "),Yre=n(cge,"A",{href:!0});var mpa=s(Yre);fRr=r(mpa,"from_config()"),mpa.forEach(t),gRr=r(cge,` class
method.`),cge.forEach(t),hRr=i(ii),ER=n(ii,"P",{});var Sco=s(ER);uRr=r(Sco,"This class cannot be instantiated directly using "),c7e=n(Sco,"CODE",{});var cpa=s(c7e);pRr=r(cpa,"__init__()"),cpa.forEach(t),_Rr=r(Sco," (throws an error)."),Sco.forEach(t),bRr=i(ii),Gt=n(ii,"DIV",{class:!0});var zx=s(Gt);T(CR.$$.fragment,zx),vRr=i(zx),f7e=n(zx,"P",{});var fpa=s(f7e);FRr=r(fpa,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),fpa.forEach(t),TRr=i(zx),Rm=n(zx,"P",{});var fge=s(Rm);MRr=r(fge,`Note:
Loading a model from its configuration file does `),g7e=n(fge,"STRONG",{});var gpa=s(g7e);ERr=r(gpa,"not"),gpa.forEach(t),CRr=r(fge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zre=n(fge,"A",{href:!0});var hpa=s(Zre);wRr=r(hpa,"from_pretrained()"),hpa.forEach(t),ARr=r(fge," to load the model weights."),fge.forEach(t),LRr=i(zx),T(Q3.$$.fragment,zx),zx.forEach(t),yRr=i(ii),bo=n(ii,"DIV",{class:!0});var Qa=s(bo);T(wR.$$.fragment,Qa),xRr=i(Qa),h7e=n(Qa,"P",{});var upa=s(h7e);$Rr=r(upa,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),upa.forEach(t),kRr=i(Qa),Ln=n(Qa,"P",{});var Qx=s(Ln);SRr=r(Qx,"The model class to instantiate is selected based on the "),u7e=n(Qx,"CODE",{});var ppa=s(u7e);RRr=r(ppa,"model_type"),ppa.forEach(t),PRr=r(Qx,` property of the config object (either
passed as an argument or loaded from `),p7e=n(Qx,"CODE",{});var _pa=s(p7e);BRr=r(_pa,"pretrained_model_name_or_path"),_pa.forEach(t),IRr=r(Qx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_7e=n(Qx,"CODE",{});var bpa=s(_7e);NRr=r(bpa,"pretrained_model_name_or_path"),bpa.forEach(t),qRr=r(Qx,":"),Qx.forEach(t),jRr=i(Qa),b7e=n(Qa,"UL",{});var vpa=s(b7e);W3=n(vpa,"LI",{});var Oeo=s(W3);v7e=n(Oeo,"STRONG",{});var Fpa=s(v7e);DRr=r(Fpa,"videomae"),Fpa.forEach(t),GRr=r(Oeo," \u2014 "),Kre=n(Oeo,"A",{href:!0});var Tpa=s(Kre);ORr=r(Tpa,"VideoMAEForVideoClassification"),Tpa.forEach(t),VRr=r(Oeo," (VideoMAE model)"),Oeo.forEach(t),vpa.forEach(t),XRr=i(Qa),U3=n(Qa,"P",{});var Veo=s(U3);zRr=r(Veo,"The model is set in evaluation mode by default using "),F7e=n(Veo,"CODE",{});var Mpa=s(F7e);QRr=r(Mpa,"model.eval()"),Mpa.forEach(t),WRr=r(Veo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T7e=n(Veo,"CODE",{});var Epa=s(T7e);URr=r(Epa,"model.train()"),Epa.forEach(t),Veo.forEach(t),HRr=i(Qa),T(H3.$$.fragment,Qa),Qa.forEach(t),ii.forEach(t),mdo=i(c),Pm=n(c,"H2",{class:!0});var Rco=s(Pm);J3=n(Rco,"A",{id:!0,class:!0,href:!0});var Cpa=s(J3);M7e=n(Cpa,"SPAN",{});var wpa=s(M7e);T(AR.$$.fragment,wpa),wpa.forEach(t),Cpa.forEach(t),JRr=i(Rco),E7e=n(Rco,"SPAN",{});var Apa=s(E7e);YRr=r(Apa,"AutoModelForVision2Seq"),Apa.forEach(t),Rco.forEach(t),cdo=i(c),or=n(c,"DIV",{class:!0});var di=s(or);T(LR.$$.fragment,di),ZRr=i(di),Bm=n(di,"P",{});var gge=s(Bm);KRr=r(gge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ete=n(gge,"A",{href:!0});var Lpa=s(ete);ePr=r(Lpa,"from_pretrained()"),Lpa.forEach(t),oPr=r(gge," class method or the "),ote=n(gge,"A",{href:!0});var ypa=s(ote);rPr=r(ypa,"from_config()"),ypa.forEach(t),tPr=r(gge,` class
method.`),gge.forEach(t),aPr=i(di),yR=n(di,"P",{});var Pco=s(yR);nPr=r(Pco,"This class cannot be instantiated directly using "),C7e=n(Pco,"CODE",{});var xpa=s(C7e);sPr=r(xpa,"__init__()"),xpa.forEach(t),lPr=r(Pco," (throws an error)."),Pco.forEach(t),iPr=i(di),Ot=n(di,"DIV",{class:!0});var Wx=s(Ot);T(xR.$$.fragment,Wx),dPr=i(Wx),w7e=n(Wx,"P",{});var $pa=s(w7e);mPr=r($pa,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$pa.forEach(t),cPr=i(Wx),Im=n(Wx,"P",{});var hge=s(Im);fPr=r(hge,`Note:
Loading a model from its configuration file does `),A7e=n(hge,"STRONG",{});var kpa=s(A7e);gPr=r(kpa,"not"),kpa.forEach(t),hPr=r(hge,` load the model weights. It only affects the
model\u2019s configuration. Use `),rte=n(hge,"A",{href:!0});var Spa=s(rte);uPr=r(Spa,"from_pretrained()"),Spa.forEach(t),pPr=r(hge," to load the model weights."),hge.forEach(t),_Pr=i(Wx),T(Y3.$$.fragment,Wx),Wx.forEach(t),bPr=i(di),vo=n(di,"DIV",{class:!0});var Wa=s(vo);T($R.$$.fragment,Wa),vPr=i(Wa),L7e=n(Wa,"P",{});var Rpa=s(L7e);FPr=r(Rpa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Rpa.forEach(t),TPr=i(Wa),yn=n(Wa,"P",{});var Ux=s(yn);MPr=r(Ux,"The model class to instantiate is selected based on the "),y7e=n(Ux,"CODE",{});var Ppa=s(y7e);EPr=r(Ppa,"model_type"),Ppa.forEach(t),CPr=r(Ux,` property of the config object (either
passed as an argument or loaded from `),x7e=n(Ux,"CODE",{});var Bpa=s(x7e);wPr=r(Bpa,"pretrained_model_name_or_path"),Bpa.forEach(t),APr=r(Ux,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=n(Ux,"CODE",{});var Ipa=s($7e);LPr=r(Ipa,"pretrained_model_name_or_path"),Ipa.forEach(t),yPr=r(Ux,":"),Ux.forEach(t),xPr=i(Wa),k7e=n(Wa,"UL",{});var Npa=s(k7e);Z3=n(Npa,"LI",{});var Xeo=s(Z3);S7e=n(Xeo,"STRONG",{});var qpa=s(S7e);$Pr=r(qpa,"vision-encoder-decoder"),qpa.forEach(t),kPr=r(Xeo," \u2014 "),tte=n(Xeo,"A",{href:!0});var jpa=s(tte);SPr=r(jpa,"VisionEncoderDecoderModel"),jpa.forEach(t),RPr=r(Xeo," (Vision Encoder decoder model)"),Xeo.forEach(t),Npa.forEach(t),PPr=i(Wa),K3=n(Wa,"P",{});var zeo=s(K3);BPr=r(zeo,"The model is set in evaluation mode by default using "),R7e=n(zeo,"CODE",{});var Dpa=s(R7e);IPr=r(Dpa,"model.eval()"),Dpa.forEach(t),NPr=r(zeo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P7e=n(zeo,"CODE",{});var Gpa=s(P7e);qPr=r(Gpa,"model.train()"),Gpa.forEach(t),zeo.forEach(t),jPr=i(Wa),T(e5.$$.fragment,Wa),Wa.forEach(t),di.forEach(t),fdo=i(c),Nm=n(c,"H2",{class:!0});var Bco=s(Nm);o5=n(Bco,"A",{id:!0,class:!0,href:!0});var Opa=s(o5);B7e=n(Opa,"SPAN",{});var Vpa=s(B7e);T(kR.$$.fragment,Vpa),Vpa.forEach(t),Opa.forEach(t),DPr=i(Bco),I7e=n(Bco,"SPAN",{});var Xpa=s(I7e);GPr=r(Xpa,"AutoModelForVisualQuestionAnswering"),Xpa.forEach(t),Bco.forEach(t),gdo=i(c),rr=n(c,"DIV",{class:!0});var mi=s(rr);T(SR.$$.fragment,mi),OPr=i(mi),qm=n(mi,"P",{});var uge=s(qm);VPr=r(uge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),ate=n(uge,"A",{href:!0});var zpa=s(ate);XPr=r(zpa,"from_pretrained()"),zpa.forEach(t),zPr=r(uge," class method or the "),nte=n(uge,"A",{href:!0});var Qpa=s(nte);QPr=r(Qpa,"from_config()"),Qpa.forEach(t),WPr=r(uge,` class
method.`),uge.forEach(t),UPr=i(mi),RR=n(mi,"P",{});var Ico=s(RR);HPr=r(Ico,"This class cannot be instantiated directly using "),N7e=n(Ico,"CODE",{});var Wpa=s(N7e);JPr=r(Wpa,"__init__()"),Wpa.forEach(t),YPr=r(Ico," (throws an error)."),Ico.forEach(t),ZPr=i(mi),Vt=n(mi,"DIV",{class:!0});var Hx=s(Vt);T(PR.$$.fragment,Hx),KPr=i(Hx),q7e=n(Hx,"P",{});var Upa=s(q7e);eBr=r(Upa,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Upa.forEach(t),oBr=i(Hx),jm=n(Hx,"P",{});var pge=s(jm);rBr=r(pge,`Note:
Loading a model from its configuration file does `),j7e=n(pge,"STRONG",{});var Hpa=s(j7e);tBr=r(Hpa,"not"),Hpa.forEach(t),aBr=r(pge,` load the model weights. It only affects the
model\u2019s configuration. Use `),ste=n(pge,"A",{href:!0});var Jpa=s(ste);nBr=r(Jpa,"from_pretrained()"),Jpa.forEach(t),sBr=r(pge," to load the model weights."),pge.forEach(t),lBr=i(Hx),T(r5.$$.fragment,Hx),Hx.forEach(t),iBr=i(mi),Fo=n(mi,"DIV",{class:!0});var Ua=s(Fo);T(BR.$$.fragment,Ua),dBr=i(Ua),D7e=n(Ua,"P",{});var Ypa=s(D7e);mBr=r(Ypa,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Ypa.forEach(t),cBr=i(Ua),xn=n(Ua,"P",{});var Jx=s(xn);fBr=r(Jx,"The model class to instantiate is selected based on the "),G7e=n(Jx,"CODE",{});var Zpa=s(G7e);gBr=r(Zpa,"model_type"),Zpa.forEach(t),hBr=r(Jx,` property of the config object (either
passed as an argument or loaded from `),O7e=n(Jx,"CODE",{});var Kpa=s(O7e);uBr=r(Kpa,"pretrained_model_name_or_path"),Kpa.forEach(t),pBr=r(Jx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=n(Jx,"CODE",{});var e_a=s(V7e);_Br=r(e_a,"pretrained_model_name_or_path"),e_a.forEach(t),bBr=r(Jx,":"),Jx.forEach(t),vBr=i(Ua),X7e=n(Ua,"UL",{});var o_a=s(X7e);t5=n(o_a,"LI",{});var Qeo=s(t5);z7e=n(Qeo,"STRONG",{});var r_a=s(z7e);FBr=r(r_a,"vilt"),r_a.forEach(t),TBr=r(Qeo," \u2014 "),lte=n(Qeo,"A",{href:!0});var t_a=s(lte);MBr=r(t_a,"ViltForQuestionAnswering"),t_a.forEach(t),EBr=r(Qeo," (ViLT model)"),Qeo.forEach(t),o_a.forEach(t),CBr=i(Ua),a5=n(Ua,"P",{});var Weo=s(a5);wBr=r(Weo,"The model is set in evaluation mode by default using "),Q7e=n(Weo,"CODE",{});var a_a=s(Q7e);ABr=r(a_a,"model.eval()"),a_a.forEach(t),LBr=r(Weo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W7e=n(Weo,"CODE",{});var n_a=s(W7e);yBr=r(n_a,"model.train()"),n_a.forEach(t),Weo.forEach(t),xBr=i(Ua),T(n5.$$.fragment,Ua),Ua.forEach(t),mi.forEach(t),hdo=i(c),Dm=n(c,"H2",{class:!0});var Nco=s(Dm);s5=n(Nco,"A",{id:!0,class:!0,href:!0});var s_a=s(s5);U7e=n(s_a,"SPAN",{});var l_a=s(U7e);T(IR.$$.fragment,l_a),l_a.forEach(t),s_a.forEach(t),$Br=i(Nco),H7e=n(Nco,"SPAN",{});var i_a=s(H7e);kBr=r(i_a,"AutoModelForAudioClassification"),i_a.forEach(t),Nco.forEach(t),udo=i(c),tr=n(c,"DIV",{class:!0});var ci=s(tr);T(NR.$$.fragment,ci),SBr=i(ci),Gm=n(ci,"P",{});var _ge=s(Gm);RBr=r(_ge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ite=n(_ge,"A",{href:!0});var d_a=s(ite);PBr=r(d_a,"from_pretrained()"),d_a.forEach(t),BBr=r(_ge," class method or the "),dte=n(_ge,"A",{href:!0});var m_a=s(dte);IBr=r(m_a,"from_config()"),m_a.forEach(t),NBr=r(_ge,` class
method.`),_ge.forEach(t),qBr=i(ci),qR=n(ci,"P",{});var qco=s(qR);jBr=r(qco,"This class cannot be instantiated directly using "),J7e=n(qco,"CODE",{});var c_a=s(J7e);DBr=r(c_a,"__init__()"),c_a.forEach(t),GBr=r(qco," (throws an error)."),qco.forEach(t),OBr=i(ci),Xt=n(ci,"DIV",{class:!0});var Yx=s(Xt);T(jR.$$.fragment,Yx),VBr=i(Yx),Y7e=n(Yx,"P",{});var f_a=s(Y7e);XBr=r(f_a,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),f_a.forEach(t),zBr=i(Yx),Om=n(Yx,"P",{});var bge=s(Om);QBr=r(bge,`Note:
Loading a model from its configuration file does `),Z7e=n(bge,"STRONG",{});var g_a=s(Z7e);WBr=r(g_a,"not"),g_a.forEach(t),UBr=r(bge,` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=n(bge,"A",{href:!0});var h_a=s(mte);HBr=r(h_a,"from_pretrained()"),h_a.forEach(t),JBr=r(bge," to load the model weights."),bge.forEach(t),YBr=i(Yx),T(l5.$$.fragment,Yx),Yx.forEach(t),ZBr=i(ci),To=n(ci,"DIV",{class:!0});var Ha=s(To);T(DR.$$.fragment,Ha),KBr=i(Ha),K7e=n(Ha,"P",{});var u_a=s(K7e);eIr=r(u_a,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),u_a.forEach(t),oIr=i(Ha),$n=n(Ha,"P",{});var Zx=s($n);rIr=r(Zx,"The model class to instantiate is selected based on the "),e8e=n(Zx,"CODE",{});var p_a=s(e8e);tIr=r(p_a,"model_type"),p_a.forEach(t),aIr=r(Zx,` property of the config object (either
passed as an argument or loaded from `),o8e=n(Zx,"CODE",{});var __a=s(o8e);nIr=r(__a,"pretrained_model_name_or_path"),__a.forEach(t),sIr=r(Zx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r8e=n(Zx,"CODE",{});var b_a=s(r8e);lIr=r(b_a,"pretrained_model_name_or_path"),b_a.forEach(t),iIr=r(Zx,":"),Zx.forEach(t),dIr=i(Ha),Ne=n(Ha,"UL",{});var Je=s(Ne);i5=n(Je,"LI",{});var Ueo=s(i5);t8e=n(Ueo,"STRONG",{});var v_a=s(t8e);mIr=r(v_a,"data2vec-audio"),v_a.forEach(t),cIr=r(Ueo," \u2014 "),cte=n(Ueo,"A",{href:!0});var F_a=s(cte);fIr=r(F_a,"Data2VecAudioForSequenceClassification"),F_a.forEach(t),gIr=r(Ueo," (Data2VecAudio model)"),Ueo.forEach(t),hIr=i(Je),d5=n(Je,"LI",{});var Heo=s(d5);a8e=n(Heo,"STRONG",{});var T_a=s(a8e);uIr=r(T_a,"hubert"),T_a.forEach(t),pIr=r(Heo," \u2014 "),fte=n(Heo,"A",{href:!0});var M_a=s(fte);_Ir=r(M_a,"HubertForSequenceClassification"),M_a.forEach(t),bIr=r(Heo," (Hubert model)"),Heo.forEach(t),vIr=i(Je),m5=n(Je,"LI",{});var Jeo=s(m5);n8e=n(Jeo,"STRONG",{});var E_a=s(n8e);FIr=r(E_a,"sew"),E_a.forEach(t),TIr=r(Jeo," \u2014 "),gte=n(Jeo,"A",{href:!0});var C_a=s(gte);MIr=r(C_a,"SEWForSequenceClassification"),C_a.forEach(t),EIr=r(Jeo," (SEW model)"),Jeo.forEach(t),CIr=i(Je),c5=n(Je,"LI",{});var Yeo=s(c5);s8e=n(Yeo,"STRONG",{});var w_a=s(s8e);wIr=r(w_a,"sew-d"),w_a.forEach(t),AIr=r(Yeo," \u2014 "),hte=n(Yeo,"A",{href:!0});var A_a=s(hte);LIr=r(A_a,"SEWDForSequenceClassification"),A_a.forEach(t),yIr=r(Yeo," (SEW-D model)"),Yeo.forEach(t),xIr=i(Je),f5=n(Je,"LI",{});var Zeo=s(f5);l8e=n(Zeo,"STRONG",{});var L_a=s(l8e);$Ir=r(L_a,"unispeech"),L_a.forEach(t),kIr=r(Zeo," \u2014 "),ute=n(Zeo,"A",{href:!0});var y_a=s(ute);SIr=r(y_a,"UniSpeechForSequenceClassification"),y_a.forEach(t),RIr=r(Zeo," (UniSpeech model)"),Zeo.forEach(t),PIr=i(Je),g5=n(Je,"LI",{});var Keo=s(g5);i8e=n(Keo,"STRONG",{});var x_a=s(i8e);BIr=r(x_a,"unispeech-sat"),x_a.forEach(t),IIr=r(Keo," \u2014 "),pte=n(Keo,"A",{href:!0});var $_a=s(pte);NIr=r($_a,"UniSpeechSatForSequenceClassification"),$_a.forEach(t),qIr=r(Keo," (UniSpeechSat model)"),Keo.forEach(t),jIr=i(Je),h5=n(Je,"LI",{});var eoo=s(h5);d8e=n(eoo,"STRONG",{});var k_a=s(d8e);DIr=r(k_a,"wav2vec2"),k_a.forEach(t),GIr=r(eoo," \u2014 "),_te=n(eoo,"A",{href:!0});var S_a=s(_te);OIr=r(S_a,"Wav2Vec2ForSequenceClassification"),S_a.forEach(t),VIr=r(eoo," (Wav2Vec2 model)"),eoo.forEach(t),XIr=i(Je),u5=n(Je,"LI",{});var ooo=s(u5);m8e=n(ooo,"STRONG",{});var R_a=s(m8e);zIr=r(R_a,"wav2vec2-conformer"),R_a.forEach(t),QIr=r(ooo," \u2014 "),bte=n(ooo,"A",{href:!0});var P_a=s(bte);WIr=r(P_a,"Wav2Vec2ConformerForSequenceClassification"),P_a.forEach(t),UIr=r(ooo," (Wav2Vec2-Conformer model)"),ooo.forEach(t),HIr=i(Je),p5=n(Je,"LI",{});var roo=s(p5);c8e=n(roo,"STRONG",{});var B_a=s(c8e);JIr=r(B_a,"wavlm"),B_a.forEach(t),YIr=r(roo," \u2014 "),vte=n(roo,"A",{href:!0});var I_a=s(vte);ZIr=r(I_a,"WavLMForSequenceClassification"),I_a.forEach(t),KIr=r(roo," (WavLM model)"),roo.forEach(t),Je.forEach(t),eNr=i(Ha),_5=n(Ha,"P",{});var too=s(_5);oNr=r(too,"The model is set in evaluation mode by default using "),f8e=n(too,"CODE",{});var N_a=s(f8e);rNr=r(N_a,"model.eval()"),N_a.forEach(t),tNr=r(too,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g8e=n(too,"CODE",{});var q_a=s(g8e);aNr=r(q_a,"model.train()"),q_a.forEach(t),too.forEach(t),nNr=i(Ha),T(b5.$$.fragment,Ha),Ha.forEach(t),ci.forEach(t),pdo=i(c),Vm=n(c,"H2",{class:!0});var jco=s(Vm);v5=n(jco,"A",{id:!0,class:!0,href:!0});var j_a=s(v5);h8e=n(j_a,"SPAN",{});var D_a=s(h8e);T(GR.$$.fragment,D_a),D_a.forEach(t),j_a.forEach(t),sNr=i(jco),u8e=n(jco,"SPAN",{});var G_a=s(u8e);lNr=r(G_a,"AutoModelForAudioFrameClassification"),G_a.forEach(t),jco.forEach(t),_do=i(c),ar=n(c,"DIV",{class:!0});var fi=s(ar);T(OR.$$.fragment,fi),iNr=i(fi),Xm=n(fi,"P",{});var vge=s(Xm);dNr=r(vge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Fte=n(vge,"A",{href:!0});var O_a=s(Fte);mNr=r(O_a,"from_pretrained()"),O_a.forEach(t),cNr=r(vge," class method or the "),Tte=n(vge,"A",{href:!0});var V_a=s(Tte);fNr=r(V_a,"from_config()"),V_a.forEach(t),gNr=r(vge,` class
method.`),vge.forEach(t),hNr=i(fi),VR=n(fi,"P",{});var Dco=s(VR);uNr=r(Dco,"This class cannot be instantiated directly using "),p8e=n(Dco,"CODE",{});var X_a=s(p8e);pNr=r(X_a,"__init__()"),X_a.forEach(t),_Nr=r(Dco," (throws an error)."),Dco.forEach(t),bNr=i(fi),zt=n(fi,"DIV",{class:!0});var Kx=s(zt);T(XR.$$.fragment,Kx),vNr=i(Kx),_8e=n(Kx,"P",{});var z_a=s(_8e);FNr=r(z_a,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),z_a.forEach(t),TNr=i(Kx),zm=n(Kx,"P",{});var Fge=s(zm);MNr=r(Fge,`Note:
Loading a model from its configuration file does `),b8e=n(Fge,"STRONG",{});var Q_a=s(b8e);ENr=r(Q_a,"not"),Q_a.forEach(t),CNr=r(Fge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mte=n(Fge,"A",{href:!0});var W_a=s(Mte);wNr=r(W_a,"from_pretrained()"),W_a.forEach(t),ANr=r(Fge," to load the model weights."),Fge.forEach(t),LNr=i(Kx),T(F5.$$.fragment,Kx),Kx.forEach(t),yNr=i(fi),Mo=n(fi,"DIV",{class:!0});var Ja=s(Mo);T(zR.$$.fragment,Ja),xNr=i(Ja),v8e=n(Ja,"P",{});var U_a=s(v8e);$Nr=r(U_a,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),U_a.forEach(t),kNr=i(Ja),kn=n(Ja,"P",{});var e$=s(kn);SNr=r(e$,"The model class to instantiate is selected based on the "),F8e=n(e$,"CODE",{});var H_a=s(F8e);RNr=r(H_a,"model_type"),H_a.forEach(t),PNr=r(e$,` property of the config object (either
passed as an argument or loaded from `),T8e=n(e$,"CODE",{});var J_a=s(T8e);BNr=r(J_a,"pretrained_model_name_or_path"),J_a.forEach(t),INr=r(e$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M8e=n(e$,"CODE",{});var Y_a=s(M8e);NNr=r(Y_a,"pretrained_model_name_or_path"),Y_a.forEach(t),qNr=r(e$,":"),e$.forEach(t),jNr=i(Ja),Ft=n(Ja,"UL",{});var gi=s(Ft);T5=n(gi,"LI",{});var aoo=s(T5);E8e=n(aoo,"STRONG",{});var Z_a=s(E8e);DNr=r(Z_a,"data2vec-audio"),Z_a.forEach(t),GNr=r(aoo," \u2014 "),Ete=n(aoo,"A",{href:!0});var K_a=s(Ete);ONr=r(K_a,"Data2VecAudioForAudioFrameClassification"),K_a.forEach(t),VNr=r(aoo," (Data2VecAudio model)"),aoo.forEach(t),XNr=i(gi),M5=n(gi,"LI",{});var noo=s(M5);C8e=n(noo,"STRONG",{});var e1a=s(C8e);zNr=r(e1a,"unispeech-sat"),e1a.forEach(t),QNr=r(noo," \u2014 "),Cte=n(noo,"A",{href:!0});var o1a=s(Cte);WNr=r(o1a,"UniSpeechSatForAudioFrameClassification"),o1a.forEach(t),UNr=r(noo," (UniSpeechSat model)"),noo.forEach(t),HNr=i(gi),E5=n(gi,"LI",{});var soo=s(E5);w8e=n(soo,"STRONG",{});var r1a=s(w8e);JNr=r(r1a,"wav2vec2"),r1a.forEach(t),YNr=r(soo," \u2014 "),wte=n(soo,"A",{href:!0});var t1a=s(wte);ZNr=r(t1a,"Wav2Vec2ForAudioFrameClassification"),t1a.forEach(t),KNr=r(soo," (Wav2Vec2 model)"),soo.forEach(t),eqr=i(gi),C5=n(gi,"LI",{});var loo=s(C5);A8e=n(loo,"STRONG",{});var a1a=s(A8e);oqr=r(a1a,"wav2vec2-conformer"),a1a.forEach(t),rqr=r(loo," \u2014 "),Ate=n(loo,"A",{href:!0});var n1a=s(Ate);tqr=r(n1a,"Wav2Vec2ConformerForAudioFrameClassification"),n1a.forEach(t),aqr=r(loo," (Wav2Vec2-Conformer model)"),loo.forEach(t),nqr=i(gi),w5=n(gi,"LI",{});var ioo=s(w5);L8e=n(ioo,"STRONG",{});var s1a=s(L8e);sqr=r(s1a,"wavlm"),s1a.forEach(t),lqr=r(ioo," \u2014 "),Lte=n(ioo,"A",{href:!0});var l1a=s(Lte);iqr=r(l1a,"WavLMForAudioFrameClassification"),l1a.forEach(t),dqr=r(ioo," (WavLM model)"),ioo.forEach(t),gi.forEach(t),mqr=i(Ja),A5=n(Ja,"P",{});var doo=s(A5);cqr=r(doo,"The model is set in evaluation mode by default using "),y8e=n(doo,"CODE",{});var i1a=s(y8e);fqr=r(i1a,"model.eval()"),i1a.forEach(t),gqr=r(doo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x8e=n(doo,"CODE",{});var d1a=s(x8e);hqr=r(d1a,"model.train()"),d1a.forEach(t),doo.forEach(t),uqr=i(Ja),T(L5.$$.fragment,Ja),Ja.forEach(t),fi.forEach(t),bdo=i(c),Qm=n(c,"H2",{class:!0});var Gco=s(Qm);y5=n(Gco,"A",{id:!0,class:!0,href:!0});var m1a=s(y5);$8e=n(m1a,"SPAN",{});var c1a=s($8e);T(QR.$$.fragment,c1a),c1a.forEach(t),m1a.forEach(t),pqr=i(Gco),k8e=n(Gco,"SPAN",{});var f1a=s(k8e);_qr=r(f1a,"AutoModelForCTC"),f1a.forEach(t),Gco.forEach(t),vdo=i(c),nr=n(c,"DIV",{class:!0});var hi=s(nr);T(WR.$$.fragment,hi),bqr=i(hi),Wm=n(hi,"P",{});var Tge=s(Wm);vqr=r(Tge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yte=n(Tge,"A",{href:!0});var g1a=s(yte);Fqr=r(g1a,"from_pretrained()"),g1a.forEach(t),Tqr=r(Tge," class method or the "),xte=n(Tge,"A",{href:!0});var h1a=s(xte);Mqr=r(h1a,"from_config()"),h1a.forEach(t),Eqr=r(Tge,` class
method.`),Tge.forEach(t),Cqr=i(hi),UR=n(hi,"P",{});var Oco=s(UR);wqr=r(Oco,"This class cannot be instantiated directly using "),S8e=n(Oco,"CODE",{});var u1a=s(S8e);Aqr=r(u1a,"__init__()"),u1a.forEach(t),Lqr=r(Oco," (throws an error)."),Oco.forEach(t),yqr=i(hi),Qt=n(hi,"DIV",{class:!0});var o$=s(Qt);T(HR.$$.fragment,o$),xqr=i(o$),R8e=n(o$,"P",{});var p1a=s(R8e);$qr=r(p1a,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),p1a.forEach(t),kqr=i(o$),Um=n(o$,"P",{});var Mge=s(Um);Sqr=r(Mge,`Note:
Loading a model from its configuration file does `),P8e=n(Mge,"STRONG",{});var _1a=s(P8e);Rqr=r(_1a,"not"),_1a.forEach(t),Pqr=r(Mge,` load the model weights. It only affects the
model\u2019s configuration. Use `),$te=n(Mge,"A",{href:!0});var b1a=s($te);Bqr=r(b1a,"from_pretrained()"),b1a.forEach(t),Iqr=r(Mge," to load the model weights."),Mge.forEach(t),Nqr=i(o$),T(x5.$$.fragment,o$),o$.forEach(t),qqr=i(hi),Eo=n(hi,"DIV",{class:!0});var Ya=s(Eo);T(JR.$$.fragment,Ya),jqr=i(Ya),B8e=n(Ya,"P",{});var v1a=s(B8e);Dqr=r(v1a,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),v1a.forEach(t),Gqr=i(Ya),Sn=n(Ya,"P",{});var r$=s(Sn);Oqr=r(r$,"The model class to instantiate is selected based on the "),I8e=n(r$,"CODE",{});var F1a=s(I8e);Vqr=r(F1a,"model_type"),F1a.forEach(t),Xqr=r(r$,` property of the config object (either
passed as an argument or loaded from `),N8e=n(r$,"CODE",{});var T1a=s(N8e);zqr=r(T1a,"pretrained_model_name_or_path"),T1a.forEach(t),Qqr=r(r$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q8e=n(r$,"CODE",{});var M1a=s(q8e);Wqr=r(M1a,"pretrained_model_name_or_path"),M1a.forEach(t),Uqr=r(r$,":"),r$.forEach(t),Hqr=i(Ya),xe=n(Ya,"UL",{});var qe=s(xe);$5=n(qe,"LI",{});var moo=s($5);j8e=n(moo,"STRONG",{});var E1a=s(j8e);Jqr=r(E1a,"data2vec-audio"),E1a.forEach(t),Yqr=r(moo," \u2014 "),kte=n(moo,"A",{href:!0});var C1a=s(kte);Zqr=r(C1a,"Data2VecAudioForCTC"),C1a.forEach(t),Kqr=r(moo," (Data2VecAudio model)"),moo.forEach(t),ejr=i(qe),k5=n(qe,"LI",{});var coo=s(k5);D8e=n(coo,"STRONG",{});var w1a=s(D8e);ojr=r(w1a,"hubert"),w1a.forEach(t),rjr=r(coo," \u2014 "),Ste=n(coo,"A",{href:!0});var A1a=s(Ste);tjr=r(A1a,"HubertForCTC"),A1a.forEach(t),ajr=r(coo," (Hubert model)"),coo.forEach(t),njr=i(qe),S5=n(qe,"LI",{});var foo=s(S5);G8e=n(foo,"STRONG",{});var L1a=s(G8e);sjr=r(L1a,"mctct"),L1a.forEach(t),ljr=r(foo," \u2014 "),Rte=n(foo,"A",{href:!0});var y1a=s(Rte);ijr=r(y1a,"MCTCTForCTC"),y1a.forEach(t),djr=r(foo," (M-CTC-T model)"),foo.forEach(t),mjr=i(qe),R5=n(qe,"LI",{});var goo=s(R5);O8e=n(goo,"STRONG",{});var x1a=s(O8e);cjr=r(x1a,"sew"),x1a.forEach(t),fjr=r(goo," \u2014 "),Pte=n(goo,"A",{href:!0});var $1a=s(Pte);gjr=r($1a,"SEWForCTC"),$1a.forEach(t),hjr=r(goo," (SEW model)"),goo.forEach(t),ujr=i(qe),P5=n(qe,"LI",{});var hoo=s(P5);V8e=n(hoo,"STRONG",{});var k1a=s(V8e);pjr=r(k1a,"sew-d"),k1a.forEach(t),_jr=r(hoo," \u2014 "),Bte=n(hoo,"A",{href:!0});var S1a=s(Bte);bjr=r(S1a,"SEWDForCTC"),S1a.forEach(t),vjr=r(hoo," (SEW-D model)"),hoo.forEach(t),Fjr=i(qe),B5=n(qe,"LI",{});var uoo=s(B5);X8e=n(uoo,"STRONG",{});var R1a=s(X8e);Tjr=r(R1a,"unispeech"),R1a.forEach(t),Mjr=r(uoo," \u2014 "),Ite=n(uoo,"A",{href:!0});var P1a=s(Ite);Ejr=r(P1a,"UniSpeechForCTC"),P1a.forEach(t),Cjr=r(uoo," (UniSpeech model)"),uoo.forEach(t),wjr=i(qe),I5=n(qe,"LI",{});var poo=s(I5);z8e=n(poo,"STRONG",{});var B1a=s(z8e);Ajr=r(B1a,"unispeech-sat"),B1a.forEach(t),Ljr=r(poo," \u2014 "),Nte=n(poo,"A",{href:!0});var I1a=s(Nte);yjr=r(I1a,"UniSpeechSatForCTC"),I1a.forEach(t),xjr=r(poo," (UniSpeechSat model)"),poo.forEach(t),$jr=i(qe),N5=n(qe,"LI",{});var _oo=s(N5);Q8e=n(_oo,"STRONG",{});var N1a=s(Q8e);kjr=r(N1a,"wav2vec2"),N1a.forEach(t),Sjr=r(_oo," \u2014 "),qte=n(_oo,"A",{href:!0});var q1a=s(qte);Rjr=r(q1a,"Wav2Vec2ForCTC"),q1a.forEach(t),Pjr=r(_oo," (Wav2Vec2 model)"),_oo.forEach(t),Bjr=i(qe),q5=n(qe,"LI",{});var boo=s(q5);W8e=n(boo,"STRONG",{});var j1a=s(W8e);Ijr=r(j1a,"wav2vec2-conformer"),j1a.forEach(t),Njr=r(boo," \u2014 "),jte=n(boo,"A",{href:!0});var D1a=s(jte);qjr=r(D1a,"Wav2Vec2ConformerForCTC"),D1a.forEach(t),jjr=r(boo," (Wav2Vec2-Conformer model)"),boo.forEach(t),Djr=i(qe),j5=n(qe,"LI",{});var voo=s(j5);U8e=n(voo,"STRONG",{});var G1a=s(U8e);Gjr=r(G1a,"wavlm"),G1a.forEach(t),Ojr=r(voo," \u2014 "),Dte=n(voo,"A",{href:!0});var O1a=s(Dte);Vjr=r(O1a,"WavLMForCTC"),O1a.forEach(t),Xjr=r(voo," (WavLM model)"),voo.forEach(t),qe.forEach(t),zjr=i(Ya),D5=n(Ya,"P",{});var Foo=s(D5);Qjr=r(Foo,"The model is set in evaluation mode by default using "),H8e=n(Foo,"CODE",{});var V1a=s(H8e);Wjr=r(V1a,"model.eval()"),V1a.forEach(t),Ujr=r(Foo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J8e=n(Foo,"CODE",{});var X1a=s(J8e);Hjr=r(X1a,"model.train()"),X1a.forEach(t),Foo.forEach(t),Jjr=i(Ya),T(G5.$$.fragment,Ya),Ya.forEach(t),hi.forEach(t),Fdo=i(c),Hm=n(c,"H2",{class:!0});var Vco=s(Hm);O5=n(Vco,"A",{id:!0,class:!0,href:!0});var z1a=s(O5);Y8e=n(z1a,"SPAN",{});var Q1a=s(Y8e);T(YR.$$.fragment,Q1a),Q1a.forEach(t),z1a.forEach(t),Yjr=i(Vco),Z8e=n(Vco,"SPAN",{});var W1a=s(Z8e);Zjr=r(W1a,"AutoModelForSpeechSeq2Seq"),W1a.forEach(t),Vco.forEach(t),Tdo=i(c),sr=n(c,"DIV",{class:!0});var ui=s(sr);T(ZR.$$.fragment,ui),Kjr=i(ui),Jm=n(ui,"P",{});var Ege=s(Jm);eDr=r(Ege,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Gte=n(Ege,"A",{href:!0});var U1a=s(Gte);oDr=r(U1a,"from_pretrained()"),U1a.forEach(t),rDr=r(Ege," class method or the "),Ote=n(Ege,"A",{href:!0});var H1a=s(Ote);tDr=r(H1a,"from_config()"),H1a.forEach(t),aDr=r(Ege,` class
method.`),Ege.forEach(t),nDr=i(ui),KR=n(ui,"P",{});var Xco=s(KR);sDr=r(Xco,"This class cannot be instantiated directly using "),K8e=n(Xco,"CODE",{});var J1a=s(K8e);lDr=r(J1a,"__init__()"),J1a.forEach(t),iDr=r(Xco," (throws an error)."),Xco.forEach(t),dDr=i(ui),Wt=n(ui,"DIV",{class:!0});var t$=s(Wt);T(eP.$$.fragment,t$),mDr=i(t$),eLe=n(t$,"P",{});var Y1a=s(eLe);cDr=r(Y1a,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Y1a.forEach(t),fDr=i(t$),Ym=n(t$,"P",{});var Cge=s(Ym);gDr=r(Cge,`Note:
Loading a model from its configuration file does `),oLe=n(Cge,"STRONG",{});var Z1a=s(oLe);hDr=r(Z1a,"not"),Z1a.forEach(t),uDr=r(Cge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vte=n(Cge,"A",{href:!0});var K1a=s(Vte);pDr=r(K1a,"from_pretrained()"),K1a.forEach(t),_Dr=r(Cge," to load the model weights."),Cge.forEach(t),bDr=i(t$),T(V5.$$.fragment,t$),t$.forEach(t),vDr=i(ui),Co=n(ui,"DIV",{class:!0});var Za=s(Co);T(oP.$$.fragment,Za),FDr=i(Za),rLe=n(Za,"P",{});var e2a=s(rLe);TDr=r(e2a,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),e2a.forEach(t),MDr=i(Za),Rn=n(Za,"P",{});var a$=s(Rn);EDr=r(a$,"The model class to instantiate is selected based on the "),tLe=n(a$,"CODE",{});var o2a=s(tLe);CDr=r(o2a,"model_type"),o2a.forEach(t),wDr=r(a$,` property of the config object (either
passed as an argument or loaded from `),aLe=n(a$,"CODE",{});var r2a=s(aLe);ADr=r(r2a,"pretrained_model_name_or_path"),r2a.forEach(t),LDr=r(a$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nLe=n(a$,"CODE",{});var t2a=s(nLe);yDr=r(t2a,"pretrained_model_name_or_path"),t2a.forEach(t),xDr=r(a$,":"),a$.forEach(t),$Dr=i(Za),Zm=n(Za,"UL",{});var wge=s(Zm);X5=n(wge,"LI",{});var Too=s(X5);sLe=n(Too,"STRONG",{});var a2a=s(sLe);kDr=r(a2a,"speech-encoder-decoder"),a2a.forEach(t),SDr=r(Too," \u2014 "),Xte=n(Too,"A",{href:!0});var n2a=s(Xte);RDr=r(n2a,"SpeechEncoderDecoderModel"),n2a.forEach(t),PDr=r(Too," (Speech Encoder decoder model)"),Too.forEach(t),BDr=i(wge),z5=n(wge,"LI",{});var Moo=s(z5);lLe=n(Moo,"STRONG",{});var s2a=s(lLe);IDr=r(s2a,"speech_to_text"),s2a.forEach(t),NDr=r(Moo," \u2014 "),zte=n(Moo,"A",{href:!0});var l2a=s(zte);qDr=r(l2a,"Speech2TextForConditionalGeneration"),l2a.forEach(t),jDr=r(Moo," (Speech2Text model)"),Moo.forEach(t),DDr=i(wge),Q5=n(wge,"LI",{});var Eoo=s(Q5);iLe=n(Eoo,"STRONG",{});var i2a=s(iLe);GDr=r(i2a,"whisper"),i2a.forEach(t),ODr=r(Eoo," \u2014 "),Qte=n(Eoo,"A",{href:!0});var d2a=s(Qte);VDr=r(d2a,"WhisperForConditionalGeneration"),d2a.forEach(t),XDr=r(Eoo," (Whisper model)"),Eoo.forEach(t),wge.forEach(t),zDr=i(Za),W5=n(Za,"P",{});var Coo=s(W5);QDr=r(Coo,"The model is set in evaluation mode by default using "),dLe=n(Coo,"CODE",{});var m2a=s(dLe);WDr=r(m2a,"model.eval()"),m2a.forEach(t),UDr=r(Coo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mLe=n(Coo,"CODE",{});var c2a=s(mLe);HDr=r(c2a,"model.train()"),c2a.forEach(t),Coo.forEach(t),JDr=i(Za),T(U5.$$.fragment,Za),Za.forEach(t),ui.forEach(t),Mdo=i(c),Km=n(c,"H2",{class:!0});var zco=s(Km);H5=n(zco,"A",{id:!0,class:!0,href:!0});var f2a=s(H5);cLe=n(f2a,"SPAN",{});var g2a=s(cLe);T(rP.$$.fragment,g2a),g2a.forEach(t),f2a.forEach(t),YDr=i(zco),fLe=n(zco,"SPAN",{});var h2a=s(fLe);ZDr=r(h2a,"AutoModelForAudioXVector"),h2a.forEach(t),zco.forEach(t),Edo=i(c),lr=n(c,"DIV",{class:!0});var pi=s(lr);T(tP.$$.fragment,pi),KDr=i(pi),ec=n(pi,"P",{});var Age=s(ec);eGr=r(Age,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Wte=n(Age,"A",{href:!0});var u2a=s(Wte);oGr=r(u2a,"from_pretrained()"),u2a.forEach(t),rGr=r(Age," class method or the "),Ute=n(Age,"A",{href:!0});var p2a=s(Ute);tGr=r(p2a,"from_config()"),p2a.forEach(t),aGr=r(Age,` class
method.`),Age.forEach(t),nGr=i(pi),aP=n(pi,"P",{});var Qco=s(aP);sGr=r(Qco,"This class cannot be instantiated directly using "),gLe=n(Qco,"CODE",{});var _2a=s(gLe);lGr=r(_2a,"__init__()"),_2a.forEach(t),iGr=r(Qco," (throws an error)."),Qco.forEach(t),dGr=i(pi),Ut=n(pi,"DIV",{class:!0});var n$=s(Ut);T(nP.$$.fragment,n$),mGr=i(n$),hLe=n(n$,"P",{});var b2a=s(hLe);cGr=r(b2a,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),b2a.forEach(t),fGr=i(n$),oc=n(n$,"P",{});var Lge=s(oc);gGr=r(Lge,`Note:
Loading a model from its configuration file does `),uLe=n(Lge,"STRONG",{});var v2a=s(uLe);hGr=r(v2a,"not"),v2a.forEach(t),uGr=r(Lge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hte=n(Lge,"A",{href:!0});var F2a=s(Hte);pGr=r(F2a,"from_pretrained()"),F2a.forEach(t),_Gr=r(Lge," to load the model weights."),Lge.forEach(t),bGr=i(n$),T(J5.$$.fragment,n$),n$.forEach(t),vGr=i(pi),wo=n(pi,"DIV",{class:!0});var Ka=s(wo);T(sP.$$.fragment,Ka),FGr=i(Ka),pLe=n(Ka,"P",{});var T2a=s(pLe);TGr=r(T2a,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),T2a.forEach(t),MGr=i(Ka),Pn=n(Ka,"P",{});var s$=s(Pn);EGr=r(s$,"The model class to instantiate is selected based on the "),_Le=n(s$,"CODE",{});var M2a=s(_Le);CGr=r(M2a,"model_type"),M2a.forEach(t),wGr=r(s$,` property of the config object (either
passed as an argument or loaded from `),bLe=n(s$,"CODE",{});var E2a=s(bLe);AGr=r(E2a,"pretrained_model_name_or_path"),E2a.forEach(t),LGr=r(s$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vLe=n(s$,"CODE",{});var C2a=s(vLe);yGr=r(C2a,"pretrained_model_name_or_path"),C2a.forEach(t),xGr=r(s$,":"),s$.forEach(t),$Gr=i(Ka),Tt=n(Ka,"UL",{});var _i=s(Tt);Y5=n(_i,"LI",{});var woo=s(Y5);FLe=n(woo,"STRONG",{});var w2a=s(FLe);kGr=r(w2a,"data2vec-audio"),w2a.forEach(t),SGr=r(woo," \u2014 "),Jte=n(woo,"A",{href:!0});var A2a=s(Jte);RGr=r(A2a,"Data2VecAudioForXVector"),A2a.forEach(t),PGr=r(woo," (Data2VecAudio model)"),woo.forEach(t),BGr=i(_i),Z5=n(_i,"LI",{});var Aoo=s(Z5);TLe=n(Aoo,"STRONG",{});var L2a=s(TLe);IGr=r(L2a,"unispeech-sat"),L2a.forEach(t),NGr=r(Aoo," \u2014 "),Yte=n(Aoo,"A",{href:!0});var y2a=s(Yte);qGr=r(y2a,"UniSpeechSatForXVector"),y2a.forEach(t),jGr=r(Aoo," (UniSpeechSat model)"),Aoo.forEach(t),DGr=i(_i),K5=n(_i,"LI",{});var Loo=s(K5);MLe=n(Loo,"STRONG",{});var x2a=s(MLe);GGr=r(x2a,"wav2vec2"),x2a.forEach(t),OGr=r(Loo," \u2014 "),Zte=n(Loo,"A",{href:!0});var $2a=s(Zte);VGr=r($2a,"Wav2Vec2ForXVector"),$2a.forEach(t),XGr=r(Loo," (Wav2Vec2 model)"),Loo.forEach(t),zGr=i(_i),e0=n(_i,"LI",{});var yoo=s(e0);ELe=n(yoo,"STRONG",{});var k2a=s(ELe);QGr=r(k2a,"wav2vec2-conformer"),k2a.forEach(t),WGr=r(yoo," \u2014 "),Kte=n(yoo,"A",{href:!0});var S2a=s(Kte);UGr=r(S2a,"Wav2Vec2ConformerForXVector"),S2a.forEach(t),HGr=r(yoo," (Wav2Vec2-Conformer model)"),yoo.forEach(t),JGr=i(_i),o0=n(_i,"LI",{});var xoo=s(o0);CLe=n(xoo,"STRONG",{});var R2a=s(CLe);YGr=r(R2a,"wavlm"),R2a.forEach(t),ZGr=r(xoo," \u2014 "),eae=n(xoo,"A",{href:!0});var P2a=s(eae);KGr=r(P2a,"WavLMForXVector"),P2a.forEach(t),eOr=r(xoo," (WavLM model)"),xoo.forEach(t),_i.forEach(t),oOr=i(Ka),r0=n(Ka,"P",{});var $oo=s(r0);rOr=r($oo,"The model is set in evaluation mode by default using "),wLe=n($oo,"CODE",{});var B2a=s(wLe);tOr=r(B2a,"model.eval()"),B2a.forEach(t),aOr=r($oo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ALe=n($oo,"CODE",{});var I2a=s(ALe);nOr=r(I2a,"model.train()"),I2a.forEach(t),$oo.forEach(t),sOr=i(Ka),T(t0.$$.fragment,Ka),Ka.forEach(t),pi.forEach(t),Cdo=i(c),rc=n(c,"H2",{class:!0});var Wco=s(rc);a0=n(Wco,"A",{id:!0,class:!0,href:!0});var N2a=s(a0);LLe=n(N2a,"SPAN",{});var q2a=s(LLe);T(lP.$$.fragment,q2a),q2a.forEach(t),N2a.forEach(t),lOr=i(Wco),yLe=n(Wco,"SPAN",{});var j2a=s(yLe);iOr=r(j2a,"AutoModelForMaskedImageModeling"),j2a.forEach(t),Wco.forEach(t),wdo=i(c),ir=n(c,"DIV",{class:!0});var bi=s(ir);T(iP.$$.fragment,bi),dOr=i(bi),tc=n(bi,"P",{});var yge=s(tc);mOr=r(yge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),oae=n(yge,"A",{href:!0});var D2a=s(oae);cOr=r(D2a,"from_pretrained()"),D2a.forEach(t),fOr=r(yge," class method or the "),rae=n(yge,"A",{href:!0});var G2a=s(rae);gOr=r(G2a,"from_config()"),G2a.forEach(t),hOr=r(yge,` class
method.`),yge.forEach(t),uOr=i(bi),dP=n(bi,"P",{});var Uco=s(dP);pOr=r(Uco,"This class cannot be instantiated directly using "),xLe=n(Uco,"CODE",{});var O2a=s(xLe);_Or=r(O2a,"__init__()"),O2a.forEach(t),bOr=r(Uco," (throws an error)."),Uco.forEach(t),vOr=i(bi),Ht=n(bi,"DIV",{class:!0});var l$=s(Ht);T(mP.$$.fragment,l$),FOr=i(l$),$Le=n(l$,"P",{});var V2a=s($Le);TOr=r(V2a,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),V2a.forEach(t),MOr=i(l$),ac=n(l$,"P",{});var xge=s(ac);EOr=r(xge,`Note:
Loading a model from its configuration file does `),kLe=n(xge,"STRONG",{});var X2a=s(kLe);COr=r(X2a,"not"),X2a.forEach(t),wOr=r(xge,` load the model weights. It only affects the
model\u2019s configuration. Use `),tae=n(xge,"A",{href:!0});var z2a=s(tae);AOr=r(z2a,"from_pretrained()"),z2a.forEach(t),LOr=r(xge," to load the model weights."),xge.forEach(t),yOr=i(l$),T(n0.$$.fragment,l$),l$.forEach(t),xOr=i(bi),Ao=n(bi,"DIV",{class:!0});var en=s(Ao);T(cP.$$.fragment,en),$Or=i(en),SLe=n(en,"P",{});var Q2a=s(SLe);kOr=r(Q2a,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Q2a.forEach(t),SOr=i(en),Bn=n(en,"P",{});var i$=s(Bn);ROr=r(i$,"The model class to instantiate is selected based on the "),RLe=n(i$,"CODE",{});var W2a=s(RLe);POr=r(W2a,"model_type"),W2a.forEach(t),BOr=r(i$,` property of the config object (either
passed as an argument or loaded from `),PLe=n(i$,"CODE",{});var U2a=s(PLe);IOr=r(U2a,"pretrained_model_name_or_path"),U2a.forEach(t),NOr=r(i$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BLe=n(i$,"CODE",{});var H2a=s(BLe);qOr=r(H2a,"pretrained_model_name_or_path"),H2a.forEach(t),jOr=r(i$,":"),i$.forEach(t),DOr=i(en),In=n(en,"UL",{});var d$=s(In);s0=n(d$,"LI",{});var koo=s(s0);ILe=n(koo,"STRONG",{});var J2a=s(ILe);GOr=r(J2a,"deit"),J2a.forEach(t),OOr=r(koo," \u2014 "),aae=n(koo,"A",{href:!0});var Y2a=s(aae);VOr=r(Y2a,"DeiTForMaskedImageModeling"),Y2a.forEach(t),XOr=r(koo," (DeiT model)"),koo.forEach(t),zOr=i(d$),l0=n(d$,"LI",{});var Soo=s(l0);NLe=n(Soo,"STRONG",{});var Z2a=s(NLe);QOr=r(Z2a,"swin"),Z2a.forEach(t),WOr=r(Soo," \u2014 "),nae=n(Soo,"A",{href:!0});var K2a=s(nae);UOr=r(K2a,"SwinForMaskedImageModeling"),K2a.forEach(t),HOr=r(Soo," (Swin Transformer model)"),Soo.forEach(t),JOr=i(d$),i0=n(d$,"LI",{});var Roo=s(i0);qLe=n(Roo,"STRONG",{});var eba=s(qLe);YOr=r(eba,"swinv2"),eba.forEach(t),ZOr=r(Roo," \u2014 "),sae=n(Roo,"A",{href:!0});var oba=s(sae);KOr=r(oba,"Swinv2ForMaskedImageModeling"),oba.forEach(t),eVr=r(Roo," (Swin Transformer V2 model)"),Roo.forEach(t),oVr=i(d$),d0=n(d$,"LI",{});var Poo=s(d0);jLe=n(Poo,"STRONG",{});var rba=s(jLe);rVr=r(rba,"vit"),rba.forEach(t),tVr=r(Poo," \u2014 "),lae=n(Poo,"A",{href:!0});var tba=s(lae);aVr=r(tba,"ViTForMaskedImageModeling"),tba.forEach(t),nVr=r(Poo," (ViT model)"),Poo.forEach(t),d$.forEach(t),sVr=i(en),m0=n(en,"P",{});var Boo=s(m0);lVr=r(Boo,"The model is set in evaluation mode by default using "),DLe=n(Boo,"CODE",{});var aba=s(DLe);iVr=r(aba,"model.eval()"),aba.forEach(t),dVr=r(Boo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GLe=n(Boo,"CODE",{});var nba=s(GLe);mVr=r(nba,"model.train()"),nba.forEach(t),Boo.forEach(t),cVr=i(en),T(c0.$$.fragment,en),en.forEach(t),bi.forEach(t),Ado=i(c),nc=n(c,"H2",{class:!0});var Hco=s(nc);f0=n(Hco,"A",{id:!0,class:!0,href:!0});var sba=s(f0);OLe=n(sba,"SPAN",{});var lba=s(OLe);T(fP.$$.fragment,lba),lba.forEach(t),sba.forEach(t),fVr=i(Hco),VLe=n(Hco,"SPAN",{});var iba=s(VLe);gVr=r(iba,"AutoModelForObjectDetection"),iba.forEach(t),Hco.forEach(t),Ldo=i(c),dr=n(c,"DIV",{class:!0});var vi=s(dr);T(gP.$$.fragment,vi),hVr=i(vi),sc=n(vi,"P",{});var $ge=s(sc);uVr=r($ge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),iae=n($ge,"A",{href:!0});var dba=s(iae);pVr=r(dba,"from_pretrained()"),dba.forEach(t),_Vr=r($ge," class method or the "),dae=n($ge,"A",{href:!0});var mba=s(dae);bVr=r(mba,"from_config()"),mba.forEach(t),vVr=r($ge,` class
method.`),$ge.forEach(t),FVr=i(vi),hP=n(vi,"P",{});var Jco=s(hP);TVr=r(Jco,"This class cannot be instantiated directly using "),XLe=n(Jco,"CODE",{});var cba=s(XLe);MVr=r(cba,"__init__()"),cba.forEach(t),EVr=r(Jco," (throws an error)."),Jco.forEach(t),CVr=i(vi),Jt=n(vi,"DIV",{class:!0});var m$=s(Jt);T(uP.$$.fragment,m$),wVr=i(m$),zLe=n(m$,"P",{});var fba=s(zLe);AVr=r(fba,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),fba.forEach(t),LVr=i(m$),lc=n(m$,"P",{});var kge=s(lc);yVr=r(kge,`Note:
Loading a model from its configuration file does `),QLe=n(kge,"STRONG",{});var gba=s(QLe);xVr=r(gba,"not"),gba.forEach(t),$Vr=r(kge,` load the model weights. It only affects the
model\u2019s configuration. Use `),mae=n(kge,"A",{href:!0});var hba=s(mae);kVr=r(hba,"from_pretrained()"),hba.forEach(t),SVr=r(kge," to load the model weights."),kge.forEach(t),RVr=i(m$),T(g0.$$.fragment,m$),m$.forEach(t),PVr=i(vi),Lo=n(vi,"DIV",{class:!0});var on=s(Lo);T(pP.$$.fragment,on),BVr=i(on),WLe=n(on,"P",{});var uba=s(WLe);IVr=r(uba,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),uba.forEach(t),NVr=i(on),Nn=n(on,"P",{});var c$=s(Nn);qVr=r(c$,"The model class to instantiate is selected based on the "),ULe=n(c$,"CODE",{});var pba=s(ULe);jVr=r(pba,"model_type"),pba.forEach(t),DVr=r(c$,` property of the config object (either
passed as an argument or loaded from `),HLe=n(c$,"CODE",{});var _ba=s(HLe);GVr=r(_ba,"pretrained_model_name_or_path"),_ba.forEach(t),OVr=r(c$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JLe=n(c$,"CODE",{});var bba=s(JLe);VVr=r(bba,"pretrained_model_name_or_path"),bba.forEach(t),XVr=r(c$,":"),c$.forEach(t),zVr=i(on),Mt=n(on,"UL",{});var Fi=s(Mt);h0=n(Fi,"LI",{});var Ioo=s(h0);YLe=n(Ioo,"STRONG",{});var vba=s(YLe);QVr=r(vba,"conditional_detr"),vba.forEach(t),WVr=r(Ioo," \u2014 "),cae=n(Ioo,"A",{href:!0});var Fba=s(cae);UVr=r(Fba,"ConditionalDetrForObjectDetection"),Fba.forEach(t),HVr=r(Ioo," (Conditional DETR model)"),Ioo.forEach(t),JVr=i(Fi),u0=n(Fi,"LI",{});var Noo=s(u0);ZLe=n(Noo,"STRONG",{});var Tba=s(ZLe);YVr=r(Tba,"deformable_detr"),Tba.forEach(t),ZVr=r(Noo," \u2014 "),fae=n(Noo,"A",{href:!0});var Mba=s(fae);KVr=r(Mba,"DeformableDetrForObjectDetection"),Mba.forEach(t),eXr=r(Noo," (Deformable DETR model)"),Noo.forEach(t),oXr=i(Fi),p0=n(Fi,"LI",{});var qoo=s(p0);KLe=n(qoo,"STRONG",{});var Eba=s(KLe);rXr=r(Eba,"detr"),Eba.forEach(t),tXr=r(qoo," \u2014 "),gae=n(qoo,"A",{href:!0});var Cba=s(gae);aXr=r(Cba,"DetrForObjectDetection"),Cba.forEach(t),nXr=r(qoo," (DETR model)"),qoo.forEach(t),sXr=i(Fi),_0=n(Fi,"LI",{});var joo=s(_0);eye=n(joo,"STRONG",{});var wba=s(eye);lXr=r(wba,"table-transformer"),wba.forEach(t),iXr=r(joo," \u2014 "),hae=n(joo,"A",{href:!0});var Aba=s(hae);dXr=r(Aba,"TableTransformerForObjectDetection"),Aba.forEach(t),mXr=r(joo," (Table Transformer model)"),joo.forEach(t),cXr=i(Fi),b0=n(Fi,"LI",{});var Doo=s(b0);oye=n(Doo,"STRONG",{});var Lba=s(oye);fXr=r(Lba,"yolos"),Lba.forEach(t),gXr=r(Doo," \u2014 "),uae=n(Doo,"A",{href:!0});var yba=s(uae);hXr=r(yba,"YolosForObjectDetection"),yba.forEach(t),uXr=r(Doo," (YOLOS model)"),Doo.forEach(t),Fi.forEach(t),pXr=i(on),v0=n(on,"P",{});var Goo=s(v0);_Xr=r(Goo,"The model is set in evaluation mode by default using "),rye=n(Goo,"CODE",{});var xba=s(rye);bXr=r(xba,"model.eval()"),xba.forEach(t),vXr=r(Goo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tye=n(Goo,"CODE",{});var $ba=s(tye);FXr=r($ba,"model.train()"),$ba.forEach(t),Goo.forEach(t),TXr=i(on),T(F0.$$.fragment,on),on.forEach(t),vi.forEach(t),ydo=i(c),ic=n(c,"H2",{class:!0});var Yco=s(ic);T0=n(Yco,"A",{id:!0,class:!0,href:!0});var kba=s(T0);aye=n(kba,"SPAN",{});var Sba=s(aye);T(_P.$$.fragment,Sba),Sba.forEach(t),kba.forEach(t),MXr=i(Yco),nye=n(Yco,"SPAN",{});var Rba=s(nye);EXr=r(Rba,"AutoModelForImageSegmentation"),Rba.forEach(t),Yco.forEach(t),xdo=i(c),mr=n(c,"DIV",{class:!0});var Ti=s(mr);T(bP.$$.fragment,Ti),CXr=i(Ti),dc=n(Ti,"P",{});var Sge=s(dc);wXr=r(Sge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pae=n(Sge,"A",{href:!0});var Pba=s(pae);AXr=r(Pba,"from_pretrained()"),Pba.forEach(t),LXr=r(Sge," class method or the "),_ae=n(Sge,"A",{href:!0});var Bba=s(_ae);yXr=r(Bba,"from_config()"),Bba.forEach(t),xXr=r(Sge,` class
method.`),Sge.forEach(t),$Xr=i(Ti),vP=n(Ti,"P",{});var Zco=s(vP);kXr=r(Zco,"This class cannot be instantiated directly using "),sye=n(Zco,"CODE",{});var Iba=s(sye);SXr=r(Iba,"__init__()"),Iba.forEach(t),RXr=r(Zco," (throws an error)."),Zco.forEach(t),PXr=i(Ti),Yt=n(Ti,"DIV",{class:!0});var f$=s(Yt);T(FP.$$.fragment,f$),BXr=i(f$),lye=n(f$,"P",{});var Nba=s(lye);IXr=r(Nba,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Nba.forEach(t),NXr=i(f$),mc=n(f$,"P",{});var Rge=s(mc);qXr=r(Rge,`Note:
Loading a model from its configuration file does `),iye=n(Rge,"STRONG",{});var qba=s(iye);jXr=r(qba,"not"),qba.forEach(t),DXr=r(Rge,` load the model weights. It only affects the
model\u2019s configuration. Use `),bae=n(Rge,"A",{href:!0});var jba=s(bae);GXr=r(jba,"from_pretrained()"),jba.forEach(t),OXr=r(Rge," to load the model weights."),Rge.forEach(t),VXr=i(f$),T(M0.$$.fragment,f$),f$.forEach(t),XXr=i(Ti),yo=n(Ti,"DIV",{class:!0});var rn=s(yo);T(TP.$$.fragment,rn),zXr=i(rn),dye=n(rn,"P",{});var Dba=s(dye);QXr=r(Dba,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Dba.forEach(t),WXr=i(rn),qn=n(rn,"P",{});var g$=s(qn);UXr=r(g$,"The model class to instantiate is selected based on the "),mye=n(g$,"CODE",{});var Gba=s(mye);HXr=r(Gba,"model_type"),Gba.forEach(t),JXr=r(g$,` property of the config object (either
passed as an argument or loaded from `),cye=n(g$,"CODE",{});var Oba=s(cye);YXr=r(Oba,"pretrained_model_name_or_path"),Oba.forEach(t),ZXr=r(g$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fye=n(g$,"CODE",{});var Vba=s(fye);KXr=r(Vba,"pretrained_model_name_or_path"),Vba.forEach(t),ezr=r(g$,":"),g$.forEach(t),ozr=i(rn),gye=n(rn,"UL",{});var Xba=s(gye);E0=n(Xba,"LI",{});var Ooo=s(E0);hye=n(Ooo,"STRONG",{});var zba=s(hye);rzr=r(zba,"detr"),zba.forEach(t),tzr=r(Ooo," \u2014 "),vae=n(Ooo,"A",{href:!0});var Qba=s(vae);azr=r(Qba,"DetrForSegmentation"),Qba.forEach(t),nzr=r(Ooo," (DETR model)"),Ooo.forEach(t),Xba.forEach(t),szr=i(rn),C0=n(rn,"P",{});var Voo=s(C0);lzr=r(Voo,"The model is set in evaluation mode by default using "),uye=n(Voo,"CODE",{});var Wba=s(uye);izr=r(Wba,"model.eval()"),Wba.forEach(t),dzr=r(Voo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pye=n(Voo,"CODE",{});var Uba=s(pye);mzr=r(Uba,"model.train()"),Uba.forEach(t),Voo.forEach(t),czr=i(rn),T(w0.$$.fragment,rn),rn.forEach(t),Ti.forEach(t),$do=i(c),cc=n(c,"H2",{class:!0});var Kco=s(cc);A0=n(Kco,"A",{id:!0,class:!0,href:!0});var Hba=s(A0);_ye=n(Hba,"SPAN",{});var Jba=s(_ye);T(MP.$$.fragment,Jba),Jba.forEach(t),Hba.forEach(t),fzr=i(Kco),bye=n(Kco,"SPAN",{});var Yba=s(bye);gzr=r(Yba,"AutoModelForSemanticSegmentation"),Yba.forEach(t),Kco.forEach(t),kdo=i(c),cr=n(c,"DIV",{class:!0});var Mi=s(cr);T(EP.$$.fragment,Mi),hzr=i(Mi),fc=n(Mi,"P",{});var Pge=s(fc);uzr=r(Pge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Fae=n(Pge,"A",{href:!0});var Zba=s(Fae);pzr=r(Zba,"from_pretrained()"),Zba.forEach(t),_zr=r(Pge," class method or the "),Tae=n(Pge,"A",{href:!0});var Kba=s(Tae);bzr=r(Kba,"from_config()"),Kba.forEach(t),vzr=r(Pge,` class
method.`),Pge.forEach(t),Fzr=i(Mi),CP=n(Mi,"P",{});var efo=s(CP);Tzr=r(efo,"This class cannot be instantiated directly using "),vye=n(efo,"CODE",{});var eva=s(vye);Mzr=r(eva,"__init__()"),eva.forEach(t),Ezr=r(efo," (throws an error)."),efo.forEach(t),Czr=i(Mi),Zt=n(Mi,"DIV",{class:!0});var h$=s(Zt);T(wP.$$.fragment,h$),wzr=i(h$),Fye=n(h$,"P",{});var ova=s(Fye);Azr=r(ova,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ova.forEach(t),Lzr=i(h$),gc=n(h$,"P",{});var Bge=s(gc);yzr=r(Bge,`Note:
Loading a model from its configuration file does `),Tye=n(Bge,"STRONG",{});var rva=s(Tye);xzr=r(rva,"not"),rva.forEach(t),$zr=r(Bge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mae=n(Bge,"A",{href:!0});var tva=s(Mae);kzr=r(tva,"from_pretrained()"),tva.forEach(t),Szr=r(Bge," to load the model weights."),Bge.forEach(t),Rzr=i(h$),T(L0.$$.fragment,h$),h$.forEach(t),Pzr=i(Mi),xo=n(Mi,"DIV",{class:!0});var tn=s(xo);T(AP.$$.fragment,tn),Bzr=i(tn),Mye=n(tn,"P",{});var ava=s(Mye);Izr=r(ava,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ava.forEach(t),Nzr=i(tn),jn=n(tn,"P",{});var u$=s(jn);qzr=r(u$,"The model class to instantiate is selected based on the "),Eye=n(u$,"CODE",{});var nva=s(Eye);jzr=r(nva,"model_type"),nva.forEach(t),Dzr=r(u$,` property of the config object (either
passed as an argument or loaded from `),Cye=n(u$,"CODE",{});var sva=s(Cye);Gzr=r(sva,"pretrained_model_name_or_path"),sva.forEach(t),Ozr=r(u$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wye=n(u$,"CODE",{});var lva=s(wye);Vzr=r(lva,"pretrained_model_name_or_path"),lva.forEach(t),Xzr=r(u$,":"),u$.forEach(t),zzr=i(tn),fr=n(tn,"UL",{});var an=s(fr);y0=n(an,"LI",{});var Xoo=s(y0);Aye=n(Xoo,"STRONG",{});var iva=s(Aye);Qzr=r(iva,"beit"),iva.forEach(t),Wzr=r(Xoo," \u2014 "),Eae=n(Xoo,"A",{href:!0});var dva=s(Eae);Uzr=r(dva,"BeitForSemanticSegmentation"),dva.forEach(t),Hzr=r(Xoo," (BEiT model)"),Xoo.forEach(t),Jzr=i(an),x0=n(an,"LI",{});var zoo=s(x0);Lye=n(zoo,"STRONG",{});var mva=s(Lye);Yzr=r(mva,"data2vec-vision"),mva.forEach(t),Zzr=r(zoo," \u2014 "),Cae=n(zoo,"A",{href:!0});var cva=s(Cae);Kzr=r(cva,"Data2VecVisionForSemanticSegmentation"),cva.forEach(t),eQr=r(zoo," (Data2VecVision model)"),zoo.forEach(t),oQr=i(an),$0=n(an,"LI",{});var Qoo=s($0);yye=n(Qoo,"STRONG",{});var fva=s(yye);rQr=r(fva,"dpt"),fva.forEach(t),tQr=r(Qoo," \u2014 "),wae=n(Qoo,"A",{href:!0});var gva=s(wae);aQr=r(gva,"DPTForSemanticSegmentation"),gva.forEach(t),nQr=r(Qoo," (DPT model)"),Qoo.forEach(t),sQr=i(an),k0=n(an,"LI",{});var Woo=s(k0);xye=n(Woo,"STRONG",{});var hva=s(xye);lQr=r(hva,"mobilenet_v2"),hva.forEach(t),iQr=r(Woo," \u2014 "),Aae=n(Woo,"A",{href:!0});var uva=s(Aae);dQr=r(uva,"MobileNetV2ForSemanticSegmentation"),uva.forEach(t),mQr=r(Woo," (MobileNetV2 model)"),Woo.forEach(t),cQr=i(an),S0=n(an,"LI",{});var Uoo=s(S0);$ye=n(Uoo,"STRONG",{});var pva=s($ye);fQr=r(pva,"mobilevit"),pva.forEach(t),gQr=r(Uoo," \u2014 "),Lae=n(Uoo,"A",{href:!0});var _va=s(Lae);hQr=r(_va,"MobileViTForSemanticSegmentation"),_va.forEach(t),uQr=r(Uoo," (MobileViT model)"),Uoo.forEach(t),pQr=i(an),R0=n(an,"LI",{});var Hoo=s(R0);kye=n(Hoo,"STRONG",{});var bva=s(kye);_Qr=r(bva,"segformer"),bva.forEach(t),bQr=r(Hoo," \u2014 "),yae=n(Hoo,"A",{href:!0});var vva=s(yae);vQr=r(vva,"SegformerForSemanticSegmentation"),vva.forEach(t),FQr=r(Hoo," (SegFormer model)"),Hoo.forEach(t),an.forEach(t),TQr=i(tn),P0=n(tn,"P",{});var Joo=s(P0);MQr=r(Joo,"The model is set in evaluation mode by default using "),Sye=n(Joo,"CODE",{});var Fva=s(Sye);EQr=r(Fva,"model.eval()"),Fva.forEach(t),CQr=r(Joo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rye=n(Joo,"CODE",{});var Tva=s(Rye);wQr=r(Tva,"model.train()"),Tva.forEach(t),Joo.forEach(t),AQr=i(tn),T(B0.$$.fragment,tn),tn.forEach(t),Mi.forEach(t),Sdo=i(c),hc=n(c,"H2",{class:!0});var ofo=s(hc);I0=n(ofo,"A",{id:!0,class:!0,href:!0});var Mva=s(I0);Pye=n(Mva,"SPAN",{});var Eva=s(Pye);T(LP.$$.fragment,Eva),Eva.forEach(t),Mva.forEach(t),LQr=i(ofo),Bye=n(ofo,"SPAN",{});var Cva=s(Bye);yQr=r(Cva,"AutoModelForInstanceSegmentation"),Cva.forEach(t),ofo.forEach(t),Rdo=i(c),gr=n(c,"DIV",{class:!0});var Ei=s(gr);T(yP.$$.fragment,Ei),xQr=i(Ei),uc=n(Ei,"P",{});var Ige=s(uc);$Qr=r(Ige,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),xae=n(Ige,"A",{href:!0});var wva=s(xae);kQr=r(wva,"from_pretrained()"),wva.forEach(t),SQr=r(Ige," class method or the "),$ae=n(Ige,"A",{href:!0});var Ava=s($ae);RQr=r(Ava,"from_config()"),Ava.forEach(t),PQr=r(Ige,` class
method.`),Ige.forEach(t),BQr=i(Ei),xP=n(Ei,"P",{});var rfo=s(xP);IQr=r(rfo,"This class cannot be instantiated directly using "),Iye=n(rfo,"CODE",{});var Lva=s(Iye);NQr=r(Lva,"__init__()"),Lva.forEach(t),qQr=r(rfo," (throws an error)."),rfo.forEach(t),jQr=i(Ei),Kt=n(Ei,"DIV",{class:!0});var p$=s(Kt);T($P.$$.fragment,p$),DQr=i(p$),Nye=n(p$,"P",{});var yva=s(Nye);GQr=r(yva,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),yva.forEach(t),OQr=i(p$),pc=n(p$,"P",{});var Nge=s(pc);VQr=r(Nge,`Note:
Loading a model from its configuration file does `),qye=n(Nge,"STRONG",{});var xva=s(qye);XQr=r(xva,"not"),xva.forEach(t),zQr=r(Nge,` load the model weights. It only affects the
model\u2019s configuration. Use `),kae=n(Nge,"A",{href:!0});var $va=s(kae);QQr=r($va,"from_pretrained()"),$va.forEach(t),WQr=r(Nge," to load the model weights."),Nge.forEach(t),UQr=i(p$),T(N0.$$.fragment,p$),p$.forEach(t),HQr=i(Ei),$o=n(Ei,"DIV",{class:!0});var nn=s($o);T(kP.$$.fragment,nn),JQr=i(nn),jye=n(nn,"P",{});var kva=s(jye);YQr=r(kva,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),kva.forEach(t),ZQr=i(nn),Dn=n(nn,"P",{});var _$=s(Dn);KQr=r(_$,"The model class to instantiate is selected based on the "),Dye=n(_$,"CODE",{});var Sva=s(Dye);eWr=r(Sva,"model_type"),Sva.forEach(t),oWr=r(_$,` property of the config object (either
passed as an argument or loaded from `),Gye=n(_$,"CODE",{});var Rva=s(Gye);rWr=r(Rva,"pretrained_model_name_or_path"),Rva.forEach(t),tWr=r(_$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oye=n(_$,"CODE",{});var Pva=s(Oye);aWr=r(Pva,"pretrained_model_name_or_path"),Pva.forEach(t),nWr=r(_$,":"),_$.forEach(t),sWr=i(nn),Vye=n(nn,"UL",{});var Bva=s(Vye);q0=n(Bva,"LI",{});var Yoo=s(q0);Xye=n(Yoo,"STRONG",{});var Iva=s(Xye);lWr=r(Iva,"maskformer"),Iva.forEach(t),iWr=r(Yoo," \u2014 "),Sae=n(Yoo,"A",{href:!0});var Nva=s(Sae);dWr=r(Nva,"MaskFormerForInstanceSegmentation"),Nva.forEach(t),mWr=r(Yoo," (MaskFormer model)"),Yoo.forEach(t),Bva.forEach(t),cWr=i(nn),j0=n(nn,"P",{});var Zoo=s(j0);fWr=r(Zoo,"The model is set in evaluation mode by default using "),zye=n(Zoo,"CODE",{});var qva=s(zye);gWr=r(qva,"model.eval()"),qva.forEach(t),hWr=r(Zoo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qye=n(Zoo,"CODE",{});var jva=s(Qye);uWr=r(jva,"model.train()"),jva.forEach(t),Zoo.forEach(t),pWr=i(nn),T(D0.$$.fragment,nn),nn.forEach(t),Ei.forEach(t),Pdo=i(c),_c=n(c,"H2",{class:!0});var tfo=s(_c);G0=n(tfo,"A",{id:!0,class:!0,href:!0});var Dva=s(G0);Wye=n(Dva,"SPAN",{});var Gva=s(Wye);T(SP.$$.fragment,Gva),Gva.forEach(t),Dva.forEach(t),_Wr=i(tfo),Uye=n(tfo,"SPAN",{});var Ova=s(Uye);bWr=r(Ova,"AutoModelForZeroShotObjectDetection"),Ova.forEach(t),tfo.forEach(t),Bdo=i(c),hr=n(c,"DIV",{class:!0});var Ci=s(hr);T(RP.$$.fragment,Ci),vWr=i(Ci),bc=n(Ci,"P",{});var qge=s(bc);FWr=r(qge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a zero-shot object detection head) when created
with the `),Rae=n(qge,"A",{href:!0});var Vva=s(Rae);TWr=r(Vva,"from_pretrained()"),Vva.forEach(t),MWr=r(qge," class method or the "),Pae=n(qge,"A",{href:!0});var Xva=s(Pae);EWr=r(Xva,"from_config()"),Xva.forEach(t),CWr=r(qge,` class
method.`),qge.forEach(t),wWr=i(Ci),PP=n(Ci,"P",{});var afo=s(PP);AWr=r(afo,"This class cannot be instantiated directly using "),Hye=n(afo,"CODE",{});var zva=s(Hye);LWr=r(zva,"__init__()"),zva.forEach(t),yWr=r(afo," (throws an error)."),afo.forEach(t),xWr=i(Ci),ea=n(Ci,"DIV",{class:!0});var b$=s(ea);T(BP.$$.fragment,b$),$Wr=i(b$),Jye=n(b$,"P",{});var Qva=s(Jye);kWr=r(Qva,"Instantiates one of the model classes of the library (with a zero-shot object detection head) from a configuration."),Qva.forEach(t),SWr=i(b$),vc=n(b$,"P",{});var jge=s(vc);RWr=r(jge,`Note:
Loading a model from its configuration file does `),Yye=n(jge,"STRONG",{});var Wva=s(Yye);PWr=r(Wva,"not"),Wva.forEach(t),BWr=r(jge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bae=n(jge,"A",{href:!0});var Uva=s(Bae);IWr=r(Uva,"from_pretrained()"),Uva.forEach(t),NWr=r(jge," to load the model weights."),jge.forEach(t),qWr=i(b$),T(O0.$$.fragment,b$),b$.forEach(t),jWr=i(Ci),ko=n(Ci,"DIV",{class:!0});var sn=s(ko);T(IP.$$.fragment,sn),DWr=i(sn),Zye=n(sn,"P",{});var Hva=s(Zye);GWr=r(Hva,"Instantiate one of the model classes of the library (with a zero-shot object detection head) from a pretrained model."),Hva.forEach(t),OWr=i(sn),Gn=n(sn,"P",{});var v$=s(Gn);VWr=r(v$,"The model class to instantiate is selected based on the "),Kye=n(v$,"CODE",{});var Jva=s(Kye);XWr=r(Jva,"model_type"),Jva.forEach(t),zWr=r(v$,` property of the config object (either
passed as an argument or loaded from `),e9e=n(v$,"CODE",{});var Yva=s(e9e);QWr=r(Yva,"pretrained_model_name_or_path"),Yva.forEach(t),WWr=r(v$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o9e=n(v$,"CODE",{});var Zva=s(o9e);UWr=r(Zva,"pretrained_model_name_or_path"),Zva.forEach(t),HWr=r(v$,":"),v$.forEach(t),JWr=i(sn),r9e=n(sn,"UL",{});var Kva=s(r9e);V0=n(Kva,"LI",{});var Koo=s(V0);t9e=n(Koo,"STRONG",{});var eFa=s(t9e);YWr=r(eFa,"owlvit"),eFa.forEach(t),ZWr=r(Koo," \u2014 "),Iae=n(Koo,"A",{href:!0});var oFa=s(Iae);KWr=r(oFa,"OwlViTForObjectDetection"),oFa.forEach(t),eUr=r(Koo," (OWL-ViT model)"),Koo.forEach(t),Kva.forEach(t),oUr=i(sn),X0=n(sn,"P",{});var ero=s(X0);rUr=r(ero,"The model is set in evaluation mode by default using "),a9e=n(ero,"CODE",{});var rFa=s(a9e);tUr=r(rFa,"model.eval()"),rFa.forEach(t),aUr=r(ero,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n9e=n(ero,"CODE",{});var tFa=s(n9e);nUr=r(tFa,"model.train()"),tFa.forEach(t),ero.forEach(t),sUr=i(sn),T(z0.$$.fragment,sn),sn.forEach(t),Ci.forEach(t),Ido=i(c),Fc=n(c,"H2",{class:!0});var nfo=s(Fc);Q0=n(nfo,"A",{id:!0,class:!0,href:!0});var aFa=s(Q0);s9e=n(aFa,"SPAN",{});var nFa=s(s9e);T(NP.$$.fragment,nFa),nFa.forEach(t),aFa.forEach(t),lUr=i(nfo),l9e=n(nfo,"SPAN",{});var sFa=s(l9e);iUr=r(sFa,"TFAutoModel"),sFa.forEach(t),nfo.forEach(t),Ndo=i(c),ur=n(c,"DIV",{class:!0});var wi=s(ur);T(qP.$$.fragment,wi),dUr=i(wi),Tc=n(wi,"P",{});var Dge=s(Tc);mUr=r(Dge,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Nae=n(Dge,"A",{href:!0});var lFa=s(Nae);cUr=r(lFa,"from_pretrained()"),lFa.forEach(t),fUr=r(Dge," class method or the "),qae=n(Dge,"A",{href:!0});var iFa=s(qae);gUr=r(iFa,"from_config()"),iFa.forEach(t),hUr=r(Dge,` class
method.`),Dge.forEach(t),uUr=i(wi),jP=n(wi,"P",{});var sfo=s(jP);pUr=r(sfo,"This class cannot be instantiated directly using "),i9e=n(sfo,"CODE",{});var dFa=s(i9e);_Ur=r(dFa,"__init__()"),dFa.forEach(t),bUr=r(sfo," (throws an error)."),sfo.forEach(t),vUr=i(wi),oa=n(wi,"DIV",{class:!0});var F$=s(oa);T(DP.$$.fragment,F$),FUr=i(F$),d9e=n(F$,"P",{});var mFa=s(d9e);TUr=r(mFa,"Instantiates one of the base model classes of the library from a configuration."),mFa.forEach(t),MUr=i(F$),Mc=n(F$,"P",{});var Gge=s(Mc);EUr=r(Gge,`Note:
Loading a model from its configuration file does `),m9e=n(Gge,"STRONG",{});var cFa=s(m9e);CUr=r(cFa,"not"),cFa.forEach(t),wUr=r(Gge,` load the model weights. It only affects the
model\u2019s configuration. Use `),jae=n(Gge,"A",{href:!0});var fFa=s(jae);AUr=r(fFa,"from_pretrained()"),fFa.forEach(t),LUr=r(Gge," to load the model weights."),Gge.forEach(t),yUr=i(F$),T(W0.$$.fragment,F$),F$.forEach(t),xUr=i(wi),zr=n(wi,"DIV",{class:!0});var Ai=s(zr);T(GP.$$.fragment,Ai),$Ur=i(Ai),c9e=n(Ai,"P",{});var gFa=s(c9e);kUr=r(gFa,"Instantiate one of the base model classes of the library from a pretrained model."),gFa.forEach(t),SUr=i(Ai),On=n(Ai,"P",{});var T$=s(On);RUr=r(T$,"The model class to instantiate is selected based on the "),f9e=n(T$,"CODE",{});var hFa=s(f9e);PUr=r(hFa,"model_type"),hFa.forEach(t),BUr=r(T$,` property of the config object (either
passed as an argument or loaded from `),g9e=n(T$,"CODE",{});var uFa=s(g9e);IUr=r(uFa,"pretrained_model_name_or_path"),uFa.forEach(t),NUr=r(T$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h9e=n(T$,"CODE",{});var pFa=s(h9e);qUr=r(pFa,"pretrained_model_name_or_path"),pFa.forEach(t),jUr=r(T$,":"),T$.forEach(t),DUr=i(Ai),P=n(Ai,"UL",{});var j=s(P);U0=n(j,"LI",{});var oro=s(U0);u9e=n(oro,"STRONG",{});var _Fa=s(u9e);GUr=r(_Fa,"albert"),_Fa.forEach(t),OUr=r(oro," \u2014 "),Dae=n(oro,"A",{href:!0});var bFa=s(Dae);VUr=r(bFa,"TFAlbertModel"),bFa.forEach(t),XUr=r(oro," (ALBERT model)"),oro.forEach(t),zUr=i(j),H0=n(j,"LI",{});var rro=s(H0);p9e=n(rro,"STRONG",{});var vFa=s(p9e);QUr=r(vFa,"bart"),vFa.forEach(t),WUr=r(rro," \u2014 "),Gae=n(rro,"A",{href:!0});var FFa=s(Gae);UUr=r(FFa,"TFBartModel"),FFa.forEach(t),HUr=r(rro," (BART model)"),rro.forEach(t),JUr=i(j),J0=n(j,"LI",{});var tro=s(J0);_9e=n(tro,"STRONG",{});var TFa=s(_9e);YUr=r(TFa,"bert"),TFa.forEach(t),ZUr=r(tro," \u2014 "),Oae=n(tro,"A",{href:!0});var MFa=s(Oae);KUr=r(MFa,"TFBertModel"),MFa.forEach(t),eHr=r(tro," (BERT model)"),tro.forEach(t),oHr=i(j),Y0=n(j,"LI",{});var aro=s(Y0);b9e=n(aro,"STRONG",{});var EFa=s(b9e);rHr=r(EFa,"blenderbot"),EFa.forEach(t),tHr=r(aro," \u2014 "),Vae=n(aro,"A",{href:!0});var CFa=s(Vae);aHr=r(CFa,"TFBlenderbotModel"),CFa.forEach(t),nHr=r(aro," (Blenderbot model)"),aro.forEach(t),sHr=i(j),Z0=n(j,"LI",{});var nro=s(Z0);v9e=n(nro,"STRONG",{});var wFa=s(v9e);lHr=r(wFa,"blenderbot-small"),wFa.forEach(t),iHr=r(nro," \u2014 "),Xae=n(nro,"A",{href:!0});var AFa=s(Xae);dHr=r(AFa,"TFBlenderbotSmallModel"),AFa.forEach(t),mHr=r(nro," (BlenderbotSmall model)"),nro.forEach(t),cHr=i(j),K0=n(j,"LI",{});var sro=s(K0);F9e=n(sro,"STRONG",{});var LFa=s(F9e);fHr=r(LFa,"camembert"),LFa.forEach(t),gHr=r(sro," \u2014 "),zae=n(sro,"A",{href:!0});var yFa=s(zae);hHr=r(yFa,"TFCamembertModel"),yFa.forEach(t),uHr=r(sro," (CamemBERT model)"),sro.forEach(t),pHr=i(j),ew=n(j,"LI",{});var lro=s(ew);T9e=n(lro,"STRONG",{});var xFa=s(T9e);_Hr=r(xFa,"clip"),xFa.forEach(t),bHr=r(lro," \u2014 "),Qae=n(lro,"A",{href:!0});var $Fa=s(Qae);vHr=r($Fa,"TFCLIPModel"),$Fa.forEach(t),FHr=r(lro," (CLIP model)"),lro.forEach(t),THr=i(j),ow=n(j,"LI",{});var iro=s(ow);M9e=n(iro,"STRONG",{});var kFa=s(M9e);MHr=r(kFa,"convbert"),kFa.forEach(t),EHr=r(iro," \u2014 "),Wae=n(iro,"A",{href:!0});var SFa=s(Wae);CHr=r(SFa,"TFConvBertModel"),SFa.forEach(t),wHr=r(iro," (ConvBERT model)"),iro.forEach(t),AHr=i(j),rw=n(j,"LI",{});var dro=s(rw);E9e=n(dro,"STRONG",{});var RFa=s(E9e);LHr=r(RFa,"convnext"),RFa.forEach(t),yHr=r(dro," \u2014 "),Uae=n(dro,"A",{href:!0});var PFa=s(Uae);xHr=r(PFa,"TFConvNextModel"),PFa.forEach(t),$Hr=r(dro," (ConvNeXT model)"),dro.forEach(t),kHr=i(j),tw=n(j,"LI",{});var mro=s(tw);C9e=n(mro,"STRONG",{});var BFa=s(C9e);SHr=r(BFa,"ctrl"),BFa.forEach(t),RHr=r(mro," \u2014 "),Hae=n(mro,"A",{href:!0});var IFa=s(Hae);PHr=r(IFa,"TFCTRLModel"),IFa.forEach(t),BHr=r(mro," (CTRL model)"),mro.forEach(t),IHr=i(j),aw=n(j,"LI",{});var cro=s(aw);w9e=n(cro,"STRONG",{});var NFa=s(w9e);NHr=r(NFa,"cvt"),NFa.forEach(t),qHr=r(cro," \u2014 "),Jae=n(cro,"A",{href:!0});var qFa=s(Jae);jHr=r(qFa,"TFCvtModel"),qFa.forEach(t),DHr=r(cro," (CvT model)"),cro.forEach(t),GHr=i(j),nw=n(j,"LI",{});var fro=s(nw);A9e=n(fro,"STRONG",{});var jFa=s(A9e);OHr=r(jFa,"data2vec-vision"),jFa.forEach(t),VHr=r(fro," \u2014 "),Yae=n(fro,"A",{href:!0});var DFa=s(Yae);XHr=r(DFa,"TFData2VecVisionModel"),DFa.forEach(t),zHr=r(fro," (Data2VecVision model)"),fro.forEach(t),QHr=i(j),sw=n(j,"LI",{});var gro=s(sw);L9e=n(gro,"STRONG",{});var GFa=s(L9e);WHr=r(GFa,"deberta"),GFa.forEach(t),UHr=r(gro," \u2014 "),Zae=n(gro,"A",{href:!0});var OFa=s(Zae);HHr=r(OFa,"TFDebertaModel"),OFa.forEach(t),JHr=r(gro," (DeBERTa model)"),gro.forEach(t),YHr=i(j),lw=n(j,"LI",{});var hro=s(lw);y9e=n(hro,"STRONG",{});var VFa=s(y9e);ZHr=r(VFa,"deberta-v2"),VFa.forEach(t),KHr=r(hro," \u2014 "),Kae=n(hro,"A",{href:!0});var XFa=s(Kae);eJr=r(XFa,"TFDebertaV2Model"),XFa.forEach(t),oJr=r(hro," (DeBERTa-v2 model)"),hro.forEach(t),rJr=i(j),iw=n(j,"LI",{});var uro=s(iw);x9e=n(uro,"STRONG",{});var zFa=s(x9e);tJr=r(zFa,"deit"),zFa.forEach(t),aJr=r(uro," \u2014 "),ene=n(uro,"A",{href:!0});var QFa=s(ene);nJr=r(QFa,"TFDeiTModel"),QFa.forEach(t),sJr=r(uro," (DeiT model)"),uro.forEach(t),lJr=i(j),dw=n(j,"LI",{});var pro=s(dw);$9e=n(pro,"STRONG",{});var WFa=s($9e);iJr=r(WFa,"distilbert"),WFa.forEach(t),dJr=r(pro," \u2014 "),one=n(pro,"A",{href:!0});var UFa=s(one);mJr=r(UFa,"TFDistilBertModel"),UFa.forEach(t),cJr=r(pro," (DistilBERT model)"),pro.forEach(t),fJr=i(j),mw=n(j,"LI",{});var _ro=s(mw);k9e=n(_ro,"STRONG",{});var HFa=s(k9e);gJr=r(HFa,"dpr"),HFa.forEach(t),hJr=r(_ro," \u2014 "),rne=n(_ro,"A",{href:!0});var JFa=s(rne);uJr=r(JFa,"TFDPRQuestionEncoder"),JFa.forEach(t),pJr=r(_ro," (DPR model)"),_ro.forEach(t),_Jr=i(j),cw=n(j,"LI",{});var bro=s(cw);S9e=n(bro,"STRONG",{});var YFa=s(S9e);bJr=r(YFa,"electra"),YFa.forEach(t),vJr=r(bro," \u2014 "),tne=n(bro,"A",{href:!0});var ZFa=s(tne);FJr=r(ZFa,"TFElectraModel"),ZFa.forEach(t),TJr=r(bro," (ELECTRA model)"),bro.forEach(t),MJr=i(j),fw=n(j,"LI",{});var vro=s(fw);R9e=n(vro,"STRONG",{});var KFa=s(R9e);EJr=r(KFa,"esm"),KFa.forEach(t),CJr=r(vro," \u2014 "),ane=n(vro,"A",{href:!0});var eTa=s(ane);wJr=r(eTa,"TFEsmModel"),eTa.forEach(t),AJr=r(vro," (ESM model)"),vro.forEach(t),LJr=i(j),gw=n(j,"LI",{});var Fro=s(gw);P9e=n(Fro,"STRONG",{});var oTa=s(P9e);yJr=r(oTa,"flaubert"),oTa.forEach(t),xJr=r(Fro," \u2014 "),nne=n(Fro,"A",{href:!0});var rTa=s(nne);$Jr=r(rTa,"TFFlaubertModel"),rTa.forEach(t),kJr=r(Fro," (FlauBERT model)"),Fro.forEach(t),SJr=i(j),Gl=n(j,"LI",{});var zq=s(Gl);B9e=n(zq,"STRONG",{});var tTa=s(B9e);RJr=r(tTa,"funnel"),tTa.forEach(t),PJr=r(zq," \u2014 "),sne=n(zq,"A",{href:!0});var aTa=s(sne);BJr=r(aTa,"TFFunnelModel"),aTa.forEach(t),IJr=r(zq," or "),lne=n(zq,"A",{href:!0});var nTa=s(lne);NJr=r(nTa,"TFFunnelBaseModel"),nTa.forEach(t),qJr=r(zq," (Funnel Transformer model)"),zq.forEach(t),jJr=i(j),hw=n(j,"LI",{});var Tro=s(hw);I9e=n(Tro,"STRONG",{});var sTa=s(I9e);DJr=r(sTa,"gpt2"),sTa.forEach(t),GJr=r(Tro," \u2014 "),ine=n(Tro,"A",{href:!0});var lTa=s(ine);OJr=r(lTa,"TFGPT2Model"),lTa.forEach(t),VJr=r(Tro," (OpenAI GPT-2 model)"),Tro.forEach(t),XJr=i(j),uw=n(j,"LI",{});var Mro=s(uw);N9e=n(Mro,"STRONG",{});var iTa=s(N9e);zJr=r(iTa,"gptj"),iTa.forEach(t),QJr=r(Mro," \u2014 "),dne=n(Mro,"A",{href:!0});var dTa=s(dne);WJr=r(dTa,"TFGPTJModel"),dTa.forEach(t),UJr=r(Mro," (GPT-J model)"),Mro.forEach(t),HJr=i(j),pw=n(j,"LI",{});var Ero=s(pw);q9e=n(Ero,"STRONG",{});var mTa=s(q9e);JJr=r(mTa,"groupvit"),mTa.forEach(t),YJr=r(Ero," \u2014 "),mne=n(Ero,"A",{href:!0});var cTa=s(mne);ZJr=r(cTa,"TFGroupViTModel"),cTa.forEach(t),KJr=r(Ero," (GroupViT model)"),Ero.forEach(t),eYr=i(j),_w=n(j,"LI",{});var Cro=s(_w);j9e=n(Cro,"STRONG",{});var fTa=s(j9e);oYr=r(fTa,"hubert"),fTa.forEach(t),rYr=r(Cro," \u2014 "),cne=n(Cro,"A",{href:!0});var gTa=s(cne);tYr=r(gTa,"TFHubertModel"),gTa.forEach(t),aYr=r(Cro," (Hubert model)"),Cro.forEach(t),nYr=i(j),bw=n(j,"LI",{});var wro=s(bw);D9e=n(wro,"STRONG",{});var hTa=s(D9e);sYr=r(hTa,"layoutlm"),hTa.forEach(t),lYr=r(wro," \u2014 "),fne=n(wro,"A",{href:!0});var uTa=s(fne);iYr=r(uTa,"TFLayoutLMModel"),uTa.forEach(t),dYr=r(wro," (LayoutLM model)"),wro.forEach(t),mYr=i(j),vw=n(j,"LI",{});var Aro=s(vw);G9e=n(Aro,"STRONG",{});var pTa=s(G9e);cYr=r(pTa,"layoutlmv3"),pTa.forEach(t),fYr=r(Aro," \u2014 "),gne=n(Aro,"A",{href:!0});var _Ta=s(gne);gYr=r(_Ta,"TFLayoutLMv3Model"),_Ta.forEach(t),hYr=r(Aro," (LayoutLMv3 model)"),Aro.forEach(t),uYr=i(j),Fw=n(j,"LI",{});var Lro=s(Fw);O9e=n(Lro,"STRONG",{});var bTa=s(O9e);pYr=r(bTa,"led"),bTa.forEach(t),_Yr=r(Lro," \u2014 "),hne=n(Lro,"A",{href:!0});var vTa=s(hne);bYr=r(vTa,"TFLEDModel"),vTa.forEach(t),vYr=r(Lro," (LED model)"),Lro.forEach(t),FYr=i(j),Tw=n(j,"LI",{});var yro=s(Tw);V9e=n(yro,"STRONG",{});var FTa=s(V9e);TYr=r(FTa,"longformer"),FTa.forEach(t),MYr=r(yro," \u2014 "),une=n(yro,"A",{href:!0});var TTa=s(une);EYr=r(TTa,"TFLongformerModel"),TTa.forEach(t),CYr=r(yro," (Longformer model)"),yro.forEach(t),wYr=i(j),Mw=n(j,"LI",{});var xro=s(Mw);X9e=n(xro,"STRONG",{});var MTa=s(X9e);AYr=r(MTa,"lxmert"),MTa.forEach(t),LYr=r(xro," \u2014 "),pne=n(xro,"A",{href:!0});var ETa=s(pne);yYr=r(ETa,"TFLxmertModel"),ETa.forEach(t),xYr=r(xro," (LXMERT model)"),xro.forEach(t),$Yr=i(j),Ew=n(j,"LI",{});var $ro=s(Ew);z9e=n($ro,"STRONG",{});var CTa=s(z9e);kYr=r(CTa,"marian"),CTa.forEach(t),SYr=r($ro," \u2014 "),_ne=n($ro,"A",{href:!0});var wTa=s(_ne);RYr=r(wTa,"TFMarianModel"),wTa.forEach(t),PYr=r($ro," (Marian model)"),$ro.forEach(t),BYr=i(j),Cw=n(j,"LI",{});var kro=s(Cw);Q9e=n(kro,"STRONG",{});var ATa=s(Q9e);IYr=r(ATa,"mbart"),ATa.forEach(t),NYr=r(kro," \u2014 "),bne=n(kro,"A",{href:!0});var LTa=s(bne);qYr=r(LTa,"TFMBartModel"),LTa.forEach(t),jYr=r(kro," (mBART model)"),kro.forEach(t),DYr=i(j),ww=n(j,"LI",{});var Sro=s(ww);W9e=n(Sro,"STRONG",{});var yTa=s(W9e);GYr=r(yTa,"mobilebert"),yTa.forEach(t),OYr=r(Sro," \u2014 "),vne=n(Sro,"A",{href:!0});var xTa=s(vne);VYr=r(xTa,"TFMobileBertModel"),xTa.forEach(t),XYr=r(Sro," (MobileBERT model)"),Sro.forEach(t),zYr=i(j),Aw=n(j,"LI",{});var Rro=s(Aw);U9e=n(Rro,"STRONG",{});var $Ta=s(U9e);QYr=r($Ta,"mobilevit"),$Ta.forEach(t),WYr=r(Rro," \u2014 "),Fne=n(Rro,"A",{href:!0});var kTa=s(Fne);UYr=r(kTa,"TFMobileViTModel"),kTa.forEach(t),HYr=r(Rro," (MobileViT model)"),Rro.forEach(t),JYr=i(j),Lw=n(j,"LI",{});var Pro=s(Lw);H9e=n(Pro,"STRONG",{});var STa=s(H9e);YYr=r(STa,"mpnet"),STa.forEach(t),ZYr=r(Pro," \u2014 "),Tne=n(Pro,"A",{href:!0});var RTa=s(Tne);KYr=r(RTa,"TFMPNetModel"),RTa.forEach(t),eZr=r(Pro," (MPNet model)"),Pro.forEach(t),oZr=i(j),yw=n(j,"LI",{});var Bro=s(yw);J9e=n(Bro,"STRONG",{});var PTa=s(J9e);rZr=r(PTa,"mt5"),PTa.forEach(t),tZr=r(Bro," \u2014 "),Mne=n(Bro,"A",{href:!0});var BTa=s(Mne);aZr=r(BTa,"TFMT5Model"),BTa.forEach(t),nZr=r(Bro," (MT5 model)"),Bro.forEach(t),sZr=i(j),xw=n(j,"LI",{});var Iro=s(xw);Y9e=n(Iro,"STRONG",{});var ITa=s(Y9e);lZr=r(ITa,"openai-gpt"),ITa.forEach(t),iZr=r(Iro," \u2014 "),Ene=n(Iro,"A",{href:!0});var NTa=s(Ene);dZr=r(NTa,"TFOpenAIGPTModel"),NTa.forEach(t),mZr=r(Iro," (OpenAI GPT model)"),Iro.forEach(t),cZr=i(j),$w=n(j,"LI",{});var Nro=s($w);Z9e=n(Nro,"STRONG",{});var qTa=s(Z9e);fZr=r(qTa,"opt"),qTa.forEach(t),gZr=r(Nro," \u2014 "),Cne=n(Nro,"A",{href:!0});var jTa=s(Cne);hZr=r(jTa,"TFOPTModel"),jTa.forEach(t),uZr=r(Nro," (OPT model)"),Nro.forEach(t),pZr=i(j),kw=n(j,"LI",{});var qro=s(kw);K9e=n(qro,"STRONG",{});var DTa=s(K9e);_Zr=r(DTa,"pegasus"),DTa.forEach(t),bZr=r(qro," \u2014 "),wne=n(qro,"A",{href:!0});var GTa=s(wne);vZr=r(GTa,"TFPegasusModel"),GTa.forEach(t),FZr=r(qro," (Pegasus model)"),qro.forEach(t),TZr=i(j),Sw=n(j,"LI",{});var jro=s(Sw);exe=n(jro,"STRONG",{});var OTa=s(exe);MZr=r(OTa,"regnet"),OTa.forEach(t),EZr=r(jro," \u2014 "),Ane=n(jro,"A",{href:!0});var VTa=s(Ane);CZr=r(VTa,"TFRegNetModel"),VTa.forEach(t),wZr=r(jro," (RegNet model)"),jro.forEach(t),AZr=i(j),Rw=n(j,"LI",{});var Dro=s(Rw);oxe=n(Dro,"STRONG",{});var XTa=s(oxe);LZr=r(XTa,"rembert"),XTa.forEach(t),yZr=r(Dro," \u2014 "),Lne=n(Dro,"A",{href:!0});var zTa=s(Lne);xZr=r(zTa,"TFRemBertModel"),zTa.forEach(t),$Zr=r(Dro," (RemBERT model)"),Dro.forEach(t),kZr=i(j),Pw=n(j,"LI",{});var Gro=s(Pw);rxe=n(Gro,"STRONG",{});var QTa=s(rxe);SZr=r(QTa,"resnet"),QTa.forEach(t),RZr=r(Gro," \u2014 "),yne=n(Gro,"A",{href:!0});var WTa=s(yne);PZr=r(WTa,"TFResNetModel"),WTa.forEach(t),BZr=r(Gro," (ResNet model)"),Gro.forEach(t),IZr=i(j),Bw=n(j,"LI",{});var Oro=s(Bw);txe=n(Oro,"STRONG",{});var UTa=s(txe);NZr=r(UTa,"roberta"),UTa.forEach(t),qZr=r(Oro," \u2014 "),xne=n(Oro,"A",{href:!0});var HTa=s(xne);jZr=r(HTa,"TFRobertaModel"),HTa.forEach(t),DZr=r(Oro," (RoBERTa model)"),Oro.forEach(t),GZr=i(j),Iw=n(j,"LI",{});var Vro=s(Iw);axe=n(Vro,"STRONG",{});var JTa=s(axe);OZr=r(JTa,"roformer"),JTa.forEach(t),VZr=r(Vro," \u2014 "),$ne=n(Vro,"A",{href:!0});var YTa=s($ne);XZr=r(YTa,"TFRoFormerModel"),YTa.forEach(t),zZr=r(Vro," (RoFormer model)"),Vro.forEach(t),QZr=i(j),Nw=n(j,"LI",{});var Xro=s(Nw);nxe=n(Xro,"STRONG",{});var ZTa=s(nxe);WZr=r(ZTa,"segformer"),ZTa.forEach(t),UZr=r(Xro," \u2014 "),kne=n(Xro,"A",{href:!0});var KTa=s(kne);HZr=r(KTa,"TFSegformerModel"),KTa.forEach(t),JZr=r(Xro," (SegFormer model)"),Xro.forEach(t),YZr=i(j),qw=n(j,"LI",{});var zro=s(qw);sxe=n(zro,"STRONG",{});var eMa=s(sxe);ZZr=r(eMa,"speech_to_text"),eMa.forEach(t),KZr=r(zro," \u2014 "),Sne=n(zro,"A",{href:!0});var oMa=s(Sne);eKr=r(oMa,"TFSpeech2TextModel"),oMa.forEach(t),oKr=r(zro," (Speech2Text model)"),zro.forEach(t),rKr=i(j),jw=n(j,"LI",{});var Qro=s(jw);lxe=n(Qro,"STRONG",{});var rMa=s(lxe);tKr=r(rMa,"swin"),rMa.forEach(t),aKr=r(Qro," \u2014 "),Rne=n(Qro,"A",{href:!0});var tMa=s(Rne);nKr=r(tMa,"TFSwinModel"),tMa.forEach(t),sKr=r(Qro," (Swin Transformer model)"),Qro.forEach(t),lKr=i(j),Dw=n(j,"LI",{});var Wro=s(Dw);ixe=n(Wro,"STRONG",{});var aMa=s(ixe);iKr=r(aMa,"t5"),aMa.forEach(t),dKr=r(Wro," \u2014 "),Pne=n(Wro,"A",{href:!0});var nMa=s(Pne);mKr=r(nMa,"TFT5Model"),nMa.forEach(t),cKr=r(Wro," (T5 model)"),Wro.forEach(t),fKr=i(j),Gw=n(j,"LI",{});var Uro=s(Gw);dxe=n(Uro,"STRONG",{});var sMa=s(dxe);gKr=r(sMa,"tapas"),sMa.forEach(t),hKr=r(Uro," \u2014 "),Bne=n(Uro,"A",{href:!0});var lMa=s(Bne);uKr=r(lMa,"TFTapasModel"),lMa.forEach(t),pKr=r(Uro," (TAPAS model)"),Uro.forEach(t),_Kr=i(j),Ow=n(j,"LI",{});var Hro=s(Ow);mxe=n(Hro,"STRONG",{});var iMa=s(mxe);bKr=r(iMa,"transfo-xl"),iMa.forEach(t),vKr=r(Hro," \u2014 "),Ine=n(Hro,"A",{href:!0});var dMa=s(Ine);FKr=r(dMa,"TFTransfoXLModel"),dMa.forEach(t),TKr=r(Hro," (Transformer-XL model)"),Hro.forEach(t),MKr=i(j),Vw=n(j,"LI",{});var Jro=s(Vw);cxe=n(Jro,"STRONG",{});var mMa=s(cxe);EKr=r(mMa,"vit"),mMa.forEach(t),CKr=r(Jro," \u2014 "),Nne=n(Jro,"A",{href:!0});var cMa=s(Nne);wKr=r(cMa,"TFViTModel"),cMa.forEach(t),AKr=r(Jro," (ViT model)"),Jro.forEach(t),LKr=i(j),Xw=n(j,"LI",{});var Yro=s(Xw);fxe=n(Yro,"STRONG",{});var fMa=s(fxe);yKr=r(fMa,"vit_mae"),fMa.forEach(t),xKr=r(Yro," \u2014 "),qne=n(Yro,"A",{href:!0});var gMa=s(qne);$Kr=r(gMa,"TFViTMAEModel"),gMa.forEach(t),kKr=r(Yro," (ViTMAE model)"),Yro.forEach(t),SKr=i(j),zw=n(j,"LI",{});var Zro=s(zw);gxe=n(Zro,"STRONG",{});var hMa=s(gxe);RKr=r(hMa,"wav2vec2"),hMa.forEach(t),PKr=r(Zro," \u2014 "),jne=n(Zro,"A",{href:!0});var uMa=s(jne);BKr=r(uMa,"TFWav2Vec2Model"),uMa.forEach(t),IKr=r(Zro," (Wav2Vec2 model)"),Zro.forEach(t),NKr=i(j),Qw=n(j,"LI",{});var Kro=s(Qw);hxe=n(Kro,"STRONG",{});var pMa=s(hxe);qKr=r(pMa,"whisper"),pMa.forEach(t),jKr=r(Kro," \u2014 "),Dne=n(Kro,"A",{href:!0});var _Ma=s(Dne);DKr=r(_Ma,"TFWhisperModel"),_Ma.forEach(t),GKr=r(Kro," (Whisper model)"),Kro.forEach(t),OKr=i(j),Ww=n(j,"LI",{});var eto=s(Ww);uxe=n(eto,"STRONG",{});var bMa=s(uxe);VKr=r(bMa,"xglm"),bMa.forEach(t),XKr=r(eto," \u2014 "),Gne=n(eto,"A",{href:!0});var vMa=s(Gne);zKr=r(vMa,"TFXGLMModel"),vMa.forEach(t),QKr=r(eto," (XGLM model)"),eto.forEach(t),WKr=i(j),Uw=n(j,"LI",{});var oto=s(Uw);pxe=n(oto,"STRONG",{});var FMa=s(pxe);UKr=r(FMa,"xlm"),FMa.forEach(t),HKr=r(oto," \u2014 "),One=n(oto,"A",{href:!0});var TMa=s(One);JKr=r(TMa,"TFXLMModel"),TMa.forEach(t),YKr=r(oto," (XLM model)"),oto.forEach(t),ZKr=i(j),Hw=n(j,"LI",{});var rto=s(Hw);_xe=n(rto,"STRONG",{});var MMa=s(_xe);KKr=r(MMa,"xlm-roberta"),MMa.forEach(t),eet=r(rto," \u2014 "),Vne=n(rto,"A",{href:!0});var EMa=s(Vne);oet=r(EMa,"TFXLMRobertaModel"),EMa.forEach(t),ret=r(rto," (XLM-RoBERTa model)"),rto.forEach(t),tet=i(j),Jw=n(j,"LI",{});var tto=s(Jw);bxe=n(tto,"STRONG",{});var CMa=s(bxe);aet=r(CMa,"xlnet"),CMa.forEach(t),net=r(tto," \u2014 "),Xne=n(tto,"A",{href:!0});var wMa=s(Xne);set=r(wMa,"TFXLNetModel"),wMa.forEach(t),iet=r(tto," (XLNet model)"),tto.forEach(t),j.forEach(t),det=i(Ai),T(Yw.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),qdo=i(c),Ec=n(c,"H2",{class:!0});var lfo=s(Ec);Zw=n(lfo,"A",{id:!0,class:!0,href:!0});var AMa=s(Zw);vxe=n(AMa,"SPAN",{});var LMa=s(vxe);T(OP.$$.fragment,LMa),LMa.forEach(t),AMa.forEach(t),met=i(lfo),Fxe=n(lfo,"SPAN",{});var yMa=s(Fxe);cet=r(yMa,"TFAutoModelForPreTraining"),yMa.forEach(t),lfo.forEach(t),jdo=i(c),pr=n(c,"DIV",{class:!0});var Li=s(pr);T(VP.$$.fragment,Li),fet=i(Li),Cc=n(Li,"P",{});var Oge=s(Cc);get=r(Oge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zne=n(Oge,"A",{href:!0});var xMa=s(zne);het=r(xMa,"from_pretrained()"),xMa.forEach(t),uet=r(Oge," class method or the "),Qne=n(Oge,"A",{href:!0});var $Ma=s(Qne);pet=r($Ma,"from_config()"),$Ma.forEach(t),_et=r(Oge,` class
method.`),Oge.forEach(t),bet=i(Li),XP=n(Li,"P",{});var ifo=s(XP);vet=r(ifo,"This class cannot be instantiated directly using "),Txe=n(ifo,"CODE",{});var kMa=s(Txe);Fet=r(kMa,"__init__()"),kMa.forEach(t),Tet=r(ifo," (throws an error)."),ifo.forEach(t),Met=i(Li),ra=n(Li,"DIV",{class:!0});var M$=s(ra);T(zP.$$.fragment,M$),Eet=i(M$),Mxe=n(M$,"P",{});var SMa=s(Mxe);Cet=r(SMa,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),SMa.forEach(t),wet=i(M$),wc=n(M$,"P",{});var Vge=s(wc);Aet=r(Vge,`Note:
Loading a model from its configuration file does `),Exe=n(Vge,"STRONG",{});var RMa=s(Exe);Let=r(RMa,"not"),RMa.forEach(t),yet=r(Vge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wne=n(Vge,"A",{href:!0});var PMa=s(Wne);xet=r(PMa,"from_pretrained()"),PMa.forEach(t),$et=r(Vge," to load the model weights."),Vge.forEach(t),ket=i(M$),T(Kw.$$.fragment,M$),M$.forEach(t),Set=i(Li),Qr=n(Li,"DIV",{class:!0});var yi=s(Qr);T(QP.$$.fragment,yi),Ret=i(yi),Cxe=n(yi,"P",{});var BMa=s(Cxe);Pet=r(BMa,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BMa.forEach(t),Bet=i(yi),Vn=n(yi,"P",{});var E$=s(Vn);Iet=r(E$,"The model class to instantiate is selected based on the "),wxe=n(E$,"CODE",{});var IMa=s(wxe);Net=r(IMa,"model_type"),IMa.forEach(t),qet=r(E$,` property of the config object (either
passed as an argument or loaded from `),Axe=n(E$,"CODE",{});var NMa=s(Axe);jet=r(NMa,"pretrained_model_name_or_path"),NMa.forEach(t),Det=r(E$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lxe=n(E$,"CODE",{});var qMa=s(Lxe);Get=r(qMa,"pretrained_model_name_or_path"),qMa.forEach(t),Oet=r(E$,":"),E$.forEach(t),Vet=i(yi),de=n(yi,"UL",{});var fe=s(de);eA=n(fe,"LI",{});var ato=s(eA);yxe=n(ato,"STRONG",{});var jMa=s(yxe);Xet=r(jMa,"albert"),jMa.forEach(t),zet=r(ato," \u2014 "),Une=n(ato,"A",{href:!0});var DMa=s(Une);Qet=r(DMa,"TFAlbertForPreTraining"),DMa.forEach(t),Wet=r(ato," (ALBERT model)"),ato.forEach(t),Uet=i(fe),oA=n(fe,"LI",{});var nto=s(oA);xxe=n(nto,"STRONG",{});var GMa=s(xxe);Het=r(GMa,"bart"),GMa.forEach(t),Jet=r(nto," \u2014 "),Hne=n(nto,"A",{href:!0});var OMa=s(Hne);Yet=r(OMa,"TFBartForConditionalGeneration"),OMa.forEach(t),Zet=r(nto," (BART model)"),nto.forEach(t),Ket=i(fe),rA=n(fe,"LI",{});var sto=s(rA);$xe=n(sto,"STRONG",{});var VMa=s($xe);eot=r(VMa,"bert"),VMa.forEach(t),oot=r(sto," \u2014 "),Jne=n(sto,"A",{href:!0});var XMa=s(Jne);rot=r(XMa,"TFBertForPreTraining"),XMa.forEach(t),tot=r(sto," (BERT model)"),sto.forEach(t),aot=i(fe),tA=n(fe,"LI",{});var lto=s(tA);kxe=n(lto,"STRONG",{});var zMa=s(kxe);not=r(zMa,"camembert"),zMa.forEach(t),sot=r(lto," \u2014 "),Yne=n(lto,"A",{href:!0});var QMa=s(Yne);lot=r(QMa,"TFCamembertForMaskedLM"),QMa.forEach(t),iot=r(lto," (CamemBERT model)"),lto.forEach(t),dot=i(fe),aA=n(fe,"LI",{});var ito=s(aA);Sxe=n(ito,"STRONG",{});var WMa=s(Sxe);mot=r(WMa,"ctrl"),WMa.forEach(t),cot=r(ito," \u2014 "),Zne=n(ito,"A",{href:!0});var UMa=s(Zne);fot=r(UMa,"TFCTRLLMHeadModel"),UMa.forEach(t),got=r(ito," (CTRL model)"),ito.forEach(t),hot=i(fe),nA=n(fe,"LI",{});var dto=s(nA);Rxe=n(dto,"STRONG",{});var HMa=s(Rxe);uot=r(HMa,"distilbert"),HMa.forEach(t),pot=r(dto," \u2014 "),Kne=n(dto,"A",{href:!0});var JMa=s(Kne);_ot=r(JMa,"TFDistilBertForMaskedLM"),JMa.forEach(t),bot=r(dto," (DistilBERT model)"),dto.forEach(t),vot=i(fe),sA=n(fe,"LI",{});var mto=s(sA);Pxe=n(mto,"STRONG",{});var YMa=s(Pxe);Fot=r(YMa,"electra"),YMa.forEach(t),Tot=r(mto," \u2014 "),ese=n(mto,"A",{href:!0});var ZMa=s(ese);Mot=r(ZMa,"TFElectraForPreTraining"),ZMa.forEach(t),Eot=r(mto," (ELECTRA model)"),mto.forEach(t),Cot=i(fe),lA=n(fe,"LI",{});var cto=s(lA);Bxe=n(cto,"STRONG",{});var KMa=s(Bxe);wot=r(KMa,"flaubert"),KMa.forEach(t),Aot=r(cto," \u2014 "),ose=n(cto,"A",{href:!0});var eEa=s(ose);Lot=r(eEa,"TFFlaubertWithLMHeadModel"),eEa.forEach(t),yot=r(cto," (FlauBERT model)"),cto.forEach(t),xot=i(fe),iA=n(fe,"LI",{});var fto=s(iA);Ixe=n(fto,"STRONG",{});var oEa=s(Ixe);$ot=r(oEa,"funnel"),oEa.forEach(t),kot=r(fto," \u2014 "),rse=n(fto,"A",{href:!0});var rEa=s(rse);Sot=r(rEa,"TFFunnelForPreTraining"),rEa.forEach(t),Rot=r(fto," (Funnel Transformer model)"),fto.forEach(t),Pot=i(fe),dA=n(fe,"LI",{});var gto=s(dA);Nxe=n(gto,"STRONG",{});var tEa=s(Nxe);Bot=r(tEa,"gpt2"),tEa.forEach(t),Iot=r(gto," \u2014 "),tse=n(gto,"A",{href:!0});var aEa=s(tse);Not=r(aEa,"TFGPT2LMHeadModel"),aEa.forEach(t),qot=r(gto," (OpenAI GPT-2 model)"),gto.forEach(t),jot=i(fe),mA=n(fe,"LI",{});var hto=s(mA);qxe=n(hto,"STRONG",{});var nEa=s(qxe);Dot=r(nEa,"layoutlm"),nEa.forEach(t),Got=r(hto," \u2014 "),ase=n(hto,"A",{href:!0});var sEa=s(ase);Oot=r(sEa,"TFLayoutLMForMaskedLM"),sEa.forEach(t),Vot=r(hto," (LayoutLM model)"),hto.forEach(t),Xot=i(fe),cA=n(fe,"LI",{});var uto=s(cA);jxe=n(uto,"STRONG",{});var lEa=s(jxe);zot=r(lEa,"lxmert"),lEa.forEach(t),Qot=r(uto," \u2014 "),nse=n(uto,"A",{href:!0});var iEa=s(nse);Wot=r(iEa,"TFLxmertForPreTraining"),iEa.forEach(t),Uot=r(uto," (LXMERT model)"),uto.forEach(t),Hot=i(fe),fA=n(fe,"LI",{});var pto=s(fA);Dxe=n(pto,"STRONG",{});var dEa=s(Dxe);Jot=r(dEa,"mobilebert"),dEa.forEach(t),Yot=r(pto," \u2014 "),sse=n(pto,"A",{href:!0});var mEa=s(sse);Zot=r(mEa,"TFMobileBertForPreTraining"),mEa.forEach(t),Kot=r(pto," (MobileBERT model)"),pto.forEach(t),ert=i(fe),gA=n(fe,"LI",{});var _to=s(gA);Gxe=n(_to,"STRONG",{});var cEa=s(Gxe);ort=r(cEa,"mpnet"),cEa.forEach(t),rrt=r(_to," \u2014 "),lse=n(_to,"A",{href:!0});var fEa=s(lse);trt=r(fEa,"TFMPNetForMaskedLM"),fEa.forEach(t),art=r(_to," (MPNet model)"),_to.forEach(t),nrt=i(fe),hA=n(fe,"LI",{});var bto=s(hA);Oxe=n(bto,"STRONG",{});var gEa=s(Oxe);srt=r(gEa,"openai-gpt"),gEa.forEach(t),lrt=r(bto," \u2014 "),ise=n(bto,"A",{href:!0});var hEa=s(ise);irt=r(hEa,"TFOpenAIGPTLMHeadModel"),hEa.forEach(t),drt=r(bto," (OpenAI GPT model)"),bto.forEach(t),mrt=i(fe),uA=n(fe,"LI",{});var vto=s(uA);Vxe=n(vto,"STRONG",{});var uEa=s(Vxe);crt=r(uEa,"roberta"),uEa.forEach(t),frt=r(vto," \u2014 "),dse=n(vto,"A",{href:!0});var pEa=s(dse);grt=r(pEa,"TFRobertaForMaskedLM"),pEa.forEach(t),hrt=r(vto," (RoBERTa model)"),vto.forEach(t),urt=i(fe),pA=n(fe,"LI",{});var Fto=s(pA);Xxe=n(Fto,"STRONG",{});var _Ea=s(Xxe);prt=r(_Ea,"t5"),_Ea.forEach(t),_rt=r(Fto," \u2014 "),mse=n(Fto,"A",{href:!0});var bEa=s(mse);brt=r(bEa,"TFT5ForConditionalGeneration"),bEa.forEach(t),vrt=r(Fto," (T5 model)"),Fto.forEach(t),Frt=i(fe),_A=n(fe,"LI",{});var Tto=s(_A);zxe=n(Tto,"STRONG",{});var vEa=s(zxe);Trt=r(vEa,"tapas"),vEa.forEach(t),Mrt=r(Tto," \u2014 "),cse=n(Tto,"A",{href:!0});var FEa=s(cse);Ert=r(FEa,"TFTapasForMaskedLM"),FEa.forEach(t),Crt=r(Tto," (TAPAS model)"),Tto.forEach(t),wrt=i(fe),bA=n(fe,"LI",{});var Mto=s(bA);Qxe=n(Mto,"STRONG",{});var TEa=s(Qxe);Art=r(TEa,"transfo-xl"),TEa.forEach(t),Lrt=r(Mto," \u2014 "),fse=n(Mto,"A",{href:!0});var MEa=s(fse);yrt=r(MEa,"TFTransfoXLLMHeadModel"),MEa.forEach(t),xrt=r(Mto," (Transformer-XL model)"),Mto.forEach(t),$rt=i(fe),vA=n(fe,"LI",{});var Eto=s(vA);Wxe=n(Eto,"STRONG",{});var EEa=s(Wxe);krt=r(EEa,"vit_mae"),EEa.forEach(t),Srt=r(Eto," \u2014 "),gse=n(Eto,"A",{href:!0});var CEa=s(gse);Rrt=r(CEa,"TFViTMAEForPreTraining"),CEa.forEach(t),Prt=r(Eto," (ViTMAE model)"),Eto.forEach(t),Brt=i(fe),FA=n(fe,"LI",{});var Cto=s(FA);Uxe=n(Cto,"STRONG",{});var wEa=s(Uxe);Irt=r(wEa,"xlm"),wEa.forEach(t),Nrt=r(Cto," \u2014 "),hse=n(Cto,"A",{href:!0});var AEa=s(hse);qrt=r(AEa,"TFXLMWithLMHeadModel"),AEa.forEach(t),jrt=r(Cto," (XLM model)"),Cto.forEach(t),Drt=i(fe),TA=n(fe,"LI",{});var wto=s(TA);Hxe=n(wto,"STRONG",{});var LEa=s(Hxe);Grt=r(LEa,"xlm-roberta"),LEa.forEach(t),Ort=r(wto," \u2014 "),use=n(wto,"A",{href:!0});var yEa=s(use);Vrt=r(yEa,"TFXLMRobertaForMaskedLM"),yEa.forEach(t),Xrt=r(wto," (XLM-RoBERTa model)"),wto.forEach(t),zrt=i(fe),MA=n(fe,"LI",{});var Ato=s(MA);Jxe=n(Ato,"STRONG",{});var xEa=s(Jxe);Qrt=r(xEa,"xlnet"),xEa.forEach(t),Wrt=r(Ato," \u2014 "),pse=n(Ato,"A",{href:!0});var $Ea=s(pse);Urt=r($Ea,"TFXLNetLMHeadModel"),$Ea.forEach(t),Hrt=r(Ato," (XLNet model)"),Ato.forEach(t),fe.forEach(t),Jrt=i(yi),T(EA.$$.fragment,yi),yi.forEach(t),Li.forEach(t),Ddo=i(c),Ac=n(c,"H2",{class:!0});var dfo=s(Ac);CA=n(dfo,"A",{id:!0,class:!0,href:!0});var kEa=s(CA);Yxe=n(kEa,"SPAN",{});var SEa=s(Yxe);T(WP.$$.fragment,SEa),SEa.forEach(t),kEa.forEach(t),Yrt=i(dfo),Zxe=n(dfo,"SPAN",{});var REa=s(Zxe);Zrt=r(REa,"TFAutoModelForCausalLM"),REa.forEach(t),dfo.forEach(t),Gdo=i(c),_r=n(c,"DIV",{class:!0});var xi=s(_r);T(UP.$$.fragment,xi),Krt=i(xi),Lc=n(xi,"P",{});var Xge=s(Lc);ett=r(Xge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_se=n(Xge,"A",{href:!0});var PEa=s(_se);ott=r(PEa,"from_pretrained()"),PEa.forEach(t),rtt=r(Xge," class method or the "),bse=n(Xge,"A",{href:!0});var BEa=s(bse);ttt=r(BEa,"from_config()"),BEa.forEach(t),att=r(Xge,` class
method.`),Xge.forEach(t),ntt=i(xi),HP=n(xi,"P",{});var mfo=s(HP);stt=r(mfo,"This class cannot be instantiated directly using "),Kxe=n(mfo,"CODE",{});var IEa=s(Kxe);ltt=r(IEa,"__init__()"),IEa.forEach(t),itt=r(mfo," (throws an error)."),mfo.forEach(t),dtt=i(xi),ta=n(xi,"DIV",{class:!0});var C$=s(ta);T(JP.$$.fragment,C$),mtt=i(C$),e$e=n(C$,"P",{});var NEa=s(e$e);ctt=r(NEa,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NEa.forEach(t),ftt=i(C$),yc=n(C$,"P",{});var zge=s(yc);gtt=r(zge,`Note:
Loading a model from its configuration file does `),o$e=n(zge,"STRONG",{});var qEa=s(o$e);htt=r(qEa,"not"),qEa.forEach(t),utt=r(zge,` load the model weights. It only affects the
model\u2019s configuration. Use `),vse=n(zge,"A",{href:!0});var jEa=s(vse);ptt=r(jEa,"from_pretrained()"),jEa.forEach(t),_tt=r(zge," to load the model weights."),zge.forEach(t),btt=i(C$),T(wA.$$.fragment,C$),C$.forEach(t),vtt=i(xi),Wr=n(xi,"DIV",{class:!0});var $i=s(Wr);T(YP.$$.fragment,$i),Ftt=i($i),r$e=n($i,"P",{});var DEa=s(r$e);Ttt=r(DEa,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),DEa.forEach(t),Mtt=i($i),Xn=n($i,"P",{});var w$=s(Xn);Ett=r(w$,"The model class to instantiate is selected based on the "),t$e=n(w$,"CODE",{});var GEa=s(t$e);Ctt=r(GEa,"model_type"),GEa.forEach(t),wtt=r(w$,` property of the config object (either
passed as an argument or loaded from `),a$e=n(w$,"CODE",{});var OEa=s(a$e);Att=r(OEa,"pretrained_model_name_or_path"),OEa.forEach(t),Ltt=r(w$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n$e=n(w$,"CODE",{});var VEa=s(n$e);ytt=r(VEa,"pretrained_model_name_or_path"),VEa.forEach(t),xtt=r(w$,":"),w$.forEach(t),$tt=i($i),Ce=n($i,"UL",{});var Ae=s(Ce);AA=n(Ae,"LI",{});var Lto=s(AA);s$e=n(Lto,"STRONG",{});var XEa=s(s$e);ktt=r(XEa,"bert"),XEa.forEach(t),Stt=r(Lto," \u2014 "),Fse=n(Lto,"A",{href:!0});var zEa=s(Fse);Rtt=r(zEa,"TFBertLMHeadModel"),zEa.forEach(t),Ptt=r(Lto," (BERT model)"),Lto.forEach(t),Btt=i(Ae),LA=n(Ae,"LI",{});var yto=s(LA);l$e=n(yto,"STRONG",{});var QEa=s(l$e);Itt=r(QEa,"camembert"),QEa.forEach(t),Ntt=r(yto," \u2014 "),Tse=n(yto,"A",{href:!0});var WEa=s(Tse);qtt=r(WEa,"TFCamembertForCausalLM"),WEa.forEach(t),jtt=r(yto," (CamemBERT model)"),yto.forEach(t),Dtt=i(Ae),yA=n(Ae,"LI",{});var xto=s(yA);i$e=n(xto,"STRONG",{});var UEa=s(i$e);Gtt=r(UEa,"ctrl"),UEa.forEach(t),Ott=r(xto," \u2014 "),Mse=n(xto,"A",{href:!0});var HEa=s(Mse);Vtt=r(HEa,"TFCTRLLMHeadModel"),HEa.forEach(t),Xtt=r(xto," (CTRL model)"),xto.forEach(t),ztt=i(Ae),xA=n(Ae,"LI",{});var $to=s(xA);d$e=n($to,"STRONG",{});var JEa=s(d$e);Qtt=r(JEa,"gpt2"),JEa.forEach(t),Wtt=r($to," \u2014 "),Ese=n($to,"A",{href:!0});var YEa=s(Ese);Utt=r(YEa,"TFGPT2LMHeadModel"),YEa.forEach(t),Htt=r($to," (OpenAI GPT-2 model)"),$to.forEach(t),Jtt=i(Ae),$A=n(Ae,"LI",{});var kto=s($A);m$e=n(kto,"STRONG",{});var ZEa=s(m$e);Ytt=r(ZEa,"gptj"),ZEa.forEach(t),Ztt=r(kto," \u2014 "),Cse=n(kto,"A",{href:!0});var KEa=s(Cse);Ktt=r(KEa,"TFGPTJForCausalLM"),KEa.forEach(t),eat=r(kto," (GPT-J model)"),kto.forEach(t),oat=i(Ae),kA=n(Ae,"LI",{});var Sto=s(kA);c$e=n(Sto,"STRONG",{});var e4a=s(c$e);rat=r(e4a,"openai-gpt"),e4a.forEach(t),tat=r(Sto," \u2014 "),wse=n(Sto,"A",{href:!0});var o4a=s(wse);aat=r(o4a,"TFOpenAIGPTLMHeadModel"),o4a.forEach(t),nat=r(Sto," (OpenAI GPT model)"),Sto.forEach(t),sat=i(Ae),SA=n(Ae,"LI",{});var Rto=s(SA);f$e=n(Rto,"STRONG",{});var r4a=s(f$e);lat=r(r4a,"opt"),r4a.forEach(t),iat=r(Rto," \u2014 "),Ase=n(Rto,"A",{href:!0});var t4a=s(Ase);dat=r(t4a,"TFOPTForCausalLM"),t4a.forEach(t),mat=r(Rto," (OPT model)"),Rto.forEach(t),cat=i(Ae),RA=n(Ae,"LI",{});var Pto=s(RA);g$e=n(Pto,"STRONG",{});var a4a=s(g$e);fat=r(a4a,"rembert"),a4a.forEach(t),gat=r(Pto," \u2014 "),Lse=n(Pto,"A",{href:!0});var n4a=s(Lse);hat=r(n4a,"TFRemBertForCausalLM"),n4a.forEach(t),uat=r(Pto," (RemBERT model)"),Pto.forEach(t),pat=i(Ae),PA=n(Ae,"LI",{});var Bto=s(PA);h$e=n(Bto,"STRONG",{});var s4a=s(h$e);_at=r(s4a,"roberta"),s4a.forEach(t),bat=r(Bto," \u2014 "),yse=n(Bto,"A",{href:!0});var l4a=s(yse);vat=r(l4a,"TFRobertaForCausalLM"),l4a.forEach(t),Fat=r(Bto," (RoBERTa model)"),Bto.forEach(t),Tat=i(Ae),BA=n(Ae,"LI",{});var Ito=s(BA);u$e=n(Ito,"STRONG",{});var i4a=s(u$e);Mat=r(i4a,"roformer"),i4a.forEach(t),Eat=r(Ito," \u2014 "),xse=n(Ito,"A",{href:!0});var d4a=s(xse);Cat=r(d4a,"TFRoFormerForCausalLM"),d4a.forEach(t),wat=r(Ito," (RoFormer model)"),Ito.forEach(t),Aat=i(Ae),IA=n(Ae,"LI",{});var Nto=s(IA);p$e=n(Nto,"STRONG",{});var m4a=s(p$e);Lat=r(m4a,"transfo-xl"),m4a.forEach(t),yat=r(Nto," \u2014 "),$se=n(Nto,"A",{href:!0});var c4a=s($se);xat=r(c4a,"TFTransfoXLLMHeadModel"),c4a.forEach(t),$at=r(Nto," (Transformer-XL model)"),Nto.forEach(t),kat=i(Ae),NA=n(Ae,"LI",{});var qto=s(NA);_$e=n(qto,"STRONG",{});var f4a=s(_$e);Sat=r(f4a,"xglm"),f4a.forEach(t),Rat=r(qto," \u2014 "),kse=n(qto,"A",{href:!0});var g4a=s(kse);Pat=r(g4a,"TFXGLMForCausalLM"),g4a.forEach(t),Bat=r(qto," (XGLM model)"),qto.forEach(t),Iat=i(Ae),qA=n(Ae,"LI",{});var jto=s(qA);b$e=n(jto,"STRONG",{});var h4a=s(b$e);Nat=r(h4a,"xlm"),h4a.forEach(t),qat=r(jto," \u2014 "),Sse=n(jto,"A",{href:!0});var u4a=s(Sse);jat=r(u4a,"TFXLMWithLMHeadModel"),u4a.forEach(t),Dat=r(jto," (XLM model)"),jto.forEach(t),Gat=i(Ae),jA=n(Ae,"LI",{});var Dto=s(jA);v$e=n(Dto,"STRONG",{});var p4a=s(v$e);Oat=r(p4a,"xlnet"),p4a.forEach(t),Vat=r(Dto," \u2014 "),Rse=n(Dto,"A",{href:!0});var _4a=s(Rse);Xat=r(_4a,"TFXLNetLMHeadModel"),_4a.forEach(t),zat=r(Dto," (XLNet model)"),Dto.forEach(t),Ae.forEach(t),Qat=i($i),T(DA.$$.fragment,$i),$i.forEach(t),xi.forEach(t),Odo=i(c),xc=n(c,"H2",{class:!0});var cfo=s(xc);GA=n(cfo,"A",{id:!0,class:!0,href:!0});var b4a=s(GA);F$e=n(b4a,"SPAN",{});var v4a=s(F$e);T(ZP.$$.fragment,v4a),v4a.forEach(t),b4a.forEach(t),Wat=i(cfo),T$e=n(cfo,"SPAN",{});var F4a=s(T$e);Uat=r(F4a,"TFAutoModelForImageClassification"),F4a.forEach(t),cfo.forEach(t),Vdo=i(c),br=n(c,"DIV",{class:!0});var ki=s(br);T(KP.$$.fragment,ki),Hat=i(ki),$c=n(ki,"P",{});var Qge=s($c);Jat=r(Qge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Pse=n(Qge,"A",{href:!0});var T4a=s(Pse);Yat=r(T4a,"from_pretrained()"),T4a.forEach(t),Zat=r(Qge," class method or the "),Bse=n(Qge,"A",{href:!0});var M4a=s(Bse);Kat=r(M4a,"from_config()"),M4a.forEach(t),ent=r(Qge,` class
method.`),Qge.forEach(t),ont=i(ki),eB=n(ki,"P",{});var ffo=s(eB);rnt=r(ffo,"This class cannot be instantiated directly using "),M$e=n(ffo,"CODE",{});var E4a=s(M$e);tnt=r(E4a,"__init__()"),E4a.forEach(t),ant=r(ffo," (throws an error)."),ffo.forEach(t),nnt=i(ki),aa=n(ki,"DIV",{class:!0});var A$=s(aa);T(oB.$$.fragment,A$),snt=i(A$),E$e=n(A$,"P",{});var C4a=s(E$e);lnt=r(C4a,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),C4a.forEach(t),int=i(A$),kc=n(A$,"P",{});var Wge=s(kc);dnt=r(Wge,`Note:
Loading a model from its configuration file does `),C$e=n(Wge,"STRONG",{});var w4a=s(C$e);mnt=r(w4a,"not"),w4a.forEach(t),cnt=r(Wge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ise=n(Wge,"A",{href:!0});var A4a=s(Ise);fnt=r(A4a,"from_pretrained()"),A4a.forEach(t),gnt=r(Wge," to load the model weights."),Wge.forEach(t),hnt=i(A$),T(OA.$$.fragment,A$),A$.forEach(t),unt=i(ki),Ur=n(ki,"DIV",{class:!0});var Si=s(Ur);T(rB.$$.fragment,Si),pnt=i(Si),w$e=n(Si,"P",{});var L4a=s(w$e);_nt=r(L4a,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),L4a.forEach(t),bnt=i(Si),zn=n(Si,"P",{});var L$=s(zn);vnt=r(L$,"The model class to instantiate is selected based on the "),A$e=n(L$,"CODE",{});var y4a=s(A$e);Fnt=r(y4a,"model_type"),y4a.forEach(t),Tnt=r(L$,` property of the config object (either
passed as an argument or loaded from `),L$e=n(L$,"CODE",{});var x4a=s(L$e);Mnt=r(x4a,"pretrained_model_name_or_path"),x4a.forEach(t),Ent=r(L$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y$e=n(L$,"CODE",{});var $4a=s(y$e);Cnt=r($4a,"pretrained_model_name_or_path"),$4a.forEach(t),wnt=r(L$,":"),L$.forEach(t),Ant=i(Si),$e=n(Si,"UL",{});var je=s($e);VA=n(je,"LI",{});var Gto=s(VA);x$e=n(Gto,"STRONG",{});var k4a=s(x$e);Lnt=r(k4a,"convnext"),k4a.forEach(t),ynt=r(Gto," \u2014 "),Nse=n(Gto,"A",{href:!0});var S4a=s(Nse);xnt=r(S4a,"TFConvNextForImageClassification"),S4a.forEach(t),$nt=r(Gto," (ConvNeXT model)"),Gto.forEach(t),knt=i(je),XA=n(je,"LI",{});var Oto=s(XA);$$e=n(Oto,"STRONG",{});var R4a=s($$e);Snt=r(R4a,"cvt"),R4a.forEach(t),Rnt=r(Oto," \u2014 "),qse=n(Oto,"A",{href:!0});var P4a=s(qse);Pnt=r(P4a,"TFCvtForImageClassification"),P4a.forEach(t),Bnt=r(Oto," (CvT model)"),Oto.forEach(t),Int=i(je),zA=n(je,"LI",{});var Vto=s(zA);k$e=n(Vto,"STRONG",{});var B4a=s(k$e);Nnt=r(B4a,"data2vec-vision"),B4a.forEach(t),qnt=r(Vto," \u2014 "),jse=n(Vto,"A",{href:!0});var I4a=s(jse);jnt=r(I4a,"TFData2VecVisionForImageClassification"),I4a.forEach(t),Dnt=r(Vto," (Data2VecVision model)"),Vto.forEach(t),Gnt=i(je),Ol=n(je,"LI",{});var Qq=s(Ol);S$e=n(Qq,"STRONG",{});var N4a=s(S$e);Ont=r(N4a,"deit"),N4a.forEach(t),Vnt=r(Qq," \u2014 "),Dse=n(Qq,"A",{href:!0});var q4a=s(Dse);Xnt=r(q4a,"TFDeiTForImageClassification"),q4a.forEach(t),znt=r(Qq," or "),Gse=n(Qq,"A",{href:!0});var j4a=s(Gse);Qnt=r(j4a,"TFDeiTForImageClassificationWithTeacher"),j4a.forEach(t),Wnt=r(Qq," (DeiT model)"),Qq.forEach(t),Unt=i(je),QA=n(je,"LI",{});var Xto=s(QA);R$e=n(Xto,"STRONG",{});var D4a=s(R$e);Hnt=r(D4a,"mobilevit"),D4a.forEach(t),Jnt=r(Xto," \u2014 "),Ose=n(Xto,"A",{href:!0});var G4a=s(Ose);Ynt=r(G4a,"TFMobileViTForImageClassification"),G4a.forEach(t),Znt=r(Xto," (MobileViT model)"),Xto.forEach(t),Knt=i(je),WA=n(je,"LI",{});var zto=s(WA);P$e=n(zto,"STRONG",{});var O4a=s(P$e);est=r(O4a,"regnet"),O4a.forEach(t),ost=r(zto," \u2014 "),Vse=n(zto,"A",{href:!0});var V4a=s(Vse);rst=r(V4a,"TFRegNetForImageClassification"),V4a.forEach(t),tst=r(zto," (RegNet model)"),zto.forEach(t),ast=i(je),UA=n(je,"LI",{});var Qto=s(UA);B$e=n(Qto,"STRONG",{});var X4a=s(B$e);nst=r(X4a,"resnet"),X4a.forEach(t),sst=r(Qto," \u2014 "),Xse=n(Qto,"A",{href:!0});var z4a=s(Xse);lst=r(z4a,"TFResNetForImageClassification"),z4a.forEach(t),ist=r(Qto," (ResNet model)"),Qto.forEach(t),dst=i(je),HA=n(je,"LI",{});var Wto=s(HA);I$e=n(Wto,"STRONG",{});var Q4a=s(I$e);mst=r(Q4a,"segformer"),Q4a.forEach(t),cst=r(Wto," \u2014 "),zse=n(Wto,"A",{href:!0});var W4a=s(zse);fst=r(W4a,"TFSegformerForImageClassification"),W4a.forEach(t),gst=r(Wto," (SegFormer model)"),Wto.forEach(t),hst=i(je),JA=n(je,"LI",{});var Uto=s(JA);N$e=n(Uto,"STRONG",{});var U4a=s(N$e);ust=r(U4a,"swin"),U4a.forEach(t),pst=r(Uto," \u2014 "),Qse=n(Uto,"A",{href:!0});var H4a=s(Qse);_st=r(H4a,"TFSwinForImageClassification"),H4a.forEach(t),bst=r(Uto," (Swin Transformer model)"),Uto.forEach(t),vst=i(je),YA=n(je,"LI",{});var Hto=s(YA);q$e=n(Hto,"STRONG",{});var J4a=s(q$e);Fst=r(J4a,"vit"),J4a.forEach(t),Tst=r(Hto," \u2014 "),Wse=n(Hto,"A",{href:!0});var Y4a=s(Wse);Mst=r(Y4a,"TFViTForImageClassification"),Y4a.forEach(t),Est=r(Hto," (ViT model)"),Hto.forEach(t),je.forEach(t),Cst=i(Si),T(ZA.$$.fragment,Si),Si.forEach(t),ki.forEach(t),Xdo=i(c),Sc=n(c,"H2",{class:!0});var gfo=s(Sc);KA=n(gfo,"A",{id:!0,class:!0,href:!0});var Z4a=s(KA);j$e=n(Z4a,"SPAN",{});var K4a=s(j$e);T(tB.$$.fragment,K4a),K4a.forEach(t),Z4a.forEach(t),wst=i(gfo),D$e=n(gfo,"SPAN",{});var eCa=s(D$e);Ast=r(eCa,"TFAutoModelForSemanticSegmentation"),eCa.forEach(t),gfo.forEach(t),zdo=i(c),vr=n(c,"DIV",{class:!0});var Ri=s(vr);T(aB.$$.fragment,Ri),Lst=i(Ri),Rc=n(Ri,"P",{});var Uge=s(Rc);yst=r(Uge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Use=n(Uge,"A",{href:!0});var oCa=s(Use);xst=r(oCa,"from_pretrained()"),oCa.forEach(t),$st=r(Uge," class method or the "),Hse=n(Uge,"A",{href:!0});var rCa=s(Hse);kst=r(rCa,"from_config()"),rCa.forEach(t),Sst=r(Uge,` class
method.`),Uge.forEach(t),Rst=i(Ri),nB=n(Ri,"P",{});var hfo=s(nB);Pst=r(hfo,"This class cannot be instantiated directly using "),G$e=n(hfo,"CODE",{});var tCa=s(G$e);Bst=r(tCa,"__init__()"),tCa.forEach(t),Ist=r(hfo," (throws an error)."),hfo.forEach(t),Nst=i(Ri),na=n(Ri,"DIV",{class:!0});var y$=s(na);T(sB.$$.fragment,y$),qst=i(y$),O$e=n(y$,"P",{});var aCa=s(O$e);jst=r(aCa,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),aCa.forEach(t),Dst=i(y$),Pc=n(y$,"P",{});var Hge=s(Pc);Gst=r(Hge,`Note:
Loading a model from its configuration file does `),V$e=n(Hge,"STRONG",{});var nCa=s(V$e);Ost=r(nCa,"not"),nCa.forEach(t),Vst=r(Hge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jse=n(Hge,"A",{href:!0});var sCa=s(Jse);Xst=r(sCa,"from_pretrained()"),sCa.forEach(t),zst=r(Hge," to load the model weights."),Hge.forEach(t),Qst=i(y$),T(e6.$$.fragment,y$),y$.forEach(t),Wst=i(Ri),Hr=n(Ri,"DIV",{class:!0});var Pi=s(Hr);T(lB.$$.fragment,Pi),Ust=i(Pi),X$e=n(Pi,"P",{});var lCa=s(X$e);Hst=r(lCa,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lCa.forEach(t),Jst=i(Pi),Qn=n(Pi,"P",{});var x$=s(Qn);Yst=r(x$,"The model class to instantiate is selected based on the "),z$e=n(x$,"CODE",{});var iCa=s(z$e);Zst=r(iCa,"model_type"),iCa.forEach(t),Kst=r(x$,` property of the config object (either
passed as an argument or loaded from `),Q$e=n(x$,"CODE",{});var dCa=s(Q$e);elt=r(dCa,"pretrained_model_name_or_path"),dCa.forEach(t),olt=r(x$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W$e=n(x$,"CODE",{});var mCa=s(W$e);rlt=r(mCa,"pretrained_model_name_or_path"),mCa.forEach(t),tlt=r(x$,":"),x$.forEach(t),alt=i(Pi),Bc=n(Pi,"UL",{});var Jge=s(Bc);o6=n(Jge,"LI",{});var Jto=s(o6);U$e=n(Jto,"STRONG",{});var cCa=s(U$e);nlt=r(cCa,"data2vec-vision"),cCa.forEach(t),slt=r(Jto," \u2014 "),Yse=n(Jto,"A",{href:!0});var fCa=s(Yse);llt=r(fCa,"TFData2VecVisionForSemanticSegmentation"),fCa.forEach(t),ilt=r(Jto," (Data2VecVision model)"),Jto.forEach(t),dlt=i(Jge),r6=n(Jge,"LI",{});var Yto=s(r6);H$e=n(Yto,"STRONG",{});var gCa=s(H$e);mlt=r(gCa,"mobilevit"),gCa.forEach(t),clt=r(Yto," \u2014 "),Zse=n(Yto,"A",{href:!0});var hCa=s(Zse);flt=r(hCa,"TFMobileViTForSemanticSegmentation"),hCa.forEach(t),glt=r(Yto," (MobileViT model)"),Yto.forEach(t),hlt=i(Jge),t6=n(Jge,"LI",{});var Zto=s(t6);J$e=n(Zto,"STRONG",{});var uCa=s(J$e);ult=r(uCa,"segformer"),uCa.forEach(t),plt=r(Zto," \u2014 "),Kse=n(Zto,"A",{href:!0});var pCa=s(Kse);_lt=r(pCa,"TFSegformerForSemanticSegmentation"),pCa.forEach(t),blt=r(Zto," (SegFormer model)"),Zto.forEach(t),Jge.forEach(t),vlt=i(Pi),T(a6.$$.fragment,Pi),Pi.forEach(t),Ri.forEach(t),Qdo=i(c),Ic=n(c,"H2",{class:!0});var ufo=s(Ic);n6=n(ufo,"A",{id:!0,class:!0,href:!0});var _Ca=s(n6);Y$e=n(_Ca,"SPAN",{});var bCa=s(Y$e);T(iB.$$.fragment,bCa),bCa.forEach(t),_Ca.forEach(t),Flt=i(ufo),Z$e=n(ufo,"SPAN",{});var vCa=s(Z$e);Tlt=r(vCa,"TFAutoModelForMaskedLM"),vCa.forEach(t),ufo.forEach(t),Wdo=i(c),Fr=n(c,"DIV",{class:!0});var Bi=s(Fr);T(dB.$$.fragment,Bi),Mlt=i(Bi),Nc=n(Bi,"P",{});var Yge=s(Nc);Elt=r(Yge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ele=n(Yge,"A",{href:!0});var FCa=s(ele);Clt=r(FCa,"from_pretrained()"),FCa.forEach(t),wlt=r(Yge," class method or the "),ole=n(Yge,"A",{href:!0});var TCa=s(ole);Alt=r(TCa,"from_config()"),TCa.forEach(t),Llt=r(Yge,` class
method.`),Yge.forEach(t),ylt=i(Bi),mB=n(Bi,"P",{});var pfo=s(mB);xlt=r(pfo,"This class cannot be instantiated directly using "),K$e=n(pfo,"CODE",{});var MCa=s(K$e);$lt=r(MCa,"__init__()"),MCa.forEach(t),klt=r(pfo," (throws an error)."),pfo.forEach(t),Slt=i(Bi),sa=n(Bi,"DIV",{class:!0});var $$=s(sa);T(cB.$$.fragment,$$),Rlt=i($$),eke=n($$,"P",{});var ECa=s(eke);Plt=r(ECa,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ECa.forEach(t),Blt=i($$),qc=n($$,"P",{});var Zge=s(qc);Ilt=r(Zge,`Note:
Loading a model from its configuration file does `),oke=n(Zge,"STRONG",{});var CCa=s(oke);Nlt=r(CCa,"not"),CCa.forEach(t),qlt=r(Zge,` load the model weights. It only affects the
model\u2019s configuration. Use `),rle=n(Zge,"A",{href:!0});var wCa=s(rle);jlt=r(wCa,"from_pretrained()"),wCa.forEach(t),Dlt=r(Zge," to load the model weights."),Zge.forEach(t),Glt=i($$),T(s6.$$.fragment,$$),$$.forEach(t),Olt=i(Bi),Jr=n(Bi,"DIV",{class:!0});var Ii=s(Jr);T(fB.$$.fragment,Ii),Vlt=i(Ii),rke=n(Ii,"P",{});var ACa=s(rke);Xlt=r(ACa,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ACa.forEach(t),zlt=i(Ii),Wn=n(Ii,"P",{});var k$=s(Wn);Qlt=r(k$,"The model class to instantiate is selected based on the "),tke=n(k$,"CODE",{});var LCa=s(tke);Wlt=r(LCa,"model_type"),LCa.forEach(t),Ult=r(k$,` property of the config object (either
passed as an argument or loaded from `),ake=n(k$,"CODE",{});var yCa=s(ake);Hlt=r(yCa,"pretrained_model_name_or_path"),yCa.forEach(t),Jlt=r(k$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nke=n(k$,"CODE",{});var xCa=s(nke);Ylt=r(xCa,"pretrained_model_name_or_path"),xCa.forEach(t),Zlt=r(k$,":"),k$.forEach(t),Klt=i(Ii),he=n(Ii,"UL",{});var be=s(he);l6=n(be,"LI",{});var Kto=s(l6);ske=n(Kto,"STRONG",{});var $Ca=s(ske);eit=r($Ca,"albert"),$Ca.forEach(t),oit=r(Kto," \u2014 "),tle=n(Kto,"A",{href:!0});var kCa=s(tle);rit=r(kCa,"TFAlbertForMaskedLM"),kCa.forEach(t),tit=r(Kto," (ALBERT model)"),Kto.forEach(t),ait=i(be),i6=n(be,"LI",{});var eao=s(i6);lke=n(eao,"STRONG",{});var SCa=s(lke);nit=r(SCa,"bert"),SCa.forEach(t),sit=r(eao," \u2014 "),ale=n(eao,"A",{href:!0});var RCa=s(ale);lit=r(RCa,"TFBertForMaskedLM"),RCa.forEach(t),iit=r(eao," (BERT model)"),eao.forEach(t),dit=i(be),d6=n(be,"LI",{});var oao=s(d6);ike=n(oao,"STRONG",{});var PCa=s(ike);mit=r(PCa,"camembert"),PCa.forEach(t),cit=r(oao," \u2014 "),nle=n(oao,"A",{href:!0});var BCa=s(nle);fit=r(BCa,"TFCamembertForMaskedLM"),BCa.forEach(t),git=r(oao," (CamemBERT model)"),oao.forEach(t),hit=i(be),m6=n(be,"LI",{});var rao=s(m6);dke=n(rao,"STRONG",{});var ICa=s(dke);uit=r(ICa,"convbert"),ICa.forEach(t),pit=r(rao," \u2014 "),sle=n(rao,"A",{href:!0});var NCa=s(sle);_it=r(NCa,"TFConvBertForMaskedLM"),NCa.forEach(t),bit=r(rao," (ConvBERT model)"),rao.forEach(t),vit=i(be),c6=n(be,"LI",{});var tao=s(c6);mke=n(tao,"STRONG",{});var qCa=s(mke);Fit=r(qCa,"deberta"),qCa.forEach(t),Tit=r(tao," \u2014 "),lle=n(tao,"A",{href:!0});var jCa=s(lle);Mit=r(jCa,"TFDebertaForMaskedLM"),jCa.forEach(t),Eit=r(tao," (DeBERTa model)"),tao.forEach(t),Cit=i(be),f6=n(be,"LI",{});var aao=s(f6);cke=n(aao,"STRONG",{});var DCa=s(cke);wit=r(DCa,"deberta-v2"),DCa.forEach(t),Ait=r(aao," \u2014 "),ile=n(aao,"A",{href:!0});var GCa=s(ile);Lit=r(GCa,"TFDebertaV2ForMaskedLM"),GCa.forEach(t),yit=r(aao," (DeBERTa-v2 model)"),aao.forEach(t),xit=i(be),g6=n(be,"LI",{});var nao=s(g6);fke=n(nao,"STRONG",{});var OCa=s(fke);$it=r(OCa,"distilbert"),OCa.forEach(t),kit=r(nao," \u2014 "),dle=n(nao,"A",{href:!0});var VCa=s(dle);Sit=r(VCa,"TFDistilBertForMaskedLM"),VCa.forEach(t),Rit=r(nao," (DistilBERT model)"),nao.forEach(t),Pit=i(be),h6=n(be,"LI",{});var sao=s(h6);gke=n(sao,"STRONG",{});var XCa=s(gke);Bit=r(XCa,"electra"),XCa.forEach(t),Iit=r(sao," \u2014 "),mle=n(sao,"A",{href:!0});var zCa=s(mle);Nit=r(zCa,"TFElectraForMaskedLM"),zCa.forEach(t),qit=r(sao," (ELECTRA model)"),sao.forEach(t),jit=i(be),u6=n(be,"LI",{});var lao=s(u6);hke=n(lao,"STRONG",{});var QCa=s(hke);Dit=r(QCa,"esm"),QCa.forEach(t),Git=r(lao," \u2014 "),cle=n(lao,"A",{href:!0});var WCa=s(cle);Oit=r(WCa,"TFEsmForMaskedLM"),WCa.forEach(t),Vit=r(lao," (ESM model)"),lao.forEach(t),Xit=i(be),p6=n(be,"LI",{});var iao=s(p6);uke=n(iao,"STRONG",{});var UCa=s(uke);zit=r(UCa,"flaubert"),UCa.forEach(t),Qit=r(iao," \u2014 "),fle=n(iao,"A",{href:!0});var HCa=s(fle);Wit=r(HCa,"TFFlaubertWithLMHeadModel"),HCa.forEach(t),Uit=r(iao," (FlauBERT model)"),iao.forEach(t),Hit=i(be),_6=n(be,"LI",{});var dao=s(_6);pke=n(dao,"STRONG",{});var JCa=s(pke);Jit=r(JCa,"funnel"),JCa.forEach(t),Yit=r(dao," \u2014 "),gle=n(dao,"A",{href:!0});var YCa=s(gle);Zit=r(YCa,"TFFunnelForMaskedLM"),YCa.forEach(t),Kit=r(dao," (Funnel Transformer model)"),dao.forEach(t),edt=i(be),b6=n(be,"LI",{});var mao=s(b6);_ke=n(mao,"STRONG",{});var ZCa=s(_ke);odt=r(ZCa,"layoutlm"),ZCa.forEach(t),rdt=r(mao," \u2014 "),hle=n(mao,"A",{href:!0});var KCa=s(hle);tdt=r(KCa,"TFLayoutLMForMaskedLM"),KCa.forEach(t),adt=r(mao," (LayoutLM model)"),mao.forEach(t),ndt=i(be),v6=n(be,"LI",{});var cao=s(v6);bke=n(cao,"STRONG",{});var e3a=s(bke);sdt=r(e3a,"longformer"),e3a.forEach(t),ldt=r(cao," \u2014 "),ule=n(cao,"A",{href:!0});var o3a=s(ule);idt=r(o3a,"TFLongformerForMaskedLM"),o3a.forEach(t),ddt=r(cao," (Longformer model)"),cao.forEach(t),mdt=i(be),F6=n(be,"LI",{});var fao=s(F6);vke=n(fao,"STRONG",{});var r3a=s(vke);cdt=r(r3a,"mobilebert"),r3a.forEach(t),fdt=r(fao," \u2014 "),ple=n(fao,"A",{href:!0});var t3a=s(ple);gdt=r(t3a,"TFMobileBertForMaskedLM"),t3a.forEach(t),hdt=r(fao," (MobileBERT model)"),fao.forEach(t),udt=i(be),T6=n(be,"LI",{});var gao=s(T6);Fke=n(gao,"STRONG",{});var a3a=s(Fke);pdt=r(a3a,"mpnet"),a3a.forEach(t),_dt=r(gao," \u2014 "),_le=n(gao,"A",{href:!0});var n3a=s(_le);bdt=r(n3a,"TFMPNetForMaskedLM"),n3a.forEach(t),vdt=r(gao," (MPNet model)"),gao.forEach(t),Fdt=i(be),M6=n(be,"LI",{});var hao=s(M6);Tke=n(hao,"STRONG",{});var s3a=s(Tke);Tdt=r(s3a,"rembert"),s3a.forEach(t),Mdt=r(hao," \u2014 "),ble=n(hao,"A",{href:!0});var l3a=s(ble);Edt=r(l3a,"TFRemBertForMaskedLM"),l3a.forEach(t),Cdt=r(hao," (RemBERT model)"),hao.forEach(t),wdt=i(be),E6=n(be,"LI",{});var uao=s(E6);Mke=n(uao,"STRONG",{});var i3a=s(Mke);Adt=r(i3a,"roberta"),i3a.forEach(t),Ldt=r(uao," \u2014 "),vle=n(uao,"A",{href:!0});var d3a=s(vle);ydt=r(d3a,"TFRobertaForMaskedLM"),d3a.forEach(t),xdt=r(uao," (RoBERTa model)"),uao.forEach(t),$dt=i(be),C6=n(be,"LI",{});var pao=s(C6);Eke=n(pao,"STRONG",{});var m3a=s(Eke);kdt=r(m3a,"roformer"),m3a.forEach(t),Sdt=r(pao," \u2014 "),Fle=n(pao,"A",{href:!0});var c3a=s(Fle);Rdt=r(c3a,"TFRoFormerForMaskedLM"),c3a.forEach(t),Pdt=r(pao," (RoFormer model)"),pao.forEach(t),Bdt=i(be),w6=n(be,"LI",{});var _ao=s(w6);Cke=n(_ao,"STRONG",{});var f3a=s(Cke);Idt=r(f3a,"tapas"),f3a.forEach(t),Ndt=r(_ao," \u2014 "),Tle=n(_ao,"A",{href:!0});var g3a=s(Tle);qdt=r(g3a,"TFTapasForMaskedLM"),g3a.forEach(t),jdt=r(_ao," (TAPAS model)"),_ao.forEach(t),Ddt=i(be),A6=n(be,"LI",{});var bao=s(A6);wke=n(bao,"STRONG",{});var h3a=s(wke);Gdt=r(h3a,"xlm"),h3a.forEach(t),Odt=r(bao," \u2014 "),Mle=n(bao,"A",{href:!0});var u3a=s(Mle);Vdt=r(u3a,"TFXLMWithLMHeadModel"),u3a.forEach(t),Xdt=r(bao," (XLM model)"),bao.forEach(t),zdt=i(be),L6=n(be,"LI",{});var vao=s(L6);Ake=n(vao,"STRONG",{});var p3a=s(Ake);Qdt=r(p3a,"xlm-roberta"),p3a.forEach(t),Wdt=r(vao," \u2014 "),Ele=n(vao,"A",{href:!0});var _3a=s(Ele);Udt=r(_3a,"TFXLMRobertaForMaskedLM"),_3a.forEach(t),Hdt=r(vao," (XLM-RoBERTa model)"),vao.forEach(t),be.forEach(t),Jdt=i(Ii),T(y6.$$.fragment,Ii),Ii.forEach(t),Bi.forEach(t),Udo=i(c),jc=n(c,"H2",{class:!0});var _fo=s(jc);x6=n(_fo,"A",{id:!0,class:!0,href:!0});var b3a=s(x6);Lke=n(b3a,"SPAN",{});var v3a=s(Lke);T(gB.$$.fragment,v3a),v3a.forEach(t),b3a.forEach(t),Ydt=i(_fo),yke=n(_fo,"SPAN",{});var F3a=s(yke);Zdt=r(F3a,"TFAutoModelForSeq2SeqLM"),F3a.forEach(t),_fo.forEach(t),Hdo=i(c),Tr=n(c,"DIV",{class:!0});var Ni=s(Tr);T(hB.$$.fragment,Ni),Kdt=i(Ni),Dc=n(Ni,"P",{});var Kge=s(Dc);emt=r(Kge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cle=n(Kge,"A",{href:!0});var T3a=s(Cle);omt=r(T3a,"from_pretrained()"),T3a.forEach(t),rmt=r(Kge," class method or the "),wle=n(Kge,"A",{href:!0});var M3a=s(wle);tmt=r(M3a,"from_config()"),M3a.forEach(t),amt=r(Kge,` class
method.`),Kge.forEach(t),nmt=i(Ni),uB=n(Ni,"P",{});var bfo=s(uB);smt=r(bfo,"This class cannot be instantiated directly using "),xke=n(bfo,"CODE",{});var E3a=s(xke);lmt=r(E3a,"__init__()"),E3a.forEach(t),imt=r(bfo," (throws an error)."),bfo.forEach(t),dmt=i(Ni),la=n(Ni,"DIV",{class:!0});var S$=s(la);T(pB.$$.fragment,S$),mmt=i(S$),$ke=n(S$,"P",{});var C3a=s($ke);cmt=r(C3a,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),C3a.forEach(t),fmt=i(S$),Gc=n(S$,"P",{});var ehe=s(Gc);gmt=r(ehe,`Note:
Loading a model from its configuration file does `),kke=n(ehe,"STRONG",{});var w3a=s(kke);hmt=r(w3a,"not"),w3a.forEach(t),umt=r(ehe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ale=n(ehe,"A",{href:!0});var A3a=s(Ale);pmt=r(A3a,"from_pretrained()"),A3a.forEach(t),_mt=r(ehe," to load the model weights."),ehe.forEach(t),bmt=i(S$),T($6.$$.fragment,S$),S$.forEach(t),vmt=i(Ni),Yr=n(Ni,"DIV",{class:!0});var qi=s(Yr);T(_B.$$.fragment,qi),Fmt=i(qi),Ske=n(qi,"P",{});var L3a=s(Ske);Tmt=r(L3a,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),L3a.forEach(t),Mmt=i(qi),Un=n(qi,"P",{});var R$=s(Un);Emt=r(R$,"The model class to instantiate is selected based on the "),Rke=n(R$,"CODE",{});var y3a=s(Rke);Cmt=r(y3a,"model_type"),y3a.forEach(t),wmt=r(R$,` property of the config object (either
passed as an argument or loaded from `),Pke=n(R$,"CODE",{});var x3a=s(Pke);Amt=r(x3a,"pretrained_model_name_or_path"),x3a.forEach(t),Lmt=r(R$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bke=n(R$,"CODE",{});var $3a=s(Bke);ymt=r($3a,"pretrained_model_name_or_path"),$3a.forEach(t),xmt=r(R$,":"),R$.forEach(t),$mt=i(qi),ke=n(qi,"UL",{});var De=s(ke);k6=n(De,"LI",{});var Fao=s(k6);Ike=n(Fao,"STRONG",{});var k3a=s(Ike);kmt=r(k3a,"bart"),k3a.forEach(t),Smt=r(Fao," \u2014 "),Lle=n(Fao,"A",{href:!0});var S3a=s(Lle);Rmt=r(S3a,"TFBartForConditionalGeneration"),S3a.forEach(t),Pmt=r(Fao," (BART model)"),Fao.forEach(t),Bmt=i(De),S6=n(De,"LI",{});var Tao=s(S6);Nke=n(Tao,"STRONG",{});var R3a=s(Nke);Imt=r(R3a,"blenderbot"),R3a.forEach(t),Nmt=r(Tao," \u2014 "),yle=n(Tao,"A",{href:!0});var P3a=s(yle);qmt=r(P3a,"TFBlenderbotForConditionalGeneration"),P3a.forEach(t),jmt=r(Tao," (Blenderbot model)"),Tao.forEach(t),Dmt=i(De),R6=n(De,"LI",{});var Mao=s(R6);qke=n(Mao,"STRONG",{});var B3a=s(qke);Gmt=r(B3a,"blenderbot-small"),B3a.forEach(t),Omt=r(Mao," \u2014 "),xle=n(Mao,"A",{href:!0});var I3a=s(xle);Vmt=r(I3a,"TFBlenderbotSmallForConditionalGeneration"),I3a.forEach(t),Xmt=r(Mao," (BlenderbotSmall model)"),Mao.forEach(t),zmt=i(De),P6=n(De,"LI",{});var Eao=s(P6);jke=n(Eao,"STRONG",{});var N3a=s(jke);Qmt=r(N3a,"encoder-decoder"),N3a.forEach(t),Wmt=r(Eao," \u2014 "),$le=n(Eao,"A",{href:!0});var q3a=s($le);Umt=r(q3a,"TFEncoderDecoderModel"),q3a.forEach(t),Hmt=r(Eao," (Encoder decoder model)"),Eao.forEach(t),Jmt=i(De),B6=n(De,"LI",{});var Cao=s(B6);Dke=n(Cao,"STRONG",{});var j3a=s(Dke);Ymt=r(j3a,"led"),j3a.forEach(t),Zmt=r(Cao," \u2014 "),kle=n(Cao,"A",{href:!0});var D3a=s(kle);Kmt=r(D3a,"TFLEDForConditionalGeneration"),D3a.forEach(t),ect=r(Cao," (LED model)"),Cao.forEach(t),oct=i(De),I6=n(De,"LI",{});var wao=s(I6);Gke=n(wao,"STRONG",{});var G3a=s(Gke);rct=r(G3a,"marian"),G3a.forEach(t),tct=r(wao," \u2014 "),Sle=n(wao,"A",{href:!0});var O3a=s(Sle);act=r(O3a,"TFMarianMTModel"),O3a.forEach(t),nct=r(wao," (Marian model)"),wao.forEach(t),sct=i(De),N6=n(De,"LI",{});var Aao=s(N6);Oke=n(Aao,"STRONG",{});var V3a=s(Oke);lct=r(V3a,"mbart"),V3a.forEach(t),ict=r(Aao," \u2014 "),Rle=n(Aao,"A",{href:!0});var X3a=s(Rle);dct=r(X3a,"TFMBartForConditionalGeneration"),X3a.forEach(t),mct=r(Aao," (mBART model)"),Aao.forEach(t),cct=i(De),q6=n(De,"LI",{});var Lao=s(q6);Vke=n(Lao,"STRONG",{});var z3a=s(Vke);fct=r(z3a,"mt5"),z3a.forEach(t),gct=r(Lao," \u2014 "),Ple=n(Lao,"A",{href:!0});var Q3a=s(Ple);hct=r(Q3a,"TFMT5ForConditionalGeneration"),Q3a.forEach(t),uct=r(Lao," (MT5 model)"),Lao.forEach(t),pct=i(De),j6=n(De,"LI",{});var yao=s(j6);Xke=n(yao,"STRONG",{});var W3a=s(Xke);_ct=r(W3a,"pegasus"),W3a.forEach(t),bct=r(yao," \u2014 "),Ble=n(yao,"A",{href:!0});var U3a=s(Ble);vct=r(U3a,"TFPegasusForConditionalGeneration"),U3a.forEach(t),Fct=r(yao," (Pegasus model)"),yao.forEach(t),Tct=i(De),D6=n(De,"LI",{});var xao=s(D6);zke=n(xao,"STRONG",{});var H3a=s(zke);Mct=r(H3a,"t5"),H3a.forEach(t),Ect=r(xao," \u2014 "),Ile=n(xao,"A",{href:!0});var J3a=s(Ile);Cct=r(J3a,"TFT5ForConditionalGeneration"),J3a.forEach(t),wct=r(xao," (T5 model)"),xao.forEach(t),De.forEach(t),Act=i(qi),T(G6.$$.fragment,qi),qi.forEach(t),Ni.forEach(t),Jdo=i(c),Oc=n(c,"H2",{class:!0});var vfo=s(Oc);O6=n(vfo,"A",{id:!0,class:!0,href:!0});var Y3a=s(O6);Qke=n(Y3a,"SPAN",{});var Z3a=s(Qke);T(bB.$$.fragment,Z3a),Z3a.forEach(t),Y3a.forEach(t),Lct=i(vfo),Wke=n(vfo,"SPAN",{});var K3a=s(Wke);yct=r(K3a,"TFAutoModelForSequenceClassification"),K3a.forEach(t),vfo.forEach(t),Ydo=i(c),Mr=n(c,"DIV",{class:!0});var ji=s(Mr);T(vB.$$.fragment,ji),xct=i(ji),Vc=n(ji,"P",{});var ohe=s(Vc);$ct=r(ohe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nle=n(ohe,"A",{href:!0});var e5a=s(Nle);kct=r(e5a,"from_pretrained()"),e5a.forEach(t),Sct=r(ohe," class method or the "),qle=n(ohe,"A",{href:!0});var o5a=s(qle);Rct=r(o5a,"from_config()"),o5a.forEach(t),Pct=r(ohe,` class
method.`),ohe.forEach(t),Bct=i(ji),FB=n(ji,"P",{});var Ffo=s(FB);Ict=r(Ffo,"This class cannot be instantiated directly using "),Uke=n(Ffo,"CODE",{});var r5a=s(Uke);Nct=r(r5a,"__init__()"),r5a.forEach(t),qct=r(Ffo," (throws an error)."),Ffo.forEach(t),jct=i(ji),ia=n(ji,"DIV",{class:!0});var P$=s(ia);T(TB.$$.fragment,P$),Dct=i(P$),Hke=n(P$,"P",{});var t5a=s(Hke);Gct=r(t5a,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),t5a.forEach(t),Oct=i(P$),Xc=n(P$,"P",{});var rhe=s(Xc);Vct=r(rhe,`Note:
Loading a model from its configuration file does `),Jke=n(rhe,"STRONG",{});var a5a=s(Jke);Xct=r(a5a,"not"),a5a.forEach(t),zct=r(rhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jle=n(rhe,"A",{href:!0});var n5a=s(jle);Qct=r(n5a,"from_pretrained()"),n5a.forEach(t),Wct=r(rhe," to load the model weights."),rhe.forEach(t),Uct=i(P$),T(V6.$$.fragment,P$),P$.forEach(t),Hct=i(ji),Zr=n(ji,"DIV",{class:!0});var Di=s(Zr);T(MB.$$.fragment,Di),Jct=i(Di),Yke=n(Di,"P",{});var s5a=s(Yke);Yct=r(s5a,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),s5a.forEach(t),Zct=i(Di),Hn=n(Di,"P",{});var B$=s(Hn);Kct=r(B$,"The model class to instantiate is selected based on the "),Zke=n(B$,"CODE",{});var l5a=s(Zke);eft=r(l5a,"model_type"),l5a.forEach(t),oft=r(B$,` property of the config object (either
passed as an argument or loaded from `),Kke=n(B$,"CODE",{});var i5a=s(Kke);rft=r(i5a,"pretrained_model_name_or_path"),i5a.forEach(t),tft=r(B$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eSe=n(B$,"CODE",{});var d5a=s(eSe);aft=r(d5a,"pretrained_model_name_or_path"),d5a.forEach(t),nft=r(B$,":"),B$.forEach(t),sft=i(Di),ae=n(Di,"UL",{});var se=s(ae);X6=n(se,"LI",{});var $ao=s(X6);oSe=n($ao,"STRONG",{});var m5a=s(oSe);lft=r(m5a,"albert"),m5a.forEach(t),ift=r($ao," \u2014 "),Dle=n($ao,"A",{href:!0});var c5a=s(Dle);dft=r(c5a,"TFAlbertForSequenceClassification"),c5a.forEach(t),mft=r($ao," (ALBERT model)"),$ao.forEach(t),cft=i(se),z6=n(se,"LI",{});var kao=s(z6);rSe=n(kao,"STRONG",{});var f5a=s(rSe);fft=r(f5a,"bert"),f5a.forEach(t),gft=r(kao," \u2014 "),Gle=n(kao,"A",{href:!0});var g5a=s(Gle);hft=r(g5a,"TFBertForSequenceClassification"),g5a.forEach(t),uft=r(kao," (BERT model)"),kao.forEach(t),pft=i(se),Q6=n(se,"LI",{});var Sao=s(Q6);tSe=n(Sao,"STRONG",{});var h5a=s(tSe);_ft=r(h5a,"camembert"),h5a.forEach(t),bft=r(Sao," \u2014 "),Ole=n(Sao,"A",{href:!0});var u5a=s(Ole);vft=r(u5a,"TFCamembertForSequenceClassification"),u5a.forEach(t),Fft=r(Sao," (CamemBERT model)"),Sao.forEach(t),Tft=i(se),W6=n(se,"LI",{});var Rao=s(W6);aSe=n(Rao,"STRONG",{});var p5a=s(aSe);Mft=r(p5a,"convbert"),p5a.forEach(t),Eft=r(Rao," \u2014 "),Vle=n(Rao,"A",{href:!0});var _5a=s(Vle);Cft=r(_5a,"TFConvBertForSequenceClassification"),_5a.forEach(t),wft=r(Rao," (ConvBERT model)"),Rao.forEach(t),Aft=i(se),U6=n(se,"LI",{});var Pao=s(U6);nSe=n(Pao,"STRONG",{});var b5a=s(nSe);Lft=r(b5a,"ctrl"),b5a.forEach(t),yft=r(Pao," \u2014 "),Xle=n(Pao,"A",{href:!0});var v5a=s(Xle);xft=r(v5a,"TFCTRLForSequenceClassification"),v5a.forEach(t),$ft=r(Pao," (CTRL model)"),Pao.forEach(t),kft=i(se),H6=n(se,"LI",{});var Bao=s(H6);sSe=n(Bao,"STRONG",{});var F5a=s(sSe);Sft=r(F5a,"deberta"),F5a.forEach(t),Rft=r(Bao," \u2014 "),zle=n(Bao,"A",{href:!0});var T5a=s(zle);Pft=r(T5a,"TFDebertaForSequenceClassification"),T5a.forEach(t),Bft=r(Bao," (DeBERTa model)"),Bao.forEach(t),Ift=i(se),J6=n(se,"LI",{});var Iao=s(J6);lSe=n(Iao,"STRONG",{});var M5a=s(lSe);Nft=r(M5a,"deberta-v2"),M5a.forEach(t),qft=r(Iao," \u2014 "),Qle=n(Iao,"A",{href:!0});var E5a=s(Qle);jft=r(E5a,"TFDebertaV2ForSequenceClassification"),E5a.forEach(t),Dft=r(Iao," (DeBERTa-v2 model)"),Iao.forEach(t),Gft=i(se),Y6=n(se,"LI",{});var Nao=s(Y6);iSe=n(Nao,"STRONG",{});var C5a=s(iSe);Oft=r(C5a,"distilbert"),C5a.forEach(t),Vft=r(Nao," \u2014 "),Wle=n(Nao,"A",{href:!0});var w5a=s(Wle);Xft=r(w5a,"TFDistilBertForSequenceClassification"),w5a.forEach(t),zft=r(Nao," (DistilBERT model)"),Nao.forEach(t),Qft=i(se),Z6=n(se,"LI",{});var qao=s(Z6);dSe=n(qao,"STRONG",{});var A5a=s(dSe);Wft=r(A5a,"electra"),A5a.forEach(t),Uft=r(qao," \u2014 "),Ule=n(qao,"A",{href:!0});var L5a=s(Ule);Hft=r(L5a,"TFElectraForSequenceClassification"),L5a.forEach(t),Jft=r(qao," (ELECTRA model)"),qao.forEach(t),Yft=i(se),K6=n(se,"LI",{});var jao=s(K6);mSe=n(jao,"STRONG",{});var y5a=s(mSe);Zft=r(y5a,"esm"),y5a.forEach(t),Kft=r(jao," \u2014 "),Hle=n(jao,"A",{href:!0});var x5a=s(Hle);egt=r(x5a,"TFEsmForSequenceClassification"),x5a.forEach(t),ogt=r(jao," (ESM model)"),jao.forEach(t),rgt=i(se),e7=n(se,"LI",{});var Dao=s(e7);cSe=n(Dao,"STRONG",{});var $5a=s(cSe);tgt=r($5a,"flaubert"),$5a.forEach(t),agt=r(Dao," \u2014 "),Jle=n(Dao,"A",{href:!0});var k5a=s(Jle);ngt=r(k5a,"TFFlaubertForSequenceClassification"),k5a.forEach(t),sgt=r(Dao," (FlauBERT model)"),Dao.forEach(t),lgt=i(se),o7=n(se,"LI",{});var Gao=s(o7);fSe=n(Gao,"STRONG",{});var S5a=s(fSe);igt=r(S5a,"funnel"),S5a.forEach(t),dgt=r(Gao," \u2014 "),Yle=n(Gao,"A",{href:!0});var R5a=s(Yle);mgt=r(R5a,"TFFunnelForSequenceClassification"),R5a.forEach(t),cgt=r(Gao," (Funnel Transformer model)"),Gao.forEach(t),fgt=i(se),r7=n(se,"LI",{});var Oao=s(r7);gSe=n(Oao,"STRONG",{});var P5a=s(gSe);ggt=r(P5a,"gpt2"),P5a.forEach(t),hgt=r(Oao," \u2014 "),Zle=n(Oao,"A",{href:!0});var B5a=s(Zle);ugt=r(B5a,"TFGPT2ForSequenceClassification"),B5a.forEach(t),pgt=r(Oao," (OpenAI GPT-2 model)"),Oao.forEach(t),_gt=i(se),t7=n(se,"LI",{});var Vao=s(t7);hSe=n(Vao,"STRONG",{});var I5a=s(hSe);bgt=r(I5a,"gptj"),I5a.forEach(t),vgt=r(Vao," \u2014 "),Kle=n(Vao,"A",{href:!0});var N5a=s(Kle);Fgt=r(N5a,"TFGPTJForSequenceClassification"),N5a.forEach(t),Tgt=r(Vao," (GPT-J model)"),Vao.forEach(t),Mgt=i(se),a7=n(se,"LI",{});var Xao=s(a7);uSe=n(Xao,"STRONG",{});var q5a=s(uSe);Egt=r(q5a,"layoutlm"),q5a.forEach(t),Cgt=r(Xao," \u2014 "),eie=n(Xao,"A",{href:!0});var j5a=s(eie);wgt=r(j5a,"TFLayoutLMForSequenceClassification"),j5a.forEach(t),Agt=r(Xao," (LayoutLM model)"),Xao.forEach(t),Lgt=i(se),n7=n(se,"LI",{});var zao=s(n7);pSe=n(zao,"STRONG",{});var D5a=s(pSe);ygt=r(D5a,"layoutlmv3"),D5a.forEach(t),xgt=r(zao," \u2014 "),oie=n(zao,"A",{href:!0});var G5a=s(oie);$gt=r(G5a,"TFLayoutLMv3ForSequenceClassification"),G5a.forEach(t),kgt=r(zao," (LayoutLMv3 model)"),zao.forEach(t),Sgt=i(se),s7=n(se,"LI",{});var Qao=s(s7);_Se=n(Qao,"STRONG",{});var O5a=s(_Se);Rgt=r(O5a,"longformer"),O5a.forEach(t),Pgt=r(Qao," \u2014 "),rie=n(Qao,"A",{href:!0});var V5a=s(rie);Bgt=r(V5a,"TFLongformerForSequenceClassification"),V5a.forEach(t),Igt=r(Qao," (Longformer model)"),Qao.forEach(t),Ngt=i(se),l7=n(se,"LI",{});var Wao=s(l7);bSe=n(Wao,"STRONG",{});var X5a=s(bSe);qgt=r(X5a,"mobilebert"),X5a.forEach(t),jgt=r(Wao," \u2014 "),tie=n(Wao,"A",{href:!0});var z5a=s(tie);Dgt=r(z5a,"TFMobileBertForSequenceClassification"),z5a.forEach(t),Ggt=r(Wao," (MobileBERT model)"),Wao.forEach(t),Ogt=i(se),i7=n(se,"LI",{});var Uao=s(i7);vSe=n(Uao,"STRONG",{});var Q5a=s(vSe);Vgt=r(Q5a,"mpnet"),Q5a.forEach(t),Xgt=r(Uao," \u2014 "),aie=n(Uao,"A",{href:!0});var W5a=s(aie);zgt=r(W5a,"TFMPNetForSequenceClassification"),W5a.forEach(t),Qgt=r(Uao," (MPNet model)"),Uao.forEach(t),Wgt=i(se),d7=n(se,"LI",{});var Hao=s(d7);FSe=n(Hao,"STRONG",{});var U5a=s(FSe);Ugt=r(U5a,"openai-gpt"),U5a.forEach(t),Hgt=r(Hao," \u2014 "),nie=n(Hao,"A",{href:!0});var H5a=s(nie);Jgt=r(H5a,"TFOpenAIGPTForSequenceClassification"),H5a.forEach(t),Ygt=r(Hao," (OpenAI GPT model)"),Hao.forEach(t),Zgt=i(se),m7=n(se,"LI",{});var Jao=s(m7);TSe=n(Jao,"STRONG",{});var J5a=s(TSe);Kgt=r(J5a,"rembert"),J5a.forEach(t),eht=r(Jao," \u2014 "),sie=n(Jao,"A",{href:!0});var Y5a=s(sie);oht=r(Y5a,"TFRemBertForSequenceClassification"),Y5a.forEach(t),rht=r(Jao," (RemBERT model)"),Jao.forEach(t),tht=i(se),c7=n(se,"LI",{});var Yao=s(c7);MSe=n(Yao,"STRONG",{});var Z5a=s(MSe);aht=r(Z5a,"roberta"),Z5a.forEach(t),nht=r(Yao," \u2014 "),lie=n(Yao,"A",{href:!0});var K5a=s(lie);sht=r(K5a,"TFRobertaForSequenceClassification"),K5a.forEach(t),lht=r(Yao," (RoBERTa model)"),Yao.forEach(t),iht=i(se),f7=n(se,"LI",{});var Zao=s(f7);ESe=n(Zao,"STRONG",{});var e0a=s(ESe);dht=r(e0a,"roformer"),e0a.forEach(t),mht=r(Zao," \u2014 "),iie=n(Zao,"A",{href:!0});var o0a=s(iie);cht=r(o0a,"TFRoFormerForSequenceClassification"),o0a.forEach(t),fht=r(Zao," (RoFormer model)"),Zao.forEach(t),ght=i(se),g7=n(se,"LI",{});var Kao=s(g7);CSe=n(Kao,"STRONG",{});var r0a=s(CSe);hht=r(r0a,"tapas"),r0a.forEach(t),uht=r(Kao," \u2014 "),die=n(Kao,"A",{href:!0});var t0a=s(die);pht=r(t0a,"TFTapasForSequenceClassification"),t0a.forEach(t),_ht=r(Kao," (TAPAS model)"),Kao.forEach(t),bht=i(se),h7=n(se,"LI",{});var eno=s(h7);wSe=n(eno,"STRONG",{});var a0a=s(wSe);vht=r(a0a,"transfo-xl"),a0a.forEach(t),Fht=r(eno," \u2014 "),mie=n(eno,"A",{href:!0});var n0a=s(mie);Tht=r(n0a,"TFTransfoXLForSequenceClassification"),n0a.forEach(t),Mht=r(eno," (Transformer-XL model)"),eno.forEach(t),Eht=i(se),u7=n(se,"LI",{});var ono=s(u7);ASe=n(ono,"STRONG",{});var s0a=s(ASe);Cht=r(s0a,"xlm"),s0a.forEach(t),wht=r(ono," \u2014 "),cie=n(ono,"A",{href:!0});var l0a=s(cie);Aht=r(l0a,"TFXLMForSequenceClassification"),l0a.forEach(t),Lht=r(ono," (XLM model)"),ono.forEach(t),yht=i(se),p7=n(se,"LI",{});var rno=s(p7);LSe=n(rno,"STRONG",{});var i0a=s(LSe);xht=r(i0a,"xlm-roberta"),i0a.forEach(t),$ht=r(rno," \u2014 "),fie=n(rno,"A",{href:!0});var d0a=s(fie);kht=r(d0a,"TFXLMRobertaForSequenceClassification"),d0a.forEach(t),Sht=r(rno," (XLM-RoBERTa model)"),rno.forEach(t),Rht=i(se),_7=n(se,"LI",{});var tno=s(_7);ySe=n(tno,"STRONG",{});var m0a=s(ySe);Pht=r(m0a,"xlnet"),m0a.forEach(t),Bht=r(tno," \u2014 "),gie=n(tno,"A",{href:!0});var c0a=s(gie);Iht=r(c0a,"TFXLNetForSequenceClassification"),c0a.forEach(t),Nht=r(tno," (XLNet model)"),tno.forEach(t),se.forEach(t),qht=i(Di),T(b7.$$.fragment,Di),Di.forEach(t),ji.forEach(t),Zdo=i(c),zc=n(c,"H2",{class:!0});var Tfo=s(zc);v7=n(Tfo,"A",{id:!0,class:!0,href:!0});var f0a=s(v7);xSe=n(f0a,"SPAN",{});var g0a=s(xSe);T(EB.$$.fragment,g0a),g0a.forEach(t),f0a.forEach(t),jht=i(Tfo),$Se=n(Tfo,"SPAN",{});var h0a=s($Se);Dht=r(h0a,"TFAutoModelForMultipleChoice"),h0a.forEach(t),Tfo.forEach(t),Kdo=i(c),Er=n(c,"DIV",{class:!0});var Gi=s(Er);T(CB.$$.fragment,Gi),Ght=i(Gi),Qc=n(Gi,"P",{});var the=s(Qc);Oht=r(the,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hie=n(the,"A",{href:!0});var u0a=s(hie);Vht=r(u0a,"from_pretrained()"),u0a.forEach(t),Xht=r(the," class method or the "),uie=n(the,"A",{href:!0});var p0a=s(uie);zht=r(p0a,"from_config()"),p0a.forEach(t),Qht=r(the,` class
method.`),the.forEach(t),Wht=i(Gi),wB=n(Gi,"P",{});var Mfo=s(wB);Uht=r(Mfo,"This class cannot be instantiated directly using "),kSe=n(Mfo,"CODE",{});var _0a=s(kSe);Hht=r(_0a,"__init__()"),_0a.forEach(t),Jht=r(Mfo," (throws an error)."),Mfo.forEach(t),Yht=i(Gi),da=n(Gi,"DIV",{class:!0});var I$=s(da);T(AB.$$.fragment,I$),Zht=i(I$),SSe=n(I$,"P",{});var b0a=s(SSe);Kht=r(b0a,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),b0a.forEach(t),eut=i(I$),Wc=n(I$,"P",{});var ahe=s(Wc);out=r(ahe,`Note:
Loading a model from its configuration file does `),RSe=n(ahe,"STRONG",{});var v0a=s(RSe);rut=r(v0a,"not"),v0a.forEach(t),tut=r(ahe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pie=n(ahe,"A",{href:!0});var F0a=s(pie);aut=r(F0a,"from_pretrained()"),F0a.forEach(t),nut=r(ahe," to load the model weights."),ahe.forEach(t),sut=i(I$),T(F7.$$.fragment,I$),I$.forEach(t),lut=i(Gi),Kr=n(Gi,"DIV",{class:!0});var Oi=s(Kr);T(LB.$$.fragment,Oi),iut=i(Oi),PSe=n(Oi,"P",{});var T0a=s(PSe);dut=r(T0a,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),T0a.forEach(t),mut=i(Oi),Jn=n(Oi,"P",{});var N$=s(Jn);cut=r(N$,"The model class to instantiate is selected based on the "),BSe=n(N$,"CODE",{});var M0a=s(BSe);fut=r(M0a,"model_type"),M0a.forEach(t),gut=r(N$,` property of the config object (either
passed as an argument or loaded from `),ISe=n(N$,"CODE",{});var E0a=s(ISe);hut=r(E0a,"pretrained_model_name_or_path"),E0a.forEach(t),uut=r(N$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NSe=n(N$,"CODE",{});var C0a=s(NSe);put=r(C0a,"pretrained_model_name_or_path"),C0a.forEach(t),_ut=r(N$,":"),N$.forEach(t),but=i(Oi),Me=n(Oi,"UL",{});var Ee=s(Me);T7=n(Ee,"LI",{});var ano=s(T7);qSe=n(ano,"STRONG",{});var w0a=s(qSe);vut=r(w0a,"albert"),w0a.forEach(t),Fut=r(ano," \u2014 "),_ie=n(ano,"A",{href:!0});var A0a=s(_ie);Tut=r(A0a,"TFAlbertForMultipleChoice"),A0a.forEach(t),Mut=r(ano," (ALBERT model)"),ano.forEach(t),Eut=i(Ee),M7=n(Ee,"LI",{});var nno=s(M7);jSe=n(nno,"STRONG",{});var L0a=s(jSe);Cut=r(L0a,"bert"),L0a.forEach(t),wut=r(nno," \u2014 "),bie=n(nno,"A",{href:!0});var y0a=s(bie);Aut=r(y0a,"TFBertForMultipleChoice"),y0a.forEach(t),Lut=r(nno," (BERT model)"),nno.forEach(t),yut=i(Ee),E7=n(Ee,"LI",{});var sno=s(E7);DSe=n(sno,"STRONG",{});var x0a=s(DSe);xut=r(x0a,"camembert"),x0a.forEach(t),$ut=r(sno," \u2014 "),vie=n(sno,"A",{href:!0});var $0a=s(vie);kut=r($0a,"TFCamembertForMultipleChoice"),$0a.forEach(t),Sut=r(sno," (CamemBERT model)"),sno.forEach(t),Rut=i(Ee),C7=n(Ee,"LI",{});var lno=s(C7);GSe=n(lno,"STRONG",{});var k0a=s(GSe);Put=r(k0a,"convbert"),k0a.forEach(t),But=r(lno," \u2014 "),Fie=n(lno,"A",{href:!0});var S0a=s(Fie);Iut=r(S0a,"TFConvBertForMultipleChoice"),S0a.forEach(t),Nut=r(lno," (ConvBERT model)"),lno.forEach(t),qut=i(Ee),w7=n(Ee,"LI",{});var ino=s(w7);OSe=n(ino,"STRONG",{});var R0a=s(OSe);jut=r(R0a,"distilbert"),R0a.forEach(t),Dut=r(ino," \u2014 "),Tie=n(ino,"A",{href:!0});var P0a=s(Tie);Gut=r(P0a,"TFDistilBertForMultipleChoice"),P0a.forEach(t),Out=r(ino," (DistilBERT model)"),ino.forEach(t),Vut=i(Ee),A7=n(Ee,"LI",{});var dno=s(A7);VSe=n(dno,"STRONG",{});var B0a=s(VSe);Xut=r(B0a,"electra"),B0a.forEach(t),zut=r(dno," \u2014 "),Mie=n(dno,"A",{href:!0});var I0a=s(Mie);Qut=r(I0a,"TFElectraForMultipleChoice"),I0a.forEach(t),Wut=r(dno," (ELECTRA model)"),dno.forEach(t),Uut=i(Ee),L7=n(Ee,"LI",{});var mno=s(L7);XSe=n(mno,"STRONG",{});var N0a=s(XSe);Hut=r(N0a,"flaubert"),N0a.forEach(t),Jut=r(mno," \u2014 "),Eie=n(mno,"A",{href:!0});var q0a=s(Eie);Yut=r(q0a,"TFFlaubertForMultipleChoice"),q0a.forEach(t),Zut=r(mno," (FlauBERT model)"),mno.forEach(t),Kut=i(Ee),y7=n(Ee,"LI",{});var cno=s(y7);zSe=n(cno,"STRONG",{});var j0a=s(zSe);ept=r(j0a,"funnel"),j0a.forEach(t),opt=r(cno," \u2014 "),Cie=n(cno,"A",{href:!0});var D0a=s(Cie);rpt=r(D0a,"TFFunnelForMultipleChoice"),D0a.forEach(t),tpt=r(cno," (Funnel Transformer model)"),cno.forEach(t),apt=i(Ee),x7=n(Ee,"LI",{});var fno=s(x7);QSe=n(fno,"STRONG",{});var G0a=s(QSe);npt=r(G0a,"longformer"),G0a.forEach(t),spt=r(fno," \u2014 "),wie=n(fno,"A",{href:!0});var O0a=s(wie);lpt=r(O0a,"TFLongformerForMultipleChoice"),O0a.forEach(t),ipt=r(fno," (Longformer model)"),fno.forEach(t),dpt=i(Ee),$7=n(Ee,"LI",{});var gno=s($7);WSe=n(gno,"STRONG",{});var V0a=s(WSe);mpt=r(V0a,"mobilebert"),V0a.forEach(t),cpt=r(gno," \u2014 "),Aie=n(gno,"A",{href:!0});var X0a=s(Aie);fpt=r(X0a,"TFMobileBertForMultipleChoice"),X0a.forEach(t),gpt=r(gno," (MobileBERT model)"),gno.forEach(t),hpt=i(Ee),k7=n(Ee,"LI",{});var hno=s(k7);USe=n(hno,"STRONG",{});var z0a=s(USe);upt=r(z0a,"mpnet"),z0a.forEach(t),ppt=r(hno," \u2014 "),Lie=n(hno,"A",{href:!0});var Q0a=s(Lie);_pt=r(Q0a,"TFMPNetForMultipleChoice"),Q0a.forEach(t),bpt=r(hno," (MPNet model)"),hno.forEach(t),vpt=i(Ee),S7=n(Ee,"LI",{});var uno=s(S7);HSe=n(uno,"STRONG",{});var W0a=s(HSe);Fpt=r(W0a,"rembert"),W0a.forEach(t),Tpt=r(uno," \u2014 "),yie=n(uno,"A",{href:!0});var U0a=s(yie);Mpt=r(U0a,"TFRemBertForMultipleChoice"),U0a.forEach(t),Ept=r(uno," (RemBERT model)"),uno.forEach(t),Cpt=i(Ee),R7=n(Ee,"LI",{});var pno=s(R7);JSe=n(pno,"STRONG",{});var H0a=s(JSe);wpt=r(H0a,"roberta"),H0a.forEach(t),Apt=r(pno," \u2014 "),xie=n(pno,"A",{href:!0});var J0a=s(xie);Lpt=r(J0a,"TFRobertaForMultipleChoice"),J0a.forEach(t),ypt=r(pno," (RoBERTa model)"),pno.forEach(t),xpt=i(Ee),P7=n(Ee,"LI",{});var _no=s(P7);YSe=n(_no,"STRONG",{});var Y0a=s(YSe);$pt=r(Y0a,"roformer"),Y0a.forEach(t),kpt=r(_no," \u2014 "),$ie=n(_no,"A",{href:!0});var Z0a=s($ie);Spt=r(Z0a,"TFRoFormerForMultipleChoice"),Z0a.forEach(t),Rpt=r(_no," (RoFormer model)"),_no.forEach(t),Ppt=i(Ee),B7=n(Ee,"LI",{});var bno=s(B7);ZSe=n(bno,"STRONG",{});var K0a=s(ZSe);Bpt=r(K0a,"xlm"),K0a.forEach(t),Ipt=r(bno," \u2014 "),kie=n(bno,"A",{href:!0});var ewa=s(kie);Npt=r(ewa,"TFXLMForMultipleChoice"),ewa.forEach(t),qpt=r(bno," (XLM model)"),bno.forEach(t),jpt=i(Ee),I7=n(Ee,"LI",{});var vno=s(I7);KSe=n(vno,"STRONG",{});var owa=s(KSe);Dpt=r(owa,"xlm-roberta"),owa.forEach(t),Gpt=r(vno," \u2014 "),Sie=n(vno,"A",{href:!0});var rwa=s(Sie);Opt=r(rwa,"TFXLMRobertaForMultipleChoice"),rwa.forEach(t),Vpt=r(vno," (XLM-RoBERTa model)"),vno.forEach(t),Xpt=i(Ee),N7=n(Ee,"LI",{});var Fno=s(N7);eRe=n(Fno,"STRONG",{});var twa=s(eRe);zpt=r(twa,"xlnet"),twa.forEach(t),Qpt=r(Fno," \u2014 "),Rie=n(Fno,"A",{href:!0});var awa=s(Rie);Wpt=r(awa,"TFXLNetForMultipleChoice"),awa.forEach(t),Upt=r(Fno," (XLNet model)"),Fno.forEach(t),Ee.forEach(t),Hpt=i(Oi),T(q7.$$.fragment,Oi),Oi.forEach(t),Gi.forEach(t),emo=i(c),Uc=n(c,"H2",{class:!0});var Efo=s(Uc);j7=n(Efo,"A",{id:!0,class:!0,href:!0});var nwa=s(j7);oRe=n(nwa,"SPAN",{});var swa=s(oRe);T(yB.$$.fragment,swa),swa.forEach(t),nwa.forEach(t),Jpt=i(Efo),rRe=n(Efo,"SPAN",{});var lwa=s(rRe);Ypt=r(lwa,"TFAutoModelForNextSentencePrediction"),lwa.forEach(t),Efo.forEach(t),omo=i(c),Cr=n(c,"DIV",{class:!0});var Vi=s(Cr);T(xB.$$.fragment,Vi),Zpt=i(Vi),Hc=n(Vi,"P",{});var nhe=s(Hc);Kpt=r(nhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Pie=n(nhe,"A",{href:!0});var iwa=s(Pie);e_t=r(iwa,"from_pretrained()"),iwa.forEach(t),o_t=r(nhe," class method or the "),Bie=n(nhe,"A",{href:!0});var dwa=s(Bie);r_t=r(dwa,"from_config()"),dwa.forEach(t),t_t=r(nhe,` class
method.`),nhe.forEach(t),a_t=i(Vi),$B=n(Vi,"P",{});var Cfo=s($B);n_t=r(Cfo,"This class cannot be instantiated directly using "),tRe=n(Cfo,"CODE",{});var mwa=s(tRe);s_t=r(mwa,"__init__()"),mwa.forEach(t),l_t=r(Cfo," (throws an error)."),Cfo.forEach(t),i_t=i(Vi),ma=n(Vi,"DIV",{class:!0});var q$=s(ma);T(kB.$$.fragment,q$),d_t=i(q$),aRe=n(q$,"P",{});var cwa=s(aRe);m_t=r(cwa,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cwa.forEach(t),c_t=i(q$),Jc=n(q$,"P",{});var she=s(Jc);f_t=r(she,`Note:
Loading a model from its configuration file does `),nRe=n(she,"STRONG",{});var fwa=s(nRe);g_t=r(fwa,"not"),fwa.forEach(t),h_t=r(she,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iie=n(she,"A",{href:!0});var gwa=s(Iie);u_t=r(gwa,"from_pretrained()"),gwa.forEach(t),p_t=r(she," to load the model weights."),she.forEach(t),__t=i(q$),T(D7.$$.fragment,q$),q$.forEach(t),b_t=i(Vi),et=n(Vi,"DIV",{class:!0});var Xi=s(et);T(SB.$$.fragment,Xi),v_t=i(Xi),sRe=n(Xi,"P",{});var hwa=s(sRe);F_t=r(hwa,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hwa.forEach(t),T_t=i(Xi),Yn=n(Xi,"P",{});var j$=s(Yn);M_t=r(j$,"The model class to instantiate is selected based on the "),lRe=n(j$,"CODE",{});var uwa=s(lRe);E_t=r(uwa,"model_type"),uwa.forEach(t),C_t=r(j$,` property of the config object (either
passed as an argument or loaded from `),iRe=n(j$,"CODE",{});var pwa=s(iRe);w_t=r(pwa,"pretrained_model_name_or_path"),pwa.forEach(t),A_t=r(j$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dRe=n(j$,"CODE",{});var _wa=s(dRe);L_t=r(_wa,"pretrained_model_name_or_path"),_wa.forEach(t),y_t=r(j$,":"),j$.forEach(t),x_t=i(Xi),RB=n(Xi,"UL",{});var wfo=s(RB);G7=n(wfo,"LI",{});var Tno=s(G7);mRe=n(Tno,"STRONG",{});var bwa=s(mRe);$_t=r(bwa,"bert"),bwa.forEach(t),k_t=r(Tno," \u2014 "),Nie=n(Tno,"A",{href:!0});var vwa=s(Nie);S_t=r(vwa,"TFBertForNextSentencePrediction"),vwa.forEach(t),R_t=r(Tno," (BERT model)"),Tno.forEach(t),P_t=i(wfo),O7=n(wfo,"LI",{});var Mno=s(O7);cRe=n(Mno,"STRONG",{});var Fwa=s(cRe);B_t=r(Fwa,"mobilebert"),Fwa.forEach(t),I_t=r(Mno," \u2014 "),qie=n(Mno,"A",{href:!0});var Twa=s(qie);N_t=r(Twa,"TFMobileBertForNextSentencePrediction"),Twa.forEach(t),q_t=r(Mno," (MobileBERT model)"),Mno.forEach(t),wfo.forEach(t),j_t=i(Xi),T(V7.$$.fragment,Xi),Xi.forEach(t),Vi.forEach(t),rmo=i(c),Yc=n(c,"H2",{class:!0});var Afo=s(Yc);X7=n(Afo,"A",{id:!0,class:!0,href:!0});var Mwa=s(X7);fRe=n(Mwa,"SPAN",{});var Ewa=s(fRe);T(PB.$$.fragment,Ewa),Ewa.forEach(t),Mwa.forEach(t),D_t=i(Afo),gRe=n(Afo,"SPAN",{});var Cwa=s(gRe);G_t=r(Cwa,"TFAutoModelForTableQuestionAnswering"),Cwa.forEach(t),Afo.forEach(t),tmo=i(c),wr=n(c,"DIV",{class:!0});var zi=s(wr);T(BB.$$.fragment,zi),O_t=i(zi),Zc=n(zi,"P",{});var lhe=s(Zc);V_t=r(lhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jie=n(lhe,"A",{href:!0});var wwa=s(jie);X_t=r(wwa,"from_pretrained()"),wwa.forEach(t),z_t=r(lhe," class method or the "),Die=n(lhe,"A",{href:!0});var Awa=s(Die);Q_t=r(Awa,"from_config()"),Awa.forEach(t),W_t=r(lhe,` class
method.`),lhe.forEach(t),U_t=i(zi),IB=n(zi,"P",{});var Lfo=s(IB);H_t=r(Lfo,"This class cannot be instantiated directly using "),hRe=n(Lfo,"CODE",{});var Lwa=s(hRe);J_t=r(Lwa,"__init__()"),Lwa.forEach(t),Y_t=r(Lfo," (throws an error)."),Lfo.forEach(t),Z_t=i(zi),ca=n(zi,"DIV",{class:!0});var D$=s(ca);T(NB.$$.fragment,D$),K_t=i(D$),uRe=n(D$,"P",{});var ywa=s(uRe);e1t=r(ywa,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ywa.forEach(t),o1t=i(D$),Kc=n(D$,"P",{});var ihe=s(Kc);r1t=r(ihe,`Note:
Loading a model from its configuration file does `),pRe=n(ihe,"STRONG",{});var xwa=s(pRe);t1t=r(xwa,"not"),xwa.forEach(t),a1t=r(ihe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gie=n(ihe,"A",{href:!0});var $wa=s(Gie);n1t=r($wa,"from_pretrained()"),$wa.forEach(t),s1t=r(ihe," to load the model weights."),ihe.forEach(t),l1t=i(D$),T(z7.$$.fragment,D$),D$.forEach(t),i1t=i(zi),ot=n(zi,"DIV",{class:!0});var Qi=s(ot);T(qB.$$.fragment,Qi),d1t=i(Qi),_Re=n(Qi,"P",{});var kwa=s(_Re);m1t=r(kwa,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),kwa.forEach(t),c1t=i(Qi),Zn=n(Qi,"P",{});var G$=s(Zn);f1t=r(G$,"The model class to instantiate is selected based on the "),bRe=n(G$,"CODE",{});var Swa=s(bRe);g1t=r(Swa,"model_type"),Swa.forEach(t),h1t=r(G$,` property of the config object (either
passed as an argument or loaded from `),vRe=n(G$,"CODE",{});var Rwa=s(vRe);u1t=r(Rwa,"pretrained_model_name_or_path"),Rwa.forEach(t),p1t=r(G$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FRe=n(G$,"CODE",{});var Pwa=s(FRe);_1t=r(Pwa,"pretrained_model_name_or_path"),Pwa.forEach(t),b1t=r(G$,":"),G$.forEach(t),v1t=i(Qi),TRe=n(Qi,"UL",{});var Bwa=s(TRe);Q7=n(Bwa,"LI",{});var Eno=s(Q7);MRe=n(Eno,"STRONG",{});var Iwa=s(MRe);F1t=r(Iwa,"tapas"),Iwa.forEach(t),T1t=r(Eno," \u2014 "),Oie=n(Eno,"A",{href:!0});var Nwa=s(Oie);M1t=r(Nwa,"TFTapasForQuestionAnswering"),Nwa.forEach(t),E1t=r(Eno," (TAPAS model)"),Eno.forEach(t),Bwa.forEach(t),C1t=i(Qi),T(W7.$$.fragment,Qi),Qi.forEach(t),zi.forEach(t),amo=i(c),ef=n(c,"H2",{class:!0});var yfo=s(ef);U7=n(yfo,"A",{id:!0,class:!0,href:!0});var qwa=s(U7);ERe=n(qwa,"SPAN",{});var jwa=s(ERe);T(jB.$$.fragment,jwa),jwa.forEach(t),qwa.forEach(t),w1t=i(yfo),CRe=n(yfo,"SPAN",{});var Dwa=s(CRe);A1t=r(Dwa,"TFAutoModelForDocumentQuestionAnswering"),Dwa.forEach(t),yfo.forEach(t),nmo=i(c),Ar=n(c,"DIV",{class:!0});var Wi=s(Ar);T(DB.$$.fragment,Wi),L1t=i(Wi),of=n(Wi,"P",{});var dhe=s(of);y1t=r(dhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Vie=n(dhe,"A",{href:!0});var Gwa=s(Vie);x1t=r(Gwa,"from_pretrained()"),Gwa.forEach(t),$1t=r(dhe," class method or the "),Xie=n(dhe,"A",{href:!0});var Owa=s(Xie);k1t=r(Owa,"from_config()"),Owa.forEach(t),S1t=r(dhe,` class
method.`),dhe.forEach(t),R1t=i(Wi),GB=n(Wi,"P",{});var xfo=s(GB);P1t=r(xfo,"This class cannot be instantiated directly using "),wRe=n(xfo,"CODE",{});var Vwa=s(wRe);B1t=r(Vwa,"__init__()"),Vwa.forEach(t),I1t=r(xfo," (throws an error)."),xfo.forEach(t),N1t=i(Wi),fa=n(Wi,"DIV",{class:!0});var O$=s(fa);T(OB.$$.fragment,O$),q1t=i(O$),ARe=n(O$,"P",{});var Xwa=s(ARe);j1t=r(Xwa,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),Xwa.forEach(t),D1t=i(O$),rf=n(O$,"P",{});var mhe=s(rf);G1t=r(mhe,`Note:
Loading a model from its configuration file does `),LRe=n(mhe,"STRONG",{});var zwa=s(LRe);O1t=r(zwa,"not"),zwa.forEach(t),V1t=r(mhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zie=n(mhe,"A",{href:!0});var Qwa=s(zie);X1t=r(Qwa,"from_pretrained()"),Qwa.forEach(t),z1t=r(mhe," to load the model weights."),mhe.forEach(t),Q1t=i(O$),T(H7.$$.fragment,O$),O$.forEach(t),W1t=i(Wi),rt=n(Wi,"DIV",{class:!0});var Ui=s(rt);T(VB.$$.fragment,Ui),U1t=i(Ui),yRe=n(Ui,"P",{});var Wwa=s(yRe);H1t=r(Wwa,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),Wwa.forEach(t),J1t=i(Ui),Kn=n(Ui,"P",{});var V$=s(Kn);Y1t=r(V$,"The model class to instantiate is selected based on the "),xRe=n(V$,"CODE",{});var Uwa=s(xRe);Z1t=r(Uwa,"model_type"),Uwa.forEach(t),K1t=r(V$,` property of the config object (either
passed as an argument or loaded from `),$Re=n(V$,"CODE",{});var Hwa=s($Re);e2t=r(Hwa,"pretrained_model_name_or_path"),Hwa.forEach(t),o2t=r(V$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kRe=n(V$,"CODE",{});var Jwa=s(kRe);r2t=r(Jwa,"pretrained_model_name_or_path"),Jwa.forEach(t),t2t=r(V$,":"),V$.forEach(t),a2t=i(Ui),SRe=n(Ui,"UL",{});var Ywa=s(SRe);J7=n(Ywa,"LI",{});var Cno=s(J7);RRe=n(Cno,"STRONG",{});var Zwa=s(RRe);n2t=r(Zwa,"layoutlm"),Zwa.forEach(t),s2t=r(Cno," \u2014 "),Qie=n(Cno,"A",{href:!0});var Kwa=s(Qie);l2t=r(Kwa,"TFLayoutLMForQuestionAnswering"),Kwa.forEach(t),i2t=r(Cno," (LayoutLM model)"),Cno.forEach(t),Ywa.forEach(t),d2t=i(Ui),T(Y7.$$.fragment,Ui),Ui.forEach(t),Wi.forEach(t),smo=i(c),tf=n(c,"H2",{class:!0});var $fo=s(tf);Z7=n($fo,"A",{id:!0,class:!0,href:!0});var eAa=s(Z7);PRe=n(eAa,"SPAN",{});var oAa=s(PRe);T(XB.$$.fragment,oAa),oAa.forEach(t),eAa.forEach(t),m2t=i($fo),BRe=n($fo,"SPAN",{});var rAa=s(BRe);c2t=r(rAa,"TFAutoModelForTokenClassification"),rAa.forEach(t),$fo.forEach(t),lmo=i(c),Lr=n(c,"DIV",{class:!0});var Hi=s(Lr);T(zB.$$.fragment,Hi),f2t=i(Hi),af=n(Hi,"P",{});var che=s(af);g2t=r(che,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Wie=n(che,"A",{href:!0});var tAa=s(Wie);h2t=r(tAa,"from_pretrained()"),tAa.forEach(t),u2t=r(che," class method or the "),Uie=n(che,"A",{href:!0});var aAa=s(Uie);p2t=r(aAa,"from_config()"),aAa.forEach(t),_2t=r(che,` class
method.`),che.forEach(t),b2t=i(Hi),QB=n(Hi,"P",{});var kfo=s(QB);v2t=r(kfo,"This class cannot be instantiated directly using "),IRe=n(kfo,"CODE",{});var nAa=s(IRe);F2t=r(nAa,"__init__()"),nAa.forEach(t),T2t=r(kfo," (throws an error)."),kfo.forEach(t),M2t=i(Hi),ga=n(Hi,"DIV",{class:!0});var X$=s(ga);T(WB.$$.fragment,X$),E2t=i(X$),NRe=n(X$,"P",{});var sAa=s(NRe);C2t=r(sAa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sAa.forEach(t),w2t=i(X$),nf=n(X$,"P",{});var fhe=s(nf);A2t=r(fhe,`Note:
Loading a model from its configuration file does `),qRe=n(fhe,"STRONG",{});var lAa=s(qRe);L2t=r(lAa,"not"),lAa.forEach(t),y2t=r(fhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hie=n(fhe,"A",{href:!0});var iAa=s(Hie);x2t=r(iAa,"from_pretrained()"),iAa.forEach(t),$2t=r(fhe," to load the model weights."),fhe.forEach(t),k2t=i(X$),T(K7.$$.fragment,X$),X$.forEach(t),S2t=i(Hi),tt=n(Hi,"DIV",{class:!0});var Ji=s(tt);T(UB.$$.fragment,Ji),R2t=i(Ji),jRe=n(Ji,"P",{});var dAa=s(jRe);P2t=r(dAa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dAa.forEach(t),B2t=i(Ji),es=n(Ji,"P",{});var z$=s(es);I2t=r(z$,"The model class to instantiate is selected based on the "),DRe=n(z$,"CODE",{});var mAa=s(DRe);N2t=r(mAa,"model_type"),mAa.forEach(t),q2t=r(z$,` property of the config object (either
passed as an argument or loaded from `),GRe=n(z$,"CODE",{});var cAa=s(GRe);j2t=r(cAa,"pretrained_model_name_or_path"),cAa.forEach(t),D2t=r(z$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ORe=n(z$,"CODE",{});var fAa=s(ORe);G2t=r(fAa,"pretrained_model_name_or_path"),fAa.forEach(t),O2t=r(z$,":"),z$.forEach(t),V2t=i(Ji),me=n(Ji,"UL",{});var pe=s(me);e8=n(pe,"LI",{});var wno=s(e8);VRe=n(wno,"STRONG",{});var gAa=s(VRe);X2t=r(gAa,"albert"),gAa.forEach(t),z2t=r(wno," \u2014 "),Jie=n(wno,"A",{href:!0});var hAa=s(Jie);Q2t=r(hAa,"TFAlbertForTokenClassification"),hAa.forEach(t),W2t=r(wno," (ALBERT model)"),wno.forEach(t),U2t=i(pe),o8=n(pe,"LI",{});var Ano=s(o8);XRe=n(Ano,"STRONG",{});var uAa=s(XRe);H2t=r(uAa,"bert"),uAa.forEach(t),J2t=r(Ano," \u2014 "),Yie=n(Ano,"A",{href:!0});var pAa=s(Yie);Y2t=r(pAa,"TFBertForTokenClassification"),pAa.forEach(t),Z2t=r(Ano," (BERT model)"),Ano.forEach(t),K2t=i(pe),r8=n(pe,"LI",{});var Lno=s(r8);zRe=n(Lno,"STRONG",{});var _Aa=s(zRe);ebt=r(_Aa,"camembert"),_Aa.forEach(t),obt=r(Lno," \u2014 "),Zie=n(Lno,"A",{href:!0});var bAa=s(Zie);rbt=r(bAa,"TFCamembertForTokenClassification"),bAa.forEach(t),tbt=r(Lno," (CamemBERT model)"),Lno.forEach(t),abt=i(pe),t8=n(pe,"LI",{});var yno=s(t8);QRe=n(yno,"STRONG",{});var vAa=s(QRe);nbt=r(vAa,"convbert"),vAa.forEach(t),sbt=r(yno," \u2014 "),Kie=n(yno,"A",{href:!0});var FAa=s(Kie);lbt=r(FAa,"TFConvBertForTokenClassification"),FAa.forEach(t),ibt=r(yno," (ConvBERT model)"),yno.forEach(t),dbt=i(pe),a8=n(pe,"LI",{});var xno=s(a8);WRe=n(xno,"STRONG",{});var TAa=s(WRe);mbt=r(TAa,"deberta"),TAa.forEach(t),cbt=r(xno," \u2014 "),ede=n(xno,"A",{href:!0});var MAa=s(ede);fbt=r(MAa,"TFDebertaForTokenClassification"),MAa.forEach(t),gbt=r(xno," (DeBERTa model)"),xno.forEach(t),hbt=i(pe),n8=n(pe,"LI",{});var $no=s(n8);URe=n($no,"STRONG",{});var EAa=s(URe);ubt=r(EAa,"deberta-v2"),EAa.forEach(t),pbt=r($no," \u2014 "),ode=n($no,"A",{href:!0});var CAa=s(ode);_bt=r(CAa,"TFDebertaV2ForTokenClassification"),CAa.forEach(t),bbt=r($no," (DeBERTa-v2 model)"),$no.forEach(t),vbt=i(pe),s8=n(pe,"LI",{});var kno=s(s8);HRe=n(kno,"STRONG",{});var wAa=s(HRe);Fbt=r(wAa,"distilbert"),wAa.forEach(t),Tbt=r(kno," \u2014 "),rde=n(kno,"A",{href:!0});var AAa=s(rde);Mbt=r(AAa,"TFDistilBertForTokenClassification"),AAa.forEach(t),Ebt=r(kno," (DistilBERT model)"),kno.forEach(t),Cbt=i(pe),l8=n(pe,"LI",{});var Sno=s(l8);JRe=n(Sno,"STRONG",{});var LAa=s(JRe);wbt=r(LAa,"electra"),LAa.forEach(t),Abt=r(Sno," \u2014 "),tde=n(Sno,"A",{href:!0});var yAa=s(tde);Lbt=r(yAa,"TFElectraForTokenClassification"),yAa.forEach(t),ybt=r(Sno," (ELECTRA model)"),Sno.forEach(t),xbt=i(pe),i8=n(pe,"LI",{});var Rno=s(i8);YRe=n(Rno,"STRONG",{});var xAa=s(YRe);$bt=r(xAa,"esm"),xAa.forEach(t),kbt=r(Rno," \u2014 "),ade=n(Rno,"A",{href:!0});var $Aa=s(ade);Sbt=r($Aa,"TFEsmForTokenClassification"),$Aa.forEach(t),Rbt=r(Rno," (ESM model)"),Rno.forEach(t),Pbt=i(pe),d8=n(pe,"LI",{});var Pno=s(d8);ZRe=n(Pno,"STRONG",{});var kAa=s(ZRe);Bbt=r(kAa,"flaubert"),kAa.forEach(t),Ibt=r(Pno," \u2014 "),nde=n(Pno,"A",{href:!0});var SAa=s(nde);Nbt=r(SAa,"TFFlaubertForTokenClassification"),SAa.forEach(t),qbt=r(Pno," (FlauBERT model)"),Pno.forEach(t),jbt=i(pe),m8=n(pe,"LI",{});var Bno=s(m8);KRe=n(Bno,"STRONG",{});var RAa=s(KRe);Dbt=r(RAa,"funnel"),RAa.forEach(t),Gbt=r(Bno," \u2014 "),sde=n(Bno,"A",{href:!0});var PAa=s(sde);Obt=r(PAa,"TFFunnelForTokenClassification"),PAa.forEach(t),Vbt=r(Bno," (Funnel Transformer model)"),Bno.forEach(t),Xbt=i(pe),c8=n(pe,"LI",{});var Ino=s(c8);ePe=n(Ino,"STRONG",{});var BAa=s(ePe);zbt=r(BAa,"layoutlm"),BAa.forEach(t),Qbt=r(Ino," \u2014 "),lde=n(Ino,"A",{href:!0});var IAa=s(lde);Wbt=r(IAa,"TFLayoutLMForTokenClassification"),IAa.forEach(t),Ubt=r(Ino," (LayoutLM model)"),Ino.forEach(t),Hbt=i(pe),f8=n(pe,"LI",{});var Nno=s(f8);oPe=n(Nno,"STRONG",{});var NAa=s(oPe);Jbt=r(NAa,"layoutlmv3"),NAa.forEach(t),Ybt=r(Nno," \u2014 "),ide=n(Nno,"A",{href:!0});var qAa=s(ide);Zbt=r(qAa,"TFLayoutLMv3ForTokenClassification"),qAa.forEach(t),Kbt=r(Nno," (LayoutLMv3 model)"),Nno.forEach(t),evt=i(pe),g8=n(pe,"LI",{});var qno=s(g8);rPe=n(qno,"STRONG",{});var jAa=s(rPe);ovt=r(jAa,"longformer"),jAa.forEach(t),rvt=r(qno," \u2014 "),dde=n(qno,"A",{href:!0});var DAa=s(dde);tvt=r(DAa,"TFLongformerForTokenClassification"),DAa.forEach(t),avt=r(qno," (Longformer model)"),qno.forEach(t),nvt=i(pe),h8=n(pe,"LI",{});var jno=s(h8);tPe=n(jno,"STRONG",{});var GAa=s(tPe);svt=r(GAa,"mobilebert"),GAa.forEach(t),lvt=r(jno," \u2014 "),mde=n(jno,"A",{href:!0});var OAa=s(mde);ivt=r(OAa,"TFMobileBertForTokenClassification"),OAa.forEach(t),dvt=r(jno," (MobileBERT model)"),jno.forEach(t),mvt=i(pe),u8=n(pe,"LI",{});var Dno=s(u8);aPe=n(Dno,"STRONG",{});var VAa=s(aPe);cvt=r(VAa,"mpnet"),VAa.forEach(t),fvt=r(Dno," \u2014 "),cde=n(Dno,"A",{href:!0});var XAa=s(cde);gvt=r(XAa,"TFMPNetForTokenClassification"),XAa.forEach(t),hvt=r(Dno," (MPNet model)"),Dno.forEach(t),uvt=i(pe),p8=n(pe,"LI",{});var Gno=s(p8);nPe=n(Gno,"STRONG",{});var zAa=s(nPe);pvt=r(zAa,"rembert"),zAa.forEach(t),_vt=r(Gno," \u2014 "),fde=n(Gno,"A",{href:!0});var QAa=s(fde);bvt=r(QAa,"TFRemBertForTokenClassification"),QAa.forEach(t),vvt=r(Gno," (RemBERT model)"),Gno.forEach(t),Fvt=i(pe),_8=n(pe,"LI",{});var Ono=s(_8);sPe=n(Ono,"STRONG",{});var WAa=s(sPe);Tvt=r(WAa,"roberta"),WAa.forEach(t),Mvt=r(Ono," \u2014 "),gde=n(Ono,"A",{href:!0});var UAa=s(gde);Evt=r(UAa,"TFRobertaForTokenClassification"),UAa.forEach(t),Cvt=r(Ono," (RoBERTa model)"),Ono.forEach(t),wvt=i(pe),b8=n(pe,"LI",{});var Vno=s(b8);lPe=n(Vno,"STRONG",{});var HAa=s(lPe);Avt=r(HAa,"roformer"),HAa.forEach(t),Lvt=r(Vno," \u2014 "),hde=n(Vno,"A",{href:!0});var JAa=s(hde);yvt=r(JAa,"TFRoFormerForTokenClassification"),JAa.forEach(t),xvt=r(Vno," (RoFormer model)"),Vno.forEach(t),$vt=i(pe),v8=n(pe,"LI",{});var Xno=s(v8);iPe=n(Xno,"STRONG",{});var YAa=s(iPe);kvt=r(YAa,"xlm"),YAa.forEach(t),Svt=r(Xno," \u2014 "),ude=n(Xno,"A",{href:!0});var ZAa=s(ude);Rvt=r(ZAa,"TFXLMForTokenClassification"),ZAa.forEach(t),Pvt=r(Xno," (XLM model)"),Xno.forEach(t),Bvt=i(pe),F8=n(pe,"LI",{});var zno=s(F8);dPe=n(zno,"STRONG",{});var KAa=s(dPe);Ivt=r(KAa,"xlm-roberta"),KAa.forEach(t),Nvt=r(zno," \u2014 "),pde=n(zno,"A",{href:!0});var e6a=s(pde);qvt=r(e6a,"TFXLMRobertaForTokenClassification"),e6a.forEach(t),jvt=r(zno," (XLM-RoBERTa model)"),zno.forEach(t),Dvt=i(pe),T8=n(pe,"LI",{});var Qno=s(T8);mPe=n(Qno,"STRONG",{});var o6a=s(mPe);Gvt=r(o6a,"xlnet"),o6a.forEach(t),Ovt=r(Qno," \u2014 "),_de=n(Qno,"A",{href:!0});var r6a=s(_de);Vvt=r(r6a,"TFXLNetForTokenClassification"),r6a.forEach(t),Xvt=r(Qno," (XLNet model)"),Qno.forEach(t),pe.forEach(t),zvt=i(Ji),T(M8.$$.fragment,Ji),Ji.forEach(t),Hi.forEach(t),imo=i(c),sf=n(c,"H2",{class:!0});var Sfo=s(sf);E8=n(Sfo,"A",{id:!0,class:!0,href:!0});var t6a=s(E8);cPe=n(t6a,"SPAN",{});var a6a=s(cPe);T(HB.$$.fragment,a6a),a6a.forEach(t),t6a.forEach(t),Qvt=i(Sfo),fPe=n(Sfo,"SPAN",{});var n6a=s(fPe);Wvt=r(n6a,"TFAutoModelForQuestionAnswering"),n6a.forEach(t),Sfo.forEach(t),dmo=i(c),yr=n(c,"DIV",{class:!0});var Yi=s(yr);T(JB.$$.fragment,Yi),Uvt=i(Yi),lf=n(Yi,"P",{});var ghe=s(lf);Hvt=r(ghe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bde=n(ghe,"A",{href:!0});var s6a=s(bde);Jvt=r(s6a,"from_pretrained()"),s6a.forEach(t),Yvt=r(ghe," class method or the "),vde=n(ghe,"A",{href:!0});var l6a=s(vde);Zvt=r(l6a,"from_config()"),l6a.forEach(t),Kvt=r(ghe,` class
method.`),ghe.forEach(t),eFt=i(Yi),YB=n(Yi,"P",{});var Rfo=s(YB);oFt=r(Rfo,"This class cannot be instantiated directly using "),gPe=n(Rfo,"CODE",{});var i6a=s(gPe);rFt=r(i6a,"__init__()"),i6a.forEach(t),tFt=r(Rfo," (throws an error)."),Rfo.forEach(t),aFt=i(Yi),ha=n(Yi,"DIV",{class:!0});var Q$=s(ha);T(ZB.$$.fragment,Q$),nFt=i(Q$),hPe=n(Q$,"P",{});var d6a=s(hPe);sFt=r(d6a,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),d6a.forEach(t),lFt=i(Q$),df=n(Q$,"P",{});var hhe=s(df);iFt=r(hhe,`Note:
Loading a model from its configuration file does `),uPe=n(hhe,"STRONG",{});var m6a=s(uPe);dFt=r(m6a,"not"),m6a.forEach(t),mFt=r(hhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fde=n(hhe,"A",{href:!0});var c6a=s(Fde);cFt=r(c6a,"from_pretrained()"),c6a.forEach(t),fFt=r(hhe," to load the model weights."),hhe.forEach(t),gFt=i(Q$),T(C8.$$.fragment,Q$),Q$.forEach(t),hFt=i(Yi),at=n(Yi,"DIV",{class:!0});var Zi=s(at);T(KB.$$.fragment,Zi),uFt=i(Zi),pPe=n(Zi,"P",{});var f6a=s(pPe);pFt=r(f6a,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),f6a.forEach(t),_Ft=i(Zi),os=n(Zi,"P",{});var W$=s(os);bFt=r(W$,"The model class to instantiate is selected based on the "),_Pe=n(W$,"CODE",{});var g6a=s(_Pe);vFt=r(g6a,"model_type"),g6a.forEach(t),FFt=r(W$,` property of the config object (either
passed as an argument or loaded from `),bPe=n(W$,"CODE",{});var h6a=s(bPe);TFt=r(h6a,"pretrained_model_name_or_path"),h6a.forEach(t),MFt=r(W$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vPe=n(W$,"CODE",{});var u6a=s(vPe);EFt=r(u6a,"pretrained_model_name_or_path"),u6a.forEach(t),CFt=r(W$,":"),W$.forEach(t),wFt=i(Zi),ue=n(Zi,"UL",{});var ve=s(ue);w8=n(ve,"LI",{});var Wno=s(w8);FPe=n(Wno,"STRONG",{});var p6a=s(FPe);AFt=r(p6a,"albert"),p6a.forEach(t),LFt=r(Wno," \u2014 "),Tde=n(Wno,"A",{href:!0});var _6a=s(Tde);yFt=r(_6a,"TFAlbertForQuestionAnswering"),_6a.forEach(t),xFt=r(Wno," (ALBERT model)"),Wno.forEach(t),$Ft=i(ve),A8=n(ve,"LI",{});var Uno=s(A8);TPe=n(Uno,"STRONG",{});var b6a=s(TPe);kFt=r(b6a,"bert"),b6a.forEach(t),SFt=r(Uno," \u2014 "),Mde=n(Uno,"A",{href:!0});var v6a=s(Mde);RFt=r(v6a,"TFBertForQuestionAnswering"),v6a.forEach(t),PFt=r(Uno," (BERT model)"),Uno.forEach(t),BFt=i(ve),L8=n(ve,"LI",{});var Hno=s(L8);MPe=n(Hno,"STRONG",{});var F6a=s(MPe);IFt=r(F6a,"camembert"),F6a.forEach(t),NFt=r(Hno," \u2014 "),Ede=n(Hno,"A",{href:!0});var T6a=s(Ede);qFt=r(T6a,"TFCamembertForQuestionAnswering"),T6a.forEach(t),jFt=r(Hno," (CamemBERT model)"),Hno.forEach(t),DFt=i(ve),y8=n(ve,"LI",{});var Jno=s(y8);EPe=n(Jno,"STRONG",{});var M6a=s(EPe);GFt=r(M6a,"convbert"),M6a.forEach(t),OFt=r(Jno," \u2014 "),Cde=n(Jno,"A",{href:!0});var E6a=s(Cde);VFt=r(E6a,"TFConvBertForQuestionAnswering"),E6a.forEach(t),XFt=r(Jno," (ConvBERT model)"),Jno.forEach(t),zFt=i(ve),x8=n(ve,"LI",{});var Yno=s(x8);CPe=n(Yno,"STRONG",{});var C6a=s(CPe);QFt=r(C6a,"deberta"),C6a.forEach(t),WFt=r(Yno," \u2014 "),wde=n(Yno,"A",{href:!0});var w6a=s(wde);UFt=r(w6a,"TFDebertaForQuestionAnswering"),w6a.forEach(t),HFt=r(Yno," (DeBERTa model)"),Yno.forEach(t),JFt=i(ve),$8=n(ve,"LI",{});var Zno=s($8);wPe=n(Zno,"STRONG",{});var A6a=s(wPe);YFt=r(A6a,"deberta-v2"),A6a.forEach(t),ZFt=r(Zno," \u2014 "),Ade=n(Zno,"A",{href:!0});var L6a=s(Ade);KFt=r(L6a,"TFDebertaV2ForQuestionAnswering"),L6a.forEach(t),eTt=r(Zno," (DeBERTa-v2 model)"),Zno.forEach(t),oTt=i(ve),k8=n(ve,"LI",{});var Kno=s(k8);APe=n(Kno,"STRONG",{});var y6a=s(APe);rTt=r(y6a,"distilbert"),y6a.forEach(t),tTt=r(Kno," \u2014 "),Lde=n(Kno,"A",{href:!0});var x6a=s(Lde);aTt=r(x6a,"TFDistilBertForQuestionAnswering"),x6a.forEach(t),nTt=r(Kno," (DistilBERT model)"),Kno.forEach(t),sTt=i(ve),S8=n(ve,"LI",{});var eso=s(S8);LPe=n(eso,"STRONG",{});var $6a=s(LPe);lTt=r($6a,"electra"),$6a.forEach(t),iTt=r(eso," \u2014 "),yde=n(eso,"A",{href:!0});var k6a=s(yde);dTt=r(k6a,"TFElectraForQuestionAnswering"),k6a.forEach(t),mTt=r(eso," (ELECTRA model)"),eso.forEach(t),cTt=i(ve),R8=n(ve,"LI",{});var oso=s(R8);yPe=n(oso,"STRONG",{});var S6a=s(yPe);fTt=r(S6a,"flaubert"),S6a.forEach(t),gTt=r(oso," \u2014 "),xde=n(oso,"A",{href:!0});var R6a=s(xde);hTt=r(R6a,"TFFlaubertForQuestionAnsweringSimple"),R6a.forEach(t),uTt=r(oso," (FlauBERT model)"),oso.forEach(t),pTt=i(ve),P8=n(ve,"LI",{});var rso=s(P8);xPe=n(rso,"STRONG",{});var P6a=s(xPe);_Tt=r(P6a,"funnel"),P6a.forEach(t),bTt=r(rso," \u2014 "),$de=n(rso,"A",{href:!0});var B6a=s($de);vTt=r(B6a,"TFFunnelForQuestionAnswering"),B6a.forEach(t),FTt=r(rso," (Funnel Transformer model)"),rso.forEach(t),TTt=i(ve),B8=n(ve,"LI",{});var tso=s(B8);$Pe=n(tso,"STRONG",{});var I6a=s($Pe);MTt=r(I6a,"gptj"),I6a.forEach(t),ETt=r(tso," \u2014 "),kde=n(tso,"A",{href:!0});var N6a=s(kde);CTt=r(N6a,"TFGPTJForQuestionAnswering"),N6a.forEach(t),wTt=r(tso," (GPT-J model)"),tso.forEach(t),ATt=i(ve),I8=n(ve,"LI",{});var aso=s(I8);kPe=n(aso,"STRONG",{});var q6a=s(kPe);LTt=r(q6a,"layoutlmv3"),q6a.forEach(t),yTt=r(aso," \u2014 "),Sde=n(aso,"A",{href:!0});var j6a=s(Sde);xTt=r(j6a,"TFLayoutLMv3ForQuestionAnswering"),j6a.forEach(t),$Tt=r(aso," (LayoutLMv3 model)"),aso.forEach(t),kTt=i(ve),N8=n(ve,"LI",{});var nso=s(N8);SPe=n(nso,"STRONG",{});var D6a=s(SPe);STt=r(D6a,"longformer"),D6a.forEach(t),RTt=r(nso," \u2014 "),Rde=n(nso,"A",{href:!0});var G6a=s(Rde);PTt=r(G6a,"TFLongformerForQuestionAnswering"),G6a.forEach(t),BTt=r(nso," (Longformer model)"),nso.forEach(t),ITt=i(ve),q8=n(ve,"LI",{});var sso=s(q8);RPe=n(sso,"STRONG",{});var O6a=s(RPe);NTt=r(O6a,"mobilebert"),O6a.forEach(t),qTt=r(sso," \u2014 "),Pde=n(sso,"A",{href:!0});var V6a=s(Pde);jTt=r(V6a,"TFMobileBertForQuestionAnswering"),V6a.forEach(t),DTt=r(sso," (MobileBERT model)"),sso.forEach(t),GTt=i(ve),j8=n(ve,"LI",{});var lso=s(j8);PPe=n(lso,"STRONG",{});var X6a=s(PPe);OTt=r(X6a,"mpnet"),X6a.forEach(t),VTt=r(lso," \u2014 "),Bde=n(lso,"A",{href:!0});var z6a=s(Bde);XTt=r(z6a,"TFMPNetForQuestionAnswering"),z6a.forEach(t),zTt=r(lso," (MPNet model)"),lso.forEach(t),QTt=i(ve),D8=n(ve,"LI",{});var iso=s(D8);BPe=n(iso,"STRONG",{});var Q6a=s(BPe);WTt=r(Q6a,"rembert"),Q6a.forEach(t),UTt=r(iso," \u2014 "),Ide=n(iso,"A",{href:!0});var W6a=s(Ide);HTt=r(W6a,"TFRemBertForQuestionAnswering"),W6a.forEach(t),JTt=r(iso," (RemBERT model)"),iso.forEach(t),YTt=i(ve),G8=n(ve,"LI",{});var dso=s(G8);IPe=n(dso,"STRONG",{});var U6a=s(IPe);ZTt=r(U6a,"roberta"),U6a.forEach(t),KTt=r(dso," \u2014 "),Nde=n(dso,"A",{href:!0});var H6a=s(Nde);eMt=r(H6a,"TFRobertaForQuestionAnswering"),H6a.forEach(t),oMt=r(dso," (RoBERTa model)"),dso.forEach(t),rMt=i(ve),O8=n(ve,"LI",{});var mso=s(O8);NPe=n(mso,"STRONG",{});var J6a=s(NPe);tMt=r(J6a,"roformer"),J6a.forEach(t),aMt=r(mso," \u2014 "),qde=n(mso,"A",{href:!0});var Y6a=s(qde);nMt=r(Y6a,"TFRoFormerForQuestionAnswering"),Y6a.forEach(t),sMt=r(mso," (RoFormer model)"),mso.forEach(t),lMt=i(ve),V8=n(ve,"LI",{});var cso=s(V8);qPe=n(cso,"STRONG",{});var Z6a=s(qPe);iMt=r(Z6a,"xlm"),Z6a.forEach(t),dMt=r(cso," \u2014 "),jde=n(cso,"A",{href:!0});var K6a=s(jde);mMt=r(K6a,"TFXLMForQuestionAnsweringSimple"),K6a.forEach(t),cMt=r(cso," (XLM model)"),cso.forEach(t),fMt=i(ve),X8=n(ve,"LI",{});var fso=s(X8);jPe=n(fso,"STRONG",{});var e7a=s(jPe);gMt=r(e7a,"xlm-roberta"),e7a.forEach(t),hMt=r(fso," \u2014 "),Dde=n(fso,"A",{href:!0});var o7a=s(Dde);uMt=r(o7a,"TFXLMRobertaForQuestionAnswering"),o7a.forEach(t),pMt=r(fso," (XLM-RoBERTa model)"),fso.forEach(t),_Mt=i(ve),z8=n(ve,"LI",{});var gso=s(z8);DPe=n(gso,"STRONG",{});var r7a=s(DPe);bMt=r(r7a,"xlnet"),r7a.forEach(t),vMt=r(gso," \u2014 "),Gde=n(gso,"A",{href:!0});var t7a=s(Gde);FMt=r(t7a,"TFXLNetForQuestionAnsweringSimple"),t7a.forEach(t),TMt=r(gso," (XLNet model)"),gso.forEach(t),ve.forEach(t),MMt=i(Zi),T(Q8.$$.fragment,Zi),Zi.forEach(t),Yi.forEach(t),mmo=i(c),mf=n(c,"H2",{class:!0});var Pfo=s(mf);W8=n(Pfo,"A",{id:!0,class:!0,href:!0});var a7a=s(W8);GPe=n(a7a,"SPAN",{});var n7a=s(GPe);T(eI.$$.fragment,n7a),n7a.forEach(t),a7a.forEach(t),EMt=i(Pfo),OPe=n(Pfo,"SPAN",{});var s7a=s(OPe);CMt=r(s7a,"TFAutoModelForVision2Seq"),s7a.forEach(t),Pfo.forEach(t),cmo=i(c),xr=n(c,"DIV",{class:!0});var Ki=s(xr);T(oI.$$.fragment,Ki),wMt=i(Ki),cf=n(Ki,"P",{});var uhe=s(cf);AMt=r(uhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ode=n(uhe,"A",{href:!0});var l7a=s(Ode);LMt=r(l7a,"from_pretrained()"),l7a.forEach(t),yMt=r(uhe," class method or the "),Vde=n(uhe,"A",{href:!0});var i7a=s(Vde);xMt=r(i7a,"from_config()"),i7a.forEach(t),$Mt=r(uhe,` class
method.`),uhe.forEach(t),kMt=i(Ki),rI=n(Ki,"P",{});var Bfo=s(rI);SMt=r(Bfo,"This class cannot be instantiated directly using "),VPe=n(Bfo,"CODE",{});var d7a=s(VPe);RMt=r(d7a,"__init__()"),d7a.forEach(t),PMt=r(Bfo," (throws an error)."),Bfo.forEach(t),BMt=i(Ki),ua=n(Ki,"DIV",{class:!0});var U$=s(ua);T(tI.$$.fragment,U$),IMt=i(U$),XPe=n(U$,"P",{});var m7a=s(XPe);NMt=r(m7a,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m7a.forEach(t),qMt=i(U$),ff=n(U$,"P",{});var phe=s(ff);jMt=r(phe,`Note:
Loading a model from its configuration file does `),zPe=n(phe,"STRONG",{});var c7a=s(zPe);DMt=r(c7a,"not"),c7a.forEach(t),GMt=r(phe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=n(phe,"A",{href:!0});var f7a=s(Xde);OMt=r(f7a,"from_pretrained()"),f7a.forEach(t),VMt=r(phe," to load the model weights."),phe.forEach(t),XMt=i(U$),T(U8.$$.fragment,U$),U$.forEach(t),zMt=i(Ki),nt=n(Ki,"DIV",{class:!0});var ed=s(nt);T(aI.$$.fragment,ed),QMt=i(ed),QPe=n(ed,"P",{});var g7a=s(QPe);WMt=r(g7a,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),g7a.forEach(t),UMt=i(ed),rs=n(ed,"P",{});var H$=s(rs);HMt=r(H$,"The model class to instantiate is selected based on the "),WPe=n(H$,"CODE",{});var h7a=s(WPe);JMt=r(h7a,"model_type"),h7a.forEach(t),YMt=r(H$,` property of the config object (either
passed as an argument or loaded from `),UPe=n(H$,"CODE",{});var u7a=s(UPe);ZMt=r(u7a,"pretrained_model_name_or_path"),u7a.forEach(t),KMt=r(H$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HPe=n(H$,"CODE",{});var p7a=s(HPe);eEt=r(p7a,"pretrained_model_name_or_path"),p7a.forEach(t),oEt=r(H$,":"),H$.forEach(t),rEt=i(ed),JPe=n(ed,"UL",{});var _7a=s(JPe);H8=n(_7a,"LI",{});var hso=s(H8);YPe=n(hso,"STRONG",{});var b7a=s(YPe);tEt=r(b7a,"vision-encoder-decoder"),b7a.forEach(t),aEt=r(hso," \u2014 "),zde=n(hso,"A",{href:!0});var v7a=s(zde);nEt=r(v7a,"TFVisionEncoderDecoderModel"),v7a.forEach(t),sEt=r(hso," (Vision Encoder decoder model)"),hso.forEach(t),_7a.forEach(t),lEt=i(ed),T(J8.$$.fragment,ed),ed.forEach(t),Ki.forEach(t),fmo=i(c),gf=n(c,"H2",{class:!0});var Ifo=s(gf);Y8=n(Ifo,"A",{id:!0,class:!0,href:!0});var F7a=s(Y8);ZPe=n(F7a,"SPAN",{});var T7a=s(ZPe);T(nI.$$.fragment,T7a),T7a.forEach(t),F7a.forEach(t),iEt=i(Ifo),KPe=n(Ifo,"SPAN",{});var M7a=s(KPe);dEt=r(M7a,"TFAutoModelForSpeechSeq2Seq"),M7a.forEach(t),Ifo.forEach(t),gmo=i(c),$r=n(c,"DIV",{class:!0});var od=s($r);T(sI.$$.fragment,od),mEt=i(od),hf=n(od,"P",{});var _he=s(hf);cEt=r(_he,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Qde=n(_he,"A",{href:!0});var E7a=s(Qde);fEt=r(E7a,"from_pretrained()"),E7a.forEach(t),gEt=r(_he," class method or the "),Wde=n(_he,"A",{href:!0});var C7a=s(Wde);hEt=r(C7a,"from_config()"),C7a.forEach(t),uEt=r(_he,` class
method.`),_he.forEach(t),pEt=i(od),lI=n(od,"P",{});var Nfo=s(lI);_Et=r(Nfo,"This class cannot be instantiated directly using "),eBe=n(Nfo,"CODE",{});var w7a=s(eBe);bEt=r(w7a,"__init__()"),w7a.forEach(t),vEt=r(Nfo," (throws an error)."),Nfo.forEach(t),FEt=i(od),pa=n(od,"DIV",{class:!0});var J$=s(pa);T(iI.$$.fragment,J$),TEt=i(J$),oBe=n(J$,"P",{});var A7a=s(oBe);MEt=r(A7a,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),A7a.forEach(t),EEt=i(J$),uf=n(J$,"P",{});var bhe=s(uf);CEt=r(bhe,`Note:
Loading a model from its configuration file does `),rBe=n(bhe,"STRONG",{});var L7a=s(rBe);wEt=r(L7a,"not"),L7a.forEach(t),AEt=r(bhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ude=n(bhe,"A",{href:!0});var y7a=s(Ude);LEt=r(y7a,"from_pretrained()"),y7a.forEach(t),yEt=r(bhe," to load the model weights."),bhe.forEach(t),xEt=i(J$),T(Z8.$$.fragment,J$),J$.forEach(t),$Et=i(od),st=n(od,"DIV",{class:!0});var rd=s(st);T(dI.$$.fragment,rd),kEt=i(rd),tBe=n(rd,"P",{});var x7a=s(tBe);SEt=r(x7a,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),x7a.forEach(t),REt=i(rd),ts=n(rd,"P",{});var Y$=s(ts);PEt=r(Y$,"The model class to instantiate is selected based on the "),aBe=n(Y$,"CODE",{});var $7a=s(aBe);BEt=r($7a,"model_type"),$7a.forEach(t),IEt=r(Y$,` property of the config object (either
passed as an argument or loaded from `),nBe=n(Y$,"CODE",{});var k7a=s(nBe);NEt=r(k7a,"pretrained_model_name_or_path"),k7a.forEach(t),qEt=r(Y$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sBe=n(Y$,"CODE",{});var S7a=s(sBe);jEt=r(S7a,"pretrained_model_name_or_path"),S7a.forEach(t),DEt=r(Y$,":"),Y$.forEach(t),GEt=i(rd),mI=n(rd,"UL",{});var qfo=s(mI);K8=n(qfo,"LI",{});var uso=s(K8);lBe=n(uso,"STRONG",{});var R7a=s(lBe);OEt=r(R7a,"speech_to_text"),R7a.forEach(t),VEt=r(uso," \u2014 "),Hde=n(uso,"A",{href:!0});var P7a=s(Hde);XEt=r(P7a,"TFSpeech2TextForConditionalGeneration"),P7a.forEach(t),zEt=r(uso," (Speech2Text model)"),uso.forEach(t),QEt=i(qfo),eL=n(qfo,"LI",{});var pso=s(eL);iBe=n(pso,"STRONG",{});var B7a=s(iBe);WEt=r(B7a,"whisper"),B7a.forEach(t),UEt=r(pso," \u2014 "),Jde=n(pso,"A",{href:!0});var I7a=s(Jde);HEt=r(I7a,"TFWhisperForConditionalGeneration"),I7a.forEach(t),JEt=r(pso," (Whisper model)"),pso.forEach(t),qfo.forEach(t),YEt=i(rd),T(oL.$$.fragment,rd),rd.forEach(t),od.forEach(t),hmo=i(c),pf=n(c,"H2",{class:!0});var jfo=s(pf);rL=n(jfo,"A",{id:!0,class:!0,href:!0});var N7a=s(rL);dBe=n(N7a,"SPAN",{});var q7a=s(dBe);T(cI.$$.fragment,q7a),q7a.forEach(t),N7a.forEach(t),ZEt=i(jfo),mBe=n(jfo,"SPAN",{});var j7a=s(mBe);KEt=r(j7a,"FlaxAutoModel"),j7a.forEach(t),jfo.forEach(t),umo=i(c),kr=n(c,"DIV",{class:!0});var td=s(kr);T(fI.$$.fragment,td),e4t=i(td),_f=n(td,"P",{});var vhe=s(_f);o4t=r(vhe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Yde=n(vhe,"A",{href:!0});var D7a=s(Yde);r4t=r(D7a,"from_pretrained()"),D7a.forEach(t),t4t=r(vhe," class method or the "),Zde=n(vhe,"A",{href:!0});var G7a=s(Zde);a4t=r(G7a,"from_config()"),G7a.forEach(t),n4t=r(vhe,` class
method.`),vhe.forEach(t),s4t=i(td),gI=n(td,"P",{});var Dfo=s(gI);l4t=r(Dfo,"This class cannot be instantiated directly using "),cBe=n(Dfo,"CODE",{});var O7a=s(cBe);i4t=r(O7a,"__init__()"),O7a.forEach(t),d4t=r(Dfo," (throws an error)."),Dfo.forEach(t),m4t=i(td),_a=n(td,"DIV",{class:!0});var Z$=s(_a);T(hI.$$.fragment,Z$),c4t=i(Z$),fBe=n(Z$,"P",{});var V7a=s(fBe);f4t=r(V7a,"Instantiates one of the base model classes of the library from a configuration."),V7a.forEach(t),g4t=i(Z$),bf=n(Z$,"P",{});var Fhe=s(bf);h4t=r(Fhe,`Note:
Loading a model from its configuration file does `),gBe=n(Fhe,"STRONG",{});var X7a=s(gBe);u4t=r(X7a,"not"),X7a.forEach(t),p4t=r(Fhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kde=n(Fhe,"A",{href:!0});var z7a=s(Kde);_4t=r(z7a,"from_pretrained()"),z7a.forEach(t),b4t=r(Fhe," to load the model weights."),Fhe.forEach(t),v4t=i(Z$),T(tL.$$.fragment,Z$),Z$.forEach(t),F4t=i(td),lt=n(td,"DIV",{class:!0});var ad=s(lt);T(uI.$$.fragment,ad),T4t=i(ad),hBe=n(ad,"P",{});var Q7a=s(hBe);M4t=r(Q7a,"Instantiate one of the base model classes of the library from a pretrained model."),Q7a.forEach(t),E4t=i(ad),as=n(ad,"P",{});var K$=s(as);C4t=r(K$,"The model class to instantiate is selected based on the "),uBe=n(K$,"CODE",{});var W7a=s(uBe);w4t=r(W7a,"model_type"),W7a.forEach(t),A4t=r(K$,` property of the config object (either
passed as an argument or loaded from `),pBe=n(K$,"CODE",{});var U7a=s(pBe);L4t=r(U7a,"pretrained_model_name_or_path"),U7a.forEach(t),y4t=r(K$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Be=n(K$,"CODE",{});var H7a=s(_Be);x4t=r(H7a,"pretrained_model_name_or_path"),H7a.forEach(t),$4t=r(K$,":"),K$.forEach(t),k4t=i(ad),ne=n(ad,"UL",{});var le=s(ne);aL=n(le,"LI",{});var _so=s(aL);bBe=n(_so,"STRONG",{});var J7a=s(bBe);S4t=r(J7a,"albert"),J7a.forEach(t),R4t=r(_so," \u2014 "),eme=n(_so,"A",{href:!0});var Y7a=s(eme);P4t=r(Y7a,"FlaxAlbertModel"),Y7a.forEach(t),B4t=r(_so," (ALBERT model)"),_so.forEach(t),I4t=i(le),nL=n(le,"LI",{});var bso=s(nL);vBe=n(bso,"STRONG",{});var Z7a=s(vBe);N4t=r(Z7a,"bart"),Z7a.forEach(t),q4t=r(bso," \u2014 "),ome=n(bso,"A",{href:!0});var K7a=s(ome);j4t=r(K7a,"FlaxBartModel"),K7a.forEach(t),D4t=r(bso," (BART model)"),bso.forEach(t),G4t=i(le),sL=n(le,"LI",{});var vso=s(sL);FBe=n(vso,"STRONG",{});var e8a=s(FBe);O4t=r(e8a,"beit"),e8a.forEach(t),V4t=r(vso," \u2014 "),rme=n(vso,"A",{href:!0});var o8a=s(rme);X4t=r(o8a,"FlaxBeitModel"),o8a.forEach(t),z4t=r(vso," (BEiT model)"),vso.forEach(t),Q4t=i(le),lL=n(le,"LI",{});var Fso=s(lL);TBe=n(Fso,"STRONG",{});var r8a=s(TBe);W4t=r(r8a,"bert"),r8a.forEach(t),U4t=r(Fso," \u2014 "),tme=n(Fso,"A",{href:!0});var t8a=s(tme);H4t=r(t8a,"FlaxBertModel"),t8a.forEach(t),J4t=r(Fso," (BERT model)"),Fso.forEach(t),Y4t=i(le),iL=n(le,"LI",{});var Tso=s(iL);MBe=n(Tso,"STRONG",{});var a8a=s(MBe);Z4t=r(a8a,"big_bird"),a8a.forEach(t),K4t=r(Tso," \u2014 "),ame=n(Tso,"A",{href:!0});var n8a=s(ame);eCt=r(n8a,"FlaxBigBirdModel"),n8a.forEach(t),oCt=r(Tso," (BigBird model)"),Tso.forEach(t),rCt=i(le),dL=n(le,"LI",{});var Mso=s(dL);EBe=n(Mso,"STRONG",{});var s8a=s(EBe);tCt=r(s8a,"blenderbot"),s8a.forEach(t),aCt=r(Mso," \u2014 "),nme=n(Mso,"A",{href:!0});var l8a=s(nme);nCt=r(l8a,"FlaxBlenderbotModel"),l8a.forEach(t),sCt=r(Mso," (Blenderbot model)"),Mso.forEach(t),lCt=i(le),mL=n(le,"LI",{});var Eso=s(mL);CBe=n(Eso,"STRONG",{});var i8a=s(CBe);iCt=r(i8a,"blenderbot-small"),i8a.forEach(t),dCt=r(Eso," \u2014 "),sme=n(Eso,"A",{href:!0});var d8a=s(sme);mCt=r(d8a,"FlaxBlenderbotSmallModel"),d8a.forEach(t),cCt=r(Eso," (BlenderbotSmall model)"),Eso.forEach(t),fCt=i(le),cL=n(le,"LI",{});var Cso=s(cL);wBe=n(Cso,"STRONG",{});var m8a=s(wBe);gCt=r(m8a,"clip"),m8a.forEach(t),hCt=r(Cso," \u2014 "),lme=n(Cso,"A",{href:!0});var c8a=s(lme);uCt=r(c8a,"FlaxCLIPModel"),c8a.forEach(t),pCt=r(Cso," (CLIP model)"),Cso.forEach(t),_Ct=i(le),fL=n(le,"LI",{});var wso=s(fL);ABe=n(wso,"STRONG",{});var f8a=s(ABe);bCt=r(f8a,"distilbert"),f8a.forEach(t),vCt=r(wso," \u2014 "),ime=n(wso,"A",{href:!0});var g8a=s(ime);FCt=r(g8a,"FlaxDistilBertModel"),g8a.forEach(t),TCt=r(wso," (DistilBERT model)"),wso.forEach(t),MCt=i(le),gL=n(le,"LI",{});var Aso=s(gL);LBe=n(Aso,"STRONG",{});var h8a=s(LBe);ECt=r(h8a,"electra"),h8a.forEach(t),CCt=r(Aso," \u2014 "),dme=n(Aso,"A",{href:!0});var u8a=s(dme);wCt=r(u8a,"FlaxElectraModel"),u8a.forEach(t),ACt=r(Aso," (ELECTRA model)"),Aso.forEach(t),LCt=i(le),hL=n(le,"LI",{});var Lso=s(hL);yBe=n(Lso,"STRONG",{});var p8a=s(yBe);yCt=r(p8a,"gpt2"),p8a.forEach(t),xCt=r(Lso," \u2014 "),mme=n(Lso,"A",{href:!0});var _8a=s(mme);$Ct=r(_8a,"FlaxGPT2Model"),_8a.forEach(t),kCt=r(Lso," (OpenAI GPT-2 model)"),Lso.forEach(t),SCt=i(le),uL=n(le,"LI",{});var yso=s(uL);xBe=n(yso,"STRONG",{});var b8a=s(xBe);RCt=r(b8a,"gpt_neo"),b8a.forEach(t),PCt=r(yso," \u2014 "),cme=n(yso,"A",{href:!0});var v8a=s(cme);BCt=r(v8a,"FlaxGPTNeoModel"),v8a.forEach(t),ICt=r(yso," (GPT Neo model)"),yso.forEach(t),NCt=i(le),pL=n(le,"LI",{});var xso=s(pL);$Be=n(xso,"STRONG",{});var F8a=s($Be);qCt=r(F8a,"gptj"),F8a.forEach(t),jCt=r(xso," \u2014 "),fme=n(xso,"A",{href:!0});var T8a=s(fme);DCt=r(T8a,"FlaxGPTJModel"),T8a.forEach(t),GCt=r(xso," (GPT-J model)"),xso.forEach(t),OCt=i(le),_L=n(le,"LI",{});var $so=s(_L);kBe=n($so,"STRONG",{});var M8a=s(kBe);VCt=r(M8a,"longt5"),M8a.forEach(t),XCt=r($so," \u2014 "),gme=n($so,"A",{href:!0});var E8a=s(gme);zCt=r(E8a,"FlaxLongT5Model"),E8a.forEach(t),QCt=r($so," (LongT5 model)"),$so.forEach(t),WCt=i(le),bL=n(le,"LI",{});var kso=s(bL);SBe=n(kso,"STRONG",{});var C8a=s(SBe);UCt=r(C8a,"marian"),C8a.forEach(t),HCt=r(kso," \u2014 "),hme=n(kso,"A",{href:!0});var w8a=s(hme);JCt=r(w8a,"FlaxMarianModel"),w8a.forEach(t),YCt=r(kso," (Marian model)"),kso.forEach(t),ZCt=i(le),vL=n(le,"LI",{});var Sso=s(vL);RBe=n(Sso,"STRONG",{});var A8a=s(RBe);KCt=r(A8a,"mbart"),A8a.forEach(t),e3t=r(Sso," \u2014 "),ume=n(Sso,"A",{href:!0});var L8a=s(ume);o3t=r(L8a,"FlaxMBartModel"),L8a.forEach(t),r3t=r(Sso," (mBART model)"),Sso.forEach(t),t3t=i(le),FL=n(le,"LI",{});var Rso=s(FL);PBe=n(Rso,"STRONG",{});var y8a=s(PBe);a3t=r(y8a,"mt5"),y8a.forEach(t),n3t=r(Rso," \u2014 "),pme=n(Rso,"A",{href:!0});var x8a=s(pme);s3t=r(x8a,"FlaxMT5Model"),x8a.forEach(t),l3t=r(Rso," (MT5 model)"),Rso.forEach(t),i3t=i(le),TL=n(le,"LI",{});var Pso=s(TL);BBe=n(Pso,"STRONG",{});var $8a=s(BBe);d3t=r($8a,"opt"),$8a.forEach(t),m3t=r(Pso," \u2014 "),_me=n(Pso,"A",{href:!0});var k8a=s(_me);c3t=r(k8a,"FlaxOPTModel"),k8a.forEach(t),f3t=r(Pso," (OPT model)"),Pso.forEach(t),g3t=i(le),ML=n(le,"LI",{});var Bso=s(ML);IBe=n(Bso,"STRONG",{});var S8a=s(IBe);h3t=r(S8a,"pegasus"),S8a.forEach(t),u3t=r(Bso," \u2014 "),bme=n(Bso,"A",{href:!0});var R8a=s(bme);p3t=r(R8a,"FlaxPegasusModel"),R8a.forEach(t),_3t=r(Bso," (Pegasus model)"),Bso.forEach(t),b3t=i(le),EL=n(le,"LI",{});var Iso=s(EL);NBe=n(Iso,"STRONG",{});var P8a=s(NBe);v3t=r(P8a,"roberta"),P8a.forEach(t),F3t=r(Iso," \u2014 "),vme=n(Iso,"A",{href:!0});var B8a=s(vme);T3t=r(B8a,"FlaxRobertaModel"),B8a.forEach(t),M3t=r(Iso," (RoBERTa model)"),Iso.forEach(t),E3t=i(le),CL=n(le,"LI",{});var Nso=s(CL);qBe=n(Nso,"STRONG",{});var I8a=s(qBe);C3t=r(I8a,"roformer"),I8a.forEach(t),w3t=r(Nso," \u2014 "),Fme=n(Nso,"A",{href:!0});var N8a=s(Fme);A3t=r(N8a,"FlaxRoFormerModel"),N8a.forEach(t),L3t=r(Nso," (RoFormer model)"),Nso.forEach(t),y3t=i(le),wL=n(le,"LI",{});var qso=s(wL);jBe=n(qso,"STRONG",{});var q8a=s(jBe);x3t=r(q8a,"t5"),q8a.forEach(t),$3t=r(qso," \u2014 "),Tme=n(qso,"A",{href:!0});var j8a=s(Tme);k3t=r(j8a,"FlaxT5Model"),j8a.forEach(t),S3t=r(qso," (T5 model)"),qso.forEach(t),R3t=i(le),AL=n(le,"LI",{});var jso=s(AL);DBe=n(jso,"STRONG",{});var D8a=s(DBe);P3t=r(D8a,"vision-text-dual-encoder"),D8a.forEach(t),B3t=r(jso," \u2014 "),Mme=n(jso,"A",{href:!0});var G8a=s(Mme);I3t=r(G8a,"FlaxVisionTextDualEncoderModel"),G8a.forEach(t),N3t=r(jso," (VisionTextDualEncoder model)"),jso.forEach(t),q3t=i(le),LL=n(le,"LI",{});var Dso=s(LL);GBe=n(Dso,"STRONG",{});var O8a=s(GBe);j3t=r(O8a,"vit"),O8a.forEach(t),D3t=r(Dso," \u2014 "),Eme=n(Dso,"A",{href:!0});var V8a=s(Eme);G3t=r(V8a,"FlaxViTModel"),V8a.forEach(t),O3t=r(Dso," (ViT model)"),Dso.forEach(t),V3t=i(le),yL=n(le,"LI",{});var Gso=s(yL);OBe=n(Gso,"STRONG",{});var X8a=s(OBe);X3t=r(X8a,"wav2vec2"),X8a.forEach(t),z3t=r(Gso," \u2014 "),Cme=n(Gso,"A",{href:!0});var z8a=s(Cme);Q3t=r(z8a,"FlaxWav2Vec2Model"),z8a.forEach(t),W3t=r(Gso," (Wav2Vec2 model)"),Gso.forEach(t),U3t=i(le),xL=n(le,"LI",{});var Oso=s(xL);VBe=n(Oso,"STRONG",{});var Q8a=s(VBe);H3t=r(Q8a,"xglm"),Q8a.forEach(t),J3t=r(Oso," \u2014 "),wme=n(Oso,"A",{href:!0});var W8a=s(wme);Y3t=r(W8a,"FlaxXGLMModel"),W8a.forEach(t),Z3t=r(Oso," (XGLM model)"),Oso.forEach(t),K3t=i(le),$L=n(le,"LI",{});var Vso=s($L);XBe=n(Vso,"STRONG",{});var U8a=s(XBe);e5t=r(U8a,"xlm-roberta"),U8a.forEach(t),o5t=r(Vso," \u2014 "),Ame=n(Vso,"A",{href:!0});var H8a=s(Ame);r5t=r(H8a,"FlaxXLMRobertaModel"),H8a.forEach(t),t5t=r(Vso," (XLM-RoBERTa model)"),Vso.forEach(t),le.forEach(t),a5t=i(ad),T(kL.$$.fragment,ad),ad.forEach(t),td.forEach(t),pmo=i(c),vf=n(c,"H2",{class:!0});var Gfo=s(vf);SL=n(Gfo,"A",{id:!0,class:!0,href:!0});var J8a=s(SL);zBe=n(J8a,"SPAN",{});var Y8a=s(zBe);T(pI.$$.fragment,Y8a),Y8a.forEach(t),J8a.forEach(t),n5t=i(Gfo),QBe=n(Gfo,"SPAN",{});var Z8a=s(QBe);s5t=r(Z8a,"FlaxAutoModelForCausalLM"),Z8a.forEach(t),Gfo.forEach(t),_mo=i(c),Sr=n(c,"DIV",{class:!0});var nd=s(Sr);T(_I.$$.fragment,nd),l5t=i(nd),Ff=n(nd,"P",{});var The=s(Ff);i5t=r(The,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Lme=n(The,"A",{href:!0});var K8a=s(Lme);d5t=r(K8a,"from_pretrained()"),K8a.forEach(t),m5t=r(The," class method or the "),yme=n(The,"A",{href:!0});var eLa=s(yme);c5t=r(eLa,"from_config()"),eLa.forEach(t),f5t=r(The,` class
method.`),The.forEach(t),g5t=i(nd),bI=n(nd,"P",{});var Ofo=s(bI);h5t=r(Ofo,"This class cannot be instantiated directly using "),WBe=n(Ofo,"CODE",{});var oLa=s(WBe);u5t=r(oLa,"__init__()"),oLa.forEach(t),p5t=r(Ofo," (throws an error)."),Ofo.forEach(t),_5t=i(nd),ba=n(nd,"DIV",{class:!0});var ek=s(ba);T(vI.$$.fragment,ek),b5t=i(ek),UBe=n(ek,"P",{});var rLa=s(UBe);v5t=r(rLa,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rLa.forEach(t),F5t=i(ek),Tf=n(ek,"P",{});var Mhe=s(Tf);T5t=r(Mhe,`Note:
Loading a model from its configuration file does `),HBe=n(Mhe,"STRONG",{});var tLa=s(HBe);M5t=r(tLa,"not"),tLa.forEach(t),E5t=r(Mhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xme=n(Mhe,"A",{href:!0});var aLa=s(xme);C5t=r(aLa,"from_pretrained()"),aLa.forEach(t),w5t=r(Mhe," to load the model weights."),Mhe.forEach(t),A5t=i(ek),T(RL.$$.fragment,ek),ek.forEach(t),L5t=i(nd),it=n(nd,"DIV",{class:!0});var sd=s(it);T(FI.$$.fragment,sd),y5t=i(sd),JBe=n(sd,"P",{});var nLa=s(JBe);x5t=r(nLa,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nLa.forEach(t),$5t=i(sd),ns=n(sd,"P",{});var ok=s(ns);k5t=r(ok,"The model class to instantiate is selected based on the "),YBe=n(ok,"CODE",{});var sLa=s(YBe);S5t=r(sLa,"model_type"),sLa.forEach(t),R5t=r(ok,` property of the config object (either
passed as an argument or loaded from `),ZBe=n(ok,"CODE",{});var lLa=s(ZBe);P5t=r(lLa,"pretrained_model_name_or_path"),lLa.forEach(t),B5t=r(ok,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KBe=n(ok,"CODE",{});var iLa=s(KBe);I5t=r(iLa,"pretrained_model_name_or_path"),iLa.forEach(t),N5t=r(ok,":"),ok.forEach(t),q5t=i(sd),Se=n(sd,"UL",{});var Ge=s(Se);PL=n(Ge,"LI",{});var Xso=s(PL);eIe=n(Xso,"STRONG",{});var dLa=s(eIe);j5t=r(dLa,"bart"),dLa.forEach(t),D5t=r(Xso," \u2014 "),$me=n(Xso,"A",{href:!0});var mLa=s($me);G5t=r(mLa,"FlaxBartForCausalLM"),mLa.forEach(t),O5t=r(Xso," (BART model)"),Xso.forEach(t),V5t=i(Ge),BL=n(Ge,"LI",{});var zso=s(BL);oIe=n(zso,"STRONG",{});var cLa=s(oIe);X5t=r(cLa,"bert"),cLa.forEach(t),z5t=r(zso," \u2014 "),kme=n(zso,"A",{href:!0});var fLa=s(kme);Q5t=r(fLa,"FlaxBertForCausalLM"),fLa.forEach(t),W5t=r(zso," (BERT model)"),zso.forEach(t),U5t=i(Ge),IL=n(Ge,"LI",{});var Qso=s(IL);rIe=n(Qso,"STRONG",{});var gLa=s(rIe);H5t=r(gLa,"big_bird"),gLa.forEach(t),J5t=r(Qso," \u2014 "),Sme=n(Qso,"A",{href:!0});var hLa=s(Sme);Y5t=r(hLa,"FlaxBigBirdForCausalLM"),hLa.forEach(t),Z5t=r(Qso," (BigBird model)"),Qso.forEach(t),K5t=i(Ge),NL=n(Ge,"LI",{});var Wso=s(NL);tIe=n(Wso,"STRONG",{});var uLa=s(tIe);e0t=r(uLa,"electra"),uLa.forEach(t),o0t=r(Wso," \u2014 "),Rme=n(Wso,"A",{href:!0});var pLa=s(Rme);r0t=r(pLa,"FlaxElectraForCausalLM"),pLa.forEach(t),t0t=r(Wso," (ELECTRA model)"),Wso.forEach(t),a0t=i(Ge),qL=n(Ge,"LI",{});var Uso=s(qL);aIe=n(Uso,"STRONG",{});var _La=s(aIe);n0t=r(_La,"gpt2"),_La.forEach(t),s0t=r(Uso," \u2014 "),Pme=n(Uso,"A",{href:!0});var bLa=s(Pme);l0t=r(bLa,"FlaxGPT2LMHeadModel"),bLa.forEach(t),i0t=r(Uso," (OpenAI GPT-2 model)"),Uso.forEach(t),d0t=i(Ge),jL=n(Ge,"LI",{});var Hso=s(jL);nIe=n(Hso,"STRONG",{});var vLa=s(nIe);m0t=r(vLa,"gpt_neo"),vLa.forEach(t),c0t=r(Hso," \u2014 "),Bme=n(Hso,"A",{href:!0});var FLa=s(Bme);f0t=r(FLa,"FlaxGPTNeoForCausalLM"),FLa.forEach(t),g0t=r(Hso," (GPT Neo model)"),Hso.forEach(t),h0t=i(Ge),DL=n(Ge,"LI",{});var Jso=s(DL);sIe=n(Jso,"STRONG",{});var TLa=s(sIe);u0t=r(TLa,"gptj"),TLa.forEach(t),p0t=r(Jso," \u2014 "),Ime=n(Jso,"A",{href:!0});var MLa=s(Ime);_0t=r(MLa,"FlaxGPTJForCausalLM"),MLa.forEach(t),b0t=r(Jso," (GPT-J model)"),Jso.forEach(t),v0t=i(Ge),GL=n(Ge,"LI",{});var Yso=s(GL);lIe=n(Yso,"STRONG",{});var ELa=s(lIe);F0t=r(ELa,"opt"),ELa.forEach(t),T0t=r(Yso," \u2014 "),Nme=n(Yso,"A",{href:!0});var CLa=s(Nme);M0t=r(CLa,"FlaxOPTForCausalLM"),CLa.forEach(t),E0t=r(Yso," (OPT model)"),Yso.forEach(t),C0t=i(Ge),OL=n(Ge,"LI",{});var Zso=s(OL);iIe=n(Zso,"STRONG",{});var wLa=s(iIe);w0t=r(wLa,"roberta"),wLa.forEach(t),A0t=r(Zso," \u2014 "),qme=n(Zso,"A",{href:!0});var ALa=s(qme);L0t=r(ALa,"FlaxRobertaForCausalLM"),ALa.forEach(t),y0t=r(Zso," (RoBERTa model)"),Zso.forEach(t),x0t=i(Ge),VL=n(Ge,"LI",{});var Kso=s(VL);dIe=n(Kso,"STRONG",{});var LLa=s(dIe);$0t=r(LLa,"xglm"),LLa.forEach(t),k0t=r(Kso," \u2014 "),jme=n(Kso,"A",{href:!0});var yLa=s(jme);S0t=r(yLa,"FlaxXGLMForCausalLM"),yLa.forEach(t),R0t=r(Kso," (XGLM model)"),Kso.forEach(t),Ge.forEach(t),P0t=i(sd),T(XL.$$.fragment,sd),sd.forEach(t),nd.forEach(t),bmo=i(c),Mf=n(c,"H2",{class:!0});var Vfo=s(Mf);zL=n(Vfo,"A",{id:!0,class:!0,href:!0});var xLa=s(zL);mIe=n(xLa,"SPAN",{});var $La=s(mIe);T(TI.$$.fragment,$La),$La.forEach(t),xLa.forEach(t),B0t=i(Vfo),cIe=n(Vfo,"SPAN",{});var kLa=s(cIe);I0t=r(kLa,"FlaxAutoModelForPreTraining"),kLa.forEach(t),Vfo.forEach(t),vmo=i(c),Rr=n(c,"DIV",{class:!0});var ld=s(Rr);T(MI.$$.fragment,ld),N0t=i(ld),Ef=n(ld,"P",{});var Ehe=s(Ef);q0t=r(Ehe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dme=n(Ehe,"A",{href:!0});var SLa=s(Dme);j0t=r(SLa,"from_pretrained()"),SLa.forEach(t),D0t=r(Ehe," class method or the "),Gme=n(Ehe,"A",{href:!0});var RLa=s(Gme);G0t=r(RLa,"from_config()"),RLa.forEach(t),O0t=r(Ehe,` class
method.`),Ehe.forEach(t),V0t=i(ld),EI=n(ld,"P",{});var Xfo=s(EI);X0t=r(Xfo,"This class cannot be instantiated directly using "),fIe=n(Xfo,"CODE",{});var PLa=s(fIe);z0t=r(PLa,"__init__()"),PLa.forEach(t),Q0t=r(Xfo," (throws an error)."),Xfo.forEach(t),W0t=i(ld),va=n(ld,"DIV",{class:!0});var rk=s(va);T(CI.$$.fragment,rk),U0t=i(rk),gIe=n(rk,"P",{});var BLa=s(gIe);H0t=r(BLa,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),BLa.forEach(t),J0t=i(rk),Cf=n(rk,"P",{});var Che=s(Cf);Y0t=r(Che,`Note:
Loading a model from its configuration file does `),hIe=n(Che,"STRONG",{});var ILa=s(hIe);Z0t=r(ILa,"not"),ILa.forEach(t),K0t=r(Che,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ome=n(Che,"A",{href:!0});var NLa=s(Ome);ewt=r(NLa,"from_pretrained()"),NLa.forEach(t),owt=r(Che," to load the model weights."),Che.forEach(t),rwt=i(rk),T(QL.$$.fragment,rk),rk.forEach(t),twt=i(ld),dt=n(ld,"DIV",{class:!0});var id=s(dt);T(wI.$$.fragment,id),awt=i(id),uIe=n(id,"P",{});var qLa=s(uIe);nwt=r(qLa,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qLa.forEach(t),swt=i(id),ss=n(id,"P",{});var tk=s(ss);lwt=r(tk,"The model class to instantiate is selected based on the "),pIe=n(tk,"CODE",{});var jLa=s(pIe);iwt=r(jLa,"model_type"),jLa.forEach(t),dwt=r(tk,` property of the config object (either
passed as an argument or loaded from `),_Ie=n(tk,"CODE",{});var DLa=s(_Ie);mwt=r(DLa,"pretrained_model_name_or_path"),DLa.forEach(t),cwt=r(tk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bIe=n(tk,"CODE",{});var GLa=s(bIe);fwt=r(GLa,"pretrained_model_name_or_path"),GLa.forEach(t),gwt=r(tk,":"),tk.forEach(t),hwt=i(id),we=n(id,"UL",{});var Le=s(we);WL=n(Le,"LI",{});var elo=s(WL);vIe=n(elo,"STRONG",{});var OLa=s(vIe);uwt=r(OLa,"albert"),OLa.forEach(t),pwt=r(elo," \u2014 "),Vme=n(elo,"A",{href:!0});var VLa=s(Vme);_wt=r(VLa,"FlaxAlbertForPreTraining"),VLa.forEach(t),bwt=r(elo," (ALBERT model)"),elo.forEach(t),vwt=i(Le),UL=n(Le,"LI",{});var olo=s(UL);FIe=n(olo,"STRONG",{});var XLa=s(FIe);Fwt=r(XLa,"bart"),XLa.forEach(t),Twt=r(olo," \u2014 "),Xme=n(olo,"A",{href:!0});var zLa=s(Xme);Mwt=r(zLa,"FlaxBartForConditionalGeneration"),zLa.forEach(t),Ewt=r(olo," (BART model)"),olo.forEach(t),Cwt=i(Le),HL=n(Le,"LI",{});var rlo=s(HL);TIe=n(rlo,"STRONG",{});var QLa=s(TIe);wwt=r(QLa,"bert"),QLa.forEach(t),Awt=r(rlo," \u2014 "),zme=n(rlo,"A",{href:!0});var WLa=s(zme);Lwt=r(WLa,"FlaxBertForPreTraining"),WLa.forEach(t),ywt=r(rlo," (BERT model)"),rlo.forEach(t),xwt=i(Le),JL=n(Le,"LI",{});var tlo=s(JL);MIe=n(tlo,"STRONG",{});var ULa=s(MIe);$wt=r(ULa,"big_bird"),ULa.forEach(t),kwt=r(tlo," \u2014 "),Qme=n(tlo,"A",{href:!0});var HLa=s(Qme);Swt=r(HLa,"FlaxBigBirdForPreTraining"),HLa.forEach(t),Rwt=r(tlo," (BigBird model)"),tlo.forEach(t),Pwt=i(Le),YL=n(Le,"LI",{});var alo=s(YL);EIe=n(alo,"STRONG",{});var JLa=s(EIe);Bwt=r(JLa,"electra"),JLa.forEach(t),Iwt=r(alo," \u2014 "),Wme=n(alo,"A",{href:!0});var YLa=s(Wme);Nwt=r(YLa,"FlaxElectraForPreTraining"),YLa.forEach(t),qwt=r(alo," (ELECTRA model)"),alo.forEach(t),jwt=i(Le),ZL=n(Le,"LI",{});var nlo=s(ZL);CIe=n(nlo,"STRONG",{});var ZLa=s(CIe);Dwt=r(ZLa,"longt5"),ZLa.forEach(t),Gwt=r(nlo," \u2014 "),Ume=n(nlo,"A",{href:!0});var KLa=s(Ume);Owt=r(KLa,"FlaxLongT5ForConditionalGeneration"),KLa.forEach(t),Vwt=r(nlo," (LongT5 model)"),nlo.forEach(t),Xwt=i(Le),KL=n(Le,"LI",{});var slo=s(KL);wIe=n(slo,"STRONG",{});var eya=s(wIe);zwt=r(eya,"mbart"),eya.forEach(t),Qwt=r(slo," \u2014 "),Hme=n(slo,"A",{href:!0});var oya=s(Hme);Wwt=r(oya,"FlaxMBartForConditionalGeneration"),oya.forEach(t),Uwt=r(slo," (mBART model)"),slo.forEach(t),Hwt=i(Le),ey=n(Le,"LI",{});var llo=s(ey);AIe=n(llo,"STRONG",{});var rya=s(AIe);Jwt=r(rya,"mt5"),rya.forEach(t),Ywt=r(llo," \u2014 "),Jme=n(llo,"A",{href:!0});var tya=s(Jme);Zwt=r(tya,"FlaxMT5ForConditionalGeneration"),tya.forEach(t),Kwt=r(llo," (MT5 model)"),llo.forEach(t),eAt=i(Le),oy=n(Le,"LI",{});var ilo=s(oy);LIe=n(ilo,"STRONG",{});var aya=s(LIe);oAt=r(aya,"roberta"),aya.forEach(t),rAt=r(ilo," \u2014 "),Yme=n(ilo,"A",{href:!0});var nya=s(Yme);tAt=r(nya,"FlaxRobertaForMaskedLM"),nya.forEach(t),aAt=r(ilo," (RoBERTa model)"),ilo.forEach(t),nAt=i(Le),ry=n(Le,"LI",{});var dlo=s(ry);yIe=n(dlo,"STRONG",{});var sya=s(yIe);sAt=r(sya,"roformer"),sya.forEach(t),lAt=r(dlo," \u2014 "),Zme=n(dlo,"A",{href:!0});var lya=s(Zme);iAt=r(lya,"FlaxRoFormerForMaskedLM"),lya.forEach(t),dAt=r(dlo," (RoFormer model)"),dlo.forEach(t),mAt=i(Le),ty=n(Le,"LI",{});var mlo=s(ty);xIe=n(mlo,"STRONG",{});var iya=s(xIe);cAt=r(iya,"t5"),iya.forEach(t),fAt=r(mlo," \u2014 "),Kme=n(mlo,"A",{href:!0});var dya=s(Kme);gAt=r(dya,"FlaxT5ForConditionalGeneration"),dya.forEach(t),hAt=r(mlo," (T5 model)"),mlo.forEach(t),uAt=i(Le),ay=n(Le,"LI",{});var clo=s(ay);$Ie=n(clo,"STRONG",{});var mya=s($Ie);pAt=r(mya,"wav2vec2"),mya.forEach(t),_At=r(clo," \u2014 "),ece=n(clo,"A",{href:!0});var cya=s(ece);bAt=r(cya,"FlaxWav2Vec2ForPreTraining"),cya.forEach(t),vAt=r(clo," (Wav2Vec2 model)"),clo.forEach(t),FAt=i(Le),ny=n(Le,"LI",{});var flo=s(ny);kIe=n(flo,"STRONG",{});var fya=s(kIe);TAt=r(fya,"xlm-roberta"),fya.forEach(t),MAt=r(flo," \u2014 "),oce=n(flo,"A",{href:!0});var gya=s(oce);EAt=r(gya,"FlaxXLMRobertaForMaskedLM"),gya.forEach(t),CAt=r(flo," (XLM-RoBERTa model)"),flo.forEach(t),Le.forEach(t),wAt=i(id),T(sy.$$.fragment,id),id.forEach(t),ld.forEach(t),Fmo=i(c),wf=n(c,"H2",{class:!0});var zfo=s(wf);ly=n(zfo,"A",{id:!0,class:!0,href:!0});var hya=s(ly);SIe=n(hya,"SPAN",{});var uya=s(SIe);T(AI.$$.fragment,uya),uya.forEach(t),hya.forEach(t),AAt=i(zfo),RIe=n(zfo,"SPAN",{});var pya=s(RIe);LAt=r(pya,"FlaxAutoModelForMaskedLM"),pya.forEach(t),zfo.forEach(t),Tmo=i(c),Pr=n(c,"DIV",{class:!0});var dd=s(Pr);T(LI.$$.fragment,dd),yAt=i(dd),Af=n(dd,"P",{});var whe=s(Af);xAt=r(whe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rce=n(whe,"A",{href:!0});var _ya=s(rce);$At=r(_ya,"from_pretrained()"),_ya.forEach(t),kAt=r(whe," class method or the "),tce=n(whe,"A",{href:!0});var bya=s(tce);SAt=r(bya,"from_config()"),bya.forEach(t),RAt=r(whe,` class
method.`),whe.forEach(t),PAt=i(dd),yI=n(dd,"P",{});var Qfo=s(yI);BAt=r(Qfo,"This class cannot be instantiated directly using "),PIe=n(Qfo,"CODE",{});var vya=s(PIe);IAt=r(vya,"__init__()"),vya.forEach(t),NAt=r(Qfo," (throws an error)."),Qfo.forEach(t),qAt=i(dd),Fa=n(dd,"DIV",{class:!0});var ak=s(Fa);T(xI.$$.fragment,ak),jAt=i(ak),BIe=n(ak,"P",{});var Fya=s(BIe);DAt=r(Fya,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Fya.forEach(t),GAt=i(ak),Lf=n(ak,"P",{});var Ahe=s(Lf);OAt=r(Ahe,`Note:
Loading a model from its configuration file does `),IIe=n(Ahe,"STRONG",{});var Tya=s(IIe);VAt=r(Tya,"not"),Tya.forEach(t),XAt=r(Ahe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ace=n(Ahe,"A",{href:!0});var Mya=s(ace);zAt=r(Mya,"from_pretrained()"),Mya.forEach(t),QAt=r(Ahe," to load the model weights."),Ahe.forEach(t),WAt=i(ak),T(iy.$$.fragment,ak),ak.forEach(t),UAt=i(dd),mt=n(dd,"DIV",{class:!0});var md=s(mt);T($I.$$.fragment,md),HAt=i(md),NIe=n(md,"P",{});var Eya=s(NIe);JAt=r(Eya,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Eya.forEach(t),YAt=i(md),ls=n(md,"P",{});var nk=s(ls);ZAt=r(nk,"The model class to instantiate is selected based on the "),qIe=n(nk,"CODE",{});var Cya=s(qIe);KAt=r(Cya,"model_type"),Cya.forEach(t),e6t=r(nk,` property of the config object (either
passed as an argument or loaded from `),jIe=n(nk,"CODE",{});var wya=s(jIe);o6t=r(wya,"pretrained_model_name_or_path"),wya.forEach(t),r6t=r(nk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DIe=n(nk,"CODE",{});var Aya=s(DIe);t6t=r(Aya,"pretrained_model_name_or_path"),Aya.forEach(t),a6t=r(nk,":"),nk.forEach(t),n6t=i(md),Re=n(md,"UL",{});var Oe=s(Re);dy=n(Oe,"LI",{});var glo=s(dy);GIe=n(glo,"STRONG",{});var Lya=s(GIe);s6t=r(Lya,"albert"),Lya.forEach(t),l6t=r(glo," \u2014 "),nce=n(glo,"A",{href:!0});var yya=s(nce);i6t=r(yya,"FlaxAlbertForMaskedLM"),yya.forEach(t),d6t=r(glo," (ALBERT model)"),glo.forEach(t),m6t=i(Oe),my=n(Oe,"LI",{});var hlo=s(my);OIe=n(hlo,"STRONG",{});var xya=s(OIe);c6t=r(xya,"bart"),xya.forEach(t),f6t=r(hlo," \u2014 "),sce=n(hlo,"A",{href:!0});var $ya=s(sce);g6t=r($ya,"FlaxBartForConditionalGeneration"),$ya.forEach(t),h6t=r(hlo," (BART model)"),hlo.forEach(t),u6t=i(Oe),cy=n(Oe,"LI",{});var ulo=s(cy);VIe=n(ulo,"STRONG",{});var kya=s(VIe);p6t=r(kya,"bert"),kya.forEach(t),_6t=r(ulo," \u2014 "),lce=n(ulo,"A",{href:!0});var Sya=s(lce);b6t=r(Sya,"FlaxBertForMaskedLM"),Sya.forEach(t),v6t=r(ulo," (BERT model)"),ulo.forEach(t),F6t=i(Oe),fy=n(Oe,"LI",{});var plo=s(fy);XIe=n(plo,"STRONG",{});var Rya=s(XIe);T6t=r(Rya,"big_bird"),Rya.forEach(t),M6t=r(plo," \u2014 "),ice=n(plo,"A",{href:!0});var Pya=s(ice);E6t=r(Pya,"FlaxBigBirdForMaskedLM"),Pya.forEach(t),C6t=r(plo," (BigBird model)"),plo.forEach(t),w6t=i(Oe),gy=n(Oe,"LI",{});var _lo=s(gy);zIe=n(_lo,"STRONG",{});var Bya=s(zIe);A6t=r(Bya,"distilbert"),Bya.forEach(t),L6t=r(_lo," \u2014 "),dce=n(_lo,"A",{href:!0});var Iya=s(dce);y6t=r(Iya,"FlaxDistilBertForMaskedLM"),Iya.forEach(t),x6t=r(_lo," (DistilBERT model)"),_lo.forEach(t),$6t=i(Oe),hy=n(Oe,"LI",{});var blo=s(hy);QIe=n(blo,"STRONG",{});var Nya=s(QIe);k6t=r(Nya,"electra"),Nya.forEach(t),S6t=r(blo," \u2014 "),mce=n(blo,"A",{href:!0});var qya=s(mce);R6t=r(qya,"FlaxElectraForMaskedLM"),qya.forEach(t),P6t=r(blo," (ELECTRA model)"),blo.forEach(t),B6t=i(Oe),uy=n(Oe,"LI",{});var vlo=s(uy);WIe=n(vlo,"STRONG",{});var jya=s(WIe);I6t=r(jya,"mbart"),jya.forEach(t),N6t=r(vlo," \u2014 "),cce=n(vlo,"A",{href:!0});var Dya=s(cce);q6t=r(Dya,"FlaxMBartForConditionalGeneration"),Dya.forEach(t),j6t=r(vlo," (mBART model)"),vlo.forEach(t),D6t=i(Oe),py=n(Oe,"LI",{});var Flo=s(py);UIe=n(Flo,"STRONG",{});var Gya=s(UIe);G6t=r(Gya,"roberta"),Gya.forEach(t),O6t=r(Flo," \u2014 "),fce=n(Flo,"A",{href:!0});var Oya=s(fce);V6t=r(Oya,"FlaxRobertaForMaskedLM"),Oya.forEach(t),X6t=r(Flo," (RoBERTa model)"),Flo.forEach(t),z6t=i(Oe),_y=n(Oe,"LI",{});var Tlo=s(_y);HIe=n(Tlo,"STRONG",{});var Vya=s(HIe);Q6t=r(Vya,"roformer"),Vya.forEach(t),W6t=r(Tlo," \u2014 "),gce=n(Tlo,"A",{href:!0});var Xya=s(gce);U6t=r(Xya,"FlaxRoFormerForMaskedLM"),Xya.forEach(t),H6t=r(Tlo," (RoFormer model)"),Tlo.forEach(t),J6t=i(Oe),by=n(Oe,"LI",{});var Mlo=s(by);JIe=n(Mlo,"STRONG",{});var zya=s(JIe);Y6t=r(zya,"xlm-roberta"),zya.forEach(t),Z6t=r(Mlo," \u2014 "),hce=n(Mlo,"A",{href:!0});var Qya=s(hce);K6t=r(Qya,"FlaxXLMRobertaForMaskedLM"),Qya.forEach(t),e7t=r(Mlo," (XLM-RoBERTa model)"),Mlo.forEach(t),Oe.forEach(t),o7t=i(md),T(vy.$$.fragment,md),md.forEach(t),dd.forEach(t),Mmo=i(c),yf=n(c,"H2",{class:!0});var Wfo=s(yf);Fy=n(Wfo,"A",{id:!0,class:!0,href:!0});var Wya=s(Fy);YIe=n(Wya,"SPAN",{});var Uya=s(YIe);T(kI.$$.fragment,Uya),Uya.forEach(t),Wya.forEach(t),r7t=i(Wfo),ZIe=n(Wfo,"SPAN",{});var Hya=s(ZIe);t7t=r(Hya,"FlaxAutoModelForSeq2SeqLM"),Hya.forEach(t),Wfo.forEach(t),Emo=i(c),Br=n(c,"DIV",{class:!0});var cd=s(Br);T(SI.$$.fragment,cd),a7t=i(cd),xf=n(cd,"P",{});var Lhe=s(xf);n7t=r(Lhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uce=n(Lhe,"A",{href:!0});var Jya=s(uce);s7t=r(Jya,"from_pretrained()"),Jya.forEach(t),l7t=r(Lhe," class method or the "),pce=n(Lhe,"A",{href:!0});var Yya=s(pce);i7t=r(Yya,"from_config()"),Yya.forEach(t),d7t=r(Lhe,` class
method.`),Lhe.forEach(t),m7t=i(cd),RI=n(cd,"P",{});var Ufo=s(RI);c7t=r(Ufo,"This class cannot be instantiated directly using "),KIe=n(Ufo,"CODE",{});var Zya=s(KIe);f7t=r(Zya,"__init__()"),Zya.forEach(t),g7t=r(Ufo," (throws an error)."),Ufo.forEach(t),h7t=i(cd),Ta=n(cd,"DIV",{class:!0});var sk=s(Ta);T(PI.$$.fragment,sk),u7t=i(sk),eNe=n(sk,"P",{});var Kya=s(eNe);p7t=r(Kya,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Kya.forEach(t),_7t=i(sk),$f=n(sk,"P",{});var yhe=s($f);b7t=r(yhe,`Note:
Loading a model from its configuration file does `),oNe=n(yhe,"STRONG",{});var e9a=s(oNe);v7t=r(e9a,"not"),e9a.forEach(t),F7t=r(yhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ce=n(yhe,"A",{href:!0});var o9a=s(_ce);T7t=r(o9a,"from_pretrained()"),o9a.forEach(t),M7t=r(yhe," to load the model weights."),yhe.forEach(t),E7t=i(sk),T(Ty.$$.fragment,sk),sk.forEach(t),C7t=i(cd),ct=n(cd,"DIV",{class:!0});var fd=s(ct);T(BI.$$.fragment,fd),w7t=i(fd),rNe=n(fd,"P",{});var r9a=s(rNe);A7t=r(r9a,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),r9a.forEach(t),L7t=i(fd),is=n(fd,"P",{});var lk=s(is);y7t=r(lk,"The model class to instantiate is selected based on the "),tNe=n(lk,"CODE",{});var t9a=s(tNe);x7t=r(t9a,"model_type"),t9a.forEach(t),$7t=r(lk,` property of the config object (either
passed as an argument or loaded from `),aNe=n(lk,"CODE",{});var a9a=s(aNe);k7t=r(a9a,"pretrained_model_name_or_path"),a9a.forEach(t),S7t=r(lk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nNe=n(lk,"CODE",{});var n9a=s(nNe);R7t=r(n9a,"pretrained_model_name_or_path"),n9a.forEach(t),P7t=r(lk,":"),lk.forEach(t),B7t=i(fd),Pe=n(fd,"UL",{});var Ve=s(Pe);My=n(Ve,"LI",{});var Elo=s(My);sNe=n(Elo,"STRONG",{});var s9a=s(sNe);I7t=r(s9a,"bart"),s9a.forEach(t),N7t=r(Elo," \u2014 "),bce=n(Elo,"A",{href:!0});var l9a=s(bce);q7t=r(l9a,"FlaxBartForConditionalGeneration"),l9a.forEach(t),j7t=r(Elo," (BART model)"),Elo.forEach(t),D7t=i(Ve),Ey=n(Ve,"LI",{});var Clo=s(Ey);lNe=n(Clo,"STRONG",{});var i9a=s(lNe);G7t=r(i9a,"blenderbot"),i9a.forEach(t),O7t=r(Clo," \u2014 "),vce=n(Clo,"A",{href:!0});var d9a=s(vce);V7t=r(d9a,"FlaxBlenderbotForConditionalGeneration"),d9a.forEach(t),X7t=r(Clo," (Blenderbot model)"),Clo.forEach(t),z7t=i(Ve),Cy=n(Ve,"LI",{});var wlo=s(Cy);iNe=n(wlo,"STRONG",{});var m9a=s(iNe);Q7t=r(m9a,"blenderbot-small"),m9a.forEach(t),W7t=r(wlo," \u2014 "),Fce=n(wlo,"A",{href:!0});var c9a=s(Fce);U7t=r(c9a,"FlaxBlenderbotSmallForConditionalGeneration"),c9a.forEach(t),H7t=r(wlo," (BlenderbotSmall model)"),wlo.forEach(t),J7t=i(Ve),wy=n(Ve,"LI",{});var Alo=s(wy);dNe=n(Alo,"STRONG",{});var f9a=s(dNe);Y7t=r(f9a,"encoder-decoder"),f9a.forEach(t),Z7t=r(Alo," \u2014 "),Tce=n(Alo,"A",{href:!0});var g9a=s(Tce);K7t=r(g9a,"FlaxEncoderDecoderModel"),g9a.forEach(t),e8t=r(Alo," (Encoder decoder model)"),Alo.forEach(t),o8t=i(Ve),Ay=n(Ve,"LI",{});var Llo=s(Ay);mNe=n(Llo,"STRONG",{});var h9a=s(mNe);r8t=r(h9a,"longt5"),h9a.forEach(t),t8t=r(Llo," \u2014 "),Mce=n(Llo,"A",{href:!0});var u9a=s(Mce);a8t=r(u9a,"FlaxLongT5ForConditionalGeneration"),u9a.forEach(t),n8t=r(Llo," (LongT5 model)"),Llo.forEach(t),s8t=i(Ve),Ly=n(Ve,"LI",{});var ylo=s(Ly);cNe=n(ylo,"STRONG",{});var p9a=s(cNe);l8t=r(p9a,"marian"),p9a.forEach(t),i8t=r(ylo," \u2014 "),Ece=n(ylo,"A",{href:!0});var _9a=s(Ece);d8t=r(_9a,"FlaxMarianMTModel"),_9a.forEach(t),m8t=r(ylo," (Marian model)"),ylo.forEach(t),c8t=i(Ve),yy=n(Ve,"LI",{});var xlo=s(yy);fNe=n(xlo,"STRONG",{});var b9a=s(fNe);f8t=r(b9a,"mbart"),b9a.forEach(t),g8t=r(xlo," \u2014 "),Cce=n(xlo,"A",{href:!0});var v9a=s(Cce);h8t=r(v9a,"FlaxMBartForConditionalGeneration"),v9a.forEach(t),u8t=r(xlo," (mBART model)"),xlo.forEach(t),p8t=i(Ve),xy=n(Ve,"LI",{});var $lo=s(xy);gNe=n($lo,"STRONG",{});var F9a=s(gNe);_8t=r(F9a,"mt5"),F9a.forEach(t),b8t=r($lo," \u2014 "),wce=n($lo,"A",{href:!0});var T9a=s(wce);v8t=r(T9a,"FlaxMT5ForConditionalGeneration"),T9a.forEach(t),F8t=r($lo," (MT5 model)"),$lo.forEach(t),T8t=i(Ve),$y=n(Ve,"LI",{});var klo=s($y);hNe=n(klo,"STRONG",{});var M9a=s(hNe);M8t=r(M9a,"pegasus"),M9a.forEach(t),E8t=r(klo," \u2014 "),Ace=n(klo,"A",{href:!0});var E9a=s(Ace);C8t=r(E9a,"FlaxPegasusForConditionalGeneration"),E9a.forEach(t),w8t=r(klo," (Pegasus model)"),klo.forEach(t),A8t=i(Ve),ky=n(Ve,"LI",{});var Slo=s(ky);uNe=n(Slo,"STRONG",{});var C9a=s(uNe);L8t=r(C9a,"t5"),C9a.forEach(t),y8t=r(Slo," \u2014 "),Lce=n(Slo,"A",{href:!0});var w9a=s(Lce);x8t=r(w9a,"FlaxT5ForConditionalGeneration"),w9a.forEach(t),$8t=r(Slo," (T5 model)"),Slo.forEach(t),Ve.forEach(t),k8t=i(fd),T(Sy.$$.fragment,fd),fd.forEach(t),cd.forEach(t),Cmo=i(c),kf=n(c,"H2",{class:!0});var Hfo=s(kf);Ry=n(Hfo,"A",{id:!0,class:!0,href:!0});var A9a=s(Ry);pNe=n(A9a,"SPAN",{});var L9a=s(pNe);T(II.$$.fragment,L9a),L9a.forEach(t),A9a.forEach(t),S8t=i(Hfo),_Ne=n(Hfo,"SPAN",{});var y9a=s(_Ne);R8t=r(y9a,"FlaxAutoModelForSequenceClassification"),y9a.forEach(t),Hfo.forEach(t),wmo=i(c),Ir=n(c,"DIV",{class:!0});var gd=s(Ir);T(NI.$$.fragment,gd),P8t=i(gd),Sf=n(gd,"P",{});var xhe=s(Sf);B8t=r(xhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yce=n(xhe,"A",{href:!0});var x9a=s(yce);I8t=r(x9a,"from_pretrained()"),x9a.forEach(t),N8t=r(xhe," class method or the "),xce=n(xhe,"A",{href:!0});var $9a=s(xce);q8t=r($9a,"from_config()"),$9a.forEach(t),j8t=r(xhe,` class
method.`),xhe.forEach(t),D8t=i(gd),qI=n(gd,"P",{});var Jfo=s(qI);G8t=r(Jfo,"This class cannot be instantiated directly using "),bNe=n(Jfo,"CODE",{});var k9a=s(bNe);O8t=r(k9a,"__init__()"),k9a.forEach(t),V8t=r(Jfo," (throws an error)."),Jfo.forEach(t),X8t=i(gd),Ma=n(gd,"DIV",{class:!0});var ik=s(Ma);T(jI.$$.fragment,ik),z8t=i(ik),vNe=n(ik,"P",{});var S9a=s(vNe);Q8t=r(S9a,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),S9a.forEach(t),W8t=i(ik),Rf=n(ik,"P",{});var $he=s(Rf);U8t=r($he,`Note:
Loading a model from its configuration file does `),FNe=n($he,"STRONG",{});var R9a=s(FNe);H8t=r(R9a,"not"),R9a.forEach(t),J8t=r($he,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ce=n($he,"A",{href:!0});var P9a=s($ce);Y8t=r(P9a,"from_pretrained()"),P9a.forEach(t),Z8t=r($he," to load the model weights."),$he.forEach(t),K8t=i(ik),T(Py.$$.fragment,ik),ik.forEach(t),eLt=i(gd),ft=n(gd,"DIV",{class:!0});var hd=s(ft);T(DI.$$.fragment,hd),oLt=i(hd),TNe=n(hd,"P",{});var B9a=s(TNe);rLt=r(B9a,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),B9a.forEach(t),tLt=i(hd),ds=n(hd,"P",{});var dk=s(ds);aLt=r(dk,"The model class to instantiate is selected based on the "),MNe=n(dk,"CODE",{});var I9a=s(MNe);nLt=r(I9a,"model_type"),I9a.forEach(t),sLt=r(dk,` property of the config object (either
passed as an argument or loaded from `),ENe=n(dk,"CODE",{});var N9a=s(ENe);lLt=r(N9a,"pretrained_model_name_or_path"),N9a.forEach(t),iLt=r(dk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CNe=n(dk,"CODE",{});var q9a=s(CNe);dLt=r(q9a,"pretrained_model_name_or_path"),q9a.forEach(t),mLt=r(dk,":"),dk.forEach(t),cLt=i(hd),Be=n(hd,"UL",{});var Xe=s(Be);By=n(Xe,"LI",{});var Rlo=s(By);wNe=n(Rlo,"STRONG",{});var j9a=s(wNe);fLt=r(j9a,"albert"),j9a.forEach(t),gLt=r(Rlo," \u2014 "),kce=n(Rlo,"A",{href:!0});var D9a=s(kce);hLt=r(D9a,"FlaxAlbertForSequenceClassification"),D9a.forEach(t),uLt=r(Rlo," (ALBERT model)"),Rlo.forEach(t),pLt=i(Xe),Iy=n(Xe,"LI",{});var Plo=s(Iy);ANe=n(Plo,"STRONG",{});var G9a=s(ANe);_Lt=r(G9a,"bart"),G9a.forEach(t),bLt=r(Plo," \u2014 "),Sce=n(Plo,"A",{href:!0});var O9a=s(Sce);vLt=r(O9a,"FlaxBartForSequenceClassification"),O9a.forEach(t),FLt=r(Plo," (BART model)"),Plo.forEach(t),TLt=i(Xe),Ny=n(Xe,"LI",{});var Blo=s(Ny);LNe=n(Blo,"STRONG",{});var V9a=s(LNe);MLt=r(V9a,"bert"),V9a.forEach(t),ELt=r(Blo," \u2014 "),Rce=n(Blo,"A",{href:!0});var X9a=s(Rce);CLt=r(X9a,"FlaxBertForSequenceClassification"),X9a.forEach(t),wLt=r(Blo," (BERT model)"),Blo.forEach(t),ALt=i(Xe),qy=n(Xe,"LI",{});var Ilo=s(qy);yNe=n(Ilo,"STRONG",{});var z9a=s(yNe);LLt=r(z9a,"big_bird"),z9a.forEach(t),yLt=r(Ilo," \u2014 "),Pce=n(Ilo,"A",{href:!0});var Q9a=s(Pce);xLt=r(Q9a,"FlaxBigBirdForSequenceClassification"),Q9a.forEach(t),$Lt=r(Ilo," (BigBird model)"),Ilo.forEach(t),kLt=i(Xe),jy=n(Xe,"LI",{});var Nlo=s(jy);xNe=n(Nlo,"STRONG",{});var W9a=s(xNe);SLt=r(W9a,"distilbert"),W9a.forEach(t),RLt=r(Nlo," \u2014 "),Bce=n(Nlo,"A",{href:!0});var U9a=s(Bce);PLt=r(U9a,"FlaxDistilBertForSequenceClassification"),U9a.forEach(t),BLt=r(Nlo," (DistilBERT model)"),Nlo.forEach(t),ILt=i(Xe),Dy=n(Xe,"LI",{});var qlo=s(Dy);$Ne=n(qlo,"STRONG",{});var H9a=s($Ne);NLt=r(H9a,"electra"),H9a.forEach(t),qLt=r(qlo," \u2014 "),Ice=n(qlo,"A",{href:!0});var J9a=s(Ice);jLt=r(J9a,"FlaxElectraForSequenceClassification"),J9a.forEach(t),DLt=r(qlo," (ELECTRA model)"),qlo.forEach(t),GLt=i(Xe),Gy=n(Xe,"LI",{});var jlo=s(Gy);kNe=n(jlo,"STRONG",{});var Y9a=s(kNe);OLt=r(Y9a,"mbart"),Y9a.forEach(t),VLt=r(jlo," \u2014 "),Nce=n(jlo,"A",{href:!0});var Z9a=s(Nce);XLt=r(Z9a,"FlaxMBartForSequenceClassification"),Z9a.forEach(t),zLt=r(jlo," (mBART model)"),jlo.forEach(t),QLt=i(Xe),Oy=n(Xe,"LI",{});var Dlo=s(Oy);SNe=n(Dlo,"STRONG",{});var K9a=s(SNe);WLt=r(K9a,"roberta"),K9a.forEach(t),ULt=r(Dlo," \u2014 "),qce=n(Dlo,"A",{href:!0});var exa=s(qce);HLt=r(exa,"FlaxRobertaForSequenceClassification"),exa.forEach(t),JLt=r(Dlo," (RoBERTa model)"),Dlo.forEach(t),YLt=i(Xe),Vy=n(Xe,"LI",{});var Glo=s(Vy);RNe=n(Glo,"STRONG",{});var oxa=s(RNe);ZLt=r(oxa,"roformer"),oxa.forEach(t),KLt=r(Glo," \u2014 "),jce=n(Glo,"A",{href:!0});var rxa=s(jce);eyt=r(rxa,"FlaxRoFormerForSequenceClassification"),rxa.forEach(t),oyt=r(Glo," (RoFormer model)"),Glo.forEach(t),ryt=i(Xe),Xy=n(Xe,"LI",{});var Olo=s(Xy);PNe=n(Olo,"STRONG",{});var txa=s(PNe);tyt=r(txa,"xlm-roberta"),txa.forEach(t),ayt=r(Olo," \u2014 "),Dce=n(Olo,"A",{href:!0});var axa=s(Dce);nyt=r(axa,"FlaxXLMRobertaForSequenceClassification"),axa.forEach(t),syt=r(Olo," (XLM-RoBERTa model)"),Olo.forEach(t),Xe.forEach(t),lyt=i(hd),T(zy.$$.fragment,hd),hd.forEach(t),gd.forEach(t),Amo=i(c),Pf=n(c,"H2",{class:!0});var Yfo=s(Pf);Qy=n(Yfo,"A",{id:!0,class:!0,href:!0});var nxa=s(Qy);BNe=n(nxa,"SPAN",{});var sxa=s(BNe);T(GI.$$.fragment,sxa),sxa.forEach(t),nxa.forEach(t),iyt=i(Yfo),INe=n(Yfo,"SPAN",{});var lxa=s(INe);dyt=r(lxa,"FlaxAutoModelForQuestionAnswering"),lxa.forEach(t),Yfo.forEach(t),Lmo=i(c),Nr=n(c,"DIV",{class:!0});var ud=s(Nr);T(OI.$$.fragment,ud),myt=i(ud),Bf=n(ud,"P",{});var khe=s(Bf);cyt=r(khe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Gce=n(khe,"A",{href:!0});var ixa=s(Gce);fyt=r(ixa,"from_pretrained()"),ixa.forEach(t),gyt=r(khe," class method or the "),Oce=n(khe,"A",{href:!0});var dxa=s(Oce);hyt=r(dxa,"from_config()"),dxa.forEach(t),uyt=r(khe,` class
method.`),khe.forEach(t),pyt=i(ud),VI=n(ud,"P",{});var Zfo=s(VI);_yt=r(Zfo,"This class cannot be instantiated directly using "),NNe=n(Zfo,"CODE",{});var mxa=s(NNe);byt=r(mxa,"__init__()"),mxa.forEach(t),vyt=r(Zfo," (throws an error)."),Zfo.forEach(t),Fyt=i(ud),Ea=n(ud,"DIV",{class:!0});var mk=s(Ea);T(XI.$$.fragment,mk),Tyt=i(mk),qNe=n(mk,"P",{});var cxa=s(qNe);Myt=r(cxa,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cxa.forEach(t),Eyt=i(mk),If=n(mk,"P",{});var She=s(If);Cyt=r(She,`Note:
Loading a model from its configuration file does `),jNe=n(She,"STRONG",{});var fxa=s(jNe);wyt=r(fxa,"not"),fxa.forEach(t),Ayt=r(She,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vce=n(She,"A",{href:!0});var gxa=s(Vce);Lyt=r(gxa,"from_pretrained()"),gxa.forEach(t),yyt=r(She," to load the model weights."),She.forEach(t),xyt=i(mk),T(Wy.$$.fragment,mk),mk.forEach(t),$yt=i(ud),gt=n(ud,"DIV",{class:!0});var pd=s(gt);T(zI.$$.fragment,pd),kyt=i(pd),DNe=n(pd,"P",{});var hxa=s(DNe);Syt=r(hxa,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hxa.forEach(t),Ryt=i(pd),ms=n(pd,"P",{});var ck=s(ms);Pyt=r(ck,"The model class to instantiate is selected based on the "),GNe=n(ck,"CODE",{});var uxa=s(GNe);Byt=r(uxa,"model_type"),uxa.forEach(t),Iyt=r(ck,` property of the config object (either
passed as an argument or loaded from `),ONe=n(ck,"CODE",{});var pxa=s(ONe);Nyt=r(pxa,"pretrained_model_name_or_path"),pxa.forEach(t),qyt=r(ck,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VNe=n(ck,"CODE",{});var _xa=s(VNe);jyt=r(_xa,"pretrained_model_name_or_path"),_xa.forEach(t),Dyt=r(ck,":"),ck.forEach(t),Gyt=i(pd),Ie=n(pd,"UL",{});var ze=s(Ie);Uy=n(ze,"LI",{});var Vlo=s(Uy);XNe=n(Vlo,"STRONG",{});var bxa=s(XNe);Oyt=r(bxa,"albert"),bxa.forEach(t),Vyt=r(Vlo," \u2014 "),Xce=n(Vlo,"A",{href:!0});var vxa=s(Xce);Xyt=r(vxa,"FlaxAlbertForQuestionAnswering"),vxa.forEach(t),zyt=r(Vlo," (ALBERT model)"),Vlo.forEach(t),Qyt=i(ze),Hy=n(ze,"LI",{});var Xlo=s(Hy);zNe=n(Xlo,"STRONG",{});var Fxa=s(zNe);Wyt=r(Fxa,"bart"),Fxa.forEach(t),Uyt=r(Xlo," \u2014 "),zce=n(Xlo,"A",{href:!0});var Txa=s(zce);Hyt=r(Txa,"FlaxBartForQuestionAnswering"),Txa.forEach(t),Jyt=r(Xlo," (BART model)"),Xlo.forEach(t),Yyt=i(ze),Jy=n(ze,"LI",{});var zlo=s(Jy);QNe=n(zlo,"STRONG",{});var Mxa=s(QNe);Zyt=r(Mxa,"bert"),Mxa.forEach(t),Kyt=r(zlo," \u2014 "),Qce=n(zlo,"A",{href:!0});var Exa=s(Qce);e9t=r(Exa,"FlaxBertForQuestionAnswering"),Exa.forEach(t),o9t=r(zlo," (BERT model)"),zlo.forEach(t),r9t=i(ze),Yy=n(ze,"LI",{});var Qlo=s(Yy);WNe=n(Qlo,"STRONG",{});var Cxa=s(WNe);t9t=r(Cxa,"big_bird"),Cxa.forEach(t),a9t=r(Qlo," \u2014 "),Wce=n(Qlo,"A",{href:!0});var wxa=s(Wce);n9t=r(wxa,"FlaxBigBirdForQuestionAnswering"),wxa.forEach(t),s9t=r(Qlo," (BigBird model)"),Qlo.forEach(t),l9t=i(ze),Zy=n(ze,"LI",{});var Wlo=s(Zy);UNe=n(Wlo,"STRONG",{});var Axa=s(UNe);i9t=r(Axa,"distilbert"),Axa.forEach(t),d9t=r(Wlo," \u2014 "),Uce=n(Wlo,"A",{href:!0});var Lxa=s(Uce);m9t=r(Lxa,"FlaxDistilBertForQuestionAnswering"),Lxa.forEach(t),c9t=r(Wlo," (DistilBERT model)"),Wlo.forEach(t),f9t=i(ze),Ky=n(ze,"LI",{});var Ulo=s(Ky);HNe=n(Ulo,"STRONG",{});var yxa=s(HNe);g9t=r(yxa,"electra"),yxa.forEach(t),h9t=r(Ulo," \u2014 "),Hce=n(Ulo,"A",{href:!0});var xxa=s(Hce);u9t=r(xxa,"FlaxElectraForQuestionAnswering"),xxa.forEach(t),p9t=r(Ulo," (ELECTRA model)"),Ulo.forEach(t),_9t=i(ze),e9=n(ze,"LI",{});var Hlo=s(e9);JNe=n(Hlo,"STRONG",{});var $xa=s(JNe);b9t=r($xa,"mbart"),$xa.forEach(t),v9t=r(Hlo," \u2014 "),Jce=n(Hlo,"A",{href:!0});var kxa=s(Jce);F9t=r(kxa,"FlaxMBartForQuestionAnswering"),kxa.forEach(t),T9t=r(Hlo," (mBART model)"),Hlo.forEach(t),M9t=i(ze),o9=n(ze,"LI",{});var Jlo=s(o9);YNe=n(Jlo,"STRONG",{});var Sxa=s(YNe);E9t=r(Sxa,"roberta"),Sxa.forEach(t),C9t=r(Jlo," \u2014 "),Yce=n(Jlo,"A",{href:!0});var Rxa=s(Yce);w9t=r(Rxa,"FlaxRobertaForQuestionAnswering"),Rxa.forEach(t),A9t=r(Jlo," (RoBERTa model)"),Jlo.forEach(t),L9t=i(ze),r9=n(ze,"LI",{});var Ylo=s(r9);ZNe=n(Ylo,"STRONG",{});var Pxa=s(ZNe);y9t=r(Pxa,"roformer"),Pxa.forEach(t),x9t=r(Ylo," \u2014 "),Zce=n(Ylo,"A",{href:!0});var Bxa=s(Zce);$9t=r(Bxa,"FlaxRoFormerForQuestionAnswering"),Bxa.forEach(t),k9t=r(Ylo," (RoFormer model)"),Ylo.forEach(t),S9t=i(ze),t9=n(ze,"LI",{});var Zlo=s(t9);KNe=n(Zlo,"STRONG",{});var Ixa=s(KNe);R9t=r(Ixa,"xlm-roberta"),Ixa.forEach(t),P9t=r(Zlo," \u2014 "),Kce=n(Zlo,"A",{href:!0});var Nxa=s(Kce);B9t=r(Nxa,"FlaxXLMRobertaForQuestionAnswering"),Nxa.forEach(t),I9t=r(Zlo," (XLM-RoBERTa model)"),Zlo.forEach(t),ze.forEach(t),N9t=i(pd),T(a9.$$.fragment,pd),pd.forEach(t),ud.forEach(t),ymo=i(c),Nf=n(c,"H2",{class:!0});var Kfo=s(Nf);n9=n(Kfo,"A",{id:!0,class:!0,href:!0});var qxa=s(n9);eqe=n(qxa,"SPAN",{});var jxa=s(eqe);T(QI.$$.fragment,jxa),jxa.forEach(t),qxa.forEach(t),q9t=i(Kfo),oqe=n(Kfo,"SPAN",{});var Dxa=s(oqe);j9t=r(Dxa,"FlaxAutoModelForTokenClassification"),Dxa.forEach(t),Kfo.forEach(t),xmo=i(c),qr=n(c,"DIV",{class:!0});var _d=s(qr);T(WI.$$.fragment,_d),D9t=i(_d),qf=n(_d,"P",{});var Rhe=s(qf);G9t=r(Rhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),efe=n(Rhe,"A",{href:!0});var Gxa=s(efe);O9t=r(Gxa,"from_pretrained()"),Gxa.forEach(t),V9t=r(Rhe," class method or the "),ofe=n(Rhe,"A",{href:!0});var Oxa=s(ofe);X9t=r(Oxa,"from_config()"),Oxa.forEach(t),z9t=r(Rhe,` class
method.`),Rhe.forEach(t),Q9t=i(_d),UI=n(_d,"P",{});var ego=s(UI);W9t=r(ego,"This class cannot be instantiated directly using "),rqe=n(ego,"CODE",{});var Vxa=s(rqe);U9t=r(Vxa,"__init__()"),Vxa.forEach(t),H9t=r(ego," (throws an error)."),ego.forEach(t),J9t=i(_d),Ca=n(_d,"DIV",{class:!0});var fk=s(Ca);T(HI.$$.fragment,fk),Y9t=i(fk),tqe=n(fk,"P",{});var Xxa=s(tqe);Z9t=r(Xxa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Xxa.forEach(t),K9t=i(fk),jf=n(fk,"P",{});var Phe=s(jf);ext=r(Phe,`Note:
Loading a model from its configuration file does `),aqe=n(Phe,"STRONG",{});var zxa=s(aqe);oxt=r(zxa,"not"),zxa.forEach(t),rxt=r(Phe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rfe=n(Phe,"A",{href:!0});var Qxa=s(rfe);txt=r(Qxa,"from_pretrained()"),Qxa.forEach(t),axt=r(Phe," to load the model weights."),Phe.forEach(t),nxt=i(fk),T(s9.$$.fragment,fk),fk.forEach(t),sxt=i(_d),ht=n(_d,"DIV",{class:!0});var bd=s(ht);T(JI.$$.fragment,bd),lxt=i(bd),nqe=n(bd,"P",{});var Wxa=s(nqe);ixt=r(Wxa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wxa.forEach(t),dxt=i(bd),cs=n(bd,"P",{});var gk=s(cs);mxt=r(gk,"The model class to instantiate is selected based on the "),sqe=n(gk,"CODE",{});var Uxa=s(sqe);cxt=r(Uxa,"model_type"),Uxa.forEach(t),fxt=r(gk,` property of the config object (either
passed as an argument or loaded from `),lqe=n(gk,"CODE",{});var Hxa=s(lqe);gxt=r(Hxa,"pretrained_model_name_or_path"),Hxa.forEach(t),hxt=r(gk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iqe=n(gk,"CODE",{});var Jxa=s(iqe);uxt=r(Jxa,"pretrained_model_name_or_path"),Jxa.forEach(t),pxt=r(gk,":"),gk.forEach(t),_xt=i(bd),We=n(bd,"UL",{});var So=s(We);l9=n(So,"LI",{});var Klo=s(l9);dqe=n(Klo,"STRONG",{});var Yxa=s(dqe);bxt=r(Yxa,"albert"),Yxa.forEach(t),vxt=r(Klo," \u2014 "),tfe=n(Klo,"A",{href:!0});var Zxa=s(tfe);Fxt=r(Zxa,"FlaxAlbertForTokenClassification"),Zxa.forEach(t),Txt=r(Klo," (ALBERT model)"),Klo.forEach(t),Mxt=i(So),i9=n(So,"LI",{});var eio=s(i9);mqe=n(eio,"STRONG",{});var Kxa=s(mqe);Ext=r(Kxa,"bert"),Kxa.forEach(t),Cxt=r(eio," \u2014 "),afe=n(eio,"A",{href:!0});var e$a=s(afe);wxt=r(e$a,"FlaxBertForTokenClassification"),e$a.forEach(t),Axt=r(eio," (BERT model)"),eio.forEach(t),Lxt=i(So),d9=n(So,"LI",{});var oio=s(d9);cqe=n(oio,"STRONG",{});var o$a=s(cqe);yxt=r(o$a,"big_bird"),o$a.forEach(t),xxt=r(oio," \u2014 "),nfe=n(oio,"A",{href:!0});var r$a=s(nfe);$xt=r(r$a,"FlaxBigBirdForTokenClassification"),r$a.forEach(t),kxt=r(oio," (BigBird model)"),oio.forEach(t),Sxt=i(So),m9=n(So,"LI",{});var rio=s(m9);fqe=n(rio,"STRONG",{});var t$a=s(fqe);Rxt=r(t$a,"distilbert"),t$a.forEach(t),Pxt=r(rio," \u2014 "),sfe=n(rio,"A",{href:!0});var a$a=s(sfe);Bxt=r(a$a,"FlaxDistilBertForTokenClassification"),a$a.forEach(t),Ixt=r(rio," (DistilBERT model)"),rio.forEach(t),Nxt=i(So),c9=n(So,"LI",{});var tio=s(c9);gqe=n(tio,"STRONG",{});var n$a=s(gqe);qxt=r(n$a,"electra"),n$a.forEach(t),jxt=r(tio," \u2014 "),lfe=n(tio,"A",{href:!0});var s$a=s(lfe);Dxt=r(s$a,"FlaxElectraForTokenClassification"),s$a.forEach(t),Gxt=r(tio," (ELECTRA model)"),tio.forEach(t),Oxt=i(So),f9=n(So,"LI",{});var aio=s(f9);hqe=n(aio,"STRONG",{});var l$a=s(hqe);Vxt=r(l$a,"roberta"),l$a.forEach(t),Xxt=r(aio," \u2014 "),ife=n(aio,"A",{href:!0});var i$a=s(ife);zxt=r(i$a,"FlaxRobertaForTokenClassification"),i$a.forEach(t),Qxt=r(aio," (RoBERTa model)"),aio.forEach(t),Wxt=i(So),g9=n(So,"LI",{});var nio=s(g9);uqe=n(nio,"STRONG",{});var d$a=s(uqe);Uxt=r(d$a,"roformer"),d$a.forEach(t),Hxt=r(nio," \u2014 "),dfe=n(nio,"A",{href:!0});var m$a=s(dfe);Jxt=r(m$a,"FlaxRoFormerForTokenClassification"),m$a.forEach(t),Yxt=r(nio," (RoFormer model)"),nio.forEach(t),Zxt=i(So),h9=n(So,"LI",{});var sio=s(h9);pqe=n(sio,"STRONG",{});var c$a=s(pqe);Kxt=r(c$a,"xlm-roberta"),c$a.forEach(t),e$t=r(sio," \u2014 "),mfe=n(sio,"A",{href:!0});var f$a=s(mfe);o$t=r(f$a,"FlaxXLMRobertaForTokenClassification"),f$a.forEach(t),r$t=r(sio," (XLM-RoBERTa model)"),sio.forEach(t),So.forEach(t),t$t=i(bd),T(u9.$$.fragment,bd),bd.forEach(t),_d.forEach(t),$mo=i(c),Df=n(c,"H2",{class:!0});var ogo=s(Df);p9=n(ogo,"A",{id:!0,class:!0,href:!0});var g$a=s(p9);_qe=n(g$a,"SPAN",{});var h$a=s(_qe);T(YI.$$.fragment,h$a),h$a.forEach(t),g$a.forEach(t),a$t=i(ogo),bqe=n(ogo,"SPAN",{});var u$a=s(bqe);n$t=r(u$a,"FlaxAutoModelForMultipleChoice"),u$a.forEach(t),ogo.forEach(t),kmo=i(c),jr=n(c,"DIV",{class:!0});var vd=s(jr);T(ZI.$$.fragment,vd),s$t=i(vd),Gf=n(vd,"P",{});var Bhe=s(Gf);l$t=r(Bhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cfe=n(Bhe,"A",{href:!0});var p$a=s(cfe);i$t=r(p$a,"from_pretrained()"),p$a.forEach(t),d$t=r(Bhe," class method or the "),ffe=n(Bhe,"A",{href:!0});var _$a=s(ffe);m$t=r(_$a,"from_config()"),_$a.forEach(t),c$t=r(Bhe,` class
method.`),Bhe.forEach(t),f$t=i(vd),KI=n(vd,"P",{});var rgo=s(KI);g$t=r(rgo,"This class cannot be instantiated directly using "),vqe=n(rgo,"CODE",{});var b$a=s(vqe);h$t=r(b$a,"__init__()"),b$a.forEach(t),u$t=r(rgo," (throws an error)."),rgo.forEach(t),p$t=i(vd),wa=n(vd,"DIV",{class:!0});var hk=s(wa);T(eN.$$.fragment,hk),_$t=i(hk),Fqe=n(hk,"P",{});var v$a=s(Fqe);b$t=r(v$a,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),v$a.forEach(t),v$t=i(hk),Of=n(hk,"P",{});var Ihe=s(Of);F$t=r(Ihe,`Note:
Loading a model from its configuration file does `),Tqe=n(Ihe,"STRONG",{});var F$a=s(Tqe);T$t=r(F$a,"not"),F$a.forEach(t),M$t=r(Ihe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gfe=n(Ihe,"A",{href:!0});var T$a=s(gfe);E$t=r(T$a,"from_pretrained()"),T$a.forEach(t),C$t=r(Ihe," to load the model weights."),Ihe.forEach(t),w$t=i(hk),T(_9.$$.fragment,hk),hk.forEach(t),A$t=i(vd),ut=n(vd,"DIV",{class:!0});var Fd=s(ut);T(oN.$$.fragment,Fd),L$t=i(Fd),Mqe=n(Fd,"P",{});var M$a=s(Mqe);y$t=r(M$a,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),M$a.forEach(t),x$t=i(Fd),fs=n(Fd,"P",{});var uk=s(fs);$$t=r(uk,"The model class to instantiate is selected based on the "),Eqe=n(uk,"CODE",{});var E$a=s(Eqe);k$t=r(E$a,"model_type"),E$a.forEach(t),S$t=r(uk,` property of the config object (either
passed as an argument or loaded from `),Cqe=n(uk,"CODE",{});var C$a=s(Cqe);R$t=r(C$a,"pretrained_model_name_or_path"),C$a.forEach(t),P$t=r(uk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wqe=n(uk,"CODE",{});var w$a=s(wqe);B$t=r(w$a,"pretrained_model_name_or_path"),w$a.forEach(t),I$t=r(uk,":"),uk.forEach(t),N$t=i(Fd),Ue=n(Fd,"UL",{});var Ro=s(Ue);b9=n(Ro,"LI",{});var lio=s(b9);Aqe=n(lio,"STRONG",{});var A$a=s(Aqe);q$t=r(A$a,"albert"),A$a.forEach(t),j$t=r(lio," \u2014 "),hfe=n(lio,"A",{href:!0});var L$a=s(hfe);D$t=r(L$a,"FlaxAlbertForMultipleChoice"),L$a.forEach(t),G$t=r(lio," (ALBERT model)"),lio.forEach(t),O$t=i(Ro),v9=n(Ro,"LI",{});var iio=s(v9);Lqe=n(iio,"STRONG",{});var y$a=s(Lqe);V$t=r(y$a,"bert"),y$a.forEach(t),X$t=r(iio," \u2014 "),ufe=n(iio,"A",{href:!0});var x$a=s(ufe);z$t=r(x$a,"FlaxBertForMultipleChoice"),x$a.forEach(t),Q$t=r(iio," (BERT model)"),iio.forEach(t),W$t=i(Ro),F9=n(Ro,"LI",{});var dio=s(F9);yqe=n(dio,"STRONG",{});var $$a=s(yqe);U$t=r($$a,"big_bird"),$$a.forEach(t),H$t=r(dio," \u2014 "),pfe=n(dio,"A",{href:!0});var k$a=s(pfe);J$t=r(k$a,"FlaxBigBirdForMultipleChoice"),k$a.forEach(t),Y$t=r(dio," (BigBird model)"),dio.forEach(t),Z$t=i(Ro),T9=n(Ro,"LI",{});var mio=s(T9);xqe=n(mio,"STRONG",{});var S$a=s(xqe);K$t=r(S$a,"distilbert"),S$a.forEach(t),ekt=r(mio," \u2014 "),_fe=n(mio,"A",{href:!0});var R$a=s(_fe);okt=r(R$a,"FlaxDistilBertForMultipleChoice"),R$a.forEach(t),rkt=r(mio," (DistilBERT model)"),mio.forEach(t),tkt=i(Ro),M9=n(Ro,"LI",{});var cio=s(M9);$qe=n(cio,"STRONG",{});var P$a=s($qe);akt=r(P$a,"electra"),P$a.forEach(t),nkt=r(cio," \u2014 "),bfe=n(cio,"A",{href:!0});var B$a=s(bfe);skt=r(B$a,"FlaxElectraForMultipleChoice"),B$a.forEach(t),lkt=r(cio," (ELECTRA model)"),cio.forEach(t),ikt=i(Ro),E9=n(Ro,"LI",{});var fio=s(E9);kqe=n(fio,"STRONG",{});var I$a=s(kqe);dkt=r(I$a,"roberta"),I$a.forEach(t),mkt=r(fio," \u2014 "),vfe=n(fio,"A",{href:!0});var N$a=s(vfe);ckt=r(N$a,"FlaxRobertaForMultipleChoice"),N$a.forEach(t),fkt=r(fio," (RoBERTa model)"),fio.forEach(t),gkt=i(Ro),C9=n(Ro,"LI",{});var gio=s(C9);Sqe=n(gio,"STRONG",{});var q$a=s(Sqe);hkt=r(q$a,"roformer"),q$a.forEach(t),ukt=r(gio," \u2014 "),Ffe=n(gio,"A",{href:!0});var j$a=s(Ffe);pkt=r(j$a,"FlaxRoFormerForMultipleChoice"),j$a.forEach(t),_kt=r(gio," (RoFormer model)"),gio.forEach(t),bkt=i(Ro),w9=n(Ro,"LI",{});var hio=s(w9);Rqe=n(hio,"STRONG",{});var D$a=s(Rqe);vkt=r(D$a,"xlm-roberta"),D$a.forEach(t),Fkt=r(hio," \u2014 "),Tfe=n(hio,"A",{href:!0});var G$a=s(Tfe);Tkt=r(G$a,"FlaxXLMRobertaForMultipleChoice"),G$a.forEach(t),Mkt=r(hio," (XLM-RoBERTa model)"),hio.forEach(t),Ro.forEach(t),Ekt=i(Fd),T(A9.$$.fragment,Fd),Fd.forEach(t),vd.forEach(t),Smo=i(c),Vf=n(c,"H2",{class:!0});var tgo=s(Vf);L9=n(tgo,"A",{id:!0,class:!0,href:!0});var O$a=s(L9);Pqe=n(O$a,"SPAN",{});var V$a=s(Pqe);T(rN.$$.fragment,V$a),V$a.forEach(t),O$a.forEach(t),Ckt=i(tgo),Bqe=n(tgo,"SPAN",{});var X$a=s(Bqe);wkt=r(X$a,"FlaxAutoModelForNextSentencePrediction"),X$a.forEach(t),tgo.forEach(t),Rmo=i(c),Dr=n(c,"DIV",{class:!0});var Td=s(Dr);T(tN.$$.fragment,Td),Akt=i(Td),Xf=n(Td,"P",{});var Nhe=s(Xf);Lkt=r(Nhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Mfe=n(Nhe,"A",{href:!0});var z$a=s(Mfe);ykt=r(z$a,"from_pretrained()"),z$a.forEach(t),xkt=r(Nhe," class method or the "),Efe=n(Nhe,"A",{href:!0});var Q$a=s(Efe);$kt=r(Q$a,"from_config()"),Q$a.forEach(t),kkt=r(Nhe,` class
method.`),Nhe.forEach(t),Skt=i(Td),aN=n(Td,"P",{});var ago=s(aN);Rkt=r(ago,"This class cannot be instantiated directly using "),Iqe=n(ago,"CODE",{});var W$a=s(Iqe);Pkt=r(W$a,"__init__()"),W$a.forEach(t),Bkt=r(ago," (throws an error)."),ago.forEach(t),Ikt=i(Td),Aa=n(Td,"DIV",{class:!0});var pk=s(Aa);T(nN.$$.fragment,pk),Nkt=i(pk),Nqe=n(pk,"P",{});var U$a=s(Nqe);qkt=r(U$a,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),U$a.forEach(t),jkt=i(pk),zf=n(pk,"P",{});var qhe=s(zf);Dkt=r(qhe,`Note:
Loading a model from its configuration file does `),qqe=n(qhe,"STRONG",{});var H$a=s(qqe);Gkt=r(H$a,"not"),H$a.forEach(t),Okt=r(qhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cfe=n(qhe,"A",{href:!0});var J$a=s(Cfe);Vkt=r(J$a,"from_pretrained()"),J$a.forEach(t),Xkt=r(qhe," to load the model weights."),qhe.forEach(t),zkt=i(pk),T(y9.$$.fragment,pk),pk.forEach(t),Qkt=i(Td),pt=n(Td,"DIV",{class:!0});var Md=s(pt);T(sN.$$.fragment,Md),Wkt=i(Md),jqe=n(Md,"P",{});var Y$a=s(jqe);Ukt=r(Y$a,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Y$a.forEach(t),Hkt=i(Md),gs=n(Md,"P",{});var _k=s(gs);Jkt=r(_k,"The model class to instantiate is selected based on the "),Dqe=n(_k,"CODE",{});var Z$a=s(Dqe);Ykt=r(Z$a,"model_type"),Z$a.forEach(t),Zkt=r(_k,` property of the config object (either
passed as an argument or loaded from `),Gqe=n(_k,"CODE",{});var K$a=s(Gqe);Kkt=r(K$a,"pretrained_model_name_or_path"),K$a.forEach(t),eSt=r(_k,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oqe=n(_k,"CODE",{});var eka=s(Oqe);oSt=r(eka,"pretrained_model_name_or_path"),eka.forEach(t),rSt=r(_k,":"),_k.forEach(t),tSt=i(Md),Vqe=n(Md,"UL",{});var oka=s(Vqe);x9=n(oka,"LI",{});var uio=s(x9);Xqe=n(uio,"STRONG",{});var rka=s(Xqe);aSt=r(rka,"bert"),rka.forEach(t),nSt=r(uio," \u2014 "),wfe=n(uio,"A",{href:!0});var tka=s(wfe);sSt=r(tka,"FlaxBertForNextSentencePrediction"),tka.forEach(t),lSt=r(uio," (BERT model)"),uio.forEach(t),oka.forEach(t),iSt=i(Md),T($9.$$.fragment,Md),Md.forEach(t),Td.forEach(t),Pmo=i(c),Qf=n(c,"H2",{class:!0});var ngo=s(Qf);k9=n(ngo,"A",{id:!0,class:!0,href:!0});var aka=s(k9);zqe=n(aka,"SPAN",{});var nka=s(zqe);T(lN.$$.fragment,nka),nka.forEach(t),aka.forEach(t),dSt=i(ngo),Qqe=n(ngo,"SPAN",{});var ska=s(Qqe);mSt=r(ska,"FlaxAutoModelForImageClassification"),ska.forEach(t),ngo.forEach(t),Bmo=i(c),Gr=n(c,"DIV",{class:!0});var Ed=s(Gr);T(iN.$$.fragment,Ed),cSt=i(Ed),Wf=n(Ed,"P",{});var jhe=s(Wf);fSt=r(jhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Afe=n(jhe,"A",{href:!0});var lka=s(Afe);gSt=r(lka,"from_pretrained()"),lka.forEach(t),hSt=r(jhe," class method or the "),Lfe=n(jhe,"A",{href:!0});var ika=s(Lfe);uSt=r(ika,"from_config()"),ika.forEach(t),pSt=r(jhe,` class
method.`),jhe.forEach(t),_St=i(Ed),dN=n(Ed,"P",{});var sgo=s(dN);bSt=r(sgo,"This class cannot be instantiated directly using "),Wqe=n(sgo,"CODE",{});var dka=s(Wqe);vSt=r(dka,"__init__()"),dka.forEach(t),FSt=r(sgo," (throws an error)."),sgo.forEach(t),TSt=i(Ed),La=n(Ed,"DIV",{class:!0});var bk=s(La);T(mN.$$.fragment,bk),MSt=i(bk),Uqe=n(bk,"P",{});var mka=s(Uqe);ESt=r(mka,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mka.forEach(t),CSt=i(bk),Uf=n(bk,"P",{});var Dhe=s(Uf);wSt=r(Dhe,`Note:
Loading a model from its configuration file does `),Hqe=n(Dhe,"STRONG",{});var cka=s(Hqe);ASt=r(cka,"not"),cka.forEach(t),LSt=r(Dhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yfe=n(Dhe,"A",{href:!0});var fka=s(yfe);ySt=r(fka,"from_pretrained()"),fka.forEach(t),xSt=r(Dhe," to load the model weights."),Dhe.forEach(t),$St=i(bk),T(S9.$$.fragment,bk),bk.forEach(t),kSt=i(Ed),_t=n(Ed,"DIV",{class:!0});var Cd=s(_t);T(cN.$$.fragment,Cd),SSt=i(Cd),Jqe=n(Cd,"P",{});var gka=s(Jqe);RSt=r(gka,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gka.forEach(t),PSt=i(Cd),hs=n(Cd,"P",{});var vk=s(hs);BSt=r(vk,"The model class to instantiate is selected based on the "),Yqe=n(vk,"CODE",{});var hka=s(Yqe);ISt=r(hka,"model_type"),hka.forEach(t),NSt=r(vk,` property of the config object (either
passed as an argument or loaded from `),Zqe=n(vk,"CODE",{});var uka=s(Zqe);qSt=r(uka,"pretrained_model_name_or_path"),uka.forEach(t),jSt=r(vk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kqe=n(vk,"CODE",{});var pka=s(Kqe);DSt=r(pka,"pretrained_model_name_or_path"),pka.forEach(t),GSt=r(vk,":"),vk.forEach(t),OSt=i(Cd),fN=n(Cd,"UL",{});var lgo=s(fN);R9=n(lgo,"LI",{});var pio=s(R9);eje=n(pio,"STRONG",{});var _ka=s(eje);VSt=r(_ka,"beit"),_ka.forEach(t),XSt=r(pio," \u2014 "),xfe=n(pio,"A",{href:!0});var bka=s(xfe);zSt=r(bka,"FlaxBeitForImageClassification"),bka.forEach(t),QSt=r(pio," (BEiT model)"),pio.forEach(t),WSt=i(lgo),P9=n(lgo,"LI",{});var _io=s(P9);oje=n(_io,"STRONG",{});var vka=s(oje);USt=r(vka,"vit"),vka.forEach(t),HSt=r(_io," \u2014 "),$fe=n(_io,"A",{href:!0});var Fka=s($fe);JSt=r(Fka,"FlaxViTForImageClassification"),Fka.forEach(t),YSt=r(_io," (ViT model)"),_io.forEach(t),lgo.forEach(t),ZSt=i(Cd),T(B9.$$.fragment,Cd),Cd.forEach(t),Ed.forEach(t),Imo=i(c),Hf=n(c,"H2",{class:!0});var igo=s(Hf);I9=n(igo,"A",{id:!0,class:!0,href:!0});var Tka=s(I9);rje=n(Tka,"SPAN",{});var Mka=s(rje);T(gN.$$.fragment,Mka),Mka.forEach(t),Tka.forEach(t),KSt=i(igo),tje=n(igo,"SPAN",{});var Eka=s(tje);eRt=r(Eka,"FlaxAutoModelForVision2Seq"),Eka.forEach(t),igo.forEach(t),Nmo=i(c),Or=n(c,"DIV",{class:!0});var wd=s(Or);T(hN.$$.fragment,wd),oRt=i(wd),Jf=n(wd,"P",{});var Ghe=s(Jf);rRt=r(Ghe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kfe=n(Ghe,"A",{href:!0});var Cka=s(kfe);tRt=r(Cka,"from_pretrained()"),Cka.forEach(t),aRt=r(Ghe," class method or the "),Sfe=n(Ghe,"A",{href:!0});var wka=s(Sfe);nRt=r(wka,"from_config()"),wka.forEach(t),sRt=r(Ghe,` class
method.`),Ghe.forEach(t),lRt=i(wd),uN=n(wd,"P",{});var dgo=s(uN);iRt=r(dgo,"This class cannot be instantiated directly using "),aje=n(dgo,"CODE",{});var Aka=s(aje);dRt=r(Aka,"__init__()"),Aka.forEach(t),mRt=r(dgo," (throws an error)."),dgo.forEach(t),cRt=i(wd),ya=n(wd,"DIV",{class:!0});var Fk=s(ya);T(pN.$$.fragment,Fk),fRt=i(Fk),nje=n(Fk,"P",{});var Lka=s(nje);gRt=r(Lka,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Lka.forEach(t),hRt=i(Fk),Yf=n(Fk,"P",{});var Ohe=s(Yf);uRt=r(Ohe,`Note:
Loading a model from its configuration file does `),sje=n(Ohe,"STRONG",{});var yka=s(sje);pRt=r(yka,"not"),yka.forEach(t),_Rt=r(Ohe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rfe=n(Ohe,"A",{href:!0});var xka=s(Rfe);bRt=r(xka,"from_pretrained()"),xka.forEach(t),vRt=r(Ohe," to load the model weights."),Ohe.forEach(t),FRt=i(Fk),T(N9.$$.fragment,Fk),Fk.forEach(t),TRt=i(wd),bt=n(wd,"DIV",{class:!0});var Ad=s(bt);T(_N.$$.fragment,Ad),MRt=i(Ad),lje=n(Ad,"P",{});var $ka=s(lje);ERt=r($ka,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$ka.forEach(t),CRt=i(Ad),us=n(Ad,"P",{});var Tk=s(us);wRt=r(Tk,"The model class to instantiate is selected based on the "),ije=n(Tk,"CODE",{});var kka=s(ije);ARt=r(kka,"model_type"),kka.forEach(t),LRt=r(Tk,` property of the config object (either
passed as an argument or loaded from `),dje=n(Tk,"CODE",{});var Ska=s(dje);yRt=r(Ska,"pretrained_model_name_or_path"),Ska.forEach(t),xRt=r(Tk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mje=n(Tk,"CODE",{});var Rka=s(mje);$Rt=r(Rka,"pretrained_model_name_or_path"),Rka.forEach(t),kRt=r(Tk,":"),Tk.forEach(t),SRt=i(Ad),cje=n(Ad,"UL",{});var Pka=s(cje);q9=n(Pka,"LI",{});var bio=s(q9);fje=n(bio,"STRONG",{});var Bka=s(fje);RRt=r(Bka,"vision-encoder-decoder"),Bka.forEach(t),PRt=r(bio," \u2014 "),Pfe=n(bio,"A",{href:!0});var Ika=s(Pfe);BRt=r(Ika,"FlaxVisionEncoderDecoderModel"),Ika.forEach(t),IRt=r(bio," (Vision Encoder decoder model)"),bio.forEach(t),Pka.forEach(t),NRt=i(Ad),T(j9.$$.fragment,Ad),Ad.forEach(t),wd.forEach(t),this.h()},h(){d(g,"name","hf:doc:metadata"),d(g,"content",JSON.stringify(rPa)),d(f,"id","auto-classes"),d(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f,"href","#auto-classes"),d(u,"class","relative group"),d(_s,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),d(vs,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),d(Fs,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),d(Rd,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(ng,"id","extending-the-auto-classes"),d(ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ng,"href","#extending-the-auto-classes"),d(Pd,"class","relative group"),d(lg,"id","transformers.AutoConfig"),d(lg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lg,"href","#transformers.AutoConfig"),d(Bd,"class","relative group"),d(Kq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(ej,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),d(oj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(rj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),d(tj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),d(aj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(nj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),d(sj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(lj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(ij,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(dj,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),d(mj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),d(cj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),d(fj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),d(gj,"href","/docs/transformers/main/en/model_doc/clipseg#transformers.CLIPSegConfig"),d(hj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),d(uj,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig"),d(pj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),d(_j,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),d(bj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),d(vj,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),d(Fj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(Tj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(Mj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(Ej,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),d(Cj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(wj,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(Aj,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"),d(Lj,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),d(yj,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),d(xj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),d($j,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),d(kj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),d(Sj,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),d(Rj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),d(Pj,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(Bj,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig"),d(Ij,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig"),d(Nj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),d(qj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),d(jj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),d(Dj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),d(Gj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),d(Oj,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),d(Vj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),d(Xj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(zj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),d(Qj,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig"),d(Wj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),d(Uj,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),d(Hj,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),d(Jj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),d(Yj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(Zj,"href","/docs/transformers/main/en/model_doc/jukebox#transformers.JukeboxConfig"),d(Kj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(eD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(oD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),d(rD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),d(tD,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),d(aD,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig"),d(nD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),d(sD,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),d(lD,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),d(iD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),d(dD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),d(mD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),d(cD,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig"),d(fD,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(gD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),d(hD,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),d(uD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(pD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(_D,"href","/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config"),d(bD,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),d(vD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),d(FD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),d(TD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),d(MD,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),d(ED,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(CD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(wD,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),d(AD,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),d(LD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),d(yD,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig"),d(xD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),d($D,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),d(kD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(SD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(RD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(PD,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),d(BD,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),d(ID,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),d(ND,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),d(qD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),d(jD,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),d(DD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),d(GD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),d(OD,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig"),d(VD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),d(XD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),d(zD,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),d(QD,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),d(WD,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(UD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(HD,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(JD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),d(YD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(ZD,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),d(KD,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),d(eG,"href","/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersConfig"),d(oG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),d(rG,"href","/docs/transformers/main/en/model_doc/table-transformer#transformers.TableTransformerConfig"),d(tG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),d(aG,"href","/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerConfig"),d(nG,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),d(sG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(lG,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),d(iG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(dG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(mG,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),d(cG,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),d(fG,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),d(gG,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(hG,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(uG,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(pG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),d(_G,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(bG,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig"),d(vG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(FG,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),d(TG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),d(MG,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig"),d(EG,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig"),d(CG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),d(wG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),d(AG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(LG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(yG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(xG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),d($G,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),d(kG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ou,"id","transformers.AutoTokenizer"),d(Ou,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ou,"href","#transformers.AutoTokenizer"),d(Nd,"class","relative group"),d(SG,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(RG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(PG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(BG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),d(IG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),d(NG,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),d(qG,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(jG,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(DG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(GG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(OG,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(VG,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(XG,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(zG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(QG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(WG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(UG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(HG,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(JG,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(YG,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(ZG,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),d(KG,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(eO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),d(oO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(rO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),d(tO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(aO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(nO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(sO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(lO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),d(iO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),d(dO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(mO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(cO,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),d(fO,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),d(gO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(hO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(uO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(pO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),d(_O,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(bO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(vO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(FO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(TO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(MO,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(EO,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(CO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),d(wO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(AO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(LO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(yO,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmTokenizer"),d(xO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d($O,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),d(kO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(SO,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(RO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),d(PO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(BO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(IO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(NO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(qO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(jO,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),d(DO,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseTokenizer"),d(GO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(OO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(VO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(XO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(zO,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),d(QO,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(WO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(UO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(HO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(JO,"href","/docs/transformers/main/en/model_doc/jukebox#transformers.JukeboxTokenizer"),d(YO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(ZO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(KO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(eV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(oV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),d(rV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),d(tV,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(aV,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(nV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),d(sV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),d(lV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),d(iV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),d(dV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),d(mV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(cV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(fV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(gV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),d(hV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(uV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(pV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(_V,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),d(bV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),d(vV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(FV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(TV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(MV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(EV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(CV,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),d(wV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(AV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(LV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(yV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(xV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d($V,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(kV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),d(SV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),d(RV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(PV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(BV,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),d(IV,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),d(NV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(qV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(jV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(DV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(GV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(OV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(VV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(XV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(zV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(QV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(WV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(UV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(HV,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),d(JV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),d(YV,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(ZV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(KV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(eX,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),d(oX,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),d(rX,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),d(tX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),d(aX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(nX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),d(sX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(lX,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(iX,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(dX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(mX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(cX,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertTokenizer"),d(fX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(gX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(hX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(uX,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(pX,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),d(_X,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(bX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(vX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(FX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(TX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(MX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(EX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(CX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),d(wX,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),d(AX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(LX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(yX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(xX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d($X,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(kX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(SX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(RX,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(PX,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperTokenizer"),d(BX,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(IX,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(NX,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),d(qX,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(jX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),d(DX,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(GX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(OX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(VX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(XX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(zX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(QX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(WX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(UX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xp,"id","transformers.AutoFeatureExtractor"),d(xp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xp,"href","#transformers.AutoFeatureExtractor"),d(qd,"class","relative group"),d(HX,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(JX,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitImageProcessor"),d(YX,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPImageProcessor"),d(ZX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(KX,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor"),d(ez,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(oz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(rz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(tz,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitImageProcessor"),d(az,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrFeatureExtractor"),d(nz,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTImageProcessor"),d(sz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(lz,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),d(iz,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTImageProcessor"),d(dz,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaImageProcessor"),d(mz,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNImageProcessor"),d(cz,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPImageProcessor"),d(fz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(gz,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTImageProcessor"),d(hz,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ImageProcessor"),d(uz,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ImageProcessor"),d(pz,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitImageProcessor"),d(_z,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(bz,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),d(vz,"href","/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2ImageProcessor"),d(Fz,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTImageProcessor"),d(Tz,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(Mz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverImageProcessor"),d(Ez,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerImageProcessor"),d(Cz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(wz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(Az,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerImageProcessor"),d(Lz,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(yz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(xz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d($z,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(kz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(Sz,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEImageProcessor"),d(Rz,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltImageProcessor"),d(Pz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(Bz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(Iz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(Nz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(qz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(jz,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperFeatureExtractor"),d(Dz,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPImageProcessor"),d(Gz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w_,"id","transformers.AutoImageProcessor"),d(w_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w_,"href","#transformers.AutoImageProcessor"),d(jd,"class","relative group"),d(Oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoImageProcessor.from_pretrained"),d(Vz,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitImageProcessor"),d(Xz,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPImageProcessor"),d(zz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(Qz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(Wz,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitImageProcessor"),d(Uz,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTImageProcessor"),d(Hz,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTImageProcessor"),d(Jz,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaImageProcessor"),d(Yz,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNImageProcessor"),d(Zz,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPImageProcessor"),d(Kz,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTImageProcessor"),d(eQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ImageProcessor"),d(oQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ImageProcessor"),d(rQ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitImageProcessor"),d(tQ,"href","/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2ImageProcessor"),d(aQ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTImageProcessor"),d(nQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverImageProcessor"),d(sQ,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerImageProcessor"),d(lQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(iQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(dQ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerImageProcessor"),d(mQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(cQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(fQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(gQ,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEImageProcessor"),d(hQ,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltImageProcessor"),d(uQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(pQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(_Q,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(bQ,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPImageProcessor"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a1,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n1,"id","transformers.AutoProcessor"),d(n1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n1,"href","#transformers.AutoProcessor"),d(Dd,"class","relative group"),d(vQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(FQ,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(TQ,"href","/docs/transformers/main/en/model_doc/clipseg#transformers.CLIPSegProcessor"),d(MQ,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),d(EQ,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(CQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(wQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),d(AQ,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(LQ,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMProcessor"),d(yQ,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),d(xQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d($Q,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(kQ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(SQ,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(RQ,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),d(PQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(BQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(IQ,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),d(NQ,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(qQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(jQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(DQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(GQ,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperProcessor"),d(OQ,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPProcessor"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k1,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S1,"id","transformers.AutoModel"),d(S1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S1,"href","#transformers.AutoModel"),d(Od,"class","relative group"),d(VQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),d(WQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),d(UQ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),d(HQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(JQ,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(YQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),d(ZQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(KQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(eW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(oW,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),d(rW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),d(tW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),d(aW,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),d(nW,"href","/docs/transformers/main/en/model_doc/clipseg#transformers.CLIPSegModel"),d(sW,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),d(lW,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel"),d(iW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),d(dW,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d(mW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),d(cW,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),d(fW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(gW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(hW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(uW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),d(pW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(_W,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(bW,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),d(vW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),d(FW,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),d(TW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),d(MW,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),d(EW,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(CW,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),d(wW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),d(AW,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel"),d(LW,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmModel"),d(yW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),d(xW,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),d($W,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),d(kW,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),d(SW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),d(RW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),d(PW,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),d(BW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),d(IW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(NW,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),d(qW,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel"),d(jW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),d(DW,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),d(GW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),d(OW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),d(VW,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(XW,"href","/docs/transformers/main/en/model_doc/jukebox#transformers.JukeboxModel"),d(zW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(QW,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(WW,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),d(UW,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),d(HW,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),d(JW,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltModel"),d(YW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),d(ZW,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),d(KW,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),d(eU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),d(oU,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(rU,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),d(tU,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMModel"),d(aU,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),d(nU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),d(sU,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),d(lU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(iU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),d(dU,"href","/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model"),d(mU,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),d(cU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),d(fU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),d(gU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),d(hU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),d(uU,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(pU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),d(_U,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(bU,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),d(vU,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),d(FU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),d(TU,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel"),d(MU,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),d(EU,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),d(CU,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(wU,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(AU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),d(LU,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),d(yU,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),d(xU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),d($U,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),d(kU,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(SU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),d(RU,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertModel"),d(PU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),d(BU,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),d(IU,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),d(NU,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),d(qU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(jU,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),d(DU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(GU,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),d(OU,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),d(VU,"href","/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersModel"),d(XU,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),d(zU,"href","/docs/transformers/main/en/model_doc/table-transformer#transformers.TableTransformerModel"),d(QU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),d(WU,"href","/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerModel"),d(UU,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),d(HU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(JU,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),d(YU,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(ZU,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),d(KU,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),d(eH,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),d(oH,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(rH,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),d(tH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),d(aH,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(nH,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel"),d(sH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(lH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),d(iH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),d(dH,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperModel"),d(mH,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel"),d(cH,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),d(fH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),d(gH,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(hH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(uH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(pH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),d(_H,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),d(bH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lv,"id","transformers.AutoModelForPreTraining"),d(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lv,"href","#transformers.AutoModelForPreTraining"),d(zd,"class","relative group"),d(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MH,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),d(EH,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(CH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),d(wH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(AH,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),d(LH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(yH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(xH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d($H,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(kH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(SH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(RH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),d(PH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining"),d(BH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(IH,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),d(NH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),d(qH,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(jH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(DH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(GH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(OH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(VH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(XH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),d(zH,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(QH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(WH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(UH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(HH,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(JH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),d(YH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(ZH,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(KH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(eJ,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForPreTraining"),d(oJ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),d(rJ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(tJ,"href","/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersForConditionalGeneration"),d(aJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(nJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(sJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(lJ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(iJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(dJ,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),d(mJ,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(cJ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(fJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(gJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),d(hJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(uJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(pJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(_J,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lF,"id","transformers.AutoModelForCausalLM"),d(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lF,"href","#transformers.AutoModelForCausalLM"),d(Ud,"class","relative group"),d(bJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),d(MJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),d(EJ,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(CJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(wJ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(AJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(LJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(yJ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),d(xJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),d($J,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),d(kJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(SJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(RJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),d(PJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM"),d(BJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(IJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(NJ,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),d(qJ,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM"),d(jJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(DJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),d(GJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),d(OJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(VJ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),d(XJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(zJ,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),d(QJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(WJ,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(UJ,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(HJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(JJ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(YJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(ZJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(KJ,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForCausalLM"),d(eY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(oY,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(rY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(tY,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(aY,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(nY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(sY,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(lY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(iY,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(dY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eT,"id","transformers.AutoModelForDepthEstimation"),d(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eT,"href","#transformers.AutoModelForDepthEstimation"),d(Yd,"class","relative group"),d(mY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gY,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForDepthEstimation"),d(hY,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNForDepthEstimation"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sT,"id","transformers.AutoModelForMaskedLM"),d(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sT,"href","#transformers.AutoModelForMaskedLM"),d(em,"class","relative group"),d(uY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_Y,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bY,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(vY,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(FY,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),d(TY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(MY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(EY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(CY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(wY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(AY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(LY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(yY,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(xY,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM"),d($Y,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(kY,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(SY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(RY,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(PY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(BY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(IY,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),d(NY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(qY,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(jY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(DY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(GY,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(OY,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),d(VY,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(XY,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(zY,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(QY,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(WY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(UY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(HY,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForMaskedLM"),d(JY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(YY,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(ZY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(KY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(eZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(oZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(rZ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JT,"id","transformers.AutoModelForSeq2SeqLM"),d(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(JT,"href","#transformers.AutoModelForSeq2SeqLM"),d(tm,"class","relative group"),d(tZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(lZ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(iZ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(dZ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(mZ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(cZ,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(fZ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(gZ,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(hZ,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(uZ,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),d(pZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(_Z,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(bZ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(vZ,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(FZ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(TZ,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),d(MZ,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(EZ,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(CZ,"href","/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersForConditionalGeneration"),d(wZ,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(AZ,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TM,"id","transformers.AutoModelForSequenceClassification"),d(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TM,"href","#transformers.AutoModelForSequenceClassification"),d(sm,"class","relative group"),d(LZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($Z,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(kZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(SZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),d(RZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(PZ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(BZ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),d(IZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(NZ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(qZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(jZ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(DZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(GZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(OZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(VZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(XZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(zZ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification"),d(QZ,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForSequenceClassification"),d(WZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(UZ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(HZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(JZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(YZ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(ZZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(KZ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(eK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(oK,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(rK,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),d(tK,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),d(aK,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltForSequenceClassification"),d(nK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(sK,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),d(lK,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification"),d(iK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(dK,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(mK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(cK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(fK,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),d(gK,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),d(hK,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(uK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(pK,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),d(_K,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(bK,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(vK,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(FK,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(TK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(MK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(EK,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForSequenceClassification"),d(CK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(wK,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(AK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(LK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(yK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(xK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d($K,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(kK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(SK,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yE,"id","transformers.AutoModelForMultipleChoice"),d(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yE,"href","#transformers.AutoModelForMultipleChoice"),d(dm,"class","relative group"),d(RK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IK,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(NK,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),d(qK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(jK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(DK,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(GK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(OK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(VK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),d(XK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(zK,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(QK,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice"),d(WK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(UK,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(HK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(JK,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(YK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(ZK,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),d(KK,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(eee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(oee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(ree,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),d(tee,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(aee,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(nee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(see,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(lee,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForMultipleChoice"),d(iee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(dee,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(mee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(cee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(fee,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(gee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(hee,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c4,"id","transformers.AutoModelForNextSentencePrediction"),d(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c4,"href","#transformers.AutoModelForNextSentencePrediction"),d(fm,"class","relative group"),d(uee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_ee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bee,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(vee,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction"),d(Fee,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(Tee,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(Mee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(Eee,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),d(Cee,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M4,"id","transformers.AutoModelForTokenClassification"),d(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M4,"href","#transformers.AutoModelForTokenClassification"),d(um,"class","relative group"),d(wee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Aee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yee,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(xee,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),d($ee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(kee,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),d(See,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(Ree,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Pee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(Bee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Iee,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(Nee,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(qee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(jee,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Dee,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification"),d(Gee,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForTokenClassification"),d(Oee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Vee,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Xee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(zee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Qee,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Wee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Uee,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Hee,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),d(Jee,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltForTokenClassification"),d(Yee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Zee,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),d(Kee,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification"),d(eoe,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(ooe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(roe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(toe,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),d(aoe,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(noe,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(soe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(loe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(ioe,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForTokenClassification"),d(doe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(moe,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(coe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(foe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(goe,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(hoe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(uoe,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hC,"id","transformers.AutoModelForQuestionAnswering"),d(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hC,"href","#transformers.AutoModelForQuestionAnswering"),d(bm,"class","relative group"),d(poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_oe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(boe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(voe,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Foe,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Toe,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Moe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Eoe,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Coe,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForQuestionAnswering"),d(woe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Aoe,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Loe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(yoe,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(xoe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d($oe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(koe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Soe,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Roe,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering"),d(Poe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(Boe,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(Ioe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(Noe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(qoe,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(joe,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(Doe,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),d(Goe,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(Ooe,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltForQuestionAnswering"),d(Voe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(Xoe,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),d(zoe,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(Qoe,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering"),d(Woe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(Uoe,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(Hoe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(Joe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(Yoe,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),d(Zoe,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),d(Koe,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(ere,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForQuestionAnswering"),d(ore,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(rre,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(tre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(are,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(nre,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForQuestionAnswering"),d(sre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(lre,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(ire,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(dre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(mre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(cre,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(fre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(gre,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(g3,"id","transformers.AutoModelForTableQuestionAnswering"),d(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g3,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Tm,"class","relative group"),d(hre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ure,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_re,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(b3,"id","transformers.AutoModelForDocumentQuestionAnswering"),d(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b3,"href","#transformers.AutoModelForDocumentQuestionAnswering"),d(Cm,"class","relative group"),d(bre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tre,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering"),d(Mre,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(Ere,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w3,"id","transformers.AutoModelForImageClassification"),d(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w3,"href","#transformers.AutoModelForImageClassification"),d(ym,"class","relative group"),d(Cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Are,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lre,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),d(yre,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(xre,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),d($re,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(kre,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),d(Sre,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Rre,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Pre,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),d(Bre,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),d(Ire,"href","/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForImageClassification"),d(Nre,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),d(qre,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(jre,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(Dre,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Gre,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Ore,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(Vre,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(Xre,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(zre,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),d(Qre,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),d(Wre,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),d(Ure,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),d(Hre,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z3,"id","transformers.AutoModelForVideoClassification"),d(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z3,"href","#transformers.AutoModelForVideoClassification"),d(km,"class","relative group"),d(Jre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Zre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kre,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J3,"id","transformers.AutoModelForVision2Seq"),d(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J3,"href","#transformers.AutoModelForVision2Seq"),d(Pm,"class","relative group"),d(ete,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ote,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tte,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o5,"id","transformers.AutoModelForVisualQuestionAnswering"),d(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o5,"href","#transformers.AutoModelForVisualQuestionAnswering"),d(Nm,"class","relative group"),d(ate,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lte,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(s5,"id","transformers.AutoModelForAudioClassification"),d(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s5,"href","#transformers.AutoModelForAudioClassification"),d(Dm,"class","relative group"),d(ite,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cte,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(fte,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(gte,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(hte,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(ute,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(pte,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(_te,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(bte,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),d(vte,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v5,"id","transformers.AutoModelForAudioFrameClassification"),d(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v5,"href","#transformers.AutoModelForAudioFrameClassification"),d(Vm,"class","relative group"),d(Fte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Mte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ete,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(Cte,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(wte,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(Ate,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),d(Lte,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y5,"id","transformers.AutoModelForCTC"),d(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y5,"href","#transformers.AutoModelForCTC"),d(Qm,"class","relative group"),d(yte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($te,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kte,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(Ste,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),d(Rte,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),d(Pte,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),d(Bte,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),d(Ite,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(Nte,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(qte,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(jte,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),d(Dte,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O5,"id","transformers.AutoModelForSpeechSeq2Seq"),d(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O5,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Hm,"class","relative group"),d(Gte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ote,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Vte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xte,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(zte,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Qte,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperForConditionalGeneration"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H5,"id","transformers.AutoModelForAudioXVector"),d(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H5,"href","#transformers.AutoModelForAudioXVector"),d(Km,"class","relative group"),d(Wte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ute,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Hte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jte,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(Yte,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(Zte,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(Kte,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),d(eae,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a0,"id","transformers.AutoModelForMaskedImageModeling"),d(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a0,"href","#transformers.AutoModelForMaskedImageModeling"),d(rc,"class","relative group"),d(oae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aae,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(nae,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(sae,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),d(lae,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f0,"id","transformers.AutoModelForObjectDetection"),d(f0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f0,"href","#transformers.AutoModelForObjectDetection"),d(nc,"class","relative group"),d(iae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cae,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection"),d(fae,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),d(gae,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),d(hae,"href","/docs/transformers/main/en/model_doc/table-transformer#transformers.TableTransformerForObjectDetection"),d(uae,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T0,"id","transformers.AutoModelForImageSegmentation"),d(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T0,"href","#transformers.AutoModelForImageSegmentation"),d(ic,"class","relative group"),d(pae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_ae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vae,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A0,"id","transformers.AutoModelForSemanticSegmentation"),d(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A0,"href","#transformers.AutoModelForSemanticSegmentation"),d(cc,"class","relative group"),d(Fae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Mae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Eae,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(Cae,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(wae,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(Aae,"href","/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForSemanticSegmentation"),d(Lae,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),d(yae,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I0,"id","transformers.AutoModelForInstanceSegmentation"),d(I0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I0,"href","#transformers.AutoModelForInstanceSegmentation"),d(hc,"class","relative group"),d(xae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($ae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sae,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G0,"id","transformers.AutoModelForZeroShotObjectDetection"),d(G0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G0,"href","#transformers.AutoModelForZeroShotObjectDetection"),d(_c,"class","relative group"),d(Rae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Bae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Iae,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q0,"id","transformers.TFAutoModel"),d(Q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q0,"href","#transformers.TFAutoModel"),d(Fc,"class","relative group"),d(Nae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dae,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),d(Gae,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),d(Oae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),d(Vae,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(Xae,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(zae,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),d(Qae,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),d(Wae,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),d(Uae,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),d(Hae,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),d(Jae,"href","/docs/transformers/main/en/model_doc/cvt#transformers.TFCvtModel"),d(Yae,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),d(Zae,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),d(Kae,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(ene,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),d(one,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(rne,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(tne,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),d(ane,"href","/docs/transformers/main/en/model_doc/esm#transformers.TFEsmModel"),d(nne,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(sne,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),d(lne,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(ine,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),d(dne,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),d(mne,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel"),d(cne,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),d(fne,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(gne,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),d(hne,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),d(une,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),d(pne,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),d(_ne,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),d(bne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),d(vne,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(Fne,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),d(Tne,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),d(Mne,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),d(Ene,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(Cne,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),d(wne,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),d(Ane,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),d(Lne,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),d(yne,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),d(xne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),d($ne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),d(kne,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),d(Sne,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(Rne,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),d(Pne,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),d(Bne,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),d(Ine,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(Nne,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),d(qne,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(jne,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(Dne,"href","/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperModel"),d(Gne,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),d(One,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),d(Vne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(Xne,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zw,"id","transformers.TFAutoModelForPreTraining"),d(Zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zw,"href","#transformers.TFAutoModelForPreTraining"),d(Ec,"class","relative group"),d(zne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Wne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Une,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(Hne,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(Jne,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),d(Yne,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(Zne,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(Kne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(ese,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(ose,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(rse,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(tse,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(ase,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(nse,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(sse,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(lse,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(ise,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(dse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(mse,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(cse,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(fse,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(gse,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(hse,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(use,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(pse,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CA,"id","transformers.TFAutoModelForCausalLM"),d(CA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CA,"href","#transformers.TFAutoModelForCausalLM"),d(Ac,"class","relative group"),d(_se,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fse,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(Tse,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(Mse,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(Ese,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(Cse,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(wse,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(Ase,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),d(Lse,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(yse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(xse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d($se,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(kse,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),d(Sse,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(Rse,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GA,"id","transformers.TFAutoModelForImageClassification"),d(GA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GA,"href","#transformers.TFAutoModelForImageClassification"),d(xc,"class","relative group"),d(Pse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Ise,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nse,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(qse,"href","/docs/transformers/main/en/model_doc/cvt#transformers.TFCvtForImageClassification"),d(jse,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),d(Dse,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),d(Gse,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),d(Ose,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),d(Vse,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),d(Xse,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),d(zse,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),d(Qse,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),d(Wse,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KA,"id","transformers.TFAutoModelForSemanticSegmentation"),d(KA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KA,"href","#transformers.TFAutoModelForSemanticSegmentation"),d(Sc,"class","relative group"),d(Use,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yse,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),d(Zse,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),d(Kse,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n6,"id","transformers.TFAutoModelForMaskedLM"),d(n6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n6,"href","#transformers.TFAutoModelForMaskedLM"),d(Ic,"class","relative group"),d(ele,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ole,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tle,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(ale,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(nle,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(sle,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(lle,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(ile,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(dle,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(mle,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(cle,"href","/docs/transformers/main/en/model_doc/esm#transformers.TFEsmForMaskedLM"),d(fle,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(gle,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(hle,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(ule,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(ple,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(_le,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(ble,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(vle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(Fle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(Tle,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(Mle,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(Ele,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x6,"id","transformers.TFAutoModelForSeq2SeqLM"),d(x6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x6,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(jc,"class","relative group"),d(Cle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Ale,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lle,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(yle,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(xle,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d($le,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(kle,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(Sle,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),d(Rle,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(Ple,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(Ble,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(Ile,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O6,"id","transformers.TFAutoModelForSequenceClassification"),d(O6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O6,"href","#transformers.TFAutoModelForSequenceClassification"),d(Oc,"class","relative group"),d(Nle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dle,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(Gle,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(Ole,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(Vle,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(Xle,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(zle,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(Qle,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(Wle,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(Ule,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(Hle,"href","/docs/transformers/main/en/model_doc/esm#transformers.TFEsmForSequenceClassification"),d(Jle,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(Yle,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(Zle,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(Kle,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(eie,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(oie,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),d(rie,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(tie,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(aie,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(nie,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(sie,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(lie,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(iie,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(die,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(mie,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(cie,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(fie,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(gie,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v7,"id","transformers.TFAutoModelForMultipleChoice"),d(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v7,"href","#transformers.TFAutoModelForMultipleChoice"),d(zc,"class","relative group"),d(hie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_ie,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(bie,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(vie,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Fie,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(Tie,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Mie,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Eie,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Cie,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(wie,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Aie,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Lie,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(yie,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(xie,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d($ie,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(kie,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Sie,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Rie,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j7,"id","transformers.TFAutoModelForNextSentencePrediction"),d(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j7,"href","#transformers.TFAutoModelForNextSentencePrediction"),d(Uc,"class","relative group"),d(Pie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Iie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nie,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),d(qie,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X7,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(X7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Yc,"class","relative group"),d(jie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Die,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Gie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oie,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U7,"id","transformers.TFAutoModelForDocumentQuestionAnswering"),d(U7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U7,"href","#transformers.TFAutoModelForDocumentQuestionAnswering"),d(ef,"class","relative group"),d(Vie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qie,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z7,"id","transformers.TFAutoModelForTokenClassification"),d(Z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z7,"href","#transformers.TFAutoModelForTokenClassification"),d(tf,"class","relative group"),d(Wie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Uie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Hie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jie,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Yie,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Zie,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Kie,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(ede,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(ode,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(rde,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(tde,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(ade,"href","/docs/transformers/main/en/model_doc/esm#transformers.TFEsmForTokenClassification"),d(nde,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(sde,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(lde,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(ide,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),d(dde,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(mde,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(cde,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(fde,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(gde,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(hde,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(ude,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(pde,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(_de,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E8,"id","transformers.TFAutoModelForQuestionAnswering"),d(E8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E8,"href","#transformers.TFAutoModelForQuestionAnswering"),d(sf,"class","relative group"),d(bde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tde,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(Mde,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(Ede,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(Cde,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(wde,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(Ade,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(Lde,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(yde,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(xde,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d($de,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(kde,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(Sde,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),d(Rde,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(Pde,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(Bde,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(Ide,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(Nde,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(qde,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(jde,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(Dde,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(Gde,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W8,"id","transformers.TFAutoModelForVision2Seq"),d(W8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W8,"href","#transformers.TFAutoModelForVision2Seq"),d(mf,"class","relative group"),d(Ode,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Xde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zde,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y8,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(Y8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y8,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(gf,"class","relative group"),d(Qde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Ude,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hde,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Jde,"href","/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperForConditionalGeneration"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rL,"id","transformers.FlaxAutoModel"),d(rL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rL,"href","#transformers.FlaxAutoModel"),d(pf,"class","relative group"),d(Yde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Kde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eme,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),d(ome,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),d(rme,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),d(tme,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),d(ame,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(nme,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(sme,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(lme,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),d(ime,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(dme,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),d(mme,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(cme,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(fme,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(gme,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(hme,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),d(ume,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),d(pme,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),d(_me,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),d(bme,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(vme,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(Fme,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(Tme,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),d(Mme,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(Eme,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),d(Cme,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(wme,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(Ame,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SL,"id","transformers.FlaxAutoModelForCausalLM"),d(SL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SL,"href","#transformers.FlaxAutoModelForCausalLM"),d(vf,"class","relative group"),d(Lme,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yme,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xme,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($me,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(kme,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),d(Sme,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),d(Rme,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),d(Pme,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(Bme,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(Ime,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(Nme,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),d(qme,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),d(jme,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zL,"id","transformers.FlaxAutoModelForPreTraining"),d(zL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zL,"href","#transformers.FlaxAutoModelForPreTraining"),d(Mf,"class","relative group"),d(Dme,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gme,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Ome,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vme,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(Xme,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(zme,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(Qme,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(Wme,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(Ume,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(Hme,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(Jme,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(Yme,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(Zme,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Kme,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ece,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(oce,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ly,"id","transformers.FlaxAutoModelForMaskedLM"),d(ly,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ly,"href","#transformers.FlaxAutoModelForMaskedLM"),d(wf,"class","relative group"),d(rce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ace,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nce,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(sce,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(lce,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(ice,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(dce,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(mce,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(cce,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(fce,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(gce,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(hce,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fy,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(Fy,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Fy,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(yf,"class","relative group"),d(uce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_ce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bce,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(vce,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(Fce,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(Tce,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(Mce,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(Ece,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(Cce,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(wce,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(Ace,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(Lce,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ry,"id","transformers.FlaxAutoModelForSequenceClassification"),d(Ry,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ry,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(kf,"class","relative group"),d(yce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($ce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kce,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(Sce,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(Rce,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(Pce,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(Bce,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(Ice,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(Nce,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(qce,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(jce,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(Dce,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qy,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(Qy,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qy,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(Pf,"class","relative group"),d(Gce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Oce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Vce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xce,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(zce,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(Qce,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(Wce,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Uce,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Hce,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(Jce,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(Yce,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Zce,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Kce,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n9,"id","transformers.FlaxAutoModelForTokenClassification"),d(n9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n9,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Nf,"class","relative group"),d(efe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ofe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tfe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(afe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(nfe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(sfe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(lfe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(ife,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(dfe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(mfe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(p9,"id","transformers.FlaxAutoModelForMultipleChoice"),d(p9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p9,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Df,"class","relative group"),d(cfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ffe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hfe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(ufe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(pfe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(_fe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(bfe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(vfe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Ffe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Tfe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L9,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(L9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L9,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Vf,"class","relative group"),d(Mfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Efe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Cfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wfe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k9,"id","transformers.FlaxAutoModelForImageClassification"),d(k9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k9,"href","#transformers.FlaxAutoModelForImageClassification"),d(Qf,"class","relative group"),d(Afe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(La,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xfe,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d($fe,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I9,"id","transformers.FlaxAutoModelForVision2Seq"),d(I9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I9,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Hf,"class","relative group"),d(kfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Sfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Rfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pfe,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,_){e(document.head,g),b(c,v,_),b(c,u,_),e(u,f),e(f,p),M(m,p,null),e(u,h),e(u,He),e(He,Ld),b(c,og,_),b(c,wt,_),e(wt,yd),e(wt,xd),e(xd,Mk),e(wt,rg),b(c,Qe,_),b(c,Ze,_),e(Ze,$d),e(Ze,_s),e(_s,Ek),e(Ze,bs),e(Ze,vs),e(vs,Ck),e(Ze,kd),e(Ze,Fs),e(Fs,wk),e(Ze,Sd),b(c,tg,_),M(ln,c,_),b(c,Ke,_),b(c,ye,_),e(ye,Wq),e(ye,Rd),e(Rd,Uq),e(ye,Hq),b(c,Po,_),b(c,dn,_),e(dn,Jq),e(dn,ag),e(ag,Yq),e(dn,cgo),b(c,vio,_),b(c,Pd,_),e(Pd,ng),e(ng,Vhe),M(Ak,Vhe,null),e(Pd,fgo),e(Pd,Xhe),e(Xhe,ggo),b(c,Fio,_),b(c,Ts,_),e(Ts,hgo),e(Ts,zhe),e(zhe,ugo),e(Ts,pgo),e(Ts,Qhe),e(Qhe,_go),e(Ts,bgo),b(c,Tio,_),M(Lk,c,_),b(c,Mio,_),b(c,Zq,_),e(Zq,vgo),b(c,Eio,_),M(sg,c,_),b(c,Cio,_),b(c,Bd,_),e(Bd,lg),e(lg,Whe),M(yk,Whe,null),e(Bd,Fgo),e(Bd,Uhe),e(Uhe,Tgo),b(c,wio,_),b(c,Bo,_),M(xk,Bo,null),e(Bo,Mgo),e(Bo,$k),e($k,Ego),e($k,Kq),e(Kq,Cgo),e($k,wgo),e(Bo,Ago),e(Bo,kk),e(kk,Lgo),e(kk,Hhe),e(Hhe,ygo),e(kk,xgo),e(Bo,$go),e(Bo,Vr),M(Sk,Vr,null),e(Vr,kgo),e(Vr,Jhe),e(Jhe,Sgo),e(Vr,Rgo),e(Vr,Id),e(Id,Pgo),e(Id,Yhe),e(Yhe,Bgo),e(Id,Igo),e(Id,Zhe),e(Zhe,Ngo),e(Id,qgo),e(Vr,jgo),e(Vr,A),e(A,ig),e(ig,Khe),e(Khe,Dgo),e(ig,Ggo),e(ig,ej),e(ej,Ogo),e(ig,Vgo),e(A,Xgo),e(A,dg),e(dg,eue),e(eue,zgo),e(dg,Qgo),e(dg,oj),e(oj,Wgo),e(dg,Ugo),e(A,Hgo),e(A,mg),e(mg,oue),e(oue,Jgo),e(mg,Ygo),e(mg,rj),e(rj,Zgo),e(mg,Kgo),e(A,eho),e(A,cg),e(cg,rue),e(rue,oho),e(cg,rho),e(cg,tj),e(tj,tho),e(cg,aho),e(A,nho),e(A,fg),e(fg,tue),e(tue,sho),e(fg,lho),e(fg,aj),e(aj,iho),e(fg,dho),e(A,mho),e(A,gg),e(gg,aue),e(aue,cho),e(gg,fho),e(gg,nj),e(nj,gho),e(gg,hho),e(A,uho),e(A,hg),e(hg,nue),e(nue,pho),e(hg,_ho),e(hg,sj),e(sj,bho),e(hg,vho),e(A,Fho),e(A,ug),e(ug,sue),e(sue,Tho),e(ug,Mho),e(ug,lj),e(lj,Eho),e(ug,Cho),e(A,who),e(A,pg),e(pg,lue),e(lue,Aho),e(pg,Lho),e(pg,ij),e(ij,yho),e(pg,xho),e(A,$ho),e(A,_g),e(_g,iue),e(iue,kho),e(_g,Sho),e(_g,dj),e(dj,Rho),e(_g,Pho),e(A,Bho),e(A,bg),e(bg,due),e(due,Iho),e(bg,Nho),e(bg,mj),e(mj,qho),e(bg,jho),e(A,Dho),e(A,vg),e(vg,mue),e(mue,Gho),e(vg,Oho),e(vg,cj),e(cj,Vho),e(vg,Xho),e(A,zho),e(A,Fg),e(Fg,cue),e(cue,Qho),e(Fg,Who),e(Fg,fj),e(fj,Uho),e(Fg,Hho),e(A,Jho),e(A,Tg),e(Tg,fue),e(fue,Yho),e(Tg,Zho),e(Tg,gj),e(gj,Kho),e(Tg,euo),e(A,ouo),e(A,Mg),e(Mg,gue),e(gue,ruo),e(Mg,tuo),e(Mg,hj),e(hj,auo),e(Mg,nuo),e(A,suo),e(A,Eg),e(Eg,hue),e(hue,luo),e(Eg,iuo),e(Eg,uj),e(uj,duo),e(Eg,muo),e(A,cuo),e(A,Cg),e(Cg,uue),e(uue,fuo),e(Cg,guo),e(Cg,pj),e(pj,huo),e(Cg,uuo),e(A,puo),e(A,wg),e(wg,pue),e(pue,_uo),e(wg,buo),e(wg,_j),e(_j,vuo),e(wg,Fuo),e(A,Tuo),e(A,Ag),e(Ag,_ue),e(_ue,Muo),e(Ag,Euo),e(Ag,bj),e(bj,Cuo),e(Ag,wuo),e(A,Auo),e(A,Lg),e(Lg,bue),e(bue,Luo),e(Lg,yuo),e(Lg,vj),e(vj,xuo),e(Lg,$uo),e(A,kuo),e(A,yg),e(yg,vue),e(vue,Suo),e(yg,Ruo),e(yg,Fj),e(Fj,Puo),e(yg,Buo),e(A,Iuo),e(A,xg),e(xg,Fue),e(Fue,Nuo),e(xg,quo),e(xg,Tj),e(Tj,juo),e(xg,Duo),e(A,Guo),e(A,$g),e($g,Tue),e(Tue,Ouo),e($g,Vuo),e($g,Mj),e(Mj,Xuo),e($g,zuo),e(A,Quo),e(A,kg),e(kg,Mue),e(Mue,Wuo),e(kg,Uuo),e(kg,Ej),e(Ej,Huo),e(kg,Juo),e(A,Yuo),e(A,Sg),e(Sg,Eue),e(Eue,Zuo),e(Sg,Kuo),e(Sg,Cj),e(Cj,epo),e(Sg,opo),e(A,rpo),e(A,Rg),e(Rg,Cue),e(Cue,tpo),e(Rg,apo),e(Rg,wj),e(wj,npo),e(Rg,spo),e(A,lpo),e(A,Pg),e(Pg,wue),e(wue,ipo),e(Pg,dpo),e(Pg,Aj),e(Aj,mpo),e(Pg,cpo),e(A,fpo),e(A,Bg),e(Bg,Aue),e(Aue,gpo),e(Bg,hpo),e(Bg,Lj),e(Lj,upo),e(Bg,ppo),e(A,_po),e(A,Ig),e(Ig,Lue),e(Lue,bpo),e(Ig,vpo),e(Ig,yj),e(yj,Fpo),e(Ig,Tpo),e(A,Mpo),e(A,Ng),e(Ng,yue),e(yue,Epo),e(Ng,Cpo),e(Ng,xj),e(xj,wpo),e(Ng,Apo),e(A,Lpo),e(A,qg),e(qg,xue),e(xue,ypo),e(qg,xpo),e(qg,$j),e($j,$po),e(qg,kpo),e(A,Spo),e(A,jg),e(jg,$ue),e($ue,Rpo),e(jg,Ppo),e(jg,kj),e(kj,Bpo),e(jg,Ipo),e(A,Npo),e(A,Dg),e(Dg,kue),e(kue,qpo),e(Dg,jpo),e(Dg,Sj),e(Sj,Dpo),e(Dg,Gpo),e(A,Opo),e(A,Gg),e(Gg,Sue),e(Sue,Vpo),e(Gg,Xpo),e(Gg,Rj),e(Rj,zpo),e(Gg,Qpo),e(A,Wpo),e(A,Og),e(Og,Rue),e(Rue,Upo),e(Og,Hpo),e(Og,Pj),e(Pj,Jpo),e(Og,Ypo),e(A,Zpo),e(A,Vg),e(Vg,Pue),e(Pue,Kpo),e(Vg,e_o),e(Vg,Bj),e(Bj,o_o),e(Vg,r_o),e(A,t_o),e(A,Xg),e(Xg,Bue),e(Bue,a_o),e(Xg,n_o),e(Xg,Ij),e(Ij,s_o),e(Xg,l_o),e(A,i_o),e(A,zg),e(zg,Iue),e(Iue,d_o),e(zg,m_o),e(zg,Nj),e(Nj,c_o),e(zg,f_o),e(A,g_o),e(A,Qg),e(Qg,Nue),e(Nue,h_o),e(Qg,u_o),e(Qg,qj),e(qj,p_o),e(Qg,__o),e(A,b_o),e(A,Wg),e(Wg,que),e(que,v_o),e(Wg,F_o),e(Wg,jj),e(jj,T_o),e(Wg,M_o),e(A,E_o),e(A,Ug),e(Ug,jue),e(jue,C_o),e(Ug,w_o),e(Ug,Dj),e(Dj,A_o),e(Ug,L_o),e(A,y_o),e(A,Hg),e(Hg,Due),e(Due,x_o),e(Hg,$_o),e(Hg,Gj),e(Gj,k_o),e(Hg,S_o),e(A,R_o),e(A,Jg),e(Jg,Gue),e(Gue,P_o),e(Jg,B_o),e(Jg,Oj),e(Oj,I_o),e(Jg,N_o),e(A,q_o),e(A,Yg),e(Yg,Oue),e(Oue,j_o),e(Yg,D_o),e(Yg,Vj),e(Vj,G_o),e(Yg,O_o),e(A,V_o),e(A,Zg),e(Zg,Vue),e(Vue,X_o),e(Zg,z_o),e(Zg,Xj),e(Xj,Q_o),e(Zg,W_o),e(A,U_o),e(A,Kg),e(Kg,Xue),e(Xue,H_o),e(Kg,J_o),e(Kg,zj),e(zj,Y_o),e(Kg,Z_o),e(A,K_o),e(A,eh),e(eh,zue),e(zue,e1o),e(eh,o1o),e(eh,Qj),e(Qj,r1o),e(eh,t1o),e(A,a1o),e(A,oh),e(oh,Que),e(Que,n1o),e(oh,s1o),e(oh,Wj),e(Wj,l1o),e(oh,i1o),e(A,d1o),e(A,rh),e(rh,Wue),e(Wue,m1o),e(rh,c1o),e(rh,Uj),e(Uj,f1o),e(rh,g1o),e(A,h1o),e(A,th),e(th,Uue),e(Uue,u1o),e(th,p1o),e(th,Hj),e(Hj,_1o),e(th,b1o),e(A,v1o),e(A,ah),e(ah,Hue),e(Hue,F1o),e(ah,T1o),e(ah,Jj),e(Jj,M1o),e(ah,E1o),e(A,C1o),e(A,nh),e(nh,Jue),e(Jue,w1o),e(nh,A1o),e(nh,Yj),e(Yj,L1o),e(nh,y1o),e(A,x1o),e(A,sh),e(sh,Yue),e(Yue,$1o),e(sh,k1o),e(sh,Zj),e(Zj,S1o),e(sh,R1o),e(A,P1o),e(A,lh),e(lh,Zue),e(Zue,B1o),e(lh,I1o),e(lh,Kj),e(Kj,N1o),e(lh,q1o),e(A,j1o),e(A,ih),e(ih,Kue),e(Kue,D1o),e(ih,G1o),e(ih,eD),e(eD,O1o),e(ih,V1o),e(A,X1o),e(A,dh),e(dh,epe),e(epe,z1o),e(dh,Q1o),e(dh,oD),e(oD,W1o),e(dh,U1o),e(A,H1o),e(A,mh),e(mh,ope),e(ope,J1o),e(mh,Y1o),e(mh,rD),e(rD,Z1o),e(mh,K1o),e(A,e2o),e(A,ch),e(ch,rpe),e(rpe,o2o),e(ch,r2o),e(ch,tD),e(tD,t2o),e(ch,a2o),e(A,n2o),e(A,fh),e(fh,tpe),e(tpe,s2o),e(fh,l2o),e(fh,aD),e(aD,i2o),e(fh,d2o),e(A,m2o),e(A,gh),e(gh,ape),e(ape,c2o),e(gh,f2o),e(gh,nD),e(nD,g2o),e(gh,h2o),e(A,u2o),e(A,hh),e(hh,npe),e(npe,p2o),e(hh,_2o),e(hh,sD),e(sD,b2o),e(hh,v2o),e(A,F2o),e(A,uh),e(uh,spe),e(spe,T2o),e(uh,M2o),e(uh,lD),e(lD,E2o),e(uh,C2o),e(A,w2o),e(A,ph),e(ph,lpe),e(lpe,A2o),e(ph,L2o),e(ph,iD),e(iD,y2o),e(ph,x2o),e(A,$2o),e(A,_h),e(_h,ipe),e(ipe,k2o),e(_h,S2o),e(_h,dD),e(dD,R2o),e(_h,P2o),e(A,B2o),e(A,bh),e(bh,dpe),e(dpe,I2o),e(bh,N2o),e(bh,mD),e(mD,q2o),e(bh,j2o),e(A,D2o),e(A,vh),e(vh,mpe),e(mpe,G2o),e(vh,O2o),e(vh,cD),e(cD,V2o),e(vh,X2o),e(A,z2o),e(A,Fh),e(Fh,cpe),e(cpe,Q2o),e(Fh,W2o),e(Fh,fD),e(fD,U2o),e(Fh,H2o),e(A,J2o),e(A,Th),e(Th,fpe),e(fpe,Y2o),e(Th,Z2o),e(Th,gD),e(gD,K2o),e(Th,ebo),e(A,obo),e(A,Mh),e(Mh,gpe),e(gpe,rbo),e(Mh,tbo),e(Mh,hD),e(hD,abo),e(Mh,nbo),e(A,sbo),e(A,Eh),e(Eh,hpe),e(hpe,lbo),e(Eh,ibo),e(Eh,uD),e(uD,dbo),e(Eh,mbo),e(A,cbo),e(A,Ch),e(Ch,upe),e(upe,fbo),e(Ch,gbo),e(Ch,pD),e(pD,hbo),e(Ch,ubo),e(A,pbo),e(A,wh),e(wh,ppe),e(ppe,_bo),e(wh,bbo),e(wh,_D),e(_D,vbo),e(wh,Fbo),e(A,Tbo),e(A,Ah),e(Ah,_pe),e(_pe,Mbo),e(Ah,Ebo),e(Ah,bD),e(bD,Cbo),e(Ah,wbo),e(A,Abo),e(A,Lh),e(Lh,bpe),e(bpe,Lbo),e(Lh,ybo),e(Lh,vD),e(vD,xbo),e(Lh,$bo),e(A,kbo),e(A,yh),e(yh,vpe),e(vpe,Sbo),e(yh,Rbo),e(yh,FD),e(FD,Pbo),e(yh,Bbo),e(A,Ibo),e(A,xh),e(xh,Fpe),e(Fpe,Nbo),e(xh,qbo),e(xh,TD),e(TD,jbo),e(xh,Dbo),e(A,Gbo),e(A,$h),e($h,Tpe),e(Tpe,Obo),e($h,Vbo),e($h,MD),e(MD,Xbo),e($h,zbo),e(A,Qbo),e(A,kh),e(kh,Mpe),e(Mpe,Wbo),e(kh,Ubo),e(kh,ED),e(ED,Hbo),e(kh,Jbo),e(A,Ybo),e(A,Sh),e(Sh,Epe),e(Epe,Zbo),e(Sh,Kbo),e(Sh,CD),e(CD,evo),e(Sh,ovo),e(A,rvo),e(A,Rh),e(Rh,Cpe),e(Cpe,tvo),e(Rh,avo),e(Rh,wD),e(wD,nvo),e(Rh,svo),e(A,lvo),e(A,Ph),e(Ph,wpe),e(wpe,ivo),e(Ph,dvo),e(Ph,AD),e(AD,mvo),e(Ph,cvo),e(A,fvo),e(A,Bh),e(Bh,Ape),e(Ape,gvo),e(Bh,hvo),e(Bh,LD),e(LD,uvo),e(Bh,pvo),e(A,_vo),e(A,Ih),e(Ih,Lpe),e(Lpe,bvo),e(Ih,vvo),e(Ih,yD),e(yD,Fvo),e(Ih,Tvo),e(A,Mvo),e(A,Nh),e(Nh,ype),e(ype,Evo),e(Nh,Cvo),e(Nh,xD),e(xD,wvo),e(Nh,Avo),e(A,Lvo),e(A,qh),e(qh,xpe),e(xpe,yvo),e(qh,xvo),e(qh,$D),e($D,$vo),e(qh,kvo),e(A,Svo),e(A,jh),e(jh,$pe),e($pe,Rvo),e(jh,Pvo),e(jh,kD),e(kD,Bvo),e(jh,Ivo),e(A,Nvo),e(A,Dh),e(Dh,kpe),e(kpe,qvo),e(Dh,jvo),e(Dh,SD),e(SD,Dvo),e(Dh,Gvo),e(A,Ovo),e(A,Gh),e(Gh,Spe),e(Spe,Vvo),e(Gh,Xvo),e(Gh,RD),e(RD,zvo),e(Gh,Qvo),e(A,Wvo),e(A,Oh),e(Oh,Rpe),e(Rpe,Uvo),e(Oh,Hvo),e(Oh,PD),e(PD,Jvo),e(Oh,Yvo),e(A,Zvo),e(A,Vh),e(Vh,Ppe),e(Ppe,Kvo),e(Vh,eFo),e(Vh,BD),e(BD,oFo),e(Vh,rFo),e(A,tFo),e(A,Xh),e(Xh,Bpe),e(Bpe,aFo),e(Xh,nFo),e(Xh,ID),e(ID,sFo),e(Xh,lFo),e(A,iFo),e(A,zh),e(zh,Ipe),e(Ipe,dFo),e(zh,mFo),e(zh,ND),e(ND,cFo),e(zh,fFo),e(A,gFo),e(A,Qh),e(Qh,Npe),e(Npe,hFo),e(Qh,uFo),e(Qh,qD),e(qD,pFo),e(Qh,_Fo),e(A,bFo),e(A,Wh),e(Wh,qpe),e(qpe,vFo),e(Wh,FFo),e(Wh,jD),e(jD,TFo),e(Wh,MFo),e(A,EFo),e(A,Uh),e(Uh,jpe),e(jpe,CFo),e(Uh,wFo),e(Uh,DD),e(DD,AFo),e(Uh,LFo),e(A,yFo),e(A,Hh),e(Hh,Dpe),e(Dpe,xFo),e(Hh,$Fo),e(Hh,GD),e(GD,kFo),e(Hh,SFo),e(A,RFo),e(A,Jh),e(Jh,Gpe),e(Gpe,PFo),e(Jh,BFo),e(Jh,OD),e(OD,IFo),e(Jh,NFo),e(A,qFo),e(A,Yh),e(Yh,Ope),e(Ope,jFo),e(Yh,DFo),e(Yh,VD),e(VD,GFo),e(Yh,OFo),e(A,VFo),e(A,Zh),e(Zh,Vpe),e(Vpe,XFo),e(Zh,zFo),e(Zh,XD),e(XD,QFo),e(Zh,WFo),e(A,UFo),e(A,Kh),e(Kh,Xpe),e(Xpe,HFo),e(Kh,JFo),e(Kh,zD),e(zD,YFo),e(Kh,ZFo),e(A,KFo),e(A,eu),e(eu,zpe),e(zpe,eTo),e(eu,oTo),e(eu,QD),e(QD,rTo),e(eu,tTo),e(A,aTo),e(A,ou),e(ou,Qpe),e(Qpe,nTo),e(ou,sTo),e(ou,WD),e(WD,lTo),e(ou,iTo),e(A,dTo),e(A,ru),e(ru,Wpe),e(Wpe,mTo),e(ru,cTo),e(ru,UD),e(UD,fTo),e(ru,gTo),e(A,hTo),e(A,tu),e(tu,Upe),e(Upe,uTo),e(tu,pTo),e(tu,HD),e(HD,_To),e(tu,bTo),e(A,vTo),e(A,au),e(au,Hpe),e(Hpe,FTo),e(au,TTo),e(au,JD),e(JD,MTo),e(au,ETo),e(A,CTo),e(A,nu),e(nu,Jpe),e(Jpe,wTo),e(nu,ATo),e(nu,YD),e(YD,LTo),e(nu,yTo),e(A,xTo),e(A,su),e(su,Ype),e(Ype,$To),e(su,kTo),e(su,ZD),e(ZD,STo),e(su,RTo),e(A,PTo),e(A,lu),e(lu,Zpe),e(Zpe,BTo),e(lu,ITo),e(lu,KD),e(KD,NTo),e(lu,qTo),e(A,jTo),e(A,iu),e(iu,Kpe),e(Kpe,DTo),e(iu,GTo),e(iu,eG),e(eG,OTo),e(iu,VTo),e(A,XTo),e(A,du),e(du,e_e),e(e_e,zTo),e(du,QTo),e(du,oG),e(oG,WTo),e(du,UTo),e(A,HTo),e(A,mu),e(mu,o_e),e(o_e,JTo),e(mu,YTo),e(mu,rG),e(rG,ZTo),e(mu,KTo),e(A,eMo),e(A,cu),e(cu,r_e),e(r_e,oMo),e(cu,rMo),e(cu,tG),e(tG,tMo),e(cu,aMo),e(A,nMo),e(A,fu),e(fu,t_e),e(t_e,sMo),e(fu,lMo),e(fu,aG),e(aG,iMo),e(fu,dMo),e(A,mMo),e(A,gu),e(gu,a_e),e(a_e,cMo),e(gu,fMo),e(gu,nG),e(nG,gMo),e(gu,hMo),e(A,uMo),e(A,hu),e(hu,n_e),e(n_e,pMo),e(hu,_Mo),e(hu,sG),e(sG,bMo),e(hu,vMo),e(A,FMo),e(A,uu),e(uu,s_e),e(s_e,TMo),e(uu,MMo),e(uu,lG),e(lG,EMo),e(uu,CMo),e(A,wMo),e(A,pu),e(pu,l_e),e(l_e,AMo),e(pu,LMo),e(pu,iG),e(iG,yMo),e(pu,xMo),e(A,$Mo),e(A,_u),e(_u,i_e),e(i_e,kMo),e(_u,SMo),e(_u,dG),e(dG,RMo),e(_u,PMo),e(A,BMo),e(A,bu),e(bu,d_e),e(d_e,IMo),e(bu,NMo),e(bu,mG),e(mG,qMo),e(bu,jMo),e(A,DMo),e(A,vu),e(vu,m_e),e(m_e,GMo),e(vu,OMo),e(vu,cG),e(cG,VMo),e(vu,XMo),e(A,zMo),e(A,Fu),e(Fu,c_e),e(c_e,QMo),e(Fu,WMo),e(Fu,fG),e(fG,UMo),e(Fu,HMo),e(A,JMo),e(A,Tu),e(Tu,f_e),e(f_e,YMo),e(Tu,ZMo),e(Tu,gG),e(gG,KMo),e(Tu,eEo),e(A,oEo),e(A,Mu),e(Mu,g_e),e(g_e,rEo),e(Mu,tEo),e(Mu,hG),e(hG,aEo),e(Mu,nEo),e(A,sEo),e(A,Eu),e(Eu,h_e),e(h_e,lEo),e(Eu,iEo),e(Eu,uG),e(uG,dEo),e(Eu,mEo),e(A,cEo),e(A,Cu),e(Cu,u_e),e(u_e,fEo),e(Cu,gEo),e(Cu,pG),e(pG,hEo),e(Cu,uEo),e(A,pEo),e(A,wu),e(wu,p_e),e(p_e,_Eo),e(wu,bEo),e(wu,_G),e(_G,vEo),e(wu,FEo),e(A,TEo),e(A,Au),e(Au,__e),e(__e,MEo),e(Au,EEo),e(Au,bG),e(bG,CEo),e(Au,wEo),e(A,AEo),e(A,Lu),e(Lu,b_e),e(b_e,LEo),e(Lu,yEo),e(Lu,vG),e(vG,xEo),e(Lu,$Eo),e(A,kEo),e(A,yu),e(yu,v_e),e(v_e,SEo),e(yu,REo),e(yu,FG),e(FG,PEo),e(yu,BEo),e(A,IEo),e(A,xu),e(xu,F_e),e(F_e,NEo),e(xu,qEo),e(xu,TG),e(TG,jEo),e(xu,DEo),e(A,GEo),e(A,$u),e($u,T_e),e(T_e,OEo),e($u,VEo),e($u,MG),e(MG,XEo),e($u,zEo),e(A,QEo),e(A,ku),e(ku,M_e),e(M_e,WEo),e(ku,UEo),e(ku,EG),e(EG,HEo),e(ku,JEo),e(A,YEo),e(A,Su),e(Su,E_e),e(E_e,ZEo),e(Su,KEo),e(Su,CG),e(CG,e4o),e(Su,o4o),e(A,r4o),e(A,Ru),e(Ru,C_e),e(C_e,t4o),e(Ru,a4o),e(Ru,wG),e(wG,n4o),e(Ru,s4o),e(A,l4o),e(A,Pu),e(Pu,w_e),e(w_e,i4o),e(Pu,d4o),e(Pu,AG),e(AG,m4o),e(Pu,c4o),e(A,f4o),e(A,Bu),e(Bu,A_e),e(A_e,g4o),e(Bu,h4o),e(Bu,LG),e(LG,u4o),e(Bu,p4o),e(A,_4o),e(A,Iu),e(Iu,L_e),e(L_e,b4o),e(Iu,v4o),e(Iu,yG),e(yG,F4o),e(Iu,T4o),e(A,M4o),e(A,Nu),e(Nu,y_e),e(y_e,E4o),e(Nu,C4o),e(Nu,xG),e(xG,w4o),e(Nu,A4o),e(A,L4o),e(A,qu),e(qu,x_e),e(x_e,y4o),e(qu,x4o),e(qu,$G),e($G,$4o),e(qu,k4o),e(A,S4o),e(A,ju),e(ju,$_e),e($_e,R4o),e(ju,P4o),e(ju,kG),e(kG,B4o),e(ju,I4o),e(Vr,N4o),M(Du,Vr,null),e(Bo,q4o),e(Bo,Gu),M(Rk,Gu,null),e(Gu,j4o),e(Gu,k_e),e(k_e,D4o),b(c,Aio,_),b(c,Nd,_),e(Nd,Ou),e(Ou,S_e),M(Pk,S_e,null),e(Nd,G4o),e(Nd,R_e),e(R_e,O4o),b(c,Lio,_),b(c,Io,_),M(Bk,Io,null),e(Io,V4o),e(Io,Ik),e(Ik,X4o),e(Ik,SG),e(SG,z4o),e(Ik,Q4o),e(Io,W4o),e(Io,Nk),e(Nk,U4o),e(Nk,P_e),e(P_e,H4o),e(Nk,J4o),e(Io,Y4o),e(Io,Xr),M(qk,Xr,null),e(Xr,Z4o),e(Xr,B_e),e(B_e,K4o),e(Xr,eCo),e(Xr,mn),e(mn,oCo),e(mn,I_e),e(I_e,rCo),e(mn,tCo),e(mn,N_e),e(N_e,aCo),e(mn,nCo),e(mn,q_e),e(q_e,sCo),e(mn,lCo),e(Xr,iCo),e(Xr,k),e(k,Ms),e(Ms,j_e),e(j_e,dCo),e(Ms,mCo),e(Ms,RG),e(RG,cCo),e(Ms,fCo),e(Ms,PG),e(PG,gCo),e(Ms,hCo),e(k,uCo),e(k,Es),e(Es,D_e),e(D_e,pCo),e(Es,_Co),e(Es,BG),e(BG,bCo),e(Es,vCo),e(Es,IG),e(IG,FCo),e(Es,TCo),e(k,MCo),e(k,Cs),e(Cs,G_e),e(G_e,ECo),e(Cs,CCo),e(Cs,NG),e(NG,wCo),e(Cs,ACo),e(Cs,qG),e(qG,LCo),e(Cs,yCo),e(k,xCo),e(k,Vu),e(Vu,O_e),e(O_e,$Co),e(Vu,kCo),e(Vu,jG),e(jG,SCo),e(Vu,RCo),e(k,PCo),e(k,ws),e(ws,V_e),e(V_e,BCo),e(ws,ICo),e(ws,DG),e(DG,NCo),e(ws,qCo),e(ws,GG),e(GG,jCo),e(ws,DCo),e(k,GCo),e(k,Xu),e(Xu,X_e),e(X_e,OCo),e(Xu,VCo),e(Xu,OG),e(OG,XCo),e(Xu,zCo),e(k,QCo),e(k,zu),e(zu,z_e),e(z_e,WCo),e(zu,UCo),e(zu,VG),e(VG,HCo),e(zu,JCo),e(k,YCo),e(k,Qu),e(Qu,Q_e),e(Q_e,ZCo),e(Qu,KCo),e(Qu,XG),e(XG,e3o),e(Qu,o3o),e(k,r3o),e(k,As),e(As,W_e),e(W_e,t3o),e(As,a3o),e(As,zG),e(zG,n3o),e(As,s3o),e(As,QG),e(QG,l3o),e(As,i3o),e(k,d3o),e(k,Ls),e(Ls,U_e),e(U_e,m3o),e(Ls,c3o),e(Ls,WG),e(WG,f3o),e(Ls,g3o),e(Ls,UG),e(UG,h3o),e(Ls,u3o),e(k,p3o),e(k,ys),e(ys,H_e),e(H_e,_3o),e(ys,b3o),e(ys,HG),e(HG,v3o),e(ys,F3o),e(ys,JG),e(JG,T3o),e(ys,M3o),e(k,E3o),e(k,Wu),e(Wu,J_e),e(J_e,C3o),e(Wu,w3o),e(Wu,YG),e(YG,A3o),e(Wu,L3o),e(k,y3o),e(k,Uu),e(Uu,Y_e),e(Y_e,x3o),e(Uu,$3o),e(Uu,ZG),e(ZG,k3o),e(Uu,S3o),e(k,R3o),e(k,Hu),e(Hu,Z_e),e(Z_e,P3o),e(Hu,B3o),e(Hu,KG),e(KG,I3o),e(Hu,N3o),e(k,q3o),e(k,xs),e(xs,K_e),e(K_e,j3o),e(xs,D3o),e(xs,eO),e(eO,G3o),e(xs,O3o),e(xs,oO),e(oO,V3o),e(xs,X3o),e(k,z3o),e(k,Ju),e(Ju,e1e),e(e1e,Q3o),e(Ju,W3o),e(Ju,rO),e(rO,U3o),e(Ju,H3o),e(k,J3o),e(k,$s),e($s,o1e),e(o1e,Y3o),e($s,Z3o),e($s,tO),e(tO,K3o),e($s,e5o),e($s,aO),e(aO,o5o),e($s,r5o),e(k,t5o),e(k,ks),e(ks,r1e),e(r1e,a5o),e(ks,n5o),e(ks,nO),e(nO,s5o),e(ks,l5o),e(ks,sO),e(sO,i5o),e(ks,d5o),e(k,m5o),e(k,Ss),e(Ss,t1e),e(t1e,c5o),e(Ss,f5o),e(Ss,lO),e(lO,g5o),e(Ss,h5o),e(Ss,iO),e(iO,u5o),e(Ss,p5o),e(k,_5o),e(k,Rs),e(Rs,a1e),e(a1e,b5o),e(Rs,v5o),e(Rs,dO),e(dO,F5o),e(Rs,T5o),e(Rs,mO),e(mO,M5o),e(Rs,E5o),e(k,C5o),e(k,Ps),e(Ps,n1e),e(n1e,w5o),e(Ps,A5o),e(Ps,cO),e(cO,L5o),e(Ps,y5o),e(Ps,fO),e(fO,x5o),e(Ps,$5o),e(k,k5o),e(k,Yu),e(Yu,s1e),e(s1e,S5o),e(Yu,R5o),e(Yu,gO),e(gO,P5o),e(Yu,B5o),e(k,I5o),e(k,Bs),e(Bs,l1e),e(l1e,N5o),e(Bs,q5o),e(Bs,hO),e(hO,j5o),e(Bs,D5o),e(Bs,uO),e(uO,G5o),e(Bs,O5o),e(k,V5o),e(k,Is),e(Is,i1e),e(i1e,X5o),e(Is,z5o),e(Is,pO),e(pO,Q5o),e(Is,W5o),e(Is,_O),e(_O,U5o),e(Is,H5o),e(k,J5o),e(k,Ns),e(Ns,d1e),e(d1e,Y5o),e(Ns,Z5o),e(Ns,bO),e(bO,K5o),e(Ns,e0o),e(Ns,vO),e(vO,o0o),e(Ns,r0o),e(k,t0o),e(k,qs),e(qs,m1e),e(m1e,a0o),e(qs,n0o),e(qs,FO),e(FO,s0o),e(qs,l0o),e(qs,TO),e(TO,i0o),e(qs,d0o),e(k,m0o),e(k,js),e(js,c1e),e(c1e,c0o),e(js,f0o),e(js,MO),e(MO,g0o),e(js,h0o),e(js,EO),e(EO,u0o),e(js,p0o),e(k,_0o),e(k,Ds),e(Ds,f1e),e(f1e,b0o),e(Ds,v0o),e(Ds,CO),e(CO,F0o),e(Ds,T0o),e(Ds,wO),e(wO,M0o),e(Ds,E0o),e(k,C0o),e(k,Gs),e(Gs,g1e),e(g1e,w0o),e(Gs,A0o),e(Gs,AO),e(AO,L0o),e(Gs,y0o),e(Gs,LO),e(LO,x0o),e(Gs,$0o),e(k,k0o),e(k,Zu),e(Zu,h1e),e(h1e,S0o),e(Zu,R0o),e(Zu,yO),e(yO,P0o),e(Zu,B0o),e(k,I0o),e(k,Ku),e(Ku,u1e),e(u1e,N0o),e(Ku,q0o),e(Ku,xO),e(xO,j0o),e(Ku,D0o),e(k,G0o),e(k,Os),e(Os,p1e),e(p1e,O0o),e(Os,V0o),e(Os,$O),e($O,X0o),e(Os,z0o),e(Os,kO),e(kO,Q0o),e(Os,W0o),e(k,U0o),e(k,ep),e(ep,_1e),e(_1e,H0o),e(ep,J0o),e(ep,SO),e(SO,Y0o),e(ep,Z0o),e(k,K0o),e(k,Vs),e(Vs,b1e),e(b1e,ewo),e(Vs,owo),e(Vs,RO),e(RO,rwo),e(Vs,two),e(Vs,PO),e(PO,awo),e(Vs,nwo),e(k,swo),e(k,Xs),e(Xs,v1e),e(v1e,lwo),e(Xs,iwo),e(Xs,BO),e(BO,dwo),e(Xs,mwo),e(Xs,IO),e(IO,cwo),e(Xs,fwo),e(k,gwo),e(k,zs),e(zs,F1e),e(F1e,hwo),e(zs,uwo),e(zs,NO),e(NO,pwo),e(zs,_wo),e(zs,qO),e(qO,bwo),e(zs,vwo),e(k,Fwo),e(k,op),e(op,T1e),e(T1e,Two),e(op,Mwo),e(op,jO),e(jO,Ewo),e(op,Cwo),e(k,wwo),e(k,rp),e(rp,M1e),e(M1e,Awo),e(rp,Lwo),e(rp,DO),e(DO,ywo),e(rp,xwo),e(k,$wo),e(k,Qs),e(Qs,E1e),e(E1e,kwo),e(Qs,Swo),e(Qs,GO),e(GO,Rwo),e(Qs,Pwo),e(Qs,OO),e(OO,Bwo),e(Qs,Iwo),e(k,Nwo),e(k,Ws),e(Ws,C1e),e(C1e,qwo),e(Ws,jwo),e(Ws,VO),e(VO,Dwo),e(Ws,Gwo),e(Ws,XO),e(XO,Owo),e(Ws,Vwo),e(k,Xwo),e(k,Us),e(Us,w1e),e(w1e,zwo),e(Us,Qwo),e(Us,zO),e(zO,Wwo),e(Us,Uwo),e(Us,QO),e(QO,Hwo),e(Us,Jwo),e(k,Ywo),e(k,tp),e(tp,A1e),e(A1e,Zwo),e(tp,Kwo),e(tp,WO),e(WO,eAo),e(tp,oAo),e(k,rAo),e(k,Hs),e(Hs,L1e),e(L1e,tAo),e(Hs,aAo),e(Hs,UO),e(UO,nAo),e(Hs,sAo),e(Hs,HO),e(HO,lAo),e(Hs,iAo),e(k,dAo),e(k,ap),e(ap,y1e),e(y1e,mAo),e(ap,cAo),e(ap,JO),e(JO,fAo),e(ap,gAo),e(k,hAo),e(k,Js),e(Js,x1e),e(x1e,uAo),e(Js,pAo),e(Js,YO),e(YO,_Ao),e(Js,bAo),e(Js,ZO),e(ZO,vAo),e(Js,FAo),e(k,TAo),e(k,Ys),e(Ys,$1e),e($1e,MAo),e(Ys,EAo),e(Ys,KO),e(KO,CAo),e(Ys,wAo),e(Ys,eV),e(eV,AAo),e(Ys,LAo),e(k,yAo),e(k,Zs),e(Zs,k1e),e(k1e,xAo),e(Zs,$Ao),e(Zs,oV),e(oV,kAo),e(Zs,SAo),e(Zs,rV),e(rV,RAo),e(Zs,PAo),e(k,BAo),e(k,Ks),e(Ks,S1e),e(S1e,IAo),e(Ks,NAo),e(Ks,tV),e(tV,qAo),e(Ks,jAo),e(Ks,aV),e(aV,DAo),e(Ks,GAo),e(k,OAo),e(k,el),e(el,R1e),e(R1e,VAo),e(el,XAo),e(el,nV),e(nV,zAo),e(el,QAo),e(el,sV),e(sV,WAo),e(el,UAo),e(k,HAo),e(k,ol),e(ol,P1e),e(P1e,JAo),e(ol,YAo),e(ol,lV),e(lV,ZAo),e(ol,KAo),e(ol,iV),e(iV,e6o),e(ol,o6o),e(k,r6o),e(k,rl),e(rl,B1e),e(B1e,t6o),e(rl,a6o),e(rl,dV),e(dV,n6o),e(rl,s6o),e(rl,mV),e(mV,l6o),e(rl,i6o),e(k,d6o),e(k,tl),e(tl,I1e),e(I1e,m6o),e(tl,c6o),e(tl,cV),e(cV,f6o),e(tl,g6o),e(tl,fV),e(fV,h6o),e(tl,u6o),e(k,p6o),e(k,np),e(np,N1e),e(N1e,_6o),e(np,b6o),e(np,gV),e(gV,v6o),e(np,F6o),e(k,T6o),e(k,al),e(al,q1e),e(q1e,M6o),e(al,E6o),e(al,hV),e(hV,C6o),e(al,w6o),e(al,uV),e(uV,A6o),e(al,L6o),e(k,y6o),e(k,sp),e(sp,j1e),e(j1e,x6o),e(sp,$6o),e(sp,pV),e(pV,k6o),e(sp,S6o),e(k,R6o),e(k,lp),e(lp,D1e),e(D1e,P6o),e(lp,B6o),e(lp,_V),e(_V,I6o),e(lp,N6o),e(k,q6o),e(k,nl),e(nl,G1e),e(G1e,j6o),e(nl,D6o),e(nl,bV),e(bV,G6o),e(nl,O6o),e(nl,vV),e(vV,V6o),e(nl,X6o),e(k,z6o),e(k,sl),e(sl,O1e),e(O1e,Q6o),e(sl,W6o),e(sl,FV),e(FV,U6o),e(sl,H6o),e(sl,TV),e(TV,J6o),e(sl,Y6o),e(k,Z6o),e(k,ll),e(ll,V1e),e(V1e,K6o),e(ll,e7o),e(ll,MV),e(MV,o7o),e(ll,r7o),e(ll,EV),e(EV,t7o),e(ll,a7o),e(k,n7o),e(k,ip),e(ip,X1e),e(X1e,s7o),e(ip,l7o),e(ip,CV),e(CV,i7o),e(ip,d7o),e(k,m7o),e(k,il),e(il,z1e),e(z1e,c7o),e(il,f7o),e(il,wV),e(wV,g7o),e(il,h7o),e(il,AV),e(AV,u7o),e(il,p7o),e(k,_7o),e(k,dl),e(dl,Q1e),e(Q1e,b7o),e(dl,v7o),e(dl,LV),e(LV,F7o),e(dl,T7o),e(dl,yV),e(yV,M7o),e(dl,E7o),e(k,C7o),e(k,ml),e(ml,W1e),e(W1e,w7o),e(ml,A7o),e(ml,xV),e(xV,L7o),e(ml,y7o),e(ml,$V),e($V,x7o),e(ml,$7o),e(k,k7o),e(k,cl),e(cl,U1e),e(U1e,S7o),e(cl,R7o),e(cl,kV),e(kV,P7o),e(cl,B7o),e(cl,SV),e(SV,I7o),e(cl,N7o),e(k,q7o),e(k,fl),e(fl,H1e),e(H1e,j7o),e(fl,D7o),e(fl,RV),e(RV,G7o),e(fl,O7o),e(fl,PV),e(PV,V7o),e(fl,X7o),e(k,z7o),e(k,gl),e(gl,J1e),e(J1e,Q7o),e(gl,W7o),e(gl,BV),e(BV,U7o),e(gl,H7o),e(gl,IV),e(IV,J7o),e(gl,Y7o),e(k,Z7o),e(k,hl),e(hl,Y1e),e(Y1e,K7o),e(hl,e8o),e(hl,NV),e(NV,o8o),e(hl,r8o),e(hl,qV),e(qV,t8o),e(hl,a8o),e(k,n8o),e(k,ul),e(ul,Z1e),e(Z1e,s8o),e(ul,l8o),e(ul,jV),e(jV,i8o),e(ul,d8o),e(ul,DV),e(DV,m8o),e(ul,c8o),e(k,f8o),e(k,dp),e(dp,K1e),e(K1e,g8o),e(dp,h8o),e(dp,GV),e(GV,u8o),e(dp,p8o),e(k,_8o),e(k,pl),e(pl,e2e),e(e2e,b8o),e(pl,v8o),e(pl,OV),e(OV,F8o),e(pl,T8o),e(pl,VV),e(VV,M8o),e(pl,E8o),e(k,C8o),e(k,_l),e(_l,o2e),e(o2e,w8o),e(_l,A8o),e(_l,XV),e(XV,L8o),e(_l,y8o),e(_l,zV),e(zV,x8o),e(_l,$8o),e(k,k8o),e(k,bl),e(bl,r2e),e(r2e,S8o),e(bl,R8o),e(bl,QV),e(QV,P8o),e(bl,B8o),e(bl,WV),e(WV,I8o),e(bl,N8o),e(k,q8o),e(k,mp),e(mp,t2e),e(t2e,j8o),e(mp,D8o),e(mp,UV),e(UV,G8o),e(mp,O8o),e(k,V8o),e(k,cp),e(cp,a2e),e(a2e,X8o),e(cp,z8o),e(cp,HV),e(HV,Q8o),e(cp,W8o),e(k,U8o),e(k,fp),e(fp,n2e),e(n2e,H8o),e(fp,J8o),e(fp,JV),e(JV,Y8o),e(fp,Z8o),e(k,K8o),e(k,gp),e(gp,s2e),e(s2e,eLo),e(gp,oLo),e(gp,YV),e(YV,rLo),e(gp,tLo),e(k,aLo),e(k,vl),e(vl,l2e),e(l2e,nLo),e(vl,sLo),e(vl,ZV),e(ZV,lLo),e(vl,iLo),e(vl,KV),e(KV,dLo),e(vl,mLo),e(k,cLo),e(k,hp),e(hp,i2e),e(i2e,fLo),e(hp,gLo),e(hp,eX),e(eX,hLo),e(hp,uLo),e(k,pLo),e(k,Fl),e(Fl,d2e),e(d2e,_Lo),e(Fl,bLo),e(Fl,oX),e(oX,vLo),e(Fl,FLo),e(Fl,rX),e(rX,TLo),e(Fl,MLo),e(k,ELo),e(k,Tl),e(Tl,m2e),e(m2e,CLo),e(Tl,wLo),e(Tl,tX),e(tX,ALo),e(Tl,LLo),e(Tl,aX),e(aX,yLo),e(Tl,xLo),e(k,$Lo),e(k,Ml),e(Ml,c2e),e(c2e,kLo),e(Ml,SLo),e(Ml,nX),e(nX,RLo),e(Ml,PLo),e(Ml,sX),e(sX,BLo),e(Ml,ILo),e(k,NLo),e(k,El),e(El,f2e),e(f2e,qLo),e(El,jLo),e(El,lX),e(lX,DLo),e(El,GLo),e(El,iX),e(iX,OLo),e(El,VLo),e(k,XLo),e(k,Cl),e(Cl,g2e),e(g2e,zLo),e(Cl,QLo),e(Cl,dX),e(dX,WLo),e(Cl,ULo),e(Cl,mX),e(mX,HLo),e(Cl,JLo),e(k,YLo),e(k,up),e(up,h2e),e(h2e,ZLo),e(up,KLo),e(up,cX),e(cX,eyo),e(up,oyo),e(k,ryo),e(k,wl),e(wl,u2e),e(u2e,tyo),e(wl,ayo),e(wl,fX),e(fX,nyo),e(wl,syo),e(wl,gX),e(gX,lyo),e(wl,iyo),e(k,dyo),e(k,pp),e(pp,p2e),e(p2e,myo),e(pp,cyo),e(pp,hX),e(hX,fyo),e(pp,gyo),e(k,hyo),e(k,_p),e(_p,_2e),e(_2e,uyo),e(_p,pyo),e(_p,uX),e(uX,_yo),e(_p,byo),e(k,vyo),e(k,Al),e(Al,b2e),e(b2e,Fyo),e(Al,Tyo),e(Al,pX),e(pX,Myo),e(Al,Eyo),e(Al,_X),e(_X,Cyo),e(Al,wyo),e(k,Ayo),e(k,Ll),e(Ll,v2e),e(v2e,Lyo),e(Ll,yyo),e(Ll,bX),e(bX,xyo),e(Ll,$yo),e(Ll,vX),e(vX,kyo),e(Ll,Syo),e(k,Ryo),e(k,yl),e(yl,F2e),e(F2e,Pyo),e(yl,Byo),e(yl,FX),e(FX,Iyo),e(yl,Nyo),e(yl,TX),e(TX,qyo),e(yl,jyo),e(k,Dyo),e(k,xl),e(xl,T2e),e(T2e,Gyo),e(xl,Oyo),e(xl,MX),e(MX,Vyo),e(xl,Xyo),e(xl,EX),e(EX,zyo),e(xl,Qyo),e(k,Wyo),e(k,bp),e(bp,M2e),e(M2e,Uyo),e(bp,Hyo),e(bp,CX),e(CX,Jyo),e(bp,Yyo),e(k,Zyo),e(k,vp),e(vp,E2e),e(E2e,Kyo),e(vp,e9o),e(vp,wX),e(wX,o9o),e(vp,r9o),e(k,t9o),e(k,Fp),e(Fp,C2e),e(C2e,a9o),e(Fp,n9o),e(Fp,AX),e(AX,s9o),e(Fp,l9o),e(k,i9o),e(k,$l),e($l,w2e),e(w2e,d9o),e($l,m9o),e($l,LX),e(LX,c9o),e($l,f9o),e($l,yX),e(yX,g9o),e($l,h9o),e(k,u9o),e(k,kl),e(kl,A2e),e(A2e,p9o),e(kl,_9o),e(kl,xX),e(xX,b9o),e(kl,v9o),e(kl,$X),e($X,F9o),e(kl,T9o),e(k,M9o),e(k,Tp),e(Tp,L2e),e(L2e,E9o),e(Tp,C9o),e(Tp,kX),e(kX,w9o),e(Tp,A9o),e(k,L9o),e(k,Mp),e(Mp,y2e),e(y2e,y9o),e(Mp,x9o),e(Mp,SX),e(SX,$9o),e(Mp,k9o),e(k,S9o),e(k,Ep),e(Ep,x2e),e(x2e,R9o),e(Ep,P9o),e(Ep,RX),e(RX,B9o),e(Ep,I9o),e(k,N9o),e(k,Cp),e(Cp,$2e),e($2e,q9o),e(Cp,j9o),e(Cp,PX),e(PX,D9o),e(Cp,G9o),e(k,O9o),e(k,Sl),e(Sl,k2e),e(k2e,V9o),e(Sl,X9o),e(Sl,BX),e(BX,z9o),e(Sl,Q9o),e(Sl,IX),e(IX,W9o),e(Sl,U9o),e(k,H9o),e(k,Rl),e(Rl,S2e),e(S2e,J9o),e(Rl,Y9o),e(Rl,NX),e(NX,Z9o),e(Rl,K9o),e(Rl,qX),e(qX,exo),e(Rl,oxo),e(k,rxo),e(k,wp),e(wp,R2e),e(R2e,txo),e(wp,axo),e(wp,jX),e(jX,nxo),e(wp,sxo),e(k,lxo),e(k,Ap),e(Ap,P2e),e(P2e,ixo),e(Ap,dxo),e(Ap,DX),e(DX,mxo),e(Ap,cxo),e(k,fxo),e(k,Pl),e(Pl,B2e),e(B2e,gxo),e(Pl,hxo),e(Pl,GX),e(GX,uxo),e(Pl,pxo),e(Pl,OX),e(OX,_xo),e(Pl,bxo),e(k,vxo),e(k,Bl),e(Bl,I2e),e(I2e,Fxo),e(Bl,Txo),e(Bl,VX),e(VX,Mxo),e(Bl,Exo),e(Bl,XX),e(XX,Cxo),e(Bl,wxo),e(k,Axo),e(k,Il),e(Il,N2e),e(N2e,Lxo),e(Il,yxo),e(Il,zX),e(zX,xxo),e(Il,$xo),e(Il,QX),e(QX,kxo),e(Il,Sxo),e(k,Rxo),e(k,Nl),e(Nl,q2e),e(q2e,Pxo),e(Nl,Bxo),e(Nl,WX),e(WX,Ixo),e(Nl,Nxo),e(Nl,UX),e(UX,qxo),e(Nl,jxo),e(Xr,Dxo),M(Lp,Xr,null),e(Io,Gxo),e(Io,yp),M(jk,yp,null),e(yp,Oxo),e(yp,j2e),e(j2e,Vxo),b(c,yio,_),b(c,qd,_),e(qd,xp),e(xp,D2e),M(Dk,D2e,null),e(qd,Xxo),e(qd,G2e),e(G2e,zxo),b(c,xio,_),b(c,No,_),M(Gk,No,null),e(No,Qxo),e(No,Ok),e(Ok,Wxo),e(Ok,HX),e(HX,Uxo),e(Ok,Hxo),e(No,Jxo),e(No,Vk),e(Vk,Yxo),e(Vk,O2e),e(O2e,Zxo),e(Vk,Kxo),e(No,e$o),e(No,eo),M(Xk,eo,null),e(eo,o$o),e(eo,V2e),e(V2e,r$o),e(eo,t$o),e(eo,cn),e(cn,a$o),e(cn,X2e),e(X2e,n$o),e(cn,s$o),e(cn,z2e),e(z2e,l$o),e(cn,i$o),e(cn,Q2e),e(Q2e,d$o),e(cn,m$o),e(eo,c$o),e(eo,z),e(z,$p),e($p,W2e),e(W2e,f$o),e($p,g$o),e($p,JX),e(JX,h$o),e($p,u$o),e(z,p$o),e(z,kp),e(kp,U2e),e(U2e,_$o),e(kp,b$o),e(kp,YX),e(YX,v$o),e(kp,F$o),e(z,T$o),e(z,Sp),e(Sp,H2e),e(H2e,M$o),e(Sp,E$o),e(Sp,ZX),e(ZX,C$o),e(Sp,w$o),e(z,A$o),e(z,Rp),e(Rp,J2e),e(J2e,L$o),e(Rp,y$o),e(Rp,KX),e(KX,x$o),e(Rp,$$o),e(z,k$o),e(z,Pp),e(Pp,Y2e),e(Y2e,S$o),e(Pp,R$o),e(Pp,ez),e(ez,P$o),e(Pp,B$o),e(z,I$o),e(z,Bp),e(Bp,Z2e),e(Z2e,N$o),e(Bp,q$o),e(Bp,oz),e(oz,j$o),e(Bp,D$o),e(z,G$o),e(z,Ip),e(Ip,K2e),e(K2e,O$o),e(Ip,V$o),e(Ip,rz),e(rz,X$o),e(Ip,z$o),e(z,Q$o),e(z,Np),e(Np,ebe),e(ebe,W$o),e(Np,U$o),e(Np,tz),e(tz,H$o),e(Np,J$o),e(z,Y$o),e(z,qp),e(qp,obe),e(obe,Z$o),e(qp,K$o),e(qp,az),e(az,eko),e(qp,oko),e(z,rko),e(z,jp),e(jp,rbe),e(rbe,tko),e(jp,ako),e(jp,nz),e(nz,nko),e(jp,sko),e(z,lko),e(z,Dp),e(Dp,tbe),e(tbe,iko),e(Dp,dko),e(Dp,sz),e(sz,mko),e(Dp,cko),e(z,fko),e(z,Gp),e(Gp,abe),e(abe,gko),e(Gp,hko),e(Gp,lz),e(lz,uko),e(Gp,pko),e(z,_ko),e(z,Op),e(Op,nbe),e(nbe,bko),e(Op,vko),e(Op,iz),e(iz,Fko),e(Op,Tko),e(z,Mko),e(z,Vp),e(Vp,sbe),e(sbe,Eko),e(Vp,Cko),e(Vp,dz),e(dz,wko),e(Vp,Ako),e(z,Lko),e(z,Xp),e(Xp,lbe),e(lbe,yko),e(Xp,xko),e(Xp,mz),e(mz,$ko),e(Xp,kko),e(z,Sko),e(z,zp),e(zp,ibe),e(ibe,Rko),e(zp,Pko),e(zp,cz),e(cz,Bko),e(zp,Iko),e(z,Nko),e(z,Qp),e(Qp,dbe),e(dbe,qko),e(Qp,jko),e(Qp,fz),e(fz,Dko),e(Qp,Gko),e(z,Oko),e(z,Wp),e(Wp,mbe),e(mbe,Vko),e(Wp,Xko),e(Wp,gz),e(gz,zko),e(Wp,Qko),e(z,Wko),e(z,Up),e(Up,cbe),e(cbe,Uko),e(Up,Hko),e(Up,hz),e(hz,Jko),e(Up,Yko),e(z,Zko),e(z,Hp),e(Hp,fbe),e(fbe,Kko),e(Hp,eSo),e(Hp,uz),e(uz,oSo),e(Hp,rSo),e(z,tSo),e(z,Jp),e(Jp,gbe),e(gbe,aSo),e(Jp,nSo),e(Jp,pz),e(pz,sSo),e(Jp,lSo),e(z,iSo),e(z,Yp),e(Yp,hbe),e(hbe,dSo),e(Yp,mSo),e(Yp,_z),e(_z,cSo),e(Yp,fSo),e(z,gSo),e(z,Zp),e(Zp,ube),e(ube,hSo),e(Zp,uSo),e(Zp,bz),e(bz,pSo),e(Zp,_So),e(z,bSo),e(z,Kp),e(Kp,pbe),e(pbe,vSo),e(Kp,FSo),e(Kp,vz),e(vz,TSo),e(Kp,MSo),e(z,ESo),e(z,e_),e(e_,_be),e(_be,CSo),e(e_,wSo),e(e_,Fz),e(Fz,ASo),e(e_,LSo),e(z,ySo),e(z,o_),e(o_,bbe),e(bbe,xSo),e(o_,$So),e(o_,Tz),e(Tz,kSo),e(o_,SSo),e(z,RSo),e(z,r_),e(r_,vbe),e(vbe,PSo),e(r_,BSo),e(r_,Mz),e(Mz,ISo),e(r_,NSo),e(z,qSo),e(z,t_),e(t_,Fbe),e(Fbe,jSo),e(t_,DSo),e(t_,Ez),e(Ez,GSo),e(t_,OSo),e(z,VSo),e(z,a_),e(a_,Tbe),e(Tbe,XSo),e(a_,zSo),e(a_,Cz),e(Cz,QSo),e(a_,WSo),e(z,USo),e(z,n_),e(n_,Mbe),e(Mbe,HSo),e(n_,JSo),e(n_,wz),e(wz,YSo),e(n_,ZSo),e(z,KSo),e(z,s_),e(s_,Ebe),e(Ebe,eRo),e(s_,oRo),e(s_,Az),e(Az,rRo),e(s_,tRo),e(z,aRo),e(z,l_),e(l_,Cbe),e(Cbe,nRo),e(l_,sRo),e(l_,Lz),e(Lz,lRo),e(l_,iRo),e(z,dRo),e(z,i_),e(i_,wbe),e(wbe,mRo),e(i_,cRo),e(i_,yz),e(yz,fRo),e(i_,gRo),e(z,hRo),e(z,d_),e(d_,Abe),e(Abe,uRo),e(d_,pRo),e(d_,xz),e(xz,_Ro),e(d_,bRo),e(z,vRo),e(z,m_),e(m_,Lbe),e(Lbe,FRo),e(m_,TRo),e(m_,$z),e($z,MRo),e(m_,ERo),e(z,CRo),e(z,c_),e(c_,ybe),e(ybe,wRo),e(c_,ARo),e(c_,kz),e(kz,LRo),e(c_,yRo),e(z,xRo),e(z,f_),e(f_,xbe),e(xbe,$Ro),e(f_,kRo),e(f_,Sz),e(Sz,SRo),e(f_,RRo),e(z,PRo),e(z,g_),e(g_,$be),e($be,BRo),e(g_,IRo),e(g_,Rz),e(Rz,NRo),e(g_,qRo),e(z,jRo),e(z,h_),e(h_,kbe),e(kbe,DRo),e(h_,GRo),e(h_,Pz),e(Pz,ORo),e(h_,VRo),e(z,XRo),e(z,u_),e(u_,Sbe),e(Sbe,zRo),e(u_,QRo),e(u_,Bz),e(Bz,WRo),e(u_,URo),e(z,HRo),e(z,p_),e(p_,Rbe),e(Rbe,JRo),e(p_,YRo),e(p_,Iz),e(Iz,ZRo),e(p_,KRo),e(z,ePo),e(z,__),e(__,Pbe),e(Pbe,oPo),e(__,rPo),e(__,Nz),e(Nz,tPo),e(__,aPo),e(z,nPo),e(z,b_),e(b_,Bbe),e(Bbe,sPo),e(b_,lPo),e(b_,qz),e(qz,iPo),e(b_,dPo),e(z,mPo),e(z,v_),e(v_,Ibe),e(Ibe,cPo),e(v_,fPo),e(v_,jz),e(jz,gPo),e(v_,hPo),e(z,uPo),e(z,F_),e(F_,Nbe),e(Nbe,pPo),e(F_,_Po),e(F_,Dz),e(Dz,bPo),e(F_,vPo),e(z,FPo),e(z,T_),e(T_,qbe),e(qbe,TPo),e(T_,MPo),e(T_,Gz),e(Gz,EPo),e(T_,CPo),e(eo,wPo),M(M_,eo,null),e(eo,APo),M(E_,eo,null),e(No,LPo),e(No,C_),M(zk,C_,null),e(C_,yPo),e(C_,jbe),e(jbe,xPo),b(c,$io,_),b(c,jd,_),e(jd,w_),e(w_,Dbe),M(Qk,Dbe,null),e(jd,$Po),e(jd,Gbe),e(Gbe,kPo),b(c,kio,_),b(c,qo,_),M(Wk,qo,null),e(qo,SPo),e(qo,Uk),e(Uk,RPo),e(Uk,Oz),e(Oz,PPo),e(Uk,BPo),e(qo,IPo),e(qo,Hk),e(Hk,NPo),e(Hk,Obe),e(Obe,qPo),e(Hk,jPo),e(qo,DPo),e(qo,oo),M(Jk,oo,null),e(oo,GPo),e(oo,Vbe),e(Vbe,OPo),e(oo,VPo),e(oo,fn),e(fn,XPo),e(fn,Xbe),e(Xbe,zPo),e(fn,QPo),e(fn,zbe),e(zbe,WPo),e(fn,UPo),e(fn,Qbe),e(Qbe,HPo),e(fn,JPo),e(oo,YPo),e(oo,oe),e(oe,A_),e(A_,Wbe),e(Wbe,ZPo),e(A_,KPo),e(A_,Vz),e(Vz,eBo),e(A_,oBo),e(oe,rBo),e(oe,L_),e(L_,Ube),e(Ube,tBo),e(L_,aBo),e(L_,Xz),e(Xz,nBo),e(L_,sBo),e(oe,lBo),e(oe,y_),e(y_,Hbe),e(Hbe,iBo),e(y_,dBo),e(y_,zz),e(zz,mBo),e(y_,cBo),e(oe,fBo),e(oe,x_),e(x_,Jbe),e(Jbe,gBo),e(x_,hBo),e(x_,Qz),e(Qz,uBo),e(x_,pBo),e(oe,_Bo),e(oe,$_),e($_,Ybe),e(Ybe,bBo),e($_,vBo),e($_,Wz),e(Wz,FBo),e($_,TBo),e(oe,MBo),e(oe,k_),e(k_,Zbe),e(Zbe,EBo),e(k_,CBo),e(k_,Uz),e(Uz,wBo),e(k_,ABo),e(oe,LBo),e(oe,S_),e(S_,Kbe),e(Kbe,yBo),e(S_,xBo),e(S_,Hz),e(Hz,$Bo),e(S_,kBo),e(oe,SBo),e(oe,R_),e(R_,eve),e(eve,RBo),e(R_,PBo),e(R_,Jz),e(Jz,BBo),e(R_,IBo),e(oe,NBo),e(oe,P_),e(P_,ove),e(ove,qBo),e(P_,jBo),e(P_,Yz),e(Yz,DBo),e(P_,GBo),e(oe,OBo),e(oe,B_),e(B_,rve),e(rve,VBo),e(B_,XBo),e(B_,Zz),e(Zz,zBo),e(B_,QBo),e(oe,WBo),e(oe,I_),e(I_,tve),e(tve,UBo),e(I_,HBo),e(I_,Kz),e(Kz,JBo),e(I_,YBo),e(oe,ZBo),e(oe,N_),e(N_,ave),e(ave,KBo),e(N_,eIo),e(N_,eQ),e(eQ,oIo),e(N_,rIo),e(oe,tIo),e(oe,q_),e(q_,nve),e(nve,aIo),e(q_,nIo),e(q_,oQ),e(oQ,sIo),e(q_,lIo),e(oe,iIo),e(oe,j_),e(j_,sve),e(sve,dIo),e(j_,mIo),e(j_,rQ),e(rQ,cIo),e(j_,fIo),e(oe,gIo),e(oe,D_),e(D_,lve),e(lve,hIo),e(D_,uIo),e(D_,tQ),e(tQ,pIo),e(D_,_Io),e(oe,bIo),e(oe,G_),e(G_,ive),e(ive,vIo),e(G_,FIo),e(G_,aQ),e(aQ,TIo),e(G_,MIo),e(oe,EIo),e(oe,O_),e(O_,dve),e(dve,CIo),e(O_,wIo),e(O_,nQ),e(nQ,AIo),e(O_,LIo),e(oe,yIo),e(oe,V_),e(V_,mve),e(mve,xIo),e(V_,$Io),e(V_,sQ),e(sQ,kIo),e(V_,SIo),e(oe,RIo),e(oe,X_),e(X_,cve),e(cve,PIo),e(X_,BIo),e(X_,lQ),e(lQ,IIo),e(X_,NIo),e(oe,qIo),e(oe,z_),e(z_,fve),e(fve,jIo),e(z_,DIo),e(z_,iQ),e(iQ,GIo),e(z_,OIo),e(oe,VIo),e(oe,Q_),e(Q_,gve),e(gve,XIo),e(Q_,zIo),e(Q_,dQ),e(dQ,QIo),e(Q_,WIo),e(oe,UIo),e(oe,W_),e(W_,hve),e(hve,HIo),e(W_,JIo),e(W_,mQ),e(mQ,YIo),e(W_,ZIo),e(oe,KIo),e(oe,U_),e(U_,uve),e(uve,eNo),e(U_,oNo),e(U_,cQ),e(cQ,rNo),e(U_,tNo),e(oe,aNo),e(oe,H_),e(H_,pve),e(pve,nNo),e(H_,sNo),e(H_,fQ),e(fQ,lNo),e(H_,iNo),e(oe,dNo),e(oe,J_),e(J_,_ve),e(_ve,mNo),e(J_,cNo),e(J_,gQ),e(gQ,fNo),e(J_,gNo),e(oe,hNo),e(oe,Y_),e(Y_,bve),e(bve,uNo),e(Y_,pNo),e(Y_,hQ),e(hQ,_No),e(Y_,bNo),e(oe,vNo),e(oe,Z_),e(Z_,vve),e(vve,FNo),e(Z_,TNo),e(Z_,uQ),e(uQ,MNo),e(Z_,ENo),e(oe,CNo),e(oe,K_),e(K_,Fve),e(Fve,wNo),e(K_,ANo),e(K_,pQ),e(pQ,LNo),e(K_,yNo),e(oe,xNo),e(oe,e1),e(e1,Tve),e(Tve,$No),e(e1,kNo),e(e1,_Q),e(_Q,SNo),e(e1,RNo),e(oe,PNo),e(oe,o1),e(o1,Mve),e(Mve,BNo),e(o1,INo),e(o1,bQ),e(bQ,NNo),e(o1,qNo),e(oo,jNo),M(r1,oo,null),e(oo,DNo),M(t1,oo,null),e(qo,GNo),e(qo,a1),M(Yk,a1,null),e(a1,ONo),e(a1,Eve),e(Eve,VNo),b(c,Sio,_),b(c,Dd,_),e(Dd,n1),e(n1,Cve),M(Zk,Cve,null),e(Dd,XNo),e(Dd,wve),e(wve,zNo),b(c,Rio,_),b(c,jo,_),M(Kk,jo,null),e(jo,QNo),e(jo,eS),e(eS,WNo),e(eS,vQ),e(vQ,UNo),e(eS,HNo),e(jo,JNo),e(jo,oS),e(oS,YNo),e(oS,Ave),e(Ave,ZNo),e(oS,KNo),e(jo,eqo),e(jo,ro),M(rS,ro,null),e(ro,oqo),e(ro,Lve),e(Lve,rqo),e(ro,tqo),e(ro,Gd),e(Gd,aqo),e(Gd,yve),e(yve,nqo),e(Gd,sqo),e(Gd,xve),e(xve,lqo),e(Gd,iqo),e(ro,dqo),e(ro,ie),e(ie,s1),e(s1,$ve),e($ve,mqo),e(s1,cqo),e(s1,FQ),e(FQ,fqo),e(s1,gqo),e(ie,hqo),e(ie,l1),e(l1,kve),e(kve,uqo),e(l1,pqo),e(l1,TQ),e(TQ,_qo),e(l1,bqo),e(ie,vqo),e(ie,i1),e(i1,Sve),e(Sve,Fqo),e(i1,Tqo),e(i1,MQ),e(MQ,Mqo),e(i1,Eqo),e(ie,Cqo),e(ie,d1),e(d1,Rve),e(Rve,wqo),e(d1,Aqo),e(d1,EQ),e(EQ,Lqo),e(d1,yqo),e(ie,xqo),e(ie,m1),e(m1,Pve),e(Pve,$qo),e(m1,kqo),e(m1,CQ),e(CQ,Sqo),e(m1,Rqo),e(ie,Pqo),e(ie,c1),e(c1,Bve),e(Bve,Bqo),e(c1,Iqo),e(c1,wQ),e(wQ,Nqo),e(c1,qqo),e(ie,jqo),e(ie,f1),e(f1,Ive),e(Ive,Dqo),e(f1,Gqo),e(f1,AQ),e(AQ,Oqo),e(f1,Vqo),e(ie,Xqo),e(ie,g1),e(g1,Nve),e(Nve,zqo),e(g1,Qqo),e(g1,LQ),e(LQ,Wqo),e(g1,Uqo),e(ie,Hqo),e(ie,h1),e(h1,qve),e(qve,Jqo),e(h1,Yqo),e(h1,yQ),e(yQ,Zqo),e(h1,Kqo),e(ie,ejo),e(ie,u1),e(u1,jve),e(jve,ojo),e(u1,rjo),e(u1,xQ),e(xQ,tjo),e(u1,ajo),e(ie,njo),e(ie,p1),e(p1,Dve),e(Dve,sjo),e(p1,ljo),e(p1,$Q),e($Q,ijo),e(p1,djo),e(ie,mjo),e(ie,_1),e(_1,Gve),e(Gve,cjo),e(_1,fjo),e(_1,kQ),e(kQ,gjo),e(_1,hjo),e(ie,ujo),e(ie,b1),e(b1,Ove),e(Ove,pjo),e(b1,_jo),e(b1,SQ),e(SQ,bjo),e(b1,vjo),e(ie,Fjo),e(ie,v1),e(v1,Vve),e(Vve,Tjo),e(v1,Mjo),e(v1,RQ),e(RQ,Ejo),e(v1,Cjo),e(ie,wjo),e(ie,F1),e(F1,Xve),e(Xve,Ajo),e(F1,Ljo),e(F1,PQ),e(PQ,yjo),e(F1,xjo),e(ie,$jo),e(ie,T1),e(T1,zve),e(zve,kjo),e(T1,Sjo),e(T1,BQ),e(BQ,Rjo),e(T1,Pjo),e(ie,Bjo),e(ie,M1),e(M1,Qve),e(Qve,Ijo),e(M1,Njo),e(M1,IQ),e(IQ,qjo),e(M1,jjo),e(ie,Djo),e(ie,E1),e(E1,Wve),e(Wve,Gjo),e(E1,Ojo),e(E1,NQ),e(NQ,Vjo),e(E1,Xjo),e(ie,zjo),e(ie,C1),e(C1,Uve),e(Uve,Qjo),e(C1,Wjo),e(C1,qQ),e(qQ,Ujo),e(C1,Hjo),e(ie,Jjo),e(ie,w1),e(w1,Hve),e(Hve,Yjo),e(w1,Zjo),e(w1,jQ),e(jQ,Kjo),e(w1,eDo),e(ie,oDo),e(ie,A1),e(A1,Jve),e(Jve,rDo),e(A1,tDo),e(A1,DQ),e(DQ,aDo),e(A1,nDo),e(ie,sDo),e(ie,L1),e(L1,Yve),e(Yve,lDo),e(L1,iDo),e(L1,GQ),e(GQ,dDo),e(L1,mDo),e(ie,cDo),e(ie,y1),e(y1,Zve),e(Zve,fDo),e(y1,gDo),e(y1,OQ),e(OQ,hDo),e(y1,uDo),e(ro,pDo),M(x1,ro,null),e(ro,_Do),M($1,ro,null),e(jo,bDo),e(jo,k1),M(tS,k1,null),e(k1,vDo),e(k1,Kve),e(Kve,FDo),b(c,Pio,_),b(c,Od,_),e(Od,S1),e(S1,eFe),M(aS,eFe,null),e(Od,TDo),e(Od,oFe),e(oFe,MDo),b(c,Bio,_),b(c,Do,_),M(nS,Do,null),e(Do,EDo),e(Do,Vd),e(Vd,CDo),e(Vd,VQ),e(VQ,wDo),e(Vd,ADo),e(Vd,XQ),e(XQ,LDo),e(Vd,yDo),e(Do,xDo),e(Do,sS),e(sS,$Do),e(sS,rFe),e(rFe,kDo),e(sS,SDo),e(Do,RDo),e(Do,At),M(lS,At,null),e(At,PDo),e(At,tFe),e(tFe,BDo),e(At,IDo),e(At,Xd),e(Xd,NDo),e(Xd,aFe),e(aFe,qDo),e(Xd,jDo),e(Xd,zQ),e(zQ,DDo),e(Xd,GDo),e(At,ODo),M(R1,At,null),e(Do,VDo),e(Do,to),M(iS,to,null),e(to,XDo),e(to,nFe),e(nFe,zDo),e(to,QDo),e(to,gn),e(gn,WDo),e(gn,sFe),e(sFe,UDo),e(gn,HDo),e(gn,lFe),e(lFe,JDo),e(gn,YDo),e(gn,iFe),e(iFe,ZDo),e(gn,KDo),e(to,eGo),e(to,y),e(y,P1),e(P1,dFe),e(dFe,oGo),e(P1,rGo),e(P1,QQ),e(QQ,tGo),e(P1,aGo),e(y,nGo),e(y,B1),e(B1,mFe),e(mFe,sGo),e(B1,lGo),e(B1,WQ),e(WQ,iGo),e(B1,dGo),e(y,mGo),e(y,I1),e(I1,cFe),e(cFe,cGo),e(I1,fGo),e(I1,UQ),e(UQ,gGo),e(I1,hGo),e(y,uGo),e(y,N1),e(N1,fFe),e(fFe,pGo),e(N1,_Go),e(N1,HQ),e(HQ,bGo),e(N1,vGo),e(y,FGo),e(y,q1),e(q1,gFe),e(gFe,TGo),e(q1,MGo),e(q1,JQ),e(JQ,EGo),e(q1,CGo),e(y,wGo),e(y,j1),e(j1,hFe),e(hFe,AGo),e(j1,LGo),e(j1,YQ),e(YQ,yGo),e(j1,xGo),e(y,$Go),e(y,D1),e(D1,uFe),e(uFe,kGo),e(D1,SGo),e(D1,ZQ),e(ZQ,RGo),e(D1,PGo),e(y,BGo),e(y,G1),e(G1,pFe),e(pFe,IGo),e(G1,NGo),e(G1,KQ),e(KQ,qGo),e(G1,jGo),e(y,DGo),e(y,O1),e(O1,_Fe),e(_Fe,GGo),e(O1,OGo),e(O1,eW),e(eW,VGo),e(O1,XGo),e(y,zGo),e(y,V1),e(V1,bFe),e(bFe,QGo),e(V1,WGo),e(V1,oW),e(oW,UGo),e(V1,HGo),e(y,JGo),e(y,X1),e(X1,vFe),e(vFe,YGo),e(X1,ZGo),e(X1,rW),e(rW,KGo),e(X1,eOo),e(y,oOo),e(y,z1),e(z1,FFe),e(FFe,rOo),e(z1,tOo),e(z1,tW),e(tW,aOo),e(z1,nOo),e(y,sOo),e(y,Q1),e(Q1,TFe),e(TFe,lOo),e(Q1,iOo),e(Q1,aW),e(aW,dOo),e(Q1,mOo),e(y,cOo),e(y,W1),e(W1,MFe),e(MFe,fOo),e(W1,gOo),e(W1,nW),e(nW,hOo),e(W1,uOo),e(y,pOo),e(y,U1),e(U1,EFe),e(EFe,_Oo),e(U1,bOo),e(U1,sW),e(sW,vOo),e(U1,FOo),e(y,TOo),e(y,H1),e(H1,CFe),e(CFe,MOo),e(H1,EOo),e(H1,lW),e(lW,COo),e(H1,wOo),e(y,AOo),e(y,J1),e(J1,wFe),e(wFe,LOo),e(J1,yOo),e(J1,iW),e(iW,xOo),e(J1,$Oo),e(y,kOo),e(y,Y1),e(Y1,AFe),e(AFe,SOo),e(Y1,ROo),e(Y1,dW),e(dW,POo),e(Y1,BOo),e(y,IOo),e(y,Z1),e(Z1,LFe),e(LFe,NOo),e(Z1,qOo),e(Z1,mW),e(mW,jOo),e(Z1,DOo),e(y,GOo),e(y,K1),e(K1,yFe),e(yFe,OOo),e(K1,VOo),e(K1,cW),e(cW,XOo),e(K1,zOo),e(y,QOo),e(y,e2),e(e2,xFe),e(xFe,WOo),e(e2,UOo),e(e2,fW),e(fW,HOo),e(e2,JOo),e(y,YOo),e(y,o2),e(o2,$Fe),e($Fe,ZOo),e(o2,KOo),e(o2,gW),e(gW,eVo),e(o2,oVo),e(y,rVo),e(y,r2),e(r2,kFe),e(kFe,tVo),e(r2,aVo),e(r2,hW),e(hW,nVo),e(r2,sVo),e(y,lVo),e(y,t2),e(t2,SFe),e(SFe,iVo),e(t2,dVo),e(t2,uW),e(uW,mVo),e(t2,cVo),e(y,fVo),e(y,a2),e(a2,RFe),e(RFe,gVo),e(a2,hVo),e(a2,pW),e(pW,uVo),e(a2,pVo),e(y,_Vo),e(y,n2),e(n2,PFe),e(PFe,bVo),e(n2,vVo),e(n2,_W),e(_W,FVo),e(n2,TVo),e(y,MVo),e(y,s2),e(s2,BFe),e(BFe,EVo),e(s2,CVo),e(s2,bW),e(bW,wVo),e(s2,AVo),e(y,LVo),e(y,l2),e(l2,IFe),e(IFe,yVo),e(l2,xVo),e(l2,vW),e(vW,$Vo),e(l2,kVo),e(y,SVo),e(y,i2),e(i2,NFe),e(NFe,RVo),e(i2,PVo),e(i2,FW),e(FW,BVo),e(i2,IVo),e(y,NVo),e(y,d2),e(d2,qFe),e(qFe,qVo),e(d2,jVo),e(d2,TW),e(TW,DVo),e(d2,GVo),e(y,OVo),e(y,m2),e(m2,jFe),e(jFe,VVo),e(m2,XVo),e(m2,MW),e(MW,zVo),e(m2,QVo),e(y,WVo),e(y,c2),e(c2,DFe),e(DFe,UVo),e(c2,HVo),e(c2,EW),e(EW,JVo),e(c2,YVo),e(y,ZVo),e(y,f2),e(f2,GFe),e(GFe,KVo),e(f2,eXo),e(f2,CW),e(CW,oXo),e(f2,rXo),e(y,tXo),e(y,g2),e(g2,OFe),e(OFe,aXo),e(g2,nXo),e(g2,wW),e(wW,sXo),e(g2,lXo),e(y,iXo),e(y,h2),e(h2,VFe),e(VFe,dXo),e(h2,mXo),e(h2,AW),e(AW,cXo),e(h2,fXo),e(y,gXo),e(y,u2),e(u2,XFe),e(XFe,hXo),e(u2,uXo),e(u2,LW),e(LW,pXo),e(u2,_Xo),e(y,bXo),e(y,p2),e(p2,zFe),e(zFe,vXo),e(p2,FXo),e(p2,yW),e(yW,TXo),e(p2,MXo),e(y,EXo),e(y,_2),e(_2,QFe),e(QFe,CXo),e(_2,wXo),e(_2,xW),e(xW,AXo),e(_2,LXo),e(y,yXo),e(y,b2),e(b2,WFe),e(WFe,xXo),e(b2,$Xo),e(b2,$W),e($W,kXo),e(b2,SXo),e(y,RXo),e(y,v2),e(v2,UFe),e(UFe,PXo),e(v2,BXo),e(v2,kW),e(kW,IXo),e(v2,NXo),e(y,qXo),e(y,ql),e(ql,HFe),e(HFe,jXo),e(ql,DXo),e(ql,SW),e(SW,GXo),e(ql,OXo),e(ql,RW),e(RW,VXo),e(ql,XXo),e(y,zXo),e(y,F2),e(F2,JFe),e(JFe,QXo),e(F2,WXo),e(F2,PW),e(PW,UXo),e(F2,HXo),e(y,JXo),e(y,T2),e(T2,YFe),e(YFe,YXo),e(T2,ZXo),e(T2,BW),e(BW,KXo),e(T2,ezo),e(y,ozo),e(y,M2),e(M2,ZFe),e(ZFe,rzo),e(M2,tzo),e(M2,IW),e(IW,azo),e(M2,nzo),e(y,szo),e(y,E2),e(E2,KFe),e(KFe,lzo),e(E2,izo),e(E2,NW),e(NW,dzo),e(E2,mzo),e(y,czo),e(y,C2),e(C2,eTe),e(eTe,fzo),e(C2,gzo),e(C2,qW),e(qW,hzo),e(C2,uzo),e(y,pzo),e(y,w2),e(w2,oTe),e(oTe,_zo),e(w2,bzo),e(w2,jW),e(jW,vzo),e(w2,Fzo),e(y,Tzo),e(y,A2),e(A2,rTe),e(rTe,Mzo),e(A2,Ezo),e(A2,DW),e(DW,Czo),e(A2,wzo),e(y,Azo),e(y,L2),e(L2,tTe),e(tTe,Lzo),e(L2,yzo),e(L2,GW),e(GW,xzo),e(L2,$zo),e(y,kzo),e(y,y2),e(y2,aTe),e(aTe,Szo),e(y2,Rzo),e(y2,OW),e(OW,Pzo),e(y2,Bzo),e(y,Izo),e(y,x2),e(x2,nTe),e(nTe,Nzo),e(x2,qzo),e(x2,VW),e(VW,jzo),e(x2,Dzo),e(y,Gzo),e(y,$2),e($2,sTe),e(sTe,Ozo),e($2,Vzo),e($2,XW),e(XW,Xzo),e($2,zzo),e(y,Qzo),e(y,k2),e(k2,lTe),e(lTe,Wzo),e(k2,Uzo),e(k2,zW),e(zW,Hzo),e(k2,Jzo),e(y,Yzo),e(y,S2),e(S2,iTe),e(iTe,Zzo),e(S2,Kzo),e(S2,QW),e(QW,eQo),e(S2,oQo),e(y,rQo),e(y,R2),e(R2,dTe),e(dTe,tQo),e(R2,aQo),e(R2,WW),e(WW,nQo),e(R2,sQo),e(y,lQo),e(y,P2),e(P2,mTe),e(mTe,iQo),e(P2,dQo),e(P2,UW),e(UW,mQo),e(P2,cQo),e(y,fQo),e(y,B2),e(B2,cTe),e(cTe,gQo),e(B2,hQo),e(B2,HW),e(HW,uQo),e(B2,pQo),e(y,_Qo),e(y,I2),e(I2,fTe),e(fTe,bQo),e(I2,vQo),e(I2,JW),e(JW,FQo),e(I2,TQo),e(y,MQo),e(y,N2),e(N2,gTe),e(gTe,EQo),e(N2,CQo),e(N2,YW),e(YW,wQo),e(N2,AQo),e(y,LQo),e(y,q2),e(q2,hTe),e(hTe,yQo),e(q2,xQo),e(q2,ZW),e(ZW,$Qo),e(q2,kQo),e(y,SQo),e(y,j2),e(j2,uTe),e(uTe,RQo),e(j2,PQo),e(j2,KW),e(KW,BQo),e(j2,IQo),e(y,NQo),e(y,D2),e(D2,pTe),e(pTe,qQo),e(D2,jQo),e(D2,eU),e(eU,DQo),e(D2,GQo),e(y,OQo),e(y,G2),e(G2,_Te),e(_Te,VQo),e(G2,XQo),e(G2,oU),e(oU,zQo),e(G2,QQo),e(y,WQo),e(y,O2),e(O2,bTe),e(bTe,UQo),e(O2,HQo),e(O2,rU),e(rU,JQo),e(O2,YQo),e(y,ZQo),e(y,V2),e(V2,vTe),e(vTe,KQo),e(V2,eWo),e(V2,tU),e(tU,oWo),e(V2,rWo),e(y,tWo),e(y,X2),e(X2,FTe),e(FTe,aWo),e(X2,nWo),e(X2,aU),e(aU,sWo),e(X2,lWo),e(y,iWo),e(y,z2),e(z2,TTe),e(TTe,dWo),e(z2,mWo),e(z2,nU),e(nU,cWo),e(z2,fWo),e(y,gWo),e(y,Q2),e(Q2,MTe),e(MTe,hWo),e(Q2,uWo),e(Q2,sU),e(sU,pWo),e(Q2,_Wo),e(y,bWo),e(y,W2),e(W2,ETe),e(ETe,vWo),e(W2,FWo),e(W2,lU),e(lU,TWo),e(W2,MWo),e(y,EWo),e(y,U2),e(U2,CTe),e(CTe,CWo),e(U2,wWo),e(U2,iU),e(iU,AWo),e(U2,LWo),e(y,yWo),e(y,H2),e(H2,wTe),e(wTe,xWo),e(H2,$Wo),e(H2,dU),e(dU,kWo),e(H2,SWo),e(y,RWo),e(y,J2),e(J2,ATe),e(ATe,PWo),e(J2,BWo),e(J2,mU),e(mU,IWo),e(J2,NWo),e(y,qWo),e(y,Y2),e(Y2,LTe),e(LTe,jWo),e(Y2,DWo),e(Y2,cU),e(cU,GWo),e(Y2,OWo),e(y,VWo),e(y,Z2),e(Z2,yTe),e(yTe,XWo),e(Z2,zWo),e(Z2,fU),e(fU,QWo),e(Z2,WWo),e(y,UWo),e(y,K2),e(K2,xTe),e(xTe,HWo),e(K2,JWo),e(K2,gU),e(gU,YWo),e(K2,ZWo),e(y,KWo),e(y,eb),e(eb,$Te),e($Te,eUo),e(eb,oUo),e(eb,hU),e(hU,rUo),e(eb,tUo),e(y,aUo),e(y,ob),e(ob,kTe),e(kTe,nUo),e(ob,sUo),e(ob,uU),e(uU,lUo),e(ob,iUo),e(y,dUo),e(y,rb),e(rb,STe),e(STe,mUo),e(rb,cUo),e(rb,pU),e(pU,fUo),e(rb,gUo),e(y,hUo),e(y,tb),e(tb,RTe),e(RTe,uUo),e(tb,pUo),e(tb,_U),e(_U,_Uo),e(tb,bUo),e(y,vUo),e(y,ab),e(ab,PTe),e(PTe,FUo),e(ab,TUo),e(ab,bU),e(bU,MUo),e(ab,EUo),e(y,CUo),e(y,nb),e(nb,BTe),e(BTe,wUo),e(nb,AUo),e(nb,vU),e(vU,LUo),e(nb,yUo),e(y,xUo),e(y,sb),e(sb,ITe),e(ITe,$Uo),e(sb,kUo),e(sb,FU),e(FU,SUo),e(sb,RUo),e(y,PUo),e(y,lb),e(lb,NTe),e(NTe,BUo),e(lb,IUo),e(lb,TU),e(TU,NUo),e(lb,qUo),e(y,jUo),e(y,ib),e(ib,qTe),e(qTe,DUo),e(ib,GUo),e(ib,MU),e(MU,OUo),e(ib,VUo),e(y,XUo),e(y,db),e(db,jTe),e(jTe,zUo),e(db,QUo),e(db,EU),e(EU,WUo),e(db,UUo),e(y,HUo),e(y,mb),e(mb,DTe),e(DTe,JUo),e(mb,YUo),e(mb,CU),e(CU,ZUo),e(mb,KUo),e(y,eHo),e(y,cb),e(cb,GTe),e(GTe,oHo),e(cb,rHo),e(cb,wU),e(wU,tHo),e(cb,aHo),e(y,nHo),e(y,fb),e(fb,OTe),e(OTe,sHo),e(fb,lHo),e(fb,AU),e(AU,iHo),e(fb,dHo),e(y,mHo),e(y,gb),e(gb,VTe),e(VTe,cHo),e(gb,fHo),e(gb,LU),e(LU,gHo),e(gb,hHo),e(y,uHo),e(y,hb),e(hb,XTe),e(XTe,pHo),e(hb,_Ho),e(hb,yU),e(yU,bHo),e(hb,vHo),e(y,FHo),e(y,ub),e(ub,zTe),e(zTe,THo),e(ub,MHo),e(ub,xU),e(xU,EHo),e(ub,CHo),e(y,wHo),e(y,pb),e(pb,QTe),e(QTe,AHo),e(pb,LHo),e(pb,$U),e($U,yHo),e(pb,xHo),e(y,$Ho),e(y,_b),e(_b,WTe),e(WTe,kHo),e(_b,SHo),e(_b,kU),e(kU,RHo),e(_b,PHo),e(y,BHo),e(y,bb),e(bb,UTe),e(UTe,IHo),e(bb,NHo),e(bb,SU),e(SU,qHo),e(bb,jHo),e(y,DHo),e(y,vb),e(vb,HTe),e(HTe,GHo),e(vb,OHo),e(vb,RU),e(RU,VHo),e(vb,XHo),e(y,zHo),e(y,Fb),e(Fb,JTe),e(JTe,QHo),e(Fb,WHo),e(Fb,PU),e(PU,UHo),e(Fb,HHo),e(y,JHo),e(y,Tb),e(Tb,YTe),e(YTe,YHo),e(Tb,ZHo),e(Tb,BU),e(BU,KHo),e(Tb,eJo),e(y,oJo),e(y,Mb),e(Mb,ZTe),e(ZTe,rJo),e(Mb,tJo),e(Mb,IU),e(IU,aJo),e(Mb,nJo),e(y,sJo),e(y,Eb),e(Eb,KTe),e(KTe,lJo),e(Eb,iJo),e(Eb,NU),e(NU,dJo),e(Eb,mJo),e(y,cJo),e(y,Cb),e(Cb,eMe),e(eMe,fJo),e(Cb,gJo),e(Cb,qU),e(qU,hJo),e(Cb,uJo),e(y,pJo),e(y,wb),e(wb,oMe),e(oMe,_Jo),e(wb,bJo),e(wb,jU),e(jU,vJo),e(wb,FJo),e(y,TJo),e(y,Ab),e(Ab,rMe),e(rMe,MJo),e(Ab,EJo),e(Ab,DU),e(DU,CJo),e(Ab,wJo),e(y,AJo),e(y,Lb),e(Lb,tMe),e(tMe,LJo),e(Lb,yJo),e(Lb,GU),e(GU,xJo),e(Lb,$Jo),e(y,kJo),e(y,yb),e(yb,aMe),e(aMe,SJo),e(yb,RJo),e(yb,OU),e(OU,PJo),e(yb,BJo),e(y,IJo),e(y,xb),e(xb,nMe),e(nMe,NJo),e(xb,qJo),e(xb,VU),e(VU,jJo),e(xb,DJo),e(y,GJo),e(y,$b),e($b,sMe),e(sMe,OJo),e($b,VJo),e($b,XU),e(XU,XJo),e($b,zJo),e(y,QJo),e(y,kb),e(kb,lMe),e(lMe,WJo),e(kb,UJo),e(kb,zU),e(zU,HJo),e(kb,JJo),e(y,YJo),e(y,Sb),e(Sb,iMe),e(iMe,ZJo),e(Sb,KJo),e(Sb,QU),e(QU,eYo),e(Sb,oYo),e(y,rYo),e(y,Rb),e(Rb,dMe),e(dMe,tYo),e(Rb,aYo),e(Rb,WU),e(WU,nYo),e(Rb,sYo),e(y,lYo),e(y,Pb),e(Pb,mMe),e(mMe,iYo),e(Pb,dYo),e(Pb,UU),e(UU,mYo),e(Pb,cYo),e(y,fYo),e(y,Bb),e(Bb,cMe),e(cMe,gYo),e(Bb,hYo),e(Bb,HU),e(HU,uYo),e(Bb,pYo),e(y,_Yo),e(y,Ib),e(Ib,fMe),e(fMe,bYo),e(Ib,vYo),e(Ib,JU),e(JU,FYo),e(Ib,TYo),e(y,MYo),e(y,Nb),e(Nb,gMe),e(gMe,EYo),e(Nb,CYo),e(Nb,YU),e(YU,wYo),e(Nb,AYo),e(y,LYo),e(y,qb),e(qb,hMe),e(hMe,yYo),e(qb,xYo),e(qb,ZU),e(ZU,$Yo),e(qb,kYo),e(y,SYo),e(y,jb),e(jb,uMe),e(uMe,RYo),e(jb,PYo),e(jb,KU),e(KU,BYo),e(jb,IYo),e(y,NYo),e(y,Db),e(Db,pMe),e(pMe,qYo),e(Db,jYo),e(Db,eH),e(eH,DYo),e(Db,GYo),e(y,OYo),e(y,Gb),e(Gb,_Me),e(_Me,VYo),e(Gb,XYo),e(Gb,oH),e(oH,zYo),e(Gb,QYo),e(y,WYo),e(y,Ob),e(Ob,bMe),e(bMe,UYo),e(Ob,HYo),e(Ob,rH),e(rH,JYo),e(Ob,YYo),e(y,ZYo),e(y,Vb),e(Vb,vMe),e(vMe,KYo),e(Vb,eZo),e(Vb,tH),e(tH,oZo),e(Vb,rZo),e(y,tZo),e(y,Xb),e(Xb,FMe),e(FMe,aZo),e(Xb,nZo),e(Xb,aH),e(aH,sZo),e(Xb,lZo),e(y,iZo),e(y,zb),e(zb,TMe),e(TMe,dZo),e(zb,mZo),e(zb,nH),e(nH,cZo),e(zb,fZo),e(y,gZo),e(y,Qb),e(Qb,MMe),e(MMe,hZo),e(Qb,uZo),e(Qb,sH),e(sH,pZo),e(Qb,_Zo),e(y,bZo),e(y,Wb),e(Wb,EMe),e(EMe,vZo),e(Wb,FZo),e(Wb,lH),e(lH,TZo),e(Wb,MZo),e(y,EZo),e(y,Ub),e(Ub,CMe),e(CMe,CZo),e(Ub,wZo),e(Ub,iH),e(iH,AZo),e(Ub,LZo),e(y,yZo),e(y,Hb),e(Hb,wMe),e(wMe,xZo),e(Hb,$Zo),e(Hb,dH),e(dH,kZo),e(Hb,SZo),e(y,RZo),e(y,Jb),e(Jb,AMe),e(AMe,PZo),e(Jb,BZo),e(Jb,mH),e(mH,IZo),e(Jb,NZo),e(y,qZo),e(y,Yb),e(Yb,LMe),e(LMe,jZo),e(Yb,DZo),e(Yb,cH),e(cH,GZo),e(Yb,OZo),e(y,VZo),e(y,Zb),e(Zb,yMe),e(yMe,XZo),e(Zb,zZo),e(Zb,fH),e(fH,QZo),e(Zb,WZo),e(y,UZo),e(y,Kb),e(Kb,xMe),e(xMe,HZo),e(Kb,JZo),e(Kb,gH),e(gH,YZo),e(Kb,ZZo),e(y,KZo),e(y,ev),e(ev,$Me),e($Me,eKo),e(ev,oKo),e(ev,hH),e(hH,rKo),e(ev,tKo),e(y,aKo),e(y,ov),e(ov,kMe),e(kMe,nKo),e(ov,sKo),e(ov,uH),e(uH,lKo),e(ov,iKo),e(y,dKo),e(y,rv),e(rv,SMe),e(SMe,mKo),e(rv,cKo),e(rv,pH),e(pH,fKo),e(rv,gKo),e(y,hKo),e(y,tv),e(tv,RMe),e(RMe,uKo),e(tv,pKo),e(tv,_H),e(_H,_Ko),e(tv,bKo),e(y,vKo),e(y,av),e(av,PMe),e(PMe,FKo),e(av,TKo),e(av,bH),e(bH,MKo),e(av,EKo),e(to,CKo),e(to,nv),e(nv,wKo),e(nv,BMe),e(BMe,AKo),e(nv,LKo),e(nv,IMe),e(IMe,yKo),e(to,xKo),M(sv,to,null),b(c,Iio,_),b(c,zd,_),e(zd,lv),e(lv,NMe),M(dS,NMe,null),e(zd,$Ko),e(zd,qMe),e(qMe,kKo),b(c,Nio,_),b(c,Go,_),M(mS,Go,null),e(Go,SKo),e(Go,Qd),e(Qd,RKo),e(Qd,vH),e(vH,PKo),e(Qd,BKo),e(Qd,FH),e(FH,IKo),e(Qd,NKo),e(Go,qKo),e(Go,cS),e(cS,jKo),e(cS,jMe),e(jMe,DKo),e(cS,GKo),e(Go,OKo),e(Go,Lt),M(fS,Lt,null),e(Lt,VKo),e(Lt,DMe),e(DMe,XKo),e(Lt,zKo),e(Lt,Wd),e(Wd,QKo),e(Wd,GMe),e(GMe,WKo),e(Wd,UKo),e(Wd,TH),e(TH,HKo),e(Wd,JKo),e(Lt,YKo),M(iv,Lt,null),e(Go,ZKo),e(Go,ao),M(gS,ao,null),e(ao,KKo),e(ao,OMe),e(OMe,eer),e(ao,oer),e(ao,hn),e(hn,rer),e(hn,VMe),e(VMe,ter),e(hn,aer),e(hn,XMe),e(XMe,ner),e(hn,ser),e(hn,zMe),e(zMe,ler),e(hn,ier),e(ao,der),e(ao,G),e(G,dv),e(dv,QMe),e(QMe,mer),e(dv,cer),e(dv,MH),e(MH,fer),e(dv,ger),e(G,her),e(G,mv),e(mv,WMe),e(WMe,uer),e(mv,per),e(mv,EH),e(EH,_er),e(mv,ber),e(G,ver),e(G,cv),e(cv,UMe),e(UMe,Fer),e(cv,Ter),e(cv,CH),e(CH,Mer),e(cv,Eer),e(G,Cer),e(G,fv),e(fv,HMe),e(HMe,wer),e(fv,Aer),e(fv,wH),e(wH,Ler),e(fv,yer),e(G,xer),e(G,gv),e(gv,JMe),e(JMe,$er),e(gv,ker),e(gv,AH),e(AH,Ser),e(gv,Rer),e(G,Per),e(G,hv),e(hv,YMe),e(YMe,Ber),e(hv,Ier),e(hv,LH),e(LH,Ner),e(hv,qer),e(G,jer),e(G,uv),e(uv,ZMe),e(ZMe,Der),e(uv,Ger),e(uv,yH),e(yH,Oer),e(uv,Ver),e(G,Xer),e(G,pv),e(pv,KMe),e(KMe,zer),e(pv,Qer),e(pv,xH),e(xH,Wer),e(pv,Uer),e(G,Her),e(G,_v),e(_v,eEe),e(eEe,Jer),e(_v,Yer),e(_v,$H),e($H,Zer),e(_v,Ker),e(G,eor),e(G,bv),e(bv,oEe),e(oEe,oor),e(bv,ror),e(bv,kH),e(kH,tor),e(bv,aor),e(G,nor),e(G,vv),e(vv,rEe),e(rEe,sor),e(vv,lor),e(vv,SH),e(SH,ior),e(vv,dor),e(G,mor),e(G,Fv),e(Fv,tEe),e(tEe,cor),e(Fv,gor),e(Fv,RH),e(RH,hor),e(Fv,uor),e(G,por),e(G,Tv),e(Tv,aEe),e(aEe,_or),e(Tv,bor),e(Tv,PH),e(PH,vor),e(Tv,For),e(G,Tor),e(G,Mv),e(Mv,nEe),e(nEe,Mor),e(Mv,Eor),e(Mv,BH),e(BH,Cor),e(Mv,wor),e(G,Aor),e(G,Ev),e(Ev,sEe),e(sEe,Lor),e(Ev,yor),e(Ev,IH),e(IH,xor),e(Ev,$or),e(G,kor),e(G,Cv),e(Cv,lEe),e(lEe,Sor),e(Cv,Ror),e(Cv,NH),e(NH,Por),e(Cv,Bor),e(G,Ior),e(G,wv),e(wv,iEe),e(iEe,Nor),e(wv,qor),e(wv,qH),e(qH,jor),e(wv,Dor),e(G,Gor),e(G,Av),e(Av,dEe),e(dEe,Oor),e(Av,Vor),e(Av,jH),e(jH,Xor),e(Av,zor),e(G,Qor),e(G,Lv),e(Lv,mEe),e(mEe,Wor),e(Lv,Uor),e(Lv,DH),e(DH,Hor),e(Lv,Jor),e(G,Yor),e(G,yv),e(yv,cEe),e(cEe,Zor),e(yv,Kor),e(yv,GH),e(GH,err),e(yv,orr),e(G,rrr),e(G,xv),e(xv,fEe),e(fEe,trr),e(xv,arr),e(xv,OH),e(OH,nrr),e(xv,srr),e(G,lrr),e(G,$v),e($v,gEe),e(gEe,irr),e($v,drr),e($v,VH),e(VH,mrr),e($v,crr),e(G,frr),e(G,kv),e(kv,hEe),e(hEe,grr),e(kv,hrr),e(kv,XH),e(XH,urr),e(kv,prr),e(G,_rr),e(G,Sv),e(Sv,uEe),e(uEe,brr),e(Sv,vrr),e(Sv,zH),e(zH,Frr),e(Sv,Trr),e(G,Mrr),e(G,Rv),e(Rv,pEe),e(pEe,Err),e(Rv,Crr),e(Rv,QH),e(QH,wrr),e(Rv,Arr),e(G,Lrr),e(G,Pv),e(Pv,_Ee),e(_Ee,yrr),e(Pv,xrr),e(Pv,WH),e(WH,$rr),e(Pv,krr),e(G,Srr),e(G,Bv),e(Bv,bEe),e(bEe,Rrr),e(Bv,Prr),e(Bv,UH),e(UH,Brr),e(Bv,Irr),e(G,Nrr),e(G,Iv),e(Iv,vEe),e(vEe,qrr),e(Iv,jrr),e(Iv,HH),e(HH,Drr),e(Iv,Grr),e(G,Orr),e(G,Nv),e(Nv,FEe),e(FEe,Vrr),e(Nv,Xrr),e(Nv,JH),e(JH,zrr),e(Nv,Qrr),e(G,Wrr),e(G,qv),e(qv,TEe),e(TEe,Urr),e(qv,Hrr),e(qv,YH),e(YH,Jrr),e(qv,Yrr),e(G,Zrr),e(G,jv),e(jv,MEe),e(MEe,Krr),e(jv,etr),e(jv,ZH),e(ZH,otr),e(jv,rtr),e(G,ttr),e(G,Dv),e(Dv,EEe),e(EEe,atr),e(Dv,ntr),e(Dv,KH),e(KH,str),e(Dv,ltr),e(G,itr),e(G,Gv),e(Gv,CEe),e(CEe,dtr),e(Gv,mtr),e(Gv,eJ),e(eJ,ctr),e(Gv,ftr),e(G,gtr),e(G,Ov),e(Ov,wEe),e(wEe,htr),e(Ov,utr),e(Ov,oJ),e(oJ,ptr),e(Ov,_tr),e(G,btr),e(G,Vv),e(Vv,AEe),e(AEe,vtr),e(Vv,Ftr),e(Vv,rJ),e(rJ,Ttr),e(Vv,Mtr),e(G,Etr),e(G,Xv),e(Xv,LEe),e(LEe,Ctr),e(Xv,wtr),e(Xv,tJ),e(tJ,Atr),e(Xv,Ltr),e(G,ytr),e(G,zv),e(zv,yEe),e(yEe,xtr),e(zv,$tr),e(zv,aJ),e(aJ,ktr),e(zv,Str),e(G,Rtr),e(G,Qv),e(Qv,xEe),e(xEe,Ptr),e(Qv,Btr),e(Qv,nJ),e(nJ,Itr),e(Qv,Ntr),e(G,qtr),e(G,Wv),e(Wv,$Ee),e($Ee,jtr),e(Wv,Dtr),e(Wv,sJ),e(sJ,Gtr),e(Wv,Otr),e(G,Vtr),e(G,Uv),e(Uv,kEe),e(kEe,Xtr),e(Uv,ztr),e(Uv,lJ),e(lJ,Qtr),e(Uv,Wtr),e(G,Utr),e(G,Hv),e(Hv,SEe),e(SEe,Htr),e(Hv,Jtr),e(Hv,iJ),e(iJ,Ytr),e(Hv,Ztr),e(G,Ktr),e(G,Jv),e(Jv,REe),e(REe,ear),e(Jv,oar),e(Jv,dJ),e(dJ,rar),e(Jv,tar),e(G,aar),e(G,Yv),e(Yv,PEe),e(PEe,nar),e(Yv,sar),e(Yv,mJ),e(mJ,lar),e(Yv,iar),e(G,dar),e(G,Zv),e(Zv,BEe),e(BEe,mar),e(Zv,car),e(Zv,cJ),e(cJ,far),e(Zv,gar),e(G,har),e(G,Kv),e(Kv,IEe),e(IEe,uar),e(Kv,par),e(Kv,fJ),e(fJ,_ar),e(Kv,bar),e(G,Far),e(G,eF),e(eF,NEe),e(NEe,Tar),e(eF,Mar),e(eF,gJ),e(gJ,Ear),e(eF,Car),e(G,war),e(G,oF),e(oF,qEe),e(qEe,Aar),e(oF,Lar),e(oF,hJ),e(hJ,yar),e(oF,xar),e(G,$ar),e(G,rF),e(rF,jEe),e(jEe,kar),e(rF,Sar),e(rF,uJ),e(uJ,Rar),e(rF,Par),e(G,Bar),e(G,tF),e(tF,DEe),e(DEe,Iar),e(tF,Nar),e(tF,pJ),e(pJ,qar),e(tF,jar),e(G,Dar),e(G,aF),e(aF,GEe),e(GEe,Gar),e(aF,Oar),e(aF,_J),e(_J,Var),e(aF,Xar),e(ao,zar),e(ao,nF),e(nF,Qar),e(nF,OEe),e(OEe,War),e(nF,Uar),e(nF,VEe),e(VEe,Har),e(ao,Jar),M(sF,ao,null),b(c,qio,_),b(c,Ud,_),e(Ud,lF),e(lF,XEe),M(hS,XEe,null),e(Ud,Yar),e(Ud,zEe),e(zEe,Zar),b(c,jio,_),b(c,Oo,_),M(uS,Oo,null),e(Oo,Kar),e(Oo,Hd),e(Hd,enr),e(Hd,bJ),e(bJ,onr),e(Hd,rnr),e(Hd,vJ),e(vJ,tnr),e(Hd,anr),e(Oo,nnr),e(Oo,pS),e(pS,snr),e(pS,QEe),e(QEe,lnr),e(pS,inr),e(Oo,dnr),e(Oo,yt),M(_S,yt,null),e(yt,mnr),e(yt,WEe),e(WEe,cnr),e(yt,fnr),e(yt,Jd),e(Jd,gnr),e(Jd,UEe),e(UEe,hnr),e(Jd,unr),e(Jd,FJ),e(FJ,pnr),e(Jd,_nr),e(yt,bnr),M(iF,yt,null),e(Oo,vnr),e(Oo,no),M(bS,no,null),e(no,Fnr),e(no,HEe),e(HEe,Tnr),e(no,Mnr),e(no,un),e(un,Enr),e(un,JEe),e(JEe,Cnr),e(un,wnr),e(un,YEe),e(YEe,Anr),e(un,Lnr),e(un,ZEe),e(ZEe,ynr),e(un,xnr),e(no,$nr),e(no,W),e(W,dF),e(dF,KEe),e(KEe,knr),e(dF,Snr),e(dF,TJ),e(TJ,Rnr),e(dF,Pnr),e(W,Bnr),e(W,mF),e(mF,e4e),e(e4e,Inr),e(mF,Nnr),e(mF,MJ),e(MJ,qnr),e(mF,jnr),e(W,Dnr),e(W,cF),e(cF,o4e),e(o4e,Gnr),e(cF,Onr),e(cF,EJ),e(EJ,Vnr),e(cF,Xnr),e(W,znr),e(W,fF),e(fF,r4e),e(r4e,Qnr),e(fF,Wnr),e(fF,CJ),e(CJ,Unr),e(fF,Hnr),e(W,Jnr),e(W,gF),e(gF,t4e),e(t4e,Ynr),e(gF,Znr),e(gF,wJ),e(wJ,Knr),e(gF,esr),e(W,osr),e(W,hF),e(hF,a4e),e(a4e,rsr),e(hF,tsr),e(hF,AJ),e(AJ,asr),e(hF,nsr),e(W,ssr),e(W,uF),e(uF,n4e),e(n4e,lsr),e(uF,isr),e(uF,LJ),e(LJ,dsr),e(uF,msr),e(W,csr),e(W,pF),e(pF,s4e),e(s4e,fsr),e(pF,gsr),e(pF,yJ),e(yJ,hsr),e(pF,usr),e(W,psr),e(W,_F),e(_F,l4e),e(l4e,_sr),e(_F,bsr),e(_F,xJ),e(xJ,vsr),e(_F,Fsr),e(W,Tsr),e(W,bF),e(bF,i4e),e(i4e,Msr),e(bF,Esr),e(bF,$J),e($J,Csr),e(bF,wsr),e(W,Asr),e(W,vF),e(vF,d4e),e(d4e,Lsr),e(vF,ysr),e(vF,kJ),e(kJ,xsr),e(vF,$sr),e(W,ksr),e(W,FF),e(FF,m4e),e(m4e,Ssr),e(FF,Rsr),e(FF,SJ),e(SJ,Psr),e(FF,Bsr),e(W,Isr),e(W,TF),e(TF,c4e),e(c4e,Nsr),e(TF,qsr),e(TF,RJ),e(RJ,jsr),e(TF,Dsr),e(W,Gsr),e(W,MF),e(MF,f4e),e(f4e,Osr),e(MF,Vsr),e(MF,PJ),e(PJ,Xsr),e(MF,zsr),e(W,Qsr),e(W,EF),e(EF,g4e),e(g4e,Wsr),e(EF,Usr),e(EF,BJ),e(BJ,Hsr),e(EF,Jsr),e(W,Ysr),e(W,CF),e(CF,h4e),e(h4e,Zsr),e(CF,Ksr),e(CF,IJ),e(IJ,elr),e(CF,olr),e(W,rlr),e(W,wF),e(wF,u4e),e(u4e,tlr),e(wF,alr),e(wF,NJ),e(NJ,nlr),e(wF,slr),e(W,llr),e(W,AF),e(AF,p4e),e(p4e,ilr),e(AF,dlr),e(AF,qJ),e(qJ,mlr),e(AF,clr),e(W,flr),e(W,LF),e(LF,_4e),e(_4e,glr),e(LF,hlr),e(LF,jJ),e(jJ,ulr),e(LF,plr),e(W,_lr),e(W,yF),e(yF,b4e),e(b4e,blr),e(yF,vlr),e(yF,DJ),e(DJ,Flr),e(yF,Tlr),e(W,Mlr),e(W,xF),e(xF,v4e),e(v4e,Elr),e(xF,Clr),e(xF,GJ),e(GJ,wlr),e(xF,Alr),e(W,Llr),e(W,$F),e($F,F4e),e(F4e,ylr),e($F,xlr),e($F,OJ),e(OJ,$lr),e($F,klr),e(W,Slr),e(W,kF),e(kF,T4e),e(T4e,Rlr),e(kF,Plr),e(kF,VJ),e(VJ,Blr),e(kF,Ilr),e(W,Nlr),e(W,SF),e(SF,M4e),e(M4e,qlr),e(SF,jlr),e(SF,XJ),e(XJ,Dlr),e(SF,Glr),e(W,Olr),e(W,RF),e(RF,E4e),e(E4e,Vlr),e(RF,Xlr),e(RF,zJ),e(zJ,zlr),e(RF,Qlr),e(W,Wlr),e(W,PF),e(PF,C4e),e(C4e,Ulr),e(PF,Hlr),e(PF,QJ),e(QJ,Jlr),e(PF,Ylr),e(W,Zlr),e(W,BF),e(BF,w4e),e(w4e,Klr),e(BF,eir),e(BF,WJ),e(WJ,oir),e(BF,rir),e(W,tir),e(W,IF),e(IF,A4e),e(A4e,air),e(IF,nir),e(IF,UJ),e(UJ,sir),e(IF,lir),e(W,iir),e(W,NF),e(NF,L4e),e(L4e,dir),e(NF,mir),e(NF,HJ),e(HJ,cir),e(NF,fir),e(W,gir),e(W,qF),e(qF,y4e),e(y4e,hir),e(qF,uir),e(qF,JJ),e(JJ,pir),e(qF,_ir),e(W,bir),e(W,jF),e(jF,x4e),e(x4e,vir),e(jF,Fir),e(jF,YJ),e(YJ,Tir),e(jF,Mir),e(W,Eir),e(W,DF),e(DF,$4e),e($4e,Cir),e(DF,wir),e(DF,ZJ),e(ZJ,Air),e(DF,Lir),e(W,yir),e(W,GF),e(GF,k4e),e(k4e,xir),e(GF,$ir),e(GF,KJ),e(KJ,kir),e(GF,Sir),e(W,Rir),e(W,OF),e(OF,S4e),e(S4e,Pir),e(OF,Bir),e(OF,eY),e(eY,Iir),e(OF,Nir),e(W,qir),e(W,VF),e(VF,R4e),e(R4e,jir),e(VF,Dir),e(VF,oY),e(oY,Gir),e(VF,Oir),e(W,Vir),e(W,XF),e(XF,P4e),e(P4e,Xir),e(XF,zir),e(XF,rY),e(rY,Qir),e(XF,Wir),e(W,Uir),e(W,zF),e(zF,B4e),e(B4e,Hir),e(zF,Jir),e(zF,tY),e(tY,Yir),e(zF,Zir),e(W,Kir),e(W,QF),e(QF,I4e),e(I4e,edr),e(QF,odr),e(QF,aY),e(aY,rdr),e(QF,tdr),e(W,adr),e(W,WF),e(WF,N4e),e(N4e,ndr),e(WF,sdr),e(WF,nY),e(nY,ldr),e(WF,idr),e(W,ddr),e(W,UF),e(UF,q4e),e(q4e,mdr),e(UF,cdr),e(UF,sY),e(sY,fdr),e(UF,gdr),e(W,hdr),e(W,HF),e(HF,j4e),e(j4e,udr),e(HF,pdr),e(HF,lY),e(lY,_dr),e(HF,bdr),e(W,vdr),e(W,JF),e(JF,D4e),e(D4e,Fdr),e(JF,Tdr),e(JF,iY),e(iY,Mdr),e(JF,Edr),e(W,Cdr),e(W,YF),e(YF,G4e),e(G4e,wdr),e(YF,Adr),e(YF,dY),e(dY,Ldr),e(YF,ydr),e(no,xdr),e(no,ZF),e(ZF,$dr),e(ZF,O4e),e(O4e,kdr),e(ZF,Sdr),e(ZF,V4e),e(V4e,Rdr),e(no,Pdr),M(KF,no,null),b(c,Dio,_),b(c,Yd,_),e(Yd,eT),e(eT,X4e),M(vS,X4e,null),e(Yd,Bdr),e(Yd,z4e),e(z4e,Idr),b(c,Gio,_),b(c,Vo,_),M(FS,Vo,null),e(Vo,Ndr),e(Vo,Zd),e(Zd,qdr),e(Zd,mY),e(mY,jdr),e(Zd,Ddr),e(Zd,cY),e(cY,Gdr),e(Zd,Odr),e(Vo,Vdr),e(Vo,TS),e(TS,Xdr),e(TS,Q4e),e(Q4e,zdr),e(TS,Qdr),e(Vo,Wdr),e(Vo,xt),M(MS,xt,null),e(xt,Udr),e(xt,W4e),e(W4e,Hdr),e(xt,Jdr),e(xt,Kd),e(Kd,Ydr),e(Kd,U4e),e(U4e,Zdr),e(Kd,Kdr),e(Kd,fY),e(fY,emr),e(Kd,omr),e(xt,rmr),M(oT,xt,null),e(Vo,tmr),e(Vo,so),M(ES,so,null),e(so,amr),e(so,H4e),e(H4e,nmr),e(so,smr),e(so,pn),e(pn,lmr),e(pn,J4e),e(J4e,imr),e(pn,dmr),e(pn,Y4e),e(Y4e,mmr),e(pn,cmr),e(pn,Z4e),e(Z4e,fmr),e(pn,gmr),e(so,hmr),e(so,CS),e(CS,rT),e(rT,K4e),e(K4e,umr),e(rT,pmr),e(rT,gY),e(gY,_mr),e(rT,bmr),e(CS,vmr),e(CS,tT),e(tT,eCe),e(eCe,Fmr),e(tT,Tmr),e(tT,hY),e(hY,Mmr),e(tT,Emr),e(so,Cmr),e(so,aT),e(aT,wmr),e(aT,oCe),e(oCe,Amr),e(aT,Lmr),e(aT,rCe),e(rCe,ymr),e(so,xmr),M(nT,so,null),b(c,Oio,_),b(c,em,_),e(em,sT),e(sT,tCe),M(wS,tCe,null),e(em,$mr),e(em,aCe),e(aCe,kmr),b(c,Vio,_),b(c,Xo,_),M(AS,Xo,null),e(Xo,Smr),e(Xo,om),e(om,Rmr),e(om,uY),e(uY,Pmr),e(om,Bmr),e(om,pY),e(pY,Imr),e(om,Nmr),e(Xo,qmr),e(Xo,LS),e(LS,jmr),e(LS,nCe),e(nCe,Dmr),e(LS,Gmr),e(Xo,Omr),e(Xo,$t),M(yS,$t,null),e($t,Vmr),e($t,sCe),e(sCe,Xmr),e($t,zmr),e($t,rm),e(rm,Qmr),e(rm,lCe),e(lCe,Wmr),e(rm,Umr),e(rm,_Y),e(_Y,Hmr),e(rm,Jmr),e($t,Ymr),M(lT,$t,null),e(Xo,Zmr),e(Xo,lo),M(xS,lo,null),e(lo,Kmr),e(lo,iCe),e(iCe,ecr),e(lo,ocr),e(lo,_n),e(_n,rcr),e(_n,dCe),e(dCe,tcr),e(_n,acr),e(_n,mCe),e(mCe,ncr),e(_n,scr),e(_n,cCe),e(cCe,lcr),e(_n,icr),e(lo,dcr),e(lo,Y),e(Y,iT),e(iT,fCe),e(fCe,mcr),e(iT,ccr),e(iT,bY),e(bY,fcr),e(iT,gcr),e(Y,hcr),e(Y,dT),e(dT,gCe),e(gCe,ucr),e(dT,pcr),e(dT,vY),e(vY,_cr),e(dT,bcr),e(Y,vcr),e(Y,mT),e(mT,hCe),e(hCe,Fcr),e(mT,Tcr),e(mT,FY),e(FY,Mcr),e(mT,Ecr),e(Y,Ccr),e(Y,cT),e(cT,uCe),e(uCe,wcr),e(cT,Acr),e(cT,TY),e(TY,Lcr),e(cT,ycr),e(Y,xcr),e(Y,fT),e(fT,pCe),e(pCe,$cr),e(fT,kcr),e(fT,MY),e(MY,Scr),e(fT,Rcr),e(Y,Pcr),e(Y,gT),e(gT,_Ce),e(_Ce,Bcr),e(gT,Icr),e(gT,EY),e(EY,Ncr),e(gT,qcr),e(Y,jcr),e(Y,hT),e(hT,bCe),e(bCe,Dcr),e(hT,Gcr),e(hT,CY),e(CY,Ocr),e(hT,Vcr),e(Y,Xcr),e(Y,uT),e(uT,vCe),e(vCe,zcr),e(uT,Qcr),e(uT,wY),e(wY,Wcr),e(uT,Ucr),e(Y,Hcr),e(Y,pT),e(pT,FCe),e(FCe,Jcr),e(pT,Ycr),e(pT,AY),e(AY,Zcr),e(pT,Kcr),e(Y,efr),e(Y,_T),e(_T,TCe),e(TCe,ofr),e(_T,rfr),e(_T,LY),e(LY,tfr),e(_T,afr),e(Y,nfr),e(Y,bT),e(bT,MCe),e(MCe,sfr),e(bT,lfr),e(bT,yY),e(yY,ifr),e(bT,dfr),e(Y,mfr),e(Y,vT),e(vT,ECe),e(ECe,cfr),e(vT,ffr),e(vT,xY),e(xY,gfr),e(vT,hfr),e(Y,ufr),e(Y,FT),e(FT,CCe),e(CCe,pfr),e(FT,_fr),e(FT,$Y),e($Y,bfr),e(FT,vfr),e(Y,Ffr),e(Y,TT),e(TT,wCe),e(wCe,Tfr),e(TT,Mfr),e(TT,kY),e(kY,Efr),e(TT,Cfr),e(Y,wfr),e(Y,MT),e(MT,ACe),e(ACe,Afr),e(MT,Lfr),e(MT,SY),e(SY,yfr),e(MT,xfr),e(Y,$fr),e(Y,ET),e(ET,LCe),e(LCe,kfr),e(ET,Sfr),e(ET,RY),e(RY,Rfr),e(ET,Pfr),e(Y,Bfr),e(Y,CT),e(CT,yCe),e(yCe,Ifr),e(CT,Nfr),e(CT,PY),e(PY,qfr),e(CT,jfr),e(Y,Dfr),e(Y,wT),e(wT,xCe),e(xCe,Gfr),e(wT,Ofr),e(wT,BY),e(BY,Vfr),e(wT,Xfr),e(Y,zfr),e(Y,AT),e(AT,$Ce),e($Ce,Qfr),e(AT,Wfr),e(AT,IY),e(IY,Ufr),e(AT,Hfr),e(Y,Jfr),e(Y,LT),e(LT,kCe),e(kCe,Yfr),e(LT,Zfr),e(LT,NY),e(NY,Kfr),e(LT,egr),e(Y,ogr),e(Y,yT),e(yT,SCe),e(SCe,rgr),e(yT,tgr),e(yT,qY),e(qY,agr),e(yT,ngr),e(Y,sgr),e(Y,xT),e(xT,RCe),e(RCe,lgr),e(xT,igr),e(xT,jY),e(jY,dgr),e(xT,mgr),e(Y,cgr),e(Y,$T),e($T,PCe),e(PCe,fgr),e($T,ggr),e($T,DY),e(DY,hgr),e($T,ugr),e(Y,pgr),e(Y,kT),e(kT,BCe),e(BCe,_gr),e(kT,bgr),e(kT,GY),e(GY,vgr),e(kT,Fgr),e(Y,Tgr),e(Y,ST),e(ST,ICe),e(ICe,Mgr),e(ST,Egr),e(ST,OY),e(OY,Cgr),e(ST,wgr),e(Y,Agr),e(Y,RT),e(RT,NCe),e(NCe,Lgr),e(RT,ygr),e(RT,VY),e(VY,xgr),e(RT,$gr),e(Y,kgr),e(Y,PT),e(PT,qCe),e(qCe,Sgr),e(PT,Rgr),e(PT,XY),e(XY,Pgr),e(PT,Bgr),e(Y,Igr),e(Y,BT),e(BT,jCe),e(jCe,Ngr),e(BT,qgr),e(BT,zY),e(zY,jgr),e(BT,Dgr),e(Y,Ggr),e(Y,IT),e(IT,DCe),e(DCe,Ogr),e(IT,Vgr),e(IT,QY),e(QY,Xgr),e(IT,zgr),e(Y,Qgr),e(Y,NT),e(NT,GCe),e(GCe,Wgr),e(NT,Ugr),e(NT,WY),e(WY,Hgr),e(NT,Jgr),e(Y,Ygr),e(Y,qT),e(qT,OCe),e(OCe,Zgr),e(qT,Kgr),e(qT,UY),e(UY,ehr),e(qT,ohr),e(Y,rhr),e(Y,jT),e(jT,VCe),e(VCe,thr),e(jT,ahr),e(jT,HY),e(HY,nhr),e(jT,shr),e(Y,lhr),e(Y,DT),e(DT,XCe),e(XCe,ihr),e(DT,dhr),e(DT,JY),e(JY,mhr),e(DT,chr),e(Y,fhr),e(Y,GT),e(GT,zCe),e(zCe,ghr),e(GT,hhr),e(GT,YY),e(YY,uhr),e(GT,phr),e(Y,_hr),e(Y,OT),e(OT,QCe),e(QCe,bhr),e(OT,vhr),e(OT,ZY),e(ZY,Fhr),e(OT,Thr),e(Y,Mhr),e(Y,VT),e(VT,WCe),e(WCe,Ehr),e(VT,Chr),e(VT,UCe),e(UCe,whr),e(VT,Ahr),e(Y,Lhr),e(Y,XT),e(XT,HCe),e(HCe,yhr),e(XT,xhr),e(XT,KY),e(KY,$hr),e(XT,khr),e(Y,Shr),e(Y,zT),e(zT,JCe),e(JCe,Rhr),e(zT,Phr),e(zT,eZ),e(eZ,Bhr),e(zT,Ihr),e(Y,Nhr),e(Y,QT),e(QT,YCe),e(YCe,qhr),e(QT,jhr),e(QT,oZ),e(oZ,Dhr),e(QT,Ghr),e(Y,Ohr),e(Y,WT),e(WT,ZCe),e(ZCe,Vhr),e(WT,Xhr),e(WT,rZ),e(rZ,zhr),e(WT,Qhr),e(lo,Whr),e(lo,UT),e(UT,Uhr),e(UT,KCe),e(KCe,Hhr),e(UT,Jhr),e(UT,e3e),e(e3e,Yhr),e(lo,Zhr),M(HT,lo,null),b(c,Xio,_),b(c,tm,_),e(tm,JT),e(JT,o3e),M($S,o3e,null),e(tm,Khr),e(tm,r3e),e(r3e,eur),b(c,zio,_),b(c,zo,_),M(kS,zo,null),e(zo,our),e(zo,am),e(am,rur),e(am,tZ),e(tZ,tur),e(am,aur),e(am,aZ),e(aZ,nur),e(am,sur),e(zo,lur),e(zo,SS),e(SS,iur),e(SS,t3e),e(t3e,dur),e(SS,mur),e(zo,cur),e(zo,kt),M(RS,kt,null),e(kt,fur),e(kt,a3e),e(a3e,gur),e(kt,hur),e(kt,nm),e(nm,uur),e(nm,n3e),e(n3e,pur),e(nm,_ur),e(nm,nZ),e(nZ,bur),e(nm,vur),e(kt,Fur),M(YT,kt,null),e(zo,Tur),e(zo,io),M(PS,io,null),e(io,Mur),e(io,s3e),e(s3e,Eur),e(io,Cur),e(io,bn),e(bn,wur),e(bn,l3e),e(l3e,Aur),e(bn,Lur),e(bn,i3e),e(i3e,yur),e(bn,xur),e(bn,d3e),e(d3e,$ur),e(bn,kur),e(io,Sur),e(io,ge),e(ge,ZT),e(ZT,m3e),e(m3e,Rur),e(ZT,Pur),e(ZT,sZ),e(sZ,Bur),e(ZT,Iur),e(ge,Nur),e(ge,KT),e(KT,c3e),e(c3e,qur),e(KT,jur),e(KT,lZ),e(lZ,Dur),e(KT,Gur),e(ge,Our),e(ge,eM),e(eM,f3e),e(f3e,Vur),e(eM,Xur),e(eM,iZ),e(iZ,zur),e(eM,Qur),e(ge,Wur),e(ge,oM),e(oM,g3e),e(g3e,Uur),e(oM,Hur),e(oM,dZ),e(dZ,Jur),e(oM,Yur),e(ge,Zur),e(ge,rM),e(rM,h3e),e(h3e,Kur),e(rM,epr),e(rM,mZ),e(mZ,opr),e(rM,rpr),e(ge,tpr),e(ge,tM),e(tM,u3e),e(u3e,apr),e(tM,npr),e(tM,cZ),e(cZ,spr),e(tM,lpr),e(ge,ipr),e(ge,aM),e(aM,p3e),e(p3e,dpr),e(aM,mpr),e(aM,fZ),e(fZ,cpr),e(aM,fpr),e(ge,gpr),e(ge,nM),e(nM,_3e),e(_3e,hpr),e(nM,upr),e(nM,gZ),e(gZ,ppr),e(nM,_pr),e(ge,bpr),e(ge,sM),e(sM,b3e),e(b3e,vpr),e(sM,Fpr),e(sM,hZ),e(hZ,Tpr),e(sM,Mpr),e(ge,Epr),e(ge,lM),e(lM,v3e),e(v3e,Cpr),e(lM,wpr),e(lM,uZ),e(uZ,Apr),e(lM,Lpr),e(ge,ypr),e(ge,iM),e(iM,F3e),e(F3e,xpr),e(iM,$pr),e(iM,pZ),e(pZ,kpr),e(iM,Spr),e(ge,Rpr),e(ge,dM),e(dM,T3e),e(T3e,Ppr),e(dM,Bpr),e(dM,_Z),e(_Z,Ipr),e(dM,Npr),e(ge,qpr),e(ge,mM),e(mM,M3e),e(M3e,jpr),e(mM,Dpr),e(mM,bZ),e(bZ,Gpr),e(mM,Opr),e(ge,Vpr),e(ge,cM),e(cM,E3e),e(E3e,Xpr),e(cM,zpr),e(cM,vZ),e(vZ,Qpr),e(cM,Wpr),e(ge,Upr),e(ge,fM),e(fM,C3e),e(C3e,Hpr),e(fM,Jpr),e(fM,FZ),e(FZ,Ypr),e(fM,Zpr),e(ge,Kpr),e(ge,gM),e(gM,w3e),e(w3e,e_r),e(gM,o_r),e(gM,TZ),e(TZ,r_r),e(gM,t_r),e(ge,a_r),e(ge,hM),e(hM,A3e),e(A3e,n_r),e(hM,s_r),e(hM,MZ),e(MZ,l_r),e(hM,i_r),e(ge,d_r),e(ge,uM),e(uM,L3e),e(L3e,m_r),e(uM,c_r),e(uM,EZ),e(EZ,f_r),e(uM,g_r),e(ge,h_r),e(ge,pM),e(pM,y3e),e(y3e,u_r),e(pM,p_r),e(pM,CZ),e(CZ,__r),e(pM,b_r),e(ge,v_r),e(ge,_M),e(_M,x3e),e(x3e,F_r),e(_M,T_r),e(_M,wZ),e(wZ,M_r),e(_M,E_r),e(ge,C_r),e(ge,bM),e(bM,$3e),e($3e,w_r),e(bM,A_r),e(bM,AZ),e(AZ,L_r),e(bM,y_r),e(io,x_r),e(io,vM),e(vM,$_r),e(vM,k3e),e(k3e,k_r),e(vM,S_r),e(vM,S3e),e(S3e,R_r),e(io,P_r),M(FM,io,null),b(c,Qio,_),b(c,sm,_),e(sm,TM),e(TM,R3e),M(BS,R3e,null),e(sm,B_r),e(sm,P3e),e(P3e,I_r),b(c,Wio,_),b(c,Qo,_),M(IS,Qo,null),e(Qo,N_r),e(Qo,lm),e(lm,q_r),e(lm,LZ),e(LZ,j_r),e(lm,D_r),e(lm,yZ),e(yZ,G_r),e(lm,O_r),e(Qo,V_r),e(Qo,NS),e(NS,X_r),e(NS,B3e),e(B3e,z_r),e(NS,Q_r),e(Qo,W_r),e(Qo,St),M(qS,St,null),e(St,U_r),e(St,I3e),e(I3e,H_r),e(St,J_r),e(St,im),e(im,Y_r),e(im,N3e),e(N3e,Z_r),e(im,K_r),e(im,xZ),e(xZ,e1r),e(im,o1r),e(St,r1r),M(MM,St,null),e(Qo,t1r),e(Qo,mo),M(jS,mo,null),e(mo,a1r),e(mo,q3e),e(q3e,n1r),e(mo,s1r),e(mo,vn),e(vn,l1r),e(vn,j3e),e(j3e,i1r),e(vn,d1r),e(vn,D3e),e(D3e,m1r),e(vn,c1r),e(vn,G3e),e(G3e,f1r),e(vn,g1r),e(mo,h1r),e(mo,I),e(I,EM),e(EM,O3e),e(O3e,u1r),e(EM,p1r),e(EM,$Z),e($Z,_1r),e(EM,b1r),e(I,v1r),e(I,CM),e(CM,V3e),e(V3e,F1r),e(CM,T1r),e(CM,kZ),e(kZ,M1r),e(CM,E1r),e(I,C1r),e(I,wM),e(wM,X3e),e(X3e,w1r),e(wM,A1r),e(wM,SZ),e(SZ,L1r),e(wM,y1r),e(I,x1r),e(I,AM),e(AM,z3e),e(z3e,$1r),e(AM,k1r),e(AM,RZ),e(RZ,S1r),e(AM,R1r),e(I,P1r),e(I,LM),e(LM,Q3e),e(Q3e,B1r),e(LM,I1r),e(LM,PZ),e(PZ,N1r),e(LM,q1r),e(I,j1r),e(I,yM),e(yM,W3e),e(W3e,D1r),e(yM,G1r),e(yM,BZ),e(BZ,O1r),e(yM,V1r),e(I,X1r),e(I,xM),e(xM,U3e),e(U3e,z1r),e(xM,Q1r),e(xM,IZ),e(IZ,W1r),e(xM,U1r),e(I,H1r),e(I,$M),e($M,H3e),e(H3e,J1r),e($M,Y1r),e($M,NZ),e(NZ,Z1r),e($M,K1r),e(I,e2r),e(I,kM),e(kM,J3e),e(J3e,o2r),e(kM,r2r),e(kM,qZ),e(qZ,t2r),e(kM,a2r),e(I,n2r),e(I,SM),e(SM,Y3e),e(Y3e,s2r),e(SM,l2r),e(SM,jZ),e(jZ,i2r),e(SM,d2r),e(I,m2r),e(I,RM),e(RM,Z3e),e(Z3e,c2r),e(RM,f2r),e(RM,DZ),e(DZ,g2r),e(RM,h2r),e(I,u2r),e(I,PM),e(PM,K3e),e(K3e,p2r),e(PM,_2r),e(PM,GZ),e(GZ,b2r),e(PM,v2r),e(I,F2r),e(I,BM),e(BM,e5e),e(e5e,T2r),e(BM,M2r),e(BM,OZ),e(OZ,E2r),e(BM,C2r),e(I,w2r),e(I,IM),e(IM,o5e),e(o5e,A2r),e(IM,L2r),e(IM,VZ),e(VZ,y2r),e(IM,x2r),e(I,$2r),e(I,NM),e(NM,r5e),e(r5e,k2r),e(NM,S2r),e(NM,XZ),e(XZ,R2r),e(NM,P2r),e(I,B2r),e(I,qM),e(qM,t5e),e(t5e,I2r),e(qM,N2r),e(qM,zZ),e(zZ,q2r),e(qM,j2r),e(I,D2r),e(I,jM),e(jM,a5e),e(a5e,G2r),e(jM,O2r),e(jM,QZ),e(QZ,V2r),e(jM,X2r),e(I,z2r),e(I,DM),e(DM,n5e),e(n5e,Q2r),e(DM,W2r),e(DM,WZ),e(WZ,U2r),e(DM,H2r),e(I,J2r),e(I,GM),e(GM,s5e),e(s5e,Y2r),e(GM,Z2r),e(GM,UZ),e(UZ,K2r),e(GM,ebr),e(I,obr),e(I,OM),e(OM,l5e),e(l5e,rbr),e(OM,tbr),e(OM,HZ),e(HZ,abr),e(OM,nbr),e(I,sbr),e(I,VM),e(VM,i5e),e(i5e,lbr),e(VM,ibr),e(VM,JZ),e(JZ,dbr),e(VM,mbr),e(I,cbr),e(I,XM),e(XM,d5e),e(d5e,fbr),e(XM,gbr),e(XM,YZ),e(YZ,hbr),e(XM,ubr),e(I,pbr),e(I,zM),e(zM,m5e),e(m5e,_br),e(zM,bbr),e(zM,ZZ),e(ZZ,vbr),e(zM,Fbr),e(I,Tbr),e(I,QM),e(QM,c5e),e(c5e,Mbr),e(QM,Ebr),e(QM,KZ),e(KZ,Cbr),e(QM,wbr),e(I,Abr),e(I,WM),e(WM,f5e),e(f5e,Lbr),e(WM,ybr),e(WM,eK),e(eK,xbr),e(WM,$br),e(I,kbr),e(I,UM),e(UM,g5e),e(g5e,Sbr),e(UM,Rbr),e(UM,oK),e(oK,Pbr),e(UM,Bbr),e(I,Ibr),e(I,HM),e(HM,h5e),e(h5e,Nbr),e(HM,qbr),e(HM,rK),e(rK,jbr),e(HM,Dbr),e(I,Gbr),e(I,JM),e(JM,u5e),e(u5e,Obr),e(JM,Vbr),e(JM,tK),e(tK,Xbr),e(JM,zbr),e(I,Qbr),e(I,YM),e(YM,p5e),e(p5e,Wbr),e(YM,Ubr),e(YM,aK),e(aK,Hbr),e(YM,Jbr),e(I,Ybr),e(I,ZM),e(ZM,_5e),e(_5e,Zbr),e(ZM,Kbr),e(ZM,nK),e(nK,evr),e(ZM,ovr),e(I,rvr),e(I,KM),e(KM,b5e),e(b5e,tvr),e(KM,avr),e(KM,sK),e(sK,nvr),e(KM,svr),e(I,lvr),e(I,eE),e(eE,v5e),e(v5e,ivr),e(eE,dvr),e(eE,lK),e(lK,mvr),e(eE,cvr),e(I,fvr),e(I,oE),e(oE,F5e),e(F5e,gvr),e(oE,hvr),e(oE,iK),e(iK,uvr),e(oE,pvr),e(I,_vr),e(I,rE),e(rE,T5e),e(T5e,bvr),e(rE,vvr),e(rE,dK),e(dK,Fvr),e(rE,Tvr),e(I,Mvr),e(I,tE),e(tE,M5e),e(M5e,Evr),e(tE,Cvr),e(tE,mK),e(mK,wvr),e(tE,Avr),e(I,Lvr),e(I,aE),e(aE,E5e),e(E5e,yvr),e(aE,xvr),e(aE,cK),e(cK,$vr),e(aE,kvr),e(I,Svr),e(I,nE),e(nE,C5e),e(C5e,Rvr),e(nE,Pvr),e(nE,fK),e(fK,Bvr),e(nE,Ivr),e(I,Nvr),e(I,sE),e(sE,w5e),e(w5e,qvr),e(sE,jvr),e(sE,gK),e(gK,Dvr),e(sE,Gvr),e(I,Ovr),e(I,lE),e(lE,A5e),e(A5e,Vvr),e(lE,Xvr),e(lE,hK),e(hK,zvr),e(lE,Qvr),e(I,Wvr),e(I,iE),e(iE,L5e),e(L5e,Uvr),e(iE,Hvr),e(iE,uK),e(uK,Jvr),e(iE,Yvr),e(I,Zvr),e(I,dE),e(dE,y5e),e(y5e,Kvr),e(dE,eFr),e(dE,pK),e(pK,oFr),e(dE,rFr),e(I,tFr),e(I,mE),e(mE,x5e),e(x5e,aFr),e(mE,nFr),e(mE,_K),e(_K,sFr),e(mE,lFr),e(I,iFr),e(I,cE),e(cE,$5e),e($5e,dFr),e(cE,mFr),e(cE,bK),e(bK,cFr),e(cE,fFr),e(I,gFr),e(I,fE),e(fE,k5e),e(k5e,hFr),e(fE,uFr),e(fE,vK),e(vK,pFr),e(fE,_Fr),e(I,bFr),e(I,gE),e(gE,S5e),e(S5e,vFr),e(gE,FFr),e(gE,FK),e(FK,TFr),e(gE,MFr),e(I,EFr),e(I,hE),e(hE,R5e),e(R5e,CFr),e(hE,wFr),e(hE,TK),e(TK,AFr),e(hE,LFr),e(I,yFr),e(I,uE),e(uE,P5e),e(P5e,xFr),e(uE,$Fr),e(uE,MK),e(MK,kFr),e(uE,SFr),e(I,RFr),e(I,pE),e(pE,B5e),e(B5e,PFr),e(pE,BFr),e(pE,EK),e(EK,IFr),e(pE,NFr),e(I,qFr),e(I,_E),e(_E,I5e),e(I5e,jFr),e(_E,DFr),e(_E,CK),e(CK,GFr),e(_E,OFr),e(I,VFr),e(I,bE),e(bE,N5e),e(N5e,XFr),e(bE,zFr),e(bE,wK),e(wK,QFr),e(bE,WFr),e(I,UFr),e(I,vE),e(vE,q5e),e(q5e,HFr),e(vE,JFr),e(vE,AK),e(AK,YFr),e(vE,ZFr),e(I,KFr),e(I,FE),e(FE,j5e),e(j5e,eTr),e(FE,oTr),e(FE,LK),e(LK,rTr),e(FE,tTr),e(I,aTr),e(I,TE),e(TE,D5e),e(D5e,nTr),e(TE,sTr),e(TE,yK),e(yK,lTr),e(TE,iTr),e(I,dTr),e(I,ME),e(ME,G5e),e(G5e,mTr),e(ME,cTr),e(ME,xK),e(xK,fTr),e(ME,gTr),e(I,hTr),e(I,EE),e(EE,O5e),e(O5e,uTr),e(EE,pTr),e(EE,$K),e($K,_Tr),e(EE,bTr),e(I,vTr),e(I,CE),e(CE,V5e),e(V5e,FTr),e(CE,TTr),e(CE,kK),e(kK,MTr),e(CE,ETr),e(I,CTr),e(I,wE),e(wE,X5e),e(X5e,wTr),e(wE,ATr),e(wE,SK),e(SK,LTr),e(wE,yTr),e(mo,xTr),e(mo,AE),e(AE,$Tr),e(AE,z5e),e(z5e,kTr),e(AE,STr),e(AE,Q5e),e(Q5e,RTr),e(mo,PTr),M(LE,mo,null),b(c,Uio,_),b(c,dm,_),e(dm,yE),e(yE,W5e),M(DS,W5e,null),e(dm,BTr),e(dm,U5e),e(U5e,ITr),b(c,Hio,_),b(c,Wo,_),M(GS,Wo,null),e(Wo,NTr),e(Wo,mm),e(mm,qTr),e(mm,RK),e(RK,jTr),e(mm,DTr),e(mm,PK),e(PK,GTr),e(mm,OTr),e(Wo,VTr),e(Wo,OS),e(OS,XTr),e(OS,H5e),e(H5e,zTr),e(OS,QTr),e(Wo,WTr),e(Wo,Rt),M(VS,Rt,null),e(Rt,UTr),e(Rt,J5e),e(J5e,HTr),e(Rt,JTr),e(Rt,cm),e(cm,YTr),e(cm,Y5e),e(Y5e,ZTr),e(cm,KTr),e(cm,BK),e(BK,eMr),e(cm,oMr),e(Rt,rMr),M(xE,Rt,null),e(Wo,tMr),e(Wo,co),M(XS,co,null),e(co,aMr),e(co,Z5e),e(Z5e,nMr),e(co,sMr),e(co,Fn),e(Fn,lMr),e(Fn,K5e),e(K5e,iMr),e(Fn,dMr),e(Fn,e0e),e(e0e,mMr),e(Fn,cMr),e(Fn,o0e),e(o0e,fMr),e(Fn,gMr),e(co,hMr),e(co,K),e(K,$E),e($E,r0e),e(r0e,uMr),e($E,pMr),e($E,IK),e(IK,_Mr),e($E,bMr),e(K,vMr),e(K,kE),e(kE,t0e),e(t0e,FMr),e(kE,TMr),e(kE,NK),e(NK,MMr),e(kE,EMr),e(K,CMr),e(K,SE),e(SE,a0e),e(a0e,wMr),e(SE,AMr),e(SE,qK),e(qK,LMr),e(SE,yMr),e(K,xMr),e(K,RE),e(RE,n0e),e(n0e,$Mr),e(RE,kMr),e(RE,jK),e(jK,SMr),e(RE,RMr),e(K,PMr),e(K,PE),e(PE,s0e),e(s0e,BMr),e(PE,IMr),e(PE,DK),e(DK,NMr),e(PE,qMr),e(K,jMr),e(K,BE),e(BE,l0e),e(l0e,DMr),e(BE,GMr),e(BE,GK),e(GK,OMr),e(BE,VMr),e(K,XMr),e(K,IE),e(IE,i0e),e(i0e,zMr),e(IE,QMr),e(IE,OK),e(OK,WMr),e(IE,UMr),e(K,HMr),e(K,NE),e(NE,d0e),e(d0e,JMr),e(NE,YMr),e(NE,VK),e(VK,ZMr),e(NE,KMr),e(K,eEr),e(K,qE),e(qE,m0e),e(m0e,oEr),e(qE,rEr),e(qE,XK),e(XK,tEr),e(qE,aEr),e(K,nEr),e(K,jE),e(jE,c0e),e(c0e,sEr),e(jE,lEr),e(jE,zK),e(zK,iEr),e(jE,dEr),e(K,mEr),e(K,DE),e(DE,f0e),e(f0e,cEr),e(DE,fEr),e(DE,QK),e(QK,gEr),e(DE,hEr),e(K,uEr),e(K,GE),e(GE,g0e),e(g0e,pEr),e(GE,_Er),e(GE,WK),e(WK,bEr),e(GE,vEr),e(K,FEr),e(K,OE),e(OE,h0e),e(h0e,TEr),e(OE,MEr),e(OE,UK),e(UK,EEr),e(OE,CEr),e(K,wEr),e(K,VE),e(VE,u0e),e(u0e,AEr),e(VE,LEr),e(VE,HK),e(HK,yEr),e(VE,xEr),e(K,$Er),e(K,XE),e(XE,p0e),e(p0e,kEr),e(XE,SEr),e(XE,JK),e(JK,REr),e(XE,PEr),e(K,BEr),e(K,zE),e(zE,_0e),e(_0e,IEr),e(zE,NEr),e(zE,YK),e(YK,qEr),e(zE,jEr),e(K,DEr),e(K,QE),e(QE,b0e),e(b0e,GEr),e(QE,OEr),e(QE,ZK),e(ZK,VEr),e(QE,XEr),e(K,zEr),e(K,WE),e(WE,v0e),e(v0e,QEr),e(WE,WEr),e(WE,KK),e(KK,UEr),e(WE,HEr),e(K,JEr),e(K,UE),e(UE,F0e),e(F0e,YEr),e(UE,ZEr),e(UE,eee),e(eee,KEr),e(UE,e4r),e(K,o4r),e(K,HE),e(HE,T0e),e(T0e,r4r),e(HE,t4r),e(HE,oee),e(oee,a4r),e(HE,n4r),e(K,s4r),e(K,JE),e(JE,M0e),e(M0e,l4r),e(JE,i4r),e(JE,ree),e(ree,d4r),e(JE,m4r),e(K,c4r),e(K,YE),e(YE,E0e),e(E0e,f4r),e(YE,g4r),e(YE,tee),e(tee,h4r),e(YE,u4r),e(K,p4r),e(K,ZE),e(ZE,C0e),e(C0e,_4r),e(ZE,b4r),e(ZE,aee),e(aee,v4r),e(ZE,F4r),e(K,T4r),e(K,KE),e(KE,w0e),e(w0e,M4r),e(KE,E4r),e(KE,nee),e(nee,C4r),e(KE,w4r),e(K,A4r),e(K,e4),e(e4,A0e),e(A0e,L4r),e(e4,y4r),e(e4,see),e(see,x4r),e(e4,$4r),e(K,k4r),e(K,o4),e(o4,L0e),e(L0e,S4r),e(o4,R4r),e(o4,lee),e(lee,P4r),e(o4,B4r),e(K,I4r),e(K,r4),e(r4,y0e),e(y0e,N4r),e(r4,q4r),e(r4,iee),e(iee,j4r),e(r4,D4r),e(K,G4r),e(K,t4),e(t4,x0e),e(x0e,O4r),e(t4,V4r),e(t4,dee),e(dee,X4r),e(t4,z4r),e(K,Q4r),e(K,a4),e(a4,$0e),e($0e,W4r),e(a4,U4r),e(a4,mee),e(mee,H4r),e(a4,J4r),e(K,Y4r),e(K,n4),e(n4,k0e),e(k0e,Z4r),e(n4,K4r),e(n4,cee),e(cee,eCr),e(n4,oCr),e(K,rCr),e(K,s4),e(s4,S0e),e(S0e,tCr),e(s4,aCr),e(s4,fee),e(fee,nCr),e(s4,sCr),e(K,lCr),e(K,l4),e(l4,R0e),e(R0e,iCr),e(l4,dCr),e(l4,gee),e(gee,mCr),e(l4,cCr),e(K,fCr),e(K,i4),e(i4,P0e),e(P0e,gCr),e(i4,hCr),e(i4,hee),e(hee,uCr),e(i4,pCr),e(co,_Cr),e(co,d4),e(d4,bCr),e(d4,B0e),e(B0e,vCr),e(d4,FCr),e(d4,I0e),e(I0e,TCr),e(co,MCr),M(m4,co,null),b(c,Jio,_),b(c,fm,_),e(fm,c4),e(c4,N0e),M(zS,N0e,null),e(fm,ECr),e(fm,q0e),e(q0e,CCr),b(c,Yio,_),b(c,Uo,_),M(QS,Uo,null),e(Uo,wCr),e(Uo,gm),e(gm,ACr),e(gm,uee),e(uee,LCr),e(gm,yCr),e(gm,pee),e(pee,xCr),e(gm,$Cr),e(Uo,kCr),e(Uo,WS),e(WS,SCr),e(WS,j0e),e(j0e,RCr),e(WS,PCr),e(Uo,BCr),e(Uo,Pt),M(US,Pt,null),e(Pt,ICr),e(Pt,D0e),e(D0e,NCr),e(Pt,qCr),e(Pt,hm),e(hm,jCr),e(hm,G0e),e(G0e,DCr),e(hm,GCr),e(hm,_ee),e(_ee,OCr),e(hm,VCr),e(Pt,XCr),M(f4,Pt,null),e(Uo,zCr),e(Uo,fo),M(HS,fo,null),e(fo,QCr),e(fo,O0e),e(O0e,WCr),e(fo,UCr),e(fo,Tn),e(Tn,HCr),e(Tn,V0e),e(V0e,JCr),e(Tn,YCr),e(Tn,X0e),e(X0e,ZCr),e(Tn,KCr),e(Tn,z0e),e(z0e,e3r),e(Tn,o3r),e(fo,r3r),e(fo,Ye),e(Ye,g4),e(g4,Q0e),e(Q0e,t3r),e(g4,a3r),e(g4,bee),e(bee,n3r),e(g4,s3r),e(Ye,l3r),e(Ye,h4),e(h4,W0e),e(W0e,i3r),e(h4,d3r),e(h4,vee),e(vee,m3r),e(h4,c3r),e(Ye,f3r),e(Ye,u4),e(u4,U0e),e(U0e,g3r),e(u4,h3r),e(u4,Fee),e(Fee,u3r),e(u4,p3r),e(Ye,_3r),e(Ye,p4),e(p4,H0e),e(H0e,b3r),e(p4,v3r),e(p4,Tee),e(Tee,F3r),e(p4,T3r),e(Ye,M3r),e(Ye,_4),e(_4,J0e),e(J0e,E3r),e(_4,C3r),e(_4,Mee),e(Mee,w3r),e(_4,A3r),e(Ye,L3r),e(Ye,b4),e(b4,Y0e),e(Y0e,y3r),e(b4,x3r),e(b4,Eee),e(Eee,$3r),e(b4,k3r),e(Ye,S3r),e(Ye,v4),e(v4,Z0e),e(Z0e,R3r),e(v4,P3r),e(v4,Cee),e(Cee,B3r),e(v4,I3r),e(fo,N3r),e(fo,F4),e(F4,q3r),e(F4,K0e),e(K0e,j3r),e(F4,D3r),e(F4,ewe),e(ewe,G3r),e(fo,O3r),M(T4,fo,null),b(c,Zio,_),b(c,um,_),e(um,M4),e(M4,owe),M(JS,owe,null),e(um,V3r),e(um,rwe),e(rwe,X3r),b(c,Kio,_),b(c,Ho,_),M(YS,Ho,null),e(Ho,z3r),e(Ho,pm),e(pm,Q3r),e(pm,wee),e(wee,W3r),e(pm,U3r),e(pm,Aee),e(Aee,H3r),e(pm,J3r),e(Ho,Y3r),e(Ho,ZS),e(ZS,Z3r),e(ZS,twe),e(twe,K3r),e(ZS,e5r),e(Ho,o5r),e(Ho,Bt),M(KS,Bt,null),e(Bt,r5r),e(Bt,awe),e(awe,t5r),e(Bt,a5r),e(Bt,_m),e(_m,n5r),e(_m,nwe),e(nwe,s5r),e(_m,l5r),e(_m,Lee),e(Lee,i5r),e(_m,d5r),e(Bt,m5r),M(E4,Bt,null),e(Ho,c5r),e(Ho,go),M(eR,go,null),e(go,f5r),e(go,swe),e(swe,g5r),e(go,h5r),e(go,Mn),e(Mn,u5r),e(Mn,lwe),e(lwe,p5r),e(Mn,_5r),e(Mn,iwe),e(iwe,b5r),e(Mn,v5r),e(Mn,dwe),e(dwe,F5r),e(Mn,T5r),e(go,M5r),e(go,U),e(U,C4),e(C4,mwe),e(mwe,E5r),e(C4,C5r),e(C4,yee),e(yee,w5r),e(C4,A5r),e(U,L5r),e(U,w4),e(w4,cwe),e(cwe,y5r),e(w4,x5r),e(w4,xee),e(xee,$5r),e(w4,k5r),e(U,S5r),e(U,A4),e(A4,fwe),e(fwe,R5r),e(A4,P5r),e(A4,$ee),e($ee,B5r),e(A4,I5r),e(U,N5r),e(U,L4),e(L4,gwe),e(gwe,q5r),e(L4,j5r),e(L4,kee),e(kee,D5r),e(L4,G5r),e(U,O5r),e(U,y4),e(y4,hwe),e(hwe,V5r),e(y4,X5r),e(y4,See),e(See,z5r),e(y4,Q5r),e(U,W5r),e(U,x4),e(x4,uwe),e(uwe,U5r),e(x4,H5r),e(x4,Ree),e(Ree,J5r),e(x4,Y5r),e(U,Z5r),e(U,$4),e($4,pwe),e(pwe,K5r),e($4,e0r),e($4,Pee),e(Pee,o0r),e($4,r0r),e(U,t0r),e(U,k4),e(k4,_we),e(_we,a0r),e(k4,n0r),e(k4,Bee),e(Bee,s0r),e(k4,l0r),e(U,i0r),e(U,S4),e(S4,bwe),e(bwe,d0r),e(S4,m0r),e(S4,Iee),e(Iee,c0r),e(S4,f0r),e(U,g0r),e(U,R4),e(R4,vwe),e(vwe,h0r),e(R4,u0r),e(R4,Nee),e(Nee,p0r),e(R4,_0r),e(U,b0r),e(U,P4),e(P4,Fwe),e(Fwe,v0r),e(P4,F0r),e(P4,qee),e(qee,T0r),e(P4,M0r),e(U,E0r),e(U,B4),e(B4,Twe),e(Twe,C0r),e(B4,w0r),e(B4,jee),e(jee,A0r),e(B4,L0r),e(U,y0r),e(U,I4),e(I4,Mwe),e(Mwe,x0r),e(I4,$0r),e(I4,Dee),e(Dee,k0r),e(I4,S0r),e(U,R0r),e(U,N4),e(N4,Ewe),e(Ewe,P0r),e(N4,B0r),e(N4,Gee),e(Gee,I0r),e(N4,N0r),e(U,q0r),e(U,q4),e(q4,Cwe),e(Cwe,j0r),e(q4,D0r),e(q4,Oee),e(Oee,G0r),e(q4,O0r),e(U,V0r),e(U,j4),e(j4,wwe),e(wwe,X0r),e(j4,z0r),e(j4,Vee),e(Vee,Q0r),e(j4,W0r),e(U,U0r),e(U,D4),e(D4,Awe),e(Awe,H0r),e(D4,J0r),e(D4,Xee),e(Xee,Y0r),e(D4,Z0r),e(U,K0r),e(U,G4),e(G4,Lwe),e(Lwe,ewr),e(G4,owr),e(G4,zee),e(zee,rwr),e(G4,twr),e(U,awr),e(U,O4),e(O4,ywe),e(ywe,nwr),e(O4,swr),e(O4,Qee),e(Qee,lwr),e(O4,iwr),e(U,dwr),e(U,V4),e(V4,xwe),e(xwe,mwr),e(V4,cwr),e(V4,Wee),e(Wee,fwr),e(V4,gwr),e(U,hwr),e(U,X4),e(X4,$we),e($we,uwr),e(X4,pwr),e(X4,Uee),e(Uee,_wr),e(X4,bwr),e(U,vwr),e(U,z4),e(z4,kwe),e(kwe,Fwr),e(z4,Twr),e(z4,Hee),e(Hee,Mwr),e(z4,Ewr),e(U,Cwr),e(U,Q4),e(Q4,Swe),e(Swe,wwr),e(Q4,Awr),e(Q4,Jee),e(Jee,Lwr),e(Q4,ywr),e(U,xwr),e(U,W4),e(W4,Rwe),e(Rwe,$wr),e(W4,kwr),e(W4,Yee),e(Yee,Swr),e(W4,Rwr),e(U,Pwr),e(U,U4),e(U4,Pwe),e(Pwe,Bwr),e(U4,Iwr),e(U4,Zee),e(Zee,Nwr),e(U4,qwr),e(U,jwr),e(U,H4),e(H4,Bwe),e(Bwe,Dwr),e(H4,Gwr),e(H4,Kee),e(Kee,Owr),e(H4,Vwr),e(U,Xwr),e(U,J4),e(J4,Iwe),e(Iwe,zwr),e(J4,Qwr),e(J4,eoe),e(eoe,Wwr),e(J4,Uwr),e(U,Hwr),e(U,Y4),e(Y4,Nwe),e(Nwe,Jwr),e(Y4,Ywr),e(Y4,ooe),e(ooe,Zwr),e(Y4,Kwr),e(U,eAr),e(U,Z4),e(Z4,qwe),e(qwe,oAr),e(Z4,rAr),e(Z4,roe),e(roe,tAr),e(Z4,aAr),e(U,nAr),e(U,K4),e(K4,jwe),e(jwe,sAr),e(K4,lAr),e(K4,toe),e(toe,iAr),e(K4,dAr),e(U,mAr),e(U,eC),e(eC,Dwe),e(Dwe,cAr),e(eC,fAr),e(eC,aoe),e(aoe,gAr),e(eC,hAr),e(U,uAr),e(U,oC),e(oC,Gwe),e(Gwe,pAr),e(oC,_Ar),e(oC,noe),e(noe,bAr),e(oC,vAr),e(U,FAr),e(U,rC),e(rC,Owe),e(Owe,TAr),e(rC,MAr),e(rC,soe),e(soe,EAr),e(rC,CAr),e(U,wAr),e(U,tC),e(tC,Vwe),e(Vwe,AAr),e(tC,LAr),e(tC,loe),e(loe,yAr),e(tC,xAr),e(U,$Ar),e(U,aC),e(aC,Xwe),e(Xwe,kAr),e(aC,SAr),e(aC,ioe),e(ioe,RAr),e(aC,PAr),e(U,BAr),e(U,nC),e(nC,zwe),e(zwe,IAr),e(nC,NAr),e(nC,doe),e(doe,qAr),e(nC,jAr),e(U,DAr),e(U,sC),e(sC,Qwe),e(Qwe,GAr),e(sC,OAr),e(sC,moe),e(moe,VAr),e(sC,XAr),e(U,zAr),e(U,lC),e(lC,Wwe),e(Wwe,QAr),e(lC,WAr),e(lC,coe),e(coe,UAr),e(lC,HAr),e(U,JAr),e(U,iC),e(iC,Uwe),e(Uwe,YAr),e(iC,ZAr),e(iC,foe),e(foe,KAr),e(iC,e6r),e(U,o6r),e(U,dC),e(dC,Hwe),e(Hwe,r6r),e(dC,t6r),e(dC,goe),e(goe,a6r),e(dC,n6r),e(U,s6r),e(U,mC),e(mC,Jwe),e(Jwe,l6r),e(mC,i6r),e(mC,hoe),e(hoe,d6r),e(mC,m6r),e(U,c6r),e(U,cC),e(cC,Ywe),e(Ywe,f6r),e(cC,g6r),e(cC,uoe),e(uoe,h6r),e(cC,u6r),e(go,p6r),e(go,fC),e(fC,_6r),e(fC,Zwe),e(Zwe,b6r),e(fC,v6r),e(fC,Kwe),e(Kwe,F6r),e(go,T6r),M(gC,go,null),b(c,edo,_),b(c,bm,_),e(bm,hC),e(hC,eAe),M(oR,eAe,null),e(bm,M6r),e(bm,oAe),e(oAe,E6r),b(c,odo,_),b(c,Jo,_),M(rR,Jo,null),e(Jo,C6r),e(Jo,vm),e(vm,w6r),e(vm,poe),e(poe,A6r),e(vm,L6r),e(vm,_oe),e(_oe,y6r),e(vm,x6r),e(Jo,$6r),e(Jo,tR),e(tR,k6r),e(tR,rAe),e(rAe,S6r),e(tR,R6r),e(Jo,P6r),e(Jo,It),M(aR,It,null),e(It,B6r),e(It,tAe),e(tAe,I6r),e(It,N6r),e(It,Fm),e(Fm,q6r),e(Fm,aAe),e(aAe,j6r),e(Fm,D6r),e(Fm,boe),e(boe,G6r),e(Fm,O6r),e(It,V6r),M(uC,It,null),e(Jo,X6r),e(Jo,ho),M(nR,ho,null),e(ho,z6r),e(ho,nAe),e(nAe,Q6r),e(ho,W6r),e(ho,En),e(En,U6r),e(En,sAe),e(sAe,H6r),e(En,J6r),e(En,lAe),e(lAe,Y6r),e(En,Z6r),e(En,iAe),e(iAe,K6r),e(En,e7r),e(ho,o7r),e(ho,O),e(O,pC),e(pC,dAe),e(dAe,r7r),e(pC,t7r),e(pC,voe),e(voe,a7r),e(pC,n7r),e(O,s7r),e(O,_C),e(_C,mAe),e(mAe,l7r),e(_C,i7r),e(_C,Foe),e(Foe,d7r),e(_C,m7r),e(O,c7r),e(O,bC),e(bC,cAe),e(cAe,f7r),e(bC,g7r),e(bC,Toe),e(Toe,h7r),e(bC,u7r),e(O,p7r),e(O,vC),e(vC,fAe),e(fAe,_7r),e(vC,b7r),e(vC,Moe),e(Moe,v7r),e(vC,F7r),e(O,T7r),e(O,FC),e(FC,gAe),e(gAe,M7r),e(FC,E7r),e(FC,Eoe),e(Eoe,C7r),e(FC,w7r),e(O,A7r),e(O,TC),e(TC,hAe),e(hAe,L7r),e(TC,y7r),e(TC,Coe),e(Coe,x7r),e(TC,$7r),e(O,k7r),e(O,MC),e(MC,uAe),e(uAe,S7r),e(MC,R7r),e(MC,woe),e(woe,P7r),e(MC,B7r),e(O,I7r),e(O,EC),e(EC,pAe),e(pAe,N7r),e(EC,q7r),e(EC,Aoe),e(Aoe,j7r),e(EC,D7r),e(O,G7r),e(O,CC),e(CC,_Ae),e(_Ae,O7r),e(CC,V7r),e(CC,Loe),e(Loe,X7r),e(CC,z7r),e(O,Q7r),e(O,wC),e(wC,bAe),e(bAe,W7r),e(wC,U7r),e(wC,yoe),e(yoe,H7r),e(wC,J7r),e(O,Y7r),e(O,AC),e(AC,vAe),e(vAe,Z7r),e(AC,K7r),e(AC,xoe),e(xoe,e8r),e(AC,o8r),e(O,r8r),e(O,LC),e(LC,FAe),e(FAe,t8r),e(LC,a8r),e(LC,$oe),e($oe,n8r),e(LC,s8r),e(O,l8r),e(O,yC),e(yC,TAe),e(TAe,i8r),e(yC,d8r),e(yC,koe),e(koe,m8r),e(yC,c8r),e(O,f8r),e(O,xC),e(xC,MAe),e(MAe,g8r),e(xC,h8r),e(xC,Soe),e(Soe,u8r),e(xC,p8r),e(O,_8r),e(O,$C),e($C,EAe),e(EAe,b8r),e($C,v8r),e($C,Roe),e(Roe,F8r),e($C,T8r),e(O,M8r),e(O,kC),e(kC,CAe),e(CAe,E8r),e(kC,C8r),e(kC,Poe),e(Poe,w8r),e(kC,A8r),e(O,L8r),e(O,SC),e(SC,wAe),e(wAe,y8r),e(SC,x8r),e(SC,Boe),e(Boe,$8r),e(SC,k8r),e(O,S8r),e(O,RC),e(RC,AAe),e(AAe,R8r),e(RC,P8r),e(RC,Ioe),e(Ioe,B8r),e(RC,I8r),e(O,N8r),e(O,PC),e(PC,LAe),e(LAe,q8r),e(PC,j8r),e(PC,Noe),e(Noe,D8r),e(PC,G8r),e(O,O8r),e(O,BC),e(BC,yAe),e(yAe,V8r),e(BC,X8r),e(BC,qoe),e(qoe,z8r),e(BC,Q8r),e(O,W8r),e(O,IC),e(IC,xAe),e(xAe,U8r),e(IC,H8r),e(IC,joe),e(joe,J8r),e(IC,Y8r),e(O,Z8r),e(O,NC),e(NC,$Ae),e($Ae,K8r),e(NC,eLr),e(NC,Doe),e(Doe,oLr),e(NC,rLr),e(O,tLr),e(O,qC),e(qC,kAe),e(kAe,aLr),e(qC,nLr),e(qC,Goe),e(Goe,sLr),e(qC,lLr),e(O,iLr),e(O,jC),e(jC,SAe),e(SAe,dLr),e(jC,mLr),e(jC,Ooe),e(Ooe,cLr),e(jC,fLr),e(O,gLr),e(O,DC),e(DC,RAe),e(RAe,hLr),e(DC,uLr),e(DC,Voe),e(Voe,pLr),e(DC,_Lr),e(O,bLr),e(O,GC),e(GC,PAe),e(PAe,vLr),e(GC,FLr),e(GC,Xoe),e(Xoe,TLr),e(GC,MLr),e(O,ELr),e(O,OC),e(OC,BAe),e(BAe,CLr),e(OC,wLr),e(OC,zoe),e(zoe,ALr),e(OC,LLr),e(O,yLr),e(O,VC),e(VC,IAe),e(IAe,xLr),e(VC,$Lr),e(VC,Qoe),e(Qoe,kLr),e(VC,SLr),e(O,RLr),e(O,XC),e(XC,NAe),e(NAe,PLr),e(XC,BLr),e(XC,Woe),e(Woe,ILr),e(XC,NLr),e(O,qLr),e(O,zC),e(zC,qAe),e(qAe,jLr),e(zC,DLr),e(zC,Uoe),e(Uoe,GLr),e(zC,OLr),e(O,VLr),e(O,QC),e(QC,jAe),e(jAe,XLr),e(QC,zLr),e(QC,Hoe),e(Hoe,QLr),e(QC,WLr),e(O,ULr),e(O,WC),e(WC,DAe),e(DAe,HLr),e(WC,JLr),e(WC,Joe),e(Joe,YLr),e(WC,ZLr),e(O,KLr),e(O,UC),e(UC,GAe),e(GAe,eyr),e(UC,oyr),e(UC,Yoe),e(Yoe,ryr),e(UC,tyr),e(O,ayr),e(O,HC),e(HC,OAe),e(OAe,nyr),e(HC,syr),e(HC,Zoe),e(Zoe,lyr),e(HC,iyr),e(O,dyr),e(O,JC),e(JC,VAe),e(VAe,myr),e(JC,cyr),e(JC,Koe),e(Koe,fyr),e(JC,gyr),e(O,hyr),e(O,YC),e(YC,XAe),e(XAe,uyr),e(YC,pyr),e(YC,ere),e(ere,_yr),e(YC,byr),e(O,vyr),e(O,ZC),e(ZC,zAe),e(zAe,Fyr),e(ZC,Tyr),e(ZC,ore),e(ore,Myr),e(ZC,Eyr),e(O,Cyr),e(O,KC),e(KC,QAe),e(QAe,wyr),e(KC,Ayr),e(KC,rre),e(rre,Lyr),e(KC,yyr),e(O,xyr),e(O,e3),e(e3,WAe),e(WAe,$yr),e(e3,kyr),e(e3,tre),e(tre,Syr),e(e3,Ryr),e(O,Pyr),e(O,o3),e(o3,UAe),e(UAe,Byr),e(o3,Iyr),e(o3,are),e(are,Nyr),e(o3,qyr),e(O,jyr),e(O,r3),e(r3,HAe),e(HAe,Dyr),e(r3,Gyr),e(r3,nre),e(nre,Oyr),e(r3,Vyr),e(O,Xyr),e(O,t3),e(t3,JAe),e(JAe,zyr),e(t3,Qyr),e(t3,sre),e(sre,Wyr),e(t3,Uyr),e(O,Hyr),e(O,a3),e(a3,YAe),e(YAe,Jyr),e(a3,Yyr),e(a3,lre),e(lre,Zyr),e(a3,Kyr),e(O,e9r),e(O,n3),e(n3,ZAe),e(ZAe,o9r),e(n3,r9r),e(n3,ire),e(ire,t9r),e(n3,a9r),e(O,n9r),e(O,s3),e(s3,KAe),e(KAe,s9r),e(s3,l9r),e(s3,dre),e(dre,i9r),e(s3,d9r),e(O,m9r),e(O,l3),e(l3,e6e),e(e6e,c9r),e(l3,f9r),e(l3,mre),e(mre,g9r),e(l3,h9r),e(O,u9r),e(O,i3),e(i3,o6e),e(o6e,p9r),e(i3,_9r),e(i3,cre),e(cre,b9r),e(i3,v9r),e(O,F9r),e(O,d3),e(d3,r6e),e(r6e,T9r),e(d3,M9r),e(d3,fre),e(fre,E9r),e(d3,C9r),e(O,w9r),e(O,m3),e(m3,t6e),e(t6e,A9r),e(m3,L9r),e(m3,gre),e(gre,y9r),e(m3,x9r),e(ho,$9r),e(ho,c3),e(c3,k9r),e(c3,a6e),e(a6e,S9r),e(c3,R9r),e(c3,n6e),e(n6e,P9r),e(ho,B9r),M(f3,ho,null),b(c,rdo,_),b(c,Tm,_),e(Tm,g3),e(g3,s6e),M(sR,s6e,null),e(Tm,I9r),e(Tm,l6e),e(l6e,N9r),b(c,tdo,_),b(c,Yo,_),M(lR,Yo,null),e(Yo,q9r),e(Yo,Mm),e(Mm,j9r),e(Mm,hre),e(hre,D9r),e(Mm,G9r),e(Mm,ure),e(ure,O9r),e(Mm,V9r),e(Yo,X9r),e(Yo,iR),e(iR,z9r),e(iR,i6e),e(i6e,Q9r),e(iR,W9r),e(Yo,U9r),e(Yo,Nt),M(dR,Nt,null),e(Nt,H9r),e(Nt,d6e),e(d6e,J9r),e(Nt,Y9r),e(Nt,Em),e(Em,Z9r),e(Em,m6e),e(m6e,K9r),e(Em,exr),e(Em,pre),e(pre,oxr),e(Em,rxr),e(Nt,txr),M(h3,Nt,null),e(Yo,axr),e(Yo,uo),M(mR,uo,null),e(uo,nxr),e(uo,c6e),e(c6e,sxr),e(uo,lxr),e(uo,Cn),e(Cn,ixr),e(Cn,f6e),e(f6e,dxr),e(Cn,mxr),e(Cn,g6e),e(g6e,cxr),e(Cn,fxr),e(Cn,h6e),e(h6e,gxr),e(Cn,hxr),e(uo,uxr),e(uo,u6e),e(u6e,u3),e(u3,p6e),e(p6e,pxr),e(u3,_xr),e(u3,_re),e(_re,bxr),e(u3,vxr),e(uo,Fxr),e(uo,p3),e(p3,Txr),e(p3,_6e),e(_6e,Mxr),e(p3,Exr),e(p3,b6e),e(b6e,Cxr),e(uo,wxr),M(_3,uo,null),b(c,ado,_),b(c,Cm,_),e(Cm,b3),e(b3,v6e),M(cR,v6e,null),e(Cm,Axr),e(Cm,F6e),e(F6e,Lxr),b(c,ndo,_),b(c,Zo,_),M(fR,Zo,null),e(Zo,yxr),e(Zo,wm),e(wm,xxr),e(wm,bre),e(bre,$xr),e(wm,kxr),e(wm,vre),e(vre,Sxr),e(wm,Rxr),e(Zo,Pxr),e(Zo,gR),e(gR,Bxr),e(gR,T6e),e(T6e,Ixr),e(gR,Nxr),e(Zo,qxr),e(Zo,qt),M(hR,qt,null),e(qt,jxr),e(qt,M6e),e(M6e,Dxr),e(qt,Gxr),e(qt,Am),e(Am,Oxr),e(Am,E6e),e(E6e,Vxr),e(Am,Xxr),e(Am,Fre),e(Fre,zxr),e(Am,Qxr),e(qt,Wxr),M(v3,qt,null),e(Zo,Uxr),e(Zo,po),M(uR,po,null),e(po,Hxr),e(po,C6e),e(C6e,Jxr),e(po,Yxr),e(po,wn),e(wn,Zxr),e(wn,w6e),e(w6e,Kxr),e(wn,e$r),e(wn,A6e),e(A6e,o$r),e(wn,r$r),e(wn,L6e),e(L6e,t$r),e(wn,a$r),e(po,n$r),e(po,Lm),e(Lm,F3),e(F3,y6e),e(y6e,s$r),e(F3,l$r),e(F3,Tre),e(Tre,i$r),e(F3,d$r),e(Lm,m$r),e(Lm,T3),e(T3,x6e),e(x6e,c$r),e(T3,f$r),e(T3,Mre),e(Mre,g$r),e(T3,h$r),e(Lm,u$r),e(Lm,M3),e(M3,$6e),e($6e,p$r),e(M3,_$r),e(M3,Ere),e(Ere,b$r),e(M3,v$r),e(po,F$r),e(po,E3),e(E3,T$r),e(E3,k6e),e(k6e,M$r),e(E3,E$r),e(E3,S6e),e(S6e,C$r),e(po,w$r),M(C3,po,null),b(c,sdo,_),b(c,ym,_),e(ym,w3),e(w3,R6e),M(pR,R6e,null),e(ym,A$r),e(ym,P6e),e(P6e,L$r),b(c,ldo,_),b(c,Ko,_),M(_R,Ko,null),e(Ko,y$r),e(Ko,xm),e(xm,x$r),e(xm,Cre),e(Cre,$$r),e(xm,k$r),e(xm,wre),e(wre,S$r),e(xm,R$r),e(Ko,P$r),e(Ko,bR),e(bR,B$r),e(bR,B6e),e(B6e,I$r),e(bR,N$r),e(Ko,q$r),e(Ko,jt),M(vR,jt,null),e(jt,j$r),e(jt,I6e),e(I6e,D$r),e(jt,G$r),e(jt,$m),e($m,O$r),e($m,N6e),e(N6e,V$r),e($m,X$r),e($m,Are),e(Are,z$r),e($m,Q$r),e(jt,W$r),M(A3,jt,null),e(Ko,U$r),e(Ko,_o),M(FR,_o,null),e(_o,H$r),e(_o,q6e),e(q6e,J$r),e(_o,Y$r),e(_o,An),e(An,Z$r),e(An,j6e),e(j6e,K$r),e(An,ekr),e(An,D6e),e(D6e,okr),e(An,rkr),e(An,G6e),e(G6e,tkr),e(An,akr),e(_o,nkr),e(_o,Fe),e(Fe,L3),e(L3,O6e),e(O6e,skr),e(L3,lkr),e(L3,Lre),e(Lre,ikr),e(L3,dkr),e(Fe,mkr),e(Fe,y3),e(y3,V6e),e(V6e,ckr),e(y3,fkr),e(y3,yre),e(yre,gkr),e(y3,hkr),e(Fe,ukr),e(Fe,x3),e(x3,X6e),e(X6e,pkr),e(x3,_kr),e(x3,xre),e(xre,bkr),e(x3,vkr),e(Fe,Fkr),e(Fe,$3),e($3,z6e),e(z6e,Tkr),e($3,Mkr),e($3,$re),e($re,Ekr),e($3,Ckr),e(Fe,wkr),e(Fe,jl),e(jl,Q6e),e(Q6e,Akr),e(jl,Lkr),e(jl,kre),e(kre,ykr),e(jl,xkr),e(jl,Sre),e(Sre,$kr),e(jl,kkr),e(Fe,Skr),e(Fe,k3),e(k3,W6e),e(W6e,Rkr),e(k3,Pkr),e(k3,Rre),e(Rre,Bkr),e(k3,Ikr),e(Fe,Nkr),e(Fe,Dl),e(Dl,U6e),e(U6e,qkr),e(Dl,jkr),e(Dl,Pre),e(Pre,Dkr),e(Dl,Gkr),e(Dl,Bre),e(Bre,Okr),e(Dl,Vkr),e(Fe,Xkr),e(Fe,S3),e(S3,H6e),e(H6e,zkr),e(S3,Qkr),e(S3,Ire),e(Ire,Wkr),e(S3,Ukr),e(Fe,Hkr),e(Fe,R3),e(R3,J6e),e(J6e,Jkr),e(R3,Ykr),e(R3,Nre),e(Nre,Zkr),e(R3,Kkr),e(Fe,eSr),e(Fe,Dt),e(Dt,Y6e),e(Y6e,oSr),e(Dt,rSr),e(Dt,qre),e(qre,tSr),e(Dt,aSr),e(Dt,jre),e(jre,nSr),e(Dt,sSr),e(Dt,Dre),e(Dre,lSr),e(Dt,iSr),e(Fe,dSr),e(Fe,P3),e(P3,Z6e),e(Z6e,mSr),e(P3,cSr),e(P3,Gre),e(Gre,fSr),e(P3,gSr),e(Fe,hSr),e(Fe,B3),e(B3,K6e),e(K6e,uSr),e(B3,pSr),e(B3,Ore),e(Ore,_Sr),e(B3,bSr),e(Fe,vSr),e(Fe,I3),e(I3,e7e),e(e7e,FSr),e(I3,TSr),e(I3,Vre),e(Vre,MSr),e(I3,ESr),e(Fe,CSr),e(Fe,N3),e(N3,o7e),e(o7e,wSr),e(N3,ASr),e(N3,Xre),e(Xre,LSr),e(N3,ySr),e(Fe,xSr),e(Fe,q3),e(q3,r7e),e(r7e,$Sr),e(q3,kSr),e(q3,zre),e(zre,SSr),e(q3,RSr),e(Fe,PSr),e(Fe,j3),e(j3,t7e),e(t7e,BSr),e(j3,ISr),e(j3,Qre),e(Qre,NSr),e(j3,qSr),e(Fe,jSr),e(Fe,D3),e(D3,a7e),e(a7e,DSr),e(D3,GSr),e(D3,Wre),e(Wre,OSr),e(D3,VSr),e(Fe,XSr),e(Fe,G3),e(G3,n7e),e(n7e,zSr),e(G3,QSr),e(G3,Ure),e(Ure,WSr),e(G3,USr),e(Fe,HSr),e(Fe,O3),e(O3,s7e),e(s7e,JSr),e(O3,YSr),e(O3,Hre),e(Hre,ZSr),e(O3,KSr),e(_o,eRr),e(_o,V3),e(V3,oRr),e(V3,l7e),e(l7e,rRr),e(V3,tRr),e(V3,i7e),e(i7e,aRr),e(_o,nRr),M(X3,_o,null),b(c,ido,_),b(c,km,_),e(km,z3),e(z3,d7e),M(TR,d7e,null),e(km,sRr),e(km,m7e),e(m7e,lRr),b(c,ddo,_),b(c,er,_),M(MR,er,null),e(er,iRr),e(er,Sm),e(Sm,dRr),e(Sm,Jre),e(Jre,mRr),e(Sm,cRr),e(Sm,Yre),e(Yre,fRr),e(Sm,gRr),e(er,hRr),e(er,ER),e(ER,uRr),e(ER,c7e),e(c7e,pRr),e(ER,_Rr),e(er,bRr),e(er,Gt),M(CR,Gt,null),e(Gt,vRr),e(Gt,f7e),e(f7e,FRr),e(Gt,TRr),e(Gt,Rm),e(Rm,MRr),e(Rm,g7e),e(g7e,ERr),e(Rm,CRr),e(Rm,Zre),e(Zre,wRr),e(Rm,ARr),e(Gt,LRr),M(Q3,Gt,null),e(er,yRr),e(er,bo),M(wR,bo,null),e(bo,xRr),e(bo,h7e),e(h7e,$Rr),e(bo,kRr),e(bo,Ln),e(Ln,SRr),e(Ln,u7e),e(u7e,RRr),e(Ln,PRr),e(Ln,p7e),e(p7e,BRr),e(Ln,IRr),e(Ln,_7e),e(_7e,NRr),e(Ln,qRr),e(bo,jRr),e(bo,b7e),e(b7e,W3),e(W3,v7e),e(v7e,DRr),e(W3,GRr),e(W3,Kre),e(Kre,ORr),e(W3,VRr),e(bo,XRr),e(bo,U3),e(U3,zRr),e(U3,F7e),e(F7e,QRr),e(U3,WRr),e(U3,T7e),e(T7e,URr),e(bo,HRr),M(H3,bo,null),b(c,mdo,_),b(c,Pm,_),e(Pm,J3),e(J3,M7e),M(AR,M7e,null),e(Pm,JRr),e(Pm,E7e),e(E7e,YRr),b(c,cdo,_),b(c,or,_),M(LR,or,null),e(or,ZRr),e(or,Bm),e(Bm,KRr),e(Bm,ete),e(ete,ePr),e(Bm,oPr),e(Bm,ote),e(ote,rPr),e(Bm,tPr),e(or,aPr),e(or,yR),e(yR,nPr),e(yR,C7e),e(C7e,sPr),e(yR,lPr),e(or,iPr),e(or,Ot),M(xR,Ot,null),e(Ot,dPr),e(Ot,w7e),e(w7e,mPr),e(Ot,cPr),e(Ot,Im),e(Im,fPr),e(Im,A7e),e(A7e,gPr),e(Im,hPr),e(Im,rte),e(rte,uPr),e(Im,pPr),e(Ot,_Pr),M(Y3,Ot,null),e(or,bPr),e(or,vo),M($R,vo,null),e(vo,vPr),e(vo,L7e),e(L7e,FPr),e(vo,TPr),e(vo,yn),e(yn,MPr),e(yn,y7e),e(y7e,EPr),e(yn,CPr),e(yn,x7e),e(x7e,wPr),e(yn,APr),e(yn,$7e),e($7e,LPr),e(yn,yPr),e(vo,xPr),e(vo,k7e),e(k7e,Z3),e(Z3,S7e),e(S7e,$Pr),e(Z3,kPr),e(Z3,tte),e(tte,SPr),e(Z3,RPr),e(vo,PPr),e(vo,K3),e(K3,BPr),e(K3,R7e),e(R7e,IPr),e(K3,NPr),e(K3,P7e),e(P7e,qPr),e(vo,jPr),M(e5,vo,null),b(c,fdo,_),b(c,Nm,_),e(Nm,o5),e(o5,B7e),M(kR,B7e,null),e(Nm,DPr),e(Nm,I7e),e(I7e,GPr),b(c,gdo,_),b(c,rr,_),M(SR,rr,null),e(rr,OPr),e(rr,qm),e(qm,VPr),e(qm,ate),e(ate,XPr),e(qm,zPr),e(qm,nte),e(nte,QPr),e(qm,WPr),e(rr,UPr),e(rr,RR),e(RR,HPr),e(RR,N7e),e(N7e,JPr),e(RR,YPr),e(rr,ZPr),e(rr,Vt),M(PR,Vt,null),e(Vt,KPr),e(Vt,q7e),e(q7e,eBr),e(Vt,oBr),e(Vt,jm),e(jm,rBr),e(jm,j7e),e(j7e,tBr),e(jm,aBr),e(jm,ste),e(ste,nBr),e(jm,sBr),e(Vt,lBr),M(r5,Vt,null),e(rr,iBr),e(rr,Fo),M(BR,Fo,null),e(Fo,dBr),e(Fo,D7e),e(D7e,mBr),e(Fo,cBr),e(Fo,xn),e(xn,fBr),e(xn,G7e),e(G7e,gBr),e(xn,hBr),e(xn,O7e),e(O7e,uBr),e(xn,pBr),e(xn,V7e),e(V7e,_Br),e(xn,bBr),e(Fo,vBr),e(Fo,X7e),e(X7e,t5),e(t5,z7e),e(z7e,FBr),e(t5,TBr),e(t5,lte),e(lte,MBr),e(t5,EBr),e(Fo,CBr),e(Fo,a5),e(a5,wBr),e(a5,Q7e),e(Q7e,ABr),e(a5,LBr),e(a5,W7e),e(W7e,yBr),e(Fo,xBr),M(n5,Fo,null),b(c,hdo,_),b(c,Dm,_),e(Dm,s5),e(s5,U7e),M(IR,U7e,null),e(Dm,$Br),e(Dm,H7e),e(H7e,kBr),b(c,udo,_),b(c,tr,_),M(NR,tr,null),e(tr,SBr),e(tr,Gm),e(Gm,RBr),e(Gm,ite),e(ite,PBr),e(Gm,BBr),e(Gm,dte),e(dte,IBr),e(Gm,NBr),e(tr,qBr),e(tr,qR),e(qR,jBr),e(qR,J7e),e(J7e,DBr),e(qR,GBr),e(tr,OBr),e(tr,Xt),M(jR,Xt,null),e(Xt,VBr),e(Xt,Y7e),e(Y7e,XBr),e(Xt,zBr),e(Xt,Om),e(Om,QBr),e(Om,Z7e),e(Z7e,WBr),e(Om,UBr),e(Om,mte),e(mte,HBr),e(Om,JBr),e(Xt,YBr),M(l5,Xt,null),e(tr,ZBr),e(tr,To),M(DR,To,null),e(To,KBr),e(To,K7e),e(K7e,eIr),e(To,oIr),e(To,$n),e($n,rIr),e($n,e8e),e(e8e,tIr),e($n,aIr),e($n,o8e),e(o8e,nIr),e($n,sIr),e($n,r8e),e(r8e,lIr),e($n,iIr),e(To,dIr),e(To,Ne),e(Ne,i5),e(i5,t8e),e(t8e,mIr),e(i5,cIr),e(i5,cte),e(cte,fIr),e(i5,gIr),e(Ne,hIr),e(Ne,d5),e(d5,a8e),e(a8e,uIr),e(d5,pIr),e(d5,fte),e(fte,_Ir),e(d5,bIr),e(Ne,vIr),e(Ne,m5),e(m5,n8e),e(n8e,FIr),e(m5,TIr),e(m5,gte),e(gte,MIr),e(m5,EIr),e(Ne,CIr),e(Ne,c5),e(c5,s8e),e(s8e,wIr),e(c5,AIr),e(c5,hte),e(hte,LIr),e(c5,yIr),e(Ne,xIr),e(Ne,f5),e(f5,l8e),e(l8e,$Ir),e(f5,kIr),e(f5,ute),e(ute,SIr),e(f5,RIr),e(Ne,PIr),e(Ne,g5),e(g5,i8e),e(i8e,BIr),e(g5,IIr),e(g5,pte),e(pte,NIr),e(g5,qIr),e(Ne,jIr),e(Ne,h5),e(h5,d8e),e(d8e,DIr),e(h5,GIr),e(h5,_te),e(_te,OIr),e(h5,VIr),e(Ne,XIr),e(Ne,u5),e(u5,m8e),e(m8e,zIr),e(u5,QIr),e(u5,bte),e(bte,WIr),e(u5,UIr),e(Ne,HIr),e(Ne,p5),e(p5,c8e),e(c8e,JIr),e(p5,YIr),e(p5,vte),e(vte,ZIr),e(p5,KIr),e(To,eNr),e(To,_5),e(_5,oNr),e(_5,f8e),e(f8e,rNr),e(_5,tNr),e(_5,g8e),e(g8e,aNr),e(To,nNr),M(b5,To,null),b(c,pdo,_),b(c,Vm,_),e(Vm,v5),e(v5,h8e),M(GR,h8e,null),e(Vm,sNr),e(Vm,u8e),e(u8e,lNr),b(c,_do,_),b(c,ar,_),M(OR,ar,null),e(ar,iNr),e(ar,Xm),e(Xm,dNr),e(Xm,Fte),e(Fte,mNr),e(Xm,cNr),e(Xm,Tte),e(Tte,fNr),e(Xm,gNr),e(ar,hNr),e(ar,VR),e(VR,uNr),e(VR,p8e),e(p8e,pNr),e(VR,_Nr),e(ar,bNr),e(ar,zt),M(XR,zt,null),e(zt,vNr),e(zt,_8e),e(_8e,FNr),e(zt,TNr),e(zt,zm),e(zm,MNr),e(zm,b8e),e(b8e,ENr),e(zm,CNr),e(zm,Mte),e(Mte,wNr),e(zm,ANr),e(zt,LNr),M(F5,zt,null),e(ar,yNr),e(ar,Mo),M(zR,Mo,null),e(Mo,xNr),e(Mo,v8e),e(v8e,$Nr),e(Mo,kNr),e(Mo,kn),e(kn,SNr),e(kn,F8e),e(F8e,RNr),e(kn,PNr),e(kn,T8e),e(T8e,BNr),e(kn,INr),e(kn,M8e),e(M8e,NNr),e(kn,qNr),e(Mo,jNr),e(Mo,Ft),e(Ft,T5),e(T5,E8e),e(E8e,DNr),e(T5,GNr),e(T5,Ete),e(Ete,ONr),e(T5,VNr),e(Ft,XNr),e(Ft,M5),e(M5,C8e),e(C8e,zNr),e(M5,QNr),e(M5,Cte),e(Cte,WNr),e(M5,UNr),e(Ft,HNr),e(Ft,E5),e(E5,w8e),e(w8e,JNr),e(E5,YNr),e(E5,wte),e(wte,ZNr),e(E5,KNr),e(Ft,eqr),e(Ft,C5),e(C5,A8e),e(A8e,oqr),e(C5,rqr),e(C5,Ate),e(Ate,tqr),e(C5,aqr),e(Ft,nqr),e(Ft,w5),e(w5,L8e),e(L8e,sqr),e(w5,lqr),e(w5,Lte),e(Lte,iqr),e(w5,dqr),e(Mo,mqr),e(Mo,A5),e(A5,cqr),e(A5,y8e),e(y8e,fqr),e(A5,gqr),e(A5,x8e),e(x8e,hqr),e(Mo,uqr),M(L5,Mo,null),b(c,bdo,_),b(c,Qm,_),e(Qm,y5),e(y5,$8e),M(QR,$8e,null),e(Qm,pqr),e(Qm,k8e),e(k8e,_qr),b(c,vdo,_),b(c,nr,_),M(WR,nr,null),e(nr,bqr),e(nr,Wm),e(Wm,vqr),e(Wm,yte),e(yte,Fqr),e(Wm,Tqr),e(Wm,xte),e(xte,Mqr),e(Wm,Eqr),e(nr,Cqr),e(nr,UR),e(UR,wqr),e(UR,S8e),e(S8e,Aqr),e(UR,Lqr),e(nr,yqr),e(nr,Qt),M(HR,Qt,null),e(Qt,xqr),e(Qt,R8e),e(R8e,$qr),e(Qt,kqr),e(Qt,Um),e(Um,Sqr),e(Um,P8e),e(P8e,Rqr),e(Um,Pqr),e(Um,$te),e($te,Bqr),e(Um,Iqr),e(Qt,Nqr),M(x5,Qt,null),e(nr,qqr),e(nr,Eo),M(JR,Eo,null),e(Eo,jqr),e(Eo,B8e),e(B8e,Dqr),e(Eo,Gqr),e(Eo,Sn),e(Sn,Oqr),e(Sn,I8e),e(I8e,Vqr),e(Sn,Xqr),e(Sn,N8e),e(N8e,zqr),e(Sn,Qqr),e(Sn,q8e),e(q8e,Wqr),e(Sn,Uqr),e(Eo,Hqr),e(Eo,xe),e(xe,$5),e($5,j8e),e(j8e,Jqr),e($5,Yqr),e($5,kte),e(kte,Zqr),e($5,Kqr),e(xe,ejr),e(xe,k5),e(k5,D8e),e(D8e,ojr),e(k5,rjr),e(k5,Ste),e(Ste,tjr),e(k5,ajr),e(xe,njr),e(xe,S5),e(S5,G8e),e(G8e,sjr),e(S5,ljr),e(S5,Rte),e(Rte,ijr),e(S5,djr),e(xe,mjr),e(xe,R5),e(R5,O8e),e(O8e,cjr),e(R5,fjr),e(R5,Pte),e(Pte,gjr),e(R5,hjr),e(xe,ujr),e(xe,P5),e(P5,V8e),e(V8e,pjr),e(P5,_jr),e(P5,Bte),e(Bte,bjr),e(P5,vjr),e(xe,Fjr),e(xe,B5),e(B5,X8e),e(X8e,Tjr),e(B5,Mjr),e(B5,Ite),e(Ite,Ejr),e(B5,Cjr),e(xe,wjr),e(xe,I5),e(I5,z8e),e(z8e,Ajr),e(I5,Ljr),e(I5,Nte),e(Nte,yjr),e(I5,xjr),e(xe,$jr),e(xe,N5),e(N5,Q8e),e(Q8e,kjr),e(N5,Sjr),e(N5,qte),e(qte,Rjr),e(N5,Pjr),e(xe,Bjr),e(xe,q5),e(q5,W8e),e(W8e,Ijr),e(q5,Njr),e(q5,jte),e(jte,qjr),e(q5,jjr),e(xe,Djr),e(xe,j5),e(j5,U8e),e(U8e,Gjr),e(j5,Ojr),e(j5,Dte),e(Dte,Vjr),e(j5,Xjr),e(Eo,zjr),e(Eo,D5),e(D5,Qjr),e(D5,H8e),e(H8e,Wjr),e(D5,Ujr),e(D5,J8e),e(J8e,Hjr),e(Eo,Jjr),M(G5,Eo,null),b(c,Fdo,_),b(c,Hm,_),e(Hm,O5),e(O5,Y8e),M(YR,Y8e,null),e(Hm,Yjr),e(Hm,Z8e),e(Z8e,Zjr),b(c,Tdo,_),b(c,sr,_),M(ZR,sr,null),e(sr,Kjr),e(sr,Jm),e(Jm,eDr),e(Jm,Gte),e(Gte,oDr),e(Jm,rDr),e(Jm,Ote),e(Ote,tDr),e(Jm,aDr),e(sr,nDr),e(sr,KR),e(KR,sDr),e(KR,K8e),e(K8e,lDr),e(KR,iDr),e(sr,dDr),e(sr,Wt),M(eP,Wt,null),e(Wt,mDr),e(Wt,eLe),e(eLe,cDr),e(Wt,fDr),e(Wt,Ym),e(Ym,gDr),e(Ym,oLe),e(oLe,hDr),e(Ym,uDr),e(Ym,Vte),e(Vte,pDr),e(Ym,_Dr),e(Wt,bDr),M(V5,Wt,null),e(sr,vDr),e(sr,Co),M(oP,Co,null),e(Co,FDr),e(Co,rLe),e(rLe,TDr),e(Co,MDr),e(Co,Rn),e(Rn,EDr),e(Rn,tLe),e(tLe,CDr),e(Rn,wDr),e(Rn,aLe),e(aLe,ADr),e(Rn,LDr),e(Rn,nLe),e(nLe,yDr),e(Rn,xDr),e(Co,$Dr),e(Co,Zm),e(Zm,X5),e(X5,sLe),e(sLe,kDr),e(X5,SDr),e(X5,Xte),e(Xte,RDr),e(X5,PDr),e(Zm,BDr),e(Zm,z5),e(z5,lLe),e(lLe,IDr),e(z5,NDr),e(z5,zte),e(zte,qDr),e(z5,jDr),e(Zm,DDr),e(Zm,Q5),e(Q5,iLe),e(iLe,GDr),e(Q5,ODr),e(Q5,Qte),e(Qte,VDr),e(Q5,XDr),e(Co,zDr),e(Co,W5),e(W5,QDr),e(W5,dLe),e(dLe,WDr),e(W5,UDr),e(W5,mLe),e(mLe,HDr),e(Co,JDr),M(U5,Co,null),b(c,Mdo,_),b(c,Km,_),e(Km,H5),e(H5,cLe),M(rP,cLe,null),e(Km,YDr),e(Km,fLe),e(fLe,ZDr),b(c,Edo,_),b(c,lr,_),M(tP,lr,null),e(lr,KDr),e(lr,ec),e(ec,eGr),e(ec,Wte),e(Wte,oGr),e(ec,rGr),e(ec,Ute),e(Ute,tGr),e(ec,aGr),e(lr,nGr),e(lr,aP),e(aP,sGr),e(aP,gLe),e(gLe,lGr),e(aP,iGr),e(lr,dGr),e(lr,Ut),M(nP,Ut,null),e(Ut,mGr),e(Ut,hLe),e(hLe,cGr),e(Ut,fGr),e(Ut,oc),e(oc,gGr),e(oc,uLe),e(uLe,hGr),e(oc,uGr),e(oc,Hte),e(Hte,pGr),e(oc,_Gr),e(Ut,bGr),M(J5,Ut,null),e(lr,vGr),e(lr,wo),M(sP,wo,null),e(wo,FGr),e(wo,pLe),e(pLe,TGr),e(wo,MGr),e(wo,Pn),e(Pn,EGr),e(Pn,_Le),e(_Le,CGr),e(Pn,wGr),e(Pn,bLe),e(bLe,AGr),e(Pn,LGr),e(Pn,vLe),e(vLe,yGr),e(Pn,xGr),e(wo,$Gr),e(wo,Tt),e(Tt,Y5),e(Y5,FLe),e(FLe,kGr),e(Y5,SGr),e(Y5,Jte),e(Jte,RGr),e(Y5,PGr),e(Tt,BGr),e(Tt,Z5),e(Z5,TLe),e(TLe,IGr),e(Z5,NGr),e(Z5,Yte),e(Yte,qGr),e(Z5,jGr),e(Tt,DGr),e(Tt,K5),e(K5,MLe),e(MLe,GGr),e(K5,OGr),e(K5,Zte),e(Zte,VGr),e(K5,XGr),e(Tt,zGr),e(Tt,e0),e(e0,ELe),e(ELe,QGr),e(e0,WGr),e(e0,Kte),e(Kte,UGr),e(e0,HGr),e(Tt,JGr),e(Tt,o0),e(o0,CLe),e(CLe,YGr),e(o0,ZGr),e(o0,eae),e(eae,KGr),e(o0,eOr),e(wo,oOr),e(wo,r0),e(r0,rOr),e(r0,wLe),e(wLe,tOr),e(r0,aOr),e(r0,ALe),e(ALe,nOr),e(wo,sOr),M(t0,wo,null),b(c,Cdo,_),b(c,rc,_),e(rc,a0),e(a0,LLe),M(lP,LLe,null),e(rc,lOr),e(rc,yLe),e(yLe,iOr),b(c,wdo,_),b(c,ir,_),M(iP,ir,null),e(ir,dOr),e(ir,tc),e(tc,mOr),e(tc,oae),e(oae,cOr),e(tc,fOr),e(tc,rae),e(rae,gOr),e(tc,hOr),e(ir,uOr),e(ir,dP),e(dP,pOr),e(dP,xLe),e(xLe,_Or),e(dP,bOr),e(ir,vOr),e(ir,Ht),M(mP,Ht,null),e(Ht,FOr),e(Ht,$Le),e($Le,TOr),e(Ht,MOr),e(Ht,ac),e(ac,EOr),e(ac,kLe),e(kLe,COr),e(ac,wOr),e(ac,tae),e(tae,AOr),e(ac,LOr),e(Ht,yOr),M(n0,Ht,null),e(ir,xOr),e(ir,Ao),M(cP,Ao,null),e(Ao,$Or),e(Ao,SLe),e(SLe,kOr),e(Ao,SOr),e(Ao,Bn),e(Bn,ROr),e(Bn,RLe),e(RLe,POr),e(Bn,BOr),e(Bn,PLe),e(PLe,IOr),e(Bn,NOr),e(Bn,BLe),e(BLe,qOr),e(Bn,jOr),e(Ao,DOr),e(Ao,In),e(In,s0),e(s0,ILe),e(ILe,GOr),e(s0,OOr),e(s0,aae),e(aae,VOr),e(s0,XOr),e(In,zOr),e(In,l0),e(l0,NLe),e(NLe,QOr),e(l0,WOr),e(l0,nae),e(nae,UOr),e(l0,HOr),e(In,JOr),e(In,i0),e(i0,qLe),e(qLe,YOr),e(i0,ZOr),e(i0,sae),e(sae,KOr),e(i0,eVr),e(In,oVr),e(In,d0),e(d0,jLe),e(jLe,rVr),e(d0,tVr),e(d0,lae),e(lae,aVr),e(d0,nVr),e(Ao,sVr),e(Ao,m0),e(m0,lVr),e(m0,DLe),e(DLe,iVr),e(m0,dVr),e(m0,GLe),e(GLe,mVr),e(Ao,cVr),M(c0,Ao,null),b(c,Ado,_),b(c,nc,_),e(nc,f0),e(f0,OLe),M(fP,OLe,null),e(nc,fVr),e(nc,VLe),e(VLe,gVr),b(c,Ldo,_),b(c,dr,_),M(gP,dr,null),e(dr,hVr),e(dr,sc),e(sc,uVr),e(sc,iae),e(iae,pVr),e(sc,_Vr),e(sc,dae),e(dae,bVr),e(sc,vVr),e(dr,FVr),e(dr,hP),e(hP,TVr),e(hP,XLe),e(XLe,MVr),e(hP,EVr),e(dr,CVr),e(dr,Jt),M(uP,Jt,null),e(Jt,wVr),e(Jt,zLe),e(zLe,AVr),e(Jt,LVr),e(Jt,lc),e(lc,yVr),e(lc,QLe),e(QLe,xVr),e(lc,$Vr),e(lc,mae),e(mae,kVr),e(lc,SVr),e(Jt,RVr),M(g0,Jt,null),e(dr,PVr),e(dr,Lo),M(pP,Lo,null),e(Lo,BVr),e(Lo,WLe),e(WLe,IVr),e(Lo,NVr),e(Lo,Nn),e(Nn,qVr),e(Nn,ULe),e(ULe,jVr),e(Nn,DVr),e(Nn,HLe),e(HLe,GVr),e(Nn,OVr),e(Nn,JLe),e(JLe,VVr),e(Nn,XVr),e(Lo,zVr),e(Lo,Mt),e(Mt,h0),e(h0,YLe),e(YLe,QVr),e(h0,WVr),e(h0,cae),e(cae,UVr),e(h0,HVr),e(Mt,JVr),e(Mt,u0),e(u0,ZLe),e(ZLe,YVr),e(u0,ZVr),e(u0,fae),e(fae,KVr),e(u0,eXr),e(Mt,oXr),e(Mt,p0),e(p0,KLe),e(KLe,rXr),e(p0,tXr),e(p0,gae),e(gae,aXr),e(p0,nXr),e(Mt,sXr),e(Mt,_0),e(_0,eye),e(eye,lXr),e(_0,iXr),e(_0,hae),e(hae,dXr),e(_0,mXr),e(Mt,cXr),e(Mt,b0),e(b0,oye),e(oye,fXr),e(b0,gXr),e(b0,uae),e(uae,hXr),e(b0,uXr),e(Lo,pXr),e(Lo,v0),e(v0,_Xr),e(v0,rye),e(rye,bXr),e(v0,vXr),e(v0,tye),e(tye,FXr),e(Lo,TXr),M(F0,Lo,null),b(c,ydo,_),b(c,ic,_),e(ic,T0),e(T0,aye),M(_P,aye,null),e(ic,MXr),e(ic,nye),e(nye,EXr),b(c,xdo,_),b(c,mr,_),M(bP,mr,null),e(mr,CXr),e(mr,dc),e(dc,wXr),e(dc,pae),e(pae,AXr),e(dc,LXr),e(dc,_ae),e(_ae,yXr),e(dc,xXr),e(mr,$Xr),e(mr,vP),e(vP,kXr),e(vP,sye),e(sye,SXr),e(vP,RXr),e(mr,PXr),e(mr,Yt),M(FP,Yt,null),e(Yt,BXr),e(Yt,lye),e(lye,IXr),e(Yt,NXr),e(Yt,mc),e(mc,qXr),e(mc,iye),e(iye,jXr),e(mc,DXr),e(mc,bae),e(bae,GXr),e(mc,OXr),e(Yt,VXr),M(M0,Yt,null),e(mr,XXr),e(mr,yo),M(TP,yo,null),e(yo,zXr),e(yo,dye),e(dye,QXr),e(yo,WXr),e(yo,qn),e(qn,UXr),e(qn,mye),e(mye,HXr),e(qn,JXr),e(qn,cye),e(cye,YXr),e(qn,ZXr),e(qn,fye),e(fye,KXr),e(qn,ezr),e(yo,ozr),e(yo,gye),e(gye,E0),e(E0,hye),e(hye,rzr),e(E0,tzr),e(E0,vae),e(vae,azr),e(E0,nzr),e(yo,szr),e(yo,C0),e(C0,lzr),e(C0,uye),e(uye,izr),e(C0,dzr),e(C0,pye),e(pye,mzr),e(yo,czr),M(w0,yo,null),b(c,$do,_),b(c,cc,_),e(cc,A0),e(A0,_ye),M(MP,_ye,null),e(cc,fzr),e(cc,bye),e(bye,gzr),b(c,kdo,_),b(c,cr,_),M(EP,cr,null),e(cr,hzr),e(cr,fc),e(fc,uzr),e(fc,Fae),e(Fae,pzr),e(fc,_zr),e(fc,Tae),e(Tae,bzr),e(fc,vzr),e(cr,Fzr),e(cr,CP),e(CP,Tzr),e(CP,vye),e(vye,Mzr),e(CP,Ezr),e(cr,Czr),e(cr,Zt),M(wP,Zt,null),e(Zt,wzr),e(Zt,Fye),e(Fye,Azr),e(Zt,Lzr),e(Zt,gc),e(gc,yzr),e(gc,Tye),e(Tye,xzr),e(gc,$zr),e(gc,Mae),e(Mae,kzr),e(gc,Szr),e(Zt,Rzr),M(L0,Zt,null),e(cr,Pzr),e(cr,xo),M(AP,xo,null),e(xo,Bzr),e(xo,Mye),e(Mye,Izr),e(xo,Nzr),e(xo,jn),e(jn,qzr),e(jn,Eye),e(Eye,jzr),e(jn,Dzr),e(jn,Cye),e(Cye,Gzr),e(jn,Ozr),e(jn,wye),e(wye,Vzr),e(jn,Xzr),e(xo,zzr),e(xo,fr),e(fr,y0),e(y0,Aye),e(Aye,Qzr),e(y0,Wzr),e(y0,Eae),e(Eae,Uzr),e(y0,Hzr),e(fr,Jzr),e(fr,x0),e(x0,Lye),e(Lye,Yzr),e(x0,Zzr),e(x0,Cae),e(Cae,Kzr),e(x0,eQr),e(fr,oQr),e(fr,$0),e($0,yye),e(yye,rQr),e($0,tQr),e($0,wae),e(wae,aQr),e($0,nQr),e(fr,sQr),e(fr,k0),e(k0,xye),e(xye,lQr),e(k0,iQr),e(k0,Aae),e(Aae,dQr),e(k0,mQr),e(fr,cQr),e(fr,S0),e(S0,$ye),e($ye,fQr),e(S0,gQr),e(S0,Lae),e(Lae,hQr),e(S0,uQr),e(fr,pQr),e(fr,R0),e(R0,kye),e(kye,_Qr),e(R0,bQr),e(R0,yae),e(yae,vQr),e(R0,FQr),e(xo,TQr),e(xo,P0),e(P0,MQr),e(P0,Sye),e(Sye,EQr),e(P0,CQr),e(P0,Rye),e(Rye,wQr),e(xo,AQr),M(B0,xo,null),b(c,Sdo,_),b(c,hc,_),e(hc,I0),e(I0,Pye),M(LP,Pye,null),e(hc,LQr),e(hc,Bye),e(Bye,yQr),b(c,Rdo,_),b(c,gr,_),M(yP,gr,null),e(gr,xQr),e(gr,uc),e(uc,$Qr),e(uc,xae),e(xae,kQr),e(uc,SQr),e(uc,$ae),e($ae,RQr),e(uc,PQr),e(gr,BQr),e(gr,xP),e(xP,IQr),e(xP,Iye),e(Iye,NQr),e(xP,qQr),e(gr,jQr),e(gr,Kt),M($P,Kt,null),e(Kt,DQr),e(Kt,Nye),e(Nye,GQr),e(Kt,OQr),e(Kt,pc),e(pc,VQr),e(pc,qye),e(qye,XQr),e(pc,zQr),e(pc,kae),e(kae,QQr),e(pc,WQr),e(Kt,UQr),M(N0,Kt,null),e(gr,HQr),e(gr,$o),M(kP,$o,null),e($o,JQr),e($o,jye),e(jye,YQr),e($o,ZQr),e($o,Dn),e(Dn,KQr),e(Dn,Dye),e(Dye,eWr),e(Dn,oWr),e(Dn,Gye),e(Gye,rWr),e(Dn,tWr),e(Dn,Oye),e(Oye,aWr),e(Dn,nWr),e($o,sWr),e($o,Vye),e(Vye,q0),e(q0,Xye),e(Xye,lWr),e(q0,iWr),e(q0,Sae),e(Sae,dWr),e(q0,mWr),e($o,cWr),e($o,j0),e(j0,fWr),e(j0,zye),e(zye,gWr),e(j0,hWr),e(j0,Qye),e(Qye,uWr),e($o,pWr),M(D0,$o,null),b(c,Pdo,_),b(c,_c,_),e(_c,G0),e(G0,Wye),M(SP,Wye,null),e(_c,_Wr),e(_c,Uye),e(Uye,bWr),b(c,Bdo,_),b(c,hr,_),M(RP,hr,null),e(hr,vWr),e(hr,bc),e(bc,FWr),e(bc,Rae),e(Rae,TWr),e(bc,MWr),e(bc,Pae),e(Pae,EWr),e(bc,CWr),e(hr,wWr),e(hr,PP),e(PP,AWr),e(PP,Hye),e(Hye,LWr),e(PP,yWr),e(hr,xWr),e(hr,ea),M(BP,ea,null),e(ea,$Wr),e(ea,Jye),e(Jye,kWr),e(ea,SWr),e(ea,vc),e(vc,RWr),e(vc,Yye),e(Yye,PWr),e(vc,BWr),e(vc,Bae),e(Bae,IWr),e(vc,NWr),e(ea,qWr),M(O0,ea,null),e(hr,jWr),e(hr,ko),M(IP,ko,null),e(ko,DWr),e(ko,Zye),e(Zye,GWr),e(ko,OWr),e(ko,Gn),e(Gn,VWr),e(Gn,Kye),e(Kye,XWr),e(Gn,zWr),e(Gn,e9e),e(e9e,QWr),e(Gn,WWr),e(Gn,o9e),e(o9e,UWr),e(Gn,HWr),e(ko,JWr),e(ko,r9e),e(r9e,V0),e(V0,t9e),e(t9e,YWr),e(V0,ZWr),e(V0,Iae),e(Iae,KWr),e(V0,eUr),e(ko,oUr),e(ko,X0),e(X0,rUr),e(X0,a9e),e(a9e,tUr),e(X0,aUr),e(X0,n9e),e(n9e,nUr),e(ko,sUr),M(z0,ko,null),b(c,Ido,_),b(c,Fc,_),e(Fc,Q0),e(Q0,s9e),M(NP,s9e,null),e(Fc,lUr),e(Fc,l9e),e(l9e,iUr),b(c,Ndo,_),b(c,ur,_),M(qP,ur,null),e(ur,dUr),e(ur,Tc),e(Tc,mUr),e(Tc,Nae),e(Nae,cUr),e(Tc,fUr),e(Tc,qae),e(qae,gUr),e(Tc,hUr),e(ur,uUr),e(ur,jP),e(jP,pUr),e(jP,i9e),e(i9e,_Ur),e(jP,bUr),e(ur,vUr),e(ur,oa),M(DP,oa,null),e(oa,FUr),e(oa,d9e),e(d9e,TUr),e(oa,MUr),e(oa,Mc),e(Mc,EUr),e(Mc,m9e),e(m9e,CUr),e(Mc,wUr),e(Mc,jae),e(jae,AUr),e(Mc,LUr),e(oa,yUr),M(W0,oa,null),e(ur,xUr),e(ur,zr),M(GP,zr,null),e(zr,$Ur),e(zr,c9e),e(c9e,kUr),e(zr,SUr),e(zr,On),e(On,RUr),e(On,f9e),e(f9e,PUr),e(On,BUr),e(On,g9e),e(g9e,IUr),e(On,NUr),e(On,h9e),e(h9e,qUr),e(On,jUr),e(zr,DUr),e(zr,P),e(P,U0),e(U0,u9e),e(u9e,GUr),e(U0,OUr),e(U0,Dae),e(Dae,VUr),e(U0,XUr),e(P,zUr),e(P,H0),e(H0,p9e),e(p9e,QUr),e(H0,WUr),e(H0,Gae),e(Gae,UUr),e(H0,HUr),e(P,JUr),e(P,J0),e(J0,_9e),e(_9e,YUr),e(J0,ZUr),e(J0,Oae),e(Oae,KUr),e(J0,eHr),e(P,oHr),e(P,Y0),e(Y0,b9e),e(b9e,rHr),e(Y0,tHr),e(Y0,Vae),e(Vae,aHr),e(Y0,nHr),e(P,sHr),e(P,Z0),e(Z0,v9e),e(v9e,lHr),e(Z0,iHr),e(Z0,Xae),e(Xae,dHr),e(Z0,mHr),e(P,cHr),e(P,K0),e(K0,F9e),e(F9e,fHr),e(K0,gHr),e(K0,zae),e(zae,hHr),e(K0,uHr),e(P,pHr),e(P,ew),e(ew,T9e),e(T9e,_Hr),e(ew,bHr),e(ew,Qae),e(Qae,vHr),e(ew,FHr),e(P,THr),e(P,ow),e(ow,M9e),e(M9e,MHr),e(ow,EHr),e(ow,Wae),e(Wae,CHr),e(ow,wHr),e(P,AHr),e(P,rw),e(rw,E9e),e(E9e,LHr),e(rw,yHr),e(rw,Uae),e(Uae,xHr),e(rw,$Hr),e(P,kHr),e(P,tw),e(tw,C9e),e(C9e,SHr),e(tw,RHr),e(tw,Hae),e(Hae,PHr),e(tw,BHr),e(P,IHr),e(P,aw),e(aw,w9e),e(w9e,NHr),e(aw,qHr),e(aw,Jae),e(Jae,jHr),e(aw,DHr),e(P,GHr),e(P,nw),e(nw,A9e),e(A9e,OHr),e(nw,VHr),e(nw,Yae),e(Yae,XHr),e(nw,zHr),e(P,QHr),e(P,sw),e(sw,L9e),e(L9e,WHr),e(sw,UHr),e(sw,Zae),e(Zae,HHr),e(sw,JHr),e(P,YHr),e(P,lw),e(lw,y9e),e(y9e,ZHr),e(lw,KHr),e(lw,Kae),e(Kae,eJr),e(lw,oJr),e(P,rJr),e(P,iw),e(iw,x9e),e(x9e,tJr),e(iw,aJr),e(iw,ene),e(ene,nJr),e(iw,sJr),e(P,lJr),e(P,dw),e(dw,$9e),e($9e,iJr),e(dw,dJr),e(dw,one),e(one,mJr),e(dw,cJr),e(P,fJr),e(P,mw),e(mw,k9e),e(k9e,gJr),e(mw,hJr),e(mw,rne),e(rne,uJr),e(mw,pJr),e(P,_Jr),e(P,cw),e(cw,S9e),e(S9e,bJr),e(cw,vJr),e(cw,tne),e(tne,FJr),e(cw,TJr),e(P,MJr),e(P,fw),e(fw,R9e),e(R9e,EJr),e(fw,CJr),e(fw,ane),e(ane,wJr),e(fw,AJr),e(P,LJr),e(P,gw),e(gw,P9e),e(P9e,yJr),e(gw,xJr),e(gw,nne),e(nne,$Jr),e(gw,kJr),e(P,SJr),e(P,Gl),e(Gl,B9e),e(B9e,RJr),e(Gl,PJr),e(Gl,sne),e(sne,BJr),e(Gl,IJr),e(Gl,lne),e(lne,NJr),e(Gl,qJr),e(P,jJr),e(P,hw),e(hw,I9e),e(I9e,DJr),e(hw,GJr),e(hw,ine),e(ine,OJr),e(hw,VJr),e(P,XJr),e(P,uw),e(uw,N9e),e(N9e,zJr),e(uw,QJr),e(uw,dne),e(dne,WJr),e(uw,UJr),e(P,HJr),e(P,pw),e(pw,q9e),e(q9e,JJr),e(pw,YJr),e(pw,mne),e(mne,ZJr),e(pw,KJr),e(P,eYr),e(P,_w),e(_w,j9e),e(j9e,oYr),e(_w,rYr),e(_w,cne),e(cne,tYr),e(_w,aYr),e(P,nYr),e(P,bw),e(bw,D9e),e(D9e,sYr),e(bw,lYr),e(bw,fne),e(fne,iYr),e(bw,dYr),e(P,mYr),e(P,vw),e(vw,G9e),e(G9e,cYr),e(vw,fYr),e(vw,gne),e(gne,gYr),e(vw,hYr),e(P,uYr),e(P,Fw),e(Fw,O9e),e(O9e,pYr),e(Fw,_Yr),e(Fw,hne),e(hne,bYr),e(Fw,vYr),e(P,FYr),e(P,Tw),e(Tw,V9e),e(V9e,TYr),e(Tw,MYr),e(Tw,une),e(une,EYr),e(Tw,CYr),e(P,wYr),e(P,Mw),e(Mw,X9e),e(X9e,AYr),e(Mw,LYr),e(Mw,pne),e(pne,yYr),e(Mw,xYr),e(P,$Yr),e(P,Ew),e(Ew,z9e),e(z9e,kYr),e(Ew,SYr),e(Ew,_ne),e(_ne,RYr),e(Ew,PYr),e(P,BYr),e(P,Cw),e(Cw,Q9e),e(Q9e,IYr),e(Cw,NYr),e(Cw,bne),e(bne,qYr),e(Cw,jYr),e(P,DYr),e(P,ww),e(ww,W9e),e(W9e,GYr),e(ww,OYr),e(ww,vne),e(vne,VYr),e(ww,XYr),e(P,zYr),e(P,Aw),e(Aw,U9e),e(U9e,QYr),e(Aw,WYr),e(Aw,Fne),e(Fne,UYr),e(Aw,HYr),e(P,JYr),e(P,Lw),e(Lw,H9e),e(H9e,YYr),e(Lw,ZYr),e(Lw,Tne),e(Tne,KYr),e(Lw,eZr),e(P,oZr),e(P,yw),e(yw,J9e),e(J9e,rZr),e(yw,tZr),e(yw,Mne),e(Mne,aZr),e(yw,nZr),e(P,sZr),e(P,xw),e(xw,Y9e),e(Y9e,lZr),e(xw,iZr),e(xw,Ene),e(Ene,dZr),e(xw,mZr),e(P,cZr),e(P,$w),e($w,Z9e),e(Z9e,fZr),e($w,gZr),e($w,Cne),e(Cne,hZr),e($w,uZr),e(P,pZr),e(P,kw),e(kw,K9e),e(K9e,_Zr),e(kw,bZr),e(kw,wne),e(wne,vZr),e(kw,FZr),e(P,TZr),e(P,Sw),e(Sw,exe),e(exe,MZr),e(Sw,EZr),e(Sw,Ane),e(Ane,CZr),e(Sw,wZr),e(P,AZr),e(P,Rw),e(Rw,oxe),e(oxe,LZr),e(Rw,yZr),e(Rw,Lne),e(Lne,xZr),e(Rw,$Zr),e(P,kZr),e(P,Pw),e(Pw,rxe),e(rxe,SZr),e(Pw,RZr),e(Pw,yne),e(yne,PZr),e(Pw,BZr),e(P,IZr),e(P,Bw),e(Bw,txe),e(txe,NZr),e(Bw,qZr),e(Bw,xne),e(xne,jZr),e(Bw,DZr),e(P,GZr),e(P,Iw),e(Iw,axe),e(axe,OZr),e(Iw,VZr),e(Iw,$ne),e($ne,XZr),e(Iw,zZr),e(P,QZr),e(P,Nw),e(Nw,nxe),e(nxe,WZr),e(Nw,UZr),e(Nw,kne),e(kne,HZr),e(Nw,JZr),e(P,YZr),e(P,qw),e(qw,sxe),e(sxe,ZZr),e(qw,KZr),e(qw,Sne),e(Sne,eKr),e(qw,oKr),e(P,rKr),e(P,jw),e(jw,lxe),e(lxe,tKr),e(jw,aKr),e(jw,Rne),e(Rne,nKr),e(jw,sKr),e(P,lKr),e(P,Dw),e(Dw,ixe),e(ixe,iKr),e(Dw,dKr),e(Dw,Pne),e(Pne,mKr),e(Dw,cKr),e(P,fKr),e(P,Gw),e(Gw,dxe),e(dxe,gKr),e(Gw,hKr),e(Gw,Bne),e(Bne,uKr),e(Gw,pKr),e(P,_Kr),e(P,Ow),e(Ow,mxe),e(mxe,bKr),e(Ow,vKr),e(Ow,Ine),e(Ine,FKr),e(Ow,TKr),e(P,MKr),e(P,Vw),e(Vw,cxe),e(cxe,EKr),e(Vw,CKr),e(Vw,Nne),e(Nne,wKr),e(Vw,AKr),e(P,LKr),e(P,Xw),e(Xw,fxe),e(fxe,yKr),e(Xw,xKr),e(Xw,qne),e(qne,$Kr),e(Xw,kKr),e(P,SKr),e(P,zw),e(zw,gxe),e(gxe,RKr),e(zw,PKr),e(zw,jne),e(jne,BKr),e(zw,IKr),e(P,NKr),e(P,Qw),e(Qw,hxe),e(hxe,qKr),e(Qw,jKr),e(Qw,Dne),e(Dne,DKr),e(Qw,GKr),e(P,OKr),e(P,Ww),e(Ww,uxe),e(uxe,VKr),e(Ww,XKr),e(Ww,Gne),e(Gne,zKr),e(Ww,QKr),e(P,WKr),e(P,Uw),e(Uw,pxe),e(pxe,UKr),e(Uw,HKr),e(Uw,One),e(One,JKr),e(Uw,YKr),e(P,ZKr),e(P,Hw),e(Hw,_xe),e(_xe,KKr),e(Hw,eet),e(Hw,Vne),e(Vne,oet),e(Hw,ret),e(P,tet),e(P,Jw),e(Jw,bxe),e(bxe,aet),e(Jw,net),e(Jw,Xne),e(Xne,set),e(Jw,iet),e(zr,det),M(Yw,zr,null),b(c,qdo,_),b(c,Ec,_),e(Ec,Zw),e(Zw,vxe),M(OP,vxe,null),e(Ec,met),e(Ec,Fxe),e(Fxe,cet),b(c,jdo,_),b(c,pr,_),M(VP,pr,null),e(pr,fet),e(pr,Cc),e(Cc,get),e(Cc,zne),e(zne,het),e(Cc,uet),e(Cc,Qne),e(Qne,pet),e(Cc,_et),e(pr,bet),e(pr,XP),e(XP,vet),e(XP,Txe),e(Txe,Fet),e(XP,Tet),e(pr,Met),e(pr,ra),M(zP,ra,null),e(ra,Eet),e(ra,Mxe),e(Mxe,Cet),e(ra,wet),e(ra,wc),e(wc,Aet),e(wc,Exe),e(Exe,Let),e(wc,yet),e(wc,Wne),e(Wne,xet),e(wc,$et),e(ra,ket),M(Kw,ra,null),e(pr,Set),e(pr,Qr),M(QP,Qr,null),e(Qr,Ret),e(Qr,Cxe),e(Cxe,Pet),e(Qr,Bet),e(Qr,Vn),e(Vn,Iet),e(Vn,wxe),e(wxe,Net),e(Vn,qet),e(Vn,Axe),e(Axe,jet),e(Vn,Det),e(Vn,Lxe),e(Lxe,Get),e(Vn,Oet),e(Qr,Vet),e(Qr,de),e(de,eA),e(eA,yxe),e(yxe,Xet),e(eA,zet),e(eA,Une),e(Une,Qet),e(eA,Wet),e(de,Uet),e(de,oA),e(oA,xxe),e(xxe,Het),e(oA,Jet),e(oA,Hne),e(Hne,Yet),e(oA,Zet),e(de,Ket),e(de,rA),e(rA,$xe),e($xe,eot),e(rA,oot),e(rA,Jne),e(Jne,rot),e(rA,tot),e(de,aot),e(de,tA),e(tA,kxe),e(kxe,not),e(tA,sot),e(tA,Yne),e(Yne,lot),e(tA,iot),e(de,dot),e(de,aA),e(aA,Sxe),e(Sxe,mot),e(aA,cot),e(aA,Zne),e(Zne,fot),e(aA,got),e(de,hot),e(de,nA),e(nA,Rxe),e(Rxe,uot),e(nA,pot),e(nA,Kne),e(Kne,_ot),e(nA,bot),e(de,vot),e(de,sA),e(sA,Pxe),e(Pxe,Fot),e(sA,Tot),e(sA,ese),e(ese,Mot),e(sA,Eot),e(de,Cot),e(de,lA),e(lA,Bxe),e(Bxe,wot),e(lA,Aot),e(lA,ose),e(ose,Lot),e(lA,yot),e(de,xot),e(de,iA),e(iA,Ixe),e(Ixe,$ot),e(iA,kot),e(iA,rse),e(rse,Sot),e(iA,Rot),e(de,Pot),e(de,dA),e(dA,Nxe),e(Nxe,Bot),e(dA,Iot),e(dA,tse),e(tse,Not),e(dA,qot),e(de,jot),e(de,mA),e(mA,qxe),e(qxe,Dot),e(mA,Got),e(mA,ase),e(ase,Oot),e(mA,Vot),e(de,Xot),e(de,cA),e(cA,jxe),e(jxe,zot),e(cA,Qot),e(cA,nse),e(nse,Wot),e(cA,Uot),e(de,Hot),e(de,fA),e(fA,Dxe),e(Dxe,Jot),e(fA,Yot),e(fA,sse),e(sse,Zot),e(fA,Kot),e(de,ert),e(de,gA),e(gA,Gxe),e(Gxe,ort),e(gA,rrt),e(gA,lse),e(lse,trt),e(gA,art),e(de,nrt),e(de,hA),e(hA,Oxe),e(Oxe,srt),e(hA,lrt),e(hA,ise),e(ise,irt),e(hA,drt),e(de,mrt),e(de,uA),e(uA,Vxe),e(Vxe,crt),e(uA,frt),e(uA,dse),e(dse,grt),e(uA,hrt),e(de,urt),e(de,pA),e(pA,Xxe),e(Xxe,prt),e(pA,_rt),e(pA,mse),e(mse,brt),e(pA,vrt),e(de,Frt),e(de,_A),e(_A,zxe),e(zxe,Trt),e(_A,Mrt),e(_A,cse),e(cse,Ert),e(_A,Crt),e(de,wrt),e(de,bA),e(bA,Qxe),e(Qxe,Art),e(bA,Lrt),e(bA,fse),e(fse,yrt),e(bA,xrt),e(de,$rt),e(de,vA),e(vA,Wxe),e(Wxe,krt),e(vA,Srt),e(vA,gse),e(gse,Rrt),e(vA,Prt),e(de,Brt),e(de,FA),e(FA,Uxe),e(Uxe,Irt),e(FA,Nrt),e(FA,hse),e(hse,qrt),e(FA,jrt),e(de,Drt),e(de,TA),e(TA,Hxe),e(Hxe,Grt),e(TA,Ort),e(TA,use),e(use,Vrt),e(TA,Xrt),e(de,zrt),e(de,MA),e(MA,Jxe),e(Jxe,Qrt),e(MA,Wrt),e(MA,pse),e(pse,Urt),e(MA,Hrt),e(Qr,Jrt),M(EA,Qr,null),b(c,Ddo,_),b(c,Ac,_),e(Ac,CA),e(CA,Yxe),M(WP,Yxe,null),e(Ac,Yrt),e(Ac,Zxe),e(Zxe,Zrt),b(c,Gdo,_),b(c,_r,_),M(UP,_r,null),e(_r,Krt),e(_r,Lc),e(Lc,ett),e(Lc,_se),e(_se,ott),e(Lc,rtt),e(Lc,bse),e(bse,ttt),e(Lc,att),e(_r,ntt),e(_r,HP),e(HP,stt),e(HP,Kxe),e(Kxe,ltt),e(HP,itt),e(_r,dtt),e(_r,ta),M(JP,ta,null),e(ta,mtt),e(ta,e$e),e(e$e,ctt),e(ta,ftt),e(ta,yc),e(yc,gtt),e(yc,o$e),e(o$e,htt),e(yc,utt),e(yc,vse),e(vse,ptt),e(yc,_tt),e(ta,btt),M(wA,ta,null),e(_r,vtt),e(_r,Wr),M(YP,Wr,null),e(Wr,Ftt),e(Wr,r$e),e(r$e,Ttt),e(Wr,Mtt),e(Wr,Xn),e(Xn,Ett),e(Xn,t$e),e(t$e,Ctt),e(Xn,wtt),e(Xn,a$e),e(a$e,Att),e(Xn,Ltt),e(Xn,n$e),e(n$e,ytt),e(Xn,xtt),e(Wr,$tt),e(Wr,Ce),e(Ce,AA),e(AA,s$e),e(s$e,ktt),e(AA,Stt),e(AA,Fse),e(Fse,Rtt),e(AA,Ptt),e(Ce,Btt),e(Ce,LA),e(LA,l$e),e(l$e,Itt),e(LA,Ntt),e(LA,Tse),e(Tse,qtt),e(LA,jtt),e(Ce,Dtt),e(Ce,yA),e(yA,i$e),e(i$e,Gtt),e(yA,Ott),e(yA,Mse),e(Mse,Vtt),e(yA,Xtt),e(Ce,ztt),e(Ce,xA),e(xA,d$e),e(d$e,Qtt),e(xA,Wtt),e(xA,Ese),e(Ese,Utt),e(xA,Htt),e(Ce,Jtt),e(Ce,$A),e($A,m$e),e(m$e,Ytt),e($A,Ztt),e($A,Cse),e(Cse,Ktt),e($A,eat),e(Ce,oat),e(Ce,kA),e(kA,c$e),e(c$e,rat),e(kA,tat),e(kA,wse),e(wse,aat),e(kA,nat),e(Ce,sat),e(Ce,SA),e(SA,f$e),e(f$e,lat),e(SA,iat),e(SA,Ase),e(Ase,dat),e(SA,mat),e(Ce,cat),e(Ce,RA),e(RA,g$e),e(g$e,fat),e(RA,gat),e(RA,Lse),e(Lse,hat),e(RA,uat),e(Ce,pat),e(Ce,PA),e(PA,h$e),e(h$e,_at),e(PA,bat),e(PA,yse),e(yse,vat),e(PA,Fat),e(Ce,Tat),e(Ce,BA),e(BA,u$e),e(u$e,Mat),e(BA,Eat),e(BA,xse),e(xse,Cat),e(BA,wat),e(Ce,Aat),e(Ce,IA),e(IA,p$e),e(p$e,Lat),e(IA,yat),e(IA,$se),e($se,xat),e(IA,$at),e(Ce,kat),e(Ce,NA),e(NA,_$e),e(_$e,Sat),e(NA,Rat),e(NA,kse),e(kse,Pat),e(NA,Bat),e(Ce,Iat),e(Ce,qA),e(qA,b$e),e(b$e,Nat),e(qA,qat),e(qA,Sse),e(Sse,jat),e(qA,Dat),e(Ce,Gat),e(Ce,jA),e(jA,v$e),e(v$e,Oat),e(jA,Vat),e(jA,Rse),e(Rse,Xat),e(jA,zat),e(Wr,Qat),M(DA,Wr,null),b(c,Odo,_),b(c,xc,_),e(xc,GA),e(GA,F$e),M(ZP,F$e,null),e(xc,Wat),e(xc,T$e),e(T$e,Uat),b(c,Vdo,_),b(c,br,_),M(KP,br,null),e(br,Hat),e(br,$c),e($c,Jat),e($c,Pse),e(Pse,Yat),e($c,Zat),e($c,Bse),e(Bse,Kat),e($c,ent),e(br,ont),e(br,eB),e(eB,rnt),e(eB,M$e),e(M$e,tnt),e(eB,ant),e(br,nnt),e(br,aa),M(oB,aa,null),e(aa,snt),e(aa,E$e),e(E$e,lnt),e(aa,int),e(aa,kc),e(kc,dnt),e(kc,C$e),e(C$e,mnt),e(kc,cnt),e(kc,Ise),e(Ise,fnt),e(kc,gnt),e(aa,hnt),M(OA,aa,null),e(br,unt),e(br,Ur),M(rB,Ur,null),e(Ur,pnt),e(Ur,w$e),e(w$e,_nt),e(Ur,bnt),e(Ur,zn),e(zn,vnt),e(zn,A$e),e(A$e,Fnt),e(zn,Tnt),e(zn,L$e),e(L$e,Mnt),e(zn,Ent),e(zn,y$e),e(y$e,Cnt),e(zn,wnt),e(Ur,Ant),e(Ur,$e),e($e,VA),e(VA,x$e),e(x$e,Lnt),e(VA,ynt),e(VA,Nse),e(Nse,xnt),e(VA,$nt),e($e,knt),e($e,XA),e(XA,$$e),e($$e,Snt),e(XA,Rnt),e(XA,qse),e(qse,Pnt),e(XA,Bnt),e($e,Int),e($e,zA),e(zA,k$e),e(k$e,Nnt),e(zA,qnt),e(zA,jse),e(jse,jnt),e(zA,Dnt),e($e,Gnt),e($e,Ol),e(Ol,S$e),e(S$e,Ont),e(Ol,Vnt),e(Ol,Dse),e(Dse,Xnt),e(Ol,znt),e(Ol,Gse),e(Gse,Qnt),e(Ol,Wnt),e($e,Unt),e($e,QA),e(QA,R$e),e(R$e,Hnt),e(QA,Jnt),e(QA,Ose),e(Ose,Ynt),e(QA,Znt),e($e,Knt),e($e,WA),e(WA,P$e),e(P$e,est),e(WA,ost),e(WA,Vse),e(Vse,rst),e(WA,tst),e($e,ast),e($e,UA),e(UA,B$e),e(B$e,nst),e(UA,sst),e(UA,Xse),e(Xse,lst),e(UA,ist),e($e,dst),e($e,HA),e(HA,I$e),e(I$e,mst),e(HA,cst),e(HA,zse),e(zse,fst),e(HA,gst),e($e,hst),e($e,JA),e(JA,N$e),e(N$e,ust),e(JA,pst),e(JA,Qse),e(Qse,_st),e(JA,bst),e($e,vst),e($e,YA),e(YA,q$e),e(q$e,Fst),e(YA,Tst),e(YA,Wse),e(Wse,Mst),e(YA,Est),e(Ur,Cst),M(ZA,Ur,null),b(c,Xdo,_),b(c,Sc,_),e(Sc,KA),e(KA,j$e),M(tB,j$e,null),e(Sc,wst),e(Sc,D$e),e(D$e,Ast),b(c,zdo,_),b(c,vr,_),M(aB,vr,null),e(vr,Lst),e(vr,Rc),e(Rc,yst),e(Rc,Use),e(Use,xst),e(Rc,$st),e(Rc,Hse),e(Hse,kst),e(Rc,Sst),e(vr,Rst),e(vr,nB),e(nB,Pst),e(nB,G$e),e(G$e,Bst),e(nB,Ist),e(vr,Nst),e(vr,na),M(sB,na,null),e(na,qst),e(na,O$e),e(O$e,jst),e(na,Dst),e(na,Pc),e(Pc,Gst),e(Pc,V$e),e(V$e,Ost),e(Pc,Vst),e(Pc,Jse),e(Jse,Xst),e(Pc,zst),e(na,Qst),M(e6,na,null),e(vr,Wst),e(vr,Hr),M(lB,Hr,null),e(Hr,Ust),e(Hr,X$e),e(X$e,Hst),e(Hr,Jst),e(Hr,Qn),e(Qn,Yst),e(Qn,z$e),e(z$e,Zst),e(Qn,Kst),e(Qn,Q$e),e(Q$e,elt),e(Qn,olt),e(Qn,W$e),e(W$e,rlt),e(Qn,tlt),e(Hr,alt),e(Hr,Bc),e(Bc,o6),e(o6,U$e),e(U$e,nlt),e(o6,slt),e(o6,Yse),e(Yse,llt),e(o6,ilt),e(Bc,dlt),e(Bc,r6),e(r6,H$e),e(H$e,mlt),e(r6,clt),e(r6,Zse),e(Zse,flt),e(r6,glt),e(Bc,hlt),e(Bc,t6),e(t6,J$e),e(J$e,ult),e(t6,plt),e(t6,Kse),e(Kse,_lt),e(t6,blt),e(Hr,vlt),M(a6,Hr,null),b(c,Qdo,_),b(c,Ic,_),e(Ic,n6),e(n6,Y$e),M(iB,Y$e,null),e(Ic,Flt),e(Ic,Z$e),e(Z$e,Tlt),b(c,Wdo,_),b(c,Fr,_),M(dB,Fr,null),e(Fr,Mlt),e(Fr,Nc),e(Nc,Elt),e(Nc,ele),e(ele,Clt),e(Nc,wlt),e(Nc,ole),e(ole,Alt),e(Nc,Llt),e(Fr,ylt),e(Fr,mB),e(mB,xlt),e(mB,K$e),e(K$e,$lt),e(mB,klt),e(Fr,Slt),e(Fr,sa),M(cB,sa,null),e(sa,Rlt),e(sa,eke),e(eke,Plt),e(sa,Blt),e(sa,qc),e(qc,Ilt),e(qc,oke),e(oke,Nlt),e(qc,qlt),e(qc,rle),e(rle,jlt),e(qc,Dlt),e(sa,Glt),M(s6,sa,null),e(Fr,Olt),e(Fr,Jr),M(fB,Jr,null),e(Jr,Vlt),e(Jr,rke),e(rke,Xlt),e(Jr,zlt),e(Jr,Wn),e(Wn,Qlt),e(Wn,tke),e(tke,Wlt),e(Wn,Ult),e(Wn,ake),e(ake,Hlt),e(Wn,Jlt),e(Wn,nke),e(nke,Ylt),e(Wn,Zlt),e(Jr,Klt),e(Jr,he),e(he,l6),e(l6,ske),e(ske,eit),e(l6,oit),e(l6,tle),e(tle,rit),e(l6,tit),e(he,ait),e(he,i6),e(i6,lke),e(lke,nit),e(i6,sit),e(i6,ale),e(ale,lit),e(i6,iit),e(he,dit),e(he,d6),e(d6,ike),e(ike,mit),e(d6,cit),e(d6,nle),e(nle,fit),e(d6,git),e(he,hit),e(he,m6),e(m6,dke),e(dke,uit),e(m6,pit),e(m6,sle),e(sle,_it),e(m6,bit),e(he,vit),e(he,c6),e(c6,mke),e(mke,Fit),e(c6,Tit),e(c6,lle),e(lle,Mit),e(c6,Eit),e(he,Cit),e(he,f6),e(f6,cke),e(cke,wit),e(f6,Ait),e(f6,ile),e(ile,Lit),e(f6,yit),e(he,xit),e(he,g6),e(g6,fke),e(fke,$it),e(g6,kit),e(g6,dle),e(dle,Sit),e(g6,Rit),e(he,Pit),e(he,h6),e(h6,gke),e(gke,Bit),e(h6,Iit),e(h6,mle),e(mle,Nit),e(h6,qit),e(he,jit),e(he,u6),e(u6,hke),e(hke,Dit),e(u6,Git),e(u6,cle),e(cle,Oit),e(u6,Vit),e(he,Xit),e(he,p6),e(p6,uke),e(uke,zit),e(p6,Qit),e(p6,fle),e(fle,Wit),e(p6,Uit),e(he,Hit),e(he,_6),e(_6,pke),e(pke,Jit),e(_6,Yit),e(_6,gle),e(gle,Zit),e(_6,Kit),e(he,edt),e(he,b6),e(b6,_ke),e(_ke,odt),e(b6,rdt),e(b6,hle),e(hle,tdt),e(b6,adt),e(he,ndt),e(he,v6),e(v6,bke),e(bke,sdt),e(v6,ldt),e(v6,ule),e(ule,idt),e(v6,ddt),e(he,mdt),e(he,F6),e(F6,vke),e(vke,cdt),e(F6,fdt),e(F6,ple),e(ple,gdt),e(F6,hdt),e(he,udt),e(he,T6),e(T6,Fke),e(Fke,pdt),e(T6,_dt),e(T6,_le),e(_le,bdt),e(T6,vdt),e(he,Fdt),e(he,M6),e(M6,Tke),e(Tke,Tdt),e(M6,Mdt),e(M6,ble),e(ble,Edt),e(M6,Cdt),e(he,wdt),e(he,E6),e(E6,Mke),e(Mke,Adt),e(E6,Ldt),e(E6,vle),e(vle,ydt),e(E6,xdt),e(he,$dt),e(he,C6),e(C6,Eke),e(Eke,kdt),e(C6,Sdt),e(C6,Fle),e(Fle,Rdt),e(C6,Pdt),e(he,Bdt),e(he,w6),e(w6,Cke),e(Cke,Idt),e(w6,Ndt),e(w6,Tle),e(Tle,qdt),e(w6,jdt),e(he,Ddt),e(he,A6),e(A6,wke),e(wke,Gdt),e(A6,Odt),e(A6,Mle),e(Mle,Vdt),e(A6,Xdt),e(he,zdt),e(he,L6),e(L6,Ake),e(Ake,Qdt),e(L6,Wdt),e(L6,Ele),e(Ele,Udt),e(L6,Hdt),e(Jr,Jdt),M(y6,Jr,null),b(c,Udo,_),b(c,jc,_),e(jc,x6),e(x6,Lke),M(gB,Lke,null),e(jc,Ydt),e(jc,yke),e(yke,Zdt),b(c,Hdo,_),b(c,Tr,_),M(hB,Tr,null),e(Tr,Kdt),e(Tr,Dc),e(Dc,emt),e(Dc,Cle),e(Cle,omt),e(Dc,rmt),e(Dc,wle),e(wle,tmt),e(Dc,amt),e(Tr,nmt),e(Tr,uB),e(uB,smt),e(uB,xke),e(xke,lmt),e(uB,imt),e(Tr,dmt),e(Tr,la),M(pB,la,null),e(la,mmt),e(la,$ke),e($ke,cmt),e(la,fmt),e(la,Gc),e(Gc,gmt),e(Gc,kke),e(kke,hmt),e(Gc,umt),e(Gc,Ale),e(Ale,pmt),e(Gc,_mt),e(la,bmt),M($6,la,null),e(Tr,vmt),e(Tr,Yr),M(_B,Yr,null),e(Yr,Fmt),e(Yr,Ske),e(Ske,Tmt),e(Yr,Mmt),e(Yr,Un),e(Un,Emt),e(Un,Rke),e(Rke,Cmt),e(Un,wmt),e(Un,Pke),e(Pke,Amt),e(Un,Lmt),e(Un,Bke),e(Bke,ymt),e(Un,xmt),e(Yr,$mt),e(Yr,ke),e(ke,k6),e(k6,Ike),e(Ike,kmt),e(k6,Smt),e(k6,Lle),e(Lle,Rmt),e(k6,Pmt),e(ke,Bmt),e(ke,S6),e(S6,Nke),e(Nke,Imt),e(S6,Nmt),e(S6,yle),e(yle,qmt),e(S6,jmt),e(ke,Dmt),e(ke,R6),e(R6,qke),e(qke,Gmt),e(R6,Omt),e(R6,xle),e(xle,Vmt),e(R6,Xmt),e(ke,zmt),e(ke,P6),e(P6,jke),e(jke,Qmt),e(P6,Wmt),e(P6,$le),e($le,Umt),e(P6,Hmt),e(ke,Jmt),e(ke,B6),e(B6,Dke),e(Dke,Ymt),e(B6,Zmt),e(B6,kle),e(kle,Kmt),e(B6,ect),e(ke,oct),e(ke,I6),e(I6,Gke),e(Gke,rct),e(I6,tct),e(I6,Sle),e(Sle,act),e(I6,nct),e(ke,sct),e(ke,N6),e(N6,Oke),e(Oke,lct),e(N6,ict),e(N6,Rle),e(Rle,dct),e(N6,mct),e(ke,cct),e(ke,q6),e(q6,Vke),e(Vke,fct),e(q6,gct),e(q6,Ple),e(Ple,hct),e(q6,uct),e(ke,pct),e(ke,j6),e(j6,Xke),e(Xke,_ct),e(j6,bct),e(j6,Ble),e(Ble,vct),e(j6,Fct),e(ke,Tct),e(ke,D6),e(D6,zke),e(zke,Mct),e(D6,Ect),e(D6,Ile),e(Ile,Cct),e(D6,wct),e(Yr,Act),M(G6,Yr,null),b(c,Jdo,_),b(c,Oc,_),e(Oc,O6),e(O6,Qke),M(bB,Qke,null),e(Oc,Lct),e(Oc,Wke),e(Wke,yct),b(c,Ydo,_),b(c,Mr,_),M(vB,Mr,null),e(Mr,xct),e(Mr,Vc),e(Vc,$ct),e(Vc,Nle),e(Nle,kct),e(Vc,Sct),e(Vc,qle),e(qle,Rct),e(Vc,Pct),e(Mr,Bct),e(Mr,FB),e(FB,Ict),e(FB,Uke),e(Uke,Nct),e(FB,qct),e(Mr,jct),e(Mr,ia),M(TB,ia,null),e(ia,Dct),e(ia,Hke),e(Hke,Gct),e(ia,Oct),e(ia,Xc),e(Xc,Vct),e(Xc,Jke),e(Jke,Xct),e(Xc,zct),e(Xc,jle),e(jle,Qct),e(Xc,Wct),e(ia,Uct),M(V6,ia,null),e(Mr,Hct),e(Mr,Zr),M(MB,Zr,null),e(Zr,Jct),e(Zr,Yke),e(Yke,Yct),e(Zr,Zct),e(Zr,Hn),e(Hn,Kct),e(Hn,Zke),e(Zke,eft),e(Hn,oft),e(Hn,Kke),e(Kke,rft),e(Hn,tft),e(Hn,eSe),e(eSe,aft),e(Hn,nft),e(Zr,sft),e(Zr,ae),e(ae,X6),e(X6,oSe),e(oSe,lft),e(X6,ift),e(X6,Dle),e(Dle,dft),e(X6,mft),e(ae,cft),e(ae,z6),e(z6,rSe),e(rSe,fft),e(z6,gft),e(z6,Gle),e(Gle,hft),e(z6,uft),e(ae,pft),e(ae,Q6),e(Q6,tSe),e(tSe,_ft),e(Q6,bft),e(Q6,Ole),e(Ole,vft),e(Q6,Fft),e(ae,Tft),e(ae,W6),e(W6,aSe),e(aSe,Mft),e(W6,Eft),e(W6,Vle),e(Vle,Cft),e(W6,wft),e(ae,Aft),e(ae,U6),e(U6,nSe),e(nSe,Lft),e(U6,yft),e(U6,Xle),e(Xle,xft),e(U6,$ft),e(ae,kft),e(ae,H6),e(H6,sSe),e(sSe,Sft),e(H6,Rft),e(H6,zle),e(zle,Pft),e(H6,Bft),e(ae,Ift),e(ae,J6),e(J6,lSe),e(lSe,Nft),e(J6,qft),e(J6,Qle),e(Qle,jft),e(J6,Dft),e(ae,Gft),e(ae,Y6),e(Y6,iSe),e(iSe,Oft),e(Y6,Vft),e(Y6,Wle),e(Wle,Xft),e(Y6,zft),e(ae,Qft),e(ae,Z6),e(Z6,dSe),e(dSe,Wft),e(Z6,Uft),e(Z6,Ule),e(Ule,Hft),e(Z6,Jft),e(ae,Yft),e(ae,K6),e(K6,mSe),e(mSe,Zft),e(K6,Kft),e(K6,Hle),e(Hle,egt),e(K6,ogt),e(ae,rgt),e(ae,e7),e(e7,cSe),e(cSe,tgt),e(e7,agt),e(e7,Jle),e(Jle,ngt),e(e7,sgt),e(ae,lgt),e(ae,o7),e(o7,fSe),e(fSe,igt),e(o7,dgt),e(o7,Yle),e(Yle,mgt),e(o7,cgt),e(ae,fgt),e(ae,r7),e(r7,gSe),e(gSe,ggt),e(r7,hgt),e(r7,Zle),e(Zle,ugt),e(r7,pgt),e(ae,_gt),e(ae,t7),e(t7,hSe),e(hSe,bgt),e(t7,vgt),e(t7,Kle),e(Kle,Fgt),e(t7,Tgt),e(ae,Mgt),e(ae,a7),e(a7,uSe),e(uSe,Egt),e(a7,Cgt),e(a7,eie),e(eie,wgt),e(a7,Agt),e(ae,Lgt),e(ae,n7),e(n7,pSe),e(pSe,ygt),e(n7,xgt),e(n7,oie),e(oie,$gt),e(n7,kgt),e(ae,Sgt),e(ae,s7),e(s7,_Se),e(_Se,Rgt),e(s7,Pgt),e(s7,rie),e(rie,Bgt),e(s7,Igt),e(ae,Ngt),e(ae,l7),e(l7,bSe),e(bSe,qgt),e(l7,jgt),e(l7,tie),e(tie,Dgt),e(l7,Ggt),e(ae,Ogt),e(ae,i7),e(i7,vSe),e(vSe,Vgt),e(i7,Xgt),e(i7,aie),e(aie,zgt),e(i7,Qgt),e(ae,Wgt),e(ae,d7),e(d7,FSe),e(FSe,Ugt),e(d7,Hgt),e(d7,nie),e(nie,Jgt),e(d7,Ygt),e(ae,Zgt),e(ae,m7),e(m7,TSe),e(TSe,Kgt),e(m7,eht),e(m7,sie),e(sie,oht),e(m7,rht),e(ae,tht),e(ae,c7),e(c7,MSe),e(MSe,aht),e(c7,nht),e(c7,lie),e(lie,sht),e(c7,lht),e(ae,iht),e(ae,f7),e(f7,ESe),e(ESe,dht),e(f7,mht),e(f7,iie),e(iie,cht),e(f7,fht),e(ae,ght),e(ae,g7),e(g7,CSe),e(CSe,hht),e(g7,uht),e(g7,die),e(die,pht),e(g7,_ht),e(ae,bht),e(ae,h7),e(h7,wSe),e(wSe,vht),e(h7,Fht),e(h7,mie),e(mie,Tht),e(h7,Mht),e(ae,Eht),e(ae,u7),e(u7,ASe),e(ASe,Cht),e(u7,wht),e(u7,cie),e(cie,Aht),e(u7,Lht),e(ae,yht),e(ae,p7),e(p7,LSe),e(LSe,xht),e(p7,$ht),e(p7,fie),e(fie,kht),e(p7,Sht),e(ae,Rht),e(ae,_7),e(_7,ySe),e(ySe,Pht),e(_7,Bht),e(_7,gie),e(gie,Iht),e(_7,Nht),e(Zr,qht),M(b7,Zr,null),b(c,Zdo,_),b(c,zc,_),e(zc,v7),e(v7,xSe),M(EB,xSe,null),e(zc,jht),e(zc,$Se),e($Se,Dht),b(c,Kdo,_),b(c,Er,_),M(CB,Er,null),e(Er,Ght),e(Er,Qc),e(Qc,Oht),e(Qc,hie),e(hie,Vht),e(Qc,Xht),e(Qc,uie),e(uie,zht),e(Qc,Qht),e(Er,Wht),e(Er,wB),e(wB,Uht),e(wB,kSe),e(kSe,Hht),e(wB,Jht),e(Er,Yht),e(Er,da),M(AB,da,null),e(da,Zht),e(da,SSe),e(SSe,Kht),e(da,eut),e(da,Wc),e(Wc,out),e(Wc,RSe),e(RSe,rut),e(Wc,tut),e(Wc,pie),e(pie,aut),e(Wc,nut),e(da,sut),M(F7,da,null),e(Er,lut),e(Er,Kr),M(LB,Kr,null),e(Kr,iut),e(Kr,PSe),e(PSe,dut),e(Kr,mut),e(Kr,Jn),e(Jn,cut),e(Jn,BSe),e(BSe,fut),e(Jn,gut),e(Jn,ISe),e(ISe,hut),e(Jn,uut),e(Jn,NSe),e(NSe,put),e(Jn,_ut),e(Kr,but),e(Kr,Me),e(Me,T7),e(T7,qSe),e(qSe,vut),e(T7,Fut),e(T7,_ie),e(_ie,Tut),e(T7,Mut),e(Me,Eut),e(Me,M7),e(M7,jSe),e(jSe,Cut),e(M7,wut),e(M7,bie),e(bie,Aut),e(M7,Lut),e(Me,yut),e(Me,E7),e(E7,DSe),e(DSe,xut),e(E7,$ut),e(E7,vie),e(vie,kut),e(E7,Sut),e(Me,Rut),e(Me,C7),e(C7,GSe),e(GSe,Put),e(C7,But),e(C7,Fie),e(Fie,Iut),e(C7,Nut),e(Me,qut),e(Me,w7),e(w7,OSe),e(OSe,jut),e(w7,Dut),e(w7,Tie),e(Tie,Gut),e(w7,Out),e(Me,Vut),e(Me,A7),e(A7,VSe),e(VSe,Xut),e(A7,zut),e(A7,Mie),e(Mie,Qut),e(A7,Wut),e(Me,Uut),e(Me,L7),e(L7,XSe),e(XSe,Hut),e(L7,Jut),e(L7,Eie),e(Eie,Yut),e(L7,Zut),e(Me,Kut),e(Me,y7),e(y7,zSe),e(zSe,ept),e(y7,opt),e(y7,Cie),e(Cie,rpt),e(y7,tpt),e(Me,apt),e(Me,x7),e(x7,QSe),e(QSe,npt),e(x7,spt),e(x7,wie),e(wie,lpt),e(x7,ipt),e(Me,dpt),e(Me,$7),e($7,WSe),e(WSe,mpt),e($7,cpt),e($7,Aie),e(Aie,fpt),e($7,gpt),e(Me,hpt),e(Me,k7),e(k7,USe),e(USe,upt),e(k7,ppt),e(k7,Lie),e(Lie,_pt),e(k7,bpt),e(Me,vpt),e(Me,S7),e(S7,HSe),e(HSe,Fpt),e(S7,Tpt),e(S7,yie),e(yie,Mpt),e(S7,Ept),e(Me,Cpt),e(Me,R7),e(R7,JSe),e(JSe,wpt),e(R7,Apt),e(R7,xie),e(xie,Lpt),e(R7,ypt),e(Me,xpt),e(Me,P7),e(P7,YSe),e(YSe,$pt),e(P7,kpt),e(P7,$ie),e($ie,Spt),e(P7,Rpt),e(Me,Ppt),e(Me,B7),e(B7,ZSe),e(ZSe,Bpt),e(B7,Ipt),e(B7,kie),e(kie,Npt),e(B7,qpt),e(Me,jpt),e(Me,I7),e(I7,KSe),e(KSe,Dpt),e(I7,Gpt),e(I7,Sie),e(Sie,Opt),e(I7,Vpt),e(Me,Xpt),e(Me,N7),e(N7,eRe),e(eRe,zpt),e(N7,Qpt),e(N7,Rie),e(Rie,Wpt),e(N7,Upt),e(Kr,Hpt),M(q7,Kr,null),b(c,emo,_),b(c,Uc,_),e(Uc,j7),e(j7,oRe),M(yB,oRe,null),e(Uc,Jpt),e(Uc,rRe),e(rRe,Ypt),b(c,omo,_),b(c,Cr,_),M(xB,Cr,null),e(Cr,Zpt),e(Cr,Hc),e(Hc,Kpt),e(Hc,Pie),e(Pie,e_t),e(Hc,o_t),e(Hc,Bie),e(Bie,r_t),e(Hc,t_t),e(Cr,a_t),e(Cr,$B),e($B,n_t),e($B,tRe),e(tRe,s_t),e($B,l_t),e(Cr,i_t),e(Cr,ma),M(kB,ma,null),e(ma,d_t),e(ma,aRe),e(aRe,m_t),e(ma,c_t),e(ma,Jc),e(Jc,f_t),e(Jc,nRe),e(nRe,g_t),e(Jc,h_t),e(Jc,Iie),e(Iie,u_t),e(Jc,p_t),e(ma,__t),M(D7,ma,null),e(Cr,b_t),e(Cr,et),M(SB,et,null),e(et,v_t),e(et,sRe),e(sRe,F_t),e(et,T_t),e(et,Yn),e(Yn,M_t),e(Yn,lRe),e(lRe,E_t),e(Yn,C_t),e(Yn,iRe),e(iRe,w_t),e(Yn,A_t),e(Yn,dRe),e(dRe,L_t),e(Yn,y_t),e(et,x_t),e(et,RB),e(RB,G7),e(G7,mRe),e(mRe,$_t),e(G7,k_t),e(G7,Nie),e(Nie,S_t),e(G7,R_t),e(RB,P_t),e(RB,O7),e(O7,cRe),e(cRe,B_t),e(O7,I_t),e(O7,qie),e(qie,N_t),e(O7,q_t),e(et,j_t),M(V7,et,null),b(c,rmo,_),b(c,Yc,_),e(Yc,X7),e(X7,fRe),M(PB,fRe,null),e(Yc,D_t),e(Yc,gRe),e(gRe,G_t),b(c,tmo,_),b(c,wr,_),M(BB,wr,null),e(wr,O_t),e(wr,Zc),e(Zc,V_t),e(Zc,jie),e(jie,X_t),e(Zc,z_t),e(Zc,Die),e(Die,Q_t),e(Zc,W_t),e(wr,U_t),e(wr,IB),e(IB,H_t),e(IB,hRe),e(hRe,J_t),e(IB,Y_t),e(wr,Z_t),e(wr,ca),M(NB,ca,null),e(ca,K_t),e(ca,uRe),e(uRe,e1t),e(ca,o1t),e(ca,Kc),e(Kc,r1t),e(Kc,pRe),e(pRe,t1t),e(Kc,a1t),e(Kc,Gie),e(Gie,n1t),e(Kc,s1t),e(ca,l1t),M(z7,ca,null),e(wr,i1t),e(wr,ot),M(qB,ot,null),e(ot,d1t),e(ot,_Re),e(_Re,m1t),e(ot,c1t),e(ot,Zn),e(Zn,f1t),e(Zn,bRe),e(bRe,g1t),e(Zn,h1t),e(Zn,vRe),e(vRe,u1t),e(Zn,p1t),e(Zn,FRe),e(FRe,_1t),e(Zn,b1t),e(ot,v1t),e(ot,TRe),e(TRe,Q7),e(Q7,MRe),e(MRe,F1t),e(Q7,T1t),e(Q7,Oie),e(Oie,M1t),e(Q7,E1t),e(ot,C1t),M(W7,ot,null),b(c,amo,_),b(c,ef,_),e(ef,U7),e(U7,ERe),M(jB,ERe,null),e(ef,w1t),e(ef,CRe),e(CRe,A1t),b(c,nmo,_),b(c,Ar,_),M(DB,Ar,null),e(Ar,L1t),e(Ar,of),e(of,y1t),e(of,Vie),e(Vie,x1t),e(of,$1t),e(of,Xie),e(Xie,k1t),e(of,S1t),e(Ar,R1t),e(Ar,GB),e(GB,P1t),e(GB,wRe),e(wRe,B1t),e(GB,I1t),e(Ar,N1t),e(Ar,fa),M(OB,fa,null),e(fa,q1t),e(fa,ARe),e(ARe,j1t),e(fa,D1t),e(fa,rf),e(rf,G1t),e(rf,LRe),e(LRe,O1t),e(rf,V1t),e(rf,zie),e(zie,X1t),e(rf,z1t),e(fa,Q1t),M(H7,fa,null),e(Ar,W1t),e(Ar,rt),M(VB,rt,null),e(rt,U1t),e(rt,yRe),e(yRe,H1t),e(rt,J1t),e(rt,Kn),e(Kn,Y1t),e(Kn,xRe),e(xRe,Z1t),e(Kn,K1t),e(Kn,$Re),e($Re,e2t),e(Kn,o2t),e(Kn,kRe),e(kRe,r2t),e(Kn,t2t),e(rt,a2t),e(rt,SRe),e(SRe,J7),e(J7,RRe),e(RRe,n2t),e(J7,s2t),e(J7,Qie),e(Qie,l2t),e(J7,i2t),e(rt,d2t),M(Y7,rt,null),b(c,smo,_),b(c,tf,_),e(tf,Z7),e(Z7,PRe),M(XB,PRe,null),e(tf,m2t),e(tf,BRe),e(BRe,c2t),b(c,lmo,_),b(c,Lr,_),M(zB,Lr,null),e(Lr,f2t),e(Lr,af),e(af,g2t),e(af,Wie),e(Wie,h2t),e(af,u2t),e(af,Uie),e(Uie,p2t),e(af,_2t),e(Lr,b2t),e(Lr,QB),e(QB,v2t),e(QB,IRe),e(IRe,F2t),e(QB,T2t),e(Lr,M2t),e(Lr,ga),M(WB,ga,null),e(ga,E2t),e(ga,NRe),e(NRe,C2t),e(ga,w2t),e(ga,nf),e(nf,A2t),e(nf,qRe),e(qRe,L2t),e(nf,y2t),e(nf,Hie),e(Hie,x2t),e(nf,$2t),e(ga,k2t),M(K7,ga,null),e(Lr,S2t),e(Lr,tt),M(UB,tt,null),e(tt,R2t),e(tt,jRe),e(jRe,P2t),e(tt,B2t),e(tt,es),e(es,I2t),e(es,DRe),e(DRe,N2t),e(es,q2t),e(es,GRe),e(GRe,j2t),e(es,D2t),e(es,ORe),e(ORe,G2t),e(es,O2t),e(tt,V2t),e(tt,me),e(me,e8),e(e8,VRe),e(VRe,X2t),e(e8,z2t),e(e8,Jie),e(Jie,Q2t),e(e8,W2t),e(me,U2t),e(me,o8),e(o8,XRe),e(XRe,H2t),e(o8,J2t),e(o8,Yie),e(Yie,Y2t),e(o8,Z2t),e(me,K2t),e(me,r8),e(r8,zRe),e(zRe,ebt),e(r8,obt),e(r8,Zie),e(Zie,rbt),e(r8,tbt),e(me,abt),e(me,t8),e(t8,QRe),e(QRe,nbt),e(t8,sbt),e(t8,Kie),e(Kie,lbt),e(t8,ibt),e(me,dbt),e(me,a8),e(a8,WRe),e(WRe,mbt),e(a8,cbt),e(a8,ede),e(ede,fbt),e(a8,gbt),e(me,hbt),e(me,n8),e(n8,URe),e(URe,ubt),e(n8,pbt),e(n8,ode),e(ode,_bt),e(n8,bbt),e(me,vbt),e(me,s8),e(s8,HRe),e(HRe,Fbt),e(s8,Tbt),e(s8,rde),e(rde,Mbt),e(s8,Ebt),e(me,Cbt),e(me,l8),e(l8,JRe),e(JRe,wbt),e(l8,Abt),e(l8,tde),e(tde,Lbt),e(l8,ybt),e(me,xbt),e(me,i8),e(i8,YRe),e(YRe,$bt),e(i8,kbt),e(i8,ade),e(ade,Sbt),e(i8,Rbt),e(me,Pbt),e(me,d8),e(d8,ZRe),e(ZRe,Bbt),e(d8,Ibt),e(d8,nde),e(nde,Nbt),e(d8,qbt),e(me,jbt),e(me,m8),e(m8,KRe),e(KRe,Dbt),e(m8,Gbt),e(m8,sde),e(sde,Obt),e(m8,Vbt),e(me,Xbt),e(me,c8),e(c8,ePe),e(ePe,zbt),e(c8,Qbt),e(c8,lde),e(lde,Wbt),e(c8,Ubt),e(me,Hbt),e(me,f8),e(f8,oPe),e(oPe,Jbt),e(f8,Ybt),e(f8,ide),e(ide,Zbt),e(f8,Kbt),e(me,evt),e(me,g8),e(g8,rPe),e(rPe,ovt),e(g8,rvt),e(g8,dde),e(dde,tvt),e(g8,avt),e(me,nvt),e(me,h8),e(h8,tPe),e(tPe,svt),e(h8,lvt),e(h8,mde),e(mde,ivt),e(h8,dvt),e(me,mvt),e(me,u8),e(u8,aPe),e(aPe,cvt),e(u8,fvt),e(u8,cde),e(cde,gvt),e(u8,hvt),e(me,uvt),e(me,p8),e(p8,nPe),e(nPe,pvt),e(p8,_vt),e(p8,fde),e(fde,bvt),e(p8,vvt),e(me,Fvt),e(me,_8),e(_8,sPe),e(sPe,Tvt),e(_8,Mvt),e(_8,gde),e(gde,Evt),e(_8,Cvt),e(me,wvt),e(me,b8),e(b8,lPe),e(lPe,Avt),e(b8,Lvt),e(b8,hde),e(hde,yvt),e(b8,xvt),e(me,$vt),e(me,v8),e(v8,iPe),e(iPe,kvt),e(v8,Svt),e(v8,ude),e(ude,Rvt),e(v8,Pvt),e(me,Bvt),e(me,F8),e(F8,dPe),e(dPe,Ivt),e(F8,Nvt),e(F8,pde),e(pde,qvt),e(F8,jvt),e(me,Dvt),e(me,T8),e(T8,mPe),e(mPe,Gvt),e(T8,Ovt),e(T8,_de),e(_de,Vvt),e(T8,Xvt),e(tt,zvt),M(M8,tt,null),b(c,imo,_),b(c,sf,_),e(sf,E8),e(E8,cPe),M(HB,cPe,null),e(sf,Qvt),e(sf,fPe),e(fPe,Wvt),b(c,dmo,_),b(c,yr,_),M(JB,yr,null),e(yr,Uvt),e(yr,lf),e(lf,Hvt),e(lf,bde),e(bde,Jvt),e(lf,Yvt),e(lf,vde),e(vde,Zvt),e(lf,Kvt),e(yr,eFt),e(yr,YB),e(YB,oFt),e(YB,gPe),e(gPe,rFt),e(YB,tFt),e(yr,aFt),e(yr,ha),M(ZB,ha,null),e(ha,nFt),e(ha,hPe),e(hPe,sFt),e(ha,lFt),e(ha,df),e(df,iFt),e(df,uPe),e(uPe,dFt),e(df,mFt),e(df,Fde),e(Fde,cFt),e(df,fFt),e(ha,gFt),M(C8,ha,null),e(yr,hFt),e(yr,at),M(KB,at,null),e(at,uFt),e(at,pPe),e(pPe,pFt),e(at,_Ft),e(at,os),e(os,bFt),e(os,_Pe),e(_Pe,vFt),e(os,FFt),e(os,bPe),e(bPe,TFt),e(os,MFt),e(os,vPe),e(vPe,EFt),e(os,CFt),e(at,wFt),e(at,ue),e(ue,w8),e(w8,FPe),e(FPe,AFt),e(w8,LFt),e(w8,Tde),e(Tde,yFt),e(w8,xFt),e(ue,$Ft),e(ue,A8),e(A8,TPe),e(TPe,kFt),e(A8,SFt),e(A8,Mde),e(Mde,RFt),e(A8,PFt),e(ue,BFt),e(ue,L8),e(L8,MPe),e(MPe,IFt),e(L8,NFt),e(L8,Ede),e(Ede,qFt),e(L8,jFt),e(ue,DFt),e(ue,y8),e(y8,EPe),e(EPe,GFt),e(y8,OFt),e(y8,Cde),e(Cde,VFt),e(y8,XFt),e(ue,zFt),e(ue,x8),e(x8,CPe),e(CPe,QFt),e(x8,WFt),e(x8,wde),e(wde,UFt),e(x8,HFt),e(ue,JFt),e(ue,$8),e($8,wPe),e(wPe,YFt),e($8,ZFt),e($8,Ade),e(Ade,KFt),e($8,eTt),e(ue,oTt),e(ue,k8),e(k8,APe),e(APe,rTt),e(k8,tTt),e(k8,Lde),e(Lde,aTt),e(k8,nTt),e(ue,sTt),e(ue,S8),e(S8,LPe),e(LPe,lTt),e(S8,iTt),e(S8,yde),e(yde,dTt),e(S8,mTt),e(ue,cTt),e(ue,R8),e(R8,yPe),e(yPe,fTt),e(R8,gTt),e(R8,xde),e(xde,hTt),e(R8,uTt),e(ue,pTt),e(ue,P8),e(P8,xPe),e(xPe,_Tt),e(P8,bTt),e(P8,$de),e($de,vTt),e(P8,FTt),e(ue,TTt),e(ue,B8),e(B8,$Pe),e($Pe,MTt),e(B8,ETt),e(B8,kde),e(kde,CTt),e(B8,wTt),e(ue,ATt),e(ue,I8),e(I8,kPe),e(kPe,LTt),e(I8,yTt),e(I8,Sde),e(Sde,xTt),e(I8,$Tt),e(ue,kTt),e(ue,N8),e(N8,SPe),e(SPe,STt),e(N8,RTt),e(N8,Rde),e(Rde,PTt),e(N8,BTt),e(ue,ITt),e(ue,q8),e(q8,RPe),e(RPe,NTt),e(q8,qTt),e(q8,Pde),e(Pde,jTt),e(q8,DTt),e(ue,GTt),e(ue,j8),e(j8,PPe),e(PPe,OTt),e(j8,VTt),e(j8,Bde),e(Bde,XTt),e(j8,zTt),e(ue,QTt),e(ue,D8),e(D8,BPe),e(BPe,WTt),e(D8,UTt),e(D8,Ide),e(Ide,HTt),e(D8,JTt),e(ue,YTt),e(ue,G8),e(G8,IPe),e(IPe,ZTt),e(G8,KTt),e(G8,Nde),e(Nde,eMt),e(G8,oMt),e(ue,rMt),e(ue,O8),e(O8,NPe),e(NPe,tMt),e(O8,aMt),e(O8,qde),e(qde,nMt),e(O8,sMt),e(ue,lMt),e(ue,V8),e(V8,qPe),e(qPe,iMt),e(V8,dMt),e(V8,jde),e(jde,mMt),e(V8,cMt),e(ue,fMt),e(ue,X8),e(X8,jPe),e(jPe,gMt),e(X8,hMt),e(X8,Dde),e(Dde,uMt),e(X8,pMt),e(ue,_Mt),e(ue,z8),e(z8,DPe),e(DPe,bMt),e(z8,vMt),e(z8,Gde),e(Gde,FMt),e(z8,TMt),e(at,MMt),M(Q8,at,null),b(c,mmo,_),b(c,mf,_),e(mf,W8),e(W8,GPe),M(eI,GPe,null),e(mf,EMt),e(mf,OPe),e(OPe,CMt),b(c,cmo,_),b(c,xr,_),M(oI,xr,null),e(xr,wMt),e(xr,cf),e(cf,AMt),e(cf,Ode),e(Ode,LMt),e(cf,yMt),e(cf,Vde),e(Vde,xMt),e(cf,$Mt),e(xr,kMt),e(xr,rI),e(rI,SMt),e(rI,VPe),e(VPe,RMt),e(rI,PMt),e(xr,BMt),e(xr,ua),M(tI,ua,null),e(ua,IMt),e(ua,XPe),e(XPe,NMt),e(ua,qMt),e(ua,ff),e(ff,jMt),e(ff,zPe),e(zPe,DMt),e(ff,GMt),e(ff,Xde),e(Xde,OMt),e(ff,VMt),e(ua,XMt),M(U8,ua,null),e(xr,zMt),e(xr,nt),M(aI,nt,null),e(nt,QMt),e(nt,QPe),e(QPe,WMt),e(nt,UMt),e(nt,rs),e(rs,HMt),e(rs,WPe),e(WPe,JMt),e(rs,YMt),e(rs,UPe),e(UPe,ZMt),e(rs,KMt),e(rs,HPe),e(HPe,eEt),e(rs,oEt),e(nt,rEt),e(nt,JPe),e(JPe,H8),e(H8,YPe),e(YPe,tEt),e(H8,aEt),e(H8,zde),e(zde,nEt),e(H8,sEt),e(nt,lEt),M(J8,nt,null),b(c,fmo,_),b(c,gf,_),e(gf,Y8),e(Y8,ZPe),M(nI,ZPe,null),e(gf,iEt),e(gf,KPe),e(KPe,dEt),b(c,gmo,_),b(c,$r,_),M(sI,$r,null),e($r,mEt),e($r,hf),e(hf,cEt),e(hf,Qde),e(Qde,fEt),e(hf,gEt),e(hf,Wde),e(Wde,hEt),e(hf,uEt),e($r,pEt),e($r,lI),e(lI,_Et),e(lI,eBe),e(eBe,bEt),e(lI,vEt),e($r,FEt),e($r,pa),M(iI,pa,null),e(pa,TEt),e(pa,oBe),e(oBe,MEt),e(pa,EEt),e(pa,uf),e(uf,CEt),e(uf,rBe),e(rBe,wEt),e(uf,AEt),e(uf,Ude),e(Ude,LEt),e(uf,yEt),e(pa,xEt),M(Z8,pa,null),e($r,$Et),e($r,st),M(dI,st,null),e(st,kEt),e(st,tBe),e(tBe,SEt),e(st,REt),e(st,ts),e(ts,PEt),e(ts,aBe),e(aBe,BEt),e(ts,IEt),e(ts,nBe),e(nBe,NEt),e(ts,qEt),e(ts,sBe),e(sBe,jEt),e(ts,DEt),e(st,GEt),e(st,mI),e(mI,K8),e(K8,lBe),e(lBe,OEt),e(K8,VEt),e(K8,Hde),e(Hde,XEt),e(K8,zEt),e(mI,QEt),e(mI,eL),e(eL,iBe),e(iBe,WEt),e(eL,UEt),e(eL,Jde),e(Jde,HEt),e(eL,JEt),e(st,YEt),M(oL,st,null),b(c,hmo,_),b(c,pf,_),e(pf,rL),e(rL,dBe),M(cI,dBe,null),e(pf,ZEt),e(pf,mBe),e(mBe,KEt),b(c,umo,_),b(c,kr,_),M(fI,kr,null),e(kr,e4t),e(kr,_f),e(_f,o4t),e(_f,Yde),e(Yde,r4t),e(_f,t4t),e(_f,Zde),e(Zde,a4t),e(_f,n4t),e(kr,s4t),e(kr,gI),e(gI,l4t),e(gI,cBe),e(cBe,i4t),e(gI,d4t),e(kr,m4t),e(kr,_a),M(hI,_a,null),e(_a,c4t),e(_a,fBe),e(fBe,f4t),e(_a,g4t),e(_a,bf),e(bf,h4t),e(bf,gBe),e(gBe,u4t),e(bf,p4t),e(bf,Kde),e(Kde,_4t),e(bf,b4t),e(_a,v4t),M(tL,_a,null),e(kr,F4t),e(kr,lt),M(uI,lt,null),e(lt,T4t),e(lt,hBe),e(hBe,M4t),e(lt,E4t),e(lt,as),e(as,C4t),e(as,uBe),e(uBe,w4t),e(as,A4t),e(as,pBe),e(pBe,L4t),e(as,y4t),e(as,_Be),e(_Be,x4t),e(as,$4t),e(lt,k4t),e(lt,ne),e(ne,aL),e(aL,bBe),e(bBe,S4t),e(aL,R4t),e(aL,eme),e(eme,P4t),e(aL,B4t),e(ne,I4t),e(ne,nL),e(nL,vBe),e(vBe,N4t),e(nL,q4t),e(nL,ome),e(ome,j4t),e(nL,D4t),e(ne,G4t),e(ne,sL),e(sL,FBe),e(FBe,O4t),e(sL,V4t),e(sL,rme),e(rme,X4t),e(sL,z4t),e(ne,Q4t),e(ne,lL),e(lL,TBe),e(TBe,W4t),e(lL,U4t),e(lL,tme),e(tme,H4t),e(lL,J4t),e(ne,Y4t),e(ne,iL),e(iL,MBe),e(MBe,Z4t),e(iL,K4t),e(iL,ame),e(ame,eCt),e(iL,oCt),e(ne,rCt),e(ne,dL),e(dL,EBe),e(EBe,tCt),e(dL,aCt),e(dL,nme),e(nme,nCt),e(dL,sCt),e(ne,lCt),e(ne,mL),e(mL,CBe),e(CBe,iCt),e(mL,dCt),e(mL,sme),e(sme,mCt),e(mL,cCt),e(ne,fCt),e(ne,cL),e(cL,wBe),e(wBe,gCt),e(cL,hCt),e(cL,lme),e(lme,uCt),e(cL,pCt),e(ne,_Ct),e(ne,fL),e(fL,ABe),e(ABe,bCt),e(fL,vCt),e(fL,ime),e(ime,FCt),e(fL,TCt),e(ne,MCt),e(ne,gL),e(gL,LBe),e(LBe,ECt),e(gL,CCt),e(gL,dme),e(dme,wCt),e(gL,ACt),e(ne,LCt),e(ne,hL),e(hL,yBe),e(yBe,yCt),e(hL,xCt),e(hL,mme),e(mme,$Ct),e(hL,kCt),e(ne,SCt),e(ne,uL),e(uL,xBe),e(xBe,RCt),e(uL,PCt),e(uL,cme),e(cme,BCt),e(uL,ICt),e(ne,NCt),e(ne,pL),e(pL,$Be),e($Be,qCt),e(pL,jCt),e(pL,fme),e(fme,DCt),e(pL,GCt),e(ne,OCt),e(ne,_L),e(_L,kBe),e(kBe,VCt),e(_L,XCt),e(_L,gme),e(gme,zCt),e(_L,QCt),e(ne,WCt),e(ne,bL),e(bL,SBe),e(SBe,UCt),e(bL,HCt),e(bL,hme),e(hme,JCt),e(bL,YCt),e(ne,ZCt),e(ne,vL),e(vL,RBe),e(RBe,KCt),e(vL,e3t),e(vL,ume),e(ume,o3t),e(vL,r3t),e(ne,t3t),e(ne,FL),e(FL,PBe),e(PBe,a3t),e(FL,n3t),e(FL,pme),e(pme,s3t),e(FL,l3t),e(ne,i3t),e(ne,TL),e(TL,BBe),e(BBe,d3t),e(TL,m3t),e(TL,_me),e(_me,c3t),e(TL,f3t),e(ne,g3t),e(ne,ML),e(ML,IBe),e(IBe,h3t),e(ML,u3t),e(ML,bme),e(bme,p3t),e(ML,_3t),e(ne,b3t),e(ne,EL),e(EL,NBe),e(NBe,v3t),e(EL,F3t),e(EL,vme),e(vme,T3t),e(EL,M3t),e(ne,E3t),e(ne,CL),e(CL,qBe),e(qBe,C3t),e(CL,w3t),e(CL,Fme),e(Fme,A3t),e(CL,L3t),e(ne,y3t),e(ne,wL),e(wL,jBe),e(jBe,x3t),e(wL,$3t),e(wL,Tme),e(Tme,k3t),e(wL,S3t),e(ne,R3t),e(ne,AL),e(AL,DBe),e(DBe,P3t),e(AL,B3t),e(AL,Mme),e(Mme,I3t),e(AL,N3t),e(ne,q3t),e(ne,LL),e(LL,GBe),e(GBe,j3t),e(LL,D3t),e(LL,Eme),e(Eme,G3t),e(LL,O3t),e(ne,V3t),e(ne,yL),e(yL,OBe),e(OBe,X3t),e(yL,z3t),e(yL,Cme),e(Cme,Q3t),e(yL,W3t),e(ne,U3t),e(ne,xL),e(xL,VBe),e(VBe,H3t),e(xL,J3t),e(xL,wme),e(wme,Y3t),e(xL,Z3t),e(ne,K3t),e(ne,$L),e($L,XBe),e(XBe,e5t),e($L,o5t),e($L,Ame),e(Ame,r5t),e($L,t5t),e(lt,a5t),M(kL,lt,null),b(c,pmo,_),b(c,vf,_),e(vf,SL),e(SL,zBe),M(pI,zBe,null),e(vf,n5t),e(vf,QBe),e(QBe,s5t),b(c,_mo,_),b(c,Sr,_),M(_I,Sr,null),e(Sr,l5t),e(Sr,Ff),e(Ff,i5t),e(Ff,Lme),e(Lme,d5t),e(Ff,m5t),e(Ff,yme),e(yme,c5t),e(Ff,f5t),e(Sr,g5t),e(Sr,bI),e(bI,h5t),e(bI,WBe),e(WBe,u5t),e(bI,p5t),e(Sr,_5t),e(Sr,ba),M(vI,ba,null),e(ba,b5t),e(ba,UBe),e(UBe,v5t),e(ba,F5t),e(ba,Tf),e(Tf,T5t),e(Tf,HBe),e(HBe,M5t),e(Tf,E5t),e(Tf,xme),e(xme,C5t),e(Tf,w5t),e(ba,A5t),M(RL,ba,null),e(Sr,L5t),e(Sr,it),M(FI,it,null),e(it,y5t),e(it,JBe),e(JBe,x5t),e(it,$5t),e(it,ns),e(ns,k5t),e(ns,YBe),e(YBe,S5t),e(ns,R5t),e(ns,ZBe),e(ZBe,P5t),e(ns,B5t),e(ns,KBe),e(KBe,I5t),e(ns,N5t),e(it,q5t),e(it,Se),e(Se,PL),e(PL,eIe),e(eIe,j5t),e(PL,D5t),e(PL,$me),e($me,G5t),e(PL,O5t),e(Se,V5t),e(Se,BL),e(BL,oIe),e(oIe,X5t),e(BL,z5t),e(BL,kme),e(kme,Q5t),e(BL,W5t),e(Se,U5t),e(Se,IL),e(IL,rIe),e(rIe,H5t),e(IL,J5t),e(IL,Sme),e(Sme,Y5t),e(IL,Z5t),e(Se,K5t),e(Se,NL),e(NL,tIe),e(tIe,e0t),e(NL,o0t),e(NL,Rme),e(Rme,r0t),e(NL,t0t),e(Se,a0t),e(Se,qL),e(qL,aIe),e(aIe,n0t),e(qL,s0t),e(qL,Pme),e(Pme,l0t),e(qL,i0t),e(Se,d0t),e(Se,jL),e(jL,nIe),e(nIe,m0t),e(jL,c0t),e(jL,Bme),e(Bme,f0t),e(jL,g0t),e(Se,h0t),e(Se,DL),e(DL,sIe),e(sIe,u0t),e(DL,p0t),e(DL,Ime),e(Ime,_0t),e(DL,b0t),e(Se,v0t),e(Se,GL),e(GL,lIe),e(lIe,F0t),e(GL,T0t),e(GL,Nme),e(Nme,M0t),e(GL,E0t),e(Se,C0t),e(Se,OL),e(OL,iIe),e(iIe,w0t),e(OL,A0t),e(OL,qme),e(qme,L0t),e(OL,y0t),e(Se,x0t),e(Se,VL),e(VL,dIe),e(dIe,$0t),e(VL,k0t),e(VL,jme),e(jme,S0t),e(VL,R0t),e(it,P0t),M(XL,it,null),b(c,bmo,_),b(c,Mf,_),e(Mf,zL),e(zL,mIe),M(TI,mIe,null),e(Mf,B0t),e(Mf,cIe),e(cIe,I0t),b(c,vmo,_),b(c,Rr,_),M(MI,Rr,null),e(Rr,N0t),e(Rr,Ef),e(Ef,q0t),e(Ef,Dme),e(Dme,j0t),e(Ef,D0t),e(Ef,Gme),e(Gme,G0t),e(Ef,O0t),e(Rr,V0t),e(Rr,EI),e(EI,X0t),e(EI,fIe),e(fIe,z0t),e(EI,Q0t),e(Rr,W0t),e(Rr,va),M(CI,va,null),e(va,U0t),e(va,gIe),e(gIe,H0t),e(va,J0t),e(va,Cf),e(Cf,Y0t),e(Cf,hIe),e(hIe,Z0t),e(Cf,K0t),e(Cf,Ome),e(Ome,ewt),e(Cf,owt),e(va,rwt),M(QL,va,null),e(Rr,twt),e(Rr,dt),M(wI,dt,null),e(dt,awt),e(dt,uIe),e(uIe,nwt),e(dt,swt),e(dt,ss),e(ss,lwt),e(ss,pIe),e(pIe,iwt),e(ss,dwt),e(ss,_Ie),e(_Ie,mwt),e(ss,cwt),e(ss,bIe),e(bIe,fwt),e(ss,gwt),e(dt,hwt),e(dt,we),e(we,WL),e(WL,vIe),e(vIe,uwt),e(WL,pwt),e(WL,Vme),e(Vme,_wt),e(WL,bwt),e(we,vwt),e(we,UL),e(UL,FIe),e(FIe,Fwt),e(UL,Twt),e(UL,Xme),e(Xme,Mwt),e(UL,Ewt),e(we,Cwt),e(we,HL),e(HL,TIe),e(TIe,wwt),e(HL,Awt),e(HL,zme),e(zme,Lwt),e(HL,ywt),e(we,xwt),e(we,JL),e(JL,MIe),e(MIe,$wt),e(JL,kwt),e(JL,Qme),e(Qme,Swt),e(JL,Rwt),e(we,Pwt),e(we,YL),e(YL,EIe),e(EIe,Bwt),e(YL,Iwt),e(YL,Wme),e(Wme,Nwt),e(YL,qwt),e(we,jwt),e(we,ZL),e(ZL,CIe),e(CIe,Dwt),e(ZL,Gwt),e(ZL,Ume),e(Ume,Owt),e(ZL,Vwt),e(we,Xwt),e(we,KL),e(KL,wIe),e(wIe,zwt),e(KL,Qwt),e(KL,Hme),e(Hme,Wwt),e(KL,Uwt),e(we,Hwt),e(we,ey),e(ey,AIe),e(AIe,Jwt),e(ey,Ywt),e(ey,Jme),e(Jme,Zwt),e(ey,Kwt),e(we,eAt),e(we,oy),e(oy,LIe),e(LIe,oAt),e(oy,rAt),e(oy,Yme),e(Yme,tAt),e(oy,aAt),e(we,nAt),e(we,ry),e(ry,yIe),e(yIe,sAt),e(ry,lAt),e(ry,Zme),e(Zme,iAt),e(ry,dAt),e(we,mAt),e(we,ty),e(ty,xIe),e(xIe,cAt),e(ty,fAt),e(ty,Kme),e(Kme,gAt),e(ty,hAt),e(we,uAt),e(we,ay),e(ay,$Ie),e($Ie,pAt),e(ay,_At),e(ay,ece),e(ece,bAt),e(ay,vAt),e(we,FAt),e(we,ny),e(ny,kIe),e(kIe,TAt),e(ny,MAt),e(ny,oce),e(oce,EAt),e(ny,CAt),e(dt,wAt),M(sy,dt,null),b(c,Fmo,_),b(c,wf,_),e(wf,ly),e(ly,SIe),M(AI,SIe,null),e(wf,AAt),e(wf,RIe),e(RIe,LAt),b(c,Tmo,_),b(c,Pr,_),M(LI,Pr,null),e(Pr,yAt),e(Pr,Af),e(Af,xAt),e(Af,rce),e(rce,$At),e(Af,kAt),e(Af,tce),e(tce,SAt),e(Af,RAt),e(Pr,PAt),e(Pr,yI),e(yI,BAt),e(yI,PIe),e(PIe,IAt),e(yI,NAt),e(Pr,qAt),e(Pr,Fa),M(xI,Fa,null),e(Fa,jAt),e(Fa,BIe),e(BIe,DAt),e(Fa,GAt),e(Fa,Lf),e(Lf,OAt),e(Lf,IIe),e(IIe,VAt),e(Lf,XAt),e(Lf,ace),e(ace,zAt),e(Lf,QAt),e(Fa,WAt),M(iy,Fa,null),e(Pr,UAt),e(Pr,mt),M($I,mt,null),e(mt,HAt),e(mt,NIe),e(NIe,JAt),e(mt,YAt),e(mt,ls),e(ls,ZAt),e(ls,qIe),e(qIe,KAt),e(ls,e6t),e(ls,jIe),e(jIe,o6t),e(ls,r6t),e(ls,DIe),e(DIe,t6t),e(ls,a6t),e(mt,n6t),e(mt,Re),e(Re,dy),e(dy,GIe),e(GIe,s6t),e(dy,l6t),e(dy,nce),e(nce,i6t),e(dy,d6t),e(Re,m6t),e(Re,my),e(my,OIe),e(OIe,c6t),e(my,f6t),e(my,sce),e(sce,g6t),e(my,h6t),e(Re,u6t),e(Re,cy),e(cy,VIe),e(VIe,p6t),e(cy,_6t),e(cy,lce),e(lce,b6t),e(cy,v6t),e(Re,F6t),e(Re,fy),e(fy,XIe),e(XIe,T6t),e(fy,M6t),e(fy,ice),e(ice,E6t),e(fy,C6t),e(Re,w6t),e(Re,gy),e(gy,zIe),e(zIe,A6t),e(gy,L6t),e(gy,dce),e(dce,y6t),e(gy,x6t),e(Re,$6t),e(Re,hy),e(hy,QIe),e(QIe,k6t),e(hy,S6t),e(hy,mce),e(mce,R6t),e(hy,P6t),e(Re,B6t),e(Re,uy),e(uy,WIe),e(WIe,I6t),e(uy,N6t),e(uy,cce),e(cce,q6t),e(uy,j6t),e(Re,D6t),e(Re,py),e(py,UIe),e(UIe,G6t),e(py,O6t),e(py,fce),e(fce,V6t),e(py,X6t),e(Re,z6t),e(Re,_y),e(_y,HIe),e(HIe,Q6t),e(_y,W6t),e(_y,gce),e(gce,U6t),e(_y,H6t),e(Re,J6t),e(Re,by),e(by,JIe),e(JIe,Y6t),e(by,Z6t),e(by,hce),e(hce,K6t),e(by,e7t),e(mt,o7t),M(vy,mt,null),b(c,Mmo,_),b(c,yf,_),e(yf,Fy),e(Fy,YIe),M(kI,YIe,null),e(yf,r7t),e(yf,ZIe),e(ZIe,t7t),b(c,Emo,_),b(c,Br,_),M(SI,Br,null),e(Br,a7t),e(Br,xf),e(xf,n7t),e(xf,uce),e(uce,s7t),e(xf,l7t),e(xf,pce),e(pce,i7t),e(xf,d7t),e(Br,m7t),e(Br,RI),e(RI,c7t),e(RI,KIe),e(KIe,f7t),e(RI,g7t),e(Br,h7t),e(Br,Ta),M(PI,Ta,null),e(Ta,u7t),e(Ta,eNe),e(eNe,p7t),e(Ta,_7t),e(Ta,$f),e($f,b7t),e($f,oNe),e(oNe,v7t),e($f,F7t),e($f,_ce),e(_ce,T7t),e($f,M7t),e(Ta,E7t),M(Ty,Ta,null),e(Br,C7t),e(Br,ct),M(BI,ct,null),e(ct,w7t),e(ct,rNe),e(rNe,A7t),e(ct,L7t),e(ct,is),e(is,y7t),e(is,tNe),e(tNe,x7t),e(is,$7t),e(is,aNe),e(aNe,k7t),e(is,S7t),e(is,nNe),e(nNe,R7t),e(is,P7t),e(ct,B7t),e(ct,Pe),e(Pe,My),e(My,sNe),e(sNe,I7t),e(My,N7t),e(My,bce),e(bce,q7t),e(My,j7t),e(Pe,D7t),e(Pe,Ey),e(Ey,lNe),e(lNe,G7t),e(Ey,O7t),e(Ey,vce),e(vce,V7t),e(Ey,X7t),e(Pe,z7t),e(Pe,Cy),e(Cy,iNe),e(iNe,Q7t),e(Cy,W7t),e(Cy,Fce),e(Fce,U7t),e(Cy,H7t),e(Pe,J7t),e(Pe,wy),e(wy,dNe),e(dNe,Y7t),e(wy,Z7t),e(wy,Tce),e(Tce,K7t),e(wy,e8t),e(Pe,o8t),e(Pe,Ay),e(Ay,mNe),e(mNe,r8t),e(Ay,t8t),e(Ay,Mce),e(Mce,a8t),e(Ay,n8t),e(Pe,s8t),e(Pe,Ly),e(Ly,cNe),e(cNe,l8t),e(Ly,i8t),e(Ly,Ece),e(Ece,d8t),e(Ly,m8t),e(Pe,c8t),e(Pe,yy),e(yy,fNe),e(fNe,f8t),e(yy,g8t),e(yy,Cce),e(Cce,h8t),e(yy,u8t),e(Pe,p8t),e(Pe,xy),e(xy,gNe),e(gNe,_8t),e(xy,b8t),e(xy,wce),e(wce,v8t),e(xy,F8t),e(Pe,T8t),e(Pe,$y),e($y,hNe),e(hNe,M8t),e($y,E8t),e($y,Ace),e(Ace,C8t),e($y,w8t),e(Pe,A8t),e(Pe,ky),e(ky,uNe),e(uNe,L8t),e(ky,y8t),e(ky,Lce),e(Lce,x8t),e(ky,$8t),e(ct,k8t),M(Sy,ct,null),b(c,Cmo,_),b(c,kf,_),e(kf,Ry),e(Ry,pNe),M(II,pNe,null),e(kf,S8t),e(kf,_Ne),e(_Ne,R8t),b(c,wmo,_),b(c,Ir,_),M(NI,Ir,null),e(Ir,P8t),e(Ir,Sf),e(Sf,B8t),e(Sf,yce),e(yce,I8t),e(Sf,N8t),e(Sf,xce),e(xce,q8t),e(Sf,j8t),e(Ir,D8t),e(Ir,qI),e(qI,G8t),e(qI,bNe),e(bNe,O8t),e(qI,V8t),e(Ir,X8t),e(Ir,Ma),M(jI,Ma,null),e(Ma,z8t),e(Ma,vNe),e(vNe,Q8t),e(Ma,W8t),e(Ma,Rf),e(Rf,U8t),e(Rf,FNe),e(FNe,H8t),e(Rf,J8t),e(Rf,$ce),e($ce,Y8t),e(Rf,Z8t),e(Ma,K8t),M(Py,Ma,null),e(Ir,eLt),e(Ir,ft),M(DI,ft,null),e(ft,oLt),e(ft,TNe),e(TNe,rLt),e(ft,tLt),e(ft,ds),e(ds,aLt),e(ds,MNe),e(MNe,nLt),e(ds,sLt),e(ds,ENe),e(ENe,lLt),e(ds,iLt),e(ds,CNe),e(CNe,dLt),e(ds,mLt),e(ft,cLt),e(ft,Be),e(Be,By),e(By,wNe),e(wNe,fLt),e(By,gLt),e(By,kce),e(kce,hLt),e(By,uLt),e(Be,pLt),e(Be,Iy),e(Iy,ANe),e(ANe,_Lt),e(Iy,bLt),e(Iy,Sce),e(Sce,vLt),e(Iy,FLt),e(Be,TLt),e(Be,Ny),e(Ny,LNe),e(LNe,MLt),e(Ny,ELt),e(Ny,Rce),e(Rce,CLt),e(Ny,wLt),e(Be,ALt),e(Be,qy),e(qy,yNe),e(yNe,LLt),e(qy,yLt),e(qy,Pce),e(Pce,xLt),e(qy,$Lt),e(Be,kLt),e(Be,jy),e(jy,xNe),e(xNe,SLt),e(jy,RLt),e(jy,Bce),e(Bce,PLt),e(jy,BLt),e(Be,ILt),e(Be,Dy),e(Dy,$Ne),e($Ne,NLt),e(Dy,qLt),e(Dy,Ice),e(Ice,jLt),e(Dy,DLt),e(Be,GLt),e(Be,Gy),e(Gy,kNe),e(kNe,OLt),e(Gy,VLt),e(Gy,Nce),e(Nce,XLt),e(Gy,zLt),e(Be,QLt),e(Be,Oy),e(Oy,SNe),e(SNe,WLt),e(Oy,ULt),e(Oy,qce),e(qce,HLt),e(Oy,JLt),e(Be,YLt),e(Be,Vy),e(Vy,RNe),e(RNe,ZLt),e(Vy,KLt),e(Vy,jce),e(jce,eyt),e(Vy,oyt),e(Be,ryt),e(Be,Xy),e(Xy,PNe),e(PNe,tyt),e(Xy,ayt),e(Xy,Dce),e(Dce,nyt),e(Xy,syt),e(ft,lyt),M(zy,ft,null),b(c,Amo,_),b(c,Pf,_),e(Pf,Qy),e(Qy,BNe),M(GI,BNe,null),e(Pf,iyt),e(Pf,INe),e(INe,dyt),b(c,Lmo,_),b(c,Nr,_),M(OI,Nr,null),e(Nr,myt),e(Nr,Bf),e(Bf,cyt),e(Bf,Gce),e(Gce,fyt),e(Bf,gyt),e(Bf,Oce),e(Oce,hyt),e(Bf,uyt),e(Nr,pyt),e(Nr,VI),e(VI,_yt),e(VI,NNe),e(NNe,byt),e(VI,vyt),e(Nr,Fyt),e(Nr,Ea),M(XI,Ea,null),e(Ea,Tyt),e(Ea,qNe),e(qNe,Myt),e(Ea,Eyt),e(Ea,If),e(If,Cyt),e(If,jNe),e(jNe,wyt),e(If,Ayt),e(If,Vce),e(Vce,Lyt),e(If,yyt),e(Ea,xyt),M(Wy,Ea,null),e(Nr,$yt),e(Nr,gt),M(zI,gt,null),e(gt,kyt),e(gt,DNe),e(DNe,Syt),e(gt,Ryt),e(gt,ms),e(ms,Pyt),e(ms,GNe),e(GNe,Byt),e(ms,Iyt),e(ms,ONe),e(ONe,Nyt),e(ms,qyt),e(ms,VNe),e(VNe,jyt),e(ms,Dyt),e(gt,Gyt),e(gt,Ie),e(Ie,Uy),e(Uy,XNe),e(XNe,Oyt),e(Uy,Vyt),e(Uy,Xce),e(Xce,Xyt),e(Uy,zyt),e(Ie,Qyt),e(Ie,Hy),e(Hy,zNe),e(zNe,Wyt),e(Hy,Uyt),e(Hy,zce),e(zce,Hyt),e(Hy,Jyt),e(Ie,Yyt),e(Ie,Jy),e(Jy,QNe),e(QNe,Zyt),e(Jy,Kyt),e(Jy,Qce),e(Qce,e9t),e(Jy,o9t),e(Ie,r9t),e(Ie,Yy),e(Yy,WNe),e(WNe,t9t),e(Yy,a9t),e(Yy,Wce),e(Wce,n9t),e(Yy,s9t),e(Ie,l9t),e(Ie,Zy),e(Zy,UNe),e(UNe,i9t),e(Zy,d9t),e(Zy,Uce),e(Uce,m9t),e(Zy,c9t),e(Ie,f9t),e(Ie,Ky),e(Ky,HNe),e(HNe,g9t),e(Ky,h9t),e(Ky,Hce),e(Hce,u9t),e(Ky,p9t),e(Ie,_9t),e(Ie,e9),e(e9,JNe),e(JNe,b9t),e(e9,v9t),e(e9,Jce),e(Jce,F9t),e(e9,T9t),e(Ie,M9t),e(Ie,o9),e(o9,YNe),e(YNe,E9t),e(o9,C9t),e(o9,Yce),e(Yce,w9t),e(o9,A9t),e(Ie,L9t),e(Ie,r9),e(r9,ZNe),e(ZNe,y9t),e(r9,x9t),e(r9,Zce),e(Zce,$9t),e(r9,k9t),e(Ie,S9t),e(Ie,t9),e(t9,KNe),e(KNe,R9t),e(t9,P9t),e(t9,Kce),e(Kce,B9t),e(t9,I9t),e(gt,N9t),M(a9,gt,null),b(c,ymo,_),b(c,Nf,_),e(Nf,n9),e(n9,eqe),M(QI,eqe,null),e(Nf,q9t),e(Nf,oqe),e(oqe,j9t),b(c,xmo,_),b(c,qr,_),M(WI,qr,null),e(qr,D9t),e(qr,qf),e(qf,G9t),e(qf,efe),e(efe,O9t),e(qf,V9t),e(qf,ofe),e(ofe,X9t),e(qf,z9t),e(qr,Q9t),e(qr,UI),e(UI,W9t),e(UI,rqe),e(rqe,U9t),e(UI,H9t),e(qr,J9t),e(qr,Ca),M(HI,Ca,null),e(Ca,Y9t),e(Ca,tqe),e(tqe,Z9t),e(Ca,K9t),e(Ca,jf),e(jf,ext),e(jf,aqe),e(aqe,oxt),e(jf,rxt),e(jf,rfe),e(rfe,txt),e(jf,axt),e(Ca,nxt),M(s9,Ca,null),e(qr,sxt),e(qr,ht),M(JI,ht,null),e(ht,lxt),e(ht,nqe),e(nqe,ixt),e(ht,dxt),e(ht,cs),e(cs,mxt),e(cs,sqe),e(sqe,cxt),e(cs,fxt),e(cs,lqe),e(lqe,gxt),e(cs,hxt),e(cs,iqe),e(iqe,uxt),e(cs,pxt),e(ht,_xt),e(ht,We),e(We,l9),e(l9,dqe),e(dqe,bxt),e(l9,vxt),e(l9,tfe),e(tfe,Fxt),e(l9,Txt),e(We,Mxt),e(We,i9),e(i9,mqe),e(mqe,Ext),e(i9,Cxt),e(i9,afe),e(afe,wxt),e(i9,Axt),e(We,Lxt),e(We,d9),e(d9,cqe),e(cqe,yxt),e(d9,xxt),e(d9,nfe),e(nfe,$xt),e(d9,kxt),e(We,Sxt),e(We,m9),e(m9,fqe),e(fqe,Rxt),e(m9,Pxt),e(m9,sfe),e(sfe,Bxt),e(m9,Ixt),e(We,Nxt),e(We,c9),e(c9,gqe),e(gqe,qxt),e(c9,jxt),e(c9,lfe),e(lfe,Dxt),e(c9,Gxt),e(We,Oxt),e(We,f9),e(f9,hqe),e(hqe,Vxt),e(f9,Xxt),e(f9,ife),e(ife,zxt),e(f9,Qxt),e(We,Wxt),e(We,g9),e(g9,uqe),e(uqe,Uxt),e(g9,Hxt),e(g9,dfe),e(dfe,Jxt),e(g9,Yxt),e(We,Zxt),e(We,h9),e(h9,pqe),e(pqe,Kxt),e(h9,e$t),e(h9,mfe),e(mfe,o$t),e(h9,r$t),e(ht,t$t),M(u9,ht,null),b(c,$mo,_),b(c,Df,_),e(Df,p9),e(p9,_qe),M(YI,_qe,null),e(Df,a$t),e(Df,bqe),e(bqe,n$t),b(c,kmo,_),b(c,jr,_),M(ZI,jr,null),e(jr,s$t),e(jr,Gf),e(Gf,l$t),e(Gf,cfe),e(cfe,i$t),e(Gf,d$t),e(Gf,ffe),e(ffe,m$t),e(Gf,c$t),e(jr,f$t),e(jr,KI),e(KI,g$t),e(KI,vqe),e(vqe,h$t),e(KI,u$t),e(jr,p$t),e(jr,wa),M(eN,wa,null),e(wa,_$t),e(wa,Fqe),e(Fqe,b$t),e(wa,v$t),e(wa,Of),e(Of,F$t),e(Of,Tqe),e(Tqe,T$t),e(Of,M$t),e(Of,gfe),e(gfe,E$t),e(Of,C$t),e(wa,w$t),M(_9,wa,null),e(jr,A$t),e(jr,ut),M(oN,ut,null),e(ut,L$t),e(ut,Mqe),e(Mqe,y$t),e(ut,x$t),e(ut,fs),e(fs,$$t),e(fs,Eqe),e(Eqe,k$t),e(fs,S$t),e(fs,Cqe),e(Cqe,R$t),e(fs,P$t),e(fs,wqe),e(wqe,B$t),e(fs,I$t),e(ut,N$t),e(ut,Ue),e(Ue,b9),e(b9,Aqe),e(Aqe,q$t),e(b9,j$t),e(b9,hfe),e(hfe,D$t),e(b9,G$t),e(Ue,O$t),e(Ue,v9),e(v9,Lqe),e(Lqe,V$t),e(v9,X$t),e(v9,ufe),e(ufe,z$t),e(v9,Q$t),e(Ue,W$t),e(Ue,F9),e(F9,yqe),e(yqe,U$t),e(F9,H$t),e(F9,pfe),e(pfe,J$t),e(F9,Y$t),e(Ue,Z$t),e(Ue,T9),e(T9,xqe),e(xqe,K$t),e(T9,ekt),e(T9,_fe),e(_fe,okt),e(T9,rkt),e(Ue,tkt),e(Ue,M9),e(M9,$qe),e($qe,akt),e(M9,nkt),e(M9,bfe),e(bfe,skt),e(M9,lkt),e(Ue,ikt),e(Ue,E9),e(E9,kqe),e(kqe,dkt),e(E9,mkt),e(E9,vfe),e(vfe,ckt),e(E9,fkt),e(Ue,gkt),e(Ue,C9),e(C9,Sqe),e(Sqe,hkt),e(C9,ukt),e(C9,Ffe),e(Ffe,pkt),e(C9,_kt),e(Ue,bkt),e(Ue,w9),e(w9,Rqe),e(Rqe,vkt),e(w9,Fkt),e(w9,Tfe),e(Tfe,Tkt),e(w9,Mkt),e(ut,Ekt),M(A9,ut,null),b(c,Smo,_),b(c,Vf,_),e(Vf,L9),e(L9,Pqe),M(rN,Pqe,null),e(Vf,Ckt),e(Vf,Bqe),e(Bqe,wkt),b(c,Rmo,_),b(c,Dr,_),M(tN,Dr,null),e(Dr,Akt),e(Dr,Xf),e(Xf,Lkt),e(Xf,Mfe),e(Mfe,ykt),e(Xf,xkt),e(Xf,Efe),e(Efe,$kt),e(Xf,kkt),e(Dr,Skt),e(Dr,aN),e(aN,Rkt),e(aN,Iqe),e(Iqe,Pkt),e(aN,Bkt),e(Dr,Ikt),e(Dr,Aa),M(nN,Aa,null),e(Aa,Nkt),e(Aa,Nqe),e(Nqe,qkt),e(Aa,jkt),e(Aa,zf),e(zf,Dkt),e(zf,qqe),e(qqe,Gkt),e(zf,Okt),e(zf,Cfe),e(Cfe,Vkt),e(zf,Xkt),e(Aa,zkt),M(y9,Aa,null),e(Dr,Qkt),e(Dr,pt),M(sN,pt,null),e(pt,Wkt),e(pt,jqe),e(jqe,Ukt),e(pt,Hkt),e(pt,gs),e(gs,Jkt),e(gs,Dqe),e(Dqe,Ykt),e(gs,Zkt),e(gs,Gqe),e(Gqe,Kkt),e(gs,eSt),e(gs,Oqe),e(Oqe,oSt),e(gs,rSt),e(pt,tSt),e(pt,Vqe),e(Vqe,x9),e(x9,Xqe),e(Xqe,aSt),e(x9,nSt),e(x9,wfe),e(wfe,sSt),e(x9,lSt),e(pt,iSt),M($9,pt,null),b(c,Pmo,_),b(c,Qf,_),e(Qf,k9),e(k9,zqe),M(lN,zqe,null),e(Qf,dSt),e(Qf,Qqe),e(Qqe,mSt),b(c,Bmo,_),b(c,Gr,_),M(iN,Gr,null),e(Gr,cSt),e(Gr,Wf),e(Wf,fSt),e(Wf,Afe),e(Afe,gSt),e(Wf,hSt),e(Wf,Lfe),e(Lfe,uSt),e(Wf,pSt),e(Gr,_St),e(Gr,dN),e(dN,bSt),e(dN,Wqe),e(Wqe,vSt),e(dN,FSt),e(Gr,TSt),e(Gr,La),M(mN,La,null),e(La,MSt),e(La,Uqe),e(Uqe,ESt),e(La,CSt),e(La,Uf),e(Uf,wSt),e(Uf,Hqe),e(Hqe,ASt),e(Uf,LSt),e(Uf,yfe),e(yfe,ySt),e(Uf,xSt),e(La,$St),M(S9,La,null),e(Gr,kSt),e(Gr,_t),M(cN,_t,null),e(_t,SSt),e(_t,Jqe),e(Jqe,RSt),e(_t,PSt),e(_t,hs),e(hs,BSt),e(hs,Yqe),e(Yqe,ISt),e(hs,NSt),e(hs,Zqe),e(Zqe,qSt),e(hs,jSt),e(hs,Kqe),e(Kqe,DSt),e(hs,GSt),e(_t,OSt),e(_t,fN),e(fN,R9),e(R9,eje),e(eje,VSt),e(R9,XSt),e(R9,xfe),e(xfe,zSt),e(R9,QSt),e(fN,WSt),e(fN,P9),e(P9,oje),e(oje,USt),e(P9,HSt),e(P9,$fe),e($fe,JSt),e(P9,YSt),e(_t,ZSt),M(B9,_t,null),b(c,Imo,_),b(c,Hf,_),e(Hf,I9),e(I9,rje),M(gN,rje,null),e(Hf,KSt),e(Hf,tje),e(tje,eRt),b(c,Nmo,_),b(c,Or,_),M(hN,Or,null),e(Or,oRt),e(Or,Jf),e(Jf,rRt),e(Jf,kfe),e(kfe,tRt),e(Jf,aRt),e(Jf,Sfe),e(Sfe,nRt),e(Jf,sRt),e(Or,lRt),e(Or,uN),e(uN,iRt),e(uN,aje),e(aje,dRt),e(uN,mRt),e(Or,cRt),e(Or,ya),M(pN,ya,null),e(ya,fRt),e(ya,nje),e(nje,gRt),e(ya,hRt),e(ya,Yf),e(Yf,uRt),e(Yf,sje),e(sje,pRt),e(Yf,_Rt),e(Yf,Rfe),e(Rfe,bRt),e(Yf,vRt),e(ya,FRt),M(N9,ya,null),e(Or,TRt),e(Or,bt),M(_N,bt,null),e(bt,MRt),e(bt,lje),e(lje,ERt),e(bt,CRt),e(bt,us),e(us,wRt),e(us,ije),e(ije,ARt),e(us,LRt),e(us,dje),e(dje,yRt),e(us,xRt),e(us,mje),e(mje,$Rt),e(us,kRt),e(bt,SRt),e(bt,cje),e(cje,q9),e(q9,fje),e(fje,RRt),e(q9,PRt),e(q9,Pfe),e(Pfe,BRt),e(q9,IRt),e(bt,NRt),M(j9,bt,null),qmo=!0},p(c,[_]){const bN={};_&2&&(bN.$$scope={dirty:_,ctx:c}),sg.$set(bN);const gje={};_&2&&(gje.$$scope={dirty:_,ctx:c}),Du.$set(gje);const hje={};_&2&&(hje.$$scope={dirty:_,ctx:c}),Lp.$set(hje);const uje={};_&2&&(uje.$$scope={dirty:_,ctx:c}),M_.$set(uje);const vN={};_&2&&(vN.$$scope={dirty:_,ctx:c}),E_.$set(vN);const pje={};_&2&&(pje.$$scope={dirty:_,ctx:c}),r1.$set(pje);const ps={};_&2&&(ps.$$scope={dirty:_,ctx:c}),t1.$set(ps);const _je={};_&2&&(_je.$$scope={dirty:_,ctx:c}),x1.$set(_je);const bje={};_&2&&(bje.$$scope={dirty:_,ctx:c}),$1.$set(bje);const vje={};_&2&&(vje.$$scope={dirty:_,ctx:c}),R1.$set(vje);const FN={};_&2&&(FN.$$scope={dirty:_,ctx:c}),sv.$set(FN);const Fje={};_&2&&(Fje.$$scope={dirty:_,ctx:c}),iv.$set(Fje);const TN={};_&2&&(TN.$$scope={dirty:_,ctx:c}),sF.$set(TN);const Tje={};_&2&&(Tje.$$scope={dirty:_,ctx:c}),iF.$set(Tje);const MN={};_&2&&(MN.$$scope={dirty:_,ctx:c}),KF.$set(MN);const Mje={};_&2&&(Mje.$$scope={dirty:_,ctx:c}),oT.$set(Mje);const Eje={};_&2&&(Eje.$$scope={dirty:_,ctx:c}),nT.$set(Eje);const Cje={};_&2&&(Cje.$$scope={dirty:_,ctx:c}),lT.$set(Cje);const Zf={};_&2&&(Zf.$$scope={dirty:_,ctx:c}),HT.$set(Zf);const wje={};_&2&&(wje.$$scope={dirty:_,ctx:c}),YT.$set(wje);const Aje={};_&2&&(Aje.$$scope={dirty:_,ctx:c}),FM.$set(Aje);const Lje={};_&2&&(Lje.$$scope={dirty:_,ctx:c}),MM.$set(Lje);const EN={};_&2&&(EN.$$scope={dirty:_,ctx:c}),LE.$set(EN);const yje={};_&2&&(yje.$$scope={dirty:_,ctx:c}),xE.$set(yje);const xje={};_&2&&(xje.$$scope={dirty:_,ctx:c}),m4.$set(xje);const $je={};_&2&&($je.$$scope={dirty:_,ctx:c}),f4.$set($je);const Et={};_&2&&(Et.$$scope={dirty:_,ctx:c}),T4.$set(Et);const CN={};_&2&&(CN.$$scope={dirty:_,ctx:c}),E4.$set(CN);const kje={};_&2&&(kje.$$scope={dirty:_,ctx:c}),gC.$set(kje);const wN={};_&2&&(wN.$$scope={dirty:_,ctx:c}),uC.$set(wN);const Sje={};_&2&&(Sje.$$scope={dirty:_,ctx:c}),f3.$set(Sje);const Ct={};_&2&&(Ct.$$scope={dirty:_,ctx:c}),h3.$set(Ct);const Rje={};_&2&&(Rje.$$scope={dirty:_,ctx:c}),_3.$set(Rje);const Kf={};_&2&&(Kf.$$scope={dirty:_,ctx:c}),v3.$set(Kf);const Pje={};_&2&&(Pje.$$scope={dirty:_,ctx:c}),C3.$set(Pje);const Bje={};_&2&&(Bje.$$scope={dirty:_,ctx:c}),A3.$set(Bje);const L={};_&2&&(L.$$scope={dirty:_,ctx:c}),X3.$set(L);const D9={};_&2&&(D9.$$scope={dirty:_,ctx:c}),Q3.$set(D9);const Ije={};_&2&&(Ije.$$scope={dirty:_,ctx:c}),H3.$set(Ije);const Nje={};_&2&&(Nje.$$scope={dirty:_,ctx:c}),Y3.$set(Nje);const G9={};_&2&&(G9.$$scope={dirty:_,ctx:c}),e5.$set(G9);const qje={};_&2&&(qje.$$scope={dirty:_,ctx:c}),r5.$set(qje);const jje={};_&2&&(jje.$$scope={dirty:_,ctx:c}),n5.$set(jje);const O9={};_&2&&(O9.$$scope={dirty:_,ctx:c}),l5.$set(O9);const Dje={};_&2&&(Dje.$$scope={dirty:_,ctx:c}),b5.$set(Dje);const Gje={};_&2&&(Gje.$$scope={dirty:_,ctx:c}),F5.$set(Gje);const V9={};_&2&&(V9.$$scope={dirty:_,ctx:c}),L5.$set(V9);const Oje={};_&2&&(Oje.$$scope={dirty:_,ctx:c}),x5.$set(Oje);const Vje={};_&2&&(Vje.$$scope={dirty:_,ctx:c}),G5.$set(Vje);const X9={};_&2&&(X9.$$scope={dirty:_,ctx:c}),V5.$set(X9);const Xje={};_&2&&(Xje.$$scope={dirty:_,ctx:c}),U5.$set(Xje);const zje={};_&2&&(zje.$$scope={dirty:_,ctx:c}),J5.$set(zje);const z9={};_&2&&(z9.$$scope={dirty:_,ctx:c}),t0.$set(z9);const Qje={};_&2&&(Qje.$$scope={dirty:_,ctx:c}),n0.$set(Qje);const Wje={};_&2&&(Wje.$$scope={dirty:_,ctx:c}),c0.$set(Wje);const Q9={};_&2&&(Q9.$$scope={dirty:_,ctx:c}),g0.$set(Q9);const Uje={};_&2&&(Uje.$$scope={dirty:_,ctx:c}),F0.$set(Uje);const Hje={};_&2&&(Hje.$$scope={dirty:_,ctx:c}),M0.$set(Hje);const W9={};_&2&&(W9.$$scope={dirty:_,ctx:c}),w0.$set(W9);const Jje={};_&2&&(Jje.$$scope={dirty:_,ctx:c}),L0.$set(Jje);const Yje={};_&2&&(Yje.$$scope={dirty:_,ctx:c}),B0.$set(Yje);const U9={};_&2&&(U9.$$scope={dirty:_,ctx:c}),N0.$set(U9);const Zje={};_&2&&(Zje.$$scope={dirty:_,ctx:c}),D0.$set(Zje);const Kje={};_&2&&(Kje.$$scope={dirty:_,ctx:c}),O0.$set(Kje);const H9={};_&2&&(H9.$$scope={dirty:_,ctx:c}),z0.$set(H9);const eDe={};_&2&&(eDe.$$scope={dirty:_,ctx:c}),W0.$set(eDe);const oDe={};_&2&&(oDe.$$scope={dirty:_,ctx:c}),Yw.$set(oDe);const J9={};_&2&&(J9.$$scope={dirty:_,ctx:c}),Kw.$set(J9);const rDe={};_&2&&(rDe.$$scope={dirty:_,ctx:c}),EA.$set(rDe);const tDe={};_&2&&(tDe.$$scope={dirty:_,ctx:c}),wA.$set(tDe);const Y9={};_&2&&(Y9.$$scope={dirty:_,ctx:c}),DA.$set(Y9);const aDe={};_&2&&(aDe.$$scope={dirty:_,ctx:c}),OA.$set(aDe);const nDe={};_&2&&(nDe.$$scope={dirty:_,ctx:c}),ZA.$set(nDe);const Z9={};_&2&&(Z9.$$scope={dirty:_,ctx:c}),e6.$set(Z9);const sDe={};_&2&&(sDe.$$scope={dirty:_,ctx:c}),a6.$set(sDe);const lDe={};_&2&&(lDe.$$scope={dirty:_,ctx:c}),s6.$set(lDe);const K9={};_&2&&(K9.$$scope={dirty:_,ctx:c}),y6.$set(K9);const iDe={};_&2&&(iDe.$$scope={dirty:_,ctx:c}),$6.$set(iDe);const dDe={};_&2&&(dDe.$$scope={dirty:_,ctx:c}),G6.$set(dDe);const ex={};_&2&&(ex.$$scope={dirty:_,ctx:c}),V6.$set(ex);const mDe={};_&2&&(mDe.$$scope={dirty:_,ctx:c}),b7.$set(mDe);const cDe={};_&2&&(cDe.$$scope={dirty:_,ctx:c}),F7.$set(cDe);const ox={};_&2&&(ox.$$scope={dirty:_,ctx:c}),q7.$set(ox);const fDe={};_&2&&(fDe.$$scope={dirty:_,ctx:c}),D7.$set(fDe);const gDe={};_&2&&(gDe.$$scope={dirty:_,ctx:c}),V7.$set(gDe);const rx={};_&2&&(rx.$$scope={dirty:_,ctx:c}),z7.$set(rx);const hDe={};_&2&&(hDe.$$scope={dirty:_,ctx:c}),W7.$set(hDe);const uDe={};_&2&&(uDe.$$scope={dirty:_,ctx:c}),H7.$set(uDe);const tx={};_&2&&(tx.$$scope={dirty:_,ctx:c}),Y7.$set(tx);const pDe={};_&2&&(pDe.$$scope={dirty:_,ctx:c}),K7.$set(pDe);const _De={};_&2&&(_De.$$scope={dirty:_,ctx:c}),M8.$set(_De);const ax={};_&2&&(ax.$$scope={dirty:_,ctx:c}),C8.$set(ax);const bDe={};_&2&&(bDe.$$scope={dirty:_,ctx:c}),Q8.$set(bDe);const vDe={};_&2&&(vDe.$$scope={dirty:_,ctx:c}),U8.$set(vDe);const nx={};_&2&&(nx.$$scope={dirty:_,ctx:c}),J8.$set(nx);const FDe={};_&2&&(FDe.$$scope={dirty:_,ctx:c}),Z8.$set(FDe);const TDe={};_&2&&(TDe.$$scope={dirty:_,ctx:c}),oL.$set(TDe);const sx={};_&2&&(sx.$$scope={dirty:_,ctx:c}),tL.$set(sx);const MDe={};_&2&&(MDe.$$scope={dirty:_,ctx:c}),kL.$set(MDe);const EDe={};_&2&&(EDe.$$scope={dirty:_,ctx:c}),RL.$set(EDe);const lx={};_&2&&(lx.$$scope={dirty:_,ctx:c}),XL.$set(lx);const CDe={};_&2&&(CDe.$$scope={dirty:_,ctx:c}),QL.$set(CDe);const wDe={};_&2&&(wDe.$$scope={dirty:_,ctx:c}),sy.$set(wDe);const ix={};_&2&&(ix.$$scope={dirty:_,ctx:c}),iy.$set(ix);const ADe={};_&2&&(ADe.$$scope={dirty:_,ctx:c}),vy.$set(ADe);const LDe={};_&2&&(LDe.$$scope={dirty:_,ctx:c}),Ty.$set(LDe);const dx={};_&2&&(dx.$$scope={dirty:_,ctx:c}),Sy.$set(dx);const yDe={};_&2&&(yDe.$$scope={dirty:_,ctx:c}),Py.$set(yDe);const xDe={};_&2&&(xDe.$$scope={dirty:_,ctx:c}),zy.$set(xDe);const mx={};_&2&&(mx.$$scope={dirty:_,ctx:c}),Wy.$set(mx);const $De={};_&2&&($De.$$scope={dirty:_,ctx:c}),a9.$set($De);const kDe={};_&2&&(kDe.$$scope={dirty:_,ctx:c}),s9.$set(kDe);const cx={};_&2&&(cx.$$scope={dirty:_,ctx:c}),u9.$set(cx);const SDe={};_&2&&(SDe.$$scope={dirty:_,ctx:c}),_9.$set(SDe);const RDe={};_&2&&(RDe.$$scope={dirty:_,ctx:c}),A9.$set(RDe);const fx={};_&2&&(fx.$$scope={dirty:_,ctx:c}),y9.$set(fx);const PDe={};_&2&&(PDe.$$scope={dirty:_,ctx:c}),$9.$set(PDe);const BDe={};_&2&&(BDe.$$scope={dirty:_,ctx:c}),S9.$set(BDe);const gx={};_&2&&(gx.$$scope={dirty:_,ctx:c}),B9.$set(gx);const IDe={};_&2&&(IDe.$$scope={dirty:_,ctx:c}),N9.$set(IDe);const NDe={};_&2&&(NDe.$$scope={dirty:_,ctx:c}),j9.$set(NDe)},i(c){qmo||(E(m.$$.fragment,c),E(ln.$$.fragment,c),E(Ak.$$.fragment,c),E(Lk.$$.fragment,c),E(sg.$$.fragment,c),E(yk.$$.fragment,c),E(xk.$$.fragment,c),E(Sk.$$.fragment,c),E(Du.$$.fragment,c),E(Rk.$$.fragment,c),E(Pk.$$.fragment,c),E(Bk.$$.fragment,c),E(qk.$$.fragment,c),E(Lp.$$.fragment,c),E(jk.$$.fragment,c),E(Dk.$$.fragment,c),E(Gk.$$.fragment,c),E(Xk.$$.fragment,c),E(M_.$$.fragment,c),E(E_.$$.fragment,c),E(zk.$$.fragment,c),E(Qk.$$.fragment,c),E(Wk.$$.fragment,c),E(Jk.$$.fragment,c),E(r1.$$.fragment,c),E(t1.$$.fragment,c),E(Yk.$$.fragment,c),E(Zk.$$.fragment,c),E(Kk.$$.fragment,c),E(rS.$$.fragment,c),E(x1.$$.fragment,c),E($1.$$.fragment,c),E(tS.$$.fragment,c),E(aS.$$.fragment,c),E(nS.$$.fragment,c),E(lS.$$.fragment,c),E(R1.$$.fragment,c),E(iS.$$.fragment,c),E(sv.$$.fragment,c),E(dS.$$.fragment,c),E(mS.$$.fragment,c),E(fS.$$.fragment,c),E(iv.$$.fragment,c),E(gS.$$.fragment,c),E(sF.$$.fragment,c),E(hS.$$.fragment,c),E(uS.$$.fragment,c),E(_S.$$.fragment,c),E(iF.$$.fragment,c),E(bS.$$.fragment,c),E(KF.$$.fragment,c),E(vS.$$.fragment,c),E(FS.$$.fragment,c),E(MS.$$.fragment,c),E(oT.$$.fragment,c),E(ES.$$.fragment,c),E(nT.$$.fragment,c),E(wS.$$.fragment,c),E(AS.$$.fragment,c),E(yS.$$.fragment,c),E(lT.$$.fragment,c),E(xS.$$.fragment,c),E(HT.$$.fragment,c),E($S.$$.fragment,c),E(kS.$$.fragment,c),E(RS.$$.fragment,c),E(YT.$$.fragment,c),E(PS.$$.fragment,c),E(FM.$$.fragment,c),E(BS.$$.fragment,c),E(IS.$$.fragment,c),E(qS.$$.fragment,c),E(MM.$$.fragment,c),E(jS.$$.fragment,c),E(LE.$$.fragment,c),E(DS.$$.fragment,c),E(GS.$$.fragment,c),E(VS.$$.fragment,c),E(xE.$$.fragment,c),E(XS.$$.fragment,c),E(m4.$$.fragment,c),E(zS.$$.fragment,c),E(QS.$$.fragment,c),E(US.$$.fragment,c),E(f4.$$.fragment,c),E(HS.$$.fragment,c),E(T4.$$.fragment,c),E(JS.$$.fragment,c),E(YS.$$.fragment,c),E(KS.$$.fragment,c),E(E4.$$.fragment,c),E(eR.$$.fragment,c),E(gC.$$.fragment,c),E(oR.$$.fragment,c),E(rR.$$.fragment,c),E(aR.$$.fragment,c),E(uC.$$.fragment,c),E(nR.$$.fragment,c),E(f3.$$.fragment,c),E(sR.$$.fragment,c),E(lR.$$.fragment,c),E(dR.$$.fragment,c),E(h3.$$.fragment,c),E(mR.$$.fragment,c),E(_3.$$.fragment,c),E(cR.$$.fragment,c),E(fR.$$.fragment,c),E(hR.$$.fragment,c),E(v3.$$.fragment,c),E(uR.$$.fragment,c),E(C3.$$.fragment,c),E(pR.$$.fragment,c),E(_R.$$.fragment,c),E(vR.$$.fragment,c),E(A3.$$.fragment,c),E(FR.$$.fragment,c),E(X3.$$.fragment,c),E(TR.$$.fragment,c),E(MR.$$.fragment,c),E(CR.$$.fragment,c),E(Q3.$$.fragment,c),E(wR.$$.fragment,c),E(H3.$$.fragment,c),E(AR.$$.fragment,c),E(LR.$$.fragment,c),E(xR.$$.fragment,c),E(Y3.$$.fragment,c),E($R.$$.fragment,c),E(e5.$$.fragment,c),E(kR.$$.fragment,c),E(SR.$$.fragment,c),E(PR.$$.fragment,c),E(r5.$$.fragment,c),E(BR.$$.fragment,c),E(n5.$$.fragment,c),E(IR.$$.fragment,c),E(NR.$$.fragment,c),E(jR.$$.fragment,c),E(l5.$$.fragment,c),E(DR.$$.fragment,c),E(b5.$$.fragment,c),E(GR.$$.fragment,c),E(OR.$$.fragment,c),E(XR.$$.fragment,c),E(F5.$$.fragment,c),E(zR.$$.fragment,c),E(L5.$$.fragment,c),E(QR.$$.fragment,c),E(WR.$$.fragment,c),E(HR.$$.fragment,c),E(x5.$$.fragment,c),E(JR.$$.fragment,c),E(G5.$$.fragment,c),E(YR.$$.fragment,c),E(ZR.$$.fragment,c),E(eP.$$.fragment,c),E(V5.$$.fragment,c),E(oP.$$.fragment,c),E(U5.$$.fragment,c),E(rP.$$.fragment,c),E(tP.$$.fragment,c),E(nP.$$.fragment,c),E(J5.$$.fragment,c),E(sP.$$.fragment,c),E(t0.$$.fragment,c),E(lP.$$.fragment,c),E(iP.$$.fragment,c),E(mP.$$.fragment,c),E(n0.$$.fragment,c),E(cP.$$.fragment,c),E(c0.$$.fragment,c),E(fP.$$.fragment,c),E(gP.$$.fragment,c),E(uP.$$.fragment,c),E(g0.$$.fragment,c),E(pP.$$.fragment,c),E(F0.$$.fragment,c),E(_P.$$.fragment,c),E(bP.$$.fragment,c),E(FP.$$.fragment,c),E(M0.$$.fragment,c),E(TP.$$.fragment,c),E(w0.$$.fragment,c),E(MP.$$.fragment,c),E(EP.$$.fragment,c),E(wP.$$.fragment,c),E(L0.$$.fragment,c),E(AP.$$.fragment,c),E(B0.$$.fragment,c),E(LP.$$.fragment,c),E(yP.$$.fragment,c),E($P.$$.fragment,c),E(N0.$$.fragment,c),E(kP.$$.fragment,c),E(D0.$$.fragment,c),E(SP.$$.fragment,c),E(RP.$$.fragment,c),E(BP.$$.fragment,c),E(O0.$$.fragment,c),E(IP.$$.fragment,c),E(z0.$$.fragment,c),E(NP.$$.fragment,c),E(qP.$$.fragment,c),E(DP.$$.fragment,c),E(W0.$$.fragment,c),E(GP.$$.fragment,c),E(Yw.$$.fragment,c),E(OP.$$.fragment,c),E(VP.$$.fragment,c),E(zP.$$.fragment,c),E(Kw.$$.fragment,c),E(QP.$$.fragment,c),E(EA.$$.fragment,c),E(WP.$$.fragment,c),E(UP.$$.fragment,c),E(JP.$$.fragment,c),E(wA.$$.fragment,c),E(YP.$$.fragment,c),E(DA.$$.fragment,c),E(ZP.$$.fragment,c),E(KP.$$.fragment,c),E(oB.$$.fragment,c),E(OA.$$.fragment,c),E(rB.$$.fragment,c),E(ZA.$$.fragment,c),E(tB.$$.fragment,c),E(aB.$$.fragment,c),E(sB.$$.fragment,c),E(e6.$$.fragment,c),E(lB.$$.fragment,c),E(a6.$$.fragment,c),E(iB.$$.fragment,c),E(dB.$$.fragment,c),E(cB.$$.fragment,c),E(s6.$$.fragment,c),E(fB.$$.fragment,c),E(y6.$$.fragment,c),E(gB.$$.fragment,c),E(hB.$$.fragment,c),E(pB.$$.fragment,c),E($6.$$.fragment,c),E(_B.$$.fragment,c),E(G6.$$.fragment,c),E(bB.$$.fragment,c),E(vB.$$.fragment,c),E(TB.$$.fragment,c),E(V6.$$.fragment,c),E(MB.$$.fragment,c),E(b7.$$.fragment,c),E(EB.$$.fragment,c),E(CB.$$.fragment,c),E(AB.$$.fragment,c),E(F7.$$.fragment,c),E(LB.$$.fragment,c),E(q7.$$.fragment,c),E(yB.$$.fragment,c),E(xB.$$.fragment,c),E(kB.$$.fragment,c),E(D7.$$.fragment,c),E(SB.$$.fragment,c),E(V7.$$.fragment,c),E(PB.$$.fragment,c),E(BB.$$.fragment,c),E(NB.$$.fragment,c),E(z7.$$.fragment,c),E(qB.$$.fragment,c),E(W7.$$.fragment,c),E(jB.$$.fragment,c),E(DB.$$.fragment,c),E(OB.$$.fragment,c),E(H7.$$.fragment,c),E(VB.$$.fragment,c),E(Y7.$$.fragment,c),E(XB.$$.fragment,c),E(zB.$$.fragment,c),E(WB.$$.fragment,c),E(K7.$$.fragment,c),E(UB.$$.fragment,c),E(M8.$$.fragment,c),E(HB.$$.fragment,c),E(JB.$$.fragment,c),E(ZB.$$.fragment,c),E(C8.$$.fragment,c),E(KB.$$.fragment,c),E(Q8.$$.fragment,c),E(eI.$$.fragment,c),E(oI.$$.fragment,c),E(tI.$$.fragment,c),E(U8.$$.fragment,c),E(aI.$$.fragment,c),E(J8.$$.fragment,c),E(nI.$$.fragment,c),E(sI.$$.fragment,c),E(iI.$$.fragment,c),E(Z8.$$.fragment,c),E(dI.$$.fragment,c),E(oL.$$.fragment,c),E(cI.$$.fragment,c),E(fI.$$.fragment,c),E(hI.$$.fragment,c),E(tL.$$.fragment,c),E(uI.$$.fragment,c),E(kL.$$.fragment,c),E(pI.$$.fragment,c),E(_I.$$.fragment,c),E(vI.$$.fragment,c),E(RL.$$.fragment,c),E(FI.$$.fragment,c),E(XL.$$.fragment,c),E(TI.$$.fragment,c),E(MI.$$.fragment,c),E(CI.$$.fragment,c),E(QL.$$.fragment,c),E(wI.$$.fragment,c),E(sy.$$.fragment,c),E(AI.$$.fragment,c),E(LI.$$.fragment,c),E(xI.$$.fragment,c),E(iy.$$.fragment,c),E($I.$$.fragment,c),E(vy.$$.fragment,c),E(kI.$$.fragment,c),E(SI.$$.fragment,c),E(PI.$$.fragment,c),E(Ty.$$.fragment,c),E(BI.$$.fragment,c),E(Sy.$$.fragment,c),E(II.$$.fragment,c),E(NI.$$.fragment,c),E(jI.$$.fragment,c),E(Py.$$.fragment,c),E(DI.$$.fragment,c),E(zy.$$.fragment,c),E(GI.$$.fragment,c),E(OI.$$.fragment,c),E(XI.$$.fragment,c),E(Wy.$$.fragment,c),E(zI.$$.fragment,c),E(a9.$$.fragment,c),E(QI.$$.fragment,c),E(WI.$$.fragment,c),E(HI.$$.fragment,c),E(s9.$$.fragment,c),E(JI.$$.fragment,c),E(u9.$$.fragment,c),E(YI.$$.fragment,c),E(ZI.$$.fragment,c),E(eN.$$.fragment,c),E(_9.$$.fragment,c),E(oN.$$.fragment,c),E(A9.$$.fragment,c),E(rN.$$.fragment,c),E(tN.$$.fragment,c),E(nN.$$.fragment,c),E(y9.$$.fragment,c),E(sN.$$.fragment,c),E($9.$$.fragment,c),E(lN.$$.fragment,c),E(iN.$$.fragment,c),E(mN.$$.fragment,c),E(S9.$$.fragment,c),E(cN.$$.fragment,c),E(B9.$$.fragment,c),E(gN.$$.fragment,c),E(hN.$$.fragment,c),E(pN.$$.fragment,c),E(N9.$$.fragment,c),E(_N.$$.fragment,c),E(j9.$$.fragment,c),qmo=!0)},o(c){C(m.$$.fragment,c),C(ln.$$.fragment,c),C(Ak.$$.fragment,c),C(Lk.$$.fragment,c),C(sg.$$.fragment,c),C(yk.$$.fragment,c),C(xk.$$.fragment,c),C(Sk.$$.fragment,c),C(Du.$$.fragment,c),C(Rk.$$.fragment,c),C(Pk.$$.fragment,c),C(Bk.$$.fragment,c),C(qk.$$.fragment,c),C(Lp.$$.fragment,c),C(jk.$$.fragment,c),C(Dk.$$.fragment,c),C(Gk.$$.fragment,c),C(Xk.$$.fragment,c),C(M_.$$.fragment,c),C(E_.$$.fragment,c),C(zk.$$.fragment,c),C(Qk.$$.fragment,c),C(Wk.$$.fragment,c),C(Jk.$$.fragment,c),C(r1.$$.fragment,c),C(t1.$$.fragment,c),C(Yk.$$.fragment,c),C(Zk.$$.fragment,c),C(Kk.$$.fragment,c),C(rS.$$.fragment,c),C(x1.$$.fragment,c),C($1.$$.fragment,c),C(tS.$$.fragment,c),C(aS.$$.fragment,c),C(nS.$$.fragment,c),C(lS.$$.fragment,c),C(R1.$$.fragment,c),C(iS.$$.fragment,c),C(sv.$$.fragment,c),C(dS.$$.fragment,c),C(mS.$$.fragment,c),C(fS.$$.fragment,c),C(iv.$$.fragment,c),C(gS.$$.fragment,c),C(sF.$$.fragment,c),C(hS.$$.fragment,c),C(uS.$$.fragment,c),C(_S.$$.fragment,c),C(iF.$$.fragment,c),C(bS.$$.fragment,c),C(KF.$$.fragment,c),C(vS.$$.fragment,c),C(FS.$$.fragment,c),C(MS.$$.fragment,c),C(oT.$$.fragment,c),C(ES.$$.fragment,c),C(nT.$$.fragment,c),C(wS.$$.fragment,c),C(AS.$$.fragment,c),C(yS.$$.fragment,c),C(lT.$$.fragment,c),C(xS.$$.fragment,c),C(HT.$$.fragment,c),C($S.$$.fragment,c),C(kS.$$.fragment,c),C(RS.$$.fragment,c),C(YT.$$.fragment,c),C(PS.$$.fragment,c),C(FM.$$.fragment,c),C(BS.$$.fragment,c),C(IS.$$.fragment,c),C(qS.$$.fragment,c),C(MM.$$.fragment,c),C(jS.$$.fragment,c),C(LE.$$.fragment,c),C(DS.$$.fragment,c),C(GS.$$.fragment,c),C(VS.$$.fragment,c),C(xE.$$.fragment,c),C(XS.$$.fragment,c),C(m4.$$.fragment,c),C(zS.$$.fragment,c),C(QS.$$.fragment,c),C(US.$$.fragment,c),C(f4.$$.fragment,c),C(HS.$$.fragment,c),C(T4.$$.fragment,c),C(JS.$$.fragment,c),C(YS.$$.fragment,c),C(KS.$$.fragment,c),C(E4.$$.fragment,c),C(eR.$$.fragment,c),C(gC.$$.fragment,c),C(oR.$$.fragment,c),C(rR.$$.fragment,c),C(aR.$$.fragment,c),C(uC.$$.fragment,c),C(nR.$$.fragment,c),C(f3.$$.fragment,c),C(sR.$$.fragment,c),C(lR.$$.fragment,c),C(dR.$$.fragment,c),C(h3.$$.fragment,c),C(mR.$$.fragment,c),C(_3.$$.fragment,c),C(cR.$$.fragment,c),C(fR.$$.fragment,c),C(hR.$$.fragment,c),C(v3.$$.fragment,c),C(uR.$$.fragment,c),C(C3.$$.fragment,c),C(pR.$$.fragment,c),C(_R.$$.fragment,c),C(vR.$$.fragment,c),C(A3.$$.fragment,c),C(FR.$$.fragment,c),C(X3.$$.fragment,c),C(TR.$$.fragment,c),C(MR.$$.fragment,c),C(CR.$$.fragment,c),C(Q3.$$.fragment,c),C(wR.$$.fragment,c),C(H3.$$.fragment,c),C(AR.$$.fragment,c),C(LR.$$.fragment,c),C(xR.$$.fragment,c),C(Y3.$$.fragment,c),C($R.$$.fragment,c),C(e5.$$.fragment,c),C(kR.$$.fragment,c),C(SR.$$.fragment,c),C(PR.$$.fragment,c),C(r5.$$.fragment,c),C(BR.$$.fragment,c),C(n5.$$.fragment,c),C(IR.$$.fragment,c),C(NR.$$.fragment,c),C(jR.$$.fragment,c),C(l5.$$.fragment,c),C(DR.$$.fragment,c),C(b5.$$.fragment,c),C(GR.$$.fragment,c),C(OR.$$.fragment,c),C(XR.$$.fragment,c),C(F5.$$.fragment,c),C(zR.$$.fragment,c),C(L5.$$.fragment,c),C(QR.$$.fragment,c),C(WR.$$.fragment,c),C(HR.$$.fragment,c),C(x5.$$.fragment,c),C(JR.$$.fragment,c),C(G5.$$.fragment,c),C(YR.$$.fragment,c),C(ZR.$$.fragment,c),C(eP.$$.fragment,c),C(V5.$$.fragment,c),C(oP.$$.fragment,c),C(U5.$$.fragment,c),C(rP.$$.fragment,c),C(tP.$$.fragment,c),C(nP.$$.fragment,c),C(J5.$$.fragment,c),C(sP.$$.fragment,c),C(t0.$$.fragment,c),C(lP.$$.fragment,c),C(iP.$$.fragment,c),C(mP.$$.fragment,c),C(n0.$$.fragment,c),C(cP.$$.fragment,c),C(c0.$$.fragment,c),C(fP.$$.fragment,c),C(gP.$$.fragment,c),C(uP.$$.fragment,c),C(g0.$$.fragment,c),C(pP.$$.fragment,c),C(F0.$$.fragment,c),C(_P.$$.fragment,c),C(bP.$$.fragment,c),C(FP.$$.fragment,c),C(M0.$$.fragment,c),C(TP.$$.fragment,c),C(w0.$$.fragment,c),C(MP.$$.fragment,c),C(EP.$$.fragment,c),C(wP.$$.fragment,c),C(L0.$$.fragment,c),C(AP.$$.fragment,c),C(B0.$$.fragment,c),C(LP.$$.fragment,c),C(yP.$$.fragment,c),C($P.$$.fragment,c),C(N0.$$.fragment,c),C(kP.$$.fragment,c),C(D0.$$.fragment,c),C(SP.$$.fragment,c),C(RP.$$.fragment,c),C(BP.$$.fragment,c),C(O0.$$.fragment,c),C(IP.$$.fragment,c),C(z0.$$.fragment,c),C(NP.$$.fragment,c),C(qP.$$.fragment,c),C(DP.$$.fragment,c),C(W0.$$.fragment,c),C(GP.$$.fragment,c),C(Yw.$$.fragment,c),C(OP.$$.fragment,c),C(VP.$$.fragment,c),C(zP.$$.fragment,c),C(Kw.$$.fragment,c),C(QP.$$.fragment,c),C(EA.$$.fragment,c),C(WP.$$.fragment,c),C(UP.$$.fragment,c),C(JP.$$.fragment,c),C(wA.$$.fragment,c),C(YP.$$.fragment,c),C(DA.$$.fragment,c),C(ZP.$$.fragment,c),C(KP.$$.fragment,c),C(oB.$$.fragment,c),C(OA.$$.fragment,c),C(rB.$$.fragment,c),C(ZA.$$.fragment,c),C(tB.$$.fragment,c),C(aB.$$.fragment,c),C(sB.$$.fragment,c),C(e6.$$.fragment,c),C(lB.$$.fragment,c),C(a6.$$.fragment,c),C(iB.$$.fragment,c),C(dB.$$.fragment,c),C(cB.$$.fragment,c),C(s6.$$.fragment,c),C(fB.$$.fragment,c),C(y6.$$.fragment,c),C(gB.$$.fragment,c),C(hB.$$.fragment,c),C(pB.$$.fragment,c),C($6.$$.fragment,c),C(_B.$$.fragment,c),C(G6.$$.fragment,c),C(bB.$$.fragment,c),C(vB.$$.fragment,c),C(TB.$$.fragment,c),C(V6.$$.fragment,c),C(MB.$$.fragment,c),C(b7.$$.fragment,c),C(EB.$$.fragment,c),C(CB.$$.fragment,c),C(AB.$$.fragment,c),C(F7.$$.fragment,c),C(LB.$$.fragment,c),C(q7.$$.fragment,c),C(yB.$$.fragment,c),C(xB.$$.fragment,c),C(kB.$$.fragment,c),C(D7.$$.fragment,c),C(SB.$$.fragment,c),C(V7.$$.fragment,c),C(PB.$$.fragment,c),C(BB.$$.fragment,c),C(NB.$$.fragment,c),C(z7.$$.fragment,c),C(qB.$$.fragment,c),C(W7.$$.fragment,c),C(jB.$$.fragment,c),C(DB.$$.fragment,c),C(OB.$$.fragment,c),C(H7.$$.fragment,c),C(VB.$$.fragment,c),C(Y7.$$.fragment,c),C(XB.$$.fragment,c),C(zB.$$.fragment,c),C(WB.$$.fragment,c),C(K7.$$.fragment,c),C(UB.$$.fragment,c),C(M8.$$.fragment,c),C(HB.$$.fragment,c),C(JB.$$.fragment,c),C(ZB.$$.fragment,c),C(C8.$$.fragment,c),C(KB.$$.fragment,c),C(Q8.$$.fragment,c),C(eI.$$.fragment,c),C(oI.$$.fragment,c),C(tI.$$.fragment,c),C(U8.$$.fragment,c),C(aI.$$.fragment,c),C(J8.$$.fragment,c),C(nI.$$.fragment,c),C(sI.$$.fragment,c),C(iI.$$.fragment,c),C(Z8.$$.fragment,c),C(dI.$$.fragment,c),C(oL.$$.fragment,c),C(cI.$$.fragment,c),C(fI.$$.fragment,c),C(hI.$$.fragment,c),C(tL.$$.fragment,c),C(uI.$$.fragment,c),C(kL.$$.fragment,c),C(pI.$$.fragment,c),C(_I.$$.fragment,c),C(vI.$$.fragment,c),C(RL.$$.fragment,c),C(FI.$$.fragment,c),C(XL.$$.fragment,c),C(TI.$$.fragment,c),C(MI.$$.fragment,c),C(CI.$$.fragment,c),C(QL.$$.fragment,c),C(wI.$$.fragment,c),C(sy.$$.fragment,c),C(AI.$$.fragment,c),C(LI.$$.fragment,c),C(xI.$$.fragment,c),C(iy.$$.fragment,c),C($I.$$.fragment,c),C(vy.$$.fragment,c),C(kI.$$.fragment,c),C(SI.$$.fragment,c),C(PI.$$.fragment,c),C(Ty.$$.fragment,c),C(BI.$$.fragment,c),C(Sy.$$.fragment,c),C(II.$$.fragment,c),C(NI.$$.fragment,c),C(jI.$$.fragment,c),C(Py.$$.fragment,c),C(DI.$$.fragment,c),C(zy.$$.fragment,c),C(GI.$$.fragment,c),C(OI.$$.fragment,c),C(XI.$$.fragment,c),C(Wy.$$.fragment,c),C(zI.$$.fragment,c),C(a9.$$.fragment,c),C(QI.$$.fragment,c),C(WI.$$.fragment,c),C(HI.$$.fragment,c),C(s9.$$.fragment,c),C(JI.$$.fragment,c),C(u9.$$.fragment,c),C(YI.$$.fragment,c),C(ZI.$$.fragment,c),C(eN.$$.fragment,c),C(_9.$$.fragment,c),C(oN.$$.fragment,c),C(A9.$$.fragment,c),C(rN.$$.fragment,c),C(tN.$$.fragment,c),C(nN.$$.fragment,c),C(y9.$$.fragment,c),C(sN.$$.fragment,c),C($9.$$.fragment,c),C(lN.$$.fragment,c),C(iN.$$.fragment,c),C(mN.$$.fragment,c),C(S9.$$.fragment,c),C(cN.$$.fragment,c),C(B9.$$.fragment,c),C(gN.$$.fragment,c),C(hN.$$.fragment,c),C(pN.$$.fragment,c),C(N9.$$.fragment,c),C(_N.$$.fragment,c),C(j9.$$.fragment,c),qmo=!1},d(c){t(g),c&&t(v),c&&t(u),w(m),c&&t(og),c&&t(wt),c&&t(Qe),c&&t(Ze),c&&t(tg),w(ln,c),c&&t(Ke),c&&t(ye),c&&t(Po),c&&t(dn),c&&t(vio),c&&t(Pd),w(Ak),c&&t(Fio),c&&t(Ts),c&&t(Tio),w(Lk,c),c&&t(Mio),c&&t(Zq),c&&t(Eio),w(sg,c),c&&t(Cio),c&&t(Bd),w(yk),c&&t(wio),c&&t(Bo),w(xk),w(Sk),w(Du),w(Rk),c&&t(Aio),c&&t(Nd),w(Pk),c&&t(Lio),c&&t(Io),w(Bk),w(qk),w(Lp),w(jk),c&&t(yio),c&&t(qd),w(Dk),c&&t(xio),c&&t(No),w(Gk),w(Xk),w(M_),w(E_),w(zk),c&&t($io),c&&t(jd),w(Qk),c&&t(kio),c&&t(qo),w(Wk),w(Jk),w(r1),w(t1),w(Yk),c&&t(Sio),c&&t(Dd),w(Zk),c&&t(Rio),c&&t(jo),w(Kk),w(rS),w(x1),w($1),w(tS),c&&t(Pio),c&&t(Od),w(aS),c&&t(Bio),c&&t(Do),w(nS),w(lS),w(R1),w(iS),w(sv),c&&t(Iio),c&&t(zd),w(dS),c&&t(Nio),c&&t(Go),w(mS),w(fS),w(iv),w(gS),w(sF),c&&t(qio),c&&t(Ud),w(hS),c&&t(jio),c&&t(Oo),w(uS),w(_S),w(iF),w(bS),w(KF),c&&t(Dio),c&&t(Yd),w(vS),c&&t(Gio),c&&t(Vo),w(FS),w(MS),w(oT),w(ES),w(nT),c&&t(Oio),c&&t(em),w(wS),c&&t(Vio),c&&t(Xo),w(AS),w(yS),w(lT),w(xS),w(HT),c&&t(Xio),c&&t(tm),w($S),c&&t(zio),c&&t(zo),w(kS),w(RS),w(YT),w(PS),w(FM),c&&t(Qio),c&&t(sm),w(BS),c&&t(Wio),c&&t(Qo),w(IS),w(qS),w(MM),w(jS),w(LE),c&&t(Uio),c&&t(dm),w(DS),c&&t(Hio),c&&t(Wo),w(GS),w(VS),w(xE),w(XS),w(m4),c&&t(Jio),c&&t(fm),w(zS),c&&t(Yio),c&&t(Uo),w(QS),w(US),w(f4),w(HS),w(T4),c&&t(Zio),c&&t(um),w(JS),c&&t(Kio),c&&t(Ho),w(YS),w(KS),w(E4),w(eR),w(gC),c&&t(edo),c&&t(bm),w(oR),c&&t(odo),c&&t(Jo),w(rR),w(aR),w(uC),w(nR),w(f3),c&&t(rdo),c&&t(Tm),w(sR),c&&t(tdo),c&&t(Yo),w(lR),w(dR),w(h3),w(mR),w(_3),c&&t(ado),c&&t(Cm),w(cR),c&&t(ndo),c&&t(Zo),w(fR),w(hR),w(v3),w(uR),w(C3),c&&t(sdo),c&&t(ym),w(pR),c&&t(ldo),c&&t(Ko),w(_R),w(vR),w(A3),w(FR),w(X3),c&&t(ido),c&&t(km),w(TR),c&&t(ddo),c&&t(er),w(MR),w(CR),w(Q3),w(wR),w(H3),c&&t(mdo),c&&t(Pm),w(AR),c&&t(cdo),c&&t(or),w(LR),w(xR),w(Y3),w($R),w(e5),c&&t(fdo),c&&t(Nm),w(kR),c&&t(gdo),c&&t(rr),w(SR),w(PR),w(r5),w(BR),w(n5),c&&t(hdo),c&&t(Dm),w(IR),c&&t(udo),c&&t(tr),w(NR),w(jR),w(l5),w(DR),w(b5),c&&t(pdo),c&&t(Vm),w(GR),c&&t(_do),c&&t(ar),w(OR),w(XR),w(F5),w(zR),w(L5),c&&t(bdo),c&&t(Qm),w(QR),c&&t(vdo),c&&t(nr),w(WR),w(HR),w(x5),w(JR),w(G5),c&&t(Fdo),c&&t(Hm),w(YR),c&&t(Tdo),c&&t(sr),w(ZR),w(eP),w(V5),w(oP),w(U5),c&&t(Mdo),c&&t(Km),w(rP),c&&t(Edo),c&&t(lr),w(tP),w(nP),w(J5),w(sP),w(t0),c&&t(Cdo),c&&t(rc),w(lP),c&&t(wdo),c&&t(ir),w(iP),w(mP),w(n0),w(cP),w(c0),c&&t(Ado),c&&t(nc),w(fP),c&&t(Ldo),c&&t(dr),w(gP),w(uP),w(g0),w(pP),w(F0),c&&t(ydo),c&&t(ic),w(_P),c&&t(xdo),c&&t(mr),w(bP),w(FP),w(M0),w(TP),w(w0),c&&t($do),c&&t(cc),w(MP),c&&t(kdo),c&&t(cr),w(EP),w(wP),w(L0),w(AP),w(B0),c&&t(Sdo),c&&t(hc),w(LP),c&&t(Rdo),c&&t(gr),w(yP),w($P),w(N0),w(kP),w(D0),c&&t(Pdo),c&&t(_c),w(SP),c&&t(Bdo),c&&t(hr),w(RP),w(BP),w(O0),w(IP),w(z0),c&&t(Ido),c&&t(Fc),w(NP),c&&t(Ndo),c&&t(ur),w(qP),w(DP),w(W0),w(GP),w(Yw),c&&t(qdo),c&&t(Ec),w(OP),c&&t(jdo),c&&t(pr),w(VP),w(zP),w(Kw),w(QP),w(EA),c&&t(Ddo),c&&t(Ac),w(WP),c&&t(Gdo),c&&t(_r),w(UP),w(JP),w(wA),w(YP),w(DA),c&&t(Odo),c&&t(xc),w(ZP),c&&t(Vdo),c&&t(br),w(KP),w(oB),w(OA),w(rB),w(ZA),c&&t(Xdo),c&&t(Sc),w(tB),c&&t(zdo),c&&t(vr),w(aB),w(sB),w(e6),w(lB),w(a6),c&&t(Qdo),c&&t(Ic),w(iB),c&&t(Wdo),c&&t(Fr),w(dB),w(cB),w(s6),w(fB),w(y6),c&&t(Udo),c&&t(jc),w(gB),c&&t(Hdo),c&&t(Tr),w(hB),w(pB),w($6),w(_B),w(G6),c&&t(Jdo),c&&t(Oc),w(bB),c&&t(Ydo),c&&t(Mr),w(vB),w(TB),w(V6),w(MB),w(b7),c&&t(Zdo),c&&t(zc),w(EB),c&&t(Kdo),c&&t(Er),w(CB),w(AB),w(F7),w(LB),w(q7),c&&t(emo),c&&t(Uc),w(yB),c&&t(omo),c&&t(Cr),w(xB),w(kB),w(D7),w(SB),w(V7),c&&t(rmo),c&&t(Yc),w(PB),c&&t(tmo),c&&t(wr),w(BB),w(NB),w(z7),w(qB),w(W7),c&&t(amo),c&&t(ef),w(jB),c&&t(nmo),c&&t(Ar),w(DB),w(OB),w(H7),w(VB),w(Y7),c&&t(smo),c&&t(tf),w(XB),c&&t(lmo),c&&t(Lr),w(zB),w(WB),w(K7),w(UB),w(M8),c&&t(imo),c&&t(sf),w(HB),c&&t(dmo),c&&t(yr),w(JB),w(ZB),w(C8),w(KB),w(Q8),c&&t(mmo),c&&t(mf),w(eI),c&&t(cmo),c&&t(xr),w(oI),w(tI),w(U8),w(aI),w(J8),c&&t(fmo),c&&t(gf),w(nI),c&&t(gmo),c&&t($r),w(sI),w(iI),w(Z8),w(dI),w(oL),c&&t(hmo),c&&t(pf),w(cI),c&&t(umo),c&&t(kr),w(fI),w(hI),w(tL),w(uI),w(kL),c&&t(pmo),c&&t(vf),w(pI),c&&t(_mo),c&&t(Sr),w(_I),w(vI),w(RL),w(FI),w(XL),c&&t(bmo),c&&t(Mf),w(TI),c&&t(vmo),c&&t(Rr),w(MI),w(CI),w(QL),w(wI),w(sy),c&&t(Fmo),c&&t(wf),w(AI),c&&t(Tmo),c&&t(Pr),w(LI),w(xI),w(iy),w($I),w(vy),c&&t(Mmo),c&&t(yf),w(kI),c&&t(Emo),c&&t(Br),w(SI),w(PI),w(Ty),w(BI),w(Sy),c&&t(Cmo),c&&t(kf),w(II),c&&t(wmo),c&&t(Ir),w(NI),w(jI),w(Py),w(DI),w(zy),c&&t(Amo),c&&t(Pf),w(GI),c&&t(Lmo),c&&t(Nr),w(OI),w(XI),w(Wy),w(zI),w(a9),c&&t(ymo),c&&t(Nf),w(QI),c&&t(xmo),c&&t(qr),w(WI),w(HI),w(s9),w(JI),w(u9),c&&t($mo),c&&t(Df),w(YI),c&&t(kmo),c&&t(jr),w(ZI),w(eN),w(_9),w(oN),w(A9),c&&t(Smo),c&&t(Vf),w(rN),c&&t(Rmo),c&&t(Dr),w(tN),w(nN),w(y9),w(sN),w($9),c&&t(Pmo),c&&t(Qf),w(lN),c&&t(Bmo),c&&t(Gr),w(iN),w(mN),w(S9),w(cN),w(B9),c&&t(Imo),c&&t(Hf),w(gN),c&&t(Nmo),c&&t(Or),w(hN),w(pN),w(N9),w(_N),w(j9)}}}const rPa={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoImageProcessor",title:"AutoImageProcessor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForDepthEstimation",title:"AutoModelForDepthEstimation"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.AutoModelForZeroShotObjectDetection",title:"AutoModelForZeroShotObjectDetection"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForDocumentQuestionAnswering",title:"TFAutoModelForDocumentQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function tPa($){return Gka(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class mPa extends Nka{constructor(g){super();qka(this,g,tPa,oPa,jka,{})}}export{mPa as default,rPa as metadata};
