import{S as Uka,i as Hka,s as Jka,e as a,k as l,w as F,t as o,M as Yka,c as n,d as t,m as i,a as s,x as T,h as r,b as d,G as e,g as b,y as M,q as E,o as C,B as w,v as Zka,L as q}from"../../chunks/vendor-hf-doc-builder.js";import{T as hgo}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as B}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Kka($){let g,v,u,f,p,m,h,He,Ld,og,wt,yd,xd,Ek,rg,Qe,Ze,$d,_s,Ck,bs,vs,wk,kd,Fs,Ak,Sd,tg,ln;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),m=a("code"),h=o("~transformer.PretrainedConfig"),He=o(`, make sure its
`),Ld=a("code"),og=o("model_type"),wt=o(" attribute is set to the same key you use when registering the config (here "),yd=a("code"),xd=o('"new-model"'),Ek=o(")."),rg=l(),Qe=a("p"),Ze=o("Likewise, if your "),$d=a("code"),_s=o("NewModel"),Ck=o(" is a subclass of "),bs=a("a"),vs=o("PreTrainedModel"),wk=o(`, make sure its
`),kd=a("code"),Fs=o("config_class"),Ak=o(` attribute is set to the same class you use when registering the model (here
`),Sd=a("code"),tg=o("NewModelConfig"),ln=o(")."),this.h()},l(Ke){g=n(Ke,"P",{});var ye=s(g);v=r(ye,"If your "),u=n(ye,"CODE",{});var Uq=s(u);f=r(Uq,"NewModelConfig"),Uq.forEach(t),p=r(ye," is a subclass of "),m=n(ye,"CODE",{});var Rd=s(m);h=r(Rd,"~transformer.PretrainedConfig"),Rd.forEach(t),He=r(ye,`, make sure its
`),Ld=n(ye,"CODE",{});var Hq=s(Ld);og=r(Hq,"model_type"),Hq.forEach(t),wt=r(ye," attribute is set to the same key you use when registering the config (here "),yd=n(ye,"CODE",{});var Jq=s(yd);xd=r(Jq,'"new-model"'),Jq.forEach(t),Ek=r(ye,")."),ye.forEach(t),rg=i(Ke),Qe=n(Ke,"P",{});var Po=s(Qe);Ze=r(Po,"Likewise, if your "),$d=n(Po,"CODE",{});var dn=s($d);_s=r(dn,"NewModel"),dn.forEach(t),Ck=r(Po," is a subclass of "),bs=n(Po,"A",{href:!0});var Yq=s(bs);vs=r(Yq,"PreTrainedModel"),Yq.forEach(t),wk=r(Po,`, make sure its
`),kd=n(Po,"CODE",{});var ag=s(kd);Fs=r(ag,"config_class"),ag.forEach(t),Ak=r(Po,` attribute is set to the same class you use when registering the model (here
`),Sd=n(Po,"CODE",{});var Zq=s(Sd);tg=r(Zq,"NewModelConfig"),Zq.forEach(t),ln=r(Po,")."),Po.forEach(t),this.h()},h(){d(bs,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Ke,ye){b(Ke,g,ye),e(g,v),e(g,u),e(u,f),e(g,p),e(g,m),e(m,h),e(g,He),e(g,Ld),e(Ld,og),e(g,wt),e(g,yd),e(yd,xd),e(g,Ek),b(Ke,rg,ye),b(Ke,Qe,ye),e(Qe,Ze),e(Qe,$d),e($d,_s),e(Qe,Ck),e(Qe,bs),e(bs,vs),e(Qe,wk),e(Qe,kd),e(kd,Fs),e(Qe,Ak),e(Qe,Sd),e(Sd,tg),e(Qe,ln)},d(Ke){Ke&&t(g),Ke&&t(rg),Ke&&t(Qe)}}}function eSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function oSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function rSa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var He=s(u);f=r(He,"use_auth_token=True"),He.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(m,h){b(m,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(m){m&&t(g)}}}function tSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function aSa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var He=s(u);f=r(He,"use_auth_token=True"),He.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(m,h){b(m,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(m){m&&t(g)}}}function nSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoImageProcessor

# Download image processor from huggingface.co and cache.
image_processor = AutoImageProcessor.from_pretrained("google/vit-base-patch16-224-in21k")

# If image processor files are in a directory (e.g. image processor was saved using *save_pretrained('./test/saved_model/')*)
image_processor = AutoImageProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoImageProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download image processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image_processor = AutoImageProcessor.from_pretrained(<span class="hljs-string">&quot;google/vit-base-patch16-224-in21k&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If image processor files are in a directory (e.g. image processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image_processor = AutoImageProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function sSa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var He=s(u);f=r(He,"use_auth_token=True"),He.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(m,h){b(m,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(m){m&&t(g)}}}function lSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function iSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function dSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function mSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function cSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function fSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function gSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function hSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForDepthEstimation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForDepthEstimation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDepthEstimation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDepthEstimation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function uSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForDepthEstimation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDepthEstimation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForDepthEstimation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForDepthEstimation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDepthEstimation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDepthEstimation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDepthEstimation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDepthEstimation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function pSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function _Sa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function bSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function vSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function FSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function TSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function MSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ESa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function CSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function wSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ASa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function LSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ySa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function xSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function $Sa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function kSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function SSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function RSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function PSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function BSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ISa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function NSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function qSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function jSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function DSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function GSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function OSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function VSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function XSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function zSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function QSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function WSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function USa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function HSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function JSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function YSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ZSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function KSa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function eRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function oRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function rRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function tRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function aRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function nRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function sRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function lRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function iRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForZeroShotObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForZeroShotObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForZeroShotObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function dRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForZeroShotObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForZeroShotObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForZeroShotObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForZeroShotObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForZeroShotObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForZeroShotObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function mRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function cRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function fRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function gRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function hRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function uRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function pRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function _Ra($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function bRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function vRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function FRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function TRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function MRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ERa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function CRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function wRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ARa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function LRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function yRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function xRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function $Ra($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function kRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function SRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function RRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/layoutlm_pt_model_config.json")
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
    "./pt_model/layoutlm_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/layoutlm_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/layoutlm_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function PRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function BRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function IRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function NRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function qRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function jRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function DRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function GRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ORa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function VRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function XRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function zRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function QRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function WRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function URa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function HRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function JRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function YRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ZRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function KRa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function ePa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function oPa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function rPa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function tPa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function aPa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function nPa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function sPa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function lPa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function iPa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function dPa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function mPa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function cPa($){let g,v,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(m){g=n(m,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(m),T(f.$$.fragment,m)},m(m,h){b(m,g,h),e(g,v),b(m,u,h),M(f,m,h),p=!0},p:q,i(m){p||(E(f.$$.fragment,m),p=!0)},o(m){C(f.$$.fragment,m),p=!1},d(m){m&&t(g),m&&t(u),w(f,m)}}}function fPa($){let g,v,u,f,p,m,h,He,Ld,og,wt,yd,xd,Ek,rg,Qe,Ze,$d,_s,Ck,bs,vs,wk,kd,Fs,Ak,Sd,tg,ln,Ke,ye,Uq,Rd,Hq,Jq,Po,dn,Yq,ag,Zq,ugo,Eio,Pd,ng,zhe,Lk,pgo,Qhe,_go,Cio,Ts,bgo,Whe,vgo,Fgo,Uhe,Tgo,Mgo,wio,yk,Aio,Kq,Ego,Lio,sg,yio,Bd,lg,Hhe,xk,Cgo,Jhe,wgo,xio,Bo,$k,Ago,kk,Lgo,ej,ygo,xgo,$go,Sk,kgo,Yhe,Sgo,Rgo,Pgo,Vr,Rk,Bgo,Zhe,Igo,Ngo,Id,qgo,Khe,jgo,Dgo,eue,Ggo,Ogo,Vgo,A,ig,oue,Xgo,zgo,oj,Qgo,Wgo,Ugo,dg,rue,Hgo,Jgo,rj,Ygo,Zgo,Kgo,mg,tue,eho,oho,tj,rho,tho,aho,cg,aue,nho,sho,aj,lho,iho,dho,fg,nue,mho,cho,nj,fho,gho,hho,gg,sue,uho,pho,sj,_ho,bho,vho,hg,lue,Fho,Tho,lj,Mho,Eho,Cho,ug,iue,who,Aho,ij,Lho,yho,xho,pg,due,$ho,kho,dj,Sho,Rho,Pho,_g,mue,Bho,Iho,mj,Nho,qho,jho,bg,cue,Dho,Gho,cj,Oho,Vho,Xho,vg,fue,zho,Qho,fj,Who,Uho,Hho,Fg,gue,Jho,Yho,gj,Zho,Kho,euo,Tg,hue,ouo,ruo,hj,tuo,auo,nuo,Mg,uue,suo,luo,uj,iuo,duo,muo,Eg,pue,cuo,fuo,pj,guo,huo,uuo,Cg,_ue,puo,_uo,_j,buo,vuo,Fuo,wg,bue,Tuo,Muo,bj,Euo,Cuo,wuo,Ag,vue,Auo,Luo,vj,yuo,xuo,$uo,Lg,Fue,kuo,Suo,Fj,Ruo,Puo,Buo,yg,Tue,Iuo,Nuo,Tj,quo,juo,Duo,xg,Mue,Guo,Ouo,Mj,Vuo,Xuo,zuo,$g,Eue,Quo,Wuo,Ej,Uuo,Huo,Juo,kg,Cue,Yuo,Zuo,Cj,Kuo,epo,opo,Sg,wue,rpo,tpo,wj,apo,npo,spo,Rg,Aue,lpo,ipo,Aj,dpo,mpo,cpo,Pg,Lue,fpo,gpo,Lj,hpo,upo,ppo,Bg,yue,_po,bpo,yj,vpo,Fpo,Tpo,Ig,xue,Mpo,Epo,xj,Cpo,wpo,Apo,Ng,$ue,Lpo,ypo,$j,xpo,$po,kpo,qg,kue,Spo,Rpo,kj,Ppo,Bpo,Ipo,jg,Sue,Npo,qpo,Sj,jpo,Dpo,Gpo,Dg,Rue,Opo,Vpo,Rj,Xpo,zpo,Qpo,Gg,Pue,Wpo,Upo,Pj,Hpo,Jpo,Ypo,Og,Bue,Zpo,Kpo,Bj,e_o,o_o,r_o,Vg,Iue,t_o,a_o,Ij,n_o,s_o,l_o,Xg,Nue,i_o,d_o,Nj,m_o,c_o,f_o,zg,que,g_o,h_o,qj,u_o,p_o,__o,Qg,jue,b_o,v_o,jj,F_o,T_o,M_o,Wg,Due,E_o,C_o,Dj,w_o,A_o,L_o,Ug,Gue,y_o,x_o,Gj,$_o,k_o,S_o,Hg,Oue,R_o,P_o,Oj,B_o,I_o,N_o,Jg,Vue,q_o,j_o,Vj,D_o,G_o,O_o,Yg,Xue,V_o,X_o,Xj,z_o,Q_o,W_o,Zg,zue,U_o,H_o,zj,J_o,Y_o,Z_o,Kg,Que,K_o,e1o,Qj,o1o,r1o,t1o,eh,Wue,a1o,n1o,Wj,s1o,l1o,i1o,oh,Uue,d1o,m1o,Uj,c1o,f1o,g1o,rh,Hue,h1o,u1o,Hj,p1o,_1o,b1o,th,Jue,v1o,F1o,Jj,T1o,M1o,E1o,ah,Yue,C1o,w1o,Yj,A1o,L1o,y1o,nh,Zue,x1o,$1o,Zj,k1o,S1o,R1o,sh,Kue,P1o,B1o,Kj,I1o,N1o,q1o,lh,epe,j1o,D1o,eD,G1o,O1o,V1o,ih,ope,X1o,z1o,oD,Q1o,W1o,U1o,dh,rpe,H1o,J1o,rD,Y1o,Z1o,K1o,mh,tpe,e2o,o2o,tD,r2o,t2o,a2o,ch,ape,n2o,s2o,aD,l2o,i2o,d2o,fh,npe,m2o,c2o,nD,f2o,g2o,h2o,gh,spe,u2o,p2o,sD,_2o,b2o,v2o,hh,lpe,F2o,T2o,lD,M2o,E2o,C2o,uh,ipe,w2o,A2o,iD,L2o,y2o,x2o,ph,dpe,$2o,k2o,dD,S2o,R2o,P2o,_h,mpe,B2o,I2o,mD,N2o,q2o,j2o,bh,cpe,D2o,G2o,cD,O2o,V2o,X2o,vh,fpe,z2o,Q2o,fD,W2o,U2o,H2o,Fh,gpe,J2o,Y2o,gD,Z2o,K2o,ebo,Th,hpe,obo,rbo,hD,tbo,abo,nbo,Mh,upe,sbo,lbo,uD,ibo,dbo,mbo,Eh,ppe,cbo,fbo,pD,gbo,hbo,ubo,Ch,_pe,pbo,_bo,_D,bbo,vbo,Fbo,wh,bpe,Tbo,Mbo,bD,Ebo,Cbo,wbo,Ah,vpe,Abo,Lbo,vD,ybo,xbo,$bo,Lh,Fpe,kbo,Sbo,FD,Rbo,Pbo,Bbo,yh,Tpe,Ibo,Nbo,TD,qbo,jbo,Dbo,xh,Mpe,Gbo,Obo,MD,Vbo,Xbo,zbo,$h,Epe,Qbo,Wbo,ED,Ubo,Hbo,Jbo,kh,Cpe,Ybo,Zbo,CD,Kbo,evo,ovo,Sh,wpe,rvo,tvo,wD,avo,nvo,svo,Rh,Ape,lvo,ivo,AD,dvo,mvo,cvo,Ph,Lpe,fvo,gvo,LD,hvo,uvo,pvo,Bh,ype,_vo,bvo,yD,vvo,Fvo,Tvo,Ih,xpe,Mvo,Evo,xD,Cvo,wvo,Avo,Nh,$pe,Lvo,yvo,$D,xvo,$vo,kvo,qh,kpe,Svo,Rvo,kD,Pvo,Bvo,Ivo,jh,Spe,Nvo,qvo,SD,jvo,Dvo,Gvo,Dh,Rpe,Ovo,Vvo,RD,Xvo,zvo,Qvo,Gh,Ppe,Wvo,Uvo,PD,Hvo,Jvo,Yvo,Oh,Bpe,Zvo,Kvo,BD,eFo,oFo,rFo,Vh,Ipe,tFo,aFo,ID,nFo,sFo,lFo,Xh,Npe,iFo,dFo,ND,mFo,cFo,fFo,zh,qpe,gFo,hFo,qD,uFo,pFo,_Fo,Qh,jpe,bFo,vFo,jD,FFo,TFo,MFo,Wh,Dpe,EFo,CFo,DD,wFo,AFo,LFo,Uh,Gpe,yFo,xFo,GD,$Fo,kFo,SFo,Hh,Ope,RFo,PFo,OD,BFo,IFo,NFo,Jh,Vpe,qFo,jFo,VD,DFo,GFo,OFo,Yh,Xpe,VFo,XFo,XD,zFo,QFo,WFo,Zh,zpe,UFo,HFo,zD,JFo,YFo,ZFo,Kh,Qpe,KFo,eTo,QD,oTo,rTo,tTo,eu,Wpe,aTo,nTo,WD,sTo,lTo,iTo,ou,Upe,dTo,mTo,UD,cTo,fTo,gTo,ru,Hpe,hTo,uTo,HD,pTo,_To,bTo,tu,Jpe,vTo,FTo,JD,TTo,MTo,ETo,au,Ype,CTo,wTo,YD,ATo,LTo,yTo,nu,Zpe,xTo,$To,ZD,kTo,STo,RTo,su,Kpe,PTo,BTo,KD,ITo,NTo,qTo,lu,e_e,jTo,DTo,eG,GTo,OTo,VTo,iu,o_e,XTo,zTo,oG,QTo,WTo,UTo,du,r_e,HTo,JTo,rG,YTo,ZTo,KTo,mu,t_e,eMo,oMo,tG,rMo,tMo,aMo,cu,a_e,nMo,sMo,aG,lMo,iMo,dMo,fu,n_e,mMo,cMo,nG,fMo,gMo,hMo,gu,s_e,uMo,pMo,sG,_Mo,bMo,vMo,hu,l_e,FMo,TMo,lG,MMo,EMo,CMo,uu,i_e,wMo,AMo,iG,LMo,yMo,xMo,pu,d_e,$Mo,kMo,dG,SMo,RMo,PMo,_u,m_e,BMo,IMo,mG,NMo,qMo,jMo,bu,c_e,DMo,GMo,cG,OMo,VMo,XMo,vu,f_e,zMo,QMo,fG,WMo,UMo,HMo,Fu,g_e,JMo,YMo,gG,ZMo,KMo,eEo,Tu,h_e,oEo,rEo,hG,tEo,aEo,nEo,Mu,u_e,sEo,lEo,uG,iEo,dEo,mEo,Eu,p_e,cEo,fEo,pG,gEo,hEo,uEo,Cu,__e,pEo,_Eo,_G,bEo,vEo,FEo,wu,b_e,TEo,MEo,bG,EEo,CEo,wEo,Au,v_e,AEo,LEo,vG,yEo,xEo,$Eo,Lu,F_e,kEo,SEo,FG,REo,PEo,BEo,yu,T_e,IEo,NEo,TG,qEo,jEo,DEo,xu,M_e,GEo,OEo,MG,VEo,XEo,zEo,$u,E_e,QEo,WEo,EG,UEo,HEo,JEo,ku,C_e,YEo,ZEo,CG,KEo,e4o,o4o,Su,w_e,r4o,t4o,wG,a4o,n4o,s4o,Ru,A_e,l4o,i4o,AG,d4o,m4o,c4o,Pu,L_e,f4o,g4o,LG,h4o,u4o,p4o,Bu,y_e,_4o,b4o,yG,v4o,F4o,T4o,Iu,x_e,M4o,E4o,xG,C4o,w4o,A4o,Nu,$_e,L4o,y4o,$G,x4o,$4o,k4o,qu,k_e,S4o,R4o,kG,P4o,B4o,I4o,ju,S_e,N4o,q4o,SG,j4o,D4o,G4o,Du,O4o,Gu,Pk,V4o,R_e,X4o,$io,Nd,Ou,P_e,Bk,z4o,B_e,Q4o,kio,Io,Ik,W4o,Nk,U4o,RG,H4o,J4o,Y4o,qk,Z4o,I_e,K4o,eCo,oCo,Xr,jk,rCo,N_e,tCo,aCo,mn,nCo,q_e,sCo,lCo,j_e,iCo,dCo,D_e,mCo,cCo,fCo,k,Ms,G_e,gCo,hCo,PG,uCo,pCo,BG,_Co,bCo,vCo,Es,O_e,FCo,TCo,IG,MCo,ECo,NG,CCo,wCo,ACo,Cs,V_e,LCo,yCo,qG,xCo,$Co,jG,kCo,SCo,RCo,Vu,X_e,PCo,BCo,DG,ICo,NCo,qCo,ws,z_e,jCo,DCo,GG,GCo,OCo,OG,VCo,XCo,zCo,Xu,Q_e,QCo,WCo,VG,UCo,HCo,JCo,zu,W_e,YCo,ZCo,XG,KCo,e3o,o3o,Qu,U_e,r3o,t3o,zG,a3o,n3o,s3o,As,H_e,l3o,i3o,QG,d3o,m3o,WG,c3o,f3o,g3o,Ls,J_e,h3o,u3o,UG,p3o,_3o,HG,b3o,v3o,F3o,ys,Y_e,T3o,M3o,JG,E3o,C3o,YG,w3o,A3o,L3o,Wu,Z_e,y3o,x3o,ZG,$3o,k3o,S3o,Uu,K_e,R3o,P3o,KG,B3o,I3o,N3o,Hu,e1e,q3o,j3o,eO,D3o,G3o,O3o,xs,o1e,V3o,X3o,oO,z3o,Q3o,rO,W3o,U3o,H3o,Ju,r1e,J3o,Y3o,tO,Z3o,K3o,e5o,$s,t1e,o5o,r5o,aO,t5o,a5o,nO,n5o,s5o,l5o,ks,a1e,i5o,d5o,sO,m5o,c5o,lO,f5o,g5o,h5o,Ss,n1e,u5o,p5o,iO,_5o,b5o,dO,v5o,F5o,T5o,Rs,s1e,M5o,E5o,mO,C5o,w5o,cO,A5o,L5o,y5o,Ps,l1e,x5o,$5o,fO,k5o,S5o,gO,R5o,P5o,B5o,Yu,i1e,I5o,N5o,hO,q5o,j5o,D5o,Bs,d1e,G5o,O5o,uO,V5o,X5o,pO,z5o,Q5o,W5o,Is,m1e,U5o,H5o,_O,J5o,Y5o,bO,Z5o,K5o,e0o,Ns,c1e,o0o,r0o,vO,t0o,a0o,FO,n0o,s0o,l0o,qs,f1e,i0o,d0o,TO,m0o,c0o,MO,f0o,g0o,h0o,js,g1e,u0o,p0o,EO,_0o,b0o,CO,v0o,F0o,T0o,Ds,h1e,M0o,E0o,wO,C0o,w0o,AO,A0o,L0o,y0o,Gs,u1e,x0o,$0o,LO,k0o,S0o,yO,R0o,P0o,B0o,Zu,p1e,I0o,N0o,xO,q0o,j0o,D0o,Ku,_1e,G0o,O0o,$O,V0o,X0o,z0o,Os,b1e,Q0o,W0o,kO,U0o,H0o,SO,J0o,Y0o,Z0o,ep,v1e,K0o,ewo,RO,owo,rwo,two,Vs,F1e,awo,nwo,PO,swo,lwo,BO,iwo,dwo,mwo,Xs,T1e,cwo,fwo,IO,gwo,hwo,NO,uwo,pwo,_wo,zs,M1e,bwo,vwo,qO,Fwo,Two,jO,Mwo,Ewo,Cwo,op,E1e,wwo,Awo,DO,Lwo,ywo,xwo,rp,C1e,$wo,kwo,GO,Swo,Rwo,Pwo,Qs,w1e,Bwo,Iwo,OO,Nwo,qwo,VO,jwo,Dwo,Gwo,Ws,A1e,Owo,Vwo,XO,Xwo,zwo,zO,Qwo,Wwo,Uwo,Us,L1e,Hwo,Jwo,QO,Ywo,Zwo,WO,Kwo,eAo,oAo,tp,y1e,rAo,tAo,UO,aAo,nAo,sAo,Hs,x1e,lAo,iAo,HO,dAo,mAo,JO,cAo,fAo,gAo,ap,$1e,hAo,uAo,YO,pAo,_Ao,bAo,Js,k1e,vAo,FAo,ZO,TAo,MAo,KO,EAo,CAo,wAo,Ys,S1e,AAo,LAo,eV,yAo,xAo,oV,$Ao,kAo,SAo,Zs,R1e,RAo,PAo,rV,BAo,IAo,tV,NAo,qAo,jAo,Ks,P1e,DAo,GAo,aV,OAo,VAo,nV,XAo,zAo,QAo,el,B1e,WAo,UAo,sV,HAo,JAo,lV,YAo,ZAo,KAo,ol,I1e,e6o,o6o,iV,r6o,t6o,dV,a6o,n6o,s6o,rl,N1e,l6o,i6o,mV,d6o,m6o,cV,c6o,f6o,g6o,tl,q1e,h6o,u6o,fV,p6o,_6o,gV,b6o,v6o,F6o,np,j1e,T6o,M6o,hV,E6o,C6o,w6o,al,D1e,A6o,L6o,uV,y6o,x6o,pV,$6o,k6o,S6o,sp,G1e,R6o,P6o,_V,B6o,I6o,N6o,lp,O1e,q6o,j6o,bV,D6o,G6o,O6o,nl,V1e,V6o,X6o,vV,z6o,Q6o,FV,W6o,U6o,H6o,sl,X1e,J6o,Y6o,TV,Z6o,K6o,MV,e7o,o7o,r7o,ll,z1e,t7o,a7o,EV,n7o,s7o,CV,l7o,i7o,d7o,ip,Q1e,m7o,c7o,wV,f7o,g7o,h7o,il,W1e,u7o,p7o,AV,_7o,b7o,LV,v7o,F7o,T7o,dl,U1e,M7o,E7o,yV,C7o,w7o,xV,A7o,L7o,y7o,ml,H1e,x7o,$7o,$V,k7o,S7o,kV,R7o,P7o,B7o,cl,J1e,I7o,N7o,SV,q7o,j7o,RV,D7o,G7o,O7o,fl,Y1e,V7o,X7o,PV,z7o,Q7o,BV,W7o,U7o,H7o,gl,Z1e,J7o,Y7o,IV,Z7o,K7o,NV,e8o,o8o,r8o,hl,K1e,t8o,a8o,qV,n8o,s8o,jV,l8o,i8o,d8o,ul,e2e,m8o,c8o,DV,f8o,g8o,GV,h8o,u8o,p8o,dp,o2e,_8o,b8o,OV,v8o,F8o,T8o,pl,r2e,M8o,E8o,VV,C8o,w8o,XV,A8o,L8o,y8o,_l,t2e,x8o,$8o,zV,k8o,S8o,QV,R8o,P8o,B8o,bl,a2e,I8o,N8o,WV,q8o,j8o,UV,D8o,G8o,O8o,mp,n2e,V8o,X8o,HV,z8o,Q8o,W8o,cp,s2e,U8o,H8o,JV,J8o,Y8o,Z8o,fp,l2e,K8o,eLo,YV,oLo,rLo,tLo,gp,i2e,aLo,nLo,ZV,sLo,lLo,iLo,vl,d2e,dLo,mLo,KV,cLo,fLo,eX,gLo,hLo,uLo,hp,m2e,pLo,_Lo,oX,bLo,vLo,FLo,Fl,c2e,TLo,MLo,rX,ELo,CLo,tX,wLo,ALo,LLo,Tl,f2e,yLo,xLo,aX,$Lo,kLo,nX,SLo,RLo,PLo,Ml,g2e,BLo,ILo,sX,NLo,qLo,lX,jLo,DLo,GLo,El,h2e,OLo,VLo,iX,XLo,zLo,dX,QLo,WLo,ULo,Cl,u2e,HLo,JLo,mX,YLo,ZLo,cX,KLo,eyo,oyo,up,p2e,ryo,tyo,fX,ayo,nyo,syo,wl,_2e,lyo,iyo,gX,dyo,myo,hX,cyo,fyo,gyo,pp,b2e,hyo,uyo,uX,pyo,_yo,byo,_p,v2e,vyo,Fyo,pX,Tyo,Myo,Eyo,Al,F2e,Cyo,wyo,_X,Ayo,Lyo,bX,yyo,xyo,$yo,Ll,T2e,kyo,Syo,vX,Ryo,Pyo,FX,Byo,Iyo,Nyo,yl,M2e,qyo,jyo,TX,Dyo,Gyo,MX,Oyo,Vyo,Xyo,xl,E2e,zyo,Qyo,EX,Wyo,Uyo,CX,Hyo,Jyo,Yyo,bp,C2e,Zyo,Kyo,wX,e9o,o9o,r9o,vp,w2e,t9o,a9o,AX,n9o,s9o,l9o,Fp,A2e,i9o,d9o,LX,m9o,c9o,f9o,$l,L2e,g9o,h9o,yX,u9o,p9o,xX,_9o,b9o,v9o,kl,y2e,F9o,T9o,$X,M9o,E9o,kX,C9o,w9o,A9o,Tp,x2e,L9o,y9o,SX,x9o,$9o,k9o,Mp,$2e,S9o,R9o,RX,P9o,B9o,I9o,Ep,k2e,N9o,q9o,PX,j9o,D9o,G9o,Cp,S2e,O9o,V9o,BX,X9o,z9o,Q9o,Sl,R2e,W9o,U9o,IX,H9o,J9o,NX,Y9o,Z9o,K9o,Rl,P2e,exo,oxo,qX,rxo,txo,jX,axo,nxo,sxo,wp,B2e,lxo,ixo,DX,dxo,mxo,cxo,Ap,I2e,fxo,gxo,GX,hxo,uxo,pxo,Pl,N2e,_xo,bxo,OX,vxo,Fxo,VX,Txo,Mxo,Exo,Bl,q2e,Cxo,wxo,XX,Axo,Lxo,zX,yxo,xxo,$xo,Il,j2e,kxo,Sxo,QX,Rxo,Pxo,WX,Bxo,Ixo,Nxo,Nl,D2e,qxo,jxo,UX,Dxo,Gxo,HX,Oxo,Vxo,Xxo,Lp,zxo,yp,Dk,Qxo,G2e,Wxo,Sio,qd,xp,O2e,Gk,Uxo,V2e,Hxo,Rio,No,Ok,Jxo,Vk,Yxo,JX,Zxo,Kxo,e$o,Xk,o$o,X2e,r$o,t$o,a$o,eo,zk,n$o,z2e,s$o,l$o,cn,i$o,Q2e,d$o,m$o,W2e,c$o,f$o,U2e,g$o,h$o,u$o,z,$p,H2e,p$o,_$o,YX,b$o,v$o,F$o,kp,J2e,T$o,M$o,ZX,E$o,C$o,w$o,Sp,Y2e,A$o,L$o,KX,y$o,x$o,$$o,Rp,Z2e,k$o,S$o,ez,R$o,P$o,B$o,Pp,K2e,I$o,N$o,oz,q$o,j$o,D$o,Bp,ebe,G$o,O$o,rz,V$o,X$o,z$o,Ip,obe,Q$o,W$o,tz,U$o,H$o,J$o,Np,rbe,Y$o,Z$o,az,K$o,eko,oko,qp,tbe,rko,tko,nz,ako,nko,sko,jp,abe,lko,iko,sz,dko,mko,cko,Dp,nbe,fko,gko,lz,hko,uko,pko,Gp,sbe,_ko,bko,iz,vko,Fko,Tko,Op,lbe,Mko,Eko,dz,Cko,wko,Ako,Vp,ibe,Lko,yko,mz,xko,$ko,kko,Xp,dbe,Sko,Rko,cz,Pko,Bko,Iko,zp,mbe,Nko,qko,fz,jko,Dko,Gko,Qp,cbe,Oko,Vko,gz,Xko,zko,Qko,Wp,fbe,Wko,Uko,hz,Hko,Jko,Yko,Up,gbe,Zko,Kko,uz,eSo,oSo,rSo,Hp,hbe,tSo,aSo,pz,nSo,sSo,lSo,Jp,ube,iSo,dSo,_z,mSo,cSo,fSo,Yp,pbe,gSo,hSo,bz,uSo,pSo,_So,Zp,_be,bSo,vSo,vz,FSo,TSo,MSo,Kp,bbe,ESo,CSo,Fz,wSo,ASo,LSo,e_,vbe,ySo,xSo,Tz,$So,kSo,SSo,o_,Fbe,RSo,PSo,Mz,BSo,ISo,NSo,r_,Tbe,qSo,jSo,Ez,DSo,GSo,OSo,t_,Mbe,VSo,XSo,Cz,zSo,QSo,WSo,a_,Ebe,USo,HSo,wz,JSo,YSo,ZSo,n_,Cbe,KSo,eRo,Az,oRo,rRo,tRo,s_,wbe,aRo,nRo,Lz,sRo,lRo,iRo,l_,Abe,dRo,mRo,yz,cRo,fRo,gRo,i_,Lbe,hRo,uRo,xz,pRo,_Ro,bRo,d_,ybe,vRo,FRo,$z,TRo,MRo,ERo,m_,xbe,CRo,wRo,kz,ARo,LRo,yRo,c_,$be,xRo,$Ro,Sz,kRo,SRo,RRo,f_,kbe,PRo,BRo,Rz,IRo,NRo,qRo,g_,Sbe,jRo,DRo,Pz,GRo,ORo,VRo,h_,Rbe,XRo,zRo,Bz,QRo,WRo,URo,u_,Pbe,HRo,JRo,Iz,YRo,ZRo,KRo,p_,Bbe,ePo,oPo,Nz,rPo,tPo,aPo,__,Ibe,nPo,sPo,qz,lPo,iPo,dPo,b_,Nbe,mPo,cPo,jz,fPo,gPo,hPo,v_,qbe,uPo,pPo,Dz,_Po,bPo,vPo,F_,jbe,FPo,TPo,Gz,MPo,EPo,CPo,T_,Dbe,wPo,APo,Oz,LPo,yPo,xPo,M_,$Po,E_,kPo,C_,Qk,SPo,Gbe,RPo,Pio,jd,w_,Obe,Wk,PPo,Vbe,BPo,Bio,qo,Uk,IPo,Hk,NPo,Vz,qPo,jPo,DPo,Jk,GPo,Xbe,OPo,VPo,XPo,oo,Yk,zPo,zbe,QPo,WPo,fn,UPo,Qbe,HPo,JPo,Wbe,YPo,ZPo,Ube,KPo,eBo,oBo,oe,A_,Hbe,rBo,tBo,Xz,aBo,nBo,sBo,L_,Jbe,lBo,iBo,zz,dBo,mBo,cBo,y_,Ybe,fBo,gBo,Qz,hBo,uBo,pBo,x_,Zbe,_Bo,bBo,Wz,vBo,FBo,TBo,$_,Kbe,MBo,EBo,Uz,CBo,wBo,ABo,k_,eve,LBo,yBo,Hz,xBo,$Bo,kBo,S_,ove,SBo,RBo,Jz,PBo,BBo,IBo,R_,rve,NBo,qBo,Yz,jBo,DBo,GBo,P_,tve,OBo,VBo,Zz,XBo,zBo,QBo,B_,ave,WBo,UBo,Kz,HBo,JBo,YBo,I_,nve,ZBo,KBo,eQ,eIo,oIo,rIo,N_,sve,tIo,aIo,oQ,nIo,sIo,lIo,q_,lve,iIo,dIo,rQ,mIo,cIo,fIo,j_,ive,gIo,hIo,tQ,uIo,pIo,_Io,D_,dve,bIo,vIo,aQ,FIo,TIo,MIo,G_,mve,EIo,CIo,nQ,wIo,AIo,LIo,O_,cve,yIo,xIo,sQ,$Io,kIo,SIo,V_,fve,RIo,PIo,lQ,BIo,IIo,NIo,X_,gve,qIo,jIo,iQ,DIo,GIo,OIo,z_,hve,VIo,XIo,dQ,zIo,QIo,WIo,Q_,uve,UIo,HIo,mQ,JIo,YIo,ZIo,W_,pve,KIo,eNo,cQ,oNo,rNo,tNo,U_,_ve,aNo,nNo,fQ,sNo,lNo,iNo,H_,bve,dNo,mNo,gQ,cNo,fNo,gNo,J_,vve,hNo,uNo,hQ,pNo,_No,bNo,Y_,Fve,vNo,FNo,uQ,TNo,MNo,ENo,Z_,Tve,CNo,wNo,pQ,ANo,LNo,yNo,K_,Mve,xNo,$No,_Q,kNo,SNo,RNo,e1,Eve,PNo,BNo,bQ,INo,NNo,qNo,o1,Cve,jNo,DNo,vQ,GNo,ONo,VNo,r1,XNo,t1,zNo,a1,Zk,QNo,wve,WNo,Iio,Dd,n1,Ave,Kk,UNo,Lve,HNo,Nio,jo,eS,JNo,oS,YNo,FQ,ZNo,KNo,eqo,rS,oqo,yve,rqo,tqo,aqo,ro,tS,nqo,xve,sqo,lqo,Gd,iqo,$ve,dqo,mqo,kve,cqo,fqo,gqo,ie,s1,Sve,hqo,uqo,TQ,pqo,_qo,bqo,l1,Rve,vqo,Fqo,MQ,Tqo,Mqo,Eqo,i1,Pve,Cqo,wqo,EQ,Aqo,Lqo,yqo,d1,Bve,xqo,$qo,CQ,kqo,Sqo,Rqo,m1,Ive,Pqo,Bqo,wQ,Iqo,Nqo,qqo,c1,Nve,jqo,Dqo,AQ,Gqo,Oqo,Vqo,f1,qve,Xqo,zqo,LQ,Qqo,Wqo,Uqo,g1,jve,Hqo,Jqo,yQ,Yqo,Zqo,Kqo,h1,Dve,ejo,ojo,xQ,rjo,tjo,ajo,u1,Gve,njo,sjo,$Q,ljo,ijo,djo,p1,Ove,mjo,cjo,kQ,fjo,gjo,hjo,_1,Vve,ujo,pjo,SQ,_jo,bjo,vjo,b1,Xve,Fjo,Tjo,RQ,Mjo,Ejo,Cjo,v1,zve,wjo,Ajo,PQ,Ljo,yjo,xjo,F1,Qve,$jo,kjo,BQ,Sjo,Rjo,Pjo,T1,Wve,Bjo,Ijo,IQ,Njo,qjo,jjo,M1,Uve,Djo,Gjo,NQ,Ojo,Vjo,Xjo,E1,Hve,zjo,Qjo,qQ,Wjo,Ujo,Hjo,C1,Jve,Jjo,Yjo,jQ,Zjo,Kjo,eDo,w1,Yve,oDo,rDo,DQ,tDo,aDo,nDo,A1,Zve,sDo,lDo,GQ,iDo,dDo,mDo,L1,Kve,cDo,fDo,OQ,gDo,hDo,uDo,y1,eFe,pDo,_Do,VQ,bDo,vDo,FDo,x1,TDo,$1,MDo,k1,aS,EDo,oFe,CDo,qio,Od,S1,rFe,nS,wDo,tFe,ADo,jio,Do,sS,LDo,Vd,yDo,XQ,xDo,$Do,zQ,kDo,SDo,RDo,lS,PDo,aFe,BDo,IDo,NDo,At,iS,qDo,nFe,jDo,DDo,Xd,GDo,sFe,ODo,VDo,QQ,XDo,zDo,QDo,R1,WDo,to,dS,UDo,lFe,HDo,JDo,gn,YDo,iFe,ZDo,KDo,dFe,eGo,oGo,mFe,rGo,tGo,aGo,y,P1,cFe,nGo,sGo,WQ,lGo,iGo,dGo,B1,fFe,mGo,cGo,UQ,fGo,gGo,hGo,I1,gFe,uGo,pGo,HQ,_Go,bGo,vGo,N1,hFe,FGo,TGo,JQ,MGo,EGo,CGo,q1,uFe,wGo,AGo,YQ,LGo,yGo,xGo,j1,pFe,$Go,kGo,ZQ,SGo,RGo,PGo,D1,_Fe,BGo,IGo,KQ,NGo,qGo,jGo,G1,bFe,DGo,GGo,eW,OGo,VGo,XGo,O1,vFe,zGo,QGo,oW,WGo,UGo,HGo,V1,FFe,JGo,YGo,rW,ZGo,KGo,eOo,X1,TFe,oOo,rOo,tW,tOo,aOo,nOo,z1,MFe,sOo,lOo,aW,iOo,dOo,mOo,Q1,EFe,cOo,fOo,nW,gOo,hOo,uOo,W1,CFe,pOo,_Oo,sW,bOo,vOo,FOo,U1,wFe,TOo,MOo,lW,EOo,COo,wOo,H1,AFe,AOo,LOo,iW,yOo,xOo,$Oo,J1,LFe,kOo,SOo,dW,ROo,POo,BOo,Y1,yFe,IOo,NOo,mW,qOo,jOo,DOo,Z1,xFe,GOo,OOo,cW,VOo,XOo,zOo,K1,$Fe,QOo,WOo,fW,UOo,HOo,JOo,e2,kFe,YOo,ZOo,gW,KOo,eVo,oVo,o2,SFe,rVo,tVo,hW,aVo,nVo,sVo,r2,RFe,lVo,iVo,uW,dVo,mVo,cVo,t2,PFe,fVo,gVo,pW,hVo,uVo,pVo,a2,BFe,_Vo,bVo,_W,vVo,FVo,TVo,n2,IFe,MVo,EVo,bW,CVo,wVo,AVo,s2,NFe,LVo,yVo,vW,xVo,$Vo,kVo,l2,qFe,SVo,RVo,FW,PVo,BVo,IVo,i2,jFe,NVo,qVo,TW,jVo,DVo,GVo,d2,DFe,OVo,VVo,MW,XVo,zVo,QVo,m2,GFe,WVo,UVo,EW,HVo,JVo,YVo,c2,OFe,ZVo,KVo,CW,eXo,oXo,rXo,f2,VFe,tXo,aXo,wW,nXo,sXo,lXo,g2,XFe,iXo,dXo,AW,mXo,cXo,fXo,h2,zFe,gXo,hXo,LW,uXo,pXo,_Xo,u2,QFe,bXo,vXo,yW,FXo,TXo,MXo,p2,WFe,EXo,CXo,xW,wXo,AXo,LXo,_2,UFe,yXo,xXo,$W,$Xo,kXo,SXo,b2,HFe,RXo,PXo,kW,BXo,IXo,NXo,v2,JFe,qXo,jXo,SW,DXo,GXo,OXo,ql,YFe,VXo,XXo,RW,zXo,QXo,PW,WXo,UXo,HXo,F2,ZFe,JXo,YXo,BW,ZXo,KXo,ezo,T2,KFe,ozo,rzo,IW,tzo,azo,nzo,M2,eTe,szo,lzo,NW,izo,dzo,mzo,E2,oTe,czo,fzo,qW,gzo,hzo,uzo,C2,rTe,pzo,_zo,jW,bzo,vzo,Fzo,w2,tTe,Tzo,Mzo,DW,Ezo,Czo,wzo,A2,aTe,Azo,Lzo,GW,yzo,xzo,$zo,L2,nTe,kzo,Szo,OW,Rzo,Pzo,Bzo,y2,sTe,Izo,Nzo,VW,qzo,jzo,Dzo,x2,lTe,Gzo,Ozo,XW,Vzo,Xzo,zzo,$2,iTe,Qzo,Wzo,zW,Uzo,Hzo,Jzo,k2,dTe,Yzo,Zzo,QW,Kzo,eQo,oQo,S2,mTe,rQo,tQo,WW,aQo,nQo,sQo,R2,cTe,lQo,iQo,UW,dQo,mQo,cQo,P2,fTe,fQo,gQo,HW,hQo,uQo,pQo,B2,gTe,_Qo,bQo,JW,vQo,FQo,TQo,I2,hTe,MQo,EQo,YW,CQo,wQo,AQo,N2,uTe,LQo,yQo,ZW,xQo,$Qo,kQo,q2,pTe,SQo,RQo,KW,PQo,BQo,IQo,j2,_Te,NQo,qQo,eU,jQo,DQo,GQo,D2,bTe,OQo,VQo,oU,XQo,zQo,QQo,G2,vTe,WQo,UQo,rU,HQo,JQo,YQo,O2,FTe,ZQo,KQo,tU,eWo,oWo,rWo,V2,TTe,tWo,aWo,aU,nWo,sWo,lWo,X2,MTe,iWo,dWo,nU,mWo,cWo,fWo,z2,ETe,gWo,hWo,sU,uWo,pWo,_Wo,Q2,CTe,bWo,vWo,lU,FWo,TWo,MWo,W2,wTe,EWo,CWo,iU,wWo,AWo,LWo,U2,ATe,yWo,xWo,dU,$Wo,kWo,SWo,H2,LTe,RWo,PWo,mU,BWo,IWo,NWo,J2,yTe,qWo,jWo,cU,DWo,GWo,OWo,Y2,xTe,VWo,XWo,fU,zWo,QWo,WWo,Z2,$Te,UWo,HWo,gU,JWo,YWo,ZWo,K2,kTe,KWo,eUo,hU,oUo,rUo,tUo,eb,STe,aUo,nUo,uU,sUo,lUo,iUo,ob,RTe,dUo,mUo,pU,cUo,fUo,gUo,rb,PTe,hUo,uUo,_U,pUo,_Uo,bUo,tb,BTe,vUo,FUo,bU,TUo,MUo,EUo,ab,ITe,CUo,wUo,vU,AUo,LUo,yUo,nb,NTe,xUo,$Uo,FU,kUo,SUo,RUo,sb,qTe,PUo,BUo,TU,IUo,NUo,qUo,lb,jTe,jUo,DUo,MU,GUo,OUo,VUo,ib,DTe,XUo,zUo,EU,QUo,WUo,UUo,db,GTe,HUo,JUo,CU,YUo,ZUo,KUo,mb,OTe,eHo,oHo,wU,rHo,tHo,aHo,cb,VTe,nHo,sHo,AU,lHo,iHo,dHo,fb,XTe,mHo,cHo,LU,fHo,gHo,hHo,gb,zTe,uHo,pHo,yU,_Ho,bHo,vHo,hb,QTe,FHo,THo,xU,MHo,EHo,CHo,ub,WTe,wHo,AHo,$U,LHo,yHo,xHo,pb,UTe,$Ho,kHo,kU,SHo,RHo,PHo,_b,HTe,BHo,IHo,SU,NHo,qHo,jHo,bb,JTe,DHo,GHo,RU,OHo,VHo,XHo,vb,YTe,zHo,QHo,PU,WHo,UHo,HHo,Fb,ZTe,JHo,YHo,BU,ZHo,KHo,eJo,Tb,KTe,oJo,rJo,IU,tJo,aJo,nJo,Mb,eMe,sJo,lJo,NU,iJo,dJo,mJo,Eb,oMe,cJo,fJo,qU,gJo,hJo,uJo,Cb,rMe,pJo,_Jo,jU,bJo,vJo,FJo,wb,tMe,TJo,MJo,DU,EJo,CJo,wJo,Ab,aMe,AJo,LJo,GU,yJo,xJo,$Jo,Lb,nMe,kJo,SJo,OU,RJo,PJo,BJo,yb,sMe,IJo,NJo,VU,qJo,jJo,DJo,xb,lMe,GJo,OJo,XU,VJo,XJo,zJo,$b,iMe,QJo,WJo,zU,UJo,HJo,JJo,kb,dMe,YJo,ZJo,QU,KJo,eYo,oYo,Sb,mMe,rYo,tYo,WU,aYo,nYo,sYo,Rb,cMe,lYo,iYo,UU,dYo,mYo,cYo,Pb,fMe,fYo,gYo,HU,hYo,uYo,pYo,Bb,gMe,_Yo,bYo,JU,vYo,FYo,TYo,Ib,hMe,MYo,EYo,YU,CYo,wYo,AYo,Nb,uMe,LYo,yYo,ZU,xYo,$Yo,kYo,qb,pMe,SYo,RYo,KU,PYo,BYo,IYo,jb,_Me,NYo,qYo,eH,jYo,DYo,GYo,Db,bMe,OYo,VYo,oH,XYo,zYo,QYo,Gb,vMe,WYo,UYo,rH,HYo,JYo,YYo,Ob,FMe,ZYo,KYo,tH,eZo,oZo,rZo,Vb,TMe,tZo,aZo,aH,nZo,sZo,lZo,Xb,MMe,iZo,dZo,nH,mZo,cZo,fZo,zb,EMe,gZo,hZo,sH,uZo,pZo,_Zo,Qb,CMe,bZo,vZo,lH,FZo,TZo,MZo,Wb,wMe,EZo,CZo,iH,wZo,AZo,LZo,Ub,AMe,yZo,xZo,dH,$Zo,kZo,SZo,Hb,LMe,RZo,PZo,mH,BZo,IZo,NZo,Jb,yMe,qZo,jZo,cH,DZo,GZo,OZo,Yb,xMe,VZo,XZo,fH,zZo,QZo,WZo,Zb,$Me,UZo,HZo,gH,JZo,YZo,ZZo,Kb,kMe,KZo,eKo,hH,oKo,rKo,tKo,ev,SMe,aKo,nKo,uH,sKo,lKo,iKo,ov,RMe,dKo,mKo,pH,cKo,fKo,gKo,rv,PMe,hKo,uKo,_H,pKo,_Ko,bKo,tv,BMe,vKo,FKo,bH,TKo,MKo,EKo,av,IMe,CKo,wKo,vH,AKo,LKo,yKo,nv,xKo,NMe,$Ko,kKo,qMe,SKo,RKo,sv,Dio,zd,lv,jMe,mS,PKo,DMe,BKo,Gio,Go,cS,IKo,Qd,NKo,FH,qKo,jKo,TH,DKo,GKo,OKo,fS,VKo,GMe,XKo,zKo,QKo,Lt,gS,WKo,OMe,UKo,HKo,Wd,JKo,VMe,YKo,ZKo,MH,KKo,eer,oer,iv,rer,ao,hS,ter,XMe,aer,ner,hn,ser,zMe,ler,ier,QMe,der,mer,WMe,cer,fer,ger,G,dv,UMe,her,uer,EH,per,_er,ber,mv,HMe,ver,Fer,CH,Ter,Mer,Eer,cv,JMe,Cer,wer,wH,Aer,Ler,yer,fv,YMe,xer,$er,AH,ker,Ser,Rer,gv,ZMe,Per,Ber,LH,Ier,Ner,qer,hv,KMe,jer,Der,yH,Ger,Oer,Ver,uv,eEe,Xer,zer,xH,Qer,Wer,Uer,pv,oEe,Her,Jer,$H,Yer,Zer,Ker,_v,rEe,eor,oor,kH,ror,tor,aor,bv,tEe,nor,sor,SH,lor,ior,dor,vv,aEe,mor,cor,RH,gor,hor,uor,Fv,nEe,por,_or,PH,bor,vor,For,Tv,sEe,Tor,Mor,BH,Eor,Cor,wor,Mv,lEe,Aor,Lor,IH,yor,xor,$or,Ev,iEe,kor,Sor,NH,Ror,Por,Bor,Cv,dEe,Ior,Nor,qH,qor,jor,Dor,wv,mEe,Gor,Oor,jH,Vor,Xor,zor,Av,cEe,Qor,Wor,DH,Uor,Hor,Jor,Lv,fEe,Yor,Zor,GH,Kor,err,orr,yv,gEe,rrr,trr,OH,arr,nrr,srr,xv,hEe,lrr,irr,VH,drr,mrr,crr,$v,uEe,frr,grr,XH,hrr,urr,prr,kv,pEe,_rr,brr,zH,vrr,Frr,Trr,Sv,_Ee,Mrr,Err,QH,Crr,wrr,Arr,Rv,bEe,Lrr,yrr,WH,xrr,$rr,krr,Pv,vEe,Srr,Rrr,UH,Prr,Brr,Irr,Bv,FEe,Nrr,qrr,HH,jrr,Drr,Grr,Iv,TEe,Orr,Vrr,JH,Xrr,zrr,Qrr,Nv,MEe,Wrr,Urr,YH,Hrr,Jrr,Yrr,qv,EEe,Zrr,Krr,ZH,etr,otr,rtr,jv,CEe,ttr,atr,KH,ntr,str,ltr,Dv,wEe,itr,dtr,eJ,mtr,ctr,ftr,Gv,AEe,gtr,htr,oJ,utr,ptr,_tr,Ov,LEe,btr,vtr,rJ,Ftr,Ttr,Mtr,Vv,yEe,Etr,Ctr,tJ,wtr,Atr,Ltr,Xv,xEe,ytr,xtr,aJ,$tr,ktr,Str,zv,$Ee,Rtr,Ptr,nJ,Btr,Itr,Ntr,Qv,kEe,qtr,jtr,sJ,Dtr,Gtr,Otr,Wv,SEe,Vtr,Xtr,lJ,ztr,Qtr,Wtr,Uv,REe,Utr,Htr,iJ,Jtr,Ytr,Ztr,Hv,PEe,Ktr,ear,dJ,oar,rar,tar,Jv,BEe,aar,nar,mJ,sar,lar,iar,Yv,IEe,dar,mar,cJ,car,far,gar,Zv,NEe,har,uar,fJ,par,_ar,bar,Kv,qEe,Far,Tar,gJ,Mar,Ear,Car,eF,jEe,war,Aar,hJ,Lar,yar,xar,oF,DEe,$ar,kar,uJ,Sar,Rar,Par,rF,GEe,Bar,Iar,pJ,Nar,qar,jar,tF,OEe,Dar,Gar,_J,Oar,Var,Xar,aF,VEe,zar,Qar,bJ,War,Uar,Har,nF,Jar,XEe,Yar,Zar,zEe,Kar,enr,sF,Oio,Ud,lF,QEe,uS,onr,WEe,rnr,Vio,Oo,pS,tnr,Hd,anr,vJ,nnr,snr,FJ,lnr,inr,dnr,_S,mnr,UEe,cnr,fnr,gnr,yt,bS,hnr,HEe,unr,pnr,Jd,_nr,JEe,bnr,vnr,TJ,Fnr,Tnr,Mnr,iF,Enr,no,vS,Cnr,YEe,wnr,Anr,un,Lnr,ZEe,ynr,xnr,KEe,$nr,knr,e4e,Snr,Rnr,Pnr,W,dF,o4e,Bnr,Inr,MJ,Nnr,qnr,jnr,mF,r4e,Dnr,Gnr,EJ,Onr,Vnr,Xnr,cF,t4e,znr,Qnr,CJ,Wnr,Unr,Hnr,fF,a4e,Jnr,Ynr,wJ,Znr,Knr,esr,gF,n4e,osr,rsr,AJ,tsr,asr,nsr,hF,s4e,ssr,lsr,LJ,isr,dsr,msr,uF,l4e,csr,fsr,yJ,gsr,hsr,usr,pF,i4e,psr,_sr,xJ,bsr,vsr,Fsr,_F,d4e,Tsr,Msr,$J,Esr,Csr,wsr,bF,m4e,Asr,Lsr,kJ,ysr,xsr,$sr,vF,c4e,ksr,Ssr,SJ,Rsr,Psr,Bsr,FF,f4e,Isr,Nsr,RJ,qsr,jsr,Dsr,TF,g4e,Gsr,Osr,PJ,Vsr,Xsr,zsr,MF,h4e,Qsr,Wsr,BJ,Usr,Hsr,Jsr,EF,u4e,Ysr,Zsr,IJ,Ksr,elr,olr,CF,p4e,rlr,tlr,NJ,alr,nlr,slr,wF,_4e,llr,ilr,qJ,dlr,mlr,clr,AF,b4e,flr,glr,jJ,hlr,ulr,plr,LF,v4e,_lr,blr,DJ,vlr,Flr,Tlr,yF,F4e,Mlr,Elr,GJ,Clr,wlr,Alr,xF,T4e,Llr,ylr,OJ,xlr,$lr,klr,$F,M4e,Slr,Rlr,VJ,Plr,Blr,Ilr,kF,E4e,Nlr,qlr,XJ,jlr,Dlr,Glr,SF,C4e,Olr,Vlr,zJ,Xlr,zlr,Qlr,RF,w4e,Wlr,Ulr,QJ,Hlr,Jlr,Ylr,PF,A4e,Zlr,Klr,WJ,eir,oir,rir,BF,L4e,tir,air,UJ,nir,sir,lir,IF,y4e,iir,dir,HJ,mir,cir,fir,NF,x4e,gir,hir,JJ,uir,pir,_ir,qF,$4e,bir,vir,YJ,Fir,Tir,Mir,jF,k4e,Eir,Cir,ZJ,wir,Air,Lir,DF,S4e,yir,xir,KJ,$ir,kir,Sir,GF,R4e,Rir,Pir,eY,Bir,Iir,Nir,OF,P4e,qir,jir,oY,Dir,Gir,Oir,VF,B4e,Vir,Xir,rY,zir,Qir,Wir,XF,I4e,Uir,Hir,tY,Jir,Yir,Zir,zF,N4e,Kir,edr,aY,odr,rdr,tdr,QF,q4e,adr,ndr,nY,sdr,ldr,idr,WF,j4e,ddr,mdr,sY,cdr,fdr,gdr,UF,D4e,hdr,udr,lY,pdr,_dr,bdr,HF,G4e,vdr,Fdr,iY,Tdr,Mdr,Edr,JF,O4e,Cdr,wdr,dY,Adr,Ldr,ydr,YF,V4e,xdr,$dr,mY,kdr,Sdr,Rdr,ZF,Pdr,X4e,Bdr,Idr,z4e,Ndr,qdr,KF,Xio,Yd,eT,Q4e,FS,jdr,W4e,Ddr,zio,Vo,TS,Gdr,Zd,Odr,cY,Vdr,Xdr,fY,zdr,Qdr,Wdr,MS,Udr,U4e,Hdr,Jdr,Ydr,xt,ES,Zdr,H4e,Kdr,emr,Kd,omr,J4e,rmr,tmr,gY,amr,nmr,smr,oT,lmr,so,CS,imr,Y4e,dmr,mmr,pn,cmr,Z4e,fmr,gmr,K4e,hmr,umr,eCe,pmr,_mr,bmr,wS,rT,oCe,vmr,Fmr,hY,Tmr,Mmr,Emr,tT,rCe,Cmr,wmr,uY,Amr,Lmr,ymr,aT,xmr,tCe,$mr,kmr,aCe,Smr,Rmr,nT,Qio,em,sT,nCe,AS,Pmr,sCe,Bmr,Wio,Xo,LS,Imr,om,Nmr,pY,qmr,jmr,_Y,Dmr,Gmr,Omr,yS,Vmr,lCe,Xmr,zmr,Qmr,$t,xS,Wmr,iCe,Umr,Hmr,rm,Jmr,dCe,Ymr,Zmr,bY,Kmr,ecr,ocr,lT,rcr,lo,$S,tcr,mCe,acr,ncr,_n,scr,cCe,lcr,icr,fCe,dcr,mcr,gCe,ccr,fcr,gcr,J,iT,hCe,hcr,ucr,vY,pcr,_cr,bcr,dT,uCe,vcr,Fcr,FY,Tcr,Mcr,Ecr,mT,pCe,Ccr,wcr,TY,Acr,Lcr,ycr,cT,_Ce,xcr,$cr,MY,kcr,Scr,Rcr,fT,bCe,Pcr,Bcr,EY,Icr,Ncr,qcr,gT,vCe,jcr,Dcr,CY,Gcr,Ocr,Vcr,hT,FCe,Xcr,zcr,wY,Qcr,Wcr,Ucr,uT,TCe,Hcr,Jcr,AY,Ycr,Zcr,Kcr,pT,MCe,efr,ofr,LY,rfr,tfr,afr,_T,ECe,nfr,sfr,yY,lfr,ifr,dfr,bT,CCe,mfr,cfr,xY,ffr,gfr,hfr,vT,wCe,ufr,pfr,$Y,_fr,bfr,vfr,FT,ACe,Ffr,Tfr,kY,Mfr,Efr,Cfr,TT,LCe,wfr,Afr,SY,Lfr,yfr,xfr,MT,yCe,$fr,kfr,RY,Sfr,Rfr,Pfr,ET,xCe,Bfr,Ifr,PY,Nfr,qfr,jfr,CT,$Ce,Dfr,Gfr,BY,Ofr,Vfr,Xfr,wT,kCe,zfr,Qfr,IY,Wfr,Ufr,Hfr,AT,SCe,Jfr,Yfr,NY,Zfr,Kfr,egr,LT,RCe,ogr,rgr,qY,tgr,agr,ngr,yT,PCe,sgr,lgr,jY,igr,dgr,mgr,xT,BCe,cgr,fgr,DY,ggr,hgr,ugr,$T,ICe,pgr,_gr,GY,bgr,vgr,Fgr,kT,NCe,Tgr,Mgr,OY,Egr,Cgr,wgr,ST,qCe,Agr,Lgr,VY,ygr,xgr,$gr,RT,jCe,kgr,Sgr,XY,Rgr,Pgr,Bgr,PT,DCe,Igr,Ngr,zY,qgr,jgr,Dgr,BT,GCe,Ggr,Ogr,QY,Vgr,Xgr,zgr,IT,OCe,Qgr,Wgr,WY,Ugr,Hgr,Jgr,NT,VCe,Ygr,Zgr,UY,Kgr,ehr,ohr,qT,XCe,rhr,thr,HY,ahr,nhr,shr,jT,zCe,lhr,ihr,JY,dhr,mhr,chr,DT,QCe,fhr,ghr,YY,hhr,uhr,phr,GT,WCe,_hr,bhr,ZY,vhr,Fhr,Thr,OT,UCe,Mhr,Ehr,KY,Chr,whr,Ahr,VT,HCe,Lhr,yhr,eZ,xhr,$hr,khr,XT,JCe,Shr,Rhr,YCe,Phr,Bhr,Ihr,zT,ZCe,Nhr,qhr,oZ,jhr,Dhr,Ghr,QT,KCe,Ohr,Vhr,rZ,Xhr,zhr,Qhr,WT,e3e,Whr,Uhr,tZ,Hhr,Jhr,Yhr,UT,o3e,Zhr,Khr,aZ,eur,our,rur,HT,tur,r3e,aur,nur,t3e,sur,lur,JT,Uio,tm,YT,a3e,kS,iur,n3e,dur,Hio,zo,SS,mur,am,cur,nZ,fur,gur,sZ,hur,uur,pur,RS,_ur,s3e,bur,vur,Fur,kt,PS,Tur,l3e,Mur,Eur,nm,Cur,i3e,wur,Aur,lZ,Lur,yur,xur,ZT,$ur,io,BS,kur,d3e,Sur,Rur,bn,Pur,m3e,Bur,Iur,c3e,Nur,qur,f3e,jur,Dur,Gur,ge,KT,g3e,Our,Vur,iZ,Xur,zur,Qur,eM,h3e,Wur,Uur,dZ,Hur,Jur,Yur,oM,u3e,Zur,Kur,mZ,epr,opr,rpr,rM,p3e,tpr,apr,cZ,npr,spr,lpr,tM,_3e,ipr,dpr,fZ,mpr,cpr,fpr,aM,b3e,gpr,hpr,gZ,upr,ppr,_pr,nM,v3e,bpr,vpr,hZ,Fpr,Tpr,Mpr,sM,F3e,Epr,Cpr,uZ,wpr,Apr,Lpr,lM,T3e,ypr,xpr,pZ,$pr,kpr,Spr,iM,M3e,Rpr,Ppr,_Z,Bpr,Ipr,Npr,dM,E3e,qpr,jpr,bZ,Dpr,Gpr,Opr,mM,C3e,Vpr,Xpr,vZ,zpr,Qpr,Wpr,cM,w3e,Upr,Hpr,FZ,Jpr,Ypr,Zpr,fM,A3e,Kpr,e_r,TZ,o_r,r_r,t_r,gM,L3e,a_r,n_r,MZ,s_r,l_r,i_r,hM,y3e,d_r,m_r,EZ,c_r,f_r,g_r,uM,x3e,h_r,u_r,CZ,p_r,__r,b_r,pM,$3e,v_r,F_r,wZ,T_r,M_r,E_r,_M,k3e,C_r,w_r,AZ,A_r,L_r,y_r,bM,S3e,x_r,$_r,LZ,k_r,S_r,R_r,vM,R3e,P_r,B_r,yZ,I_r,N_r,q_r,FM,j_r,P3e,D_r,G_r,B3e,O_r,V_r,TM,Jio,sm,MM,I3e,IS,X_r,N3e,z_r,Yio,Qo,NS,Q_r,lm,W_r,xZ,U_r,H_r,$Z,J_r,Y_r,Z_r,qS,K_r,q3e,e1r,o1r,r1r,St,jS,t1r,j3e,a1r,n1r,im,s1r,D3e,l1r,i1r,kZ,d1r,m1r,c1r,EM,f1r,mo,DS,g1r,G3e,h1r,u1r,vn,p1r,O3e,_1r,b1r,V3e,v1r,F1r,X3e,T1r,M1r,E1r,I,CM,z3e,C1r,w1r,SZ,A1r,L1r,y1r,wM,Q3e,x1r,$1r,RZ,k1r,S1r,R1r,AM,W3e,P1r,B1r,PZ,I1r,N1r,q1r,LM,U3e,j1r,D1r,BZ,G1r,O1r,V1r,yM,H3e,X1r,z1r,IZ,Q1r,W1r,U1r,xM,J3e,H1r,J1r,NZ,Y1r,Z1r,K1r,$M,Y3e,e2r,o2r,qZ,r2r,t2r,a2r,kM,Z3e,n2r,s2r,jZ,l2r,i2r,d2r,SM,K3e,m2r,c2r,DZ,f2r,g2r,h2r,RM,e5e,u2r,p2r,GZ,_2r,b2r,v2r,PM,o5e,F2r,T2r,OZ,M2r,E2r,C2r,BM,r5e,w2r,A2r,VZ,L2r,y2r,x2r,IM,t5e,$2r,k2r,XZ,S2r,R2r,P2r,NM,a5e,B2r,I2r,zZ,N2r,q2r,j2r,qM,n5e,D2r,G2r,QZ,O2r,V2r,X2r,jM,s5e,z2r,Q2r,WZ,W2r,U2r,H2r,DM,l5e,J2r,Y2r,UZ,Z2r,K2r,ebr,GM,i5e,obr,rbr,HZ,tbr,abr,nbr,OM,d5e,sbr,lbr,JZ,ibr,dbr,mbr,VM,m5e,cbr,fbr,YZ,gbr,hbr,ubr,XM,c5e,pbr,_br,ZZ,bbr,vbr,Fbr,zM,f5e,Tbr,Mbr,KZ,Ebr,Cbr,wbr,QM,g5e,Abr,Lbr,eK,ybr,xbr,$br,WM,h5e,kbr,Sbr,oK,Rbr,Pbr,Bbr,UM,u5e,Ibr,Nbr,rK,qbr,jbr,Dbr,HM,p5e,Gbr,Obr,tK,Vbr,Xbr,zbr,JM,_5e,Qbr,Wbr,aK,Ubr,Hbr,Jbr,YM,b5e,Ybr,Zbr,nK,Kbr,evr,ovr,ZM,v5e,rvr,tvr,sK,avr,nvr,svr,KM,F5e,lvr,ivr,lK,dvr,mvr,cvr,eE,T5e,fvr,gvr,iK,hvr,uvr,pvr,oE,M5e,_vr,bvr,dK,vvr,Fvr,Tvr,rE,E5e,Mvr,Evr,mK,Cvr,wvr,Avr,tE,C5e,Lvr,yvr,cK,xvr,$vr,kvr,aE,w5e,Svr,Rvr,fK,Pvr,Bvr,Ivr,nE,A5e,Nvr,qvr,gK,jvr,Dvr,Gvr,sE,L5e,Ovr,Vvr,hK,Xvr,zvr,Qvr,lE,y5e,Wvr,Uvr,uK,Hvr,Jvr,Yvr,iE,x5e,Zvr,Kvr,pK,eFr,oFr,rFr,dE,$5e,tFr,aFr,_K,nFr,sFr,lFr,mE,k5e,iFr,dFr,bK,mFr,cFr,fFr,cE,S5e,gFr,hFr,vK,uFr,pFr,_Fr,fE,R5e,bFr,vFr,FK,FFr,TFr,MFr,gE,P5e,EFr,CFr,TK,wFr,AFr,LFr,hE,B5e,yFr,xFr,MK,$Fr,kFr,SFr,uE,I5e,RFr,PFr,EK,BFr,IFr,NFr,pE,N5e,qFr,jFr,CK,DFr,GFr,OFr,_E,q5e,VFr,XFr,wK,zFr,QFr,WFr,bE,j5e,UFr,HFr,AK,JFr,YFr,ZFr,vE,D5e,KFr,eTr,LK,oTr,rTr,tTr,FE,G5e,aTr,nTr,yK,sTr,lTr,iTr,TE,O5e,dTr,mTr,xK,cTr,fTr,gTr,ME,V5e,hTr,uTr,$K,pTr,_Tr,bTr,EE,X5e,vTr,FTr,kK,TTr,MTr,ETr,CE,z5e,CTr,wTr,SK,ATr,LTr,yTr,wE,Q5e,xTr,$Tr,RK,kTr,STr,RTr,AE,W5e,PTr,BTr,PK,ITr,NTr,qTr,LE,jTr,U5e,DTr,GTr,H5e,OTr,VTr,yE,Zio,dm,xE,J5e,GS,XTr,Y5e,zTr,Kio,Wo,OS,QTr,mm,WTr,BK,UTr,HTr,IK,JTr,YTr,ZTr,VS,KTr,Z5e,eMr,oMr,rMr,Rt,XS,tMr,K5e,aMr,nMr,cm,sMr,e0e,lMr,iMr,NK,dMr,mMr,cMr,$E,fMr,co,zS,gMr,o0e,hMr,uMr,Fn,pMr,r0e,_Mr,bMr,t0e,vMr,FMr,a0e,TMr,MMr,EMr,K,kE,n0e,CMr,wMr,qK,AMr,LMr,yMr,SE,s0e,xMr,$Mr,jK,kMr,SMr,RMr,RE,l0e,PMr,BMr,DK,IMr,NMr,qMr,PE,i0e,jMr,DMr,GK,GMr,OMr,VMr,BE,d0e,XMr,zMr,OK,QMr,WMr,UMr,IE,m0e,HMr,JMr,VK,YMr,ZMr,KMr,NE,c0e,eEr,oEr,XK,rEr,tEr,aEr,qE,f0e,nEr,sEr,zK,lEr,iEr,dEr,jE,g0e,mEr,cEr,QK,fEr,gEr,hEr,DE,h0e,uEr,pEr,WK,_Er,bEr,vEr,GE,u0e,FEr,TEr,UK,MEr,EEr,CEr,OE,p0e,wEr,AEr,HK,LEr,yEr,xEr,VE,_0e,$Er,kEr,JK,SEr,REr,PEr,XE,b0e,BEr,IEr,YK,NEr,qEr,jEr,zE,v0e,DEr,GEr,ZK,OEr,VEr,XEr,QE,F0e,zEr,QEr,KK,WEr,UEr,HEr,WE,T0e,JEr,YEr,eee,ZEr,KEr,e4r,UE,M0e,o4r,r4r,oee,t4r,a4r,n4r,HE,E0e,s4r,l4r,ree,i4r,d4r,m4r,JE,C0e,c4r,f4r,tee,g4r,h4r,u4r,YE,w0e,p4r,_4r,aee,b4r,v4r,F4r,ZE,A0e,T4r,M4r,nee,E4r,C4r,w4r,KE,L0e,A4r,L4r,see,y4r,x4r,$4r,e4,y0e,k4r,S4r,lee,R4r,P4r,B4r,o4,x0e,I4r,N4r,iee,q4r,j4r,D4r,r4,$0e,G4r,O4r,dee,V4r,X4r,z4r,t4,k0e,Q4r,W4r,mee,U4r,H4r,J4r,a4,S0e,Y4r,Z4r,cee,K4r,eCr,oCr,n4,R0e,rCr,tCr,fee,aCr,nCr,sCr,s4,P0e,lCr,iCr,gee,dCr,mCr,cCr,l4,B0e,fCr,gCr,hee,hCr,uCr,pCr,i4,I0e,_Cr,bCr,uee,vCr,FCr,TCr,d4,N0e,MCr,ECr,pee,CCr,wCr,ACr,m4,LCr,q0e,yCr,xCr,j0e,$Cr,kCr,c4,edo,fm,f4,D0e,QS,SCr,G0e,RCr,odo,Uo,WS,PCr,gm,BCr,_ee,ICr,NCr,bee,qCr,jCr,DCr,US,GCr,O0e,OCr,VCr,XCr,Pt,HS,zCr,V0e,QCr,WCr,hm,UCr,X0e,HCr,JCr,vee,YCr,ZCr,KCr,g4,e3r,fo,JS,o3r,z0e,r3r,t3r,Tn,a3r,Q0e,n3r,s3r,W0e,l3r,i3r,U0e,d3r,m3r,c3r,Ye,h4,H0e,f3r,g3r,Fee,h3r,u3r,p3r,u4,J0e,_3r,b3r,Tee,v3r,F3r,T3r,p4,Y0e,M3r,E3r,Mee,C3r,w3r,A3r,_4,Z0e,L3r,y3r,Eee,x3r,$3r,k3r,b4,K0e,S3r,R3r,Cee,P3r,B3r,I3r,v4,ewe,N3r,q3r,wee,j3r,D3r,G3r,F4,owe,O3r,V3r,Aee,X3r,z3r,Q3r,T4,W3r,rwe,U3r,H3r,twe,J3r,Y3r,M4,rdo,um,E4,awe,YS,Z3r,nwe,K3r,tdo,Ho,ZS,e5r,pm,o5r,Lee,r5r,t5r,yee,a5r,n5r,s5r,KS,l5r,swe,i5r,d5r,m5r,Bt,eR,c5r,lwe,f5r,g5r,_m,h5r,iwe,u5r,p5r,xee,_5r,b5r,v5r,C4,F5r,go,oR,T5r,dwe,M5r,E5r,Mn,C5r,mwe,w5r,A5r,cwe,L5r,y5r,fwe,x5r,$5r,k5r,U,w4,gwe,S5r,R5r,$ee,P5r,B5r,I5r,A4,hwe,N5r,q5r,kee,j5r,D5r,G5r,L4,uwe,O5r,V5r,See,X5r,z5r,Q5r,y4,pwe,W5r,U5r,Ree,H5r,J5r,Y5r,x4,_we,Z5r,K5r,Pee,e0r,o0r,r0r,$4,bwe,t0r,a0r,Bee,n0r,s0r,l0r,k4,vwe,i0r,d0r,Iee,m0r,c0r,f0r,S4,Fwe,g0r,h0r,Nee,u0r,p0r,_0r,R4,Twe,b0r,v0r,qee,F0r,T0r,M0r,P4,Mwe,E0r,C0r,jee,w0r,A0r,L0r,B4,Ewe,y0r,x0r,Dee,$0r,k0r,S0r,I4,Cwe,R0r,P0r,Gee,B0r,I0r,N0r,N4,wwe,q0r,j0r,Oee,D0r,G0r,O0r,q4,Awe,V0r,X0r,Vee,z0r,Q0r,W0r,j4,Lwe,U0r,H0r,Xee,J0r,Y0r,Z0r,D4,ywe,K0r,ewr,zee,owr,rwr,twr,G4,xwe,awr,nwr,Qee,swr,lwr,iwr,O4,$we,dwr,mwr,Wee,cwr,fwr,gwr,V4,kwe,hwr,uwr,Uee,pwr,_wr,bwr,X4,Swe,vwr,Fwr,Hee,Twr,Mwr,Ewr,z4,Rwe,Cwr,wwr,Jee,Awr,Lwr,ywr,Q4,Pwe,xwr,$wr,Yee,kwr,Swr,Rwr,W4,Bwe,Pwr,Bwr,Zee,Iwr,Nwr,qwr,U4,Iwe,jwr,Dwr,Kee,Gwr,Owr,Vwr,H4,Nwe,Xwr,zwr,eoe,Qwr,Wwr,Uwr,J4,qwe,Hwr,Jwr,ooe,Ywr,Zwr,Kwr,Y4,jwe,eAr,oAr,roe,rAr,tAr,aAr,Z4,Dwe,nAr,sAr,toe,lAr,iAr,dAr,K4,Gwe,mAr,cAr,aoe,fAr,gAr,hAr,eC,Owe,uAr,pAr,noe,_Ar,bAr,vAr,oC,Vwe,FAr,TAr,soe,MAr,EAr,CAr,rC,Xwe,wAr,AAr,loe,LAr,yAr,xAr,tC,zwe,$Ar,kAr,ioe,SAr,RAr,PAr,aC,Qwe,BAr,IAr,doe,NAr,qAr,jAr,nC,Wwe,DAr,GAr,moe,OAr,VAr,XAr,sC,Uwe,zAr,QAr,coe,WAr,UAr,HAr,lC,Hwe,JAr,YAr,foe,ZAr,KAr,e6r,iC,Jwe,o6r,r6r,goe,t6r,a6r,n6r,dC,Ywe,s6r,l6r,hoe,i6r,d6r,m6r,mC,Zwe,c6r,f6r,uoe,g6r,h6r,u6r,cC,Kwe,p6r,_6r,poe,b6r,v6r,F6r,fC,eAe,T6r,M6r,_oe,E6r,C6r,w6r,gC,A6r,oAe,L6r,y6r,rAe,x6r,$6r,hC,ado,bm,uC,tAe,rR,k6r,aAe,S6r,ndo,Jo,tR,R6r,vm,P6r,boe,B6r,I6r,voe,N6r,q6r,j6r,aR,D6r,nAe,G6r,O6r,V6r,It,nR,X6r,sAe,z6r,Q6r,Fm,W6r,lAe,U6r,H6r,Foe,J6r,Y6r,Z6r,pC,K6r,ho,sR,e7r,iAe,o7r,r7r,En,t7r,dAe,a7r,n7r,mAe,s7r,l7r,cAe,i7r,d7r,m7r,O,_C,fAe,c7r,f7r,Toe,g7r,h7r,u7r,bC,gAe,p7r,_7r,Moe,b7r,v7r,F7r,vC,hAe,T7r,M7r,Eoe,E7r,C7r,w7r,FC,uAe,A7r,L7r,Coe,y7r,x7r,$7r,TC,pAe,k7r,S7r,woe,R7r,P7r,B7r,MC,_Ae,I7r,N7r,Aoe,q7r,j7r,D7r,EC,bAe,G7r,O7r,Loe,V7r,X7r,z7r,CC,vAe,Q7r,W7r,yoe,U7r,H7r,J7r,wC,FAe,Y7r,Z7r,xoe,K7r,e8r,o8r,AC,TAe,r8r,t8r,$oe,a8r,n8r,s8r,LC,MAe,l8r,i8r,koe,d8r,m8r,c8r,yC,EAe,f8r,g8r,Soe,h8r,u8r,p8r,xC,CAe,_8r,b8r,Roe,v8r,F8r,T8r,$C,wAe,M8r,E8r,Poe,C8r,w8r,A8r,kC,AAe,L8r,y8r,Boe,x8r,$8r,k8r,SC,LAe,S8r,R8r,Ioe,P8r,B8r,I8r,RC,yAe,N8r,q8r,Noe,j8r,D8r,G8r,PC,xAe,O8r,V8r,qoe,X8r,z8r,Q8r,BC,$Ae,W8r,U8r,joe,H8r,J8r,Y8r,IC,kAe,Z8r,K8r,Doe,eLr,oLr,rLr,NC,SAe,tLr,aLr,Goe,nLr,sLr,lLr,qC,RAe,iLr,dLr,Ooe,mLr,cLr,fLr,jC,PAe,gLr,hLr,Voe,uLr,pLr,_Lr,DC,BAe,bLr,vLr,Xoe,FLr,TLr,MLr,GC,IAe,ELr,CLr,zoe,wLr,ALr,LLr,OC,NAe,yLr,xLr,Qoe,$Lr,kLr,SLr,VC,qAe,RLr,PLr,Woe,BLr,ILr,NLr,XC,jAe,qLr,jLr,Uoe,DLr,GLr,OLr,zC,DAe,VLr,XLr,Hoe,zLr,QLr,WLr,QC,GAe,ULr,HLr,Joe,JLr,YLr,ZLr,WC,OAe,KLr,eyr,Yoe,oyr,ryr,tyr,UC,VAe,ayr,nyr,Zoe,syr,lyr,iyr,HC,XAe,dyr,myr,Koe,cyr,fyr,gyr,JC,zAe,hyr,uyr,ere,pyr,_yr,byr,YC,QAe,vyr,Fyr,ore,Tyr,Myr,Eyr,ZC,WAe,Cyr,wyr,rre,Ayr,Lyr,yyr,KC,UAe,xyr,$yr,tre,kyr,Syr,Ryr,e3,HAe,Pyr,Byr,are,Iyr,Nyr,qyr,o3,JAe,jyr,Dyr,nre,Gyr,Oyr,Vyr,r3,YAe,Xyr,zyr,sre,Qyr,Wyr,Uyr,t3,ZAe,Hyr,Jyr,lre,Yyr,Zyr,Kyr,a3,KAe,e9r,o9r,ire,r9r,t9r,a9r,n3,e6e,n9r,s9r,dre,l9r,i9r,d9r,s3,o6e,m9r,c9r,mre,f9r,g9r,h9r,l3,r6e,u9r,p9r,cre,_9r,b9r,v9r,i3,t6e,F9r,T9r,fre,M9r,E9r,C9r,d3,a6e,w9r,A9r,gre,L9r,y9r,x9r,m3,n6e,$9r,k9r,hre,S9r,R9r,P9r,c3,s6e,B9r,I9r,ure,N9r,q9r,j9r,f3,D9r,l6e,G9r,O9r,i6e,V9r,X9r,g3,sdo,Tm,h3,d6e,lR,z9r,m6e,Q9r,ldo,Yo,iR,W9r,Mm,U9r,pre,H9r,J9r,_re,Y9r,Z9r,K9r,dR,exr,c6e,oxr,rxr,txr,Nt,mR,axr,f6e,nxr,sxr,Em,lxr,g6e,ixr,dxr,bre,mxr,cxr,fxr,u3,gxr,uo,cR,hxr,h6e,uxr,pxr,Cn,_xr,u6e,bxr,vxr,p6e,Fxr,Txr,_6e,Mxr,Exr,Cxr,b6e,p3,v6e,wxr,Axr,vre,Lxr,yxr,xxr,_3,$xr,F6e,kxr,Sxr,T6e,Rxr,Pxr,b3,ido,Cm,v3,M6e,fR,Bxr,E6e,Ixr,ddo,Zo,gR,Nxr,wm,qxr,Fre,jxr,Dxr,Tre,Gxr,Oxr,Vxr,hR,Xxr,C6e,zxr,Qxr,Wxr,qt,uR,Uxr,w6e,Hxr,Jxr,Am,Yxr,A6e,Zxr,Kxr,Mre,e$r,o$r,r$r,F3,t$r,po,pR,a$r,L6e,n$r,s$r,wn,l$r,y6e,i$r,d$r,x6e,m$r,c$r,$6e,f$r,g$r,h$r,Lm,T3,k6e,u$r,p$r,Ere,_$r,b$r,v$r,M3,S6e,F$r,T$r,Cre,M$r,E$r,C$r,E3,R6e,w$r,A$r,wre,L$r,y$r,x$r,C3,$$r,P6e,k$r,S$r,B6e,R$r,P$r,w3,mdo,ym,A3,I6e,_R,B$r,N6e,I$r,cdo,Ko,bR,N$r,xm,q$r,Are,j$r,D$r,Lre,G$r,O$r,V$r,vR,X$r,q6e,z$r,Q$r,W$r,jt,FR,U$r,j6e,H$r,J$r,$m,Y$r,D6e,Z$r,K$r,yre,ekr,okr,rkr,L3,tkr,_o,TR,akr,G6e,nkr,skr,An,lkr,O6e,ikr,dkr,V6e,mkr,ckr,X6e,fkr,gkr,hkr,Fe,y3,z6e,ukr,pkr,xre,_kr,bkr,vkr,x3,Q6e,Fkr,Tkr,$re,Mkr,Ekr,Ckr,$3,W6e,wkr,Akr,kre,Lkr,ykr,xkr,k3,U6e,$kr,kkr,Sre,Skr,Rkr,Pkr,jl,H6e,Bkr,Ikr,Rre,Nkr,qkr,Pre,jkr,Dkr,Gkr,S3,J6e,Okr,Vkr,Bre,Xkr,zkr,Qkr,Dl,Y6e,Wkr,Ukr,Ire,Hkr,Jkr,Nre,Ykr,Zkr,Kkr,R3,Z6e,eSr,oSr,qre,rSr,tSr,aSr,P3,K6e,nSr,sSr,jre,lSr,iSr,dSr,Dt,e7e,mSr,cSr,Dre,fSr,gSr,Gre,hSr,uSr,Ore,pSr,_Sr,bSr,B3,o7e,vSr,FSr,Vre,TSr,MSr,ESr,I3,r7e,CSr,wSr,Xre,ASr,LSr,ySr,N3,t7e,xSr,$Sr,zre,kSr,SSr,RSr,q3,a7e,PSr,BSr,Qre,ISr,NSr,qSr,j3,n7e,jSr,DSr,Wre,GSr,OSr,VSr,D3,s7e,XSr,zSr,Ure,QSr,WSr,USr,G3,l7e,HSr,JSr,Hre,YSr,ZSr,KSr,O3,i7e,eRr,oRr,Jre,rRr,tRr,aRr,V3,d7e,nRr,sRr,Yre,lRr,iRr,dRr,X3,mRr,m7e,cRr,fRr,c7e,gRr,hRr,z3,fdo,km,Q3,f7e,MR,uRr,g7e,pRr,gdo,er,ER,_Rr,Sm,bRr,Zre,vRr,FRr,Kre,TRr,MRr,ERr,CR,CRr,h7e,wRr,ARr,LRr,Gt,wR,yRr,u7e,xRr,$Rr,Rm,kRr,p7e,SRr,RRr,ete,PRr,BRr,IRr,W3,NRr,bo,AR,qRr,_7e,jRr,DRr,Ln,GRr,b7e,ORr,VRr,v7e,XRr,zRr,F7e,QRr,WRr,URr,T7e,U3,M7e,HRr,JRr,ote,YRr,ZRr,KRr,H3,ePr,E7e,oPr,rPr,C7e,tPr,aPr,J3,hdo,Pm,Y3,w7e,LR,nPr,A7e,sPr,udo,or,yR,lPr,Bm,iPr,rte,dPr,mPr,tte,cPr,fPr,gPr,xR,hPr,L7e,uPr,pPr,_Pr,Ot,$R,bPr,y7e,vPr,FPr,Im,TPr,x7e,MPr,EPr,ate,CPr,wPr,APr,Z3,LPr,vo,kR,yPr,$7e,xPr,$Pr,yn,kPr,k7e,SPr,RPr,S7e,PPr,BPr,R7e,IPr,NPr,qPr,P7e,K3,B7e,jPr,DPr,nte,GPr,OPr,VPr,e5,XPr,I7e,zPr,QPr,N7e,WPr,UPr,o5,pdo,Nm,r5,q7e,SR,HPr,j7e,JPr,_do,rr,RR,YPr,qm,ZPr,ste,KPr,eBr,lte,oBr,rBr,tBr,PR,aBr,D7e,nBr,sBr,lBr,Vt,BR,iBr,G7e,dBr,mBr,jm,cBr,O7e,fBr,gBr,ite,hBr,uBr,pBr,t5,_Br,Fo,IR,bBr,V7e,vBr,FBr,xn,TBr,X7e,MBr,EBr,z7e,CBr,wBr,Q7e,ABr,LBr,yBr,W7e,a5,U7e,xBr,$Br,dte,kBr,SBr,RBr,n5,PBr,H7e,BBr,IBr,J7e,NBr,qBr,s5,bdo,Dm,l5,Y7e,NR,jBr,Z7e,DBr,vdo,tr,qR,GBr,Gm,OBr,mte,VBr,XBr,cte,zBr,QBr,WBr,jR,UBr,K7e,HBr,JBr,YBr,Xt,DR,ZBr,e8e,KBr,eIr,Om,oIr,o8e,rIr,tIr,fte,aIr,nIr,sIr,i5,lIr,To,GR,iIr,r8e,dIr,mIr,$n,cIr,t8e,fIr,gIr,a8e,hIr,uIr,n8e,pIr,_Ir,bIr,Ne,d5,s8e,vIr,FIr,gte,TIr,MIr,EIr,m5,l8e,CIr,wIr,hte,AIr,LIr,yIr,c5,i8e,xIr,$Ir,ute,kIr,SIr,RIr,f5,d8e,PIr,BIr,pte,IIr,NIr,qIr,g5,m8e,jIr,DIr,_te,GIr,OIr,VIr,h5,c8e,XIr,zIr,bte,QIr,WIr,UIr,u5,f8e,HIr,JIr,vte,YIr,ZIr,KIr,p5,g8e,eNr,oNr,Fte,rNr,tNr,aNr,_5,h8e,nNr,sNr,Tte,lNr,iNr,dNr,b5,mNr,u8e,cNr,fNr,p8e,gNr,hNr,v5,Fdo,Vm,F5,_8e,OR,uNr,b8e,pNr,Tdo,ar,VR,_Nr,Xm,bNr,Mte,vNr,FNr,Ete,TNr,MNr,ENr,XR,CNr,v8e,wNr,ANr,LNr,zt,zR,yNr,F8e,xNr,$Nr,zm,kNr,T8e,SNr,RNr,Cte,PNr,BNr,INr,T5,NNr,Mo,QR,qNr,M8e,jNr,DNr,kn,GNr,E8e,ONr,VNr,C8e,XNr,zNr,w8e,QNr,WNr,UNr,Ft,M5,A8e,HNr,JNr,wte,YNr,ZNr,KNr,E5,L8e,eqr,oqr,Ate,rqr,tqr,aqr,C5,y8e,nqr,sqr,Lte,lqr,iqr,dqr,w5,x8e,mqr,cqr,yte,fqr,gqr,hqr,A5,$8e,uqr,pqr,xte,_qr,bqr,vqr,L5,Fqr,k8e,Tqr,Mqr,S8e,Eqr,Cqr,y5,Mdo,Qm,x5,R8e,WR,wqr,P8e,Aqr,Edo,nr,UR,Lqr,Wm,yqr,$te,xqr,$qr,kte,kqr,Sqr,Rqr,HR,Pqr,B8e,Bqr,Iqr,Nqr,Qt,JR,qqr,I8e,jqr,Dqr,Um,Gqr,N8e,Oqr,Vqr,Ste,Xqr,zqr,Qqr,$5,Wqr,Eo,YR,Uqr,q8e,Hqr,Jqr,Sn,Yqr,j8e,Zqr,Kqr,D8e,ejr,ojr,G8e,rjr,tjr,ajr,xe,k5,O8e,njr,sjr,Rte,ljr,ijr,djr,S5,V8e,mjr,cjr,Pte,fjr,gjr,hjr,R5,X8e,ujr,pjr,Bte,_jr,bjr,vjr,P5,z8e,Fjr,Tjr,Ite,Mjr,Ejr,Cjr,B5,Q8e,wjr,Ajr,Nte,Ljr,yjr,xjr,I5,W8e,$jr,kjr,qte,Sjr,Rjr,Pjr,N5,U8e,Bjr,Ijr,jte,Njr,qjr,jjr,q5,H8e,Djr,Gjr,Dte,Ojr,Vjr,Xjr,j5,J8e,zjr,Qjr,Gte,Wjr,Ujr,Hjr,D5,Y8e,Jjr,Yjr,Ote,Zjr,Kjr,eDr,G5,oDr,Z8e,rDr,tDr,K8e,aDr,nDr,O5,Cdo,Hm,V5,eLe,ZR,sDr,oLe,lDr,wdo,sr,KR,iDr,Jm,dDr,Vte,mDr,cDr,Xte,fDr,gDr,hDr,eP,uDr,rLe,pDr,_Dr,bDr,Wt,oP,vDr,tLe,FDr,TDr,Ym,MDr,aLe,EDr,CDr,zte,wDr,ADr,LDr,X5,yDr,Co,rP,xDr,nLe,$Dr,kDr,Rn,SDr,sLe,RDr,PDr,lLe,BDr,IDr,iLe,NDr,qDr,jDr,Zm,z5,dLe,DDr,GDr,Qte,ODr,VDr,XDr,Q5,mLe,zDr,QDr,Wte,WDr,UDr,HDr,W5,cLe,JDr,YDr,Ute,ZDr,KDr,eGr,U5,oGr,fLe,rGr,tGr,gLe,aGr,nGr,H5,Ado,Km,J5,hLe,tP,sGr,uLe,lGr,Ldo,lr,aP,iGr,ec,dGr,Hte,mGr,cGr,Jte,fGr,gGr,hGr,nP,uGr,pLe,pGr,_Gr,bGr,Ut,sP,vGr,_Le,FGr,TGr,oc,MGr,bLe,EGr,CGr,Yte,wGr,AGr,LGr,Y5,yGr,wo,lP,xGr,vLe,$Gr,kGr,Pn,SGr,FLe,RGr,PGr,TLe,BGr,IGr,MLe,NGr,qGr,jGr,Tt,Z5,ELe,DGr,GGr,Zte,OGr,VGr,XGr,K5,CLe,zGr,QGr,Kte,WGr,UGr,HGr,e0,wLe,JGr,YGr,eae,ZGr,KGr,eOr,o0,ALe,oOr,rOr,oae,tOr,aOr,nOr,r0,LLe,sOr,lOr,rae,iOr,dOr,mOr,t0,cOr,yLe,fOr,gOr,xLe,hOr,uOr,a0,ydo,rc,n0,$Le,iP,pOr,kLe,_Or,xdo,ir,dP,bOr,tc,vOr,tae,FOr,TOr,aae,MOr,EOr,COr,mP,wOr,SLe,AOr,LOr,yOr,Ht,cP,xOr,RLe,$Or,kOr,ac,SOr,PLe,ROr,POr,nae,BOr,IOr,NOr,s0,qOr,Ao,fP,jOr,BLe,DOr,GOr,Bn,OOr,ILe,VOr,XOr,NLe,zOr,QOr,qLe,WOr,UOr,HOr,In,l0,jLe,JOr,YOr,sae,ZOr,KOr,eVr,i0,DLe,oVr,rVr,lae,tVr,aVr,nVr,d0,GLe,sVr,lVr,iae,iVr,dVr,mVr,m0,OLe,cVr,fVr,dae,gVr,hVr,uVr,c0,pVr,VLe,_Vr,bVr,XLe,vVr,FVr,f0,$do,nc,g0,zLe,gP,TVr,QLe,MVr,kdo,dr,hP,EVr,sc,CVr,mae,wVr,AVr,cae,LVr,yVr,xVr,uP,$Vr,WLe,kVr,SVr,RVr,Jt,pP,PVr,ULe,BVr,IVr,lc,NVr,HLe,qVr,jVr,fae,DVr,GVr,OVr,h0,VVr,Lo,_P,XVr,JLe,zVr,QVr,Nn,WVr,YLe,UVr,HVr,ZLe,JVr,YVr,KLe,ZVr,KVr,eXr,Mt,u0,eye,oXr,rXr,gae,tXr,aXr,nXr,p0,oye,sXr,lXr,hae,iXr,dXr,mXr,_0,rye,cXr,fXr,uae,gXr,hXr,uXr,b0,tye,pXr,_Xr,pae,bXr,vXr,FXr,v0,aye,TXr,MXr,_ae,EXr,CXr,wXr,F0,AXr,nye,LXr,yXr,sye,xXr,$Xr,T0,Sdo,ic,M0,lye,bP,kXr,iye,SXr,Rdo,mr,vP,RXr,dc,PXr,bae,BXr,IXr,vae,NXr,qXr,jXr,FP,DXr,dye,GXr,OXr,VXr,Yt,TP,XXr,mye,zXr,QXr,mc,WXr,cye,UXr,HXr,Fae,JXr,YXr,ZXr,E0,KXr,yo,MP,ezr,fye,ozr,rzr,qn,tzr,gye,azr,nzr,hye,szr,lzr,uye,izr,dzr,mzr,pye,C0,_ye,czr,fzr,Tae,gzr,hzr,uzr,w0,pzr,bye,_zr,bzr,vye,vzr,Fzr,A0,Pdo,cc,L0,Fye,EP,Tzr,Tye,Mzr,Bdo,cr,CP,Ezr,fc,Czr,Mae,wzr,Azr,Eae,Lzr,yzr,xzr,wP,$zr,Mye,kzr,Szr,Rzr,Zt,AP,Pzr,Eye,Bzr,Izr,gc,Nzr,Cye,qzr,jzr,Cae,Dzr,Gzr,Ozr,y0,Vzr,xo,LP,Xzr,wye,zzr,Qzr,jn,Wzr,Aye,Uzr,Hzr,Lye,Jzr,Yzr,yye,Zzr,Kzr,eQr,fr,x0,xye,oQr,rQr,wae,tQr,aQr,nQr,$0,$ye,sQr,lQr,Aae,iQr,dQr,mQr,k0,kye,cQr,fQr,Lae,gQr,hQr,uQr,S0,Sye,pQr,_Qr,yae,bQr,vQr,FQr,R0,Rye,TQr,MQr,xae,EQr,CQr,wQr,P0,Pye,AQr,LQr,$ae,yQr,xQr,$Qr,B0,kQr,Bye,SQr,RQr,Iye,PQr,BQr,I0,Ido,hc,N0,Nye,yP,IQr,qye,NQr,Ndo,gr,xP,qQr,uc,jQr,kae,DQr,GQr,Sae,OQr,VQr,XQr,$P,zQr,jye,QQr,WQr,UQr,Kt,kP,HQr,Dye,JQr,YQr,pc,ZQr,Gye,KQr,eWr,Rae,oWr,rWr,tWr,q0,aWr,$o,SP,nWr,Oye,sWr,lWr,Dn,iWr,Vye,dWr,mWr,Xye,cWr,fWr,zye,gWr,hWr,uWr,Qye,j0,Wye,pWr,_Wr,Pae,bWr,vWr,FWr,D0,TWr,Uye,MWr,EWr,Hye,CWr,wWr,G0,qdo,_c,O0,Jye,RP,AWr,Yye,LWr,jdo,hr,PP,yWr,bc,xWr,Bae,$Wr,kWr,Iae,SWr,RWr,PWr,BP,BWr,Zye,IWr,NWr,qWr,ea,IP,jWr,Kye,DWr,GWr,vc,OWr,e9e,VWr,XWr,Nae,zWr,QWr,WWr,V0,UWr,ko,NP,HWr,o9e,JWr,YWr,Gn,ZWr,r9e,KWr,eUr,t9e,oUr,rUr,a9e,tUr,aUr,nUr,n9e,X0,s9e,sUr,lUr,qae,iUr,dUr,mUr,z0,cUr,l9e,fUr,gUr,i9e,hUr,uUr,Q0,Ddo,Fc,W0,d9e,qP,pUr,m9e,_Ur,Gdo,ur,jP,bUr,Tc,vUr,jae,FUr,TUr,Dae,MUr,EUr,CUr,DP,wUr,c9e,AUr,LUr,yUr,oa,GP,xUr,f9e,$Ur,kUr,Mc,SUr,g9e,RUr,PUr,Gae,BUr,IUr,NUr,U0,qUr,zr,OP,jUr,h9e,DUr,GUr,On,OUr,u9e,VUr,XUr,p9e,zUr,QUr,_9e,WUr,UUr,HUr,P,H0,b9e,JUr,YUr,Oae,ZUr,KUr,eHr,J0,v9e,oHr,rHr,Vae,tHr,aHr,nHr,Y0,F9e,sHr,lHr,Xae,iHr,dHr,mHr,Z0,T9e,cHr,fHr,zae,gHr,hHr,uHr,K0,M9e,pHr,_Hr,Qae,bHr,vHr,FHr,ew,E9e,THr,MHr,Wae,EHr,CHr,wHr,ow,C9e,AHr,LHr,Uae,yHr,xHr,$Hr,rw,w9e,kHr,SHr,Hae,RHr,PHr,BHr,tw,A9e,IHr,NHr,Jae,qHr,jHr,DHr,aw,L9e,GHr,OHr,Yae,VHr,XHr,zHr,nw,y9e,QHr,WHr,Zae,UHr,HHr,JHr,sw,x9e,YHr,ZHr,Kae,KHr,eJr,oJr,lw,$9e,rJr,tJr,ene,aJr,nJr,sJr,iw,k9e,lJr,iJr,one,dJr,mJr,cJr,dw,S9e,fJr,gJr,rne,hJr,uJr,pJr,mw,R9e,_Jr,bJr,tne,vJr,FJr,TJr,cw,P9e,MJr,EJr,ane,CJr,wJr,AJr,fw,B9e,LJr,yJr,nne,xJr,$Jr,kJr,gw,I9e,SJr,RJr,sne,PJr,BJr,IJr,hw,N9e,NJr,qJr,lne,jJr,DJr,GJr,Gl,q9e,OJr,VJr,ine,XJr,zJr,dne,QJr,WJr,UJr,uw,j9e,HJr,JJr,mne,YJr,ZJr,KJr,pw,D9e,eYr,oYr,cne,rYr,tYr,aYr,_w,G9e,nYr,sYr,fne,lYr,iYr,dYr,bw,O9e,mYr,cYr,gne,fYr,gYr,hYr,vw,V9e,uYr,pYr,hne,_Yr,bYr,vYr,Fw,X9e,FYr,TYr,une,MYr,EYr,CYr,Tw,z9e,wYr,AYr,pne,LYr,yYr,xYr,Mw,Q9e,$Yr,kYr,_ne,SYr,RYr,PYr,Ew,W9e,BYr,IYr,bne,NYr,qYr,jYr,Cw,U9e,DYr,GYr,vne,OYr,VYr,XYr,ww,H9e,zYr,QYr,Fne,WYr,UYr,HYr,Aw,J9e,JYr,YYr,Tne,ZYr,KYr,eZr,Lw,Y9e,oZr,rZr,Mne,tZr,aZr,nZr,yw,Z9e,sZr,lZr,Ene,iZr,dZr,mZr,xw,K9e,cZr,fZr,Cne,gZr,hZr,uZr,$w,exe,pZr,_Zr,wne,bZr,vZr,FZr,kw,oxe,TZr,MZr,Ane,EZr,CZr,wZr,Sw,rxe,AZr,LZr,Lne,yZr,xZr,$Zr,Rw,txe,kZr,SZr,yne,RZr,PZr,BZr,Pw,axe,IZr,NZr,xne,qZr,jZr,DZr,Bw,nxe,GZr,OZr,$ne,VZr,XZr,zZr,Iw,sxe,QZr,WZr,kne,UZr,HZr,JZr,Nw,lxe,YZr,ZZr,Sne,KZr,eKr,oKr,qw,ixe,rKr,tKr,Rne,aKr,nKr,sKr,jw,dxe,lKr,iKr,Pne,dKr,mKr,cKr,Dw,mxe,fKr,gKr,Bne,hKr,uKr,pKr,Gw,cxe,_Kr,bKr,Ine,vKr,FKr,TKr,Ow,fxe,MKr,EKr,Nne,CKr,wKr,AKr,Vw,gxe,LKr,yKr,qne,xKr,$Kr,kKr,Xw,hxe,SKr,RKr,jne,PKr,BKr,IKr,zw,uxe,NKr,qKr,Dne,jKr,DKr,GKr,Qw,pxe,OKr,VKr,Gne,XKr,zKr,QKr,Ww,_xe,WKr,UKr,One,HKr,JKr,YKr,Uw,bxe,ZKr,KKr,Vne,eet,oet,ret,Hw,vxe,tet,aet,Xne,net,set,iet,Jw,Fxe,det,met,zne,cet,fet,get,Yw,Txe,het,uet,Qne,pet,_et,bet,Zw,Odo,Ec,Kw,Mxe,VP,vet,Exe,Fet,Vdo,pr,XP,Tet,Cc,Met,Wne,Eet,Cet,Une,wet,Aet,Let,zP,yet,Cxe,xet,$et,ket,ra,QP,Set,wxe,Ret,Pet,wc,Bet,Axe,Iet,Net,Hne,qet,jet,Det,eA,Get,Qr,WP,Oet,Lxe,Vet,Xet,Vn,zet,yxe,Qet,Wet,xxe,Uet,Het,$xe,Jet,Yet,Zet,de,oA,kxe,Ket,eot,Jne,oot,rot,tot,rA,Sxe,aot,not,Yne,sot,lot,iot,tA,Rxe,dot,mot,Zne,cot,fot,got,aA,Pxe,hot,uot,Kne,pot,_ot,bot,nA,Bxe,vot,Fot,ese,Tot,Mot,Eot,sA,Ixe,Cot,wot,ose,Aot,Lot,yot,lA,Nxe,xot,$ot,rse,kot,Sot,Rot,iA,qxe,Pot,Bot,tse,Iot,Not,qot,dA,jxe,jot,Dot,ase,Got,Oot,Vot,mA,Dxe,Xot,zot,nse,Qot,Wot,Uot,cA,Gxe,Hot,Jot,sse,Yot,Zot,Kot,fA,Oxe,ert,ort,lse,rrt,trt,art,gA,Vxe,nrt,srt,ise,lrt,irt,drt,hA,Xxe,mrt,crt,dse,frt,grt,hrt,uA,zxe,urt,prt,mse,_rt,brt,vrt,pA,Qxe,Frt,Trt,cse,Mrt,Ert,Crt,_A,Wxe,wrt,Art,fse,Lrt,yrt,xrt,bA,Uxe,$rt,krt,gse,Srt,Rrt,Prt,vA,Hxe,Brt,Irt,hse,Nrt,qrt,jrt,FA,Jxe,Drt,Grt,use,Ort,Vrt,Xrt,TA,Yxe,zrt,Qrt,pse,Wrt,Urt,Hrt,MA,Zxe,Jrt,Yrt,_se,Zrt,Krt,ett,EA,Kxe,ott,rtt,bse,ttt,att,ntt,CA,Xdo,Ac,wA,e$e,UP,stt,o$e,ltt,zdo,_r,HP,itt,Lc,dtt,vse,mtt,ctt,Fse,ftt,gtt,htt,JP,utt,r$e,ptt,_tt,btt,ta,YP,vtt,t$e,Ftt,Ttt,yc,Mtt,a$e,Ett,Ctt,Tse,wtt,Att,Ltt,AA,ytt,Wr,ZP,xtt,n$e,$tt,ktt,Xn,Stt,s$e,Rtt,Ptt,l$e,Btt,Itt,i$e,Ntt,qtt,jtt,Ce,LA,d$e,Dtt,Gtt,Mse,Ott,Vtt,Xtt,yA,m$e,ztt,Qtt,Ese,Wtt,Utt,Htt,xA,c$e,Jtt,Ytt,Cse,Ztt,Ktt,eat,$A,f$e,oat,rat,wse,tat,aat,nat,kA,g$e,sat,lat,Ase,iat,dat,mat,SA,h$e,cat,fat,Lse,gat,hat,uat,RA,u$e,pat,_at,yse,bat,vat,Fat,PA,p$e,Tat,Mat,xse,Eat,Cat,wat,BA,_$e,Aat,Lat,$se,yat,xat,$at,IA,b$e,kat,Sat,kse,Rat,Pat,Bat,NA,v$e,Iat,Nat,Sse,qat,jat,Dat,qA,F$e,Gat,Oat,Rse,Vat,Xat,zat,jA,T$e,Qat,Wat,Pse,Uat,Hat,Jat,DA,M$e,Yat,Zat,Bse,Kat,ent,ont,GA,Qdo,xc,OA,E$e,KP,rnt,C$e,tnt,Wdo,br,eB,ant,$c,nnt,Ise,snt,lnt,Nse,int,dnt,mnt,oB,cnt,w$e,fnt,gnt,hnt,aa,rB,unt,A$e,pnt,_nt,kc,bnt,L$e,vnt,Fnt,qse,Tnt,Mnt,Ent,VA,Cnt,Ur,tB,wnt,y$e,Ant,Lnt,zn,ynt,x$e,xnt,$nt,$$e,knt,Snt,k$e,Rnt,Pnt,Bnt,$e,XA,S$e,Int,Nnt,jse,qnt,jnt,Dnt,zA,R$e,Gnt,Ont,Dse,Vnt,Xnt,znt,QA,P$e,Qnt,Wnt,Gse,Unt,Hnt,Jnt,Ol,B$e,Ynt,Znt,Ose,Knt,est,Vse,ost,rst,tst,WA,I$e,ast,nst,Xse,sst,lst,ist,UA,N$e,dst,mst,zse,cst,fst,gst,HA,q$e,hst,ust,Qse,pst,_st,bst,JA,j$e,vst,Fst,Wse,Tst,Mst,Est,YA,D$e,Cst,wst,Use,Ast,Lst,yst,ZA,G$e,xst,$st,Hse,kst,Sst,Rst,KA,Udo,Sc,e6,O$e,aB,Pst,V$e,Bst,Hdo,vr,nB,Ist,Rc,Nst,Jse,qst,jst,Yse,Dst,Gst,Ost,sB,Vst,X$e,Xst,zst,Qst,na,lB,Wst,z$e,Ust,Hst,Pc,Jst,Q$e,Yst,Zst,Zse,Kst,elt,olt,o6,rlt,Hr,iB,tlt,W$e,alt,nlt,Qn,slt,U$e,llt,ilt,H$e,dlt,mlt,J$e,clt,flt,glt,Bc,r6,Y$e,hlt,ult,Kse,plt,_lt,blt,t6,Z$e,vlt,Flt,ele,Tlt,Mlt,Elt,a6,K$e,Clt,wlt,ole,Alt,Llt,ylt,n6,Jdo,Ic,s6,eke,dB,xlt,oke,$lt,Ydo,Fr,mB,klt,Nc,Slt,rle,Rlt,Plt,tle,Blt,Ilt,Nlt,cB,qlt,rke,jlt,Dlt,Glt,sa,fB,Olt,tke,Vlt,Xlt,qc,zlt,ake,Qlt,Wlt,ale,Ult,Hlt,Jlt,l6,Ylt,Jr,gB,Zlt,nke,Klt,eit,Wn,oit,ske,rit,tit,lke,ait,nit,ike,sit,lit,iit,he,i6,dke,dit,mit,nle,cit,fit,git,d6,mke,hit,uit,sle,pit,_it,bit,m6,cke,vit,Fit,lle,Tit,Mit,Eit,c6,fke,Cit,wit,ile,Ait,Lit,yit,f6,gke,xit,$it,dle,kit,Sit,Rit,g6,hke,Pit,Bit,mle,Iit,Nit,qit,h6,uke,jit,Dit,cle,Git,Oit,Vit,u6,pke,Xit,zit,fle,Qit,Wit,Uit,p6,_ke,Hit,Jit,gle,Yit,Zit,Kit,_6,bke,edt,odt,hle,rdt,tdt,adt,b6,vke,ndt,sdt,ule,ldt,idt,ddt,v6,Fke,mdt,cdt,ple,fdt,gdt,hdt,F6,Tke,udt,pdt,_le,_dt,bdt,vdt,T6,Mke,Fdt,Tdt,ble,Mdt,Edt,Cdt,M6,Eke,wdt,Adt,vle,Ldt,ydt,xdt,E6,Cke,$dt,kdt,Fle,Sdt,Rdt,Pdt,C6,wke,Bdt,Idt,Tle,Ndt,qdt,jdt,w6,Ake,Ddt,Gdt,Mle,Odt,Vdt,Xdt,A6,Lke,zdt,Qdt,Ele,Wdt,Udt,Hdt,L6,yke,Jdt,Ydt,Cle,Zdt,Kdt,emt,y6,xke,omt,rmt,wle,tmt,amt,nmt,x6,Zdo,jc,$6,$ke,hB,smt,kke,lmt,Kdo,Tr,uB,imt,Dc,dmt,Ale,mmt,cmt,Lle,fmt,gmt,hmt,pB,umt,Ske,pmt,_mt,bmt,la,_B,vmt,Rke,Fmt,Tmt,Gc,Mmt,Pke,Emt,Cmt,yle,wmt,Amt,Lmt,k6,ymt,Yr,bB,xmt,Bke,$mt,kmt,Un,Smt,Ike,Rmt,Pmt,Nke,Bmt,Imt,qke,Nmt,qmt,jmt,ke,S6,jke,Dmt,Gmt,xle,Omt,Vmt,Xmt,R6,Dke,zmt,Qmt,$le,Wmt,Umt,Hmt,P6,Gke,Jmt,Ymt,kle,Zmt,Kmt,ect,B6,Oke,oct,rct,Sle,tct,act,nct,I6,Vke,sct,lct,Rle,ict,dct,mct,N6,Xke,cct,fct,Ple,gct,hct,uct,q6,zke,pct,_ct,Ble,bct,vct,Fct,j6,Qke,Tct,Mct,Ile,Ect,Cct,wct,D6,Wke,Act,Lct,Nle,yct,xct,$ct,G6,Uke,kct,Sct,qle,Rct,Pct,Bct,O6,emo,Oc,V6,Hke,vB,Ict,Jke,Nct,omo,Mr,FB,qct,Vc,jct,jle,Dct,Gct,Dle,Oct,Vct,Xct,TB,zct,Yke,Qct,Wct,Uct,ia,MB,Hct,Zke,Jct,Yct,Xc,Zct,Kke,Kct,eft,Gle,oft,rft,tft,X6,aft,Zr,EB,nft,eSe,sft,lft,Hn,ift,oSe,dft,mft,rSe,cft,fft,tSe,gft,hft,uft,ae,z6,aSe,pft,_ft,Ole,bft,vft,Fft,Q6,nSe,Tft,Mft,Vle,Eft,Cft,wft,W6,sSe,Aft,Lft,Xle,yft,xft,$ft,U6,lSe,kft,Sft,zle,Rft,Pft,Bft,H6,iSe,Ift,Nft,Qle,qft,jft,Dft,J6,dSe,Gft,Oft,Wle,Vft,Xft,zft,Y6,mSe,Qft,Wft,Ule,Uft,Hft,Jft,Z6,cSe,Yft,Zft,Hle,Kft,egt,ogt,K6,fSe,rgt,tgt,Jle,agt,ngt,sgt,e7,gSe,lgt,igt,Yle,dgt,mgt,cgt,o7,hSe,fgt,ggt,Zle,hgt,ugt,pgt,r7,uSe,_gt,bgt,Kle,vgt,Fgt,Tgt,t7,pSe,Mgt,Egt,eie,Cgt,wgt,Agt,a7,_Se,Lgt,ygt,oie,xgt,$gt,kgt,n7,bSe,Sgt,Rgt,rie,Pgt,Bgt,Igt,s7,vSe,Ngt,qgt,tie,jgt,Dgt,Ggt,l7,FSe,Ogt,Vgt,aie,Xgt,zgt,Qgt,i7,TSe,Wgt,Ugt,nie,Hgt,Jgt,Ygt,d7,MSe,Zgt,Kgt,sie,eht,oht,rht,m7,ESe,tht,aht,lie,nht,sht,lht,c7,CSe,iht,dht,iie,mht,cht,fht,f7,wSe,ght,hht,die,uht,pht,_ht,g7,ASe,bht,vht,mie,Fht,Tht,Mht,h7,LSe,Eht,Cht,cie,wht,Aht,Lht,u7,ySe,yht,xht,fie,$ht,kht,Sht,p7,xSe,Rht,Pht,gie,Bht,Iht,Nht,_7,$Se,qht,jht,hie,Dht,Ght,Oht,b7,kSe,Vht,Xht,uie,zht,Qht,Wht,v7,rmo,zc,F7,SSe,CB,Uht,RSe,Hht,tmo,Er,wB,Jht,Qc,Yht,pie,Zht,Kht,_ie,eut,out,rut,AB,tut,PSe,aut,nut,sut,da,LB,lut,BSe,iut,dut,Wc,mut,ISe,cut,fut,bie,gut,hut,uut,T7,put,Kr,yB,_ut,NSe,but,vut,Jn,Fut,qSe,Tut,Mut,jSe,Eut,Cut,DSe,wut,Aut,Lut,Me,M7,GSe,yut,xut,vie,$ut,kut,Sut,E7,OSe,Rut,Put,Fie,But,Iut,Nut,C7,VSe,qut,jut,Tie,Dut,Gut,Out,w7,XSe,Vut,Xut,Mie,zut,Qut,Wut,A7,zSe,Uut,Hut,Eie,Jut,Yut,Zut,L7,QSe,Kut,ept,Cie,opt,rpt,tpt,y7,WSe,apt,npt,wie,spt,lpt,ipt,x7,USe,dpt,mpt,Aie,cpt,fpt,gpt,$7,HSe,hpt,upt,Lie,ppt,_pt,bpt,k7,JSe,vpt,Fpt,yie,Tpt,Mpt,Ept,S7,YSe,Cpt,wpt,xie,Apt,Lpt,ypt,R7,ZSe,xpt,$pt,$ie,kpt,Spt,Rpt,P7,KSe,Ppt,Bpt,kie,Ipt,Npt,qpt,B7,eRe,jpt,Dpt,Sie,Gpt,Opt,Vpt,I7,oRe,Xpt,zpt,Rie,Qpt,Wpt,Upt,N7,rRe,Hpt,Jpt,Pie,Ypt,Zpt,Kpt,q7,tRe,e_t,o_t,Bie,r_t,t_t,a_t,j7,amo,Uc,D7,aRe,xB,n_t,nRe,s_t,nmo,Cr,$B,l_t,Hc,i_t,Iie,d_t,m_t,Nie,c_t,f_t,g_t,kB,h_t,sRe,u_t,p_t,__t,ma,SB,b_t,lRe,v_t,F_t,Jc,T_t,iRe,M_t,E_t,qie,C_t,w_t,A_t,G7,L_t,et,RB,y_t,dRe,x_t,$_t,Yn,k_t,mRe,S_t,R_t,cRe,P_t,B_t,fRe,I_t,N_t,q_t,PB,O7,gRe,j_t,D_t,jie,G_t,O_t,V_t,V7,hRe,X_t,z_t,Die,Q_t,W_t,U_t,X7,smo,Yc,z7,uRe,BB,H_t,pRe,J_t,lmo,wr,IB,Y_t,Zc,Z_t,Gie,K_t,e1t,Oie,o1t,r1t,t1t,NB,a1t,_Re,n1t,s1t,l1t,ca,qB,i1t,bRe,d1t,m1t,Kc,c1t,vRe,f1t,g1t,Vie,h1t,u1t,p1t,Q7,_1t,ot,jB,b1t,FRe,v1t,F1t,Zn,T1t,TRe,M1t,E1t,MRe,C1t,w1t,ERe,A1t,L1t,y1t,CRe,W7,wRe,x1t,$1t,Xie,k1t,S1t,R1t,U7,imo,ef,H7,ARe,DB,P1t,LRe,B1t,dmo,Ar,GB,I1t,of,N1t,zie,q1t,j1t,Qie,D1t,G1t,O1t,OB,V1t,yRe,X1t,z1t,Q1t,fa,VB,W1t,xRe,U1t,H1t,rf,J1t,$Re,Y1t,Z1t,Wie,K1t,e2t,o2t,J7,r2t,rt,XB,t2t,kRe,a2t,n2t,Kn,s2t,SRe,l2t,i2t,RRe,d2t,m2t,PRe,c2t,f2t,g2t,BRe,Y7,IRe,h2t,u2t,Uie,p2t,_2t,b2t,Z7,mmo,tf,K7,NRe,zB,v2t,qRe,F2t,cmo,Lr,QB,T2t,af,M2t,Hie,E2t,C2t,Jie,w2t,A2t,L2t,WB,y2t,jRe,x2t,$2t,k2t,ga,UB,S2t,DRe,R2t,P2t,nf,B2t,GRe,I2t,N2t,Yie,q2t,j2t,D2t,e8,G2t,tt,HB,O2t,ORe,V2t,X2t,es,z2t,VRe,Q2t,W2t,XRe,U2t,H2t,zRe,J2t,Y2t,Z2t,me,o8,QRe,K2t,ebt,Zie,obt,rbt,tbt,r8,WRe,abt,nbt,Kie,sbt,lbt,ibt,t8,URe,dbt,mbt,ede,cbt,fbt,gbt,a8,HRe,hbt,ubt,ode,pbt,_bt,bbt,n8,JRe,vbt,Fbt,rde,Tbt,Mbt,Ebt,s8,YRe,Cbt,wbt,tde,Abt,Lbt,ybt,l8,ZRe,xbt,$bt,ade,kbt,Sbt,Rbt,i8,KRe,Pbt,Bbt,nde,Ibt,Nbt,qbt,d8,ePe,jbt,Dbt,sde,Gbt,Obt,Vbt,m8,oPe,Xbt,zbt,lde,Qbt,Wbt,Ubt,c8,rPe,Hbt,Jbt,ide,Ybt,Zbt,Kbt,f8,tPe,evt,ovt,dde,rvt,tvt,avt,g8,aPe,nvt,svt,mde,lvt,ivt,dvt,h8,nPe,mvt,cvt,cde,fvt,gvt,hvt,u8,sPe,uvt,pvt,fde,_vt,bvt,vvt,p8,lPe,Fvt,Tvt,gde,Mvt,Evt,Cvt,_8,iPe,wvt,Avt,hde,Lvt,yvt,xvt,b8,dPe,$vt,kvt,ude,Svt,Rvt,Pvt,v8,mPe,Bvt,Ivt,pde,Nvt,qvt,jvt,F8,cPe,Dvt,Gvt,_de,Ovt,Vvt,Xvt,T8,fPe,zvt,Qvt,bde,Wvt,Uvt,Hvt,M8,gPe,Jvt,Yvt,vde,Zvt,Kvt,eFt,E8,fmo,sf,C8,hPe,JB,oFt,uPe,rFt,gmo,yr,YB,tFt,lf,aFt,Fde,nFt,sFt,Tde,lFt,iFt,dFt,ZB,mFt,pPe,cFt,fFt,gFt,ha,KB,hFt,_Pe,uFt,pFt,df,_Ft,bPe,bFt,vFt,Mde,FFt,TFt,MFt,w8,EFt,at,eI,CFt,vPe,wFt,AFt,os,LFt,FPe,yFt,xFt,TPe,$Ft,kFt,MPe,SFt,RFt,PFt,ue,A8,EPe,BFt,IFt,Ede,NFt,qFt,jFt,L8,CPe,DFt,GFt,Cde,OFt,VFt,XFt,y8,wPe,zFt,QFt,wde,WFt,UFt,HFt,x8,APe,JFt,YFt,Ade,ZFt,KFt,eTt,$8,LPe,oTt,rTt,Lde,tTt,aTt,nTt,k8,yPe,sTt,lTt,yde,iTt,dTt,mTt,S8,xPe,cTt,fTt,xde,gTt,hTt,uTt,R8,$Pe,pTt,_Tt,$de,bTt,vTt,FTt,P8,kPe,TTt,MTt,kde,ETt,CTt,wTt,B8,SPe,ATt,LTt,Sde,yTt,xTt,$Tt,I8,RPe,kTt,STt,Rde,RTt,PTt,BTt,N8,PPe,ITt,NTt,Pde,qTt,jTt,DTt,q8,BPe,GTt,OTt,Bde,VTt,XTt,zTt,j8,IPe,QTt,WTt,Ide,UTt,HTt,JTt,D8,NPe,YTt,ZTt,Nde,KTt,eMt,oMt,G8,qPe,rMt,tMt,qde,aMt,nMt,sMt,O8,jPe,lMt,iMt,jde,dMt,mMt,cMt,V8,DPe,fMt,gMt,Dde,hMt,uMt,pMt,X8,GPe,_Mt,bMt,Gde,vMt,FMt,TMt,z8,OPe,MMt,EMt,Ode,CMt,wMt,AMt,Q8,VPe,LMt,yMt,Vde,xMt,$Mt,kMt,W8,hmo,mf,U8,XPe,oI,SMt,zPe,RMt,umo,xr,rI,PMt,cf,BMt,Xde,IMt,NMt,zde,qMt,jMt,DMt,tI,GMt,QPe,OMt,VMt,XMt,ua,aI,zMt,WPe,QMt,WMt,ff,UMt,UPe,HMt,JMt,Qde,YMt,ZMt,KMt,H8,eEt,nt,nI,oEt,HPe,rEt,tEt,rs,aEt,JPe,nEt,sEt,YPe,lEt,iEt,ZPe,dEt,mEt,cEt,KPe,J8,eBe,fEt,gEt,Wde,hEt,uEt,pEt,Y8,pmo,gf,Z8,oBe,sI,_Et,rBe,bEt,_mo,$r,lI,vEt,hf,FEt,Ude,TEt,MEt,Hde,EEt,CEt,wEt,iI,AEt,tBe,LEt,yEt,xEt,pa,dI,$Et,aBe,kEt,SEt,uf,REt,nBe,PEt,BEt,Jde,IEt,NEt,qEt,K8,jEt,st,mI,DEt,sBe,GEt,OEt,ts,VEt,lBe,XEt,zEt,iBe,QEt,WEt,dBe,UEt,HEt,JEt,cI,eL,mBe,YEt,ZEt,Yde,KEt,e4t,o4t,oL,cBe,r4t,t4t,Zde,a4t,n4t,s4t,rL,bmo,pf,tL,fBe,fI,l4t,gBe,i4t,vmo,kr,gI,d4t,_f,m4t,Kde,c4t,f4t,eme,g4t,h4t,u4t,hI,p4t,hBe,_4t,b4t,v4t,_a,uI,F4t,uBe,T4t,M4t,bf,E4t,pBe,C4t,w4t,ome,A4t,L4t,y4t,aL,x4t,lt,pI,$4t,_Be,k4t,S4t,as,R4t,bBe,P4t,B4t,vBe,I4t,N4t,FBe,q4t,j4t,D4t,ne,nL,TBe,G4t,O4t,rme,V4t,X4t,z4t,sL,MBe,Q4t,W4t,tme,U4t,H4t,J4t,lL,EBe,Y4t,Z4t,ame,K4t,eCt,oCt,iL,CBe,rCt,tCt,nme,aCt,nCt,sCt,dL,wBe,lCt,iCt,sme,dCt,mCt,cCt,mL,ABe,fCt,gCt,lme,hCt,uCt,pCt,cL,LBe,_Ct,bCt,ime,vCt,FCt,TCt,fL,yBe,MCt,ECt,dme,CCt,wCt,ACt,gL,xBe,LCt,yCt,mme,xCt,$Ct,kCt,hL,$Be,SCt,RCt,cme,PCt,BCt,ICt,uL,kBe,NCt,qCt,fme,jCt,DCt,GCt,pL,SBe,OCt,VCt,gme,XCt,zCt,QCt,_L,RBe,WCt,UCt,hme,HCt,JCt,YCt,bL,PBe,ZCt,KCt,ume,e3t,o3t,r3t,vL,BBe,t3t,a3t,pme,n3t,s3t,l3t,FL,IBe,i3t,d3t,_me,m3t,c3t,f3t,TL,NBe,g3t,h3t,bme,u3t,p3t,_3t,ML,qBe,b3t,v3t,vme,F3t,T3t,M3t,EL,jBe,E3t,C3t,Fme,w3t,A3t,L3t,CL,DBe,y3t,x3t,Tme,$3t,k3t,S3t,wL,GBe,R3t,P3t,Mme,B3t,I3t,N3t,AL,OBe,q3t,j3t,Eme,D3t,G3t,O3t,LL,VBe,V3t,X3t,Cme,z3t,Q3t,W3t,yL,XBe,U3t,H3t,wme,J3t,Y3t,Z3t,xL,zBe,K3t,e5t,Ame,o5t,r5t,t5t,$L,QBe,a5t,n5t,Lme,s5t,l5t,i5t,kL,WBe,d5t,m5t,yme,c5t,f5t,g5t,SL,Fmo,vf,RL,UBe,_I,h5t,HBe,u5t,Tmo,Sr,bI,p5t,Ff,_5t,xme,b5t,v5t,$me,F5t,T5t,M5t,vI,E5t,JBe,C5t,w5t,A5t,ba,FI,L5t,YBe,y5t,x5t,Tf,$5t,ZBe,k5t,S5t,kme,R5t,P5t,B5t,PL,I5t,it,TI,N5t,KBe,q5t,j5t,ns,D5t,eIe,G5t,O5t,oIe,V5t,X5t,rIe,z5t,Q5t,W5t,Se,BL,tIe,U5t,H5t,Sme,J5t,Y5t,Z5t,IL,aIe,K5t,e0t,Rme,o0t,r0t,t0t,NL,nIe,a0t,n0t,Pme,s0t,l0t,i0t,qL,sIe,d0t,m0t,Bme,c0t,f0t,g0t,jL,lIe,h0t,u0t,Ime,p0t,_0t,b0t,DL,iIe,v0t,F0t,Nme,T0t,M0t,E0t,GL,dIe,C0t,w0t,qme,A0t,L0t,y0t,OL,mIe,x0t,$0t,jme,k0t,S0t,R0t,VL,cIe,P0t,B0t,Dme,I0t,N0t,q0t,XL,fIe,j0t,D0t,Gme,G0t,O0t,V0t,zL,Mmo,Mf,QL,gIe,MI,X0t,hIe,z0t,Emo,Rr,EI,Q0t,Ef,W0t,Ome,U0t,H0t,Vme,J0t,Y0t,Z0t,CI,K0t,uIe,ewt,owt,rwt,va,wI,twt,pIe,awt,nwt,Cf,swt,_Ie,lwt,iwt,Xme,dwt,mwt,cwt,WL,fwt,dt,AI,gwt,bIe,hwt,uwt,ss,pwt,vIe,_wt,bwt,FIe,vwt,Fwt,TIe,Twt,Mwt,Ewt,we,UL,MIe,Cwt,wwt,zme,Awt,Lwt,ywt,HL,EIe,xwt,$wt,Qme,kwt,Swt,Rwt,JL,CIe,Pwt,Bwt,Wme,Iwt,Nwt,qwt,YL,wIe,jwt,Dwt,Ume,Gwt,Owt,Vwt,ZL,AIe,Xwt,zwt,Hme,Qwt,Wwt,Uwt,KL,LIe,Hwt,Jwt,Jme,Ywt,Zwt,Kwt,ey,yIe,eAt,oAt,Yme,rAt,tAt,aAt,oy,xIe,nAt,sAt,Zme,lAt,iAt,dAt,ry,$Ie,mAt,cAt,Kme,fAt,gAt,hAt,ty,kIe,uAt,pAt,ece,_At,bAt,vAt,ay,SIe,FAt,TAt,oce,MAt,EAt,CAt,ny,RIe,wAt,AAt,rce,LAt,yAt,xAt,sy,PIe,$At,kAt,tce,SAt,RAt,PAt,ly,Cmo,wf,iy,BIe,LI,BAt,IIe,IAt,wmo,Pr,yI,NAt,Af,qAt,ace,jAt,DAt,nce,GAt,OAt,VAt,xI,XAt,NIe,zAt,QAt,WAt,Fa,$I,UAt,qIe,HAt,JAt,Lf,YAt,jIe,ZAt,KAt,sce,e6t,o6t,r6t,dy,t6t,mt,kI,a6t,DIe,n6t,s6t,ls,l6t,GIe,i6t,d6t,OIe,m6t,c6t,VIe,f6t,g6t,h6t,Re,my,XIe,u6t,p6t,lce,_6t,b6t,v6t,cy,zIe,F6t,T6t,ice,M6t,E6t,C6t,fy,QIe,w6t,A6t,dce,L6t,y6t,x6t,gy,WIe,$6t,k6t,mce,S6t,R6t,P6t,hy,UIe,B6t,I6t,cce,N6t,q6t,j6t,uy,HIe,D6t,G6t,fce,O6t,V6t,X6t,py,JIe,z6t,Q6t,gce,W6t,U6t,H6t,_y,YIe,J6t,Y6t,hce,Z6t,K6t,e7t,by,ZIe,o7t,r7t,uce,t7t,a7t,n7t,vy,KIe,s7t,l7t,pce,i7t,d7t,m7t,Fy,Amo,yf,Ty,eNe,SI,c7t,oNe,f7t,Lmo,Br,RI,g7t,xf,h7t,_ce,u7t,p7t,bce,_7t,b7t,v7t,PI,F7t,rNe,T7t,M7t,E7t,Ta,BI,C7t,tNe,w7t,A7t,$f,L7t,aNe,y7t,x7t,vce,$7t,k7t,S7t,My,R7t,ct,II,P7t,nNe,B7t,I7t,is,N7t,sNe,q7t,j7t,lNe,D7t,G7t,iNe,O7t,V7t,X7t,Pe,Ey,dNe,z7t,Q7t,Fce,W7t,U7t,H7t,Cy,mNe,J7t,Y7t,Tce,Z7t,K7t,e8t,wy,cNe,o8t,r8t,Mce,t8t,a8t,n8t,Ay,fNe,s8t,l8t,Ece,i8t,d8t,m8t,Ly,gNe,c8t,f8t,Cce,g8t,h8t,u8t,yy,hNe,p8t,_8t,wce,b8t,v8t,F8t,xy,uNe,T8t,M8t,Ace,E8t,C8t,w8t,$y,pNe,A8t,L8t,Lce,y8t,x8t,$8t,ky,_Ne,k8t,S8t,yce,R8t,P8t,B8t,Sy,bNe,I8t,N8t,xce,q8t,j8t,D8t,Ry,ymo,kf,Py,vNe,NI,G8t,FNe,O8t,xmo,Ir,qI,V8t,Sf,X8t,$ce,z8t,Q8t,kce,W8t,U8t,H8t,jI,J8t,TNe,Y8t,Z8t,K8t,Ma,DI,eLt,MNe,oLt,rLt,Rf,tLt,ENe,aLt,nLt,Sce,sLt,lLt,iLt,By,dLt,ft,GI,mLt,CNe,cLt,fLt,ds,gLt,wNe,hLt,uLt,ANe,pLt,_Lt,LNe,bLt,vLt,FLt,Be,Iy,yNe,TLt,MLt,Rce,ELt,CLt,wLt,Ny,xNe,ALt,LLt,Pce,yLt,xLt,$Lt,qy,$Ne,kLt,SLt,Bce,RLt,PLt,BLt,jy,kNe,ILt,NLt,Ice,qLt,jLt,DLt,Dy,SNe,GLt,OLt,Nce,VLt,XLt,zLt,Gy,RNe,QLt,WLt,qce,ULt,HLt,JLt,Oy,PNe,YLt,ZLt,jce,KLt,eyt,oyt,Vy,BNe,ryt,tyt,Dce,ayt,nyt,syt,Xy,INe,lyt,iyt,Gce,dyt,myt,cyt,zy,NNe,fyt,gyt,Oce,hyt,uyt,pyt,Qy,$mo,Pf,Wy,qNe,OI,_yt,jNe,byt,kmo,Nr,VI,vyt,Bf,Fyt,Vce,Tyt,Myt,Xce,Eyt,Cyt,wyt,XI,Ayt,DNe,Lyt,yyt,xyt,Ea,zI,$yt,GNe,kyt,Syt,If,Ryt,ONe,Pyt,Byt,zce,Iyt,Nyt,qyt,Uy,jyt,gt,QI,Dyt,VNe,Gyt,Oyt,ms,Vyt,XNe,Xyt,zyt,zNe,Qyt,Wyt,QNe,Uyt,Hyt,Jyt,Ie,Hy,WNe,Yyt,Zyt,Qce,Kyt,e9t,o9t,Jy,UNe,r9t,t9t,Wce,a9t,n9t,s9t,Yy,HNe,l9t,i9t,Uce,d9t,m9t,c9t,Zy,JNe,f9t,g9t,Hce,h9t,u9t,p9t,Ky,YNe,_9t,b9t,Jce,v9t,F9t,T9t,e9,ZNe,M9t,E9t,Yce,C9t,w9t,A9t,o9,KNe,L9t,y9t,Zce,x9t,$9t,k9t,r9,eqe,S9t,R9t,Kce,P9t,B9t,I9t,t9,oqe,N9t,q9t,efe,j9t,D9t,G9t,a9,rqe,O9t,V9t,ofe,X9t,z9t,Q9t,n9,Smo,Nf,s9,tqe,WI,W9t,aqe,U9t,Rmo,qr,UI,H9t,qf,J9t,rfe,Y9t,Z9t,tfe,K9t,ext,oxt,HI,rxt,nqe,txt,axt,nxt,Ca,JI,sxt,sqe,lxt,ixt,jf,dxt,lqe,mxt,cxt,afe,fxt,gxt,hxt,l9,uxt,ht,YI,pxt,iqe,_xt,bxt,cs,vxt,dqe,Fxt,Txt,mqe,Mxt,Ext,cqe,Cxt,wxt,Axt,We,i9,fqe,Lxt,yxt,nfe,xxt,$xt,kxt,d9,gqe,Sxt,Rxt,sfe,Pxt,Bxt,Ixt,m9,hqe,Nxt,qxt,lfe,jxt,Dxt,Gxt,c9,uqe,Oxt,Vxt,ife,Xxt,zxt,Qxt,f9,pqe,Wxt,Uxt,dfe,Hxt,Jxt,Yxt,g9,_qe,Zxt,Kxt,mfe,e$t,o$t,r$t,h9,bqe,t$t,a$t,cfe,n$t,s$t,l$t,u9,vqe,i$t,d$t,ffe,m$t,c$t,f$t,p9,Pmo,Df,_9,Fqe,ZI,g$t,Tqe,h$t,Bmo,jr,KI,u$t,Gf,p$t,gfe,_$t,b$t,hfe,v$t,F$t,T$t,eN,M$t,Mqe,E$t,C$t,w$t,wa,oN,A$t,Eqe,L$t,y$t,Of,x$t,Cqe,$$t,k$t,ufe,S$t,R$t,P$t,b9,B$t,ut,rN,I$t,wqe,N$t,q$t,fs,j$t,Aqe,D$t,G$t,Lqe,O$t,V$t,yqe,X$t,z$t,Q$t,Ue,v9,xqe,W$t,U$t,pfe,H$t,J$t,Y$t,F9,$qe,Z$t,K$t,_fe,ekt,okt,rkt,T9,kqe,tkt,akt,bfe,nkt,skt,lkt,M9,Sqe,ikt,dkt,vfe,mkt,ckt,fkt,E9,Rqe,gkt,hkt,Ffe,ukt,pkt,_kt,C9,Pqe,bkt,vkt,Tfe,Fkt,Tkt,Mkt,w9,Bqe,Ekt,Ckt,Mfe,wkt,Akt,Lkt,A9,Iqe,ykt,xkt,Efe,$kt,kkt,Skt,L9,Imo,Vf,y9,Nqe,tN,Rkt,qqe,Pkt,Nmo,Dr,aN,Bkt,Xf,Ikt,Cfe,Nkt,qkt,wfe,jkt,Dkt,Gkt,nN,Okt,jqe,Vkt,Xkt,zkt,Aa,sN,Qkt,Dqe,Wkt,Ukt,zf,Hkt,Gqe,Jkt,Ykt,Afe,Zkt,Kkt,eSt,x9,oSt,pt,lN,rSt,Oqe,tSt,aSt,gs,nSt,Vqe,sSt,lSt,Xqe,iSt,dSt,zqe,mSt,cSt,fSt,Qqe,$9,Wqe,gSt,hSt,Lfe,uSt,pSt,_St,k9,qmo,Qf,S9,Uqe,iN,bSt,Hqe,vSt,jmo,Gr,dN,FSt,Wf,TSt,yfe,MSt,ESt,xfe,CSt,wSt,ASt,mN,LSt,Jqe,ySt,xSt,$St,La,cN,kSt,Yqe,SSt,RSt,Uf,PSt,Zqe,BSt,ISt,$fe,NSt,qSt,jSt,R9,DSt,_t,fN,GSt,Kqe,OSt,VSt,hs,XSt,eje,zSt,QSt,oje,WSt,USt,rje,HSt,JSt,YSt,gN,P9,tje,ZSt,KSt,kfe,eRt,oRt,rRt,B9,aje,tRt,aRt,Sfe,nRt,sRt,lRt,I9,Dmo,Hf,N9,nje,hN,iRt,sje,dRt,Gmo,Or,uN,mRt,Jf,cRt,Rfe,fRt,gRt,Pfe,hRt,uRt,pRt,pN,_Rt,lje,bRt,vRt,FRt,ya,_N,TRt,ije,MRt,ERt,Yf,CRt,dje,wRt,ARt,Bfe,LRt,yRt,xRt,q9,$Rt,bt,bN,kRt,mje,SRt,RRt,us,PRt,cje,BRt,IRt,fje,NRt,qRt,gje,jRt,DRt,GRt,hje,j9,uje,ORt,VRt,Ife,XRt,zRt,QRt,D9,Omo;return m=new re({}),ln=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Lk=new re({}),yk=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sg=new hgo({props:{warning:!0,$$slots:{default:[Kka]},$$scope:{ctx:$}}}),xk=new re({}),$k=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L680"}}),Rk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L703"}}),Du=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[eSa]},$$scope:{ctx:$}}}),Pk=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L826"}}),Bk=new re({}),Ik=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L458"}}),jk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L472"}}),Lp=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[oSa]},$$scope:{ctx:$}}}),Dk=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L673"}}),Gk=new re({}),Ok=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L206"}}),zk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L220"}}),M_=new hgo({props:{$$slots:{default:[rSa]},$$scope:{ctx:$}}}),E_=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[tSa]},$$scope:{ctx:$}}}),Qk=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L347"}}),Wk=new re({}),Uk=new R({props:{name:"class transformers.AutoImageProcessor",anchor:"transformers.AutoImageProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/image_processing_auto.py#L190"}}),Yk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoImageProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoImageProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained image_processor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a image processor file saved using the
<a href="/docs/transformers/main/en/internal/image_processing_utils#transformers.ImageProcessingMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved image processor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoImageProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model image processor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoImageProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the image processor files and override the cached versions if
they exist.`,name:"force_download"},{anchor:"transformers.AutoImageProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoImageProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoImageProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoImageProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoImageProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final image processor object. If <code>True</code>, then this
functions returns a <code>Tuple(image_processor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not image processor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>image_processor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoImageProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoImageProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are image processor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> image processor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/image_processing_auto.py#L204"}}),r1=new hgo({props:{$$slots:{default:[aSa]},$$scope:{ctx:$}}}),t1=new N({props:{anchor:"transformers.AutoImageProcessor.from_pretrained.example",$$slots:{default:[nSa]},$$scope:{ctx:$}}}),Zk=new R({props:{name:"register",anchor:"transformers.AutoImageProcessor.register",parameters:[{name:"config_class",val:""},{name:"image_processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoImageProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoImageProcessor.register.image_processor_class",description:'<strong>image_processor_class</strong> (<a href="/docs/transformers/main/en/internal/image_processing_utils#transformers.ImageProcessingMixin">ImageProcessingMixin</a>) &#x2014; The image processor to register.',name:"image_processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/image_processing_auto.py#L349"}}),Kk=new re({}),eS=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L98"}}),tS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L112"}}),x1=new hgo({props:{$$slots:{default:[sSa]},$$scope:{ctx:$}}}),$1=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[lSa]},$$scope:{ctx:$}}}),aS=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L293"}}),nS=new re({}),sS=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L907"}}),iS=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clipseg#transformers.CLIPSegConfig">CLIPSegConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clipseg#transformers.CLIPSegModel">CLIPSegModel</a> (CLIPSeg model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel">ConditionalDetrModel</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel">ErnieModel</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmModel">EsmModel</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel">GPTNeoXJapaneseModel</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/jukebox#transformers.JukeboxConfig">JukeboxConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/jukebox#transformers.JukeboxModel">JukeboxModel</a> (Jukebox model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig">LiltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltModel">LiltModel</a> (LiLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMModel">MarkupLMModel</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config">MobileNetV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model">MobileNetV2Model</a> (MobileNetV2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertModel">RoCBertModel</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersConfig">SwitchTransformersConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersModel">SwitchTransformersModel</a> (SwitchTransformers model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/table-transformer#transformers.TableTransformerConfig">TableTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/table-transformer#transformers.TableTransformerModel">TableTransformerModel</a> (Table Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerConfig">TimeSeriesTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerModel">TimeSeriesTransformerModel</a> (Time Series Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel">ViTMSNModel</a> (ViTMSN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperModel">WhisperModel</a> (Whisper model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig">XCLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel">XCLIPModel</a> (X-CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R1=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[iSa]},$$scope:{ctx:$}}}),dS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sv=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[dSa]},$$scope:{ctx:$}}}),mS=new re({}),cS=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L914"}}),gS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining">ErnieForPreTraining</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForPreTraining">RoCBertForPreTraining</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersConfig">SwitchTransformersConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersForConditionalGeneration">SwitchTransformersForConditionalGeneration</a> (SwitchTransformers model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iv=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[mSa]},$$scope:{ctx:$}}}),hS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[cSa]},$$scope:{ctx:$}}}),uS=new re({}),pS=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L929"}}),bS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM">ErnieForCausalLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM">GPTNeoXJapaneseForCausalLM</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForCausalLM">RoCBertForCausalLM</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[fSa]},$$scope:{ctx:$}}}),vS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[gSa]},$$scope:{ctx:$}}}),FS=new re({}),TS=new R({props:{name:"class transformers.AutoModelForDepthEstimation",anchor:"transformers.AutoModelForDepthEstimation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1072"}}),ES=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDepthEstimation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDepthEstimation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForDepthEstimation">DPTForDepthEstimation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNForDepthEstimation">GLPNForDepthEstimation</a> (GLPN model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new N({props:{anchor:"transformers.AutoModelForDepthEstimation.from_config.example",$$slots:{default:[hSa]},$$scope:{ctx:$}}}),CS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDepthEstimation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new N({props:{anchor:"transformers.AutoModelForDepthEstimation.from_pretrained.example",$$slots:{default:[uSa]},$$scope:{ctx:$}}}),AS=new re({}),LS=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L936"}}),xS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM">ErnieForMaskedLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForMaskedLM">EsmForMaskedLM</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForMaskedLM">RoCBertForMaskedLM</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[pSa]},$$scope:{ctx:$}}}),$S=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JT=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[_Sa]},$$scope:{ctx:$}}}),kS=new re({}),SS=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L943"}}),PS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersConfig">SwitchTransformersConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersForConditionalGeneration">SwitchTransformersForConditionalGeneration</a> (SwitchTransformers model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[bSa]},$$scope:{ctx:$}}}),BS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TM=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[vSa]},$$scope:{ctx:$}}}),IS=new re({}),NS=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L952"}}),jS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification">ErnieForSequenceClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForSequenceClassification">EsmForSequenceClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig">LiltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltForSequenceClassification">LiltForSequenceClassification</a> (LiLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification">MarkupLMForSequenceClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForSequenceClassification">RoCBertForSequenceClassification</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EM=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[FSa]},$$scope:{ctx:$}}}),DS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[TSa]},$$scope:{ctx:$}}}),GS=new re({}),OS=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1008"}}),XS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice">ErnieForMultipleChoice</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForMultipleChoice">RoCBertForMultipleChoice</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[MSa]},$$scope:{ctx:$}}}),zS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ESa]},$$scope:{ctx:$}}}),QS=new re({}),WS=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1015"}}),HS=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction">ErnieForNextSentencePrediction</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g4=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CSa]},$$scope:{ctx:$}}}),JS=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wSa]},$$scope:{ctx:$}}}),YS=new re({}),ZS=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1001"}}),eR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification">ErnieForTokenClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForTokenClassification">EsmForTokenClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig">LiltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltForTokenClassification">LiltForTokenClassification</a> (LiLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification">MarkupLMForTokenClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForTokenClassification">RoCBertForTokenClassification</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[ASa]},$$scope:{ctx:$}}}),oR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[LSa]},$$scope:{ctx:$}}}),rR=new re({}),tR=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L961"}}),nR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForQuestionAnswering">BloomForQuestionAnswering</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering">ErnieForQuestionAnswering</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig">LiltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lilt#transformers.LiltForQuestionAnswering">LiltForQuestionAnswering</a> (LiLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering">MarkupLMForQuestionAnswering</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForQuestionAnswering">OPTForQuestionAnswering</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig">RoCBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForQuestionAnswering">RoCBertForQuestionAnswering</a> (RoCBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ySa]},$$scope:{ctx:$}}}),sR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[xSa]},$$scope:{ctx:$}}}),lR=new re({}),iR=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L968"}}),mR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[$Sa]},$$scope:{ctx:$}}}),cR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b3=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[kSa]},$$scope:{ctx:$}}}),fR=new re({}),gR=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L990"}}),uR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering">LayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F3=new N({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[SSa]},$$scope:{ctx:$}}}),pR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new N({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[RSa]},$$scope:{ctx:$}}}),_R=new re({}),bR=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1024"}}),FR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config">MobileNetV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForImageClassification">MobileNetV2ForImageClassification</a> (MobileNetV2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification">ViTMSNForImageClassification</a> (ViTMSN model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[PSa]},$$scope:{ctx:$}}}),TR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[BSa]},$$scope:{ctx:$}}}),MR=new re({}),ER=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1079"}}),wR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W3=new N({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[ISa]},$$scope:{ctx:$}}}),AR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new N({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[NSa]},$$scope:{ctx:$}}}),LR=new re({}),yR=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1086"}}),$R=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z3=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[qSa]},$$scope:{ctx:$}}}),kR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),o5=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[jSa]},$$scope:{ctx:$}}}),SR=new re({}),RR=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L979"}}),BR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t5=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[DSa]},$$scope:{ctx:$}}}),IR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[GSa]},$$scope:{ctx:$}}}),NR=new re({}),qR=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1093"}}),DR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[OSa]},$$scope:{ctx:$}}}),GR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v5=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[VSa]},$$scope:{ctx:$}}}),OR=new re({}),VR=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1116"}}),zR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T5=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[XSa]},$$scope:{ctx:$}}}),QR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[zSa]},$$scope:{ctx:$}}}),WR=new re({}),UR=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1100"}}),JR=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[QSa]},$$scope:{ctx:$}}}),YR=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[WSa]},$$scope:{ctx:$}}}),ZR=new re({}),KR=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1107"}}),oP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperForConditionalGeneration">WhisperForConditionalGeneration</a> (Whisper model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[USa]},$$scope:{ctx:$}}}),rP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[HSa]},$$scope:{ctx:$}}}),tP=new re({}),aP=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1125"}}),sP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[JSa]},$$scope:{ctx:$}}}),lP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[YSa]},$$scope:{ctx:$}}}),iP=new re({}),dP=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1132"}}),cP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[ZSa]},$$scope:{ctx:$}}}),fP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f0=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[KSa]},$$scope:{ctx:$}}}),gP=new re({}),hP=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1056"}}),pP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection">ConditionalDetrForObjectDetection</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection">DeformableDetrForObjectDetection</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/table-transformer#transformers.TableTransformerConfig">TableTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/table-transformer#transformers.TableTransformerForObjectDetection">TableTransformerForObjectDetection</a> (Table Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h0=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[eRa]},$$scope:{ctx:$}}}),_P=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[oRa]},$$scope:{ctx:$}}}),bP=new re({}),vP=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1031"}}),TP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[rRa]},$$scope:{ctx:$}}}),MP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A0=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[tRa]},$$scope:{ctx:$}}}),EP=new re({}),CP=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1038"}}),AP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config">MobileNetV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForSemanticSegmentation">MobileNetV2ForSemanticSegmentation</a> (MobileNetV2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y0=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[aRa]},$$scope:{ctx:$}}}),LP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[nRa]},$$scope:{ctx:$}}}),yP=new re({}),xP=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1047"}}),kP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[sRa]},$$scope:{ctx:$}}}),SP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[lRa]},$$scope:{ctx:$}}}),RP=new re({}),PP=new R({props:{name:"class transformers.AutoModelForZeroShotObjectDetection",anchor:"transformers.AutoModelForZeroShotObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1063"}}),IP=new R({props:{name:"from_config",anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection">OwlViTForObjectDetection</a> (OWL-ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new N({props:{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_config.example",$$slots:{default:[iRa]},$$scope:{ctx:$}}}),NP=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q0=new N({props:{anchor:"transformers.AutoModelForZeroShotObjectDetection.from_pretrained.example",$$slots:{default:[dRa]},$$scope:{ctx:$}}}),qP=new re({}),jP=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),GP=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.TFCvtModel">TFCvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.TFEsmModel">TFEsmModel</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel">TFGroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperModel">TFWhisperModel</a> (Whisper model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U0=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[mRa]},$$scope:{ctx:$}}}),OP=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Zw=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[cRa]},$$scope:{ctx:$}}}),VP=new re({}),XP=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),QP=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),eA=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[fRa]},$$scope:{ctx:$}}}),WP=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CA=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gRa]},$$scope:{ctx:$}}}),UP=new re({}),HP=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),YP=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AA=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[hRa]},$$scope:{ctx:$}}}),ZP=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),GA=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[uRa]},$$scope:{ctx:$}}}),KP=new re({}),eB=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),rB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.TFCvtForImageClassification">TFCvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),VA=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[pRa]},$$scope:{ctx:$}}}),tB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KA=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_Ra]},$$scope:{ctx:$}}}),aB=new re({}),nB=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),lB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o6=new N({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[bRa]},$$scope:{ctx:$}}}),iB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n6=new N({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[vRa]},$$scope:{ctx:$}}}),dB=new re({}),mB=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),fB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.TFEsmForMaskedLM">TFEsmForMaskedLM</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l6=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[FRa]},$$scope:{ctx:$}}}),gB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x6=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[TRa]},$$scope:{ctx:$}}}),hB=new re({}),uB=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),_B=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k6=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[MRa]},$$scope:{ctx:$}}}),bB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O6=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ERa]},$$scope:{ctx:$}}}),vB=new re({}),FB=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),MB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.TFEsmForSequenceClassification">TFEsmForSequenceClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X6=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[CRa]},$$scope:{ctx:$}}}),EB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v7=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[wRa]},$$scope:{ctx:$}}}),CB=new re({}),wB=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L570"}}),LB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T7=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ARa]},$$scope:{ctx:$}}}),yB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j7=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[LRa]},$$scope:{ctx:$}}}),xB=new re({}),$B=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L577"}}),SB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G7=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[yRa]},$$scope:{ctx:$}}}),RB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X7=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[xRa]},$$scope:{ctx:$}}}),BB=new re({}),IB=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L550"}}),qB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q7=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[$Ra]},$$scope:{ctx:$}}}),jB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U7=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[kRa]},$$scope:{ctx:$}}}),DB=new re({}),GB=new R({props:{name:"class transformers.TFAutoModelForDocumentQuestionAnswering",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),VB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering">TFLayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J7=new N({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[SRa]},$$scope:{ctx:$}}}),XB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z7=new N({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[RRa]},$$scope:{ctx:$}}}),zB=new re({}),QB=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L561"}}),UB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.TFEsmForTokenClassification">TFEsmForTokenClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e8=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[PRa]},$$scope:{ctx:$}}}),HB=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E8=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[BRa]},$$scope:{ctx:$}}}),JB=new re({}),YB=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L532"}}),KB=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w8=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[IRa]},$$scope:{ctx:$}}}),eI=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W8=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[NRa]},$$scope:{ctx:$}}}),oI=new re({}),rI=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),aI=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H8=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[qRa]},$$scope:{ctx:$}}}),nI=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y8=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[jRa]},$$scope:{ctx:$}}}),sI=new re({}),lI=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L586"}}),dI=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig">WhisperConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperForConditionalGeneration">TFWhisperForConditionalGeneration</a> (Whisper model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K8=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[DRa]},$$scope:{ctx:$}}}),mI=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rL=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[GRa]},$$scope:{ctx:$}}}),fI=new re({}),gI=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),uI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aL=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[ORa]},$$scope:{ctx:$}}}),pI=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SL=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[VRa]},$$scope:{ctx:$}}}),_I=new re({}),bI=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),FI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PL=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[XRa]},$$scope:{ctx:$}}}),TI=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zL=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[zRa]},$$scope:{ctx:$}}}),MI=new re({}),EI=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),wI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WL=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[QRa]},$$scope:{ctx:$}}}),AI=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ly=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[WRa]},$$scope:{ctx:$}}}),LI=new re({}),yI=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),$I=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dy=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[URa]},$$scope:{ctx:$}}}),kI=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Fy=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[HRa]},$$scope:{ctx:$}}}),SI=new re({}),RI=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),BI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),My=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[JRa]},$$scope:{ctx:$}}}),II=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ry=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[YRa]},$$scope:{ctx:$}}}),NI=new re({}),qI=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),DI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),By=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ZRa]},$$scope:{ctx:$}}}),GI=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Qy=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[KRa]},$$scope:{ctx:$}}}),OI=new re({}),VI=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),zI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Uy=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ePa]},$$scope:{ctx:$}}}),QI=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n9=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oPa]},$$scope:{ctx:$}}}),WI=new re({}),UI=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),JI=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l9=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[rPa]},$$scope:{ctx:$}}}),YI=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p9=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[tPa]},$$scope:{ctx:$}}}),ZI=new re({}),KI=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),oN=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b9=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[aPa]},$$scope:{ctx:$}}}),rN=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L9=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[nPa]},$$scope:{ctx:$}}}),tN=new re({}),aN=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),sN=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x9=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[sPa]},$$scope:{ctx:$}}}),lN=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k9=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[lPa]},$$scope:{ctx:$}}}),iN=new re({}),dN=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),cN=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R9=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[iPa]},$$scope:{ctx:$}}}),fN=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I9=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[dPa]},$$scope:{ctx:$}}}),hN=new re({}),uN=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),_N=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q9=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[mPa]},$$scope:{ctx:$}}}),bN=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D9=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[cPa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(m.$$.fragment),h=l(),He=a("span"),Ld=o("Auto Classes"),og=l(),wt=a("p"),yd=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xd=a("code"),Ek=o("from_pretrained()"),rg=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Qe=l(),Ze=a("p"),$d=o("Instantiating one of "),_s=a("a"),Ck=o("AutoConfig"),bs=o(", "),vs=a("a"),wk=o("AutoModel"),kd=o(`, and
`),Fs=a("a"),Ak=o("AutoTokenizer"),Sd=o(" will directly create a class of the relevant architecture. For instance"),tg=l(),F(ln.$$.fragment),Ke=l(),ye=a("p"),Uq=o("will create a model that is an instance of "),Rd=a("a"),Hq=o("BertModel"),Jq=o("."),Po=l(),dn=a("p"),Yq=o("There is one class of "),ag=a("code"),Zq=o("AutoModel"),ugo=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Eio=l(),Pd=a("h2"),ng=a("a"),zhe=a("span"),F(Lk.$$.fragment),pgo=l(),Qhe=a("span"),_go=o("Extending the Auto Classes"),Cio=l(),Ts=a("p"),bgo=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Whe=a("code"),vgo=o("NewModel"),Fgo=o(", make sure you have a "),Uhe=a("code"),Tgo=o("NewModelConfig"),Mgo=o(` then you can add those to the auto
classes like this:`),wio=l(),F(yk.$$.fragment),Aio=l(),Kq=a("p"),Ego=o("You will then be able to use the auto classes like you would usually do!"),Lio=l(),F(sg.$$.fragment),yio=l(),Bd=a("h2"),lg=a("a"),Hhe=a("span"),F(xk.$$.fragment),Cgo=l(),Jhe=a("span"),wgo=o("AutoConfig"),xio=l(),Bo=a("div"),F($k.$$.fragment),Ago=l(),kk=a("p"),Lgo=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ej=a("a"),ygo=o("from_pretrained()"),xgo=o(" class method."),$go=l(),Sk=a("p"),kgo=o("This class cannot be instantiated directly using "),Yhe=a("code"),Sgo=o("__init__()"),Rgo=o(" (throws an error)."),Pgo=l(),Vr=a("div"),F(Rk.$$.fragment),Bgo=l(),Zhe=a("p"),Igo=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Ngo=l(),Id=a("p"),qgo=o("The configuration class to instantiate is selected based on the "),Khe=a("code"),jgo=o("model_type"),Dgo=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),eue=a("code"),Ggo=o("pretrained_model_name_or_path"),Ogo=o(":"),Vgo=l(),A=a("ul"),ig=a("li"),oue=a("strong"),Xgo=o("albert"),zgo=o(" \u2014 "),oj=a("a"),Qgo=o("AlbertConfig"),Wgo=o(" (ALBERT model)"),Ugo=l(),dg=a("li"),rue=a("strong"),Hgo=o("bart"),Jgo=o(" \u2014 "),rj=a("a"),Ygo=o("BartConfig"),Zgo=o(" (BART model)"),Kgo=l(),mg=a("li"),tue=a("strong"),eho=o("beit"),oho=o(" \u2014 "),tj=a("a"),rho=o("BeitConfig"),tho=o(" (BEiT model)"),aho=l(),cg=a("li"),aue=a("strong"),nho=o("bert"),sho=o(" \u2014 "),aj=a("a"),lho=o("BertConfig"),iho=o(" (BERT model)"),dho=l(),fg=a("li"),nue=a("strong"),mho=o("bert-generation"),cho=o(" \u2014 "),nj=a("a"),fho=o("BertGenerationConfig"),gho=o(" (Bert Generation model)"),hho=l(),gg=a("li"),sue=a("strong"),uho=o("big_bird"),pho=o(" \u2014 "),sj=a("a"),_ho=o("BigBirdConfig"),bho=o(" (BigBird model)"),vho=l(),hg=a("li"),lue=a("strong"),Fho=o("bigbird_pegasus"),Tho=o(" \u2014 "),lj=a("a"),Mho=o("BigBirdPegasusConfig"),Eho=o(" (BigBird-Pegasus model)"),Cho=l(),ug=a("li"),iue=a("strong"),who=o("blenderbot"),Aho=o(" \u2014 "),ij=a("a"),Lho=o("BlenderbotConfig"),yho=o(" (Blenderbot model)"),xho=l(),pg=a("li"),due=a("strong"),$ho=o("blenderbot-small"),kho=o(" \u2014 "),dj=a("a"),Sho=o("BlenderbotSmallConfig"),Rho=o(" (BlenderbotSmall model)"),Pho=l(),_g=a("li"),mue=a("strong"),Bho=o("bloom"),Iho=o(" \u2014 "),mj=a("a"),Nho=o("BloomConfig"),qho=o(" (BLOOM model)"),jho=l(),bg=a("li"),cue=a("strong"),Dho=o("camembert"),Gho=o(" \u2014 "),cj=a("a"),Oho=o("CamembertConfig"),Vho=o(" (CamemBERT model)"),Xho=l(),vg=a("li"),fue=a("strong"),zho=o("canine"),Qho=o(" \u2014 "),fj=a("a"),Who=o("CanineConfig"),Uho=o(" (CANINE model)"),Hho=l(),Fg=a("li"),gue=a("strong"),Jho=o("clip"),Yho=o(" \u2014 "),gj=a("a"),Zho=o("CLIPConfig"),Kho=o(" (CLIP model)"),euo=l(),Tg=a("li"),hue=a("strong"),ouo=o("clipseg"),ruo=o(" \u2014 "),hj=a("a"),tuo=o("CLIPSegConfig"),auo=o(" (CLIPSeg model)"),nuo=l(),Mg=a("li"),uue=a("strong"),suo=o("codegen"),luo=o(" \u2014 "),uj=a("a"),iuo=o("CodeGenConfig"),duo=o(" (CodeGen model)"),muo=l(),Eg=a("li"),pue=a("strong"),cuo=o("conditional_detr"),fuo=o(" \u2014 "),pj=a("a"),guo=o("ConditionalDetrConfig"),huo=o(" (Conditional DETR model)"),uuo=l(),Cg=a("li"),_ue=a("strong"),puo=o("convbert"),_uo=o(" \u2014 "),_j=a("a"),buo=o("ConvBertConfig"),vuo=o(" (ConvBERT model)"),Fuo=l(),wg=a("li"),bue=a("strong"),Tuo=o("convnext"),Muo=o(" \u2014 "),bj=a("a"),Euo=o("ConvNextConfig"),Cuo=o(" (ConvNeXT model)"),wuo=l(),Ag=a("li"),vue=a("strong"),Auo=o("ctrl"),Luo=o(" \u2014 "),vj=a("a"),yuo=o("CTRLConfig"),xuo=o(" (CTRL model)"),$uo=l(),Lg=a("li"),Fue=a("strong"),kuo=o("cvt"),Suo=o(" \u2014 "),Fj=a("a"),Ruo=o("CvtConfig"),Puo=o(" (CvT model)"),Buo=l(),yg=a("li"),Tue=a("strong"),Iuo=o("data2vec-audio"),Nuo=o(" \u2014 "),Tj=a("a"),quo=o("Data2VecAudioConfig"),juo=o(" (Data2VecAudio model)"),Duo=l(),xg=a("li"),Mue=a("strong"),Guo=o("data2vec-text"),Ouo=o(" \u2014 "),Mj=a("a"),Vuo=o("Data2VecTextConfig"),Xuo=o(" (Data2VecText model)"),zuo=l(),$g=a("li"),Eue=a("strong"),Quo=o("data2vec-vision"),Wuo=o(" \u2014 "),Ej=a("a"),Uuo=o("Data2VecVisionConfig"),Huo=o(" (Data2VecVision model)"),Juo=l(),kg=a("li"),Cue=a("strong"),Yuo=o("deberta"),Zuo=o(" \u2014 "),Cj=a("a"),Kuo=o("DebertaConfig"),epo=o(" (DeBERTa model)"),opo=l(),Sg=a("li"),wue=a("strong"),rpo=o("deberta-v2"),tpo=o(" \u2014 "),wj=a("a"),apo=o("DebertaV2Config"),npo=o(" (DeBERTa-v2 model)"),spo=l(),Rg=a("li"),Aue=a("strong"),lpo=o("decision_transformer"),ipo=o(" \u2014 "),Aj=a("a"),dpo=o("DecisionTransformerConfig"),mpo=o(" (Decision Transformer model)"),cpo=l(),Pg=a("li"),Lue=a("strong"),fpo=o("deformable_detr"),gpo=o(" \u2014 "),Lj=a("a"),hpo=o("DeformableDetrConfig"),upo=o(" (Deformable DETR model)"),ppo=l(),Bg=a("li"),yue=a("strong"),_po=o("deit"),bpo=o(" \u2014 "),yj=a("a"),vpo=o("DeiTConfig"),Fpo=o(" (DeiT model)"),Tpo=l(),Ig=a("li"),xue=a("strong"),Mpo=o("detr"),Epo=o(" \u2014 "),xj=a("a"),Cpo=o("DetrConfig"),wpo=o(" (DETR model)"),Apo=l(),Ng=a("li"),$ue=a("strong"),Lpo=o("distilbert"),ypo=o(" \u2014 "),$j=a("a"),xpo=o("DistilBertConfig"),$po=o(" (DistilBERT model)"),kpo=l(),qg=a("li"),kue=a("strong"),Spo=o("donut-swin"),Rpo=o(" \u2014 "),kj=a("a"),Ppo=o("DonutSwinConfig"),Bpo=o(" (DonutSwin model)"),Ipo=l(),jg=a("li"),Sue=a("strong"),Npo=o("dpr"),qpo=o(" \u2014 "),Sj=a("a"),jpo=o("DPRConfig"),Dpo=o(" (DPR model)"),Gpo=l(),Dg=a("li"),Rue=a("strong"),Opo=o("dpt"),Vpo=o(" \u2014 "),Rj=a("a"),Xpo=o("DPTConfig"),zpo=o(" (DPT model)"),Qpo=l(),Gg=a("li"),Pue=a("strong"),Wpo=o("electra"),Upo=o(" \u2014 "),Pj=a("a"),Hpo=o("ElectraConfig"),Jpo=o(" (ELECTRA model)"),Ypo=l(),Og=a("li"),Bue=a("strong"),Zpo=o("encoder-decoder"),Kpo=o(" \u2014 "),Bj=a("a"),e_o=o("EncoderDecoderConfig"),o_o=o(" (Encoder decoder model)"),r_o=l(),Vg=a("li"),Iue=a("strong"),t_o=o("ernie"),a_o=o(" \u2014 "),Ij=a("a"),n_o=o("ErnieConfig"),s_o=o(" (ERNIE model)"),l_o=l(),Xg=a("li"),Nue=a("strong"),i_o=o("esm"),d_o=o(" \u2014 "),Nj=a("a"),m_o=o("EsmConfig"),c_o=o(" (ESM model)"),f_o=l(),zg=a("li"),que=a("strong"),g_o=o("flaubert"),h_o=o(" \u2014 "),qj=a("a"),u_o=o("FlaubertConfig"),p_o=o(" (FlauBERT model)"),__o=l(),Qg=a("li"),jue=a("strong"),b_o=o("flava"),v_o=o(" \u2014 "),jj=a("a"),F_o=o("FlavaConfig"),T_o=o(" (FLAVA model)"),M_o=l(),Wg=a("li"),Due=a("strong"),E_o=o("fnet"),C_o=o(" \u2014 "),Dj=a("a"),w_o=o("FNetConfig"),A_o=o(" (FNet model)"),L_o=l(),Ug=a("li"),Gue=a("strong"),y_o=o("fsmt"),x_o=o(" \u2014 "),Gj=a("a"),$_o=o("FSMTConfig"),k_o=o(" (FairSeq Machine-Translation model)"),S_o=l(),Hg=a("li"),Oue=a("strong"),R_o=o("funnel"),P_o=o(" \u2014 "),Oj=a("a"),B_o=o("FunnelConfig"),I_o=o(" (Funnel Transformer model)"),N_o=l(),Jg=a("li"),Vue=a("strong"),q_o=o("glpn"),j_o=o(" \u2014 "),Vj=a("a"),D_o=o("GLPNConfig"),G_o=o(" (GLPN model)"),O_o=l(),Yg=a("li"),Xue=a("strong"),V_o=o("gpt2"),X_o=o(" \u2014 "),Xj=a("a"),z_o=o("GPT2Config"),Q_o=o(" (OpenAI GPT-2 model)"),W_o=l(),Zg=a("li"),zue=a("strong"),U_o=o("gpt_neo"),H_o=o(" \u2014 "),zj=a("a"),J_o=o("GPTNeoConfig"),Y_o=o(" (GPT Neo model)"),Z_o=l(),Kg=a("li"),Que=a("strong"),K_o=o("gpt_neox"),e1o=o(" \u2014 "),Qj=a("a"),o1o=o("GPTNeoXConfig"),r1o=o(" (GPT NeoX model)"),t1o=l(),eh=a("li"),Wue=a("strong"),a1o=o("gpt_neox_japanese"),n1o=o(" \u2014 "),Wj=a("a"),s1o=o("GPTNeoXJapaneseConfig"),l1o=o(" (GPT NeoX Japanese model)"),i1o=l(),oh=a("li"),Uue=a("strong"),d1o=o("gptj"),m1o=o(" \u2014 "),Uj=a("a"),c1o=o("GPTJConfig"),f1o=o(" (GPT-J model)"),g1o=l(),rh=a("li"),Hue=a("strong"),h1o=o("groupvit"),u1o=o(" \u2014 "),Hj=a("a"),p1o=o("GroupViTConfig"),_1o=o(" (GroupViT model)"),b1o=l(),th=a("li"),Jue=a("strong"),v1o=o("hubert"),F1o=o(" \u2014 "),Jj=a("a"),T1o=o("HubertConfig"),M1o=o(" (Hubert model)"),E1o=l(),ah=a("li"),Yue=a("strong"),C1o=o("ibert"),w1o=o(" \u2014 "),Yj=a("a"),A1o=o("IBertConfig"),L1o=o(" (I-BERT model)"),y1o=l(),nh=a("li"),Zue=a("strong"),x1o=o("imagegpt"),$1o=o(" \u2014 "),Zj=a("a"),k1o=o("ImageGPTConfig"),S1o=o(" (ImageGPT model)"),R1o=l(),sh=a("li"),Kue=a("strong"),P1o=o("jukebox"),B1o=o(" \u2014 "),Kj=a("a"),I1o=o("JukeboxConfig"),N1o=o(" (Jukebox model)"),q1o=l(),lh=a("li"),epe=a("strong"),j1o=o("layoutlm"),D1o=o(" \u2014 "),eD=a("a"),G1o=o("LayoutLMConfig"),O1o=o(" (LayoutLM model)"),V1o=l(),ih=a("li"),ope=a("strong"),X1o=o("layoutlmv2"),z1o=o(" \u2014 "),oD=a("a"),Q1o=o("LayoutLMv2Config"),W1o=o(" (LayoutLMv2 model)"),U1o=l(),dh=a("li"),rpe=a("strong"),H1o=o("layoutlmv3"),J1o=o(" \u2014 "),rD=a("a"),Y1o=o("LayoutLMv3Config"),Z1o=o(" (LayoutLMv3 model)"),K1o=l(),mh=a("li"),tpe=a("strong"),e2o=o("led"),o2o=o(" \u2014 "),tD=a("a"),r2o=o("LEDConfig"),t2o=o(" (LED model)"),a2o=l(),ch=a("li"),ape=a("strong"),n2o=o("levit"),s2o=o(" \u2014 "),aD=a("a"),l2o=o("LevitConfig"),i2o=o(" (LeViT model)"),d2o=l(),fh=a("li"),npe=a("strong"),m2o=o("lilt"),c2o=o(" \u2014 "),nD=a("a"),f2o=o("LiltConfig"),g2o=o(" (LiLT model)"),h2o=l(),gh=a("li"),spe=a("strong"),u2o=o("longformer"),p2o=o(" \u2014 "),sD=a("a"),_2o=o("LongformerConfig"),b2o=o(" (Longformer model)"),v2o=l(),hh=a("li"),lpe=a("strong"),F2o=o("longt5"),T2o=o(" \u2014 "),lD=a("a"),M2o=o("LongT5Config"),E2o=o(" (LongT5 model)"),C2o=l(),uh=a("li"),ipe=a("strong"),w2o=o("luke"),A2o=o(" \u2014 "),iD=a("a"),L2o=o("LukeConfig"),y2o=o(" (LUKE model)"),x2o=l(),ph=a("li"),dpe=a("strong"),$2o=o("lxmert"),k2o=o(" \u2014 "),dD=a("a"),S2o=o("LxmertConfig"),R2o=o(" (LXMERT model)"),P2o=l(),_h=a("li"),mpe=a("strong"),B2o=o("m2m_100"),I2o=o(" \u2014 "),mD=a("a"),N2o=o("M2M100Config"),q2o=o(" (M2M100 model)"),j2o=l(),bh=a("li"),cpe=a("strong"),D2o=o("marian"),G2o=o(" \u2014 "),cD=a("a"),O2o=o("MarianConfig"),V2o=o(" (Marian model)"),X2o=l(),vh=a("li"),fpe=a("strong"),z2o=o("markuplm"),Q2o=o(" \u2014 "),fD=a("a"),W2o=o("MarkupLMConfig"),U2o=o(" (MarkupLM model)"),H2o=l(),Fh=a("li"),gpe=a("strong"),J2o=o("maskformer"),Y2o=o(" \u2014 "),gD=a("a"),Z2o=o("MaskFormerConfig"),K2o=o(" (MaskFormer model)"),ebo=l(),Th=a("li"),hpe=a("strong"),obo=o("mbart"),rbo=o(" \u2014 "),hD=a("a"),tbo=o("MBartConfig"),abo=o(" (mBART model)"),nbo=l(),Mh=a("li"),upe=a("strong"),sbo=o("mctct"),lbo=o(" \u2014 "),uD=a("a"),ibo=o("MCTCTConfig"),dbo=o(" (M-CTC-T model)"),mbo=l(),Eh=a("li"),ppe=a("strong"),cbo=o("megatron-bert"),fbo=o(" \u2014 "),pD=a("a"),gbo=o("MegatronBertConfig"),hbo=o(" (Megatron-BERT model)"),ubo=l(),Ch=a("li"),_pe=a("strong"),pbo=o("mobilebert"),_bo=o(" \u2014 "),_D=a("a"),bbo=o("MobileBertConfig"),vbo=o(" (MobileBERT model)"),Fbo=l(),wh=a("li"),bpe=a("strong"),Tbo=o("mobilenet_v2"),Mbo=o(" \u2014 "),bD=a("a"),Ebo=o("MobileNetV2Config"),Cbo=o(" (MobileNetV2 model)"),wbo=l(),Ah=a("li"),vpe=a("strong"),Abo=o("mobilevit"),Lbo=o(" \u2014 "),vD=a("a"),ybo=o("MobileViTConfig"),xbo=o(" (MobileViT model)"),$bo=l(),Lh=a("li"),Fpe=a("strong"),kbo=o("mpnet"),Sbo=o(" \u2014 "),FD=a("a"),Rbo=o("MPNetConfig"),Pbo=o(" (MPNet model)"),Bbo=l(),yh=a("li"),Tpe=a("strong"),Ibo=o("mt5"),Nbo=o(" \u2014 "),TD=a("a"),qbo=o("MT5Config"),jbo=o(" (MT5 model)"),Dbo=l(),xh=a("li"),Mpe=a("strong"),Gbo=o("mvp"),Obo=o(" \u2014 "),MD=a("a"),Vbo=o("MvpConfig"),Xbo=o(" (MVP model)"),zbo=l(),$h=a("li"),Epe=a("strong"),Qbo=o("nezha"),Wbo=o(" \u2014 "),ED=a("a"),Ubo=o("NezhaConfig"),Hbo=o(" (Nezha model)"),Jbo=l(),kh=a("li"),Cpe=a("strong"),Ybo=o("nystromformer"),Zbo=o(" \u2014 "),CD=a("a"),Kbo=o("NystromformerConfig"),evo=o(" (Nystr\xF6mformer model)"),ovo=l(),Sh=a("li"),wpe=a("strong"),rvo=o("openai-gpt"),tvo=o(" \u2014 "),wD=a("a"),avo=o("OpenAIGPTConfig"),nvo=o(" (OpenAI GPT model)"),svo=l(),Rh=a("li"),Ape=a("strong"),lvo=o("opt"),ivo=o(" \u2014 "),AD=a("a"),dvo=o("OPTConfig"),mvo=o(" (OPT model)"),cvo=l(),Ph=a("li"),Lpe=a("strong"),fvo=o("owlvit"),gvo=o(" \u2014 "),LD=a("a"),hvo=o("OwlViTConfig"),uvo=o(" (OWL-ViT model)"),pvo=l(),Bh=a("li"),ype=a("strong"),_vo=o("pegasus"),bvo=o(" \u2014 "),yD=a("a"),vvo=o("PegasusConfig"),Fvo=o(" (Pegasus model)"),Tvo=l(),Ih=a("li"),xpe=a("strong"),Mvo=o("pegasus_x"),Evo=o(" \u2014 "),xD=a("a"),Cvo=o("PegasusXConfig"),wvo=o(" (PEGASUS-X model)"),Avo=l(),Nh=a("li"),$pe=a("strong"),Lvo=o("perceiver"),yvo=o(" \u2014 "),$D=a("a"),xvo=o("PerceiverConfig"),$vo=o(" (Perceiver model)"),kvo=l(),qh=a("li"),kpe=a("strong"),Svo=o("plbart"),Rvo=o(" \u2014 "),kD=a("a"),Pvo=o("PLBartConfig"),Bvo=o(" (PLBart model)"),Ivo=l(),jh=a("li"),Spe=a("strong"),Nvo=o("poolformer"),qvo=o(" \u2014 "),SD=a("a"),jvo=o("PoolFormerConfig"),Dvo=o(" (PoolFormer model)"),Gvo=l(),Dh=a("li"),Rpe=a("strong"),Ovo=o("prophetnet"),Vvo=o(" \u2014 "),RD=a("a"),Xvo=o("ProphetNetConfig"),zvo=o(" (ProphetNet model)"),Qvo=l(),Gh=a("li"),Ppe=a("strong"),Wvo=o("qdqbert"),Uvo=o(" \u2014 "),PD=a("a"),Hvo=o("QDQBertConfig"),Jvo=o(" (QDQBert model)"),Yvo=l(),Oh=a("li"),Bpe=a("strong"),Zvo=o("rag"),Kvo=o(" \u2014 "),BD=a("a"),eFo=o("RagConfig"),oFo=o(" (RAG model)"),rFo=l(),Vh=a("li"),Ipe=a("strong"),tFo=o("realm"),aFo=o(" \u2014 "),ID=a("a"),nFo=o("RealmConfig"),sFo=o(" (REALM model)"),lFo=l(),Xh=a("li"),Npe=a("strong"),iFo=o("reformer"),dFo=o(" \u2014 "),ND=a("a"),mFo=o("ReformerConfig"),cFo=o(" (Reformer model)"),fFo=l(),zh=a("li"),qpe=a("strong"),gFo=o("regnet"),hFo=o(" \u2014 "),qD=a("a"),uFo=o("RegNetConfig"),pFo=o(" (RegNet model)"),_Fo=l(),Qh=a("li"),jpe=a("strong"),bFo=o("rembert"),vFo=o(" \u2014 "),jD=a("a"),FFo=o("RemBertConfig"),TFo=o(" (RemBERT model)"),MFo=l(),Wh=a("li"),Dpe=a("strong"),EFo=o("resnet"),CFo=o(" \u2014 "),DD=a("a"),wFo=o("ResNetConfig"),AFo=o(" (ResNet model)"),LFo=l(),Uh=a("li"),Gpe=a("strong"),yFo=o("retribert"),xFo=o(" \u2014 "),GD=a("a"),$Fo=o("RetriBertConfig"),kFo=o(" (RetriBERT model)"),SFo=l(),Hh=a("li"),Ope=a("strong"),RFo=o("roberta"),PFo=o(" \u2014 "),OD=a("a"),BFo=o("RobertaConfig"),IFo=o(" (RoBERTa model)"),NFo=l(),Jh=a("li"),Vpe=a("strong"),qFo=o("roc_bert"),jFo=o(" \u2014 "),VD=a("a"),DFo=o("RoCBertConfig"),GFo=o(" (RoCBert model)"),OFo=l(),Yh=a("li"),Xpe=a("strong"),VFo=o("roformer"),XFo=o(" \u2014 "),XD=a("a"),zFo=o("RoFormerConfig"),QFo=o(" (RoFormer model)"),WFo=l(),Zh=a("li"),zpe=a("strong"),UFo=o("segformer"),HFo=o(" \u2014 "),zD=a("a"),JFo=o("SegformerConfig"),YFo=o(" (SegFormer model)"),ZFo=l(),Kh=a("li"),Qpe=a("strong"),KFo=o("sew"),eTo=o(" \u2014 "),QD=a("a"),oTo=o("SEWConfig"),rTo=o(" (SEW model)"),tTo=l(),eu=a("li"),Wpe=a("strong"),aTo=o("sew-d"),nTo=o(" \u2014 "),WD=a("a"),sTo=o("SEWDConfig"),lTo=o(" (SEW-D model)"),iTo=l(),ou=a("li"),Upe=a("strong"),dTo=o("speech-encoder-decoder"),mTo=o(" \u2014 "),UD=a("a"),cTo=o("SpeechEncoderDecoderConfig"),fTo=o(" (Speech Encoder decoder model)"),gTo=l(),ru=a("li"),Hpe=a("strong"),hTo=o("speech_to_text"),uTo=o(" \u2014 "),HD=a("a"),pTo=o("Speech2TextConfig"),_To=o(" (Speech2Text model)"),bTo=l(),tu=a("li"),Jpe=a("strong"),vTo=o("speech_to_text_2"),FTo=o(" \u2014 "),JD=a("a"),TTo=o("Speech2Text2Config"),MTo=o(" (Speech2Text2 model)"),ETo=l(),au=a("li"),Ype=a("strong"),CTo=o("splinter"),wTo=o(" \u2014 "),YD=a("a"),ATo=o("SplinterConfig"),LTo=o(" (Splinter model)"),yTo=l(),nu=a("li"),Zpe=a("strong"),xTo=o("squeezebert"),$To=o(" \u2014 "),ZD=a("a"),kTo=o("SqueezeBertConfig"),STo=o(" (SqueezeBERT model)"),RTo=l(),su=a("li"),Kpe=a("strong"),PTo=o("swin"),BTo=o(" \u2014 "),KD=a("a"),ITo=o("SwinConfig"),NTo=o(" (Swin Transformer model)"),qTo=l(),lu=a("li"),e_e=a("strong"),jTo=o("swinv2"),DTo=o(" \u2014 "),eG=a("a"),GTo=o("Swinv2Config"),OTo=o(" (Swin Transformer V2 model)"),VTo=l(),iu=a("li"),o_e=a("strong"),XTo=o("switch_transformers"),zTo=o(" \u2014 "),oG=a("a"),QTo=o("SwitchTransformersConfig"),WTo=o(" (SwitchTransformers model)"),UTo=l(),du=a("li"),r_e=a("strong"),HTo=o("t5"),JTo=o(" \u2014 "),rG=a("a"),YTo=o("T5Config"),ZTo=o(" (T5 model)"),KTo=l(),mu=a("li"),t_e=a("strong"),eMo=o("table-transformer"),oMo=o(" \u2014 "),tG=a("a"),rMo=o("TableTransformerConfig"),tMo=o(" (Table Transformer model)"),aMo=l(),cu=a("li"),a_e=a("strong"),nMo=o("tapas"),sMo=o(" \u2014 "),aG=a("a"),lMo=o("TapasConfig"),iMo=o(" (TAPAS model)"),dMo=l(),fu=a("li"),n_e=a("strong"),mMo=o("time_series_transformer"),cMo=o(" \u2014 "),nG=a("a"),fMo=o("TimeSeriesTransformerConfig"),gMo=o(" (Time Series Transformer model)"),hMo=l(),gu=a("li"),s_e=a("strong"),uMo=o("trajectory_transformer"),pMo=o(" \u2014 "),sG=a("a"),_Mo=o("TrajectoryTransformerConfig"),bMo=o(" (Trajectory Transformer model)"),vMo=l(),hu=a("li"),l_e=a("strong"),FMo=o("transfo-xl"),TMo=o(" \u2014 "),lG=a("a"),MMo=o("TransfoXLConfig"),EMo=o(" (Transformer-XL model)"),CMo=l(),uu=a("li"),i_e=a("strong"),wMo=o("trocr"),AMo=o(" \u2014 "),iG=a("a"),LMo=o("TrOCRConfig"),yMo=o(" (TrOCR model)"),xMo=l(),pu=a("li"),d_e=a("strong"),$Mo=o("unispeech"),kMo=o(" \u2014 "),dG=a("a"),SMo=o("UniSpeechConfig"),RMo=o(" (UniSpeech model)"),PMo=l(),_u=a("li"),m_e=a("strong"),BMo=o("unispeech-sat"),IMo=o(" \u2014 "),mG=a("a"),NMo=o("UniSpeechSatConfig"),qMo=o(" (UniSpeechSat model)"),jMo=l(),bu=a("li"),c_e=a("strong"),DMo=o("van"),GMo=o(" \u2014 "),cG=a("a"),OMo=o("VanConfig"),VMo=o(" (VAN model)"),XMo=l(),vu=a("li"),f_e=a("strong"),zMo=o("videomae"),QMo=o(" \u2014 "),fG=a("a"),WMo=o("VideoMAEConfig"),UMo=o(" (VideoMAE model)"),HMo=l(),Fu=a("li"),g_e=a("strong"),JMo=o("vilt"),YMo=o(" \u2014 "),gG=a("a"),ZMo=o("ViltConfig"),KMo=o(" (ViLT model)"),eEo=l(),Tu=a("li"),h_e=a("strong"),oEo=o("vision-encoder-decoder"),rEo=o(" \u2014 "),hG=a("a"),tEo=o("VisionEncoderDecoderConfig"),aEo=o(" (Vision Encoder decoder model)"),nEo=l(),Mu=a("li"),u_e=a("strong"),sEo=o("vision-text-dual-encoder"),lEo=o(" \u2014 "),uG=a("a"),iEo=o("VisionTextDualEncoderConfig"),dEo=o(" (VisionTextDualEncoder model)"),mEo=l(),Eu=a("li"),p_e=a("strong"),cEo=o("visual_bert"),fEo=o(" \u2014 "),pG=a("a"),gEo=o("VisualBertConfig"),hEo=o(" (VisualBERT model)"),uEo=l(),Cu=a("li"),__e=a("strong"),pEo=o("vit"),_Eo=o(" \u2014 "),_G=a("a"),bEo=o("ViTConfig"),vEo=o(" (ViT model)"),FEo=l(),wu=a("li"),b_e=a("strong"),TEo=o("vit_mae"),MEo=o(" \u2014 "),bG=a("a"),EEo=o("ViTMAEConfig"),CEo=o(" (ViTMAE model)"),wEo=l(),Au=a("li"),v_e=a("strong"),AEo=o("vit_msn"),LEo=o(" \u2014 "),vG=a("a"),yEo=o("ViTMSNConfig"),xEo=o(" (ViTMSN model)"),$Eo=l(),Lu=a("li"),F_e=a("strong"),kEo=o("wav2vec2"),SEo=o(" \u2014 "),FG=a("a"),REo=o("Wav2Vec2Config"),PEo=o(" (Wav2Vec2 model)"),BEo=l(),yu=a("li"),T_e=a("strong"),IEo=o("wav2vec2-conformer"),NEo=o(" \u2014 "),TG=a("a"),qEo=o("Wav2Vec2ConformerConfig"),jEo=o(" (Wav2Vec2-Conformer model)"),DEo=l(),xu=a("li"),M_e=a("strong"),GEo=o("wavlm"),OEo=o(" \u2014 "),MG=a("a"),VEo=o("WavLMConfig"),XEo=o(" (WavLM model)"),zEo=l(),$u=a("li"),E_e=a("strong"),QEo=o("whisper"),WEo=o(" \u2014 "),EG=a("a"),UEo=o("WhisperConfig"),HEo=o(" (Whisper model)"),JEo=l(),ku=a("li"),C_e=a("strong"),YEo=o("xclip"),ZEo=o(" \u2014 "),CG=a("a"),KEo=o("XCLIPConfig"),e4o=o(" (X-CLIP model)"),o4o=l(),Su=a("li"),w_e=a("strong"),r4o=o("xglm"),t4o=o(" \u2014 "),wG=a("a"),a4o=o("XGLMConfig"),n4o=o(" (XGLM model)"),s4o=l(),Ru=a("li"),A_e=a("strong"),l4o=o("xlm"),i4o=o(" \u2014 "),AG=a("a"),d4o=o("XLMConfig"),m4o=o(" (XLM model)"),c4o=l(),Pu=a("li"),L_e=a("strong"),f4o=o("xlm-prophetnet"),g4o=o(" \u2014 "),LG=a("a"),h4o=o("XLMProphetNetConfig"),u4o=o(" (XLM-ProphetNet model)"),p4o=l(),Bu=a("li"),y_e=a("strong"),_4o=o("xlm-roberta"),b4o=o(" \u2014 "),yG=a("a"),v4o=o("XLMRobertaConfig"),F4o=o(" (XLM-RoBERTa model)"),T4o=l(),Iu=a("li"),x_e=a("strong"),M4o=o("xlm-roberta-xl"),E4o=o(" \u2014 "),xG=a("a"),C4o=o("XLMRobertaXLConfig"),w4o=o(" (XLM-RoBERTa-XL model)"),A4o=l(),Nu=a("li"),$_e=a("strong"),L4o=o("xlnet"),y4o=o(" \u2014 "),$G=a("a"),x4o=o("XLNetConfig"),$4o=o(" (XLNet model)"),k4o=l(),qu=a("li"),k_e=a("strong"),S4o=o("yolos"),R4o=o(" \u2014 "),kG=a("a"),P4o=o("YolosConfig"),B4o=o(" (YOLOS model)"),I4o=l(),ju=a("li"),S_e=a("strong"),N4o=o("yoso"),q4o=o(" \u2014 "),SG=a("a"),j4o=o("YosoConfig"),D4o=o(" (YOSO model)"),G4o=l(),F(Du.$$.fragment),O4o=l(),Gu=a("div"),F(Pk.$$.fragment),V4o=l(),R_e=a("p"),X4o=o("Register a new configuration for this class."),$io=l(),Nd=a("h2"),Ou=a("a"),P_e=a("span"),F(Bk.$$.fragment),z4o=l(),B_e=a("span"),Q4o=o("AutoTokenizer"),kio=l(),Io=a("div"),F(Ik.$$.fragment),W4o=l(),Nk=a("p"),U4o=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),RG=a("a"),H4o=o("AutoTokenizer.from_pretrained()"),J4o=o(" class method."),Y4o=l(),qk=a("p"),Z4o=o("This class cannot be instantiated directly using "),I_e=a("code"),K4o=o("__init__()"),eCo=o(" (throws an error)."),oCo=l(),Xr=a("div"),F(jk.$$.fragment),rCo=l(),N_e=a("p"),tCo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),aCo=l(),mn=a("p"),nCo=o("The tokenizer class to instantiate is selected based on the "),q_e=a("code"),sCo=o("model_type"),lCo=o(` property of the config object (either
passed as an argument or loaded from `),j_e=a("code"),iCo=o("pretrained_model_name_or_path"),dCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),mCo=o("pretrained_model_name_or_path"),cCo=o(":"),fCo=l(),k=a("ul"),Ms=a("li"),G_e=a("strong"),gCo=o("albert"),hCo=o(" \u2014 "),PG=a("a"),uCo=o("AlbertTokenizer"),pCo=o(" or "),BG=a("a"),_Co=o("AlbertTokenizerFast"),bCo=o(" (ALBERT model)"),vCo=l(),Es=a("li"),O_e=a("strong"),FCo=o("bart"),TCo=o(" \u2014 "),IG=a("a"),MCo=o("BartTokenizer"),ECo=o(" or "),NG=a("a"),CCo=o("BartTokenizerFast"),wCo=o(" (BART model)"),ACo=l(),Cs=a("li"),V_e=a("strong"),LCo=o("barthez"),yCo=o(" \u2014 "),qG=a("a"),xCo=o("BarthezTokenizer"),$Co=o(" or "),jG=a("a"),kCo=o("BarthezTokenizerFast"),SCo=o(" (BARThez model)"),RCo=l(),Vu=a("li"),X_e=a("strong"),PCo=o("bartpho"),BCo=o(" \u2014 "),DG=a("a"),ICo=o("BartphoTokenizer"),NCo=o(" (BARTpho model)"),qCo=l(),ws=a("li"),z_e=a("strong"),jCo=o("bert"),DCo=o(" \u2014 "),GG=a("a"),GCo=o("BertTokenizer"),OCo=o(" or "),OG=a("a"),VCo=o("BertTokenizerFast"),XCo=o(" (BERT model)"),zCo=l(),Xu=a("li"),Q_e=a("strong"),QCo=o("bert-generation"),WCo=o(" \u2014 "),VG=a("a"),UCo=o("BertGenerationTokenizer"),HCo=o(" (Bert Generation model)"),JCo=l(),zu=a("li"),W_e=a("strong"),YCo=o("bert-japanese"),ZCo=o(" \u2014 "),XG=a("a"),KCo=o("BertJapaneseTokenizer"),e3o=o(" (BertJapanese model)"),o3o=l(),Qu=a("li"),U_e=a("strong"),r3o=o("bertweet"),t3o=o(" \u2014 "),zG=a("a"),a3o=o("BertweetTokenizer"),n3o=o(" (BERTweet model)"),s3o=l(),As=a("li"),H_e=a("strong"),l3o=o("big_bird"),i3o=o(" \u2014 "),QG=a("a"),d3o=o("BigBirdTokenizer"),m3o=o(" or "),WG=a("a"),c3o=o("BigBirdTokenizerFast"),f3o=o(" (BigBird model)"),g3o=l(),Ls=a("li"),J_e=a("strong"),h3o=o("bigbird_pegasus"),u3o=o(" \u2014 "),UG=a("a"),p3o=o("PegasusTokenizer"),_3o=o(" or "),HG=a("a"),b3o=o("PegasusTokenizerFast"),v3o=o(" (BigBird-Pegasus model)"),F3o=l(),ys=a("li"),Y_e=a("strong"),T3o=o("blenderbot"),M3o=o(" \u2014 "),JG=a("a"),E3o=o("BlenderbotTokenizer"),C3o=o(" or "),YG=a("a"),w3o=o("BlenderbotTokenizerFast"),A3o=o(" (Blenderbot model)"),L3o=l(),Wu=a("li"),Z_e=a("strong"),y3o=o("blenderbot-small"),x3o=o(" \u2014 "),ZG=a("a"),$3o=o("BlenderbotSmallTokenizer"),k3o=o(" (BlenderbotSmall model)"),S3o=l(),Uu=a("li"),K_e=a("strong"),R3o=o("bloom"),P3o=o(" \u2014 "),KG=a("a"),B3o=o("BloomTokenizerFast"),I3o=o(" (BLOOM model)"),N3o=l(),Hu=a("li"),e1e=a("strong"),q3o=o("byt5"),j3o=o(" \u2014 "),eO=a("a"),D3o=o("ByT5Tokenizer"),G3o=o(" (ByT5 model)"),O3o=l(),xs=a("li"),o1e=a("strong"),V3o=o("camembert"),X3o=o(" \u2014 "),oO=a("a"),z3o=o("CamembertTokenizer"),Q3o=o(" or "),rO=a("a"),W3o=o("CamembertTokenizerFast"),U3o=o(" (CamemBERT model)"),H3o=l(),Ju=a("li"),r1e=a("strong"),J3o=o("canine"),Y3o=o(" \u2014 "),tO=a("a"),Z3o=o("CanineTokenizer"),K3o=o(" (CANINE model)"),e5o=l(),$s=a("li"),t1e=a("strong"),o5o=o("clip"),r5o=o(" \u2014 "),aO=a("a"),t5o=o("CLIPTokenizer"),a5o=o(" or "),nO=a("a"),n5o=o("CLIPTokenizerFast"),s5o=o(" (CLIP model)"),l5o=l(),ks=a("li"),a1e=a("strong"),i5o=o("clipseg"),d5o=o(" \u2014 "),sO=a("a"),m5o=o("CLIPTokenizer"),c5o=o(" or "),lO=a("a"),f5o=o("CLIPTokenizerFast"),g5o=o(" (CLIPSeg model)"),h5o=l(),Ss=a("li"),n1e=a("strong"),u5o=o("codegen"),p5o=o(" \u2014 "),iO=a("a"),_5o=o("CodeGenTokenizer"),b5o=o(" or "),dO=a("a"),v5o=o("CodeGenTokenizerFast"),F5o=o(" (CodeGen model)"),T5o=l(),Rs=a("li"),s1e=a("strong"),M5o=o("convbert"),E5o=o(" \u2014 "),mO=a("a"),C5o=o("ConvBertTokenizer"),w5o=o(" or "),cO=a("a"),A5o=o("ConvBertTokenizerFast"),L5o=o(" (ConvBERT model)"),y5o=l(),Ps=a("li"),l1e=a("strong"),x5o=o("cpm"),$5o=o(" \u2014 "),fO=a("a"),k5o=o("CpmTokenizer"),S5o=o(" or "),gO=a("a"),R5o=o("CpmTokenizerFast"),P5o=o(" (CPM model)"),B5o=l(),Yu=a("li"),i1e=a("strong"),I5o=o("ctrl"),N5o=o(" \u2014 "),hO=a("a"),q5o=o("CTRLTokenizer"),j5o=o(" (CTRL model)"),D5o=l(),Bs=a("li"),d1e=a("strong"),G5o=o("data2vec-text"),O5o=o(" \u2014 "),uO=a("a"),V5o=o("RobertaTokenizer"),X5o=o(" or "),pO=a("a"),z5o=o("RobertaTokenizerFast"),Q5o=o(" (Data2VecText model)"),W5o=l(),Is=a("li"),m1e=a("strong"),U5o=o("deberta"),H5o=o(" \u2014 "),_O=a("a"),J5o=o("DebertaTokenizer"),Y5o=o(" or "),bO=a("a"),Z5o=o("DebertaTokenizerFast"),K5o=o(" (DeBERTa model)"),e0o=l(),Ns=a("li"),c1e=a("strong"),o0o=o("deberta-v2"),r0o=o(" \u2014 "),vO=a("a"),t0o=o("DebertaV2Tokenizer"),a0o=o(" or "),FO=a("a"),n0o=o("DebertaV2TokenizerFast"),s0o=o(" (DeBERTa-v2 model)"),l0o=l(),qs=a("li"),f1e=a("strong"),i0o=o("distilbert"),d0o=o(" \u2014 "),TO=a("a"),m0o=o("DistilBertTokenizer"),c0o=o(" or "),MO=a("a"),f0o=o("DistilBertTokenizerFast"),g0o=o(" (DistilBERT model)"),h0o=l(),js=a("li"),g1e=a("strong"),u0o=o("dpr"),p0o=o(" \u2014 "),EO=a("a"),_0o=o("DPRQuestionEncoderTokenizer"),b0o=o(" or "),CO=a("a"),v0o=o("DPRQuestionEncoderTokenizerFast"),F0o=o(" (DPR model)"),T0o=l(),Ds=a("li"),h1e=a("strong"),M0o=o("electra"),E0o=o(" \u2014 "),wO=a("a"),C0o=o("ElectraTokenizer"),w0o=o(" or "),AO=a("a"),A0o=o("ElectraTokenizerFast"),L0o=o(" (ELECTRA model)"),y0o=l(),Gs=a("li"),u1e=a("strong"),x0o=o("ernie"),$0o=o(" \u2014 "),LO=a("a"),k0o=o("BertTokenizer"),S0o=o(" or "),yO=a("a"),R0o=o("BertTokenizerFast"),P0o=o(" (ERNIE model)"),B0o=l(),Zu=a("li"),p1e=a("strong"),I0o=o("esm"),N0o=o(" \u2014 "),xO=a("a"),q0o=o("EsmTokenizer"),j0o=o(" (ESM model)"),D0o=l(),Ku=a("li"),_1e=a("strong"),G0o=o("flaubert"),O0o=o(" \u2014 "),$O=a("a"),V0o=o("FlaubertTokenizer"),X0o=o(" (FlauBERT model)"),z0o=l(),Os=a("li"),b1e=a("strong"),Q0o=o("fnet"),W0o=o(" \u2014 "),kO=a("a"),U0o=o("FNetTokenizer"),H0o=o(" or "),SO=a("a"),J0o=o("FNetTokenizerFast"),Y0o=o(" (FNet model)"),Z0o=l(),ep=a("li"),v1e=a("strong"),K0o=o("fsmt"),ewo=o(" \u2014 "),RO=a("a"),owo=o("FSMTTokenizer"),rwo=o(" (FairSeq Machine-Translation model)"),two=l(),Vs=a("li"),F1e=a("strong"),awo=o("funnel"),nwo=o(" \u2014 "),PO=a("a"),swo=o("FunnelTokenizer"),lwo=o(" or "),BO=a("a"),iwo=o("FunnelTokenizerFast"),dwo=o(" (Funnel Transformer model)"),mwo=l(),Xs=a("li"),T1e=a("strong"),cwo=o("gpt2"),fwo=o(" \u2014 "),IO=a("a"),gwo=o("GPT2Tokenizer"),hwo=o(" or "),NO=a("a"),uwo=o("GPT2TokenizerFast"),pwo=o(" (OpenAI GPT-2 model)"),_wo=l(),zs=a("li"),M1e=a("strong"),bwo=o("gpt_neo"),vwo=o(" \u2014 "),qO=a("a"),Fwo=o("GPT2Tokenizer"),Two=o(" or "),jO=a("a"),Mwo=o("GPT2TokenizerFast"),Ewo=o(" (GPT Neo model)"),Cwo=l(),op=a("li"),E1e=a("strong"),wwo=o("gpt_neox"),Awo=o(" \u2014 "),DO=a("a"),Lwo=o("GPTNeoXTokenizerFast"),ywo=o(" (GPT NeoX model)"),xwo=l(),rp=a("li"),C1e=a("strong"),$wo=o("gpt_neox_japanese"),kwo=o(" \u2014 "),GO=a("a"),Swo=o("GPTNeoXJapaneseTokenizer"),Rwo=o(" (GPT NeoX Japanese model)"),Pwo=l(),Qs=a("li"),w1e=a("strong"),Bwo=o("gptj"),Iwo=o(" \u2014 "),OO=a("a"),Nwo=o("GPT2Tokenizer"),qwo=o(" or "),VO=a("a"),jwo=o("GPT2TokenizerFast"),Dwo=o(" (GPT-J model)"),Gwo=l(),Ws=a("li"),A1e=a("strong"),Owo=o("groupvit"),Vwo=o(" \u2014 "),XO=a("a"),Xwo=o("CLIPTokenizer"),zwo=o(" or "),zO=a("a"),Qwo=o("CLIPTokenizerFast"),Wwo=o(" (GroupViT model)"),Uwo=l(),Us=a("li"),L1e=a("strong"),Hwo=o("herbert"),Jwo=o(" \u2014 "),QO=a("a"),Ywo=o("HerbertTokenizer"),Zwo=o(" or "),WO=a("a"),Kwo=o("HerbertTokenizerFast"),eAo=o(" (HerBERT model)"),oAo=l(),tp=a("li"),y1e=a("strong"),rAo=o("hubert"),tAo=o(" \u2014 "),UO=a("a"),aAo=o("Wav2Vec2CTCTokenizer"),nAo=o(" (Hubert model)"),sAo=l(),Hs=a("li"),x1e=a("strong"),lAo=o("ibert"),iAo=o(" \u2014 "),HO=a("a"),dAo=o("RobertaTokenizer"),mAo=o(" or "),JO=a("a"),cAo=o("RobertaTokenizerFast"),fAo=o(" (I-BERT model)"),gAo=l(),ap=a("li"),$1e=a("strong"),hAo=o("jukebox"),uAo=o(" \u2014 "),YO=a("a"),pAo=o("JukeboxTokenizer"),_Ao=o(" (Jukebox model)"),bAo=l(),Js=a("li"),k1e=a("strong"),vAo=o("layoutlm"),FAo=o(" \u2014 "),ZO=a("a"),TAo=o("LayoutLMTokenizer"),MAo=o(" or "),KO=a("a"),EAo=o("LayoutLMTokenizerFast"),CAo=o(" (LayoutLM model)"),wAo=l(),Ys=a("li"),S1e=a("strong"),AAo=o("layoutlmv2"),LAo=o(" \u2014 "),eV=a("a"),yAo=o("LayoutLMv2Tokenizer"),xAo=o(" or "),oV=a("a"),$Ao=o("LayoutLMv2TokenizerFast"),kAo=o(" (LayoutLMv2 model)"),SAo=l(),Zs=a("li"),R1e=a("strong"),RAo=o("layoutlmv3"),PAo=o(" \u2014 "),rV=a("a"),BAo=o("LayoutLMv3Tokenizer"),IAo=o(" or "),tV=a("a"),NAo=o("LayoutLMv3TokenizerFast"),qAo=o(" (LayoutLMv3 model)"),jAo=l(),Ks=a("li"),P1e=a("strong"),DAo=o("layoutxlm"),GAo=o(" \u2014 "),aV=a("a"),OAo=o("LayoutXLMTokenizer"),VAo=o(" or "),nV=a("a"),XAo=o("LayoutXLMTokenizerFast"),zAo=o(" (LayoutXLM model)"),QAo=l(),el=a("li"),B1e=a("strong"),WAo=o("led"),UAo=o(" \u2014 "),sV=a("a"),HAo=o("LEDTokenizer"),JAo=o(" or "),lV=a("a"),YAo=o("LEDTokenizerFast"),ZAo=o(" (LED model)"),KAo=l(),ol=a("li"),I1e=a("strong"),e6o=o("lilt"),o6o=o(" \u2014 "),iV=a("a"),r6o=o("LayoutLMv3Tokenizer"),t6o=o(" or "),dV=a("a"),a6o=o("LayoutLMv3TokenizerFast"),n6o=o(" (LiLT model)"),s6o=l(),rl=a("li"),N1e=a("strong"),l6o=o("longformer"),i6o=o(" \u2014 "),mV=a("a"),d6o=o("LongformerTokenizer"),m6o=o(" or "),cV=a("a"),c6o=o("LongformerTokenizerFast"),f6o=o(" (Longformer model)"),g6o=l(),tl=a("li"),q1e=a("strong"),h6o=o("longt5"),u6o=o(" \u2014 "),fV=a("a"),p6o=o("T5Tokenizer"),_6o=o(" or "),gV=a("a"),b6o=o("T5TokenizerFast"),v6o=o(" (LongT5 model)"),F6o=l(),np=a("li"),j1e=a("strong"),T6o=o("luke"),M6o=o(" \u2014 "),hV=a("a"),E6o=o("LukeTokenizer"),C6o=o(" (LUKE model)"),w6o=l(),al=a("li"),D1e=a("strong"),A6o=o("lxmert"),L6o=o(" \u2014 "),uV=a("a"),y6o=o("LxmertTokenizer"),x6o=o(" or "),pV=a("a"),$6o=o("LxmertTokenizerFast"),k6o=o(" (LXMERT model)"),S6o=l(),sp=a("li"),G1e=a("strong"),R6o=o("m2m_100"),P6o=o(" \u2014 "),_V=a("a"),B6o=o("M2M100Tokenizer"),I6o=o(" (M2M100 model)"),N6o=l(),lp=a("li"),O1e=a("strong"),q6o=o("marian"),j6o=o(" \u2014 "),bV=a("a"),D6o=o("MarianTokenizer"),G6o=o(" (Marian model)"),O6o=l(),nl=a("li"),V1e=a("strong"),V6o=o("mbart"),X6o=o(" \u2014 "),vV=a("a"),z6o=o("MBartTokenizer"),Q6o=o(" or "),FV=a("a"),W6o=o("MBartTokenizerFast"),U6o=o(" (mBART model)"),H6o=l(),sl=a("li"),X1e=a("strong"),J6o=o("mbart50"),Y6o=o(" \u2014 "),TV=a("a"),Z6o=o("MBart50Tokenizer"),K6o=o(" or "),MV=a("a"),e7o=o("MBart50TokenizerFast"),o7o=o(" (mBART-50 model)"),r7o=l(),ll=a("li"),z1e=a("strong"),t7o=o("megatron-bert"),a7o=o(" \u2014 "),EV=a("a"),n7o=o("BertTokenizer"),s7o=o(" or "),CV=a("a"),l7o=o("BertTokenizerFast"),i7o=o(" (Megatron-BERT model)"),d7o=l(),ip=a("li"),Q1e=a("strong"),m7o=o("mluke"),c7o=o(" \u2014 "),wV=a("a"),f7o=o("MLukeTokenizer"),g7o=o(" (mLUKE model)"),h7o=l(),il=a("li"),W1e=a("strong"),u7o=o("mobilebert"),p7o=o(" \u2014 "),AV=a("a"),_7o=o("MobileBertTokenizer"),b7o=o(" or "),LV=a("a"),v7o=o("MobileBertTokenizerFast"),F7o=o(" (MobileBERT model)"),T7o=l(),dl=a("li"),U1e=a("strong"),M7o=o("mpnet"),E7o=o(" \u2014 "),yV=a("a"),C7o=o("MPNetTokenizer"),w7o=o(" or "),xV=a("a"),A7o=o("MPNetTokenizerFast"),L7o=o(" (MPNet model)"),y7o=l(),ml=a("li"),H1e=a("strong"),x7o=o("mt5"),$7o=o(" \u2014 "),$V=a("a"),k7o=o("MT5Tokenizer"),S7o=o(" or "),kV=a("a"),R7o=o("MT5TokenizerFast"),P7o=o(" (MT5 model)"),B7o=l(),cl=a("li"),J1e=a("strong"),I7o=o("mvp"),N7o=o(" \u2014 "),SV=a("a"),q7o=o("MvpTokenizer"),j7o=o(" or "),RV=a("a"),D7o=o("MvpTokenizerFast"),G7o=o(" (MVP model)"),O7o=l(),fl=a("li"),Y1e=a("strong"),V7o=o("nezha"),X7o=o(" \u2014 "),PV=a("a"),z7o=o("BertTokenizer"),Q7o=o(" or "),BV=a("a"),W7o=o("BertTokenizerFast"),U7o=o(" (Nezha model)"),H7o=l(),gl=a("li"),Z1e=a("strong"),J7o=o("nllb"),Y7o=o(" \u2014 "),IV=a("a"),Z7o=o("NllbTokenizer"),K7o=o(" or "),NV=a("a"),e8o=o("NllbTokenizerFast"),o8o=o(" (NLLB model)"),r8o=l(),hl=a("li"),K1e=a("strong"),t8o=o("nystromformer"),a8o=o(" \u2014 "),qV=a("a"),n8o=o("AlbertTokenizer"),s8o=o(" or "),jV=a("a"),l8o=o("AlbertTokenizerFast"),i8o=o(" (Nystr\xF6mformer model)"),d8o=l(),ul=a("li"),e2e=a("strong"),m8o=o("openai-gpt"),c8o=o(" \u2014 "),DV=a("a"),f8o=o("OpenAIGPTTokenizer"),g8o=o(" or "),GV=a("a"),h8o=o("OpenAIGPTTokenizerFast"),u8o=o(" (OpenAI GPT model)"),p8o=l(),dp=a("li"),o2e=a("strong"),_8o=o("opt"),b8o=o(" \u2014 "),OV=a("a"),v8o=o("GPT2Tokenizer"),F8o=o(" (OPT model)"),T8o=l(),pl=a("li"),r2e=a("strong"),M8o=o("owlvit"),E8o=o(" \u2014 "),VV=a("a"),C8o=o("CLIPTokenizer"),w8o=o(" or "),XV=a("a"),A8o=o("CLIPTokenizerFast"),L8o=o(" (OWL-ViT model)"),y8o=l(),_l=a("li"),t2e=a("strong"),x8o=o("pegasus"),$8o=o(" \u2014 "),zV=a("a"),k8o=o("PegasusTokenizer"),S8o=o(" or "),QV=a("a"),R8o=o("PegasusTokenizerFast"),P8o=o(" (Pegasus model)"),B8o=l(),bl=a("li"),a2e=a("strong"),I8o=o("pegasus_x"),N8o=o(" \u2014 "),WV=a("a"),q8o=o("PegasusTokenizer"),j8o=o(" or "),UV=a("a"),D8o=o("PegasusTokenizerFast"),G8o=o(" (PEGASUS-X model)"),O8o=l(),mp=a("li"),n2e=a("strong"),V8o=o("perceiver"),X8o=o(" \u2014 "),HV=a("a"),z8o=o("PerceiverTokenizer"),Q8o=o(" (Perceiver model)"),W8o=l(),cp=a("li"),s2e=a("strong"),U8o=o("phobert"),H8o=o(" \u2014 "),JV=a("a"),J8o=o("PhobertTokenizer"),Y8o=o(" (PhoBERT model)"),Z8o=l(),fp=a("li"),l2e=a("strong"),K8o=o("plbart"),eLo=o(" \u2014 "),YV=a("a"),oLo=o("PLBartTokenizer"),rLo=o(" (PLBart model)"),tLo=l(),gp=a("li"),i2e=a("strong"),aLo=o("prophetnet"),nLo=o(" \u2014 "),ZV=a("a"),sLo=o("ProphetNetTokenizer"),lLo=o(" (ProphetNet model)"),iLo=l(),vl=a("li"),d2e=a("strong"),dLo=o("qdqbert"),mLo=o(" \u2014 "),KV=a("a"),cLo=o("BertTokenizer"),fLo=o(" or "),eX=a("a"),gLo=o("BertTokenizerFast"),hLo=o(" (QDQBert model)"),uLo=l(),hp=a("li"),m2e=a("strong"),pLo=o("rag"),_Lo=o(" \u2014 "),oX=a("a"),bLo=o("RagTokenizer"),vLo=o(" (RAG model)"),FLo=l(),Fl=a("li"),c2e=a("strong"),TLo=o("realm"),MLo=o(" \u2014 "),rX=a("a"),ELo=o("RealmTokenizer"),CLo=o(" or "),tX=a("a"),wLo=o("RealmTokenizerFast"),ALo=o(" (REALM model)"),LLo=l(),Tl=a("li"),f2e=a("strong"),yLo=o("reformer"),xLo=o(" \u2014 "),aX=a("a"),$Lo=o("ReformerTokenizer"),kLo=o(" or "),nX=a("a"),SLo=o("ReformerTokenizerFast"),RLo=o(" (Reformer model)"),PLo=l(),Ml=a("li"),g2e=a("strong"),BLo=o("rembert"),ILo=o(" \u2014 "),sX=a("a"),NLo=o("RemBertTokenizer"),qLo=o(" or "),lX=a("a"),jLo=o("RemBertTokenizerFast"),DLo=o(" (RemBERT model)"),GLo=l(),El=a("li"),h2e=a("strong"),OLo=o("retribert"),VLo=o(" \u2014 "),iX=a("a"),XLo=o("RetriBertTokenizer"),zLo=o(" or "),dX=a("a"),QLo=o("RetriBertTokenizerFast"),WLo=o(" (RetriBERT model)"),ULo=l(),Cl=a("li"),u2e=a("strong"),HLo=o("roberta"),JLo=o(" \u2014 "),mX=a("a"),YLo=o("RobertaTokenizer"),ZLo=o(" or "),cX=a("a"),KLo=o("RobertaTokenizerFast"),eyo=o(" (RoBERTa model)"),oyo=l(),up=a("li"),p2e=a("strong"),ryo=o("roc_bert"),tyo=o(" \u2014 "),fX=a("a"),ayo=o("RoCBertTokenizer"),nyo=o(" (RoCBert model)"),syo=l(),wl=a("li"),_2e=a("strong"),lyo=o("roformer"),iyo=o(" \u2014 "),gX=a("a"),dyo=o("RoFormerTokenizer"),myo=o(" or "),hX=a("a"),cyo=o("RoFormerTokenizerFast"),fyo=o(" (RoFormer model)"),gyo=l(),pp=a("li"),b2e=a("strong"),hyo=o("speech_to_text"),uyo=o(" \u2014 "),uX=a("a"),pyo=o("Speech2TextTokenizer"),_yo=o(" (Speech2Text model)"),byo=l(),_p=a("li"),v2e=a("strong"),vyo=o("speech_to_text_2"),Fyo=o(" \u2014 "),pX=a("a"),Tyo=o("Speech2Text2Tokenizer"),Myo=o(" (Speech2Text2 model)"),Eyo=l(),Al=a("li"),F2e=a("strong"),Cyo=o("splinter"),wyo=o(" \u2014 "),_X=a("a"),Ayo=o("SplinterTokenizer"),Lyo=o(" or "),bX=a("a"),yyo=o("SplinterTokenizerFast"),xyo=o(" (Splinter model)"),$yo=l(),Ll=a("li"),T2e=a("strong"),kyo=o("squeezebert"),Syo=o(" \u2014 "),vX=a("a"),Ryo=o("SqueezeBertTokenizer"),Pyo=o(" or "),FX=a("a"),Byo=o("SqueezeBertTokenizerFast"),Iyo=o(" (SqueezeBERT model)"),Nyo=l(),yl=a("li"),M2e=a("strong"),qyo=o("switch_transformers"),jyo=o(" \u2014 "),TX=a("a"),Dyo=o("T5Tokenizer"),Gyo=o(" or "),MX=a("a"),Oyo=o("T5TokenizerFast"),Vyo=o(" (SwitchTransformers model)"),Xyo=l(),xl=a("li"),E2e=a("strong"),zyo=o("t5"),Qyo=o(" \u2014 "),EX=a("a"),Wyo=o("T5Tokenizer"),Uyo=o(" or "),CX=a("a"),Hyo=o("T5TokenizerFast"),Jyo=o(" (T5 model)"),Yyo=l(),bp=a("li"),C2e=a("strong"),Zyo=o("tapas"),Kyo=o(" \u2014 "),wX=a("a"),e9o=o("TapasTokenizer"),o9o=o(" (TAPAS model)"),r9o=l(),vp=a("li"),w2e=a("strong"),t9o=o("tapex"),a9o=o(" \u2014 "),AX=a("a"),n9o=o("TapexTokenizer"),s9o=o(" (TAPEX model)"),l9o=l(),Fp=a("li"),A2e=a("strong"),i9o=o("transfo-xl"),d9o=o(" \u2014 "),LX=a("a"),m9o=o("TransfoXLTokenizer"),c9o=o(" (Transformer-XL model)"),f9o=l(),$l=a("li"),L2e=a("strong"),g9o=o("vilt"),h9o=o(" \u2014 "),yX=a("a"),u9o=o("BertTokenizer"),p9o=o(" or "),xX=a("a"),_9o=o("BertTokenizerFast"),b9o=o(" (ViLT model)"),v9o=l(),kl=a("li"),y2e=a("strong"),F9o=o("visual_bert"),T9o=o(" \u2014 "),$X=a("a"),M9o=o("BertTokenizer"),E9o=o(" or "),kX=a("a"),C9o=o("BertTokenizerFast"),w9o=o(" (VisualBERT model)"),A9o=l(),Tp=a("li"),x2e=a("strong"),L9o=o("wav2vec2"),y9o=o(" \u2014 "),SX=a("a"),x9o=o("Wav2Vec2CTCTokenizer"),$9o=o(" (Wav2Vec2 model)"),k9o=l(),Mp=a("li"),$2e=a("strong"),S9o=o("wav2vec2-conformer"),R9o=o(" \u2014 "),RX=a("a"),P9o=o("Wav2Vec2CTCTokenizer"),B9o=o(" (Wav2Vec2-Conformer model)"),I9o=l(),Ep=a("li"),k2e=a("strong"),N9o=o("wav2vec2_phoneme"),q9o=o(" \u2014 "),PX=a("a"),j9o=o("Wav2Vec2PhonemeCTCTokenizer"),D9o=o(" (Wav2Vec2Phoneme model)"),G9o=l(),Cp=a("li"),S2e=a("strong"),O9o=o("whisper"),V9o=o(" \u2014 "),BX=a("a"),X9o=o("WhisperTokenizer"),z9o=o(" (Whisper model)"),Q9o=l(),Sl=a("li"),R2e=a("strong"),W9o=o("xclip"),U9o=o(" \u2014 "),IX=a("a"),H9o=o("CLIPTokenizer"),J9o=o(" or "),NX=a("a"),Y9o=o("CLIPTokenizerFast"),Z9o=o(" (X-CLIP model)"),K9o=l(),Rl=a("li"),P2e=a("strong"),exo=o("xglm"),oxo=o(" \u2014 "),qX=a("a"),rxo=o("XGLMTokenizer"),txo=o(" or "),jX=a("a"),axo=o("XGLMTokenizerFast"),nxo=o(" (XGLM model)"),sxo=l(),wp=a("li"),B2e=a("strong"),lxo=o("xlm"),ixo=o(" \u2014 "),DX=a("a"),dxo=o("XLMTokenizer"),mxo=o(" (XLM model)"),cxo=l(),Ap=a("li"),I2e=a("strong"),fxo=o("xlm-prophetnet"),gxo=o(" \u2014 "),GX=a("a"),hxo=o("XLMProphetNetTokenizer"),uxo=o(" (XLM-ProphetNet model)"),pxo=l(),Pl=a("li"),N2e=a("strong"),_xo=o("xlm-roberta"),bxo=o(" \u2014 "),OX=a("a"),vxo=o("XLMRobertaTokenizer"),Fxo=o(" or "),VX=a("a"),Txo=o("XLMRobertaTokenizerFast"),Mxo=o(" (XLM-RoBERTa model)"),Exo=l(),Bl=a("li"),q2e=a("strong"),Cxo=o("xlm-roberta-xl"),wxo=o(" \u2014 "),XX=a("a"),Axo=o("XLMRobertaTokenizer"),Lxo=o(" or "),zX=a("a"),yxo=o("XLMRobertaTokenizerFast"),xxo=o(" (XLM-RoBERTa-XL model)"),$xo=l(),Il=a("li"),j2e=a("strong"),kxo=o("xlnet"),Sxo=o(" \u2014 "),QX=a("a"),Rxo=o("XLNetTokenizer"),Pxo=o(" or "),WX=a("a"),Bxo=o("XLNetTokenizerFast"),Ixo=o(" (XLNet model)"),Nxo=l(),Nl=a("li"),D2e=a("strong"),qxo=o("yoso"),jxo=o(" \u2014 "),UX=a("a"),Dxo=o("AlbertTokenizer"),Gxo=o(" or "),HX=a("a"),Oxo=o("AlbertTokenizerFast"),Vxo=o(" (YOSO model)"),Xxo=l(),F(Lp.$$.fragment),zxo=l(),yp=a("div"),F(Dk.$$.fragment),Qxo=l(),G2e=a("p"),Wxo=o("Register a new tokenizer in this mapping."),Sio=l(),qd=a("h2"),xp=a("a"),O2e=a("span"),F(Gk.$$.fragment),Uxo=l(),V2e=a("span"),Hxo=o("AutoFeatureExtractor"),Rio=l(),No=a("div"),F(Ok.$$.fragment),Jxo=l(),Vk=a("p"),Yxo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JX=a("a"),Zxo=o("AutoFeatureExtractor.from_pretrained()"),Kxo=o(" class method."),e$o=l(),Xk=a("p"),o$o=o("This class cannot be instantiated directly using "),X2e=a("code"),r$o=o("__init__()"),t$o=o(" (throws an error)."),a$o=l(),eo=a("div"),F(zk.$$.fragment),n$o=l(),z2e=a("p"),s$o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),l$o=l(),cn=a("p"),i$o=o("The feature extractor class to instantiate is selected based on the "),Q2e=a("code"),d$o=o("model_type"),m$o=o(` property of the config object
(either passed as an argument or loaded from `),W2e=a("code"),c$o=o("pretrained_model_name_or_path"),f$o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),U2e=a("code"),g$o=o("pretrained_model_name_or_path"),h$o=o(":"),u$o=l(),z=a("ul"),$p=a("li"),H2e=a("strong"),p$o=o("beit"),_$o=o(" \u2014 "),YX=a("a"),b$o=o("BeitFeatureExtractor"),v$o=o(" (BEiT model)"),F$o=l(),kp=a("li"),J2e=a("strong"),T$o=o("clip"),M$o=o(" \u2014 "),ZX=a("a"),E$o=o("CLIPFeatureExtractor"),C$o=o(" (CLIP model)"),w$o=l(),Sp=a("li"),Y2e=a("strong"),A$o=o("clipseg"),L$o=o(" \u2014 "),KX=a("a"),y$o=o("ViTFeatureExtractor"),x$o=o(" (CLIPSeg model)"),$$o=l(),Rp=a("li"),Z2e=a("strong"),k$o=o("conditional_detr"),S$o=o(" \u2014 "),ez=a("a"),R$o=o("ConditionalDetrFeatureExtractor"),P$o=o(" (Conditional DETR model)"),B$o=l(),Pp=a("li"),K2e=a("strong"),I$o=o("convnext"),N$o=o(" \u2014 "),oz=a("a"),q$o=o("ConvNextFeatureExtractor"),j$o=o(" (ConvNeXT model)"),D$o=l(),Bp=a("li"),ebe=a("strong"),G$o=o("cvt"),O$o=o(" \u2014 "),rz=a("a"),V$o=o("ConvNextFeatureExtractor"),X$o=o(" (CvT model)"),z$o=l(),Ip=a("li"),obe=a("strong"),Q$o=o("data2vec-audio"),W$o=o(" \u2014 "),tz=a("a"),U$o=o("Wav2Vec2FeatureExtractor"),H$o=o(" (Data2VecAudio model)"),J$o=l(),Np=a("li"),rbe=a("strong"),Y$o=o("data2vec-vision"),Z$o=o(" \u2014 "),az=a("a"),K$o=o("BeitFeatureExtractor"),eko=o(" (Data2VecVision model)"),oko=l(),qp=a("li"),tbe=a("strong"),rko=o("deformable_detr"),tko=o(" \u2014 "),nz=a("a"),ako=o("DeformableDetrFeatureExtractor"),nko=o(" (Deformable DETR model)"),sko=l(),jp=a("li"),abe=a("strong"),lko=o("deit"),iko=o(" \u2014 "),sz=a("a"),dko=o("DeiTFeatureExtractor"),mko=o(" (DeiT model)"),cko=l(),Dp=a("li"),nbe=a("strong"),fko=o("detr"),gko=o(" \u2014 "),lz=a("a"),hko=o("DetrFeatureExtractor"),uko=o(" (DETR model)"),pko=l(),Gp=a("li"),sbe=a("strong"),_ko=o("donut-swin"),bko=o(" \u2014 "),iz=a("a"),vko=o("DonutFeatureExtractor"),Fko=o(" (DonutSwin model)"),Tko=l(),Op=a("li"),lbe=a("strong"),Mko=o("dpt"),Eko=o(" \u2014 "),dz=a("a"),Cko=o("DPTFeatureExtractor"),wko=o(" (DPT model)"),Ako=l(),Vp=a("li"),ibe=a("strong"),Lko=o("flava"),yko=o(" \u2014 "),mz=a("a"),xko=o("FlavaFeatureExtractor"),$ko=o(" (FLAVA model)"),kko=l(),Xp=a("li"),dbe=a("strong"),Sko=o("glpn"),Rko=o(" \u2014 "),cz=a("a"),Pko=o("GLPNFeatureExtractor"),Bko=o(" (GLPN model)"),Iko=l(),zp=a("li"),mbe=a("strong"),Nko=o("groupvit"),qko=o(" \u2014 "),fz=a("a"),jko=o("CLIPFeatureExtractor"),Dko=o(" (GroupViT model)"),Gko=l(),Qp=a("li"),cbe=a("strong"),Oko=o("hubert"),Vko=o(" \u2014 "),gz=a("a"),Xko=o("Wav2Vec2FeatureExtractor"),zko=o(" (Hubert model)"),Qko=l(),Wp=a("li"),fbe=a("strong"),Wko=o("imagegpt"),Uko=o(" \u2014 "),hz=a("a"),Hko=o("ImageGPTFeatureExtractor"),Jko=o(" (ImageGPT model)"),Yko=l(),Up=a("li"),gbe=a("strong"),Zko=o("layoutlmv2"),Kko=o(" \u2014 "),uz=a("a"),eSo=o("LayoutLMv2FeatureExtractor"),oSo=o(" (LayoutLMv2 model)"),rSo=l(),Hp=a("li"),hbe=a("strong"),tSo=o("layoutlmv3"),aSo=o(" \u2014 "),pz=a("a"),nSo=o("LayoutLMv3FeatureExtractor"),sSo=o(" (LayoutLMv3 model)"),lSo=l(),Jp=a("li"),ube=a("strong"),iSo=o("levit"),dSo=o(" \u2014 "),_z=a("a"),mSo=o("LevitFeatureExtractor"),cSo=o(" (LeViT model)"),fSo=l(),Yp=a("li"),pbe=a("strong"),gSo=o("maskformer"),hSo=o(" \u2014 "),bz=a("a"),uSo=o("MaskFormerFeatureExtractor"),pSo=o(" (MaskFormer model)"),_So=l(),Zp=a("li"),_be=a("strong"),bSo=o("mctct"),vSo=o(" \u2014 "),vz=a("a"),FSo=o("MCTCTFeatureExtractor"),TSo=o(" (M-CTC-T model)"),MSo=l(),Kp=a("li"),bbe=a("strong"),ESo=o("mobilenet_v2"),CSo=o(" \u2014 "),Fz=a("a"),wSo=o("MobileNetV2FeatureExtractor"),ASo=o(" (MobileNetV2 model)"),LSo=l(),e_=a("li"),vbe=a("strong"),ySo=o("mobilevit"),xSo=o(" \u2014 "),Tz=a("a"),$So=o("MobileViTFeatureExtractor"),kSo=o(" (MobileViT model)"),SSo=l(),o_=a("li"),Fbe=a("strong"),RSo=o("owlvit"),PSo=o(" \u2014 "),Mz=a("a"),BSo=o("OwlViTFeatureExtractor"),ISo=o(" (OWL-ViT model)"),NSo=l(),r_=a("li"),Tbe=a("strong"),qSo=o("perceiver"),jSo=o(" \u2014 "),Ez=a("a"),DSo=o("PerceiverFeatureExtractor"),GSo=o(" (Perceiver model)"),OSo=l(),t_=a("li"),Mbe=a("strong"),VSo=o("poolformer"),XSo=o(" \u2014 "),Cz=a("a"),zSo=o("PoolFormerFeatureExtractor"),QSo=o(" (PoolFormer model)"),WSo=l(),a_=a("li"),Ebe=a("strong"),USo=o("regnet"),HSo=o(" \u2014 "),wz=a("a"),JSo=o("ConvNextFeatureExtractor"),YSo=o(" (RegNet model)"),ZSo=l(),n_=a("li"),Cbe=a("strong"),KSo=o("resnet"),eRo=o(" \u2014 "),Az=a("a"),oRo=o("ConvNextFeatureExtractor"),rRo=o(" (ResNet model)"),tRo=l(),s_=a("li"),wbe=a("strong"),aRo=o("segformer"),nRo=o(" \u2014 "),Lz=a("a"),sRo=o("SegformerFeatureExtractor"),lRo=o(" (SegFormer model)"),iRo=l(),l_=a("li"),Abe=a("strong"),dRo=o("speech_to_text"),mRo=o(" \u2014 "),yz=a("a"),cRo=o("Speech2TextFeatureExtractor"),fRo=o(" (Speech2Text model)"),gRo=l(),i_=a("li"),Lbe=a("strong"),hRo=o("swin"),uRo=o(" \u2014 "),xz=a("a"),pRo=o("ViTFeatureExtractor"),_Ro=o(" (Swin Transformer model)"),bRo=l(),d_=a("li"),ybe=a("strong"),vRo=o("swinv2"),FRo=o(" \u2014 "),$z=a("a"),TRo=o("ViTFeatureExtractor"),MRo=o(" (Swin Transformer V2 model)"),ERo=l(),m_=a("li"),xbe=a("strong"),CRo=o("table-transformer"),wRo=o(" \u2014 "),kz=a("a"),ARo=o("DetrFeatureExtractor"),LRo=o(" (Table Transformer model)"),yRo=l(),c_=a("li"),$be=a("strong"),xRo=o("van"),$Ro=o(" \u2014 "),Sz=a("a"),kRo=o("ConvNextFeatureExtractor"),SRo=o(" (VAN model)"),RRo=l(),f_=a("li"),kbe=a("strong"),PRo=o("videomae"),BRo=o(" \u2014 "),Rz=a("a"),IRo=o("VideoMAEFeatureExtractor"),NRo=o(" (VideoMAE model)"),qRo=l(),g_=a("li"),Sbe=a("strong"),jRo=o("vilt"),DRo=o(" \u2014 "),Pz=a("a"),GRo=o("ViltFeatureExtractor"),ORo=o(" (ViLT model)"),VRo=l(),h_=a("li"),Rbe=a("strong"),XRo=o("vit"),zRo=o(" \u2014 "),Bz=a("a"),QRo=o("ViTFeatureExtractor"),WRo=o(" (ViT model)"),URo=l(),u_=a("li"),Pbe=a("strong"),HRo=o("vit_mae"),JRo=o(" \u2014 "),Iz=a("a"),YRo=o("ViTFeatureExtractor"),ZRo=o(" (ViTMAE model)"),KRo=l(),p_=a("li"),Bbe=a("strong"),ePo=o("vit_msn"),oPo=o(" \u2014 "),Nz=a("a"),rPo=o("ViTFeatureExtractor"),tPo=o(" (ViTMSN model)"),aPo=l(),__=a("li"),Ibe=a("strong"),nPo=o("wav2vec2"),sPo=o(" \u2014 "),qz=a("a"),lPo=o("Wav2Vec2FeatureExtractor"),iPo=o(" (Wav2Vec2 model)"),dPo=l(),b_=a("li"),Nbe=a("strong"),mPo=o("wav2vec2-conformer"),cPo=o(" \u2014 "),jz=a("a"),fPo=o("Wav2Vec2FeatureExtractor"),gPo=o(" (Wav2Vec2-Conformer model)"),hPo=l(),v_=a("li"),qbe=a("strong"),uPo=o("whisper"),pPo=o(" \u2014 "),Dz=a("a"),_Po=o("WhisperFeatureExtractor"),bPo=o(" (Whisper model)"),vPo=l(),F_=a("li"),jbe=a("strong"),FPo=o("xclip"),TPo=o(" \u2014 "),Gz=a("a"),MPo=o("CLIPFeatureExtractor"),EPo=o(" (X-CLIP model)"),CPo=l(),T_=a("li"),Dbe=a("strong"),wPo=o("yolos"),APo=o(" \u2014 "),Oz=a("a"),LPo=o("YolosFeatureExtractor"),yPo=o(" (YOLOS model)"),xPo=l(),F(M_.$$.fragment),$Po=l(),F(E_.$$.fragment),kPo=l(),C_=a("div"),F(Qk.$$.fragment),SPo=l(),Gbe=a("p"),RPo=o("Register a new feature extractor for this class."),Pio=l(),jd=a("h2"),w_=a("a"),Obe=a("span"),F(Wk.$$.fragment),PPo=l(),Vbe=a("span"),BPo=o("AutoImageProcessor"),Bio=l(),qo=a("div"),F(Uk.$$.fragment),IPo=l(),Hk=a("p"),NPo=o(`This is a generic image processor class that will be instantiated as one of the image processor classes of the
library when created with the `),Vz=a("a"),qPo=o("AutoImageProcessor.from_pretrained()"),jPo=o(" class method."),DPo=l(),Jk=a("p"),GPo=o("This class cannot be instantiated directly using "),Xbe=a("code"),OPo=o("__init__()"),VPo=o(" (throws an error)."),XPo=l(),oo=a("div"),F(Yk.$$.fragment),zPo=l(),zbe=a("p"),QPo=o("Instantiate one of the image processor classes of the library from a pretrained model vocabulary."),WPo=l(),fn=a("p"),UPo=o("The image processor class to instantiate is selected based on the "),Qbe=a("code"),HPo=o("model_type"),JPo=o(` property of the config object
(either passed as an argument or loaded from `),Wbe=a("code"),YPo=o("pretrained_model_name_or_path"),ZPo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ube=a("code"),KPo=o("pretrained_model_name_or_path"),eBo=o(":"),oBo=l(),oe=a("ul"),A_=a("li"),Hbe=a("strong"),rBo=o("beit"),tBo=o(" \u2014 "),Xz=a("a"),aBo=o("BeitImageProcessor"),nBo=o(" (BEiT model)"),sBo=l(),L_=a("li"),Jbe=a("strong"),lBo=o("clip"),iBo=o(" \u2014 "),zz=a("a"),dBo=o("CLIPImageProcessor"),mBo=o(" (CLIP model)"),cBo=l(),y_=a("li"),Ybe=a("strong"),fBo=o("convnext"),gBo=o(" \u2014 "),Qz=a("a"),hBo=o("ConvNextImageProcessor"),uBo=o(" (ConvNeXT model)"),pBo=l(),x_=a("li"),Zbe=a("strong"),_Bo=o("cvt"),bBo=o(" \u2014 "),Wz=a("a"),vBo=o("ConvNextImageProcessor"),FBo=o(" (CvT model)"),TBo=l(),$_=a("li"),Kbe=a("strong"),MBo=o("data2vec-vision"),EBo=o(" \u2014 "),Uz=a("a"),CBo=o("BeitImageProcessor"),wBo=o(" (Data2VecVision model)"),ABo=l(),k_=a("li"),eve=a("strong"),LBo=o("deit"),yBo=o(" \u2014 "),Hz=a("a"),xBo=o("DeiTImageProcessor"),$Bo=o(" (DeiT model)"),kBo=l(),S_=a("li"),ove=a("strong"),SBo=o("dpt"),RBo=o(" \u2014 "),Jz=a("a"),PBo=o("DPTImageProcessor"),BBo=o(" (DPT model)"),IBo=l(),R_=a("li"),rve=a("strong"),NBo=o("flava"),qBo=o(" \u2014 "),Yz=a("a"),jBo=o("FlavaImageProcessor"),DBo=o(" (FLAVA model)"),GBo=l(),P_=a("li"),tve=a("strong"),OBo=o("glpn"),VBo=o(" \u2014 "),Zz=a("a"),XBo=o("GLPNImageProcessor"),zBo=o(" (GLPN model)"),QBo=l(),B_=a("li"),ave=a("strong"),WBo=o("groupvit"),UBo=o(" \u2014 "),Kz=a("a"),HBo=o("CLIPImageProcessor"),JBo=o(" (GroupViT model)"),YBo=l(),I_=a("li"),nve=a("strong"),ZBo=o("imagegpt"),KBo=o(" \u2014 "),eQ=a("a"),eIo=o("ImageGPTImageProcessor"),oIo=o(" (ImageGPT model)"),rIo=l(),N_=a("li"),sve=a("strong"),tIo=o("layoutlmv2"),aIo=o(" \u2014 "),oQ=a("a"),nIo=o("LayoutLMv2ImageProcessor"),sIo=o(" (LayoutLMv2 model)"),lIo=l(),q_=a("li"),lve=a("strong"),iIo=o("layoutlmv3"),dIo=o(" \u2014 "),rQ=a("a"),mIo=o("LayoutLMv3ImageProcessor"),cIo=o(" (LayoutLMv3 model)"),fIo=l(),j_=a("li"),ive=a("strong"),gIo=o("levit"),hIo=o(" \u2014 "),tQ=a("a"),uIo=o("LevitImageProcessor"),pIo=o(" (LeViT model)"),_Io=l(),D_=a("li"),dve=a("strong"),bIo=o("mobilenet_v2"),vIo=o(" \u2014 "),aQ=a("a"),FIo=o("MobileNetV2ImageProcessor"),TIo=o(" (MobileNetV2 model)"),MIo=l(),G_=a("li"),mve=a("strong"),EIo=o("mobilevit"),CIo=o(" \u2014 "),nQ=a("a"),wIo=o("MobileViTImageProcessor"),AIo=o(" (MobileViT model)"),LIo=l(),O_=a("li"),cve=a("strong"),yIo=o("perceiver"),xIo=o(" \u2014 "),sQ=a("a"),$Io=o("PerceiverImageProcessor"),kIo=o(" (Perceiver model)"),SIo=l(),V_=a("li"),fve=a("strong"),RIo=o("poolformer"),PIo=o(" \u2014 "),lQ=a("a"),BIo=o("PoolFormerImageProcessor"),IIo=o(" (PoolFormer model)"),NIo=l(),X_=a("li"),gve=a("strong"),qIo=o("regnet"),jIo=o(" \u2014 "),iQ=a("a"),DIo=o("ConvNextImageProcessor"),GIo=o(" (RegNet model)"),OIo=l(),z_=a("li"),hve=a("strong"),VIo=o("resnet"),XIo=o(" \u2014 "),dQ=a("a"),zIo=o("ConvNextImageProcessor"),QIo=o(" (ResNet model)"),WIo=l(),Q_=a("li"),uve=a("strong"),UIo=o("segformer"),HIo=o(" \u2014 "),mQ=a("a"),JIo=o("SegformerImageProcessor"),YIo=o(" (SegFormer model)"),ZIo=l(),W_=a("li"),pve=a("strong"),KIo=o("swin"),eNo=o(" \u2014 "),cQ=a("a"),oNo=o("ViTImageProcessor"),rNo=o(" (Swin Transformer model)"),tNo=l(),U_=a("li"),_ve=a("strong"),aNo=o("swinv2"),nNo=o(" \u2014 "),fQ=a("a"),sNo=o("ViTImageProcessor"),lNo=o(" (Swin Transformer V2 model)"),iNo=l(),H_=a("li"),bve=a("strong"),dNo=o("van"),mNo=o(" \u2014 "),gQ=a("a"),cNo=o("ConvNextImageProcessor"),fNo=o(" (VAN model)"),gNo=l(),J_=a("li"),vve=a("strong"),hNo=o("videomae"),uNo=o(" \u2014 "),hQ=a("a"),pNo=o("VideoMAEImageProcessor"),_No=o(" (VideoMAE model)"),bNo=l(),Y_=a("li"),Fve=a("strong"),vNo=o("vilt"),FNo=o(" \u2014 "),uQ=a("a"),TNo=o("ViltImageProcessor"),MNo=o(" (ViLT model)"),ENo=l(),Z_=a("li"),Tve=a("strong"),CNo=o("vit"),wNo=o(" \u2014 "),pQ=a("a"),ANo=o("ViTImageProcessor"),LNo=o(" (ViT model)"),yNo=l(),K_=a("li"),Mve=a("strong"),xNo=o("vit_mae"),$No=o(" \u2014 "),_Q=a("a"),kNo=o("ViTImageProcessor"),SNo=o(" (ViTMAE model)"),RNo=l(),e1=a("li"),Eve=a("strong"),PNo=o("vit_msn"),BNo=o(" \u2014 "),bQ=a("a"),INo=o("ViTImageProcessor"),NNo=o(" (ViTMSN model)"),qNo=l(),o1=a("li"),Cve=a("strong"),jNo=o("xclip"),DNo=o(" \u2014 "),vQ=a("a"),GNo=o("CLIPImageProcessor"),ONo=o(" (X-CLIP model)"),VNo=l(),F(r1.$$.fragment),XNo=l(),F(t1.$$.fragment),zNo=l(),a1=a("div"),F(Zk.$$.fragment),QNo=l(),wve=a("p"),WNo=o("Register a new image processor for this class."),Iio=l(),Dd=a("h2"),n1=a("a"),Ave=a("span"),F(Kk.$$.fragment),UNo=l(),Lve=a("span"),HNo=o("AutoProcessor"),Nio=l(),jo=a("div"),F(eS.$$.fragment),JNo=l(),oS=a("p"),YNo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),FQ=a("a"),ZNo=o("AutoProcessor.from_pretrained()"),KNo=o(" class method."),eqo=l(),rS=a("p"),oqo=o("This class cannot be instantiated directly using "),yve=a("code"),rqo=o("__init__()"),tqo=o(" (throws an error)."),aqo=l(),ro=a("div"),F(tS.$$.fragment),nqo=l(),xve=a("p"),sqo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),lqo=l(),Gd=a("p"),iqo=o("The processor class to instantiate is selected based on the "),$ve=a("code"),dqo=o("model_type"),mqo=o(` property of the config object (either
passed as an argument or loaded from `),kve=a("code"),cqo=o("pretrained_model_name_or_path"),fqo=o(" if possible):"),gqo=l(),ie=a("ul"),s1=a("li"),Sve=a("strong"),hqo=o("clip"),uqo=o(" \u2014 "),TQ=a("a"),pqo=o("CLIPProcessor"),_qo=o(" (CLIP model)"),bqo=l(),l1=a("li"),Rve=a("strong"),vqo=o("clipseg"),Fqo=o(" \u2014 "),MQ=a("a"),Tqo=o("CLIPSegProcessor"),Mqo=o(" (CLIPSeg model)"),Eqo=l(),i1=a("li"),Pve=a("strong"),Cqo=o("flava"),wqo=o(" \u2014 "),EQ=a("a"),Aqo=o("FlavaProcessor"),Lqo=o(" (FLAVA model)"),yqo=l(),d1=a("li"),Bve=a("strong"),xqo=o("groupvit"),$qo=o(" \u2014 "),CQ=a("a"),kqo=o("CLIPProcessor"),Sqo=o(" (GroupViT model)"),Rqo=l(),m1=a("li"),Ive=a("strong"),Pqo=o("layoutlmv2"),Bqo=o(" \u2014 "),wQ=a("a"),Iqo=o("LayoutLMv2Processor"),Nqo=o(" (LayoutLMv2 model)"),qqo=l(),c1=a("li"),Nve=a("strong"),jqo=o("layoutlmv3"),Dqo=o(" \u2014 "),AQ=a("a"),Gqo=o("LayoutLMv3Processor"),Oqo=o(" (LayoutLMv3 model)"),Vqo=l(),f1=a("li"),qve=a("strong"),Xqo=o("layoutxlm"),zqo=o(" \u2014 "),LQ=a("a"),Qqo=o("LayoutXLMProcessor"),Wqo=o(" (LayoutXLM model)"),Uqo=l(),g1=a("li"),jve=a("strong"),Hqo=o("markuplm"),Jqo=o(" \u2014 "),yQ=a("a"),Yqo=o("MarkupLMProcessor"),Zqo=o(" (MarkupLM model)"),Kqo=l(),h1=a("li"),Dve=a("strong"),ejo=o("owlvit"),ojo=o(" \u2014 "),xQ=a("a"),rjo=o("OwlViTProcessor"),tjo=o(" (OWL-ViT model)"),ajo=l(),u1=a("li"),Gve=a("strong"),njo=o("sew"),sjo=o(" \u2014 "),$Q=a("a"),ljo=o("Wav2Vec2Processor"),ijo=o(" (SEW model)"),djo=l(),p1=a("li"),Ove=a("strong"),mjo=o("sew-d"),cjo=o(" \u2014 "),kQ=a("a"),fjo=o("Wav2Vec2Processor"),gjo=o(" (SEW-D model)"),hjo=l(),_1=a("li"),Vve=a("strong"),ujo=o("speech_to_text"),pjo=o(" \u2014 "),SQ=a("a"),_jo=o("Speech2TextProcessor"),bjo=o(" (Speech2Text model)"),vjo=l(),b1=a("li"),Xve=a("strong"),Fjo=o("speech_to_text_2"),Tjo=o(" \u2014 "),RQ=a("a"),Mjo=o("Speech2Text2Processor"),Ejo=o(" (Speech2Text2 model)"),Cjo=l(),v1=a("li"),zve=a("strong"),wjo=o("trocr"),Ajo=o(" \u2014 "),PQ=a("a"),Ljo=o("TrOCRProcessor"),yjo=o(" (TrOCR model)"),xjo=l(),F1=a("li"),Qve=a("strong"),$jo=o("unispeech"),kjo=o(" \u2014 "),BQ=a("a"),Sjo=o("Wav2Vec2Processor"),Rjo=o(" (UniSpeech model)"),Pjo=l(),T1=a("li"),Wve=a("strong"),Bjo=o("unispeech-sat"),Ijo=o(" \u2014 "),IQ=a("a"),Njo=o("Wav2Vec2Processor"),qjo=o(" (UniSpeechSat model)"),jjo=l(),M1=a("li"),Uve=a("strong"),Djo=o("vilt"),Gjo=o(" \u2014 "),NQ=a("a"),Ojo=o("ViltProcessor"),Vjo=o(" (ViLT model)"),Xjo=l(),E1=a("li"),Hve=a("strong"),zjo=o("vision-text-dual-encoder"),Qjo=o(" \u2014 "),qQ=a("a"),Wjo=o("VisionTextDualEncoderProcessor"),Ujo=o(" (VisionTextDualEncoder model)"),Hjo=l(),C1=a("li"),Jve=a("strong"),Jjo=o("wav2vec2"),Yjo=o(" \u2014 "),jQ=a("a"),Zjo=o("Wav2Vec2Processor"),Kjo=o(" (Wav2Vec2 model)"),eDo=l(),w1=a("li"),Yve=a("strong"),oDo=o("wav2vec2-conformer"),rDo=o(" \u2014 "),DQ=a("a"),tDo=o("Wav2Vec2Processor"),aDo=o(" (Wav2Vec2-Conformer model)"),nDo=l(),A1=a("li"),Zve=a("strong"),sDo=o("wavlm"),lDo=o(" \u2014 "),GQ=a("a"),iDo=o("Wav2Vec2Processor"),dDo=o(" (WavLM model)"),mDo=l(),L1=a("li"),Kve=a("strong"),cDo=o("whisper"),fDo=o(" \u2014 "),OQ=a("a"),gDo=o("WhisperProcessor"),hDo=o(" (Whisper model)"),uDo=l(),y1=a("li"),eFe=a("strong"),pDo=o("xclip"),_Do=o(" \u2014 "),VQ=a("a"),bDo=o("XCLIPProcessor"),vDo=o(" (X-CLIP model)"),FDo=l(),F(x1.$$.fragment),TDo=l(),F($1.$$.fragment),MDo=l(),k1=a("div"),F(aS.$$.fragment),EDo=l(),oFe=a("p"),CDo=o("Register a new processor for this class."),qio=l(),Od=a("h2"),S1=a("a"),rFe=a("span"),F(nS.$$.fragment),wDo=l(),tFe=a("span"),ADo=o("AutoModel"),jio=l(),Do=a("div"),F(sS.$$.fragment),LDo=l(),Vd=a("p"),yDo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XQ=a("a"),xDo=o("from_pretrained()"),$Do=o(" class method or the "),zQ=a("a"),kDo=o("from_config()"),SDo=o(` class
method.`),RDo=l(),lS=a("p"),PDo=o("This class cannot be instantiated directly using "),aFe=a("code"),BDo=o("__init__()"),IDo=o(" (throws an error)."),NDo=l(),At=a("div"),F(iS.$$.fragment),qDo=l(),nFe=a("p"),jDo=o("Instantiates one of the base model classes of the library from a configuration."),DDo=l(),Xd=a("p"),GDo=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),ODo=o("not"),VDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),XDo=o("from_pretrained()"),zDo=o(" to load the model weights."),QDo=l(),F(R1.$$.fragment),WDo=l(),to=a("div"),F(dS.$$.fragment),UDo=l(),lFe=a("p"),HDo=o("Instantiate one of the base model classes of the library from a pretrained model."),JDo=l(),gn=a("p"),YDo=o("The model class to instantiate is selected based on the "),iFe=a("code"),ZDo=o("model_type"),KDo=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),eGo=o("pretrained_model_name_or_path"),oGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=a("code"),rGo=o("pretrained_model_name_or_path"),tGo=o(":"),aGo=l(),y=a("ul"),P1=a("li"),cFe=a("strong"),nGo=o("albert"),sGo=o(" \u2014 "),WQ=a("a"),lGo=o("AlbertModel"),iGo=o(" (ALBERT model)"),dGo=l(),B1=a("li"),fFe=a("strong"),mGo=o("bart"),cGo=o(" \u2014 "),UQ=a("a"),fGo=o("BartModel"),gGo=o(" (BART model)"),hGo=l(),I1=a("li"),gFe=a("strong"),uGo=o("beit"),pGo=o(" \u2014 "),HQ=a("a"),_Go=o("BeitModel"),bGo=o(" (BEiT model)"),vGo=l(),N1=a("li"),hFe=a("strong"),FGo=o("bert"),TGo=o(" \u2014 "),JQ=a("a"),MGo=o("BertModel"),EGo=o(" (BERT model)"),CGo=l(),q1=a("li"),uFe=a("strong"),wGo=o("bert-generation"),AGo=o(" \u2014 "),YQ=a("a"),LGo=o("BertGenerationEncoder"),yGo=o(" (Bert Generation model)"),xGo=l(),j1=a("li"),pFe=a("strong"),$Go=o("big_bird"),kGo=o(" \u2014 "),ZQ=a("a"),SGo=o("BigBirdModel"),RGo=o(" (BigBird model)"),PGo=l(),D1=a("li"),_Fe=a("strong"),BGo=o("bigbird_pegasus"),IGo=o(" \u2014 "),KQ=a("a"),NGo=o("BigBirdPegasusModel"),qGo=o(" (BigBird-Pegasus model)"),jGo=l(),G1=a("li"),bFe=a("strong"),DGo=o("blenderbot"),GGo=o(" \u2014 "),eW=a("a"),OGo=o("BlenderbotModel"),VGo=o(" (Blenderbot model)"),XGo=l(),O1=a("li"),vFe=a("strong"),zGo=o("blenderbot-small"),QGo=o(" \u2014 "),oW=a("a"),WGo=o("BlenderbotSmallModel"),UGo=o(" (BlenderbotSmall model)"),HGo=l(),V1=a("li"),FFe=a("strong"),JGo=o("bloom"),YGo=o(" \u2014 "),rW=a("a"),ZGo=o("BloomModel"),KGo=o(" (BLOOM model)"),eOo=l(),X1=a("li"),TFe=a("strong"),oOo=o("camembert"),rOo=o(" \u2014 "),tW=a("a"),tOo=o("CamembertModel"),aOo=o(" (CamemBERT model)"),nOo=l(),z1=a("li"),MFe=a("strong"),sOo=o("canine"),lOo=o(" \u2014 "),aW=a("a"),iOo=o("CanineModel"),dOo=o(" (CANINE model)"),mOo=l(),Q1=a("li"),EFe=a("strong"),cOo=o("clip"),fOo=o(" \u2014 "),nW=a("a"),gOo=o("CLIPModel"),hOo=o(" (CLIP model)"),uOo=l(),W1=a("li"),CFe=a("strong"),pOo=o("clipseg"),_Oo=o(" \u2014 "),sW=a("a"),bOo=o("CLIPSegModel"),vOo=o(" (CLIPSeg model)"),FOo=l(),U1=a("li"),wFe=a("strong"),TOo=o("codegen"),MOo=o(" \u2014 "),lW=a("a"),EOo=o("CodeGenModel"),COo=o(" (CodeGen model)"),wOo=l(),H1=a("li"),AFe=a("strong"),AOo=o("conditional_detr"),LOo=o(" \u2014 "),iW=a("a"),yOo=o("ConditionalDetrModel"),xOo=o(" (Conditional DETR model)"),$Oo=l(),J1=a("li"),LFe=a("strong"),kOo=o("convbert"),SOo=o(" \u2014 "),dW=a("a"),ROo=o("ConvBertModel"),POo=o(" (ConvBERT model)"),BOo=l(),Y1=a("li"),yFe=a("strong"),IOo=o("convnext"),NOo=o(" \u2014 "),mW=a("a"),qOo=o("ConvNextModel"),jOo=o(" (ConvNeXT model)"),DOo=l(),Z1=a("li"),xFe=a("strong"),GOo=o("ctrl"),OOo=o(" \u2014 "),cW=a("a"),VOo=o("CTRLModel"),XOo=o(" (CTRL model)"),zOo=l(),K1=a("li"),$Fe=a("strong"),QOo=o("cvt"),WOo=o(" \u2014 "),fW=a("a"),UOo=o("CvtModel"),HOo=o(" (CvT model)"),JOo=l(),e2=a("li"),kFe=a("strong"),YOo=o("data2vec-audio"),ZOo=o(" \u2014 "),gW=a("a"),KOo=o("Data2VecAudioModel"),eVo=o(" (Data2VecAudio model)"),oVo=l(),o2=a("li"),SFe=a("strong"),rVo=o("data2vec-text"),tVo=o(" \u2014 "),hW=a("a"),aVo=o("Data2VecTextModel"),nVo=o(" (Data2VecText model)"),sVo=l(),r2=a("li"),RFe=a("strong"),lVo=o("data2vec-vision"),iVo=o(" \u2014 "),uW=a("a"),dVo=o("Data2VecVisionModel"),mVo=o(" (Data2VecVision model)"),cVo=l(),t2=a("li"),PFe=a("strong"),fVo=o("deberta"),gVo=o(" \u2014 "),pW=a("a"),hVo=o("DebertaModel"),uVo=o(" (DeBERTa model)"),pVo=l(),a2=a("li"),BFe=a("strong"),_Vo=o("deberta-v2"),bVo=o(" \u2014 "),_W=a("a"),vVo=o("DebertaV2Model"),FVo=o(" (DeBERTa-v2 model)"),TVo=l(),n2=a("li"),IFe=a("strong"),MVo=o("decision_transformer"),EVo=o(" \u2014 "),bW=a("a"),CVo=o("DecisionTransformerModel"),wVo=o(" (Decision Transformer model)"),AVo=l(),s2=a("li"),NFe=a("strong"),LVo=o("deformable_detr"),yVo=o(" \u2014 "),vW=a("a"),xVo=o("DeformableDetrModel"),$Vo=o(" (Deformable DETR model)"),kVo=l(),l2=a("li"),qFe=a("strong"),SVo=o("deit"),RVo=o(" \u2014 "),FW=a("a"),PVo=o("DeiTModel"),BVo=o(" (DeiT model)"),IVo=l(),i2=a("li"),jFe=a("strong"),NVo=o("detr"),qVo=o(" \u2014 "),TW=a("a"),jVo=o("DetrModel"),DVo=o(" (DETR model)"),GVo=l(),d2=a("li"),DFe=a("strong"),OVo=o("distilbert"),VVo=o(" \u2014 "),MW=a("a"),XVo=o("DistilBertModel"),zVo=o(" (DistilBERT model)"),QVo=l(),m2=a("li"),GFe=a("strong"),WVo=o("donut-swin"),UVo=o(" \u2014 "),EW=a("a"),HVo=o("DonutSwinModel"),JVo=o(" (DonutSwin model)"),YVo=l(),c2=a("li"),OFe=a("strong"),ZVo=o("dpr"),KVo=o(" \u2014 "),CW=a("a"),eXo=o("DPRQuestionEncoder"),oXo=o(" (DPR model)"),rXo=l(),f2=a("li"),VFe=a("strong"),tXo=o("dpt"),aXo=o(" \u2014 "),wW=a("a"),nXo=o("DPTModel"),sXo=o(" (DPT model)"),lXo=l(),g2=a("li"),XFe=a("strong"),iXo=o("electra"),dXo=o(" \u2014 "),AW=a("a"),mXo=o("ElectraModel"),cXo=o(" (ELECTRA model)"),fXo=l(),h2=a("li"),zFe=a("strong"),gXo=o("ernie"),hXo=o(" \u2014 "),LW=a("a"),uXo=o("ErnieModel"),pXo=o(" (ERNIE model)"),_Xo=l(),u2=a("li"),QFe=a("strong"),bXo=o("esm"),vXo=o(" \u2014 "),yW=a("a"),FXo=o("EsmModel"),TXo=o(" (ESM model)"),MXo=l(),p2=a("li"),WFe=a("strong"),EXo=o("flaubert"),CXo=o(" \u2014 "),xW=a("a"),wXo=o("FlaubertModel"),AXo=o(" (FlauBERT model)"),LXo=l(),_2=a("li"),UFe=a("strong"),yXo=o("flava"),xXo=o(" \u2014 "),$W=a("a"),$Xo=o("FlavaModel"),kXo=o(" (FLAVA model)"),SXo=l(),b2=a("li"),HFe=a("strong"),RXo=o("fnet"),PXo=o(" \u2014 "),kW=a("a"),BXo=o("FNetModel"),IXo=o(" (FNet model)"),NXo=l(),v2=a("li"),JFe=a("strong"),qXo=o("fsmt"),jXo=o(" \u2014 "),SW=a("a"),DXo=o("FSMTModel"),GXo=o(" (FairSeq Machine-Translation model)"),OXo=l(),ql=a("li"),YFe=a("strong"),VXo=o("funnel"),XXo=o(" \u2014 "),RW=a("a"),zXo=o("FunnelModel"),QXo=o(" or "),PW=a("a"),WXo=o("FunnelBaseModel"),UXo=o(" (Funnel Transformer model)"),HXo=l(),F2=a("li"),ZFe=a("strong"),JXo=o("glpn"),YXo=o(" \u2014 "),BW=a("a"),ZXo=o("GLPNModel"),KXo=o(" (GLPN model)"),ezo=l(),T2=a("li"),KFe=a("strong"),ozo=o("gpt2"),rzo=o(" \u2014 "),IW=a("a"),tzo=o("GPT2Model"),azo=o(" (OpenAI GPT-2 model)"),nzo=l(),M2=a("li"),eTe=a("strong"),szo=o("gpt_neo"),lzo=o(" \u2014 "),NW=a("a"),izo=o("GPTNeoModel"),dzo=o(" (GPT Neo model)"),mzo=l(),E2=a("li"),oTe=a("strong"),czo=o("gpt_neox"),fzo=o(" \u2014 "),qW=a("a"),gzo=o("GPTNeoXModel"),hzo=o(" (GPT NeoX model)"),uzo=l(),C2=a("li"),rTe=a("strong"),pzo=o("gpt_neox_japanese"),_zo=o(" \u2014 "),jW=a("a"),bzo=o("GPTNeoXJapaneseModel"),vzo=o(" (GPT NeoX Japanese model)"),Fzo=l(),w2=a("li"),tTe=a("strong"),Tzo=o("gptj"),Mzo=o(" \u2014 "),DW=a("a"),Ezo=o("GPTJModel"),Czo=o(" (GPT-J model)"),wzo=l(),A2=a("li"),aTe=a("strong"),Azo=o("groupvit"),Lzo=o(" \u2014 "),GW=a("a"),yzo=o("GroupViTModel"),xzo=o(" (GroupViT model)"),$zo=l(),L2=a("li"),nTe=a("strong"),kzo=o("hubert"),Szo=o(" \u2014 "),OW=a("a"),Rzo=o("HubertModel"),Pzo=o(" (Hubert model)"),Bzo=l(),y2=a("li"),sTe=a("strong"),Izo=o("ibert"),Nzo=o(" \u2014 "),VW=a("a"),qzo=o("IBertModel"),jzo=o(" (I-BERT model)"),Dzo=l(),x2=a("li"),lTe=a("strong"),Gzo=o("imagegpt"),Ozo=o(" \u2014 "),XW=a("a"),Vzo=o("ImageGPTModel"),Xzo=o(" (ImageGPT model)"),zzo=l(),$2=a("li"),iTe=a("strong"),Qzo=o("jukebox"),Wzo=o(" \u2014 "),zW=a("a"),Uzo=o("JukeboxModel"),Hzo=o(" (Jukebox model)"),Jzo=l(),k2=a("li"),dTe=a("strong"),Yzo=o("layoutlm"),Zzo=o(" \u2014 "),QW=a("a"),Kzo=o("LayoutLMModel"),eQo=o(" (LayoutLM model)"),oQo=l(),S2=a("li"),mTe=a("strong"),rQo=o("layoutlmv2"),tQo=o(" \u2014 "),WW=a("a"),aQo=o("LayoutLMv2Model"),nQo=o(" (LayoutLMv2 model)"),sQo=l(),R2=a("li"),cTe=a("strong"),lQo=o("layoutlmv3"),iQo=o(" \u2014 "),UW=a("a"),dQo=o("LayoutLMv3Model"),mQo=o(" (LayoutLMv3 model)"),cQo=l(),P2=a("li"),fTe=a("strong"),fQo=o("led"),gQo=o(" \u2014 "),HW=a("a"),hQo=o("LEDModel"),uQo=o(" (LED model)"),pQo=l(),B2=a("li"),gTe=a("strong"),_Qo=o("levit"),bQo=o(" \u2014 "),JW=a("a"),vQo=o("LevitModel"),FQo=o(" (LeViT model)"),TQo=l(),I2=a("li"),hTe=a("strong"),MQo=o("lilt"),EQo=o(" \u2014 "),YW=a("a"),CQo=o("LiltModel"),wQo=o(" (LiLT model)"),AQo=l(),N2=a("li"),uTe=a("strong"),LQo=o("longformer"),yQo=o(" \u2014 "),ZW=a("a"),xQo=o("LongformerModel"),$Qo=o(" (Longformer model)"),kQo=l(),q2=a("li"),pTe=a("strong"),SQo=o("longt5"),RQo=o(" \u2014 "),KW=a("a"),PQo=o("LongT5Model"),BQo=o(" (LongT5 model)"),IQo=l(),j2=a("li"),_Te=a("strong"),NQo=o("luke"),qQo=o(" \u2014 "),eU=a("a"),jQo=o("LukeModel"),DQo=o(" (LUKE model)"),GQo=l(),D2=a("li"),bTe=a("strong"),OQo=o("lxmert"),VQo=o(" \u2014 "),oU=a("a"),XQo=o("LxmertModel"),zQo=o(" (LXMERT model)"),QQo=l(),G2=a("li"),vTe=a("strong"),WQo=o("m2m_100"),UQo=o(" \u2014 "),rU=a("a"),HQo=o("M2M100Model"),JQo=o(" (M2M100 model)"),YQo=l(),O2=a("li"),FTe=a("strong"),ZQo=o("marian"),KQo=o(" \u2014 "),tU=a("a"),eWo=o("MarianModel"),oWo=o(" (Marian model)"),rWo=l(),V2=a("li"),TTe=a("strong"),tWo=o("markuplm"),aWo=o(" \u2014 "),aU=a("a"),nWo=o("MarkupLMModel"),sWo=o(" (MarkupLM model)"),lWo=l(),X2=a("li"),MTe=a("strong"),iWo=o("maskformer"),dWo=o(" \u2014 "),nU=a("a"),mWo=o("MaskFormerModel"),cWo=o(" (MaskFormer model)"),fWo=l(),z2=a("li"),ETe=a("strong"),gWo=o("mbart"),hWo=o(" \u2014 "),sU=a("a"),uWo=o("MBartModel"),pWo=o(" (mBART model)"),_Wo=l(),Q2=a("li"),CTe=a("strong"),bWo=o("mctct"),vWo=o(" \u2014 "),lU=a("a"),FWo=o("MCTCTModel"),TWo=o(" (M-CTC-T model)"),MWo=l(),W2=a("li"),wTe=a("strong"),EWo=o("megatron-bert"),CWo=o(" \u2014 "),iU=a("a"),wWo=o("MegatronBertModel"),AWo=o(" (Megatron-BERT model)"),LWo=l(),U2=a("li"),ATe=a("strong"),yWo=o("mobilebert"),xWo=o(" \u2014 "),dU=a("a"),$Wo=o("MobileBertModel"),kWo=o(" (MobileBERT model)"),SWo=l(),H2=a("li"),LTe=a("strong"),RWo=o("mobilenet_v2"),PWo=o(" \u2014 "),mU=a("a"),BWo=o("MobileNetV2Model"),IWo=o(" (MobileNetV2 model)"),NWo=l(),J2=a("li"),yTe=a("strong"),qWo=o("mobilevit"),jWo=o(" \u2014 "),cU=a("a"),DWo=o("MobileViTModel"),GWo=o(" (MobileViT model)"),OWo=l(),Y2=a("li"),xTe=a("strong"),VWo=o("mpnet"),XWo=o(" \u2014 "),fU=a("a"),zWo=o("MPNetModel"),QWo=o(" (MPNet model)"),WWo=l(),Z2=a("li"),$Te=a("strong"),UWo=o("mt5"),HWo=o(" \u2014 "),gU=a("a"),JWo=o("MT5Model"),YWo=o(" (MT5 model)"),ZWo=l(),K2=a("li"),kTe=a("strong"),KWo=o("mvp"),eUo=o(" \u2014 "),hU=a("a"),oUo=o("MvpModel"),rUo=o(" (MVP model)"),tUo=l(),eb=a("li"),STe=a("strong"),aUo=o("nezha"),nUo=o(" \u2014 "),uU=a("a"),sUo=o("NezhaModel"),lUo=o(" (Nezha model)"),iUo=l(),ob=a("li"),RTe=a("strong"),dUo=o("nllb"),mUo=o(" \u2014 "),pU=a("a"),cUo=o("M2M100Model"),fUo=o(" (NLLB model)"),gUo=l(),rb=a("li"),PTe=a("strong"),hUo=o("nystromformer"),uUo=o(" \u2014 "),_U=a("a"),pUo=o("NystromformerModel"),_Uo=o(" (Nystr\xF6mformer model)"),bUo=l(),tb=a("li"),BTe=a("strong"),vUo=o("openai-gpt"),FUo=o(" \u2014 "),bU=a("a"),TUo=o("OpenAIGPTModel"),MUo=o(" (OpenAI GPT model)"),EUo=l(),ab=a("li"),ITe=a("strong"),CUo=o("opt"),wUo=o(" \u2014 "),vU=a("a"),AUo=o("OPTModel"),LUo=o(" (OPT model)"),yUo=l(),nb=a("li"),NTe=a("strong"),xUo=o("owlvit"),$Uo=o(" \u2014 "),FU=a("a"),kUo=o("OwlViTModel"),SUo=o(" (OWL-ViT model)"),RUo=l(),sb=a("li"),qTe=a("strong"),PUo=o("pegasus"),BUo=o(" \u2014 "),TU=a("a"),IUo=o("PegasusModel"),NUo=o(" (Pegasus model)"),qUo=l(),lb=a("li"),jTe=a("strong"),jUo=o("pegasus_x"),DUo=o(" \u2014 "),MU=a("a"),GUo=o("PegasusXModel"),OUo=o(" (PEGASUS-X model)"),VUo=l(),ib=a("li"),DTe=a("strong"),XUo=o("perceiver"),zUo=o(" \u2014 "),EU=a("a"),QUo=o("PerceiverModel"),WUo=o(" (Perceiver model)"),UUo=l(),db=a("li"),GTe=a("strong"),HUo=o("plbart"),JUo=o(" \u2014 "),CU=a("a"),YUo=o("PLBartModel"),ZUo=o(" (PLBart model)"),KUo=l(),mb=a("li"),OTe=a("strong"),eHo=o("poolformer"),oHo=o(" \u2014 "),wU=a("a"),rHo=o("PoolFormerModel"),tHo=o(" (PoolFormer model)"),aHo=l(),cb=a("li"),VTe=a("strong"),nHo=o("prophetnet"),sHo=o(" \u2014 "),AU=a("a"),lHo=o("ProphetNetModel"),iHo=o(" (ProphetNet model)"),dHo=l(),fb=a("li"),XTe=a("strong"),mHo=o("qdqbert"),cHo=o(" \u2014 "),LU=a("a"),fHo=o("QDQBertModel"),gHo=o(" (QDQBert model)"),hHo=l(),gb=a("li"),zTe=a("strong"),uHo=o("reformer"),pHo=o(" \u2014 "),yU=a("a"),_Ho=o("ReformerModel"),bHo=o(" (Reformer model)"),vHo=l(),hb=a("li"),QTe=a("strong"),FHo=o("regnet"),THo=o(" \u2014 "),xU=a("a"),MHo=o("RegNetModel"),EHo=o(" (RegNet model)"),CHo=l(),ub=a("li"),WTe=a("strong"),wHo=o("rembert"),AHo=o(" \u2014 "),$U=a("a"),LHo=o("RemBertModel"),yHo=o(" (RemBERT model)"),xHo=l(),pb=a("li"),UTe=a("strong"),$Ho=o("resnet"),kHo=o(" \u2014 "),kU=a("a"),SHo=o("ResNetModel"),RHo=o(" (ResNet model)"),PHo=l(),_b=a("li"),HTe=a("strong"),BHo=o("retribert"),IHo=o(" \u2014 "),SU=a("a"),NHo=o("RetriBertModel"),qHo=o(" (RetriBERT model)"),jHo=l(),bb=a("li"),JTe=a("strong"),DHo=o("roberta"),GHo=o(" \u2014 "),RU=a("a"),OHo=o("RobertaModel"),VHo=o(" (RoBERTa model)"),XHo=l(),vb=a("li"),YTe=a("strong"),zHo=o("roc_bert"),QHo=o(" \u2014 "),PU=a("a"),WHo=o("RoCBertModel"),UHo=o(" (RoCBert model)"),HHo=l(),Fb=a("li"),ZTe=a("strong"),JHo=o("roformer"),YHo=o(" \u2014 "),BU=a("a"),ZHo=o("RoFormerModel"),KHo=o(" (RoFormer model)"),eJo=l(),Tb=a("li"),KTe=a("strong"),oJo=o("segformer"),rJo=o(" \u2014 "),IU=a("a"),tJo=o("SegformerModel"),aJo=o(" (SegFormer model)"),nJo=l(),Mb=a("li"),eMe=a("strong"),sJo=o("sew"),lJo=o(" \u2014 "),NU=a("a"),iJo=o("SEWModel"),dJo=o(" (SEW model)"),mJo=l(),Eb=a("li"),oMe=a("strong"),cJo=o("sew-d"),fJo=o(" \u2014 "),qU=a("a"),gJo=o("SEWDModel"),hJo=o(" (SEW-D model)"),uJo=l(),Cb=a("li"),rMe=a("strong"),pJo=o("speech_to_text"),_Jo=o(" \u2014 "),jU=a("a"),bJo=o("Speech2TextModel"),vJo=o(" (Speech2Text model)"),FJo=l(),wb=a("li"),tMe=a("strong"),TJo=o("splinter"),MJo=o(" \u2014 "),DU=a("a"),EJo=o("SplinterModel"),CJo=o(" (Splinter model)"),wJo=l(),Ab=a("li"),aMe=a("strong"),AJo=o("squeezebert"),LJo=o(" \u2014 "),GU=a("a"),yJo=o("SqueezeBertModel"),xJo=o(" (SqueezeBERT model)"),$Jo=l(),Lb=a("li"),nMe=a("strong"),kJo=o("swin"),SJo=o(" \u2014 "),OU=a("a"),RJo=o("SwinModel"),PJo=o(" (Swin Transformer model)"),BJo=l(),yb=a("li"),sMe=a("strong"),IJo=o("swinv2"),NJo=o(" \u2014 "),VU=a("a"),qJo=o("Swinv2Model"),jJo=o(" (Swin Transformer V2 model)"),DJo=l(),xb=a("li"),lMe=a("strong"),GJo=o("switch_transformers"),OJo=o(" \u2014 "),XU=a("a"),VJo=o("SwitchTransformersModel"),XJo=o(" (SwitchTransformers model)"),zJo=l(),$b=a("li"),iMe=a("strong"),QJo=o("t5"),WJo=o(" \u2014 "),zU=a("a"),UJo=o("T5Model"),HJo=o(" (T5 model)"),JJo=l(),kb=a("li"),dMe=a("strong"),YJo=o("table-transformer"),ZJo=o(" \u2014 "),QU=a("a"),KJo=o("TableTransformerModel"),eYo=o(" (Table Transformer model)"),oYo=l(),Sb=a("li"),mMe=a("strong"),rYo=o("tapas"),tYo=o(" \u2014 "),WU=a("a"),aYo=o("TapasModel"),nYo=o(" (TAPAS model)"),sYo=l(),Rb=a("li"),cMe=a("strong"),lYo=o("time_series_transformer"),iYo=o(" \u2014 "),UU=a("a"),dYo=o("TimeSeriesTransformerModel"),mYo=o(" (Time Series Transformer model)"),cYo=l(),Pb=a("li"),fMe=a("strong"),fYo=o("trajectory_transformer"),gYo=o(" \u2014 "),HU=a("a"),hYo=o("TrajectoryTransformerModel"),uYo=o(" (Trajectory Transformer model)"),pYo=l(),Bb=a("li"),gMe=a("strong"),_Yo=o("transfo-xl"),bYo=o(" \u2014 "),JU=a("a"),vYo=o("TransfoXLModel"),FYo=o(" (Transformer-XL model)"),TYo=l(),Ib=a("li"),hMe=a("strong"),MYo=o("unispeech"),EYo=o(" \u2014 "),YU=a("a"),CYo=o("UniSpeechModel"),wYo=o(" (UniSpeech model)"),AYo=l(),Nb=a("li"),uMe=a("strong"),LYo=o("unispeech-sat"),yYo=o(" \u2014 "),ZU=a("a"),xYo=o("UniSpeechSatModel"),$Yo=o(" (UniSpeechSat model)"),kYo=l(),qb=a("li"),pMe=a("strong"),SYo=o("van"),RYo=o(" \u2014 "),KU=a("a"),PYo=o("VanModel"),BYo=o(" (VAN model)"),IYo=l(),jb=a("li"),_Me=a("strong"),NYo=o("videomae"),qYo=o(" \u2014 "),eH=a("a"),jYo=o("VideoMAEModel"),DYo=o(" (VideoMAE model)"),GYo=l(),Db=a("li"),bMe=a("strong"),OYo=o("vilt"),VYo=o(" \u2014 "),oH=a("a"),XYo=o("ViltModel"),zYo=o(" (ViLT model)"),QYo=l(),Gb=a("li"),vMe=a("strong"),WYo=o("vision-text-dual-encoder"),UYo=o(" \u2014 "),rH=a("a"),HYo=o("VisionTextDualEncoderModel"),JYo=o(" (VisionTextDualEncoder model)"),YYo=l(),Ob=a("li"),FMe=a("strong"),ZYo=o("visual_bert"),KYo=o(" \u2014 "),tH=a("a"),eZo=o("VisualBertModel"),oZo=o(" (VisualBERT model)"),rZo=l(),Vb=a("li"),TMe=a("strong"),tZo=o("vit"),aZo=o(" \u2014 "),aH=a("a"),nZo=o("ViTModel"),sZo=o(" (ViT model)"),lZo=l(),Xb=a("li"),MMe=a("strong"),iZo=o("vit_mae"),dZo=o(" \u2014 "),nH=a("a"),mZo=o("ViTMAEModel"),cZo=o(" (ViTMAE model)"),fZo=l(),zb=a("li"),EMe=a("strong"),gZo=o("vit_msn"),hZo=o(" \u2014 "),sH=a("a"),uZo=o("ViTMSNModel"),pZo=o(" (ViTMSN model)"),_Zo=l(),Qb=a("li"),CMe=a("strong"),bZo=o("wav2vec2"),vZo=o(" \u2014 "),lH=a("a"),FZo=o("Wav2Vec2Model"),TZo=o(" (Wav2Vec2 model)"),MZo=l(),Wb=a("li"),wMe=a("strong"),EZo=o("wav2vec2-conformer"),CZo=o(" \u2014 "),iH=a("a"),wZo=o("Wav2Vec2ConformerModel"),AZo=o(" (Wav2Vec2-Conformer model)"),LZo=l(),Ub=a("li"),AMe=a("strong"),yZo=o("wavlm"),xZo=o(" \u2014 "),dH=a("a"),$Zo=o("WavLMModel"),kZo=o(" (WavLM model)"),SZo=l(),Hb=a("li"),LMe=a("strong"),RZo=o("whisper"),PZo=o(" \u2014 "),mH=a("a"),BZo=o("WhisperModel"),IZo=o(" (Whisper model)"),NZo=l(),Jb=a("li"),yMe=a("strong"),qZo=o("xclip"),jZo=o(" \u2014 "),cH=a("a"),DZo=o("XCLIPModel"),GZo=o(" (X-CLIP model)"),OZo=l(),Yb=a("li"),xMe=a("strong"),VZo=o("xglm"),XZo=o(" \u2014 "),fH=a("a"),zZo=o("XGLMModel"),QZo=o(" (XGLM model)"),WZo=l(),Zb=a("li"),$Me=a("strong"),UZo=o("xlm"),HZo=o(" \u2014 "),gH=a("a"),JZo=o("XLMModel"),YZo=o(" (XLM model)"),ZZo=l(),Kb=a("li"),kMe=a("strong"),KZo=o("xlm-prophetnet"),eKo=o(" \u2014 "),hH=a("a"),oKo=o("XLMProphetNetModel"),rKo=o(" (XLM-ProphetNet model)"),tKo=l(),ev=a("li"),SMe=a("strong"),aKo=o("xlm-roberta"),nKo=o(" \u2014 "),uH=a("a"),sKo=o("XLMRobertaModel"),lKo=o(" (XLM-RoBERTa model)"),iKo=l(),ov=a("li"),RMe=a("strong"),dKo=o("xlm-roberta-xl"),mKo=o(" \u2014 "),pH=a("a"),cKo=o("XLMRobertaXLModel"),fKo=o(" (XLM-RoBERTa-XL model)"),gKo=l(),rv=a("li"),PMe=a("strong"),hKo=o("xlnet"),uKo=o(" \u2014 "),_H=a("a"),pKo=o("XLNetModel"),_Ko=o(" (XLNet model)"),bKo=l(),tv=a("li"),BMe=a("strong"),vKo=o("yolos"),FKo=o(" \u2014 "),bH=a("a"),TKo=o("YolosModel"),MKo=o(" (YOLOS model)"),EKo=l(),av=a("li"),IMe=a("strong"),CKo=o("yoso"),wKo=o(" \u2014 "),vH=a("a"),AKo=o("YosoModel"),LKo=o(" (YOSO model)"),yKo=l(),nv=a("p"),xKo=o("The model is set in evaluation mode by default using "),NMe=a("code"),$Ko=o("model.eval()"),kKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qMe=a("code"),SKo=o("model.train()"),RKo=l(),F(sv.$$.fragment),Dio=l(),zd=a("h2"),lv=a("a"),jMe=a("span"),F(mS.$$.fragment),PKo=l(),DMe=a("span"),BKo=o("AutoModelForPreTraining"),Gio=l(),Go=a("div"),F(cS.$$.fragment),IKo=l(),Qd=a("p"),NKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FH=a("a"),qKo=o("from_pretrained()"),jKo=o(" class method or the "),TH=a("a"),DKo=o("from_config()"),GKo=o(` class
method.`),OKo=l(),fS=a("p"),VKo=o("This class cannot be instantiated directly using "),GMe=a("code"),XKo=o("__init__()"),zKo=o(" (throws an error)."),QKo=l(),Lt=a("div"),F(gS.$$.fragment),WKo=l(),OMe=a("p"),UKo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),HKo=l(),Wd=a("p"),JKo=o(`Note:
Loading a model from its configuration file does `),VMe=a("strong"),YKo=o("not"),ZKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),KKo=o("from_pretrained()"),eer=o(" to load the model weights."),oer=l(),F(iv.$$.fragment),rer=l(),ao=a("div"),F(hS.$$.fragment),ter=l(),XMe=a("p"),aer=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ner=l(),hn=a("p"),ser=o("The model class to instantiate is selected based on the "),zMe=a("code"),ler=o("model_type"),ier=o(` property of the config object (either
passed as an argument or loaded from `),QMe=a("code"),der=o("pretrained_model_name_or_path"),mer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=a("code"),cer=o("pretrained_model_name_or_path"),fer=o(":"),ger=l(),G=a("ul"),dv=a("li"),UMe=a("strong"),her=o("albert"),uer=o(" \u2014 "),EH=a("a"),per=o("AlbertForPreTraining"),_er=o(" (ALBERT model)"),ber=l(),mv=a("li"),HMe=a("strong"),ver=o("bart"),Fer=o(" \u2014 "),CH=a("a"),Ter=o("BartForConditionalGeneration"),Mer=o(" (BART model)"),Eer=l(),cv=a("li"),JMe=a("strong"),Cer=o("bert"),wer=o(" \u2014 "),wH=a("a"),Aer=o("BertForPreTraining"),Ler=o(" (BERT model)"),yer=l(),fv=a("li"),YMe=a("strong"),xer=o("big_bird"),$er=o(" \u2014 "),AH=a("a"),ker=o("BigBirdForPreTraining"),Ser=o(" (BigBird model)"),Rer=l(),gv=a("li"),ZMe=a("strong"),Per=o("bloom"),Ber=o(" \u2014 "),LH=a("a"),Ier=o("BloomForCausalLM"),Ner=o(" (BLOOM model)"),qer=l(),hv=a("li"),KMe=a("strong"),jer=o("camembert"),Der=o(" \u2014 "),yH=a("a"),Ger=o("CamembertForMaskedLM"),Oer=o(" (CamemBERT model)"),Ver=l(),uv=a("li"),eEe=a("strong"),Xer=o("ctrl"),zer=o(" \u2014 "),xH=a("a"),Qer=o("CTRLLMHeadModel"),Wer=o(" (CTRL model)"),Uer=l(),pv=a("li"),oEe=a("strong"),Her=o("data2vec-text"),Jer=o(" \u2014 "),$H=a("a"),Yer=o("Data2VecTextForMaskedLM"),Zer=o(" (Data2VecText model)"),Ker=l(),_v=a("li"),rEe=a("strong"),eor=o("deberta"),oor=o(" \u2014 "),kH=a("a"),ror=o("DebertaForMaskedLM"),tor=o(" (DeBERTa model)"),aor=l(),bv=a("li"),tEe=a("strong"),nor=o("deberta-v2"),sor=o(" \u2014 "),SH=a("a"),lor=o("DebertaV2ForMaskedLM"),ior=o(" (DeBERTa-v2 model)"),dor=l(),vv=a("li"),aEe=a("strong"),mor=o("distilbert"),cor=o(" \u2014 "),RH=a("a"),gor=o("DistilBertForMaskedLM"),hor=o(" (DistilBERT model)"),uor=l(),Fv=a("li"),nEe=a("strong"),por=o("electra"),_or=o(" \u2014 "),PH=a("a"),bor=o("ElectraForPreTraining"),vor=o(" (ELECTRA model)"),For=l(),Tv=a("li"),sEe=a("strong"),Tor=o("ernie"),Mor=o(" \u2014 "),BH=a("a"),Eor=o("ErnieForPreTraining"),Cor=o(" (ERNIE model)"),wor=l(),Mv=a("li"),lEe=a("strong"),Aor=o("flaubert"),Lor=o(" \u2014 "),IH=a("a"),yor=o("FlaubertWithLMHeadModel"),xor=o(" (FlauBERT model)"),$or=l(),Ev=a("li"),iEe=a("strong"),kor=o("flava"),Sor=o(" \u2014 "),NH=a("a"),Ror=o("FlavaForPreTraining"),Por=o(" (FLAVA model)"),Bor=l(),Cv=a("li"),dEe=a("strong"),Ior=o("fnet"),Nor=o(" \u2014 "),qH=a("a"),qor=o("FNetForPreTraining"),jor=o(" (FNet model)"),Dor=l(),wv=a("li"),mEe=a("strong"),Gor=o("fsmt"),Oor=o(" \u2014 "),jH=a("a"),Vor=o("FSMTForConditionalGeneration"),Xor=o(" (FairSeq Machine-Translation model)"),zor=l(),Av=a("li"),cEe=a("strong"),Qor=o("funnel"),Wor=o(" \u2014 "),DH=a("a"),Uor=o("FunnelForPreTraining"),Hor=o(" (Funnel Transformer model)"),Jor=l(),Lv=a("li"),fEe=a("strong"),Yor=o("gpt2"),Zor=o(" \u2014 "),GH=a("a"),Kor=o("GPT2LMHeadModel"),err=o(" (OpenAI GPT-2 model)"),orr=l(),yv=a("li"),gEe=a("strong"),rrr=o("ibert"),trr=o(" \u2014 "),OH=a("a"),arr=o("IBertForMaskedLM"),nrr=o(" (I-BERT model)"),srr=l(),xv=a("li"),hEe=a("strong"),lrr=o("layoutlm"),irr=o(" \u2014 "),VH=a("a"),drr=o("LayoutLMForMaskedLM"),mrr=o(" (LayoutLM model)"),crr=l(),$v=a("li"),uEe=a("strong"),frr=o("longformer"),grr=o(" \u2014 "),XH=a("a"),hrr=o("LongformerForMaskedLM"),urr=o(" (Longformer model)"),prr=l(),kv=a("li"),pEe=a("strong"),_rr=o("luke"),brr=o(" \u2014 "),zH=a("a"),vrr=o("LukeForMaskedLM"),Frr=o(" (LUKE model)"),Trr=l(),Sv=a("li"),_Ee=a("strong"),Mrr=o("lxmert"),Err=o(" \u2014 "),QH=a("a"),Crr=o("LxmertForPreTraining"),wrr=o(" (LXMERT model)"),Arr=l(),Rv=a("li"),bEe=a("strong"),Lrr=o("megatron-bert"),yrr=o(" \u2014 "),WH=a("a"),xrr=o("MegatronBertForPreTraining"),$rr=o(" (Megatron-BERT model)"),krr=l(),Pv=a("li"),vEe=a("strong"),Srr=o("mobilebert"),Rrr=o(" \u2014 "),UH=a("a"),Prr=o("MobileBertForPreTraining"),Brr=o(" (MobileBERT model)"),Irr=l(),Bv=a("li"),FEe=a("strong"),Nrr=o("mpnet"),qrr=o(" \u2014 "),HH=a("a"),jrr=o("MPNetForMaskedLM"),Drr=o(" (MPNet model)"),Grr=l(),Iv=a("li"),TEe=a("strong"),Orr=o("mvp"),Vrr=o(" \u2014 "),JH=a("a"),Xrr=o("MvpForConditionalGeneration"),zrr=o(" (MVP model)"),Qrr=l(),Nv=a("li"),MEe=a("strong"),Wrr=o("nezha"),Urr=o(" \u2014 "),YH=a("a"),Hrr=o("NezhaForPreTraining"),Jrr=o(" (Nezha model)"),Yrr=l(),qv=a("li"),EEe=a("strong"),Zrr=o("openai-gpt"),Krr=o(" \u2014 "),ZH=a("a"),etr=o("OpenAIGPTLMHeadModel"),otr=o(" (OpenAI GPT model)"),rtr=l(),jv=a("li"),CEe=a("strong"),ttr=o("retribert"),atr=o(" \u2014 "),KH=a("a"),ntr=o("RetriBertModel"),str=o(" (RetriBERT model)"),ltr=l(),Dv=a("li"),wEe=a("strong"),itr=o("roberta"),dtr=o(" \u2014 "),eJ=a("a"),mtr=o("RobertaForMaskedLM"),ctr=o(" (RoBERTa model)"),ftr=l(),Gv=a("li"),AEe=a("strong"),gtr=o("roc_bert"),htr=o(" \u2014 "),oJ=a("a"),utr=o("RoCBertForPreTraining"),ptr=o(" (RoCBert model)"),_tr=l(),Ov=a("li"),LEe=a("strong"),btr=o("splinter"),vtr=o(" \u2014 "),rJ=a("a"),Ftr=o("SplinterForPreTraining"),Ttr=o(" (Splinter model)"),Mtr=l(),Vv=a("li"),yEe=a("strong"),Etr=o("squeezebert"),Ctr=o(" \u2014 "),tJ=a("a"),wtr=o("SqueezeBertForMaskedLM"),Atr=o(" (SqueezeBERT model)"),Ltr=l(),Xv=a("li"),xEe=a("strong"),ytr=o("switch_transformers"),xtr=o(" \u2014 "),aJ=a("a"),$tr=o("SwitchTransformersForConditionalGeneration"),ktr=o(" (SwitchTransformers model)"),Str=l(),zv=a("li"),$Ee=a("strong"),Rtr=o("t5"),Ptr=o(" \u2014 "),nJ=a("a"),Btr=o("T5ForConditionalGeneration"),Itr=o(" (T5 model)"),Ntr=l(),Qv=a("li"),kEe=a("strong"),qtr=o("tapas"),jtr=o(" \u2014 "),sJ=a("a"),Dtr=o("TapasForMaskedLM"),Gtr=o(" (TAPAS model)"),Otr=l(),Wv=a("li"),SEe=a("strong"),Vtr=o("transfo-xl"),Xtr=o(" \u2014 "),lJ=a("a"),ztr=o("TransfoXLLMHeadModel"),Qtr=o(" (Transformer-XL model)"),Wtr=l(),Uv=a("li"),REe=a("strong"),Utr=o("unispeech"),Htr=o(" \u2014 "),iJ=a("a"),Jtr=o("UniSpeechForPreTraining"),Ytr=o(" (UniSpeech model)"),Ztr=l(),Hv=a("li"),PEe=a("strong"),Ktr=o("unispeech-sat"),ear=o(" \u2014 "),dJ=a("a"),oar=o("UniSpeechSatForPreTraining"),rar=o(" (UniSpeechSat model)"),tar=l(),Jv=a("li"),BEe=a("strong"),aar=o("videomae"),nar=o(" \u2014 "),mJ=a("a"),sar=o("VideoMAEForPreTraining"),lar=o(" (VideoMAE model)"),iar=l(),Yv=a("li"),IEe=a("strong"),dar=o("visual_bert"),mar=o(" \u2014 "),cJ=a("a"),car=o("VisualBertForPreTraining"),far=o(" (VisualBERT model)"),gar=l(),Zv=a("li"),NEe=a("strong"),har=o("vit_mae"),uar=o(" \u2014 "),fJ=a("a"),par=o("ViTMAEForPreTraining"),_ar=o(" (ViTMAE model)"),bar=l(),Kv=a("li"),qEe=a("strong"),Far=o("wav2vec2"),Tar=o(" \u2014 "),gJ=a("a"),Mar=o("Wav2Vec2ForPreTraining"),Ear=o(" (Wav2Vec2 model)"),Car=l(),eF=a("li"),jEe=a("strong"),war=o("wav2vec2-conformer"),Aar=o(" \u2014 "),hJ=a("a"),Lar=o("Wav2Vec2ConformerForPreTraining"),yar=o(" (Wav2Vec2-Conformer model)"),xar=l(),oF=a("li"),DEe=a("strong"),$ar=o("xlm"),kar=o(" \u2014 "),uJ=a("a"),Sar=o("XLMWithLMHeadModel"),Rar=o(" (XLM model)"),Par=l(),rF=a("li"),GEe=a("strong"),Bar=o("xlm-roberta"),Iar=o(" \u2014 "),pJ=a("a"),Nar=o("XLMRobertaForMaskedLM"),qar=o(" (XLM-RoBERTa model)"),jar=l(),tF=a("li"),OEe=a("strong"),Dar=o("xlm-roberta-xl"),Gar=o(" \u2014 "),_J=a("a"),Oar=o("XLMRobertaXLForMaskedLM"),Var=o(" (XLM-RoBERTa-XL model)"),Xar=l(),aF=a("li"),VEe=a("strong"),zar=o("xlnet"),Qar=o(" \u2014 "),bJ=a("a"),War=o("XLNetLMHeadModel"),Uar=o(" (XLNet model)"),Har=l(),nF=a("p"),Jar=o("The model is set in evaluation mode by default using "),XEe=a("code"),Yar=o("model.eval()"),Zar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zEe=a("code"),Kar=o("model.train()"),enr=l(),F(sF.$$.fragment),Oio=l(),Ud=a("h2"),lF=a("a"),QEe=a("span"),F(uS.$$.fragment),onr=l(),WEe=a("span"),rnr=o("AutoModelForCausalLM"),Vio=l(),Oo=a("div"),F(pS.$$.fragment),tnr=l(),Hd=a("p"),anr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vJ=a("a"),nnr=o("from_pretrained()"),snr=o(" class method or the "),FJ=a("a"),lnr=o("from_config()"),inr=o(` class
method.`),dnr=l(),_S=a("p"),mnr=o("This class cannot be instantiated directly using "),UEe=a("code"),cnr=o("__init__()"),fnr=o(" (throws an error)."),gnr=l(),yt=a("div"),F(bS.$$.fragment),hnr=l(),HEe=a("p"),unr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pnr=l(),Jd=a("p"),_nr=o(`Note:
Loading a model from its configuration file does `),JEe=a("strong"),bnr=o("not"),vnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),Fnr=o("from_pretrained()"),Tnr=o(" to load the model weights."),Mnr=l(),F(iF.$$.fragment),Enr=l(),no=a("div"),F(vS.$$.fragment),Cnr=l(),YEe=a("p"),wnr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Anr=l(),un=a("p"),Lnr=o("The model class to instantiate is selected based on the "),ZEe=a("code"),ynr=o("model_type"),xnr=o(` property of the config object (either
passed as an argument or loaded from `),KEe=a("code"),$nr=o("pretrained_model_name_or_path"),knr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=a("code"),Snr=o("pretrained_model_name_or_path"),Rnr=o(":"),Pnr=l(),W=a("ul"),dF=a("li"),o4e=a("strong"),Bnr=o("bart"),Inr=o(" \u2014 "),MJ=a("a"),Nnr=o("BartForCausalLM"),qnr=o(" (BART model)"),jnr=l(),mF=a("li"),r4e=a("strong"),Dnr=o("bert"),Gnr=o(" \u2014 "),EJ=a("a"),Onr=o("BertLMHeadModel"),Vnr=o(" (BERT model)"),Xnr=l(),cF=a("li"),t4e=a("strong"),znr=o("bert-generation"),Qnr=o(" \u2014 "),CJ=a("a"),Wnr=o("BertGenerationDecoder"),Unr=o(" (Bert Generation model)"),Hnr=l(),fF=a("li"),a4e=a("strong"),Jnr=o("big_bird"),Ynr=o(" \u2014 "),wJ=a("a"),Znr=o("BigBirdForCausalLM"),Knr=o(" (BigBird model)"),esr=l(),gF=a("li"),n4e=a("strong"),osr=o("bigbird_pegasus"),rsr=o(" \u2014 "),AJ=a("a"),tsr=o("BigBirdPegasusForCausalLM"),asr=o(" (BigBird-Pegasus model)"),nsr=l(),hF=a("li"),s4e=a("strong"),ssr=o("blenderbot"),lsr=o(" \u2014 "),LJ=a("a"),isr=o("BlenderbotForCausalLM"),dsr=o(" (Blenderbot model)"),msr=l(),uF=a("li"),l4e=a("strong"),csr=o("blenderbot-small"),fsr=o(" \u2014 "),yJ=a("a"),gsr=o("BlenderbotSmallForCausalLM"),hsr=o(" (BlenderbotSmall model)"),usr=l(),pF=a("li"),i4e=a("strong"),psr=o("bloom"),_sr=o(" \u2014 "),xJ=a("a"),bsr=o("BloomForCausalLM"),vsr=o(" (BLOOM model)"),Fsr=l(),_F=a("li"),d4e=a("strong"),Tsr=o("camembert"),Msr=o(" \u2014 "),$J=a("a"),Esr=o("CamembertForCausalLM"),Csr=o(" (CamemBERT model)"),wsr=l(),bF=a("li"),m4e=a("strong"),Asr=o("codegen"),Lsr=o(" \u2014 "),kJ=a("a"),ysr=o("CodeGenForCausalLM"),xsr=o(" (CodeGen model)"),$sr=l(),vF=a("li"),c4e=a("strong"),ksr=o("ctrl"),Ssr=o(" \u2014 "),SJ=a("a"),Rsr=o("CTRLLMHeadModel"),Psr=o(" (CTRL model)"),Bsr=l(),FF=a("li"),f4e=a("strong"),Isr=o("data2vec-text"),Nsr=o(" \u2014 "),RJ=a("a"),qsr=o("Data2VecTextForCausalLM"),jsr=o(" (Data2VecText model)"),Dsr=l(),TF=a("li"),g4e=a("strong"),Gsr=o("electra"),Osr=o(" \u2014 "),PJ=a("a"),Vsr=o("ElectraForCausalLM"),Xsr=o(" (ELECTRA model)"),zsr=l(),MF=a("li"),h4e=a("strong"),Qsr=o("ernie"),Wsr=o(" \u2014 "),BJ=a("a"),Usr=o("ErnieForCausalLM"),Hsr=o(" (ERNIE model)"),Jsr=l(),EF=a("li"),u4e=a("strong"),Ysr=o("gpt2"),Zsr=o(" \u2014 "),IJ=a("a"),Ksr=o("GPT2LMHeadModel"),elr=o(" (OpenAI GPT-2 model)"),olr=l(),CF=a("li"),p4e=a("strong"),rlr=o("gpt_neo"),tlr=o(" \u2014 "),NJ=a("a"),alr=o("GPTNeoForCausalLM"),nlr=o(" (GPT Neo model)"),slr=l(),wF=a("li"),_4e=a("strong"),llr=o("gpt_neox"),ilr=o(" \u2014 "),qJ=a("a"),dlr=o("GPTNeoXForCausalLM"),mlr=o(" (GPT NeoX model)"),clr=l(),AF=a("li"),b4e=a("strong"),flr=o("gpt_neox_japanese"),glr=o(" \u2014 "),jJ=a("a"),hlr=o("GPTNeoXJapaneseForCausalLM"),ulr=o(" (GPT NeoX Japanese model)"),plr=l(),LF=a("li"),v4e=a("strong"),_lr=o("gptj"),blr=o(" \u2014 "),DJ=a("a"),vlr=o("GPTJForCausalLM"),Flr=o(" (GPT-J model)"),Tlr=l(),yF=a("li"),F4e=a("strong"),Mlr=o("marian"),Elr=o(" \u2014 "),GJ=a("a"),Clr=o("MarianForCausalLM"),wlr=o(" (Marian model)"),Alr=l(),xF=a("li"),T4e=a("strong"),Llr=o("mbart"),ylr=o(" \u2014 "),OJ=a("a"),xlr=o("MBartForCausalLM"),$lr=o(" (mBART model)"),klr=l(),$F=a("li"),M4e=a("strong"),Slr=o("megatron-bert"),Rlr=o(" \u2014 "),VJ=a("a"),Plr=o("MegatronBertForCausalLM"),Blr=o(" (Megatron-BERT model)"),Ilr=l(),kF=a("li"),E4e=a("strong"),Nlr=o("mvp"),qlr=o(" \u2014 "),XJ=a("a"),jlr=o("MvpForCausalLM"),Dlr=o(" (MVP model)"),Glr=l(),SF=a("li"),C4e=a("strong"),Olr=o("openai-gpt"),Vlr=o(" \u2014 "),zJ=a("a"),Xlr=o("OpenAIGPTLMHeadModel"),zlr=o(" (OpenAI GPT model)"),Qlr=l(),RF=a("li"),w4e=a("strong"),Wlr=o("opt"),Ulr=o(" \u2014 "),QJ=a("a"),Hlr=o("OPTForCausalLM"),Jlr=o(" (OPT model)"),Ylr=l(),PF=a("li"),A4e=a("strong"),Zlr=o("pegasus"),Klr=o(" \u2014 "),WJ=a("a"),eir=o("PegasusForCausalLM"),oir=o(" (Pegasus model)"),rir=l(),BF=a("li"),L4e=a("strong"),tir=o("plbart"),air=o(" \u2014 "),UJ=a("a"),nir=o("PLBartForCausalLM"),sir=o(" (PLBart model)"),lir=l(),IF=a("li"),y4e=a("strong"),iir=o("prophetnet"),dir=o(" \u2014 "),HJ=a("a"),mir=o("ProphetNetForCausalLM"),cir=o(" (ProphetNet model)"),fir=l(),NF=a("li"),x4e=a("strong"),gir=o("qdqbert"),hir=o(" \u2014 "),JJ=a("a"),uir=o("QDQBertLMHeadModel"),pir=o(" (QDQBert model)"),_ir=l(),qF=a("li"),$4e=a("strong"),bir=o("reformer"),vir=o(" \u2014 "),YJ=a("a"),Fir=o("ReformerModelWithLMHead"),Tir=o(" (Reformer model)"),Mir=l(),jF=a("li"),k4e=a("strong"),Eir=o("rembert"),Cir=o(" \u2014 "),ZJ=a("a"),wir=o("RemBertForCausalLM"),Air=o(" (RemBERT model)"),Lir=l(),DF=a("li"),S4e=a("strong"),yir=o("roberta"),xir=o(" \u2014 "),KJ=a("a"),$ir=o("RobertaForCausalLM"),kir=o(" (RoBERTa model)"),Sir=l(),GF=a("li"),R4e=a("strong"),Rir=o("roc_bert"),Pir=o(" \u2014 "),eY=a("a"),Bir=o("RoCBertForCausalLM"),Iir=o(" (RoCBert model)"),Nir=l(),OF=a("li"),P4e=a("strong"),qir=o("roformer"),jir=o(" \u2014 "),oY=a("a"),Dir=o("RoFormerForCausalLM"),Gir=o(" (RoFormer model)"),Oir=l(),VF=a("li"),B4e=a("strong"),Vir=o("speech_to_text_2"),Xir=o(" \u2014 "),rY=a("a"),zir=o("Speech2Text2ForCausalLM"),Qir=o(" (Speech2Text2 model)"),Wir=l(),XF=a("li"),I4e=a("strong"),Uir=o("transfo-xl"),Hir=o(" \u2014 "),tY=a("a"),Jir=o("TransfoXLLMHeadModel"),Yir=o(" (Transformer-XL model)"),Zir=l(),zF=a("li"),N4e=a("strong"),Kir=o("trocr"),edr=o(" \u2014 "),aY=a("a"),odr=o("TrOCRForCausalLM"),rdr=o(" (TrOCR model)"),tdr=l(),QF=a("li"),q4e=a("strong"),adr=o("xglm"),ndr=o(" \u2014 "),nY=a("a"),sdr=o("XGLMForCausalLM"),ldr=o(" (XGLM model)"),idr=l(),WF=a("li"),j4e=a("strong"),ddr=o("xlm"),mdr=o(" \u2014 "),sY=a("a"),cdr=o("XLMWithLMHeadModel"),fdr=o(" (XLM model)"),gdr=l(),UF=a("li"),D4e=a("strong"),hdr=o("xlm-prophetnet"),udr=o(" \u2014 "),lY=a("a"),pdr=o("XLMProphetNetForCausalLM"),_dr=o(" (XLM-ProphetNet model)"),bdr=l(),HF=a("li"),G4e=a("strong"),vdr=o("xlm-roberta"),Fdr=o(" \u2014 "),iY=a("a"),Tdr=o("XLMRobertaForCausalLM"),Mdr=o(" (XLM-RoBERTa model)"),Edr=l(),JF=a("li"),O4e=a("strong"),Cdr=o("xlm-roberta-xl"),wdr=o(" \u2014 "),dY=a("a"),Adr=o("XLMRobertaXLForCausalLM"),Ldr=o(" (XLM-RoBERTa-XL model)"),ydr=l(),YF=a("li"),V4e=a("strong"),xdr=o("xlnet"),$dr=o(" \u2014 "),mY=a("a"),kdr=o("XLNetLMHeadModel"),Sdr=o(" (XLNet model)"),Rdr=l(),ZF=a("p"),Pdr=o("The model is set in evaluation mode by default using "),X4e=a("code"),Bdr=o("model.eval()"),Idr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z4e=a("code"),Ndr=o("model.train()"),qdr=l(),F(KF.$$.fragment),Xio=l(),Yd=a("h2"),eT=a("a"),Q4e=a("span"),F(FS.$$.fragment),jdr=l(),W4e=a("span"),Ddr=o("AutoModelForDepthEstimation"),zio=l(),Vo=a("div"),F(TS.$$.fragment),Gdr=l(),Zd=a("p"),Odr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a depth estimation head) when created
with the `),cY=a("a"),Vdr=o("from_pretrained()"),Xdr=o(" class method or the "),fY=a("a"),zdr=o("from_config()"),Qdr=o(` class
method.`),Wdr=l(),MS=a("p"),Udr=o("This class cannot be instantiated directly using "),U4e=a("code"),Hdr=o("__init__()"),Jdr=o(" (throws an error)."),Ydr=l(),xt=a("div"),F(ES.$$.fragment),Zdr=l(),H4e=a("p"),Kdr=o("Instantiates one of the model classes of the library (with a depth estimation head) from a configuration."),emr=l(),Kd=a("p"),omr=o(`Note:
Loading a model from its configuration file does `),J4e=a("strong"),rmr=o("not"),tmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),amr=o("from_pretrained()"),nmr=o(" to load the model weights."),smr=l(),F(oT.$$.fragment),lmr=l(),so=a("div"),F(CS.$$.fragment),imr=l(),Y4e=a("p"),dmr=o("Instantiate one of the model classes of the library (with a depth estimation head) from a pretrained model."),mmr=l(),pn=a("p"),cmr=o("The model class to instantiate is selected based on the "),Z4e=a("code"),fmr=o("model_type"),gmr=o(` property of the config object (either
passed as an argument or loaded from `),K4e=a("code"),hmr=o("pretrained_model_name_or_path"),umr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eCe=a("code"),pmr=o("pretrained_model_name_or_path"),_mr=o(":"),bmr=l(),wS=a("ul"),rT=a("li"),oCe=a("strong"),vmr=o("dpt"),Fmr=o(" \u2014 "),hY=a("a"),Tmr=o("DPTForDepthEstimation"),Mmr=o(" (DPT model)"),Emr=l(),tT=a("li"),rCe=a("strong"),Cmr=o("glpn"),wmr=o(" \u2014 "),uY=a("a"),Amr=o("GLPNForDepthEstimation"),Lmr=o(" (GLPN model)"),ymr=l(),aT=a("p"),xmr=o("The model is set in evaluation mode by default using "),tCe=a("code"),$mr=o("model.eval()"),kmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aCe=a("code"),Smr=o("model.train()"),Rmr=l(),F(nT.$$.fragment),Qio=l(),em=a("h2"),sT=a("a"),nCe=a("span"),F(AS.$$.fragment),Pmr=l(),sCe=a("span"),Bmr=o("AutoModelForMaskedLM"),Wio=l(),Xo=a("div"),F(LS.$$.fragment),Imr=l(),om=a("p"),Nmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pY=a("a"),qmr=o("from_pretrained()"),jmr=o(" class method or the "),_Y=a("a"),Dmr=o("from_config()"),Gmr=o(` class
method.`),Omr=l(),yS=a("p"),Vmr=o("This class cannot be instantiated directly using "),lCe=a("code"),Xmr=o("__init__()"),zmr=o(" (throws an error)."),Qmr=l(),$t=a("div"),F(xS.$$.fragment),Wmr=l(),iCe=a("p"),Umr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hmr=l(),rm=a("p"),Jmr=o(`Note:
Loading a model from its configuration file does `),dCe=a("strong"),Ymr=o("not"),Zmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),Kmr=o("from_pretrained()"),ecr=o(" to load the model weights."),ocr=l(),F(lT.$$.fragment),rcr=l(),lo=a("div"),F($S.$$.fragment),tcr=l(),mCe=a("p"),acr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ncr=l(),_n=a("p"),scr=o("The model class to instantiate is selected based on the "),cCe=a("code"),lcr=o("model_type"),icr=o(` property of the config object (either
passed as an argument or loaded from `),fCe=a("code"),dcr=o("pretrained_model_name_or_path"),mcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=a("code"),ccr=o("pretrained_model_name_or_path"),fcr=o(":"),gcr=l(),J=a("ul"),iT=a("li"),hCe=a("strong"),hcr=o("albert"),ucr=o(" \u2014 "),vY=a("a"),pcr=o("AlbertForMaskedLM"),_cr=o(" (ALBERT model)"),bcr=l(),dT=a("li"),uCe=a("strong"),vcr=o("bart"),Fcr=o(" \u2014 "),FY=a("a"),Tcr=o("BartForConditionalGeneration"),Mcr=o(" (BART model)"),Ecr=l(),mT=a("li"),pCe=a("strong"),Ccr=o("bert"),wcr=o(" \u2014 "),TY=a("a"),Acr=o("BertForMaskedLM"),Lcr=o(" (BERT model)"),ycr=l(),cT=a("li"),_Ce=a("strong"),xcr=o("big_bird"),$cr=o(" \u2014 "),MY=a("a"),kcr=o("BigBirdForMaskedLM"),Scr=o(" (BigBird model)"),Rcr=l(),fT=a("li"),bCe=a("strong"),Pcr=o("camembert"),Bcr=o(" \u2014 "),EY=a("a"),Icr=o("CamembertForMaskedLM"),Ncr=o(" (CamemBERT model)"),qcr=l(),gT=a("li"),vCe=a("strong"),jcr=o("convbert"),Dcr=o(" \u2014 "),CY=a("a"),Gcr=o("ConvBertForMaskedLM"),Ocr=o(" (ConvBERT model)"),Vcr=l(),hT=a("li"),FCe=a("strong"),Xcr=o("data2vec-text"),zcr=o(" \u2014 "),wY=a("a"),Qcr=o("Data2VecTextForMaskedLM"),Wcr=o(" (Data2VecText model)"),Ucr=l(),uT=a("li"),TCe=a("strong"),Hcr=o("deberta"),Jcr=o(" \u2014 "),AY=a("a"),Ycr=o("DebertaForMaskedLM"),Zcr=o(" (DeBERTa model)"),Kcr=l(),pT=a("li"),MCe=a("strong"),efr=o("deberta-v2"),ofr=o(" \u2014 "),LY=a("a"),rfr=o("DebertaV2ForMaskedLM"),tfr=o(" (DeBERTa-v2 model)"),afr=l(),_T=a("li"),ECe=a("strong"),nfr=o("distilbert"),sfr=o(" \u2014 "),yY=a("a"),lfr=o("DistilBertForMaskedLM"),ifr=o(" (DistilBERT model)"),dfr=l(),bT=a("li"),CCe=a("strong"),mfr=o("electra"),cfr=o(" \u2014 "),xY=a("a"),ffr=o("ElectraForMaskedLM"),gfr=o(" (ELECTRA model)"),hfr=l(),vT=a("li"),wCe=a("strong"),ufr=o("ernie"),pfr=o(" \u2014 "),$Y=a("a"),_fr=o("ErnieForMaskedLM"),bfr=o(" (ERNIE model)"),vfr=l(),FT=a("li"),ACe=a("strong"),Ffr=o("esm"),Tfr=o(" \u2014 "),kY=a("a"),Mfr=o("EsmForMaskedLM"),Efr=o(" (ESM model)"),Cfr=l(),TT=a("li"),LCe=a("strong"),wfr=o("flaubert"),Afr=o(" \u2014 "),SY=a("a"),Lfr=o("FlaubertWithLMHeadModel"),yfr=o(" (FlauBERT model)"),xfr=l(),MT=a("li"),yCe=a("strong"),$fr=o("fnet"),kfr=o(" \u2014 "),RY=a("a"),Sfr=o("FNetForMaskedLM"),Rfr=o(" (FNet model)"),Pfr=l(),ET=a("li"),xCe=a("strong"),Bfr=o("funnel"),Ifr=o(" \u2014 "),PY=a("a"),Nfr=o("FunnelForMaskedLM"),qfr=o(" (Funnel Transformer model)"),jfr=l(),CT=a("li"),$Ce=a("strong"),Dfr=o("ibert"),Gfr=o(" \u2014 "),BY=a("a"),Ofr=o("IBertForMaskedLM"),Vfr=o(" (I-BERT model)"),Xfr=l(),wT=a("li"),kCe=a("strong"),zfr=o("layoutlm"),Qfr=o(" \u2014 "),IY=a("a"),Wfr=o("LayoutLMForMaskedLM"),Ufr=o(" (LayoutLM model)"),Hfr=l(),AT=a("li"),SCe=a("strong"),Jfr=o("longformer"),Yfr=o(" \u2014 "),NY=a("a"),Zfr=o("LongformerForMaskedLM"),Kfr=o(" (Longformer model)"),egr=l(),LT=a("li"),RCe=a("strong"),ogr=o("luke"),rgr=o(" \u2014 "),qY=a("a"),tgr=o("LukeForMaskedLM"),agr=o(" (LUKE model)"),ngr=l(),yT=a("li"),PCe=a("strong"),sgr=o("mbart"),lgr=o(" \u2014 "),jY=a("a"),igr=o("MBartForConditionalGeneration"),dgr=o(" (mBART model)"),mgr=l(),xT=a("li"),BCe=a("strong"),cgr=o("megatron-bert"),fgr=o(" \u2014 "),DY=a("a"),ggr=o("MegatronBertForMaskedLM"),hgr=o(" (Megatron-BERT model)"),ugr=l(),$T=a("li"),ICe=a("strong"),pgr=o("mobilebert"),_gr=o(" \u2014 "),GY=a("a"),bgr=o("MobileBertForMaskedLM"),vgr=o(" (MobileBERT model)"),Fgr=l(),kT=a("li"),NCe=a("strong"),Tgr=o("mpnet"),Mgr=o(" \u2014 "),OY=a("a"),Egr=o("MPNetForMaskedLM"),Cgr=o(" (MPNet model)"),wgr=l(),ST=a("li"),qCe=a("strong"),Agr=o("mvp"),Lgr=o(" \u2014 "),VY=a("a"),ygr=o("MvpForConditionalGeneration"),xgr=o(" (MVP model)"),$gr=l(),RT=a("li"),jCe=a("strong"),kgr=o("nezha"),Sgr=o(" \u2014 "),XY=a("a"),Rgr=o("NezhaForMaskedLM"),Pgr=o(" (Nezha model)"),Bgr=l(),PT=a("li"),DCe=a("strong"),Igr=o("nystromformer"),Ngr=o(" \u2014 "),zY=a("a"),qgr=o("NystromformerForMaskedLM"),jgr=o(" (Nystr\xF6mformer model)"),Dgr=l(),BT=a("li"),GCe=a("strong"),Ggr=o("perceiver"),Ogr=o(" \u2014 "),QY=a("a"),Vgr=o("PerceiverForMaskedLM"),Xgr=o(" (Perceiver model)"),zgr=l(),IT=a("li"),OCe=a("strong"),Qgr=o("qdqbert"),Wgr=o(" \u2014 "),WY=a("a"),Ugr=o("QDQBertForMaskedLM"),Hgr=o(" (QDQBert model)"),Jgr=l(),NT=a("li"),VCe=a("strong"),Ygr=o("reformer"),Zgr=o(" \u2014 "),UY=a("a"),Kgr=o("ReformerForMaskedLM"),ehr=o(" (Reformer model)"),ohr=l(),qT=a("li"),XCe=a("strong"),rhr=o("rembert"),thr=o(" \u2014 "),HY=a("a"),ahr=o("RemBertForMaskedLM"),nhr=o(" (RemBERT model)"),shr=l(),jT=a("li"),zCe=a("strong"),lhr=o("roberta"),ihr=o(" \u2014 "),JY=a("a"),dhr=o("RobertaForMaskedLM"),mhr=o(" (RoBERTa model)"),chr=l(),DT=a("li"),QCe=a("strong"),fhr=o("roc_bert"),ghr=o(" \u2014 "),YY=a("a"),hhr=o("RoCBertForMaskedLM"),uhr=o(" (RoCBert model)"),phr=l(),GT=a("li"),WCe=a("strong"),_hr=o("roformer"),bhr=o(" \u2014 "),ZY=a("a"),vhr=o("RoFormerForMaskedLM"),Fhr=o(" (RoFormer model)"),Thr=l(),OT=a("li"),UCe=a("strong"),Mhr=o("squeezebert"),Ehr=o(" \u2014 "),KY=a("a"),Chr=o("SqueezeBertForMaskedLM"),whr=o(" (SqueezeBERT model)"),Ahr=l(),VT=a("li"),HCe=a("strong"),Lhr=o("tapas"),yhr=o(" \u2014 "),eZ=a("a"),xhr=o("TapasForMaskedLM"),$hr=o(" (TAPAS model)"),khr=l(),XT=a("li"),JCe=a("strong"),Shr=o("wav2vec2"),Rhr=o(" \u2014 "),YCe=a("code"),Phr=o("Wav2Vec2ForMaskedLM"),Bhr=o(" (Wav2Vec2 model)"),Ihr=l(),zT=a("li"),ZCe=a("strong"),Nhr=o("xlm"),qhr=o(" \u2014 "),oZ=a("a"),jhr=o("XLMWithLMHeadModel"),Dhr=o(" (XLM model)"),Ghr=l(),QT=a("li"),KCe=a("strong"),Ohr=o("xlm-roberta"),Vhr=o(" \u2014 "),rZ=a("a"),Xhr=o("XLMRobertaForMaskedLM"),zhr=o(" (XLM-RoBERTa model)"),Qhr=l(),WT=a("li"),e3e=a("strong"),Whr=o("xlm-roberta-xl"),Uhr=o(" \u2014 "),tZ=a("a"),Hhr=o("XLMRobertaXLForMaskedLM"),Jhr=o(" (XLM-RoBERTa-XL model)"),Yhr=l(),UT=a("li"),o3e=a("strong"),Zhr=o("yoso"),Khr=o(" \u2014 "),aZ=a("a"),eur=o("YosoForMaskedLM"),our=o(" (YOSO model)"),rur=l(),HT=a("p"),tur=o("The model is set in evaluation mode by default using "),r3e=a("code"),aur=o("model.eval()"),nur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t3e=a("code"),sur=o("model.train()"),lur=l(),F(JT.$$.fragment),Uio=l(),tm=a("h2"),YT=a("a"),a3e=a("span"),F(kS.$$.fragment),iur=l(),n3e=a("span"),dur=o("AutoModelForSeq2SeqLM"),Hio=l(),zo=a("div"),F(SS.$$.fragment),mur=l(),am=a("p"),cur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nZ=a("a"),fur=o("from_pretrained()"),gur=o(" class method or the "),sZ=a("a"),hur=o("from_config()"),uur=o(` class
method.`),pur=l(),RS=a("p"),_ur=o("This class cannot be instantiated directly using "),s3e=a("code"),bur=o("__init__()"),vur=o(" (throws an error)."),Fur=l(),kt=a("div"),F(PS.$$.fragment),Tur=l(),l3e=a("p"),Mur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Eur=l(),nm=a("p"),Cur=o(`Note:
Loading a model from its configuration file does `),i3e=a("strong"),wur=o("not"),Aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),Lur=o("from_pretrained()"),yur=o(" to load the model weights."),xur=l(),F(ZT.$$.fragment),$ur=l(),io=a("div"),F(BS.$$.fragment),kur=l(),d3e=a("p"),Sur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rur=l(),bn=a("p"),Pur=o("The model class to instantiate is selected based on the "),m3e=a("code"),Bur=o("model_type"),Iur=o(` property of the config object (either
passed as an argument or loaded from `),c3e=a("code"),Nur=o("pretrained_model_name_or_path"),qur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=a("code"),jur=o("pretrained_model_name_or_path"),Dur=o(":"),Gur=l(),ge=a("ul"),KT=a("li"),g3e=a("strong"),Our=o("bart"),Vur=o(" \u2014 "),iZ=a("a"),Xur=o("BartForConditionalGeneration"),zur=o(" (BART model)"),Qur=l(),eM=a("li"),h3e=a("strong"),Wur=o("bigbird_pegasus"),Uur=o(" \u2014 "),dZ=a("a"),Hur=o("BigBirdPegasusForConditionalGeneration"),Jur=o(" (BigBird-Pegasus model)"),Yur=l(),oM=a("li"),u3e=a("strong"),Zur=o("blenderbot"),Kur=o(" \u2014 "),mZ=a("a"),epr=o("BlenderbotForConditionalGeneration"),opr=o(" (Blenderbot model)"),rpr=l(),rM=a("li"),p3e=a("strong"),tpr=o("blenderbot-small"),apr=o(" \u2014 "),cZ=a("a"),npr=o("BlenderbotSmallForConditionalGeneration"),spr=o(" (BlenderbotSmall model)"),lpr=l(),tM=a("li"),_3e=a("strong"),ipr=o("encoder-decoder"),dpr=o(" \u2014 "),fZ=a("a"),mpr=o("EncoderDecoderModel"),cpr=o(" (Encoder decoder model)"),fpr=l(),aM=a("li"),b3e=a("strong"),gpr=o("fsmt"),hpr=o(" \u2014 "),gZ=a("a"),upr=o("FSMTForConditionalGeneration"),ppr=o(" (FairSeq Machine-Translation model)"),_pr=l(),nM=a("li"),v3e=a("strong"),bpr=o("led"),vpr=o(" \u2014 "),hZ=a("a"),Fpr=o("LEDForConditionalGeneration"),Tpr=o(" (LED model)"),Mpr=l(),sM=a("li"),F3e=a("strong"),Epr=o("longt5"),Cpr=o(" \u2014 "),uZ=a("a"),wpr=o("LongT5ForConditionalGeneration"),Apr=o(" (LongT5 model)"),Lpr=l(),lM=a("li"),T3e=a("strong"),ypr=o("m2m_100"),xpr=o(" \u2014 "),pZ=a("a"),$pr=o("M2M100ForConditionalGeneration"),kpr=o(" (M2M100 model)"),Spr=l(),iM=a("li"),M3e=a("strong"),Rpr=o("marian"),Ppr=o(" \u2014 "),_Z=a("a"),Bpr=o("MarianMTModel"),Ipr=o(" (Marian model)"),Npr=l(),dM=a("li"),E3e=a("strong"),qpr=o("mbart"),jpr=o(" \u2014 "),bZ=a("a"),Dpr=o("MBartForConditionalGeneration"),Gpr=o(" (mBART model)"),Opr=l(),mM=a("li"),C3e=a("strong"),Vpr=o("mt5"),Xpr=o(" \u2014 "),vZ=a("a"),zpr=o("MT5ForConditionalGeneration"),Qpr=o(" (MT5 model)"),Wpr=l(),cM=a("li"),w3e=a("strong"),Upr=o("mvp"),Hpr=o(" \u2014 "),FZ=a("a"),Jpr=o("MvpForConditionalGeneration"),Ypr=o(" (MVP model)"),Zpr=l(),fM=a("li"),A3e=a("strong"),Kpr=o("nllb"),e_r=o(" \u2014 "),TZ=a("a"),o_r=o("M2M100ForConditionalGeneration"),r_r=o(" (NLLB model)"),t_r=l(),gM=a("li"),L3e=a("strong"),a_r=o("pegasus"),n_r=o(" \u2014 "),MZ=a("a"),s_r=o("PegasusForConditionalGeneration"),l_r=o(" (Pegasus model)"),i_r=l(),hM=a("li"),y3e=a("strong"),d_r=o("pegasus_x"),m_r=o(" \u2014 "),EZ=a("a"),c_r=o("PegasusXForConditionalGeneration"),f_r=o(" (PEGASUS-X model)"),g_r=l(),uM=a("li"),x3e=a("strong"),h_r=o("plbart"),u_r=o(" \u2014 "),CZ=a("a"),p_r=o("PLBartForConditionalGeneration"),__r=o(" (PLBart model)"),b_r=l(),pM=a("li"),$3e=a("strong"),v_r=o("prophetnet"),F_r=o(" \u2014 "),wZ=a("a"),T_r=o("ProphetNetForConditionalGeneration"),M_r=o(" (ProphetNet model)"),E_r=l(),_M=a("li"),k3e=a("strong"),C_r=o("switch_transformers"),w_r=o(" \u2014 "),AZ=a("a"),A_r=o("SwitchTransformersForConditionalGeneration"),L_r=o(" (SwitchTransformers model)"),y_r=l(),bM=a("li"),S3e=a("strong"),x_r=o("t5"),$_r=o(" \u2014 "),LZ=a("a"),k_r=o("T5ForConditionalGeneration"),S_r=o(" (T5 model)"),R_r=l(),vM=a("li"),R3e=a("strong"),P_r=o("xlm-prophetnet"),B_r=o(" \u2014 "),yZ=a("a"),I_r=o("XLMProphetNetForConditionalGeneration"),N_r=o(" (XLM-ProphetNet model)"),q_r=l(),FM=a("p"),j_r=o("The model is set in evaluation mode by default using "),P3e=a("code"),D_r=o("model.eval()"),G_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B3e=a("code"),O_r=o("model.train()"),V_r=l(),F(TM.$$.fragment),Jio=l(),sm=a("h2"),MM=a("a"),I3e=a("span"),F(IS.$$.fragment),X_r=l(),N3e=a("span"),z_r=o("AutoModelForSequenceClassification"),Yio=l(),Qo=a("div"),F(NS.$$.fragment),Q_r=l(),lm=a("p"),W_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xZ=a("a"),U_r=o("from_pretrained()"),H_r=o(" class method or the "),$Z=a("a"),J_r=o("from_config()"),Y_r=o(` class
method.`),Z_r=l(),qS=a("p"),K_r=o("This class cannot be instantiated directly using "),q3e=a("code"),e1r=o("__init__()"),o1r=o(" (throws an error)."),r1r=l(),St=a("div"),F(jS.$$.fragment),t1r=l(),j3e=a("p"),a1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),n1r=l(),im=a("p"),s1r=o(`Note:
Loading a model from its configuration file does `),D3e=a("strong"),l1r=o("not"),i1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=a("a"),d1r=o("from_pretrained()"),m1r=o(" to load the model weights."),c1r=l(),F(EM.$$.fragment),f1r=l(),mo=a("div"),F(DS.$$.fragment),g1r=l(),G3e=a("p"),h1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),u1r=l(),vn=a("p"),p1r=o("The model class to instantiate is selected based on the "),O3e=a("code"),_1r=o("model_type"),b1r=o(` property of the config object (either
passed as an argument or loaded from `),V3e=a("code"),v1r=o("pretrained_model_name_or_path"),F1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=a("code"),T1r=o("pretrained_model_name_or_path"),M1r=o(":"),E1r=l(),I=a("ul"),CM=a("li"),z3e=a("strong"),C1r=o("albert"),w1r=o(" \u2014 "),SZ=a("a"),A1r=o("AlbertForSequenceClassification"),L1r=o(" (ALBERT model)"),y1r=l(),wM=a("li"),Q3e=a("strong"),x1r=o("bart"),$1r=o(" \u2014 "),RZ=a("a"),k1r=o("BartForSequenceClassification"),S1r=o(" (BART model)"),R1r=l(),AM=a("li"),W3e=a("strong"),P1r=o("bert"),B1r=o(" \u2014 "),PZ=a("a"),I1r=o("BertForSequenceClassification"),N1r=o(" (BERT model)"),q1r=l(),LM=a("li"),U3e=a("strong"),j1r=o("big_bird"),D1r=o(" \u2014 "),BZ=a("a"),G1r=o("BigBirdForSequenceClassification"),O1r=o(" (BigBird model)"),V1r=l(),yM=a("li"),H3e=a("strong"),X1r=o("bigbird_pegasus"),z1r=o(" \u2014 "),IZ=a("a"),Q1r=o("BigBirdPegasusForSequenceClassification"),W1r=o(" (BigBird-Pegasus model)"),U1r=l(),xM=a("li"),J3e=a("strong"),H1r=o("bloom"),J1r=o(" \u2014 "),NZ=a("a"),Y1r=o("BloomForSequenceClassification"),Z1r=o(" (BLOOM model)"),K1r=l(),$M=a("li"),Y3e=a("strong"),e2r=o("camembert"),o2r=o(" \u2014 "),qZ=a("a"),r2r=o("CamembertForSequenceClassification"),t2r=o(" (CamemBERT model)"),a2r=l(),kM=a("li"),Z3e=a("strong"),n2r=o("canine"),s2r=o(" \u2014 "),jZ=a("a"),l2r=o("CanineForSequenceClassification"),i2r=o(" (CANINE model)"),d2r=l(),SM=a("li"),K3e=a("strong"),m2r=o("convbert"),c2r=o(" \u2014 "),DZ=a("a"),f2r=o("ConvBertForSequenceClassification"),g2r=o(" (ConvBERT model)"),h2r=l(),RM=a("li"),e5e=a("strong"),u2r=o("ctrl"),p2r=o(" \u2014 "),GZ=a("a"),_2r=o("CTRLForSequenceClassification"),b2r=o(" (CTRL model)"),v2r=l(),PM=a("li"),o5e=a("strong"),F2r=o("data2vec-text"),T2r=o(" \u2014 "),OZ=a("a"),M2r=o("Data2VecTextForSequenceClassification"),E2r=o(" (Data2VecText model)"),C2r=l(),BM=a("li"),r5e=a("strong"),w2r=o("deberta"),A2r=o(" \u2014 "),VZ=a("a"),L2r=o("DebertaForSequenceClassification"),y2r=o(" (DeBERTa model)"),x2r=l(),IM=a("li"),t5e=a("strong"),$2r=o("deberta-v2"),k2r=o(" \u2014 "),XZ=a("a"),S2r=o("DebertaV2ForSequenceClassification"),R2r=o(" (DeBERTa-v2 model)"),P2r=l(),NM=a("li"),a5e=a("strong"),B2r=o("distilbert"),I2r=o(" \u2014 "),zZ=a("a"),N2r=o("DistilBertForSequenceClassification"),q2r=o(" (DistilBERT model)"),j2r=l(),qM=a("li"),n5e=a("strong"),D2r=o("electra"),G2r=o(" \u2014 "),QZ=a("a"),O2r=o("ElectraForSequenceClassification"),V2r=o(" (ELECTRA model)"),X2r=l(),jM=a("li"),s5e=a("strong"),z2r=o("ernie"),Q2r=o(" \u2014 "),WZ=a("a"),W2r=o("ErnieForSequenceClassification"),U2r=o(" (ERNIE model)"),H2r=l(),DM=a("li"),l5e=a("strong"),J2r=o("esm"),Y2r=o(" \u2014 "),UZ=a("a"),Z2r=o("EsmForSequenceClassification"),K2r=o(" (ESM model)"),ebr=l(),GM=a("li"),i5e=a("strong"),obr=o("flaubert"),rbr=o(" \u2014 "),HZ=a("a"),tbr=o("FlaubertForSequenceClassification"),abr=o(" (FlauBERT model)"),nbr=l(),OM=a("li"),d5e=a("strong"),sbr=o("fnet"),lbr=o(" \u2014 "),JZ=a("a"),ibr=o("FNetForSequenceClassification"),dbr=o(" (FNet model)"),mbr=l(),VM=a("li"),m5e=a("strong"),cbr=o("funnel"),fbr=o(" \u2014 "),YZ=a("a"),gbr=o("FunnelForSequenceClassification"),hbr=o(" (Funnel Transformer model)"),ubr=l(),XM=a("li"),c5e=a("strong"),pbr=o("gpt2"),_br=o(" \u2014 "),ZZ=a("a"),bbr=o("GPT2ForSequenceClassification"),vbr=o(" (OpenAI GPT-2 model)"),Fbr=l(),zM=a("li"),f5e=a("strong"),Tbr=o("gpt_neo"),Mbr=o(" \u2014 "),KZ=a("a"),Ebr=o("GPTNeoForSequenceClassification"),Cbr=o(" (GPT Neo model)"),wbr=l(),QM=a("li"),g5e=a("strong"),Abr=o("gptj"),Lbr=o(" \u2014 "),eK=a("a"),ybr=o("GPTJForSequenceClassification"),xbr=o(" (GPT-J model)"),$br=l(),WM=a("li"),h5e=a("strong"),kbr=o("ibert"),Sbr=o(" \u2014 "),oK=a("a"),Rbr=o("IBertForSequenceClassification"),Pbr=o(" (I-BERT model)"),Bbr=l(),UM=a("li"),u5e=a("strong"),Ibr=o("layoutlm"),Nbr=o(" \u2014 "),rK=a("a"),qbr=o("LayoutLMForSequenceClassification"),jbr=o(" (LayoutLM model)"),Dbr=l(),HM=a("li"),p5e=a("strong"),Gbr=o("layoutlmv2"),Obr=o(" \u2014 "),tK=a("a"),Vbr=o("LayoutLMv2ForSequenceClassification"),Xbr=o(" (LayoutLMv2 model)"),zbr=l(),JM=a("li"),_5e=a("strong"),Qbr=o("layoutlmv3"),Wbr=o(" \u2014 "),aK=a("a"),Ubr=o("LayoutLMv3ForSequenceClassification"),Hbr=o(" (LayoutLMv3 model)"),Jbr=l(),YM=a("li"),b5e=a("strong"),Ybr=o("led"),Zbr=o(" \u2014 "),nK=a("a"),Kbr=o("LEDForSequenceClassification"),evr=o(" (LED model)"),ovr=l(),ZM=a("li"),v5e=a("strong"),rvr=o("lilt"),tvr=o(" \u2014 "),sK=a("a"),avr=o("LiltForSequenceClassification"),nvr=o(" (LiLT model)"),svr=l(),KM=a("li"),F5e=a("strong"),lvr=o("longformer"),ivr=o(" \u2014 "),lK=a("a"),dvr=o("LongformerForSequenceClassification"),mvr=o(" (Longformer model)"),cvr=l(),eE=a("li"),T5e=a("strong"),fvr=o("luke"),gvr=o(" \u2014 "),iK=a("a"),hvr=o("LukeForSequenceClassification"),uvr=o(" (LUKE model)"),pvr=l(),oE=a("li"),M5e=a("strong"),_vr=o("markuplm"),bvr=o(" \u2014 "),dK=a("a"),vvr=o("MarkupLMForSequenceClassification"),Fvr=o(" (MarkupLM model)"),Tvr=l(),rE=a("li"),E5e=a("strong"),Mvr=o("mbart"),Evr=o(" \u2014 "),mK=a("a"),Cvr=o("MBartForSequenceClassification"),wvr=o(" (mBART model)"),Avr=l(),tE=a("li"),C5e=a("strong"),Lvr=o("megatron-bert"),yvr=o(" \u2014 "),cK=a("a"),xvr=o("MegatronBertForSequenceClassification"),$vr=o(" (Megatron-BERT model)"),kvr=l(),aE=a("li"),w5e=a("strong"),Svr=o("mobilebert"),Rvr=o(" \u2014 "),fK=a("a"),Pvr=o("MobileBertForSequenceClassification"),Bvr=o(" (MobileBERT model)"),Ivr=l(),nE=a("li"),A5e=a("strong"),Nvr=o("mpnet"),qvr=o(" \u2014 "),gK=a("a"),jvr=o("MPNetForSequenceClassification"),Dvr=o(" (MPNet model)"),Gvr=l(),sE=a("li"),L5e=a("strong"),Ovr=o("mvp"),Vvr=o(" \u2014 "),hK=a("a"),Xvr=o("MvpForSequenceClassification"),zvr=o(" (MVP model)"),Qvr=l(),lE=a("li"),y5e=a("strong"),Wvr=o("nezha"),Uvr=o(" \u2014 "),uK=a("a"),Hvr=o("NezhaForSequenceClassification"),Jvr=o(" (Nezha model)"),Yvr=l(),iE=a("li"),x5e=a("strong"),Zvr=o("nystromformer"),Kvr=o(" \u2014 "),pK=a("a"),eFr=o("NystromformerForSequenceClassification"),oFr=o(" (Nystr\xF6mformer model)"),rFr=l(),dE=a("li"),$5e=a("strong"),tFr=o("openai-gpt"),aFr=o(" \u2014 "),_K=a("a"),nFr=o("OpenAIGPTForSequenceClassification"),sFr=o(" (OpenAI GPT model)"),lFr=l(),mE=a("li"),k5e=a("strong"),iFr=o("opt"),dFr=o(" \u2014 "),bK=a("a"),mFr=o("OPTForSequenceClassification"),cFr=o(" (OPT model)"),fFr=l(),cE=a("li"),S5e=a("strong"),gFr=o("perceiver"),hFr=o(" \u2014 "),vK=a("a"),uFr=o("PerceiverForSequenceClassification"),pFr=o(" (Perceiver model)"),_Fr=l(),fE=a("li"),R5e=a("strong"),bFr=o("plbart"),vFr=o(" \u2014 "),FK=a("a"),FFr=o("PLBartForSequenceClassification"),TFr=o(" (PLBart model)"),MFr=l(),gE=a("li"),P5e=a("strong"),EFr=o("qdqbert"),CFr=o(" \u2014 "),TK=a("a"),wFr=o("QDQBertForSequenceClassification"),AFr=o(" (QDQBert model)"),LFr=l(),hE=a("li"),B5e=a("strong"),yFr=o("reformer"),xFr=o(" \u2014 "),MK=a("a"),$Fr=o("ReformerForSequenceClassification"),kFr=o(" (Reformer model)"),SFr=l(),uE=a("li"),I5e=a("strong"),RFr=o("rembert"),PFr=o(" \u2014 "),EK=a("a"),BFr=o("RemBertForSequenceClassification"),IFr=o(" (RemBERT model)"),NFr=l(),pE=a("li"),N5e=a("strong"),qFr=o("roberta"),jFr=o(" \u2014 "),CK=a("a"),DFr=o("RobertaForSequenceClassification"),GFr=o(" (RoBERTa model)"),OFr=l(),_E=a("li"),q5e=a("strong"),VFr=o("roc_bert"),XFr=o(" \u2014 "),wK=a("a"),zFr=o("RoCBertForSequenceClassification"),QFr=o(" (RoCBert model)"),WFr=l(),bE=a("li"),j5e=a("strong"),UFr=o("roformer"),HFr=o(" \u2014 "),AK=a("a"),JFr=o("RoFormerForSequenceClassification"),YFr=o(" (RoFormer model)"),ZFr=l(),vE=a("li"),D5e=a("strong"),KFr=o("squeezebert"),eTr=o(" \u2014 "),LK=a("a"),oTr=o("SqueezeBertForSequenceClassification"),rTr=o(" (SqueezeBERT model)"),tTr=l(),FE=a("li"),G5e=a("strong"),aTr=o("tapas"),nTr=o(" \u2014 "),yK=a("a"),sTr=o("TapasForSequenceClassification"),lTr=o(" (TAPAS model)"),iTr=l(),TE=a("li"),O5e=a("strong"),dTr=o("transfo-xl"),mTr=o(" \u2014 "),xK=a("a"),cTr=o("TransfoXLForSequenceClassification"),fTr=o(" (Transformer-XL model)"),gTr=l(),ME=a("li"),V5e=a("strong"),hTr=o("xlm"),uTr=o(" \u2014 "),$K=a("a"),pTr=o("XLMForSequenceClassification"),_Tr=o(" (XLM model)"),bTr=l(),EE=a("li"),X5e=a("strong"),vTr=o("xlm-roberta"),FTr=o(" \u2014 "),kK=a("a"),TTr=o("XLMRobertaForSequenceClassification"),MTr=o(" (XLM-RoBERTa model)"),ETr=l(),CE=a("li"),z5e=a("strong"),CTr=o("xlm-roberta-xl"),wTr=o(" \u2014 "),SK=a("a"),ATr=o("XLMRobertaXLForSequenceClassification"),LTr=o(" (XLM-RoBERTa-XL model)"),yTr=l(),wE=a("li"),Q5e=a("strong"),xTr=o("xlnet"),$Tr=o(" \u2014 "),RK=a("a"),kTr=o("XLNetForSequenceClassification"),STr=o(" (XLNet model)"),RTr=l(),AE=a("li"),W5e=a("strong"),PTr=o("yoso"),BTr=o(" \u2014 "),PK=a("a"),ITr=o("YosoForSequenceClassification"),NTr=o(" (YOSO model)"),qTr=l(),LE=a("p"),jTr=o("The model is set in evaluation mode by default using "),U5e=a("code"),DTr=o("model.eval()"),GTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H5e=a("code"),OTr=o("model.train()"),VTr=l(),F(yE.$$.fragment),Zio=l(),dm=a("h2"),xE=a("a"),J5e=a("span"),F(GS.$$.fragment),XTr=l(),Y5e=a("span"),zTr=o("AutoModelForMultipleChoice"),Kio=l(),Wo=a("div"),F(OS.$$.fragment),QTr=l(),mm=a("p"),WTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BK=a("a"),UTr=o("from_pretrained()"),HTr=o(" class method or the "),IK=a("a"),JTr=o("from_config()"),YTr=o(` class
method.`),ZTr=l(),VS=a("p"),KTr=o("This class cannot be instantiated directly using "),Z5e=a("code"),eMr=o("__init__()"),oMr=o(" (throws an error)."),rMr=l(),Rt=a("div"),F(XS.$$.fragment),tMr=l(),K5e=a("p"),aMr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nMr=l(),cm=a("p"),sMr=o(`Note:
Loading a model from its configuration file does `),e0e=a("strong"),lMr=o("not"),iMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=a("a"),dMr=o("from_pretrained()"),mMr=o(" to load the model weights."),cMr=l(),F($E.$$.fragment),fMr=l(),co=a("div"),F(zS.$$.fragment),gMr=l(),o0e=a("p"),hMr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uMr=l(),Fn=a("p"),pMr=o("The model class to instantiate is selected based on the "),r0e=a("code"),_Mr=o("model_type"),bMr=o(` property of the config object (either
passed as an argument or loaded from `),t0e=a("code"),vMr=o("pretrained_model_name_or_path"),FMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a0e=a("code"),TMr=o("pretrained_model_name_or_path"),MMr=o(":"),EMr=l(),K=a("ul"),kE=a("li"),n0e=a("strong"),CMr=o("albert"),wMr=o(" \u2014 "),qK=a("a"),AMr=o("AlbertForMultipleChoice"),LMr=o(" (ALBERT model)"),yMr=l(),SE=a("li"),s0e=a("strong"),xMr=o("bert"),$Mr=o(" \u2014 "),jK=a("a"),kMr=o("BertForMultipleChoice"),SMr=o(" (BERT model)"),RMr=l(),RE=a("li"),l0e=a("strong"),PMr=o("big_bird"),BMr=o(" \u2014 "),DK=a("a"),IMr=o("BigBirdForMultipleChoice"),NMr=o(" (BigBird model)"),qMr=l(),PE=a("li"),i0e=a("strong"),jMr=o("camembert"),DMr=o(" \u2014 "),GK=a("a"),GMr=o("CamembertForMultipleChoice"),OMr=o(" (CamemBERT model)"),VMr=l(),BE=a("li"),d0e=a("strong"),XMr=o("canine"),zMr=o(" \u2014 "),OK=a("a"),QMr=o("CanineForMultipleChoice"),WMr=o(" (CANINE model)"),UMr=l(),IE=a("li"),m0e=a("strong"),HMr=o("convbert"),JMr=o(" \u2014 "),VK=a("a"),YMr=o("ConvBertForMultipleChoice"),ZMr=o(" (ConvBERT model)"),KMr=l(),NE=a("li"),c0e=a("strong"),eEr=o("data2vec-text"),oEr=o(" \u2014 "),XK=a("a"),rEr=o("Data2VecTextForMultipleChoice"),tEr=o(" (Data2VecText model)"),aEr=l(),qE=a("li"),f0e=a("strong"),nEr=o("deberta-v2"),sEr=o(" \u2014 "),zK=a("a"),lEr=o("DebertaV2ForMultipleChoice"),iEr=o(" (DeBERTa-v2 model)"),dEr=l(),jE=a("li"),g0e=a("strong"),mEr=o("distilbert"),cEr=o(" \u2014 "),QK=a("a"),fEr=o("DistilBertForMultipleChoice"),gEr=o(" (DistilBERT model)"),hEr=l(),DE=a("li"),h0e=a("strong"),uEr=o("electra"),pEr=o(" \u2014 "),WK=a("a"),_Er=o("ElectraForMultipleChoice"),bEr=o(" (ELECTRA model)"),vEr=l(),GE=a("li"),u0e=a("strong"),FEr=o("ernie"),TEr=o(" \u2014 "),UK=a("a"),MEr=o("ErnieForMultipleChoice"),EEr=o(" (ERNIE model)"),CEr=l(),OE=a("li"),p0e=a("strong"),wEr=o("flaubert"),AEr=o(" \u2014 "),HK=a("a"),LEr=o("FlaubertForMultipleChoice"),yEr=o(" (FlauBERT model)"),xEr=l(),VE=a("li"),_0e=a("strong"),$Er=o("fnet"),kEr=o(" \u2014 "),JK=a("a"),SEr=o("FNetForMultipleChoice"),REr=o(" (FNet model)"),PEr=l(),XE=a("li"),b0e=a("strong"),BEr=o("funnel"),IEr=o(" \u2014 "),YK=a("a"),NEr=o("FunnelForMultipleChoice"),qEr=o(" (Funnel Transformer model)"),jEr=l(),zE=a("li"),v0e=a("strong"),DEr=o("ibert"),GEr=o(" \u2014 "),ZK=a("a"),OEr=o("IBertForMultipleChoice"),VEr=o(" (I-BERT model)"),XEr=l(),QE=a("li"),F0e=a("strong"),zEr=o("longformer"),QEr=o(" \u2014 "),KK=a("a"),WEr=o("LongformerForMultipleChoice"),UEr=o(" (Longformer model)"),HEr=l(),WE=a("li"),T0e=a("strong"),JEr=o("luke"),YEr=o(" \u2014 "),eee=a("a"),ZEr=o("LukeForMultipleChoice"),KEr=o(" (LUKE model)"),e4r=l(),UE=a("li"),M0e=a("strong"),o4r=o("megatron-bert"),r4r=o(" \u2014 "),oee=a("a"),t4r=o("MegatronBertForMultipleChoice"),a4r=o(" (Megatron-BERT model)"),n4r=l(),HE=a("li"),E0e=a("strong"),s4r=o("mobilebert"),l4r=o(" \u2014 "),ree=a("a"),i4r=o("MobileBertForMultipleChoice"),d4r=o(" (MobileBERT model)"),m4r=l(),JE=a("li"),C0e=a("strong"),c4r=o("mpnet"),f4r=o(" \u2014 "),tee=a("a"),g4r=o("MPNetForMultipleChoice"),h4r=o(" (MPNet model)"),u4r=l(),YE=a("li"),w0e=a("strong"),p4r=o("nezha"),_4r=o(" \u2014 "),aee=a("a"),b4r=o("NezhaForMultipleChoice"),v4r=o(" (Nezha model)"),F4r=l(),ZE=a("li"),A0e=a("strong"),T4r=o("nystromformer"),M4r=o(" \u2014 "),nee=a("a"),E4r=o("NystromformerForMultipleChoice"),C4r=o(" (Nystr\xF6mformer model)"),w4r=l(),KE=a("li"),L0e=a("strong"),A4r=o("qdqbert"),L4r=o(" \u2014 "),see=a("a"),y4r=o("QDQBertForMultipleChoice"),x4r=o(" (QDQBert model)"),$4r=l(),e4=a("li"),y0e=a("strong"),k4r=o("rembert"),S4r=o(" \u2014 "),lee=a("a"),R4r=o("RemBertForMultipleChoice"),P4r=o(" (RemBERT model)"),B4r=l(),o4=a("li"),x0e=a("strong"),I4r=o("roberta"),N4r=o(" \u2014 "),iee=a("a"),q4r=o("RobertaForMultipleChoice"),j4r=o(" (RoBERTa model)"),D4r=l(),r4=a("li"),$0e=a("strong"),G4r=o("roc_bert"),O4r=o(" \u2014 "),dee=a("a"),V4r=o("RoCBertForMultipleChoice"),X4r=o(" (RoCBert model)"),z4r=l(),t4=a("li"),k0e=a("strong"),Q4r=o("roformer"),W4r=o(" \u2014 "),mee=a("a"),U4r=o("RoFormerForMultipleChoice"),H4r=o(" (RoFormer model)"),J4r=l(),a4=a("li"),S0e=a("strong"),Y4r=o("squeezebert"),Z4r=o(" \u2014 "),cee=a("a"),K4r=o("SqueezeBertForMultipleChoice"),eCr=o(" (SqueezeBERT model)"),oCr=l(),n4=a("li"),R0e=a("strong"),rCr=o("xlm"),tCr=o(" \u2014 "),fee=a("a"),aCr=o("XLMForMultipleChoice"),nCr=o(" (XLM model)"),sCr=l(),s4=a("li"),P0e=a("strong"),lCr=o("xlm-roberta"),iCr=o(" \u2014 "),gee=a("a"),dCr=o("XLMRobertaForMultipleChoice"),mCr=o(" (XLM-RoBERTa model)"),cCr=l(),l4=a("li"),B0e=a("strong"),fCr=o("xlm-roberta-xl"),gCr=o(" \u2014 "),hee=a("a"),hCr=o("XLMRobertaXLForMultipleChoice"),uCr=o(" (XLM-RoBERTa-XL model)"),pCr=l(),i4=a("li"),I0e=a("strong"),_Cr=o("xlnet"),bCr=o(" \u2014 "),uee=a("a"),vCr=o("XLNetForMultipleChoice"),FCr=o(" (XLNet model)"),TCr=l(),d4=a("li"),N0e=a("strong"),MCr=o("yoso"),ECr=o(" \u2014 "),pee=a("a"),CCr=o("YosoForMultipleChoice"),wCr=o(" (YOSO model)"),ACr=l(),m4=a("p"),LCr=o("The model is set in evaluation mode by default using "),q0e=a("code"),yCr=o("model.eval()"),xCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j0e=a("code"),$Cr=o("model.train()"),kCr=l(),F(c4.$$.fragment),edo=l(),fm=a("h2"),f4=a("a"),D0e=a("span"),F(QS.$$.fragment),SCr=l(),G0e=a("span"),RCr=o("AutoModelForNextSentencePrediction"),odo=l(),Uo=a("div"),F(WS.$$.fragment),PCr=l(),gm=a("p"),BCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_ee=a("a"),ICr=o("from_pretrained()"),NCr=o(" class method or the "),bee=a("a"),qCr=o("from_config()"),jCr=o(` class
method.`),DCr=l(),US=a("p"),GCr=o("This class cannot be instantiated directly using "),O0e=a("code"),OCr=o("__init__()"),VCr=o(" (throws an error)."),XCr=l(),Pt=a("div"),F(HS.$$.fragment),zCr=l(),V0e=a("p"),QCr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WCr=l(),hm=a("p"),UCr=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),HCr=o("not"),JCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vee=a("a"),YCr=o("from_pretrained()"),ZCr=o(" to load the model weights."),KCr=l(),F(g4.$$.fragment),e3r=l(),fo=a("div"),F(JS.$$.fragment),o3r=l(),z0e=a("p"),r3r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),t3r=l(),Tn=a("p"),a3r=o("The model class to instantiate is selected based on the "),Q0e=a("code"),n3r=o("model_type"),s3r=o(` property of the config object (either
passed as an argument or loaded from `),W0e=a("code"),l3r=o("pretrained_model_name_or_path"),i3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=a("code"),d3r=o("pretrained_model_name_or_path"),m3r=o(":"),c3r=l(),Ye=a("ul"),h4=a("li"),H0e=a("strong"),f3r=o("bert"),g3r=o(" \u2014 "),Fee=a("a"),h3r=o("BertForNextSentencePrediction"),u3r=o(" (BERT model)"),p3r=l(),u4=a("li"),J0e=a("strong"),_3r=o("ernie"),b3r=o(" \u2014 "),Tee=a("a"),v3r=o("ErnieForNextSentencePrediction"),F3r=o(" (ERNIE model)"),T3r=l(),p4=a("li"),Y0e=a("strong"),M3r=o("fnet"),E3r=o(" \u2014 "),Mee=a("a"),C3r=o("FNetForNextSentencePrediction"),w3r=o(" (FNet model)"),A3r=l(),_4=a("li"),Z0e=a("strong"),L3r=o("megatron-bert"),y3r=o(" \u2014 "),Eee=a("a"),x3r=o("MegatronBertForNextSentencePrediction"),$3r=o(" (Megatron-BERT model)"),k3r=l(),b4=a("li"),K0e=a("strong"),S3r=o("mobilebert"),R3r=o(" \u2014 "),Cee=a("a"),P3r=o("MobileBertForNextSentencePrediction"),B3r=o(" (MobileBERT model)"),I3r=l(),v4=a("li"),ewe=a("strong"),N3r=o("nezha"),q3r=o(" \u2014 "),wee=a("a"),j3r=o("NezhaForNextSentencePrediction"),D3r=o(" (Nezha model)"),G3r=l(),F4=a("li"),owe=a("strong"),O3r=o("qdqbert"),V3r=o(" \u2014 "),Aee=a("a"),X3r=o("QDQBertForNextSentencePrediction"),z3r=o(" (QDQBert model)"),Q3r=l(),T4=a("p"),W3r=o("The model is set in evaluation mode by default using "),rwe=a("code"),U3r=o("model.eval()"),H3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),twe=a("code"),J3r=o("model.train()"),Y3r=l(),F(M4.$$.fragment),rdo=l(),um=a("h2"),E4=a("a"),awe=a("span"),F(YS.$$.fragment),Z3r=l(),nwe=a("span"),K3r=o("AutoModelForTokenClassification"),tdo=l(),Ho=a("div"),F(ZS.$$.fragment),e5r=l(),pm=a("p"),o5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Lee=a("a"),r5r=o("from_pretrained()"),t5r=o(" class method or the "),yee=a("a"),a5r=o("from_config()"),n5r=o(` class
method.`),s5r=l(),KS=a("p"),l5r=o("This class cannot be instantiated directly using "),swe=a("code"),i5r=o("__init__()"),d5r=o(" (throws an error)."),m5r=l(),Bt=a("div"),F(eR.$$.fragment),c5r=l(),lwe=a("p"),f5r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),g5r=l(),_m=a("p"),h5r=o(`Note:
Loading a model from its configuration file does `),iwe=a("strong"),u5r=o("not"),p5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=a("a"),_5r=o("from_pretrained()"),b5r=o(" to load the model weights."),v5r=l(),F(C4.$$.fragment),F5r=l(),go=a("div"),F(oR.$$.fragment),T5r=l(),dwe=a("p"),M5r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),E5r=l(),Mn=a("p"),C5r=o("The model class to instantiate is selected based on the "),mwe=a("code"),w5r=o("model_type"),A5r=o(` property of the config object (either
passed as an argument or loaded from `),cwe=a("code"),L5r=o("pretrained_model_name_or_path"),y5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fwe=a("code"),x5r=o("pretrained_model_name_or_path"),$5r=o(":"),k5r=l(),U=a("ul"),w4=a("li"),gwe=a("strong"),S5r=o("albert"),R5r=o(" \u2014 "),$ee=a("a"),P5r=o("AlbertForTokenClassification"),B5r=o(" (ALBERT model)"),I5r=l(),A4=a("li"),hwe=a("strong"),N5r=o("bert"),q5r=o(" \u2014 "),kee=a("a"),j5r=o("BertForTokenClassification"),D5r=o(" (BERT model)"),G5r=l(),L4=a("li"),uwe=a("strong"),O5r=o("big_bird"),V5r=o(" \u2014 "),See=a("a"),X5r=o("BigBirdForTokenClassification"),z5r=o(" (BigBird model)"),Q5r=l(),y4=a("li"),pwe=a("strong"),W5r=o("bloom"),U5r=o(" \u2014 "),Ree=a("a"),H5r=o("BloomForTokenClassification"),J5r=o(" (BLOOM model)"),Y5r=l(),x4=a("li"),_we=a("strong"),Z5r=o("camembert"),K5r=o(" \u2014 "),Pee=a("a"),e0r=o("CamembertForTokenClassification"),o0r=o(" (CamemBERT model)"),r0r=l(),$4=a("li"),bwe=a("strong"),t0r=o("canine"),a0r=o(" \u2014 "),Bee=a("a"),n0r=o("CanineForTokenClassification"),s0r=o(" (CANINE model)"),l0r=l(),k4=a("li"),vwe=a("strong"),i0r=o("convbert"),d0r=o(" \u2014 "),Iee=a("a"),m0r=o("ConvBertForTokenClassification"),c0r=o(" (ConvBERT model)"),f0r=l(),S4=a("li"),Fwe=a("strong"),g0r=o("data2vec-text"),h0r=o(" \u2014 "),Nee=a("a"),u0r=o("Data2VecTextForTokenClassification"),p0r=o(" (Data2VecText model)"),_0r=l(),R4=a("li"),Twe=a("strong"),b0r=o("deberta"),v0r=o(" \u2014 "),qee=a("a"),F0r=o("DebertaForTokenClassification"),T0r=o(" (DeBERTa model)"),M0r=l(),P4=a("li"),Mwe=a("strong"),E0r=o("deberta-v2"),C0r=o(" \u2014 "),jee=a("a"),w0r=o("DebertaV2ForTokenClassification"),A0r=o(" (DeBERTa-v2 model)"),L0r=l(),B4=a("li"),Ewe=a("strong"),y0r=o("distilbert"),x0r=o(" \u2014 "),Dee=a("a"),$0r=o("DistilBertForTokenClassification"),k0r=o(" (DistilBERT model)"),S0r=l(),I4=a("li"),Cwe=a("strong"),R0r=o("electra"),P0r=o(" \u2014 "),Gee=a("a"),B0r=o("ElectraForTokenClassification"),I0r=o(" (ELECTRA model)"),N0r=l(),N4=a("li"),wwe=a("strong"),q0r=o("ernie"),j0r=o(" \u2014 "),Oee=a("a"),D0r=o("ErnieForTokenClassification"),G0r=o(" (ERNIE model)"),O0r=l(),q4=a("li"),Awe=a("strong"),V0r=o("esm"),X0r=o(" \u2014 "),Vee=a("a"),z0r=o("EsmForTokenClassification"),Q0r=o(" (ESM model)"),W0r=l(),j4=a("li"),Lwe=a("strong"),U0r=o("flaubert"),H0r=o(" \u2014 "),Xee=a("a"),J0r=o("FlaubertForTokenClassification"),Y0r=o(" (FlauBERT model)"),Z0r=l(),D4=a("li"),ywe=a("strong"),K0r=o("fnet"),ewr=o(" \u2014 "),zee=a("a"),owr=o("FNetForTokenClassification"),rwr=o(" (FNet model)"),twr=l(),G4=a("li"),xwe=a("strong"),awr=o("funnel"),nwr=o(" \u2014 "),Qee=a("a"),swr=o("FunnelForTokenClassification"),lwr=o(" (Funnel Transformer model)"),iwr=l(),O4=a("li"),$we=a("strong"),dwr=o("gpt2"),mwr=o(" \u2014 "),Wee=a("a"),cwr=o("GPT2ForTokenClassification"),fwr=o(" (OpenAI GPT-2 model)"),gwr=l(),V4=a("li"),kwe=a("strong"),hwr=o("ibert"),uwr=o(" \u2014 "),Uee=a("a"),pwr=o("IBertForTokenClassification"),_wr=o(" (I-BERT model)"),bwr=l(),X4=a("li"),Swe=a("strong"),vwr=o("layoutlm"),Fwr=o(" \u2014 "),Hee=a("a"),Twr=o("LayoutLMForTokenClassification"),Mwr=o(" (LayoutLM model)"),Ewr=l(),z4=a("li"),Rwe=a("strong"),Cwr=o("layoutlmv2"),wwr=o(" \u2014 "),Jee=a("a"),Awr=o("LayoutLMv2ForTokenClassification"),Lwr=o(" (LayoutLMv2 model)"),ywr=l(),Q4=a("li"),Pwe=a("strong"),xwr=o("layoutlmv3"),$wr=o(" \u2014 "),Yee=a("a"),kwr=o("LayoutLMv3ForTokenClassification"),Swr=o(" (LayoutLMv3 model)"),Rwr=l(),W4=a("li"),Bwe=a("strong"),Pwr=o("lilt"),Bwr=o(" \u2014 "),Zee=a("a"),Iwr=o("LiltForTokenClassification"),Nwr=o(" (LiLT model)"),qwr=l(),U4=a("li"),Iwe=a("strong"),jwr=o("longformer"),Dwr=o(" \u2014 "),Kee=a("a"),Gwr=o("LongformerForTokenClassification"),Owr=o(" (Longformer model)"),Vwr=l(),H4=a("li"),Nwe=a("strong"),Xwr=o("luke"),zwr=o(" \u2014 "),eoe=a("a"),Qwr=o("LukeForTokenClassification"),Wwr=o(" (LUKE model)"),Uwr=l(),J4=a("li"),qwe=a("strong"),Hwr=o("markuplm"),Jwr=o(" \u2014 "),ooe=a("a"),Ywr=o("MarkupLMForTokenClassification"),Zwr=o(" (MarkupLM model)"),Kwr=l(),Y4=a("li"),jwe=a("strong"),eAr=o("megatron-bert"),oAr=o(" \u2014 "),roe=a("a"),rAr=o("MegatronBertForTokenClassification"),tAr=o(" (Megatron-BERT model)"),aAr=l(),Z4=a("li"),Dwe=a("strong"),nAr=o("mobilebert"),sAr=o(" \u2014 "),toe=a("a"),lAr=o("MobileBertForTokenClassification"),iAr=o(" (MobileBERT model)"),dAr=l(),K4=a("li"),Gwe=a("strong"),mAr=o("mpnet"),cAr=o(" \u2014 "),aoe=a("a"),fAr=o("MPNetForTokenClassification"),gAr=o(" (MPNet model)"),hAr=l(),eC=a("li"),Owe=a("strong"),uAr=o("nezha"),pAr=o(" \u2014 "),noe=a("a"),_Ar=o("NezhaForTokenClassification"),bAr=o(" (Nezha model)"),vAr=l(),oC=a("li"),Vwe=a("strong"),FAr=o("nystromformer"),TAr=o(" \u2014 "),soe=a("a"),MAr=o("NystromformerForTokenClassification"),EAr=o(" (Nystr\xF6mformer model)"),CAr=l(),rC=a("li"),Xwe=a("strong"),wAr=o("qdqbert"),AAr=o(" \u2014 "),loe=a("a"),LAr=o("QDQBertForTokenClassification"),yAr=o(" (QDQBert model)"),xAr=l(),tC=a("li"),zwe=a("strong"),$Ar=o("rembert"),kAr=o(" \u2014 "),ioe=a("a"),SAr=o("RemBertForTokenClassification"),RAr=o(" (RemBERT model)"),PAr=l(),aC=a("li"),Qwe=a("strong"),BAr=o("roberta"),IAr=o(" \u2014 "),doe=a("a"),NAr=o("RobertaForTokenClassification"),qAr=o(" (RoBERTa model)"),jAr=l(),nC=a("li"),Wwe=a("strong"),DAr=o("roc_bert"),GAr=o(" \u2014 "),moe=a("a"),OAr=o("RoCBertForTokenClassification"),VAr=o(" (RoCBert model)"),XAr=l(),sC=a("li"),Uwe=a("strong"),zAr=o("roformer"),QAr=o(" \u2014 "),coe=a("a"),WAr=o("RoFormerForTokenClassification"),UAr=o(" (RoFormer model)"),HAr=l(),lC=a("li"),Hwe=a("strong"),JAr=o("squeezebert"),YAr=o(" \u2014 "),foe=a("a"),ZAr=o("SqueezeBertForTokenClassification"),KAr=o(" (SqueezeBERT model)"),e6r=l(),iC=a("li"),Jwe=a("strong"),o6r=o("xlm"),r6r=o(" \u2014 "),goe=a("a"),t6r=o("XLMForTokenClassification"),a6r=o(" (XLM model)"),n6r=l(),dC=a("li"),Ywe=a("strong"),s6r=o("xlm-roberta"),l6r=o(" \u2014 "),hoe=a("a"),i6r=o("XLMRobertaForTokenClassification"),d6r=o(" (XLM-RoBERTa model)"),m6r=l(),mC=a("li"),Zwe=a("strong"),c6r=o("xlm-roberta-xl"),f6r=o(" \u2014 "),uoe=a("a"),g6r=o("XLMRobertaXLForTokenClassification"),h6r=o(" (XLM-RoBERTa-XL model)"),u6r=l(),cC=a("li"),Kwe=a("strong"),p6r=o("xlnet"),_6r=o(" \u2014 "),poe=a("a"),b6r=o("XLNetForTokenClassification"),v6r=o(" (XLNet model)"),F6r=l(),fC=a("li"),eAe=a("strong"),T6r=o("yoso"),M6r=o(" \u2014 "),_oe=a("a"),E6r=o("YosoForTokenClassification"),C6r=o(" (YOSO model)"),w6r=l(),gC=a("p"),A6r=o("The model is set in evaluation mode by default using "),oAe=a("code"),L6r=o("model.eval()"),y6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rAe=a("code"),x6r=o("model.train()"),$6r=l(),F(hC.$$.fragment),ado=l(),bm=a("h2"),uC=a("a"),tAe=a("span"),F(rR.$$.fragment),k6r=l(),aAe=a("span"),S6r=o("AutoModelForQuestionAnswering"),ndo=l(),Jo=a("div"),F(tR.$$.fragment),R6r=l(),vm=a("p"),P6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),boe=a("a"),B6r=o("from_pretrained()"),I6r=o(" class method or the "),voe=a("a"),N6r=o("from_config()"),q6r=o(` class
method.`),j6r=l(),aR=a("p"),D6r=o("This class cannot be instantiated directly using "),nAe=a("code"),G6r=o("__init__()"),O6r=o(" (throws an error)."),V6r=l(),It=a("div"),F(nR.$$.fragment),X6r=l(),sAe=a("p"),z6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Q6r=l(),Fm=a("p"),W6r=o(`Note:
Loading a model from its configuration file does `),lAe=a("strong"),U6r=o("not"),H6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Foe=a("a"),J6r=o("from_pretrained()"),Y6r=o(" to load the model weights."),Z6r=l(),F(pC.$$.fragment),K6r=l(),ho=a("div"),F(sR.$$.fragment),e7r=l(),iAe=a("p"),o7r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),r7r=l(),En=a("p"),t7r=o("The model class to instantiate is selected based on the "),dAe=a("code"),a7r=o("model_type"),n7r=o(` property of the config object (either
passed as an argument or loaded from `),mAe=a("code"),s7r=o("pretrained_model_name_or_path"),l7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cAe=a("code"),i7r=o("pretrained_model_name_or_path"),d7r=o(":"),m7r=l(),O=a("ul"),_C=a("li"),fAe=a("strong"),c7r=o("albert"),f7r=o(" \u2014 "),Toe=a("a"),g7r=o("AlbertForQuestionAnswering"),h7r=o(" (ALBERT model)"),u7r=l(),bC=a("li"),gAe=a("strong"),p7r=o("bart"),_7r=o(" \u2014 "),Moe=a("a"),b7r=o("BartForQuestionAnswering"),v7r=o(" (BART model)"),F7r=l(),vC=a("li"),hAe=a("strong"),T7r=o("bert"),M7r=o(" \u2014 "),Eoe=a("a"),E7r=o("BertForQuestionAnswering"),C7r=o(" (BERT model)"),w7r=l(),FC=a("li"),uAe=a("strong"),A7r=o("big_bird"),L7r=o(" \u2014 "),Coe=a("a"),y7r=o("BigBirdForQuestionAnswering"),x7r=o(" (BigBird model)"),$7r=l(),TC=a("li"),pAe=a("strong"),k7r=o("bigbird_pegasus"),S7r=o(" \u2014 "),woe=a("a"),R7r=o("BigBirdPegasusForQuestionAnswering"),P7r=o(" (BigBird-Pegasus model)"),B7r=l(),MC=a("li"),_Ae=a("strong"),I7r=o("bloom"),N7r=o(" \u2014 "),Aoe=a("a"),q7r=o("BloomForQuestionAnswering"),j7r=o(" (BLOOM model)"),D7r=l(),EC=a("li"),bAe=a("strong"),G7r=o("camembert"),O7r=o(" \u2014 "),Loe=a("a"),V7r=o("CamembertForQuestionAnswering"),X7r=o(" (CamemBERT model)"),z7r=l(),CC=a("li"),vAe=a("strong"),Q7r=o("canine"),W7r=o(" \u2014 "),yoe=a("a"),U7r=o("CanineForQuestionAnswering"),H7r=o(" (CANINE model)"),J7r=l(),wC=a("li"),FAe=a("strong"),Y7r=o("convbert"),Z7r=o(" \u2014 "),xoe=a("a"),K7r=o("ConvBertForQuestionAnswering"),e8r=o(" (ConvBERT model)"),o8r=l(),AC=a("li"),TAe=a("strong"),r8r=o("data2vec-text"),t8r=o(" \u2014 "),$oe=a("a"),a8r=o("Data2VecTextForQuestionAnswering"),n8r=o(" (Data2VecText model)"),s8r=l(),LC=a("li"),MAe=a("strong"),l8r=o("deberta"),i8r=o(" \u2014 "),koe=a("a"),d8r=o("DebertaForQuestionAnswering"),m8r=o(" (DeBERTa model)"),c8r=l(),yC=a("li"),EAe=a("strong"),f8r=o("deberta-v2"),g8r=o(" \u2014 "),Soe=a("a"),h8r=o("DebertaV2ForQuestionAnswering"),u8r=o(" (DeBERTa-v2 model)"),p8r=l(),xC=a("li"),CAe=a("strong"),_8r=o("distilbert"),b8r=o(" \u2014 "),Roe=a("a"),v8r=o("DistilBertForQuestionAnswering"),F8r=o(" (DistilBERT model)"),T8r=l(),$C=a("li"),wAe=a("strong"),M8r=o("electra"),E8r=o(" \u2014 "),Poe=a("a"),C8r=o("ElectraForQuestionAnswering"),w8r=o(" (ELECTRA model)"),A8r=l(),kC=a("li"),AAe=a("strong"),L8r=o("ernie"),y8r=o(" \u2014 "),Boe=a("a"),x8r=o("ErnieForQuestionAnswering"),$8r=o(" (ERNIE model)"),k8r=l(),SC=a("li"),LAe=a("strong"),S8r=o("flaubert"),R8r=o(" \u2014 "),Ioe=a("a"),P8r=o("FlaubertForQuestionAnsweringSimple"),B8r=o(" (FlauBERT model)"),I8r=l(),RC=a("li"),yAe=a("strong"),N8r=o("fnet"),q8r=o(" \u2014 "),Noe=a("a"),j8r=o("FNetForQuestionAnswering"),D8r=o(" (FNet model)"),G8r=l(),PC=a("li"),xAe=a("strong"),O8r=o("funnel"),V8r=o(" \u2014 "),qoe=a("a"),X8r=o("FunnelForQuestionAnswering"),z8r=o(" (Funnel Transformer model)"),Q8r=l(),BC=a("li"),$Ae=a("strong"),W8r=o("gptj"),U8r=o(" \u2014 "),joe=a("a"),H8r=o("GPTJForQuestionAnswering"),J8r=o(" (GPT-J model)"),Y8r=l(),IC=a("li"),kAe=a("strong"),Z8r=o("ibert"),K8r=o(" \u2014 "),Doe=a("a"),eLr=o("IBertForQuestionAnswering"),oLr=o(" (I-BERT model)"),rLr=l(),NC=a("li"),SAe=a("strong"),tLr=o("layoutlmv2"),aLr=o(" \u2014 "),Goe=a("a"),nLr=o("LayoutLMv2ForQuestionAnswering"),sLr=o(" (LayoutLMv2 model)"),lLr=l(),qC=a("li"),RAe=a("strong"),iLr=o("layoutlmv3"),dLr=o(" \u2014 "),Ooe=a("a"),mLr=o("LayoutLMv3ForQuestionAnswering"),cLr=o(" (LayoutLMv3 model)"),fLr=l(),jC=a("li"),PAe=a("strong"),gLr=o("led"),hLr=o(" \u2014 "),Voe=a("a"),uLr=o("LEDForQuestionAnswering"),pLr=o(" (LED model)"),_Lr=l(),DC=a("li"),BAe=a("strong"),bLr=o("lilt"),vLr=o(" \u2014 "),Xoe=a("a"),FLr=o("LiltForQuestionAnswering"),TLr=o(" (LiLT model)"),MLr=l(),GC=a("li"),IAe=a("strong"),ELr=o("longformer"),CLr=o(" \u2014 "),zoe=a("a"),wLr=o("LongformerForQuestionAnswering"),ALr=o(" (Longformer model)"),LLr=l(),OC=a("li"),NAe=a("strong"),yLr=o("luke"),xLr=o(" \u2014 "),Qoe=a("a"),$Lr=o("LukeForQuestionAnswering"),kLr=o(" (LUKE model)"),SLr=l(),VC=a("li"),qAe=a("strong"),RLr=o("lxmert"),PLr=o(" \u2014 "),Woe=a("a"),BLr=o("LxmertForQuestionAnswering"),ILr=o(" (LXMERT model)"),NLr=l(),XC=a("li"),jAe=a("strong"),qLr=o("markuplm"),jLr=o(" \u2014 "),Uoe=a("a"),DLr=o("MarkupLMForQuestionAnswering"),GLr=o(" (MarkupLM model)"),OLr=l(),zC=a("li"),DAe=a("strong"),VLr=o("mbart"),XLr=o(" \u2014 "),Hoe=a("a"),zLr=o("MBartForQuestionAnswering"),QLr=o(" (mBART model)"),WLr=l(),QC=a("li"),GAe=a("strong"),ULr=o("megatron-bert"),HLr=o(" \u2014 "),Joe=a("a"),JLr=o("MegatronBertForQuestionAnswering"),YLr=o(" (Megatron-BERT model)"),ZLr=l(),WC=a("li"),OAe=a("strong"),KLr=o("mobilebert"),eyr=o(" \u2014 "),Yoe=a("a"),oyr=o("MobileBertForQuestionAnswering"),ryr=o(" (MobileBERT model)"),tyr=l(),UC=a("li"),VAe=a("strong"),ayr=o("mpnet"),nyr=o(" \u2014 "),Zoe=a("a"),syr=o("MPNetForQuestionAnswering"),lyr=o(" (MPNet model)"),iyr=l(),HC=a("li"),XAe=a("strong"),dyr=o("mvp"),myr=o(" \u2014 "),Koe=a("a"),cyr=o("MvpForQuestionAnswering"),fyr=o(" (MVP model)"),gyr=l(),JC=a("li"),zAe=a("strong"),hyr=o("nezha"),uyr=o(" \u2014 "),ere=a("a"),pyr=o("NezhaForQuestionAnswering"),_yr=o(" (Nezha model)"),byr=l(),YC=a("li"),QAe=a("strong"),vyr=o("nystromformer"),Fyr=o(" \u2014 "),ore=a("a"),Tyr=o("NystromformerForQuestionAnswering"),Myr=o(" (Nystr\xF6mformer model)"),Eyr=l(),ZC=a("li"),WAe=a("strong"),Cyr=o("opt"),wyr=o(" \u2014 "),rre=a("a"),Ayr=o("OPTForQuestionAnswering"),Lyr=o(" (OPT model)"),yyr=l(),KC=a("li"),UAe=a("strong"),xyr=o("qdqbert"),$yr=o(" \u2014 "),tre=a("a"),kyr=o("QDQBertForQuestionAnswering"),Syr=o(" (QDQBert model)"),Ryr=l(),e3=a("li"),HAe=a("strong"),Pyr=o("reformer"),Byr=o(" \u2014 "),are=a("a"),Iyr=o("ReformerForQuestionAnswering"),Nyr=o(" (Reformer model)"),qyr=l(),o3=a("li"),JAe=a("strong"),jyr=o("rembert"),Dyr=o(" \u2014 "),nre=a("a"),Gyr=o("RemBertForQuestionAnswering"),Oyr=o(" (RemBERT model)"),Vyr=l(),r3=a("li"),YAe=a("strong"),Xyr=o("roberta"),zyr=o(" \u2014 "),sre=a("a"),Qyr=o("RobertaForQuestionAnswering"),Wyr=o(" (RoBERTa model)"),Uyr=l(),t3=a("li"),ZAe=a("strong"),Hyr=o("roc_bert"),Jyr=o(" \u2014 "),lre=a("a"),Yyr=o("RoCBertForQuestionAnswering"),Zyr=o(" (RoCBert model)"),Kyr=l(),a3=a("li"),KAe=a("strong"),e9r=o("roformer"),o9r=o(" \u2014 "),ire=a("a"),r9r=o("RoFormerForQuestionAnswering"),t9r=o(" (RoFormer model)"),a9r=l(),n3=a("li"),e6e=a("strong"),n9r=o("splinter"),s9r=o(" \u2014 "),dre=a("a"),l9r=o("SplinterForQuestionAnswering"),i9r=o(" (Splinter model)"),d9r=l(),s3=a("li"),o6e=a("strong"),m9r=o("squeezebert"),c9r=o(" \u2014 "),mre=a("a"),f9r=o("SqueezeBertForQuestionAnswering"),g9r=o(" (SqueezeBERT model)"),h9r=l(),l3=a("li"),r6e=a("strong"),u9r=o("xlm"),p9r=o(" \u2014 "),cre=a("a"),_9r=o("XLMForQuestionAnsweringSimple"),b9r=o(" (XLM model)"),v9r=l(),i3=a("li"),t6e=a("strong"),F9r=o("xlm-roberta"),T9r=o(" \u2014 "),fre=a("a"),M9r=o("XLMRobertaForQuestionAnswering"),E9r=o(" (XLM-RoBERTa model)"),C9r=l(),d3=a("li"),a6e=a("strong"),w9r=o("xlm-roberta-xl"),A9r=o(" \u2014 "),gre=a("a"),L9r=o("XLMRobertaXLForQuestionAnswering"),y9r=o(" (XLM-RoBERTa-XL model)"),x9r=l(),m3=a("li"),n6e=a("strong"),$9r=o("xlnet"),k9r=o(" \u2014 "),hre=a("a"),S9r=o("XLNetForQuestionAnsweringSimple"),R9r=o(" (XLNet model)"),P9r=l(),c3=a("li"),s6e=a("strong"),B9r=o("yoso"),I9r=o(" \u2014 "),ure=a("a"),N9r=o("YosoForQuestionAnswering"),q9r=o(" (YOSO model)"),j9r=l(),f3=a("p"),D9r=o("The model is set in evaluation mode by default using "),l6e=a("code"),G9r=o("model.eval()"),O9r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i6e=a("code"),V9r=o("model.train()"),X9r=l(),F(g3.$$.fragment),sdo=l(),Tm=a("h2"),h3=a("a"),d6e=a("span"),F(lR.$$.fragment),z9r=l(),m6e=a("span"),Q9r=o("AutoModelForTableQuestionAnswering"),ldo=l(),Yo=a("div"),F(iR.$$.fragment),W9r=l(),Mm=a("p"),U9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pre=a("a"),H9r=o("from_pretrained()"),J9r=o(" class method or the "),_re=a("a"),Y9r=o("from_config()"),Z9r=o(` class
method.`),K9r=l(),dR=a("p"),exr=o("This class cannot be instantiated directly using "),c6e=a("code"),oxr=o("__init__()"),rxr=o(" (throws an error)."),txr=l(),Nt=a("div"),F(mR.$$.fragment),axr=l(),f6e=a("p"),nxr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sxr=l(),Em=a("p"),lxr=o(`Note:
Loading a model from its configuration file does `),g6e=a("strong"),ixr=o("not"),dxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bre=a("a"),mxr=o("from_pretrained()"),cxr=o(" to load the model weights."),fxr=l(),F(u3.$$.fragment),gxr=l(),uo=a("div"),F(cR.$$.fragment),hxr=l(),h6e=a("p"),uxr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pxr=l(),Cn=a("p"),_xr=o("The model class to instantiate is selected based on the "),u6e=a("code"),bxr=o("model_type"),vxr=o(` property of the config object (either
passed as an argument or loaded from `),p6e=a("code"),Fxr=o("pretrained_model_name_or_path"),Txr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=a("code"),Mxr=o("pretrained_model_name_or_path"),Exr=o(":"),Cxr=l(),b6e=a("ul"),p3=a("li"),v6e=a("strong"),wxr=o("tapas"),Axr=o(" \u2014 "),vre=a("a"),Lxr=o("TapasForQuestionAnswering"),yxr=o(" (TAPAS model)"),xxr=l(),_3=a("p"),$xr=o("The model is set in evaluation mode by default using "),F6e=a("code"),kxr=o("model.eval()"),Sxr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T6e=a("code"),Rxr=o("model.train()"),Pxr=l(),F(b3.$$.fragment),ido=l(),Cm=a("h2"),v3=a("a"),M6e=a("span"),F(fR.$$.fragment),Bxr=l(),E6e=a("span"),Ixr=o("AutoModelForDocumentQuestionAnswering"),ddo=l(),Zo=a("div"),F(gR.$$.fragment),Nxr=l(),wm=a("p"),qxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Fre=a("a"),jxr=o("from_pretrained()"),Dxr=o(" class method or the "),Tre=a("a"),Gxr=o("from_config()"),Oxr=o(` class
method.`),Vxr=l(),hR=a("p"),Xxr=o("This class cannot be instantiated directly using "),C6e=a("code"),zxr=o("__init__()"),Qxr=o(" (throws an error)."),Wxr=l(),qt=a("div"),F(uR.$$.fragment),Uxr=l(),w6e=a("p"),Hxr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),Jxr=l(),Am=a("p"),Yxr=o(`Note:
Loading a model from its configuration file does `),A6e=a("strong"),Zxr=o("not"),Kxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=a("a"),e$r=o("from_pretrained()"),o$r=o(" to load the model weights."),r$r=l(),F(F3.$$.fragment),t$r=l(),po=a("div"),F(pR.$$.fragment),a$r=l(),L6e=a("p"),n$r=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),s$r=l(),wn=a("p"),l$r=o("The model class to instantiate is selected based on the "),y6e=a("code"),i$r=o("model_type"),d$r=o(` property of the config object (either
passed as an argument or loaded from `),x6e=a("code"),m$r=o("pretrained_model_name_or_path"),c$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=a("code"),f$r=o("pretrained_model_name_or_path"),g$r=o(":"),h$r=l(),Lm=a("ul"),T3=a("li"),k6e=a("strong"),u$r=o("layoutlm"),p$r=o(" \u2014 "),Ere=a("a"),_$r=o("LayoutLMForQuestionAnswering"),b$r=o(" (LayoutLM model)"),v$r=l(),M3=a("li"),S6e=a("strong"),F$r=o("layoutlmv2"),T$r=o(" \u2014 "),Cre=a("a"),M$r=o("LayoutLMv2ForQuestionAnswering"),E$r=o(" (LayoutLMv2 model)"),C$r=l(),E3=a("li"),R6e=a("strong"),w$r=o("layoutlmv3"),A$r=o(" \u2014 "),wre=a("a"),L$r=o("LayoutLMv3ForQuestionAnswering"),y$r=o(" (LayoutLMv3 model)"),x$r=l(),C3=a("p"),$$r=o("The model is set in evaluation mode by default using "),P6e=a("code"),k$r=o("model.eval()"),S$r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B6e=a("code"),R$r=o("model.train()"),P$r=l(),F(w3.$$.fragment),mdo=l(),ym=a("h2"),A3=a("a"),I6e=a("span"),F(_R.$$.fragment),B$r=l(),N6e=a("span"),I$r=o("AutoModelForImageClassification"),cdo=l(),Ko=a("div"),F(bR.$$.fragment),N$r=l(),xm=a("p"),q$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Are=a("a"),j$r=o("from_pretrained()"),D$r=o(" class method or the "),Lre=a("a"),G$r=o("from_config()"),O$r=o(` class
method.`),V$r=l(),vR=a("p"),X$r=o("This class cannot be instantiated directly using "),q6e=a("code"),z$r=o("__init__()"),Q$r=o(" (throws an error)."),W$r=l(),jt=a("div"),F(FR.$$.fragment),U$r=l(),j6e=a("p"),H$r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),J$r=l(),$m=a("p"),Y$r=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),Z$r=o("not"),K$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=a("a"),ekr=o("from_pretrained()"),okr=o(" to load the model weights."),rkr=l(),F(L3.$$.fragment),tkr=l(),_o=a("div"),F(TR.$$.fragment),akr=l(),G6e=a("p"),nkr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),skr=l(),An=a("p"),lkr=o("The model class to instantiate is selected based on the "),O6e=a("code"),ikr=o("model_type"),dkr=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),mkr=o("pretrained_model_name_or_path"),ckr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),fkr=o("pretrained_model_name_or_path"),gkr=o(":"),hkr=l(),Fe=a("ul"),y3=a("li"),z6e=a("strong"),ukr=o("beit"),pkr=o(" \u2014 "),xre=a("a"),_kr=o("BeitForImageClassification"),bkr=o(" (BEiT model)"),vkr=l(),x3=a("li"),Q6e=a("strong"),Fkr=o("convnext"),Tkr=o(" \u2014 "),$re=a("a"),Mkr=o("ConvNextForImageClassification"),Ekr=o(" (ConvNeXT model)"),Ckr=l(),$3=a("li"),W6e=a("strong"),wkr=o("cvt"),Akr=o(" \u2014 "),kre=a("a"),Lkr=o("CvtForImageClassification"),ykr=o(" (CvT model)"),xkr=l(),k3=a("li"),U6e=a("strong"),$kr=o("data2vec-vision"),kkr=o(" \u2014 "),Sre=a("a"),Skr=o("Data2VecVisionForImageClassification"),Rkr=o(" (Data2VecVision model)"),Pkr=l(),jl=a("li"),H6e=a("strong"),Bkr=o("deit"),Ikr=o(" \u2014 "),Rre=a("a"),Nkr=o("DeiTForImageClassification"),qkr=o(" or "),Pre=a("a"),jkr=o("DeiTForImageClassificationWithTeacher"),Dkr=o(" (DeiT model)"),Gkr=l(),S3=a("li"),J6e=a("strong"),Okr=o("imagegpt"),Vkr=o(" \u2014 "),Bre=a("a"),Xkr=o("ImageGPTForImageClassification"),zkr=o(" (ImageGPT model)"),Qkr=l(),Dl=a("li"),Y6e=a("strong"),Wkr=o("levit"),Ukr=o(" \u2014 "),Ire=a("a"),Hkr=o("LevitForImageClassification"),Jkr=o(" or "),Nre=a("a"),Ykr=o("LevitForImageClassificationWithTeacher"),Zkr=o(" (LeViT model)"),Kkr=l(),R3=a("li"),Z6e=a("strong"),eSr=o("mobilenet_v2"),oSr=o(" \u2014 "),qre=a("a"),rSr=o("MobileNetV2ForImageClassification"),tSr=o(" (MobileNetV2 model)"),aSr=l(),P3=a("li"),K6e=a("strong"),nSr=o("mobilevit"),sSr=o(" \u2014 "),jre=a("a"),lSr=o("MobileViTForImageClassification"),iSr=o(" (MobileViT model)"),dSr=l(),Dt=a("li"),e7e=a("strong"),mSr=o("perceiver"),cSr=o(" \u2014 "),Dre=a("a"),fSr=o("PerceiverForImageClassificationLearned"),gSr=o(" or "),Gre=a("a"),hSr=o("PerceiverForImageClassificationFourier"),uSr=o(" or "),Ore=a("a"),pSr=o("PerceiverForImageClassificationConvProcessing"),_Sr=o(" (Perceiver model)"),bSr=l(),B3=a("li"),o7e=a("strong"),vSr=o("poolformer"),FSr=o(" \u2014 "),Vre=a("a"),TSr=o("PoolFormerForImageClassification"),MSr=o(" (PoolFormer model)"),ESr=l(),I3=a("li"),r7e=a("strong"),CSr=o("regnet"),wSr=o(" \u2014 "),Xre=a("a"),ASr=o("RegNetForImageClassification"),LSr=o(" (RegNet model)"),ySr=l(),N3=a("li"),t7e=a("strong"),xSr=o("resnet"),$Sr=o(" \u2014 "),zre=a("a"),kSr=o("ResNetForImageClassification"),SSr=o(" (ResNet model)"),RSr=l(),q3=a("li"),a7e=a("strong"),PSr=o("segformer"),BSr=o(" \u2014 "),Qre=a("a"),ISr=o("SegformerForImageClassification"),NSr=o(" (SegFormer model)"),qSr=l(),j3=a("li"),n7e=a("strong"),jSr=o("swin"),DSr=o(" \u2014 "),Wre=a("a"),GSr=o("SwinForImageClassification"),OSr=o(" (Swin Transformer model)"),VSr=l(),D3=a("li"),s7e=a("strong"),XSr=o("swinv2"),zSr=o(" \u2014 "),Ure=a("a"),QSr=o("Swinv2ForImageClassification"),WSr=o(" (Swin Transformer V2 model)"),USr=l(),G3=a("li"),l7e=a("strong"),HSr=o("van"),JSr=o(" \u2014 "),Hre=a("a"),YSr=o("VanForImageClassification"),ZSr=o(" (VAN model)"),KSr=l(),O3=a("li"),i7e=a("strong"),eRr=o("vit"),oRr=o(" \u2014 "),Jre=a("a"),rRr=o("ViTForImageClassification"),tRr=o(" (ViT model)"),aRr=l(),V3=a("li"),d7e=a("strong"),nRr=o("vit_msn"),sRr=o(" \u2014 "),Yre=a("a"),lRr=o("ViTMSNForImageClassification"),iRr=o(" (ViTMSN model)"),dRr=l(),X3=a("p"),mRr=o("The model is set in evaluation mode by default using "),m7e=a("code"),cRr=o("model.eval()"),fRr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c7e=a("code"),gRr=o("model.train()"),hRr=l(),F(z3.$$.fragment),fdo=l(),km=a("h2"),Q3=a("a"),f7e=a("span"),F(MR.$$.fragment),uRr=l(),g7e=a("span"),pRr=o("AutoModelForVideoClassification"),gdo=l(),er=a("div"),F(ER.$$.fragment),_Rr=l(),Sm=a("p"),bRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),Zre=a("a"),vRr=o("from_pretrained()"),FRr=o(" class method or the "),Kre=a("a"),TRr=o("from_config()"),MRr=o(` class
method.`),ERr=l(),CR=a("p"),CRr=o("This class cannot be instantiated directly using "),h7e=a("code"),wRr=o("__init__()"),ARr=o(" (throws an error)."),LRr=l(),Gt=a("div"),F(wR.$$.fragment),yRr=l(),u7e=a("p"),xRr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),$Rr=l(),Rm=a("p"),kRr=o(`Note:
Loading a model from its configuration file does `),p7e=a("strong"),SRr=o("not"),RRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=a("a"),PRr=o("from_pretrained()"),BRr=o(" to load the model weights."),IRr=l(),F(W3.$$.fragment),NRr=l(),bo=a("div"),F(AR.$$.fragment),qRr=l(),_7e=a("p"),jRr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),DRr=l(),Ln=a("p"),GRr=o("The model class to instantiate is selected based on the "),b7e=a("code"),ORr=o("model_type"),VRr=o(` property of the config object (either
passed as an argument or loaded from `),v7e=a("code"),XRr=o("pretrained_model_name_or_path"),zRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=a("code"),QRr=o("pretrained_model_name_or_path"),WRr=o(":"),URr=l(),T7e=a("ul"),U3=a("li"),M7e=a("strong"),HRr=o("videomae"),JRr=o(" \u2014 "),ote=a("a"),YRr=o("VideoMAEForVideoClassification"),ZRr=o(" (VideoMAE model)"),KRr=l(),H3=a("p"),ePr=o("The model is set in evaluation mode by default using "),E7e=a("code"),oPr=o("model.eval()"),rPr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C7e=a("code"),tPr=o("model.train()"),aPr=l(),F(J3.$$.fragment),hdo=l(),Pm=a("h2"),Y3=a("a"),w7e=a("span"),F(LR.$$.fragment),nPr=l(),A7e=a("span"),sPr=o("AutoModelForVision2Seq"),udo=l(),or=a("div"),F(yR.$$.fragment),lPr=l(),Bm=a("p"),iPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rte=a("a"),dPr=o("from_pretrained()"),mPr=o(" class method or the "),tte=a("a"),cPr=o("from_config()"),fPr=o(` class
method.`),gPr=l(),xR=a("p"),hPr=o("This class cannot be instantiated directly using "),L7e=a("code"),uPr=o("__init__()"),pPr=o(" (throws an error)."),_Pr=l(),Ot=a("div"),F($R.$$.fragment),bPr=l(),y7e=a("p"),vPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FPr=l(),Im=a("p"),TPr=o(`Note:
Loading a model from its configuration file does `),x7e=a("strong"),MPr=o("not"),EPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ate=a("a"),CPr=o("from_pretrained()"),wPr=o(" to load the model weights."),APr=l(),F(Z3.$$.fragment),LPr=l(),vo=a("div"),F(kR.$$.fragment),yPr=l(),$7e=a("p"),xPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$Pr=l(),yn=a("p"),kPr=o("The model class to instantiate is selected based on the "),k7e=a("code"),SPr=o("model_type"),RPr=o(` property of the config object (either
passed as an argument or loaded from `),S7e=a("code"),PPr=o("pretrained_model_name_or_path"),BPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=a("code"),IPr=o("pretrained_model_name_or_path"),NPr=o(":"),qPr=l(),P7e=a("ul"),K3=a("li"),B7e=a("strong"),jPr=o("vision-encoder-decoder"),DPr=o(" \u2014 "),nte=a("a"),GPr=o("VisionEncoderDecoderModel"),OPr=o(" (Vision Encoder decoder model)"),VPr=l(),e5=a("p"),XPr=o("The model is set in evaluation mode by default using "),I7e=a("code"),zPr=o("model.eval()"),QPr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N7e=a("code"),WPr=o("model.train()"),UPr=l(),F(o5.$$.fragment),pdo=l(),Nm=a("h2"),r5=a("a"),q7e=a("span"),F(SR.$$.fragment),HPr=l(),j7e=a("span"),JPr=o("AutoModelForVisualQuestionAnswering"),_do=l(),rr=a("div"),F(RR.$$.fragment),YPr=l(),qm=a("p"),ZPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),ste=a("a"),KPr=o("from_pretrained()"),eBr=o(" class method or the "),lte=a("a"),oBr=o("from_config()"),rBr=o(` class
method.`),tBr=l(),PR=a("p"),aBr=o("This class cannot be instantiated directly using "),D7e=a("code"),nBr=o("__init__()"),sBr=o(" (throws an error)."),lBr=l(),Vt=a("div"),F(BR.$$.fragment),iBr=l(),G7e=a("p"),dBr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),mBr=l(),jm=a("p"),cBr=o(`Note:
Loading a model from its configuration file does `),O7e=a("strong"),fBr=o("not"),gBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=a("a"),hBr=o("from_pretrained()"),uBr=o(" to load the model weights."),pBr=l(),F(t5.$$.fragment),_Br=l(),Fo=a("div"),F(IR.$$.fragment),bBr=l(),V7e=a("p"),vBr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),FBr=l(),xn=a("p"),TBr=o("The model class to instantiate is selected based on the "),X7e=a("code"),MBr=o("model_type"),EBr=o(` property of the config object (either
passed as an argument or loaded from `),z7e=a("code"),CBr=o("pretrained_model_name_or_path"),wBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=a("code"),ABr=o("pretrained_model_name_or_path"),LBr=o(":"),yBr=l(),W7e=a("ul"),a5=a("li"),U7e=a("strong"),xBr=o("vilt"),$Br=o(" \u2014 "),dte=a("a"),kBr=o("ViltForQuestionAnswering"),SBr=o(" (ViLT model)"),RBr=l(),n5=a("p"),PBr=o("The model is set in evaluation mode by default using "),H7e=a("code"),BBr=o("model.eval()"),IBr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J7e=a("code"),NBr=o("model.train()"),qBr=l(),F(s5.$$.fragment),bdo=l(),Dm=a("h2"),l5=a("a"),Y7e=a("span"),F(NR.$$.fragment),jBr=l(),Z7e=a("span"),DBr=o("AutoModelForAudioClassification"),vdo=l(),tr=a("div"),F(qR.$$.fragment),GBr=l(),Gm=a("p"),OBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),mte=a("a"),VBr=o("from_pretrained()"),XBr=o(" class method or the "),cte=a("a"),zBr=o("from_config()"),QBr=o(` class
method.`),WBr=l(),jR=a("p"),UBr=o("This class cannot be instantiated directly using "),K7e=a("code"),HBr=o("__init__()"),JBr=o(" (throws an error)."),YBr=l(),Xt=a("div"),F(DR.$$.fragment),ZBr=l(),e8e=a("p"),KBr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),eIr=l(),Om=a("p"),oIr=o(`Note:
Loading a model from its configuration file does `),o8e=a("strong"),rIr=o("not"),tIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fte=a("a"),aIr=o("from_pretrained()"),nIr=o(" to load the model weights."),sIr=l(),F(i5.$$.fragment),lIr=l(),To=a("div"),F(GR.$$.fragment),iIr=l(),r8e=a("p"),dIr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),mIr=l(),$n=a("p"),cIr=o("The model class to instantiate is selected based on the "),t8e=a("code"),fIr=o("model_type"),gIr=o(` property of the config object (either
passed as an argument or loaded from `),a8e=a("code"),hIr=o("pretrained_model_name_or_path"),uIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n8e=a("code"),pIr=o("pretrained_model_name_or_path"),_Ir=o(":"),bIr=l(),Ne=a("ul"),d5=a("li"),s8e=a("strong"),vIr=o("data2vec-audio"),FIr=o(" \u2014 "),gte=a("a"),TIr=o("Data2VecAudioForSequenceClassification"),MIr=o(" (Data2VecAudio model)"),EIr=l(),m5=a("li"),l8e=a("strong"),CIr=o("hubert"),wIr=o(" \u2014 "),hte=a("a"),AIr=o("HubertForSequenceClassification"),LIr=o(" (Hubert model)"),yIr=l(),c5=a("li"),i8e=a("strong"),xIr=o("sew"),$Ir=o(" \u2014 "),ute=a("a"),kIr=o("SEWForSequenceClassification"),SIr=o(" (SEW model)"),RIr=l(),f5=a("li"),d8e=a("strong"),PIr=o("sew-d"),BIr=o(" \u2014 "),pte=a("a"),IIr=o("SEWDForSequenceClassification"),NIr=o(" (SEW-D model)"),qIr=l(),g5=a("li"),m8e=a("strong"),jIr=o("unispeech"),DIr=o(" \u2014 "),_te=a("a"),GIr=o("UniSpeechForSequenceClassification"),OIr=o(" (UniSpeech model)"),VIr=l(),h5=a("li"),c8e=a("strong"),XIr=o("unispeech-sat"),zIr=o(" \u2014 "),bte=a("a"),QIr=o("UniSpeechSatForSequenceClassification"),WIr=o(" (UniSpeechSat model)"),UIr=l(),u5=a("li"),f8e=a("strong"),HIr=o("wav2vec2"),JIr=o(" \u2014 "),vte=a("a"),YIr=o("Wav2Vec2ForSequenceClassification"),ZIr=o(" (Wav2Vec2 model)"),KIr=l(),p5=a("li"),g8e=a("strong"),eNr=o("wav2vec2-conformer"),oNr=o(" \u2014 "),Fte=a("a"),rNr=o("Wav2Vec2ConformerForSequenceClassification"),tNr=o(" (Wav2Vec2-Conformer model)"),aNr=l(),_5=a("li"),h8e=a("strong"),nNr=o("wavlm"),sNr=o(" \u2014 "),Tte=a("a"),lNr=o("WavLMForSequenceClassification"),iNr=o(" (WavLM model)"),dNr=l(),b5=a("p"),mNr=o("The model is set in evaluation mode by default using "),u8e=a("code"),cNr=o("model.eval()"),fNr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p8e=a("code"),gNr=o("model.train()"),hNr=l(),F(v5.$$.fragment),Fdo=l(),Vm=a("h2"),F5=a("a"),_8e=a("span"),F(OR.$$.fragment),uNr=l(),b8e=a("span"),pNr=o("AutoModelForAudioFrameClassification"),Tdo=l(),ar=a("div"),F(VR.$$.fragment),_Nr=l(),Xm=a("p"),bNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Mte=a("a"),vNr=o("from_pretrained()"),FNr=o(" class method or the "),Ete=a("a"),TNr=o("from_config()"),MNr=o(` class
method.`),ENr=l(),XR=a("p"),CNr=o("This class cannot be instantiated directly using "),v8e=a("code"),wNr=o("__init__()"),ANr=o(" (throws an error)."),LNr=l(),zt=a("div"),F(zR.$$.fragment),yNr=l(),F8e=a("p"),xNr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$Nr=l(),zm=a("p"),kNr=o(`Note:
Loading a model from its configuration file does `),T8e=a("strong"),SNr=o("not"),RNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cte=a("a"),PNr=o("from_pretrained()"),BNr=o(" to load the model weights."),INr=l(),F(T5.$$.fragment),NNr=l(),Mo=a("div"),F(QR.$$.fragment),qNr=l(),M8e=a("p"),jNr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),DNr=l(),kn=a("p"),GNr=o("The model class to instantiate is selected based on the "),E8e=a("code"),ONr=o("model_type"),VNr=o(` property of the config object (either
passed as an argument or loaded from `),C8e=a("code"),XNr=o("pretrained_model_name_or_path"),zNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=a("code"),QNr=o("pretrained_model_name_or_path"),WNr=o(":"),UNr=l(),Ft=a("ul"),M5=a("li"),A8e=a("strong"),HNr=o("data2vec-audio"),JNr=o(" \u2014 "),wte=a("a"),YNr=o("Data2VecAudioForAudioFrameClassification"),ZNr=o(" (Data2VecAudio model)"),KNr=l(),E5=a("li"),L8e=a("strong"),eqr=o("unispeech-sat"),oqr=o(" \u2014 "),Ate=a("a"),rqr=o("UniSpeechSatForAudioFrameClassification"),tqr=o(" (UniSpeechSat model)"),aqr=l(),C5=a("li"),y8e=a("strong"),nqr=o("wav2vec2"),sqr=o(" \u2014 "),Lte=a("a"),lqr=o("Wav2Vec2ForAudioFrameClassification"),iqr=o(" (Wav2Vec2 model)"),dqr=l(),w5=a("li"),x8e=a("strong"),mqr=o("wav2vec2-conformer"),cqr=o(" \u2014 "),yte=a("a"),fqr=o("Wav2Vec2ConformerForAudioFrameClassification"),gqr=o(" (Wav2Vec2-Conformer model)"),hqr=l(),A5=a("li"),$8e=a("strong"),uqr=o("wavlm"),pqr=o(" \u2014 "),xte=a("a"),_qr=o("WavLMForAudioFrameClassification"),bqr=o(" (WavLM model)"),vqr=l(),L5=a("p"),Fqr=o("The model is set in evaluation mode by default using "),k8e=a("code"),Tqr=o("model.eval()"),Mqr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S8e=a("code"),Eqr=o("model.train()"),Cqr=l(),F(y5.$$.fragment),Mdo=l(),Qm=a("h2"),x5=a("a"),R8e=a("span"),F(WR.$$.fragment),wqr=l(),P8e=a("span"),Aqr=o("AutoModelForCTC"),Edo=l(),nr=a("div"),F(UR.$$.fragment),Lqr=l(),Wm=a("p"),yqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),$te=a("a"),xqr=o("from_pretrained()"),$qr=o(" class method or the "),kte=a("a"),kqr=o("from_config()"),Sqr=o(` class
method.`),Rqr=l(),HR=a("p"),Pqr=o("This class cannot be instantiated directly using "),B8e=a("code"),Bqr=o("__init__()"),Iqr=o(" (throws an error)."),Nqr=l(),Qt=a("div"),F(JR.$$.fragment),qqr=l(),I8e=a("p"),jqr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Dqr=l(),Um=a("p"),Gqr=o(`Note:
Loading a model from its configuration file does `),N8e=a("strong"),Oqr=o("not"),Vqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ste=a("a"),Xqr=o("from_pretrained()"),zqr=o(" to load the model weights."),Qqr=l(),F($5.$$.fragment),Wqr=l(),Eo=a("div"),F(YR.$$.fragment),Uqr=l(),q8e=a("p"),Hqr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Jqr=l(),Sn=a("p"),Yqr=o("The model class to instantiate is selected based on the "),j8e=a("code"),Zqr=o("model_type"),Kqr=o(` property of the config object (either
passed as an argument or loaded from `),D8e=a("code"),ejr=o("pretrained_model_name_or_path"),ojr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G8e=a("code"),rjr=o("pretrained_model_name_or_path"),tjr=o(":"),ajr=l(),xe=a("ul"),k5=a("li"),O8e=a("strong"),njr=o("data2vec-audio"),sjr=o(" \u2014 "),Rte=a("a"),ljr=o("Data2VecAudioForCTC"),ijr=o(" (Data2VecAudio model)"),djr=l(),S5=a("li"),V8e=a("strong"),mjr=o("hubert"),cjr=o(" \u2014 "),Pte=a("a"),fjr=o("HubertForCTC"),gjr=o(" (Hubert model)"),hjr=l(),R5=a("li"),X8e=a("strong"),ujr=o("mctct"),pjr=o(" \u2014 "),Bte=a("a"),_jr=o("MCTCTForCTC"),bjr=o(" (M-CTC-T model)"),vjr=l(),P5=a("li"),z8e=a("strong"),Fjr=o("sew"),Tjr=o(" \u2014 "),Ite=a("a"),Mjr=o("SEWForCTC"),Ejr=o(" (SEW model)"),Cjr=l(),B5=a("li"),Q8e=a("strong"),wjr=o("sew-d"),Ajr=o(" \u2014 "),Nte=a("a"),Ljr=o("SEWDForCTC"),yjr=o(" (SEW-D model)"),xjr=l(),I5=a("li"),W8e=a("strong"),$jr=o("unispeech"),kjr=o(" \u2014 "),qte=a("a"),Sjr=o("UniSpeechForCTC"),Rjr=o(" (UniSpeech model)"),Pjr=l(),N5=a("li"),U8e=a("strong"),Bjr=o("unispeech-sat"),Ijr=o(" \u2014 "),jte=a("a"),Njr=o("UniSpeechSatForCTC"),qjr=o(" (UniSpeechSat model)"),jjr=l(),q5=a("li"),H8e=a("strong"),Djr=o("wav2vec2"),Gjr=o(" \u2014 "),Dte=a("a"),Ojr=o("Wav2Vec2ForCTC"),Vjr=o(" (Wav2Vec2 model)"),Xjr=l(),j5=a("li"),J8e=a("strong"),zjr=o("wav2vec2-conformer"),Qjr=o(" \u2014 "),Gte=a("a"),Wjr=o("Wav2Vec2ConformerForCTC"),Ujr=o(" (Wav2Vec2-Conformer model)"),Hjr=l(),D5=a("li"),Y8e=a("strong"),Jjr=o("wavlm"),Yjr=o(" \u2014 "),Ote=a("a"),Zjr=o("WavLMForCTC"),Kjr=o(" (WavLM model)"),eDr=l(),G5=a("p"),oDr=o("The model is set in evaluation mode by default using "),Z8e=a("code"),rDr=o("model.eval()"),tDr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K8e=a("code"),aDr=o("model.train()"),nDr=l(),F(O5.$$.fragment),Cdo=l(),Hm=a("h2"),V5=a("a"),eLe=a("span"),F(ZR.$$.fragment),sDr=l(),oLe=a("span"),lDr=o("AutoModelForSpeechSeq2Seq"),wdo=l(),sr=a("div"),F(KR.$$.fragment),iDr=l(),Jm=a("p"),dDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Vte=a("a"),mDr=o("from_pretrained()"),cDr=o(" class method or the "),Xte=a("a"),fDr=o("from_config()"),gDr=o(` class
method.`),hDr=l(),eP=a("p"),uDr=o("This class cannot be instantiated directly using "),rLe=a("code"),pDr=o("__init__()"),_Dr=o(" (throws an error)."),bDr=l(),Wt=a("div"),F(oP.$$.fragment),vDr=l(),tLe=a("p"),FDr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),TDr=l(),Ym=a("p"),MDr=o(`Note:
Loading a model from its configuration file does `),aLe=a("strong"),EDr=o("not"),CDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zte=a("a"),wDr=o("from_pretrained()"),ADr=o(" to load the model weights."),LDr=l(),F(X5.$$.fragment),yDr=l(),Co=a("div"),F(rP.$$.fragment),xDr=l(),nLe=a("p"),$Dr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kDr=l(),Rn=a("p"),SDr=o("The model class to instantiate is selected based on the "),sLe=a("code"),RDr=o("model_type"),PDr=o(` property of the config object (either
passed as an argument or loaded from `),lLe=a("code"),BDr=o("pretrained_model_name_or_path"),IDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iLe=a("code"),NDr=o("pretrained_model_name_or_path"),qDr=o(":"),jDr=l(),Zm=a("ul"),z5=a("li"),dLe=a("strong"),DDr=o("speech-encoder-decoder"),GDr=o(" \u2014 "),Qte=a("a"),ODr=o("SpeechEncoderDecoderModel"),VDr=o(" (Speech Encoder decoder model)"),XDr=l(),Q5=a("li"),mLe=a("strong"),zDr=o("speech_to_text"),QDr=o(" \u2014 "),Wte=a("a"),WDr=o("Speech2TextForConditionalGeneration"),UDr=o(" (Speech2Text model)"),HDr=l(),W5=a("li"),cLe=a("strong"),JDr=o("whisper"),YDr=o(" \u2014 "),Ute=a("a"),ZDr=o("WhisperForConditionalGeneration"),KDr=o(" (Whisper model)"),eGr=l(),U5=a("p"),oGr=o("The model is set in evaluation mode by default using "),fLe=a("code"),rGr=o("model.eval()"),tGr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gLe=a("code"),aGr=o("model.train()"),nGr=l(),F(H5.$$.fragment),Ado=l(),Km=a("h2"),J5=a("a"),hLe=a("span"),F(tP.$$.fragment),sGr=l(),uLe=a("span"),lGr=o("AutoModelForAudioXVector"),Ldo=l(),lr=a("div"),F(aP.$$.fragment),iGr=l(),ec=a("p"),dGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Hte=a("a"),mGr=o("from_pretrained()"),cGr=o(" class method or the "),Jte=a("a"),fGr=o("from_config()"),gGr=o(` class
method.`),hGr=l(),nP=a("p"),uGr=o("This class cannot be instantiated directly using "),pLe=a("code"),pGr=o("__init__()"),_Gr=o(" (throws an error)."),bGr=l(),Ut=a("div"),F(sP.$$.fragment),vGr=l(),_Le=a("p"),FGr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),TGr=l(),oc=a("p"),MGr=o(`Note:
Loading a model from its configuration file does `),bLe=a("strong"),EGr=o("not"),CGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yte=a("a"),wGr=o("from_pretrained()"),AGr=o(" to load the model weights."),LGr=l(),F(Y5.$$.fragment),yGr=l(),wo=a("div"),F(lP.$$.fragment),xGr=l(),vLe=a("p"),$Gr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),kGr=l(),Pn=a("p"),SGr=o("The model class to instantiate is selected based on the "),FLe=a("code"),RGr=o("model_type"),PGr=o(` property of the config object (either
passed as an argument or loaded from `),TLe=a("code"),BGr=o("pretrained_model_name_or_path"),IGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MLe=a("code"),NGr=o("pretrained_model_name_or_path"),qGr=o(":"),jGr=l(),Tt=a("ul"),Z5=a("li"),ELe=a("strong"),DGr=o("data2vec-audio"),GGr=o(" \u2014 "),Zte=a("a"),OGr=o("Data2VecAudioForXVector"),VGr=o(" (Data2VecAudio model)"),XGr=l(),K5=a("li"),CLe=a("strong"),zGr=o("unispeech-sat"),QGr=o(" \u2014 "),Kte=a("a"),WGr=o("UniSpeechSatForXVector"),UGr=o(" (UniSpeechSat model)"),HGr=l(),e0=a("li"),wLe=a("strong"),JGr=o("wav2vec2"),YGr=o(" \u2014 "),eae=a("a"),ZGr=o("Wav2Vec2ForXVector"),KGr=o(" (Wav2Vec2 model)"),eOr=l(),o0=a("li"),ALe=a("strong"),oOr=o("wav2vec2-conformer"),rOr=o(" \u2014 "),oae=a("a"),tOr=o("Wav2Vec2ConformerForXVector"),aOr=o(" (Wav2Vec2-Conformer model)"),nOr=l(),r0=a("li"),LLe=a("strong"),sOr=o("wavlm"),lOr=o(" \u2014 "),rae=a("a"),iOr=o("WavLMForXVector"),dOr=o(" (WavLM model)"),mOr=l(),t0=a("p"),cOr=o("The model is set in evaluation mode by default using "),yLe=a("code"),fOr=o("model.eval()"),gOr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xLe=a("code"),hOr=o("model.train()"),uOr=l(),F(a0.$$.fragment),ydo=l(),rc=a("h2"),n0=a("a"),$Le=a("span"),F(iP.$$.fragment),pOr=l(),kLe=a("span"),_Or=o("AutoModelForMaskedImageModeling"),xdo=l(),ir=a("div"),F(dP.$$.fragment),bOr=l(),tc=a("p"),vOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),tae=a("a"),FOr=o("from_pretrained()"),TOr=o(" class method or the "),aae=a("a"),MOr=o("from_config()"),EOr=o(` class
method.`),COr=l(),mP=a("p"),wOr=o("This class cannot be instantiated directly using "),SLe=a("code"),AOr=o("__init__()"),LOr=o(" (throws an error)."),yOr=l(),Ht=a("div"),F(cP.$$.fragment),xOr=l(),RLe=a("p"),$Or=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),kOr=l(),ac=a("p"),SOr=o(`Note:
Loading a model from its configuration file does `),PLe=a("strong"),ROr=o("not"),POr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nae=a("a"),BOr=o("from_pretrained()"),IOr=o(" to load the model weights."),NOr=l(),F(s0.$$.fragment),qOr=l(),Ao=a("div"),F(fP.$$.fragment),jOr=l(),BLe=a("p"),DOr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),GOr=l(),Bn=a("p"),OOr=o("The model class to instantiate is selected based on the "),ILe=a("code"),VOr=o("model_type"),XOr=o(` property of the config object (either
passed as an argument or loaded from `),NLe=a("code"),zOr=o("pretrained_model_name_or_path"),QOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qLe=a("code"),WOr=o("pretrained_model_name_or_path"),UOr=o(":"),HOr=l(),In=a("ul"),l0=a("li"),jLe=a("strong"),JOr=o("deit"),YOr=o(" \u2014 "),sae=a("a"),ZOr=o("DeiTForMaskedImageModeling"),KOr=o(" (DeiT model)"),eVr=l(),i0=a("li"),DLe=a("strong"),oVr=o("swin"),rVr=o(" \u2014 "),lae=a("a"),tVr=o("SwinForMaskedImageModeling"),aVr=o(" (Swin Transformer model)"),nVr=l(),d0=a("li"),GLe=a("strong"),sVr=o("swinv2"),lVr=o(" \u2014 "),iae=a("a"),iVr=o("Swinv2ForMaskedImageModeling"),dVr=o(" (Swin Transformer V2 model)"),mVr=l(),m0=a("li"),OLe=a("strong"),cVr=o("vit"),fVr=o(" \u2014 "),dae=a("a"),gVr=o("ViTForMaskedImageModeling"),hVr=o(" (ViT model)"),uVr=l(),c0=a("p"),pVr=o("The model is set in evaluation mode by default using "),VLe=a("code"),_Vr=o("model.eval()"),bVr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XLe=a("code"),vVr=o("model.train()"),FVr=l(),F(f0.$$.fragment),$do=l(),nc=a("h2"),g0=a("a"),zLe=a("span"),F(gP.$$.fragment),TVr=l(),QLe=a("span"),MVr=o("AutoModelForObjectDetection"),kdo=l(),dr=a("div"),F(hP.$$.fragment),EVr=l(),sc=a("p"),CVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mae=a("a"),wVr=o("from_pretrained()"),AVr=o(" class method or the "),cae=a("a"),LVr=o("from_config()"),yVr=o(` class
method.`),xVr=l(),uP=a("p"),$Vr=o("This class cannot be instantiated directly using "),WLe=a("code"),kVr=o("__init__()"),SVr=o(" (throws an error)."),RVr=l(),Jt=a("div"),F(pP.$$.fragment),PVr=l(),ULe=a("p"),BVr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),IVr=l(),lc=a("p"),NVr=o(`Note:
Loading a model from its configuration file does `),HLe=a("strong"),qVr=o("not"),jVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fae=a("a"),DVr=o("from_pretrained()"),GVr=o(" to load the model weights."),OVr=l(),F(h0.$$.fragment),VVr=l(),Lo=a("div"),F(_P.$$.fragment),XVr=l(),JLe=a("p"),zVr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),QVr=l(),Nn=a("p"),WVr=o("The model class to instantiate is selected based on the "),YLe=a("code"),UVr=o("model_type"),HVr=o(` property of the config object (either
passed as an argument or loaded from `),ZLe=a("code"),JVr=o("pretrained_model_name_or_path"),YVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KLe=a("code"),ZVr=o("pretrained_model_name_or_path"),KVr=o(":"),eXr=l(),Mt=a("ul"),u0=a("li"),eye=a("strong"),oXr=o("conditional_detr"),rXr=o(" \u2014 "),gae=a("a"),tXr=o("ConditionalDetrForObjectDetection"),aXr=o(" (Conditional DETR model)"),nXr=l(),p0=a("li"),oye=a("strong"),sXr=o("deformable_detr"),lXr=o(" \u2014 "),hae=a("a"),iXr=o("DeformableDetrForObjectDetection"),dXr=o(" (Deformable DETR model)"),mXr=l(),_0=a("li"),rye=a("strong"),cXr=o("detr"),fXr=o(" \u2014 "),uae=a("a"),gXr=o("DetrForObjectDetection"),hXr=o(" (DETR model)"),uXr=l(),b0=a("li"),tye=a("strong"),pXr=o("table-transformer"),_Xr=o(" \u2014 "),pae=a("a"),bXr=o("TableTransformerForObjectDetection"),vXr=o(" (Table Transformer model)"),FXr=l(),v0=a("li"),aye=a("strong"),TXr=o("yolos"),MXr=o(" \u2014 "),_ae=a("a"),EXr=o("YolosForObjectDetection"),CXr=o(" (YOLOS model)"),wXr=l(),F0=a("p"),AXr=o("The model is set in evaluation mode by default using "),nye=a("code"),LXr=o("model.eval()"),yXr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sye=a("code"),xXr=o("model.train()"),$Xr=l(),F(T0.$$.fragment),Sdo=l(),ic=a("h2"),M0=a("a"),lye=a("span"),F(bP.$$.fragment),kXr=l(),iye=a("span"),SXr=o("AutoModelForImageSegmentation"),Rdo=l(),mr=a("div"),F(vP.$$.fragment),RXr=l(),dc=a("p"),PXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),bae=a("a"),BXr=o("from_pretrained()"),IXr=o(" class method or the "),vae=a("a"),NXr=o("from_config()"),qXr=o(` class
method.`),jXr=l(),FP=a("p"),DXr=o("This class cannot be instantiated directly using "),dye=a("code"),GXr=o("__init__()"),OXr=o(" (throws an error)."),VXr=l(),Yt=a("div"),F(TP.$$.fragment),XXr=l(),mye=a("p"),zXr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),QXr=l(),mc=a("p"),WXr=o(`Note:
Loading a model from its configuration file does `),cye=a("strong"),UXr=o("not"),HXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fae=a("a"),JXr=o("from_pretrained()"),YXr=o(" to load the model weights."),ZXr=l(),F(E0.$$.fragment),KXr=l(),yo=a("div"),F(MP.$$.fragment),ezr=l(),fye=a("p"),ozr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),rzr=l(),qn=a("p"),tzr=o("The model class to instantiate is selected based on the "),gye=a("code"),azr=o("model_type"),nzr=o(` property of the config object (either
passed as an argument or loaded from `),hye=a("code"),szr=o("pretrained_model_name_or_path"),lzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uye=a("code"),izr=o("pretrained_model_name_or_path"),dzr=o(":"),mzr=l(),pye=a("ul"),C0=a("li"),_ye=a("strong"),czr=o("detr"),fzr=o(" \u2014 "),Tae=a("a"),gzr=o("DetrForSegmentation"),hzr=o(" (DETR model)"),uzr=l(),w0=a("p"),pzr=o("The model is set in evaluation mode by default using "),bye=a("code"),_zr=o("model.eval()"),bzr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vye=a("code"),vzr=o("model.train()"),Fzr=l(),F(A0.$$.fragment),Pdo=l(),cc=a("h2"),L0=a("a"),Fye=a("span"),F(EP.$$.fragment),Tzr=l(),Tye=a("span"),Mzr=o("AutoModelForSemanticSegmentation"),Bdo=l(),cr=a("div"),F(CP.$$.fragment),Ezr=l(),fc=a("p"),Czr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Mae=a("a"),wzr=o("from_pretrained()"),Azr=o(" class method or the "),Eae=a("a"),Lzr=o("from_config()"),yzr=o(` class
method.`),xzr=l(),wP=a("p"),$zr=o("This class cannot be instantiated directly using "),Mye=a("code"),kzr=o("__init__()"),Szr=o(" (throws an error)."),Rzr=l(),Zt=a("div"),F(AP.$$.fragment),Pzr=l(),Eye=a("p"),Bzr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Izr=l(),gc=a("p"),Nzr=o(`Note:
Loading a model from its configuration file does `),Cye=a("strong"),qzr=o("not"),jzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cae=a("a"),Dzr=o("from_pretrained()"),Gzr=o(" to load the model weights."),Ozr=l(),F(y0.$$.fragment),Vzr=l(),xo=a("div"),F(LP.$$.fragment),Xzr=l(),wye=a("p"),zzr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Qzr=l(),jn=a("p"),Wzr=o("The model class to instantiate is selected based on the "),Aye=a("code"),Uzr=o("model_type"),Hzr=o(` property of the config object (either
passed as an argument or loaded from `),Lye=a("code"),Jzr=o("pretrained_model_name_or_path"),Yzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yye=a("code"),Zzr=o("pretrained_model_name_or_path"),Kzr=o(":"),eQr=l(),fr=a("ul"),x0=a("li"),xye=a("strong"),oQr=o("beit"),rQr=o(" \u2014 "),wae=a("a"),tQr=o("BeitForSemanticSegmentation"),aQr=o(" (BEiT model)"),nQr=l(),$0=a("li"),$ye=a("strong"),sQr=o("data2vec-vision"),lQr=o(" \u2014 "),Aae=a("a"),iQr=o("Data2VecVisionForSemanticSegmentation"),dQr=o(" (Data2VecVision model)"),mQr=l(),k0=a("li"),kye=a("strong"),cQr=o("dpt"),fQr=o(" \u2014 "),Lae=a("a"),gQr=o("DPTForSemanticSegmentation"),hQr=o(" (DPT model)"),uQr=l(),S0=a("li"),Sye=a("strong"),pQr=o("mobilenet_v2"),_Qr=o(" \u2014 "),yae=a("a"),bQr=o("MobileNetV2ForSemanticSegmentation"),vQr=o(" (MobileNetV2 model)"),FQr=l(),R0=a("li"),Rye=a("strong"),TQr=o("mobilevit"),MQr=o(" \u2014 "),xae=a("a"),EQr=o("MobileViTForSemanticSegmentation"),CQr=o(" (MobileViT model)"),wQr=l(),P0=a("li"),Pye=a("strong"),AQr=o("segformer"),LQr=o(" \u2014 "),$ae=a("a"),yQr=o("SegformerForSemanticSegmentation"),xQr=o(" (SegFormer model)"),$Qr=l(),B0=a("p"),kQr=o("The model is set in evaluation mode by default using "),Bye=a("code"),SQr=o("model.eval()"),RQr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iye=a("code"),PQr=o("model.train()"),BQr=l(),F(I0.$$.fragment),Ido=l(),hc=a("h2"),N0=a("a"),Nye=a("span"),F(yP.$$.fragment),IQr=l(),qye=a("span"),NQr=o("AutoModelForInstanceSegmentation"),Ndo=l(),gr=a("div"),F(xP.$$.fragment),qQr=l(),uc=a("p"),jQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kae=a("a"),DQr=o("from_pretrained()"),GQr=o(" class method or the "),Sae=a("a"),OQr=o("from_config()"),VQr=o(` class
method.`),XQr=l(),$P=a("p"),zQr=o("This class cannot be instantiated directly using "),jye=a("code"),QQr=o("__init__()"),WQr=o(" (throws an error)."),UQr=l(),Kt=a("div"),F(kP.$$.fragment),HQr=l(),Dye=a("p"),JQr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),YQr=l(),pc=a("p"),ZQr=o(`Note:
Loading a model from its configuration file does `),Gye=a("strong"),KQr=o("not"),eWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rae=a("a"),oWr=o("from_pretrained()"),rWr=o(" to load the model weights."),tWr=l(),F(q0.$$.fragment),aWr=l(),$o=a("div"),F(SP.$$.fragment),nWr=l(),Oye=a("p"),sWr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),lWr=l(),Dn=a("p"),iWr=o("The model class to instantiate is selected based on the "),Vye=a("code"),dWr=o("model_type"),mWr=o(` property of the config object (either
passed as an argument or loaded from `),Xye=a("code"),cWr=o("pretrained_model_name_or_path"),fWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zye=a("code"),gWr=o("pretrained_model_name_or_path"),hWr=o(":"),uWr=l(),Qye=a("ul"),j0=a("li"),Wye=a("strong"),pWr=o("maskformer"),_Wr=o(" \u2014 "),Pae=a("a"),bWr=o("MaskFormerForInstanceSegmentation"),vWr=o(" (MaskFormer model)"),FWr=l(),D0=a("p"),TWr=o("The model is set in evaluation mode by default using "),Uye=a("code"),MWr=o("model.eval()"),EWr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hye=a("code"),CWr=o("model.train()"),wWr=l(),F(G0.$$.fragment),qdo=l(),_c=a("h2"),O0=a("a"),Jye=a("span"),F(RP.$$.fragment),AWr=l(),Yye=a("span"),LWr=o("AutoModelForZeroShotObjectDetection"),jdo=l(),hr=a("div"),F(PP.$$.fragment),yWr=l(),bc=a("p"),xWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a zero-shot object detection head) when created
with the `),Bae=a("a"),$Wr=o("from_pretrained()"),kWr=o(" class method or the "),Iae=a("a"),SWr=o("from_config()"),RWr=o(` class
method.`),PWr=l(),BP=a("p"),BWr=o("This class cannot be instantiated directly using "),Zye=a("code"),IWr=o("__init__()"),NWr=o(" (throws an error)."),qWr=l(),ea=a("div"),F(IP.$$.fragment),jWr=l(),Kye=a("p"),DWr=o("Instantiates one of the model classes of the library (with a zero-shot object detection head) from a configuration."),GWr=l(),vc=a("p"),OWr=o(`Note:
Loading a model from its configuration file does `),e9e=a("strong"),VWr=o("not"),XWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nae=a("a"),zWr=o("from_pretrained()"),QWr=o(" to load the model weights."),WWr=l(),F(V0.$$.fragment),UWr=l(),ko=a("div"),F(NP.$$.fragment),HWr=l(),o9e=a("p"),JWr=o("Instantiate one of the model classes of the library (with a zero-shot object detection head) from a pretrained model."),YWr=l(),Gn=a("p"),ZWr=o("The model class to instantiate is selected based on the "),r9e=a("code"),KWr=o("model_type"),eUr=o(` property of the config object (either
passed as an argument or loaded from `),t9e=a("code"),oUr=o("pretrained_model_name_or_path"),rUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a9e=a("code"),tUr=o("pretrained_model_name_or_path"),aUr=o(":"),nUr=l(),n9e=a("ul"),X0=a("li"),s9e=a("strong"),sUr=o("owlvit"),lUr=o(" \u2014 "),qae=a("a"),iUr=o("OwlViTForObjectDetection"),dUr=o(" (OWL-ViT model)"),mUr=l(),z0=a("p"),cUr=o("The model is set in evaluation mode by default using "),l9e=a("code"),fUr=o("model.eval()"),gUr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i9e=a("code"),hUr=o("model.train()"),uUr=l(),F(Q0.$$.fragment),Ddo=l(),Fc=a("h2"),W0=a("a"),d9e=a("span"),F(qP.$$.fragment),pUr=l(),m9e=a("span"),_Ur=o("TFAutoModel"),Gdo=l(),ur=a("div"),F(jP.$$.fragment),bUr=l(),Tc=a("p"),vUr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jae=a("a"),FUr=o("from_pretrained()"),TUr=o(" class method or the "),Dae=a("a"),MUr=o("from_config()"),EUr=o(` class
method.`),CUr=l(),DP=a("p"),wUr=o("This class cannot be instantiated directly using "),c9e=a("code"),AUr=o("__init__()"),LUr=o(" (throws an error)."),yUr=l(),oa=a("div"),F(GP.$$.fragment),xUr=l(),f9e=a("p"),$Ur=o("Instantiates one of the base model classes of the library from a configuration."),kUr=l(),Mc=a("p"),SUr=o(`Note:
Loading a model from its configuration file does `),g9e=a("strong"),RUr=o("not"),PUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gae=a("a"),BUr=o("from_pretrained()"),IUr=o(" to load the model weights."),NUr=l(),F(U0.$$.fragment),qUr=l(),zr=a("div"),F(OP.$$.fragment),jUr=l(),h9e=a("p"),DUr=o("Instantiate one of the base model classes of the library from a pretrained model."),GUr=l(),On=a("p"),OUr=o("The model class to instantiate is selected based on the "),u9e=a("code"),VUr=o("model_type"),XUr=o(` property of the config object (either
passed as an argument or loaded from `),p9e=a("code"),zUr=o("pretrained_model_name_or_path"),QUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_9e=a("code"),WUr=o("pretrained_model_name_or_path"),UUr=o(":"),HUr=l(),P=a("ul"),H0=a("li"),b9e=a("strong"),JUr=o("albert"),YUr=o(" \u2014 "),Oae=a("a"),ZUr=o("TFAlbertModel"),KUr=o(" (ALBERT model)"),eHr=l(),J0=a("li"),v9e=a("strong"),oHr=o("bart"),rHr=o(" \u2014 "),Vae=a("a"),tHr=o("TFBartModel"),aHr=o(" (BART model)"),nHr=l(),Y0=a("li"),F9e=a("strong"),sHr=o("bert"),lHr=o(" \u2014 "),Xae=a("a"),iHr=o("TFBertModel"),dHr=o(" (BERT model)"),mHr=l(),Z0=a("li"),T9e=a("strong"),cHr=o("blenderbot"),fHr=o(" \u2014 "),zae=a("a"),gHr=o("TFBlenderbotModel"),hHr=o(" (Blenderbot model)"),uHr=l(),K0=a("li"),M9e=a("strong"),pHr=o("blenderbot-small"),_Hr=o(" \u2014 "),Qae=a("a"),bHr=o("TFBlenderbotSmallModel"),vHr=o(" (BlenderbotSmall model)"),FHr=l(),ew=a("li"),E9e=a("strong"),THr=o("camembert"),MHr=o(" \u2014 "),Wae=a("a"),EHr=o("TFCamembertModel"),CHr=o(" (CamemBERT model)"),wHr=l(),ow=a("li"),C9e=a("strong"),AHr=o("clip"),LHr=o(" \u2014 "),Uae=a("a"),yHr=o("TFCLIPModel"),xHr=o(" (CLIP model)"),$Hr=l(),rw=a("li"),w9e=a("strong"),kHr=o("convbert"),SHr=o(" \u2014 "),Hae=a("a"),RHr=o("TFConvBertModel"),PHr=o(" (ConvBERT model)"),BHr=l(),tw=a("li"),A9e=a("strong"),IHr=o("convnext"),NHr=o(" \u2014 "),Jae=a("a"),qHr=o("TFConvNextModel"),jHr=o(" (ConvNeXT model)"),DHr=l(),aw=a("li"),L9e=a("strong"),GHr=o("ctrl"),OHr=o(" \u2014 "),Yae=a("a"),VHr=o("TFCTRLModel"),XHr=o(" (CTRL model)"),zHr=l(),nw=a("li"),y9e=a("strong"),QHr=o("cvt"),WHr=o(" \u2014 "),Zae=a("a"),UHr=o("TFCvtModel"),HHr=o(" (CvT model)"),JHr=l(),sw=a("li"),x9e=a("strong"),YHr=o("data2vec-vision"),ZHr=o(" \u2014 "),Kae=a("a"),KHr=o("TFData2VecVisionModel"),eJr=o(" (Data2VecVision model)"),oJr=l(),lw=a("li"),$9e=a("strong"),rJr=o("deberta"),tJr=o(" \u2014 "),ene=a("a"),aJr=o("TFDebertaModel"),nJr=o(" (DeBERTa model)"),sJr=l(),iw=a("li"),k9e=a("strong"),lJr=o("deberta-v2"),iJr=o(" \u2014 "),one=a("a"),dJr=o("TFDebertaV2Model"),mJr=o(" (DeBERTa-v2 model)"),cJr=l(),dw=a("li"),S9e=a("strong"),fJr=o("deit"),gJr=o(" \u2014 "),rne=a("a"),hJr=o("TFDeiTModel"),uJr=o(" (DeiT model)"),pJr=l(),mw=a("li"),R9e=a("strong"),_Jr=o("distilbert"),bJr=o(" \u2014 "),tne=a("a"),vJr=o("TFDistilBertModel"),FJr=o(" (DistilBERT model)"),TJr=l(),cw=a("li"),P9e=a("strong"),MJr=o("dpr"),EJr=o(" \u2014 "),ane=a("a"),CJr=o("TFDPRQuestionEncoder"),wJr=o(" (DPR model)"),AJr=l(),fw=a("li"),B9e=a("strong"),LJr=o("electra"),yJr=o(" \u2014 "),nne=a("a"),xJr=o("TFElectraModel"),$Jr=o(" (ELECTRA model)"),kJr=l(),gw=a("li"),I9e=a("strong"),SJr=o("esm"),RJr=o(" \u2014 "),sne=a("a"),PJr=o("TFEsmModel"),BJr=o(" (ESM model)"),IJr=l(),hw=a("li"),N9e=a("strong"),NJr=o("flaubert"),qJr=o(" \u2014 "),lne=a("a"),jJr=o("TFFlaubertModel"),DJr=o(" (FlauBERT model)"),GJr=l(),Gl=a("li"),q9e=a("strong"),OJr=o("funnel"),VJr=o(" \u2014 "),ine=a("a"),XJr=o("TFFunnelModel"),zJr=o(" or "),dne=a("a"),QJr=o("TFFunnelBaseModel"),WJr=o(" (Funnel Transformer model)"),UJr=l(),uw=a("li"),j9e=a("strong"),HJr=o("gpt2"),JJr=o(" \u2014 "),mne=a("a"),YJr=o("TFGPT2Model"),ZJr=o(" (OpenAI GPT-2 model)"),KJr=l(),pw=a("li"),D9e=a("strong"),eYr=o("gptj"),oYr=o(" \u2014 "),cne=a("a"),rYr=o("TFGPTJModel"),tYr=o(" (GPT-J model)"),aYr=l(),_w=a("li"),G9e=a("strong"),nYr=o("groupvit"),sYr=o(" \u2014 "),fne=a("a"),lYr=o("TFGroupViTModel"),iYr=o(" (GroupViT model)"),dYr=l(),bw=a("li"),O9e=a("strong"),mYr=o("hubert"),cYr=o(" \u2014 "),gne=a("a"),fYr=o("TFHubertModel"),gYr=o(" (Hubert model)"),hYr=l(),vw=a("li"),V9e=a("strong"),uYr=o("layoutlm"),pYr=o(" \u2014 "),hne=a("a"),_Yr=o("TFLayoutLMModel"),bYr=o(" (LayoutLM model)"),vYr=l(),Fw=a("li"),X9e=a("strong"),FYr=o("layoutlmv3"),TYr=o(" \u2014 "),une=a("a"),MYr=o("TFLayoutLMv3Model"),EYr=o(" (LayoutLMv3 model)"),CYr=l(),Tw=a("li"),z9e=a("strong"),wYr=o("led"),AYr=o(" \u2014 "),pne=a("a"),LYr=o("TFLEDModel"),yYr=o(" (LED model)"),xYr=l(),Mw=a("li"),Q9e=a("strong"),$Yr=o("longformer"),kYr=o(" \u2014 "),_ne=a("a"),SYr=o("TFLongformerModel"),RYr=o(" (Longformer model)"),PYr=l(),Ew=a("li"),W9e=a("strong"),BYr=o("lxmert"),IYr=o(" \u2014 "),bne=a("a"),NYr=o("TFLxmertModel"),qYr=o(" (LXMERT model)"),jYr=l(),Cw=a("li"),U9e=a("strong"),DYr=o("marian"),GYr=o(" \u2014 "),vne=a("a"),OYr=o("TFMarianModel"),VYr=o(" (Marian model)"),XYr=l(),ww=a("li"),H9e=a("strong"),zYr=o("mbart"),QYr=o(" \u2014 "),Fne=a("a"),WYr=o("TFMBartModel"),UYr=o(" (mBART model)"),HYr=l(),Aw=a("li"),J9e=a("strong"),JYr=o("mobilebert"),YYr=o(" \u2014 "),Tne=a("a"),ZYr=o("TFMobileBertModel"),KYr=o(" (MobileBERT model)"),eZr=l(),Lw=a("li"),Y9e=a("strong"),oZr=o("mobilevit"),rZr=o(" \u2014 "),Mne=a("a"),tZr=o("TFMobileViTModel"),aZr=o(" (MobileViT model)"),nZr=l(),yw=a("li"),Z9e=a("strong"),sZr=o("mpnet"),lZr=o(" \u2014 "),Ene=a("a"),iZr=o("TFMPNetModel"),dZr=o(" (MPNet model)"),mZr=l(),xw=a("li"),K9e=a("strong"),cZr=o("mt5"),fZr=o(" \u2014 "),Cne=a("a"),gZr=o("TFMT5Model"),hZr=o(" (MT5 model)"),uZr=l(),$w=a("li"),exe=a("strong"),pZr=o("openai-gpt"),_Zr=o(" \u2014 "),wne=a("a"),bZr=o("TFOpenAIGPTModel"),vZr=o(" (OpenAI GPT model)"),FZr=l(),kw=a("li"),oxe=a("strong"),TZr=o("opt"),MZr=o(" \u2014 "),Ane=a("a"),EZr=o("TFOPTModel"),CZr=o(" (OPT model)"),wZr=l(),Sw=a("li"),rxe=a("strong"),AZr=o("pegasus"),LZr=o(" \u2014 "),Lne=a("a"),yZr=o("TFPegasusModel"),xZr=o(" (Pegasus model)"),$Zr=l(),Rw=a("li"),txe=a("strong"),kZr=o("regnet"),SZr=o(" \u2014 "),yne=a("a"),RZr=o("TFRegNetModel"),PZr=o(" (RegNet model)"),BZr=l(),Pw=a("li"),axe=a("strong"),IZr=o("rembert"),NZr=o(" \u2014 "),xne=a("a"),qZr=o("TFRemBertModel"),jZr=o(" (RemBERT model)"),DZr=l(),Bw=a("li"),nxe=a("strong"),GZr=o("resnet"),OZr=o(" \u2014 "),$ne=a("a"),VZr=o("TFResNetModel"),XZr=o(" (ResNet model)"),zZr=l(),Iw=a("li"),sxe=a("strong"),QZr=o("roberta"),WZr=o(" \u2014 "),kne=a("a"),UZr=o("TFRobertaModel"),HZr=o(" (RoBERTa model)"),JZr=l(),Nw=a("li"),lxe=a("strong"),YZr=o("roformer"),ZZr=o(" \u2014 "),Sne=a("a"),KZr=o("TFRoFormerModel"),eKr=o(" (RoFormer model)"),oKr=l(),qw=a("li"),ixe=a("strong"),rKr=o("segformer"),tKr=o(" \u2014 "),Rne=a("a"),aKr=o("TFSegformerModel"),nKr=o(" (SegFormer model)"),sKr=l(),jw=a("li"),dxe=a("strong"),lKr=o("speech_to_text"),iKr=o(" \u2014 "),Pne=a("a"),dKr=o("TFSpeech2TextModel"),mKr=o(" (Speech2Text model)"),cKr=l(),Dw=a("li"),mxe=a("strong"),fKr=o("swin"),gKr=o(" \u2014 "),Bne=a("a"),hKr=o("TFSwinModel"),uKr=o(" (Swin Transformer model)"),pKr=l(),Gw=a("li"),cxe=a("strong"),_Kr=o("t5"),bKr=o(" \u2014 "),Ine=a("a"),vKr=o("TFT5Model"),FKr=o(" (T5 model)"),TKr=l(),Ow=a("li"),fxe=a("strong"),MKr=o("tapas"),EKr=o(" \u2014 "),Nne=a("a"),CKr=o("TFTapasModel"),wKr=o(" (TAPAS model)"),AKr=l(),Vw=a("li"),gxe=a("strong"),LKr=o("transfo-xl"),yKr=o(" \u2014 "),qne=a("a"),xKr=o("TFTransfoXLModel"),$Kr=o(" (Transformer-XL model)"),kKr=l(),Xw=a("li"),hxe=a("strong"),SKr=o("vit"),RKr=o(" \u2014 "),jne=a("a"),PKr=o("TFViTModel"),BKr=o(" (ViT model)"),IKr=l(),zw=a("li"),uxe=a("strong"),NKr=o("vit_mae"),qKr=o(" \u2014 "),Dne=a("a"),jKr=o("TFViTMAEModel"),DKr=o(" (ViTMAE model)"),GKr=l(),Qw=a("li"),pxe=a("strong"),OKr=o("wav2vec2"),VKr=o(" \u2014 "),Gne=a("a"),XKr=o("TFWav2Vec2Model"),zKr=o(" (Wav2Vec2 model)"),QKr=l(),Ww=a("li"),_xe=a("strong"),WKr=o("whisper"),UKr=o(" \u2014 "),One=a("a"),HKr=o("TFWhisperModel"),JKr=o(" (Whisper model)"),YKr=l(),Uw=a("li"),bxe=a("strong"),ZKr=o("xglm"),KKr=o(" \u2014 "),Vne=a("a"),eet=o("TFXGLMModel"),oet=o(" (XGLM model)"),ret=l(),Hw=a("li"),vxe=a("strong"),tet=o("xlm"),aet=o(" \u2014 "),Xne=a("a"),net=o("TFXLMModel"),set=o(" (XLM model)"),iet=l(),Jw=a("li"),Fxe=a("strong"),det=o("xlm-roberta"),met=o(" \u2014 "),zne=a("a"),cet=o("TFXLMRobertaModel"),fet=o(" (XLM-RoBERTa model)"),get=l(),Yw=a("li"),Txe=a("strong"),het=o("xlnet"),uet=o(" \u2014 "),Qne=a("a"),pet=o("TFXLNetModel"),_et=o(" (XLNet model)"),bet=l(),F(Zw.$$.fragment),Odo=l(),Ec=a("h2"),Kw=a("a"),Mxe=a("span"),F(VP.$$.fragment),vet=l(),Exe=a("span"),Fet=o("TFAutoModelForPreTraining"),Vdo=l(),pr=a("div"),F(XP.$$.fragment),Tet=l(),Cc=a("p"),Met=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wne=a("a"),Eet=o("from_pretrained()"),Cet=o(" class method or the "),Une=a("a"),wet=o("from_config()"),Aet=o(` class
method.`),Let=l(),zP=a("p"),yet=o("This class cannot be instantiated directly using "),Cxe=a("code"),xet=o("__init__()"),$et=o(" (throws an error)."),ket=l(),ra=a("div"),F(QP.$$.fragment),Set=l(),wxe=a("p"),Ret=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pet=l(),wc=a("p"),Bet=o(`Note:
Loading a model from its configuration file does `),Axe=a("strong"),Iet=o("not"),Net=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hne=a("a"),qet=o("from_pretrained()"),jet=o(" to load the model weights."),Det=l(),F(eA.$$.fragment),Get=l(),Qr=a("div"),F(WP.$$.fragment),Oet=l(),Lxe=a("p"),Vet=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xet=l(),Vn=a("p"),zet=o("The model class to instantiate is selected based on the "),yxe=a("code"),Qet=o("model_type"),Wet=o(` property of the config object (either
passed as an argument or loaded from `),xxe=a("code"),Uet=o("pretrained_model_name_or_path"),Het=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$xe=a("code"),Jet=o("pretrained_model_name_or_path"),Yet=o(":"),Zet=l(),de=a("ul"),oA=a("li"),kxe=a("strong"),Ket=o("albert"),eot=o(" \u2014 "),Jne=a("a"),oot=o("TFAlbertForPreTraining"),rot=o(" (ALBERT model)"),tot=l(),rA=a("li"),Sxe=a("strong"),aot=o("bart"),not=o(" \u2014 "),Yne=a("a"),sot=o("TFBartForConditionalGeneration"),lot=o(" (BART model)"),iot=l(),tA=a("li"),Rxe=a("strong"),dot=o("bert"),mot=o(" \u2014 "),Zne=a("a"),cot=o("TFBertForPreTraining"),fot=o(" (BERT model)"),got=l(),aA=a("li"),Pxe=a("strong"),hot=o("camembert"),uot=o(" \u2014 "),Kne=a("a"),pot=o("TFCamembertForMaskedLM"),_ot=o(" (CamemBERT model)"),bot=l(),nA=a("li"),Bxe=a("strong"),vot=o("ctrl"),Fot=o(" \u2014 "),ese=a("a"),Tot=o("TFCTRLLMHeadModel"),Mot=o(" (CTRL model)"),Eot=l(),sA=a("li"),Ixe=a("strong"),Cot=o("distilbert"),wot=o(" \u2014 "),ose=a("a"),Aot=o("TFDistilBertForMaskedLM"),Lot=o(" (DistilBERT model)"),yot=l(),lA=a("li"),Nxe=a("strong"),xot=o("electra"),$ot=o(" \u2014 "),rse=a("a"),kot=o("TFElectraForPreTraining"),Sot=o(" (ELECTRA model)"),Rot=l(),iA=a("li"),qxe=a("strong"),Pot=o("flaubert"),Bot=o(" \u2014 "),tse=a("a"),Iot=o("TFFlaubertWithLMHeadModel"),Not=o(" (FlauBERT model)"),qot=l(),dA=a("li"),jxe=a("strong"),jot=o("funnel"),Dot=o(" \u2014 "),ase=a("a"),Got=o("TFFunnelForPreTraining"),Oot=o(" (Funnel Transformer model)"),Vot=l(),mA=a("li"),Dxe=a("strong"),Xot=o("gpt2"),zot=o(" \u2014 "),nse=a("a"),Qot=o("TFGPT2LMHeadModel"),Wot=o(" (OpenAI GPT-2 model)"),Uot=l(),cA=a("li"),Gxe=a("strong"),Hot=o("layoutlm"),Jot=o(" \u2014 "),sse=a("a"),Yot=o("TFLayoutLMForMaskedLM"),Zot=o(" (LayoutLM model)"),Kot=l(),fA=a("li"),Oxe=a("strong"),ert=o("lxmert"),ort=o(" \u2014 "),lse=a("a"),rrt=o("TFLxmertForPreTraining"),trt=o(" (LXMERT model)"),art=l(),gA=a("li"),Vxe=a("strong"),nrt=o("mobilebert"),srt=o(" \u2014 "),ise=a("a"),lrt=o("TFMobileBertForPreTraining"),irt=o(" (MobileBERT model)"),drt=l(),hA=a("li"),Xxe=a("strong"),mrt=o("mpnet"),crt=o(" \u2014 "),dse=a("a"),frt=o("TFMPNetForMaskedLM"),grt=o(" (MPNet model)"),hrt=l(),uA=a("li"),zxe=a("strong"),urt=o("openai-gpt"),prt=o(" \u2014 "),mse=a("a"),_rt=o("TFOpenAIGPTLMHeadModel"),brt=o(" (OpenAI GPT model)"),vrt=l(),pA=a("li"),Qxe=a("strong"),Frt=o("roberta"),Trt=o(" \u2014 "),cse=a("a"),Mrt=o("TFRobertaForMaskedLM"),Ert=o(" (RoBERTa model)"),Crt=l(),_A=a("li"),Wxe=a("strong"),wrt=o("t5"),Art=o(" \u2014 "),fse=a("a"),Lrt=o("TFT5ForConditionalGeneration"),yrt=o(" (T5 model)"),xrt=l(),bA=a("li"),Uxe=a("strong"),$rt=o("tapas"),krt=o(" \u2014 "),gse=a("a"),Srt=o("TFTapasForMaskedLM"),Rrt=o(" (TAPAS model)"),Prt=l(),vA=a("li"),Hxe=a("strong"),Brt=o("transfo-xl"),Irt=o(" \u2014 "),hse=a("a"),Nrt=o("TFTransfoXLLMHeadModel"),qrt=o(" (Transformer-XL model)"),jrt=l(),FA=a("li"),Jxe=a("strong"),Drt=o("vit_mae"),Grt=o(" \u2014 "),use=a("a"),Ort=o("TFViTMAEForPreTraining"),Vrt=o(" (ViTMAE model)"),Xrt=l(),TA=a("li"),Yxe=a("strong"),zrt=o("xlm"),Qrt=o(" \u2014 "),pse=a("a"),Wrt=o("TFXLMWithLMHeadModel"),Urt=o(" (XLM model)"),Hrt=l(),MA=a("li"),Zxe=a("strong"),Jrt=o("xlm-roberta"),Yrt=o(" \u2014 "),_se=a("a"),Zrt=o("TFXLMRobertaForMaskedLM"),Krt=o(" (XLM-RoBERTa model)"),ett=l(),EA=a("li"),Kxe=a("strong"),ott=o("xlnet"),rtt=o(" \u2014 "),bse=a("a"),ttt=o("TFXLNetLMHeadModel"),att=o(" (XLNet model)"),ntt=l(),F(CA.$$.fragment),Xdo=l(),Ac=a("h2"),wA=a("a"),e$e=a("span"),F(UP.$$.fragment),stt=l(),o$e=a("span"),ltt=o("TFAutoModelForCausalLM"),zdo=l(),_r=a("div"),F(HP.$$.fragment),itt=l(),Lc=a("p"),dtt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vse=a("a"),mtt=o("from_pretrained()"),ctt=o(" class method or the "),Fse=a("a"),ftt=o("from_config()"),gtt=o(` class
method.`),htt=l(),JP=a("p"),utt=o("This class cannot be instantiated directly using "),r$e=a("code"),ptt=o("__init__()"),_tt=o(" (throws an error)."),btt=l(),ta=a("div"),F(YP.$$.fragment),vtt=l(),t$e=a("p"),Ftt=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ttt=l(),yc=a("p"),Mtt=o(`Note:
Loading a model from its configuration file does `),a$e=a("strong"),Ett=o("not"),Ctt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tse=a("a"),wtt=o("from_pretrained()"),Att=o(" to load the model weights."),Ltt=l(),F(AA.$$.fragment),ytt=l(),Wr=a("div"),F(ZP.$$.fragment),xtt=l(),n$e=a("p"),$tt=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ktt=l(),Xn=a("p"),Stt=o("The model class to instantiate is selected based on the "),s$e=a("code"),Rtt=o("model_type"),Ptt=o(` property of the config object (either
passed as an argument or loaded from `),l$e=a("code"),Btt=o("pretrained_model_name_or_path"),Itt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i$e=a("code"),Ntt=o("pretrained_model_name_or_path"),qtt=o(":"),jtt=l(),Ce=a("ul"),LA=a("li"),d$e=a("strong"),Dtt=o("bert"),Gtt=o(" \u2014 "),Mse=a("a"),Ott=o("TFBertLMHeadModel"),Vtt=o(" (BERT model)"),Xtt=l(),yA=a("li"),m$e=a("strong"),ztt=o("camembert"),Qtt=o(" \u2014 "),Ese=a("a"),Wtt=o("TFCamembertForCausalLM"),Utt=o(" (CamemBERT model)"),Htt=l(),xA=a("li"),c$e=a("strong"),Jtt=o("ctrl"),Ytt=o(" \u2014 "),Cse=a("a"),Ztt=o("TFCTRLLMHeadModel"),Ktt=o(" (CTRL model)"),eat=l(),$A=a("li"),f$e=a("strong"),oat=o("gpt2"),rat=o(" \u2014 "),wse=a("a"),tat=o("TFGPT2LMHeadModel"),aat=o(" (OpenAI GPT-2 model)"),nat=l(),kA=a("li"),g$e=a("strong"),sat=o("gptj"),lat=o(" \u2014 "),Ase=a("a"),iat=o("TFGPTJForCausalLM"),dat=o(" (GPT-J model)"),mat=l(),SA=a("li"),h$e=a("strong"),cat=o("openai-gpt"),fat=o(" \u2014 "),Lse=a("a"),gat=o("TFOpenAIGPTLMHeadModel"),hat=o(" (OpenAI GPT model)"),uat=l(),RA=a("li"),u$e=a("strong"),pat=o("opt"),_at=o(" \u2014 "),yse=a("a"),bat=o("TFOPTForCausalLM"),vat=o(" (OPT model)"),Fat=l(),PA=a("li"),p$e=a("strong"),Tat=o("rembert"),Mat=o(" \u2014 "),xse=a("a"),Eat=o("TFRemBertForCausalLM"),Cat=o(" (RemBERT model)"),wat=l(),BA=a("li"),_$e=a("strong"),Aat=o("roberta"),Lat=o(" \u2014 "),$se=a("a"),yat=o("TFRobertaForCausalLM"),xat=o(" (RoBERTa model)"),$at=l(),IA=a("li"),b$e=a("strong"),kat=o("roformer"),Sat=o(" \u2014 "),kse=a("a"),Rat=o("TFRoFormerForCausalLM"),Pat=o(" (RoFormer model)"),Bat=l(),NA=a("li"),v$e=a("strong"),Iat=o("transfo-xl"),Nat=o(" \u2014 "),Sse=a("a"),qat=o("TFTransfoXLLMHeadModel"),jat=o(" (Transformer-XL model)"),Dat=l(),qA=a("li"),F$e=a("strong"),Gat=o("xglm"),Oat=o(" \u2014 "),Rse=a("a"),Vat=o("TFXGLMForCausalLM"),Xat=o(" (XGLM model)"),zat=l(),jA=a("li"),T$e=a("strong"),Qat=o("xlm"),Wat=o(" \u2014 "),Pse=a("a"),Uat=o("TFXLMWithLMHeadModel"),Hat=o(" (XLM model)"),Jat=l(),DA=a("li"),M$e=a("strong"),Yat=o("xlnet"),Zat=o(" \u2014 "),Bse=a("a"),Kat=o("TFXLNetLMHeadModel"),ent=o(" (XLNet model)"),ont=l(),F(GA.$$.fragment),Qdo=l(),xc=a("h2"),OA=a("a"),E$e=a("span"),F(KP.$$.fragment),rnt=l(),C$e=a("span"),tnt=o("TFAutoModelForImageClassification"),Wdo=l(),br=a("div"),F(eB.$$.fragment),ant=l(),$c=a("p"),nnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Ise=a("a"),snt=o("from_pretrained()"),lnt=o(" class method or the "),Nse=a("a"),int=o("from_config()"),dnt=o(` class
method.`),mnt=l(),oB=a("p"),cnt=o("This class cannot be instantiated directly using "),w$e=a("code"),fnt=o("__init__()"),gnt=o(" (throws an error)."),hnt=l(),aa=a("div"),F(rB.$$.fragment),unt=l(),A$e=a("p"),pnt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_nt=l(),kc=a("p"),bnt=o(`Note:
Loading a model from its configuration file does `),L$e=a("strong"),vnt=o("not"),Fnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qse=a("a"),Tnt=o("from_pretrained()"),Mnt=o(" to load the model weights."),Ent=l(),F(VA.$$.fragment),Cnt=l(),Ur=a("div"),F(tB.$$.fragment),wnt=l(),y$e=a("p"),Ant=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Lnt=l(),zn=a("p"),ynt=o("The model class to instantiate is selected based on the "),x$e=a("code"),xnt=o("model_type"),$nt=o(` property of the config object (either
passed as an argument or loaded from `),$$e=a("code"),knt=o("pretrained_model_name_or_path"),Snt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k$e=a("code"),Rnt=o("pretrained_model_name_or_path"),Pnt=o(":"),Bnt=l(),$e=a("ul"),XA=a("li"),S$e=a("strong"),Int=o("convnext"),Nnt=o(" \u2014 "),jse=a("a"),qnt=o("TFConvNextForImageClassification"),jnt=o(" (ConvNeXT model)"),Dnt=l(),zA=a("li"),R$e=a("strong"),Gnt=o("cvt"),Ont=o(" \u2014 "),Dse=a("a"),Vnt=o("TFCvtForImageClassification"),Xnt=o(" (CvT model)"),znt=l(),QA=a("li"),P$e=a("strong"),Qnt=o("data2vec-vision"),Wnt=o(" \u2014 "),Gse=a("a"),Unt=o("TFData2VecVisionForImageClassification"),Hnt=o(" (Data2VecVision model)"),Jnt=l(),Ol=a("li"),B$e=a("strong"),Ynt=o("deit"),Znt=o(" \u2014 "),Ose=a("a"),Knt=o("TFDeiTForImageClassification"),est=o(" or "),Vse=a("a"),ost=o("TFDeiTForImageClassificationWithTeacher"),rst=o(" (DeiT model)"),tst=l(),WA=a("li"),I$e=a("strong"),ast=o("mobilevit"),nst=o(" \u2014 "),Xse=a("a"),sst=o("TFMobileViTForImageClassification"),lst=o(" (MobileViT model)"),ist=l(),UA=a("li"),N$e=a("strong"),dst=o("regnet"),mst=o(" \u2014 "),zse=a("a"),cst=o("TFRegNetForImageClassification"),fst=o(" (RegNet model)"),gst=l(),HA=a("li"),q$e=a("strong"),hst=o("resnet"),ust=o(" \u2014 "),Qse=a("a"),pst=o("TFResNetForImageClassification"),_st=o(" (ResNet model)"),bst=l(),JA=a("li"),j$e=a("strong"),vst=o("segformer"),Fst=o(" \u2014 "),Wse=a("a"),Tst=o("TFSegformerForImageClassification"),Mst=o(" (SegFormer model)"),Est=l(),YA=a("li"),D$e=a("strong"),Cst=o("swin"),wst=o(" \u2014 "),Use=a("a"),Ast=o("TFSwinForImageClassification"),Lst=o(" (Swin Transformer model)"),yst=l(),ZA=a("li"),G$e=a("strong"),xst=o("vit"),$st=o(" \u2014 "),Hse=a("a"),kst=o("TFViTForImageClassification"),Sst=o(" (ViT model)"),Rst=l(),F(KA.$$.fragment),Udo=l(),Sc=a("h2"),e6=a("a"),O$e=a("span"),F(aB.$$.fragment),Pst=l(),V$e=a("span"),Bst=o("TFAutoModelForSemanticSegmentation"),Hdo=l(),vr=a("div"),F(nB.$$.fragment),Ist=l(),Rc=a("p"),Nst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Jse=a("a"),qst=o("from_pretrained()"),jst=o(" class method or the "),Yse=a("a"),Dst=o("from_config()"),Gst=o(` class
method.`),Ost=l(),sB=a("p"),Vst=o("This class cannot be instantiated directly using "),X$e=a("code"),Xst=o("__init__()"),zst=o(" (throws an error)."),Qst=l(),na=a("div"),F(lB.$$.fragment),Wst=l(),z$e=a("p"),Ust=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Hst=l(),Pc=a("p"),Jst=o(`Note:
Loading a model from its configuration file does `),Q$e=a("strong"),Yst=o("not"),Zst=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zse=a("a"),Kst=o("from_pretrained()"),elt=o(" to load the model weights."),olt=l(),F(o6.$$.fragment),rlt=l(),Hr=a("div"),F(iB.$$.fragment),tlt=l(),W$e=a("p"),alt=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),nlt=l(),Qn=a("p"),slt=o("The model class to instantiate is selected based on the "),U$e=a("code"),llt=o("model_type"),ilt=o(` property of the config object (either
passed as an argument or loaded from `),H$e=a("code"),dlt=o("pretrained_model_name_or_path"),mlt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J$e=a("code"),clt=o("pretrained_model_name_or_path"),flt=o(":"),glt=l(),Bc=a("ul"),r6=a("li"),Y$e=a("strong"),hlt=o("data2vec-vision"),ult=o(" \u2014 "),Kse=a("a"),plt=o("TFData2VecVisionForSemanticSegmentation"),_lt=o(" (Data2VecVision model)"),blt=l(),t6=a("li"),Z$e=a("strong"),vlt=o("mobilevit"),Flt=o(" \u2014 "),ele=a("a"),Tlt=o("TFMobileViTForSemanticSegmentation"),Mlt=o(" (MobileViT model)"),Elt=l(),a6=a("li"),K$e=a("strong"),Clt=o("segformer"),wlt=o(" \u2014 "),ole=a("a"),Alt=o("TFSegformerForSemanticSegmentation"),Llt=o(" (SegFormer model)"),ylt=l(),F(n6.$$.fragment),Jdo=l(),Ic=a("h2"),s6=a("a"),eke=a("span"),F(dB.$$.fragment),xlt=l(),oke=a("span"),$lt=o("TFAutoModelForMaskedLM"),Ydo=l(),Fr=a("div"),F(mB.$$.fragment),klt=l(),Nc=a("p"),Slt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rle=a("a"),Rlt=o("from_pretrained()"),Plt=o(" class method or the "),tle=a("a"),Blt=o("from_config()"),Ilt=o(` class
method.`),Nlt=l(),cB=a("p"),qlt=o("This class cannot be instantiated directly using "),rke=a("code"),jlt=o("__init__()"),Dlt=o(" (throws an error)."),Glt=l(),sa=a("div"),F(fB.$$.fragment),Olt=l(),tke=a("p"),Vlt=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Xlt=l(),qc=a("p"),zlt=o(`Note:
Loading a model from its configuration file does `),ake=a("strong"),Qlt=o("not"),Wlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ale=a("a"),Ult=o("from_pretrained()"),Hlt=o(" to load the model weights."),Jlt=l(),F(l6.$$.fragment),Ylt=l(),Jr=a("div"),F(gB.$$.fragment),Zlt=l(),nke=a("p"),Klt=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eit=l(),Wn=a("p"),oit=o("The model class to instantiate is selected based on the "),ske=a("code"),rit=o("model_type"),tit=o(` property of the config object (either
passed as an argument or loaded from `),lke=a("code"),ait=o("pretrained_model_name_or_path"),nit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ike=a("code"),sit=o("pretrained_model_name_or_path"),lit=o(":"),iit=l(),he=a("ul"),i6=a("li"),dke=a("strong"),dit=o("albert"),mit=o(" \u2014 "),nle=a("a"),cit=o("TFAlbertForMaskedLM"),fit=o(" (ALBERT model)"),git=l(),d6=a("li"),mke=a("strong"),hit=o("bert"),uit=o(" \u2014 "),sle=a("a"),pit=o("TFBertForMaskedLM"),_it=o(" (BERT model)"),bit=l(),m6=a("li"),cke=a("strong"),vit=o("camembert"),Fit=o(" \u2014 "),lle=a("a"),Tit=o("TFCamembertForMaskedLM"),Mit=o(" (CamemBERT model)"),Eit=l(),c6=a("li"),fke=a("strong"),Cit=o("convbert"),wit=o(" \u2014 "),ile=a("a"),Ait=o("TFConvBertForMaskedLM"),Lit=o(" (ConvBERT model)"),yit=l(),f6=a("li"),gke=a("strong"),xit=o("deberta"),$it=o(" \u2014 "),dle=a("a"),kit=o("TFDebertaForMaskedLM"),Sit=o(" (DeBERTa model)"),Rit=l(),g6=a("li"),hke=a("strong"),Pit=o("deberta-v2"),Bit=o(" \u2014 "),mle=a("a"),Iit=o("TFDebertaV2ForMaskedLM"),Nit=o(" (DeBERTa-v2 model)"),qit=l(),h6=a("li"),uke=a("strong"),jit=o("distilbert"),Dit=o(" \u2014 "),cle=a("a"),Git=o("TFDistilBertForMaskedLM"),Oit=o(" (DistilBERT model)"),Vit=l(),u6=a("li"),pke=a("strong"),Xit=o("electra"),zit=o(" \u2014 "),fle=a("a"),Qit=o("TFElectraForMaskedLM"),Wit=o(" (ELECTRA model)"),Uit=l(),p6=a("li"),_ke=a("strong"),Hit=o("esm"),Jit=o(" \u2014 "),gle=a("a"),Yit=o("TFEsmForMaskedLM"),Zit=o(" (ESM model)"),Kit=l(),_6=a("li"),bke=a("strong"),edt=o("flaubert"),odt=o(" \u2014 "),hle=a("a"),rdt=o("TFFlaubertWithLMHeadModel"),tdt=o(" (FlauBERT model)"),adt=l(),b6=a("li"),vke=a("strong"),ndt=o("funnel"),sdt=o(" \u2014 "),ule=a("a"),ldt=o("TFFunnelForMaskedLM"),idt=o(" (Funnel Transformer model)"),ddt=l(),v6=a("li"),Fke=a("strong"),mdt=o("layoutlm"),cdt=o(" \u2014 "),ple=a("a"),fdt=o("TFLayoutLMForMaskedLM"),gdt=o(" (LayoutLM model)"),hdt=l(),F6=a("li"),Tke=a("strong"),udt=o("longformer"),pdt=o(" \u2014 "),_le=a("a"),_dt=o("TFLongformerForMaskedLM"),bdt=o(" (Longformer model)"),vdt=l(),T6=a("li"),Mke=a("strong"),Fdt=o("mobilebert"),Tdt=o(" \u2014 "),ble=a("a"),Mdt=o("TFMobileBertForMaskedLM"),Edt=o(" (MobileBERT model)"),Cdt=l(),M6=a("li"),Eke=a("strong"),wdt=o("mpnet"),Adt=o(" \u2014 "),vle=a("a"),Ldt=o("TFMPNetForMaskedLM"),ydt=o(" (MPNet model)"),xdt=l(),E6=a("li"),Cke=a("strong"),$dt=o("rembert"),kdt=o(" \u2014 "),Fle=a("a"),Sdt=o("TFRemBertForMaskedLM"),Rdt=o(" (RemBERT model)"),Pdt=l(),C6=a("li"),wke=a("strong"),Bdt=o("roberta"),Idt=o(" \u2014 "),Tle=a("a"),Ndt=o("TFRobertaForMaskedLM"),qdt=o(" (RoBERTa model)"),jdt=l(),w6=a("li"),Ake=a("strong"),Ddt=o("roformer"),Gdt=o(" \u2014 "),Mle=a("a"),Odt=o("TFRoFormerForMaskedLM"),Vdt=o(" (RoFormer model)"),Xdt=l(),A6=a("li"),Lke=a("strong"),zdt=o("tapas"),Qdt=o(" \u2014 "),Ele=a("a"),Wdt=o("TFTapasForMaskedLM"),Udt=o(" (TAPAS model)"),Hdt=l(),L6=a("li"),yke=a("strong"),Jdt=o("xlm"),Ydt=o(" \u2014 "),Cle=a("a"),Zdt=o("TFXLMWithLMHeadModel"),Kdt=o(" (XLM model)"),emt=l(),y6=a("li"),xke=a("strong"),omt=o("xlm-roberta"),rmt=o(" \u2014 "),wle=a("a"),tmt=o("TFXLMRobertaForMaskedLM"),amt=o(" (XLM-RoBERTa model)"),nmt=l(),F(x6.$$.fragment),Zdo=l(),jc=a("h2"),$6=a("a"),$ke=a("span"),F(hB.$$.fragment),smt=l(),kke=a("span"),lmt=o("TFAutoModelForSeq2SeqLM"),Kdo=l(),Tr=a("div"),F(uB.$$.fragment),imt=l(),Dc=a("p"),dmt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ale=a("a"),mmt=o("from_pretrained()"),cmt=o(" class method or the "),Lle=a("a"),fmt=o("from_config()"),gmt=o(` class
method.`),hmt=l(),pB=a("p"),umt=o("This class cannot be instantiated directly using "),Ske=a("code"),pmt=o("__init__()"),_mt=o(" (throws an error)."),bmt=l(),la=a("div"),F(_B.$$.fragment),vmt=l(),Rke=a("p"),Fmt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Tmt=l(),Gc=a("p"),Mmt=o(`Note:
Loading a model from its configuration file does `),Pke=a("strong"),Emt=o("not"),Cmt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yle=a("a"),wmt=o("from_pretrained()"),Amt=o(" to load the model weights."),Lmt=l(),F(k6.$$.fragment),ymt=l(),Yr=a("div"),F(bB.$$.fragment),xmt=l(),Bke=a("p"),$mt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kmt=l(),Un=a("p"),Smt=o("The model class to instantiate is selected based on the "),Ike=a("code"),Rmt=o("model_type"),Pmt=o(` property of the config object (either
passed as an argument or loaded from `),Nke=a("code"),Bmt=o("pretrained_model_name_or_path"),Imt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qke=a("code"),Nmt=o("pretrained_model_name_or_path"),qmt=o(":"),jmt=l(),ke=a("ul"),S6=a("li"),jke=a("strong"),Dmt=o("bart"),Gmt=o(" \u2014 "),xle=a("a"),Omt=o("TFBartForConditionalGeneration"),Vmt=o(" (BART model)"),Xmt=l(),R6=a("li"),Dke=a("strong"),zmt=o("blenderbot"),Qmt=o(" \u2014 "),$le=a("a"),Wmt=o("TFBlenderbotForConditionalGeneration"),Umt=o(" (Blenderbot model)"),Hmt=l(),P6=a("li"),Gke=a("strong"),Jmt=o("blenderbot-small"),Ymt=o(" \u2014 "),kle=a("a"),Zmt=o("TFBlenderbotSmallForConditionalGeneration"),Kmt=o(" (BlenderbotSmall model)"),ect=l(),B6=a("li"),Oke=a("strong"),oct=o("encoder-decoder"),rct=o(" \u2014 "),Sle=a("a"),tct=o("TFEncoderDecoderModel"),act=o(" (Encoder decoder model)"),nct=l(),I6=a("li"),Vke=a("strong"),sct=o("led"),lct=o(" \u2014 "),Rle=a("a"),ict=o("TFLEDForConditionalGeneration"),dct=o(" (LED model)"),mct=l(),N6=a("li"),Xke=a("strong"),cct=o("marian"),fct=o(" \u2014 "),Ple=a("a"),gct=o("TFMarianMTModel"),hct=o(" (Marian model)"),uct=l(),q6=a("li"),zke=a("strong"),pct=o("mbart"),_ct=o(" \u2014 "),Ble=a("a"),bct=o("TFMBartForConditionalGeneration"),vct=o(" (mBART model)"),Fct=l(),j6=a("li"),Qke=a("strong"),Tct=o("mt5"),Mct=o(" \u2014 "),Ile=a("a"),Ect=o("TFMT5ForConditionalGeneration"),Cct=o(" (MT5 model)"),wct=l(),D6=a("li"),Wke=a("strong"),Act=o("pegasus"),Lct=o(" \u2014 "),Nle=a("a"),yct=o("TFPegasusForConditionalGeneration"),xct=o(" (Pegasus model)"),$ct=l(),G6=a("li"),Uke=a("strong"),kct=o("t5"),Sct=o(" \u2014 "),qle=a("a"),Rct=o("TFT5ForConditionalGeneration"),Pct=o(" (T5 model)"),Bct=l(),F(O6.$$.fragment),emo=l(),Oc=a("h2"),V6=a("a"),Hke=a("span"),F(vB.$$.fragment),Ict=l(),Jke=a("span"),Nct=o("TFAutoModelForSequenceClassification"),omo=l(),Mr=a("div"),F(FB.$$.fragment),qct=l(),Vc=a("p"),jct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jle=a("a"),Dct=o("from_pretrained()"),Gct=o(" class method or the "),Dle=a("a"),Oct=o("from_config()"),Vct=o(` class
method.`),Xct=l(),TB=a("p"),zct=o("This class cannot be instantiated directly using "),Yke=a("code"),Qct=o("__init__()"),Wct=o(" (throws an error)."),Uct=l(),ia=a("div"),F(MB.$$.fragment),Hct=l(),Zke=a("p"),Jct=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Yct=l(),Xc=a("p"),Zct=o(`Note:
Loading a model from its configuration file does `),Kke=a("strong"),Kct=o("not"),eft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gle=a("a"),oft=o("from_pretrained()"),rft=o(" to load the model weights."),tft=l(),F(X6.$$.fragment),aft=l(),Zr=a("div"),F(EB.$$.fragment),nft=l(),eSe=a("p"),sft=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lft=l(),Hn=a("p"),ift=o("The model class to instantiate is selected based on the "),oSe=a("code"),dft=o("model_type"),mft=o(` property of the config object (either
passed as an argument or loaded from `),rSe=a("code"),cft=o("pretrained_model_name_or_path"),fft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tSe=a("code"),gft=o("pretrained_model_name_or_path"),hft=o(":"),uft=l(),ae=a("ul"),z6=a("li"),aSe=a("strong"),pft=o("albert"),_ft=o(" \u2014 "),Ole=a("a"),bft=o("TFAlbertForSequenceClassification"),vft=o(" (ALBERT model)"),Fft=l(),Q6=a("li"),nSe=a("strong"),Tft=o("bert"),Mft=o(" \u2014 "),Vle=a("a"),Eft=o("TFBertForSequenceClassification"),Cft=o(" (BERT model)"),wft=l(),W6=a("li"),sSe=a("strong"),Aft=o("camembert"),Lft=o(" \u2014 "),Xle=a("a"),yft=o("TFCamembertForSequenceClassification"),xft=o(" (CamemBERT model)"),$ft=l(),U6=a("li"),lSe=a("strong"),kft=o("convbert"),Sft=o(" \u2014 "),zle=a("a"),Rft=o("TFConvBertForSequenceClassification"),Pft=o(" (ConvBERT model)"),Bft=l(),H6=a("li"),iSe=a("strong"),Ift=o("ctrl"),Nft=o(" \u2014 "),Qle=a("a"),qft=o("TFCTRLForSequenceClassification"),jft=o(" (CTRL model)"),Dft=l(),J6=a("li"),dSe=a("strong"),Gft=o("deberta"),Oft=o(" \u2014 "),Wle=a("a"),Vft=o("TFDebertaForSequenceClassification"),Xft=o(" (DeBERTa model)"),zft=l(),Y6=a("li"),mSe=a("strong"),Qft=o("deberta-v2"),Wft=o(" \u2014 "),Ule=a("a"),Uft=o("TFDebertaV2ForSequenceClassification"),Hft=o(" (DeBERTa-v2 model)"),Jft=l(),Z6=a("li"),cSe=a("strong"),Yft=o("distilbert"),Zft=o(" \u2014 "),Hle=a("a"),Kft=o("TFDistilBertForSequenceClassification"),egt=o(" (DistilBERT model)"),ogt=l(),K6=a("li"),fSe=a("strong"),rgt=o("electra"),tgt=o(" \u2014 "),Jle=a("a"),agt=o("TFElectraForSequenceClassification"),ngt=o(" (ELECTRA model)"),sgt=l(),e7=a("li"),gSe=a("strong"),lgt=o("esm"),igt=o(" \u2014 "),Yle=a("a"),dgt=o("TFEsmForSequenceClassification"),mgt=o(" (ESM model)"),cgt=l(),o7=a("li"),hSe=a("strong"),fgt=o("flaubert"),ggt=o(" \u2014 "),Zle=a("a"),hgt=o("TFFlaubertForSequenceClassification"),ugt=o(" (FlauBERT model)"),pgt=l(),r7=a("li"),uSe=a("strong"),_gt=o("funnel"),bgt=o(" \u2014 "),Kle=a("a"),vgt=o("TFFunnelForSequenceClassification"),Fgt=o(" (Funnel Transformer model)"),Tgt=l(),t7=a("li"),pSe=a("strong"),Mgt=o("gpt2"),Egt=o(" \u2014 "),eie=a("a"),Cgt=o("TFGPT2ForSequenceClassification"),wgt=o(" (OpenAI GPT-2 model)"),Agt=l(),a7=a("li"),_Se=a("strong"),Lgt=o("gptj"),ygt=o(" \u2014 "),oie=a("a"),xgt=o("TFGPTJForSequenceClassification"),$gt=o(" (GPT-J model)"),kgt=l(),n7=a("li"),bSe=a("strong"),Sgt=o("layoutlm"),Rgt=o(" \u2014 "),rie=a("a"),Pgt=o("TFLayoutLMForSequenceClassification"),Bgt=o(" (LayoutLM model)"),Igt=l(),s7=a("li"),vSe=a("strong"),Ngt=o("layoutlmv3"),qgt=o(" \u2014 "),tie=a("a"),jgt=o("TFLayoutLMv3ForSequenceClassification"),Dgt=o(" (LayoutLMv3 model)"),Ggt=l(),l7=a("li"),FSe=a("strong"),Ogt=o("longformer"),Vgt=o(" \u2014 "),aie=a("a"),Xgt=o("TFLongformerForSequenceClassification"),zgt=o(" (Longformer model)"),Qgt=l(),i7=a("li"),TSe=a("strong"),Wgt=o("mobilebert"),Ugt=o(" \u2014 "),nie=a("a"),Hgt=o("TFMobileBertForSequenceClassification"),Jgt=o(" (MobileBERT model)"),Ygt=l(),d7=a("li"),MSe=a("strong"),Zgt=o("mpnet"),Kgt=o(" \u2014 "),sie=a("a"),eht=o("TFMPNetForSequenceClassification"),oht=o(" (MPNet model)"),rht=l(),m7=a("li"),ESe=a("strong"),tht=o("openai-gpt"),aht=o(" \u2014 "),lie=a("a"),nht=o("TFOpenAIGPTForSequenceClassification"),sht=o(" (OpenAI GPT model)"),lht=l(),c7=a("li"),CSe=a("strong"),iht=o("rembert"),dht=o(" \u2014 "),iie=a("a"),mht=o("TFRemBertForSequenceClassification"),cht=o(" (RemBERT model)"),fht=l(),f7=a("li"),wSe=a("strong"),ght=o("roberta"),hht=o(" \u2014 "),die=a("a"),uht=o("TFRobertaForSequenceClassification"),pht=o(" (RoBERTa model)"),_ht=l(),g7=a("li"),ASe=a("strong"),bht=o("roformer"),vht=o(" \u2014 "),mie=a("a"),Fht=o("TFRoFormerForSequenceClassification"),Tht=o(" (RoFormer model)"),Mht=l(),h7=a("li"),LSe=a("strong"),Eht=o("tapas"),Cht=o(" \u2014 "),cie=a("a"),wht=o("TFTapasForSequenceClassification"),Aht=o(" (TAPAS model)"),Lht=l(),u7=a("li"),ySe=a("strong"),yht=o("transfo-xl"),xht=o(" \u2014 "),fie=a("a"),$ht=o("TFTransfoXLForSequenceClassification"),kht=o(" (Transformer-XL model)"),Sht=l(),p7=a("li"),xSe=a("strong"),Rht=o("xlm"),Pht=o(" \u2014 "),gie=a("a"),Bht=o("TFXLMForSequenceClassification"),Iht=o(" (XLM model)"),Nht=l(),_7=a("li"),$Se=a("strong"),qht=o("xlm-roberta"),jht=o(" \u2014 "),hie=a("a"),Dht=o("TFXLMRobertaForSequenceClassification"),Ght=o(" (XLM-RoBERTa model)"),Oht=l(),b7=a("li"),kSe=a("strong"),Vht=o("xlnet"),Xht=o(" \u2014 "),uie=a("a"),zht=o("TFXLNetForSequenceClassification"),Qht=o(" (XLNet model)"),Wht=l(),F(v7.$$.fragment),rmo=l(),zc=a("h2"),F7=a("a"),SSe=a("span"),F(CB.$$.fragment),Uht=l(),RSe=a("span"),Hht=o("TFAutoModelForMultipleChoice"),tmo=l(),Er=a("div"),F(wB.$$.fragment),Jht=l(),Qc=a("p"),Yht=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pie=a("a"),Zht=o("from_pretrained()"),Kht=o(" class method or the "),_ie=a("a"),eut=o("from_config()"),out=o(` class
method.`),rut=l(),AB=a("p"),tut=o("This class cannot be instantiated directly using "),PSe=a("code"),aut=o("__init__()"),nut=o(" (throws an error)."),sut=l(),da=a("div"),F(LB.$$.fragment),lut=l(),BSe=a("p"),iut=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dut=l(),Wc=a("p"),mut=o(`Note:
Loading a model from its configuration file does `),ISe=a("strong"),cut=o("not"),fut=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bie=a("a"),gut=o("from_pretrained()"),hut=o(" to load the model weights."),uut=l(),F(T7.$$.fragment),put=l(),Kr=a("div"),F(yB.$$.fragment),_ut=l(),NSe=a("p"),but=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vut=l(),Jn=a("p"),Fut=o("The model class to instantiate is selected based on the "),qSe=a("code"),Tut=o("model_type"),Mut=o(` property of the config object (either
passed as an argument or loaded from `),jSe=a("code"),Eut=o("pretrained_model_name_or_path"),Cut=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DSe=a("code"),wut=o("pretrained_model_name_or_path"),Aut=o(":"),Lut=l(),Me=a("ul"),M7=a("li"),GSe=a("strong"),yut=o("albert"),xut=o(" \u2014 "),vie=a("a"),$ut=o("TFAlbertForMultipleChoice"),kut=o(" (ALBERT model)"),Sut=l(),E7=a("li"),OSe=a("strong"),Rut=o("bert"),Put=o(" \u2014 "),Fie=a("a"),But=o("TFBertForMultipleChoice"),Iut=o(" (BERT model)"),Nut=l(),C7=a("li"),VSe=a("strong"),qut=o("camembert"),jut=o(" \u2014 "),Tie=a("a"),Dut=o("TFCamembertForMultipleChoice"),Gut=o(" (CamemBERT model)"),Out=l(),w7=a("li"),XSe=a("strong"),Vut=o("convbert"),Xut=o(" \u2014 "),Mie=a("a"),zut=o("TFConvBertForMultipleChoice"),Qut=o(" (ConvBERT model)"),Wut=l(),A7=a("li"),zSe=a("strong"),Uut=o("distilbert"),Hut=o(" \u2014 "),Eie=a("a"),Jut=o("TFDistilBertForMultipleChoice"),Yut=o(" (DistilBERT model)"),Zut=l(),L7=a("li"),QSe=a("strong"),Kut=o("electra"),ept=o(" \u2014 "),Cie=a("a"),opt=o("TFElectraForMultipleChoice"),rpt=o(" (ELECTRA model)"),tpt=l(),y7=a("li"),WSe=a("strong"),apt=o("flaubert"),npt=o(" \u2014 "),wie=a("a"),spt=o("TFFlaubertForMultipleChoice"),lpt=o(" (FlauBERT model)"),ipt=l(),x7=a("li"),USe=a("strong"),dpt=o("funnel"),mpt=o(" \u2014 "),Aie=a("a"),cpt=o("TFFunnelForMultipleChoice"),fpt=o(" (Funnel Transformer model)"),gpt=l(),$7=a("li"),HSe=a("strong"),hpt=o("longformer"),upt=o(" \u2014 "),Lie=a("a"),ppt=o("TFLongformerForMultipleChoice"),_pt=o(" (Longformer model)"),bpt=l(),k7=a("li"),JSe=a("strong"),vpt=o("mobilebert"),Fpt=o(" \u2014 "),yie=a("a"),Tpt=o("TFMobileBertForMultipleChoice"),Mpt=o(" (MobileBERT model)"),Ept=l(),S7=a("li"),YSe=a("strong"),Cpt=o("mpnet"),wpt=o(" \u2014 "),xie=a("a"),Apt=o("TFMPNetForMultipleChoice"),Lpt=o(" (MPNet model)"),ypt=l(),R7=a("li"),ZSe=a("strong"),xpt=o("rembert"),$pt=o(" \u2014 "),$ie=a("a"),kpt=o("TFRemBertForMultipleChoice"),Spt=o(" (RemBERT model)"),Rpt=l(),P7=a("li"),KSe=a("strong"),Ppt=o("roberta"),Bpt=o(" \u2014 "),kie=a("a"),Ipt=o("TFRobertaForMultipleChoice"),Npt=o(" (RoBERTa model)"),qpt=l(),B7=a("li"),eRe=a("strong"),jpt=o("roformer"),Dpt=o(" \u2014 "),Sie=a("a"),Gpt=o("TFRoFormerForMultipleChoice"),Opt=o(" (RoFormer model)"),Vpt=l(),I7=a("li"),oRe=a("strong"),Xpt=o("xlm"),zpt=o(" \u2014 "),Rie=a("a"),Qpt=o("TFXLMForMultipleChoice"),Wpt=o(" (XLM model)"),Upt=l(),N7=a("li"),rRe=a("strong"),Hpt=o("xlm-roberta"),Jpt=o(" \u2014 "),Pie=a("a"),Ypt=o("TFXLMRobertaForMultipleChoice"),Zpt=o(" (XLM-RoBERTa model)"),Kpt=l(),q7=a("li"),tRe=a("strong"),e_t=o("xlnet"),o_t=o(" \u2014 "),Bie=a("a"),r_t=o("TFXLNetForMultipleChoice"),t_t=o(" (XLNet model)"),a_t=l(),F(j7.$$.fragment),amo=l(),Uc=a("h2"),D7=a("a"),aRe=a("span"),F(xB.$$.fragment),n_t=l(),nRe=a("span"),s_t=o("TFAutoModelForNextSentencePrediction"),nmo=l(),Cr=a("div"),F($B.$$.fragment),l_t=l(),Hc=a("p"),i_t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Iie=a("a"),d_t=o("from_pretrained()"),m_t=o(" class method or the "),Nie=a("a"),c_t=o("from_config()"),f_t=o(` class
method.`),g_t=l(),kB=a("p"),h_t=o("This class cannot be instantiated directly using "),sRe=a("code"),u_t=o("__init__()"),p_t=o(" (throws an error)."),__t=l(),ma=a("div"),F(SB.$$.fragment),b_t=l(),lRe=a("p"),v_t=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),F_t=l(),Jc=a("p"),T_t=o(`Note:
Loading a model from its configuration file does `),iRe=a("strong"),M_t=o("not"),E_t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qie=a("a"),C_t=o("from_pretrained()"),w_t=o(" to load the model weights."),A_t=l(),F(G7.$$.fragment),L_t=l(),et=a("div"),F(RB.$$.fragment),y_t=l(),dRe=a("p"),x_t=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$_t=l(),Yn=a("p"),k_t=o("The model class to instantiate is selected based on the "),mRe=a("code"),S_t=o("model_type"),R_t=o(` property of the config object (either
passed as an argument or loaded from `),cRe=a("code"),P_t=o("pretrained_model_name_or_path"),B_t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fRe=a("code"),I_t=o("pretrained_model_name_or_path"),N_t=o(":"),q_t=l(),PB=a("ul"),O7=a("li"),gRe=a("strong"),j_t=o("bert"),D_t=o(" \u2014 "),jie=a("a"),G_t=o("TFBertForNextSentencePrediction"),O_t=o(" (BERT model)"),V_t=l(),V7=a("li"),hRe=a("strong"),X_t=o("mobilebert"),z_t=o(" \u2014 "),Die=a("a"),Q_t=o("TFMobileBertForNextSentencePrediction"),W_t=o(" (MobileBERT model)"),U_t=l(),F(X7.$$.fragment),smo=l(),Yc=a("h2"),z7=a("a"),uRe=a("span"),F(BB.$$.fragment),H_t=l(),pRe=a("span"),J_t=o("TFAutoModelForTableQuestionAnswering"),lmo=l(),wr=a("div"),F(IB.$$.fragment),Y_t=l(),Zc=a("p"),Z_t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Gie=a("a"),K_t=o("from_pretrained()"),e1t=o(" class method or the "),Oie=a("a"),o1t=o("from_config()"),r1t=o(` class
method.`),t1t=l(),NB=a("p"),a1t=o("This class cannot be instantiated directly using "),_Re=a("code"),n1t=o("__init__()"),s1t=o(" (throws an error)."),l1t=l(),ca=a("div"),F(qB.$$.fragment),i1t=l(),bRe=a("p"),d1t=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),m1t=l(),Kc=a("p"),c1t=o(`Note:
Loading a model from its configuration file does `),vRe=a("strong"),f1t=o("not"),g1t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vie=a("a"),h1t=o("from_pretrained()"),u1t=o(" to load the model weights."),p1t=l(),F(Q7.$$.fragment),_1t=l(),ot=a("div"),F(jB.$$.fragment),b1t=l(),FRe=a("p"),v1t=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),F1t=l(),Zn=a("p"),T1t=o("The model class to instantiate is selected based on the "),TRe=a("code"),M1t=o("model_type"),E1t=o(` property of the config object (either
passed as an argument or loaded from `),MRe=a("code"),C1t=o("pretrained_model_name_or_path"),w1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ERe=a("code"),A1t=o("pretrained_model_name_or_path"),L1t=o(":"),y1t=l(),CRe=a("ul"),W7=a("li"),wRe=a("strong"),x1t=o("tapas"),$1t=o(" \u2014 "),Xie=a("a"),k1t=o("TFTapasForQuestionAnswering"),S1t=o(" (TAPAS model)"),R1t=l(),F(U7.$$.fragment),imo=l(),ef=a("h2"),H7=a("a"),ARe=a("span"),F(DB.$$.fragment),P1t=l(),LRe=a("span"),B1t=o("TFAutoModelForDocumentQuestionAnswering"),dmo=l(),Ar=a("div"),F(GB.$$.fragment),I1t=l(),of=a("p"),N1t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),zie=a("a"),q1t=o("from_pretrained()"),j1t=o(" class method or the "),Qie=a("a"),D1t=o("from_config()"),G1t=o(` class
method.`),O1t=l(),OB=a("p"),V1t=o("This class cannot be instantiated directly using "),yRe=a("code"),X1t=o("__init__()"),z1t=o(" (throws an error)."),Q1t=l(),fa=a("div"),F(VB.$$.fragment),W1t=l(),xRe=a("p"),U1t=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),H1t=l(),rf=a("p"),J1t=o(`Note:
Loading a model from its configuration file does `),$Re=a("strong"),Y1t=o("not"),Z1t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wie=a("a"),K1t=o("from_pretrained()"),e2t=o(" to load the model weights."),o2t=l(),F(J7.$$.fragment),r2t=l(),rt=a("div"),F(XB.$$.fragment),t2t=l(),kRe=a("p"),a2t=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),n2t=l(),Kn=a("p"),s2t=o("The model class to instantiate is selected based on the "),SRe=a("code"),l2t=o("model_type"),i2t=o(` property of the config object (either
passed as an argument or loaded from `),RRe=a("code"),d2t=o("pretrained_model_name_or_path"),m2t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PRe=a("code"),c2t=o("pretrained_model_name_or_path"),f2t=o(":"),g2t=l(),BRe=a("ul"),Y7=a("li"),IRe=a("strong"),h2t=o("layoutlm"),u2t=o(" \u2014 "),Uie=a("a"),p2t=o("TFLayoutLMForQuestionAnswering"),_2t=o(" (LayoutLM model)"),b2t=l(),F(Z7.$$.fragment),mmo=l(),tf=a("h2"),K7=a("a"),NRe=a("span"),F(zB.$$.fragment),v2t=l(),qRe=a("span"),F2t=o("TFAutoModelForTokenClassification"),cmo=l(),Lr=a("div"),F(QB.$$.fragment),T2t=l(),af=a("p"),M2t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hie=a("a"),E2t=o("from_pretrained()"),C2t=o(" class method or the "),Jie=a("a"),w2t=o("from_config()"),A2t=o(` class
method.`),L2t=l(),WB=a("p"),y2t=o("This class cannot be instantiated directly using "),jRe=a("code"),x2t=o("__init__()"),$2t=o(" (throws an error)."),k2t=l(),ga=a("div"),F(UB.$$.fragment),S2t=l(),DRe=a("p"),R2t=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),P2t=l(),nf=a("p"),B2t=o(`Note:
Loading a model from its configuration file does `),GRe=a("strong"),I2t=o("not"),N2t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yie=a("a"),q2t=o("from_pretrained()"),j2t=o(" to load the model weights."),D2t=l(),F(e8.$$.fragment),G2t=l(),tt=a("div"),F(HB.$$.fragment),O2t=l(),ORe=a("p"),V2t=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),X2t=l(),es=a("p"),z2t=o("The model class to instantiate is selected based on the "),VRe=a("code"),Q2t=o("model_type"),W2t=o(` property of the config object (either
passed as an argument or loaded from `),XRe=a("code"),U2t=o("pretrained_model_name_or_path"),H2t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zRe=a("code"),J2t=o("pretrained_model_name_or_path"),Y2t=o(":"),Z2t=l(),me=a("ul"),o8=a("li"),QRe=a("strong"),K2t=o("albert"),ebt=o(" \u2014 "),Zie=a("a"),obt=o("TFAlbertForTokenClassification"),rbt=o(" (ALBERT model)"),tbt=l(),r8=a("li"),WRe=a("strong"),abt=o("bert"),nbt=o(" \u2014 "),Kie=a("a"),sbt=o("TFBertForTokenClassification"),lbt=o(" (BERT model)"),ibt=l(),t8=a("li"),URe=a("strong"),dbt=o("camembert"),mbt=o(" \u2014 "),ede=a("a"),cbt=o("TFCamembertForTokenClassification"),fbt=o(" (CamemBERT model)"),gbt=l(),a8=a("li"),HRe=a("strong"),hbt=o("convbert"),ubt=o(" \u2014 "),ode=a("a"),pbt=o("TFConvBertForTokenClassification"),_bt=o(" (ConvBERT model)"),bbt=l(),n8=a("li"),JRe=a("strong"),vbt=o("deberta"),Fbt=o(" \u2014 "),rde=a("a"),Tbt=o("TFDebertaForTokenClassification"),Mbt=o(" (DeBERTa model)"),Ebt=l(),s8=a("li"),YRe=a("strong"),Cbt=o("deberta-v2"),wbt=o(" \u2014 "),tde=a("a"),Abt=o("TFDebertaV2ForTokenClassification"),Lbt=o(" (DeBERTa-v2 model)"),ybt=l(),l8=a("li"),ZRe=a("strong"),xbt=o("distilbert"),$bt=o(" \u2014 "),ade=a("a"),kbt=o("TFDistilBertForTokenClassification"),Sbt=o(" (DistilBERT model)"),Rbt=l(),i8=a("li"),KRe=a("strong"),Pbt=o("electra"),Bbt=o(" \u2014 "),nde=a("a"),Ibt=o("TFElectraForTokenClassification"),Nbt=o(" (ELECTRA model)"),qbt=l(),d8=a("li"),ePe=a("strong"),jbt=o("esm"),Dbt=o(" \u2014 "),sde=a("a"),Gbt=o("TFEsmForTokenClassification"),Obt=o(" (ESM model)"),Vbt=l(),m8=a("li"),oPe=a("strong"),Xbt=o("flaubert"),zbt=o(" \u2014 "),lde=a("a"),Qbt=o("TFFlaubertForTokenClassification"),Wbt=o(" (FlauBERT model)"),Ubt=l(),c8=a("li"),rPe=a("strong"),Hbt=o("funnel"),Jbt=o(" \u2014 "),ide=a("a"),Ybt=o("TFFunnelForTokenClassification"),Zbt=o(" (Funnel Transformer model)"),Kbt=l(),f8=a("li"),tPe=a("strong"),evt=o("layoutlm"),ovt=o(" \u2014 "),dde=a("a"),rvt=o("TFLayoutLMForTokenClassification"),tvt=o(" (LayoutLM model)"),avt=l(),g8=a("li"),aPe=a("strong"),nvt=o("layoutlmv3"),svt=o(" \u2014 "),mde=a("a"),lvt=o("TFLayoutLMv3ForTokenClassification"),ivt=o(" (LayoutLMv3 model)"),dvt=l(),h8=a("li"),nPe=a("strong"),mvt=o("longformer"),cvt=o(" \u2014 "),cde=a("a"),fvt=o("TFLongformerForTokenClassification"),gvt=o(" (Longformer model)"),hvt=l(),u8=a("li"),sPe=a("strong"),uvt=o("mobilebert"),pvt=o(" \u2014 "),fde=a("a"),_vt=o("TFMobileBertForTokenClassification"),bvt=o(" (MobileBERT model)"),vvt=l(),p8=a("li"),lPe=a("strong"),Fvt=o("mpnet"),Tvt=o(" \u2014 "),gde=a("a"),Mvt=o("TFMPNetForTokenClassification"),Evt=o(" (MPNet model)"),Cvt=l(),_8=a("li"),iPe=a("strong"),wvt=o("rembert"),Avt=o(" \u2014 "),hde=a("a"),Lvt=o("TFRemBertForTokenClassification"),yvt=o(" (RemBERT model)"),xvt=l(),b8=a("li"),dPe=a("strong"),$vt=o("roberta"),kvt=o(" \u2014 "),ude=a("a"),Svt=o("TFRobertaForTokenClassification"),Rvt=o(" (RoBERTa model)"),Pvt=l(),v8=a("li"),mPe=a("strong"),Bvt=o("roformer"),Ivt=o(" \u2014 "),pde=a("a"),Nvt=o("TFRoFormerForTokenClassification"),qvt=o(" (RoFormer model)"),jvt=l(),F8=a("li"),cPe=a("strong"),Dvt=o("xlm"),Gvt=o(" \u2014 "),_de=a("a"),Ovt=o("TFXLMForTokenClassification"),Vvt=o(" (XLM model)"),Xvt=l(),T8=a("li"),fPe=a("strong"),zvt=o("xlm-roberta"),Qvt=o(" \u2014 "),bde=a("a"),Wvt=o("TFXLMRobertaForTokenClassification"),Uvt=o(" (XLM-RoBERTa model)"),Hvt=l(),M8=a("li"),gPe=a("strong"),Jvt=o("xlnet"),Yvt=o(" \u2014 "),vde=a("a"),Zvt=o("TFXLNetForTokenClassification"),Kvt=o(" (XLNet model)"),eFt=l(),F(E8.$$.fragment),fmo=l(),sf=a("h2"),C8=a("a"),hPe=a("span"),F(JB.$$.fragment),oFt=l(),uPe=a("span"),rFt=o("TFAutoModelForQuestionAnswering"),gmo=l(),yr=a("div"),F(YB.$$.fragment),tFt=l(),lf=a("p"),aFt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Fde=a("a"),nFt=o("from_pretrained()"),sFt=o(" class method or the "),Tde=a("a"),lFt=o("from_config()"),iFt=o(` class
method.`),dFt=l(),ZB=a("p"),mFt=o("This class cannot be instantiated directly using "),pPe=a("code"),cFt=o("__init__()"),fFt=o(" (throws an error)."),gFt=l(),ha=a("div"),F(KB.$$.fragment),hFt=l(),_Pe=a("p"),uFt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pFt=l(),df=a("p"),_Ft=o(`Note:
Loading a model from its configuration file does `),bPe=a("strong"),bFt=o("not"),vFt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mde=a("a"),FFt=o("from_pretrained()"),TFt=o(" to load the model weights."),MFt=l(),F(w8.$$.fragment),EFt=l(),at=a("div"),F(eI.$$.fragment),CFt=l(),vPe=a("p"),wFt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),AFt=l(),os=a("p"),LFt=o("The model class to instantiate is selected based on the "),FPe=a("code"),yFt=o("model_type"),xFt=o(` property of the config object (either
passed as an argument or loaded from `),TPe=a("code"),$Ft=o("pretrained_model_name_or_path"),kFt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MPe=a("code"),SFt=o("pretrained_model_name_or_path"),RFt=o(":"),PFt=l(),ue=a("ul"),A8=a("li"),EPe=a("strong"),BFt=o("albert"),IFt=o(" \u2014 "),Ede=a("a"),NFt=o("TFAlbertForQuestionAnswering"),qFt=o(" (ALBERT model)"),jFt=l(),L8=a("li"),CPe=a("strong"),DFt=o("bert"),GFt=o(" \u2014 "),Cde=a("a"),OFt=o("TFBertForQuestionAnswering"),VFt=o(" (BERT model)"),XFt=l(),y8=a("li"),wPe=a("strong"),zFt=o("camembert"),QFt=o(" \u2014 "),wde=a("a"),WFt=o("TFCamembertForQuestionAnswering"),UFt=o(" (CamemBERT model)"),HFt=l(),x8=a("li"),APe=a("strong"),JFt=o("convbert"),YFt=o(" \u2014 "),Ade=a("a"),ZFt=o("TFConvBertForQuestionAnswering"),KFt=o(" (ConvBERT model)"),eTt=l(),$8=a("li"),LPe=a("strong"),oTt=o("deberta"),rTt=o(" \u2014 "),Lde=a("a"),tTt=o("TFDebertaForQuestionAnswering"),aTt=o(" (DeBERTa model)"),nTt=l(),k8=a("li"),yPe=a("strong"),sTt=o("deberta-v2"),lTt=o(" \u2014 "),yde=a("a"),iTt=o("TFDebertaV2ForQuestionAnswering"),dTt=o(" (DeBERTa-v2 model)"),mTt=l(),S8=a("li"),xPe=a("strong"),cTt=o("distilbert"),fTt=o(" \u2014 "),xde=a("a"),gTt=o("TFDistilBertForQuestionAnswering"),hTt=o(" (DistilBERT model)"),uTt=l(),R8=a("li"),$Pe=a("strong"),pTt=o("electra"),_Tt=o(" \u2014 "),$de=a("a"),bTt=o("TFElectraForQuestionAnswering"),vTt=o(" (ELECTRA model)"),FTt=l(),P8=a("li"),kPe=a("strong"),TTt=o("flaubert"),MTt=o(" \u2014 "),kde=a("a"),ETt=o("TFFlaubertForQuestionAnsweringSimple"),CTt=o(" (FlauBERT model)"),wTt=l(),B8=a("li"),SPe=a("strong"),ATt=o("funnel"),LTt=o(" \u2014 "),Sde=a("a"),yTt=o("TFFunnelForQuestionAnswering"),xTt=o(" (Funnel Transformer model)"),$Tt=l(),I8=a("li"),RPe=a("strong"),kTt=o("gptj"),STt=o(" \u2014 "),Rde=a("a"),RTt=o("TFGPTJForQuestionAnswering"),PTt=o(" (GPT-J model)"),BTt=l(),N8=a("li"),PPe=a("strong"),ITt=o("layoutlmv3"),NTt=o(" \u2014 "),Pde=a("a"),qTt=o("TFLayoutLMv3ForQuestionAnswering"),jTt=o(" (LayoutLMv3 model)"),DTt=l(),q8=a("li"),BPe=a("strong"),GTt=o("longformer"),OTt=o(" \u2014 "),Bde=a("a"),VTt=o("TFLongformerForQuestionAnswering"),XTt=o(" (Longformer model)"),zTt=l(),j8=a("li"),IPe=a("strong"),QTt=o("mobilebert"),WTt=o(" \u2014 "),Ide=a("a"),UTt=o("TFMobileBertForQuestionAnswering"),HTt=o(" (MobileBERT model)"),JTt=l(),D8=a("li"),NPe=a("strong"),YTt=o("mpnet"),ZTt=o(" \u2014 "),Nde=a("a"),KTt=o("TFMPNetForQuestionAnswering"),eMt=o(" (MPNet model)"),oMt=l(),G8=a("li"),qPe=a("strong"),rMt=o("rembert"),tMt=o(" \u2014 "),qde=a("a"),aMt=o("TFRemBertForQuestionAnswering"),nMt=o(" (RemBERT model)"),sMt=l(),O8=a("li"),jPe=a("strong"),lMt=o("roberta"),iMt=o(" \u2014 "),jde=a("a"),dMt=o("TFRobertaForQuestionAnswering"),mMt=o(" (RoBERTa model)"),cMt=l(),V8=a("li"),DPe=a("strong"),fMt=o("roformer"),gMt=o(" \u2014 "),Dde=a("a"),hMt=o("TFRoFormerForQuestionAnswering"),uMt=o(" (RoFormer model)"),pMt=l(),X8=a("li"),GPe=a("strong"),_Mt=o("xlm"),bMt=o(" \u2014 "),Gde=a("a"),vMt=o("TFXLMForQuestionAnsweringSimple"),FMt=o(" (XLM model)"),TMt=l(),z8=a("li"),OPe=a("strong"),MMt=o("xlm-roberta"),EMt=o(" \u2014 "),Ode=a("a"),CMt=o("TFXLMRobertaForQuestionAnswering"),wMt=o(" (XLM-RoBERTa model)"),AMt=l(),Q8=a("li"),VPe=a("strong"),LMt=o("xlnet"),yMt=o(" \u2014 "),Vde=a("a"),xMt=o("TFXLNetForQuestionAnsweringSimple"),$Mt=o(" (XLNet model)"),kMt=l(),F(W8.$$.fragment),hmo=l(),mf=a("h2"),U8=a("a"),XPe=a("span"),F(oI.$$.fragment),SMt=l(),zPe=a("span"),RMt=o("TFAutoModelForVision2Seq"),umo=l(),xr=a("div"),F(rI.$$.fragment),PMt=l(),cf=a("p"),BMt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Xde=a("a"),IMt=o("from_pretrained()"),NMt=o(" class method or the "),zde=a("a"),qMt=o("from_config()"),jMt=o(` class
method.`),DMt=l(),tI=a("p"),GMt=o("This class cannot be instantiated directly using "),QPe=a("code"),OMt=o("__init__()"),VMt=o(" (throws an error)."),XMt=l(),ua=a("div"),F(aI.$$.fragment),zMt=l(),WPe=a("p"),QMt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),WMt=l(),ff=a("p"),UMt=o(`Note:
Loading a model from its configuration file does `),UPe=a("strong"),HMt=o("not"),JMt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qde=a("a"),YMt=o("from_pretrained()"),ZMt=o(" to load the model weights."),KMt=l(),F(H8.$$.fragment),eEt=l(),nt=a("div"),F(nI.$$.fragment),oEt=l(),HPe=a("p"),rEt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tEt=l(),rs=a("p"),aEt=o("The model class to instantiate is selected based on the "),JPe=a("code"),nEt=o("model_type"),sEt=o(` property of the config object (either
passed as an argument or loaded from `),YPe=a("code"),lEt=o("pretrained_model_name_or_path"),iEt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZPe=a("code"),dEt=o("pretrained_model_name_or_path"),mEt=o(":"),cEt=l(),KPe=a("ul"),J8=a("li"),eBe=a("strong"),fEt=o("vision-encoder-decoder"),gEt=o(" \u2014 "),Wde=a("a"),hEt=o("TFVisionEncoderDecoderModel"),uEt=o(" (Vision Encoder decoder model)"),pEt=l(),F(Y8.$$.fragment),pmo=l(),gf=a("h2"),Z8=a("a"),oBe=a("span"),F(sI.$$.fragment),_Et=l(),rBe=a("span"),bEt=o("TFAutoModelForSpeechSeq2Seq"),_mo=l(),$r=a("div"),F(lI.$$.fragment),vEt=l(),hf=a("p"),FEt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Ude=a("a"),TEt=o("from_pretrained()"),MEt=o(" class method or the "),Hde=a("a"),EEt=o("from_config()"),CEt=o(` class
method.`),wEt=l(),iI=a("p"),AEt=o("This class cannot be instantiated directly using "),tBe=a("code"),LEt=o("__init__()"),yEt=o(" (throws an error)."),xEt=l(),pa=a("div"),F(dI.$$.fragment),$Et=l(),aBe=a("p"),kEt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),SEt=l(),uf=a("p"),REt=o(`Note:
Loading a model from its configuration file does `),nBe=a("strong"),PEt=o("not"),BEt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jde=a("a"),IEt=o("from_pretrained()"),NEt=o(" to load the model weights."),qEt=l(),F(K8.$$.fragment),jEt=l(),st=a("div"),F(mI.$$.fragment),DEt=l(),sBe=a("p"),GEt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),OEt=l(),ts=a("p"),VEt=o("The model class to instantiate is selected based on the "),lBe=a("code"),XEt=o("model_type"),zEt=o(` property of the config object (either
passed as an argument or loaded from `),iBe=a("code"),QEt=o("pretrained_model_name_or_path"),WEt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dBe=a("code"),UEt=o("pretrained_model_name_or_path"),HEt=o(":"),JEt=l(),cI=a("ul"),eL=a("li"),mBe=a("strong"),YEt=o("speech_to_text"),ZEt=o(" \u2014 "),Yde=a("a"),KEt=o("TFSpeech2TextForConditionalGeneration"),e4t=o(" (Speech2Text model)"),o4t=l(),oL=a("li"),cBe=a("strong"),r4t=o("whisper"),t4t=o(" \u2014 "),Zde=a("a"),a4t=o("TFWhisperForConditionalGeneration"),n4t=o(" (Whisper model)"),s4t=l(),F(rL.$$.fragment),bmo=l(),pf=a("h2"),tL=a("a"),fBe=a("span"),F(fI.$$.fragment),l4t=l(),gBe=a("span"),i4t=o("FlaxAutoModel"),vmo=l(),kr=a("div"),F(gI.$$.fragment),d4t=l(),_f=a("p"),m4t=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Kde=a("a"),c4t=o("from_pretrained()"),f4t=o(" class method or the "),eme=a("a"),g4t=o("from_config()"),h4t=o(` class
method.`),u4t=l(),hI=a("p"),p4t=o("This class cannot be instantiated directly using "),hBe=a("code"),_4t=o("__init__()"),b4t=o(" (throws an error)."),v4t=l(),_a=a("div"),F(uI.$$.fragment),F4t=l(),uBe=a("p"),T4t=o("Instantiates one of the base model classes of the library from a configuration."),M4t=l(),bf=a("p"),E4t=o(`Note:
Loading a model from its configuration file does `),pBe=a("strong"),C4t=o("not"),w4t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ome=a("a"),A4t=o("from_pretrained()"),L4t=o(" to load the model weights."),y4t=l(),F(aL.$$.fragment),x4t=l(),lt=a("div"),F(pI.$$.fragment),$4t=l(),_Be=a("p"),k4t=o("Instantiate one of the base model classes of the library from a pretrained model."),S4t=l(),as=a("p"),R4t=o("The model class to instantiate is selected based on the "),bBe=a("code"),P4t=o("model_type"),B4t=o(` property of the config object (either
passed as an argument or loaded from `),vBe=a("code"),I4t=o("pretrained_model_name_or_path"),N4t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FBe=a("code"),q4t=o("pretrained_model_name_or_path"),j4t=o(":"),D4t=l(),ne=a("ul"),nL=a("li"),TBe=a("strong"),G4t=o("albert"),O4t=o(" \u2014 "),rme=a("a"),V4t=o("FlaxAlbertModel"),X4t=o(" (ALBERT model)"),z4t=l(),sL=a("li"),MBe=a("strong"),Q4t=o("bart"),W4t=o(" \u2014 "),tme=a("a"),U4t=o("FlaxBartModel"),H4t=o(" (BART model)"),J4t=l(),lL=a("li"),EBe=a("strong"),Y4t=o("beit"),Z4t=o(" \u2014 "),ame=a("a"),K4t=o("FlaxBeitModel"),eCt=o(" (BEiT model)"),oCt=l(),iL=a("li"),CBe=a("strong"),rCt=o("bert"),tCt=o(" \u2014 "),nme=a("a"),aCt=o("FlaxBertModel"),nCt=o(" (BERT model)"),sCt=l(),dL=a("li"),wBe=a("strong"),lCt=o("big_bird"),iCt=o(" \u2014 "),sme=a("a"),dCt=o("FlaxBigBirdModel"),mCt=o(" (BigBird model)"),cCt=l(),mL=a("li"),ABe=a("strong"),fCt=o("blenderbot"),gCt=o(" \u2014 "),lme=a("a"),hCt=o("FlaxBlenderbotModel"),uCt=o(" (Blenderbot model)"),pCt=l(),cL=a("li"),LBe=a("strong"),_Ct=o("blenderbot-small"),bCt=o(" \u2014 "),ime=a("a"),vCt=o("FlaxBlenderbotSmallModel"),FCt=o(" (BlenderbotSmall model)"),TCt=l(),fL=a("li"),yBe=a("strong"),MCt=o("clip"),ECt=o(" \u2014 "),dme=a("a"),CCt=o("FlaxCLIPModel"),wCt=o(" (CLIP model)"),ACt=l(),gL=a("li"),xBe=a("strong"),LCt=o("distilbert"),yCt=o(" \u2014 "),mme=a("a"),xCt=o("FlaxDistilBertModel"),$Ct=o(" (DistilBERT model)"),kCt=l(),hL=a("li"),$Be=a("strong"),SCt=o("electra"),RCt=o(" \u2014 "),cme=a("a"),PCt=o("FlaxElectraModel"),BCt=o(" (ELECTRA model)"),ICt=l(),uL=a("li"),kBe=a("strong"),NCt=o("gpt2"),qCt=o(" \u2014 "),fme=a("a"),jCt=o("FlaxGPT2Model"),DCt=o(" (OpenAI GPT-2 model)"),GCt=l(),pL=a("li"),SBe=a("strong"),OCt=o("gpt_neo"),VCt=o(" \u2014 "),gme=a("a"),XCt=o("FlaxGPTNeoModel"),zCt=o(" (GPT Neo model)"),QCt=l(),_L=a("li"),RBe=a("strong"),WCt=o("gptj"),UCt=o(" \u2014 "),hme=a("a"),HCt=o("FlaxGPTJModel"),JCt=o(" (GPT-J model)"),YCt=l(),bL=a("li"),PBe=a("strong"),ZCt=o("longt5"),KCt=o(" \u2014 "),ume=a("a"),e3t=o("FlaxLongT5Model"),o3t=o(" (LongT5 model)"),r3t=l(),vL=a("li"),BBe=a("strong"),t3t=o("marian"),a3t=o(" \u2014 "),pme=a("a"),n3t=o("FlaxMarianModel"),s3t=o(" (Marian model)"),l3t=l(),FL=a("li"),IBe=a("strong"),i3t=o("mbart"),d3t=o(" \u2014 "),_me=a("a"),m3t=o("FlaxMBartModel"),c3t=o(" (mBART model)"),f3t=l(),TL=a("li"),NBe=a("strong"),g3t=o("mt5"),h3t=o(" \u2014 "),bme=a("a"),u3t=o("FlaxMT5Model"),p3t=o(" (MT5 model)"),_3t=l(),ML=a("li"),qBe=a("strong"),b3t=o("opt"),v3t=o(" \u2014 "),vme=a("a"),F3t=o("FlaxOPTModel"),T3t=o(" (OPT model)"),M3t=l(),EL=a("li"),jBe=a("strong"),E3t=o("pegasus"),C3t=o(" \u2014 "),Fme=a("a"),w3t=o("FlaxPegasusModel"),A3t=o(" (Pegasus model)"),L3t=l(),CL=a("li"),DBe=a("strong"),y3t=o("roberta"),x3t=o(" \u2014 "),Tme=a("a"),$3t=o("FlaxRobertaModel"),k3t=o(" (RoBERTa model)"),S3t=l(),wL=a("li"),GBe=a("strong"),R3t=o("roformer"),P3t=o(" \u2014 "),Mme=a("a"),B3t=o("FlaxRoFormerModel"),I3t=o(" (RoFormer model)"),N3t=l(),AL=a("li"),OBe=a("strong"),q3t=o("t5"),j3t=o(" \u2014 "),Eme=a("a"),D3t=o("FlaxT5Model"),G3t=o(" (T5 model)"),O3t=l(),LL=a("li"),VBe=a("strong"),V3t=o("vision-text-dual-encoder"),X3t=o(" \u2014 "),Cme=a("a"),z3t=o("FlaxVisionTextDualEncoderModel"),Q3t=o(" (VisionTextDualEncoder model)"),W3t=l(),yL=a("li"),XBe=a("strong"),U3t=o("vit"),H3t=o(" \u2014 "),wme=a("a"),J3t=o("FlaxViTModel"),Y3t=o(" (ViT model)"),Z3t=l(),xL=a("li"),zBe=a("strong"),K3t=o("wav2vec2"),e5t=o(" \u2014 "),Ame=a("a"),o5t=o("FlaxWav2Vec2Model"),r5t=o(" (Wav2Vec2 model)"),t5t=l(),$L=a("li"),QBe=a("strong"),a5t=o("xglm"),n5t=o(" \u2014 "),Lme=a("a"),s5t=o("FlaxXGLMModel"),l5t=o(" (XGLM model)"),i5t=l(),kL=a("li"),WBe=a("strong"),d5t=o("xlm-roberta"),m5t=o(" \u2014 "),yme=a("a"),c5t=o("FlaxXLMRobertaModel"),f5t=o(" (XLM-RoBERTa model)"),g5t=l(),F(SL.$$.fragment),Fmo=l(),vf=a("h2"),RL=a("a"),UBe=a("span"),F(_I.$$.fragment),h5t=l(),HBe=a("span"),u5t=o("FlaxAutoModelForCausalLM"),Tmo=l(),Sr=a("div"),F(bI.$$.fragment),p5t=l(),Ff=a("p"),_5t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xme=a("a"),b5t=o("from_pretrained()"),v5t=o(" class method or the "),$me=a("a"),F5t=o("from_config()"),T5t=o(` class
method.`),M5t=l(),vI=a("p"),E5t=o("This class cannot be instantiated directly using "),JBe=a("code"),C5t=o("__init__()"),w5t=o(" (throws an error)."),A5t=l(),ba=a("div"),F(FI.$$.fragment),L5t=l(),YBe=a("p"),y5t=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),x5t=l(),Tf=a("p"),$5t=o(`Note:
Loading a model from its configuration file does `),ZBe=a("strong"),k5t=o("not"),S5t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kme=a("a"),R5t=o("from_pretrained()"),P5t=o(" to load the model weights."),B5t=l(),F(PL.$$.fragment),I5t=l(),it=a("div"),F(TI.$$.fragment),N5t=l(),KBe=a("p"),q5t=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),j5t=l(),ns=a("p"),D5t=o("The model class to instantiate is selected based on the "),eIe=a("code"),G5t=o("model_type"),O5t=o(` property of the config object (either
passed as an argument or loaded from `),oIe=a("code"),V5t=o("pretrained_model_name_or_path"),X5t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rIe=a("code"),z5t=o("pretrained_model_name_or_path"),Q5t=o(":"),W5t=l(),Se=a("ul"),BL=a("li"),tIe=a("strong"),U5t=o("bart"),H5t=o(" \u2014 "),Sme=a("a"),J5t=o("FlaxBartForCausalLM"),Y5t=o(" (BART model)"),Z5t=l(),IL=a("li"),aIe=a("strong"),K5t=o("bert"),e0t=o(" \u2014 "),Rme=a("a"),o0t=o("FlaxBertForCausalLM"),r0t=o(" (BERT model)"),t0t=l(),NL=a("li"),nIe=a("strong"),a0t=o("big_bird"),n0t=o(" \u2014 "),Pme=a("a"),s0t=o("FlaxBigBirdForCausalLM"),l0t=o(" (BigBird model)"),i0t=l(),qL=a("li"),sIe=a("strong"),d0t=o("electra"),m0t=o(" \u2014 "),Bme=a("a"),c0t=o("FlaxElectraForCausalLM"),f0t=o(" (ELECTRA model)"),g0t=l(),jL=a("li"),lIe=a("strong"),h0t=o("gpt2"),u0t=o(" \u2014 "),Ime=a("a"),p0t=o("FlaxGPT2LMHeadModel"),_0t=o(" (OpenAI GPT-2 model)"),b0t=l(),DL=a("li"),iIe=a("strong"),v0t=o("gpt_neo"),F0t=o(" \u2014 "),Nme=a("a"),T0t=o("FlaxGPTNeoForCausalLM"),M0t=o(" (GPT Neo model)"),E0t=l(),GL=a("li"),dIe=a("strong"),C0t=o("gptj"),w0t=o(" \u2014 "),qme=a("a"),A0t=o("FlaxGPTJForCausalLM"),L0t=o(" (GPT-J model)"),y0t=l(),OL=a("li"),mIe=a("strong"),x0t=o("opt"),$0t=o(" \u2014 "),jme=a("a"),k0t=o("FlaxOPTForCausalLM"),S0t=o(" (OPT model)"),R0t=l(),VL=a("li"),cIe=a("strong"),P0t=o("roberta"),B0t=o(" \u2014 "),Dme=a("a"),I0t=o("FlaxRobertaForCausalLM"),N0t=o(" (RoBERTa model)"),q0t=l(),XL=a("li"),fIe=a("strong"),j0t=o("xglm"),D0t=o(" \u2014 "),Gme=a("a"),G0t=o("FlaxXGLMForCausalLM"),O0t=o(" (XGLM model)"),V0t=l(),F(zL.$$.fragment),Mmo=l(),Mf=a("h2"),QL=a("a"),gIe=a("span"),F(MI.$$.fragment),X0t=l(),hIe=a("span"),z0t=o("FlaxAutoModelForPreTraining"),Emo=l(),Rr=a("div"),F(EI.$$.fragment),Q0t=l(),Ef=a("p"),W0t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ome=a("a"),U0t=o("from_pretrained()"),H0t=o(" class method or the "),Vme=a("a"),J0t=o("from_config()"),Y0t=o(` class
method.`),Z0t=l(),CI=a("p"),K0t=o("This class cannot be instantiated directly using "),uIe=a("code"),ewt=o("__init__()"),owt=o(" (throws an error)."),rwt=l(),va=a("div"),F(wI.$$.fragment),twt=l(),pIe=a("p"),awt=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nwt=l(),Cf=a("p"),swt=o(`Note:
Loading a model from its configuration file does `),_Ie=a("strong"),lwt=o("not"),iwt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xme=a("a"),dwt=o("from_pretrained()"),mwt=o(" to load the model weights."),cwt=l(),F(WL.$$.fragment),fwt=l(),dt=a("div"),F(AI.$$.fragment),gwt=l(),bIe=a("p"),hwt=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uwt=l(),ss=a("p"),pwt=o("The model class to instantiate is selected based on the "),vIe=a("code"),_wt=o("model_type"),bwt=o(` property of the config object (either
passed as an argument or loaded from `),FIe=a("code"),vwt=o("pretrained_model_name_or_path"),Fwt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TIe=a("code"),Twt=o("pretrained_model_name_or_path"),Mwt=o(":"),Ewt=l(),we=a("ul"),UL=a("li"),MIe=a("strong"),Cwt=o("albert"),wwt=o(" \u2014 "),zme=a("a"),Awt=o("FlaxAlbertForPreTraining"),Lwt=o(" (ALBERT model)"),ywt=l(),HL=a("li"),EIe=a("strong"),xwt=o("bart"),$wt=o(" \u2014 "),Qme=a("a"),kwt=o("FlaxBartForConditionalGeneration"),Swt=o(" (BART model)"),Rwt=l(),JL=a("li"),CIe=a("strong"),Pwt=o("bert"),Bwt=o(" \u2014 "),Wme=a("a"),Iwt=o("FlaxBertForPreTraining"),Nwt=o(" (BERT model)"),qwt=l(),YL=a("li"),wIe=a("strong"),jwt=o("big_bird"),Dwt=o(" \u2014 "),Ume=a("a"),Gwt=o("FlaxBigBirdForPreTraining"),Owt=o(" (BigBird model)"),Vwt=l(),ZL=a("li"),AIe=a("strong"),Xwt=o("electra"),zwt=o(" \u2014 "),Hme=a("a"),Qwt=o("FlaxElectraForPreTraining"),Wwt=o(" (ELECTRA model)"),Uwt=l(),KL=a("li"),LIe=a("strong"),Hwt=o("longt5"),Jwt=o(" \u2014 "),Jme=a("a"),Ywt=o("FlaxLongT5ForConditionalGeneration"),Zwt=o(" (LongT5 model)"),Kwt=l(),ey=a("li"),yIe=a("strong"),eAt=o("mbart"),oAt=o(" \u2014 "),Yme=a("a"),rAt=o("FlaxMBartForConditionalGeneration"),tAt=o(" (mBART model)"),aAt=l(),oy=a("li"),xIe=a("strong"),nAt=o("mt5"),sAt=o(" \u2014 "),Zme=a("a"),lAt=o("FlaxMT5ForConditionalGeneration"),iAt=o(" (MT5 model)"),dAt=l(),ry=a("li"),$Ie=a("strong"),mAt=o("roberta"),cAt=o(" \u2014 "),Kme=a("a"),fAt=o("FlaxRobertaForMaskedLM"),gAt=o(" (RoBERTa model)"),hAt=l(),ty=a("li"),kIe=a("strong"),uAt=o("roformer"),pAt=o(" \u2014 "),ece=a("a"),_At=o("FlaxRoFormerForMaskedLM"),bAt=o(" (RoFormer model)"),vAt=l(),ay=a("li"),SIe=a("strong"),FAt=o("t5"),TAt=o(" \u2014 "),oce=a("a"),MAt=o("FlaxT5ForConditionalGeneration"),EAt=o(" (T5 model)"),CAt=l(),ny=a("li"),RIe=a("strong"),wAt=o("wav2vec2"),AAt=o(" \u2014 "),rce=a("a"),LAt=o("FlaxWav2Vec2ForPreTraining"),yAt=o(" (Wav2Vec2 model)"),xAt=l(),sy=a("li"),PIe=a("strong"),$At=o("xlm-roberta"),kAt=o(" \u2014 "),tce=a("a"),SAt=o("FlaxXLMRobertaForMaskedLM"),RAt=o(" (XLM-RoBERTa model)"),PAt=l(),F(ly.$$.fragment),Cmo=l(),wf=a("h2"),iy=a("a"),BIe=a("span"),F(LI.$$.fragment),BAt=l(),IIe=a("span"),IAt=o("FlaxAutoModelForMaskedLM"),wmo=l(),Pr=a("div"),F(yI.$$.fragment),NAt=l(),Af=a("p"),qAt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ace=a("a"),jAt=o("from_pretrained()"),DAt=o(" class method or the "),nce=a("a"),GAt=o("from_config()"),OAt=o(` class
method.`),VAt=l(),xI=a("p"),XAt=o("This class cannot be instantiated directly using "),NIe=a("code"),zAt=o("__init__()"),QAt=o(" (throws an error)."),WAt=l(),Fa=a("div"),F($I.$$.fragment),UAt=l(),qIe=a("p"),HAt=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JAt=l(),Lf=a("p"),YAt=o(`Note:
Loading a model from its configuration file does `),jIe=a("strong"),ZAt=o("not"),KAt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sce=a("a"),e6t=o("from_pretrained()"),o6t=o(" to load the model weights."),r6t=l(),F(dy.$$.fragment),t6t=l(),mt=a("div"),F(kI.$$.fragment),a6t=l(),DIe=a("p"),n6t=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),s6t=l(),ls=a("p"),l6t=o("The model class to instantiate is selected based on the "),GIe=a("code"),i6t=o("model_type"),d6t=o(` property of the config object (either
passed as an argument or loaded from `),OIe=a("code"),m6t=o("pretrained_model_name_or_path"),c6t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VIe=a("code"),f6t=o("pretrained_model_name_or_path"),g6t=o(":"),h6t=l(),Re=a("ul"),my=a("li"),XIe=a("strong"),u6t=o("albert"),p6t=o(" \u2014 "),lce=a("a"),_6t=o("FlaxAlbertForMaskedLM"),b6t=o(" (ALBERT model)"),v6t=l(),cy=a("li"),zIe=a("strong"),F6t=o("bart"),T6t=o(" \u2014 "),ice=a("a"),M6t=o("FlaxBartForConditionalGeneration"),E6t=o(" (BART model)"),C6t=l(),fy=a("li"),QIe=a("strong"),w6t=o("bert"),A6t=o(" \u2014 "),dce=a("a"),L6t=o("FlaxBertForMaskedLM"),y6t=o(" (BERT model)"),x6t=l(),gy=a("li"),WIe=a("strong"),$6t=o("big_bird"),k6t=o(" \u2014 "),mce=a("a"),S6t=o("FlaxBigBirdForMaskedLM"),R6t=o(" (BigBird model)"),P6t=l(),hy=a("li"),UIe=a("strong"),B6t=o("distilbert"),I6t=o(" \u2014 "),cce=a("a"),N6t=o("FlaxDistilBertForMaskedLM"),q6t=o(" (DistilBERT model)"),j6t=l(),uy=a("li"),HIe=a("strong"),D6t=o("electra"),G6t=o(" \u2014 "),fce=a("a"),O6t=o("FlaxElectraForMaskedLM"),V6t=o(" (ELECTRA model)"),X6t=l(),py=a("li"),JIe=a("strong"),z6t=o("mbart"),Q6t=o(" \u2014 "),gce=a("a"),W6t=o("FlaxMBartForConditionalGeneration"),U6t=o(" (mBART model)"),H6t=l(),_y=a("li"),YIe=a("strong"),J6t=o("roberta"),Y6t=o(" \u2014 "),hce=a("a"),Z6t=o("FlaxRobertaForMaskedLM"),K6t=o(" (RoBERTa model)"),e7t=l(),by=a("li"),ZIe=a("strong"),o7t=o("roformer"),r7t=o(" \u2014 "),uce=a("a"),t7t=o("FlaxRoFormerForMaskedLM"),a7t=o(" (RoFormer model)"),n7t=l(),vy=a("li"),KIe=a("strong"),s7t=o("xlm-roberta"),l7t=o(" \u2014 "),pce=a("a"),i7t=o("FlaxXLMRobertaForMaskedLM"),d7t=o(" (XLM-RoBERTa model)"),m7t=l(),F(Fy.$$.fragment),Amo=l(),yf=a("h2"),Ty=a("a"),eNe=a("span"),F(SI.$$.fragment),c7t=l(),oNe=a("span"),f7t=o("FlaxAutoModelForSeq2SeqLM"),Lmo=l(),Br=a("div"),F(RI.$$.fragment),g7t=l(),xf=a("p"),h7t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_ce=a("a"),u7t=o("from_pretrained()"),p7t=o(" class method or the "),bce=a("a"),_7t=o("from_config()"),b7t=o(` class
method.`),v7t=l(),PI=a("p"),F7t=o("This class cannot be instantiated directly using "),rNe=a("code"),T7t=o("__init__()"),M7t=o(" (throws an error)."),E7t=l(),Ta=a("div"),F(BI.$$.fragment),C7t=l(),tNe=a("p"),w7t=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),A7t=l(),$f=a("p"),L7t=o(`Note:
Loading a model from its configuration file does `),aNe=a("strong"),y7t=o("not"),x7t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vce=a("a"),$7t=o("from_pretrained()"),k7t=o(" to load the model weights."),S7t=l(),F(My.$$.fragment),R7t=l(),ct=a("div"),F(II.$$.fragment),P7t=l(),nNe=a("p"),B7t=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),I7t=l(),is=a("p"),N7t=o("The model class to instantiate is selected based on the "),sNe=a("code"),q7t=o("model_type"),j7t=o(` property of the config object (either
passed as an argument or loaded from `),lNe=a("code"),D7t=o("pretrained_model_name_or_path"),G7t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iNe=a("code"),O7t=o("pretrained_model_name_or_path"),V7t=o(":"),X7t=l(),Pe=a("ul"),Ey=a("li"),dNe=a("strong"),z7t=o("bart"),Q7t=o(" \u2014 "),Fce=a("a"),W7t=o("FlaxBartForConditionalGeneration"),U7t=o(" (BART model)"),H7t=l(),Cy=a("li"),mNe=a("strong"),J7t=o("blenderbot"),Y7t=o(" \u2014 "),Tce=a("a"),Z7t=o("FlaxBlenderbotForConditionalGeneration"),K7t=o(" (Blenderbot model)"),e8t=l(),wy=a("li"),cNe=a("strong"),o8t=o("blenderbot-small"),r8t=o(" \u2014 "),Mce=a("a"),t8t=o("FlaxBlenderbotSmallForConditionalGeneration"),a8t=o(" (BlenderbotSmall model)"),n8t=l(),Ay=a("li"),fNe=a("strong"),s8t=o("encoder-decoder"),l8t=o(" \u2014 "),Ece=a("a"),i8t=o("FlaxEncoderDecoderModel"),d8t=o(" (Encoder decoder model)"),m8t=l(),Ly=a("li"),gNe=a("strong"),c8t=o("longt5"),f8t=o(" \u2014 "),Cce=a("a"),g8t=o("FlaxLongT5ForConditionalGeneration"),h8t=o(" (LongT5 model)"),u8t=l(),yy=a("li"),hNe=a("strong"),p8t=o("marian"),_8t=o(" \u2014 "),wce=a("a"),b8t=o("FlaxMarianMTModel"),v8t=o(" (Marian model)"),F8t=l(),xy=a("li"),uNe=a("strong"),T8t=o("mbart"),M8t=o(" \u2014 "),Ace=a("a"),E8t=o("FlaxMBartForConditionalGeneration"),C8t=o(" (mBART model)"),w8t=l(),$y=a("li"),pNe=a("strong"),A8t=o("mt5"),L8t=o(" \u2014 "),Lce=a("a"),y8t=o("FlaxMT5ForConditionalGeneration"),x8t=o(" (MT5 model)"),$8t=l(),ky=a("li"),_Ne=a("strong"),k8t=o("pegasus"),S8t=o(" \u2014 "),yce=a("a"),R8t=o("FlaxPegasusForConditionalGeneration"),P8t=o(" (Pegasus model)"),B8t=l(),Sy=a("li"),bNe=a("strong"),I8t=o("t5"),N8t=o(" \u2014 "),xce=a("a"),q8t=o("FlaxT5ForConditionalGeneration"),j8t=o(" (T5 model)"),D8t=l(),F(Ry.$$.fragment),ymo=l(),kf=a("h2"),Py=a("a"),vNe=a("span"),F(NI.$$.fragment),G8t=l(),FNe=a("span"),O8t=o("FlaxAutoModelForSequenceClassification"),xmo=l(),Ir=a("div"),F(qI.$$.fragment),V8t=l(),Sf=a("p"),X8t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$ce=a("a"),z8t=o("from_pretrained()"),Q8t=o(" class method or the "),kce=a("a"),W8t=o("from_config()"),U8t=o(` class
method.`),H8t=l(),jI=a("p"),J8t=o("This class cannot be instantiated directly using "),TNe=a("code"),Y8t=o("__init__()"),Z8t=o(" (throws an error)."),K8t=l(),Ma=a("div"),F(DI.$$.fragment),eLt=l(),MNe=a("p"),oLt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rLt=l(),Rf=a("p"),tLt=o(`Note:
Loading a model from its configuration file does `),ENe=a("strong"),aLt=o("not"),nLt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sce=a("a"),sLt=o("from_pretrained()"),lLt=o(" to load the model weights."),iLt=l(),F(By.$$.fragment),dLt=l(),ft=a("div"),F(GI.$$.fragment),mLt=l(),CNe=a("p"),cLt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fLt=l(),ds=a("p"),gLt=o("The model class to instantiate is selected based on the "),wNe=a("code"),hLt=o("model_type"),uLt=o(` property of the config object (either
passed as an argument or loaded from `),ANe=a("code"),pLt=o("pretrained_model_name_or_path"),_Lt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LNe=a("code"),bLt=o("pretrained_model_name_or_path"),vLt=o(":"),FLt=l(),Be=a("ul"),Iy=a("li"),yNe=a("strong"),TLt=o("albert"),MLt=o(" \u2014 "),Rce=a("a"),ELt=o("FlaxAlbertForSequenceClassification"),CLt=o(" (ALBERT model)"),wLt=l(),Ny=a("li"),xNe=a("strong"),ALt=o("bart"),LLt=o(" \u2014 "),Pce=a("a"),yLt=o("FlaxBartForSequenceClassification"),xLt=o(" (BART model)"),$Lt=l(),qy=a("li"),$Ne=a("strong"),kLt=o("bert"),SLt=o(" \u2014 "),Bce=a("a"),RLt=o("FlaxBertForSequenceClassification"),PLt=o(" (BERT model)"),BLt=l(),jy=a("li"),kNe=a("strong"),ILt=o("big_bird"),NLt=o(" \u2014 "),Ice=a("a"),qLt=o("FlaxBigBirdForSequenceClassification"),jLt=o(" (BigBird model)"),DLt=l(),Dy=a("li"),SNe=a("strong"),GLt=o("distilbert"),OLt=o(" \u2014 "),Nce=a("a"),VLt=o("FlaxDistilBertForSequenceClassification"),XLt=o(" (DistilBERT model)"),zLt=l(),Gy=a("li"),RNe=a("strong"),QLt=o("electra"),WLt=o(" \u2014 "),qce=a("a"),ULt=o("FlaxElectraForSequenceClassification"),HLt=o(" (ELECTRA model)"),JLt=l(),Oy=a("li"),PNe=a("strong"),YLt=o("mbart"),ZLt=o(" \u2014 "),jce=a("a"),KLt=o("FlaxMBartForSequenceClassification"),eyt=o(" (mBART model)"),oyt=l(),Vy=a("li"),BNe=a("strong"),ryt=o("roberta"),tyt=o(" \u2014 "),Dce=a("a"),ayt=o("FlaxRobertaForSequenceClassification"),nyt=o(" (RoBERTa model)"),syt=l(),Xy=a("li"),INe=a("strong"),lyt=o("roformer"),iyt=o(" \u2014 "),Gce=a("a"),dyt=o("FlaxRoFormerForSequenceClassification"),myt=o(" (RoFormer model)"),cyt=l(),zy=a("li"),NNe=a("strong"),fyt=o("xlm-roberta"),gyt=o(" \u2014 "),Oce=a("a"),hyt=o("FlaxXLMRobertaForSequenceClassification"),uyt=o(" (XLM-RoBERTa model)"),pyt=l(),F(Qy.$$.fragment),$mo=l(),Pf=a("h2"),Wy=a("a"),qNe=a("span"),F(OI.$$.fragment),_yt=l(),jNe=a("span"),byt=o("FlaxAutoModelForQuestionAnswering"),kmo=l(),Nr=a("div"),F(VI.$$.fragment),vyt=l(),Bf=a("p"),Fyt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vce=a("a"),Tyt=o("from_pretrained()"),Myt=o(" class method or the "),Xce=a("a"),Eyt=o("from_config()"),Cyt=o(` class
method.`),wyt=l(),XI=a("p"),Ayt=o("This class cannot be instantiated directly using "),DNe=a("code"),Lyt=o("__init__()"),yyt=o(" (throws an error)."),xyt=l(),Ea=a("div"),F(zI.$$.fragment),$yt=l(),GNe=a("p"),kyt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Syt=l(),If=a("p"),Ryt=o(`Note:
Loading a model from its configuration file does `),ONe=a("strong"),Pyt=o("not"),Byt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zce=a("a"),Iyt=o("from_pretrained()"),Nyt=o(" to load the model weights."),qyt=l(),F(Uy.$$.fragment),jyt=l(),gt=a("div"),F(QI.$$.fragment),Dyt=l(),VNe=a("p"),Gyt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Oyt=l(),ms=a("p"),Vyt=o("The model class to instantiate is selected based on the "),XNe=a("code"),Xyt=o("model_type"),zyt=o(` property of the config object (either
passed as an argument or loaded from `),zNe=a("code"),Qyt=o("pretrained_model_name_or_path"),Wyt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QNe=a("code"),Uyt=o("pretrained_model_name_or_path"),Hyt=o(":"),Jyt=l(),Ie=a("ul"),Hy=a("li"),WNe=a("strong"),Yyt=o("albert"),Zyt=o(" \u2014 "),Qce=a("a"),Kyt=o("FlaxAlbertForQuestionAnswering"),e9t=o(" (ALBERT model)"),o9t=l(),Jy=a("li"),UNe=a("strong"),r9t=o("bart"),t9t=o(" \u2014 "),Wce=a("a"),a9t=o("FlaxBartForQuestionAnswering"),n9t=o(" (BART model)"),s9t=l(),Yy=a("li"),HNe=a("strong"),l9t=o("bert"),i9t=o(" \u2014 "),Uce=a("a"),d9t=o("FlaxBertForQuestionAnswering"),m9t=o(" (BERT model)"),c9t=l(),Zy=a("li"),JNe=a("strong"),f9t=o("big_bird"),g9t=o(" \u2014 "),Hce=a("a"),h9t=o("FlaxBigBirdForQuestionAnswering"),u9t=o(" (BigBird model)"),p9t=l(),Ky=a("li"),YNe=a("strong"),_9t=o("distilbert"),b9t=o(" \u2014 "),Jce=a("a"),v9t=o("FlaxDistilBertForQuestionAnswering"),F9t=o(" (DistilBERT model)"),T9t=l(),e9=a("li"),ZNe=a("strong"),M9t=o("electra"),E9t=o(" \u2014 "),Yce=a("a"),C9t=o("FlaxElectraForQuestionAnswering"),w9t=o(" (ELECTRA model)"),A9t=l(),o9=a("li"),KNe=a("strong"),L9t=o("mbart"),y9t=o(" \u2014 "),Zce=a("a"),x9t=o("FlaxMBartForQuestionAnswering"),$9t=o(" (mBART model)"),k9t=l(),r9=a("li"),eqe=a("strong"),S9t=o("roberta"),R9t=o(" \u2014 "),Kce=a("a"),P9t=o("FlaxRobertaForQuestionAnswering"),B9t=o(" (RoBERTa model)"),I9t=l(),t9=a("li"),oqe=a("strong"),N9t=o("roformer"),q9t=o(" \u2014 "),efe=a("a"),j9t=o("FlaxRoFormerForQuestionAnswering"),D9t=o(" (RoFormer model)"),G9t=l(),a9=a("li"),rqe=a("strong"),O9t=o("xlm-roberta"),V9t=o(" \u2014 "),ofe=a("a"),X9t=o("FlaxXLMRobertaForQuestionAnswering"),z9t=o(" (XLM-RoBERTa model)"),Q9t=l(),F(n9.$$.fragment),Smo=l(),Nf=a("h2"),s9=a("a"),tqe=a("span"),F(WI.$$.fragment),W9t=l(),aqe=a("span"),U9t=o("FlaxAutoModelForTokenClassification"),Rmo=l(),qr=a("div"),F(UI.$$.fragment),H9t=l(),qf=a("p"),J9t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rfe=a("a"),Y9t=o("from_pretrained()"),Z9t=o(" class method or the "),tfe=a("a"),K9t=o("from_config()"),ext=o(` class
method.`),oxt=l(),HI=a("p"),rxt=o("This class cannot be instantiated directly using "),nqe=a("code"),txt=o("__init__()"),axt=o(" (throws an error)."),nxt=l(),Ca=a("div"),F(JI.$$.fragment),sxt=l(),sqe=a("p"),lxt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ixt=l(),jf=a("p"),dxt=o(`Note:
Loading a model from its configuration file does `),lqe=a("strong"),mxt=o("not"),cxt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),afe=a("a"),fxt=o("from_pretrained()"),gxt=o(" to load the model weights."),hxt=l(),F(l9.$$.fragment),uxt=l(),ht=a("div"),F(YI.$$.fragment),pxt=l(),iqe=a("p"),_xt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bxt=l(),cs=a("p"),vxt=o("The model class to instantiate is selected based on the "),dqe=a("code"),Fxt=o("model_type"),Txt=o(` property of the config object (either
passed as an argument or loaded from `),mqe=a("code"),Mxt=o("pretrained_model_name_or_path"),Ext=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cqe=a("code"),Cxt=o("pretrained_model_name_or_path"),wxt=o(":"),Axt=l(),We=a("ul"),i9=a("li"),fqe=a("strong"),Lxt=o("albert"),yxt=o(" \u2014 "),nfe=a("a"),xxt=o("FlaxAlbertForTokenClassification"),$xt=o(" (ALBERT model)"),kxt=l(),d9=a("li"),gqe=a("strong"),Sxt=o("bert"),Rxt=o(" \u2014 "),sfe=a("a"),Pxt=o("FlaxBertForTokenClassification"),Bxt=o(" (BERT model)"),Ixt=l(),m9=a("li"),hqe=a("strong"),Nxt=o("big_bird"),qxt=o(" \u2014 "),lfe=a("a"),jxt=o("FlaxBigBirdForTokenClassification"),Dxt=o(" (BigBird model)"),Gxt=l(),c9=a("li"),uqe=a("strong"),Oxt=o("distilbert"),Vxt=o(" \u2014 "),ife=a("a"),Xxt=o("FlaxDistilBertForTokenClassification"),zxt=o(" (DistilBERT model)"),Qxt=l(),f9=a("li"),pqe=a("strong"),Wxt=o("electra"),Uxt=o(" \u2014 "),dfe=a("a"),Hxt=o("FlaxElectraForTokenClassification"),Jxt=o(" (ELECTRA model)"),Yxt=l(),g9=a("li"),_qe=a("strong"),Zxt=o("roberta"),Kxt=o(" \u2014 "),mfe=a("a"),e$t=o("FlaxRobertaForTokenClassification"),o$t=o(" (RoBERTa model)"),r$t=l(),h9=a("li"),bqe=a("strong"),t$t=o("roformer"),a$t=o(" \u2014 "),cfe=a("a"),n$t=o("FlaxRoFormerForTokenClassification"),s$t=o(" (RoFormer model)"),l$t=l(),u9=a("li"),vqe=a("strong"),i$t=o("xlm-roberta"),d$t=o(" \u2014 "),ffe=a("a"),m$t=o("FlaxXLMRobertaForTokenClassification"),c$t=o(" (XLM-RoBERTa model)"),f$t=l(),F(p9.$$.fragment),Pmo=l(),Df=a("h2"),_9=a("a"),Fqe=a("span"),F(ZI.$$.fragment),g$t=l(),Tqe=a("span"),h$t=o("FlaxAutoModelForMultipleChoice"),Bmo=l(),jr=a("div"),F(KI.$$.fragment),u$t=l(),Gf=a("p"),p$t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gfe=a("a"),_$t=o("from_pretrained()"),b$t=o(" class method or the "),hfe=a("a"),v$t=o("from_config()"),F$t=o(` class
method.`),T$t=l(),eN=a("p"),M$t=o("This class cannot be instantiated directly using "),Mqe=a("code"),E$t=o("__init__()"),C$t=o(" (throws an error)."),w$t=l(),wa=a("div"),F(oN.$$.fragment),A$t=l(),Eqe=a("p"),L$t=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),y$t=l(),Of=a("p"),x$t=o(`Note:
Loading a model from its configuration file does `),Cqe=a("strong"),$$t=o("not"),k$t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ufe=a("a"),S$t=o("from_pretrained()"),R$t=o(" to load the model weights."),P$t=l(),F(b9.$$.fragment),B$t=l(),ut=a("div"),F(rN.$$.fragment),I$t=l(),wqe=a("p"),N$t=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),q$t=l(),fs=a("p"),j$t=o("The model class to instantiate is selected based on the "),Aqe=a("code"),D$t=o("model_type"),G$t=o(` property of the config object (either
passed as an argument or loaded from `),Lqe=a("code"),O$t=o("pretrained_model_name_or_path"),V$t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yqe=a("code"),X$t=o("pretrained_model_name_or_path"),z$t=o(":"),Q$t=l(),Ue=a("ul"),v9=a("li"),xqe=a("strong"),W$t=o("albert"),U$t=o(" \u2014 "),pfe=a("a"),H$t=o("FlaxAlbertForMultipleChoice"),J$t=o(" (ALBERT model)"),Y$t=l(),F9=a("li"),$qe=a("strong"),Z$t=o("bert"),K$t=o(" \u2014 "),_fe=a("a"),ekt=o("FlaxBertForMultipleChoice"),okt=o(" (BERT model)"),rkt=l(),T9=a("li"),kqe=a("strong"),tkt=o("big_bird"),akt=o(" \u2014 "),bfe=a("a"),nkt=o("FlaxBigBirdForMultipleChoice"),skt=o(" (BigBird model)"),lkt=l(),M9=a("li"),Sqe=a("strong"),ikt=o("distilbert"),dkt=o(" \u2014 "),vfe=a("a"),mkt=o("FlaxDistilBertForMultipleChoice"),ckt=o(" (DistilBERT model)"),fkt=l(),E9=a("li"),Rqe=a("strong"),gkt=o("electra"),hkt=o(" \u2014 "),Ffe=a("a"),ukt=o("FlaxElectraForMultipleChoice"),pkt=o(" (ELECTRA model)"),_kt=l(),C9=a("li"),Pqe=a("strong"),bkt=o("roberta"),vkt=o(" \u2014 "),Tfe=a("a"),Fkt=o("FlaxRobertaForMultipleChoice"),Tkt=o(" (RoBERTa model)"),Mkt=l(),w9=a("li"),Bqe=a("strong"),Ekt=o("roformer"),Ckt=o(" \u2014 "),Mfe=a("a"),wkt=o("FlaxRoFormerForMultipleChoice"),Akt=o(" (RoFormer model)"),Lkt=l(),A9=a("li"),Iqe=a("strong"),ykt=o("xlm-roberta"),xkt=o(" \u2014 "),Efe=a("a"),$kt=o("FlaxXLMRobertaForMultipleChoice"),kkt=o(" (XLM-RoBERTa model)"),Skt=l(),F(L9.$$.fragment),Imo=l(),Vf=a("h2"),y9=a("a"),Nqe=a("span"),F(tN.$$.fragment),Rkt=l(),qqe=a("span"),Pkt=o("FlaxAutoModelForNextSentencePrediction"),Nmo=l(),Dr=a("div"),F(aN.$$.fragment),Bkt=l(),Xf=a("p"),Ikt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cfe=a("a"),Nkt=o("from_pretrained()"),qkt=o(" class method or the "),wfe=a("a"),jkt=o("from_config()"),Dkt=o(` class
method.`),Gkt=l(),nN=a("p"),Okt=o("This class cannot be instantiated directly using "),jqe=a("code"),Vkt=o("__init__()"),Xkt=o(" (throws an error)."),zkt=l(),Aa=a("div"),F(sN.$$.fragment),Qkt=l(),Dqe=a("p"),Wkt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ukt=l(),zf=a("p"),Hkt=o(`Note:
Loading a model from its configuration file does `),Gqe=a("strong"),Jkt=o("not"),Ykt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Afe=a("a"),Zkt=o("from_pretrained()"),Kkt=o(" to load the model weights."),eSt=l(),F(x9.$$.fragment),oSt=l(),pt=a("div"),F(lN.$$.fragment),rSt=l(),Oqe=a("p"),tSt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aSt=l(),gs=a("p"),nSt=o("The model class to instantiate is selected based on the "),Vqe=a("code"),sSt=o("model_type"),lSt=o(` property of the config object (either
passed as an argument or loaded from `),Xqe=a("code"),iSt=o("pretrained_model_name_or_path"),dSt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zqe=a("code"),mSt=o("pretrained_model_name_or_path"),cSt=o(":"),fSt=l(),Qqe=a("ul"),$9=a("li"),Wqe=a("strong"),gSt=o("bert"),hSt=o(" \u2014 "),Lfe=a("a"),uSt=o("FlaxBertForNextSentencePrediction"),pSt=o(" (BERT model)"),_St=l(),F(k9.$$.fragment),qmo=l(),Qf=a("h2"),S9=a("a"),Uqe=a("span"),F(iN.$$.fragment),bSt=l(),Hqe=a("span"),vSt=o("FlaxAutoModelForImageClassification"),jmo=l(),Gr=a("div"),F(dN.$$.fragment),FSt=l(),Wf=a("p"),TSt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yfe=a("a"),MSt=o("from_pretrained()"),ESt=o(" class method or the "),xfe=a("a"),CSt=o("from_config()"),wSt=o(` class
method.`),ASt=l(),mN=a("p"),LSt=o("This class cannot be instantiated directly using "),Jqe=a("code"),ySt=o("__init__()"),xSt=o(" (throws an error)."),$St=l(),La=a("div"),F(cN.$$.fragment),kSt=l(),Yqe=a("p"),SSt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),RSt=l(),Uf=a("p"),PSt=o(`Note:
Loading a model from its configuration file does `),Zqe=a("strong"),BSt=o("not"),ISt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$fe=a("a"),NSt=o("from_pretrained()"),qSt=o(" to load the model weights."),jSt=l(),F(R9.$$.fragment),DSt=l(),_t=a("div"),F(fN.$$.fragment),GSt=l(),Kqe=a("p"),OSt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VSt=l(),hs=a("p"),XSt=o("The model class to instantiate is selected based on the "),eje=a("code"),zSt=o("model_type"),QSt=o(` property of the config object (either
passed as an argument or loaded from `),oje=a("code"),WSt=o("pretrained_model_name_or_path"),USt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rje=a("code"),HSt=o("pretrained_model_name_or_path"),JSt=o(":"),YSt=l(),gN=a("ul"),P9=a("li"),tje=a("strong"),ZSt=o("beit"),KSt=o(" \u2014 "),kfe=a("a"),eRt=o("FlaxBeitForImageClassification"),oRt=o(" (BEiT model)"),rRt=l(),B9=a("li"),aje=a("strong"),tRt=o("vit"),aRt=o(" \u2014 "),Sfe=a("a"),nRt=o("FlaxViTForImageClassification"),sRt=o(" (ViT model)"),lRt=l(),F(I9.$$.fragment),Dmo=l(),Hf=a("h2"),N9=a("a"),nje=a("span"),F(hN.$$.fragment),iRt=l(),sje=a("span"),dRt=o("FlaxAutoModelForVision2Seq"),Gmo=l(),Or=a("div"),F(uN.$$.fragment),mRt=l(),Jf=a("p"),cRt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Rfe=a("a"),fRt=o("from_pretrained()"),gRt=o(" class method or the "),Pfe=a("a"),hRt=o("from_config()"),uRt=o(` class
method.`),pRt=l(),pN=a("p"),_Rt=o("This class cannot be instantiated directly using "),lje=a("code"),bRt=o("__init__()"),vRt=o(" (throws an error)."),FRt=l(),ya=a("div"),F(_N.$$.fragment),TRt=l(),ije=a("p"),MRt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ERt=l(),Yf=a("p"),CRt=o(`Note:
Loading a model from its configuration file does `),dje=a("strong"),wRt=o("not"),ARt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bfe=a("a"),LRt=o("from_pretrained()"),yRt=o(" to load the model weights."),xRt=l(),F(q9.$$.fragment),$Rt=l(),bt=a("div"),F(bN.$$.fragment),kRt=l(),mje=a("p"),SRt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),RRt=l(),us=a("p"),PRt=o("The model class to instantiate is selected based on the "),cje=a("code"),BRt=o("model_type"),IRt=o(` property of the config object (either
passed as an argument or loaded from `),fje=a("code"),NRt=o("pretrained_model_name_or_path"),qRt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gje=a("code"),jRt=o("pretrained_model_name_or_path"),DRt=o(":"),GRt=l(),hje=a("ul"),j9=a("li"),uje=a("strong"),ORt=o("vision-encoder-decoder"),VRt=o(" \u2014 "),Ife=a("a"),XRt=o("FlaxVisionEncoderDecoderModel"),zRt=o(" (Vision Encoder decoder model)"),QRt=l(),F(D9.$$.fragment),this.h()},l(c){const _=Yka('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(c),u=n(c,"H1",{class:!0});var vN=s(u);f=n(vN,"A",{id:!0,class:!0,href:!0});var pje=s(f);p=n(pje,"SPAN",{});var _je=s(p);T(m.$$.fragment,_je),_je.forEach(t),pje.forEach(t),h=i(vN),He=n(vN,"SPAN",{});var bje=s(He);Ld=r(bje,"Auto Classes"),bje.forEach(t),vN.forEach(t),og=i(c),wt=n(c,"P",{});var FN=s(wt);yd=r(FN,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xd=n(FN,"CODE",{});var vje=s(xd);Ek=r(vje,"from_pretrained()"),vje.forEach(t),rg=r(FN,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),FN.forEach(t),Qe=i(c),Ze=n(c,"P",{});var ps=s(Ze);$d=r(ps,"Instantiating one of "),_s=n(ps,"A",{href:!0});var Fje=s(_s);Ck=r(Fje,"AutoConfig"),Fje.forEach(t),bs=r(ps,", "),vs=n(ps,"A",{href:!0});var Tje=s(vs);wk=r(Tje,"AutoModel"),Tje.forEach(t),kd=r(ps,`, and
`),Fs=n(ps,"A",{href:!0});var Mje=s(Fs);Ak=r(Mje,"AutoTokenizer"),Mje.forEach(t),Sd=r(ps," will directly create a class of the relevant architecture. For instance"),ps.forEach(t),tg=i(c),T(ln.$$.fragment,c),Ke=i(c),ye=n(c,"P",{});var TN=s(ye);Uq=r(TN,"will create a model that is an instance of "),Rd=n(TN,"A",{href:!0});var Eje=s(Rd);Hq=r(Eje,"BertModel"),Eje.forEach(t),Jq=r(TN,"."),TN.forEach(t),Po=i(c),dn=n(c,"P",{});var MN=s(dn);Yq=r(MN,"There is one class of "),ag=n(MN,"CODE",{});var Cje=s(ag);Zq=r(Cje,"AutoModel"),Cje.forEach(t),ugo=r(MN," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),MN.forEach(t),Eio=i(c),Pd=n(c,"H2",{class:!0});var EN=s(Pd);ng=n(EN,"A",{id:!0,class:!0,href:!0});var wje=s(ng);zhe=n(wje,"SPAN",{});var Aje=s(zhe);T(Lk.$$.fragment,Aje),Aje.forEach(t),wje.forEach(t),pgo=i(EN),Qhe=n(EN,"SPAN",{});var Lje=s(Qhe);_go=r(Lje,"Extending the Auto Classes"),Lje.forEach(t),EN.forEach(t),Cio=i(c),Ts=n(c,"P",{});var Zf=s(Ts);bgo=r(Zf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Whe=n(Zf,"CODE",{});var yje=s(Whe);vgo=r(yje,"NewModel"),yje.forEach(t),Fgo=r(Zf,", make sure you have a "),Uhe=n(Zf,"CODE",{});var xje=s(Uhe);Tgo=r(xje,"NewModelConfig"),xje.forEach(t),Mgo=r(Zf,` then you can add those to the auto
classes like this:`),Zf.forEach(t),wio=i(c),T(yk.$$.fragment,c),Aio=i(c),Kq=n(c,"P",{});var $je=s(Kq);Ego=r($je,"You will then be able to use the auto classes like you would usually do!"),$je.forEach(t),Lio=i(c),T(sg.$$.fragment,c),yio=i(c),Bd=n(c,"H2",{class:!0});var CN=s(Bd);lg=n(CN,"A",{id:!0,class:!0,href:!0});var kje=s(lg);Hhe=n(kje,"SPAN",{});var Sje=s(Hhe);T(xk.$$.fragment,Sje),Sje.forEach(t),kje.forEach(t),Cgo=i(CN),Jhe=n(CN,"SPAN",{});var Rje=s(Jhe);wgo=r(Rje,"AutoConfig"),Rje.forEach(t),CN.forEach(t),xio=i(c),Bo=n(c,"DIV",{class:!0});var Et=s(Bo);T($k.$$.fragment,Et),Ago=i(Et),kk=n(Et,"P",{});var wN=s(kk);Lgo=r(wN,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ej=n(wN,"A",{href:!0});var Pje=s(ej);ygo=r(Pje,"from_pretrained()"),Pje.forEach(t),xgo=r(wN," class method."),wN.forEach(t),$go=i(Et),Sk=n(Et,"P",{});var AN=s(Sk);kgo=r(AN,"This class cannot be instantiated directly using "),Yhe=n(AN,"CODE",{});var Bje=s(Yhe);Sgo=r(Bje,"__init__()"),Bje.forEach(t),Rgo=r(AN," (throws an error)."),AN.forEach(t),Pgo=i(Et),Vr=n(Et,"DIV",{class:!0});var Ct=s(Vr);T(Rk.$$.fragment,Ct),Bgo=i(Ct),Zhe=n(Ct,"P",{});var Ije=s(Zhe);Igo=r(Ije,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Ije.forEach(t),Ngo=i(Ct),Id=n(Ct,"P",{});var Kf=s(Id);qgo=r(Kf,"The configuration class to instantiate is selected based on the "),Khe=n(Kf,"CODE",{});var Nje=s(Khe);jgo=r(Nje,"model_type"),Nje.forEach(t),Dgo=r(Kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),eue=n(Kf,"CODE",{});var qje=s(eue);Ggo=r(qje,"pretrained_model_name_or_path"),qje.forEach(t),Ogo=r(Kf,":"),Kf.forEach(t),Vgo=i(Ct),A=n(Ct,"UL",{});var L=s(A);ig=n(L,"LI",{});var G9=s(ig);oue=n(G9,"STRONG",{});var jje=s(oue);Xgo=r(jje,"albert"),jje.forEach(t),zgo=r(G9," \u2014 "),oj=n(G9,"A",{href:!0});var Dje=s(oj);Qgo=r(Dje,"AlbertConfig"),Dje.forEach(t),Wgo=r(G9," (ALBERT model)"),G9.forEach(t),Ugo=i(L),dg=n(L,"LI",{});var O9=s(dg);rue=n(O9,"STRONG",{});var Gje=s(rue);Hgo=r(Gje,"bart"),Gje.forEach(t),Jgo=r(O9," \u2014 "),rj=n(O9,"A",{href:!0});var Oje=s(rj);Ygo=r(Oje,"BartConfig"),Oje.forEach(t),Zgo=r(O9," (BART model)"),O9.forEach(t),Kgo=i(L),mg=n(L,"LI",{});var V9=s(mg);tue=n(V9,"STRONG",{});var Vje=s(tue);eho=r(Vje,"beit"),Vje.forEach(t),oho=r(V9," \u2014 "),tj=n(V9,"A",{href:!0});var Xje=s(tj);rho=r(Xje,"BeitConfig"),Xje.forEach(t),tho=r(V9," (BEiT model)"),V9.forEach(t),aho=i(L),cg=n(L,"LI",{});var X9=s(cg);aue=n(X9,"STRONG",{});var zje=s(aue);nho=r(zje,"bert"),zje.forEach(t),sho=r(X9," \u2014 "),aj=n(X9,"A",{href:!0});var Qje=s(aj);lho=r(Qje,"BertConfig"),Qje.forEach(t),iho=r(X9," (BERT model)"),X9.forEach(t),dho=i(L),fg=n(L,"LI",{});var z9=s(fg);nue=n(z9,"STRONG",{});var Wje=s(nue);mho=r(Wje,"bert-generation"),Wje.forEach(t),cho=r(z9," \u2014 "),nj=n(z9,"A",{href:!0});var Uje=s(nj);fho=r(Uje,"BertGenerationConfig"),Uje.forEach(t),gho=r(z9," (Bert Generation model)"),z9.forEach(t),hho=i(L),gg=n(L,"LI",{});var Q9=s(gg);sue=n(Q9,"STRONG",{});var Hje=s(sue);uho=r(Hje,"big_bird"),Hje.forEach(t),pho=r(Q9," \u2014 "),sj=n(Q9,"A",{href:!0});var Jje=s(sj);_ho=r(Jje,"BigBirdConfig"),Jje.forEach(t),bho=r(Q9," (BigBird model)"),Q9.forEach(t),vho=i(L),hg=n(L,"LI",{});var W9=s(hg);lue=n(W9,"STRONG",{});var Yje=s(lue);Fho=r(Yje,"bigbird_pegasus"),Yje.forEach(t),Tho=r(W9," \u2014 "),lj=n(W9,"A",{href:!0});var Zje=s(lj);Mho=r(Zje,"BigBirdPegasusConfig"),Zje.forEach(t),Eho=r(W9," (BigBird-Pegasus model)"),W9.forEach(t),Cho=i(L),ug=n(L,"LI",{});var U9=s(ug);iue=n(U9,"STRONG",{});var Kje=s(iue);who=r(Kje,"blenderbot"),Kje.forEach(t),Aho=r(U9," \u2014 "),ij=n(U9,"A",{href:!0});var eDe=s(ij);Lho=r(eDe,"BlenderbotConfig"),eDe.forEach(t),yho=r(U9," (Blenderbot model)"),U9.forEach(t),xho=i(L),pg=n(L,"LI",{});var H9=s(pg);due=n(H9,"STRONG",{});var oDe=s(due);$ho=r(oDe,"blenderbot-small"),oDe.forEach(t),kho=r(H9," \u2014 "),dj=n(H9,"A",{href:!0});var rDe=s(dj);Sho=r(rDe,"BlenderbotSmallConfig"),rDe.forEach(t),Rho=r(H9," (BlenderbotSmall model)"),H9.forEach(t),Pho=i(L),_g=n(L,"LI",{});var J9=s(_g);mue=n(J9,"STRONG",{});var tDe=s(mue);Bho=r(tDe,"bloom"),tDe.forEach(t),Iho=r(J9," \u2014 "),mj=n(J9,"A",{href:!0});var aDe=s(mj);Nho=r(aDe,"BloomConfig"),aDe.forEach(t),qho=r(J9," (BLOOM model)"),J9.forEach(t),jho=i(L),bg=n(L,"LI",{});var Y9=s(bg);cue=n(Y9,"STRONG",{});var nDe=s(cue);Dho=r(nDe,"camembert"),nDe.forEach(t),Gho=r(Y9," \u2014 "),cj=n(Y9,"A",{href:!0});var sDe=s(cj);Oho=r(sDe,"CamembertConfig"),sDe.forEach(t),Vho=r(Y9," (CamemBERT model)"),Y9.forEach(t),Xho=i(L),vg=n(L,"LI",{});var Z9=s(vg);fue=n(Z9,"STRONG",{});var lDe=s(fue);zho=r(lDe,"canine"),lDe.forEach(t),Qho=r(Z9," \u2014 "),fj=n(Z9,"A",{href:!0});var iDe=s(fj);Who=r(iDe,"CanineConfig"),iDe.forEach(t),Uho=r(Z9," (CANINE model)"),Z9.forEach(t),Hho=i(L),Fg=n(L,"LI",{});var K9=s(Fg);gue=n(K9,"STRONG",{});var dDe=s(gue);Jho=r(dDe,"clip"),dDe.forEach(t),Yho=r(K9," \u2014 "),gj=n(K9,"A",{href:!0});var mDe=s(gj);Zho=r(mDe,"CLIPConfig"),mDe.forEach(t),Kho=r(K9," (CLIP model)"),K9.forEach(t),euo=i(L),Tg=n(L,"LI",{});var ex=s(Tg);hue=n(ex,"STRONG",{});var cDe=s(hue);ouo=r(cDe,"clipseg"),cDe.forEach(t),ruo=r(ex," \u2014 "),hj=n(ex,"A",{href:!0});var fDe=s(hj);tuo=r(fDe,"CLIPSegConfig"),fDe.forEach(t),auo=r(ex," (CLIPSeg model)"),ex.forEach(t),nuo=i(L),Mg=n(L,"LI",{});var ox=s(Mg);uue=n(ox,"STRONG",{});var gDe=s(uue);suo=r(gDe,"codegen"),gDe.forEach(t),luo=r(ox," \u2014 "),uj=n(ox,"A",{href:!0});var hDe=s(uj);iuo=r(hDe,"CodeGenConfig"),hDe.forEach(t),duo=r(ox," (CodeGen model)"),ox.forEach(t),muo=i(L),Eg=n(L,"LI",{});var rx=s(Eg);pue=n(rx,"STRONG",{});var uDe=s(pue);cuo=r(uDe,"conditional_detr"),uDe.forEach(t),fuo=r(rx," \u2014 "),pj=n(rx,"A",{href:!0});var pDe=s(pj);guo=r(pDe,"ConditionalDetrConfig"),pDe.forEach(t),huo=r(rx," (Conditional DETR model)"),rx.forEach(t),uuo=i(L),Cg=n(L,"LI",{});var tx=s(Cg);_ue=n(tx,"STRONG",{});var _De=s(_ue);puo=r(_De,"convbert"),_De.forEach(t),_uo=r(tx," \u2014 "),_j=n(tx,"A",{href:!0});var bDe=s(_j);buo=r(bDe,"ConvBertConfig"),bDe.forEach(t),vuo=r(tx," (ConvBERT model)"),tx.forEach(t),Fuo=i(L),wg=n(L,"LI",{});var ax=s(wg);bue=n(ax,"STRONG",{});var vDe=s(bue);Tuo=r(vDe,"convnext"),vDe.forEach(t),Muo=r(ax," \u2014 "),bj=n(ax,"A",{href:!0});var FDe=s(bj);Euo=r(FDe,"ConvNextConfig"),FDe.forEach(t),Cuo=r(ax," (ConvNeXT model)"),ax.forEach(t),wuo=i(L),Ag=n(L,"LI",{});var nx=s(Ag);vue=n(nx,"STRONG",{});var TDe=s(vue);Auo=r(TDe,"ctrl"),TDe.forEach(t),Luo=r(nx," \u2014 "),vj=n(nx,"A",{href:!0});var MDe=s(vj);yuo=r(MDe,"CTRLConfig"),MDe.forEach(t),xuo=r(nx," (CTRL model)"),nx.forEach(t),$uo=i(L),Lg=n(L,"LI",{});var sx=s(Lg);Fue=n(sx,"STRONG",{});var EDe=s(Fue);kuo=r(EDe,"cvt"),EDe.forEach(t),Suo=r(sx," \u2014 "),Fj=n(sx,"A",{href:!0});var CDe=s(Fj);Ruo=r(CDe,"CvtConfig"),CDe.forEach(t),Puo=r(sx," (CvT model)"),sx.forEach(t),Buo=i(L),yg=n(L,"LI",{});var lx=s(yg);Tue=n(lx,"STRONG",{});var wDe=s(Tue);Iuo=r(wDe,"data2vec-audio"),wDe.forEach(t),Nuo=r(lx," \u2014 "),Tj=n(lx,"A",{href:!0});var ADe=s(Tj);quo=r(ADe,"Data2VecAudioConfig"),ADe.forEach(t),juo=r(lx," (Data2VecAudio model)"),lx.forEach(t),Duo=i(L),xg=n(L,"LI",{});var ix=s(xg);Mue=n(ix,"STRONG",{});var LDe=s(Mue);Guo=r(LDe,"data2vec-text"),LDe.forEach(t),Ouo=r(ix," \u2014 "),Mj=n(ix,"A",{href:!0});var yDe=s(Mj);Vuo=r(yDe,"Data2VecTextConfig"),yDe.forEach(t),Xuo=r(ix," (Data2VecText model)"),ix.forEach(t),zuo=i(L),$g=n(L,"LI",{});var dx=s($g);Eue=n(dx,"STRONG",{});var xDe=s(Eue);Quo=r(xDe,"data2vec-vision"),xDe.forEach(t),Wuo=r(dx," \u2014 "),Ej=n(dx,"A",{href:!0});var $De=s(Ej);Uuo=r($De,"Data2VecVisionConfig"),$De.forEach(t),Huo=r(dx," (Data2VecVision model)"),dx.forEach(t),Juo=i(L),kg=n(L,"LI",{});var mx=s(kg);Cue=n(mx,"STRONG",{});var kDe=s(Cue);Yuo=r(kDe,"deberta"),kDe.forEach(t),Zuo=r(mx," \u2014 "),Cj=n(mx,"A",{href:!0});var SDe=s(Cj);Kuo=r(SDe,"DebertaConfig"),SDe.forEach(t),epo=r(mx," (DeBERTa model)"),mx.forEach(t),opo=i(L),Sg=n(L,"LI",{});var cx=s(Sg);wue=n(cx,"STRONG",{});var RDe=s(wue);rpo=r(RDe,"deberta-v2"),RDe.forEach(t),tpo=r(cx," \u2014 "),wj=n(cx,"A",{href:!0});var PDe=s(wj);apo=r(PDe,"DebertaV2Config"),PDe.forEach(t),npo=r(cx," (DeBERTa-v2 model)"),cx.forEach(t),spo=i(L),Rg=n(L,"LI",{});var fx=s(Rg);Aue=n(fx,"STRONG",{});var BDe=s(Aue);lpo=r(BDe,"decision_transformer"),BDe.forEach(t),ipo=r(fx," \u2014 "),Aj=n(fx,"A",{href:!0});var IDe=s(Aj);dpo=r(IDe,"DecisionTransformerConfig"),IDe.forEach(t),mpo=r(fx," (Decision Transformer model)"),fx.forEach(t),cpo=i(L),Pg=n(L,"LI",{});var gx=s(Pg);Lue=n(gx,"STRONG",{});var NDe=s(Lue);fpo=r(NDe,"deformable_detr"),NDe.forEach(t),gpo=r(gx," \u2014 "),Lj=n(gx,"A",{href:!0});var qDe=s(Lj);hpo=r(qDe,"DeformableDetrConfig"),qDe.forEach(t),upo=r(gx," (Deformable DETR model)"),gx.forEach(t),ppo=i(L),Bg=n(L,"LI",{});var hx=s(Bg);yue=n(hx,"STRONG",{});var jDe=s(yue);_po=r(jDe,"deit"),jDe.forEach(t),bpo=r(hx," \u2014 "),yj=n(hx,"A",{href:!0});var DDe=s(yj);vpo=r(DDe,"DeiTConfig"),DDe.forEach(t),Fpo=r(hx," (DeiT model)"),hx.forEach(t),Tpo=i(L),Ig=n(L,"LI",{});var GDe=s(Ig);xue=n(GDe,"STRONG",{});var WRt=s(xue);Mpo=r(WRt,"detr"),WRt.forEach(t),Epo=r(GDe," \u2014 "),xj=n(GDe,"A",{href:!0});var URt=s(xj);Cpo=r(URt,"DetrConfig"),URt.forEach(t),wpo=r(GDe," (DETR model)"),GDe.forEach(t),Apo=i(L),Ng=n(L,"LI",{});var ODe=s(Ng);$ue=n(ODe,"STRONG",{});var HRt=s($ue);Lpo=r(HRt,"distilbert"),HRt.forEach(t),ypo=r(ODe," \u2014 "),$j=n(ODe,"A",{href:!0});var JRt=s($j);xpo=r(JRt,"DistilBertConfig"),JRt.forEach(t),$po=r(ODe," (DistilBERT model)"),ODe.forEach(t),kpo=i(L),qg=n(L,"LI",{});var VDe=s(qg);kue=n(VDe,"STRONG",{});var YRt=s(kue);Spo=r(YRt,"donut-swin"),YRt.forEach(t),Rpo=r(VDe," \u2014 "),kj=n(VDe,"A",{href:!0});var ZRt=s(kj);Ppo=r(ZRt,"DonutSwinConfig"),ZRt.forEach(t),Bpo=r(VDe," (DonutSwin model)"),VDe.forEach(t),Ipo=i(L),jg=n(L,"LI",{});var XDe=s(jg);Sue=n(XDe,"STRONG",{});var KRt=s(Sue);Npo=r(KRt,"dpr"),KRt.forEach(t),qpo=r(XDe," \u2014 "),Sj=n(XDe,"A",{href:!0});var ePt=s(Sj);jpo=r(ePt,"DPRConfig"),ePt.forEach(t),Dpo=r(XDe," (DPR model)"),XDe.forEach(t),Gpo=i(L),Dg=n(L,"LI",{});var zDe=s(Dg);Rue=n(zDe,"STRONG",{});var oPt=s(Rue);Opo=r(oPt,"dpt"),oPt.forEach(t),Vpo=r(zDe," \u2014 "),Rj=n(zDe,"A",{href:!0});var rPt=s(Rj);Xpo=r(rPt,"DPTConfig"),rPt.forEach(t),zpo=r(zDe," (DPT model)"),zDe.forEach(t),Qpo=i(L),Gg=n(L,"LI",{});var QDe=s(Gg);Pue=n(QDe,"STRONG",{});var tPt=s(Pue);Wpo=r(tPt,"electra"),tPt.forEach(t),Upo=r(QDe," \u2014 "),Pj=n(QDe,"A",{href:!0});var aPt=s(Pj);Hpo=r(aPt,"ElectraConfig"),aPt.forEach(t),Jpo=r(QDe," (ELECTRA model)"),QDe.forEach(t),Ypo=i(L),Og=n(L,"LI",{});var WDe=s(Og);Bue=n(WDe,"STRONG",{});var nPt=s(Bue);Zpo=r(nPt,"encoder-decoder"),nPt.forEach(t),Kpo=r(WDe," \u2014 "),Bj=n(WDe,"A",{href:!0});var sPt=s(Bj);e_o=r(sPt,"EncoderDecoderConfig"),sPt.forEach(t),o_o=r(WDe," (Encoder decoder model)"),WDe.forEach(t),r_o=i(L),Vg=n(L,"LI",{});var UDe=s(Vg);Iue=n(UDe,"STRONG",{});var lPt=s(Iue);t_o=r(lPt,"ernie"),lPt.forEach(t),a_o=r(UDe," \u2014 "),Ij=n(UDe,"A",{href:!0});var iPt=s(Ij);n_o=r(iPt,"ErnieConfig"),iPt.forEach(t),s_o=r(UDe," (ERNIE model)"),UDe.forEach(t),l_o=i(L),Xg=n(L,"LI",{});var HDe=s(Xg);Nue=n(HDe,"STRONG",{});var dPt=s(Nue);i_o=r(dPt,"esm"),dPt.forEach(t),d_o=r(HDe," \u2014 "),Nj=n(HDe,"A",{href:!0});var mPt=s(Nj);m_o=r(mPt,"EsmConfig"),mPt.forEach(t),c_o=r(HDe," (ESM model)"),HDe.forEach(t),f_o=i(L),zg=n(L,"LI",{});var JDe=s(zg);que=n(JDe,"STRONG",{});var cPt=s(que);g_o=r(cPt,"flaubert"),cPt.forEach(t),h_o=r(JDe," \u2014 "),qj=n(JDe,"A",{href:!0});var fPt=s(qj);u_o=r(fPt,"FlaubertConfig"),fPt.forEach(t),p_o=r(JDe," (FlauBERT model)"),JDe.forEach(t),__o=i(L),Qg=n(L,"LI",{});var YDe=s(Qg);jue=n(YDe,"STRONG",{});var gPt=s(jue);b_o=r(gPt,"flava"),gPt.forEach(t),v_o=r(YDe," \u2014 "),jj=n(YDe,"A",{href:!0});var hPt=s(jj);F_o=r(hPt,"FlavaConfig"),hPt.forEach(t),T_o=r(YDe," (FLAVA model)"),YDe.forEach(t),M_o=i(L),Wg=n(L,"LI",{});var ZDe=s(Wg);Due=n(ZDe,"STRONG",{});var uPt=s(Due);E_o=r(uPt,"fnet"),uPt.forEach(t),C_o=r(ZDe," \u2014 "),Dj=n(ZDe,"A",{href:!0});var pPt=s(Dj);w_o=r(pPt,"FNetConfig"),pPt.forEach(t),A_o=r(ZDe," (FNet model)"),ZDe.forEach(t),L_o=i(L),Ug=n(L,"LI",{});var KDe=s(Ug);Gue=n(KDe,"STRONG",{});var _Pt=s(Gue);y_o=r(_Pt,"fsmt"),_Pt.forEach(t),x_o=r(KDe," \u2014 "),Gj=n(KDe,"A",{href:!0});var bPt=s(Gj);$_o=r(bPt,"FSMTConfig"),bPt.forEach(t),k_o=r(KDe," (FairSeq Machine-Translation model)"),KDe.forEach(t),S_o=i(L),Hg=n(L,"LI",{});var eGe=s(Hg);Oue=n(eGe,"STRONG",{});var vPt=s(Oue);R_o=r(vPt,"funnel"),vPt.forEach(t),P_o=r(eGe," \u2014 "),Oj=n(eGe,"A",{href:!0});var FPt=s(Oj);B_o=r(FPt,"FunnelConfig"),FPt.forEach(t),I_o=r(eGe," (Funnel Transformer model)"),eGe.forEach(t),N_o=i(L),Jg=n(L,"LI",{});var oGe=s(Jg);Vue=n(oGe,"STRONG",{});var TPt=s(Vue);q_o=r(TPt,"glpn"),TPt.forEach(t),j_o=r(oGe," \u2014 "),Vj=n(oGe,"A",{href:!0});var MPt=s(Vj);D_o=r(MPt,"GLPNConfig"),MPt.forEach(t),G_o=r(oGe," (GLPN model)"),oGe.forEach(t),O_o=i(L),Yg=n(L,"LI",{});var rGe=s(Yg);Xue=n(rGe,"STRONG",{});var EPt=s(Xue);V_o=r(EPt,"gpt2"),EPt.forEach(t),X_o=r(rGe," \u2014 "),Xj=n(rGe,"A",{href:!0});var CPt=s(Xj);z_o=r(CPt,"GPT2Config"),CPt.forEach(t),Q_o=r(rGe," (OpenAI GPT-2 model)"),rGe.forEach(t),W_o=i(L),Zg=n(L,"LI",{});var tGe=s(Zg);zue=n(tGe,"STRONG",{});var wPt=s(zue);U_o=r(wPt,"gpt_neo"),wPt.forEach(t),H_o=r(tGe," \u2014 "),zj=n(tGe,"A",{href:!0});var APt=s(zj);J_o=r(APt,"GPTNeoConfig"),APt.forEach(t),Y_o=r(tGe," (GPT Neo model)"),tGe.forEach(t),Z_o=i(L),Kg=n(L,"LI",{});var aGe=s(Kg);Que=n(aGe,"STRONG",{});var LPt=s(Que);K_o=r(LPt,"gpt_neox"),LPt.forEach(t),e1o=r(aGe," \u2014 "),Qj=n(aGe,"A",{href:!0});var yPt=s(Qj);o1o=r(yPt,"GPTNeoXConfig"),yPt.forEach(t),r1o=r(aGe," (GPT NeoX model)"),aGe.forEach(t),t1o=i(L),eh=n(L,"LI",{});var nGe=s(eh);Wue=n(nGe,"STRONG",{});var xPt=s(Wue);a1o=r(xPt,"gpt_neox_japanese"),xPt.forEach(t),n1o=r(nGe," \u2014 "),Wj=n(nGe,"A",{href:!0});var $Pt=s(Wj);s1o=r($Pt,"GPTNeoXJapaneseConfig"),$Pt.forEach(t),l1o=r(nGe," (GPT NeoX Japanese model)"),nGe.forEach(t),i1o=i(L),oh=n(L,"LI",{});var sGe=s(oh);Uue=n(sGe,"STRONG",{});var kPt=s(Uue);d1o=r(kPt,"gptj"),kPt.forEach(t),m1o=r(sGe," \u2014 "),Uj=n(sGe,"A",{href:!0});var SPt=s(Uj);c1o=r(SPt,"GPTJConfig"),SPt.forEach(t),f1o=r(sGe," (GPT-J model)"),sGe.forEach(t),g1o=i(L),rh=n(L,"LI",{});var lGe=s(rh);Hue=n(lGe,"STRONG",{});var RPt=s(Hue);h1o=r(RPt,"groupvit"),RPt.forEach(t),u1o=r(lGe," \u2014 "),Hj=n(lGe,"A",{href:!0});var PPt=s(Hj);p1o=r(PPt,"GroupViTConfig"),PPt.forEach(t),_1o=r(lGe," (GroupViT model)"),lGe.forEach(t),b1o=i(L),th=n(L,"LI",{});var iGe=s(th);Jue=n(iGe,"STRONG",{});var BPt=s(Jue);v1o=r(BPt,"hubert"),BPt.forEach(t),F1o=r(iGe," \u2014 "),Jj=n(iGe,"A",{href:!0});var IPt=s(Jj);T1o=r(IPt,"HubertConfig"),IPt.forEach(t),M1o=r(iGe," (Hubert model)"),iGe.forEach(t),E1o=i(L),ah=n(L,"LI",{});var dGe=s(ah);Yue=n(dGe,"STRONG",{});var NPt=s(Yue);C1o=r(NPt,"ibert"),NPt.forEach(t),w1o=r(dGe," \u2014 "),Yj=n(dGe,"A",{href:!0});var qPt=s(Yj);A1o=r(qPt,"IBertConfig"),qPt.forEach(t),L1o=r(dGe," (I-BERT model)"),dGe.forEach(t),y1o=i(L),nh=n(L,"LI",{});var mGe=s(nh);Zue=n(mGe,"STRONG",{});var jPt=s(Zue);x1o=r(jPt,"imagegpt"),jPt.forEach(t),$1o=r(mGe," \u2014 "),Zj=n(mGe,"A",{href:!0});var DPt=s(Zj);k1o=r(DPt,"ImageGPTConfig"),DPt.forEach(t),S1o=r(mGe," (ImageGPT model)"),mGe.forEach(t),R1o=i(L),sh=n(L,"LI",{});var cGe=s(sh);Kue=n(cGe,"STRONG",{});var GPt=s(Kue);P1o=r(GPt,"jukebox"),GPt.forEach(t),B1o=r(cGe," \u2014 "),Kj=n(cGe,"A",{href:!0});var OPt=s(Kj);I1o=r(OPt,"JukeboxConfig"),OPt.forEach(t),N1o=r(cGe," (Jukebox model)"),cGe.forEach(t),q1o=i(L),lh=n(L,"LI",{});var fGe=s(lh);epe=n(fGe,"STRONG",{});var VPt=s(epe);j1o=r(VPt,"layoutlm"),VPt.forEach(t),D1o=r(fGe," \u2014 "),eD=n(fGe,"A",{href:!0});var XPt=s(eD);G1o=r(XPt,"LayoutLMConfig"),XPt.forEach(t),O1o=r(fGe," (LayoutLM model)"),fGe.forEach(t),V1o=i(L),ih=n(L,"LI",{});var gGe=s(ih);ope=n(gGe,"STRONG",{});var zPt=s(ope);X1o=r(zPt,"layoutlmv2"),zPt.forEach(t),z1o=r(gGe," \u2014 "),oD=n(gGe,"A",{href:!0});var QPt=s(oD);Q1o=r(QPt,"LayoutLMv2Config"),QPt.forEach(t),W1o=r(gGe," (LayoutLMv2 model)"),gGe.forEach(t),U1o=i(L),dh=n(L,"LI",{});var hGe=s(dh);rpe=n(hGe,"STRONG",{});var WPt=s(rpe);H1o=r(WPt,"layoutlmv3"),WPt.forEach(t),J1o=r(hGe," \u2014 "),rD=n(hGe,"A",{href:!0});var UPt=s(rD);Y1o=r(UPt,"LayoutLMv3Config"),UPt.forEach(t),Z1o=r(hGe," (LayoutLMv3 model)"),hGe.forEach(t),K1o=i(L),mh=n(L,"LI",{});var uGe=s(mh);tpe=n(uGe,"STRONG",{});var HPt=s(tpe);e2o=r(HPt,"led"),HPt.forEach(t),o2o=r(uGe," \u2014 "),tD=n(uGe,"A",{href:!0});var JPt=s(tD);r2o=r(JPt,"LEDConfig"),JPt.forEach(t),t2o=r(uGe," (LED model)"),uGe.forEach(t),a2o=i(L),ch=n(L,"LI",{});var pGe=s(ch);ape=n(pGe,"STRONG",{});var YPt=s(ape);n2o=r(YPt,"levit"),YPt.forEach(t),s2o=r(pGe," \u2014 "),aD=n(pGe,"A",{href:!0});var ZPt=s(aD);l2o=r(ZPt,"LevitConfig"),ZPt.forEach(t),i2o=r(pGe," (LeViT model)"),pGe.forEach(t),d2o=i(L),fh=n(L,"LI",{});var _Ge=s(fh);npe=n(_Ge,"STRONG",{});var KPt=s(npe);m2o=r(KPt,"lilt"),KPt.forEach(t),c2o=r(_Ge," \u2014 "),nD=n(_Ge,"A",{href:!0});var eBt=s(nD);f2o=r(eBt,"LiltConfig"),eBt.forEach(t),g2o=r(_Ge," (LiLT model)"),_Ge.forEach(t),h2o=i(L),gh=n(L,"LI",{});var bGe=s(gh);spe=n(bGe,"STRONG",{});var oBt=s(spe);u2o=r(oBt,"longformer"),oBt.forEach(t),p2o=r(bGe," \u2014 "),sD=n(bGe,"A",{href:!0});var rBt=s(sD);_2o=r(rBt,"LongformerConfig"),rBt.forEach(t),b2o=r(bGe," (Longformer model)"),bGe.forEach(t),v2o=i(L),hh=n(L,"LI",{});var vGe=s(hh);lpe=n(vGe,"STRONG",{});var tBt=s(lpe);F2o=r(tBt,"longt5"),tBt.forEach(t),T2o=r(vGe," \u2014 "),lD=n(vGe,"A",{href:!0});var aBt=s(lD);M2o=r(aBt,"LongT5Config"),aBt.forEach(t),E2o=r(vGe," (LongT5 model)"),vGe.forEach(t),C2o=i(L),uh=n(L,"LI",{});var FGe=s(uh);ipe=n(FGe,"STRONG",{});var nBt=s(ipe);w2o=r(nBt,"luke"),nBt.forEach(t),A2o=r(FGe," \u2014 "),iD=n(FGe,"A",{href:!0});var sBt=s(iD);L2o=r(sBt,"LukeConfig"),sBt.forEach(t),y2o=r(FGe," (LUKE model)"),FGe.forEach(t),x2o=i(L),ph=n(L,"LI",{});var TGe=s(ph);dpe=n(TGe,"STRONG",{});var lBt=s(dpe);$2o=r(lBt,"lxmert"),lBt.forEach(t),k2o=r(TGe," \u2014 "),dD=n(TGe,"A",{href:!0});var iBt=s(dD);S2o=r(iBt,"LxmertConfig"),iBt.forEach(t),R2o=r(TGe," (LXMERT model)"),TGe.forEach(t),P2o=i(L),_h=n(L,"LI",{});var MGe=s(_h);mpe=n(MGe,"STRONG",{});var dBt=s(mpe);B2o=r(dBt,"m2m_100"),dBt.forEach(t),I2o=r(MGe," \u2014 "),mD=n(MGe,"A",{href:!0});var mBt=s(mD);N2o=r(mBt,"M2M100Config"),mBt.forEach(t),q2o=r(MGe," (M2M100 model)"),MGe.forEach(t),j2o=i(L),bh=n(L,"LI",{});var EGe=s(bh);cpe=n(EGe,"STRONG",{});var cBt=s(cpe);D2o=r(cBt,"marian"),cBt.forEach(t),G2o=r(EGe," \u2014 "),cD=n(EGe,"A",{href:!0});var fBt=s(cD);O2o=r(fBt,"MarianConfig"),fBt.forEach(t),V2o=r(EGe," (Marian model)"),EGe.forEach(t),X2o=i(L),vh=n(L,"LI",{});var CGe=s(vh);fpe=n(CGe,"STRONG",{});var gBt=s(fpe);z2o=r(gBt,"markuplm"),gBt.forEach(t),Q2o=r(CGe," \u2014 "),fD=n(CGe,"A",{href:!0});var hBt=s(fD);W2o=r(hBt,"MarkupLMConfig"),hBt.forEach(t),U2o=r(CGe," (MarkupLM model)"),CGe.forEach(t),H2o=i(L),Fh=n(L,"LI",{});var wGe=s(Fh);gpe=n(wGe,"STRONG",{});var uBt=s(gpe);J2o=r(uBt,"maskformer"),uBt.forEach(t),Y2o=r(wGe," \u2014 "),gD=n(wGe,"A",{href:!0});var pBt=s(gD);Z2o=r(pBt,"MaskFormerConfig"),pBt.forEach(t),K2o=r(wGe," (MaskFormer model)"),wGe.forEach(t),ebo=i(L),Th=n(L,"LI",{});var AGe=s(Th);hpe=n(AGe,"STRONG",{});var _Bt=s(hpe);obo=r(_Bt,"mbart"),_Bt.forEach(t),rbo=r(AGe," \u2014 "),hD=n(AGe,"A",{href:!0});var bBt=s(hD);tbo=r(bBt,"MBartConfig"),bBt.forEach(t),abo=r(AGe," (mBART model)"),AGe.forEach(t),nbo=i(L),Mh=n(L,"LI",{});var LGe=s(Mh);upe=n(LGe,"STRONG",{});var vBt=s(upe);sbo=r(vBt,"mctct"),vBt.forEach(t),lbo=r(LGe," \u2014 "),uD=n(LGe,"A",{href:!0});var FBt=s(uD);ibo=r(FBt,"MCTCTConfig"),FBt.forEach(t),dbo=r(LGe," (M-CTC-T model)"),LGe.forEach(t),mbo=i(L),Eh=n(L,"LI",{});var yGe=s(Eh);ppe=n(yGe,"STRONG",{});var TBt=s(ppe);cbo=r(TBt,"megatron-bert"),TBt.forEach(t),fbo=r(yGe," \u2014 "),pD=n(yGe,"A",{href:!0});var MBt=s(pD);gbo=r(MBt,"MegatronBertConfig"),MBt.forEach(t),hbo=r(yGe," (Megatron-BERT model)"),yGe.forEach(t),ubo=i(L),Ch=n(L,"LI",{});var xGe=s(Ch);_pe=n(xGe,"STRONG",{});var EBt=s(_pe);pbo=r(EBt,"mobilebert"),EBt.forEach(t),_bo=r(xGe," \u2014 "),_D=n(xGe,"A",{href:!0});var CBt=s(_D);bbo=r(CBt,"MobileBertConfig"),CBt.forEach(t),vbo=r(xGe," (MobileBERT model)"),xGe.forEach(t),Fbo=i(L),wh=n(L,"LI",{});var $Ge=s(wh);bpe=n($Ge,"STRONG",{});var wBt=s(bpe);Tbo=r(wBt,"mobilenet_v2"),wBt.forEach(t),Mbo=r($Ge," \u2014 "),bD=n($Ge,"A",{href:!0});var ABt=s(bD);Ebo=r(ABt,"MobileNetV2Config"),ABt.forEach(t),Cbo=r($Ge," (MobileNetV2 model)"),$Ge.forEach(t),wbo=i(L),Ah=n(L,"LI",{});var kGe=s(Ah);vpe=n(kGe,"STRONG",{});var LBt=s(vpe);Abo=r(LBt,"mobilevit"),LBt.forEach(t),Lbo=r(kGe," \u2014 "),vD=n(kGe,"A",{href:!0});var yBt=s(vD);ybo=r(yBt,"MobileViTConfig"),yBt.forEach(t),xbo=r(kGe," (MobileViT model)"),kGe.forEach(t),$bo=i(L),Lh=n(L,"LI",{});var SGe=s(Lh);Fpe=n(SGe,"STRONG",{});var xBt=s(Fpe);kbo=r(xBt,"mpnet"),xBt.forEach(t),Sbo=r(SGe," \u2014 "),FD=n(SGe,"A",{href:!0});var $Bt=s(FD);Rbo=r($Bt,"MPNetConfig"),$Bt.forEach(t),Pbo=r(SGe," (MPNet model)"),SGe.forEach(t),Bbo=i(L),yh=n(L,"LI",{});var RGe=s(yh);Tpe=n(RGe,"STRONG",{});var kBt=s(Tpe);Ibo=r(kBt,"mt5"),kBt.forEach(t),Nbo=r(RGe," \u2014 "),TD=n(RGe,"A",{href:!0});var SBt=s(TD);qbo=r(SBt,"MT5Config"),SBt.forEach(t),jbo=r(RGe," (MT5 model)"),RGe.forEach(t),Dbo=i(L),xh=n(L,"LI",{});var PGe=s(xh);Mpe=n(PGe,"STRONG",{});var RBt=s(Mpe);Gbo=r(RBt,"mvp"),RBt.forEach(t),Obo=r(PGe," \u2014 "),MD=n(PGe,"A",{href:!0});var PBt=s(MD);Vbo=r(PBt,"MvpConfig"),PBt.forEach(t),Xbo=r(PGe," (MVP model)"),PGe.forEach(t),zbo=i(L),$h=n(L,"LI",{});var BGe=s($h);Epe=n(BGe,"STRONG",{});var BBt=s(Epe);Qbo=r(BBt,"nezha"),BBt.forEach(t),Wbo=r(BGe," \u2014 "),ED=n(BGe,"A",{href:!0});var IBt=s(ED);Ubo=r(IBt,"NezhaConfig"),IBt.forEach(t),Hbo=r(BGe," (Nezha model)"),BGe.forEach(t),Jbo=i(L),kh=n(L,"LI",{});var IGe=s(kh);Cpe=n(IGe,"STRONG",{});var NBt=s(Cpe);Ybo=r(NBt,"nystromformer"),NBt.forEach(t),Zbo=r(IGe," \u2014 "),CD=n(IGe,"A",{href:!0});var qBt=s(CD);Kbo=r(qBt,"NystromformerConfig"),qBt.forEach(t),evo=r(IGe," (Nystr\xF6mformer model)"),IGe.forEach(t),ovo=i(L),Sh=n(L,"LI",{});var NGe=s(Sh);wpe=n(NGe,"STRONG",{});var jBt=s(wpe);rvo=r(jBt,"openai-gpt"),jBt.forEach(t),tvo=r(NGe," \u2014 "),wD=n(NGe,"A",{href:!0});var DBt=s(wD);avo=r(DBt,"OpenAIGPTConfig"),DBt.forEach(t),nvo=r(NGe," (OpenAI GPT model)"),NGe.forEach(t),svo=i(L),Rh=n(L,"LI",{});var qGe=s(Rh);Ape=n(qGe,"STRONG",{});var GBt=s(Ape);lvo=r(GBt,"opt"),GBt.forEach(t),ivo=r(qGe," \u2014 "),AD=n(qGe,"A",{href:!0});var OBt=s(AD);dvo=r(OBt,"OPTConfig"),OBt.forEach(t),mvo=r(qGe," (OPT model)"),qGe.forEach(t),cvo=i(L),Ph=n(L,"LI",{});var jGe=s(Ph);Lpe=n(jGe,"STRONG",{});var VBt=s(Lpe);fvo=r(VBt,"owlvit"),VBt.forEach(t),gvo=r(jGe," \u2014 "),LD=n(jGe,"A",{href:!0});var XBt=s(LD);hvo=r(XBt,"OwlViTConfig"),XBt.forEach(t),uvo=r(jGe," (OWL-ViT model)"),jGe.forEach(t),pvo=i(L),Bh=n(L,"LI",{});var DGe=s(Bh);ype=n(DGe,"STRONG",{});var zBt=s(ype);_vo=r(zBt,"pegasus"),zBt.forEach(t),bvo=r(DGe," \u2014 "),yD=n(DGe,"A",{href:!0});var QBt=s(yD);vvo=r(QBt,"PegasusConfig"),QBt.forEach(t),Fvo=r(DGe," (Pegasus model)"),DGe.forEach(t),Tvo=i(L),Ih=n(L,"LI",{});var GGe=s(Ih);xpe=n(GGe,"STRONG",{});var WBt=s(xpe);Mvo=r(WBt,"pegasus_x"),WBt.forEach(t),Evo=r(GGe," \u2014 "),xD=n(GGe,"A",{href:!0});var UBt=s(xD);Cvo=r(UBt,"PegasusXConfig"),UBt.forEach(t),wvo=r(GGe," (PEGASUS-X model)"),GGe.forEach(t),Avo=i(L),Nh=n(L,"LI",{});var OGe=s(Nh);$pe=n(OGe,"STRONG",{});var HBt=s($pe);Lvo=r(HBt,"perceiver"),HBt.forEach(t),yvo=r(OGe," \u2014 "),$D=n(OGe,"A",{href:!0});var JBt=s($D);xvo=r(JBt,"PerceiverConfig"),JBt.forEach(t),$vo=r(OGe," (Perceiver model)"),OGe.forEach(t),kvo=i(L),qh=n(L,"LI",{});var VGe=s(qh);kpe=n(VGe,"STRONG",{});var YBt=s(kpe);Svo=r(YBt,"plbart"),YBt.forEach(t),Rvo=r(VGe," \u2014 "),kD=n(VGe,"A",{href:!0});var ZBt=s(kD);Pvo=r(ZBt,"PLBartConfig"),ZBt.forEach(t),Bvo=r(VGe," (PLBart model)"),VGe.forEach(t),Ivo=i(L),jh=n(L,"LI",{});var XGe=s(jh);Spe=n(XGe,"STRONG",{});var KBt=s(Spe);Nvo=r(KBt,"poolformer"),KBt.forEach(t),qvo=r(XGe," \u2014 "),SD=n(XGe,"A",{href:!0});var eIt=s(SD);jvo=r(eIt,"PoolFormerConfig"),eIt.forEach(t),Dvo=r(XGe," (PoolFormer model)"),XGe.forEach(t),Gvo=i(L),Dh=n(L,"LI",{});var zGe=s(Dh);Rpe=n(zGe,"STRONG",{});var oIt=s(Rpe);Ovo=r(oIt,"prophetnet"),oIt.forEach(t),Vvo=r(zGe," \u2014 "),RD=n(zGe,"A",{href:!0});var rIt=s(RD);Xvo=r(rIt,"ProphetNetConfig"),rIt.forEach(t),zvo=r(zGe," (ProphetNet model)"),zGe.forEach(t),Qvo=i(L),Gh=n(L,"LI",{});var QGe=s(Gh);Ppe=n(QGe,"STRONG",{});var tIt=s(Ppe);Wvo=r(tIt,"qdqbert"),tIt.forEach(t),Uvo=r(QGe," \u2014 "),PD=n(QGe,"A",{href:!0});var aIt=s(PD);Hvo=r(aIt,"QDQBertConfig"),aIt.forEach(t),Jvo=r(QGe," (QDQBert model)"),QGe.forEach(t),Yvo=i(L),Oh=n(L,"LI",{});var WGe=s(Oh);Bpe=n(WGe,"STRONG",{});var nIt=s(Bpe);Zvo=r(nIt,"rag"),nIt.forEach(t),Kvo=r(WGe," \u2014 "),BD=n(WGe,"A",{href:!0});var sIt=s(BD);eFo=r(sIt,"RagConfig"),sIt.forEach(t),oFo=r(WGe," (RAG model)"),WGe.forEach(t),rFo=i(L),Vh=n(L,"LI",{});var UGe=s(Vh);Ipe=n(UGe,"STRONG",{});var lIt=s(Ipe);tFo=r(lIt,"realm"),lIt.forEach(t),aFo=r(UGe," \u2014 "),ID=n(UGe,"A",{href:!0});var iIt=s(ID);nFo=r(iIt,"RealmConfig"),iIt.forEach(t),sFo=r(UGe," (REALM model)"),UGe.forEach(t),lFo=i(L),Xh=n(L,"LI",{});var HGe=s(Xh);Npe=n(HGe,"STRONG",{});var dIt=s(Npe);iFo=r(dIt,"reformer"),dIt.forEach(t),dFo=r(HGe," \u2014 "),ND=n(HGe,"A",{href:!0});var mIt=s(ND);mFo=r(mIt,"ReformerConfig"),mIt.forEach(t),cFo=r(HGe," (Reformer model)"),HGe.forEach(t),fFo=i(L),zh=n(L,"LI",{});var JGe=s(zh);qpe=n(JGe,"STRONG",{});var cIt=s(qpe);gFo=r(cIt,"regnet"),cIt.forEach(t),hFo=r(JGe," \u2014 "),qD=n(JGe,"A",{href:!0});var fIt=s(qD);uFo=r(fIt,"RegNetConfig"),fIt.forEach(t),pFo=r(JGe," (RegNet model)"),JGe.forEach(t),_Fo=i(L),Qh=n(L,"LI",{});var YGe=s(Qh);jpe=n(YGe,"STRONG",{});var gIt=s(jpe);bFo=r(gIt,"rembert"),gIt.forEach(t),vFo=r(YGe," \u2014 "),jD=n(YGe,"A",{href:!0});var hIt=s(jD);FFo=r(hIt,"RemBertConfig"),hIt.forEach(t),TFo=r(YGe," (RemBERT model)"),YGe.forEach(t),MFo=i(L),Wh=n(L,"LI",{});var ZGe=s(Wh);Dpe=n(ZGe,"STRONG",{});var uIt=s(Dpe);EFo=r(uIt,"resnet"),uIt.forEach(t),CFo=r(ZGe," \u2014 "),DD=n(ZGe,"A",{href:!0});var pIt=s(DD);wFo=r(pIt,"ResNetConfig"),pIt.forEach(t),AFo=r(ZGe," (ResNet model)"),ZGe.forEach(t),LFo=i(L),Uh=n(L,"LI",{});var KGe=s(Uh);Gpe=n(KGe,"STRONG",{});var _It=s(Gpe);yFo=r(_It,"retribert"),_It.forEach(t),xFo=r(KGe," \u2014 "),GD=n(KGe,"A",{href:!0});var bIt=s(GD);$Fo=r(bIt,"RetriBertConfig"),bIt.forEach(t),kFo=r(KGe," (RetriBERT model)"),KGe.forEach(t),SFo=i(L),Hh=n(L,"LI",{});var eOe=s(Hh);Ope=n(eOe,"STRONG",{});var vIt=s(Ope);RFo=r(vIt,"roberta"),vIt.forEach(t),PFo=r(eOe," \u2014 "),OD=n(eOe,"A",{href:!0});var FIt=s(OD);BFo=r(FIt,"RobertaConfig"),FIt.forEach(t),IFo=r(eOe," (RoBERTa model)"),eOe.forEach(t),NFo=i(L),Jh=n(L,"LI",{});var oOe=s(Jh);Vpe=n(oOe,"STRONG",{});var TIt=s(Vpe);qFo=r(TIt,"roc_bert"),TIt.forEach(t),jFo=r(oOe," \u2014 "),VD=n(oOe,"A",{href:!0});var MIt=s(VD);DFo=r(MIt,"RoCBertConfig"),MIt.forEach(t),GFo=r(oOe," (RoCBert model)"),oOe.forEach(t),OFo=i(L),Yh=n(L,"LI",{});var rOe=s(Yh);Xpe=n(rOe,"STRONG",{});var EIt=s(Xpe);VFo=r(EIt,"roformer"),EIt.forEach(t),XFo=r(rOe," \u2014 "),XD=n(rOe,"A",{href:!0});var CIt=s(XD);zFo=r(CIt,"RoFormerConfig"),CIt.forEach(t),QFo=r(rOe," (RoFormer model)"),rOe.forEach(t),WFo=i(L),Zh=n(L,"LI",{});var tOe=s(Zh);zpe=n(tOe,"STRONG",{});var wIt=s(zpe);UFo=r(wIt,"segformer"),wIt.forEach(t),HFo=r(tOe," \u2014 "),zD=n(tOe,"A",{href:!0});var AIt=s(zD);JFo=r(AIt,"SegformerConfig"),AIt.forEach(t),YFo=r(tOe," (SegFormer model)"),tOe.forEach(t),ZFo=i(L),Kh=n(L,"LI",{});var aOe=s(Kh);Qpe=n(aOe,"STRONG",{});var LIt=s(Qpe);KFo=r(LIt,"sew"),LIt.forEach(t),eTo=r(aOe," \u2014 "),QD=n(aOe,"A",{href:!0});var yIt=s(QD);oTo=r(yIt,"SEWConfig"),yIt.forEach(t),rTo=r(aOe," (SEW model)"),aOe.forEach(t),tTo=i(L),eu=n(L,"LI",{});var nOe=s(eu);Wpe=n(nOe,"STRONG",{});var xIt=s(Wpe);aTo=r(xIt,"sew-d"),xIt.forEach(t),nTo=r(nOe," \u2014 "),WD=n(nOe,"A",{href:!0});var $It=s(WD);sTo=r($It,"SEWDConfig"),$It.forEach(t),lTo=r(nOe," (SEW-D model)"),nOe.forEach(t),iTo=i(L),ou=n(L,"LI",{});var sOe=s(ou);Upe=n(sOe,"STRONG",{});var kIt=s(Upe);dTo=r(kIt,"speech-encoder-decoder"),kIt.forEach(t),mTo=r(sOe," \u2014 "),UD=n(sOe,"A",{href:!0});var SIt=s(UD);cTo=r(SIt,"SpeechEncoderDecoderConfig"),SIt.forEach(t),fTo=r(sOe," (Speech Encoder decoder model)"),sOe.forEach(t),gTo=i(L),ru=n(L,"LI",{});var lOe=s(ru);Hpe=n(lOe,"STRONG",{});var RIt=s(Hpe);hTo=r(RIt,"speech_to_text"),RIt.forEach(t),uTo=r(lOe," \u2014 "),HD=n(lOe,"A",{href:!0});var PIt=s(HD);pTo=r(PIt,"Speech2TextConfig"),PIt.forEach(t),_To=r(lOe," (Speech2Text model)"),lOe.forEach(t),bTo=i(L),tu=n(L,"LI",{});var iOe=s(tu);Jpe=n(iOe,"STRONG",{});var BIt=s(Jpe);vTo=r(BIt,"speech_to_text_2"),BIt.forEach(t),FTo=r(iOe," \u2014 "),JD=n(iOe,"A",{href:!0});var IIt=s(JD);TTo=r(IIt,"Speech2Text2Config"),IIt.forEach(t),MTo=r(iOe," (Speech2Text2 model)"),iOe.forEach(t),ETo=i(L),au=n(L,"LI",{});var dOe=s(au);Ype=n(dOe,"STRONG",{});var NIt=s(Ype);CTo=r(NIt,"splinter"),NIt.forEach(t),wTo=r(dOe," \u2014 "),YD=n(dOe,"A",{href:!0});var qIt=s(YD);ATo=r(qIt,"SplinterConfig"),qIt.forEach(t),LTo=r(dOe," (Splinter model)"),dOe.forEach(t),yTo=i(L),nu=n(L,"LI",{});var mOe=s(nu);Zpe=n(mOe,"STRONG",{});var jIt=s(Zpe);xTo=r(jIt,"squeezebert"),jIt.forEach(t),$To=r(mOe," \u2014 "),ZD=n(mOe,"A",{href:!0});var DIt=s(ZD);kTo=r(DIt,"SqueezeBertConfig"),DIt.forEach(t),STo=r(mOe," (SqueezeBERT model)"),mOe.forEach(t),RTo=i(L),su=n(L,"LI",{});var cOe=s(su);Kpe=n(cOe,"STRONG",{});var GIt=s(Kpe);PTo=r(GIt,"swin"),GIt.forEach(t),BTo=r(cOe," \u2014 "),KD=n(cOe,"A",{href:!0});var OIt=s(KD);ITo=r(OIt,"SwinConfig"),OIt.forEach(t),NTo=r(cOe," (Swin Transformer model)"),cOe.forEach(t),qTo=i(L),lu=n(L,"LI",{});var fOe=s(lu);e_e=n(fOe,"STRONG",{});var VIt=s(e_e);jTo=r(VIt,"swinv2"),VIt.forEach(t),DTo=r(fOe," \u2014 "),eG=n(fOe,"A",{href:!0});var XIt=s(eG);GTo=r(XIt,"Swinv2Config"),XIt.forEach(t),OTo=r(fOe," (Swin Transformer V2 model)"),fOe.forEach(t),VTo=i(L),iu=n(L,"LI",{});var gOe=s(iu);o_e=n(gOe,"STRONG",{});var zIt=s(o_e);XTo=r(zIt,"switch_transformers"),zIt.forEach(t),zTo=r(gOe," \u2014 "),oG=n(gOe,"A",{href:!0});var QIt=s(oG);QTo=r(QIt,"SwitchTransformersConfig"),QIt.forEach(t),WTo=r(gOe," (SwitchTransformers model)"),gOe.forEach(t),UTo=i(L),du=n(L,"LI",{});var hOe=s(du);r_e=n(hOe,"STRONG",{});var WIt=s(r_e);HTo=r(WIt,"t5"),WIt.forEach(t),JTo=r(hOe," \u2014 "),rG=n(hOe,"A",{href:!0});var UIt=s(rG);YTo=r(UIt,"T5Config"),UIt.forEach(t),ZTo=r(hOe," (T5 model)"),hOe.forEach(t),KTo=i(L),mu=n(L,"LI",{});var uOe=s(mu);t_e=n(uOe,"STRONG",{});var HIt=s(t_e);eMo=r(HIt,"table-transformer"),HIt.forEach(t),oMo=r(uOe," \u2014 "),tG=n(uOe,"A",{href:!0});var JIt=s(tG);rMo=r(JIt,"TableTransformerConfig"),JIt.forEach(t),tMo=r(uOe," (Table Transformer model)"),uOe.forEach(t),aMo=i(L),cu=n(L,"LI",{});var pOe=s(cu);a_e=n(pOe,"STRONG",{});var YIt=s(a_e);nMo=r(YIt,"tapas"),YIt.forEach(t),sMo=r(pOe," \u2014 "),aG=n(pOe,"A",{href:!0});var ZIt=s(aG);lMo=r(ZIt,"TapasConfig"),ZIt.forEach(t),iMo=r(pOe," (TAPAS model)"),pOe.forEach(t),dMo=i(L),fu=n(L,"LI",{});var _Oe=s(fu);n_e=n(_Oe,"STRONG",{});var KIt=s(n_e);mMo=r(KIt,"time_series_transformer"),KIt.forEach(t),cMo=r(_Oe," \u2014 "),nG=n(_Oe,"A",{href:!0});var eNt=s(nG);fMo=r(eNt,"TimeSeriesTransformerConfig"),eNt.forEach(t),gMo=r(_Oe," (Time Series Transformer model)"),_Oe.forEach(t),hMo=i(L),gu=n(L,"LI",{});var bOe=s(gu);s_e=n(bOe,"STRONG",{});var oNt=s(s_e);uMo=r(oNt,"trajectory_transformer"),oNt.forEach(t),pMo=r(bOe," \u2014 "),sG=n(bOe,"A",{href:!0});var rNt=s(sG);_Mo=r(rNt,"TrajectoryTransformerConfig"),rNt.forEach(t),bMo=r(bOe," (Trajectory Transformer model)"),bOe.forEach(t),vMo=i(L),hu=n(L,"LI",{});var vOe=s(hu);l_e=n(vOe,"STRONG",{});var tNt=s(l_e);FMo=r(tNt,"transfo-xl"),tNt.forEach(t),TMo=r(vOe," \u2014 "),lG=n(vOe,"A",{href:!0});var aNt=s(lG);MMo=r(aNt,"TransfoXLConfig"),aNt.forEach(t),EMo=r(vOe," (Transformer-XL model)"),vOe.forEach(t),CMo=i(L),uu=n(L,"LI",{});var FOe=s(uu);i_e=n(FOe,"STRONG",{});var nNt=s(i_e);wMo=r(nNt,"trocr"),nNt.forEach(t),AMo=r(FOe," \u2014 "),iG=n(FOe,"A",{href:!0});var sNt=s(iG);LMo=r(sNt,"TrOCRConfig"),sNt.forEach(t),yMo=r(FOe," (TrOCR model)"),FOe.forEach(t),xMo=i(L),pu=n(L,"LI",{});var TOe=s(pu);d_e=n(TOe,"STRONG",{});var lNt=s(d_e);$Mo=r(lNt,"unispeech"),lNt.forEach(t),kMo=r(TOe," \u2014 "),dG=n(TOe,"A",{href:!0});var iNt=s(dG);SMo=r(iNt,"UniSpeechConfig"),iNt.forEach(t),RMo=r(TOe," (UniSpeech model)"),TOe.forEach(t),PMo=i(L),_u=n(L,"LI",{});var MOe=s(_u);m_e=n(MOe,"STRONG",{});var dNt=s(m_e);BMo=r(dNt,"unispeech-sat"),dNt.forEach(t),IMo=r(MOe," \u2014 "),mG=n(MOe,"A",{href:!0});var mNt=s(mG);NMo=r(mNt,"UniSpeechSatConfig"),mNt.forEach(t),qMo=r(MOe," (UniSpeechSat model)"),MOe.forEach(t),jMo=i(L),bu=n(L,"LI",{});var EOe=s(bu);c_e=n(EOe,"STRONG",{});var cNt=s(c_e);DMo=r(cNt,"van"),cNt.forEach(t),GMo=r(EOe," \u2014 "),cG=n(EOe,"A",{href:!0});var fNt=s(cG);OMo=r(fNt,"VanConfig"),fNt.forEach(t),VMo=r(EOe," (VAN model)"),EOe.forEach(t),XMo=i(L),vu=n(L,"LI",{});var COe=s(vu);f_e=n(COe,"STRONG",{});var gNt=s(f_e);zMo=r(gNt,"videomae"),gNt.forEach(t),QMo=r(COe," \u2014 "),fG=n(COe,"A",{href:!0});var hNt=s(fG);WMo=r(hNt,"VideoMAEConfig"),hNt.forEach(t),UMo=r(COe," (VideoMAE model)"),COe.forEach(t),HMo=i(L),Fu=n(L,"LI",{});var wOe=s(Fu);g_e=n(wOe,"STRONG",{});var uNt=s(g_e);JMo=r(uNt,"vilt"),uNt.forEach(t),YMo=r(wOe," \u2014 "),gG=n(wOe,"A",{href:!0});var pNt=s(gG);ZMo=r(pNt,"ViltConfig"),pNt.forEach(t),KMo=r(wOe," (ViLT model)"),wOe.forEach(t),eEo=i(L),Tu=n(L,"LI",{});var AOe=s(Tu);h_e=n(AOe,"STRONG",{});var _Nt=s(h_e);oEo=r(_Nt,"vision-encoder-decoder"),_Nt.forEach(t),rEo=r(AOe," \u2014 "),hG=n(AOe,"A",{href:!0});var bNt=s(hG);tEo=r(bNt,"VisionEncoderDecoderConfig"),bNt.forEach(t),aEo=r(AOe," (Vision Encoder decoder model)"),AOe.forEach(t),nEo=i(L),Mu=n(L,"LI",{});var LOe=s(Mu);u_e=n(LOe,"STRONG",{});var vNt=s(u_e);sEo=r(vNt,"vision-text-dual-encoder"),vNt.forEach(t),lEo=r(LOe," \u2014 "),uG=n(LOe,"A",{href:!0});var FNt=s(uG);iEo=r(FNt,"VisionTextDualEncoderConfig"),FNt.forEach(t),dEo=r(LOe," (VisionTextDualEncoder model)"),LOe.forEach(t),mEo=i(L),Eu=n(L,"LI",{});var yOe=s(Eu);p_e=n(yOe,"STRONG",{});var TNt=s(p_e);cEo=r(TNt,"visual_bert"),TNt.forEach(t),fEo=r(yOe," \u2014 "),pG=n(yOe,"A",{href:!0});var MNt=s(pG);gEo=r(MNt,"VisualBertConfig"),MNt.forEach(t),hEo=r(yOe," (VisualBERT model)"),yOe.forEach(t),uEo=i(L),Cu=n(L,"LI",{});var xOe=s(Cu);__e=n(xOe,"STRONG",{});var ENt=s(__e);pEo=r(ENt,"vit"),ENt.forEach(t),_Eo=r(xOe," \u2014 "),_G=n(xOe,"A",{href:!0});var CNt=s(_G);bEo=r(CNt,"ViTConfig"),CNt.forEach(t),vEo=r(xOe," (ViT model)"),xOe.forEach(t),FEo=i(L),wu=n(L,"LI",{});var $Oe=s(wu);b_e=n($Oe,"STRONG",{});var wNt=s(b_e);TEo=r(wNt,"vit_mae"),wNt.forEach(t),MEo=r($Oe," \u2014 "),bG=n($Oe,"A",{href:!0});var ANt=s(bG);EEo=r(ANt,"ViTMAEConfig"),ANt.forEach(t),CEo=r($Oe," (ViTMAE model)"),$Oe.forEach(t),wEo=i(L),Au=n(L,"LI",{});var kOe=s(Au);v_e=n(kOe,"STRONG",{});var LNt=s(v_e);AEo=r(LNt,"vit_msn"),LNt.forEach(t),LEo=r(kOe," \u2014 "),vG=n(kOe,"A",{href:!0});var yNt=s(vG);yEo=r(yNt,"ViTMSNConfig"),yNt.forEach(t),xEo=r(kOe," (ViTMSN model)"),kOe.forEach(t),$Eo=i(L),Lu=n(L,"LI",{});var SOe=s(Lu);F_e=n(SOe,"STRONG",{});var xNt=s(F_e);kEo=r(xNt,"wav2vec2"),xNt.forEach(t),SEo=r(SOe," \u2014 "),FG=n(SOe,"A",{href:!0});var $Nt=s(FG);REo=r($Nt,"Wav2Vec2Config"),$Nt.forEach(t),PEo=r(SOe," (Wav2Vec2 model)"),SOe.forEach(t),BEo=i(L),yu=n(L,"LI",{});var ROe=s(yu);T_e=n(ROe,"STRONG",{});var kNt=s(T_e);IEo=r(kNt,"wav2vec2-conformer"),kNt.forEach(t),NEo=r(ROe," \u2014 "),TG=n(ROe,"A",{href:!0});var SNt=s(TG);qEo=r(SNt,"Wav2Vec2ConformerConfig"),SNt.forEach(t),jEo=r(ROe," (Wav2Vec2-Conformer model)"),ROe.forEach(t),DEo=i(L),xu=n(L,"LI",{});var POe=s(xu);M_e=n(POe,"STRONG",{});var RNt=s(M_e);GEo=r(RNt,"wavlm"),RNt.forEach(t),OEo=r(POe," \u2014 "),MG=n(POe,"A",{href:!0});var PNt=s(MG);VEo=r(PNt,"WavLMConfig"),PNt.forEach(t),XEo=r(POe," (WavLM model)"),POe.forEach(t),zEo=i(L),$u=n(L,"LI",{});var BOe=s($u);E_e=n(BOe,"STRONG",{});var BNt=s(E_e);QEo=r(BNt,"whisper"),BNt.forEach(t),WEo=r(BOe," \u2014 "),EG=n(BOe,"A",{href:!0});var INt=s(EG);UEo=r(INt,"WhisperConfig"),INt.forEach(t),HEo=r(BOe," (Whisper model)"),BOe.forEach(t),JEo=i(L),ku=n(L,"LI",{});var IOe=s(ku);C_e=n(IOe,"STRONG",{});var NNt=s(C_e);YEo=r(NNt,"xclip"),NNt.forEach(t),ZEo=r(IOe," \u2014 "),CG=n(IOe,"A",{href:!0});var qNt=s(CG);KEo=r(qNt,"XCLIPConfig"),qNt.forEach(t),e4o=r(IOe," (X-CLIP model)"),IOe.forEach(t),o4o=i(L),Su=n(L,"LI",{});var NOe=s(Su);w_e=n(NOe,"STRONG",{});var jNt=s(w_e);r4o=r(jNt,"xglm"),jNt.forEach(t),t4o=r(NOe," \u2014 "),wG=n(NOe,"A",{href:!0});var DNt=s(wG);a4o=r(DNt,"XGLMConfig"),DNt.forEach(t),n4o=r(NOe," (XGLM model)"),NOe.forEach(t),s4o=i(L),Ru=n(L,"LI",{});var qOe=s(Ru);A_e=n(qOe,"STRONG",{});var GNt=s(A_e);l4o=r(GNt,"xlm"),GNt.forEach(t),i4o=r(qOe," \u2014 "),AG=n(qOe,"A",{href:!0});var ONt=s(AG);d4o=r(ONt,"XLMConfig"),ONt.forEach(t),m4o=r(qOe," (XLM model)"),qOe.forEach(t),c4o=i(L),Pu=n(L,"LI",{});var jOe=s(Pu);L_e=n(jOe,"STRONG",{});var VNt=s(L_e);f4o=r(VNt,"xlm-prophetnet"),VNt.forEach(t),g4o=r(jOe," \u2014 "),LG=n(jOe,"A",{href:!0});var XNt=s(LG);h4o=r(XNt,"XLMProphetNetConfig"),XNt.forEach(t),u4o=r(jOe," (XLM-ProphetNet model)"),jOe.forEach(t),p4o=i(L),Bu=n(L,"LI",{});var DOe=s(Bu);y_e=n(DOe,"STRONG",{});var zNt=s(y_e);_4o=r(zNt,"xlm-roberta"),zNt.forEach(t),b4o=r(DOe," \u2014 "),yG=n(DOe,"A",{href:!0});var QNt=s(yG);v4o=r(QNt,"XLMRobertaConfig"),QNt.forEach(t),F4o=r(DOe," (XLM-RoBERTa model)"),DOe.forEach(t),T4o=i(L),Iu=n(L,"LI",{});var GOe=s(Iu);x_e=n(GOe,"STRONG",{});var WNt=s(x_e);M4o=r(WNt,"xlm-roberta-xl"),WNt.forEach(t),E4o=r(GOe," \u2014 "),xG=n(GOe,"A",{href:!0});var UNt=s(xG);C4o=r(UNt,"XLMRobertaXLConfig"),UNt.forEach(t),w4o=r(GOe," (XLM-RoBERTa-XL model)"),GOe.forEach(t),A4o=i(L),Nu=n(L,"LI",{});var OOe=s(Nu);$_e=n(OOe,"STRONG",{});var HNt=s($_e);L4o=r(HNt,"xlnet"),HNt.forEach(t),y4o=r(OOe," \u2014 "),$G=n(OOe,"A",{href:!0});var JNt=s($G);x4o=r(JNt,"XLNetConfig"),JNt.forEach(t),$4o=r(OOe," (XLNet model)"),OOe.forEach(t),k4o=i(L),qu=n(L,"LI",{});var VOe=s(qu);k_e=n(VOe,"STRONG",{});var YNt=s(k_e);S4o=r(YNt,"yolos"),YNt.forEach(t),R4o=r(VOe," \u2014 "),kG=n(VOe,"A",{href:!0});var ZNt=s(kG);P4o=r(ZNt,"YolosConfig"),ZNt.forEach(t),B4o=r(VOe," (YOLOS model)"),VOe.forEach(t),I4o=i(L),ju=n(L,"LI",{});var XOe=s(ju);S_e=n(XOe,"STRONG",{});var KNt=s(S_e);N4o=r(KNt,"yoso"),KNt.forEach(t),q4o=r(XOe," \u2014 "),SG=n(XOe,"A",{href:!0});var eqt=s(SG);j4o=r(eqt,"YosoConfig"),eqt.forEach(t),D4o=r(XOe," (YOSO model)"),XOe.forEach(t),L.forEach(t),G4o=i(Ct),T(Du.$$.fragment,Ct),Ct.forEach(t),O4o=i(Et),Gu=n(Et,"DIV",{class:!0});var Vmo=s(Gu);T(Pk.$$.fragment,Vmo),V4o=i(Vmo),R_e=n(Vmo,"P",{});var oqt=s(R_e);X4o=r(oqt,"Register a new configuration for this class."),oqt.forEach(t),Vmo.forEach(t),Et.forEach(t),$io=i(c),Nd=n(c,"H2",{class:!0});var Xmo=s(Nd);Ou=n(Xmo,"A",{id:!0,class:!0,href:!0});var rqt=s(Ou);P_e=n(rqt,"SPAN",{});var tqt=s(P_e);T(Bk.$$.fragment,tqt),tqt.forEach(t),rqt.forEach(t),z4o=i(Xmo),B_e=n(Xmo,"SPAN",{});var aqt=s(B_e);Q4o=r(aqt,"AutoTokenizer"),aqt.forEach(t),Xmo.forEach(t),kio=i(c),Io=n(c,"DIV",{class:!0});var Vl=s(Io);T(Ik.$$.fragment,Vl),W4o=i(Vl),Nk=n(Vl,"P",{});var zmo=s(Nk);U4o=r(zmo,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),RG=n(zmo,"A",{href:!0});var nqt=s(RG);H4o=r(nqt,"AutoTokenizer.from_pretrained()"),nqt.forEach(t),J4o=r(zmo," class method."),zmo.forEach(t),Y4o=i(Vl),qk=n(Vl,"P",{});var Qmo=s(qk);Z4o=r(Qmo,"This class cannot be instantiated directly using "),I_e=n(Qmo,"CODE",{});var sqt=s(I_e);K4o=r(sqt,"__init__()"),sqt.forEach(t),eCo=r(Qmo," (throws an error)."),Qmo.forEach(t),oCo=i(Vl),Xr=n(Vl,"DIV",{class:!0});var Xl=s(Xr);T(jk.$$.fragment,Xl),rCo=i(Xl),N_e=n(Xl,"P",{});var lqt=s(N_e);tCo=r(lqt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),lqt.forEach(t),aCo=i(Xl),mn=n(Xl,"P",{});var ux=s(mn);nCo=r(ux,"The tokenizer class to instantiate is selected based on the "),q_e=n(ux,"CODE",{});var iqt=s(q_e);sCo=r(iqt,"model_type"),iqt.forEach(t),lCo=r(ux,` property of the config object (either
passed as an argument or loaded from `),j_e=n(ux,"CODE",{});var dqt=s(j_e);iCo=r(dqt,"pretrained_model_name_or_path"),dqt.forEach(t),dCo=r(ux,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(ux,"CODE",{});var mqt=s(D_e);mCo=r(mqt,"pretrained_model_name_or_path"),mqt.forEach(t),cCo=r(ux,":"),ux.forEach(t),fCo=i(Xl),k=n(Xl,"UL",{});var S=s(k);Ms=n(S,"LI",{});var LN=s(Ms);G_e=n(LN,"STRONG",{});var cqt=s(G_e);gCo=r(cqt,"albert"),cqt.forEach(t),hCo=r(LN," \u2014 "),PG=n(LN,"A",{href:!0});var fqt=s(PG);uCo=r(fqt,"AlbertTokenizer"),fqt.forEach(t),pCo=r(LN," or "),BG=n(LN,"A",{href:!0});var gqt=s(BG);_Co=r(gqt,"AlbertTokenizerFast"),gqt.forEach(t),bCo=r(LN," (ALBERT model)"),LN.forEach(t),vCo=i(S),Es=n(S,"LI",{});var yN=s(Es);O_e=n(yN,"STRONG",{});var hqt=s(O_e);FCo=r(hqt,"bart"),hqt.forEach(t),TCo=r(yN," \u2014 "),IG=n(yN,"A",{href:!0});var uqt=s(IG);MCo=r(uqt,"BartTokenizer"),uqt.forEach(t),ECo=r(yN," or "),NG=n(yN,"A",{href:!0});var pqt=s(NG);CCo=r(pqt,"BartTokenizerFast"),pqt.forEach(t),wCo=r(yN," (BART model)"),yN.forEach(t),ACo=i(S),Cs=n(S,"LI",{});var xN=s(Cs);V_e=n(xN,"STRONG",{});var _qt=s(V_e);LCo=r(_qt,"barthez"),_qt.forEach(t),yCo=r(xN," \u2014 "),qG=n(xN,"A",{href:!0});var bqt=s(qG);xCo=r(bqt,"BarthezTokenizer"),bqt.forEach(t),$Co=r(xN," or "),jG=n(xN,"A",{href:!0});var vqt=s(jG);kCo=r(vqt,"BarthezTokenizerFast"),vqt.forEach(t),SCo=r(xN," (BARThez model)"),xN.forEach(t),RCo=i(S),Vu=n(S,"LI",{});var zOe=s(Vu);X_e=n(zOe,"STRONG",{});var Fqt=s(X_e);PCo=r(Fqt,"bartpho"),Fqt.forEach(t),BCo=r(zOe," \u2014 "),DG=n(zOe,"A",{href:!0});var Tqt=s(DG);ICo=r(Tqt,"BartphoTokenizer"),Tqt.forEach(t),NCo=r(zOe," (BARTpho model)"),zOe.forEach(t),qCo=i(S),ws=n(S,"LI",{});var $N=s(ws);z_e=n($N,"STRONG",{});var Mqt=s(z_e);jCo=r(Mqt,"bert"),Mqt.forEach(t),DCo=r($N," \u2014 "),GG=n($N,"A",{href:!0});var Eqt=s(GG);GCo=r(Eqt,"BertTokenizer"),Eqt.forEach(t),OCo=r($N," or "),OG=n($N,"A",{href:!0});var Cqt=s(OG);VCo=r(Cqt,"BertTokenizerFast"),Cqt.forEach(t),XCo=r($N," (BERT model)"),$N.forEach(t),zCo=i(S),Xu=n(S,"LI",{});var QOe=s(Xu);Q_e=n(QOe,"STRONG",{});var wqt=s(Q_e);QCo=r(wqt,"bert-generation"),wqt.forEach(t),WCo=r(QOe," \u2014 "),VG=n(QOe,"A",{href:!0});var Aqt=s(VG);UCo=r(Aqt,"BertGenerationTokenizer"),Aqt.forEach(t),HCo=r(QOe," (Bert Generation model)"),QOe.forEach(t),JCo=i(S),zu=n(S,"LI",{});var WOe=s(zu);W_e=n(WOe,"STRONG",{});var Lqt=s(W_e);YCo=r(Lqt,"bert-japanese"),Lqt.forEach(t),ZCo=r(WOe," \u2014 "),XG=n(WOe,"A",{href:!0});var yqt=s(XG);KCo=r(yqt,"BertJapaneseTokenizer"),yqt.forEach(t),e3o=r(WOe," (BertJapanese model)"),WOe.forEach(t),o3o=i(S),Qu=n(S,"LI",{});var UOe=s(Qu);U_e=n(UOe,"STRONG",{});var xqt=s(U_e);r3o=r(xqt,"bertweet"),xqt.forEach(t),t3o=r(UOe," \u2014 "),zG=n(UOe,"A",{href:!0});var $qt=s(zG);a3o=r($qt,"BertweetTokenizer"),$qt.forEach(t),n3o=r(UOe," (BERTweet model)"),UOe.forEach(t),s3o=i(S),As=n(S,"LI",{});var kN=s(As);H_e=n(kN,"STRONG",{});var kqt=s(H_e);l3o=r(kqt,"big_bird"),kqt.forEach(t),i3o=r(kN," \u2014 "),QG=n(kN,"A",{href:!0});var Sqt=s(QG);d3o=r(Sqt,"BigBirdTokenizer"),Sqt.forEach(t),m3o=r(kN," or "),WG=n(kN,"A",{href:!0});var Rqt=s(WG);c3o=r(Rqt,"BigBirdTokenizerFast"),Rqt.forEach(t),f3o=r(kN," (BigBird model)"),kN.forEach(t),g3o=i(S),Ls=n(S,"LI",{});var SN=s(Ls);J_e=n(SN,"STRONG",{});var Pqt=s(J_e);h3o=r(Pqt,"bigbird_pegasus"),Pqt.forEach(t),u3o=r(SN," \u2014 "),UG=n(SN,"A",{href:!0});var Bqt=s(UG);p3o=r(Bqt,"PegasusTokenizer"),Bqt.forEach(t),_3o=r(SN," or "),HG=n(SN,"A",{href:!0});var Iqt=s(HG);b3o=r(Iqt,"PegasusTokenizerFast"),Iqt.forEach(t),v3o=r(SN," (BigBird-Pegasus model)"),SN.forEach(t),F3o=i(S),ys=n(S,"LI",{});var RN=s(ys);Y_e=n(RN,"STRONG",{});var Nqt=s(Y_e);T3o=r(Nqt,"blenderbot"),Nqt.forEach(t),M3o=r(RN," \u2014 "),JG=n(RN,"A",{href:!0});var qqt=s(JG);E3o=r(qqt,"BlenderbotTokenizer"),qqt.forEach(t),C3o=r(RN," or "),YG=n(RN,"A",{href:!0});var jqt=s(YG);w3o=r(jqt,"BlenderbotTokenizerFast"),jqt.forEach(t),A3o=r(RN," (Blenderbot model)"),RN.forEach(t),L3o=i(S),Wu=n(S,"LI",{});var HOe=s(Wu);Z_e=n(HOe,"STRONG",{});var Dqt=s(Z_e);y3o=r(Dqt,"blenderbot-small"),Dqt.forEach(t),x3o=r(HOe," \u2014 "),ZG=n(HOe,"A",{href:!0});var Gqt=s(ZG);$3o=r(Gqt,"BlenderbotSmallTokenizer"),Gqt.forEach(t),k3o=r(HOe," (BlenderbotSmall model)"),HOe.forEach(t),S3o=i(S),Uu=n(S,"LI",{});var JOe=s(Uu);K_e=n(JOe,"STRONG",{});var Oqt=s(K_e);R3o=r(Oqt,"bloom"),Oqt.forEach(t),P3o=r(JOe," \u2014 "),KG=n(JOe,"A",{href:!0});var Vqt=s(KG);B3o=r(Vqt,"BloomTokenizerFast"),Vqt.forEach(t),I3o=r(JOe," (BLOOM model)"),JOe.forEach(t),N3o=i(S),Hu=n(S,"LI",{});var YOe=s(Hu);e1e=n(YOe,"STRONG",{});var Xqt=s(e1e);q3o=r(Xqt,"byt5"),Xqt.forEach(t),j3o=r(YOe," \u2014 "),eO=n(YOe,"A",{href:!0});var zqt=s(eO);D3o=r(zqt,"ByT5Tokenizer"),zqt.forEach(t),G3o=r(YOe," (ByT5 model)"),YOe.forEach(t),O3o=i(S),xs=n(S,"LI",{});var PN=s(xs);o1e=n(PN,"STRONG",{});var Qqt=s(o1e);V3o=r(Qqt,"camembert"),Qqt.forEach(t),X3o=r(PN," \u2014 "),oO=n(PN,"A",{href:!0});var Wqt=s(oO);z3o=r(Wqt,"CamembertTokenizer"),Wqt.forEach(t),Q3o=r(PN," or "),rO=n(PN,"A",{href:!0});var Uqt=s(rO);W3o=r(Uqt,"CamembertTokenizerFast"),Uqt.forEach(t),U3o=r(PN," (CamemBERT model)"),PN.forEach(t),H3o=i(S),Ju=n(S,"LI",{});var ZOe=s(Ju);r1e=n(ZOe,"STRONG",{});var Hqt=s(r1e);J3o=r(Hqt,"canine"),Hqt.forEach(t),Y3o=r(ZOe," \u2014 "),tO=n(ZOe,"A",{href:!0});var Jqt=s(tO);Z3o=r(Jqt,"CanineTokenizer"),Jqt.forEach(t),K3o=r(ZOe," (CANINE model)"),ZOe.forEach(t),e5o=i(S),$s=n(S,"LI",{});var BN=s($s);t1e=n(BN,"STRONG",{});var Yqt=s(t1e);o5o=r(Yqt,"clip"),Yqt.forEach(t),r5o=r(BN," \u2014 "),aO=n(BN,"A",{href:!0});var Zqt=s(aO);t5o=r(Zqt,"CLIPTokenizer"),Zqt.forEach(t),a5o=r(BN," or "),nO=n(BN,"A",{href:!0});var Kqt=s(nO);n5o=r(Kqt,"CLIPTokenizerFast"),Kqt.forEach(t),s5o=r(BN," (CLIP model)"),BN.forEach(t),l5o=i(S),ks=n(S,"LI",{});var IN=s(ks);a1e=n(IN,"STRONG",{});var ejt=s(a1e);i5o=r(ejt,"clipseg"),ejt.forEach(t),d5o=r(IN," \u2014 "),sO=n(IN,"A",{href:!0});var ojt=s(sO);m5o=r(ojt,"CLIPTokenizer"),ojt.forEach(t),c5o=r(IN," or "),lO=n(IN,"A",{href:!0});var rjt=s(lO);f5o=r(rjt,"CLIPTokenizerFast"),rjt.forEach(t),g5o=r(IN," (CLIPSeg model)"),IN.forEach(t),h5o=i(S),Ss=n(S,"LI",{});var NN=s(Ss);n1e=n(NN,"STRONG",{});var tjt=s(n1e);u5o=r(tjt,"codegen"),tjt.forEach(t),p5o=r(NN," \u2014 "),iO=n(NN,"A",{href:!0});var ajt=s(iO);_5o=r(ajt,"CodeGenTokenizer"),ajt.forEach(t),b5o=r(NN," or "),dO=n(NN,"A",{href:!0});var njt=s(dO);v5o=r(njt,"CodeGenTokenizerFast"),njt.forEach(t),F5o=r(NN," (CodeGen model)"),NN.forEach(t),T5o=i(S),Rs=n(S,"LI",{});var qN=s(Rs);s1e=n(qN,"STRONG",{});var sjt=s(s1e);M5o=r(sjt,"convbert"),sjt.forEach(t),E5o=r(qN," \u2014 "),mO=n(qN,"A",{href:!0});var ljt=s(mO);C5o=r(ljt,"ConvBertTokenizer"),ljt.forEach(t),w5o=r(qN," or "),cO=n(qN,"A",{href:!0});var ijt=s(cO);A5o=r(ijt,"ConvBertTokenizerFast"),ijt.forEach(t),L5o=r(qN," (ConvBERT model)"),qN.forEach(t),y5o=i(S),Ps=n(S,"LI",{});var jN=s(Ps);l1e=n(jN,"STRONG",{});var djt=s(l1e);x5o=r(djt,"cpm"),djt.forEach(t),$5o=r(jN," \u2014 "),fO=n(jN,"A",{href:!0});var mjt=s(fO);k5o=r(mjt,"CpmTokenizer"),mjt.forEach(t),S5o=r(jN," or "),gO=n(jN,"A",{href:!0});var cjt=s(gO);R5o=r(cjt,"CpmTokenizerFast"),cjt.forEach(t),P5o=r(jN," (CPM model)"),jN.forEach(t),B5o=i(S),Yu=n(S,"LI",{});var KOe=s(Yu);i1e=n(KOe,"STRONG",{});var fjt=s(i1e);I5o=r(fjt,"ctrl"),fjt.forEach(t),N5o=r(KOe," \u2014 "),hO=n(KOe,"A",{href:!0});var gjt=s(hO);q5o=r(gjt,"CTRLTokenizer"),gjt.forEach(t),j5o=r(KOe," (CTRL model)"),KOe.forEach(t),D5o=i(S),Bs=n(S,"LI",{});var DN=s(Bs);d1e=n(DN,"STRONG",{});var hjt=s(d1e);G5o=r(hjt,"data2vec-text"),hjt.forEach(t),O5o=r(DN," \u2014 "),uO=n(DN,"A",{href:!0});var ujt=s(uO);V5o=r(ujt,"RobertaTokenizer"),ujt.forEach(t),X5o=r(DN," or "),pO=n(DN,"A",{href:!0});var pjt=s(pO);z5o=r(pjt,"RobertaTokenizerFast"),pjt.forEach(t),Q5o=r(DN," (Data2VecText model)"),DN.forEach(t),W5o=i(S),Is=n(S,"LI",{});var GN=s(Is);m1e=n(GN,"STRONG",{});var _jt=s(m1e);U5o=r(_jt,"deberta"),_jt.forEach(t),H5o=r(GN," \u2014 "),_O=n(GN,"A",{href:!0});var bjt=s(_O);J5o=r(bjt,"DebertaTokenizer"),bjt.forEach(t),Y5o=r(GN," or "),bO=n(GN,"A",{href:!0});var vjt=s(bO);Z5o=r(vjt,"DebertaTokenizerFast"),vjt.forEach(t),K5o=r(GN," (DeBERTa model)"),GN.forEach(t),e0o=i(S),Ns=n(S,"LI",{});var ON=s(Ns);c1e=n(ON,"STRONG",{});var Fjt=s(c1e);o0o=r(Fjt,"deberta-v2"),Fjt.forEach(t),r0o=r(ON," \u2014 "),vO=n(ON,"A",{href:!0});var Tjt=s(vO);t0o=r(Tjt,"DebertaV2Tokenizer"),Tjt.forEach(t),a0o=r(ON," or "),FO=n(ON,"A",{href:!0});var Mjt=s(FO);n0o=r(Mjt,"DebertaV2TokenizerFast"),Mjt.forEach(t),s0o=r(ON," (DeBERTa-v2 model)"),ON.forEach(t),l0o=i(S),qs=n(S,"LI",{});var VN=s(qs);f1e=n(VN,"STRONG",{});var Ejt=s(f1e);i0o=r(Ejt,"distilbert"),Ejt.forEach(t),d0o=r(VN," \u2014 "),TO=n(VN,"A",{href:!0});var Cjt=s(TO);m0o=r(Cjt,"DistilBertTokenizer"),Cjt.forEach(t),c0o=r(VN," or "),MO=n(VN,"A",{href:!0});var wjt=s(MO);f0o=r(wjt,"DistilBertTokenizerFast"),wjt.forEach(t),g0o=r(VN," (DistilBERT model)"),VN.forEach(t),h0o=i(S),js=n(S,"LI",{});var XN=s(js);g1e=n(XN,"STRONG",{});var Ajt=s(g1e);u0o=r(Ajt,"dpr"),Ajt.forEach(t),p0o=r(XN," \u2014 "),EO=n(XN,"A",{href:!0});var Ljt=s(EO);_0o=r(Ljt,"DPRQuestionEncoderTokenizer"),Ljt.forEach(t),b0o=r(XN," or "),CO=n(XN,"A",{href:!0});var yjt=s(CO);v0o=r(yjt,"DPRQuestionEncoderTokenizerFast"),yjt.forEach(t),F0o=r(XN," (DPR model)"),XN.forEach(t),T0o=i(S),Ds=n(S,"LI",{});var zN=s(Ds);h1e=n(zN,"STRONG",{});var xjt=s(h1e);M0o=r(xjt,"electra"),xjt.forEach(t),E0o=r(zN," \u2014 "),wO=n(zN,"A",{href:!0});var $jt=s(wO);C0o=r($jt,"ElectraTokenizer"),$jt.forEach(t),w0o=r(zN," or "),AO=n(zN,"A",{href:!0});var kjt=s(AO);A0o=r(kjt,"ElectraTokenizerFast"),kjt.forEach(t),L0o=r(zN," (ELECTRA model)"),zN.forEach(t),y0o=i(S),Gs=n(S,"LI",{});var QN=s(Gs);u1e=n(QN,"STRONG",{});var Sjt=s(u1e);x0o=r(Sjt,"ernie"),Sjt.forEach(t),$0o=r(QN," \u2014 "),LO=n(QN,"A",{href:!0});var Rjt=s(LO);k0o=r(Rjt,"BertTokenizer"),Rjt.forEach(t),S0o=r(QN," or "),yO=n(QN,"A",{href:!0});var Pjt=s(yO);R0o=r(Pjt,"BertTokenizerFast"),Pjt.forEach(t),P0o=r(QN," (ERNIE model)"),QN.forEach(t),B0o=i(S),Zu=n(S,"LI",{});var eVe=s(Zu);p1e=n(eVe,"STRONG",{});var Bjt=s(p1e);I0o=r(Bjt,"esm"),Bjt.forEach(t),N0o=r(eVe," \u2014 "),xO=n(eVe,"A",{href:!0});var Ijt=s(xO);q0o=r(Ijt,"EsmTokenizer"),Ijt.forEach(t),j0o=r(eVe," (ESM model)"),eVe.forEach(t),D0o=i(S),Ku=n(S,"LI",{});var oVe=s(Ku);_1e=n(oVe,"STRONG",{});var Njt=s(_1e);G0o=r(Njt,"flaubert"),Njt.forEach(t),O0o=r(oVe," \u2014 "),$O=n(oVe,"A",{href:!0});var qjt=s($O);V0o=r(qjt,"FlaubertTokenizer"),qjt.forEach(t),X0o=r(oVe," (FlauBERT model)"),oVe.forEach(t),z0o=i(S),Os=n(S,"LI",{});var WN=s(Os);b1e=n(WN,"STRONG",{});var jjt=s(b1e);Q0o=r(jjt,"fnet"),jjt.forEach(t),W0o=r(WN," \u2014 "),kO=n(WN,"A",{href:!0});var Djt=s(kO);U0o=r(Djt,"FNetTokenizer"),Djt.forEach(t),H0o=r(WN," or "),SO=n(WN,"A",{href:!0});var Gjt=s(SO);J0o=r(Gjt,"FNetTokenizerFast"),Gjt.forEach(t),Y0o=r(WN," (FNet model)"),WN.forEach(t),Z0o=i(S),ep=n(S,"LI",{});var rVe=s(ep);v1e=n(rVe,"STRONG",{});var Ojt=s(v1e);K0o=r(Ojt,"fsmt"),Ojt.forEach(t),ewo=r(rVe," \u2014 "),RO=n(rVe,"A",{href:!0});var Vjt=s(RO);owo=r(Vjt,"FSMTTokenizer"),Vjt.forEach(t),rwo=r(rVe," (FairSeq Machine-Translation model)"),rVe.forEach(t),two=i(S),Vs=n(S,"LI",{});var UN=s(Vs);F1e=n(UN,"STRONG",{});var Xjt=s(F1e);awo=r(Xjt,"funnel"),Xjt.forEach(t),nwo=r(UN," \u2014 "),PO=n(UN,"A",{href:!0});var zjt=s(PO);swo=r(zjt,"FunnelTokenizer"),zjt.forEach(t),lwo=r(UN," or "),BO=n(UN,"A",{href:!0});var Qjt=s(BO);iwo=r(Qjt,"FunnelTokenizerFast"),Qjt.forEach(t),dwo=r(UN," (Funnel Transformer model)"),UN.forEach(t),mwo=i(S),Xs=n(S,"LI",{});var HN=s(Xs);T1e=n(HN,"STRONG",{});var Wjt=s(T1e);cwo=r(Wjt,"gpt2"),Wjt.forEach(t),fwo=r(HN," \u2014 "),IO=n(HN,"A",{href:!0});var Ujt=s(IO);gwo=r(Ujt,"GPT2Tokenizer"),Ujt.forEach(t),hwo=r(HN," or "),NO=n(HN,"A",{href:!0});var Hjt=s(NO);uwo=r(Hjt,"GPT2TokenizerFast"),Hjt.forEach(t),pwo=r(HN," (OpenAI GPT-2 model)"),HN.forEach(t),_wo=i(S),zs=n(S,"LI",{});var JN=s(zs);M1e=n(JN,"STRONG",{});var Jjt=s(M1e);bwo=r(Jjt,"gpt_neo"),Jjt.forEach(t),vwo=r(JN," \u2014 "),qO=n(JN,"A",{href:!0});var Yjt=s(qO);Fwo=r(Yjt,"GPT2Tokenizer"),Yjt.forEach(t),Two=r(JN," or "),jO=n(JN,"A",{href:!0});var Zjt=s(jO);Mwo=r(Zjt,"GPT2TokenizerFast"),Zjt.forEach(t),Ewo=r(JN," (GPT Neo model)"),JN.forEach(t),Cwo=i(S),op=n(S,"LI",{});var tVe=s(op);E1e=n(tVe,"STRONG",{});var Kjt=s(E1e);wwo=r(Kjt,"gpt_neox"),Kjt.forEach(t),Awo=r(tVe," \u2014 "),DO=n(tVe,"A",{href:!0});var eDt=s(DO);Lwo=r(eDt,"GPTNeoXTokenizerFast"),eDt.forEach(t),ywo=r(tVe," (GPT NeoX model)"),tVe.forEach(t),xwo=i(S),rp=n(S,"LI",{});var aVe=s(rp);C1e=n(aVe,"STRONG",{});var oDt=s(C1e);$wo=r(oDt,"gpt_neox_japanese"),oDt.forEach(t),kwo=r(aVe," \u2014 "),GO=n(aVe,"A",{href:!0});var rDt=s(GO);Swo=r(rDt,"GPTNeoXJapaneseTokenizer"),rDt.forEach(t),Rwo=r(aVe," (GPT NeoX Japanese model)"),aVe.forEach(t),Pwo=i(S),Qs=n(S,"LI",{});var YN=s(Qs);w1e=n(YN,"STRONG",{});var tDt=s(w1e);Bwo=r(tDt,"gptj"),tDt.forEach(t),Iwo=r(YN," \u2014 "),OO=n(YN,"A",{href:!0});var aDt=s(OO);Nwo=r(aDt,"GPT2Tokenizer"),aDt.forEach(t),qwo=r(YN," or "),VO=n(YN,"A",{href:!0});var nDt=s(VO);jwo=r(nDt,"GPT2TokenizerFast"),nDt.forEach(t),Dwo=r(YN," (GPT-J model)"),YN.forEach(t),Gwo=i(S),Ws=n(S,"LI",{});var ZN=s(Ws);A1e=n(ZN,"STRONG",{});var sDt=s(A1e);Owo=r(sDt,"groupvit"),sDt.forEach(t),Vwo=r(ZN," \u2014 "),XO=n(ZN,"A",{href:!0});var lDt=s(XO);Xwo=r(lDt,"CLIPTokenizer"),lDt.forEach(t),zwo=r(ZN," or "),zO=n(ZN,"A",{href:!0});var iDt=s(zO);Qwo=r(iDt,"CLIPTokenizerFast"),iDt.forEach(t),Wwo=r(ZN," (GroupViT model)"),ZN.forEach(t),Uwo=i(S),Us=n(S,"LI",{});var KN=s(Us);L1e=n(KN,"STRONG",{});var dDt=s(L1e);Hwo=r(dDt,"herbert"),dDt.forEach(t),Jwo=r(KN," \u2014 "),QO=n(KN,"A",{href:!0});var mDt=s(QO);Ywo=r(mDt,"HerbertTokenizer"),mDt.forEach(t),Zwo=r(KN," or "),WO=n(KN,"A",{href:!0});var cDt=s(WO);Kwo=r(cDt,"HerbertTokenizerFast"),cDt.forEach(t),eAo=r(KN," (HerBERT model)"),KN.forEach(t),oAo=i(S),tp=n(S,"LI",{});var nVe=s(tp);y1e=n(nVe,"STRONG",{});var fDt=s(y1e);rAo=r(fDt,"hubert"),fDt.forEach(t),tAo=r(nVe," \u2014 "),UO=n(nVe,"A",{href:!0});var gDt=s(UO);aAo=r(gDt,"Wav2Vec2CTCTokenizer"),gDt.forEach(t),nAo=r(nVe," (Hubert model)"),nVe.forEach(t),sAo=i(S),Hs=n(S,"LI",{});var eq=s(Hs);x1e=n(eq,"STRONG",{});var hDt=s(x1e);lAo=r(hDt,"ibert"),hDt.forEach(t),iAo=r(eq," \u2014 "),HO=n(eq,"A",{href:!0});var uDt=s(HO);dAo=r(uDt,"RobertaTokenizer"),uDt.forEach(t),mAo=r(eq," or "),JO=n(eq,"A",{href:!0});var pDt=s(JO);cAo=r(pDt,"RobertaTokenizerFast"),pDt.forEach(t),fAo=r(eq," (I-BERT model)"),eq.forEach(t),gAo=i(S),ap=n(S,"LI",{});var sVe=s(ap);$1e=n(sVe,"STRONG",{});var _Dt=s($1e);hAo=r(_Dt,"jukebox"),_Dt.forEach(t),uAo=r(sVe," \u2014 "),YO=n(sVe,"A",{href:!0});var bDt=s(YO);pAo=r(bDt,"JukeboxTokenizer"),bDt.forEach(t),_Ao=r(sVe," (Jukebox model)"),sVe.forEach(t),bAo=i(S),Js=n(S,"LI",{});var oq=s(Js);k1e=n(oq,"STRONG",{});var vDt=s(k1e);vAo=r(vDt,"layoutlm"),vDt.forEach(t),FAo=r(oq," \u2014 "),ZO=n(oq,"A",{href:!0});var FDt=s(ZO);TAo=r(FDt,"LayoutLMTokenizer"),FDt.forEach(t),MAo=r(oq," or "),KO=n(oq,"A",{href:!0});var TDt=s(KO);EAo=r(TDt,"LayoutLMTokenizerFast"),TDt.forEach(t),CAo=r(oq," (LayoutLM model)"),oq.forEach(t),wAo=i(S),Ys=n(S,"LI",{});var rq=s(Ys);S1e=n(rq,"STRONG",{});var MDt=s(S1e);AAo=r(MDt,"layoutlmv2"),MDt.forEach(t),LAo=r(rq," \u2014 "),eV=n(rq,"A",{href:!0});var EDt=s(eV);yAo=r(EDt,"LayoutLMv2Tokenizer"),EDt.forEach(t),xAo=r(rq," or "),oV=n(rq,"A",{href:!0});var CDt=s(oV);$Ao=r(CDt,"LayoutLMv2TokenizerFast"),CDt.forEach(t),kAo=r(rq," (LayoutLMv2 model)"),rq.forEach(t),SAo=i(S),Zs=n(S,"LI",{});var tq=s(Zs);R1e=n(tq,"STRONG",{});var wDt=s(R1e);RAo=r(wDt,"layoutlmv3"),wDt.forEach(t),PAo=r(tq," \u2014 "),rV=n(tq,"A",{href:!0});var ADt=s(rV);BAo=r(ADt,"LayoutLMv3Tokenizer"),ADt.forEach(t),IAo=r(tq," or "),tV=n(tq,"A",{href:!0});var LDt=s(tV);NAo=r(LDt,"LayoutLMv3TokenizerFast"),LDt.forEach(t),qAo=r(tq," (LayoutLMv3 model)"),tq.forEach(t),jAo=i(S),Ks=n(S,"LI",{});var aq=s(Ks);P1e=n(aq,"STRONG",{});var yDt=s(P1e);DAo=r(yDt,"layoutxlm"),yDt.forEach(t),GAo=r(aq," \u2014 "),aV=n(aq,"A",{href:!0});var xDt=s(aV);OAo=r(xDt,"LayoutXLMTokenizer"),xDt.forEach(t),VAo=r(aq," or "),nV=n(aq,"A",{href:!0});var $Dt=s(nV);XAo=r($Dt,"LayoutXLMTokenizerFast"),$Dt.forEach(t),zAo=r(aq," (LayoutXLM model)"),aq.forEach(t),QAo=i(S),el=n(S,"LI",{});var nq=s(el);B1e=n(nq,"STRONG",{});var kDt=s(B1e);WAo=r(kDt,"led"),kDt.forEach(t),UAo=r(nq," \u2014 "),sV=n(nq,"A",{href:!0});var SDt=s(sV);HAo=r(SDt,"LEDTokenizer"),SDt.forEach(t),JAo=r(nq," or "),lV=n(nq,"A",{href:!0});var RDt=s(lV);YAo=r(RDt,"LEDTokenizerFast"),RDt.forEach(t),ZAo=r(nq," (LED model)"),nq.forEach(t),KAo=i(S),ol=n(S,"LI",{});var sq=s(ol);I1e=n(sq,"STRONG",{});var PDt=s(I1e);e6o=r(PDt,"lilt"),PDt.forEach(t),o6o=r(sq," \u2014 "),iV=n(sq,"A",{href:!0});var BDt=s(iV);r6o=r(BDt,"LayoutLMv3Tokenizer"),BDt.forEach(t),t6o=r(sq," or "),dV=n(sq,"A",{href:!0});var IDt=s(dV);a6o=r(IDt,"LayoutLMv3TokenizerFast"),IDt.forEach(t),n6o=r(sq," (LiLT model)"),sq.forEach(t),s6o=i(S),rl=n(S,"LI",{});var lq=s(rl);N1e=n(lq,"STRONG",{});var NDt=s(N1e);l6o=r(NDt,"longformer"),NDt.forEach(t),i6o=r(lq," \u2014 "),mV=n(lq,"A",{href:!0});var qDt=s(mV);d6o=r(qDt,"LongformerTokenizer"),qDt.forEach(t),m6o=r(lq," or "),cV=n(lq,"A",{href:!0});var jDt=s(cV);c6o=r(jDt,"LongformerTokenizerFast"),jDt.forEach(t),f6o=r(lq," (Longformer model)"),lq.forEach(t),g6o=i(S),tl=n(S,"LI",{});var iq=s(tl);q1e=n(iq,"STRONG",{});var DDt=s(q1e);h6o=r(DDt,"longt5"),DDt.forEach(t),u6o=r(iq," \u2014 "),fV=n(iq,"A",{href:!0});var GDt=s(fV);p6o=r(GDt,"T5Tokenizer"),GDt.forEach(t),_6o=r(iq," or "),gV=n(iq,"A",{href:!0});var ODt=s(gV);b6o=r(ODt,"T5TokenizerFast"),ODt.forEach(t),v6o=r(iq," (LongT5 model)"),iq.forEach(t),F6o=i(S),np=n(S,"LI",{});var lVe=s(np);j1e=n(lVe,"STRONG",{});var VDt=s(j1e);T6o=r(VDt,"luke"),VDt.forEach(t),M6o=r(lVe," \u2014 "),hV=n(lVe,"A",{href:!0});var XDt=s(hV);E6o=r(XDt,"LukeTokenizer"),XDt.forEach(t),C6o=r(lVe," (LUKE model)"),lVe.forEach(t),w6o=i(S),al=n(S,"LI",{});var dq=s(al);D1e=n(dq,"STRONG",{});var zDt=s(D1e);A6o=r(zDt,"lxmert"),zDt.forEach(t),L6o=r(dq," \u2014 "),uV=n(dq,"A",{href:!0});var QDt=s(uV);y6o=r(QDt,"LxmertTokenizer"),QDt.forEach(t),x6o=r(dq," or "),pV=n(dq,"A",{href:!0});var WDt=s(pV);$6o=r(WDt,"LxmertTokenizerFast"),WDt.forEach(t),k6o=r(dq," (LXMERT model)"),dq.forEach(t),S6o=i(S),sp=n(S,"LI",{});var iVe=s(sp);G1e=n(iVe,"STRONG",{});var UDt=s(G1e);R6o=r(UDt,"m2m_100"),UDt.forEach(t),P6o=r(iVe," \u2014 "),_V=n(iVe,"A",{href:!0});var HDt=s(_V);B6o=r(HDt,"M2M100Tokenizer"),HDt.forEach(t),I6o=r(iVe," (M2M100 model)"),iVe.forEach(t),N6o=i(S),lp=n(S,"LI",{});var dVe=s(lp);O1e=n(dVe,"STRONG",{});var JDt=s(O1e);q6o=r(JDt,"marian"),JDt.forEach(t),j6o=r(dVe," \u2014 "),bV=n(dVe,"A",{href:!0});var YDt=s(bV);D6o=r(YDt,"MarianTokenizer"),YDt.forEach(t),G6o=r(dVe," (Marian model)"),dVe.forEach(t),O6o=i(S),nl=n(S,"LI",{});var mq=s(nl);V1e=n(mq,"STRONG",{});var ZDt=s(V1e);V6o=r(ZDt,"mbart"),ZDt.forEach(t),X6o=r(mq," \u2014 "),vV=n(mq,"A",{href:!0});var KDt=s(vV);z6o=r(KDt,"MBartTokenizer"),KDt.forEach(t),Q6o=r(mq," or "),FV=n(mq,"A",{href:!0});var eGt=s(FV);W6o=r(eGt,"MBartTokenizerFast"),eGt.forEach(t),U6o=r(mq," (mBART model)"),mq.forEach(t),H6o=i(S),sl=n(S,"LI",{});var cq=s(sl);X1e=n(cq,"STRONG",{});var oGt=s(X1e);J6o=r(oGt,"mbart50"),oGt.forEach(t),Y6o=r(cq," \u2014 "),TV=n(cq,"A",{href:!0});var rGt=s(TV);Z6o=r(rGt,"MBart50Tokenizer"),rGt.forEach(t),K6o=r(cq," or "),MV=n(cq,"A",{href:!0});var tGt=s(MV);e7o=r(tGt,"MBart50TokenizerFast"),tGt.forEach(t),o7o=r(cq," (mBART-50 model)"),cq.forEach(t),r7o=i(S),ll=n(S,"LI",{});var fq=s(ll);z1e=n(fq,"STRONG",{});var aGt=s(z1e);t7o=r(aGt,"megatron-bert"),aGt.forEach(t),a7o=r(fq," \u2014 "),EV=n(fq,"A",{href:!0});var nGt=s(EV);n7o=r(nGt,"BertTokenizer"),nGt.forEach(t),s7o=r(fq," or "),CV=n(fq,"A",{href:!0});var sGt=s(CV);l7o=r(sGt,"BertTokenizerFast"),sGt.forEach(t),i7o=r(fq," (Megatron-BERT model)"),fq.forEach(t),d7o=i(S),ip=n(S,"LI",{});var mVe=s(ip);Q1e=n(mVe,"STRONG",{});var lGt=s(Q1e);m7o=r(lGt,"mluke"),lGt.forEach(t),c7o=r(mVe," \u2014 "),wV=n(mVe,"A",{href:!0});var iGt=s(wV);f7o=r(iGt,"MLukeTokenizer"),iGt.forEach(t),g7o=r(mVe," (mLUKE model)"),mVe.forEach(t),h7o=i(S),il=n(S,"LI",{});var gq=s(il);W1e=n(gq,"STRONG",{});var dGt=s(W1e);u7o=r(dGt,"mobilebert"),dGt.forEach(t),p7o=r(gq," \u2014 "),AV=n(gq,"A",{href:!0});var mGt=s(AV);_7o=r(mGt,"MobileBertTokenizer"),mGt.forEach(t),b7o=r(gq," or "),LV=n(gq,"A",{href:!0});var cGt=s(LV);v7o=r(cGt,"MobileBertTokenizerFast"),cGt.forEach(t),F7o=r(gq," (MobileBERT model)"),gq.forEach(t),T7o=i(S),dl=n(S,"LI",{});var hq=s(dl);U1e=n(hq,"STRONG",{});var fGt=s(U1e);M7o=r(fGt,"mpnet"),fGt.forEach(t),E7o=r(hq," \u2014 "),yV=n(hq,"A",{href:!0});var gGt=s(yV);C7o=r(gGt,"MPNetTokenizer"),gGt.forEach(t),w7o=r(hq," or "),xV=n(hq,"A",{href:!0});var hGt=s(xV);A7o=r(hGt,"MPNetTokenizerFast"),hGt.forEach(t),L7o=r(hq," (MPNet model)"),hq.forEach(t),y7o=i(S),ml=n(S,"LI",{});var uq=s(ml);H1e=n(uq,"STRONG",{});var uGt=s(H1e);x7o=r(uGt,"mt5"),uGt.forEach(t),$7o=r(uq," \u2014 "),$V=n(uq,"A",{href:!0});var pGt=s($V);k7o=r(pGt,"MT5Tokenizer"),pGt.forEach(t),S7o=r(uq," or "),kV=n(uq,"A",{href:!0});var _Gt=s(kV);R7o=r(_Gt,"MT5TokenizerFast"),_Gt.forEach(t),P7o=r(uq," (MT5 model)"),uq.forEach(t),B7o=i(S),cl=n(S,"LI",{});var pq=s(cl);J1e=n(pq,"STRONG",{});var bGt=s(J1e);I7o=r(bGt,"mvp"),bGt.forEach(t),N7o=r(pq," \u2014 "),SV=n(pq,"A",{href:!0});var vGt=s(SV);q7o=r(vGt,"MvpTokenizer"),vGt.forEach(t),j7o=r(pq," or "),RV=n(pq,"A",{href:!0});var FGt=s(RV);D7o=r(FGt,"MvpTokenizerFast"),FGt.forEach(t),G7o=r(pq," (MVP model)"),pq.forEach(t),O7o=i(S),fl=n(S,"LI",{});var _q=s(fl);Y1e=n(_q,"STRONG",{});var TGt=s(Y1e);V7o=r(TGt,"nezha"),TGt.forEach(t),X7o=r(_q," \u2014 "),PV=n(_q,"A",{href:!0});var MGt=s(PV);z7o=r(MGt,"BertTokenizer"),MGt.forEach(t),Q7o=r(_q," or "),BV=n(_q,"A",{href:!0});var EGt=s(BV);W7o=r(EGt,"BertTokenizerFast"),EGt.forEach(t),U7o=r(_q," (Nezha model)"),_q.forEach(t),H7o=i(S),gl=n(S,"LI",{});var bq=s(gl);Z1e=n(bq,"STRONG",{});var CGt=s(Z1e);J7o=r(CGt,"nllb"),CGt.forEach(t),Y7o=r(bq," \u2014 "),IV=n(bq,"A",{href:!0});var wGt=s(IV);Z7o=r(wGt,"NllbTokenizer"),wGt.forEach(t),K7o=r(bq," or "),NV=n(bq,"A",{href:!0});var AGt=s(NV);e8o=r(AGt,"NllbTokenizerFast"),AGt.forEach(t),o8o=r(bq," (NLLB model)"),bq.forEach(t),r8o=i(S),hl=n(S,"LI",{});var vq=s(hl);K1e=n(vq,"STRONG",{});var LGt=s(K1e);t8o=r(LGt,"nystromformer"),LGt.forEach(t),a8o=r(vq," \u2014 "),qV=n(vq,"A",{href:!0});var yGt=s(qV);n8o=r(yGt,"AlbertTokenizer"),yGt.forEach(t),s8o=r(vq," or "),jV=n(vq,"A",{href:!0});var xGt=s(jV);l8o=r(xGt,"AlbertTokenizerFast"),xGt.forEach(t),i8o=r(vq," (Nystr\xF6mformer model)"),vq.forEach(t),d8o=i(S),ul=n(S,"LI",{});var Fq=s(ul);e2e=n(Fq,"STRONG",{});var $Gt=s(e2e);m8o=r($Gt,"openai-gpt"),$Gt.forEach(t),c8o=r(Fq," \u2014 "),DV=n(Fq,"A",{href:!0});var kGt=s(DV);f8o=r(kGt,"OpenAIGPTTokenizer"),kGt.forEach(t),g8o=r(Fq," or "),GV=n(Fq,"A",{href:!0});var SGt=s(GV);h8o=r(SGt,"OpenAIGPTTokenizerFast"),SGt.forEach(t),u8o=r(Fq," (OpenAI GPT model)"),Fq.forEach(t),p8o=i(S),dp=n(S,"LI",{});var cVe=s(dp);o2e=n(cVe,"STRONG",{});var RGt=s(o2e);_8o=r(RGt,"opt"),RGt.forEach(t),b8o=r(cVe," \u2014 "),OV=n(cVe,"A",{href:!0});var PGt=s(OV);v8o=r(PGt,"GPT2Tokenizer"),PGt.forEach(t),F8o=r(cVe," (OPT model)"),cVe.forEach(t),T8o=i(S),pl=n(S,"LI",{});var Tq=s(pl);r2e=n(Tq,"STRONG",{});var BGt=s(r2e);M8o=r(BGt,"owlvit"),BGt.forEach(t),E8o=r(Tq," \u2014 "),VV=n(Tq,"A",{href:!0});var IGt=s(VV);C8o=r(IGt,"CLIPTokenizer"),IGt.forEach(t),w8o=r(Tq," or "),XV=n(Tq,"A",{href:!0});var NGt=s(XV);A8o=r(NGt,"CLIPTokenizerFast"),NGt.forEach(t),L8o=r(Tq," (OWL-ViT model)"),Tq.forEach(t),y8o=i(S),_l=n(S,"LI",{});var Mq=s(_l);t2e=n(Mq,"STRONG",{});var qGt=s(t2e);x8o=r(qGt,"pegasus"),qGt.forEach(t),$8o=r(Mq," \u2014 "),zV=n(Mq,"A",{href:!0});var jGt=s(zV);k8o=r(jGt,"PegasusTokenizer"),jGt.forEach(t),S8o=r(Mq," or "),QV=n(Mq,"A",{href:!0});var DGt=s(QV);R8o=r(DGt,"PegasusTokenizerFast"),DGt.forEach(t),P8o=r(Mq," (Pegasus model)"),Mq.forEach(t),B8o=i(S),bl=n(S,"LI",{});var Eq=s(bl);a2e=n(Eq,"STRONG",{});var GGt=s(a2e);I8o=r(GGt,"pegasus_x"),GGt.forEach(t),N8o=r(Eq," \u2014 "),WV=n(Eq,"A",{href:!0});var OGt=s(WV);q8o=r(OGt,"PegasusTokenizer"),OGt.forEach(t),j8o=r(Eq," or "),UV=n(Eq,"A",{href:!0});var VGt=s(UV);D8o=r(VGt,"PegasusTokenizerFast"),VGt.forEach(t),G8o=r(Eq," (PEGASUS-X model)"),Eq.forEach(t),O8o=i(S),mp=n(S,"LI",{});var fVe=s(mp);n2e=n(fVe,"STRONG",{});var XGt=s(n2e);V8o=r(XGt,"perceiver"),XGt.forEach(t),X8o=r(fVe," \u2014 "),HV=n(fVe,"A",{href:!0});var zGt=s(HV);z8o=r(zGt,"PerceiverTokenizer"),zGt.forEach(t),Q8o=r(fVe," (Perceiver model)"),fVe.forEach(t),W8o=i(S),cp=n(S,"LI",{});var gVe=s(cp);s2e=n(gVe,"STRONG",{});var QGt=s(s2e);U8o=r(QGt,"phobert"),QGt.forEach(t),H8o=r(gVe," \u2014 "),JV=n(gVe,"A",{href:!0});var WGt=s(JV);J8o=r(WGt,"PhobertTokenizer"),WGt.forEach(t),Y8o=r(gVe," (PhoBERT model)"),gVe.forEach(t),Z8o=i(S),fp=n(S,"LI",{});var hVe=s(fp);l2e=n(hVe,"STRONG",{});var UGt=s(l2e);K8o=r(UGt,"plbart"),UGt.forEach(t),eLo=r(hVe," \u2014 "),YV=n(hVe,"A",{href:!0});var HGt=s(YV);oLo=r(HGt,"PLBartTokenizer"),HGt.forEach(t),rLo=r(hVe," (PLBart model)"),hVe.forEach(t),tLo=i(S),gp=n(S,"LI",{});var uVe=s(gp);i2e=n(uVe,"STRONG",{});var JGt=s(i2e);aLo=r(JGt,"prophetnet"),JGt.forEach(t),nLo=r(uVe," \u2014 "),ZV=n(uVe,"A",{href:!0});var YGt=s(ZV);sLo=r(YGt,"ProphetNetTokenizer"),YGt.forEach(t),lLo=r(uVe," (ProphetNet model)"),uVe.forEach(t),iLo=i(S),vl=n(S,"LI",{});var Cq=s(vl);d2e=n(Cq,"STRONG",{});var ZGt=s(d2e);dLo=r(ZGt,"qdqbert"),ZGt.forEach(t),mLo=r(Cq," \u2014 "),KV=n(Cq,"A",{href:!0});var KGt=s(KV);cLo=r(KGt,"BertTokenizer"),KGt.forEach(t),fLo=r(Cq," or "),eX=n(Cq,"A",{href:!0});var eOt=s(eX);gLo=r(eOt,"BertTokenizerFast"),eOt.forEach(t),hLo=r(Cq," (QDQBert model)"),Cq.forEach(t),uLo=i(S),hp=n(S,"LI",{});var pVe=s(hp);m2e=n(pVe,"STRONG",{});var oOt=s(m2e);pLo=r(oOt,"rag"),oOt.forEach(t),_Lo=r(pVe," \u2014 "),oX=n(pVe,"A",{href:!0});var rOt=s(oX);bLo=r(rOt,"RagTokenizer"),rOt.forEach(t),vLo=r(pVe," (RAG model)"),pVe.forEach(t),FLo=i(S),Fl=n(S,"LI",{});var wq=s(Fl);c2e=n(wq,"STRONG",{});var tOt=s(c2e);TLo=r(tOt,"realm"),tOt.forEach(t),MLo=r(wq," \u2014 "),rX=n(wq,"A",{href:!0});var aOt=s(rX);ELo=r(aOt,"RealmTokenizer"),aOt.forEach(t),CLo=r(wq," or "),tX=n(wq,"A",{href:!0});var nOt=s(tX);wLo=r(nOt,"RealmTokenizerFast"),nOt.forEach(t),ALo=r(wq," (REALM model)"),wq.forEach(t),LLo=i(S),Tl=n(S,"LI",{});var Aq=s(Tl);f2e=n(Aq,"STRONG",{});var sOt=s(f2e);yLo=r(sOt,"reformer"),sOt.forEach(t),xLo=r(Aq," \u2014 "),aX=n(Aq,"A",{href:!0});var lOt=s(aX);$Lo=r(lOt,"ReformerTokenizer"),lOt.forEach(t),kLo=r(Aq," or "),nX=n(Aq,"A",{href:!0});var iOt=s(nX);SLo=r(iOt,"ReformerTokenizerFast"),iOt.forEach(t),RLo=r(Aq," (Reformer model)"),Aq.forEach(t),PLo=i(S),Ml=n(S,"LI",{});var Lq=s(Ml);g2e=n(Lq,"STRONG",{});var dOt=s(g2e);BLo=r(dOt,"rembert"),dOt.forEach(t),ILo=r(Lq," \u2014 "),sX=n(Lq,"A",{href:!0});var mOt=s(sX);NLo=r(mOt,"RemBertTokenizer"),mOt.forEach(t),qLo=r(Lq," or "),lX=n(Lq,"A",{href:!0});var cOt=s(lX);jLo=r(cOt,"RemBertTokenizerFast"),cOt.forEach(t),DLo=r(Lq," (RemBERT model)"),Lq.forEach(t),GLo=i(S),El=n(S,"LI",{});var yq=s(El);h2e=n(yq,"STRONG",{});var fOt=s(h2e);OLo=r(fOt,"retribert"),fOt.forEach(t),VLo=r(yq," \u2014 "),iX=n(yq,"A",{href:!0});var gOt=s(iX);XLo=r(gOt,"RetriBertTokenizer"),gOt.forEach(t),zLo=r(yq," or "),dX=n(yq,"A",{href:!0});var hOt=s(dX);QLo=r(hOt,"RetriBertTokenizerFast"),hOt.forEach(t),WLo=r(yq," (RetriBERT model)"),yq.forEach(t),ULo=i(S),Cl=n(S,"LI",{});var xq=s(Cl);u2e=n(xq,"STRONG",{});var uOt=s(u2e);HLo=r(uOt,"roberta"),uOt.forEach(t),JLo=r(xq," \u2014 "),mX=n(xq,"A",{href:!0});var pOt=s(mX);YLo=r(pOt,"RobertaTokenizer"),pOt.forEach(t),ZLo=r(xq," or "),cX=n(xq,"A",{href:!0});var _Ot=s(cX);KLo=r(_Ot,"RobertaTokenizerFast"),_Ot.forEach(t),eyo=r(xq," (RoBERTa model)"),xq.forEach(t),oyo=i(S),up=n(S,"LI",{});var _Ve=s(up);p2e=n(_Ve,"STRONG",{});var bOt=s(p2e);ryo=r(bOt,"roc_bert"),bOt.forEach(t),tyo=r(_Ve," \u2014 "),fX=n(_Ve,"A",{href:!0});var vOt=s(fX);ayo=r(vOt,"RoCBertTokenizer"),vOt.forEach(t),nyo=r(_Ve," (RoCBert model)"),_Ve.forEach(t),syo=i(S),wl=n(S,"LI",{});var $q=s(wl);_2e=n($q,"STRONG",{});var FOt=s(_2e);lyo=r(FOt,"roformer"),FOt.forEach(t),iyo=r($q," \u2014 "),gX=n($q,"A",{href:!0});var TOt=s(gX);dyo=r(TOt,"RoFormerTokenizer"),TOt.forEach(t),myo=r($q," or "),hX=n($q,"A",{href:!0});var MOt=s(hX);cyo=r(MOt,"RoFormerTokenizerFast"),MOt.forEach(t),fyo=r($q," (RoFormer model)"),$q.forEach(t),gyo=i(S),pp=n(S,"LI",{});var bVe=s(pp);b2e=n(bVe,"STRONG",{});var EOt=s(b2e);hyo=r(EOt,"speech_to_text"),EOt.forEach(t),uyo=r(bVe," \u2014 "),uX=n(bVe,"A",{href:!0});var COt=s(uX);pyo=r(COt,"Speech2TextTokenizer"),COt.forEach(t),_yo=r(bVe," (Speech2Text model)"),bVe.forEach(t),byo=i(S),_p=n(S,"LI",{});var vVe=s(_p);v2e=n(vVe,"STRONG",{});var wOt=s(v2e);vyo=r(wOt,"speech_to_text_2"),wOt.forEach(t),Fyo=r(vVe," \u2014 "),pX=n(vVe,"A",{href:!0});var AOt=s(pX);Tyo=r(AOt,"Speech2Text2Tokenizer"),AOt.forEach(t),Myo=r(vVe," (Speech2Text2 model)"),vVe.forEach(t),Eyo=i(S),Al=n(S,"LI",{});var kq=s(Al);F2e=n(kq,"STRONG",{});var LOt=s(F2e);Cyo=r(LOt,"splinter"),LOt.forEach(t),wyo=r(kq," \u2014 "),_X=n(kq,"A",{href:!0});var yOt=s(_X);Ayo=r(yOt,"SplinterTokenizer"),yOt.forEach(t),Lyo=r(kq," or "),bX=n(kq,"A",{href:!0});var xOt=s(bX);yyo=r(xOt,"SplinterTokenizerFast"),xOt.forEach(t),xyo=r(kq," (Splinter model)"),kq.forEach(t),$yo=i(S),Ll=n(S,"LI",{});var Sq=s(Ll);T2e=n(Sq,"STRONG",{});var $Ot=s(T2e);kyo=r($Ot,"squeezebert"),$Ot.forEach(t),Syo=r(Sq," \u2014 "),vX=n(Sq,"A",{href:!0});var kOt=s(vX);Ryo=r(kOt,"SqueezeBertTokenizer"),kOt.forEach(t),Pyo=r(Sq," or "),FX=n(Sq,"A",{href:!0});var SOt=s(FX);Byo=r(SOt,"SqueezeBertTokenizerFast"),SOt.forEach(t),Iyo=r(Sq," (SqueezeBERT model)"),Sq.forEach(t),Nyo=i(S),yl=n(S,"LI",{});var Rq=s(yl);M2e=n(Rq,"STRONG",{});var ROt=s(M2e);qyo=r(ROt,"switch_transformers"),ROt.forEach(t),jyo=r(Rq," \u2014 "),TX=n(Rq,"A",{href:!0});var POt=s(TX);Dyo=r(POt,"T5Tokenizer"),POt.forEach(t),Gyo=r(Rq," or "),MX=n(Rq,"A",{href:!0});var BOt=s(MX);Oyo=r(BOt,"T5TokenizerFast"),BOt.forEach(t),Vyo=r(Rq," (SwitchTransformers model)"),Rq.forEach(t),Xyo=i(S),xl=n(S,"LI",{});var Pq=s(xl);E2e=n(Pq,"STRONG",{});var IOt=s(E2e);zyo=r(IOt,"t5"),IOt.forEach(t),Qyo=r(Pq," \u2014 "),EX=n(Pq,"A",{href:!0});var NOt=s(EX);Wyo=r(NOt,"T5Tokenizer"),NOt.forEach(t),Uyo=r(Pq," or "),CX=n(Pq,"A",{href:!0});var qOt=s(CX);Hyo=r(qOt,"T5TokenizerFast"),qOt.forEach(t),Jyo=r(Pq," (T5 model)"),Pq.forEach(t),Yyo=i(S),bp=n(S,"LI",{});var FVe=s(bp);C2e=n(FVe,"STRONG",{});var jOt=s(C2e);Zyo=r(jOt,"tapas"),jOt.forEach(t),Kyo=r(FVe," \u2014 "),wX=n(FVe,"A",{href:!0});var DOt=s(wX);e9o=r(DOt,"TapasTokenizer"),DOt.forEach(t),o9o=r(FVe," (TAPAS model)"),FVe.forEach(t),r9o=i(S),vp=n(S,"LI",{});var TVe=s(vp);w2e=n(TVe,"STRONG",{});var GOt=s(w2e);t9o=r(GOt,"tapex"),GOt.forEach(t),a9o=r(TVe," \u2014 "),AX=n(TVe,"A",{href:!0});var OOt=s(AX);n9o=r(OOt,"TapexTokenizer"),OOt.forEach(t),s9o=r(TVe," (TAPEX model)"),TVe.forEach(t),l9o=i(S),Fp=n(S,"LI",{});var MVe=s(Fp);A2e=n(MVe,"STRONG",{});var VOt=s(A2e);i9o=r(VOt,"transfo-xl"),VOt.forEach(t),d9o=r(MVe," \u2014 "),LX=n(MVe,"A",{href:!0});var XOt=s(LX);m9o=r(XOt,"TransfoXLTokenizer"),XOt.forEach(t),c9o=r(MVe," (Transformer-XL model)"),MVe.forEach(t),f9o=i(S),$l=n(S,"LI",{});var Bq=s($l);L2e=n(Bq,"STRONG",{});var zOt=s(L2e);g9o=r(zOt,"vilt"),zOt.forEach(t),h9o=r(Bq," \u2014 "),yX=n(Bq,"A",{href:!0});var QOt=s(yX);u9o=r(QOt,"BertTokenizer"),QOt.forEach(t),p9o=r(Bq," or "),xX=n(Bq,"A",{href:!0});var WOt=s(xX);_9o=r(WOt,"BertTokenizerFast"),WOt.forEach(t),b9o=r(Bq," (ViLT model)"),Bq.forEach(t),v9o=i(S),kl=n(S,"LI",{});var Iq=s(kl);y2e=n(Iq,"STRONG",{});var UOt=s(y2e);F9o=r(UOt,"visual_bert"),UOt.forEach(t),T9o=r(Iq," \u2014 "),$X=n(Iq,"A",{href:!0});var HOt=s($X);M9o=r(HOt,"BertTokenizer"),HOt.forEach(t),E9o=r(Iq," or "),kX=n(Iq,"A",{href:!0});var JOt=s(kX);C9o=r(JOt,"BertTokenizerFast"),JOt.forEach(t),w9o=r(Iq," (VisualBERT model)"),Iq.forEach(t),A9o=i(S),Tp=n(S,"LI",{});var EVe=s(Tp);x2e=n(EVe,"STRONG",{});var YOt=s(x2e);L9o=r(YOt,"wav2vec2"),YOt.forEach(t),y9o=r(EVe," \u2014 "),SX=n(EVe,"A",{href:!0});var ZOt=s(SX);x9o=r(ZOt,"Wav2Vec2CTCTokenizer"),ZOt.forEach(t),$9o=r(EVe," (Wav2Vec2 model)"),EVe.forEach(t),k9o=i(S),Mp=n(S,"LI",{});var CVe=s(Mp);$2e=n(CVe,"STRONG",{});var KOt=s($2e);S9o=r(KOt,"wav2vec2-conformer"),KOt.forEach(t),R9o=r(CVe," \u2014 "),RX=n(CVe,"A",{href:!0});var eVt=s(RX);P9o=r(eVt,"Wav2Vec2CTCTokenizer"),eVt.forEach(t),B9o=r(CVe," (Wav2Vec2-Conformer model)"),CVe.forEach(t),I9o=i(S),Ep=n(S,"LI",{});var wVe=s(Ep);k2e=n(wVe,"STRONG",{});var oVt=s(k2e);N9o=r(oVt,"wav2vec2_phoneme"),oVt.forEach(t),q9o=r(wVe," \u2014 "),PX=n(wVe,"A",{href:!0});var rVt=s(PX);j9o=r(rVt,"Wav2Vec2PhonemeCTCTokenizer"),rVt.forEach(t),D9o=r(wVe," (Wav2Vec2Phoneme model)"),wVe.forEach(t),G9o=i(S),Cp=n(S,"LI",{});var AVe=s(Cp);S2e=n(AVe,"STRONG",{});var tVt=s(S2e);O9o=r(tVt,"whisper"),tVt.forEach(t),V9o=r(AVe," \u2014 "),BX=n(AVe,"A",{href:!0});var aVt=s(BX);X9o=r(aVt,"WhisperTokenizer"),aVt.forEach(t),z9o=r(AVe," (Whisper model)"),AVe.forEach(t),Q9o=i(S),Sl=n(S,"LI",{});var Nq=s(Sl);R2e=n(Nq,"STRONG",{});var nVt=s(R2e);W9o=r(nVt,"xclip"),nVt.forEach(t),U9o=r(Nq," \u2014 "),IX=n(Nq,"A",{href:!0});var sVt=s(IX);H9o=r(sVt,"CLIPTokenizer"),sVt.forEach(t),J9o=r(Nq," or "),NX=n(Nq,"A",{href:!0});var lVt=s(NX);Y9o=r(lVt,"CLIPTokenizerFast"),lVt.forEach(t),Z9o=r(Nq," (X-CLIP model)"),Nq.forEach(t),K9o=i(S),Rl=n(S,"LI",{});var qq=s(Rl);P2e=n(qq,"STRONG",{});var iVt=s(P2e);exo=r(iVt,"xglm"),iVt.forEach(t),oxo=r(qq," \u2014 "),qX=n(qq,"A",{href:!0});var dVt=s(qX);rxo=r(dVt,"XGLMTokenizer"),dVt.forEach(t),txo=r(qq," or "),jX=n(qq,"A",{href:!0});var mVt=s(jX);axo=r(mVt,"XGLMTokenizerFast"),mVt.forEach(t),nxo=r(qq," (XGLM model)"),qq.forEach(t),sxo=i(S),wp=n(S,"LI",{});var LVe=s(wp);B2e=n(LVe,"STRONG",{});var cVt=s(B2e);lxo=r(cVt,"xlm"),cVt.forEach(t),ixo=r(LVe," \u2014 "),DX=n(LVe,"A",{href:!0});var fVt=s(DX);dxo=r(fVt,"XLMTokenizer"),fVt.forEach(t),mxo=r(LVe," (XLM model)"),LVe.forEach(t),cxo=i(S),Ap=n(S,"LI",{});var yVe=s(Ap);I2e=n(yVe,"STRONG",{});var gVt=s(I2e);fxo=r(gVt,"xlm-prophetnet"),gVt.forEach(t),gxo=r(yVe," \u2014 "),GX=n(yVe,"A",{href:!0});var hVt=s(GX);hxo=r(hVt,"XLMProphetNetTokenizer"),hVt.forEach(t),uxo=r(yVe," (XLM-ProphetNet model)"),yVe.forEach(t),pxo=i(S),Pl=n(S,"LI",{});var jq=s(Pl);N2e=n(jq,"STRONG",{});var uVt=s(N2e);_xo=r(uVt,"xlm-roberta"),uVt.forEach(t),bxo=r(jq," \u2014 "),OX=n(jq,"A",{href:!0});var pVt=s(OX);vxo=r(pVt,"XLMRobertaTokenizer"),pVt.forEach(t),Fxo=r(jq," or "),VX=n(jq,"A",{href:!0});var _Vt=s(VX);Txo=r(_Vt,"XLMRobertaTokenizerFast"),_Vt.forEach(t),Mxo=r(jq," (XLM-RoBERTa model)"),jq.forEach(t),Exo=i(S),Bl=n(S,"LI",{});var Dq=s(Bl);q2e=n(Dq,"STRONG",{});var bVt=s(q2e);Cxo=r(bVt,"xlm-roberta-xl"),bVt.forEach(t),wxo=r(Dq," \u2014 "),XX=n(Dq,"A",{href:!0});var vVt=s(XX);Axo=r(vVt,"XLMRobertaTokenizer"),vVt.forEach(t),Lxo=r(Dq," or "),zX=n(Dq,"A",{href:!0});var FVt=s(zX);yxo=r(FVt,"XLMRobertaTokenizerFast"),FVt.forEach(t),xxo=r(Dq," (XLM-RoBERTa-XL model)"),Dq.forEach(t),$xo=i(S),Il=n(S,"LI",{});var Gq=s(Il);j2e=n(Gq,"STRONG",{});var TVt=s(j2e);kxo=r(TVt,"xlnet"),TVt.forEach(t),Sxo=r(Gq," \u2014 "),QX=n(Gq,"A",{href:!0});var MVt=s(QX);Rxo=r(MVt,"XLNetTokenizer"),MVt.forEach(t),Pxo=r(Gq," or "),WX=n(Gq,"A",{href:!0});var EVt=s(WX);Bxo=r(EVt,"XLNetTokenizerFast"),EVt.forEach(t),Ixo=r(Gq," (XLNet model)"),Gq.forEach(t),Nxo=i(S),Nl=n(S,"LI",{});var Oq=s(Nl);D2e=n(Oq,"STRONG",{});var CVt=s(D2e);qxo=r(CVt,"yoso"),CVt.forEach(t),jxo=r(Oq," \u2014 "),UX=n(Oq,"A",{href:!0});var wVt=s(UX);Dxo=r(wVt,"AlbertTokenizer"),wVt.forEach(t),Gxo=r(Oq," or "),HX=n(Oq,"A",{href:!0});var AVt=s(HX);Oxo=r(AVt,"AlbertTokenizerFast"),AVt.forEach(t),Vxo=r(Oq," (YOSO model)"),Oq.forEach(t),S.forEach(t),Xxo=i(Xl),T(Lp.$$.fragment,Xl),Xl.forEach(t),zxo=i(Vl),yp=n(Vl,"DIV",{class:!0});var Wmo=s(yp);T(Dk.$$.fragment,Wmo),Qxo=i(Wmo),G2e=n(Wmo,"P",{});var LVt=s(G2e);Wxo=r(LVt,"Register a new tokenizer in this mapping."),LVt.forEach(t),Wmo.forEach(t),Vl.forEach(t),Sio=i(c),qd=n(c,"H2",{class:!0});var Umo=s(qd);xp=n(Umo,"A",{id:!0,class:!0,href:!0});var yVt=s(xp);O2e=n(yVt,"SPAN",{});var xVt=s(O2e);T(Gk.$$.fragment,xVt),xVt.forEach(t),yVt.forEach(t),Uxo=i(Umo),V2e=n(Umo,"SPAN",{});var $Vt=s(V2e);Hxo=r($Vt,"AutoFeatureExtractor"),$Vt.forEach(t),Umo.forEach(t),Rio=i(c),No=n(c,"DIV",{class:!0});var zl=s(No);T(Ok.$$.fragment,zl),Jxo=i(zl),Vk=n(zl,"P",{});var Hmo=s(Vk);Yxo=r(Hmo,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JX=n(Hmo,"A",{href:!0});var kVt=s(JX);Zxo=r(kVt,"AutoFeatureExtractor.from_pretrained()"),kVt.forEach(t),Kxo=r(Hmo," class method."),Hmo.forEach(t),e$o=i(zl),Xk=n(zl,"P",{});var Jmo=s(Xk);o$o=r(Jmo,"This class cannot be instantiated directly using "),X2e=n(Jmo,"CODE",{});var SVt=s(X2e);r$o=r(SVt,"__init__()"),SVt.forEach(t),t$o=r(Jmo," (throws an error)."),Jmo.forEach(t),a$o=i(zl),eo=n(zl,"DIV",{class:!0});var xa=s(eo);T(zk.$$.fragment,xa),n$o=i(xa),z2e=n(xa,"P",{});var RVt=s(z2e);s$o=r(RVt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),RVt.forEach(t),l$o=i(xa),cn=n(xa,"P",{});var px=s(cn);i$o=r(px,"The feature extractor class to instantiate is selected based on the "),Q2e=n(px,"CODE",{});var PVt=s(Q2e);d$o=r(PVt,"model_type"),PVt.forEach(t),m$o=r(px,` property of the config object
(either passed as an argument or loaded from `),W2e=n(px,"CODE",{});var BVt=s(W2e);c$o=r(BVt,"pretrained_model_name_or_path"),BVt.forEach(t),f$o=r(px,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),U2e=n(px,"CODE",{});var IVt=s(U2e);g$o=r(IVt,"pretrained_model_name_or_path"),IVt.forEach(t),h$o=r(px,":"),px.forEach(t),u$o=i(xa),z=n(xa,"UL",{});var Q=s(z);$p=n(Q,"LI",{});var xVe=s($p);H2e=n(xVe,"STRONG",{});var NVt=s(H2e);p$o=r(NVt,"beit"),NVt.forEach(t),_$o=r(xVe," \u2014 "),YX=n(xVe,"A",{href:!0});var qVt=s(YX);b$o=r(qVt,"BeitFeatureExtractor"),qVt.forEach(t),v$o=r(xVe," (BEiT model)"),xVe.forEach(t),F$o=i(Q),kp=n(Q,"LI",{});var $Ve=s(kp);J2e=n($Ve,"STRONG",{});var jVt=s(J2e);T$o=r(jVt,"clip"),jVt.forEach(t),M$o=r($Ve," \u2014 "),ZX=n($Ve,"A",{href:!0});var DVt=s(ZX);E$o=r(DVt,"CLIPFeatureExtractor"),DVt.forEach(t),C$o=r($Ve," (CLIP model)"),$Ve.forEach(t),w$o=i(Q),Sp=n(Q,"LI",{});var kVe=s(Sp);Y2e=n(kVe,"STRONG",{});var GVt=s(Y2e);A$o=r(GVt,"clipseg"),GVt.forEach(t),L$o=r(kVe," \u2014 "),KX=n(kVe,"A",{href:!0});var OVt=s(KX);y$o=r(OVt,"ViTFeatureExtractor"),OVt.forEach(t),x$o=r(kVe," (CLIPSeg model)"),kVe.forEach(t),$$o=i(Q),Rp=n(Q,"LI",{});var SVe=s(Rp);Z2e=n(SVe,"STRONG",{});var VVt=s(Z2e);k$o=r(VVt,"conditional_detr"),VVt.forEach(t),S$o=r(SVe," \u2014 "),ez=n(SVe,"A",{href:!0});var XVt=s(ez);R$o=r(XVt,"ConditionalDetrFeatureExtractor"),XVt.forEach(t),P$o=r(SVe," (Conditional DETR model)"),SVe.forEach(t),B$o=i(Q),Pp=n(Q,"LI",{});var RVe=s(Pp);K2e=n(RVe,"STRONG",{});var zVt=s(K2e);I$o=r(zVt,"convnext"),zVt.forEach(t),N$o=r(RVe," \u2014 "),oz=n(RVe,"A",{href:!0});var QVt=s(oz);q$o=r(QVt,"ConvNextFeatureExtractor"),QVt.forEach(t),j$o=r(RVe," (ConvNeXT model)"),RVe.forEach(t),D$o=i(Q),Bp=n(Q,"LI",{});var PVe=s(Bp);ebe=n(PVe,"STRONG",{});var WVt=s(ebe);G$o=r(WVt,"cvt"),WVt.forEach(t),O$o=r(PVe," \u2014 "),rz=n(PVe,"A",{href:!0});var UVt=s(rz);V$o=r(UVt,"ConvNextFeatureExtractor"),UVt.forEach(t),X$o=r(PVe," (CvT model)"),PVe.forEach(t),z$o=i(Q),Ip=n(Q,"LI",{});var BVe=s(Ip);obe=n(BVe,"STRONG",{});var HVt=s(obe);Q$o=r(HVt,"data2vec-audio"),HVt.forEach(t),W$o=r(BVe," \u2014 "),tz=n(BVe,"A",{href:!0});var JVt=s(tz);U$o=r(JVt,"Wav2Vec2FeatureExtractor"),JVt.forEach(t),H$o=r(BVe," (Data2VecAudio model)"),BVe.forEach(t),J$o=i(Q),Np=n(Q,"LI",{});var IVe=s(Np);rbe=n(IVe,"STRONG",{});var YVt=s(rbe);Y$o=r(YVt,"data2vec-vision"),YVt.forEach(t),Z$o=r(IVe," \u2014 "),az=n(IVe,"A",{href:!0});var ZVt=s(az);K$o=r(ZVt,"BeitFeatureExtractor"),ZVt.forEach(t),eko=r(IVe," (Data2VecVision model)"),IVe.forEach(t),oko=i(Q),qp=n(Q,"LI",{});var NVe=s(qp);tbe=n(NVe,"STRONG",{});var KVt=s(tbe);rko=r(KVt,"deformable_detr"),KVt.forEach(t),tko=r(NVe," \u2014 "),nz=n(NVe,"A",{href:!0});var eXt=s(nz);ako=r(eXt,"DeformableDetrFeatureExtractor"),eXt.forEach(t),nko=r(NVe," (Deformable DETR model)"),NVe.forEach(t),sko=i(Q),jp=n(Q,"LI",{});var qVe=s(jp);abe=n(qVe,"STRONG",{});var oXt=s(abe);lko=r(oXt,"deit"),oXt.forEach(t),iko=r(qVe," \u2014 "),sz=n(qVe,"A",{href:!0});var rXt=s(sz);dko=r(rXt,"DeiTFeatureExtractor"),rXt.forEach(t),mko=r(qVe," (DeiT model)"),qVe.forEach(t),cko=i(Q),Dp=n(Q,"LI",{});var jVe=s(Dp);nbe=n(jVe,"STRONG",{});var tXt=s(nbe);fko=r(tXt,"detr"),tXt.forEach(t),gko=r(jVe," \u2014 "),lz=n(jVe,"A",{href:!0});var aXt=s(lz);hko=r(aXt,"DetrFeatureExtractor"),aXt.forEach(t),uko=r(jVe," (DETR model)"),jVe.forEach(t),pko=i(Q),Gp=n(Q,"LI",{});var DVe=s(Gp);sbe=n(DVe,"STRONG",{});var nXt=s(sbe);_ko=r(nXt,"donut-swin"),nXt.forEach(t),bko=r(DVe," \u2014 "),iz=n(DVe,"A",{href:!0});var sXt=s(iz);vko=r(sXt,"DonutFeatureExtractor"),sXt.forEach(t),Fko=r(DVe," (DonutSwin model)"),DVe.forEach(t),Tko=i(Q),Op=n(Q,"LI",{});var GVe=s(Op);lbe=n(GVe,"STRONG",{});var lXt=s(lbe);Mko=r(lXt,"dpt"),lXt.forEach(t),Eko=r(GVe," \u2014 "),dz=n(GVe,"A",{href:!0});var iXt=s(dz);Cko=r(iXt,"DPTFeatureExtractor"),iXt.forEach(t),wko=r(GVe," (DPT model)"),GVe.forEach(t),Ako=i(Q),Vp=n(Q,"LI",{});var OVe=s(Vp);ibe=n(OVe,"STRONG",{});var dXt=s(ibe);Lko=r(dXt,"flava"),dXt.forEach(t),yko=r(OVe," \u2014 "),mz=n(OVe,"A",{href:!0});var mXt=s(mz);xko=r(mXt,"FlavaFeatureExtractor"),mXt.forEach(t),$ko=r(OVe," (FLAVA model)"),OVe.forEach(t),kko=i(Q),Xp=n(Q,"LI",{});var VVe=s(Xp);dbe=n(VVe,"STRONG",{});var cXt=s(dbe);Sko=r(cXt,"glpn"),cXt.forEach(t),Rko=r(VVe," \u2014 "),cz=n(VVe,"A",{href:!0});var fXt=s(cz);Pko=r(fXt,"GLPNFeatureExtractor"),fXt.forEach(t),Bko=r(VVe," (GLPN model)"),VVe.forEach(t),Iko=i(Q),zp=n(Q,"LI",{});var XVe=s(zp);mbe=n(XVe,"STRONG",{});var gXt=s(mbe);Nko=r(gXt,"groupvit"),gXt.forEach(t),qko=r(XVe," \u2014 "),fz=n(XVe,"A",{href:!0});var hXt=s(fz);jko=r(hXt,"CLIPFeatureExtractor"),hXt.forEach(t),Dko=r(XVe," (GroupViT model)"),XVe.forEach(t),Gko=i(Q),Qp=n(Q,"LI",{});var zVe=s(Qp);cbe=n(zVe,"STRONG",{});var uXt=s(cbe);Oko=r(uXt,"hubert"),uXt.forEach(t),Vko=r(zVe," \u2014 "),gz=n(zVe,"A",{href:!0});var pXt=s(gz);Xko=r(pXt,"Wav2Vec2FeatureExtractor"),pXt.forEach(t),zko=r(zVe," (Hubert model)"),zVe.forEach(t),Qko=i(Q),Wp=n(Q,"LI",{});var QVe=s(Wp);fbe=n(QVe,"STRONG",{});var _Xt=s(fbe);Wko=r(_Xt,"imagegpt"),_Xt.forEach(t),Uko=r(QVe," \u2014 "),hz=n(QVe,"A",{href:!0});var bXt=s(hz);Hko=r(bXt,"ImageGPTFeatureExtractor"),bXt.forEach(t),Jko=r(QVe," (ImageGPT model)"),QVe.forEach(t),Yko=i(Q),Up=n(Q,"LI",{});var WVe=s(Up);gbe=n(WVe,"STRONG",{});var vXt=s(gbe);Zko=r(vXt,"layoutlmv2"),vXt.forEach(t),Kko=r(WVe," \u2014 "),uz=n(WVe,"A",{href:!0});var FXt=s(uz);eSo=r(FXt,"LayoutLMv2FeatureExtractor"),FXt.forEach(t),oSo=r(WVe," (LayoutLMv2 model)"),WVe.forEach(t),rSo=i(Q),Hp=n(Q,"LI",{});var UVe=s(Hp);hbe=n(UVe,"STRONG",{});var TXt=s(hbe);tSo=r(TXt,"layoutlmv3"),TXt.forEach(t),aSo=r(UVe," \u2014 "),pz=n(UVe,"A",{href:!0});var MXt=s(pz);nSo=r(MXt,"LayoutLMv3FeatureExtractor"),MXt.forEach(t),sSo=r(UVe," (LayoutLMv3 model)"),UVe.forEach(t),lSo=i(Q),Jp=n(Q,"LI",{});var HVe=s(Jp);ube=n(HVe,"STRONG",{});var EXt=s(ube);iSo=r(EXt,"levit"),EXt.forEach(t),dSo=r(HVe," \u2014 "),_z=n(HVe,"A",{href:!0});var CXt=s(_z);mSo=r(CXt,"LevitFeatureExtractor"),CXt.forEach(t),cSo=r(HVe," (LeViT model)"),HVe.forEach(t),fSo=i(Q),Yp=n(Q,"LI",{});var JVe=s(Yp);pbe=n(JVe,"STRONG",{});var wXt=s(pbe);gSo=r(wXt,"maskformer"),wXt.forEach(t),hSo=r(JVe," \u2014 "),bz=n(JVe,"A",{href:!0});var AXt=s(bz);uSo=r(AXt,"MaskFormerFeatureExtractor"),AXt.forEach(t),pSo=r(JVe," (MaskFormer model)"),JVe.forEach(t),_So=i(Q),Zp=n(Q,"LI",{});var YVe=s(Zp);_be=n(YVe,"STRONG",{});var LXt=s(_be);bSo=r(LXt,"mctct"),LXt.forEach(t),vSo=r(YVe," \u2014 "),vz=n(YVe,"A",{href:!0});var yXt=s(vz);FSo=r(yXt,"MCTCTFeatureExtractor"),yXt.forEach(t),TSo=r(YVe," (M-CTC-T model)"),YVe.forEach(t),MSo=i(Q),Kp=n(Q,"LI",{});var ZVe=s(Kp);bbe=n(ZVe,"STRONG",{});var xXt=s(bbe);ESo=r(xXt,"mobilenet_v2"),xXt.forEach(t),CSo=r(ZVe," \u2014 "),Fz=n(ZVe,"A",{href:!0});var $Xt=s(Fz);wSo=r($Xt,"MobileNetV2FeatureExtractor"),$Xt.forEach(t),ASo=r(ZVe," (MobileNetV2 model)"),ZVe.forEach(t),LSo=i(Q),e_=n(Q,"LI",{});var KVe=s(e_);vbe=n(KVe,"STRONG",{});var kXt=s(vbe);ySo=r(kXt,"mobilevit"),kXt.forEach(t),xSo=r(KVe," \u2014 "),Tz=n(KVe,"A",{href:!0});var SXt=s(Tz);$So=r(SXt,"MobileViTFeatureExtractor"),SXt.forEach(t),kSo=r(KVe," (MobileViT model)"),KVe.forEach(t),SSo=i(Q),o_=n(Q,"LI",{});var eXe=s(o_);Fbe=n(eXe,"STRONG",{});var RXt=s(Fbe);RSo=r(RXt,"owlvit"),RXt.forEach(t),PSo=r(eXe," \u2014 "),Mz=n(eXe,"A",{href:!0});var PXt=s(Mz);BSo=r(PXt,"OwlViTFeatureExtractor"),PXt.forEach(t),ISo=r(eXe," (OWL-ViT model)"),eXe.forEach(t),NSo=i(Q),r_=n(Q,"LI",{});var oXe=s(r_);Tbe=n(oXe,"STRONG",{});var BXt=s(Tbe);qSo=r(BXt,"perceiver"),BXt.forEach(t),jSo=r(oXe," \u2014 "),Ez=n(oXe,"A",{href:!0});var IXt=s(Ez);DSo=r(IXt,"PerceiverFeatureExtractor"),IXt.forEach(t),GSo=r(oXe," (Perceiver model)"),oXe.forEach(t),OSo=i(Q),t_=n(Q,"LI",{});var rXe=s(t_);Mbe=n(rXe,"STRONG",{});var NXt=s(Mbe);VSo=r(NXt,"poolformer"),NXt.forEach(t),XSo=r(rXe," \u2014 "),Cz=n(rXe,"A",{href:!0});var qXt=s(Cz);zSo=r(qXt,"PoolFormerFeatureExtractor"),qXt.forEach(t),QSo=r(rXe," (PoolFormer model)"),rXe.forEach(t),WSo=i(Q),a_=n(Q,"LI",{});var tXe=s(a_);Ebe=n(tXe,"STRONG",{});var jXt=s(Ebe);USo=r(jXt,"regnet"),jXt.forEach(t),HSo=r(tXe," \u2014 "),wz=n(tXe,"A",{href:!0});var DXt=s(wz);JSo=r(DXt,"ConvNextFeatureExtractor"),DXt.forEach(t),YSo=r(tXe," (RegNet model)"),tXe.forEach(t),ZSo=i(Q),n_=n(Q,"LI",{});var aXe=s(n_);Cbe=n(aXe,"STRONG",{});var GXt=s(Cbe);KSo=r(GXt,"resnet"),GXt.forEach(t),eRo=r(aXe," \u2014 "),Az=n(aXe,"A",{href:!0});var OXt=s(Az);oRo=r(OXt,"ConvNextFeatureExtractor"),OXt.forEach(t),rRo=r(aXe," (ResNet model)"),aXe.forEach(t),tRo=i(Q),s_=n(Q,"LI",{});var nXe=s(s_);wbe=n(nXe,"STRONG",{});var VXt=s(wbe);aRo=r(VXt,"segformer"),VXt.forEach(t),nRo=r(nXe," \u2014 "),Lz=n(nXe,"A",{href:!0});var XXt=s(Lz);sRo=r(XXt,"SegformerFeatureExtractor"),XXt.forEach(t),lRo=r(nXe," (SegFormer model)"),nXe.forEach(t),iRo=i(Q),l_=n(Q,"LI",{});var sXe=s(l_);Abe=n(sXe,"STRONG",{});var zXt=s(Abe);dRo=r(zXt,"speech_to_text"),zXt.forEach(t),mRo=r(sXe," \u2014 "),yz=n(sXe,"A",{href:!0});var QXt=s(yz);cRo=r(QXt,"Speech2TextFeatureExtractor"),QXt.forEach(t),fRo=r(sXe," (Speech2Text model)"),sXe.forEach(t),gRo=i(Q),i_=n(Q,"LI",{});var lXe=s(i_);Lbe=n(lXe,"STRONG",{});var WXt=s(Lbe);hRo=r(WXt,"swin"),WXt.forEach(t),uRo=r(lXe," \u2014 "),xz=n(lXe,"A",{href:!0});var UXt=s(xz);pRo=r(UXt,"ViTFeatureExtractor"),UXt.forEach(t),_Ro=r(lXe," (Swin Transformer model)"),lXe.forEach(t),bRo=i(Q),d_=n(Q,"LI",{});var iXe=s(d_);ybe=n(iXe,"STRONG",{});var HXt=s(ybe);vRo=r(HXt,"swinv2"),HXt.forEach(t),FRo=r(iXe," \u2014 "),$z=n(iXe,"A",{href:!0});var JXt=s($z);TRo=r(JXt,"ViTFeatureExtractor"),JXt.forEach(t),MRo=r(iXe," (Swin Transformer V2 model)"),iXe.forEach(t),ERo=i(Q),m_=n(Q,"LI",{});var dXe=s(m_);xbe=n(dXe,"STRONG",{});var YXt=s(xbe);CRo=r(YXt,"table-transformer"),YXt.forEach(t),wRo=r(dXe," \u2014 "),kz=n(dXe,"A",{href:!0});var ZXt=s(kz);ARo=r(ZXt,"DetrFeatureExtractor"),ZXt.forEach(t),LRo=r(dXe," (Table Transformer model)"),dXe.forEach(t),yRo=i(Q),c_=n(Q,"LI",{});var mXe=s(c_);$be=n(mXe,"STRONG",{});var KXt=s($be);xRo=r(KXt,"van"),KXt.forEach(t),$Ro=r(mXe," \u2014 "),Sz=n(mXe,"A",{href:!0});var ezt=s(Sz);kRo=r(ezt,"ConvNextFeatureExtractor"),ezt.forEach(t),SRo=r(mXe," (VAN model)"),mXe.forEach(t),RRo=i(Q),f_=n(Q,"LI",{});var cXe=s(f_);kbe=n(cXe,"STRONG",{});var ozt=s(kbe);PRo=r(ozt,"videomae"),ozt.forEach(t),BRo=r(cXe," \u2014 "),Rz=n(cXe,"A",{href:!0});var rzt=s(Rz);IRo=r(rzt,"VideoMAEFeatureExtractor"),rzt.forEach(t),NRo=r(cXe," (VideoMAE model)"),cXe.forEach(t),qRo=i(Q),g_=n(Q,"LI",{});var fXe=s(g_);Sbe=n(fXe,"STRONG",{});var tzt=s(Sbe);jRo=r(tzt,"vilt"),tzt.forEach(t),DRo=r(fXe," \u2014 "),Pz=n(fXe,"A",{href:!0});var azt=s(Pz);GRo=r(azt,"ViltFeatureExtractor"),azt.forEach(t),ORo=r(fXe," (ViLT model)"),fXe.forEach(t),VRo=i(Q),h_=n(Q,"LI",{});var gXe=s(h_);Rbe=n(gXe,"STRONG",{});var nzt=s(Rbe);XRo=r(nzt,"vit"),nzt.forEach(t),zRo=r(gXe," \u2014 "),Bz=n(gXe,"A",{href:!0});var szt=s(Bz);QRo=r(szt,"ViTFeatureExtractor"),szt.forEach(t),WRo=r(gXe," (ViT model)"),gXe.forEach(t),URo=i(Q),u_=n(Q,"LI",{});var hXe=s(u_);Pbe=n(hXe,"STRONG",{});var lzt=s(Pbe);HRo=r(lzt,"vit_mae"),lzt.forEach(t),JRo=r(hXe," \u2014 "),Iz=n(hXe,"A",{href:!0});var izt=s(Iz);YRo=r(izt,"ViTFeatureExtractor"),izt.forEach(t),ZRo=r(hXe," (ViTMAE model)"),hXe.forEach(t),KRo=i(Q),p_=n(Q,"LI",{});var uXe=s(p_);Bbe=n(uXe,"STRONG",{});var dzt=s(Bbe);ePo=r(dzt,"vit_msn"),dzt.forEach(t),oPo=r(uXe," \u2014 "),Nz=n(uXe,"A",{href:!0});var mzt=s(Nz);rPo=r(mzt,"ViTFeatureExtractor"),mzt.forEach(t),tPo=r(uXe," (ViTMSN model)"),uXe.forEach(t),aPo=i(Q),__=n(Q,"LI",{});var pXe=s(__);Ibe=n(pXe,"STRONG",{});var czt=s(Ibe);nPo=r(czt,"wav2vec2"),czt.forEach(t),sPo=r(pXe," \u2014 "),qz=n(pXe,"A",{href:!0});var fzt=s(qz);lPo=r(fzt,"Wav2Vec2FeatureExtractor"),fzt.forEach(t),iPo=r(pXe," (Wav2Vec2 model)"),pXe.forEach(t),dPo=i(Q),b_=n(Q,"LI",{});var _Xe=s(b_);Nbe=n(_Xe,"STRONG",{});var gzt=s(Nbe);mPo=r(gzt,"wav2vec2-conformer"),gzt.forEach(t),cPo=r(_Xe," \u2014 "),jz=n(_Xe,"A",{href:!0});var hzt=s(jz);fPo=r(hzt,"Wav2Vec2FeatureExtractor"),hzt.forEach(t),gPo=r(_Xe," (Wav2Vec2-Conformer model)"),_Xe.forEach(t),hPo=i(Q),v_=n(Q,"LI",{});var bXe=s(v_);qbe=n(bXe,"STRONG",{});var uzt=s(qbe);uPo=r(uzt,"whisper"),uzt.forEach(t),pPo=r(bXe," \u2014 "),Dz=n(bXe,"A",{href:!0});var pzt=s(Dz);_Po=r(pzt,"WhisperFeatureExtractor"),pzt.forEach(t),bPo=r(bXe," (Whisper model)"),bXe.forEach(t),vPo=i(Q),F_=n(Q,"LI",{});var vXe=s(F_);jbe=n(vXe,"STRONG",{});var _zt=s(jbe);FPo=r(_zt,"xclip"),_zt.forEach(t),TPo=r(vXe," \u2014 "),Gz=n(vXe,"A",{href:!0});var bzt=s(Gz);MPo=r(bzt,"CLIPFeatureExtractor"),bzt.forEach(t),EPo=r(vXe," (X-CLIP model)"),vXe.forEach(t),CPo=i(Q),T_=n(Q,"LI",{});var FXe=s(T_);Dbe=n(FXe,"STRONG",{});var vzt=s(Dbe);wPo=r(vzt,"yolos"),vzt.forEach(t),APo=r(FXe," \u2014 "),Oz=n(FXe,"A",{href:!0});var Fzt=s(Oz);LPo=r(Fzt,"YolosFeatureExtractor"),Fzt.forEach(t),yPo=r(FXe," (YOLOS model)"),FXe.forEach(t),Q.forEach(t),xPo=i(xa),T(M_.$$.fragment,xa),$Po=i(xa),T(E_.$$.fragment,xa),xa.forEach(t),kPo=i(zl),C_=n(zl,"DIV",{class:!0});var Ymo=s(C_);T(Qk.$$.fragment,Ymo),SPo=i(Ymo),Gbe=n(Ymo,"P",{});var Tzt=s(Gbe);RPo=r(Tzt,"Register a new feature extractor for this class."),Tzt.forEach(t),Ymo.forEach(t),zl.forEach(t),Pio=i(c),jd=n(c,"H2",{class:!0});var Zmo=s(jd);w_=n(Zmo,"A",{id:!0,class:!0,href:!0});var Mzt=s(w_);Obe=n(Mzt,"SPAN",{});var Ezt=s(Obe);T(Wk.$$.fragment,Ezt),Ezt.forEach(t),Mzt.forEach(t),PPo=i(Zmo),Vbe=n(Zmo,"SPAN",{});var Czt=s(Vbe);BPo=r(Czt,"AutoImageProcessor"),Czt.forEach(t),Zmo.forEach(t),Bio=i(c),qo=n(c,"DIV",{class:!0});var Ql=s(qo);T(Uk.$$.fragment,Ql),IPo=i(Ql),Hk=n(Ql,"P",{});var Kmo=s(Hk);NPo=r(Kmo,`This is a generic image processor class that will be instantiated as one of the image processor classes of the
library when created with the `),Vz=n(Kmo,"A",{href:!0});var wzt=s(Vz);qPo=r(wzt,"AutoImageProcessor.from_pretrained()"),wzt.forEach(t),jPo=r(Kmo," class method."),Kmo.forEach(t),DPo=i(Ql),Jk=n(Ql,"P",{});var eco=s(Jk);GPo=r(eco,"This class cannot be instantiated directly using "),Xbe=n(eco,"CODE",{});var Azt=s(Xbe);OPo=r(Azt,"__init__()"),Azt.forEach(t),VPo=r(eco," (throws an error)."),eco.forEach(t),XPo=i(Ql),oo=n(Ql,"DIV",{class:!0});var $a=s(oo);T(Yk.$$.fragment,$a),zPo=i($a),zbe=n($a,"P",{});var Lzt=s(zbe);QPo=r(Lzt,"Instantiate one of the image processor classes of the library from a pretrained model vocabulary."),Lzt.forEach(t),WPo=i($a),fn=n($a,"P",{});var _x=s(fn);UPo=r(_x,"The image processor class to instantiate is selected based on the "),Qbe=n(_x,"CODE",{});var yzt=s(Qbe);HPo=r(yzt,"model_type"),yzt.forEach(t),JPo=r(_x,` property of the config object
(either passed as an argument or loaded from `),Wbe=n(_x,"CODE",{});var xzt=s(Wbe);YPo=r(xzt,"pretrained_model_name_or_path"),xzt.forEach(t),ZPo=r(_x,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ube=n(_x,"CODE",{});var $zt=s(Ube);KPo=r($zt,"pretrained_model_name_or_path"),$zt.forEach(t),eBo=r(_x,":"),_x.forEach(t),oBo=i($a),oe=n($a,"UL",{});var te=s(oe);A_=n(te,"LI",{});var TXe=s(A_);Hbe=n(TXe,"STRONG",{});var kzt=s(Hbe);rBo=r(kzt,"beit"),kzt.forEach(t),tBo=r(TXe," \u2014 "),Xz=n(TXe,"A",{href:!0});var Szt=s(Xz);aBo=r(Szt,"BeitImageProcessor"),Szt.forEach(t),nBo=r(TXe," (BEiT model)"),TXe.forEach(t),sBo=i(te),L_=n(te,"LI",{});var MXe=s(L_);Jbe=n(MXe,"STRONG",{});var Rzt=s(Jbe);lBo=r(Rzt,"clip"),Rzt.forEach(t),iBo=r(MXe," \u2014 "),zz=n(MXe,"A",{href:!0});var Pzt=s(zz);dBo=r(Pzt,"CLIPImageProcessor"),Pzt.forEach(t),mBo=r(MXe," (CLIP model)"),MXe.forEach(t),cBo=i(te),y_=n(te,"LI",{});var EXe=s(y_);Ybe=n(EXe,"STRONG",{});var Bzt=s(Ybe);fBo=r(Bzt,"convnext"),Bzt.forEach(t),gBo=r(EXe," \u2014 "),Qz=n(EXe,"A",{href:!0});var Izt=s(Qz);hBo=r(Izt,"ConvNextImageProcessor"),Izt.forEach(t),uBo=r(EXe," (ConvNeXT model)"),EXe.forEach(t),pBo=i(te),x_=n(te,"LI",{});var CXe=s(x_);Zbe=n(CXe,"STRONG",{});var Nzt=s(Zbe);_Bo=r(Nzt,"cvt"),Nzt.forEach(t),bBo=r(CXe," \u2014 "),Wz=n(CXe,"A",{href:!0});var qzt=s(Wz);vBo=r(qzt,"ConvNextImageProcessor"),qzt.forEach(t),FBo=r(CXe," (CvT model)"),CXe.forEach(t),TBo=i(te),$_=n(te,"LI",{});var wXe=s($_);Kbe=n(wXe,"STRONG",{});var jzt=s(Kbe);MBo=r(jzt,"data2vec-vision"),jzt.forEach(t),EBo=r(wXe," \u2014 "),Uz=n(wXe,"A",{href:!0});var Dzt=s(Uz);CBo=r(Dzt,"BeitImageProcessor"),Dzt.forEach(t),wBo=r(wXe," (Data2VecVision model)"),wXe.forEach(t),ABo=i(te),k_=n(te,"LI",{});var AXe=s(k_);eve=n(AXe,"STRONG",{});var Gzt=s(eve);LBo=r(Gzt,"deit"),Gzt.forEach(t),yBo=r(AXe," \u2014 "),Hz=n(AXe,"A",{href:!0});var Ozt=s(Hz);xBo=r(Ozt,"DeiTImageProcessor"),Ozt.forEach(t),$Bo=r(AXe," (DeiT model)"),AXe.forEach(t),kBo=i(te),S_=n(te,"LI",{});var LXe=s(S_);ove=n(LXe,"STRONG",{});var Vzt=s(ove);SBo=r(Vzt,"dpt"),Vzt.forEach(t),RBo=r(LXe," \u2014 "),Jz=n(LXe,"A",{href:!0});var Xzt=s(Jz);PBo=r(Xzt,"DPTImageProcessor"),Xzt.forEach(t),BBo=r(LXe," (DPT model)"),LXe.forEach(t),IBo=i(te),R_=n(te,"LI",{});var yXe=s(R_);rve=n(yXe,"STRONG",{});var zzt=s(rve);NBo=r(zzt,"flava"),zzt.forEach(t),qBo=r(yXe," \u2014 "),Yz=n(yXe,"A",{href:!0});var Qzt=s(Yz);jBo=r(Qzt,"FlavaImageProcessor"),Qzt.forEach(t),DBo=r(yXe," (FLAVA model)"),yXe.forEach(t),GBo=i(te),P_=n(te,"LI",{});var xXe=s(P_);tve=n(xXe,"STRONG",{});var Wzt=s(tve);OBo=r(Wzt,"glpn"),Wzt.forEach(t),VBo=r(xXe," \u2014 "),Zz=n(xXe,"A",{href:!0});var Uzt=s(Zz);XBo=r(Uzt,"GLPNImageProcessor"),Uzt.forEach(t),zBo=r(xXe," (GLPN model)"),xXe.forEach(t),QBo=i(te),B_=n(te,"LI",{});var $Xe=s(B_);ave=n($Xe,"STRONG",{});var Hzt=s(ave);WBo=r(Hzt,"groupvit"),Hzt.forEach(t),UBo=r($Xe," \u2014 "),Kz=n($Xe,"A",{href:!0});var Jzt=s(Kz);HBo=r(Jzt,"CLIPImageProcessor"),Jzt.forEach(t),JBo=r($Xe," (GroupViT model)"),$Xe.forEach(t),YBo=i(te),I_=n(te,"LI",{});var kXe=s(I_);nve=n(kXe,"STRONG",{});var Yzt=s(nve);ZBo=r(Yzt,"imagegpt"),Yzt.forEach(t),KBo=r(kXe," \u2014 "),eQ=n(kXe,"A",{href:!0});var Zzt=s(eQ);eIo=r(Zzt,"ImageGPTImageProcessor"),Zzt.forEach(t),oIo=r(kXe," (ImageGPT model)"),kXe.forEach(t),rIo=i(te),N_=n(te,"LI",{});var SXe=s(N_);sve=n(SXe,"STRONG",{});var Kzt=s(sve);tIo=r(Kzt,"layoutlmv2"),Kzt.forEach(t),aIo=r(SXe," \u2014 "),oQ=n(SXe,"A",{href:!0});var eQt=s(oQ);nIo=r(eQt,"LayoutLMv2ImageProcessor"),eQt.forEach(t),sIo=r(SXe," (LayoutLMv2 model)"),SXe.forEach(t),lIo=i(te),q_=n(te,"LI",{});var RXe=s(q_);lve=n(RXe,"STRONG",{});var oQt=s(lve);iIo=r(oQt,"layoutlmv3"),oQt.forEach(t),dIo=r(RXe," \u2014 "),rQ=n(RXe,"A",{href:!0});var rQt=s(rQ);mIo=r(rQt,"LayoutLMv3ImageProcessor"),rQt.forEach(t),cIo=r(RXe," (LayoutLMv3 model)"),RXe.forEach(t),fIo=i(te),j_=n(te,"LI",{});var PXe=s(j_);ive=n(PXe,"STRONG",{});var tQt=s(ive);gIo=r(tQt,"levit"),tQt.forEach(t),hIo=r(PXe," \u2014 "),tQ=n(PXe,"A",{href:!0});var aQt=s(tQ);uIo=r(aQt,"LevitImageProcessor"),aQt.forEach(t),pIo=r(PXe," (LeViT model)"),PXe.forEach(t),_Io=i(te),D_=n(te,"LI",{});var BXe=s(D_);dve=n(BXe,"STRONG",{});var nQt=s(dve);bIo=r(nQt,"mobilenet_v2"),nQt.forEach(t),vIo=r(BXe," \u2014 "),aQ=n(BXe,"A",{href:!0});var sQt=s(aQ);FIo=r(sQt,"MobileNetV2ImageProcessor"),sQt.forEach(t),TIo=r(BXe," (MobileNetV2 model)"),BXe.forEach(t),MIo=i(te),G_=n(te,"LI",{});var IXe=s(G_);mve=n(IXe,"STRONG",{});var lQt=s(mve);EIo=r(lQt,"mobilevit"),lQt.forEach(t),CIo=r(IXe," \u2014 "),nQ=n(IXe,"A",{href:!0});var iQt=s(nQ);wIo=r(iQt,"MobileViTImageProcessor"),iQt.forEach(t),AIo=r(IXe," (MobileViT model)"),IXe.forEach(t),LIo=i(te),O_=n(te,"LI",{});var NXe=s(O_);cve=n(NXe,"STRONG",{});var dQt=s(cve);yIo=r(dQt,"perceiver"),dQt.forEach(t),xIo=r(NXe," \u2014 "),sQ=n(NXe,"A",{href:!0});var mQt=s(sQ);$Io=r(mQt,"PerceiverImageProcessor"),mQt.forEach(t),kIo=r(NXe," (Perceiver model)"),NXe.forEach(t),SIo=i(te),V_=n(te,"LI",{});var qXe=s(V_);fve=n(qXe,"STRONG",{});var cQt=s(fve);RIo=r(cQt,"poolformer"),cQt.forEach(t),PIo=r(qXe," \u2014 "),lQ=n(qXe,"A",{href:!0});var fQt=s(lQ);BIo=r(fQt,"PoolFormerImageProcessor"),fQt.forEach(t),IIo=r(qXe," (PoolFormer model)"),qXe.forEach(t),NIo=i(te),X_=n(te,"LI",{});var jXe=s(X_);gve=n(jXe,"STRONG",{});var gQt=s(gve);qIo=r(gQt,"regnet"),gQt.forEach(t),jIo=r(jXe," \u2014 "),iQ=n(jXe,"A",{href:!0});var hQt=s(iQ);DIo=r(hQt,"ConvNextImageProcessor"),hQt.forEach(t),GIo=r(jXe," (RegNet model)"),jXe.forEach(t),OIo=i(te),z_=n(te,"LI",{});var DXe=s(z_);hve=n(DXe,"STRONG",{});var uQt=s(hve);VIo=r(uQt,"resnet"),uQt.forEach(t),XIo=r(DXe," \u2014 "),dQ=n(DXe,"A",{href:!0});var pQt=s(dQ);zIo=r(pQt,"ConvNextImageProcessor"),pQt.forEach(t),QIo=r(DXe," (ResNet model)"),DXe.forEach(t),WIo=i(te),Q_=n(te,"LI",{});var GXe=s(Q_);uve=n(GXe,"STRONG",{});var _Qt=s(uve);UIo=r(_Qt,"segformer"),_Qt.forEach(t),HIo=r(GXe," \u2014 "),mQ=n(GXe,"A",{href:!0});var bQt=s(mQ);JIo=r(bQt,"SegformerImageProcessor"),bQt.forEach(t),YIo=r(GXe," (SegFormer model)"),GXe.forEach(t),ZIo=i(te),W_=n(te,"LI",{});var OXe=s(W_);pve=n(OXe,"STRONG",{});var vQt=s(pve);KIo=r(vQt,"swin"),vQt.forEach(t),eNo=r(OXe," \u2014 "),cQ=n(OXe,"A",{href:!0});var FQt=s(cQ);oNo=r(FQt,"ViTImageProcessor"),FQt.forEach(t),rNo=r(OXe," (Swin Transformer model)"),OXe.forEach(t),tNo=i(te),U_=n(te,"LI",{});var VXe=s(U_);_ve=n(VXe,"STRONG",{});var TQt=s(_ve);aNo=r(TQt,"swinv2"),TQt.forEach(t),nNo=r(VXe," \u2014 "),fQ=n(VXe,"A",{href:!0});var MQt=s(fQ);sNo=r(MQt,"ViTImageProcessor"),MQt.forEach(t),lNo=r(VXe," (Swin Transformer V2 model)"),VXe.forEach(t),iNo=i(te),H_=n(te,"LI",{});var XXe=s(H_);bve=n(XXe,"STRONG",{});var EQt=s(bve);dNo=r(EQt,"van"),EQt.forEach(t),mNo=r(XXe," \u2014 "),gQ=n(XXe,"A",{href:!0});var CQt=s(gQ);cNo=r(CQt,"ConvNextImageProcessor"),CQt.forEach(t),fNo=r(XXe," (VAN model)"),XXe.forEach(t),gNo=i(te),J_=n(te,"LI",{});var zXe=s(J_);vve=n(zXe,"STRONG",{});var wQt=s(vve);hNo=r(wQt,"videomae"),wQt.forEach(t),uNo=r(zXe," \u2014 "),hQ=n(zXe,"A",{href:!0});var AQt=s(hQ);pNo=r(AQt,"VideoMAEImageProcessor"),AQt.forEach(t),_No=r(zXe," (VideoMAE model)"),zXe.forEach(t),bNo=i(te),Y_=n(te,"LI",{});var QXe=s(Y_);Fve=n(QXe,"STRONG",{});var LQt=s(Fve);vNo=r(LQt,"vilt"),LQt.forEach(t),FNo=r(QXe," \u2014 "),uQ=n(QXe,"A",{href:!0});var yQt=s(uQ);TNo=r(yQt,"ViltImageProcessor"),yQt.forEach(t),MNo=r(QXe," (ViLT model)"),QXe.forEach(t),ENo=i(te),Z_=n(te,"LI",{});var WXe=s(Z_);Tve=n(WXe,"STRONG",{});var xQt=s(Tve);CNo=r(xQt,"vit"),xQt.forEach(t),wNo=r(WXe," \u2014 "),pQ=n(WXe,"A",{href:!0});var $Qt=s(pQ);ANo=r($Qt,"ViTImageProcessor"),$Qt.forEach(t),LNo=r(WXe," (ViT model)"),WXe.forEach(t),yNo=i(te),K_=n(te,"LI",{});var UXe=s(K_);Mve=n(UXe,"STRONG",{});var kQt=s(Mve);xNo=r(kQt,"vit_mae"),kQt.forEach(t),$No=r(UXe," \u2014 "),_Q=n(UXe,"A",{href:!0});var SQt=s(_Q);kNo=r(SQt,"ViTImageProcessor"),SQt.forEach(t),SNo=r(UXe," (ViTMAE model)"),UXe.forEach(t),RNo=i(te),e1=n(te,"LI",{});var HXe=s(e1);Eve=n(HXe,"STRONG",{});var RQt=s(Eve);PNo=r(RQt,"vit_msn"),RQt.forEach(t),BNo=r(HXe," \u2014 "),bQ=n(HXe,"A",{href:!0});var PQt=s(bQ);INo=r(PQt,"ViTImageProcessor"),PQt.forEach(t),NNo=r(HXe," (ViTMSN model)"),HXe.forEach(t),qNo=i(te),o1=n(te,"LI",{});var JXe=s(o1);Cve=n(JXe,"STRONG",{});var BQt=s(Cve);jNo=r(BQt,"xclip"),BQt.forEach(t),DNo=r(JXe," \u2014 "),vQ=n(JXe,"A",{href:!0});var IQt=s(vQ);GNo=r(IQt,"CLIPImageProcessor"),IQt.forEach(t),ONo=r(JXe," (X-CLIP model)"),JXe.forEach(t),te.forEach(t),VNo=i($a),T(r1.$$.fragment,$a),XNo=i($a),T(t1.$$.fragment,$a),$a.forEach(t),zNo=i(Ql),a1=n(Ql,"DIV",{class:!0});var oco=s(a1);T(Zk.$$.fragment,oco),QNo=i(oco),wve=n(oco,"P",{});var NQt=s(wve);WNo=r(NQt,"Register a new image processor for this class."),NQt.forEach(t),oco.forEach(t),Ql.forEach(t),Iio=i(c),Dd=n(c,"H2",{class:!0});var rco=s(Dd);n1=n(rco,"A",{id:!0,class:!0,href:!0});var qQt=s(n1);Ave=n(qQt,"SPAN",{});var jQt=s(Ave);T(Kk.$$.fragment,jQt),jQt.forEach(t),qQt.forEach(t),UNo=i(rco),Lve=n(rco,"SPAN",{});var DQt=s(Lve);HNo=r(DQt,"AutoProcessor"),DQt.forEach(t),rco.forEach(t),Nio=i(c),jo=n(c,"DIV",{class:!0});var Wl=s(jo);T(eS.$$.fragment,Wl),JNo=i(Wl),oS=n(Wl,"P",{});var tco=s(oS);YNo=r(tco,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),FQ=n(tco,"A",{href:!0});var GQt=s(FQ);ZNo=r(GQt,"AutoProcessor.from_pretrained()"),GQt.forEach(t),KNo=r(tco," class method."),tco.forEach(t),eqo=i(Wl),rS=n(Wl,"P",{});var aco=s(rS);oqo=r(aco,"This class cannot be instantiated directly using "),yve=n(aco,"CODE",{});var OQt=s(yve);rqo=r(OQt,"__init__()"),OQt.forEach(t),tqo=r(aco," (throws an error)."),aco.forEach(t),aqo=i(Wl),ro=n(Wl,"DIV",{class:!0});var ka=s(ro);T(tS.$$.fragment,ka),nqo=i(ka),xve=n(ka,"P",{});var VQt=s(xve);sqo=r(VQt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),VQt.forEach(t),lqo=i(ka),Gd=n(ka,"P",{});var Nfe=s(Gd);iqo=r(Nfe,"The processor class to instantiate is selected based on the "),$ve=n(Nfe,"CODE",{});var XQt=s($ve);dqo=r(XQt,"model_type"),XQt.forEach(t),mqo=r(Nfe,` property of the config object (either
passed as an argument or loaded from `),kve=n(Nfe,"CODE",{});var zQt=s(kve);cqo=r(zQt,"pretrained_model_name_or_path"),zQt.forEach(t),fqo=r(Nfe," if possible):"),Nfe.forEach(t),gqo=i(ka),ie=n(ka,"UL",{});var ce=s(ie);s1=n(ce,"LI",{});var YXe=s(s1);Sve=n(YXe,"STRONG",{});var QQt=s(Sve);hqo=r(QQt,"clip"),QQt.forEach(t),uqo=r(YXe," \u2014 "),TQ=n(YXe,"A",{href:!0});var WQt=s(TQ);pqo=r(WQt,"CLIPProcessor"),WQt.forEach(t),_qo=r(YXe," (CLIP model)"),YXe.forEach(t),bqo=i(ce),l1=n(ce,"LI",{});var ZXe=s(l1);Rve=n(ZXe,"STRONG",{});var UQt=s(Rve);vqo=r(UQt,"clipseg"),UQt.forEach(t),Fqo=r(ZXe," \u2014 "),MQ=n(ZXe,"A",{href:!0});var HQt=s(MQ);Tqo=r(HQt,"CLIPSegProcessor"),HQt.forEach(t),Mqo=r(ZXe," (CLIPSeg model)"),ZXe.forEach(t),Eqo=i(ce),i1=n(ce,"LI",{});var KXe=s(i1);Pve=n(KXe,"STRONG",{});var JQt=s(Pve);Cqo=r(JQt,"flava"),JQt.forEach(t),wqo=r(KXe," \u2014 "),EQ=n(KXe,"A",{href:!0});var YQt=s(EQ);Aqo=r(YQt,"FlavaProcessor"),YQt.forEach(t),Lqo=r(KXe," (FLAVA model)"),KXe.forEach(t),yqo=i(ce),d1=n(ce,"LI",{});var eze=s(d1);Bve=n(eze,"STRONG",{});var ZQt=s(Bve);xqo=r(ZQt,"groupvit"),ZQt.forEach(t),$qo=r(eze," \u2014 "),CQ=n(eze,"A",{href:!0});var KQt=s(CQ);kqo=r(KQt,"CLIPProcessor"),KQt.forEach(t),Sqo=r(eze," (GroupViT model)"),eze.forEach(t),Rqo=i(ce),m1=n(ce,"LI",{});var oze=s(m1);Ive=n(oze,"STRONG",{});var eWt=s(Ive);Pqo=r(eWt,"layoutlmv2"),eWt.forEach(t),Bqo=r(oze," \u2014 "),wQ=n(oze,"A",{href:!0});var oWt=s(wQ);Iqo=r(oWt,"LayoutLMv2Processor"),oWt.forEach(t),Nqo=r(oze," (LayoutLMv2 model)"),oze.forEach(t),qqo=i(ce),c1=n(ce,"LI",{});var rze=s(c1);Nve=n(rze,"STRONG",{});var rWt=s(Nve);jqo=r(rWt,"layoutlmv3"),rWt.forEach(t),Dqo=r(rze," \u2014 "),AQ=n(rze,"A",{href:!0});var tWt=s(AQ);Gqo=r(tWt,"LayoutLMv3Processor"),tWt.forEach(t),Oqo=r(rze," (LayoutLMv3 model)"),rze.forEach(t),Vqo=i(ce),f1=n(ce,"LI",{});var tze=s(f1);qve=n(tze,"STRONG",{});var aWt=s(qve);Xqo=r(aWt,"layoutxlm"),aWt.forEach(t),zqo=r(tze," \u2014 "),LQ=n(tze,"A",{href:!0});var nWt=s(LQ);Qqo=r(nWt,"LayoutXLMProcessor"),nWt.forEach(t),Wqo=r(tze," (LayoutXLM model)"),tze.forEach(t),Uqo=i(ce),g1=n(ce,"LI",{});var aze=s(g1);jve=n(aze,"STRONG",{});var sWt=s(jve);Hqo=r(sWt,"markuplm"),sWt.forEach(t),Jqo=r(aze," \u2014 "),yQ=n(aze,"A",{href:!0});var lWt=s(yQ);Yqo=r(lWt,"MarkupLMProcessor"),lWt.forEach(t),Zqo=r(aze," (MarkupLM model)"),aze.forEach(t),Kqo=i(ce),h1=n(ce,"LI",{});var nze=s(h1);Dve=n(nze,"STRONG",{});var iWt=s(Dve);ejo=r(iWt,"owlvit"),iWt.forEach(t),ojo=r(nze," \u2014 "),xQ=n(nze,"A",{href:!0});var dWt=s(xQ);rjo=r(dWt,"OwlViTProcessor"),dWt.forEach(t),tjo=r(nze," (OWL-ViT model)"),nze.forEach(t),ajo=i(ce),u1=n(ce,"LI",{});var sze=s(u1);Gve=n(sze,"STRONG",{});var mWt=s(Gve);njo=r(mWt,"sew"),mWt.forEach(t),sjo=r(sze," \u2014 "),$Q=n(sze,"A",{href:!0});var cWt=s($Q);ljo=r(cWt,"Wav2Vec2Processor"),cWt.forEach(t),ijo=r(sze," (SEW model)"),sze.forEach(t),djo=i(ce),p1=n(ce,"LI",{});var lze=s(p1);Ove=n(lze,"STRONG",{});var fWt=s(Ove);mjo=r(fWt,"sew-d"),fWt.forEach(t),cjo=r(lze," \u2014 "),kQ=n(lze,"A",{href:!0});var gWt=s(kQ);fjo=r(gWt,"Wav2Vec2Processor"),gWt.forEach(t),gjo=r(lze," (SEW-D model)"),lze.forEach(t),hjo=i(ce),_1=n(ce,"LI",{});var ize=s(_1);Vve=n(ize,"STRONG",{});var hWt=s(Vve);ujo=r(hWt,"speech_to_text"),hWt.forEach(t),pjo=r(ize," \u2014 "),SQ=n(ize,"A",{href:!0});var uWt=s(SQ);_jo=r(uWt,"Speech2TextProcessor"),uWt.forEach(t),bjo=r(ize," (Speech2Text model)"),ize.forEach(t),vjo=i(ce),b1=n(ce,"LI",{});var dze=s(b1);Xve=n(dze,"STRONG",{});var pWt=s(Xve);Fjo=r(pWt,"speech_to_text_2"),pWt.forEach(t),Tjo=r(dze," \u2014 "),RQ=n(dze,"A",{href:!0});var _Wt=s(RQ);Mjo=r(_Wt,"Speech2Text2Processor"),_Wt.forEach(t),Ejo=r(dze," (Speech2Text2 model)"),dze.forEach(t),Cjo=i(ce),v1=n(ce,"LI",{});var mze=s(v1);zve=n(mze,"STRONG",{});var bWt=s(zve);wjo=r(bWt,"trocr"),bWt.forEach(t),Ajo=r(mze," \u2014 "),PQ=n(mze,"A",{href:!0});var vWt=s(PQ);Ljo=r(vWt,"TrOCRProcessor"),vWt.forEach(t),yjo=r(mze," (TrOCR model)"),mze.forEach(t),xjo=i(ce),F1=n(ce,"LI",{});var cze=s(F1);Qve=n(cze,"STRONG",{});var FWt=s(Qve);$jo=r(FWt,"unispeech"),FWt.forEach(t),kjo=r(cze," \u2014 "),BQ=n(cze,"A",{href:!0});var TWt=s(BQ);Sjo=r(TWt,"Wav2Vec2Processor"),TWt.forEach(t),Rjo=r(cze," (UniSpeech model)"),cze.forEach(t),Pjo=i(ce),T1=n(ce,"LI",{});var fze=s(T1);Wve=n(fze,"STRONG",{});var MWt=s(Wve);Bjo=r(MWt,"unispeech-sat"),MWt.forEach(t),Ijo=r(fze," \u2014 "),IQ=n(fze,"A",{href:!0});var EWt=s(IQ);Njo=r(EWt,"Wav2Vec2Processor"),EWt.forEach(t),qjo=r(fze," (UniSpeechSat model)"),fze.forEach(t),jjo=i(ce),M1=n(ce,"LI",{});var gze=s(M1);Uve=n(gze,"STRONG",{});var CWt=s(Uve);Djo=r(CWt,"vilt"),CWt.forEach(t),Gjo=r(gze," \u2014 "),NQ=n(gze,"A",{href:!0});var wWt=s(NQ);Ojo=r(wWt,"ViltProcessor"),wWt.forEach(t),Vjo=r(gze," (ViLT model)"),gze.forEach(t),Xjo=i(ce),E1=n(ce,"LI",{});var hze=s(E1);Hve=n(hze,"STRONG",{});var AWt=s(Hve);zjo=r(AWt,"vision-text-dual-encoder"),AWt.forEach(t),Qjo=r(hze," \u2014 "),qQ=n(hze,"A",{href:!0});var LWt=s(qQ);Wjo=r(LWt,"VisionTextDualEncoderProcessor"),LWt.forEach(t),Ujo=r(hze," (VisionTextDualEncoder model)"),hze.forEach(t),Hjo=i(ce),C1=n(ce,"LI",{});var uze=s(C1);Jve=n(uze,"STRONG",{});var yWt=s(Jve);Jjo=r(yWt,"wav2vec2"),yWt.forEach(t),Yjo=r(uze," \u2014 "),jQ=n(uze,"A",{href:!0});var xWt=s(jQ);Zjo=r(xWt,"Wav2Vec2Processor"),xWt.forEach(t),Kjo=r(uze," (Wav2Vec2 model)"),uze.forEach(t),eDo=i(ce),w1=n(ce,"LI",{});var pze=s(w1);Yve=n(pze,"STRONG",{});var $Wt=s(Yve);oDo=r($Wt,"wav2vec2-conformer"),$Wt.forEach(t),rDo=r(pze," \u2014 "),DQ=n(pze,"A",{href:!0});var kWt=s(DQ);tDo=r(kWt,"Wav2Vec2Processor"),kWt.forEach(t),aDo=r(pze," (Wav2Vec2-Conformer model)"),pze.forEach(t),nDo=i(ce),A1=n(ce,"LI",{});var _ze=s(A1);Zve=n(_ze,"STRONG",{});var SWt=s(Zve);sDo=r(SWt,"wavlm"),SWt.forEach(t),lDo=r(_ze," \u2014 "),GQ=n(_ze,"A",{href:!0});var RWt=s(GQ);iDo=r(RWt,"Wav2Vec2Processor"),RWt.forEach(t),dDo=r(_ze," (WavLM model)"),_ze.forEach(t),mDo=i(ce),L1=n(ce,"LI",{});var bze=s(L1);Kve=n(bze,"STRONG",{});var PWt=s(Kve);cDo=r(PWt,"whisper"),PWt.forEach(t),fDo=r(bze," \u2014 "),OQ=n(bze,"A",{href:!0});var BWt=s(OQ);gDo=r(BWt,"WhisperProcessor"),BWt.forEach(t),hDo=r(bze," (Whisper model)"),bze.forEach(t),uDo=i(ce),y1=n(ce,"LI",{});var vze=s(y1);eFe=n(vze,"STRONG",{});var IWt=s(eFe);pDo=r(IWt,"xclip"),IWt.forEach(t),_Do=r(vze," \u2014 "),VQ=n(vze,"A",{href:!0});var NWt=s(VQ);bDo=r(NWt,"XCLIPProcessor"),NWt.forEach(t),vDo=r(vze," (X-CLIP model)"),vze.forEach(t),ce.forEach(t),FDo=i(ka),T(x1.$$.fragment,ka),TDo=i(ka),T($1.$$.fragment,ka),ka.forEach(t),MDo=i(Wl),k1=n(Wl,"DIV",{class:!0});var nco=s(k1);T(aS.$$.fragment,nco),EDo=i(nco),oFe=n(nco,"P",{});var qWt=s(oFe);CDo=r(qWt,"Register a new processor for this class."),qWt.forEach(t),nco.forEach(t),Wl.forEach(t),qio=i(c),Od=n(c,"H2",{class:!0});var sco=s(Od);S1=n(sco,"A",{id:!0,class:!0,href:!0});var jWt=s(S1);rFe=n(jWt,"SPAN",{});var DWt=s(rFe);T(nS.$$.fragment,DWt),DWt.forEach(t),jWt.forEach(t),wDo=i(sco),tFe=n(sco,"SPAN",{});var GWt=s(tFe);ADo=r(GWt,"AutoModel"),GWt.forEach(t),sco.forEach(t),jio=i(c),Do=n(c,"DIV",{class:!0});var Ul=s(Do);T(sS.$$.fragment,Ul),LDo=i(Ul),Vd=n(Ul,"P",{});var qfe=s(Vd);yDo=r(qfe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XQ=n(qfe,"A",{href:!0});var OWt=s(XQ);xDo=r(OWt,"from_pretrained()"),OWt.forEach(t),$Do=r(qfe," class method or the "),zQ=n(qfe,"A",{href:!0});var VWt=s(zQ);kDo=r(VWt,"from_config()"),VWt.forEach(t),SDo=r(qfe,` class
method.`),qfe.forEach(t),RDo=i(Ul),lS=n(Ul,"P",{});var lco=s(lS);PDo=r(lco,"This class cannot be instantiated directly using "),aFe=n(lco,"CODE",{});var XWt=s(aFe);BDo=r(XWt,"__init__()"),XWt.forEach(t),IDo=r(lco," (throws an error)."),lco.forEach(t),NDo=i(Ul),At=n(Ul,"DIV",{class:!0});var bx=s(At);T(iS.$$.fragment,bx),qDo=i(bx),nFe=n(bx,"P",{});var zWt=s(nFe);jDo=r(zWt,"Instantiates one of the base model classes of the library from a configuration."),zWt.forEach(t),DDo=i(bx),Xd=n(bx,"P",{});var jfe=s(Xd);GDo=r(jfe,`Note:
Loading a model from its configuration file does `),sFe=n(jfe,"STRONG",{});var QWt=s(sFe);ODo=r(QWt,"not"),QWt.forEach(t),VDo=r(jfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(jfe,"A",{href:!0});var WWt=s(QQ);XDo=r(WWt,"from_pretrained()"),WWt.forEach(t),zDo=r(jfe," to load the model weights."),jfe.forEach(t),QDo=i(bx),T(R1.$$.fragment,bx),bx.forEach(t),WDo=i(Ul),to=n(Ul,"DIV",{class:!0});var Sa=s(to);T(dS.$$.fragment,Sa),UDo=i(Sa),lFe=n(Sa,"P",{});var UWt=s(lFe);HDo=r(UWt,"Instantiate one of the base model classes of the library from a pretrained model."),UWt.forEach(t),JDo=i(Sa),gn=n(Sa,"P",{});var vx=s(gn);YDo=r(vx,"The model class to instantiate is selected based on the "),iFe=n(vx,"CODE",{});var HWt=s(iFe);ZDo=r(HWt,"model_type"),HWt.forEach(t),KDo=r(vx,` property of the config object (either
passed as an argument or loaded from `),dFe=n(vx,"CODE",{});var JWt=s(dFe);eGo=r(JWt,"pretrained_model_name_or_path"),JWt.forEach(t),oGo=r(vx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=n(vx,"CODE",{});var YWt=s(mFe);rGo=r(YWt,"pretrained_model_name_or_path"),YWt.forEach(t),tGo=r(vx,":"),vx.forEach(t),aGo=i(Sa),y=n(Sa,"UL",{});var x=s(y);P1=n(x,"LI",{});var Fze=s(P1);cFe=n(Fze,"STRONG",{});var ZWt=s(cFe);nGo=r(ZWt,"albert"),ZWt.forEach(t),sGo=r(Fze," \u2014 "),WQ=n(Fze,"A",{href:!0});var KWt=s(WQ);lGo=r(KWt,"AlbertModel"),KWt.forEach(t),iGo=r(Fze," (ALBERT model)"),Fze.forEach(t),dGo=i(x),B1=n(x,"LI",{});var Tze=s(B1);fFe=n(Tze,"STRONG",{});var eUt=s(fFe);mGo=r(eUt,"bart"),eUt.forEach(t),cGo=r(Tze," \u2014 "),UQ=n(Tze,"A",{href:!0});var oUt=s(UQ);fGo=r(oUt,"BartModel"),oUt.forEach(t),gGo=r(Tze," (BART model)"),Tze.forEach(t),hGo=i(x),I1=n(x,"LI",{});var Mze=s(I1);gFe=n(Mze,"STRONG",{});var rUt=s(gFe);uGo=r(rUt,"beit"),rUt.forEach(t),pGo=r(Mze," \u2014 "),HQ=n(Mze,"A",{href:!0});var tUt=s(HQ);_Go=r(tUt,"BeitModel"),tUt.forEach(t),bGo=r(Mze," (BEiT model)"),Mze.forEach(t),vGo=i(x),N1=n(x,"LI",{});var Eze=s(N1);hFe=n(Eze,"STRONG",{});var aUt=s(hFe);FGo=r(aUt,"bert"),aUt.forEach(t),TGo=r(Eze," \u2014 "),JQ=n(Eze,"A",{href:!0});var nUt=s(JQ);MGo=r(nUt,"BertModel"),nUt.forEach(t),EGo=r(Eze," (BERT model)"),Eze.forEach(t),CGo=i(x),q1=n(x,"LI",{});var Cze=s(q1);uFe=n(Cze,"STRONG",{});var sUt=s(uFe);wGo=r(sUt,"bert-generation"),sUt.forEach(t),AGo=r(Cze," \u2014 "),YQ=n(Cze,"A",{href:!0});var lUt=s(YQ);LGo=r(lUt,"BertGenerationEncoder"),lUt.forEach(t),yGo=r(Cze," (Bert Generation model)"),Cze.forEach(t),xGo=i(x),j1=n(x,"LI",{});var wze=s(j1);pFe=n(wze,"STRONG",{});var iUt=s(pFe);$Go=r(iUt,"big_bird"),iUt.forEach(t),kGo=r(wze," \u2014 "),ZQ=n(wze,"A",{href:!0});var dUt=s(ZQ);SGo=r(dUt,"BigBirdModel"),dUt.forEach(t),RGo=r(wze," (BigBird model)"),wze.forEach(t),PGo=i(x),D1=n(x,"LI",{});var Aze=s(D1);_Fe=n(Aze,"STRONG",{});var mUt=s(_Fe);BGo=r(mUt,"bigbird_pegasus"),mUt.forEach(t),IGo=r(Aze," \u2014 "),KQ=n(Aze,"A",{href:!0});var cUt=s(KQ);NGo=r(cUt,"BigBirdPegasusModel"),cUt.forEach(t),qGo=r(Aze," (BigBird-Pegasus model)"),Aze.forEach(t),jGo=i(x),G1=n(x,"LI",{});var Lze=s(G1);bFe=n(Lze,"STRONG",{});var fUt=s(bFe);DGo=r(fUt,"blenderbot"),fUt.forEach(t),GGo=r(Lze," \u2014 "),eW=n(Lze,"A",{href:!0});var gUt=s(eW);OGo=r(gUt,"BlenderbotModel"),gUt.forEach(t),VGo=r(Lze," (Blenderbot model)"),Lze.forEach(t),XGo=i(x),O1=n(x,"LI",{});var yze=s(O1);vFe=n(yze,"STRONG",{});var hUt=s(vFe);zGo=r(hUt,"blenderbot-small"),hUt.forEach(t),QGo=r(yze," \u2014 "),oW=n(yze,"A",{href:!0});var uUt=s(oW);WGo=r(uUt,"BlenderbotSmallModel"),uUt.forEach(t),UGo=r(yze," (BlenderbotSmall model)"),yze.forEach(t),HGo=i(x),V1=n(x,"LI",{});var xze=s(V1);FFe=n(xze,"STRONG",{});var pUt=s(FFe);JGo=r(pUt,"bloom"),pUt.forEach(t),YGo=r(xze," \u2014 "),rW=n(xze,"A",{href:!0});var _Ut=s(rW);ZGo=r(_Ut,"BloomModel"),_Ut.forEach(t),KGo=r(xze," (BLOOM model)"),xze.forEach(t),eOo=i(x),X1=n(x,"LI",{});var $ze=s(X1);TFe=n($ze,"STRONG",{});var bUt=s(TFe);oOo=r(bUt,"camembert"),bUt.forEach(t),rOo=r($ze," \u2014 "),tW=n($ze,"A",{href:!0});var vUt=s(tW);tOo=r(vUt,"CamembertModel"),vUt.forEach(t),aOo=r($ze," (CamemBERT model)"),$ze.forEach(t),nOo=i(x),z1=n(x,"LI",{});var kze=s(z1);MFe=n(kze,"STRONG",{});var FUt=s(MFe);sOo=r(FUt,"canine"),FUt.forEach(t),lOo=r(kze," \u2014 "),aW=n(kze,"A",{href:!0});var TUt=s(aW);iOo=r(TUt,"CanineModel"),TUt.forEach(t),dOo=r(kze," (CANINE model)"),kze.forEach(t),mOo=i(x),Q1=n(x,"LI",{});var Sze=s(Q1);EFe=n(Sze,"STRONG",{});var MUt=s(EFe);cOo=r(MUt,"clip"),MUt.forEach(t),fOo=r(Sze," \u2014 "),nW=n(Sze,"A",{href:!0});var EUt=s(nW);gOo=r(EUt,"CLIPModel"),EUt.forEach(t),hOo=r(Sze," (CLIP model)"),Sze.forEach(t),uOo=i(x),W1=n(x,"LI",{});var Rze=s(W1);CFe=n(Rze,"STRONG",{});var CUt=s(CFe);pOo=r(CUt,"clipseg"),CUt.forEach(t),_Oo=r(Rze," \u2014 "),sW=n(Rze,"A",{href:!0});var wUt=s(sW);bOo=r(wUt,"CLIPSegModel"),wUt.forEach(t),vOo=r(Rze," (CLIPSeg model)"),Rze.forEach(t),FOo=i(x),U1=n(x,"LI",{});var Pze=s(U1);wFe=n(Pze,"STRONG",{});var AUt=s(wFe);TOo=r(AUt,"codegen"),AUt.forEach(t),MOo=r(Pze," \u2014 "),lW=n(Pze,"A",{href:!0});var LUt=s(lW);EOo=r(LUt,"CodeGenModel"),LUt.forEach(t),COo=r(Pze," (CodeGen model)"),Pze.forEach(t),wOo=i(x),H1=n(x,"LI",{});var Bze=s(H1);AFe=n(Bze,"STRONG",{});var yUt=s(AFe);AOo=r(yUt,"conditional_detr"),yUt.forEach(t),LOo=r(Bze," \u2014 "),iW=n(Bze,"A",{href:!0});var xUt=s(iW);yOo=r(xUt,"ConditionalDetrModel"),xUt.forEach(t),xOo=r(Bze," (Conditional DETR model)"),Bze.forEach(t),$Oo=i(x),J1=n(x,"LI",{});var Ize=s(J1);LFe=n(Ize,"STRONG",{});var $Ut=s(LFe);kOo=r($Ut,"convbert"),$Ut.forEach(t),SOo=r(Ize," \u2014 "),dW=n(Ize,"A",{href:!0});var kUt=s(dW);ROo=r(kUt,"ConvBertModel"),kUt.forEach(t),POo=r(Ize," (ConvBERT model)"),Ize.forEach(t),BOo=i(x),Y1=n(x,"LI",{});var Nze=s(Y1);yFe=n(Nze,"STRONG",{});var SUt=s(yFe);IOo=r(SUt,"convnext"),SUt.forEach(t),NOo=r(Nze," \u2014 "),mW=n(Nze,"A",{href:!0});var RUt=s(mW);qOo=r(RUt,"ConvNextModel"),RUt.forEach(t),jOo=r(Nze," (ConvNeXT model)"),Nze.forEach(t),DOo=i(x),Z1=n(x,"LI",{});var qze=s(Z1);xFe=n(qze,"STRONG",{});var PUt=s(xFe);GOo=r(PUt,"ctrl"),PUt.forEach(t),OOo=r(qze," \u2014 "),cW=n(qze,"A",{href:!0});var BUt=s(cW);VOo=r(BUt,"CTRLModel"),BUt.forEach(t),XOo=r(qze," (CTRL model)"),qze.forEach(t),zOo=i(x),K1=n(x,"LI",{});var jze=s(K1);$Fe=n(jze,"STRONG",{});var IUt=s($Fe);QOo=r(IUt,"cvt"),IUt.forEach(t),WOo=r(jze," \u2014 "),fW=n(jze,"A",{href:!0});var NUt=s(fW);UOo=r(NUt,"CvtModel"),NUt.forEach(t),HOo=r(jze," (CvT model)"),jze.forEach(t),JOo=i(x),e2=n(x,"LI",{});var Dze=s(e2);kFe=n(Dze,"STRONG",{});var qUt=s(kFe);YOo=r(qUt,"data2vec-audio"),qUt.forEach(t),ZOo=r(Dze," \u2014 "),gW=n(Dze,"A",{href:!0});var jUt=s(gW);KOo=r(jUt,"Data2VecAudioModel"),jUt.forEach(t),eVo=r(Dze," (Data2VecAudio model)"),Dze.forEach(t),oVo=i(x),o2=n(x,"LI",{});var Gze=s(o2);SFe=n(Gze,"STRONG",{});var DUt=s(SFe);rVo=r(DUt,"data2vec-text"),DUt.forEach(t),tVo=r(Gze," \u2014 "),hW=n(Gze,"A",{href:!0});var GUt=s(hW);aVo=r(GUt,"Data2VecTextModel"),GUt.forEach(t),nVo=r(Gze," (Data2VecText model)"),Gze.forEach(t),sVo=i(x),r2=n(x,"LI",{});var Oze=s(r2);RFe=n(Oze,"STRONG",{});var OUt=s(RFe);lVo=r(OUt,"data2vec-vision"),OUt.forEach(t),iVo=r(Oze," \u2014 "),uW=n(Oze,"A",{href:!0});var VUt=s(uW);dVo=r(VUt,"Data2VecVisionModel"),VUt.forEach(t),mVo=r(Oze," (Data2VecVision model)"),Oze.forEach(t),cVo=i(x),t2=n(x,"LI",{});var Vze=s(t2);PFe=n(Vze,"STRONG",{});var XUt=s(PFe);fVo=r(XUt,"deberta"),XUt.forEach(t),gVo=r(Vze," \u2014 "),pW=n(Vze,"A",{href:!0});var zUt=s(pW);hVo=r(zUt,"DebertaModel"),zUt.forEach(t),uVo=r(Vze," (DeBERTa model)"),Vze.forEach(t),pVo=i(x),a2=n(x,"LI",{});var Xze=s(a2);BFe=n(Xze,"STRONG",{});var QUt=s(BFe);_Vo=r(QUt,"deberta-v2"),QUt.forEach(t),bVo=r(Xze," \u2014 "),_W=n(Xze,"A",{href:!0});var WUt=s(_W);vVo=r(WUt,"DebertaV2Model"),WUt.forEach(t),FVo=r(Xze," (DeBERTa-v2 model)"),Xze.forEach(t),TVo=i(x),n2=n(x,"LI",{});var zze=s(n2);IFe=n(zze,"STRONG",{});var UUt=s(IFe);MVo=r(UUt,"decision_transformer"),UUt.forEach(t),EVo=r(zze," \u2014 "),bW=n(zze,"A",{href:!0});var HUt=s(bW);CVo=r(HUt,"DecisionTransformerModel"),HUt.forEach(t),wVo=r(zze," (Decision Transformer model)"),zze.forEach(t),AVo=i(x),s2=n(x,"LI",{});var Qze=s(s2);NFe=n(Qze,"STRONG",{});var JUt=s(NFe);LVo=r(JUt,"deformable_detr"),JUt.forEach(t),yVo=r(Qze," \u2014 "),vW=n(Qze,"A",{href:!0});var YUt=s(vW);xVo=r(YUt,"DeformableDetrModel"),YUt.forEach(t),$Vo=r(Qze," (Deformable DETR model)"),Qze.forEach(t),kVo=i(x),l2=n(x,"LI",{});var Wze=s(l2);qFe=n(Wze,"STRONG",{});var ZUt=s(qFe);SVo=r(ZUt,"deit"),ZUt.forEach(t),RVo=r(Wze," \u2014 "),FW=n(Wze,"A",{href:!0});var KUt=s(FW);PVo=r(KUt,"DeiTModel"),KUt.forEach(t),BVo=r(Wze," (DeiT model)"),Wze.forEach(t),IVo=i(x),i2=n(x,"LI",{});var Uze=s(i2);jFe=n(Uze,"STRONG",{});var eHt=s(jFe);NVo=r(eHt,"detr"),eHt.forEach(t),qVo=r(Uze," \u2014 "),TW=n(Uze,"A",{href:!0});var oHt=s(TW);jVo=r(oHt,"DetrModel"),oHt.forEach(t),DVo=r(Uze," (DETR model)"),Uze.forEach(t),GVo=i(x),d2=n(x,"LI",{});var Hze=s(d2);DFe=n(Hze,"STRONG",{});var rHt=s(DFe);OVo=r(rHt,"distilbert"),rHt.forEach(t),VVo=r(Hze," \u2014 "),MW=n(Hze,"A",{href:!0});var tHt=s(MW);XVo=r(tHt,"DistilBertModel"),tHt.forEach(t),zVo=r(Hze," (DistilBERT model)"),Hze.forEach(t),QVo=i(x),m2=n(x,"LI",{});var Jze=s(m2);GFe=n(Jze,"STRONG",{});var aHt=s(GFe);WVo=r(aHt,"donut-swin"),aHt.forEach(t),UVo=r(Jze," \u2014 "),EW=n(Jze,"A",{href:!0});var nHt=s(EW);HVo=r(nHt,"DonutSwinModel"),nHt.forEach(t),JVo=r(Jze," (DonutSwin model)"),Jze.forEach(t),YVo=i(x),c2=n(x,"LI",{});var Yze=s(c2);OFe=n(Yze,"STRONG",{});var sHt=s(OFe);ZVo=r(sHt,"dpr"),sHt.forEach(t),KVo=r(Yze," \u2014 "),CW=n(Yze,"A",{href:!0});var lHt=s(CW);eXo=r(lHt,"DPRQuestionEncoder"),lHt.forEach(t),oXo=r(Yze," (DPR model)"),Yze.forEach(t),rXo=i(x),f2=n(x,"LI",{});var Zze=s(f2);VFe=n(Zze,"STRONG",{});var iHt=s(VFe);tXo=r(iHt,"dpt"),iHt.forEach(t),aXo=r(Zze," \u2014 "),wW=n(Zze,"A",{href:!0});var dHt=s(wW);nXo=r(dHt,"DPTModel"),dHt.forEach(t),sXo=r(Zze," (DPT model)"),Zze.forEach(t),lXo=i(x),g2=n(x,"LI",{});var Kze=s(g2);XFe=n(Kze,"STRONG",{});var mHt=s(XFe);iXo=r(mHt,"electra"),mHt.forEach(t),dXo=r(Kze," \u2014 "),AW=n(Kze,"A",{href:!0});var cHt=s(AW);mXo=r(cHt,"ElectraModel"),cHt.forEach(t),cXo=r(Kze," (ELECTRA model)"),Kze.forEach(t),fXo=i(x),h2=n(x,"LI",{});var eQe=s(h2);zFe=n(eQe,"STRONG",{});var fHt=s(zFe);gXo=r(fHt,"ernie"),fHt.forEach(t),hXo=r(eQe," \u2014 "),LW=n(eQe,"A",{href:!0});var gHt=s(LW);uXo=r(gHt,"ErnieModel"),gHt.forEach(t),pXo=r(eQe," (ERNIE model)"),eQe.forEach(t),_Xo=i(x),u2=n(x,"LI",{});var oQe=s(u2);QFe=n(oQe,"STRONG",{});var hHt=s(QFe);bXo=r(hHt,"esm"),hHt.forEach(t),vXo=r(oQe," \u2014 "),yW=n(oQe,"A",{href:!0});var uHt=s(yW);FXo=r(uHt,"EsmModel"),uHt.forEach(t),TXo=r(oQe," (ESM model)"),oQe.forEach(t),MXo=i(x),p2=n(x,"LI",{});var rQe=s(p2);WFe=n(rQe,"STRONG",{});var pHt=s(WFe);EXo=r(pHt,"flaubert"),pHt.forEach(t),CXo=r(rQe," \u2014 "),xW=n(rQe,"A",{href:!0});var _Ht=s(xW);wXo=r(_Ht,"FlaubertModel"),_Ht.forEach(t),AXo=r(rQe," (FlauBERT model)"),rQe.forEach(t),LXo=i(x),_2=n(x,"LI",{});var tQe=s(_2);UFe=n(tQe,"STRONG",{});var bHt=s(UFe);yXo=r(bHt,"flava"),bHt.forEach(t),xXo=r(tQe," \u2014 "),$W=n(tQe,"A",{href:!0});var vHt=s($W);$Xo=r(vHt,"FlavaModel"),vHt.forEach(t),kXo=r(tQe," (FLAVA model)"),tQe.forEach(t),SXo=i(x),b2=n(x,"LI",{});var aQe=s(b2);HFe=n(aQe,"STRONG",{});var FHt=s(HFe);RXo=r(FHt,"fnet"),FHt.forEach(t),PXo=r(aQe," \u2014 "),kW=n(aQe,"A",{href:!0});var THt=s(kW);BXo=r(THt,"FNetModel"),THt.forEach(t),IXo=r(aQe," (FNet model)"),aQe.forEach(t),NXo=i(x),v2=n(x,"LI",{});var nQe=s(v2);JFe=n(nQe,"STRONG",{});var MHt=s(JFe);qXo=r(MHt,"fsmt"),MHt.forEach(t),jXo=r(nQe," \u2014 "),SW=n(nQe,"A",{href:!0});var EHt=s(SW);DXo=r(EHt,"FSMTModel"),EHt.forEach(t),GXo=r(nQe," (FairSeq Machine-Translation model)"),nQe.forEach(t),OXo=i(x),ql=n(x,"LI",{});var Vq=s(ql);YFe=n(Vq,"STRONG",{});var CHt=s(YFe);VXo=r(CHt,"funnel"),CHt.forEach(t),XXo=r(Vq," \u2014 "),RW=n(Vq,"A",{href:!0});var wHt=s(RW);zXo=r(wHt,"FunnelModel"),wHt.forEach(t),QXo=r(Vq," or "),PW=n(Vq,"A",{href:!0});var AHt=s(PW);WXo=r(AHt,"FunnelBaseModel"),AHt.forEach(t),UXo=r(Vq," (Funnel Transformer model)"),Vq.forEach(t),HXo=i(x),F2=n(x,"LI",{});var sQe=s(F2);ZFe=n(sQe,"STRONG",{});var LHt=s(ZFe);JXo=r(LHt,"glpn"),LHt.forEach(t),YXo=r(sQe," \u2014 "),BW=n(sQe,"A",{href:!0});var yHt=s(BW);ZXo=r(yHt,"GLPNModel"),yHt.forEach(t),KXo=r(sQe," (GLPN model)"),sQe.forEach(t),ezo=i(x),T2=n(x,"LI",{});var lQe=s(T2);KFe=n(lQe,"STRONG",{});var xHt=s(KFe);ozo=r(xHt,"gpt2"),xHt.forEach(t),rzo=r(lQe," \u2014 "),IW=n(lQe,"A",{href:!0});var $Ht=s(IW);tzo=r($Ht,"GPT2Model"),$Ht.forEach(t),azo=r(lQe," (OpenAI GPT-2 model)"),lQe.forEach(t),nzo=i(x),M2=n(x,"LI",{});var iQe=s(M2);eTe=n(iQe,"STRONG",{});var kHt=s(eTe);szo=r(kHt,"gpt_neo"),kHt.forEach(t),lzo=r(iQe," \u2014 "),NW=n(iQe,"A",{href:!0});var SHt=s(NW);izo=r(SHt,"GPTNeoModel"),SHt.forEach(t),dzo=r(iQe," (GPT Neo model)"),iQe.forEach(t),mzo=i(x),E2=n(x,"LI",{});var dQe=s(E2);oTe=n(dQe,"STRONG",{});var RHt=s(oTe);czo=r(RHt,"gpt_neox"),RHt.forEach(t),fzo=r(dQe," \u2014 "),qW=n(dQe,"A",{href:!0});var PHt=s(qW);gzo=r(PHt,"GPTNeoXModel"),PHt.forEach(t),hzo=r(dQe," (GPT NeoX model)"),dQe.forEach(t),uzo=i(x),C2=n(x,"LI",{});var mQe=s(C2);rTe=n(mQe,"STRONG",{});var BHt=s(rTe);pzo=r(BHt,"gpt_neox_japanese"),BHt.forEach(t),_zo=r(mQe," \u2014 "),jW=n(mQe,"A",{href:!0});var IHt=s(jW);bzo=r(IHt,"GPTNeoXJapaneseModel"),IHt.forEach(t),vzo=r(mQe," (GPT NeoX Japanese model)"),mQe.forEach(t),Fzo=i(x),w2=n(x,"LI",{});var cQe=s(w2);tTe=n(cQe,"STRONG",{});var NHt=s(tTe);Tzo=r(NHt,"gptj"),NHt.forEach(t),Mzo=r(cQe," \u2014 "),DW=n(cQe,"A",{href:!0});var qHt=s(DW);Ezo=r(qHt,"GPTJModel"),qHt.forEach(t),Czo=r(cQe," (GPT-J model)"),cQe.forEach(t),wzo=i(x),A2=n(x,"LI",{});var fQe=s(A2);aTe=n(fQe,"STRONG",{});var jHt=s(aTe);Azo=r(jHt,"groupvit"),jHt.forEach(t),Lzo=r(fQe," \u2014 "),GW=n(fQe,"A",{href:!0});var DHt=s(GW);yzo=r(DHt,"GroupViTModel"),DHt.forEach(t),xzo=r(fQe," (GroupViT model)"),fQe.forEach(t),$zo=i(x),L2=n(x,"LI",{});var gQe=s(L2);nTe=n(gQe,"STRONG",{});var GHt=s(nTe);kzo=r(GHt,"hubert"),GHt.forEach(t),Szo=r(gQe," \u2014 "),OW=n(gQe,"A",{href:!0});var OHt=s(OW);Rzo=r(OHt,"HubertModel"),OHt.forEach(t),Pzo=r(gQe," (Hubert model)"),gQe.forEach(t),Bzo=i(x),y2=n(x,"LI",{});var hQe=s(y2);sTe=n(hQe,"STRONG",{});var VHt=s(sTe);Izo=r(VHt,"ibert"),VHt.forEach(t),Nzo=r(hQe," \u2014 "),VW=n(hQe,"A",{href:!0});var XHt=s(VW);qzo=r(XHt,"IBertModel"),XHt.forEach(t),jzo=r(hQe," (I-BERT model)"),hQe.forEach(t),Dzo=i(x),x2=n(x,"LI",{});var uQe=s(x2);lTe=n(uQe,"STRONG",{});var zHt=s(lTe);Gzo=r(zHt,"imagegpt"),zHt.forEach(t),Ozo=r(uQe," \u2014 "),XW=n(uQe,"A",{href:!0});var QHt=s(XW);Vzo=r(QHt,"ImageGPTModel"),QHt.forEach(t),Xzo=r(uQe," (ImageGPT model)"),uQe.forEach(t),zzo=i(x),$2=n(x,"LI",{});var pQe=s($2);iTe=n(pQe,"STRONG",{});var WHt=s(iTe);Qzo=r(WHt,"jukebox"),WHt.forEach(t),Wzo=r(pQe," \u2014 "),zW=n(pQe,"A",{href:!0});var UHt=s(zW);Uzo=r(UHt,"JukeboxModel"),UHt.forEach(t),Hzo=r(pQe," (Jukebox model)"),pQe.forEach(t),Jzo=i(x),k2=n(x,"LI",{});var _Qe=s(k2);dTe=n(_Qe,"STRONG",{});var HHt=s(dTe);Yzo=r(HHt,"layoutlm"),HHt.forEach(t),Zzo=r(_Qe," \u2014 "),QW=n(_Qe,"A",{href:!0});var JHt=s(QW);Kzo=r(JHt,"LayoutLMModel"),JHt.forEach(t),eQo=r(_Qe," (LayoutLM model)"),_Qe.forEach(t),oQo=i(x),S2=n(x,"LI",{});var bQe=s(S2);mTe=n(bQe,"STRONG",{});var YHt=s(mTe);rQo=r(YHt,"layoutlmv2"),YHt.forEach(t),tQo=r(bQe," \u2014 "),WW=n(bQe,"A",{href:!0});var ZHt=s(WW);aQo=r(ZHt,"LayoutLMv2Model"),ZHt.forEach(t),nQo=r(bQe," (LayoutLMv2 model)"),bQe.forEach(t),sQo=i(x),R2=n(x,"LI",{});var vQe=s(R2);cTe=n(vQe,"STRONG",{});var KHt=s(cTe);lQo=r(KHt,"layoutlmv3"),KHt.forEach(t),iQo=r(vQe," \u2014 "),UW=n(vQe,"A",{href:!0});var eJt=s(UW);dQo=r(eJt,"LayoutLMv3Model"),eJt.forEach(t),mQo=r(vQe," (LayoutLMv3 model)"),vQe.forEach(t),cQo=i(x),P2=n(x,"LI",{});var FQe=s(P2);fTe=n(FQe,"STRONG",{});var oJt=s(fTe);fQo=r(oJt,"led"),oJt.forEach(t),gQo=r(FQe," \u2014 "),HW=n(FQe,"A",{href:!0});var rJt=s(HW);hQo=r(rJt,"LEDModel"),rJt.forEach(t),uQo=r(FQe," (LED model)"),FQe.forEach(t),pQo=i(x),B2=n(x,"LI",{});var TQe=s(B2);gTe=n(TQe,"STRONG",{});var tJt=s(gTe);_Qo=r(tJt,"levit"),tJt.forEach(t),bQo=r(TQe," \u2014 "),JW=n(TQe,"A",{href:!0});var aJt=s(JW);vQo=r(aJt,"LevitModel"),aJt.forEach(t),FQo=r(TQe," (LeViT model)"),TQe.forEach(t),TQo=i(x),I2=n(x,"LI",{});var MQe=s(I2);hTe=n(MQe,"STRONG",{});var nJt=s(hTe);MQo=r(nJt,"lilt"),nJt.forEach(t),EQo=r(MQe," \u2014 "),YW=n(MQe,"A",{href:!0});var sJt=s(YW);CQo=r(sJt,"LiltModel"),sJt.forEach(t),wQo=r(MQe," (LiLT model)"),MQe.forEach(t),AQo=i(x),N2=n(x,"LI",{});var EQe=s(N2);uTe=n(EQe,"STRONG",{});var lJt=s(uTe);LQo=r(lJt,"longformer"),lJt.forEach(t),yQo=r(EQe," \u2014 "),ZW=n(EQe,"A",{href:!0});var iJt=s(ZW);xQo=r(iJt,"LongformerModel"),iJt.forEach(t),$Qo=r(EQe," (Longformer model)"),EQe.forEach(t),kQo=i(x),q2=n(x,"LI",{});var CQe=s(q2);pTe=n(CQe,"STRONG",{});var dJt=s(pTe);SQo=r(dJt,"longt5"),dJt.forEach(t),RQo=r(CQe," \u2014 "),KW=n(CQe,"A",{href:!0});var mJt=s(KW);PQo=r(mJt,"LongT5Model"),mJt.forEach(t),BQo=r(CQe," (LongT5 model)"),CQe.forEach(t),IQo=i(x),j2=n(x,"LI",{});var wQe=s(j2);_Te=n(wQe,"STRONG",{});var cJt=s(_Te);NQo=r(cJt,"luke"),cJt.forEach(t),qQo=r(wQe," \u2014 "),eU=n(wQe,"A",{href:!0});var fJt=s(eU);jQo=r(fJt,"LukeModel"),fJt.forEach(t),DQo=r(wQe," (LUKE model)"),wQe.forEach(t),GQo=i(x),D2=n(x,"LI",{});var AQe=s(D2);bTe=n(AQe,"STRONG",{});var gJt=s(bTe);OQo=r(gJt,"lxmert"),gJt.forEach(t),VQo=r(AQe," \u2014 "),oU=n(AQe,"A",{href:!0});var hJt=s(oU);XQo=r(hJt,"LxmertModel"),hJt.forEach(t),zQo=r(AQe," (LXMERT model)"),AQe.forEach(t),QQo=i(x),G2=n(x,"LI",{});var LQe=s(G2);vTe=n(LQe,"STRONG",{});var uJt=s(vTe);WQo=r(uJt,"m2m_100"),uJt.forEach(t),UQo=r(LQe," \u2014 "),rU=n(LQe,"A",{href:!0});var pJt=s(rU);HQo=r(pJt,"M2M100Model"),pJt.forEach(t),JQo=r(LQe," (M2M100 model)"),LQe.forEach(t),YQo=i(x),O2=n(x,"LI",{});var yQe=s(O2);FTe=n(yQe,"STRONG",{});var _Jt=s(FTe);ZQo=r(_Jt,"marian"),_Jt.forEach(t),KQo=r(yQe," \u2014 "),tU=n(yQe,"A",{href:!0});var bJt=s(tU);eWo=r(bJt,"MarianModel"),bJt.forEach(t),oWo=r(yQe," (Marian model)"),yQe.forEach(t),rWo=i(x),V2=n(x,"LI",{});var xQe=s(V2);TTe=n(xQe,"STRONG",{});var vJt=s(TTe);tWo=r(vJt,"markuplm"),vJt.forEach(t),aWo=r(xQe," \u2014 "),aU=n(xQe,"A",{href:!0});var FJt=s(aU);nWo=r(FJt,"MarkupLMModel"),FJt.forEach(t),sWo=r(xQe," (MarkupLM model)"),xQe.forEach(t),lWo=i(x),X2=n(x,"LI",{});var $Qe=s(X2);MTe=n($Qe,"STRONG",{});var TJt=s(MTe);iWo=r(TJt,"maskformer"),TJt.forEach(t),dWo=r($Qe," \u2014 "),nU=n($Qe,"A",{href:!0});var MJt=s(nU);mWo=r(MJt,"MaskFormerModel"),MJt.forEach(t),cWo=r($Qe," (MaskFormer model)"),$Qe.forEach(t),fWo=i(x),z2=n(x,"LI",{});var kQe=s(z2);ETe=n(kQe,"STRONG",{});var EJt=s(ETe);gWo=r(EJt,"mbart"),EJt.forEach(t),hWo=r(kQe," \u2014 "),sU=n(kQe,"A",{href:!0});var CJt=s(sU);uWo=r(CJt,"MBartModel"),CJt.forEach(t),pWo=r(kQe," (mBART model)"),kQe.forEach(t),_Wo=i(x),Q2=n(x,"LI",{});var SQe=s(Q2);CTe=n(SQe,"STRONG",{});var wJt=s(CTe);bWo=r(wJt,"mctct"),wJt.forEach(t),vWo=r(SQe," \u2014 "),lU=n(SQe,"A",{href:!0});var AJt=s(lU);FWo=r(AJt,"MCTCTModel"),AJt.forEach(t),TWo=r(SQe," (M-CTC-T model)"),SQe.forEach(t),MWo=i(x),W2=n(x,"LI",{});var RQe=s(W2);wTe=n(RQe,"STRONG",{});var LJt=s(wTe);EWo=r(LJt,"megatron-bert"),LJt.forEach(t),CWo=r(RQe," \u2014 "),iU=n(RQe,"A",{href:!0});var yJt=s(iU);wWo=r(yJt,"MegatronBertModel"),yJt.forEach(t),AWo=r(RQe," (Megatron-BERT model)"),RQe.forEach(t),LWo=i(x),U2=n(x,"LI",{});var PQe=s(U2);ATe=n(PQe,"STRONG",{});var xJt=s(ATe);yWo=r(xJt,"mobilebert"),xJt.forEach(t),xWo=r(PQe," \u2014 "),dU=n(PQe,"A",{href:!0});var $Jt=s(dU);$Wo=r($Jt,"MobileBertModel"),$Jt.forEach(t),kWo=r(PQe," (MobileBERT model)"),PQe.forEach(t),SWo=i(x),H2=n(x,"LI",{});var BQe=s(H2);LTe=n(BQe,"STRONG",{});var kJt=s(LTe);RWo=r(kJt,"mobilenet_v2"),kJt.forEach(t),PWo=r(BQe," \u2014 "),mU=n(BQe,"A",{href:!0});var SJt=s(mU);BWo=r(SJt,"MobileNetV2Model"),SJt.forEach(t),IWo=r(BQe," (MobileNetV2 model)"),BQe.forEach(t),NWo=i(x),J2=n(x,"LI",{});var IQe=s(J2);yTe=n(IQe,"STRONG",{});var RJt=s(yTe);qWo=r(RJt,"mobilevit"),RJt.forEach(t),jWo=r(IQe," \u2014 "),cU=n(IQe,"A",{href:!0});var PJt=s(cU);DWo=r(PJt,"MobileViTModel"),PJt.forEach(t),GWo=r(IQe," (MobileViT model)"),IQe.forEach(t),OWo=i(x),Y2=n(x,"LI",{});var NQe=s(Y2);xTe=n(NQe,"STRONG",{});var BJt=s(xTe);VWo=r(BJt,"mpnet"),BJt.forEach(t),XWo=r(NQe," \u2014 "),fU=n(NQe,"A",{href:!0});var IJt=s(fU);zWo=r(IJt,"MPNetModel"),IJt.forEach(t),QWo=r(NQe," (MPNet model)"),NQe.forEach(t),WWo=i(x),Z2=n(x,"LI",{});var qQe=s(Z2);$Te=n(qQe,"STRONG",{});var NJt=s($Te);UWo=r(NJt,"mt5"),NJt.forEach(t),HWo=r(qQe," \u2014 "),gU=n(qQe,"A",{href:!0});var qJt=s(gU);JWo=r(qJt,"MT5Model"),qJt.forEach(t),YWo=r(qQe," (MT5 model)"),qQe.forEach(t),ZWo=i(x),K2=n(x,"LI",{});var jQe=s(K2);kTe=n(jQe,"STRONG",{});var jJt=s(kTe);KWo=r(jJt,"mvp"),jJt.forEach(t),eUo=r(jQe," \u2014 "),hU=n(jQe,"A",{href:!0});var DJt=s(hU);oUo=r(DJt,"MvpModel"),DJt.forEach(t),rUo=r(jQe," (MVP model)"),jQe.forEach(t),tUo=i(x),eb=n(x,"LI",{});var DQe=s(eb);STe=n(DQe,"STRONG",{});var GJt=s(STe);aUo=r(GJt,"nezha"),GJt.forEach(t),nUo=r(DQe," \u2014 "),uU=n(DQe,"A",{href:!0});var OJt=s(uU);sUo=r(OJt,"NezhaModel"),OJt.forEach(t),lUo=r(DQe," (Nezha model)"),DQe.forEach(t),iUo=i(x),ob=n(x,"LI",{});var GQe=s(ob);RTe=n(GQe,"STRONG",{});var VJt=s(RTe);dUo=r(VJt,"nllb"),VJt.forEach(t),mUo=r(GQe," \u2014 "),pU=n(GQe,"A",{href:!0});var XJt=s(pU);cUo=r(XJt,"M2M100Model"),XJt.forEach(t),fUo=r(GQe," (NLLB model)"),GQe.forEach(t),gUo=i(x),rb=n(x,"LI",{});var OQe=s(rb);PTe=n(OQe,"STRONG",{});var zJt=s(PTe);hUo=r(zJt,"nystromformer"),zJt.forEach(t),uUo=r(OQe," \u2014 "),_U=n(OQe,"A",{href:!0});var QJt=s(_U);pUo=r(QJt,"NystromformerModel"),QJt.forEach(t),_Uo=r(OQe," (Nystr\xF6mformer model)"),OQe.forEach(t),bUo=i(x),tb=n(x,"LI",{});var VQe=s(tb);BTe=n(VQe,"STRONG",{});var WJt=s(BTe);vUo=r(WJt,"openai-gpt"),WJt.forEach(t),FUo=r(VQe," \u2014 "),bU=n(VQe,"A",{href:!0});var UJt=s(bU);TUo=r(UJt,"OpenAIGPTModel"),UJt.forEach(t),MUo=r(VQe," (OpenAI GPT model)"),VQe.forEach(t),EUo=i(x),ab=n(x,"LI",{});var XQe=s(ab);ITe=n(XQe,"STRONG",{});var HJt=s(ITe);CUo=r(HJt,"opt"),HJt.forEach(t),wUo=r(XQe," \u2014 "),vU=n(XQe,"A",{href:!0});var JJt=s(vU);AUo=r(JJt,"OPTModel"),JJt.forEach(t),LUo=r(XQe," (OPT model)"),XQe.forEach(t),yUo=i(x),nb=n(x,"LI",{});var zQe=s(nb);NTe=n(zQe,"STRONG",{});var YJt=s(NTe);xUo=r(YJt,"owlvit"),YJt.forEach(t),$Uo=r(zQe," \u2014 "),FU=n(zQe,"A",{href:!0});var ZJt=s(FU);kUo=r(ZJt,"OwlViTModel"),ZJt.forEach(t),SUo=r(zQe," (OWL-ViT model)"),zQe.forEach(t),RUo=i(x),sb=n(x,"LI",{});var QQe=s(sb);qTe=n(QQe,"STRONG",{});var KJt=s(qTe);PUo=r(KJt,"pegasus"),KJt.forEach(t),BUo=r(QQe," \u2014 "),TU=n(QQe,"A",{href:!0});var eYt=s(TU);IUo=r(eYt,"PegasusModel"),eYt.forEach(t),NUo=r(QQe," (Pegasus model)"),QQe.forEach(t),qUo=i(x),lb=n(x,"LI",{});var WQe=s(lb);jTe=n(WQe,"STRONG",{});var oYt=s(jTe);jUo=r(oYt,"pegasus_x"),oYt.forEach(t),DUo=r(WQe," \u2014 "),MU=n(WQe,"A",{href:!0});var rYt=s(MU);GUo=r(rYt,"PegasusXModel"),rYt.forEach(t),OUo=r(WQe," (PEGASUS-X model)"),WQe.forEach(t),VUo=i(x),ib=n(x,"LI",{});var UQe=s(ib);DTe=n(UQe,"STRONG",{});var tYt=s(DTe);XUo=r(tYt,"perceiver"),tYt.forEach(t),zUo=r(UQe," \u2014 "),EU=n(UQe,"A",{href:!0});var aYt=s(EU);QUo=r(aYt,"PerceiverModel"),aYt.forEach(t),WUo=r(UQe," (Perceiver model)"),UQe.forEach(t),UUo=i(x),db=n(x,"LI",{});var HQe=s(db);GTe=n(HQe,"STRONG",{});var nYt=s(GTe);HUo=r(nYt,"plbart"),nYt.forEach(t),JUo=r(HQe," \u2014 "),CU=n(HQe,"A",{href:!0});var sYt=s(CU);YUo=r(sYt,"PLBartModel"),sYt.forEach(t),ZUo=r(HQe," (PLBart model)"),HQe.forEach(t),KUo=i(x),mb=n(x,"LI",{});var JQe=s(mb);OTe=n(JQe,"STRONG",{});var lYt=s(OTe);eHo=r(lYt,"poolformer"),lYt.forEach(t),oHo=r(JQe," \u2014 "),wU=n(JQe,"A",{href:!0});var iYt=s(wU);rHo=r(iYt,"PoolFormerModel"),iYt.forEach(t),tHo=r(JQe," (PoolFormer model)"),JQe.forEach(t),aHo=i(x),cb=n(x,"LI",{});var YQe=s(cb);VTe=n(YQe,"STRONG",{});var dYt=s(VTe);nHo=r(dYt,"prophetnet"),dYt.forEach(t),sHo=r(YQe," \u2014 "),AU=n(YQe,"A",{href:!0});var mYt=s(AU);lHo=r(mYt,"ProphetNetModel"),mYt.forEach(t),iHo=r(YQe," (ProphetNet model)"),YQe.forEach(t),dHo=i(x),fb=n(x,"LI",{});var ZQe=s(fb);XTe=n(ZQe,"STRONG",{});var cYt=s(XTe);mHo=r(cYt,"qdqbert"),cYt.forEach(t),cHo=r(ZQe," \u2014 "),LU=n(ZQe,"A",{href:!0});var fYt=s(LU);fHo=r(fYt,"QDQBertModel"),fYt.forEach(t),gHo=r(ZQe," (QDQBert model)"),ZQe.forEach(t),hHo=i(x),gb=n(x,"LI",{});var KQe=s(gb);zTe=n(KQe,"STRONG",{});var gYt=s(zTe);uHo=r(gYt,"reformer"),gYt.forEach(t),pHo=r(KQe," \u2014 "),yU=n(KQe,"A",{href:!0});var hYt=s(yU);_Ho=r(hYt,"ReformerModel"),hYt.forEach(t),bHo=r(KQe," (Reformer model)"),KQe.forEach(t),vHo=i(x),hb=n(x,"LI",{});var eWe=s(hb);QTe=n(eWe,"STRONG",{});var uYt=s(QTe);FHo=r(uYt,"regnet"),uYt.forEach(t),THo=r(eWe," \u2014 "),xU=n(eWe,"A",{href:!0});var pYt=s(xU);MHo=r(pYt,"RegNetModel"),pYt.forEach(t),EHo=r(eWe," (RegNet model)"),eWe.forEach(t),CHo=i(x),ub=n(x,"LI",{});var oWe=s(ub);WTe=n(oWe,"STRONG",{});var _Yt=s(WTe);wHo=r(_Yt,"rembert"),_Yt.forEach(t),AHo=r(oWe," \u2014 "),$U=n(oWe,"A",{href:!0});var bYt=s($U);LHo=r(bYt,"RemBertModel"),bYt.forEach(t),yHo=r(oWe," (RemBERT model)"),oWe.forEach(t),xHo=i(x),pb=n(x,"LI",{});var rWe=s(pb);UTe=n(rWe,"STRONG",{});var vYt=s(UTe);$Ho=r(vYt,"resnet"),vYt.forEach(t),kHo=r(rWe," \u2014 "),kU=n(rWe,"A",{href:!0});var FYt=s(kU);SHo=r(FYt,"ResNetModel"),FYt.forEach(t),RHo=r(rWe," (ResNet model)"),rWe.forEach(t),PHo=i(x),_b=n(x,"LI",{});var tWe=s(_b);HTe=n(tWe,"STRONG",{});var TYt=s(HTe);BHo=r(TYt,"retribert"),TYt.forEach(t),IHo=r(tWe," \u2014 "),SU=n(tWe,"A",{href:!0});var MYt=s(SU);NHo=r(MYt,"RetriBertModel"),MYt.forEach(t),qHo=r(tWe," (RetriBERT model)"),tWe.forEach(t),jHo=i(x),bb=n(x,"LI",{});var aWe=s(bb);JTe=n(aWe,"STRONG",{});var EYt=s(JTe);DHo=r(EYt,"roberta"),EYt.forEach(t),GHo=r(aWe," \u2014 "),RU=n(aWe,"A",{href:!0});var CYt=s(RU);OHo=r(CYt,"RobertaModel"),CYt.forEach(t),VHo=r(aWe," (RoBERTa model)"),aWe.forEach(t),XHo=i(x),vb=n(x,"LI",{});var nWe=s(vb);YTe=n(nWe,"STRONG",{});var wYt=s(YTe);zHo=r(wYt,"roc_bert"),wYt.forEach(t),QHo=r(nWe," \u2014 "),PU=n(nWe,"A",{href:!0});var AYt=s(PU);WHo=r(AYt,"RoCBertModel"),AYt.forEach(t),UHo=r(nWe," (RoCBert model)"),nWe.forEach(t),HHo=i(x),Fb=n(x,"LI",{});var sWe=s(Fb);ZTe=n(sWe,"STRONG",{});var LYt=s(ZTe);JHo=r(LYt,"roformer"),LYt.forEach(t),YHo=r(sWe," \u2014 "),BU=n(sWe,"A",{href:!0});var yYt=s(BU);ZHo=r(yYt,"RoFormerModel"),yYt.forEach(t),KHo=r(sWe," (RoFormer model)"),sWe.forEach(t),eJo=i(x),Tb=n(x,"LI",{});var lWe=s(Tb);KTe=n(lWe,"STRONG",{});var xYt=s(KTe);oJo=r(xYt,"segformer"),xYt.forEach(t),rJo=r(lWe," \u2014 "),IU=n(lWe,"A",{href:!0});var $Yt=s(IU);tJo=r($Yt,"SegformerModel"),$Yt.forEach(t),aJo=r(lWe," (SegFormer model)"),lWe.forEach(t),nJo=i(x),Mb=n(x,"LI",{});var iWe=s(Mb);eMe=n(iWe,"STRONG",{});var kYt=s(eMe);sJo=r(kYt,"sew"),kYt.forEach(t),lJo=r(iWe," \u2014 "),NU=n(iWe,"A",{href:!0});var SYt=s(NU);iJo=r(SYt,"SEWModel"),SYt.forEach(t),dJo=r(iWe," (SEW model)"),iWe.forEach(t),mJo=i(x),Eb=n(x,"LI",{});var dWe=s(Eb);oMe=n(dWe,"STRONG",{});var RYt=s(oMe);cJo=r(RYt,"sew-d"),RYt.forEach(t),fJo=r(dWe," \u2014 "),qU=n(dWe,"A",{href:!0});var PYt=s(qU);gJo=r(PYt,"SEWDModel"),PYt.forEach(t),hJo=r(dWe," (SEW-D model)"),dWe.forEach(t),uJo=i(x),Cb=n(x,"LI",{});var mWe=s(Cb);rMe=n(mWe,"STRONG",{});var BYt=s(rMe);pJo=r(BYt,"speech_to_text"),BYt.forEach(t),_Jo=r(mWe," \u2014 "),jU=n(mWe,"A",{href:!0});var IYt=s(jU);bJo=r(IYt,"Speech2TextModel"),IYt.forEach(t),vJo=r(mWe," (Speech2Text model)"),mWe.forEach(t),FJo=i(x),wb=n(x,"LI",{});var cWe=s(wb);tMe=n(cWe,"STRONG",{});var NYt=s(tMe);TJo=r(NYt,"splinter"),NYt.forEach(t),MJo=r(cWe," \u2014 "),DU=n(cWe,"A",{href:!0});var qYt=s(DU);EJo=r(qYt,"SplinterModel"),qYt.forEach(t),CJo=r(cWe," (Splinter model)"),cWe.forEach(t),wJo=i(x),Ab=n(x,"LI",{});var fWe=s(Ab);aMe=n(fWe,"STRONG",{});var jYt=s(aMe);AJo=r(jYt,"squeezebert"),jYt.forEach(t),LJo=r(fWe," \u2014 "),GU=n(fWe,"A",{href:!0});var DYt=s(GU);yJo=r(DYt,"SqueezeBertModel"),DYt.forEach(t),xJo=r(fWe," (SqueezeBERT model)"),fWe.forEach(t),$Jo=i(x),Lb=n(x,"LI",{});var gWe=s(Lb);nMe=n(gWe,"STRONG",{});var GYt=s(nMe);kJo=r(GYt,"swin"),GYt.forEach(t),SJo=r(gWe," \u2014 "),OU=n(gWe,"A",{href:!0});var OYt=s(OU);RJo=r(OYt,"SwinModel"),OYt.forEach(t),PJo=r(gWe," (Swin Transformer model)"),gWe.forEach(t),BJo=i(x),yb=n(x,"LI",{});var hWe=s(yb);sMe=n(hWe,"STRONG",{});var VYt=s(sMe);IJo=r(VYt,"swinv2"),VYt.forEach(t),NJo=r(hWe," \u2014 "),VU=n(hWe,"A",{href:!0});var XYt=s(VU);qJo=r(XYt,"Swinv2Model"),XYt.forEach(t),jJo=r(hWe," (Swin Transformer V2 model)"),hWe.forEach(t),DJo=i(x),xb=n(x,"LI",{});var uWe=s(xb);lMe=n(uWe,"STRONG",{});var zYt=s(lMe);GJo=r(zYt,"switch_transformers"),zYt.forEach(t),OJo=r(uWe," \u2014 "),XU=n(uWe,"A",{href:!0});var QYt=s(XU);VJo=r(QYt,"SwitchTransformersModel"),QYt.forEach(t),XJo=r(uWe," (SwitchTransformers model)"),uWe.forEach(t),zJo=i(x),$b=n(x,"LI",{});var pWe=s($b);iMe=n(pWe,"STRONG",{});var WYt=s(iMe);QJo=r(WYt,"t5"),WYt.forEach(t),WJo=r(pWe," \u2014 "),zU=n(pWe,"A",{href:!0});var UYt=s(zU);UJo=r(UYt,"T5Model"),UYt.forEach(t),HJo=r(pWe," (T5 model)"),pWe.forEach(t),JJo=i(x),kb=n(x,"LI",{});var _We=s(kb);dMe=n(_We,"STRONG",{});var HYt=s(dMe);YJo=r(HYt,"table-transformer"),HYt.forEach(t),ZJo=r(_We," \u2014 "),QU=n(_We,"A",{href:!0});var JYt=s(QU);KJo=r(JYt,"TableTransformerModel"),JYt.forEach(t),eYo=r(_We," (Table Transformer model)"),_We.forEach(t),oYo=i(x),Sb=n(x,"LI",{});var bWe=s(Sb);mMe=n(bWe,"STRONG",{});var YYt=s(mMe);rYo=r(YYt,"tapas"),YYt.forEach(t),tYo=r(bWe," \u2014 "),WU=n(bWe,"A",{href:!0});var ZYt=s(WU);aYo=r(ZYt,"TapasModel"),ZYt.forEach(t),nYo=r(bWe," (TAPAS model)"),bWe.forEach(t),sYo=i(x),Rb=n(x,"LI",{});var vWe=s(Rb);cMe=n(vWe,"STRONG",{});var KYt=s(cMe);lYo=r(KYt,"time_series_transformer"),KYt.forEach(t),iYo=r(vWe," \u2014 "),UU=n(vWe,"A",{href:!0});var eZt=s(UU);dYo=r(eZt,"TimeSeriesTransformerModel"),eZt.forEach(t),mYo=r(vWe," (Time Series Transformer model)"),vWe.forEach(t),cYo=i(x),Pb=n(x,"LI",{});var FWe=s(Pb);fMe=n(FWe,"STRONG",{});var oZt=s(fMe);fYo=r(oZt,"trajectory_transformer"),oZt.forEach(t),gYo=r(FWe," \u2014 "),HU=n(FWe,"A",{href:!0});var rZt=s(HU);hYo=r(rZt,"TrajectoryTransformerModel"),rZt.forEach(t),uYo=r(FWe," (Trajectory Transformer model)"),FWe.forEach(t),pYo=i(x),Bb=n(x,"LI",{});var TWe=s(Bb);gMe=n(TWe,"STRONG",{});var tZt=s(gMe);_Yo=r(tZt,"transfo-xl"),tZt.forEach(t),bYo=r(TWe," \u2014 "),JU=n(TWe,"A",{href:!0});var aZt=s(JU);vYo=r(aZt,"TransfoXLModel"),aZt.forEach(t),FYo=r(TWe," (Transformer-XL model)"),TWe.forEach(t),TYo=i(x),Ib=n(x,"LI",{});var MWe=s(Ib);hMe=n(MWe,"STRONG",{});var nZt=s(hMe);MYo=r(nZt,"unispeech"),nZt.forEach(t),EYo=r(MWe," \u2014 "),YU=n(MWe,"A",{href:!0});var sZt=s(YU);CYo=r(sZt,"UniSpeechModel"),sZt.forEach(t),wYo=r(MWe," (UniSpeech model)"),MWe.forEach(t),AYo=i(x),Nb=n(x,"LI",{});var EWe=s(Nb);uMe=n(EWe,"STRONG",{});var lZt=s(uMe);LYo=r(lZt,"unispeech-sat"),lZt.forEach(t),yYo=r(EWe," \u2014 "),ZU=n(EWe,"A",{href:!0});var iZt=s(ZU);xYo=r(iZt,"UniSpeechSatModel"),iZt.forEach(t),$Yo=r(EWe," (UniSpeechSat model)"),EWe.forEach(t),kYo=i(x),qb=n(x,"LI",{});var CWe=s(qb);pMe=n(CWe,"STRONG",{});var dZt=s(pMe);SYo=r(dZt,"van"),dZt.forEach(t),RYo=r(CWe," \u2014 "),KU=n(CWe,"A",{href:!0});var mZt=s(KU);PYo=r(mZt,"VanModel"),mZt.forEach(t),BYo=r(CWe," (VAN model)"),CWe.forEach(t),IYo=i(x),jb=n(x,"LI",{});var wWe=s(jb);_Me=n(wWe,"STRONG",{});var cZt=s(_Me);NYo=r(cZt,"videomae"),cZt.forEach(t),qYo=r(wWe," \u2014 "),eH=n(wWe,"A",{href:!0});var fZt=s(eH);jYo=r(fZt,"VideoMAEModel"),fZt.forEach(t),DYo=r(wWe," (VideoMAE model)"),wWe.forEach(t),GYo=i(x),Db=n(x,"LI",{});var AWe=s(Db);bMe=n(AWe,"STRONG",{});var gZt=s(bMe);OYo=r(gZt,"vilt"),gZt.forEach(t),VYo=r(AWe," \u2014 "),oH=n(AWe,"A",{href:!0});var hZt=s(oH);XYo=r(hZt,"ViltModel"),hZt.forEach(t),zYo=r(AWe," (ViLT model)"),AWe.forEach(t),QYo=i(x),Gb=n(x,"LI",{});var LWe=s(Gb);vMe=n(LWe,"STRONG",{});var uZt=s(vMe);WYo=r(uZt,"vision-text-dual-encoder"),uZt.forEach(t),UYo=r(LWe," \u2014 "),rH=n(LWe,"A",{href:!0});var pZt=s(rH);HYo=r(pZt,"VisionTextDualEncoderModel"),pZt.forEach(t),JYo=r(LWe," (VisionTextDualEncoder model)"),LWe.forEach(t),YYo=i(x),Ob=n(x,"LI",{});var yWe=s(Ob);FMe=n(yWe,"STRONG",{});var _Zt=s(FMe);ZYo=r(_Zt,"visual_bert"),_Zt.forEach(t),KYo=r(yWe," \u2014 "),tH=n(yWe,"A",{href:!0});var bZt=s(tH);eZo=r(bZt,"VisualBertModel"),bZt.forEach(t),oZo=r(yWe," (VisualBERT model)"),yWe.forEach(t),rZo=i(x),Vb=n(x,"LI",{});var xWe=s(Vb);TMe=n(xWe,"STRONG",{});var vZt=s(TMe);tZo=r(vZt,"vit"),vZt.forEach(t),aZo=r(xWe," \u2014 "),aH=n(xWe,"A",{href:!0});var FZt=s(aH);nZo=r(FZt,"ViTModel"),FZt.forEach(t),sZo=r(xWe," (ViT model)"),xWe.forEach(t),lZo=i(x),Xb=n(x,"LI",{});var $We=s(Xb);MMe=n($We,"STRONG",{});var TZt=s(MMe);iZo=r(TZt,"vit_mae"),TZt.forEach(t),dZo=r($We," \u2014 "),nH=n($We,"A",{href:!0});var MZt=s(nH);mZo=r(MZt,"ViTMAEModel"),MZt.forEach(t),cZo=r($We," (ViTMAE model)"),$We.forEach(t),fZo=i(x),zb=n(x,"LI",{});var kWe=s(zb);EMe=n(kWe,"STRONG",{});var EZt=s(EMe);gZo=r(EZt,"vit_msn"),EZt.forEach(t),hZo=r(kWe," \u2014 "),sH=n(kWe,"A",{href:!0});var CZt=s(sH);uZo=r(CZt,"ViTMSNModel"),CZt.forEach(t),pZo=r(kWe," (ViTMSN model)"),kWe.forEach(t),_Zo=i(x),Qb=n(x,"LI",{});var SWe=s(Qb);CMe=n(SWe,"STRONG",{});var wZt=s(CMe);bZo=r(wZt,"wav2vec2"),wZt.forEach(t),vZo=r(SWe," \u2014 "),lH=n(SWe,"A",{href:!0});var AZt=s(lH);FZo=r(AZt,"Wav2Vec2Model"),AZt.forEach(t),TZo=r(SWe," (Wav2Vec2 model)"),SWe.forEach(t),MZo=i(x),Wb=n(x,"LI",{});var RWe=s(Wb);wMe=n(RWe,"STRONG",{});var LZt=s(wMe);EZo=r(LZt,"wav2vec2-conformer"),LZt.forEach(t),CZo=r(RWe," \u2014 "),iH=n(RWe,"A",{href:!0});var yZt=s(iH);wZo=r(yZt,"Wav2Vec2ConformerModel"),yZt.forEach(t),AZo=r(RWe," (Wav2Vec2-Conformer model)"),RWe.forEach(t),LZo=i(x),Ub=n(x,"LI",{});var PWe=s(Ub);AMe=n(PWe,"STRONG",{});var xZt=s(AMe);yZo=r(xZt,"wavlm"),xZt.forEach(t),xZo=r(PWe," \u2014 "),dH=n(PWe,"A",{href:!0});var $Zt=s(dH);$Zo=r($Zt,"WavLMModel"),$Zt.forEach(t),kZo=r(PWe," (WavLM model)"),PWe.forEach(t),SZo=i(x),Hb=n(x,"LI",{});var BWe=s(Hb);LMe=n(BWe,"STRONG",{});var kZt=s(LMe);RZo=r(kZt,"whisper"),kZt.forEach(t),PZo=r(BWe," \u2014 "),mH=n(BWe,"A",{href:!0});var SZt=s(mH);BZo=r(SZt,"WhisperModel"),SZt.forEach(t),IZo=r(BWe," (Whisper model)"),BWe.forEach(t),NZo=i(x),Jb=n(x,"LI",{});var IWe=s(Jb);yMe=n(IWe,"STRONG",{});var RZt=s(yMe);qZo=r(RZt,"xclip"),RZt.forEach(t),jZo=r(IWe," \u2014 "),cH=n(IWe,"A",{href:!0});var PZt=s(cH);DZo=r(PZt,"XCLIPModel"),PZt.forEach(t),GZo=r(IWe," (X-CLIP model)"),IWe.forEach(t),OZo=i(x),Yb=n(x,"LI",{});var NWe=s(Yb);xMe=n(NWe,"STRONG",{});var BZt=s(xMe);VZo=r(BZt,"xglm"),BZt.forEach(t),XZo=r(NWe," \u2014 "),fH=n(NWe,"A",{href:!0});var IZt=s(fH);zZo=r(IZt,"XGLMModel"),IZt.forEach(t),QZo=r(NWe," (XGLM model)"),NWe.forEach(t),WZo=i(x),Zb=n(x,"LI",{});var qWe=s(Zb);$Me=n(qWe,"STRONG",{});var NZt=s($Me);UZo=r(NZt,"xlm"),NZt.forEach(t),HZo=r(qWe," \u2014 "),gH=n(qWe,"A",{href:!0});var qZt=s(gH);JZo=r(qZt,"XLMModel"),qZt.forEach(t),YZo=r(qWe," (XLM model)"),qWe.forEach(t),ZZo=i(x),Kb=n(x,"LI",{});var jWe=s(Kb);kMe=n(jWe,"STRONG",{});var jZt=s(kMe);KZo=r(jZt,"xlm-prophetnet"),jZt.forEach(t),eKo=r(jWe," \u2014 "),hH=n(jWe,"A",{href:!0});var DZt=s(hH);oKo=r(DZt,"XLMProphetNetModel"),DZt.forEach(t),rKo=r(jWe," (XLM-ProphetNet model)"),jWe.forEach(t),tKo=i(x),ev=n(x,"LI",{});var DWe=s(ev);SMe=n(DWe,"STRONG",{});var GZt=s(SMe);aKo=r(GZt,"xlm-roberta"),GZt.forEach(t),nKo=r(DWe," \u2014 "),uH=n(DWe,"A",{href:!0});var OZt=s(uH);sKo=r(OZt,"XLMRobertaModel"),OZt.forEach(t),lKo=r(DWe," (XLM-RoBERTa model)"),DWe.forEach(t),iKo=i(x),ov=n(x,"LI",{});var GWe=s(ov);RMe=n(GWe,"STRONG",{});var VZt=s(RMe);dKo=r(VZt,"xlm-roberta-xl"),VZt.forEach(t),mKo=r(GWe," \u2014 "),pH=n(GWe,"A",{href:!0});var XZt=s(pH);cKo=r(XZt,"XLMRobertaXLModel"),XZt.forEach(t),fKo=r(GWe," (XLM-RoBERTa-XL model)"),GWe.forEach(t),gKo=i(x),rv=n(x,"LI",{});var OWe=s(rv);PMe=n(OWe,"STRONG",{});var zZt=s(PMe);hKo=r(zZt,"xlnet"),zZt.forEach(t),uKo=r(OWe," \u2014 "),_H=n(OWe,"A",{href:!0});var QZt=s(_H);pKo=r(QZt,"XLNetModel"),QZt.forEach(t),_Ko=r(OWe," (XLNet model)"),OWe.forEach(t),bKo=i(x),tv=n(x,"LI",{});var VWe=s(tv);BMe=n(VWe,"STRONG",{});var WZt=s(BMe);vKo=r(WZt,"yolos"),WZt.forEach(t),FKo=r(VWe," \u2014 "),bH=n(VWe,"A",{href:!0});var UZt=s(bH);TKo=r(UZt,"YolosModel"),UZt.forEach(t),MKo=r(VWe," (YOLOS model)"),VWe.forEach(t),EKo=i(x),av=n(x,"LI",{});var XWe=s(av);IMe=n(XWe,"STRONG",{});var HZt=s(IMe);CKo=r(HZt,"yoso"),HZt.forEach(t),wKo=r(XWe," \u2014 "),vH=n(XWe,"A",{href:!0});var JZt=s(vH);AKo=r(JZt,"YosoModel"),JZt.forEach(t),LKo=r(XWe," (YOSO model)"),XWe.forEach(t),x.forEach(t),yKo=i(Sa),nv=n(Sa,"P",{});var zWe=s(nv);xKo=r(zWe,"The model is set in evaluation mode by default using "),NMe=n(zWe,"CODE",{});var YZt=s(NMe);$Ko=r(YZt,"model.eval()"),YZt.forEach(t),kKo=r(zWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qMe=n(zWe,"CODE",{});var ZZt=s(qMe);SKo=r(ZZt,"model.train()"),ZZt.forEach(t),zWe.forEach(t),RKo=i(Sa),T(sv.$$.fragment,Sa),Sa.forEach(t),Ul.forEach(t),Dio=i(c),zd=n(c,"H2",{class:!0});var ico=s(zd);lv=n(ico,"A",{id:!0,class:!0,href:!0});var KZt=s(lv);jMe=n(KZt,"SPAN",{});var eKt=s(jMe);T(mS.$$.fragment,eKt),eKt.forEach(t),KZt.forEach(t),PKo=i(ico),DMe=n(ico,"SPAN",{});var oKt=s(DMe);BKo=r(oKt,"AutoModelForPreTraining"),oKt.forEach(t),ico.forEach(t),Gio=i(c),Go=n(c,"DIV",{class:!0});var Hl=s(Go);T(cS.$$.fragment,Hl),IKo=i(Hl),Qd=n(Hl,"P",{});var Dfe=s(Qd);NKo=r(Dfe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FH=n(Dfe,"A",{href:!0});var rKt=s(FH);qKo=r(rKt,"from_pretrained()"),rKt.forEach(t),jKo=r(Dfe," class method or the "),TH=n(Dfe,"A",{href:!0});var tKt=s(TH);DKo=r(tKt,"from_config()"),tKt.forEach(t),GKo=r(Dfe,` class
method.`),Dfe.forEach(t),OKo=i(Hl),fS=n(Hl,"P",{});var dco=s(fS);VKo=r(dco,"This class cannot be instantiated directly using "),GMe=n(dco,"CODE",{});var aKt=s(GMe);XKo=r(aKt,"__init__()"),aKt.forEach(t),zKo=r(dco," (throws an error)."),dco.forEach(t),QKo=i(Hl),Lt=n(Hl,"DIV",{class:!0});var Fx=s(Lt);T(gS.$$.fragment,Fx),WKo=i(Fx),OMe=n(Fx,"P",{});var nKt=s(OMe);UKo=r(nKt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nKt.forEach(t),HKo=i(Fx),Wd=n(Fx,"P",{});var Gfe=s(Wd);JKo=r(Gfe,`Note:
Loading a model from its configuration file does `),VMe=n(Gfe,"STRONG",{});var sKt=s(VMe);YKo=r(sKt,"not"),sKt.forEach(t),ZKo=r(Gfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(Gfe,"A",{href:!0});var lKt=s(MH);KKo=r(lKt,"from_pretrained()"),lKt.forEach(t),eer=r(Gfe," to load the model weights."),Gfe.forEach(t),oer=i(Fx),T(iv.$$.fragment,Fx),Fx.forEach(t),rer=i(Hl),ao=n(Hl,"DIV",{class:!0});var Ra=s(ao);T(hS.$$.fragment,Ra),ter=i(Ra),XMe=n(Ra,"P",{});var iKt=s(XMe);aer=r(iKt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),iKt.forEach(t),ner=i(Ra),hn=n(Ra,"P",{});var Tx=s(hn);ser=r(Tx,"The model class to instantiate is selected based on the "),zMe=n(Tx,"CODE",{});var dKt=s(zMe);ler=r(dKt,"model_type"),dKt.forEach(t),ier=r(Tx,` property of the config object (either
passed as an argument or loaded from `),QMe=n(Tx,"CODE",{});var mKt=s(QMe);der=r(mKt,"pretrained_model_name_or_path"),mKt.forEach(t),mer=r(Tx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=n(Tx,"CODE",{});var cKt=s(WMe);cer=r(cKt,"pretrained_model_name_or_path"),cKt.forEach(t),fer=r(Tx,":"),Tx.forEach(t),ger=i(Ra),G=n(Ra,"UL",{});var V=s(G);dv=n(V,"LI",{});var QWe=s(dv);UMe=n(QWe,"STRONG",{});var fKt=s(UMe);her=r(fKt,"albert"),fKt.forEach(t),uer=r(QWe," \u2014 "),EH=n(QWe,"A",{href:!0});var gKt=s(EH);per=r(gKt,"AlbertForPreTraining"),gKt.forEach(t),_er=r(QWe," (ALBERT model)"),QWe.forEach(t),ber=i(V),mv=n(V,"LI",{});var WWe=s(mv);HMe=n(WWe,"STRONG",{});var hKt=s(HMe);ver=r(hKt,"bart"),hKt.forEach(t),Fer=r(WWe," \u2014 "),CH=n(WWe,"A",{href:!0});var uKt=s(CH);Ter=r(uKt,"BartForConditionalGeneration"),uKt.forEach(t),Mer=r(WWe," (BART model)"),WWe.forEach(t),Eer=i(V),cv=n(V,"LI",{});var UWe=s(cv);JMe=n(UWe,"STRONG",{});var pKt=s(JMe);Cer=r(pKt,"bert"),pKt.forEach(t),wer=r(UWe," \u2014 "),wH=n(UWe,"A",{href:!0});var _Kt=s(wH);Aer=r(_Kt,"BertForPreTraining"),_Kt.forEach(t),Ler=r(UWe," (BERT model)"),UWe.forEach(t),yer=i(V),fv=n(V,"LI",{});var HWe=s(fv);YMe=n(HWe,"STRONG",{});var bKt=s(YMe);xer=r(bKt,"big_bird"),bKt.forEach(t),$er=r(HWe," \u2014 "),AH=n(HWe,"A",{href:!0});var vKt=s(AH);ker=r(vKt,"BigBirdForPreTraining"),vKt.forEach(t),Ser=r(HWe," (BigBird model)"),HWe.forEach(t),Rer=i(V),gv=n(V,"LI",{});var JWe=s(gv);ZMe=n(JWe,"STRONG",{});var FKt=s(ZMe);Per=r(FKt,"bloom"),FKt.forEach(t),Ber=r(JWe," \u2014 "),LH=n(JWe,"A",{href:!0});var TKt=s(LH);Ier=r(TKt,"BloomForCausalLM"),TKt.forEach(t),Ner=r(JWe," (BLOOM model)"),JWe.forEach(t),qer=i(V),hv=n(V,"LI",{});var YWe=s(hv);KMe=n(YWe,"STRONG",{});var MKt=s(KMe);jer=r(MKt,"camembert"),MKt.forEach(t),Der=r(YWe," \u2014 "),yH=n(YWe,"A",{href:!0});var EKt=s(yH);Ger=r(EKt,"CamembertForMaskedLM"),EKt.forEach(t),Oer=r(YWe," (CamemBERT model)"),YWe.forEach(t),Ver=i(V),uv=n(V,"LI",{});var ZWe=s(uv);eEe=n(ZWe,"STRONG",{});var CKt=s(eEe);Xer=r(CKt,"ctrl"),CKt.forEach(t),zer=r(ZWe," \u2014 "),xH=n(ZWe,"A",{href:!0});var wKt=s(xH);Qer=r(wKt,"CTRLLMHeadModel"),wKt.forEach(t),Wer=r(ZWe," (CTRL model)"),ZWe.forEach(t),Uer=i(V),pv=n(V,"LI",{});var KWe=s(pv);oEe=n(KWe,"STRONG",{});var AKt=s(oEe);Her=r(AKt,"data2vec-text"),AKt.forEach(t),Jer=r(KWe," \u2014 "),$H=n(KWe,"A",{href:!0});var LKt=s($H);Yer=r(LKt,"Data2VecTextForMaskedLM"),LKt.forEach(t),Zer=r(KWe," (Data2VecText model)"),KWe.forEach(t),Ker=i(V),_v=n(V,"LI",{});var eUe=s(_v);rEe=n(eUe,"STRONG",{});var yKt=s(rEe);eor=r(yKt,"deberta"),yKt.forEach(t),oor=r(eUe," \u2014 "),kH=n(eUe,"A",{href:!0});var xKt=s(kH);ror=r(xKt,"DebertaForMaskedLM"),xKt.forEach(t),tor=r(eUe," (DeBERTa model)"),eUe.forEach(t),aor=i(V),bv=n(V,"LI",{});var oUe=s(bv);tEe=n(oUe,"STRONG",{});var $Kt=s(tEe);nor=r($Kt,"deberta-v2"),$Kt.forEach(t),sor=r(oUe," \u2014 "),SH=n(oUe,"A",{href:!0});var kKt=s(SH);lor=r(kKt,"DebertaV2ForMaskedLM"),kKt.forEach(t),ior=r(oUe," (DeBERTa-v2 model)"),oUe.forEach(t),dor=i(V),vv=n(V,"LI",{});var rUe=s(vv);aEe=n(rUe,"STRONG",{});var SKt=s(aEe);mor=r(SKt,"distilbert"),SKt.forEach(t),cor=r(rUe," \u2014 "),RH=n(rUe,"A",{href:!0});var RKt=s(RH);gor=r(RKt,"DistilBertForMaskedLM"),RKt.forEach(t),hor=r(rUe," (DistilBERT model)"),rUe.forEach(t),uor=i(V),Fv=n(V,"LI",{});var tUe=s(Fv);nEe=n(tUe,"STRONG",{});var PKt=s(nEe);por=r(PKt,"electra"),PKt.forEach(t),_or=r(tUe," \u2014 "),PH=n(tUe,"A",{href:!0});var BKt=s(PH);bor=r(BKt,"ElectraForPreTraining"),BKt.forEach(t),vor=r(tUe," (ELECTRA model)"),tUe.forEach(t),For=i(V),Tv=n(V,"LI",{});var aUe=s(Tv);sEe=n(aUe,"STRONG",{});var IKt=s(sEe);Tor=r(IKt,"ernie"),IKt.forEach(t),Mor=r(aUe," \u2014 "),BH=n(aUe,"A",{href:!0});var NKt=s(BH);Eor=r(NKt,"ErnieForPreTraining"),NKt.forEach(t),Cor=r(aUe," (ERNIE model)"),aUe.forEach(t),wor=i(V),Mv=n(V,"LI",{});var nUe=s(Mv);lEe=n(nUe,"STRONG",{});var qKt=s(lEe);Aor=r(qKt,"flaubert"),qKt.forEach(t),Lor=r(nUe," \u2014 "),IH=n(nUe,"A",{href:!0});var jKt=s(IH);yor=r(jKt,"FlaubertWithLMHeadModel"),jKt.forEach(t),xor=r(nUe," (FlauBERT model)"),nUe.forEach(t),$or=i(V),Ev=n(V,"LI",{});var sUe=s(Ev);iEe=n(sUe,"STRONG",{});var DKt=s(iEe);kor=r(DKt,"flava"),DKt.forEach(t),Sor=r(sUe," \u2014 "),NH=n(sUe,"A",{href:!0});var GKt=s(NH);Ror=r(GKt,"FlavaForPreTraining"),GKt.forEach(t),Por=r(sUe," (FLAVA model)"),sUe.forEach(t),Bor=i(V),Cv=n(V,"LI",{});var lUe=s(Cv);dEe=n(lUe,"STRONG",{});var OKt=s(dEe);Ior=r(OKt,"fnet"),OKt.forEach(t),Nor=r(lUe," \u2014 "),qH=n(lUe,"A",{href:!0});var VKt=s(qH);qor=r(VKt,"FNetForPreTraining"),VKt.forEach(t),jor=r(lUe," (FNet model)"),lUe.forEach(t),Dor=i(V),wv=n(V,"LI",{});var iUe=s(wv);mEe=n(iUe,"STRONG",{});var XKt=s(mEe);Gor=r(XKt,"fsmt"),XKt.forEach(t),Oor=r(iUe," \u2014 "),jH=n(iUe,"A",{href:!0});var zKt=s(jH);Vor=r(zKt,"FSMTForConditionalGeneration"),zKt.forEach(t),Xor=r(iUe," (FairSeq Machine-Translation model)"),iUe.forEach(t),zor=i(V),Av=n(V,"LI",{});var dUe=s(Av);cEe=n(dUe,"STRONG",{});var QKt=s(cEe);Qor=r(QKt,"funnel"),QKt.forEach(t),Wor=r(dUe," \u2014 "),DH=n(dUe,"A",{href:!0});var WKt=s(DH);Uor=r(WKt,"FunnelForPreTraining"),WKt.forEach(t),Hor=r(dUe," (Funnel Transformer model)"),dUe.forEach(t),Jor=i(V),Lv=n(V,"LI",{});var mUe=s(Lv);fEe=n(mUe,"STRONG",{});var UKt=s(fEe);Yor=r(UKt,"gpt2"),UKt.forEach(t),Zor=r(mUe," \u2014 "),GH=n(mUe,"A",{href:!0});var HKt=s(GH);Kor=r(HKt,"GPT2LMHeadModel"),HKt.forEach(t),err=r(mUe," (OpenAI GPT-2 model)"),mUe.forEach(t),orr=i(V),yv=n(V,"LI",{});var cUe=s(yv);gEe=n(cUe,"STRONG",{});var JKt=s(gEe);rrr=r(JKt,"ibert"),JKt.forEach(t),trr=r(cUe," \u2014 "),OH=n(cUe,"A",{href:!0});var YKt=s(OH);arr=r(YKt,"IBertForMaskedLM"),YKt.forEach(t),nrr=r(cUe," (I-BERT model)"),cUe.forEach(t),srr=i(V),xv=n(V,"LI",{});var fUe=s(xv);hEe=n(fUe,"STRONG",{});var ZKt=s(hEe);lrr=r(ZKt,"layoutlm"),ZKt.forEach(t),irr=r(fUe," \u2014 "),VH=n(fUe,"A",{href:!0});var KKt=s(VH);drr=r(KKt,"LayoutLMForMaskedLM"),KKt.forEach(t),mrr=r(fUe," (LayoutLM model)"),fUe.forEach(t),crr=i(V),$v=n(V,"LI",{});var gUe=s($v);uEe=n(gUe,"STRONG",{});var eea=s(uEe);frr=r(eea,"longformer"),eea.forEach(t),grr=r(gUe," \u2014 "),XH=n(gUe,"A",{href:!0});var oea=s(XH);hrr=r(oea,"LongformerForMaskedLM"),oea.forEach(t),urr=r(gUe," (Longformer model)"),gUe.forEach(t),prr=i(V),kv=n(V,"LI",{});var hUe=s(kv);pEe=n(hUe,"STRONG",{});var rea=s(pEe);_rr=r(rea,"luke"),rea.forEach(t),brr=r(hUe," \u2014 "),zH=n(hUe,"A",{href:!0});var tea=s(zH);vrr=r(tea,"LukeForMaskedLM"),tea.forEach(t),Frr=r(hUe," (LUKE model)"),hUe.forEach(t),Trr=i(V),Sv=n(V,"LI",{});var uUe=s(Sv);_Ee=n(uUe,"STRONG",{});var aea=s(_Ee);Mrr=r(aea,"lxmert"),aea.forEach(t),Err=r(uUe," \u2014 "),QH=n(uUe,"A",{href:!0});var nea=s(QH);Crr=r(nea,"LxmertForPreTraining"),nea.forEach(t),wrr=r(uUe," (LXMERT model)"),uUe.forEach(t),Arr=i(V),Rv=n(V,"LI",{});var pUe=s(Rv);bEe=n(pUe,"STRONG",{});var sea=s(bEe);Lrr=r(sea,"megatron-bert"),sea.forEach(t),yrr=r(pUe," \u2014 "),WH=n(pUe,"A",{href:!0});var lea=s(WH);xrr=r(lea,"MegatronBertForPreTraining"),lea.forEach(t),$rr=r(pUe," (Megatron-BERT model)"),pUe.forEach(t),krr=i(V),Pv=n(V,"LI",{});var _Ue=s(Pv);vEe=n(_Ue,"STRONG",{});var iea=s(vEe);Srr=r(iea,"mobilebert"),iea.forEach(t),Rrr=r(_Ue," \u2014 "),UH=n(_Ue,"A",{href:!0});var dea=s(UH);Prr=r(dea,"MobileBertForPreTraining"),dea.forEach(t),Brr=r(_Ue," (MobileBERT model)"),_Ue.forEach(t),Irr=i(V),Bv=n(V,"LI",{});var bUe=s(Bv);FEe=n(bUe,"STRONG",{});var mea=s(FEe);Nrr=r(mea,"mpnet"),mea.forEach(t),qrr=r(bUe," \u2014 "),HH=n(bUe,"A",{href:!0});var cea=s(HH);jrr=r(cea,"MPNetForMaskedLM"),cea.forEach(t),Drr=r(bUe," (MPNet model)"),bUe.forEach(t),Grr=i(V),Iv=n(V,"LI",{});var vUe=s(Iv);TEe=n(vUe,"STRONG",{});var fea=s(TEe);Orr=r(fea,"mvp"),fea.forEach(t),Vrr=r(vUe," \u2014 "),JH=n(vUe,"A",{href:!0});var gea=s(JH);Xrr=r(gea,"MvpForConditionalGeneration"),gea.forEach(t),zrr=r(vUe," (MVP model)"),vUe.forEach(t),Qrr=i(V),Nv=n(V,"LI",{});var FUe=s(Nv);MEe=n(FUe,"STRONG",{});var hea=s(MEe);Wrr=r(hea,"nezha"),hea.forEach(t),Urr=r(FUe," \u2014 "),YH=n(FUe,"A",{href:!0});var uea=s(YH);Hrr=r(uea,"NezhaForPreTraining"),uea.forEach(t),Jrr=r(FUe," (Nezha model)"),FUe.forEach(t),Yrr=i(V),qv=n(V,"LI",{});var TUe=s(qv);EEe=n(TUe,"STRONG",{});var pea=s(EEe);Zrr=r(pea,"openai-gpt"),pea.forEach(t),Krr=r(TUe," \u2014 "),ZH=n(TUe,"A",{href:!0});var _ea=s(ZH);etr=r(_ea,"OpenAIGPTLMHeadModel"),_ea.forEach(t),otr=r(TUe," (OpenAI GPT model)"),TUe.forEach(t),rtr=i(V),jv=n(V,"LI",{});var MUe=s(jv);CEe=n(MUe,"STRONG",{});var bea=s(CEe);ttr=r(bea,"retribert"),bea.forEach(t),atr=r(MUe," \u2014 "),KH=n(MUe,"A",{href:!0});var vea=s(KH);ntr=r(vea,"RetriBertModel"),vea.forEach(t),str=r(MUe," (RetriBERT model)"),MUe.forEach(t),ltr=i(V),Dv=n(V,"LI",{});var EUe=s(Dv);wEe=n(EUe,"STRONG",{});var Fea=s(wEe);itr=r(Fea,"roberta"),Fea.forEach(t),dtr=r(EUe," \u2014 "),eJ=n(EUe,"A",{href:!0});var Tea=s(eJ);mtr=r(Tea,"RobertaForMaskedLM"),Tea.forEach(t),ctr=r(EUe," (RoBERTa model)"),EUe.forEach(t),ftr=i(V),Gv=n(V,"LI",{});var CUe=s(Gv);AEe=n(CUe,"STRONG",{});var Mea=s(AEe);gtr=r(Mea,"roc_bert"),Mea.forEach(t),htr=r(CUe," \u2014 "),oJ=n(CUe,"A",{href:!0});var Eea=s(oJ);utr=r(Eea,"RoCBertForPreTraining"),Eea.forEach(t),ptr=r(CUe," (RoCBert model)"),CUe.forEach(t),_tr=i(V),Ov=n(V,"LI",{});var wUe=s(Ov);LEe=n(wUe,"STRONG",{});var Cea=s(LEe);btr=r(Cea,"splinter"),Cea.forEach(t),vtr=r(wUe," \u2014 "),rJ=n(wUe,"A",{href:!0});var wea=s(rJ);Ftr=r(wea,"SplinterForPreTraining"),wea.forEach(t),Ttr=r(wUe," (Splinter model)"),wUe.forEach(t),Mtr=i(V),Vv=n(V,"LI",{});var AUe=s(Vv);yEe=n(AUe,"STRONG",{});var Aea=s(yEe);Etr=r(Aea,"squeezebert"),Aea.forEach(t),Ctr=r(AUe," \u2014 "),tJ=n(AUe,"A",{href:!0});var Lea=s(tJ);wtr=r(Lea,"SqueezeBertForMaskedLM"),Lea.forEach(t),Atr=r(AUe," (SqueezeBERT model)"),AUe.forEach(t),Ltr=i(V),Xv=n(V,"LI",{});var LUe=s(Xv);xEe=n(LUe,"STRONG",{});var yea=s(xEe);ytr=r(yea,"switch_transformers"),yea.forEach(t),xtr=r(LUe," \u2014 "),aJ=n(LUe,"A",{href:!0});var xea=s(aJ);$tr=r(xea,"SwitchTransformersForConditionalGeneration"),xea.forEach(t),ktr=r(LUe," (SwitchTransformers model)"),LUe.forEach(t),Str=i(V),zv=n(V,"LI",{});var yUe=s(zv);$Ee=n(yUe,"STRONG",{});var $ea=s($Ee);Rtr=r($ea,"t5"),$ea.forEach(t),Ptr=r(yUe," \u2014 "),nJ=n(yUe,"A",{href:!0});var kea=s(nJ);Btr=r(kea,"T5ForConditionalGeneration"),kea.forEach(t),Itr=r(yUe," (T5 model)"),yUe.forEach(t),Ntr=i(V),Qv=n(V,"LI",{});var xUe=s(Qv);kEe=n(xUe,"STRONG",{});var Sea=s(kEe);qtr=r(Sea,"tapas"),Sea.forEach(t),jtr=r(xUe," \u2014 "),sJ=n(xUe,"A",{href:!0});var Rea=s(sJ);Dtr=r(Rea,"TapasForMaskedLM"),Rea.forEach(t),Gtr=r(xUe," (TAPAS model)"),xUe.forEach(t),Otr=i(V),Wv=n(V,"LI",{});var $Ue=s(Wv);SEe=n($Ue,"STRONG",{});var Pea=s(SEe);Vtr=r(Pea,"transfo-xl"),Pea.forEach(t),Xtr=r($Ue," \u2014 "),lJ=n($Ue,"A",{href:!0});var Bea=s(lJ);ztr=r(Bea,"TransfoXLLMHeadModel"),Bea.forEach(t),Qtr=r($Ue," (Transformer-XL model)"),$Ue.forEach(t),Wtr=i(V),Uv=n(V,"LI",{});var kUe=s(Uv);REe=n(kUe,"STRONG",{});var Iea=s(REe);Utr=r(Iea,"unispeech"),Iea.forEach(t),Htr=r(kUe," \u2014 "),iJ=n(kUe,"A",{href:!0});var Nea=s(iJ);Jtr=r(Nea,"UniSpeechForPreTraining"),Nea.forEach(t),Ytr=r(kUe," (UniSpeech model)"),kUe.forEach(t),Ztr=i(V),Hv=n(V,"LI",{});var SUe=s(Hv);PEe=n(SUe,"STRONG",{});var qea=s(PEe);Ktr=r(qea,"unispeech-sat"),qea.forEach(t),ear=r(SUe," \u2014 "),dJ=n(SUe,"A",{href:!0});var jea=s(dJ);oar=r(jea,"UniSpeechSatForPreTraining"),jea.forEach(t),rar=r(SUe," (UniSpeechSat model)"),SUe.forEach(t),tar=i(V),Jv=n(V,"LI",{});var RUe=s(Jv);BEe=n(RUe,"STRONG",{});var Dea=s(BEe);aar=r(Dea,"videomae"),Dea.forEach(t),nar=r(RUe," \u2014 "),mJ=n(RUe,"A",{href:!0});var Gea=s(mJ);sar=r(Gea,"VideoMAEForPreTraining"),Gea.forEach(t),lar=r(RUe," (VideoMAE model)"),RUe.forEach(t),iar=i(V),Yv=n(V,"LI",{});var PUe=s(Yv);IEe=n(PUe,"STRONG",{});var Oea=s(IEe);dar=r(Oea,"visual_bert"),Oea.forEach(t),mar=r(PUe," \u2014 "),cJ=n(PUe,"A",{href:!0});var Vea=s(cJ);car=r(Vea,"VisualBertForPreTraining"),Vea.forEach(t),far=r(PUe," (VisualBERT model)"),PUe.forEach(t),gar=i(V),Zv=n(V,"LI",{});var BUe=s(Zv);NEe=n(BUe,"STRONG",{});var Xea=s(NEe);har=r(Xea,"vit_mae"),Xea.forEach(t),uar=r(BUe," \u2014 "),fJ=n(BUe,"A",{href:!0});var zea=s(fJ);par=r(zea,"ViTMAEForPreTraining"),zea.forEach(t),_ar=r(BUe," (ViTMAE model)"),BUe.forEach(t),bar=i(V),Kv=n(V,"LI",{});var IUe=s(Kv);qEe=n(IUe,"STRONG",{});var Qea=s(qEe);Far=r(Qea,"wav2vec2"),Qea.forEach(t),Tar=r(IUe," \u2014 "),gJ=n(IUe,"A",{href:!0});var Wea=s(gJ);Mar=r(Wea,"Wav2Vec2ForPreTraining"),Wea.forEach(t),Ear=r(IUe," (Wav2Vec2 model)"),IUe.forEach(t),Car=i(V),eF=n(V,"LI",{});var NUe=s(eF);jEe=n(NUe,"STRONG",{});var Uea=s(jEe);war=r(Uea,"wav2vec2-conformer"),Uea.forEach(t),Aar=r(NUe," \u2014 "),hJ=n(NUe,"A",{href:!0});var Hea=s(hJ);Lar=r(Hea,"Wav2Vec2ConformerForPreTraining"),Hea.forEach(t),yar=r(NUe," (Wav2Vec2-Conformer model)"),NUe.forEach(t),xar=i(V),oF=n(V,"LI",{});var qUe=s(oF);DEe=n(qUe,"STRONG",{});var Jea=s(DEe);$ar=r(Jea,"xlm"),Jea.forEach(t),kar=r(qUe," \u2014 "),uJ=n(qUe,"A",{href:!0});var Yea=s(uJ);Sar=r(Yea,"XLMWithLMHeadModel"),Yea.forEach(t),Rar=r(qUe," (XLM model)"),qUe.forEach(t),Par=i(V),rF=n(V,"LI",{});var jUe=s(rF);GEe=n(jUe,"STRONG",{});var Zea=s(GEe);Bar=r(Zea,"xlm-roberta"),Zea.forEach(t),Iar=r(jUe," \u2014 "),pJ=n(jUe,"A",{href:!0});var Kea=s(pJ);Nar=r(Kea,"XLMRobertaForMaskedLM"),Kea.forEach(t),qar=r(jUe," (XLM-RoBERTa model)"),jUe.forEach(t),jar=i(V),tF=n(V,"LI",{});var DUe=s(tF);OEe=n(DUe,"STRONG",{});var eoa=s(OEe);Dar=r(eoa,"xlm-roberta-xl"),eoa.forEach(t),Gar=r(DUe," \u2014 "),_J=n(DUe,"A",{href:!0});var ooa=s(_J);Oar=r(ooa,"XLMRobertaXLForMaskedLM"),ooa.forEach(t),Var=r(DUe," (XLM-RoBERTa-XL model)"),DUe.forEach(t),Xar=i(V),aF=n(V,"LI",{});var GUe=s(aF);VEe=n(GUe,"STRONG",{});var roa=s(VEe);zar=r(roa,"xlnet"),roa.forEach(t),Qar=r(GUe," \u2014 "),bJ=n(GUe,"A",{href:!0});var toa=s(bJ);War=r(toa,"XLNetLMHeadModel"),toa.forEach(t),Uar=r(GUe," (XLNet model)"),GUe.forEach(t),V.forEach(t),Har=i(Ra),nF=n(Ra,"P",{});var OUe=s(nF);Jar=r(OUe,"The model is set in evaluation mode by default using "),XEe=n(OUe,"CODE",{});var aoa=s(XEe);Yar=r(aoa,"model.eval()"),aoa.forEach(t),Zar=r(OUe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zEe=n(OUe,"CODE",{});var noa=s(zEe);Kar=r(noa,"model.train()"),noa.forEach(t),OUe.forEach(t),enr=i(Ra),T(sF.$$.fragment,Ra),Ra.forEach(t),Hl.forEach(t),Oio=i(c),Ud=n(c,"H2",{class:!0});var mco=s(Ud);lF=n(mco,"A",{id:!0,class:!0,href:!0});var soa=s(lF);QEe=n(soa,"SPAN",{});var loa=s(QEe);T(uS.$$.fragment,loa),loa.forEach(t),soa.forEach(t),onr=i(mco),WEe=n(mco,"SPAN",{});var ioa=s(WEe);rnr=r(ioa,"AutoModelForCausalLM"),ioa.forEach(t),mco.forEach(t),Vio=i(c),Oo=n(c,"DIV",{class:!0});var Jl=s(Oo);T(pS.$$.fragment,Jl),tnr=i(Jl),Hd=n(Jl,"P",{});var Ofe=s(Hd);anr=r(Ofe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vJ=n(Ofe,"A",{href:!0});var doa=s(vJ);nnr=r(doa,"from_pretrained()"),doa.forEach(t),snr=r(Ofe," class method or the "),FJ=n(Ofe,"A",{href:!0});var moa=s(FJ);lnr=r(moa,"from_config()"),moa.forEach(t),inr=r(Ofe,` class
method.`),Ofe.forEach(t),dnr=i(Jl),_S=n(Jl,"P",{});var cco=s(_S);mnr=r(cco,"This class cannot be instantiated directly using "),UEe=n(cco,"CODE",{});var coa=s(UEe);cnr=r(coa,"__init__()"),coa.forEach(t),fnr=r(cco," (throws an error)."),cco.forEach(t),gnr=i(Jl),yt=n(Jl,"DIV",{class:!0});var Mx=s(yt);T(bS.$$.fragment,Mx),hnr=i(Mx),HEe=n(Mx,"P",{});var foa=s(HEe);unr=r(foa,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),foa.forEach(t),pnr=i(Mx),Jd=n(Mx,"P",{});var Vfe=s(Jd);_nr=r(Vfe,`Note:
Loading a model from its configuration file does `),JEe=n(Vfe,"STRONG",{});var goa=s(JEe);bnr=r(goa,"not"),goa.forEach(t),vnr=r(Vfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(Vfe,"A",{href:!0});var hoa=s(TJ);Fnr=r(hoa,"from_pretrained()"),hoa.forEach(t),Tnr=r(Vfe," to load the model weights."),Vfe.forEach(t),Mnr=i(Mx),T(iF.$$.fragment,Mx),Mx.forEach(t),Enr=i(Jl),no=n(Jl,"DIV",{class:!0});var Pa=s(no);T(vS.$$.fragment,Pa),Cnr=i(Pa),YEe=n(Pa,"P",{});var uoa=s(YEe);wnr=r(uoa,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uoa.forEach(t),Anr=i(Pa),un=n(Pa,"P",{});var Ex=s(un);Lnr=r(Ex,"The model class to instantiate is selected based on the "),ZEe=n(Ex,"CODE",{});var poa=s(ZEe);ynr=r(poa,"model_type"),poa.forEach(t),xnr=r(Ex,` property of the config object (either
passed as an argument or loaded from `),KEe=n(Ex,"CODE",{});var _oa=s(KEe);$nr=r(_oa,"pretrained_model_name_or_path"),_oa.forEach(t),knr=r(Ex,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=n(Ex,"CODE",{});var boa=s(e4e);Snr=r(boa,"pretrained_model_name_or_path"),boa.forEach(t),Rnr=r(Ex,":"),Ex.forEach(t),Pnr=i(Pa),W=n(Pa,"UL",{});var H=s(W);dF=n(H,"LI",{});var VUe=s(dF);o4e=n(VUe,"STRONG",{});var voa=s(o4e);Bnr=r(voa,"bart"),voa.forEach(t),Inr=r(VUe," \u2014 "),MJ=n(VUe,"A",{href:!0});var Foa=s(MJ);Nnr=r(Foa,"BartForCausalLM"),Foa.forEach(t),qnr=r(VUe," (BART model)"),VUe.forEach(t),jnr=i(H),mF=n(H,"LI",{});var XUe=s(mF);r4e=n(XUe,"STRONG",{});var Toa=s(r4e);Dnr=r(Toa,"bert"),Toa.forEach(t),Gnr=r(XUe," \u2014 "),EJ=n(XUe,"A",{href:!0});var Moa=s(EJ);Onr=r(Moa,"BertLMHeadModel"),Moa.forEach(t),Vnr=r(XUe," (BERT model)"),XUe.forEach(t),Xnr=i(H),cF=n(H,"LI",{});var zUe=s(cF);t4e=n(zUe,"STRONG",{});var Eoa=s(t4e);znr=r(Eoa,"bert-generation"),Eoa.forEach(t),Qnr=r(zUe," \u2014 "),CJ=n(zUe,"A",{href:!0});var Coa=s(CJ);Wnr=r(Coa,"BertGenerationDecoder"),Coa.forEach(t),Unr=r(zUe," (Bert Generation model)"),zUe.forEach(t),Hnr=i(H),fF=n(H,"LI",{});var QUe=s(fF);a4e=n(QUe,"STRONG",{});var woa=s(a4e);Jnr=r(woa,"big_bird"),woa.forEach(t),Ynr=r(QUe," \u2014 "),wJ=n(QUe,"A",{href:!0});var Aoa=s(wJ);Znr=r(Aoa,"BigBirdForCausalLM"),Aoa.forEach(t),Knr=r(QUe," (BigBird model)"),QUe.forEach(t),esr=i(H),gF=n(H,"LI",{});var WUe=s(gF);n4e=n(WUe,"STRONG",{});var Loa=s(n4e);osr=r(Loa,"bigbird_pegasus"),Loa.forEach(t),rsr=r(WUe," \u2014 "),AJ=n(WUe,"A",{href:!0});var yoa=s(AJ);tsr=r(yoa,"BigBirdPegasusForCausalLM"),yoa.forEach(t),asr=r(WUe," (BigBird-Pegasus model)"),WUe.forEach(t),nsr=i(H),hF=n(H,"LI",{});var UUe=s(hF);s4e=n(UUe,"STRONG",{});var xoa=s(s4e);ssr=r(xoa,"blenderbot"),xoa.forEach(t),lsr=r(UUe," \u2014 "),LJ=n(UUe,"A",{href:!0});var $oa=s(LJ);isr=r($oa,"BlenderbotForCausalLM"),$oa.forEach(t),dsr=r(UUe," (Blenderbot model)"),UUe.forEach(t),msr=i(H),uF=n(H,"LI",{});var HUe=s(uF);l4e=n(HUe,"STRONG",{});var koa=s(l4e);csr=r(koa,"blenderbot-small"),koa.forEach(t),fsr=r(HUe," \u2014 "),yJ=n(HUe,"A",{href:!0});var Soa=s(yJ);gsr=r(Soa,"BlenderbotSmallForCausalLM"),Soa.forEach(t),hsr=r(HUe," (BlenderbotSmall model)"),HUe.forEach(t),usr=i(H),pF=n(H,"LI",{});var JUe=s(pF);i4e=n(JUe,"STRONG",{});var Roa=s(i4e);psr=r(Roa,"bloom"),Roa.forEach(t),_sr=r(JUe," \u2014 "),xJ=n(JUe,"A",{href:!0});var Poa=s(xJ);bsr=r(Poa,"BloomForCausalLM"),Poa.forEach(t),vsr=r(JUe," (BLOOM model)"),JUe.forEach(t),Fsr=i(H),_F=n(H,"LI",{});var YUe=s(_F);d4e=n(YUe,"STRONG",{});var Boa=s(d4e);Tsr=r(Boa,"camembert"),Boa.forEach(t),Msr=r(YUe," \u2014 "),$J=n(YUe,"A",{href:!0});var Ioa=s($J);Esr=r(Ioa,"CamembertForCausalLM"),Ioa.forEach(t),Csr=r(YUe," (CamemBERT model)"),YUe.forEach(t),wsr=i(H),bF=n(H,"LI",{});var ZUe=s(bF);m4e=n(ZUe,"STRONG",{});var Noa=s(m4e);Asr=r(Noa,"codegen"),Noa.forEach(t),Lsr=r(ZUe," \u2014 "),kJ=n(ZUe,"A",{href:!0});var qoa=s(kJ);ysr=r(qoa,"CodeGenForCausalLM"),qoa.forEach(t),xsr=r(ZUe," (CodeGen model)"),ZUe.forEach(t),$sr=i(H),vF=n(H,"LI",{});var KUe=s(vF);c4e=n(KUe,"STRONG",{});var joa=s(c4e);ksr=r(joa,"ctrl"),joa.forEach(t),Ssr=r(KUe," \u2014 "),SJ=n(KUe,"A",{href:!0});var Doa=s(SJ);Rsr=r(Doa,"CTRLLMHeadModel"),Doa.forEach(t),Psr=r(KUe," (CTRL model)"),KUe.forEach(t),Bsr=i(H),FF=n(H,"LI",{});var eHe=s(FF);f4e=n(eHe,"STRONG",{});var Goa=s(f4e);Isr=r(Goa,"data2vec-text"),Goa.forEach(t),Nsr=r(eHe," \u2014 "),RJ=n(eHe,"A",{href:!0});var Ooa=s(RJ);qsr=r(Ooa,"Data2VecTextForCausalLM"),Ooa.forEach(t),jsr=r(eHe," (Data2VecText model)"),eHe.forEach(t),Dsr=i(H),TF=n(H,"LI",{});var oHe=s(TF);g4e=n(oHe,"STRONG",{});var Voa=s(g4e);Gsr=r(Voa,"electra"),Voa.forEach(t),Osr=r(oHe," \u2014 "),PJ=n(oHe,"A",{href:!0});var Xoa=s(PJ);Vsr=r(Xoa,"ElectraForCausalLM"),Xoa.forEach(t),Xsr=r(oHe," (ELECTRA model)"),oHe.forEach(t),zsr=i(H),MF=n(H,"LI",{});var rHe=s(MF);h4e=n(rHe,"STRONG",{});var zoa=s(h4e);Qsr=r(zoa,"ernie"),zoa.forEach(t),Wsr=r(rHe," \u2014 "),BJ=n(rHe,"A",{href:!0});var Qoa=s(BJ);Usr=r(Qoa,"ErnieForCausalLM"),Qoa.forEach(t),Hsr=r(rHe," (ERNIE model)"),rHe.forEach(t),Jsr=i(H),EF=n(H,"LI",{});var tHe=s(EF);u4e=n(tHe,"STRONG",{});var Woa=s(u4e);Ysr=r(Woa,"gpt2"),Woa.forEach(t),Zsr=r(tHe," \u2014 "),IJ=n(tHe,"A",{href:!0});var Uoa=s(IJ);Ksr=r(Uoa,"GPT2LMHeadModel"),Uoa.forEach(t),elr=r(tHe," (OpenAI GPT-2 model)"),tHe.forEach(t),olr=i(H),CF=n(H,"LI",{});var aHe=s(CF);p4e=n(aHe,"STRONG",{});var Hoa=s(p4e);rlr=r(Hoa,"gpt_neo"),Hoa.forEach(t),tlr=r(aHe," \u2014 "),NJ=n(aHe,"A",{href:!0});var Joa=s(NJ);alr=r(Joa,"GPTNeoForCausalLM"),Joa.forEach(t),nlr=r(aHe," (GPT Neo model)"),aHe.forEach(t),slr=i(H),wF=n(H,"LI",{});var nHe=s(wF);_4e=n(nHe,"STRONG",{});var Yoa=s(_4e);llr=r(Yoa,"gpt_neox"),Yoa.forEach(t),ilr=r(nHe," \u2014 "),qJ=n(nHe,"A",{href:!0});var Zoa=s(qJ);dlr=r(Zoa,"GPTNeoXForCausalLM"),Zoa.forEach(t),mlr=r(nHe," (GPT NeoX model)"),nHe.forEach(t),clr=i(H),AF=n(H,"LI",{});var sHe=s(AF);b4e=n(sHe,"STRONG",{});var Koa=s(b4e);flr=r(Koa,"gpt_neox_japanese"),Koa.forEach(t),glr=r(sHe," \u2014 "),jJ=n(sHe,"A",{href:!0});var era=s(jJ);hlr=r(era,"GPTNeoXJapaneseForCausalLM"),era.forEach(t),ulr=r(sHe," (GPT NeoX Japanese model)"),sHe.forEach(t),plr=i(H),LF=n(H,"LI",{});var lHe=s(LF);v4e=n(lHe,"STRONG",{});var ora=s(v4e);_lr=r(ora,"gptj"),ora.forEach(t),blr=r(lHe," \u2014 "),DJ=n(lHe,"A",{href:!0});var rra=s(DJ);vlr=r(rra,"GPTJForCausalLM"),rra.forEach(t),Flr=r(lHe," (GPT-J model)"),lHe.forEach(t),Tlr=i(H),yF=n(H,"LI",{});var iHe=s(yF);F4e=n(iHe,"STRONG",{});var tra=s(F4e);Mlr=r(tra,"marian"),tra.forEach(t),Elr=r(iHe," \u2014 "),GJ=n(iHe,"A",{href:!0});var ara=s(GJ);Clr=r(ara,"MarianForCausalLM"),ara.forEach(t),wlr=r(iHe," (Marian model)"),iHe.forEach(t),Alr=i(H),xF=n(H,"LI",{});var dHe=s(xF);T4e=n(dHe,"STRONG",{});var nra=s(T4e);Llr=r(nra,"mbart"),nra.forEach(t),ylr=r(dHe," \u2014 "),OJ=n(dHe,"A",{href:!0});var sra=s(OJ);xlr=r(sra,"MBartForCausalLM"),sra.forEach(t),$lr=r(dHe," (mBART model)"),dHe.forEach(t),klr=i(H),$F=n(H,"LI",{});var mHe=s($F);M4e=n(mHe,"STRONG",{});var lra=s(M4e);Slr=r(lra,"megatron-bert"),lra.forEach(t),Rlr=r(mHe," \u2014 "),VJ=n(mHe,"A",{href:!0});var ira=s(VJ);Plr=r(ira,"MegatronBertForCausalLM"),ira.forEach(t),Blr=r(mHe," (Megatron-BERT model)"),mHe.forEach(t),Ilr=i(H),kF=n(H,"LI",{});var cHe=s(kF);E4e=n(cHe,"STRONG",{});var dra=s(E4e);Nlr=r(dra,"mvp"),dra.forEach(t),qlr=r(cHe," \u2014 "),XJ=n(cHe,"A",{href:!0});var mra=s(XJ);jlr=r(mra,"MvpForCausalLM"),mra.forEach(t),Dlr=r(cHe," (MVP model)"),cHe.forEach(t),Glr=i(H),SF=n(H,"LI",{});var fHe=s(SF);C4e=n(fHe,"STRONG",{});var cra=s(C4e);Olr=r(cra,"openai-gpt"),cra.forEach(t),Vlr=r(fHe," \u2014 "),zJ=n(fHe,"A",{href:!0});var fra=s(zJ);Xlr=r(fra,"OpenAIGPTLMHeadModel"),fra.forEach(t),zlr=r(fHe," (OpenAI GPT model)"),fHe.forEach(t),Qlr=i(H),RF=n(H,"LI",{});var gHe=s(RF);w4e=n(gHe,"STRONG",{});var gra=s(w4e);Wlr=r(gra,"opt"),gra.forEach(t),Ulr=r(gHe," \u2014 "),QJ=n(gHe,"A",{href:!0});var hra=s(QJ);Hlr=r(hra,"OPTForCausalLM"),hra.forEach(t),Jlr=r(gHe," (OPT model)"),gHe.forEach(t),Ylr=i(H),PF=n(H,"LI",{});var hHe=s(PF);A4e=n(hHe,"STRONG",{});var ura=s(A4e);Zlr=r(ura,"pegasus"),ura.forEach(t),Klr=r(hHe," \u2014 "),WJ=n(hHe,"A",{href:!0});var pra=s(WJ);eir=r(pra,"PegasusForCausalLM"),pra.forEach(t),oir=r(hHe," (Pegasus model)"),hHe.forEach(t),rir=i(H),BF=n(H,"LI",{});var uHe=s(BF);L4e=n(uHe,"STRONG",{});var _ra=s(L4e);tir=r(_ra,"plbart"),_ra.forEach(t),air=r(uHe," \u2014 "),UJ=n(uHe,"A",{href:!0});var bra=s(UJ);nir=r(bra,"PLBartForCausalLM"),bra.forEach(t),sir=r(uHe," (PLBart model)"),uHe.forEach(t),lir=i(H),IF=n(H,"LI",{});var pHe=s(IF);y4e=n(pHe,"STRONG",{});var vra=s(y4e);iir=r(vra,"prophetnet"),vra.forEach(t),dir=r(pHe," \u2014 "),HJ=n(pHe,"A",{href:!0});var Fra=s(HJ);mir=r(Fra,"ProphetNetForCausalLM"),Fra.forEach(t),cir=r(pHe," (ProphetNet model)"),pHe.forEach(t),fir=i(H),NF=n(H,"LI",{});var _He=s(NF);x4e=n(_He,"STRONG",{});var Tra=s(x4e);gir=r(Tra,"qdqbert"),Tra.forEach(t),hir=r(_He," \u2014 "),JJ=n(_He,"A",{href:!0});var Mra=s(JJ);uir=r(Mra,"QDQBertLMHeadModel"),Mra.forEach(t),pir=r(_He," (QDQBert model)"),_He.forEach(t),_ir=i(H),qF=n(H,"LI",{});var bHe=s(qF);$4e=n(bHe,"STRONG",{});var Era=s($4e);bir=r(Era,"reformer"),Era.forEach(t),vir=r(bHe," \u2014 "),YJ=n(bHe,"A",{href:!0});var Cra=s(YJ);Fir=r(Cra,"ReformerModelWithLMHead"),Cra.forEach(t),Tir=r(bHe," (Reformer model)"),bHe.forEach(t),Mir=i(H),jF=n(H,"LI",{});var vHe=s(jF);k4e=n(vHe,"STRONG",{});var wra=s(k4e);Eir=r(wra,"rembert"),wra.forEach(t),Cir=r(vHe," \u2014 "),ZJ=n(vHe,"A",{href:!0});var Ara=s(ZJ);wir=r(Ara,"RemBertForCausalLM"),Ara.forEach(t),Air=r(vHe," (RemBERT model)"),vHe.forEach(t),Lir=i(H),DF=n(H,"LI",{});var FHe=s(DF);S4e=n(FHe,"STRONG",{});var Lra=s(S4e);yir=r(Lra,"roberta"),Lra.forEach(t),xir=r(FHe," \u2014 "),KJ=n(FHe,"A",{href:!0});var yra=s(KJ);$ir=r(yra,"RobertaForCausalLM"),yra.forEach(t),kir=r(FHe," (RoBERTa model)"),FHe.forEach(t),Sir=i(H),GF=n(H,"LI",{});var THe=s(GF);R4e=n(THe,"STRONG",{});var xra=s(R4e);Rir=r(xra,"roc_bert"),xra.forEach(t),Pir=r(THe," \u2014 "),eY=n(THe,"A",{href:!0});var $ra=s(eY);Bir=r($ra,"RoCBertForCausalLM"),$ra.forEach(t),Iir=r(THe," (RoCBert model)"),THe.forEach(t),Nir=i(H),OF=n(H,"LI",{});var MHe=s(OF);P4e=n(MHe,"STRONG",{});var kra=s(P4e);qir=r(kra,"roformer"),kra.forEach(t),jir=r(MHe," \u2014 "),oY=n(MHe,"A",{href:!0});var Sra=s(oY);Dir=r(Sra,"RoFormerForCausalLM"),Sra.forEach(t),Gir=r(MHe," (RoFormer model)"),MHe.forEach(t),Oir=i(H),VF=n(H,"LI",{});var EHe=s(VF);B4e=n(EHe,"STRONG",{});var Rra=s(B4e);Vir=r(Rra,"speech_to_text_2"),Rra.forEach(t),Xir=r(EHe," \u2014 "),rY=n(EHe,"A",{href:!0});var Pra=s(rY);zir=r(Pra,"Speech2Text2ForCausalLM"),Pra.forEach(t),Qir=r(EHe," (Speech2Text2 model)"),EHe.forEach(t),Wir=i(H),XF=n(H,"LI",{});var CHe=s(XF);I4e=n(CHe,"STRONG",{});var Bra=s(I4e);Uir=r(Bra,"transfo-xl"),Bra.forEach(t),Hir=r(CHe," \u2014 "),tY=n(CHe,"A",{href:!0});var Ira=s(tY);Jir=r(Ira,"TransfoXLLMHeadModel"),Ira.forEach(t),Yir=r(CHe," (Transformer-XL model)"),CHe.forEach(t),Zir=i(H),zF=n(H,"LI",{});var wHe=s(zF);N4e=n(wHe,"STRONG",{});var Nra=s(N4e);Kir=r(Nra,"trocr"),Nra.forEach(t),edr=r(wHe," \u2014 "),aY=n(wHe,"A",{href:!0});var qra=s(aY);odr=r(qra,"TrOCRForCausalLM"),qra.forEach(t),rdr=r(wHe," (TrOCR model)"),wHe.forEach(t),tdr=i(H),QF=n(H,"LI",{});var AHe=s(QF);q4e=n(AHe,"STRONG",{});var jra=s(q4e);adr=r(jra,"xglm"),jra.forEach(t),ndr=r(AHe," \u2014 "),nY=n(AHe,"A",{href:!0});var Dra=s(nY);sdr=r(Dra,"XGLMForCausalLM"),Dra.forEach(t),ldr=r(AHe," (XGLM model)"),AHe.forEach(t),idr=i(H),WF=n(H,"LI",{});var LHe=s(WF);j4e=n(LHe,"STRONG",{});var Gra=s(j4e);ddr=r(Gra,"xlm"),Gra.forEach(t),mdr=r(LHe," \u2014 "),sY=n(LHe,"A",{href:!0});var Ora=s(sY);cdr=r(Ora,"XLMWithLMHeadModel"),Ora.forEach(t),fdr=r(LHe," (XLM model)"),LHe.forEach(t),gdr=i(H),UF=n(H,"LI",{});var yHe=s(UF);D4e=n(yHe,"STRONG",{});var Vra=s(D4e);hdr=r(Vra,"xlm-prophetnet"),Vra.forEach(t),udr=r(yHe," \u2014 "),lY=n(yHe,"A",{href:!0});var Xra=s(lY);pdr=r(Xra,"XLMProphetNetForCausalLM"),Xra.forEach(t),_dr=r(yHe," (XLM-ProphetNet model)"),yHe.forEach(t),bdr=i(H),HF=n(H,"LI",{});var xHe=s(HF);G4e=n(xHe,"STRONG",{});var zra=s(G4e);vdr=r(zra,"xlm-roberta"),zra.forEach(t),Fdr=r(xHe," \u2014 "),iY=n(xHe,"A",{href:!0});var Qra=s(iY);Tdr=r(Qra,"XLMRobertaForCausalLM"),Qra.forEach(t),Mdr=r(xHe," (XLM-RoBERTa model)"),xHe.forEach(t),Edr=i(H),JF=n(H,"LI",{});var $He=s(JF);O4e=n($He,"STRONG",{});var Wra=s(O4e);Cdr=r(Wra,"xlm-roberta-xl"),Wra.forEach(t),wdr=r($He," \u2014 "),dY=n($He,"A",{href:!0});var Ura=s(dY);Adr=r(Ura,"XLMRobertaXLForCausalLM"),Ura.forEach(t),Ldr=r($He," (XLM-RoBERTa-XL model)"),$He.forEach(t),ydr=i(H),YF=n(H,"LI",{});var kHe=s(YF);V4e=n(kHe,"STRONG",{});var Hra=s(V4e);xdr=r(Hra,"xlnet"),Hra.forEach(t),$dr=r(kHe," \u2014 "),mY=n(kHe,"A",{href:!0});var Jra=s(mY);kdr=r(Jra,"XLNetLMHeadModel"),Jra.forEach(t),Sdr=r(kHe," (XLNet model)"),kHe.forEach(t),H.forEach(t),Rdr=i(Pa),ZF=n(Pa,"P",{});var SHe=s(ZF);Pdr=r(SHe,"The model is set in evaluation mode by default using "),X4e=n(SHe,"CODE",{});var Yra=s(X4e);Bdr=r(Yra,"model.eval()"),Yra.forEach(t),Idr=r(SHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z4e=n(SHe,"CODE",{});var Zra=s(z4e);Ndr=r(Zra,"model.train()"),Zra.forEach(t),SHe.forEach(t),qdr=i(Pa),T(KF.$$.fragment,Pa),Pa.forEach(t),Jl.forEach(t),Xio=i(c),Yd=n(c,"H2",{class:!0});var fco=s(Yd);eT=n(fco,"A",{id:!0,class:!0,href:!0});var Kra=s(eT);Q4e=n(Kra,"SPAN",{});var eta=s(Q4e);T(FS.$$.fragment,eta),eta.forEach(t),Kra.forEach(t),jdr=i(fco),W4e=n(fco,"SPAN",{});var ota=s(W4e);Ddr=r(ota,"AutoModelForDepthEstimation"),ota.forEach(t),fco.forEach(t),zio=i(c),Vo=n(c,"DIV",{class:!0});var Yl=s(Vo);T(TS.$$.fragment,Yl),Gdr=i(Yl),Zd=n(Yl,"P",{});var Xfe=s(Zd);Odr=r(Xfe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a depth estimation head) when created
with the `),cY=n(Xfe,"A",{href:!0});var rta=s(cY);Vdr=r(rta,"from_pretrained()"),rta.forEach(t),Xdr=r(Xfe," class method or the "),fY=n(Xfe,"A",{href:!0});var tta=s(fY);zdr=r(tta,"from_config()"),tta.forEach(t),Qdr=r(Xfe,` class
method.`),Xfe.forEach(t),Wdr=i(Yl),MS=n(Yl,"P",{});var gco=s(MS);Udr=r(gco,"This class cannot be instantiated directly using "),U4e=n(gco,"CODE",{});var ata=s(U4e);Hdr=r(ata,"__init__()"),ata.forEach(t),Jdr=r(gco," (throws an error)."),gco.forEach(t),Ydr=i(Yl),xt=n(Yl,"DIV",{class:!0});var Cx=s(xt);T(ES.$$.fragment,Cx),Zdr=i(Cx),H4e=n(Cx,"P",{});var nta=s(H4e);Kdr=r(nta,"Instantiates one of the model classes of the library (with a depth estimation head) from a configuration."),nta.forEach(t),emr=i(Cx),Kd=n(Cx,"P",{});var zfe=s(Kd);omr=r(zfe,`Note:
Loading a model from its configuration file does `),J4e=n(zfe,"STRONG",{});var sta=s(J4e);rmr=r(sta,"not"),sta.forEach(t),tmr=r(zfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(zfe,"A",{href:!0});var lta=s(gY);amr=r(lta,"from_pretrained()"),lta.forEach(t),nmr=r(zfe," to load the model weights."),zfe.forEach(t),smr=i(Cx),T(oT.$$.fragment,Cx),Cx.forEach(t),lmr=i(Yl),so=n(Yl,"DIV",{class:!0});var Ba=s(so);T(CS.$$.fragment,Ba),imr=i(Ba),Y4e=n(Ba,"P",{});var ita=s(Y4e);dmr=r(ita,"Instantiate one of the model classes of the library (with a depth estimation head) from a pretrained model."),ita.forEach(t),mmr=i(Ba),pn=n(Ba,"P",{});var wx=s(pn);cmr=r(wx,"The model class to instantiate is selected based on the "),Z4e=n(wx,"CODE",{});var dta=s(Z4e);fmr=r(dta,"model_type"),dta.forEach(t),gmr=r(wx,` property of the config object (either
passed as an argument or loaded from `),K4e=n(wx,"CODE",{});var mta=s(K4e);hmr=r(mta,"pretrained_model_name_or_path"),mta.forEach(t),umr=r(wx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eCe=n(wx,"CODE",{});var cta=s(eCe);pmr=r(cta,"pretrained_model_name_or_path"),cta.forEach(t),_mr=r(wx,":"),wx.forEach(t),bmr=i(Ba),wS=n(Ba,"UL",{});var hco=s(wS);rT=n(hco,"LI",{});var RHe=s(rT);oCe=n(RHe,"STRONG",{});var fta=s(oCe);vmr=r(fta,"dpt"),fta.forEach(t),Fmr=r(RHe," \u2014 "),hY=n(RHe,"A",{href:!0});var gta=s(hY);Tmr=r(gta,"DPTForDepthEstimation"),gta.forEach(t),Mmr=r(RHe," (DPT model)"),RHe.forEach(t),Emr=i(hco),tT=n(hco,"LI",{});var PHe=s(tT);rCe=n(PHe,"STRONG",{});var hta=s(rCe);Cmr=r(hta,"glpn"),hta.forEach(t),wmr=r(PHe," \u2014 "),uY=n(PHe,"A",{href:!0});var uta=s(uY);Amr=r(uta,"GLPNForDepthEstimation"),uta.forEach(t),Lmr=r(PHe," (GLPN model)"),PHe.forEach(t),hco.forEach(t),ymr=i(Ba),aT=n(Ba,"P",{});var BHe=s(aT);xmr=r(BHe,"The model is set in evaluation mode by default using "),tCe=n(BHe,"CODE",{});var pta=s(tCe);$mr=r(pta,"model.eval()"),pta.forEach(t),kmr=r(BHe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aCe=n(BHe,"CODE",{});var _ta=s(aCe);Smr=r(_ta,"model.train()"),_ta.forEach(t),BHe.forEach(t),Rmr=i(Ba),T(nT.$$.fragment,Ba),Ba.forEach(t),Yl.forEach(t),Qio=i(c),em=n(c,"H2",{class:!0});var uco=s(em);sT=n(uco,"A",{id:!0,class:!0,href:!0});var bta=s(sT);nCe=n(bta,"SPAN",{});var vta=s(nCe);T(AS.$$.fragment,vta),vta.forEach(t),bta.forEach(t),Pmr=i(uco),sCe=n(uco,"SPAN",{});var Fta=s(sCe);Bmr=r(Fta,"AutoModelForMaskedLM"),Fta.forEach(t),uco.forEach(t),Wio=i(c),Xo=n(c,"DIV",{class:!0});var Zl=s(Xo);T(LS.$$.fragment,Zl),Imr=i(Zl),om=n(Zl,"P",{});var Qfe=s(om);Nmr=r(Qfe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pY=n(Qfe,"A",{href:!0});var Tta=s(pY);qmr=r(Tta,"from_pretrained()"),Tta.forEach(t),jmr=r(Qfe," class method or the "),_Y=n(Qfe,"A",{href:!0});var Mta=s(_Y);Dmr=r(Mta,"from_config()"),Mta.forEach(t),Gmr=r(Qfe,` class
method.`),Qfe.forEach(t),Omr=i(Zl),yS=n(Zl,"P",{});var pco=s(yS);Vmr=r(pco,"This class cannot be instantiated directly using "),lCe=n(pco,"CODE",{});var Eta=s(lCe);Xmr=r(Eta,"__init__()"),Eta.forEach(t),zmr=r(pco," (throws an error)."),pco.forEach(t),Qmr=i(Zl),$t=n(Zl,"DIV",{class:!0});var Ax=s($t);T(xS.$$.fragment,Ax),Wmr=i(Ax),iCe=n(Ax,"P",{});var Cta=s(iCe);Umr=r(Cta,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cta.forEach(t),Hmr=i(Ax),rm=n(Ax,"P",{});var Wfe=s(rm);Jmr=r(Wfe,`Note:
Loading a model from its configuration file does `),dCe=n(Wfe,"STRONG",{});var wta=s(dCe);Ymr=r(wta,"not"),wta.forEach(t),Zmr=r(Wfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(Wfe,"A",{href:!0});var Ata=s(bY);Kmr=r(Ata,"from_pretrained()"),Ata.forEach(t),ecr=r(Wfe," to load the model weights."),Wfe.forEach(t),ocr=i(Ax),T(lT.$$.fragment,Ax),Ax.forEach(t),rcr=i(Zl),lo=n(Zl,"DIV",{class:!0});var Ia=s(lo);T($S.$$.fragment,Ia),tcr=i(Ia),mCe=n(Ia,"P",{});var Lta=s(mCe);acr=r(Lta,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Lta.forEach(t),ncr=i(Ia),_n=n(Ia,"P",{});var Lx=s(_n);scr=r(Lx,"The model class to instantiate is selected based on the "),cCe=n(Lx,"CODE",{});var yta=s(cCe);lcr=r(yta,"model_type"),yta.forEach(t),icr=r(Lx,` property of the config object (either
passed as an argument or loaded from `),fCe=n(Lx,"CODE",{});var xta=s(fCe);dcr=r(xta,"pretrained_model_name_or_path"),xta.forEach(t),mcr=r(Lx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=n(Lx,"CODE",{});var $ta=s(gCe);ccr=r($ta,"pretrained_model_name_or_path"),$ta.forEach(t),fcr=r(Lx,":"),Lx.forEach(t),gcr=i(Ia),J=n(Ia,"UL",{});var Z=s(J);iT=n(Z,"LI",{});var IHe=s(iT);hCe=n(IHe,"STRONG",{});var kta=s(hCe);hcr=r(kta,"albert"),kta.forEach(t),ucr=r(IHe," \u2014 "),vY=n(IHe,"A",{href:!0});var Sta=s(vY);pcr=r(Sta,"AlbertForMaskedLM"),Sta.forEach(t),_cr=r(IHe," (ALBERT model)"),IHe.forEach(t),bcr=i(Z),dT=n(Z,"LI",{});var NHe=s(dT);uCe=n(NHe,"STRONG",{});var Rta=s(uCe);vcr=r(Rta,"bart"),Rta.forEach(t),Fcr=r(NHe," \u2014 "),FY=n(NHe,"A",{href:!0});var Pta=s(FY);Tcr=r(Pta,"BartForConditionalGeneration"),Pta.forEach(t),Mcr=r(NHe," (BART model)"),NHe.forEach(t),Ecr=i(Z),mT=n(Z,"LI",{});var qHe=s(mT);pCe=n(qHe,"STRONG",{});var Bta=s(pCe);Ccr=r(Bta,"bert"),Bta.forEach(t),wcr=r(qHe," \u2014 "),TY=n(qHe,"A",{href:!0});var Ita=s(TY);Acr=r(Ita,"BertForMaskedLM"),Ita.forEach(t),Lcr=r(qHe," (BERT model)"),qHe.forEach(t),ycr=i(Z),cT=n(Z,"LI",{});var jHe=s(cT);_Ce=n(jHe,"STRONG",{});var Nta=s(_Ce);xcr=r(Nta,"big_bird"),Nta.forEach(t),$cr=r(jHe," \u2014 "),MY=n(jHe,"A",{href:!0});var qta=s(MY);kcr=r(qta,"BigBirdForMaskedLM"),qta.forEach(t),Scr=r(jHe," (BigBird model)"),jHe.forEach(t),Rcr=i(Z),fT=n(Z,"LI",{});var DHe=s(fT);bCe=n(DHe,"STRONG",{});var jta=s(bCe);Pcr=r(jta,"camembert"),jta.forEach(t),Bcr=r(DHe," \u2014 "),EY=n(DHe,"A",{href:!0});var Dta=s(EY);Icr=r(Dta,"CamembertForMaskedLM"),Dta.forEach(t),Ncr=r(DHe," (CamemBERT model)"),DHe.forEach(t),qcr=i(Z),gT=n(Z,"LI",{});var GHe=s(gT);vCe=n(GHe,"STRONG",{});var Gta=s(vCe);jcr=r(Gta,"convbert"),Gta.forEach(t),Dcr=r(GHe," \u2014 "),CY=n(GHe,"A",{href:!0});var Ota=s(CY);Gcr=r(Ota,"ConvBertForMaskedLM"),Ota.forEach(t),Ocr=r(GHe," (ConvBERT model)"),GHe.forEach(t),Vcr=i(Z),hT=n(Z,"LI",{});var OHe=s(hT);FCe=n(OHe,"STRONG",{});var Vta=s(FCe);Xcr=r(Vta,"data2vec-text"),Vta.forEach(t),zcr=r(OHe," \u2014 "),wY=n(OHe,"A",{href:!0});var Xta=s(wY);Qcr=r(Xta,"Data2VecTextForMaskedLM"),Xta.forEach(t),Wcr=r(OHe," (Data2VecText model)"),OHe.forEach(t),Ucr=i(Z),uT=n(Z,"LI",{});var VHe=s(uT);TCe=n(VHe,"STRONG",{});var zta=s(TCe);Hcr=r(zta,"deberta"),zta.forEach(t),Jcr=r(VHe," \u2014 "),AY=n(VHe,"A",{href:!0});var Qta=s(AY);Ycr=r(Qta,"DebertaForMaskedLM"),Qta.forEach(t),Zcr=r(VHe," (DeBERTa model)"),VHe.forEach(t),Kcr=i(Z),pT=n(Z,"LI",{});var XHe=s(pT);MCe=n(XHe,"STRONG",{});var Wta=s(MCe);efr=r(Wta,"deberta-v2"),Wta.forEach(t),ofr=r(XHe," \u2014 "),LY=n(XHe,"A",{href:!0});var Uta=s(LY);rfr=r(Uta,"DebertaV2ForMaskedLM"),Uta.forEach(t),tfr=r(XHe," (DeBERTa-v2 model)"),XHe.forEach(t),afr=i(Z),_T=n(Z,"LI",{});var zHe=s(_T);ECe=n(zHe,"STRONG",{});var Hta=s(ECe);nfr=r(Hta,"distilbert"),Hta.forEach(t),sfr=r(zHe," \u2014 "),yY=n(zHe,"A",{href:!0});var Jta=s(yY);lfr=r(Jta,"DistilBertForMaskedLM"),Jta.forEach(t),ifr=r(zHe," (DistilBERT model)"),zHe.forEach(t),dfr=i(Z),bT=n(Z,"LI",{});var QHe=s(bT);CCe=n(QHe,"STRONG",{});var Yta=s(CCe);mfr=r(Yta,"electra"),Yta.forEach(t),cfr=r(QHe," \u2014 "),xY=n(QHe,"A",{href:!0});var Zta=s(xY);ffr=r(Zta,"ElectraForMaskedLM"),Zta.forEach(t),gfr=r(QHe," (ELECTRA model)"),QHe.forEach(t),hfr=i(Z),vT=n(Z,"LI",{});var WHe=s(vT);wCe=n(WHe,"STRONG",{});var Kta=s(wCe);ufr=r(Kta,"ernie"),Kta.forEach(t),pfr=r(WHe," \u2014 "),$Y=n(WHe,"A",{href:!0});var eaa=s($Y);_fr=r(eaa,"ErnieForMaskedLM"),eaa.forEach(t),bfr=r(WHe," (ERNIE model)"),WHe.forEach(t),vfr=i(Z),FT=n(Z,"LI",{});var UHe=s(FT);ACe=n(UHe,"STRONG",{});var oaa=s(ACe);Ffr=r(oaa,"esm"),oaa.forEach(t),Tfr=r(UHe," \u2014 "),kY=n(UHe,"A",{href:!0});var raa=s(kY);Mfr=r(raa,"EsmForMaskedLM"),raa.forEach(t),Efr=r(UHe," (ESM model)"),UHe.forEach(t),Cfr=i(Z),TT=n(Z,"LI",{});var HHe=s(TT);LCe=n(HHe,"STRONG",{});var taa=s(LCe);wfr=r(taa,"flaubert"),taa.forEach(t),Afr=r(HHe," \u2014 "),SY=n(HHe,"A",{href:!0});var aaa=s(SY);Lfr=r(aaa,"FlaubertWithLMHeadModel"),aaa.forEach(t),yfr=r(HHe," (FlauBERT model)"),HHe.forEach(t),xfr=i(Z),MT=n(Z,"LI",{});var JHe=s(MT);yCe=n(JHe,"STRONG",{});var naa=s(yCe);$fr=r(naa,"fnet"),naa.forEach(t),kfr=r(JHe," \u2014 "),RY=n(JHe,"A",{href:!0});var saa=s(RY);Sfr=r(saa,"FNetForMaskedLM"),saa.forEach(t),Rfr=r(JHe," (FNet model)"),JHe.forEach(t),Pfr=i(Z),ET=n(Z,"LI",{});var YHe=s(ET);xCe=n(YHe,"STRONG",{});var laa=s(xCe);Bfr=r(laa,"funnel"),laa.forEach(t),Ifr=r(YHe," \u2014 "),PY=n(YHe,"A",{href:!0});var iaa=s(PY);Nfr=r(iaa,"FunnelForMaskedLM"),iaa.forEach(t),qfr=r(YHe," (Funnel Transformer model)"),YHe.forEach(t),jfr=i(Z),CT=n(Z,"LI",{});var ZHe=s(CT);$Ce=n(ZHe,"STRONG",{});var daa=s($Ce);Dfr=r(daa,"ibert"),daa.forEach(t),Gfr=r(ZHe," \u2014 "),BY=n(ZHe,"A",{href:!0});var maa=s(BY);Ofr=r(maa,"IBertForMaskedLM"),maa.forEach(t),Vfr=r(ZHe," (I-BERT model)"),ZHe.forEach(t),Xfr=i(Z),wT=n(Z,"LI",{});var KHe=s(wT);kCe=n(KHe,"STRONG",{});var caa=s(kCe);zfr=r(caa,"layoutlm"),caa.forEach(t),Qfr=r(KHe," \u2014 "),IY=n(KHe,"A",{href:!0});var faa=s(IY);Wfr=r(faa,"LayoutLMForMaskedLM"),faa.forEach(t),Ufr=r(KHe," (LayoutLM model)"),KHe.forEach(t),Hfr=i(Z),AT=n(Z,"LI",{});var eJe=s(AT);SCe=n(eJe,"STRONG",{});var gaa=s(SCe);Jfr=r(gaa,"longformer"),gaa.forEach(t),Yfr=r(eJe," \u2014 "),NY=n(eJe,"A",{href:!0});var haa=s(NY);Zfr=r(haa,"LongformerForMaskedLM"),haa.forEach(t),Kfr=r(eJe," (Longformer model)"),eJe.forEach(t),egr=i(Z),LT=n(Z,"LI",{});var oJe=s(LT);RCe=n(oJe,"STRONG",{});var uaa=s(RCe);ogr=r(uaa,"luke"),uaa.forEach(t),rgr=r(oJe," \u2014 "),qY=n(oJe,"A",{href:!0});var paa=s(qY);tgr=r(paa,"LukeForMaskedLM"),paa.forEach(t),agr=r(oJe," (LUKE model)"),oJe.forEach(t),ngr=i(Z),yT=n(Z,"LI",{});var rJe=s(yT);PCe=n(rJe,"STRONG",{});var _aa=s(PCe);sgr=r(_aa,"mbart"),_aa.forEach(t),lgr=r(rJe," \u2014 "),jY=n(rJe,"A",{href:!0});var baa=s(jY);igr=r(baa,"MBartForConditionalGeneration"),baa.forEach(t),dgr=r(rJe," (mBART model)"),rJe.forEach(t),mgr=i(Z),xT=n(Z,"LI",{});var tJe=s(xT);BCe=n(tJe,"STRONG",{});var vaa=s(BCe);cgr=r(vaa,"megatron-bert"),vaa.forEach(t),fgr=r(tJe," \u2014 "),DY=n(tJe,"A",{href:!0});var Faa=s(DY);ggr=r(Faa,"MegatronBertForMaskedLM"),Faa.forEach(t),hgr=r(tJe," (Megatron-BERT model)"),tJe.forEach(t),ugr=i(Z),$T=n(Z,"LI",{});var aJe=s($T);ICe=n(aJe,"STRONG",{});var Taa=s(ICe);pgr=r(Taa,"mobilebert"),Taa.forEach(t),_gr=r(aJe," \u2014 "),GY=n(aJe,"A",{href:!0});var Maa=s(GY);bgr=r(Maa,"MobileBertForMaskedLM"),Maa.forEach(t),vgr=r(aJe," (MobileBERT model)"),aJe.forEach(t),Fgr=i(Z),kT=n(Z,"LI",{});var nJe=s(kT);NCe=n(nJe,"STRONG",{});var Eaa=s(NCe);Tgr=r(Eaa,"mpnet"),Eaa.forEach(t),Mgr=r(nJe," \u2014 "),OY=n(nJe,"A",{href:!0});var Caa=s(OY);Egr=r(Caa,"MPNetForMaskedLM"),Caa.forEach(t),Cgr=r(nJe," (MPNet model)"),nJe.forEach(t),wgr=i(Z),ST=n(Z,"LI",{});var sJe=s(ST);qCe=n(sJe,"STRONG",{});var waa=s(qCe);Agr=r(waa,"mvp"),waa.forEach(t),Lgr=r(sJe," \u2014 "),VY=n(sJe,"A",{href:!0});var Aaa=s(VY);ygr=r(Aaa,"MvpForConditionalGeneration"),Aaa.forEach(t),xgr=r(sJe," (MVP model)"),sJe.forEach(t),$gr=i(Z),RT=n(Z,"LI",{});var lJe=s(RT);jCe=n(lJe,"STRONG",{});var Laa=s(jCe);kgr=r(Laa,"nezha"),Laa.forEach(t),Sgr=r(lJe," \u2014 "),XY=n(lJe,"A",{href:!0});var yaa=s(XY);Rgr=r(yaa,"NezhaForMaskedLM"),yaa.forEach(t),Pgr=r(lJe," (Nezha model)"),lJe.forEach(t),Bgr=i(Z),PT=n(Z,"LI",{});var iJe=s(PT);DCe=n(iJe,"STRONG",{});var xaa=s(DCe);Igr=r(xaa,"nystromformer"),xaa.forEach(t),Ngr=r(iJe," \u2014 "),zY=n(iJe,"A",{href:!0});var $aa=s(zY);qgr=r($aa,"NystromformerForMaskedLM"),$aa.forEach(t),jgr=r(iJe," (Nystr\xF6mformer model)"),iJe.forEach(t),Dgr=i(Z),BT=n(Z,"LI",{});var dJe=s(BT);GCe=n(dJe,"STRONG",{});var kaa=s(GCe);Ggr=r(kaa,"perceiver"),kaa.forEach(t),Ogr=r(dJe," \u2014 "),QY=n(dJe,"A",{href:!0});var Saa=s(QY);Vgr=r(Saa,"PerceiverForMaskedLM"),Saa.forEach(t),Xgr=r(dJe," (Perceiver model)"),dJe.forEach(t),zgr=i(Z),IT=n(Z,"LI",{});var mJe=s(IT);OCe=n(mJe,"STRONG",{});var Raa=s(OCe);Qgr=r(Raa,"qdqbert"),Raa.forEach(t),Wgr=r(mJe," \u2014 "),WY=n(mJe,"A",{href:!0});var Paa=s(WY);Ugr=r(Paa,"QDQBertForMaskedLM"),Paa.forEach(t),Hgr=r(mJe," (QDQBert model)"),mJe.forEach(t),Jgr=i(Z),NT=n(Z,"LI",{});var cJe=s(NT);VCe=n(cJe,"STRONG",{});var Baa=s(VCe);Ygr=r(Baa,"reformer"),Baa.forEach(t),Zgr=r(cJe," \u2014 "),UY=n(cJe,"A",{href:!0});var Iaa=s(UY);Kgr=r(Iaa,"ReformerForMaskedLM"),Iaa.forEach(t),ehr=r(cJe," (Reformer model)"),cJe.forEach(t),ohr=i(Z),qT=n(Z,"LI",{});var fJe=s(qT);XCe=n(fJe,"STRONG",{});var Naa=s(XCe);rhr=r(Naa,"rembert"),Naa.forEach(t),thr=r(fJe," \u2014 "),HY=n(fJe,"A",{href:!0});var qaa=s(HY);ahr=r(qaa,"RemBertForMaskedLM"),qaa.forEach(t),nhr=r(fJe," (RemBERT model)"),fJe.forEach(t),shr=i(Z),jT=n(Z,"LI",{});var gJe=s(jT);zCe=n(gJe,"STRONG",{});var jaa=s(zCe);lhr=r(jaa,"roberta"),jaa.forEach(t),ihr=r(gJe," \u2014 "),JY=n(gJe,"A",{href:!0});var Daa=s(JY);dhr=r(Daa,"RobertaForMaskedLM"),Daa.forEach(t),mhr=r(gJe," (RoBERTa model)"),gJe.forEach(t),chr=i(Z),DT=n(Z,"LI",{});var hJe=s(DT);QCe=n(hJe,"STRONG",{});var Gaa=s(QCe);fhr=r(Gaa,"roc_bert"),Gaa.forEach(t),ghr=r(hJe," \u2014 "),YY=n(hJe,"A",{href:!0});var Oaa=s(YY);hhr=r(Oaa,"RoCBertForMaskedLM"),Oaa.forEach(t),uhr=r(hJe," (RoCBert model)"),hJe.forEach(t),phr=i(Z),GT=n(Z,"LI",{});var uJe=s(GT);WCe=n(uJe,"STRONG",{});var Vaa=s(WCe);_hr=r(Vaa,"roformer"),Vaa.forEach(t),bhr=r(uJe," \u2014 "),ZY=n(uJe,"A",{href:!0});var Xaa=s(ZY);vhr=r(Xaa,"RoFormerForMaskedLM"),Xaa.forEach(t),Fhr=r(uJe," (RoFormer model)"),uJe.forEach(t),Thr=i(Z),OT=n(Z,"LI",{});var pJe=s(OT);UCe=n(pJe,"STRONG",{});var zaa=s(UCe);Mhr=r(zaa,"squeezebert"),zaa.forEach(t),Ehr=r(pJe," \u2014 "),KY=n(pJe,"A",{href:!0});var Qaa=s(KY);Chr=r(Qaa,"SqueezeBertForMaskedLM"),Qaa.forEach(t),whr=r(pJe," (SqueezeBERT model)"),pJe.forEach(t),Ahr=i(Z),VT=n(Z,"LI",{});var _Je=s(VT);HCe=n(_Je,"STRONG",{});var Waa=s(HCe);Lhr=r(Waa,"tapas"),Waa.forEach(t),yhr=r(_Je," \u2014 "),eZ=n(_Je,"A",{href:!0});var Uaa=s(eZ);xhr=r(Uaa,"TapasForMaskedLM"),Uaa.forEach(t),$hr=r(_Je," (TAPAS model)"),_Je.forEach(t),khr=i(Z),XT=n(Z,"LI",{});var bJe=s(XT);JCe=n(bJe,"STRONG",{});var Haa=s(JCe);Shr=r(Haa,"wav2vec2"),Haa.forEach(t),Rhr=r(bJe," \u2014 "),YCe=n(bJe,"CODE",{});var Jaa=s(YCe);Phr=r(Jaa,"Wav2Vec2ForMaskedLM"),Jaa.forEach(t),Bhr=r(bJe," (Wav2Vec2 model)"),bJe.forEach(t),Ihr=i(Z),zT=n(Z,"LI",{});var vJe=s(zT);ZCe=n(vJe,"STRONG",{});var Yaa=s(ZCe);Nhr=r(Yaa,"xlm"),Yaa.forEach(t),qhr=r(vJe," \u2014 "),oZ=n(vJe,"A",{href:!0});var Zaa=s(oZ);jhr=r(Zaa,"XLMWithLMHeadModel"),Zaa.forEach(t),Dhr=r(vJe," (XLM model)"),vJe.forEach(t),Ghr=i(Z),QT=n(Z,"LI",{});var FJe=s(QT);KCe=n(FJe,"STRONG",{});var Kaa=s(KCe);Ohr=r(Kaa,"xlm-roberta"),Kaa.forEach(t),Vhr=r(FJe," \u2014 "),rZ=n(FJe,"A",{href:!0});var ena=s(rZ);Xhr=r(ena,"XLMRobertaForMaskedLM"),ena.forEach(t),zhr=r(FJe," (XLM-RoBERTa model)"),FJe.forEach(t),Qhr=i(Z),WT=n(Z,"LI",{});var TJe=s(WT);e3e=n(TJe,"STRONG",{});var ona=s(e3e);Whr=r(ona,"xlm-roberta-xl"),ona.forEach(t),Uhr=r(TJe," \u2014 "),tZ=n(TJe,"A",{href:!0});var rna=s(tZ);Hhr=r(rna,"XLMRobertaXLForMaskedLM"),rna.forEach(t),Jhr=r(TJe," (XLM-RoBERTa-XL model)"),TJe.forEach(t),Yhr=i(Z),UT=n(Z,"LI",{});var MJe=s(UT);o3e=n(MJe,"STRONG",{});var tna=s(o3e);Zhr=r(tna,"yoso"),tna.forEach(t),Khr=r(MJe," \u2014 "),aZ=n(MJe,"A",{href:!0});var ana=s(aZ);eur=r(ana,"YosoForMaskedLM"),ana.forEach(t),our=r(MJe," (YOSO model)"),MJe.forEach(t),Z.forEach(t),rur=i(Ia),HT=n(Ia,"P",{});var EJe=s(HT);tur=r(EJe,"The model is set in evaluation mode by default using "),r3e=n(EJe,"CODE",{});var nna=s(r3e);aur=r(nna,"model.eval()"),nna.forEach(t),nur=r(EJe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t3e=n(EJe,"CODE",{});var sna=s(t3e);sur=r(sna,"model.train()"),sna.forEach(t),EJe.forEach(t),lur=i(Ia),T(JT.$$.fragment,Ia),Ia.forEach(t),Zl.forEach(t),Uio=i(c),tm=n(c,"H2",{class:!0});var _co=s(tm);YT=n(_co,"A",{id:!0,class:!0,href:!0});var lna=s(YT);a3e=n(lna,"SPAN",{});var ina=s(a3e);T(kS.$$.fragment,ina),ina.forEach(t),lna.forEach(t),iur=i(_co),n3e=n(_co,"SPAN",{});var dna=s(n3e);dur=r(dna,"AutoModelForSeq2SeqLM"),dna.forEach(t),_co.forEach(t),Hio=i(c),zo=n(c,"DIV",{class:!0});var Kl=s(zo);T(SS.$$.fragment,Kl),mur=i(Kl),am=n(Kl,"P",{});var Ufe=s(am);cur=r(Ufe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nZ=n(Ufe,"A",{href:!0});var mna=s(nZ);fur=r(mna,"from_pretrained()"),mna.forEach(t),gur=r(Ufe," class method or the "),sZ=n(Ufe,"A",{href:!0});var cna=s(sZ);hur=r(cna,"from_config()"),cna.forEach(t),uur=r(Ufe,` class
method.`),Ufe.forEach(t),pur=i(Kl),RS=n(Kl,"P",{});var bco=s(RS);_ur=r(bco,"This class cannot be instantiated directly using "),s3e=n(bco,"CODE",{});var fna=s(s3e);bur=r(fna,"__init__()"),fna.forEach(t),vur=r(bco," (throws an error)."),bco.forEach(t),Fur=i(Kl),kt=n(Kl,"DIV",{class:!0});var yx=s(kt);T(PS.$$.fragment,yx),Tur=i(yx),l3e=n(yx,"P",{});var gna=s(l3e);Mur=r(gna,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gna.forEach(t),Eur=i(yx),nm=n(yx,"P",{});var Hfe=s(nm);Cur=r(Hfe,`Note:
Loading a model from its configuration file does `),i3e=n(Hfe,"STRONG",{});var hna=s(i3e);wur=r(hna,"not"),hna.forEach(t),Aur=r(Hfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(Hfe,"A",{href:!0});var una=s(lZ);Lur=r(una,"from_pretrained()"),una.forEach(t),yur=r(Hfe," to load the model weights."),Hfe.forEach(t),xur=i(yx),T(ZT.$$.fragment,yx),yx.forEach(t),$ur=i(Kl),io=n(Kl,"DIV",{class:!0});var Na=s(io);T(BS.$$.fragment,Na),kur=i(Na),d3e=n(Na,"P",{});var pna=s(d3e);Sur=r(pna,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pna.forEach(t),Rur=i(Na),bn=n(Na,"P",{});var xx=s(bn);Pur=r(xx,"The model class to instantiate is selected based on the "),m3e=n(xx,"CODE",{});var _na=s(m3e);Bur=r(_na,"model_type"),_na.forEach(t),Iur=r(xx,` property of the config object (either
passed as an argument or loaded from `),c3e=n(xx,"CODE",{});var bna=s(c3e);Nur=r(bna,"pretrained_model_name_or_path"),bna.forEach(t),qur=r(xx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=n(xx,"CODE",{});var vna=s(f3e);jur=r(vna,"pretrained_model_name_or_path"),vna.forEach(t),Dur=r(xx,":"),xx.forEach(t),Gur=i(Na),ge=n(Na,"UL",{});var _e=s(ge);KT=n(_e,"LI",{});var CJe=s(KT);g3e=n(CJe,"STRONG",{});var Fna=s(g3e);Our=r(Fna,"bart"),Fna.forEach(t),Vur=r(CJe," \u2014 "),iZ=n(CJe,"A",{href:!0});var Tna=s(iZ);Xur=r(Tna,"BartForConditionalGeneration"),Tna.forEach(t),zur=r(CJe," (BART model)"),CJe.forEach(t),Qur=i(_e),eM=n(_e,"LI",{});var wJe=s(eM);h3e=n(wJe,"STRONG",{});var Mna=s(h3e);Wur=r(Mna,"bigbird_pegasus"),Mna.forEach(t),Uur=r(wJe," \u2014 "),dZ=n(wJe,"A",{href:!0});var Ena=s(dZ);Hur=r(Ena,"BigBirdPegasusForConditionalGeneration"),Ena.forEach(t),Jur=r(wJe," (BigBird-Pegasus model)"),wJe.forEach(t),Yur=i(_e),oM=n(_e,"LI",{});var AJe=s(oM);u3e=n(AJe,"STRONG",{});var Cna=s(u3e);Zur=r(Cna,"blenderbot"),Cna.forEach(t),Kur=r(AJe," \u2014 "),mZ=n(AJe,"A",{href:!0});var wna=s(mZ);epr=r(wna,"BlenderbotForConditionalGeneration"),wna.forEach(t),opr=r(AJe," (Blenderbot model)"),AJe.forEach(t),rpr=i(_e),rM=n(_e,"LI",{});var LJe=s(rM);p3e=n(LJe,"STRONG",{});var Ana=s(p3e);tpr=r(Ana,"blenderbot-small"),Ana.forEach(t),apr=r(LJe," \u2014 "),cZ=n(LJe,"A",{href:!0});var Lna=s(cZ);npr=r(Lna,"BlenderbotSmallForConditionalGeneration"),Lna.forEach(t),spr=r(LJe," (BlenderbotSmall model)"),LJe.forEach(t),lpr=i(_e),tM=n(_e,"LI",{});var yJe=s(tM);_3e=n(yJe,"STRONG",{});var yna=s(_3e);ipr=r(yna,"encoder-decoder"),yna.forEach(t),dpr=r(yJe," \u2014 "),fZ=n(yJe,"A",{href:!0});var xna=s(fZ);mpr=r(xna,"EncoderDecoderModel"),xna.forEach(t),cpr=r(yJe," (Encoder decoder model)"),yJe.forEach(t),fpr=i(_e),aM=n(_e,"LI",{});var xJe=s(aM);b3e=n(xJe,"STRONG",{});var $na=s(b3e);gpr=r($na,"fsmt"),$na.forEach(t),hpr=r(xJe," \u2014 "),gZ=n(xJe,"A",{href:!0});var kna=s(gZ);upr=r(kna,"FSMTForConditionalGeneration"),kna.forEach(t),ppr=r(xJe," (FairSeq Machine-Translation model)"),xJe.forEach(t),_pr=i(_e),nM=n(_e,"LI",{});var $Je=s(nM);v3e=n($Je,"STRONG",{});var Sna=s(v3e);bpr=r(Sna,"led"),Sna.forEach(t),vpr=r($Je," \u2014 "),hZ=n($Je,"A",{href:!0});var Rna=s(hZ);Fpr=r(Rna,"LEDForConditionalGeneration"),Rna.forEach(t),Tpr=r($Je," (LED model)"),$Je.forEach(t),Mpr=i(_e),sM=n(_e,"LI",{});var kJe=s(sM);F3e=n(kJe,"STRONG",{});var Pna=s(F3e);Epr=r(Pna,"longt5"),Pna.forEach(t),Cpr=r(kJe," \u2014 "),uZ=n(kJe,"A",{href:!0});var Bna=s(uZ);wpr=r(Bna,"LongT5ForConditionalGeneration"),Bna.forEach(t),Apr=r(kJe," (LongT5 model)"),kJe.forEach(t),Lpr=i(_e),lM=n(_e,"LI",{});var SJe=s(lM);T3e=n(SJe,"STRONG",{});var Ina=s(T3e);ypr=r(Ina,"m2m_100"),Ina.forEach(t),xpr=r(SJe," \u2014 "),pZ=n(SJe,"A",{href:!0});var Nna=s(pZ);$pr=r(Nna,"M2M100ForConditionalGeneration"),Nna.forEach(t),kpr=r(SJe," (M2M100 model)"),SJe.forEach(t),Spr=i(_e),iM=n(_e,"LI",{});var RJe=s(iM);M3e=n(RJe,"STRONG",{});var qna=s(M3e);Rpr=r(qna,"marian"),qna.forEach(t),Ppr=r(RJe," \u2014 "),_Z=n(RJe,"A",{href:!0});var jna=s(_Z);Bpr=r(jna,"MarianMTModel"),jna.forEach(t),Ipr=r(RJe," (Marian model)"),RJe.forEach(t),Npr=i(_e),dM=n(_e,"LI",{});var PJe=s(dM);E3e=n(PJe,"STRONG",{});var Dna=s(E3e);qpr=r(Dna,"mbart"),Dna.forEach(t),jpr=r(PJe," \u2014 "),bZ=n(PJe,"A",{href:!0});var Gna=s(bZ);Dpr=r(Gna,"MBartForConditionalGeneration"),Gna.forEach(t),Gpr=r(PJe," (mBART model)"),PJe.forEach(t),Opr=i(_e),mM=n(_e,"LI",{});var BJe=s(mM);C3e=n(BJe,"STRONG",{});var Ona=s(C3e);Vpr=r(Ona,"mt5"),Ona.forEach(t),Xpr=r(BJe," \u2014 "),vZ=n(BJe,"A",{href:!0});var Vna=s(vZ);zpr=r(Vna,"MT5ForConditionalGeneration"),Vna.forEach(t),Qpr=r(BJe," (MT5 model)"),BJe.forEach(t),Wpr=i(_e),cM=n(_e,"LI",{});var IJe=s(cM);w3e=n(IJe,"STRONG",{});var Xna=s(w3e);Upr=r(Xna,"mvp"),Xna.forEach(t),Hpr=r(IJe," \u2014 "),FZ=n(IJe,"A",{href:!0});var zna=s(FZ);Jpr=r(zna,"MvpForConditionalGeneration"),zna.forEach(t),Ypr=r(IJe," (MVP model)"),IJe.forEach(t),Zpr=i(_e),fM=n(_e,"LI",{});var NJe=s(fM);A3e=n(NJe,"STRONG",{});var Qna=s(A3e);Kpr=r(Qna,"nllb"),Qna.forEach(t),e_r=r(NJe," \u2014 "),TZ=n(NJe,"A",{href:!0});var Wna=s(TZ);o_r=r(Wna,"M2M100ForConditionalGeneration"),Wna.forEach(t),r_r=r(NJe," (NLLB model)"),NJe.forEach(t),t_r=i(_e),gM=n(_e,"LI",{});var qJe=s(gM);L3e=n(qJe,"STRONG",{});var Una=s(L3e);a_r=r(Una,"pegasus"),Una.forEach(t),n_r=r(qJe," \u2014 "),MZ=n(qJe,"A",{href:!0});var Hna=s(MZ);s_r=r(Hna,"PegasusForConditionalGeneration"),Hna.forEach(t),l_r=r(qJe," (Pegasus model)"),qJe.forEach(t),i_r=i(_e),hM=n(_e,"LI",{});var jJe=s(hM);y3e=n(jJe,"STRONG",{});var Jna=s(y3e);d_r=r(Jna,"pegasus_x"),Jna.forEach(t),m_r=r(jJe," \u2014 "),EZ=n(jJe,"A",{href:!0});var Yna=s(EZ);c_r=r(Yna,"PegasusXForConditionalGeneration"),Yna.forEach(t),f_r=r(jJe," (PEGASUS-X model)"),jJe.forEach(t),g_r=i(_e),uM=n(_e,"LI",{});var DJe=s(uM);x3e=n(DJe,"STRONG",{});var Zna=s(x3e);h_r=r(Zna,"plbart"),Zna.forEach(t),u_r=r(DJe," \u2014 "),CZ=n(DJe,"A",{href:!0});var Kna=s(CZ);p_r=r(Kna,"PLBartForConditionalGeneration"),Kna.forEach(t),__r=r(DJe," (PLBart model)"),DJe.forEach(t),b_r=i(_e),pM=n(_e,"LI",{});var GJe=s(pM);$3e=n(GJe,"STRONG",{});var esa=s($3e);v_r=r(esa,"prophetnet"),esa.forEach(t),F_r=r(GJe," \u2014 "),wZ=n(GJe,"A",{href:!0});var osa=s(wZ);T_r=r(osa,"ProphetNetForConditionalGeneration"),osa.forEach(t),M_r=r(GJe," (ProphetNet model)"),GJe.forEach(t),E_r=i(_e),_M=n(_e,"LI",{});var OJe=s(_M);k3e=n(OJe,"STRONG",{});var rsa=s(k3e);C_r=r(rsa,"switch_transformers"),rsa.forEach(t),w_r=r(OJe," \u2014 "),AZ=n(OJe,"A",{href:!0});var tsa=s(AZ);A_r=r(tsa,"SwitchTransformersForConditionalGeneration"),tsa.forEach(t),L_r=r(OJe," (SwitchTransformers model)"),OJe.forEach(t),y_r=i(_e),bM=n(_e,"LI",{});var VJe=s(bM);S3e=n(VJe,"STRONG",{});var asa=s(S3e);x_r=r(asa,"t5"),asa.forEach(t),$_r=r(VJe," \u2014 "),LZ=n(VJe,"A",{href:!0});var nsa=s(LZ);k_r=r(nsa,"T5ForConditionalGeneration"),nsa.forEach(t),S_r=r(VJe," (T5 model)"),VJe.forEach(t),R_r=i(_e),vM=n(_e,"LI",{});var XJe=s(vM);R3e=n(XJe,"STRONG",{});var ssa=s(R3e);P_r=r(ssa,"xlm-prophetnet"),ssa.forEach(t),B_r=r(XJe," \u2014 "),yZ=n(XJe,"A",{href:!0});var lsa=s(yZ);I_r=r(lsa,"XLMProphetNetForConditionalGeneration"),lsa.forEach(t),N_r=r(XJe," (XLM-ProphetNet model)"),XJe.forEach(t),_e.forEach(t),q_r=i(Na),FM=n(Na,"P",{});var zJe=s(FM);j_r=r(zJe,"The model is set in evaluation mode by default using "),P3e=n(zJe,"CODE",{});var isa=s(P3e);D_r=r(isa,"model.eval()"),isa.forEach(t),G_r=r(zJe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B3e=n(zJe,"CODE",{});var dsa=s(B3e);O_r=r(dsa,"model.train()"),dsa.forEach(t),zJe.forEach(t),V_r=i(Na),T(TM.$$.fragment,Na),Na.forEach(t),Kl.forEach(t),Jio=i(c),sm=n(c,"H2",{class:!0});var vco=s(sm);MM=n(vco,"A",{id:!0,class:!0,href:!0});var msa=s(MM);I3e=n(msa,"SPAN",{});var csa=s(I3e);T(IS.$$.fragment,csa),csa.forEach(t),msa.forEach(t),X_r=i(vco),N3e=n(vco,"SPAN",{});var fsa=s(N3e);z_r=r(fsa,"AutoModelForSequenceClassification"),fsa.forEach(t),vco.forEach(t),Yio=i(c),Qo=n(c,"DIV",{class:!0});var ei=s(Qo);T(NS.$$.fragment,ei),Q_r=i(ei),lm=n(ei,"P",{});var Jfe=s(lm);W_r=r(Jfe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xZ=n(Jfe,"A",{href:!0});var gsa=s(xZ);U_r=r(gsa,"from_pretrained()"),gsa.forEach(t),H_r=r(Jfe," class method or the "),$Z=n(Jfe,"A",{href:!0});var hsa=s($Z);J_r=r(hsa,"from_config()"),hsa.forEach(t),Y_r=r(Jfe,` class
method.`),Jfe.forEach(t),Z_r=i(ei),qS=n(ei,"P",{});var Fco=s(qS);K_r=r(Fco,"This class cannot be instantiated directly using "),q3e=n(Fco,"CODE",{});var usa=s(q3e);e1r=r(usa,"__init__()"),usa.forEach(t),o1r=r(Fco," (throws an error)."),Fco.forEach(t),r1r=i(ei),St=n(ei,"DIV",{class:!0});var $x=s(St);T(jS.$$.fragment,$x),t1r=i($x),j3e=n($x,"P",{});var psa=s(j3e);a1r=r(psa,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),psa.forEach(t),n1r=i($x),im=n($x,"P",{});var Yfe=s(im);s1r=r(Yfe,`Note:
Loading a model from its configuration file does `),D3e=n(Yfe,"STRONG",{});var _sa=s(D3e);l1r=r(_sa,"not"),_sa.forEach(t),i1r=r(Yfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=n(Yfe,"A",{href:!0});var bsa=s(kZ);d1r=r(bsa,"from_pretrained()"),bsa.forEach(t),m1r=r(Yfe," to load the model weights."),Yfe.forEach(t),c1r=i($x),T(EM.$$.fragment,$x),$x.forEach(t),f1r=i(ei),mo=n(ei,"DIV",{class:!0});var qa=s(mo);T(DS.$$.fragment,qa),g1r=i(qa),G3e=n(qa,"P",{});var vsa=s(G3e);h1r=r(vsa,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vsa.forEach(t),u1r=i(qa),vn=n(qa,"P",{});var kx=s(vn);p1r=r(kx,"The model class to instantiate is selected based on the "),O3e=n(kx,"CODE",{});var Fsa=s(O3e);_1r=r(Fsa,"model_type"),Fsa.forEach(t),b1r=r(kx,` property of the config object (either
passed as an argument or loaded from `),V3e=n(kx,"CODE",{});var Tsa=s(V3e);v1r=r(Tsa,"pretrained_model_name_or_path"),Tsa.forEach(t),F1r=r(kx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=n(kx,"CODE",{});var Msa=s(X3e);T1r=r(Msa,"pretrained_model_name_or_path"),Msa.forEach(t),M1r=r(kx,":"),kx.forEach(t),E1r=i(qa),I=n(qa,"UL",{});var D=s(I);CM=n(D,"LI",{});var QJe=s(CM);z3e=n(QJe,"STRONG",{});var Esa=s(z3e);C1r=r(Esa,"albert"),Esa.forEach(t),w1r=r(QJe," \u2014 "),SZ=n(QJe,"A",{href:!0});var Csa=s(SZ);A1r=r(Csa,"AlbertForSequenceClassification"),Csa.forEach(t),L1r=r(QJe," (ALBERT model)"),QJe.forEach(t),y1r=i(D),wM=n(D,"LI",{});var WJe=s(wM);Q3e=n(WJe,"STRONG",{});var wsa=s(Q3e);x1r=r(wsa,"bart"),wsa.forEach(t),$1r=r(WJe," \u2014 "),RZ=n(WJe,"A",{href:!0});var Asa=s(RZ);k1r=r(Asa,"BartForSequenceClassification"),Asa.forEach(t),S1r=r(WJe," (BART model)"),WJe.forEach(t),R1r=i(D),AM=n(D,"LI",{});var UJe=s(AM);W3e=n(UJe,"STRONG",{});var Lsa=s(W3e);P1r=r(Lsa,"bert"),Lsa.forEach(t),B1r=r(UJe," \u2014 "),PZ=n(UJe,"A",{href:!0});var ysa=s(PZ);I1r=r(ysa,"BertForSequenceClassification"),ysa.forEach(t),N1r=r(UJe," (BERT model)"),UJe.forEach(t),q1r=i(D),LM=n(D,"LI",{});var HJe=s(LM);U3e=n(HJe,"STRONG",{});var xsa=s(U3e);j1r=r(xsa,"big_bird"),xsa.forEach(t),D1r=r(HJe," \u2014 "),BZ=n(HJe,"A",{href:!0});var $sa=s(BZ);G1r=r($sa,"BigBirdForSequenceClassification"),$sa.forEach(t),O1r=r(HJe," (BigBird model)"),HJe.forEach(t),V1r=i(D),yM=n(D,"LI",{});var JJe=s(yM);H3e=n(JJe,"STRONG",{});var ksa=s(H3e);X1r=r(ksa,"bigbird_pegasus"),ksa.forEach(t),z1r=r(JJe," \u2014 "),IZ=n(JJe,"A",{href:!0});var Ssa=s(IZ);Q1r=r(Ssa,"BigBirdPegasusForSequenceClassification"),Ssa.forEach(t),W1r=r(JJe," (BigBird-Pegasus model)"),JJe.forEach(t),U1r=i(D),xM=n(D,"LI",{});var YJe=s(xM);J3e=n(YJe,"STRONG",{});var Rsa=s(J3e);H1r=r(Rsa,"bloom"),Rsa.forEach(t),J1r=r(YJe," \u2014 "),NZ=n(YJe,"A",{href:!0});var Psa=s(NZ);Y1r=r(Psa,"BloomForSequenceClassification"),Psa.forEach(t),Z1r=r(YJe," (BLOOM model)"),YJe.forEach(t),K1r=i(D),$M=n(D,"LI",{});var ZJe=s($M);Y3e=n(ZJe,"STRONG",{});var Bsa=s(Y3e);e2r=r(Bsa,"camembert"),Bsa.forEach(t),o2r=r(ZJe," \u2014 "),qZ=n(ZJe,"A",{href:!0});var Isa=s(qZ);r2r=r(Isa,"CamembertForSequenceClassification"),Isa.forEach(t),t2r=r(ZJe," (CamemBERT model)"),ZJe.forEach(t),a2r=i(D),kM=n(D,"LI",{});var KJe=s(kM);Z3e=n(KJe,"STRONG",{});var Nsa=s(Z3e);n2r=r(Nsa,"canine"),Nsa.forEach(t),s2r=r(KJe," \u2014 "),jZ=n(KJe,"A",{href:!0});var qsa=s(jZ);l2r=r(qsa,"CanineForSequenceClassification"),qsa.forEach(t),i2r=r(KJe," (CANINE model)"),KJe.forEach(t),d2r=i(D),SM=n(D,"LI",{});var eYe=s(SM);K3e=n(eYe,"STRONG",{});var jsa=s(K3e);m2r=r(jsa,"convbert"),jsa.forEach(t),c2r=r(eYe," \u2014 "),DZ=n(eYe,"A",{href:!0});var Dsa=s(DZ);f2r=r(Dsa,"ConvBertForSequenceClassification"),Dsa.forEach(t),g2r=r(eYe," (ConvBERT model)"),eYe.forEach(t),h2r=i(D),RM=n(D,"LI",{});var oYe=s(RM);e5e=n(oYe,"STRONG",{});var Gsa=s(e5e);u2r=r(Gsa,"ctrl"),Gsa.forEach(t),p2r=r(oYe," \u2014 "),GZ=n(oYe,"A",{href:!0});var Osa=s(GZ);_2r=r(Osa,"CTRLForSequenceClassification"),Osa.forEach(t),b2r=r(oYe," (CTRL model)"),oYe.forEach(t),v2r=i(D),PM=n(D,"LI",{});var rYe=s(PM);o5e=n(rYe,"STRONG",{});var Vsa=s(o5e);F2r=r(Vsa,"data2vec-text"),Vsa.forEach(t),T2r=r(rYe," \u2014 "),OZ=n(rYe,"A",{href:!0});var Xsa=s(OZ);M2r=r(Xsa,"Data2VecTextForSequenceClassification"),Xsa.forEach(t),E2r=r(rYe," (Data2VecText model)"),rYe.forEach(t),C2r=i(D),BM=n(D,"LI",{});var tYe=s(BM);r5e=n(tYe,"STRONG",{});var zsa=s(r5e);w2r=r(zsa,"deberta"),zsa.forEach(t),A2r=r(tYe," \u2014 "),VZ=n(tYe,"A",{href:!0});var Qsa=s(VZ);L2r=r(Qsa,"DebertaForSequenceClassification"),Qsa.forEach(t),y2r=r(tYe," (DeBERTa model)"),tYe.forEach(t),x2r=i(D),IM=n(D,"LI",{});var aYe=s(IM);t5e=n(aYe,"STRONG",{});var Wsa=s(t5e);$2r=r(Wsa,"deberta-v2"),Wsa.forEach(t),k2r=r(aYe," \u2014 "),XZ=n(aYe,"A",{href:!0});var Usa=s(XZ);S2r=r(Usa,"DebertaV2ForSequenceClassification"),Usa.forEach(t),R2r=r(aYe," (DeBERTa-v2 model)"),aYe.forEach(t),P2r=i(D),NM=n(D,"LI",{});var nYe=s(NM);a5e=n(nYe,"STRONG",{});var Hsa=s(a5e);B2r=r(Hsa,"distilbert"),Hsa.forEach(t),I2r=r(nYe," \u2014 "),zZ=n(nYe,"A",{href:!0});var Jsa=s(zZ);N2r=r(Jsa,"DistilBertForSequenceClassification"),Jsa.forEach(t),q2r=r(nYe," (DistilBERT model)"),nYe.forEach(t),j2r=i(D),qM=n(D,"LI",{});var sYe=s(qM);n5e=n(sYe,"STRONG",{});var Ysa=s(n5e);D2r=r(Ysa,"electra"),Ysa.forEach(t),G2r=r(sYe," \u2014 "),QZ=n(sYe,"A",{href:!0});var Zsa=s(QZ);O2r=r(Zsa,"ElectraForSequenceClassification"),Zsa.forEach(t),V2r=r(sYe," (ELECTRA model)"),sYe.forEach(t),X2r=i(D),jM=n(D,"LI",{});var lYe=s(jM);s5e=n(lYe,"STRONG",{});var Ksa=s(s5e);z2r=r(Ksa,"ernie"),Ksa.forEach(t),Q2r=r(lYe," \u2014 "),WZ=n(lYe,"A",{href:!0});var ela=s(WZ);W2r=r(ela,"ErnieForSequenceClassification"),ela.forEach(t),U2r=r(lYe," (ERNIE model)"),lYe.forEach(t),H2r=i(D),DM=n(D,"LI",{});var iYe=s(DM);l5e=n(iYe,"STRONG",{});var ola=s(l5e);J2r=r(ola,"esm"),ola.forEach(t),Y2r=r(iYe," \u2014 "),UZ=n(iYe,"A",{href:!0});var rla=s(UZ);Z2r=r(rla,"EsmForSequenceClassification"),rla.forEach(t),K2r=r(iYe," (ESM model)"),iYe.forEach(t),ebr=i(D),GM=n(D,"LI",{});var dYe=s(GM);i5e=n(dYe,"STRONG",{});var tla=s(i5e);obr=r(tla,"flaubert"),tla.forEach(t),rbr=r(dYe," \u2014 "),HZ=n(dYe,"A",{href:!0});var ala=s(HZ);tbr=r(ala,"FlaubertForSequenceClassification"),ala.forEach(t),abr=r(dYe," (FlauBERT model)"),dYe.forEach(t),nbr=i(D),OM=n(D,"LI",{});var mYe=s(OM);d5e=n(mYe,"STRONG",{});var nla=s(d5e);sbr=r(nla,"fnet"),nla.forEach(t),lbr=r(mYe," \u2014 "),JZ=n(mYe,"A",{href:!0});var sla=s(JZ);ibr=r(sla,"FNetForSequenceClassification"),sla.forEach(t),dbr=r(mYe," (FNet model)"),mYe.forEach(t),mbr=i(D),VM=n(D,"LI",{});var cYe=s(VM);m5e=n(cYe,"STRONG",{});var lla=s(m5e);cbr=r(lla,"funnel"),lla.forEach(t),fbr=r(cYe," \u2014 "),YZ=n(cYe,"A",{href:!0});var ila=s(YZ);gbr=r(ila,"FunnelForSequenceClassification"),ila.forEach(t),hbr=r(cYe," (Funnel Transformer model)"),cYe.forEach(t),ubr=i(D),XM=n(D,"LI",{});var fYe=s(XM);c5e=n(fYe,"STRONG",{});var dla=s(c5e);pbr=r(dla,"gpt2"),dla.forEach(t),_br=r(fYe," \u2014 "),ZZ=n(fYe,"A",{href:!0});var mla=s(ZZ);bbr=r(mla,"GPT2ForSequenceClassification"),mla.forEach(t),vbr=r(fYe," (OpenAI GPT-2 model)"),fYe.forEach(t),Fbr=i(D),zM=n(D,"LI",{});var gYe=s(zM);f5e=n(gYe,"STRONG",{});var cla=s(f5e);Tbr=r(cla,"gpt_neo"),cla.forEach(t),Mbr=r(gYe," \u2014 "),KZ=n(gYe,"A",{href:!0});var fla=s(KZ);Ebr=r(fla,"GPTNeoForSequenceClassification"),fla.forEach(t),Cbr=r(gYe," (GPT Neo model)"),gYe.forEach(t),wbr=i(D),QM=n(D,"LI",{});var hYe=s(QM);g5e=n(hYe,"STRONG",{});var gla=s(g5e);Abr=r(gla,"gptj"),gla.forEach(t),Lbr=r(hYe," \u2014 "),eK=n(hYe,"A",{href:!0});var hla=s(eK);ybr=r(hla,"GPTJForSequenceClassification"),hla.forEach(t),xbr=r(hYe," (GPT-J model)"),hYe.forEach(t),$br=i(D),WM=n(D,"LI",{});var uYe=s(WM);h5e=n(uYe,"STRONG",{});var ula=s(h5e);kbr=r(ula,"ibert"),ula.forEach(t),Sbr=r(uYe," \u2014 "),oK=n(uYe,"A",{href:!0});var pla=s(oK);Rbr=r(pla,"IBertForSequenceClassification"),pla.forEach(t),Pbr=r(uYe," (I-BERT model)"),uYe.forEach(t),Bbr=i(D),UM=n(D,"LI",{});var pYe=s(UM);u5e=n(pYe,"STRONG",{});var _la=s(u5e);Ibr=r(_la,"layoutlm"),_la.forEach(t),Nbr=r(pYe," \u2014 "),rK=n(pYe,"A",{href:!0});var bla=s(rK);qbr=r(bla,"LayoutLMForSequenceClassification"),bla.forEach(t),jbr=r(pYe," (LayoutLM model)"),pYe.forEach(t),Dbr=i(D),HM=n(D,"LI",{});var _Ye=s(HM);p5e=n(_Ye,"STRONG",{});var vla=s(p5e);Gbr=r(vla,"layoutlmv2"),vla.forEach(t),Obr=r(_Ye," \u2014 "),tK=n(_Ye,"A",{href:!0});var Fla=s(tK);Vbr=r(Fla,"LayoutLMv2ForSequenceClassification"),Fla.forEach(t),Xbr=r(_Ye," (LayoutLMv2 model)"),_Ye.forEach(t),zbr=i(D),JM=n(D,"LI",{});var bYe=s(JM);_5e=n(bYe,"STRONG",{});var Tla=s(_5e);Qbr=r(Tla,"layoutlmv3"),Tla.forEach(t),Wbr=r(bYe," \u2014 "),aK=n(bYe,"A",{href:!0});var Mla=s(aK);Ubr=r(Mla,"LayoutLMv3ForSequenceClassification"),Mla.forEach(t),Hbr=r(bYe," (LayoutLMv3 model)"),bYe.forEach(t),Jbr=i(D),YM=n(D,"LI",{});var vYe=s(YM);b5e=n(vYe,"STRONG",{});var Ela=s(b5e);Ybr=r(Ela,"led"),Ela.forEach(t),Zbr=r(vYe," \u2014 "),nK=n(vYe,"A",{href:!0});var Cla=s(nK);Kbr=r(Cla,"LEDForSequenceClassification"),Cla.forEach(t),evr=r(vYe," (LED model)"),vYe.forEach(t),ovr=i(D),ZM=n(D,"LI",{});var FYe=s(ZM);v5e=n(FYe,"STRONG",{});var wla=s(v5e);rvr=r(wla,"lilt"),wla.forEach(t),tvr=r(FYe," \u2014 "),sK=n(FYe,"A",{href:!0});var Ala=s(sK);avr=r(Ala,"LiltForSequenceClassification"),Ala.forEach(t),nvr=r(FYe," (LiLT model)"),FYe.forEach(t),svr=i(D),KM=n(D,"LI",{});var TYe=s(KM);F5e=n(TYe,"STRONG",{});var Lla=s(F5e);lvr=r(Lla,"longformer"),Lla.forEach(t),ivr=r(TYe," \u2014 "),lK=n(TYe,"A",{href:!0});var yla=s(lK);dvr=r(yla,"LongformerForSequenceClassification"),yla.forEach(t),mvr=r(TYe," (Longformer model)"),TYe.forEach(t),cvr=i(D),eE=n(D,"LI",{});var MYe=s(eE);T5e=n(MYe,"STRONG",{});var xla=s(T5e);fvr=r(xla,"luke"),xla.forEach(t),gvr=r(MYe," \u2014 "),iK=n(MYe,"A",{href:!0});var $la=s(iK);hvr=r($la,"LukeForSequenceClassification"),$la.forEach(t),uvr=r(MYe," (LUKE model)"),MYe.forEach(t),pvr=i(D),oE=n(D,"LI",{});var EYe=s(oE);M5e=n(EYe,"STRONG",{});var kla=s(M5e);_vr=r(kla,"markuplm"),kla.forEach(t),bvr=r(EYe," \u2014 "),dK=n(EYe,"A",{href:!0});var Sla=s(dK);vvr=r(Sla,"MarkupLMForSequenceClassification"),Sla.forEach(t),Fvr=r(EYe," (MarkupLM model)"),EYe.forEach(t),Tvr=i(D),rE=n(D,"LI",{});var CYe=s(rE);E5e=n(CYe,"STRONG",{});var Rla=s(E5e);Mvr=r(Rla,"mbart"),Rla.forEach(t),Evr=r(CYe," \u2014 "),mK=n(CYe,"A",{href:!0});var Pla=s(mK);Cvr=r(Pla,"MBartForSequenceClassification"),Pla.forEach(t),wvr=r(CYe," (mBART model)"),CYe.forEach(t),Avr=i(D),tE=n(D,"LI",{});var wYe=s(tE);C5e=n(wYe,"STRONG",{});var Bla=s(C5e);Lvr=r(Bla,"megatron-bert"),Bla.forEach(t),yvr=r(wYe," \u2014 "),cK=n(wYe,"A",{href:!0});var Ila=s(cK);xvr=r(Ila,"MegatronBertForSequenceClassification"),Ila.forEach(t),$vr=r(wYe," (Megatron-BERT model)"),wYe.forEach(t),kvr=i(D),aE=n(D,"LI",{});var AYe=s(aE);w5e=n(AYe,"STRONG",{});var Nla=s(w5e);Svr=r(Nla,"mobilebert"),Nla.forEach(t),Rvr=r(AYe," \u2014 "),fK=n(AYe,"A",{href:!0});var qla=s(fK);Pvr=r(qla,"MobileBertForSequenceClassification"),qla.forEach(t),Bvr=r(AYe," (MobileBERT model)"),AYe.forEach(t),Ivr=i(D),nE=n(D,"LI",{});var LYe=s(nE);A5e=n(LYe,"STRONG",{});var jla=s(A5e);Nvr=r(jla,"mpnet"),jla.forEach(t),qvr=r(LYe," \u2014 "),gK=n(LYe,"A",{href:!0});var Dla=s(gK);jvr=r(Dla,"MPNetForSequenceClassification"),Dla.forEach(t),Dvr=r(LYe," (MPNet model)"),LYe.forEach(t),Gvr=i(D),sE=n(D,"LI",{});var yYe=s(sE);L5e=n(yYe,"STRONG",{});var Gla=s(L5e);Ovr=r(Gla,"mvp"),Gla.forEach(t),Vvr=r(yYe," \u2014 "),hK=n(yYe,"A",{href:!0});var Ola=s(hK);Xvr=r(Ola,"MvpForSequenceClassification"),Ola.forEach(t),zvr=r(yYe," (MVP model)"),yYe.forEach(t),Qvr=i(D),lE=n(D,"LI",{});var xYe=s(lE);y5e=n(xYe,"STRONG",{});var Vla=s(y5e);Wvr=r(Vla,"nezha"),Vla.forEach(t),Uvr=r(xYe," \u2014 "),uK=n(xYe,"A",{href:!0});var Xla=s(uK);Hvr=r(Xla,"NezhaForSequenceClassification"),Xla.forEach(t),Jvr=r(xYe," (Nezha model)"),xYe.forEach(t),Yvr=i(D),iE=n(D,"LI",{});var $Ye=s(iE);x5e=n($Ye,"STRONG",{});var zla=s(x5e);Zvr=r(zla,"nystromformer"),zla.forEach(t),Kvr=r($Ye," \u2014 "),pK=n($Ye,"A",{href:!0});var Qla=s(pK);eFr=r(Qla,"NystromformerForSequenceClassification"),Qla.forEach(t),oFr=r($Ye," (Nystr\xF6mformer model)"),$Ye.forEach(t),rFr=i(D),dE=n(D,"LI",{});var kYe=s(dE);$5e=n(kYe,"STRONG",{});var Wla=s($5e);tFr=r(Wla,"openai-gpt"),Wla.forEach(t),aFr=r(kYe," \u2014 "),_K=n(kYe,"A",{href:!0});var Ula=s(_K);nFr=r(Ula,"OpenAIGPTForSequenceClassification"),Ula.forEach(t),sFr=r(kYe," (OpenAI GPT model)"),kYe.forEach(t),lFr=i(D),mE=n(D,"LI",{});var SYe=s(mE);k5e=n(SYe,"STRONG",{});var Hla=s(k5e);iFr=r(Hla,"opt"),Hla.forEach(t),dFr=r(SYe," \u2014 "),bK=n(SYe,"A",{href:!0});var Jla=s(bK);mFr=r(Jla,"OPTForSequenceClassification"),Jla.forEach(t),cFr=r(SYe," (OPT model)"),SYe.forEach(t),fFr=i(D),cE=n(D,"LI",{});var RYe=s(cE);S5e=n(RYe,"STRONG",{});var Yla=s(S5e);gFr=r(Yla,"perceiver"),Yla.forEach(t),hFr=r(RYe," \u2014 "),vK=n(RYe,"A",{href:!0});var Zla=s(vK);uFr=r(Zla,"PerceiverForSequenceClassification"),Zla.forEach(t),pFr=r(RYe," (Perceiver model)"),RYe.forEach(t),_Fr=i(D),fE=n(D,"LI",{});var PYe=s(fE);R5e=n(PYe,"STRONG",{});var Kla=s(R5e);bFr=r(Kla,"plbart"),Kla.forEach(t),vFr=r(PYe," \u2014 "),FK=n(PYe,"A",{href:!0});var eia=s(FK);FFr=r(eia,"PLBartForSequenceClassification"),eia.forEach(t),TFr=r(PYe," (PLBart model)"),PYe.forEach(t),MFr=i(D),gE=n(D,"LI",{});var BYe=s(gE);P5e=n(BYe,"STRONG",{});var oia=s(P5e);EFr=r(oia,"qdqbert"),oia.forEach(t),CFr=r(BYe," \u2014 "),TK=n(BYe,"A",{href:!0});var ria=s(TK);wFr=r(ria,"QDQBertForSequenceClassification"),ria.forEach(t),AFr=r(BYe," (QDQBert model)"),BYe.forEach(t),LFr=i(D),hE=n(D,"LI",{});var IYe=s(hE);B5e=n(IYe,"STRONG",{});var tia=s(B5e);yFr=r(tia,"reformer"),tia.forEach(t),xFr=r(IYe," \u2014 "),MK=n(IYe,"A",{href:!0});var aia=s(MK);$Fr=r(aia,"ReformerForSequenceClassification"),aia.forEach(t),kFr=r(IYe," (Reformer model)"),IYe.forEach(t),SFr=i(D),uE=n(D,"LI",{});var NYe=s(uE);I5e=n(NYe,"STRONG",{});var nia=s(I5e);RFr=r(nia,"rembert"),nia.forEach(t),PFr=r(NYe," \u2014 "),EK=n(NYe,"A",{href:!0});var sia=s(EK);BFr=r(sia,"RemBertForSequenceClassification"),sia.forEach(t),IFr=r(NYe," (RemBERT model)"),NYe.forEach(t),NFr=i(D),pE=n(D,"LI",{});var qYe=s(pE);N5e=n(qYe,"STRONG",{});var lia=s(N5e);qFr=r(lia,"roberta"),lia.forEach(t),jFr=r(qYe," \u2014 "),CK=n(qYe,"A",{href:!0});var iia=s(CK);DFr=r(iia,"RobertaForSequenceClassification"),iia.forEach(t),GFr=r(qYe," (RoBERTa model)"),qYe.forEach(t),OFr=i(D),_E=n(D,"LI",{});var jYe=s(_E);q5e=n(jYe,"STRONG",{});var dia=s(q5e);VFr=r(dia,"roc_bert"),dia.forEach(t),XFr=r(jYe," \u2014 "),wK=n(jYe,"A",{href:!0});var mia=s(wK);zFr=r(mia,"RoCBertForSequenceClassification"),mia.forEach(t),QFr=r(jYe," (RoCBert model)"),jYe.forEach(t),WFr=i(D),bE=n(D,"LI",{});var DYe=s(bE);j5e=n(DYe,"STRONG",{});var cia=s(j5e);UFr=r(cia,"roformer"),cia.forEach(t),HFr=r(DYe," \u2014 "),AK=n(DYe,"A",{href:!0});var fia=s(AK);JFr=r(fia,"RoFormerForSequenceClassification"),fia.forEach(t),YFr=r(DYe," (RoFormer model)"),DYe.forEach(t),ZFr=i(D),vE=n(D,"LI",{});var GYe=s(vE);D5e=n(GYe,"STRONG",{});var gia=s(D5e);KFr=r(gia,"squeezebert"),gia.forEach(t),eTr=r(GYe," \u2014 "),LK=n(GYe,"A",{href:!0});var hia=s(LK);oTr=r(hia,"SqueezeBertForSequenceClassification"),hia.forEach(t),rTr=r(GYe," (SqueezeBERT model)"),GYe.forEach(t),tTr=i(D),FE=n(D,"LI",{});var OYe=s(FE);G5e=n(OYe,"STRONG",{});var uia=s(G5e);aTr=r(uia,"tapas"),uia.forEach(t),nTr=r(OYe," \u2014 "),yK=n(OYe,"A",{href:!0});var pia=s(yK);sTr=r(pia,"TapasForSequenceClassification"),pia.forEach(t),lTr=r(OYe," (TAPAS model)"),OYe.forEach(t),iTr=i(D),TE=n(D,"LI",{});var VYe=s(TE);O5e=n(VYe,"STRONG",{});var _ia=s(O5e);dTr=r(_ia,"transfo-xl"),_ia.forEach(t),mTr=r(VYe," \u2014 "),xK=n(VYe,"A",{href:!0});var bia=s(xK);cTr=r(bia,"TransfoXLForSequenceClassification"),bia.forEach(t),fTr=r(VYe," (Transformer-XL model)"),VYe.forEach(t),gTr=i(D),ME=n(D,"LI",{});var XYe=s(ME);V5e=n(XYe,"STRONG",{});var via=s(V5e);hTr=r(via,"xlm"),via.forEach(t),uTr=r(XYe," \u2014 "),$K=n(XYe,"A",{href:!0});var Fia=s($K);pTr=r(Fia,"XLMForSequenceClassification"),Fia.forEach(t),_Tr=r(XYe," (XLM model)"),XYe.forEach(t),bTr=i(D),EE=n(D,"LI",{});var zYe=s(EE);X5e=n(zYe,"STRONG",{});var Tia=s(X5e);vTr=r(Tia,"xlm-roberta"),Tia.forEach(t),FTr=r(zYe," \u2014 "),kK=n(zYe,"A",{href:!0});var Mia=s(kK);TTr=r(Mia,"XLMRobertaForSequenceClassification"),Mia.forEach(t),MTr=r(zYe," (XLM-RoBERTa model)"),zYe.forEach(t),ETr=i(D),CE=n(D,"LI",{});var QYe=s(CE);z5e=n(QYe,"STRONG",{});var Eia=s(z5e);CTr=r(Eia,"xlm-roberta-xl"),Eia.forEach(t),wTr=r(QYe," \u2014 "),SK=n(QYe,"A",{href:!0});var Cia=s(SK);ATr=r(Cia,"XLMRobertaXLForSequenceClassification"),Cia.forEach(t),LTr=r(QYe," (XLM-RoBERTa-XL model)"),QYe.forEach(t),yTr=i(D),wE=n(D,"LI",{});var WYe=s(wE);Q5e=n(WYe,"STRONG",{});var wia=s(Q5e);xTr=r(wia,"xlnet"),wia.forEach(t),$Tr=r(WYe," \u2014 "),RK=n(WYe,"A",{href:!0});var Aia=s(RK);kTr=r(Aia,"XLNetForSequenceClassification"),Aia.forEach(t),STr=r(WYe," (XLNet model)"),WYe.forEach(t),RTr=i(D),AE=n(D,"LI",{});var UYe=s(AE);W5e=n(UYe,"STRONG",{});var Lia=s(W5e);PTr=r(Lia,"yoso"),Lia.forEach(t),BTr=r(UYe," \u2014 "),PK=n(UYe,"A",{href:!0});var yia=s(PK);ITr=r(yia,"YosoForSequenceClassification"),yia.forEach(t),NTr=r(UYe," (YOSO model)"),UYe.forEach(t),D.forEach(t),qTr=i(qa),LE=n(qa,"P",{});var HYe=s(LE);jTr=r(HYe,"The model is set in evaluation mode by default using "),U5e=n(HYe,"CODE",{});var xia=s(U5e);DTr=r(xia,"model.eval()"),xia.forEach(t),GTr=r(HYe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H5e=n(HYe,"CODE",{});var $ia=s(H5e);OTr=r($ia,"model.train()"),$ia.forEach(t),HYe.forEach(t),VTr=i(qa),T(yE.$$.fragment,qa),qa.forEach(t),ei.forEach(t),Zio=i(c),dm=n(c,"H2",{class:!0});var Tco=s(dm);xE=n(Tco,"A",{id:!0,class:!0,href:!0});var kia=s(xE);J5e=n(kia,"SPAN",{});var Sia=s(J5e);T(GS.$$.fragment,Sia),Sia.forEach(t),kia.forEach(t),XTr=i(Tco),Y5e=n(Tco,"SPAN",{});var Ria=s(Y5e);zTr=r(Ria,"AutoModelForMultipleChoice"),Ria.forEach(t),Tco.forEach(t),Kio=i(c),Wo=n(c,"DIV",{class:!0});var oi=s(Wo);T(OS.$$.fragment,oi),QTr=i(oi),mm=n(oi,"P",{});var Zfe=s(mm);WTr=r(Zfe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BK=n(Zfe,"A",{href:!0});var Pia=s(BK);UTr=r(Pia,"from_pretrained()"),Pia.forEach(t),HTr=r(Zfe," class method or the "),IK=n(Zfe,"A",{href:!0});var Bia=s(IK);JTr=r(Bia,"from_config()"),Bia.forEach(t),YTr=r(Zfe,` class
method.`),Zfe.forEach(t),ZTr=i(oi),VS=n(oi,"P",{});var Mco=s(VS);KTr=r(Mco,"This class cannot be instantiated directly using "),Z5e=n(Mco,"CODE",{});var Iia=s(Z5e);eMr=r(Iia,"__init__()"),Iia.forEach(t),oMr=r(Mco," (throws an error)."),Mco.forEach(t),rMr=i(oi),Rt=n(oi,"DIV",{class:!0});var Sx=s(Rt);T(XS.$$.fragment,Sx),tMr=i(Sx),K5e=n(Sx,"P",{});var Nia=s(K5e);aMr=r(Nia,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Nia.forEach(t),nMr=i(Sx),cm=n(Sx,"P",{});var Kfe=s(cm);sMr=r(Kfe,`Note:
Loading a model from its configuration file does `),e0e=n(Kfe,"STRONG",{});var qia=s(e0e);lMr=r(qia,"not"),qia.forEach(t),iMr=r(Kfe,` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=n(Kfe,"A",{href:!0});var jia=s(NK);dMr=r(jia,"from_pretrained()"),jia.forEach(t),mMr=r(Kfe," to load the model weights."),Kfe.forEach(t),cMr=i(Sx),T($E.$$.fragment,Sx),Sx.forEach(t),fMr=i(oi),co=n(oi,"DIV",{class:!0});var ja=s(co);T(zS.$$.fragment,ja),gMr=i(ja),o0e=n(ja,"P",{});var Dia=s(o0e);hMr=r(Dia,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Dia.forEach(t),uMr=i(ja),Fn=n(ja,"P",{});var Rx=s(Fn);pMr=r(Rx,"The model class to instantiate is selected based on the "),r0e=n(Rx,"CODE",{});var Gia=s(r0e);_Mr=r(Gia,"model_type"),Gia.forEach(t),bMr=r(Rx,` property of the config object (either
passed as an argument or loaded from `),t0e=n(Rx,"CODE",{});var Oia=s(t0e);vMr=r(Oia,"pretrained_model_name_or_path"),Oia.forEach(t),FMr=r(Rx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a0e=n(Rx,"CODE",{});var Via=s(a0e);TMr=r(Via,"pretrained_model_name_or_path"),Via.forEach(t),MMr=r(Rx,":"),Rx.forEach(t),EMr=i(ja),K=n(ja,"UL",{});var ee=s(K);kE=n(ee,"LI",{});var JYe=s(kE);n0e=n(JYe,"STRONG",{});var Xia=s(n0e);CMr=r(Xia,"albert"),Xia.forEach(t),wMr=r(JYe," \u2014 "),qK=n(JYe,"A",{href:!0});var zia=s(qK);AMr=r(zia,"AlbertForMultipleChoice"),zia.forEach(t),LMr=r(JYe," (ALBERT model)"),JYe.forEach(t),yMr=i(ee),SE=n(ee,"LI",{});var YYe=s(SE);s0e=n(YYe,"STRONG",{});var Qia=s(s0e);xMr=r(Qia,"bert"),Qia.forEach(t),$Mr=r(YYe," \u2014 "),jK=n(YYe,"A",{href:!0});var Wia=s(jK);kMr=r(Wia,"BertForMultipleChoice"),Wia.forEach(t),SMr=r(YYe," (BERT model)"),YYe.forEach(t),RMr=i(ee),RE=n(ee,"LI",{});var ZYe=s(RE);l0e=n(ZYe,"STRONG",{});var Uia=s(l0e);PMr=r(Uia,"big_bird"),Uia.forEach(t),BMr=r(ZYe," \u2014 "),DK=n(ZYe,"A",{href:!0});var Hia=s(DK);IMr=r(Hia,"BigBirdForMultipleChoice"),Hia.forEach(t),NMr=r(ZYe," (BigBird model)"),ZYe.forEach(t),qMr=i(ee),PE=n(ee,"LI",{});var KYe=s(PE);i0e=n(KYe,"STRONG",{});var Jia=s(i0e);jMr=r(Jia,"camembert"),Jia.forEach(t),DMr=r(KYe," \u2014 "),GK=n(KYe,"A",{href:!0});var Yia=s(GK);GMr=r(Yia,"CamembertForMultipleChoice"),Yia.forEach(t),OMr=r(KYe," (CamemBERT model)"),KYe.forEach(t),VMr=i(ee),BE=n(ee,"LI",{});var eZe=s(BE);d0e=n(eZe,"STRONG",{});var Zia=s(d0e);XMr=r(Zia,"canine"),Zia.forEach(t),zMr=r(eZe," \u2014 "),OK=n(eZe,"A",{href:!0});var Kia=s(OK);QMr=r(Kia,"CanineForMultipleChoice"),Kia.forEach(t),WMr=r(eZe," (CANINE model)"),eZe.forEach(t),UMr=i(ee),IE=n(ee,"LI",{});var oZe=s(IE);m0e=n(oZe,"STRONG",{});var eda=s(m0e);HMr=r(eda,"convbert"),eda.forEach(t),JMr=r(oZe," \u2014 "),VK=n(oZe,"A",{href:!0});var oda=s(VK);YMr=r(oda,"ConvBertForMultipleChoice"),oda.forEach(t),ZMr=r(oZe," (ConvBERT model)"),oZe.forEach(t),KMr=i(ee),NE=n(ee,"LI",{});var rZe=s(NE);c0e=n(rZe,"STRONG",{});var rda=s(c0e);eEr=r(rda,"data2vec-text"),rda.forEach(t),oEr=r(rZe," \u2014 "),XK=n(rZe,"A",{href:!0});var tda=s(XK);rEr=r(tda,"Data2VecTextForMultipleChoice"),tda.forEach(t),tEr=r(rZe," (Data2VecText model)"),rZe.forEach(t),aEr=i(ee),qE=n(ee,"LI",{});var tZe=s(qE);f0e=n(tZe,"STRONG",{});var ada=s(f0e);nEr=r(ada,"deberta-v2"),ada.forEach(t),sEr=r(tZe," \u2014 "),zK=n(tZe,"A",{href:!0});var nda=s(zK);lEr=r(nda,"DebertaV2ForMultipleChoice"),nda.forEach(t),iEr=r(tZe," (DeBERTa-v2 model)"),tZe.forEach(t),dEr=i(ee),jE=n(ee,"LI",{});var aZe=s(jE);g0e=n(aZe,"STRONG",{});var sda=s(g0e);mEr=r(sda,"distilbert"),sda.forEach(t),cEr=r(aZe," \u2014 "),QK=n(aZe,"A",{href:!0});var lda=s(QK);fEr=r(lda,"DistilBertForMultipleChoice"),lda.forEach(t),gEr=r(aZe," (DistilBERT model)"),aZe.forEach(t),hEr=i(ee),DE=n(ee,"LI",{});var nZe=s(DE);h0e=n(nZe,"STRONG",{});var ida=s(h0e);uEr=r(ida,"electra"),ida.forEach(t),pEr=r(nZe," \u2014 "),WK=n(nZe,"A",{href:!0});var dda=s(WK);_Er=r(dda,"ElectraForMultipleChoice"),dda.forEach(t),bEr=r(nZe," (ELECTRA model)"),nZe.forEach(t),vEr=i(ee),GE=n(ee,"LI",{});var sZe=s(GE);u0e=n(sZe,"STRONG",{});var mda=s(u0e);FEr=r(mda,"ernie"),mda.forEach(t),TEr=r(sZe," \u2014 "),UK=n(sZe,"A",{href:!0});var cda=s(UK);MEr=r(cda,"ErnieForMultipleChoice"),cda.forEach(t),EEr=r(sZe," (ERNIE model)"),sZe.forEach(t),CEr=i(ee),OE=n(ee,"LI",{});var lZe=s(OE);p0e=n(lZe,"STRONG",{});var fda=s(p0e);wEr=r(fda,"flaubert"),fda.forEach(t),AEr=r(lZe," \u2014 "),HK=n(lZe,"A",{href:!0});var gda=s(HK);LEr=r(gda,"FlaubertForMultipleChoice"),gda.forEach(t),yEr=r(lZe," (FlauBERT model)"),lZe.forEach(t),xEr=i(ee),VE=n(ee,"LI",{});var iZe=s(VE);_0e=n(iZe,"STRONG",{});var hda=s(_0e);$Er=r(hda,"fnet"),hda.forEach(t),kEr=r(iZe," \u2014 "),JK=n(iZe,"A",{href:!0});var uda=s(JK);SEr=r(uda,"FNetForMultipleChoice"),uda.forEach(t),REr=r(iZe," (FNet model)"),iZe.forEach(t),PEr=i(ee),XE=n(ee,"LI",{});var dZe=s(XE);b0e=n(dZe,"STRONG",{});var pda=s(b0e);BEr=r(pda,"funnel"),pda.forEach(t),IEr=r(dZe," \u2014 "),YK=n(dZe,"A",{href:!0});var _da=s(YK);NEr=r(_da,"FunnelForMultipleChoice"),_da.forEach(t),qEr=r(dZe," (Funnel Transformer model)"),dZe.forEach(t),jEr=i(ee),zE=n(ee,"LI",{});var mZe=s(zE);v0e=n(mZe,"STRONG",{});var bda=s(v0e);DEr=r(bda,"ibert"),bda.forEach(t),GEr=r(mZe," \u2014 "),ZK=n(mZe,"A",{href:!0});var vda=s(ZK);OEr=r(vda,"IBertForMultipleChoice"),vda.forEach(t),VEr=r(mZe," (I-BERT model)"),mZe.forEach(t),XEr=i(ee),QE=n(ee,"LI",{});var cZe=s(QE);F0e=n(cZe,"STRONG",{});var Fda=s(F0e);zEr=r(Fda,"longformer"),Fda.forEach(t),QEr=r(cZe," \u2014 "),KK=n(cZe,"A",{href:!0});var Tda=s(KK);WEr=r(Tda,"LongformerForMultipleChoice"),Tda.forEach(t),UEr=r(cZe," (Longformer model)"),cZe.forEach(t),HEr=i(ee),WE=n(ee,"LI",{});var fZe=s(WE);T0e=n(fZe,"STRONG",{});var Mda=s(T0e);JEr=r(Mda,"luke"),Mda.forEach(t),YEr=r(fZe," \u2014 "),eee=n(fZe,"A",{href:!0});var Eda=s(eee);ZEr=r(Eda,"LukeForMultipleChoice"),Eda.forEach(t),KEr=r(fZe," (LUKE model)"),fZe.forEach(t),e4r=i(ee),UE=n(ee,"LI",{});var gZe=s(UE);M0e=n(gZe,"STRONG",{});var Cda=s(M0e);o4r=r(Cda,"megatron-bert"),Cda.forEach(t),r4r=r(gZe," \u2014 "),oee=n(gZe,"A",{href:!0});var wda=s(oee);t4r=r(wda,"MegatronBertForMultipleChoice"),wda.forEach(t),a4r=r(gZe," (Megatron-BERT model)"),gZe.forEach(t),n4r=i(ee),HE=n(ee,"LI",{});var hZe=s(HE);E0e=n(hZe,"STRONG",{});var Ada=s(E0e);s4r=r(Ada,"mobilebert"),Ada.forEach(t),l4r=r(hZe," \u2014 "),ree=n(hZe,"A",{href:!0});var Lda=s(ree);i4r=r(Lda,"MobileBertForMultipleChoice"),Lda.forEach(t),d4r=r(hZe," (MobileBERT model)"),hZe.forEach(t),m4r=i(ee),JE=n(ee,"LI",{});var uZe=s(JE);C0e=n(uZe,"STRONG",{});var yda=s(C0e);c4r=r(yda,"mpnet"),yda.forEach(t),f4r=r(uZe," \u2014 "),tee=n(uZe,"A",{href:!0});var xda=s(tee);g4r=r(xda,"MPNetForMultipleChoice"),xda.forEach(t),h4r=r(uZe," (MPNet model)"),uZe.forEach(t),u4r=i(ee),YE=n(ee,"LI",{});var pZe=s(YE);w0e=n(pZe,"STRONG",{});var $da=s(w0e);p4r=r($da,"nezha"),$da.forEach(t),_4r=r(pZe," \u2014 "),aee=n(pZe,"A",{href:!0});var kda=s(aee);b4r=r(kda,"NezhaForMultipleChoice"),kda.forEach(t),v4r=r(pZe," (Nezha model)"),pZe.forEach(t),F4r=i(ee),ZE=n(ee,"LI",{});var _Ze=s(ZE);A0e=n(_Ze,"STRONG",{});var Sda=s(A0e);T4r=r(Sda,"nystromformer"),Sda.forEach(t),M4r=r(_Ze," \u2014 "),nee=n(_Ze,"A",{href:!0});var Rda=s(nee);E4r=r(Rda,"NystromformerForMultipleChoice"),Rda.forEach(t),C4r=r(_Ze," (Nystr\xF6mformer model)"),_Ze.forEach(t),w4r=i(ee),KE=n(ee,"LI",{});var bZe=s(KE);L0e=n(bZe,"STRONG",{});var Pda=s(L0e);A4r=r(Pda,"qdqbert"),Pda.forEach(t),L4r=r(bZe," \u2014 "),see=n(bZe,"A",{href:!0});var Bda=s(see);y4r=r(Bda,"QDQBertForMultipleChoice"),Bda.forEach(t),x4r=r(bZe," (QDQBert model)"),bZe.forEach(t),$4r=i(ee),e4=n(ee,"LI",{});var vZe=s(e4);y0e=n(vZe,"STRONG",{});var Ida=s(y0e);k4r=r(Ida,"rembert"),Ida.forEach(t),S4r=r(vZe," \u2014 "),lee=n(vZe,"A",{href:!0});var Nda=s(lee);R4r=r(Nda,"RemBertForMultipleChoice"),Nda.forEach(t),P4r=r(vZe," (RemBERT model)"),vZe.forEach(t),B4r=i(ee),o4=n(ee,"LI",{});var FZe=s(o4);x0e=n(FZe,"STRONG",{});var qda=s(x0e);I4r=r(qda,"roberta"),qda.forEach(t),N4r=r(FZe," \u2014 "),iee=n(FZe,"A",{href:!0});var jda=s(iee);q4r=r(jda,"RobertaForMultipleChoice"),jda.forEach(t),j4r=r(FZe," (RoBERTa model)"),FZe.forEach(t),D4r=i(ee),r4=n(ee,"LI",{});var TZe=s(r4);$0e=n(TZe,"STRONG",{});var Dda=s($0e);G4r=r(Dda,"roc_bert"),Dda.forEach(t),O4r=r(TZe," \u2014 "),dee=n(TZe,"A",{href:!0});var Gda=s(dee);V4r=r(Gda,"RoCBertForMultipleChoice"),Gda.forEach(t),X4r=r(TZe," (RoCBert model)"),TZe.forEach(t),z4r=i(ee),t4=n(ee,"LI",{});var MZe=s(t4);k0e=n(MZe,"STRONG",{});var Oda=s(k0e);Q4r=r(Oda,"roformer"),Oda.forEach(t),W4r=r(MZe," \u2014 "),mee=n(MZe,"A",{href:!0});var Vda=s(mee);U4r=r(Vda,"RoFormerForMultipleChoice"),Vda.forEach(t),H4r=r(MZe," (RoFormer model)"),MZe.forEach(t),J4r=i(ee),a4=n(ee,"LI",{});var EZe=s(a4);S0e=n(EZe,"STRONG",{});var Xda=s(S0e);Y4r=r(Xda,"squeezebert"),Xda.forEach(t),Z4r=r(EZe," \u2014 "),cee=n(EZe,"A",{href:!0});var zda=s(cee);K4r=r(zda,"SqueezeBertForMultipleChoice"),zda.forEach(t),eCr=r(EZe," (SqueezeBERT model)"),EZe.forEach(t),oCr=i(ee),n4=n(ee,"LI",{});var CZe=s(n4);R0e=n(CZe,"STRONG",{});var Qda=s(R0e);rCr=r(Qda,"xlm"),Qda.forEach(t),tCr=r(CZe," \u2014 "),fee=n(CZe,"A",{href:!0});var Wda=s(fee);aCr=r(Wda,"XLMForMultipleChoice"),Wda.forEach(t),nCr=r(CZe," (XLM model)"),CZe.forEach(t),sCr=i(ee),s4=n(ee,"LI",{});var wZe=s(s4);P0e=n(wZe,"STRONG",{});var Uda=s(P0e);lCr=r(Uda,"xlm-roberta"),Uda.forEach(t),iCr=r(wZe," \u2014 "),gee=n(wZe,"A",{href:!0});var Hda=s(gee);dCr=r(Hda,"XLMRobertaForMultipleChoice"),Hda.forEach(t),mCr=r(wZe," (XLM-RoBERTa model)"),wZe.forEach(t),cCr=i(ee),l4=n(ee,"LI",{});var AZe=s(l4);B0e=n(AZe,"STRONG",{});var Jda=s(B0e);fCr=r(Jda,"xlm-roberta-xl"),Jda.forEach(t),gCr=r(AZe," \u2014 "),hee=n(AZe,"A",{href:!0});var Yda=s(hee);hCr=r(Yda,"XLMRobertaXLForMultipleChoice"),Yda.forEach(t),uCr=r(AZe," (XLM-RoBERTa-XL model)"),AZe.forEach(t),pCr=i(ee),i4=n(ee,"LI",{});var LZe=s(i4);I0e=n(LZe,"STRONG",{});var Zda=s(I0e);_Cr=r(Zda,"xlnet"),Zda.forEach(t),bCr=r(LZe," \u2014 "),uee=n(LZe,"A",{href:!0});var Kda=s(uee);vCr=r(Kda,"XLNetForMultipleChoice"),Kda.forEach(t),FCr=r(LZe," (XLNet model)"),LZe.forEach(t),TCr=i(ee),d4=n(ee,"LI",{});var yZe=s(d4);N0e=n(yZe,"STRONG",{});var ema=s(N0e);MCr=r(ema,"yoso"),ema.forEach(t),ECr=r(yZe," \u2014 "),pee=n(yZe,"A",{href:!0});var oma=s(pee);CCr=r(oma,"YosoForMultipleChoice"),oma.forEach(t),wCr=r(yZe," (YOSO model)"),yZe.forEach(t),ee.forEach(t),ACr=i(ja),m4=n(ja,"P",{});var xZe=s(m4);LCr=r(xZe,"The model is set in evaluation mode by default using "),q0e=n(xZe,"CODE",{});var rma=s(q0e);yCr=r(rma,"model.eval()"),rma.forEach(t),xCr=r(xZe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j0e=n(xZe,"CODE",{});var tma=s(j0e);$Cr=r(tma,"model.train()"),tma.forEach(t),xZe.forEach(t),kCr=i(ja),T(c4.$$.fragment,ja),ja.forEach(t),oi.forEach(t),edo=i(c),fm=n(c,"H2",{class:!0});var Eco=s(fm);f4=n(Eco,"A",{id:!0,class:!0,href:!0});var ama=s(f4);D0e=n(ama,"SPAN",{});var nma=s(D0e);T(QS.$$.fragment,nma),nma.forEach(t),ama.forEach(t),SCr=i(Eco),G0e=n(Eco,"SPAN",{});var sma=s(G0e);RCr=r(sma,"AutoModelForNextSentencePrediction"),sma.forEach(t),Eco.forEach(t),odo=i(c),Uo=n(c,"DIV",{class:!0});var ri=s(Uo);T(WS.$$.fragment,ri),PCr=i(ri),gm=n(ri,"P",{});var ege=s(gm);BCr=r(ege,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_ee=n(ege,"A",{href:!0});var lma=s(_ee);ICr=r(lma,"from_pretrained()"),lma.forEach(t),NCr=r(ege," class method or the "),bee=n(ege,"A",{href:!0});var ima=s(bee);qCr=r(ima,"from_config()"),ima.forEach(t),jCr=r(ege,` class
method.`),ege.forEach(t),DCr=i(ri),US=n(ri,"P",{});var Cco=s(US);GCr=r(Cco,"This class cannot be instantiated directly using "),O0e=n(Cco,"CODE",{});var dma=s(O0e);OCr=r(dma,"__init__()"),dma.forEach(t),VCr=r(Cco," (throws an error)."),Cco.forEach(t),XCr=i(ri),Pt=n(ri,"DIV",{class:!0});var Px=s(Pt);T(HS.$$.fragment,Px),zCr=i(Px),V0e=n(Px,"P",{});var mma=s(V0e);QCr=r(mma,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mma.forEach(t),WCr=i(Px),hm=n(Px,"P",{});var oge=s(hm);UCr=r(oge,`Note:
Loading a model from its configuration file does `),X0e=n(oge,"STRONG",{});var cma=s(X0e);HCr=r(cma,"not"),cma.forEach(t),JCr=r(oge,` load the model weights. It only affects the
model\u2019s configuration. Use `),vee=n(oge,"A",{href:!0});var fma=s(vee);YCr=r(fma,"from_pretrained()"),fma.forEach(t),ZCr=r(oge," to load the model weights."),oge.forEach(t),KCr=i(Px),T(g4.$$.fragment,Px),Px.forEach(t),e3r=i(ri),fo=n(ri,"DIV",{class:!0});var Da=s(fo);T(JS.$$.fragment,Da),o3r=i(Da),z0e=n(Da,"P",{});var gma=s(z0e);r3r=r(gma,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gma.forEach(t),t3r=i(Da),Tn=n(Da,"P",{});var Bx=s(Tn);a3r=r(Bx,"The model class to instantiate is selected based on the "),Q0e=n(Bx,"CODE",{});var hma=s(Q0e);n3r=r(hma,"model_type"),hma.forEach(t),s3r=r(Bx,` property of the config object (either
passed as an argument or loaded from `),W0e=n(Bx,"CODE",{});var uma=s(W0e);l3r=r(uma,"pretrained_model_name_or_path"),uma.forEach(t),i3r=r(Bx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=n(Bx,"CODE",{});var pma=s(U0e);d3r=r(pma,"pretrained_model_name_or_path"),pma.forEach(t),m3r=r(Bx,":"),Bx.forEach(t),c3r=i(Da),Ye=n(Da,"UL",{});var vt=s(Ye);h4=n(vt,"LI",{});var $Ze=s(h4);H0e=n($Ze,"STRONG",{});var _ma=s(H0e);f3r=r(_ma,"bert"),_ma.forEach(t),g3r=r($Ze," \u2014 "),Fee=n($Ze,"A",{href:!0});var bma=s(Fee);h3r=r(bma,"BertForNextSentencePrediction"),bma.forEach(t),u3r=r($Ze," (BERT model)"),$Ze.forEach(t),p3r=i(vt),u4=n(vt,"LI",{});var kZe=s(u4);J0e=n(kZe,"STRONG",{});var vma=s(J0e);_3r=r(vma,"ernie"),vma.forEach(t),b3r=r(kZe," \u2014 "),Tee=n(kZe,"A",{href:!0});var Fma=s(Tee);v3r=r(Fma,"ErnieForNextSentencePrediction"),Fma.forEach(t),F3r=r(kZe," (ERNIE model)"),kZe.forEach(t),T3r=i(vt),p4=n(vt,"LI",{});var SZe=s(p4);Y0e=n(SZe,"STRONG",{});var Tma=s(Y0e);M3r=r(Tma,"fnet"),Tma.forEach(t),E3r=r(SZe," \u2014 "),Mee=n(SZe,"A",{href:!0});var Mma=s(Mee);C3r=r(Mma,"FNetForNextSentencePrediction"),Mma.forEach(t),w3r=r(SZe," (FNet model)"),SZe.forEach(t),A3r=i(vt),_4=n(vt,"LI",{});var RZe=s(_4);Z0e=n(RZe,"STRONG",{});var Ema=s(Z0e);L3r=r(Ema,"megatron-bert"),Ema.forEach(t),y3r=r(RZe," \u2014 "),Eee=n(RZe,"A",{href:!0});var Cma=s(Eee);x3r=r(Cma,"MegatronBertForNextSentencePrediction"),Cma.forEach(t),$3r=r(RZe," (Megatron-BERT model)"),RZe.forEach(t),k3r=i(vt),b4=n(vt,"LI",{});var PZe=s(b4);K0e=n(PZe,"STRONG",{});var wma=s(K0e);S3r=r(wma,"mobilebert"),wma.forEach(t),R3r=r(PZe," \u2014 "),Cee=n(PZe,"A",{href:!0});var Ama=s(Cee);P3r=r(Ama,"MobileBertForNextSentencePrediction"),Ama.forEach(t),B3r=r(PZe," (MobileBERT model)"),PZe.forEach(t),I3r=i(vt),v4=n(vt,"LI",{});var BZe=s(v4);ewe=n(BZe,"STRONG",{});var Lma=s(ewe);N3r=r(Lma,"nezha"),Lma.forEach(t),q3r=r(BZe," \u2014 "),wee=n(BZe,"A",{href:!0});var yma=s(wee);j3r=r(yma,"NezhaForNextSentencePrediction"),yma.forEach(t),D3r=r(BZe," (Nezha model)"),BZe.forEach(t),G3r=i(vt),F4=n(vt,"LI",{});var IZe=s(F4);owe=n(IZe,"STRONG",{});var xma=s(owe);O3r=r(xma,"qdqbert"),xma.forEach(t),V3r=r(IZe," \u2014 "),Aee=n(IZe,"A",{href:!0});var $ma=s(Aee);X3r=r($ma,"QDQBertForNextSentencePrediction"),$ma.forEach(t),z3r=r(IZe," (QDQBert model)"),IZe.forEach(t),vt.forEach(t),Q3r=i(Da),T4=n(Da,"P",{});var NZe=s(T4);W3r=r(NZe,"The model is set in evaluation mode by default using "),rwe=n(NZe,"CODE",{});var kma=s(rwe);U3r=r(kma,"model.eval()"),kma.forEach(t),H3r=r(NZe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),twe=n(NZe,"CODE",{});var Sma=s(twe);J3r=r(Sma,"model.train()"),Sma.forEach(t),NZe.forEach(t),Y3r=i(Da),T(M4.$$.fragment,Da),Da.forEach(t),ri.forEach(t),rdo=i(c),um=n(c,"H2",{class:!0});var wco=s(um);E4=n(wco,"A",{id:!0,class:!0,href:!0});var Rma=s(E4);awe=n(Rma,"SPAN",{});var Pma=s(awe);T(YS.$$.fragment,Pma),Pma.forEach(t),Rma.forEach(t),Z3r=i(wco),nwe=n(wco,"SPAN",{});var Bma=s(nwe);K3r=r(Bma,"AutoModelForTokenClassification"),Bma.forEach(t),wco.forEach(t),tdo=i(c),Ho=n(c,"DIV",{class:!0});var ti=s(Ho);T(ZS.$$.fragment,ti),e5r=i(ti),pm=n(ti,"P",{});var rge=s(pm);o5r=r(rge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Lee=n(rge,"A",{href:!0});var Ima=s(Lee);r5r=r(Ima,"from_pretrained()"),Ima.forEach(t),t5r=r(rge," class method or the "),yee=n(rge,"A",{href:!0});var Nma=s(yee);a5r=r(Nma,"from_config()"),Nma.forEach(t),n5r=r(rge,` class
method.`),rge.forEach(t),s5r=i(ti),KS=n(ti,"P",{});var Aco=s(KS);l5r=r(Aco,"This class cannot be instantiated directly using "),swe=n(Aco,"CODE",{});var qma=s(swe);i5r=r(qma,"__init__()"),qma.forEach(t),d5r=r(Aco," (throws an error)."),Aco.forEach(t),m5r=i(ti),Bt=n(ti,"DIV",{class:!0});var Ix=s(Bt);T(eR.$$.fragment,Ix),c5r=i(Ix),lwe=n(Ix,"P",{});var jma=s(lwe);f5r=r(jma,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jma.forEach(t),g5r=i(Ix),_m=n(Ix,"P",{});var tge=s(_m);h5r=r(tge,`Note:
Loading a model from its configuration file does `),iwe=n(tge,"STRONG",{});var Dma=s(iwe);u5r=r(Dma,"not"),Dma.forEach(t),p5r=r(tge,` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=n(tge,"A",{href:!0});var Gma=s(xee);_5r=r(Gma,"from_pretrained()"),Gma.forEach(t),b5r=r(tge," to load the model weights."),tge.forEach(t),v5r=i(Ix),T(C4.$$.fragment,Ix),Ix.forEach(t),F5r=i(ti),go=n(ti,"DIV",{class:!0});var Ga=s(go);T(oR.$$.fragment,Ga),T5r=i(Ga),dwe=n(Ga,"P",{});var Oma=s(dwe);M5r=r(Oma,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Oma.forEach(t),E5r=i(Ga),Mn=n(Ga,"P",{});var Nx=s(Mn);C5r=r(Nx,"The model class to instantiate is selected based on the "),mwe=n(Nx,"CODE",{});var Vma=s(mwe);w5r=r(Vma,"model_type"),Vma.forEach(t),A5r=r(Nx,` property of the config object (either
passed as an argument or loaded from `),cwe=n(Nx,"CODE",{});var Xma=s(cwe);L5r=r(Xma,"pretrained_model_name_or_path"),Xma.forEach(t),y5r=r(Nx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fwe=n(Nx,"CODE",{});var zma=s(fwe);x5r=r(zma,"pretrained_model_name_or_path"),zma.forEach(t),$5r=r(Nx,":"),Nx.forEach(t),k5r=i(Ga),U=n(Ga,"UL",{});var Y=s(U);w4=n(Y,"LI",{});var qZe=s(w4);gwe=n(qZe,"STRONG",{});var Qma=s(gwe);S5r=r(Qma,"albert"),Qma.forEach(t),R5r=r(qZe," \u2014 "),$ee=n(qZe,"A",{href:!0});var Wma=s($ee);P5r=r(Wma,"AlbertForTokenClassification"),Wma.forEach(t),B5r=r(qZe," (ALBERT model)"),qZe.forEach(t),I5r=i(Y),A4=n(Y,"LI",{});var jZe=s(A4);hwe=n(jZe,"STRONG",{});var Uma=s(hwe);N5r=r(Uma,"bert"),Uma.forEach(t),q5r=r(jZe," \u2014 "),kee=n(jZe,"A",{href:!0});var Hma=s(kee);j5r=r(Hma,"BertForTokenClassification"),Hma.forEach(t),D5r=r(jZe," (BERT model)"),jZe.forEach(t),G5r=i(Y),L4=n(Y,"LI",{});var DZe=s(L4);uwe=n(DZe,"STRONG",{});var Jma=s(uwe);O5r=r(Jma,"big_bird"),Jma.forEach(t),V5r=r(DZe," \u2014 "),See=n(DZe,"A",{href:!0});var Yma=s(See);X5r=r(Yma,"BigBirdForTokenClassification"),Yma.forEach(t),z5r=r(DZe," (BigBird model)"),DZe.forEach(t),Q5r=i(Y),y4=n(Y,"LI",{});var GZe=s(y4);pwe=n(GZe,"STRONG",{});var Zma=s(pwe);W5r=r(Zma,"bloom"),Zma.forEach(t),U5r=r(GZe," \u2014 "),Ree=n(GZe,"A",{href:!0});var Kma=s(Ree);H5r=r(Kma,"BloomForTokenClassification"),Kma.forEach(t),J5r=r(GZe," (BLOOM model)"),GZe.forEach(t),Y5r=i(Y),x4=n(Y,"LI",{});var OZe=s(x4);_we=n(OZe,"STRONG",{});var eca=s(_we);Z5r=r(eca,"camembert"),eca.forEach(t),K5r=r(OZe," \u2014 "),Pee=n(OZe,"A",{href:!0});var oca=s(Pee);e0r=r(oca,"CamembertForTokenClassification"),oca.forEach(t),o0r=r(OZe," (CamemBERT model)"),OZe.forEach(t),r0r=i(Y),$4=n(Y,"LI",{});var VZe=s($4);bwe=n(VZe,"STRONG",{});var rca=s(bwe);t0r=r(rca,"canine"),rca.forEach(t),a0r=r(VZe," \u2014 "),Bee=n(VZe,"A",{href:!0});var tca=s(Bee);n0r=r(tca,"CanineForTokenClassification"),tca.forEach(t),s0r=r(VZe," (CANINE model)"),VZe.forEach(t),l0r=i(Y),k4=n(Y,"LI",{});var XZe=s(k4);vwe=n(XZe,"STRONG",{});var aca=s(vwe);i0r=r(aca,"convbert"),aca.forEach(t),d0r=r(XZe," \u2014 "),Iee=n(XZe,"A",{href:!0});var nca=s(Iee);m0r=r(nca,"ConvBertForTokenClassification"),nca.forEach(t),c0r=r(XZe," (ConvBERT model)"),XZe.forEach(t),f0r=i(Y),S4=n(Y,"LI",{});var zZe=s(S4);Fwe=n(zZe,"STRONG",{});var sca=s(Fwe);g0r=r(sca,"data2vec-text"),sca.forEach(t),h0r=r(zZe," \u2014 "),Nee=n(zZe,"A",{href:!0});var lca=s(Nee);u0r=r(lca,"Data2VecTextForTokenClassification"),lca.forEach(t),p0r=r(zZe," (Data2VecText model)"),zZe.forEach(t),_0r=i(Y),R4=n(Y,"LI",{});var QZe=s(R4);Twe=n(QZe,"STRONG",{});var ica=s(Twe);b0r=r(ica,"deberta"),ica.forEach(t),v0r=r(QZe," \u2014 "),qee=n(QZe,"A",{href:!0});var dca=s(qee);F0r=r(dca,"DebertaForTokenClassification"),dca.forEach(t),T0r=r(QZe," (DeBERTa model)"),QZe.forEach(t),M0r=i(Y),P4=n(Y,"LI",{});var WZe=s(P4);Mwe=n(WZe,"STRONG",{});var mca=s(Mwe);E0r=r(mca,"deberta-v2"),mca.forEach(t),C0r=r(WZe," \u2014 "),jee=n(WZe,"A",{href:!0});var cca=s(jee);w0r=r(cca,"DebertaV2ForTokenClassification"),cca.forEach(t),A0r=r(WZe," (DeBERTa-v2 model)"),WZe.forEach(t),L0r=i(Y),B4=n(Y,"LI",{});var UZe=s(B4);Ewe=n(UZe,"STRONG",{});var fca=s(Ewe);y0r=r(fca,"distilbert"),fca.forEach(t),x0r=r(UZe," \u2014 "),Dee=n(UZe,"A",{href:!0});var gca=s(Dee);$0r=r(gca,"DistilBertForTokenClassification"),gca.forEach(t),k0r=r(UZe," (DistilBERT model)"),UZe.forEach(t),S0r=i(Y),I4=n(Y,"LI",{});var HZe=s(I4);Cwe=n(HZe,"STRONG",{});var hca=s(Cwe);R0r=r(hca,"electra"),hca.forEach(t),P0r=r(HZe," \u2014 "),Gee=n(HZe,"A",{href:!0});var uca=s(Gee);B0r=r(uca,"ElectraForTokenClassification"),uca.forEach(t),I0r=r(HZe," (ELECTRA model)"),HZe.forEach(t),N0r=i(Y),N4=n(Y,"LI",{});var JZe=s(N4);wwe=n(JZe,"STRONG",{});var pca=s(wwe);q0r=r(pca,"ernie"),pca.forEach(t),j0r=r(JZe," \u2014 "),Oee=n(JZe,"A",{href:!0});var _ca=s(Oee);D0r=r(_ca,"ErnieForTokenClassification"),_ca.forEach(t),G0r=r(JZe," (ERNIE model)"),JZe.forEach(t),O0r=i(Y),q4=n(Y,"LI",{});var YZe=s(q4);Awe=n(YZe,"STRONG",{});var bca=s(Awe);V0r=r(bca,"esm"),bca.forEach(t),X0r=r(YZe," \u2014 "),Vee=n(YZe,"A",{href:!0});var vca=s(Vee);z0r=r(vca,"EsmForTokenClassification"),vca.forEach(t),Q0r=r(YZe," (ESM model)"),YZe.forEach(t),W0r=i(Y),j4=n(Y,"LI",{});var ZZe=s(j4);Lwe=n(ZZe,"STRONG",{});var Fca=s(Lwe);U0r=r(Fca,"flaubert"),Fca.forEach(t),H0r=r(ZZe," \u2014 "),Xee=n(ZZe,"A",{href:!0});var Tca=s(Xee);J0r=r(Tca,"FlaubertForTokenClassification"),Tca.forEach(t),Y0r=r(ZZe," (FlauBERT model)"),ZZe.forEach(t),Z0r=i(Y),D4=n(Y,"LI",{});var KZe=s(D4);ywe=n(KZe,"STRONG",{});var Mca=s(ywe);K0r=r(Mca,"fnet"),Mca.forEach(t),ewr=r(KZe," \u2014 "),zee=n(KZe,"A",{href:!0});var Eca=s(zee);owr=r(Eca,"FNetForTokenClassification"),Eca.forEach(t),rwr=r(KZe," (FNet model)"),KZe.forEach(t),twr=i(Y),G4=n(Y,"LI",{});var eKe=s(G4);xwe=n(eKe,"STRONG",{});var Cca=s(xwe);awr=r(Cca,"funnel"),Cca.forEach(t),nwr=r(eKe," \u2014 "),Qee=n(eKe,"A",{href:!0});var wca=s(Qee);swr=r(wca,"FunnelForTokenClassification"),wca.forEach(t),lwr=r(eKe," (Funnel Transformer model)"),eKe.forEach(t),iwr=i(Y),O4=n(Y,"LI",{});var oKe=s(O4);$we=n(oKe,"STRONG",{});var Aca=s($we);dwr=r(Aca,"gpt2"),Aca.forEach(t),mwr=r(oKe," \u2014 "),Wee=n(oKe,"A",{href:!0});var Lca=s(Wee);cwr=r(Lca,"GPT2ForTokenClassification"),Lca.forEach(t),fwr=r(oKe," (OpenAI GPT-2 model)"),oKe.forEach(t),gwr=i(Y),V4=n(Y,"LI",{});var rKe=s(V4);kwe=n(rKe,"STRONG",{});var yca=s(kwe);hwr=r(yca,"ibert"),yca.forEach(t),uwr=r(rKe," \u2014 "),Uee=n(rKe,"A",{href:!0});var xca=s(Uee);pwr=r(xca,"IBertForTokenClassification"),xca.forEach(t),_wr=r(rKe," (I-BERT model)"),rKe.forEach(t),bwr=i(Y),X4=n(Y,"LI",{});var tKe=s(X4);Swe=n(tKe,"STRONG",{});var $ca=s(Swe);vwr=r($ca,"layoutlm"),$ca.forEach(t),Fwr=r(tKe," \u2014 "),Hee=n(tKe,"A",{href:!0});var kca=s(Hee);Twr=r(kca,"LayoutLMForTokenClassification"),kca.forEach(t),Mwr=r(tKe," (LayoutLM model)"),tKe.forEach(t),Ewr=i(Y),z4=n(Y,"LI",{});var aKe=s(z4);Rwe=n(aKe,"STRONG",{});var Sca=s(Rwe);Cwr=r(Sca,"layoutlmv2"),Sca.forEach(t),wwr=r(aKe," \u2014 "),Jee=n(aKe,"A",{href:!0});var Rca=s(Jee);Awr=r(Rca,"LayoutLMv2ForTokenClassification"),Rca.forEach(t),Lwr=r(aKe," (LayoutLMv2 model)"),aKe.forEach(t),ywr=i(Y),Q4=n(Y,"LI",{});var nKe=s(Q4);Pwe=n(nKe,"STRONG",{});var Pca=s(Pwe);xwr=r(Pca,"layoutlmv3"),Pca.forEach(t),$wr=r(nKe," \u2014 "),Yee=n(nKe,"A",{href:!0});var Bca=s(Yee);kwr=r(Bca,"LayoutLMv3ForTokenClassification"),Bca.forEach(t),Swr=r(nKe," (LayoutLMv3 model)"),nKe.forEach(t),Rwr=i(Y),W4=n(Y,"LI",{});var sKe=s(W4);Bwe=n(sKe,"STRONG",{});var Ica=s(Bwe);Pwr=r(Ica,"lilt"),Ica.forEach(t),Bwr=r(sKe," \u2014 "),Zee=n(sKe,"A",{href:!0});var Nca=s(Zee);Iwr=r(Nca,"LiltForTokenClassification"),Nca.forEach(t),Nwr=r(sKe," (LiLT model)"),sKe.forEach(t),qwr=i(Y),U4=n(Y,"LI",{});var lKe=s(U4);Iwe=n(lKe,"STRONG",{});var qca=s(Iwe);jwr=r(qca,"longformer"),qca.forEach(t),Dwr=r(lKe," \u2014 "),Kee=n(lKe,"A",{href:!0});var jca=s(Kee);Gwr=r(jca,"LongformerForTokenClassification"),jca.forEach(t),Owr=r(lKe," (Longformer model)"),lKe.forEach(t),Vwr=i(Y),H4=n(Y,"LI",{});var iKe=s(H4);Nwe=n(iKe,"STRONG",{});var Dca=s(Nwe);Xwr=r(Dca,"luke"),Dca.forEach(t),zwr=r(iKe," \u2014 "),eoe=n(iKe,"A",{href:!0});var Gca=s(eoe);Qwr=r(Gca,"LukeForTokenClassification"),Gca.forEach(t),Wwr=r(iKe," (LUKE model)"),iKe.forEach(t),Uwr=i(Y),J4=n(Y,"LI",{});var dKe=s(J4);qwe=n(dKe,"STRONG",{});var Oca=s(qwe);Hwr=r(Oca,"markuplm"),Oca.forEach(t),Jwr=r(dKe," \u2014 "),ooe=n(dKe,"A",{href:!0});var Vca=s(ooe);Ywr=r(Vca,"MarkupLMForTokenClassification"),Vca.forEach(t),Zwr=r(dKe," (MarkupLM model)"),dKe.forEach(t),Kwr=i(Y),Y4=n(Y,"LI",{});var mKe=s(Y4);jwe=n(mKe,"STRONG",{});var Xca=s(jwe);eAr=r(Xca,"megatron-bert"),Xca.forEach(t),oAr=r(mKe," \u2014 "),roe=n(mKe,"A",{href:!0});var zca=s(roe);rAr=r(zca,"MegatronBertForTokenClassification"),zca.forEach(t),tAr=r(mKe," (Megatron-BERT model)"),mKe.forEach(t),aAr=i(Y),Z4=n(Y,"LI",{});var cKe=s(Z4);Dwe=n(cKe,"STRONG",{});var Qca=s(Dwe);nAr=r(Qca,"mobilebert"),Qca.forEach(t),sAr=r(cKe," \u2014 "),toe=n(cKe,"A",{href:!0});var Wca=s(toe);lAr=r(Wca,"MobileBertForTokenClassification"),Wca.forEach(t),iAr=r(cKe," (MobileBERT model)"),cKe.forEach(t),dAr=i(Y),K4=n(Y,"LI",{});var fKe=s(K4);Gwe=n(fKe,"STRONG",{});var Uca=s(Gwe);mAr=r(Uca,"mpnet"),Uca.forEach(t),cAr=r(fKe," \u2014 "),aoe=n(fKe,"A",{href:!0});var Hca=s(aoe);fAr=r(Hca,"MPNetForTokenClassification"),Hca.forEach(t),gAr=r(fKe," (MPNet model)"),fKe.forEach(t),hAr=i(Y),eC=n(Y,"LI",{});var gKe=s(eC);Owe=n(gKe,"STRONG",{});var Jca=s(Owe);uAr=r(Jca,"nezha"),Jca.forEach(t),pAr=r(gKe," \u2014 "),noe=n(gKe,"A",{href:!0});var Yca=s(noe);_Ar=r(Yca,"NezhaForTokenClassification"),Yca.forEach(t),bAr=r(gKe," (Nezha model)"),gKe.forEach(t),vAr=i(Y),oC=n(Y,"LI",{});var hKe=s(oC);Vwe=n(hKe,"STRONG",{});var Zca=s(Vwe);FAr=r(Zca,"nystromformer"),Zca.forEach(t),TAr=r(hKe," \u2014 "),soe=n(hKe,"A",{href:!0});var Kca=s(soe);MAr=r(Kca,"NystromformerForTokenClassification"),Kca.forEach(t),EAr=r(hKe," (Nystr\xF6mformer model)"),hKe.forEach(t),CAr=i(Y),rC=n(Y,"LI",{});var uKe=s(rC);Xwe=n(uKe,"STRONG",{});var efa=s(Xwe);wAr=r(efa,"qdqbert"),efa.forEach(t),AAr=r(uKe," \u2014 "),loe=n(uKe,"A",{href:!0});var ofa=s(loe);LAr=r(ofa,"QDQBertForTokenClassification"),ofa.forEach(t),yAr=r(uKe," (QDQBert model)"),uKe.forEach(t),xAr=i(Y),tC=n(Y,"LI",{});var pKe=s(tC);zwe=n(pKe,"STRONG",{});var rfa=s(zwe);$Ar=r(rfa,"rembert"),rfa.forEach(t),kAr=r(pKe," \u2014 "),ioe=n(pKe,"A",{href:!0});var tfa=s(ioe);SAr=r(tfa,"RemBertForTokenClassification"),tfa.forEach(t),RAr=r(pKe," (RemBERT model)"),pKe.forEach(t),PAr=i(Y),aC=n(Y,"LI",{});var _Ke=s(aC);Qwe=n(_Ke,"STRONG",{});var afa=s(Qwe);BAr=r(afa,"roberta"),afa.forEach(t),IAr=r(_Ke," \u2014 "),doe=n(_Ke,"A",{href:!0});var nfa=s(doe);NAr=r(nfa,"RobertaForTokenClassification"),nfa.forEach(t),qAr=r(_Ke," (RoBERTa model)"),_Ke.forEach(t),jAr=i(Y),nC=n(Y,"LI",{});var bKe=s(nC);Wwe=n(bKe,"STRONG",{});var sfa=s(Wwe);DAr=r(sfa,"roc_bert"),sfa.forEach(t),GAr=r(bKe," \u2014 "),moe=n(bKe,"A",{href:!0});var lfa=s(moe);OAr=r(lfa,"RoCBertForTokenClassification"),lfa.forEach(t),VAr=r(bKe," (RoCBert model)"),bKe.forEach(t),XAr=i(Y),sC=n(Y,"LI",{});var vKe=s(sC);Uwe=n(vKe,"STRONG",{});var ifa=s(Uwe);zAr=r(ifa,"roformer"),ifa.forEach(t),QAr=r(vKe," \u2014 "),coe=n(vKe,"A",{href:!0});var dfa=s(coe);WAr=r(dfa,"RoFormerForTokenClassification"),dfa.forEach(t),UAr=r(vKe," (RoFormer model)"),vKe.forEach(t),HAr=i(Y),lC=n(Y,"LI",{});var FKe=s(lC);Hwe=n(FKe,"STRONG",{});var mfa=s(Hwe);JAr=r(mfa,"squeezebert"),mfa.forEach(t),YAr=r(FKe," \u2014 "),foe=n(FKe,"A",{href:!0});var cfa=s(foe);ZAr=r(cfa,"SqueezeBertForTokenClassification"),cfa.forEach(t),KAr=r(FKe," (SqueezeBERT model)"),FKe.forEach(t),e6r=i(Y),iC=n(Y,"LI",{});var TKe=s(iC);Jwe=n(TKe,"STRONG",{});var ffa=s(Jwe);o6r=r(ffa,"xlm"),ffa.forEach(t),r6r=r(TKe," \u2014 "),goe=n(TKe,"A",{href:!0});var gfa=s(goe);t6r=r(gfa,"XLMForTokenClassification"),gfa.forEach(t),a6r=r(TKe," (XLM model)"),TKe.forEach(t),n6r=i(Y),dC=n(Y,"LI",{});var MKe=s(dC);Ywe=n(MKe,"STRONG",{});var hfa=s(Ywe);s6r=r(hfa,"xlm-roberta"),hfa.forEach(t),l6r=r(MKe," \u2014 "),hoe=n(MKe,"A",{href:!0});var ufa=s(hoe);i6r=r(ufa,"XLMRobertaForTokenClassification"),ufa.forEach(t),d6r=r(MKe," (XLM-RoBERTa model)"),MKe.forEach(t),m6r=i(Y),mC=n(Y,"LI",{});var EKe=s(mC);Zwe=n(EKe,"STRONG",{});var pfa=s(Zwe);c6r=r(pfa,"xlm-roberta-xl"),pfa.forEach(t),f6r=r(EKe," \u2014 "),uoe=n(EKe,"A",{href:!0});var _fa=s(uoe);g6r=r(_fa,"XLMRobertaXLForTokenClassification"),_fa.forEach(t),h6r=r(EKe," (XLM-RoBERTa-XL model)"),EKe.forEach(t),u6r=i(Y),cC=n(Y,"LI",{});var CKe=s(cC);Kwe=n(CKe,"STRONG",{});var bfa=s(Kwe);p6r=r(bfa,"xlnet"),bfa.forEach(t),_6r=r(CKe," \u2014 "),poe=n(CKe,"A",{href:!0});var vfa=s(poe);b6r=r(vfa,"XLNetForTokenClassification"),vfa.forEach(t),v6r=r(CKe," (XLNet model)"),CKe.forEach(t),F6r=i(Y),fC=n(Y,"LI",{});var wKe=s(fC);eAe=n(wKe,"STRONG",{});var Ffa=s(eAe);T6r=r(Ffa,"yoso"),Ffa.forEach(t),M6r=r(wKe," \u2014 "),_oe=n(wKe,"A",{href:!0});var Tfa=s(_oe);E6r=r(Tfa,"YosoForTokenClassification"),Tfa.forEach(t),C6r=r(wKe," (YOSO model)"),wKe.forEach(t),Y.forEach(t),w6r=i(Ga),gC=n(Ga,"P",{});var AKe=s(gC);A6r=r(AKe,"The model is set in evaluation mode by default using "),oAe=n(AKe,"CODE",{});var Mfa=s(oAe);L6r=r(Mfa,"model.eval()"),Mfa.forEach(t),y6r=r(AKe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rAe=n(AKe,"CODE",{});var Efa=s(rAe);x6r=r(Efa,"model.train()"),Efa.forEach(t),AKe.forEach(t),$6r=i(Ga),T(hC.$$.fragment,Ga),Ga.forEach(t),ti.forEach(t),ado=i(c),bm=n(c,"H2",{class:!0});var Lco=s(bm);uC=n(Lco,"A",{id:!0,class:!0,href:!0});var Cfa=s(uC);tAe=n(Cfa,"SPAN",{});var wfa=s(tAe);T(rR.$$.fragment,wfa),wfa.forEach(t),Cfa.forEach(t),k6r=i(Lco),aAe=n(Lco,"SPAN",{});var Afa=s(aAe);S6r=r(Afa,"AutoModelForQuestionAnswering"),Afa.forEach(t),Lco.forEach(t),ndo=i(c),Jo=n(c,"DIV",{class:!0});var ai=s(Jo);T(tR.$$.fragment,ai),R6r=i(ai),vm=n(ai,"P",{});var age=s(vm);P6r=r(age,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),boe=n(age,"A",{href:!0});var Lfa=s(boe);B6r=r(Lfa,"from_pretrained()"),Lfa.forEach(t),I6r=r(age," class method or the "),voe=n(age,"A",{href:!0});var yfa=s(voe);N6r=r(yfa,"from_config()"),yfa.forEach(t),q6r=r(age,` class
method.`),age.forEach(t),j6r=i(ai),aR=n(ai,"P",{});var yco=s(aR);D6r=r(yco,"This class cannot be instantiated directly using "),nAe=n(yco,"CODE",{});var xfa=s(nAe);G6r=r(xfa,"__init__()"),xfa.forEach(t),O6r=r(yco," (throws an error)."),yco.forEach(t),V6r=i(ai),It=n(ai,"DIV",{class:!0});var qx=s(It);T(nR.$$.fragment,qx),X6r=i(qx),sAe=n(qx,"P",{});var $fa=s(sAe);z6r=r($fa,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$fa.forEach(t),Q6r=i(qx),Fm=n(qx,"P",{});var nge=s(Fm);W6r=r(nge,`Note:
Loading a model from its configuration file does `),lAe=n(nge,"STRONG",{});var kfa=s(lAe);U6r=r(kfa,"not"),kfa.forEach(t),H6r=r(nge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Foe=n(nge,"A",{href:!0});var Sfa=s(Foe);J6r=r(Sfa,"from_pretrained()"),Sfa.forEach(t),Y6r=r(nge," to load the model weights."),nge.forEach(t),Z6r=i(qx),T(pC.$$.fragment,qx),qx.forEach(t),K6r=i(ai),ho=n(ai,"DIV",{class:!0});var Oa=s(ho);T(sR.$$.fragment,Oa),e7r=i(Oa),iAe=n(Oa,"P",{});var Rfa=s(iAe);o7r=r(Rfa,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Rfa.forEach(t),r7r=i(Oa),En=n(Oa,"P",{});var jx=s(En);t7r=r(jx,"The model class to instantiate is selected based on the "),dAe=n(jx,"CODE",{});var Pfa=s(dAe);a7r=r(Pfa,"model_type"),Pfa.forEach(t),n7r=r(jx,` property of the config object (either
passed as an argument or loaded from `),mAe=n(jx,"CODE",{});var Bfa=s(mAe);s7r=r(Bfa,"pretrained_model_name_or_path"),Bfa.forEach(t),l7r=r(jx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cAe=n(jx,"CODE",{});var Ifa=s(cAe);i7r=r(Ifa,"pretrained_model_name_or_path"),Ifa.forEach(t),d7r=r(jx,":"),jx.forEach(t),m7r=i(Oa),O=n(Oa,"UL",{});var X=s(O);_C=n(X,"LI",{});var LKe=s(_C);fAe=n(LKe,"STRONG",{});var Nfa=s(fAe);c7r=r(Nfa,"albert"),Nfa.forEach(t),f7r=r(LKe," \u2014 "),Toe=n(LKe,"A",{href:!0});var qfa=s(Toe);g7r=r(qfa,"AlbertForQuestionAnswering"),qfa.forEach(t),h7r=r(LKe," (ALBERT model)"),LKe.forEach(t),u7r=i(X),bC=n(X,"LI",{});var yKe=s(bC);gAe=n(yKe,"STRONG",{});var jfa=s(gAe);p7r=r(jfa,"bart"),jfa.forEach(t),_7r=r(yKe," \u2014 "),Moe=n(yKe,"A",{href:!0});var Dfa=s(Moe);b7r=r(Dfa,"BartForQuestionAnswering"),Dfa.forEach(t),v7r=r(yKe," (BART model)"),yKe.forEach(t),F7r=i(X),vC=n(X,"LI",{});var xKe=s(vC);hAe=n(xKe,"STRONG",{});var Gfa=s(hAe);T7r=r(Gfa,"bert"),Gfa.forEach(t),M7r=r(xKe," \u2014 "),Eoe=n(xKe,"A",{href:!0});var Ofa=s(Eoe);E7r=r(Ofa,"BertForQuestionAnswering"),Ofa.forEach(t),C7r=r(xKe," (BERT model)"),xKe.forEach(t),w7r=i(X),FC=n(X,"LI",{});var $Ke=s(FC);uAe=n($Ke,"STRONG",{});var Vfa=s(uAe);A7r=r(Vfa,"big_bird"),Vfa.forEach(t),L7r=r($Ke," \u2014 "),Coe=n($Ke,"A",{href:!0});var Xfa=s(Coe);y7r=r(Xfa,"BigBirdForQuestionAnswering"),Xfa.forEach(t),x7r=r($Ke," (BigBird model)"),$Ke.forEach(t),$7r=i(X),TC=n(X,"LI",{});var kKe=s(TC);pAe=n(kKe,"STRONG",{});var zfa=s(pAe);k7r=r(zfa,"bigbird_pegasus"),zfa.forEach(t),S7r=r(kKe," \u2014 "),woe=n(kKe,"A",{href:!0});var Qfa=s(woe);R7r=r(Qfa,"BigBirdPegasusForQuestionAnswering"),Qfa.forEach(t),P7r=r(kKe," (BigBird-Pegasus model)"),kKe.forEach(t),B7r=i(X),MC=n(X,"LI",{});var SKe=s(MC);_Ae=n(SKe,"STRONG",{});var Wfa=s(_Ae);I7r=r(Wfa,"bloom"),Wfa.forEach(t),N7r=r(SKe," \u2014 "),Aoe=n(SKe,"A",{href:!0});var Ufa=s(Aoe);q7r=r(Ufa,"BloomForQuestionAnswering"),Ufa.forEach(t),j7r=r(SKe," (BLOOM model)"),SKe.forEach(t),D7r=i(X),EC=n(X,"LI",{});var RKe=s(EC);bAe=n(RKe,"STRONG",{});var Hfa=s(bAe);G7r=r(Hfa,"camembert"),Hfa.forEach(t),O7r=r(RKe," \u2014 "),Loe=n(RKe,"A",{href:!0});var Jfa=s(Loe);V7r=r(Jfa,"CamembertForQuestionAnswering"),Jfa.forEach(t),X7r=r(RKe," (CamemBERT model)"),RKe.forEach(t),z7r=i(X),CC=n(X,"LI",{});var PKe=s(CC);vAe=n(PKe,"STRONG",{});var Yfa=s(vAe);Q7r=r(Yfa,"canine"),Yfa.forEach(t),W7r=r(PKe," \u2014 "),yoe=n(PKe,"A",{href:!0});var Zfa=s(yoe);U7r=r(Zfa,"CanineForQuestionAnswering"),Zfa.forEach(t),H7r=r(PKe," (CANINE model)"),PKe.forEach(t),J7r=i(X),wC=n(X,"LI",{});var BKe=s(wC);FAe=n(BKe,"STRONG",{});var Kfa=s(FAe);Y7r=r(Kfa,"convbert"),Kfa.forEach(t),Z7r=r(BKe," \u2014 "),xoe=n(BKe,"A",{href:!0});var ega=s(xoe);K7r=r(ega,"ConvBertForQuestionAnswering"),ega.forEach(t),e8r=r(BKe," (ConvBERT model)"),BKe.forEach(t),o8r=i(X),AC=n(X,"LI",{});var IKe=s(AC);TAe=n(IKe,"STRONG",{});var oga=s(TAe);r8r=r(oga,"data2vec-text"),oga.forEach(t),t8r=r(IKe," \u2014 "),$oe=n(IKe,"A",{href:!0});var rga=s($oe);a8r=r(rga,"Data2VecTextForQuestionAnswering"),rga.forEach(t),n8r=r(IKe," (Data2VecText model)"),IKe.forEach(t),s8r=i(X),LC=n(X,"LI",{});var NKe=s(LC);MAe=n(NKe,"STRONG",{});var tga=s(MAe);l8r=r(tga,"deberta"),tga.forEach(t),i8r=r(NKe," \u2014 "),koe=n(NKe,"A",{href:!0});var aga=s(koe);d8r=r(aga,"DebertaForQuestionAnswering"),aga.forEach(t),m8r=r(NKe," (DeBERTa model)"),NKe.forEach(t),c8r=i(X),yC=n(X,"LI",{});var qKe=s(yC);EAe=n(qKe,"STRONG",{});var nga=s(EAe);f8r=r(nga,"deberta-v2"),nga.forEach(t),g8r=r(qKe," \u2014 "),Soe=n(qKe,"A",{href:!0});var sga=s(Soe);h8r=r(sga,"DebertaV2ForQuestionAnswering"),sga.forEach(t),u8r=r(qKe," (DeBERTa-v2 model)"),qKe.forEach(t),p8r=i(X),xC=n(X,"LI",{});var jKe=s(xC);CAe=n(jKe,"STRONG",{});var lga=s(CAe);_8r=r(lga,"distilbert"),lga.forEach(t),b8r=r(jKe," \u2014 "),Roe=n(jKe,"A",{href:!0});var iga=s(Roe);v8r=r(iga,"DistilBertForQuestionAnswering"),iga.forEach(t),F8r=r(jKe," (DistilBERT model)"),jKe.forEach(t),T8r=i(X),$C=n(X,"LI",{});var DKe=s($C);wAe=n(DKe,"STRONG",{});var dga=s(wAe);M8r=r(dga,"electra"),dga.forEach(t),E8r=r(DKe," \u2014 "),Poe=n(DKe,"A",{href:!0});var mga=s(Poe);C8r=r(mga,"ElectraForQuestionAnswering"),mga.forEach(t),w8r=r(DKe," (ELECTRA model)"),DKe.forEach(t),A8r=i(X),kC=n(X,"LI",{});var GKe=s(kC);AAe=n(GKe,"STRONG",{});var cga=s(AAe);L8r=r(cga,"ernie"),cga.forEach(t),y8r=r(GKe," \u2014 "),Boe=n(GKe,"A",{href:!0});var fga=s(Boe);x8r=r(fga,"ErnieForQuestionAnswering"),fga.forEach(t),$8r=r(GKe," (ERNIE model)"),GKe.forEach(t),k8r=i(X),SC=n(X,"LI",{});var OKe=s(SC);LAe=n(OKe,"STRONG",{});var gga=s(LAe);S8r=r(gga,"flaubert"),gga.forEach(t),R8r=r(OKe," \u2014 "),Ioe=n(OKe,"A",{href:!0});var hga=s(Ioe);P8r=r(hga,"FlaubertForQuestionAnsweringSimple"),hga.forEach(t),B8r=r(OKe," (FlauBERT model)"),OKe.forEach(t),I8r=i(X),RC=n(X,"LI",{});var VKe=s(RC);yAe=n(VKe,"STRONG",{});var uga=s(yAe);N8r=r(uga,"fnet"),uga.forEach(t),q8r=r(VKe," \u2014 "),Noe=n(VKe,"A",{href:!0});var pga=s(Noe);j8r=r(pga,"FNetForQuestionAnswering"),pga.forEach(t),D8r=r(VKe," (FNet model)"),VKe.forEach(t),G8r=i(X),PC=n(X,"LI",{});var XKe=s(PC);xAe=n(XKe,"STRONG",{});var _ga=s(xAe);O8r=r(_ga,"funnel"),_ga.forEach(t),V8r=r(XKe," \u2014 "),qoe=n(XKe,"A",{href:!0});var bga=s(qoe);X8r=r(bga,"FunnelForQuestionAnswering"),bga.forEach(t),z8r=r(XKe," (Funnel Transformer model)"),XKe.forEach(t),Q8r=i(X),BC=n(X,"LI",{});var zKe=s(BC);$Ae=n(zKe,"STRONG",{});var vga=s($Ae);W8r=r(vga,"gptj"),vga.forEach(t),U8r=r(zKe," \u2014 "),joe=n(zKe,"A",{href:!0});var Fga=s(joe);H8r=r(Fga,"GPTJForQuestionAnswering"),Fga.forEach(t),J8r=r(zKe," (GPT-J model)"),zKe.forEach(t),Y8r=i(X),IC=n(X,"LI",{});var QKe=s(IC);kAe=n(QKe,"STRONG",{});var Tga=s(kAe);Z8r=r(Tga,"ibert"),Tga.forEach(t),K8r=r(QKe," \u2014 "),Doe=n(QKe,"A",{href:!0});var Mga=s(Doe);eLr=r(Mga,"IBertForQuestionAnswering"),Mga.forEach(t),oLr=r(QKe," (I-BERT model)"),QKe.forEach(t),rLr=i(X),NC=n(X,"LI",{});var WKe=s(NC);SAe=n(WKe,"STRONG",{});var Ega=s(SAe);tLr=r(Ega,"layoutlmv2"),Ega.forEach(t),aLr=r(WKe," \u2014 "),Goe=n(WKe,"A",{href:!0});var Cga=s(Goe);nLr=r(Cga,"LayoutLMv2ForQuestionAnswering"),Cga.forEach(t),sLr=r(WKe," (LayoutLMv2 model)"),WKe.forEach(t),lLr=i(X),qC=n(X,"LI",{});var UKe=s(qC);RAe=n(UKe,"STRONG",{});var wga=s(RAe);iLr=r(wga,"layoutlmv3"),wga.forEach(t),dLr=r(UKe," \u2014 "),Ooe=n(UKe,"A",{href:!0});var Aga=s(Ooe);mLr=r(Aga,"LayoutLMv3ForQuestionAnswering"),Aga.forEach(t),cLr=r(UKe," (LayoutLMv3 model)"),UKe.forEach(t),fLr=i(X),jC=n(X,"LI",{});var HKe=s(jC);PAe=n(HKe,"STRONG",{});var Lga=s(PAe);gLr=r(Lga,"led"),Lga.forEach(t),hLr=r(HKe," \u2014 "),Voe=n(HKe,"A",{href:!0});var yga=s(Voe);uLr=r(yga,"LEDForQuestionAnswering"),yga.forEach(t),pLr=r(HKe," (LED model)"),HKe.forEach(t),_Lr=i(X),DC=n(X,"LI",{});var JKe=s(DC);BAe=n(JKe,"STRONG",{});var xga=s(BAe);bLr=r(xga,"lilt"),xga.forEach(t),vLr=r(JKe," \u2014 "),Xoe=n(JKe,"A",{href:!0});var $ga=s(Xoe);FLr=r($ga,"LiltForQuestionAnswering"),$ga.forEach(t),TLr=r(JKe," (LiLT model)"),JKe.forEach(t),MLr=i(X),GC=n(X,"LI",{});var YKe=s(GC);IAe=n(YKe,"STRONG",{});var kga=s(IAe);ELr=r(kga,"longformer"),kga.forEach(t),CLr=r(YKe," \u2014 "),zoe=n(YKe,"A",{href:!0});var Sga=s(zoe);wLr=r(Sga,"LongformerForQuestionAnswering"),Sga.forEach(t),ALr=r(YKe," (Longformer model)"),YKe.forEach(t),LLr=i(X),OC=n(X,"LI",{});var ZKe=s(OC);NAe=n(ZKe,"STRONG",{});var Rga=s(NAe);yLr=r(Rga,"luke"),Rga.forEach(t),xLr=r(ZKe," \u2014 "),Qoe=n(ZKe,"A",{href:!0});var Pga=s(Qoe);$Lr=r(Pga,"LukeForQuestionAnswering"),Pga.forEach(t),kLr=r(ZKe," (LUKE model)"),ZKe.forEach(t),SLr=i(X),VC=n(X,"LI",{});var KKe=s(VC);qAe=n(KKe,"STRONG",{});var Bga=s(qAe);RLr=r(Bga,"lxmert"),Bga.forEach(t),PLr=r(KKe," \u2014 "),Woe=n(KKe,"A",{href:!0});var Iga=s(Woe);BLr=r(Iga,"LxmertForQuestionAnswering"),Iga.forEach(t),ILr=r(KKe," (LXMERT model)"),KKe.forEach(t),NLr=i(X),XC=n(X,"LI",{});var eeo=s(XC);jAe=n(eeo,"STRONG",{});var Nga=s(jAe);qLr=r(Nga,"markuplm"),Nga.forEach(t),jLr=r(eeo," \u2014 "),Uoe=n(eeo,"A",{href:!0});var qga=s(Uoe);DLr=r(qga,"MarkupLMForQuestionAnswering"),qga.forEach(t),GLr=r(eeo," (MarkupLM model)"),eeo.forEach(t),OLr=i(X),zC=n(X,"LI",{});var oeo=s(zC);DAe=n(oeo,"STRONG",{});var jga=s(DAe);VLr=r(jga,"mbart"),jga.forEach(t),XLr=r(oeo," \u2014 "),Hoe=n(oeo,"A",{href:!0});var Dga=s(Hoe);zLr=r(Dga,"MBartForQuestionAnswering"),Dga.forEach(t),QLr=r(oeo," (mBART model)"),oeo.forEach(t),WLr=i(X),QC=n(X,"LI",{});var reo=s(QC);GAe=n(reo,"STRONG",{});var Gga=s(GAe);ULr=r(Gga,"megatron-bert"),Gga.forEach(t),HLr=r(reo," \u2014 "),Joe=n(reo,"A",{href:!0});var Oga=s(Joe);JLr=r(Oga,"MegatronBertForQuestionAnswering"),Oga.forEach(t),YLr=r(reo," (Megatron-BERT model)"),reo.forEach(t),ZLr=i(X),WC=n(X,"LI",{});var teo=s(WC);OAe=n(teo,"STRONG",{});var Vga=s(OAe);KLr=r(Vga,"mobilebert"),Vga.forEach(t),eyr=r(teo," \u2014 "),Yoe=n(teo,"A",{href:!0});var Xga=s(Yoe);oyr=r(Xga,"MobileBertForQuestionAnswering"),Xga.forEach(t),ryr=r(teo," (MobileBERT model)"),teo.forEach(t),tyr=i(X),UC=n(X,"LI",{});var aeo=s(UC);VAe=n(aeo,"STRONG",{});var zga=s(VAe);ayr=r(zga,"mpnet"),zga.forEach(t),nyr=r(aeo," \u2014 "),Zoe=n(aeo,"A",{href:!0});var Qga=s(Zoe);syr=r(Qga,"MPNetForQuestionAnswering"),Qga.forEach(t),lyr=r(aeo," (MPNet model)"),aeo.forEach(t),iyr=i(X),HC=n(X,"LI",{});var neo=s(HC);XAe=n(neo,"STRONG",{});var Wga=s(XAe);dyr=r(Wga,"mvp"),Wga.forEach(t),myr=r(neo," \u2014 "),Koe=n(neo,"A",{href:!0});var Uga=s(Koe);cyr=r(Uga,"MvpForQuestionAnswering"),Uga.forEach(t),fyr=r(neo," (MVP model)"),neo.forEach(t),gyr=i(X),JC=n(X,"LI",{});var seo=s(JC);zAe=n(seo,"STRONG",{});var Hga=s(zAe);hyr=r(Hga,"nezha"),Hga.forEach(t),uyr=r(seo," \u2014 "),ere=n(seo,"A",{href:!0});var Jga=s(ere);pyr=r(Jga,"NezhaForQuestionAnswering"),Jga.forEach(t),_yr=r(seo," (Nezha model)"),seo.forEach(t),byr=i(X),YC=n(X,"LI",{});var leo=s(YC);QAe=n(leo,"STRONG",{});var Yga=s(QAe);vyr=r(Yga,"nystromformer"),Yga.forEach(t),Fyr=r(leo," \u2014 "),ore=n(leo,"A",{href:!0});var Zga=s(ore);Tyr=r(Zga,"NystromformerForQuestionAnswering"),Zga.forEach(t),Myr=r(leo," (Nystr\xF6mformer model)"),leo.forEach(t),Eyr=i(X),ZC=n(X,"LI",{});var ieo=s(ZC);WAe=n(ieo,"STRONG",{});var Kga=s(WAe);Cyr=r(Kga,"opt"),Kga.forEach(t),wyr=r(ieo," \u2014 "),rre=n(ieo,"A",{href:!0});var eha=s(rre);Ayr=r(eha,"OPTForQuestionAnswering"),eha.forEach(t),Lyr=r(ieo," (OPT model)"),ieo.forEach(t),yyr=i(X),KC=n(X,"LI",{});var deo=s(KC);UAe=n(deo,"STRONG",{});var oha=s(UAe);xyr=r(oha,"qdqbert"),oha.forEach(t),$yr=r(deo," \u2014 "),tre=n(deo,"A",{href:!0});var rha=s(tre);kyr=r(rha,"QDQBertForQuestionAnswering"),rha.forEach(t),Syr=r(deo," (QDQBert model)"),deo.forEach(t),Ryr=i(X),e3=n(X,"LI",{});var meo=s(e3);HAe=n(meo,"STRONG",{});var tha=s(HAe);Pyr=r(tha,"reformer"),tha.forEach(t),Byr=r(meo," \u2014 "),are=n(meo,"A",{href:!0});var aha=s(are);Iyr=r(aha,"ReformerForQuestionAnswering"),aha.forEach(t),Nyr=r(meo," (Reformer model)"),meo.forEach(t),qyr=i(X),o3=n(X,"LI",{});var ceo=s(o3);JAe=n(ceo,"STRONG",{});var nha=s(JAe);jyr=r(nha,"rembert"),nha.forEach(t),Dyr=r(ceo," \u2014 "),nre=n(ceo,"A",{href:!0});var sha=s(nre);Gyr=r(sha,"RemBertForQuestionAnswering"),sha.forEach(t),Oyr=r(ceo," (RemBERT model)"),ceo.forEach(t),Vyr=i(X),r3=n(X,"LI",{});var feo=s(r3);YAe=n(feo,"STRONG",{});var lha=s(YAe);Xyr=r(lha,"roberta"),lha.forEach(t),zyr=r(feo," \u2014 "),sre=n(feo,"A",{href:!0});var iha=s(sre);Qyr=r(iha,"RobertaForQuestionAnswering"),iha.forEach(t),Wyr=r(feo," (RoBERTa model)"),feo.forEach(t),Uyr=i(X),t3=n(X,"LI",{});var geo=s(t3);ZAe=n(geo,"STRONG",{});var dha=s(ZAe);Hyr=r(dha,"roc_bert"),dha.forEach(t),Jyr=r(geo," \u2014 "),lre=n(geo,"A",{href:!0});var mha=s(lre);Yyr=r(mha,"RoCBertForQuestionAnswering"),mha.forEach(t),Zyr=r(geo," (RoCBert model)"),geo.forEach(t),Kyr=i(X),a3=n(X,"LI",{});var heo=s(a3);KAe=n(heo,"STRONG",{});var cha=s(KAe);e9r=r(cha,"roformer"),cha.forEach(t),o9r=r(heo," \u2014 "),ire=n(heo,"A",{href:!0});var fha=s(ire);r9r=r(fha,"RoFormerForQuestionAnswering"),fha.forEach(t),t9r=r(heo," (RoFormer model)"),heo.forEach(t),a9r=i(X),n3=n(X,"LI",{});var ueo=s(n3);e6e=n(ueo,"STRONG",{});var gha=s(e6e);n9r=r(gha,"splinter"),gha.forEach(t),s9r=r(ueo," \u2014 "),dre=n(ueo,"A",{href:!0});var hha=s(dre);l9r=r(hha,"SplinterForQuestionAnswering"),hha.forEach(t),i9r=r(ueo," (Splinter model)"),ueo.forEach(t),d9r=i(X),s3=n(X,"LI",{});var peo=s(s3);o6e=n(peo,"STRONG",{});var uha=s(o6e);m9r=r(uha,"squeezebert"),uha.forEach(t),c9r=r(peo," \u2014 "),mre=n(peo,"A",{href:!0});var pha=s(mre);f9r=r(pha,"SqueezeBertForQuestionAnswering"),pha.forEach(t),g9r=r(peo," (SqueezeBERT model)"),peo.forEach(t),h9r=i(X),l3=n(X,"LI",{});var _eo=s(l3);r6e=n(_eo,"STRONG",{});var _ha=s(r6e);u9r=r(_ha,"xlm"),_ha.forEach(t),p9r=r(_eo," \u2014 "),cre=n(_eo,"A",{href:!0});var bha=s(cre);_9r=r(bha,"XLMForQuestionAnsweringSimple"),bha.forEach(t),b9r=r(_eo," (XLM model)"),_eo.forEach(t),v9r=i(X),i3=n(X,"LI",{});var beo=s(i3);t6e=n(beo,"STRONG",{});var vha=s(t6e);F9r=r(vha,"xlm-roberta"),vha.forEach(t),T9r=r(beo," \u2014 "),fre=n(beo,"A",{href:!0});var Fha=s(fre);M9r=r(Fha,"XLMRobertaForQuestionAnswering"),Fha.forEach(t),E9r=r(beo," (XLM-RoBERTa model)"),beo.forEach(t),C9r=i(X),d3=n(X,"LI",{});var veo=s(d3);a6e=n(veo,"STRONG",{});var Tha=s(a6e);w9r=r(Tha,"xlm-roberta-xl"),Tha.forEach(t),A9r=r(veo," \u2014 "),gre=n(veo,"A",{href:!0});var Mha=s(gre);L9r=r(Mha,"XLMRobertaXLForQuestionAnswering"),Mha.forEach(t),y9r=r(veo," (XLM-RoBERTa-XL model)"),veo.forEach(t),x9r=i(X),m3=n(X,"LI",{});var Feo=s(m3);n6e=n(Feo,"STRONG",{});var Eha=s(n6e);$9r=r(Eha,"xlnet"),Eha.forEach(t),k9r=r(Feo," \u2014 "),hre=n(Feo,"A",{href:!0});var Cha=s(hre);S9r=r(Cha,"XLNetForQuestionAnsweringSimple"),Cha.forEach(t),R9r=r(Feo," (XLNet model)"),Feo.forEach(t),P9r=i(X),c3=n(X,"LI",{});var Teo=s(c3);s6e=n(Teo,"STRONG",{});var wha=s(s6e);B9r=r(wha,"yoso"),wha.forEach(t),I9r=r(Teo," \u2014 "),ure=n(Teo,"A",{href:!0});var Aha=s(ure);N9r=r(Aha,"YosoForQuestionAnswering"),Aha.forEach(t),q9r=r(Teo," (YOSO model)"),Teo.forEach(t),X.forEach(t),j9r=i(Oa),f3=n(Oa,"P",{});var Meo=s(f3);D9r=r(Meo,"The model is set in evaluation mode by default using "),l6e=n(Meo,"CODE",{});var Lha=s(l6e);G9r=r(Lha,"model.eval()"),Lha.forEach(t),O9r=r(Meo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i6e=n(Meo,"CODE",{});var yha=s(i6e);V9r=r(yha,"model.train()"),yha.forEach(t),Meo.forEach(t),X9r=i(Oa),T(g3.$$.fragment,Oa),Oa.forEach(t),ai.forEach(t),sdo=i(c),Tm=n(c,"H2",{class:!0});var xco=s(Tm);h3=n(xco,"A",{id:!0,class:!0,href:!0});var xha=s(h3);d6e=n(xha,"SPAN",{});var $ha=s(d6e);T(lR.$$.fragment,$ha),$ha.forEach(t),xha.forEach(t),z9r=i(xco),m6e=n(xco,"SPAN",{});var kha=s(m6e);Q9r=r(kha,"AutoModelForTableQuestionAnswering"),kha.forEach(t),xco.forEach(t),ldo=i(c),Yo=n(c,"DIV",{class:!0});var ni=s(Yo);T(iR.$$.fragment,ni),W9r=i(ni),Mm=n(ni,"P",{});var sge=s(Mm);U9r=r(sge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pre=n(sge,"A",{href:!0});var Sha=s(pre);H9r=r(Sha,"from_pretrained()"),Sha.forEach(t),J9r=r(sge," class method or the "),_re=n(sge,"A",{href:!0});var Rha=s(_re);Y9r=r(Rha,"from_config()"),Rha.forEach(t),Z9r=r(sge,` class
method.`),sge.forEach(t),K9r=i(ni),dR=n(ni,"P",{});var $co=s(dR);exr=r($co,"This class cannot be instantiated directly using "),c6e=n($co,"CODE",{});var Pha=s(c6e);oxr=r(Pha,"__init__()"),Pha.forEach(t),rxr=r($co," (throws an error)."),$co.forEach(t),txr=i(ni),Nt=n(ni,"DIV",{class:!0});var Dx=s(Nt);T(mR.$$.fragment,Dx),axr=i(Dx),f6e=n(Dx,"P",{});var Bha=s(f6e);nxr=r(Bha,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Bha.forEach(t),sxr=i(Dx),Em=n(Dx,"P",{});var lge=s(Em);lxr=r(lge,`Note:
Loading a model from its configuration file does `),g6e=n(lge,"STRONG",{});var Iha=s(g6e);ixr=r(Iha,"not"),Iha.forEach(t),dxr=r(lge,` load the model weights. It only affects the
model\u2019s configuration. Use `),bre=n(lge,"A",{href:!0});var Nha=s(bre);mxr=r(Nha,"from_pretrained()"),Nha.forEach(t),cxr=r(lge," to load the model weights."),lge.forEach(t),fxr=i(Dx),T(u3.$$.fragment,Dx),Dx.forEach(t),gxr=i(ni),uo=n(ni,"DIV",{class:!0});var Va=s(uo);T(cR.$$.fragment,Va),hxr=i(Va),h6e=n(Va,"P",{});var qha=s(h6e);uxr=r(qha,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qha.forEach(t),pxr=i(Va),Cn=n(Va,"P",{});var Gx=s(Cn);_xr=r(Gx,"The model class to instantiate is selected based on the "),u6e=n(Gx,"CODE",{});var jha=s(u6e);bxr=r(jha,"model_type"),jha.forEach(t),vxr=r(Gx,` property of the config object (either
passed as an argument or loaded from `),p6e=n(Gx,"CODE",{});var Dha=s(p6e);Fxr=r(Dha,"pretrained_model_name_or_path"),Dha.forEach(t),Txr=r(Gx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=n(Gx,"CODE",{});var Gha=s(_6e);Mxr=r(Gha,"pretrained_model_name_or_path"),Gha.forEach(t),Exr=r(Gx,":"),Gx.forEach(t),Cxr=i(Va),b6e=n(Va,"UL",{});var Oha=s(b6e);p3=n(Oha,"LI",{});var Eeo=s(p3);v6e=n(Eeo,"STRONG",{});var Vha=s(v6e);wxr=r(Vha,"tapas"),Vha.forEach(t),Axr=r(Eeo," \u2014 "),vre=n(Eeo,"A",{href:!0});var Xha=s(vre);Lxr=r(Xha,"TapasForQuestionAnswering"),Xha.forEach(t),yxr=r(Eeo," (TAPAS model)"),Eeo.forEach(t),Oha.forEach(t),xxr=i(Va),_3=n(Va,"P",{});var Ceo=s(_3);$xr=r(Ceo,"The model is set in evaluation mode by default using "),F6e=n(Ceo,"CODE",{});var zha=s(F6e);kxr=r(zha,"model.eval()"),zha.forEach(t),Sxr=r(Ceo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T6e=n(Ceo,"CODE",{});var Qha=s(T6e);Rxr=r(Qha,"model.train()"),Qha.forEach(t),Ceo.forEach(t),Pxr=i(Va),T(b3.$$.fragment,Va),Va.forEach(t),ni.forEach(t),ido=i(c),Cm=n(c,"H2",{class:!0});var kco=s(Cm);v3=n(kco,"A",{id:!0,class:!0,href:!0});var Wha=s(v3);M6e=n(Wha,"SPAN",{});var Uha=s(M6e);T(fR.$$.fragment,Uha),Uha.forEach(t),Wha.forEach(t),Bxr=i(kco),E6e=n(kco,"SPAN",{});var Hha=s(E6e);Ixr=r(Hha,"AutoModelForDocumentQuestionAnswering"),Hha.forEach(t),kco.forEach(t),ddo=i(c),Zo=n(c,"DIV",{class:!0});var si=s(Zo);T(gR.$$.fragment,si),Nxr=i(si),wm=n(si,"P",{});var ige=s(wm);qxr=r(ige,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Fre=n(ige,"A",{href:!0});var Jha=s(Fre);jxr=r(Jha,"from_pretrained()"),Jha.forEach(t),Dxr=r(ige," class method or the "),Tre=n(ige,"A",{href:!0});var Yha=s(Tre);Gxr=r(Yha,"from_config()"),Yha.forEach(t),Oxr=r(ige,` class
method.`),ige.forEach(t),Vxr=i(si),hR=n(si,"P",{});var Sco=s(hR);Xxr=r(Sco,"This class cannot be instantiated directly using "),C6e=n(Sco,"CODE",{});var Zha=s(C6e);zxr=r(Zha,"__init__()"),Zha.forEach(t),Qxr=r(Sco," (throws an error)."),Sco.forEach(t),Wxr=i(si),qt=n(si,"DIV",{class:!0});var Ox=s(qt);T(uR.$$.fragment,Ox),Uxr=i(Ox),w6e=n(Ox,"P",{});var Kha=s(w6e);Hxr=r(Kha,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),Kha.forEach(t),Jxr=i(Ox),Am=n(Ox,"P",{});var dge=s(Am);Yxr=r(dge,`Note:
Loading a model from its configuration file does `),A6e=n(dge,"STRONG",{});var eua=s(A6e);Zxr=r(eua,"not"),eua.forEach(t),Kxr=r(dge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=n(dge,"A",{href:!0});var oua=s(Mre);e$r=r(oua,"from_pretrained()"),oua.forEach(t),o$r=r(dge," to load the model weights."),dge.forEach(t),r$r=i(Ox),T(F3.$$.fragment,Ox),Ox.forEach(t),t$r=i(si),po=n(si,"DIV",{class:!0});var Xa=s(po);T(pR.$$.fragment,Xa),a$r=i(Xa),L6e=n(Xa,"P",{});var rua=s(L6e);n$r=r(rua,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),rua.forEach(t),s$r=i(Xa),wn=n(Xa,"P",{});var Vx=s(wn);l$r=r(Vx,"The model class to instantiate is selected based on the "),y6e=n(Vx,"CODE",{});var tua=s(y6e);i$r=r(tua,"model_type"),tua.forEach(t),d$r=r(Vx,` property of the config object (either
passed as an argument or loaded from `),x6e=n(Vx,"CODE",{});var aua=s(x6e);m$r=r(aua,"pretrained_model_name_or_path"),aua.forEach(t),c$r=r(Vx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=n(Vx,"CODE",{});var nua=s($6e);f$r=r(nua,"pretrained_model_name_or_path"),nua.forEach(t),g$r=r(Vx,":"),Vx.forEach(t),h$r=i(Xa),Lm=n(Xa,"UL",{});var mge=s(Lm);T3=n(mge,"LI",{});var weo=s(T3);k6e=n(weo,"STRONG",{});var sua=s(k6e);u$r=r(sua,"layoutlm"),sua.forEach(t),p$r=r(weo," \u2014 "),Ere=n(weo,"A",{href:!0});var lua=s(Ere);_$r=r(lua,"LayoutLMForQuestionAnswering"),lua.forEach(t),b$r=r(weo," (LayoutLM model)"),weo.forEach(t),v$r=i(mge),M3=n(mge,"LI",{});var Aeo=s(M3);S6e=n(Aeo,"STRONG",{});var iua=s(S6e);F$r=r(iua,"layoutlmv2"),iua.forEach(t),T$r=r(Aeo," \u2014 "),Cre=n(Aeo,"A",{href:!0});var dua=s(Cre);M$r=r(dua,"LayoutLMv2ForQuestionAnswering"),dua.forEach(t),E$r=r(Aeo," (LayoutLMv2 model)"),Aeo.forEach(t),C$r=i(mge),E3=n(mge,"LI",{});var Leo=s(E3);R6e=n(Leo,"STRONG",{});var mua=s(R6e);w$r=r(mua,"layoutlmv3"),mua.forEach(t),A$r=r(Leo," \u2014 "),wre=n(Leo,"A",{href:!0});var cua=s(wre);L$r=r(cua,"LayoutLMv3ForQuestionAnswering"),cua.forEach(t),y$r=r(Leo," (LayoutLMv3 model)"),Leo.forEach(t),mge.forEach(t),x$r=i(Xa),C3=n(Xa,"P",{});var yeo=s(C3);$$r=r(yeo,"The model is set in evaluation mode by default using "),P6e=n(yeo,"CODE",{});var fua=s(P6e);k$r=r(fua,"model.eval()"),fua.forEach(t),S$r=r(yeo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B6e=n(yeo,"CODE",{});var gua=s(B6e);R$r=r(gua,"model.train()"),gua.forEach(t),yeo.forEach(t),P$r=i(Xa),T(w3.$$.fragment,Xa),Xa.forEach(t),si.forEach(t),mdo=i(c),ym=n(c,"H2",{class:!0});var Rco=s(ym);A3=n(Rco,"A",{id:!0,class:!0,href:!0});var hua=s(A3);I6e=n(hua,"SPAN",{});var uua=s(I6e);T(_R.$$.fragment,uua),uua.forEach(t),hua.forEach(t),B$r=i(Rco),N6e=n(Rco,"SPAN",{});var pua=s(N6e);I$r=r(pua,"AutoModelForImageClassification"),pua.forEach(t),Rco.forEach(t),cdo=i(c),Ko=n(c,"DIV",{class:!0});var li=s(Ko);T(bR.$$.fragment,li),N$r=i(li),xm=n(li,"P",{});var cge=s(xm);q$r=r(cge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Are=n(cge,"A",{href:!0});var _ua=s(Are);j$r=r(_ua,"from_pretrained()"),_ua.forEach(t),D$r=r(cge," class method or the "),Lre=n(cge,"A",{href:!0});var bua=s(Lre);G$r=r(bua,"from_config()"),bua.forEach(t),O$r=r(cge,` class
method.`),cge.forEach(t),V$r=i(li),vR=n(li,"P",{});var Pco=s(vR);X$r=r(Pco,"This class cannot be instantiated directly using "),q6e=n(Pco,"CODE",{});var vua=s(q6e);z$r=r(vua,"__init__()"),vua.forEach(t),Q$r=r(Pco," (throws an error)."),Pco.forEach(t),W$r=i(li),jt=n(li,"DIV",{class:!0});var Xx=s(jt);T(FR.$$.fragment,Xx),U$r=i(Xx),j6e=n(Xx,"P",{});var Fua=s(j6e);H$r=r(Fua,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Fua.forEach(t),J$r=i(Xx),$m=n(Xx,"P",{});var fge=s($m);Y$r=r(fge,`Note:
Loading a model from its configuration file does `),D6e=n(fge,"STRONG",{});var Tua=s(D6e);Z$r=r(Tua,"not"),Tua.forEach(t),K$r=r(fge,` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=n(fge,"A",{href:!0});var Mua=s(yre);ekr=r(Mua,"from_pretrained()"),Mua.forEach(t),okr=r(fge," to load the model weights."),fge.forEach(t),rkr=i(Xx),T(L3.$$.fragment,Xx),Xx.forEach(t),tkr=i(li),_o=n(li,"DIV",{class:!0});var za=s(_o);T(TR.$$.fragment,za),akr=i(za),G6e=n(za,"P",{});var Eua=s(G6e);nkr=r(Eua,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Eua.forEach(t),skr=i(za),An=n(za,"P",{});var zx=s(An);lkr=r(zx,"The model class to instantiate is selected based on the "),O6e=n(zx,"CODE",{});var Cua=s(O6e);ikr=r(Cua,"model_type"),Cua.forEach(t),dkr=r(zx,` property of the config object (either
passed as an argument or loaded from `),V6e=n(zx,"CODE",{});var wua=s(V6e);mkr=r(wua,"pretrained_model_name_or_path"),wua.forEach(t),ckr=r(zx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(zx,"CODE",{});var Aua=s(X6e);fkr=r(Aua,"pretrained_model_name_or_path"),Aua.forEach(t),gkr=r(zx,":"),zx.forEach(t),hkr=i(za),Fe=n(za,"UL",{});var Te=s(Fe);y3=n(Te,"LI",{});var xeo=s(y3);z6e=n(xeo,"STRONG",{});var Lua=s(z6e);ukr=r(Lua,"beit"),Lua.forEach(t),pkr=r(xeo," \u2014 "),xre=n(xeo,"A",{href:!0});var yua=s(xre);_kr=r(yua,"BeitForImageClassification"),yua.forEach(t),bkr=r(xeo," (BEiT model)"),xeo.forEach(t),vkr=i(Te),x3=n(Te,"LI",{});var $eo=s(x3);Q6e=n($eo,"STRONG",{});var xua=s(Q6e);Fkr=r(xua,"convnext"),xua.forEach(t),Tkr=r($eo," \u2014 "),$re=n($eo,"A",{href:!0});var $ua=s($re);Mkr=r($ua,"ConvNextForImageClassification"),$ua.forEach(t),Ekr=r($eo," (ConvNeXT model)"),$eo.forEach(t),Ckr=i(Te),$3=n(Te,"LI",{});var keo=s($3);W6e=n(keo,"STRONG",{});var kua=s(W6e);wkr=r(kua,"cvt"),kua.forEach(t),Akr=r(keo," \u2014 "),kre=n(keo,"A",{href:!0});var Sua=s(kre);Lkr=r(Sua,"CvtForImageClassification"),Sua.forEach(t),ykr=r(keo," (CvT model)"),keo.forEach(t),xkr=i(Te),k3=n(Te,"LI",{});var Seo=s(k3);U6e=n(Seo,"STRONG",{});var Rua=s(U6e);$kr=r(Rua,"data2vec-vision"),Rua.forEach(t),kkr=r(Seo," \u2014 "),Sre=n(Seo,"A",{href:!0});var Pua=s(Sre);Skr=r(Pua,"Data2VecVisionForImageClassification"),Pua.forEach(t),Rkr=r(Seo," (Data2VecVision model)"),Seo.forEach(t),Pkr=i(Te),jl=n(Te,"LI",{});var Xq=s(jl);H6e=n(Xq,"STRONG",{});var Bua=s(H6e);Bkr=r(Bua,"deit"),Bua.forEach(t),Ikr=r(Xq," \u2014 "),Rre=n(Xq,"A",{href:!0});var Iua=s(Rre);Nkr=r(Iua,"DeiTForImageClassification"),Iua.forEach(t),qkr=r(Xq," or "),Pre=n(Xq,"A",{href:!0});var Nua=s(Pre);jkr=r(Nua,"DeiTForImageClassificationWithTeacher"),Nua.forEach(t),Dkr=r(Xq," (DeiT model)"),Xq.forEach(t),Gkr=i(Te),S3=n(Te,"LI",{});var Reo=s(S3);J6e=n(Reo,"STRONG",{});var qua=s(J6e);Okr=r(qua,"imagegpt"),qua.forEach(t),Vkr=r(Reo," \u2014 "),Bre=n(Reo,"A",{href:!0});var jua=s(Bre);Xkr=r(jua,"ImageGPTForImageClassification"),jua.forEach(t),zkr=r(Reo," (ImageGPT model)"),Reo.forEach(t),Qkr=i(Te),Dl=n(Te,"LI",{});var zq=s(Dl);Y6e=n(zq,"STRONG",{});var Dua=s(Y6e);Wkr=r(Dua,"levit"),Dua.forEach(t),Ukr=r(zq," \u2014 "),Ire=n(zq,"A",{href:!0});var Gua=s(Ire);Hkr=r(Gua,"LevitForImageClassification"),Gua.forEach(t),Jkr=r(zq," or "),Nre=n(zq,"A",{href:!0});var Oua=s(Nre);Ykr=r(Oua,"LevitForImageClassificationWithTeacher"),Oua.forEach(t),Zkr=r(zq," (LeViT model)"),zq.forEach(t),Kkr=i(Te),R3=n(Te,"LI",{});var Peo=s(R3);Z6e=n(Peo,"STRONG",{});var Vua=s(Z6e);eSr=r(Vua,"mobilenet_v2"),Vua.forEach(t),oSr=r(Peo," \u2014 "),qre=n(Peo,"A",{href:!0});var Xua=s(qre);rSr=r(Xua,"MobileNetV2ForImageClassification"),Xua.forEach(t),tSr=r(Peo," (MobileNetV2 model)"),Peo.forEach(t),aSr=i(Te),P3=n(Te,"LI",{});var Beo=s(P3);K6e=n(Beo,"STRONG",{});var zua=s(K6e);nSr=r(zua,"mobilevit"),zua.forEach(t),sSr=r(Beo," \u2014 "),jre=n(Beo,"A",{href:!0});var Qua=s(jre);lSr=r(Qua,"MobileViTForImageClassification"),Qua.forEach(t),iSr=r(Beo," (MobileViT model)"),Beo.forEach(t),dSr=i(Te),Dt=n(Te,"LI",{});var eg=s(Dt);e7e=n(eg,"STRONG",{});var Wua=s(e7e);mSr=r(Wua,"perceiver"),Wua.forEach(t),cSr=r(eg," \u2014 "),Dre=n(eg,"A",{href:!0});var Uua=s(Dre);fSr=r(Uua,"PerceiverForImageClassificationLearned"),Uua.forEach(t),gSr=r(eg," or "),Gre=n(eg,"A",{href:!0});var Hua=s(Gre);hSr=r(Hua,"PerceiverForImageClassificationFourier"),Hua.forEach(t),uSr=r(eg," or "),Ore=n(eg,"A",{href:!0});var Jua=s(Ore);pSr=r(Jua,"PerceiverForImageClassificationConvProcessing"),Jua.forEach(t),_Sr=r(eg," (Perceiver model)"),eg.forEach(t),bSr=i(Te),B3=n(Te,"LI",{});var Ieo=s(B3);o7e=n(Ieo,"STRONG",{});var Yua=s(o7e);vSr=r(Yua,"poolformer"),Yua.forEach(t),FSr=r(Ieo," \u2014 "),Vre=n(Ieo,"A",{href:!0});var Zua=s(Vre);TSr=r(Zua,"PoolFormerForImageClassification"),Zua.forEach(t),MSr=r(Ieo," (PoolFormer model)"),Ieo.forEach(t),ESr=i(Te),I3=n(Te,"LI",{});var Neo=s(I3);r7e=n(Neo,"STRONG",{});var Kua=s(r7e);CSr=r(Kua,"regnet"),Kua.forEach(t),wSr=r(Neo," \u2014 "),Xre=n(Neo,"A",{href:!0});var epa=s(Xre);ASr=r(epa,"RegNetForImageClassification"),epa.forEach(t),LSr=r(Neo," (RegNet model)"),Neo.forEach(t),ySr=i(Te),N3=n(Te,"LI",{});var qeo=s(N3);t7e=n(qeo,"STRONG",{});var opa=s(t7e);xSr=r(opa,"resnet"),opa.forEach(t),$Sr=r(qeo," \u2014 "),zre=n(qeo,"A",{href:!0});var rpa=s(zre);kSr=r(rpa,"ResNetForImageClassification"),rpa.forEach(t),SSr=r(qeo," (ResNet model)"),qeo.forEach(t),RSr=i(Te),q3=n(Te,"LI",{});var jeo=s(q3);a7e=n(jeo,"STRONG",{});var tpa=s(a7e);PSr=r(tpa,"segformer"),tpa.forEach(t),BSr=r(jeo," \u2014 "),Qre=n(jeo,"A",{href:!0});var apa=s(Qre);ISr=r(apa,"SegformerForImageClassification"),apa.forEach(t),NSr=r(jeo," (SegFormer model)"),jeo.forEach(t),qSr=i(Te),j3=n(Te,"LI",{});var Deo=s(j3);n7e=n(Deo,"STRONG",{});var npa=s(n7e);jSr=r(npa,"swin"),npa.forEach(t),DSr=r(Deo," \u2014 "),Wre=n(Deo,"A",{href:!0});var spa=s(Wre);GSr=r(spa,"SwinForImageClassification"),spa.forEach(t),OSr=r(Deo," (Swin Transformer model)"),Deo.forEach(t),VSr=i(Te),D3=n(Te,"LI",{});var Geo=s(D3);s7e=n(Geo,"STRONG",{});var lpa=s(s7e);XSr=r(lpa,"swinv2"),lpa.forEach(t),zSr=r(Geo," \u2014 "),Ure=n(Geo,"A",{href:!0});var ipa=s(Ure);QSr=r(ipa,"Swinv2ForImageClassification"),ipa.forEach(t),WSr=r(Geo," (Swin Transformer V2 model)"),Geo.forEach(t),USr=i(Te),G3=n(Te,"LI",{});var Oeo=s(G3);l7e=n(Oeo,"STRONG",{});var dpa=s(l7e);HSr=r(dpa,"van"),dpa.forEach(t),JSr=r(Oeo," \u2014 "),Hre=n(Oeo,"A",{href:!0});var mpa=s(Hre);YSr=r(mpa,"VanForImageClassification"),mpa.forEach(t),ZSr=r(Oeo," (VAN model)"),Oeo.forEach(t),KSr=i(Te),O3=n(Te,"LI",{});var Veo=s(O3);i7e=n(Veo,"STRONG",{});var cpa=s(i7e);eRr=r(cpa,"vit"),cpa.forEach(t),oRr=r(Veo," \u2014 "),Jre=n(Veo,"A",{href:!0});var fpa=s(Jre);rRr=r(fpa,"ViTForImageClassification"),fpa.forEach(t),tRr=r(Veo," (ViT model)"),Veo.forEach(t),aRr=i(Te),V3=n(Te,"LI",{});var Xeo=s(V3);d7e=n(Xeo,"STRONG",{});var gpa=s(d7e);nRr=r(gpa,"vit_msn"),gpa.forEach(t),sRr=r(Xeo," \u2014 "),Yre=n(Xeo,"A",{href:!0});var hpa=s(Yre);lRr=r(hpa,"ViTMSNForImageClassification"),hpa.forEach(t),iRr=r(Xeo," (ViTMSN model)"),Xeo.forEach(t),Te.forEach(t),dRr=i(za),X3=n(za,"P",{});var zeo=s(X3);mRr=r(zeo,"The model is set in evaluation mode by default using "),m7e=n(zeo,"CODE",{});var upa=s(m7e);cRr=r(upa,"model.eval()"),upa.forEach(t),fRr=r(zeo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c7e=n(zeo,"CODE",{});var ppa=s(c7e);gRr=r(ppa,"model.train()"),ppa.forEach(t),zeo.forEach(t),hRr=i(za),T(z3.$$.fragment,za),za.forEach(t),li.forEach(t),fdo=i(c),km=n(c,"H2",{class:!0});var Bco=s(km);Q3=n(Bco,"A",{id:!0,class:!0,href:!0});var _pa=s(Q3);f7e=n(_pa,"SPAN",{});var bpa=s(f7e);T(MR.$$.fragment,bpa),bpa.forEach(t),_pa.forEach(t),uRr=i(Bco),g7e=n(Bco,"SPAN",{});var vpa=s(g7e);pRr=r(vpa,"AutoModelForVideoClassification"),vpa.forEach(t),Bco.forEach(t),gdo=i(c),er=n(c,"DIV",{class:!0});var ii=s(er);T(ER.$$.fragment,ii),_Rr=i(ii),Sm=n(ii,"P",{});var gge=s(Sm);bRr=r(gge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),Zre=n(gge,"A",{href:!0});var Fpa=s(Zre);vRr=r(Fpa,"from_pretrained()"),Fpa.forEach(t),FRr=r(gge," class method or the "),Kre=n(gge,"A",{href:!0});var Tpa=s(Kre);TRr=r(Tpa,"from_config()"),Tpa.forEach(t),MRr=r(gge,` class
method.`),gge.forEach(t),ERr=i(ii),CR=n(ii,"P",{});var Ico=s(CR);CRr=r(Ico,"This class cannot be instantiated directly using "),h7e=n(Ico,"CODE",{});var Mpa=s(h7e);wRr=r(Mpa,"__init__()"),Mpa.forEach(t),ARr=r(Ico," (throws an error)."),Ico.forEach(t),LRr=i(ii),Gt=n(ii,"DIV",{class:!0});var Qx=s(Gt);T(wR.$$.fragment,Qx),yRr=i(Qx),u7e=n(Qx,"P",{});var Epa=s(u7e);xRr=r(Epa,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Epa.forEach(t),$Rr=i(Qx),Rm=n(Qx,"P",{});var hge=s(Rm);kRr=r(hge,`Note:
Loading a model from its configuration file does `),p7e=n(hge,"STRONG",{});var Cpa=s(p7e);SRr=r(Cpa,"not"),Cpa.forEach(t),RRr=r(hge,` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=n(hge,"A",{href:!0});var wpa=s(ete);PRr=r(wpa,"from_pretrained()"),wpa.forEach(t),BRr=r(hge," to load the model weights."),hge.forEach(t),IRr=i(Qx),T(W3.$$.fragment,Qx),Qx.forEach(t),NRr=i(ii),bo=n(ii,"DIV",{class:!0});var Qa=s(bo);T(AR.$$.fragment,Qa),qRr=i(Qa),_7e=n(Qa,"P",{});var Apa=s(_7e);jRr=r(Apa,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Apa.forEach(t),DRr=i(Qa),Ln=n(Qa,"P",{});var Wx=s(Ln);GRr=r(Wx,"The model class to instantiate is selected based on the "),b7e=n(Wx,"CODE",{});var Lpa=s(b7e);ORr=r(Lpa,"model_type"),Lpa.forEach(t),VRr=r(Wx,` property of the config object (either
passed as an argument or loaded from `),v7e=n(Wx,"CODE",{});var ypa=s(v7e);XRr=r(ypa,"pretrained_model_name_or_path"),ypa.forEach(t),zRr=r(Wx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=n(Wx,"CODE",{});var xpa=s(F7e);QRr=r(xpa,"pretrained_model_name_or_path"),xpa.forEach(t),WRr=r(Wx,":"),Wx.forEach(t),URr=i(Qa),T7e=n(Qa,"UL",{});var $pa=s(T7e);U3=n($pa,"LI",{});var Qeo=s(U3);M7e=n(Qeo,"STRONG",{});var kpa=s(M7e);HRr=r(kpa,"videomae"),kpa.forEach(t),JRr=r(Qeo," \u2014 "),ote=n(Qeo,"A",{href:!0});var Spa=s(ote);YRr=r(Spa,"VideoMAEForVideoClassification"),Spa.forEach(t),ZRr=r(Qeo," (VideoMAE model)"),Qeo.forEach(t),$pa.forEach(t),KRr=i(Qa),H3=n(Qa,"P",{});var Weo=s(H3);ePr=r(Weo,"The model is set in evaluation mode by default using "),E7e=n(Weo,"CODE",{});var Rpa=s(E7e);oPr=r(Rpa,"model.eval()"),Rpa.forEach(t),rPr=r(Weo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C7e=n(Weo,"CODE",{});var Ppa=s(C7e);tPr=r(Ppa,"model.train()"),Ppa.forEach(t),Weo.forEach(t),aPr=i(Qa),T(J3.$$.fragment,Qa),Qa.forEach(t),ii.forEach(t),hdo=i(c),Pm=n(c,"H2",{class:!0});var Nco=s(Pm);Y3=n(Nco,"A",{id:!0,class:!0,href:!0});var Bpa=s(Y3);w7e=n(Bpa,"SPAN",{});var Ipa=s(w7e);T(LR.$$.fragment,Ipa),Ipa.forEach(t),Bpa.forEach(t),nPr=i(Nco),A7e=n(Nco,"SPAN",{});var Npa=s(A7e);sPr=r(Npa,"AutoModelForVision2Seq"),Npa.forEach(t),Nco.forEach(t),udo=i(c),or=n(c,"DIV",{class:!0});var di=s(or);T(yR.$$.fragment,di),lPr=i(di),Bm=n(di,"P",{});var uge=s(Bm);iPr=r(uge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rte=n(uge,"A",{href:!0});var qpa=s(rte);dPr=r(qpa,"from_pretrained()"),qpa.forEach(t),mPr=r(uge," class method or the "),tte=n(uge,"A",{href:!0});var jpa=s(tte);cPr=r(jpa,"from_config()"),jpa.forEach(t),fPr=r(uge,` class
method.`),uge.forEach(t),gPr=i(di),xR=n(di,"P",{});var qco=s(xR);hPr=r(qco,"This class cannot be instantiated directly using "),L7e=n(qco,"CODE",{});var Dpa=s(L7e);uPr=r(Dpa,"__init__()"),Dpa.forEach(t),pPr=r(qco," (throws an error)."),qco.forEach(t),_Pr=i(di),Ot=n(di,"DIV",{class:!0});var Ux=s(Ot);T($R.$$.fragment,Ux),bPr=i(Ux),y7e=n(Ux,"P",{});var Gpa=s(y7e);vPr=r(Gpa,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Gpa.forEach(t),FPr=i(Ux),Im=n(Ux,"P",{});var pge=s(Im);TPr=r(pge,`Note:
Loading a model from its configuration file does `),x7e=n(pge,"STRONG",{});var Opa=s(x7e);MPr=r(Opa,"not"),Opa.forEach(t),EPr=r(pge,` load the model weights. It only affects the
model\u2019s configuration. Use `),ate=n(pge,"A",{href:!0});var Vpa=s(ate);CPr=r(Vpa,"from_pretrained()"),Vpa.forEach(t),wPr=r(pge," to load the model weights."),pge.forEach(t),APr=i(Ux),T(Z3.$$.fragment,Ux),Ux.forEach(t),LPr=i(di),vo=n(di,"DIV",{class:!0});var Wa=s(vo);T(kR.$$.fragment,Wa),yPr=i(Wa),$7e=n(Wa,"P",{});var Xpa=s($7e);xPr=r(Xpa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xpa.forEach(t),$Pr=i(Wa),yn=n(Wa,"P",{});var Hx=s(yn);kPr=r(Hx,"The model class to instantiate is selected based on the "),k7e=n(Hx,"CODE",{});var zpa=s(k7e);SPr=r(zpa,"model_type"),zpa.forEach(t),RPr=r(Hx,` property of the config object (either
passed as an argument or loaded from `),S7e=n(Hx,"CODE",{});var Qpa=s(S7e);PPr=r(Qpa,"pretrained_model_name_or_path"),Qpa.forEach(t),BPr=r(Hx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R7e=n(Hx,"CODE",{});var Wpa=s(R7e);IPr=r(Wpa,"pretrained_model_name_or_path"),Wpa.forEach(t),NPr=r(Hx,":"),Hx.forEach(t),qPr=i(Wa),P7e=n(Wa,"UL",{});var Upa=s(P7e);K3=n(Upa,"LI",{});var Ueo=s(K3);B7e=n(Ueo,"STRONG",{});var Hpa=s(B7e);jPr=r(Hpa,"vision-encoder-decoder"),Hpa.forEach(t),DPr=r(Ueo," \u2014 "),nte=n(Ueo,"A",{href:!0});var Jpa=s(nte);GPr=r(Jpa,"VisionEncoderDecoderModel"),Jpa.forEach(t),OPr=r(Ueo," (Vision Encoder decoder model)"),Ueo.forEach(t),Upa.forEach(t),VPr=i(Wa),e5=n(Wa,"P",{});var Heo=s(e5);XPr=r(Heo,"The model is set in evaluation mode by default using "),I7e=n(Heo,"CODE",{});var Ypa=s(I7e);zPr=r(Ypa,"model.eval()"),Ypa.forEach(t),QPr=r(Heo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N7e=n(Heo,"CODE",{});var Zpa=s(N7e);WPr=r(Zpa,"model.train()"),Zpa.forEach(t),Heo.forEach(t),UPr=i(Wa),T(o5.$$.fragment,Wa),Wa.forEach(t),di.forEach(t),pdo=i(c),Nm=n(c,"H2",{class:!0});var jco=s(Nm);r5=n(jco,"A",{id:!0,class:!0,href:!0});var Kpa=s(r5);q7e=n(Kpa,"SPAN",{});var e_a=s(q7e);T(SR.$$.fragment,e_a),e_a.forEach(t),Kpa.forEach(t),HPr=i(jco),j7e=n(jco,"SPAN",{});var o_a=s(j7e);JPr=r(o_a,"AutoModelForVisualQuestionAnswering"),o_a.forEach(t),jco.forEach(t),_do=i(c),rr=n(c,"DIV",{class:!0});var mi=s(rr);T(RR.$$.fragment,mi),YPr=i(mi),qm=n(mi,"P",{});var _ge=s(qm);ZPr=r(_ge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),ste=n(_ge,"A",{href:!0});var r_a=s(ste);KPr=r(r_a,"from_pretrained()"),r_a.forEach(t),eBr=r(_ge," class method or the "),lte=n(_ge,"A",{href:!0});var t_a=s(lte);oBr=r(t_a,"from_config()"),t_a.forEach(t),rBr=r(_ge,` class
method.`),_ge.forEach(t),tBr=i(mi),PR=n(mi,"P",{});var Dco=s(PR);aBr=r(Dco,"This class cannot be instantiated directly using "),D7e=n(Dco,"CODE",{});var a_a=s(D7e);nBr=r(a_a,"__init__()"),a_a.forEach(t),sBr=r(Dco," (throws an error)."),Dco.forEach(t),lBr=i(mi),Vt=n(mi,"DIV",{class:!0});var Jx=s(Vt);T(BR.$$.fragment,Jx),iBr=i(Jx),G7e=n(Jx,"P",{});var n_a=s(G7e);dBr=r(n_a,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),n_a.forEach(t),mBr=i(Jx),jm=n(Jx,"P",{});var bge=s(jm);cBr=r(bge,`Note:
Loading a model from its configuration file does `),O7e=n(bge,"STRONG",{});var s_a=s(O7e);fBr=r(s_a,"not"),s_a.forEach(t),gBr=r(bge,` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=n(bge,"A",{href:!0});var l_a=s(ite);hBr=r(l_a,"from_pretrained()"),l_a.forEach(t),uBr=r(bge," to load the model weights."),bge.forEach(t),pBr=i(Jx),T(t5.$$.fragment,Jx),Jx.forEach(t),_Br=i(mi),Fo=n(mi,"DIV",{class:!0});var Ua=s(Fo);T(IR.$$.fragment,Ua),bBr=i(Ua),V7e=n(Ua,"P",{});var i_a=s(V7e);vBr=r(i_a,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),i_a.forEach(t),FBr=i(Ua),xn=n(Ua,"P",{});var Yx=s(xn);TBr=r(Yx,"The model class to instantiate is selected based on the "),X7e=n(Yx,"CODE",{});var d_a=s(X7e);MBr=r(d_a,"model_type"),d_a.forEach(t),EBr=r(Yx,` property of the config object (either
passed as an argument or loaded from `),z7e=n(Yx,"CODE",{});var m_a=s(z7e);CBr=r(m_a,"pretrained_model_name_or_path"),m_a.forEach(t),wBr=r(Yx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=n(Yx,"CODE",{});var c_a=s(Q7e);ABr=r(c_a,"pretrained_model_name_or_path"),c_a.forEach(t),LBr=r(Yx,":"),Yx.forEach(t),yBr=i(Ua),W7e=n(Ua,"UL",{});var f_a=s(W7e);a5=n(f_a,"LI",{});var Jeo=s(a5);U7e=n(Jeo,"STRONG",{});var g_a=s(U7e);xBr=r(g_a,"vilt"),g_a.forEach(t),$Br=r(Jeo," \u2014 "),dte=n(Jeo,"A",{href:!0});var h_a=s(dte);kBr=r(h_a,"ViltForQuestionAnswering"),h_a.forEach(t),SBr=r(Jeo," (ViLT model)"),Jeo.forEach(t),f_a.forEach(t),RBr=i(Ua),n5=n(Ua,"P",{});var Yeo=s(n5);PBr=r(Yeo,"The model is set in evaluation mode by default using "),H7e=n(Yeo,"CODE",{});var u_a=s(H7e);BBr=r(u_a,"model.eval()"),u_a.forEach(t),IBr=r(Yeo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J7e=n(Yeo,"CODE",{});var p_a=s(J7e);NBr=r(p_a,"model.train()"),p_a.forEach(t),Yeo.forEach(t),qBr=i(Ua),T(s5.$$.fragment,Ua),Ua.forEach(t),mi.forEach(t),bdo=i(c),Dm=n(c,"H2",{class:!0});var Gco=s(Dm);l5=n(Gco,"A",{id:!0,class:!0,href:!0});var __a=s(l5);Y7e=n(__a,"SPAN",{});var b_a=s(Y7e);T(NR.$$.fragment,b_a),b_a.forEach(t),__a.forEach(t),jBr=i(Gco),Z7e=n(Gco,"SPAN",{});var v_a=s(Z7e);DBr=r(v_a,"AutoModelForAudioClassification"),v_a.forEach(t),Gco.forEach(t),vdo=i(c),tr=n(c,"DIV",{class:!0});var ci=s(tr);T(qR.$$.fragment,ci),GBr=i(ci),Gm=n(ci,"P",{});var vge=s(Gm);OBr=r(vge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),mte=n(vge,"A",{href:!0});var F_a=s(mte);VBr=r(F_a,"from_pretrained()"),F_a.forEach(t),XBr=r(vge," class method or the "),cte=n(vge,"A",{href:!0});var T_a=s(cte);zBr=r(T_a,"from_config()"),T_a.forEach(t),QBr=r(vge,` class
method.`),vge.forEach(t),WBr=i(ci),jR=n(ci,"P",{});var Oco=s(jR);UBr=r(Oco,"This class cannot be instantiated directly using "),K7e=n(Oco,"CODE",{});var M_a=s(K7e);HBr=r(M_a,"__init__()"),M_a.forEach(t),JBr=r(Oco," (throws an error)."),Oco.forEach(t),YBr=i(ci),Xt=n(ci,"DIV",{class:!0});var Zx=s(Xt);T(DR.$$.fragment,Zx),ZBr=i(Zx),e8e=n(Zx,"P",{});var E_a=s(e8e);KBr=r(E_a,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),E_a.forEach(t),eIr=i(Zx),Om=n(Zx,"P",{});var Fge=s(Om);oIr=r(Fge,`Note:
Loading a model from its configuration file does `),o8e=n(Fge,"STRONG",{});var C_a=s(o8e);rIr=r(C_a,"not"),C_a.forEach(t),tIr=r(Fge,` load the model weights. It only affects the
model\u2019s configuration. Use `),fte=n(Fge,"A",{href:!0});var w_a=s(fte);aIr=r(w_a,"from_pretrained()"),w_a.forEach(t),nIr=r(Fge," to load the model weights."),Fge.forEach(t),sIr=i(Zx),T(i5.$$.fragment,Zx),Zx.forEach(t),lIr=i(ci),To=n(ci,"DIV",{class:!0});var Ha=s(To);T(GR.$$.fragment,Ha),iIr=i(Ha),r8e=n(Ha,"P",{});var A_a=s(r8e);dIr=r(A_a,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),A_a.forEach(t),mIr=i(Ha),$n=n(Ha,"P",{});var Kx=s($n);cIr=r(Kx,"The model class to instantiate is selected based on the "),t8e=n(Kx,"CODE",{});var L_a=s(t8e);fIr=r(L_a,"model_type"),L_a.forEach(t),gIr=r(Kx,` property of the config object (either
passed as an argument or loaded from `),a8e=n(Kx,"CODE",{});var y_a=s(a8e);hIr=r(y_a,"pretrained_model_name_or_path"),y_a.forEach(t),uIr=r(Kx,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n8e=n(Kx,"CODE",{});var x_a=s(n8e);pIr=r(x_a,"pretrained_model_name_or_path"),x_a.forEach(t),_Ir=r(Kx,":"),Kx.forEach(t),bIr=i(Ha),Ne=n(Ha,"UL",{});var Je=s(Ne);d5=n(Je,"LI",{});var Zeo=s(d5);s8e=n(Zeo,"STRONG",{});var $_a=s(s8e);vIr=r($_a,"data2vec-audio"),$_a.forEach(t),FIr=r(Zeo," \u2014 "),gte=n(Zeo,"A",{href:!0});var k_a=s(gte);TIr=r(k_a,"Data2VecAudioForSequenceClassification"),k_a.forEach(t),MIr=r(Zeo," (Data2VecAudio model)"),Zeo.forEach(t),EIr=i(Je),m5=n(Je,"LI",{});var Keo=s(m5);l8e=n(Keo,"STRONG",{});var S_a=s(l8e);CIr=r(S_a,"hubert"),S_a.forEach(t),wIr=r(Keo," \u2014 "),hte=n(Keo,"A",{href:!0});var R_a=s(hte);AIr=r(R_a,"HubertForSequenceClassification"),R_a.forEach(t),LIr=r(Keo," (Hubert model)"),Keo.forEach(t),yIr=i(Je),c5=n(Je,"LI",{});var eoo=s(c5);i8e=n(eoo,"STRONG",{});var P_a=s(i8e);xIr=r(P_a,"sew"),P_a.forEach(t),$Ir=r(eoo," \u2014 "),ute=n(eoo,"A",{href:!0});var B_a=s(ute);kIr=r(B_a,"SEWForSequenceClassification"),B_a.forEach(t),SIr=r(eoo," (SEW model)"),eoo.forEach(t),RIr=i(Je),f5=n(Je,"LI",{});var ooo=s(f5);d8e=n(ooo,"STRONG",{});var I_a=s(d8e);PIr=r(I_a,"sew-d"),I_a.forEach(t),BIr=r(ooo," \u2014 "),pte=n(ooo,"A",{href:!0});var N_a=s(pte);IIr=r(N_a,"SEWDForSequenceClassification"),N_a.forEach(t),NIr=r(ooo," (SEW-D model)"),ooo.forEach(t),qIr=i(Je),g5=n(Je,"LI",{});var roo=s(g5);m8e=n(roo,"STRONG",{});var q_a=s(m8e);jIr=r(q_a,"unispeech"),q_a.forEach(t),DIr=r(roo," \u2014 "),_te=n(roo,"A",{href:!0});var j_a=s(_te);GIr=r(j_a,"UniSpeechForSequenceClassification"),j_a.forEach(t),OIr=r(roo," (UniSpeech model)"),roo.forEach(t),VIr=i(Je),h5=n(Je,"LI",{});var too=s(h5);c8e=n(too,"STRONG",{});var D_a=s(c8e);XIr=r(D_a,"unispeech-sat"),D_a.forEach(t),zIr=r(too," \u2014 "),bte=n(too,"A",{href:!0});var G_a=s(bte);QIr=r(G_a,"UniSpeechSatForSequenceClassification"),G_a.forEach(t),WIr=r(too," (UniSpeechSat model)"),too.forEach(t),UIr=i(Je),u5=n(Je,"LI",{});var aoo=s(u5);f8e=n(aoo,"STRONG",{});var O_a=s(f8e);HIr=r(O_a,"wav2vec2"),O_a.forEach(t),JIr=r(aoo," \u2014 "),vte=n(aoo,"A",{href:!0});var V_a=s(vte);YIr=r(V_a,"Wav2Vec2ForSequenceClassification"),V_a.forEach(t),ZIr=r(aoo," (Wav2Vec2 model)"),aoo.forEach(t),KIr=i(Je),p5=n(Je,"LI",{});var noo=s(p5);g8e=n(noo,"STRONG",{});var X_a=s(g8e);eNr=r(X_a,"wav2vec2-conformer"),X_a.forEach(t),oNr=r(noo," \u2014 "),Fte=n(noo,"A",{href:!0});var z_a=s(Fte);rNr=r(z_a,"Wav2Vec2ConformerForSequenceClassification"),z_a.forEach(t),tNr=r(noo," (Wav2Vec2-Conformer model)"),noo.forEach(t),aNr=i(Je),_5=n(Je,"LI",{});var soo=s(_5);h8e=n(soo,"STRONG",{});var Q_a=s(h8e);nNr=r(Q_a,"wavlm"),Q_a.forEach(t),sNr=r(soo," \u2014 "),Tte=n(soo,"A",{href:!0});var W_a=s(Tte);lNr=r(W_a,"WavLMForSequenceClassification"),W_a.forEach(t),iNr=r(soo," (WavLM model)"),soo.forEach(t),Je.forEach(t),dNr=i(Ha),b5=n(Ha,"P",{});var loo=s(b5);mNr=r(loo,"The model is set in evaluation mode by default using "),u8e=n(loo,"CODE",{});var U_a=s(u8e);cNr=r(U_a,"model.eval()"),U_a.forEach(t),fNr=r(loo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p8e=n(loo,"CODE",{});var H_a=s(p8e);gNr=r(H_a,"model.train()"),H_a.forEach(t),loo.forEach(t),hNr=i(Ha),T(v5.$$.fragment,Ha),Ha.forEach(t),ci.forEach(t),Fdo=i(c),Vm=n(c,"H2",{class:!0});var Vco=s(Vm);F5=n(Vco,"A",{id:!0,class:!0,href:!0});var J_a=s(F5);_8e=n(J_a,"SPAN",{});var Y_a=s(_8e);T(OR.$$.fragment,Y_a),Y_a.forEach(t),J_a.forEach(t),uNr=i(Vco),b8e=n(Vco,"SPAN",{});var Z_a=s(b8e);pNr=r(Z_a,"AutoModelForAudioFrameClassification"),Z_a.forEach(t),Vco.forEach(t),Tdo=i(c),ar=n(c,"DIV",{class:!0});var fi=s(ar);T(VR.$$.fragment,fi),_Nr=i(fi),Xm=n(fi,"P",{});var Tge=s(Xm);bNr=r(Tge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Mte=n(Tge,"A",{href:!0});var K_a=s(Mte);vNr=r(K_a,"from_pretrained()"),K_a.forEach(t),FNr=r(Tge," class method or the "),Ete=n(Tge,"A",{href:!0});var e1a=s(Ete);TNr=r(e1a,"from_config()"),e1a.forEach(t),MNr=r(Tge,` class
method.`),Tge.forEach(t),ENr=i(fi),XR=n(fi,"P",{});var Xco=s(XR);CNr=r(Xco,"This class cannot be instantiated directly using "),v8e=n(Xco,"CODE",{});var o1a=s(v8e);wNr=r(o1a,"__init__()"),o1a.forEach(t),ANr=r(Xco," (throws an error)."),Xco.forEach(t),LNr=i(fi),zt=n(fi,"DIV",{class:!0});var e$=s(zt);T(zR.$$.fragment,e$),yNr=i(e$),F8e=n(e$,"P",{});var r1a=s(F8e);xNr=r(r1a,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),r1a.forEach(t),$Nr=i(e$),zm=n(e$,"P",{});var Mge=s(zm);kNr=r(Mge,`Note:
Loading a model from its configuration file does `),T8e=n(Mge,"STRONG",{});var t1a=s(T8e);SNr=r(t1a,"not"),t1a.forEach(t),RNr=r(Mge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cte=n(Mge,"A",{href:!0});var a1a=s(Cte);PNr=r(a1a,"from_pretrained()"),a1a.forEach(t),BNr=r(Mge," to load the model weights."),Mge.forEach(t),INr=i(e$),T(T5.$$.fragment,e$),e$.forEach(t),NNr=i(fi),Mo=n(fi,"DIV",{class:!0});var Ja=s(Mo);T(QR.$$.fragment,Ja),qNr=i(Ja),M8e=n(Ja,"P",{});var n1a=s(M8e);jNr=r(n1a,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),n1a.forEach(t),DNr=i(Ja),kn=n(Ja,"P",{});var o$=s(kn);GNr=r(o$,"The model class to instantiate is selected based on the "),E8e=n(o$,"CODE",{});var s1a=s(E8e);ONr=r(s1a,"model_type"),s1a.forEach(t),VNr=r(o$,` property of the config object (either
passed as an argument or loaded from `),C8e=n(o$,"CODE",{});var l1a=s(C8e);XNr=r(l1a,"pretrained_model_name_or_path"),l1a.forEach(t),zNr=r(o$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=n(o$,"CODE",{});var i1a=s(w8e);QNr=r(i1a,"pretrained_model_name_or_path"),i1a.forEach(t),WNr=r(o$,":"),o$.forEach(t),UNr=i(Ja),Ft=n(Ja,"UL",{});var gi=s(Ft);M5=n(gi,"LI",{});var ioo=s(M5);A8e=n(ioo,"STRONG",{});var d1a=s(A8e);HNr=r(d1a,"data2vec-audio"),d1a.forEach(t),JNr=r(ioo," \u2014 "),wte=n(ioo,"A",{href:!0});var m1a=s(wte);YNr=r(m1a,"Data2VecAudioForAudioFrameClassification"),m1a.forEach(t),ZNr=r(ioo," (Data2VecAudio model)"),ioo.forEach(t),KNr=i(gi),E5=n(gi,"LI",{});var doo=s(E5);L8e=n(doo,"STRONG",{});var c1a=s(L8e);eqr=r(c1a,"unispeech-sat"),c1a.forEach(t),oqr=r(doo," \u2014 "),Ate=n(doo,"A",{href:!0});var f1a=s(Ate);rqr=r(f1a,"UniSpeechSatForAudioFrameClassification"),f1a.forEach(t),tqr=r(doo," (UniSpeechSat model)"),doo.forEach(t),aqr=i(gi),C5=n(gi,"LI",{});var moo=s(C5);y8e=n(moo,"STRONG",{});var g1a=s(y8e);nqr=r(g1a,"wav2vec2"),g1a.forEach(t),sqr=r(moo," \u2014 "),Lte=n(moo,"A",{href:!0});var h1a=s(Lte);lqr=r(h1a,"Wav2Vec2ForAudioFrameClassification"),h1a.forEach(t),iqr=r(moo," (Wav2Vec2 model)"),moo.forEach(t),dqr=i(gi),w5=n(gi,"LI",{});var coo=s(w5);x8e=n(coo,"STRONG",{});var u1a=s(x8e);mqr=r(u1a,"wav2vec2-conformer"),u1a.forEach(t),cqr=r(coo," \u2014 "),yte=n(coo,"A",{href:!0});var p1a=s(yte);fqr=r(p1a,"Wav2Vec2ConformerForAudioFrameClassification"),p1a.forEach(t),gqr=r(coo," (Wav2Vec2-Conformer model)"),coo.forEach(t),hqr=i(gi),A5=n(gi,"LI",{});var foo=s(A5);$8e=n(foo,"STRONG",{});var _1a=s($8e);uqr=r(_1a,"wavlm"),_1a.forEach(t),pqr=r(foo," \u2014 "),xte=n(foo,"A",{href:!0});var b1a=s(xte);_qr=r(b1a,"WavLMForAudioFrameClassification"),b1a.forEach(t),bqr=r(foo," (WavLM model)"),foo.forEach(t),gi.forEach(t),vqr=i(Ja),L5=n(Ja,"P",{});var goo=s(L5);Fqr=r(goo,"The model is set in evaluation mode by default using "),k8e=n(goo,"CODE",{});var v1a=s(k8e);Tqr=r(v1a,"model.eval()"),v1a.forEach(t),Mqr=r(goo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S8e=n(goo,"CODE",{});var F1a=s(S8e);Eqr=r(F1a,"model.train()"),F1a.forEach(t),goo.forEach(t),Cqr=i(Ja),T(y5.$$.fragment,Ja),Ja.forEach(t),fi.forEach(t),Mdo=i(c),Qm=n(c,"H2",{class:!0});var zco=s(Qm);x5=n(zco,"A",{id:!0,class:!0,href:!0});var T1a=s(x5);R8e=n(T1a,"SPAN",{});var M1a=s(R8e);T(WR.$$.fragment,M1a),M1a.forEach(t),T1a.forEach(t),wqr=i(zco),P8e=n(zco,"SPAN",{});var E1a=s(P8e);Aqr=r(E1a,"AutoModelForCTC"),E1a.forEach(t),zco.forEach(t),Edo=i(c),nr=n(c,"DIV",{class:!0});var hi=s(nr);T(UR.$$.fragment,hi),Lqr=i(hi),Wm=n(hi,"P",{});var Ege=s(Wm);yqr=r(Ege,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),$te=n(Ege,"A",{href:!0});var C1a=s($te);xqr=r(C1a,"from_pretrained()"),C1a.forEach(t),$qr=r(Ege," class method or the "),kte=n(Ege,"A",{href:!0});var w1a=s(kte);kqr=r(w1a,"from_config()"),w1a.forEach(t),Sqr=r(Ege,` class
method.`),Ege.forEach(t),Rqr=i(hi),HR=n(hi,"P",{});var Qco=s(HR);Pqr=r(Qco,"This class cannot be instantiated directly using "),B8e=n(Qco,"CODE",{});var A1a=s(B8e);Bqr=r(A1a,"__init__()"),A1a.forEach(t),Iqr=r(Qco," (throws an error)."),Qco.forEach(t),Nqr=i(hi),Qt=n(hi,"DIV",{class:!0});var r$=s(Qt);T(JR.$$.fragment,r$),qqr=i(r$),I8e=n(r$,"P",{});var L1a=s(I8e);jqr=r(L1a,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),L1a.forEach(t),Dqr=i(r$),Um=n(r$,"P",{});var Cge=s(Um);Gqr=r(Cge,`Note:
Loading a model from its configuration file does `),N8e=n(Cge,"STRONG",{});var y1a=s(N8e);Oqr=r(y1a,"not"),y1a.forEach(t),Vqr=r(Cge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ste=n(Cge,"A",{href:!0});var x1a=s(Ste);Xqr=r(x1a,"from_pretrained()"),x1a.forEach(t),zqr=r(Cge," to load the model weights."),Cge.forEach(t),Qqr=i(r$),T($5.$$.fragment,r$),r$.forEach(t),Wqr=i(hi),Eo=n(hi,"DIV",{class:!0});var Ya=s(Eo);T(YR.$$.fragment,Ya),Uqr=i(Ya),q8e=n(Ya,"P",{});var $1a=s(q8e);Hqr=r($1a,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),$1a.forEach(t),Jqr=i(Ya),Sn=n(Ya,"P",{});var t$=s(Sn);Yqr=r(t$,"The model class to instantiate is selected based on the "),j8e=n(t$,"CODE",{});var k1a=s(j8e);Zqr=r(k1a,"model_type"),k1a.forEach(t),Kqr=r(t$,` property of the config object (either
passed as an argument or loaded from `),D8e=n(t$,"CODE",{});var S1a=s(D8e);ejr=r(S1a,"pretrained_model_name_or_path"),S1a.forEach(t),ojr=r(t$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G8e=n(t$,"CODE",{});var R1a=s(G8e);rjr=r(R1a,"pretrained_model_name_or_path"),R1a.forEach(t),tjr=r(t$,":"),t$.forEach(t),ajr=i(Ya),xe=n(Ya,"UL",{});var qe=s(xe);k5=n(qe,"LI",{});var hoo=s(k5);O8e=n(hoo,"STRONG",{});var P1a=s(O8e);njr=r(P1a,"data2vec-audio"),P1a.forEach(t),sjr=r(hoo," \u2014 "),Rte=n(hoo,"A",{href:!0});var B1a=s(Rte);ljr=r(B1a,"Data2VecAudioForCTC"),B1a.forEach(t),ijr=r(hoo," (Data2VecAudio model)"),hoo.forEach(t),djr=i(qe),S5=n(qe,"LI",{});var uoo=s(S5);V8e=n(uoo,"STRONG",{});var I1a=s(V8e);mjr=r(I1a,"hubert"),I1a.forEach(t),cjr=r(uoo," \u2014 "),Pte=n(uoo,"A",{href:!0});var N1a=s(Pte);fjr=r(N1a,"HubertForCTC"),N1a.forEach(t),gjr=r(uoo," (Hubert model)"),uoo.forEach(t),hjr=i(qe),R5=n(qe,"LI",{});var poo=s(R5);X8e=n(poo,"STRONG",{});var q1a=s(X8e);ujr=r(q1a,"mctct"),q1a.forEach(t),pjr=r(poo," \u2014 "),Bte=n(poo,"A",{href:!0});var j1a=s(Bte);_jr=r(j1a,"MCTCTForCTC"),j1a.forEach(t),bjr=r(poo," (M-CTC-T model)"),poo.forEach(t),vjr=i(qe),P5=n(qe,"LI",{});var _oo=s(P5);z8e=n(_oo,"STRONG",{});var D1a=s(z8e);Fjr=r(D1a,"sew"),D1a.forEach(t),Tjr=r(_oo," \u2014 "),Ite=n(_oo,"A",{href:!0});var G1a=s(Ite);Mjr=r(G1a,"SEWForCTC"),G1a.forEach(t),Ejr=r(_oo," (SEW model)"),_oo.forEach(t),Cjr=i(qe),B5=n(qe,"LI",{});var boo=s(B5);Q8e=n(boo,"STRONG",{});var O1a=s(Q8e);wjr=r(O1a,"sew-d"),O1a.forEach(t),Ajr=r(boo," \u2014 "),Nte=n(boo,"A",{href:!0});var V1a=s(Nte);Ljr=r(V1a,"SEWDForCTC"),V1a.forEach(t),yjr=r(boo," (SEW-D model)"),boo.forEach(t),xjr=i(qe),I5=n(qe,"LI",{});var voo=s(I5);W8e=n(voo,"STRONG",{});var X1a=s(W8e);$jr=r(X1a,"unispeech"),X1a.forEach(t),kjr=r(voo," \u2014 "),qte=n(voo,"A",{href:!0});var z1a=s(qte);Sjr=r(z1a,"UniSpeechForCTC"),z1a.forEach(t),Rjr=r(voo," (UniSpeech model)"),voo.forEach(t),Pjr=i(qe),N5=n(qe,"LI",{});var Foo=s(N5);U8e=n(Foo,"STRONG",{});var Q1a=s(U8e);Bjr=r(Q1a,"unispeech-sat"),Q1a.forEach(t),Ijr=r(Foo," \u2014 "),jte=n(Foo,"A",{href:!0});var W1a=s(jte);Njr=r(W1a,"UniSpeechSatForCTC"),W1a.forEach(t),qjr=r(Foo," (UniSpeechSat model)"),Foo.forEach(t),jjr=i(qe),q5=n(qe,"LI",{});var Too=s(q5);H8e=n(Too,"STRONG",{});var U1a=s(H8e);Djr=r(U1a,"wav2vec2"),U1a.forEach(t),Gjr=r(Too," \u2014 "),Dte=n(Too,"A",{href:!0});var H1a=s(Dte);Ojr=r(H1a,"Wav2Vec2ForCTC"),H1a.forEach(t),Vjr=r(Too," (Wav2Vec2 model)"),Too.forEach(t),Xjr=i(qe),j5=n(qe,"LI",{});var Moo=s(j5);J8e=n(Moo,"STRONG",{});var J1a=s(J8e);zjr=r(J1a,"wav2vec2-conformer"),J1a.forEach(t),Qjr=r(Moo," \u2014 "),Gte=n(Moo,"A",{href:!0});var Y1a=s(Gte);Wjr=r(Y1a,"Wav2Vec2ConformerForCTC"),Y1a.forEach(t),Ujr=r(Moo," (Wav2Vec2-Conformer model)"),Moo.forEach(t),Hjr=i(qe),D5=n(qe,"LI",{});var Eoo=s(D5);Y8e=n(Eoo,"STRONG",{});var Z1a=s(Y8e);Jjr=r(Z1a,"wavlm"),Z1a.forEach(t),Yjr=r(Eoo," \u2014 "),Ote=n(Eoo,"A",{href:!0});var K1a=s(Ote);Zjr=r(K1a,"WavLMForCTC"),K1a.forEach(t),Kjr=r(Eoo," (WavLM model)"),Eoo.forEach(t),qe.forEach(t),eDr=i(Ya),G5=n(Ya,"P",{});var Coo=s(G5);oDr=r(Coo,"The model is set in evaluation mode by default using "),Z8e=n(Coo,"CODE",{});var e2a=s(Z8e);rDr=r(e2a,"model.eval()"),e2a.forEach(t),tDr=r(Coo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K8e=n(Coo,"CODE",{});var o2a=s(K8e);aDr=r(o2a,"model.train()"),o2a.forEach(t),Coo.forEach(t),nDr=i(Ya),T(O5.$$.fragment,Ya),Ya.forEach(t),hi.forEach(t),Cdo=i(c),Hm=n(c,"H2",{class:!0});var Wco=s(Hm);V5=n(Wco,"A",{id:!0,class:!0,href:!0});var r2a=s(V5);eLe=n(r2a,"SPAN",{});var t2a=s(eLe);T(ZR.$$.fragment,t2a),t2a.forEach(t),r2a.forEach(t),sDr=i(Wco),oLe=n(Wco,"SPAN",{});var a2a=s(oLe);lDr=r(a2a,"AutoModelForSpeechSeq2Seq"),a2a.forEach(t),Wco.forEach(t),wdo=i(c),sr=n(c,"DIV",{class:!0});var ui=s(sr);T(KR.$$.fragment,ui),iDr=i(ui),Jm=n(ui,"P",{});var wge=s(Jm);dDr=r(wge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Vte=n(wge,"A",{href:!0});var n2a=s(Vte);mDr=r(n2a,"from_pretrained()"),n2a.forEach(t),cDr=r(wge," class method or the "),Xte=n(wge,"A",{href:!0});var s2a=s(Xte);fDr=r(s2a,"from_config()"),s2a.forEach(t),gDr=r(wge,` class
method.`),wge.forEach(t),hDr=i(ui),eP=n(ui,"P",{});var Uco=s(eP);uDr=r(Uco,"This class cannot be instantiated directly using "),rLe=n(Uco,"CODE",{});var l2a=s(rLe);pDr=r(l2a,"__init__()"),l2a.forEach(t),_Dr=r(Uco," (throws an error)."),Uco.forEach(t),bDr=i(ui),Wt=n(ui,"DIV",{class:!0});var a$=s(Wt);T(oP.$$.fragment,a$),vDr=i(a$),tLe=n(a$,"P",{});var i2a=s(tLe);FDr=r(i2a,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),i2a.forEach(t),TDr=i(a$),Ym=n(a$,"P",{});var Age=s(Ym);MDr=r(Age,`Note:
Loading a model from its configuration file does `),aLe=n(Age,"STRONG",{});var d2a=s(aLe);EDr=r(d2a,"not"),d2a.forEach(t),CDr=r(Age,` load the model weights. It only affects the
model\u2019s configuration. Use `),zte=n(Age,"A",{href:!0});var m2a=s(zte);wDr=r(m2a,"from_pretrained()"),m2a.forEach(t),ADr=r(Age," to load the model weights."),Age.forEach(t),LDr=i(a$),T(X5.$$.fragment,a$),a$.forEach(t),yDr=i(ui),Co=n(ui,"DIV",{class:!0});var Za=s(Co);T(rP.$$.fragment,Za),xDr=i(Za),nLe=n(Za,"P",{});var c2a=s(nLe);$Dr=r(c2a,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),c2a.forEach(t),kDr=i(Za),Rn=n(Za,"P",{});var n$=s(Rn);SDr=r(n$,"The model class to instantiate is selected based on the "),sLe=n(n$,"CODE",{});var f2a=s(sLe);RDr=r(f2a,"model_type"),f2a.forEach(t),PDr=r(n$,` property of the config object (either
passed as an argument or loaded from `),lLe=n(n$,"CODE",{});var g2a=s(lLe);BDr=r(g2a,"pretrained_model_name_or_path"),g2a.forEach(t),IDr=r(n$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iLe=n(n$,"CODE",{});var h2a=s(iLe);NDr=r(h2a,"pretrained_model_name_or_path"),h2a.forEach(t),qDr=r(n$,":"),n$.forEach(t),jDr=i(Za),Zm=n(Za,"UL",{});var Lge=s(Zm);z5=n(Lge,"LI",{});var woo=s(z5);dLe=n(woo,"STRONG",{});var u2a=s(dLe);DDr=r(u2a,"speech-encoder-decoder"),u2a.forEach(t),GDr=r(woo," \u2014 "),Qte=n(woo,"A",{href:!0});var p2a=s(Qte);ODr=r(p2a,"SpeechEncoderDecoderModel"),p2a.forEach(t),VDr=r(woo," (Speech Encoder decoder model)"),woo.forEach(t),XDr=i(Lge),Q5=n(Lge,"LI",{});var Aoo=s(Q5);mLe=n(Aoo,"STRONG",{});var _2a=s(mLe);zDr=r(_2a,"speech_to_text"),_2a.forEach(t),QDr=r(Aoo," \u2014 "),Wte=n(Aoo,"A",{href:!0});var b2a=s(Wte);WDr=r(b2a,"Speech2TextForConditionalGeneration"),b2a.forEach(t),UDr=r(Aoo," (Speech2Text model)"),Aoo.forEach(t),HDr=i(Lge),W5=n(Lge,"LI",{});var Loo=s(W5);cLe=n(Loo,"STRONG",{});var v2a=s(cLe);JDr=r(v2a,"whisper"),v2a.forEach(t),YDr=r(Loo," \u2014 "),Ute=n(Loo,"A",{href:!0});var F2a=s(Ute);ZDr=r(F2a,"WhisperForConditionalGeneration"),F2a.forEach(t),KDr=r(Loo," (Whisper model)"),Loo.forEach(t),Lge.forEach(t),eGr=i(Za),U5=n(Za,"P",{});var yoo=s(U5);oGr=r(yoo,"The model is set in evaluation mode by default using "),fLe=n(yoo,"CODE",{});var T2a=s(fLe);rGr=r(T2a,"model.eval()"),T2a.forEach(t),tGr=r(yoo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gLe=n(yoo,"CODE",{});var M2a=s(gLe);aGr=r(M2a,"model.train()"),M2a.forEach(t),yoo.forEach(t),nGr=i(Za),T(H5.$$.fragment,Za),Za.forEach(t),ui.forEach(t),Ado=i(c),Km=n(c,"H2",{class:!0});var Hco=s(Km);J5=n(Hco,"A",{id:!0,class:!0,href:!0});var E2a=s(J5);hLe=n(E2a,"SPAN",{});var C2a=s(hLe);T(tP.$$.fragment,C2a),C2a.forEach(t),E2a.forEach(t),sGr=i(Hco),uLe=n(Hco,"SPAN",{});var w2a=s(uLe);lGr=r(w2a,"AutoModelForAudioXVector"),w2a.forEach(t),Hco.forEach(t),Ldo=i(c),lr=n(c,"DIV",{class:!0});var pi=s(lr);T(aP.$$.fragment,pi),iGr=i(pi),ec=n(pi,"P",{});var yge=s(ec);dGr=r(yge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Hte=n(yge,"A",{href:!0});var A2a=s(Hte);mGr=r(A2a,"from_pretrained()"),A2a.forEach(t),cGr=r(yge," class method or the "),Jte=n(yge,"A",{href:!0});var L2a=s(Jte);fGr=r(L2a,"from_config()"),L2a.forEach(t),gGr=r(yge,` class
method.`),yge.forEach(t),hGr=i(pi),nP=n(pi,"P",{});var Jco=s(nP);uGr=r(Jco,"This class cannot be instantiated directly using "),pLe=n(Jco,"CODE",{});var y2a=s(pLe);pGr=r(y2a,"__init__()"),y2a.forEach(t),_Gr=r(Jco," (throws an error)."),Jco.forEach(t),bGr=i(pi),Ut=n(pi,"DIV",{class:!0});var s$=s(Ut);T(sP.$$.fragment,s$),vGr=i(s$),_Le=n(s$,"P",{});var x2a=s(_Le);FGr=r(x2a,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),x2a.forEach(t),TGr=i(s$),oc=n(s$,"P",{});var xge=s(oc);MGr=r(xge,`Note:
Loading a model from its configuration file does `),bLe=n(xge,"STRONG",{});var $2a=s(bLe);EGr=r($2a,"not"),$2a.forEach(t),CGr=r(xge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yte=n(xge,"A",{href:!0});var k2a=s(Yte);wGr=r(k2a,"from_pretrained()"),k2a.forEach(t),AGr=r(xge," to load the model weights."),xge.forEach(t),LGr=i(s$),T(Y5.$$.fragment,s$),s$.forEach(t),yGr=i(pi),wo=n(pi,"DIV",{class:!0});var Ka=s(wo);T(lP.$$.fragment,Ka),xGr=i(Ka),vLe=n(Ka,"P",{});var S2a=s(vLe);$Gr=r(S2a,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),S2a.forEach(t),kGr=i(Ka),Pn=n(Ka,"P",{});var l$=s(Pn);SGr=r(l$,"The model class to instantiate is selected based on the "),FLe=n(l$,"CODE",{});var R2a=s(FLe);RGr=r(R2a,"model_type"),R2a.forEach(t),PGr=r(l$,` property of the config object (either
passed as an argument or loaded from `),TLe=n(l$,"CODE",{});var P2a=s(TLe);BGr=r(P2a,"pretrained_model_name_or_path"),P2a.forEach(t),IGr=r(l$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MLe=n(l$,"CODE",{});var B2a=s(MLe);NGr=r(B2a,"pretrained_model_name_or_path"),B2a.forEach(t),qGr=r(l$,":"),l$.forEach(t),jGr=i(Ka),Tt=n(Ka,"UL",{});var _i=s(Tt);Z5=n(_i,"LI",{});var xoo=s(Z5);ELe=n(xoo,"STRONG",{});var I2a=s(ELe);DGr=r(I2a,"data2vec-audio"),I2a.forEach(t),GGr=r(xoo," \u2014 "),Zte=n(xoo,"A",{href:!0});var N2a=s(Zte);OGr=r(N2a,"Data2VecAudioForXVector"),N2a.forEach(t),VGr=r(xoo," (Data2VecAudio model)"),xoo.forEach(t),XGr=i(_i),K5=n(_i,"LI",{});var $oo=s(K5);CLe=n($oo,"STRONG",{});var q2a=s(CLe);zGr=r(q2a,"unispeech-sat"),q2a.forEach(t),QGr=r($oo," \u2014 "),Kte=n($oo,"A",{href:!0});var j2a=s(Kte);WGr=r(j2a,"UniSpeechSatForXVector"),j2a.forEach(t),UGr=r($oo," (UniSpeechSat model)"),$oo.forEach(t),HGr=i(_i),e0=n(_i,"LI",{});var koo=s(e0);wLe=n(koo,"STRONG",{});var D2a=s(wLe);JGr=r(D2a,"wav2vec2"),D2a.forEach(t),YGr=r(koo," \u2014 "),eae=n(koo,"A",{href:!0});var G2a=s(eae);ZGr=r(G2a,"Wav2Vec2ForXVector"),G2a.forEach(t),KGr=r(koo," (Wav2Vec2 model)"),koo.forEach(t),eOr=i(_i),o0=n(_i,"LI",{});var Soo=s(o0);ALe=n(Soo,"STRONG",{});var O2a=s(ALe);oOr=r(O2a,"wav2vec2-conformer"),O2a.forEach(t),rOr=r(Soo," \u2014 "),oae=n(Soo,"A",{href:!0});var V2a=s(oae);tOr=r(V2a,"Wav2Vec2ConformerForXVector"),V2a.forEach(t),aOr=r(Soo," (Wav2Vec2-Conformer model)"),Soo.forEach(t),nOr=i(_i),r0=n(_i,"LI",{});var Roo=s(r0);LLe=n(Roo,"STRONG",{});var X2a=s(LLe);sOr=r(X2a,"wavlm"),X2a.forEach(t),lOr=r(Roo," \u2014 "),rae=n(Roo,"A",{href:!0});var z2a=s(rae);iOr=r(z2a,"WavLMForXVector"),z2a.forEach(t),dOr=r(Roo," (WavLM model)"),Roo.forEach(t),_i.forEach(t),mOr=i(Ka),t0=n(Ka,"P",{});var Poo=s(t0);cOr=r(Poo,"The model is set in evaluation mode by default using "),yLe=n(Poo,"CODE",{});var Q2a=s(yLe);fOr=r(Q2a,"model.eval()"),Q2a.forEach(t),gOr=r(Poo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xLe=n(Poo,"CODE",{});var W2a=s(xLe);hOr=r(W2a,"model.train()"),W2a.forEach(t),Poo.forEach(t),uOr=i(Ka),T(a0.$$.fragment,Ka),Ka.forEach(t),pi.forEach(t),ydo=i(c),rc=n(c,"H2",{class:!0});var Yco=s(rc);n0=n(Yco,"A",{id:!0,class:!0,href:!0});var U2a=s(n0);$Le=n(U2a,"SPAN",{});var H2a=s($Le);T(iP.$$.fragment,H2a),H2a.forEach(t),U2a.forEach(t),pOr=i(Yco),kLe=n(Yco,"SPAN",{});var J2a=s(kLe);_Or=r(J2a,"AutoModelForMaskedImageModeling"),J2a.forEach(t),Yco.forEach(t),xdo=i(c),ir=n(c,"DIV",{class:!0});var bi=s(ir);T(dP.$$.fragment,bi),bOr=i(bi),tc=n(bi,"P",{});var $ge=s(tc);vOr=r($ge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),tae=n($ge,"A",{href:!0});var Y2a=s(tae);FOr=r(Y2a,"from_pretrained()"),Y2a.forEach(t),TOr=r($ge," class method or the "),aae=n($ge,"A",{href:!0});var Z2a=s(aae);MOr=r(Z2a,"from_config()"),Z2a.forEach(t),EOr=r($ge,` class
method.`),$ge.forEach(t),COr=i(bi),mP=n(bi,"P",{});var Zco=s(mP);wOr=r(Zco,"This class cannot be instantiated directly using "),SLe=n(Zco,"CODE",{});var K2a=s(SLe);AOr=r(K2a,"__init__()"),K2a.forEach(t),LOr=r(Zco," (throws an error)."),Zco.forEach(t),yOr=i(bi),Ht=n(bi,"DIV",{class:!0});var i$=s(Ht);T(cP.$$.fragment,i$),xOr=i(i$),RLe=n(i$,"P",{});var eba=s(RLe);$Or=r(eba,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),eba.forEach(t),kOr=i(i$),ac=n(i$,"P",{});var kge=s(ac);SOr=r(kge,`Note:
Loading a model from its configuration file does `),PLe=n(kge,"STRONG",{});var oba=s(PLe);ROr=r(oba,"not"),oba.forEach(t),POr=r(kge,` load the model weights. It only affects the
model\u2019s configuration. Use `),nae=n(kge,"A",{href:!0});var rba=s(nae);BOr=r(rba,"from_pretrained()"),rba.forEach(t),IOr=r(kge," to load the model weights."),kge.forEach(t),NOr=i(i$),T(s0.$$.fragment,i$),i$.forEach(t),qOr=i(bi),Ao=n(bi,"DIV",{class:!0});var en=s(Ao);T(fP.$$.fragment,en),jOr=i(en),BLe=n(en,"P",{});var tba=s(BLe);DOr=r(tba,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tba.forEach(t),GOr=i(en),Bn=n(en,"P",{});var d$=s(Bn);OOr=r(d$,"The model class to instantiate is selected based on the "),ILe=n(d$,"CODE",{});var aba=s(ILe);VOr=r(aba,"model_type"),aba.forEach(t),XOr=r(d$,` property of the config object (either
passed as an argument or loaded from `),NLe=n(d$,"CODE",{});var nba=s(NLe);zOr=r(nba,"pretrained_model_name_or_path"),nba.forEach(t),QOr=r(d$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qLe=n(d$,"CODE",{});var sba=s(qLe);WOr=r(sba,"pretrained_model_name_or_path"),sba.forEach(t),UOr=r(d$,":"),d$.forEach(t),HOr=i(en),In=n(en,"UL",{});var m$=s(In);l0=n(m$,"LI",{});var Boo=s(l0);jLe=n(Boo,"STRONG",{});var lba=s(jLe);JOr=r(lba,"deit"),lba.forEach(t),YOr=r(Boo," \u2014 "),sae=n(Boo,"A",{href:!0});var iba=s(sae);ZOr=r(iba,"DeiTForMaskedImageModeling"),iba.forEach(t),KOr=r(Boo," (DeiT model)"),Boo.forEach(t),eVr=i(m$),i0=n(m$,"LI",{});var Ioo=s(i0);DLe=n(Ioo,"STRONG",{});var dba=s(DLe);oVr=r(dba,"swin"),dba.forEach(t),rVr=r(Ioo," \u2014 "),lae=n(Ioo,"A",{href:!0});var mba=s(lae);tVr=r(mba,"SwinForMaskedImageModeling"),mba.forEach(t),aVr=r(Ioo," (Swin Transformer model)"),Ioo.forEach(t),nVr=i(m$),d0=n(m$,"LI",{});var Noo=s(d0);GLe=n(Noo,"STRONG",{});var cba=s(GLe);sVr=r(cba,"swinv2"),cba.forEach(t),lVr=r(Noo," \u2014 "),iae=n(Noo,"A",{href:!0});var fba=s(iae);iVr=r(fba,"Swinv2ForMaskedImageModeling"),fba.forEach(t),dVr=r(Noo," (Swin Transformer V2 model)"),Noo.forEach(t),mVr=i(m$),m0=n(m$,"LI",{});var qoo=s(m0);OLe=n(qoo,"STRONG",{});var gba=s(OLe);cVr=r(gba,"vit"),gba.forEach(t),fVr=r(qoo," \u2014 "),dae=n(qoo,"A",{href:!0});var hba=s(dae);gVr=r(hba,"ViTForMaskedImageModeling"),hba.forEach(t),hVr=r(qoo," (ViT model)"),qoo.forEach(t),m$.forEach(t),uVr=i(en),c0=n(en,"P",{});var joo=s(c0);pVr=r(joo,"The model is set in evaluation mode by default using "),VLe=n(joo,"CODE",{});var uba=s(VLe);_Vr=r(uba,"model.eval()"),uba.forEach(t),bVr=r(joo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),XLe=n(joo,"CODE",{});var pba=s(XLe);vVr=r(pba,"model.train()"),pba.forEach(t),joo.forEach(t),FVr=i(en),T(f0.$$.fragment,en),en.forEach(t),bi.forEach(t),$do=i(c),nc=n(c,"H2",{class:!0});var Kco=s(nc);g0=n(Kco,"A",{id:!0,class:!0,href:!0});var _ba=s(g0);zLe=n(_ba,"SPAN",{});var bba=s(zLe);T(gP.$$.fragment,bba),bba.forEach(t),_ba.forEach(t),TVr=i(Kco),QLe=n(Kco,"SPAN",{});var vba=s(QLe);MVr=r(vba,"AutoModelForObjectDetection"),vba.forEach(t),Kco.forEach(t),kdo=i(c),dr=n(c,"DIV",{class:!0});var vi=s(dr);T(hP.$$.fragment,vi),EVr=i(vi),sc=n(vi,"P",{});var Sge=s(sc);CVr=r(Sge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mae=n(Sge,"A",{href:!0});var Fba=s(mae);wVr=r(Fba,"from_pretrained()"),Fba.forEach(t),AVr=r(Sge," class method or the "),cae=n(Sge,"A",{href:!0});var Tba=s(cae);LVr=r(Tba,"from_config()"),Tba.forEach(t),yVr=r(Sge,` class
method.`),Sge.forEach(t),xVr=i(vi),uP=n(vi,"P",{});var efo=s(uP);$Vr=r(efo,"This class cannot be instantiated directly using "),WLe=n(efo,"CODE",{});var Mba=s(WLe);kVr=r(Mba,"__init__()"),Mba.forEach(t),SVr=r(efo," (throws an error)."),efo.forEach(t),RVr=i(vi),Jt=n(vi,"DIV",{class:!0});var c$=s(Jt);T(pP.$$.fragment,c$),PVr=i(c$),ULe=n(c$,"P",{});var Eba=s(ULe);BVr=r(Eba,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Eba.forEach(t),IVr=i(c$),lc=n(c$,"P",{});var Rge=s(lc);NVr=r(Rge,`Note:
Loading a model from its configuration file does `),HLe=n(Rge,"STRONG",{});var Cba=s(HLe);qVr=r(Cba,"not"),Cba.forEach(t),jVr=r(Rge,` load the model weights. It only affects the
model\u2019s configuration. Use `),fae=n(Rge,"A",{href:!0});var wba=s(fae);DVr=r(wba,"from_pretrained()"),wba.forEach(t),GVr=r(Rge," to load the model weights."),Rge.forEach(t),OVr=i(c$),T(h0.$$.fragment,c$),c$.forEach(t),VVr=i(vi),Lo=n(vi,"DIV",{class:!0});var on=s(Lo);T(_P.$$.fragment,on),XVr=i(on),JLe=n(on,"P",{});var Aba=s(JLe);zVr=r(Aba,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Aba.forEach(t),QVr=i(on),Nn=n(on,"P",{});var f$=s(Nn);WVr=r(f$,"The model class to instantiate is selected based on the "),YLe=n(f$,"CODE",{});var Lba=s(YLe);UVr=r(Lba,"model_type"),Lba.forEach(t),HVr=r(f$,` property of the config object (either
passed as an argument or loaded from `),ZLe=n(f$,"CODE",{});var yba=s(ZLe);JVr=r(yba,"pretrained_model_name_or_path"),yba.forEach(t),YVr=r(f$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KLe=n(f$,"CODE",{});var xba=s(KLe);ZVr=r(xba,"pretrained_model_name_or_path"),xba.forEach(t),KVr=r(f$,":"),f$.forEach(t),eXr=i(on),Mt=n(on,"UL",{});var Fi=s(Mt);u0=n(Fi,"LI",{});var Doo=s(u0);eye=n(Doo,"STRONG",{});var $ba=s(eye);oXr=r($ba,"conditional_detr"),$ba.forEach(t),rXr=r(Doo," \u2014 "),gae=n(Doo,"A",{href:!0});var kba=s(gae);tXr=r(kba,"ConditionalDetrForObjectDetection"),kba.forEach(t),aXr=r(Doo," (Conditional DETR model)"),Doo.forEach(t),nXr=i(Fi),p0=n(Fi,"LI",{});var Goo=s(p0);oye=n(Goo,"STRONG",{});var Sba=s(oye);sXr=r(Sba,"deformable_detr"),Sba.forEach(t),lXr=r(Goo," \u2014 "),hae=n(Goo,"A",{href:!0});var Rba=s(hae);iXr=r(Rba,"DeformableDetrForObjectDetection"),Rba.forEach(t),dXr=r(Goo," (Deformable DETR model)"),Goo.forEach(t),mXr=i(Fi),_0=n(Fi,"LI",{});var Ooo=s(_0);rye=n(Ooo,"STRONG",{});var Pba=s(rye);cXr=r(Pba,"detr"),Pba.forEach(t),fXr=r(Ooo," \u2014 "),uae=n(Ooo,"A",{href:!0});var Bba=s(uae);gXr=r(Bba,"DetrForObjectDetection"),Bba.forEach(t),hXr=r(Ooo," (DETR model)"),Ooo.forEach(t),uXr=i(Fi),b0=n(Fi,"LI",{});var Voo=s(b0);tye=n(Voo,"STRONG",{});var Iba=s(tye);pXr=r(Iba,"table-transformer"),Iba.forEach(t),_Xr=r(Voo," \u2014 "),pae=n(Voo,"A",{href:!0});var Nba=s(pae);bXr=r(Nba,"TableTransformerForObjectDetection"),Nba.forEach(t),vXr=r(Voo," (Table Transformer model)"),Voo.forEach(t),FXr=i(Fi),v0=n(Fi,"LI",{});var Xoo=s(v0);aye=n(Xoo,"STRONG",{});var qba=s(aye);TXr=r(qba,"yolos"),qba.forEach(t),MXr=r(Xoo," \u2014 "),_ae=n(Xoo,"A",{href:!0});var jba=s(_ae);EXr=r(jba,"YolosForObjectDetection"),jba.forEach(t),CXr=r(Xoo," (YOLOS model)"),Xoo.forEach(t),Fi.forEach(t),wXr=i(on),F0=n(on,"P",{});var zoo=s(F0);AXr=r(zoo,"The model is set in evaluation mode by default using "),nye=n(zoo,"CODE",{});var Dba=s(nye);LXr=r(Dba,"model.eval()"),Dba.forEach(t),yXr=r(zoo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sye=n(zoo,"CODE",{});var Gba=s(sye);xXr=r(Gba,"model.train()"),Gba.forEach(t),zoo.forEach(t),$Xr=i(on),T(T0.$$.fragment,on),on.forEach(t),vi.forEach(t),Sdo=i(c),ic=n(c,"H2",{class:!0});var ofo=s(ic);M0=n(ofo,"A",{id:!0,class:!0,href:!0});var Oba=s(M0);lye=n(Oba,"SPAN",{});var Vba=s(lye);T(bP.$$.fragment,Vba),Vba.forEach(t),Oba.forEach(t),kXr=i(ofo),iye=n(ofo,"SPAN",{});var Xba=s(iye);SXr=r(Xba,"AutoModelForImageSegmentation"),Xba.forEach(t),ofo.forEach(t),Rdo=i(c),mr=n(c,"DIV",{class:!0});var Ti=s(mr);T(vP.$$.fragment,Ti),RXr=i(Ti),dc=n(Ti,"P",{});var Pge=s(dc);PXr=r(Pge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),bae=n(Pge,"A",{href:!0});var zba=s(bae);BXr=r(zba,"from_pretrained()"),zba.forEach(t),IXr=r(Pge," class method or the "),vae=n(Pge,"A",{href:!0});var Qba=s(vae);NXr=r(Qba,"from_config()"),Qba.forEach(t),qXr=r(Pge,` class
method.`),Pge.forEach(t),jXr=i(Ti),FP=n(Ti,"P",{});var rfo=s(FP);DXr=r(rfo,"This class cannot be instantiated directly using "),dye=n(rfo,"CODE",{});var Wba=s(dye);GXr=r(Wba,"__init__()"),Wba.forEach(t),OXr=r(rfo," (throws an error)."),rfo.forEach(t),VXr=i(Ti),Yt=n(Ti,"DIV",{class:!0});var g$=s(Yt);T(TP.$$.fragment,g$),XXr=i(g$),mye=n(g$,"P",{});var Uba=s(mye);zXr=r(Uba,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Uba.forEach(t),QXr=i(g$),mc=n(g$,"P",{});var Bge=s(mc);WXr=r(Bge,`Note:
Loading a model from its configuration file does `),cye=n(Bge,"STRONG",{});var Hba=s(cye);UXr=r(Hba,"not"),Hba.forEach(t),HXr=r(Bge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fae=n(Bge,"A",{href:!0});var Jba=s(Fae);JXr=r(Jba,"from_pretrained()"),Jba.forEach(t),YXr=r(Bge," to load the model weights."),Bge.forEach(t),ZXr=i(g$),T(E0.$$.fragment,g$),g$.forEach(t),KXr=i(Ti),yo=n(Ti,"DIV",{class:!0});var rn=s(yo);T(MP.$$.fragment,rn),ezr=i(rn),fye=n(rn,"P",{});var Yba=s(fye);ozr=r(Yba,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Yba.forEach(t),rzr=i(rn),qn=n(rn,"P",{});var h$=s(qn);tzr=r(h$,"The model class to instantiate is selected based on the "),gye=n(h$,"CODE",{});var Zba=s(gye);azr=r(Zba,"model_type"),Zba.forEach(t),nzr=r(h$,` property of the config object (either
passed as an argument or loaded from `),hye=n(h$,"CODE",{});var Kba=s(hye);szr=r(Kba,"pretrained_model_name_or_path"),Kba.forEach(t),lzr=r(h$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uye=n(h$,"CODE",{});var eva=s(uye);izr=r(eva,"pretrained_model_name_or_path"),eva.forEach(t),dzr=r(h$,":"),h$.forEach(t),mzr=i(rn),pye=n(rn,"UL",{});var ova=s(pye);C0=n(ova,"LI",{});var Qoo=s(C0);_ye=n(Qoo,"STRONG",{});var rva=s(_ye);czr=r(rva,"detr"),rva.forEach(t),fzr=r(Qoo," \u2014 "),Tae=n(Qoo,"A",{href:!0});var tva=s(Tae);gzr=r(tva,"DetrForSegmentation"),tva.forEach(t),hzr=r(Qoo," (DETR model)"),Qoo.forEach(t),ova.forEach(t),uzr=i(rn),w0=n(rn,"P",{});var Woo=s(w0);pzr=r(Woo,"The model is set in evaluation mode by default using "),bye=n(Woo,"CODE",{});var ava=s(bye);_zr=r(ava,"model.eval()"),ava.forEach(t),bzr=r(Woo,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vye=n(Woo,"CODE",{});var nva=s(vye);vzr=r(nva,"model.train()"),nva.forEach(t),Woo.forEach(t),Fzr=i(rn),T(A0.$$.fragment,rn),rn.forEach(t),Ti.forEach(t),Pdo=i(c),cc=n(c,"H2",{class:!0});var tfo=s(cc);L0=n(tfo,"A",{id:!0,class:!0,href:!0});var sva=s(L0);Fye=n(sva,"SPAN",{});var lva=s(Fye);T(EP.$$.fragment,lva),lva.forEach(t),sva.forEach(t),Tzr=i(tfo),Tye=n(tfo,"SPAN",{});var iva=s(Tye);Mzr=r(iva,"AutoModelForSemanticSegmentation"),iva.forEach(t),tfo.forEach(t),Bdo=i(c),cr=n(c,"DIV",{class:!0});var Mi=s(cr);T(CP.$$.fragment,Mi),Ezr=i(Mi),fc=n(Mi,"P",{});var Ige=s(fc);Czr=r(Ige,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Mae=n(Ige,"A",{href:!0});var dva=s(Mae);wzr=r(dva,"from_pretrained()"),dva.forEach(t),Azr=r(Ige," class method or the "),Eae=n(Ige,"A",{href:!0});var mva=s(Eae);Lzr=r(mva,"from_config()"),mva.forEach(t),yzr=r(Ige,` class
method.`),Ige.forEach(t),xzr=i(Mi),wP=n(Mi,"P",{});var afo=s(wP);$zr=r(afo,"This class cannot be instantiated directly using "),Mye=n(afo,"CODE",{});var cva=s(Mye);kzr=r(cva,"__init__()"),cva.forEach(t),Szr=r(afo," (throws an error)."),afo.forEach(t),Rzr=i(Mi),Zt=n(Mi,"DIV",{class:!0});var u$=s(Zt);T(AP.$$.fragment,u$),Pzr=i(u$),Eye=n(u$,"P",{});var fva=s(Eye);Bzr=r(fva,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),fva.forEach(t),Izr=i(u$),gc=n(u$,"P",{});var Nge=s(gc);Nzr=r(Nge,`Note:
Loading a model from its configuration file does `),Cye=n(Nge,"STRONG",{});var gva=s(Cye);qzr=r(gva,"not"),gva.forEach(t),jzr=r(Nge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cae=n(Nge,"A",{href:!0});var hva=s(Cae);Dzr=r(hva,"from_pretrained()"),hva.forEach(t),Gzr=r(Nge," to load the model weights."),Nge.forEach(t),Ozr=i(u$),T(y0.$$.fragment,u$),u$.forEach(t),Vzr=i(Mi),xo=n(Mi,"DIV",{class:!0});var tn=s(xo);T(LP.$$.fragment,tn),Xzr=i(tn),wye=n(tn,"P",{});var uva=s(wye);zzr=r(uva,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),uva.forEach(t),Qzr=i(tn),jn=n(tn,"P",{});var p$=s(jn);Wzr=r(p$,"The model class to instantiate is selected based on the "),Aye=n(p$,"CODE",{});var pva=s(Aye);Uzr=r(pva,"model_type"),pva.forEach(t),Hzr=r(p$,` property of the config object (either
passed as an argument or loaded from `),Lye=n(p$,"CODE",{});var _va=s(Lye);Jzr=r(_va,"pretrained_model_name_or_path"),_va.forEach(t),Yzr=r(p$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yye=n(p$,"CODE",{});var bva=s(yye);Zzr=r(bva,"pretrained_model_name_or_path"),bva.forEach(t),Kzr=r(p$,":"),p$.forEach(t),eQr=i(tn),fr=n(tn,"UL",{});var an=s(fr);x0=n(an,"LI",{});var Uoo=s(x0);xye=n(Uoo,"STRONG",{});var vva=s(xye);oQr=r(vva,"beit"),vva.forEach(t),rQr=r(Uoo," \u2014 "),wae=n(Uoo,"A",{href:!0});var Fva=s(wae);tQr=r(Fva,"BeitForSemanticSegmentation"),Fva.forEach(t),aQr=r(Uoo," (BEiT model)"),Uoo.forEach(t),nQr=i(an),$0=n(an,"LI",{});var Hoo=s($0);$ye=n(Hoo,"STRONG",{});var Tva=s($ye);sQr=r(Tva,"data2vec-vision"),Tva.forEach(t),lQr=r(Hoo," \u2014 "),Aae=n(Hoo,"A",{href:!0});var Mva=s(Aae);iQr=r(Mva,"Data2VecVisionForSemanticSegmentation"),Mva.forEach(t),dQr=r(Hoo," (Data2VecVision model)"),Hoo.forEach(t),mQr=i(an),k0=n(an,"LI",{});var Joo=s(k0);kye=n(Joo,"STRONG",{});var Eva=s(kye);cQr=r(Eva,"dpt"),Eva.forEach(t),fQr=r(Joo," \u2014 "),Lae=n(Joo,"A",{href:!0});var Cva=s(Lae);gQr=r(Cva,"DPTForSemanticSegmentation"),Cva.forEach(t),hQr=r(Joo," (DPT model)"),Joo.forEach(t),uQr=i(an),S0=n(an,"LI",{});var Yoo=s(S0);Sye=n(Yoo,"STRONG",{});var wva=s(Sye);pQr=r(wva,"mobilenet_v2"),wva.forEach(t),_Qr=r(Yoo," \u2014 "),yae=n(Yoo,"A",{href:!0});var Ava=s(yae);bQr=r(Ava,"MobileNetV2ForSemanticSegmentation"),Ava.forEach(t),vQr=r(Yoo," (MobileNetV2 model)"),Yoo.forEach(t),FQr=i(an),R0=n(an,"LI",{});var Zoo=s(R0);Rye=n(Zoo,"STRONG",{});var Lva=s(Rye);TQr=r(Lva,"mobilevit"),Lva.forEach(t),MQr=r(Zoo," \u2014 "),xae=n(Zoo,"A",{href:!0});var yva=s(xae);EQr=r(yva,"MobileViTForSemanticSegmentation"),yva.forEach(t),CQr=r(Zoo," (MobileViT model)"),Zoo.forEach(t),wQr=i(an),P0=n(an,"LI",{});var Koo=s(P0);Pye=n(Koo,"STRONG",{});var xva=s(Pye);AQr=r(xva,"segformer"),xva.forEach(t),LQr=r(Koo," \u2014 "),$ae=n(Koo,"A",{href:!0});var $va=s($ae);yQr=r($va,"SegformerForSemanticSegmentation"),$va.forEach(t),xQr=r(Koo," (SegFormer model)"),Koo.forEach(t),an.forEach(t),$Qr=i(tn),B0=n(tn,"P",{});var ero=s(B0);kQr=r(ero,"The model is set in evaluation mode by default using "),Bye=n(ero,"CODE",{});var kva=s(Bye);SQr=r(kva,"model.eval()"),kva.forEach(t),RQr=r(ero,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iye=n(ero,"CODE",{});var Sva=s(Iye);PQr=r(Sva,"model.train()"),Sva.forEach(t),ero.forEach(t),BQr=i(tn),T(I0.$$.fragment,tn),tn.forEach(t),Mi.forEach(t),Ido=i(c),hc=n(c,"H2",{class:!0});var nfo=s(hc);N0=n(nfo,"A",{id:!0,class:!0,href:!0});var Rva=s(N0);Nye=n(Rva,"SPAN",{});var Pva=s(Nye);T(yP.$$.fragment,Pva),Pva.forEach(t),Rva.forEach(t),IQr=i(nfo),qye=n(nfo,"SPAN",{});var Bva=s(qye);NQr=r(Bva,"AutoModelForInstanceSegmentation"),Bva.forEach(t),nfo.forEach(t),Ndo=i(c),gr=n(c,"DIV",{class:!0});var Ei=s(gr);T(xP.$$.fragment,Ei),qQr=i(Ei),uc=n(Ei,"P",{});var qge=s(uc);jQr=r(qge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kae=n(qge,"A",{href:!0});var Iva=s(kae);DQr=r(Iva,"from_pretrained()"),Iva.forEach(t),GQr=r(qge," class method or the "),Sae=n(qge,"A",{href:!0});var Nva=s(Sae);OQr=r(Nva,"from_config()"),Nva.forEach(t),VQr=r(qge,` class
method.`),qge.forEach(t),XQr=i(Ei),$P=n(Ei,"P",{});var sfo=s($P);zQr=r(sfo,"This class cannot be instantiated directly using "),jye=n(sfo,"CODE",{});var qva=s(jye);QQr=r(qva,"__init__()"),qva.forEach(t),WQr=r(sfo," (throws an error)."),sfo.forEach(t),UQr=i(Ei),Kt=n(Ei,"DIV",{class:!0});var _$=s(Kt);T(kP.$$.fragment,_$),HQr=i(_$),Dye=n(_$,"P",{});var jva=s(Dye);JQr=r(jva,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),jva.forEach(t),YQr=i(_$),pc=n(_$,"P",{});var jge=s(pc);ZQr=r(jge,`Note:
Loading a model from its configuration file does `),Gye=n(jge,"STRONG",{});var Dva=s(Gye);KQr=r(Dva,"not"),Dva.forEach(t),eWr=r(jge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rae=n(jge,"A",{href:!0});var Gva=s(Rae);oWr=r(Gva,"from_pretrained()"),Gva.forEach(t),rWr=r(jge," to load the model weights."),jge.forEach(t),tWr=i(_$),T(q0.$$.fragment,_$),_$.forEach(t),aWr=i(Ei),$o=n(Ei,"DIV",{class:!0});var nn=s($o);T(SP.$$.fragment,nn),nWr=i(nn),Oye=n(nn,"P",{});var Ova=s(Oye);sWr=r(Ova,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ova.forEach(t),lWr=i(nn),Dn=n(nn,"P",{});var b$=s(Dn);iWr=r(b$,"The model class to instantiate is selected based on the "),Vye=n(b$,"CODE",{});var Vva=s(Vye);dWr=r(Vva,"model_type"),Vva.forEach(t),mWr=r(b$,` property of the config object (either
passed as an argument or loaded from `),Xye=n(b$,"CODE",{});var Xva=s(Xye);cWr=r(Xva,"pretrained_model_name_or_path"),Xva.forEach(t),fWr=r(b$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zye=n(b$,"CODE",{});var zva=s(zye);gWr=r(zva,"pretrained_model_name_or_path"),zva.forEach(t),hWr=r(b$,":"),b$.forEach(t),uWr=i(nn),Qye=n(nn,"UL",{});var Qva=s(Qye);j0=n(Qva,"LI",{});var oro=s(j0);Wye=n(oro,"STRONG",{});var Wva=s(Wye);pWr=r(Wva,"maskformer"),Wva.forEach(t),_Wr=r(oro," \u2014 "),Pae=n(oro,"A",{href:!0});var Uva=s(Pae);bWr=r(Uva,"MaskFormerForInstanceSegmentation"),Uva.forEach(t),vWr=r(oro," (MaskFormer model)"),oro.forEach(t),Qva.forEach(t),FWr=i(nn),D0=n(nn,"P",{});var rro=s(D0);TWr=r(rro,"The model is set in evaluation mode by default using "),Uye=n(rro,"CODE",{});var Hva=s(Uye);MWr=r(Hva,"model.eval()"),Hva.forEach(t),EWr=r(rro,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hye=n(rro,"CODE",{});var Jva=s(Hye);CWr=r(Jva,"model.train()"),Jva.forEach(t),rro.forEach(t),wWr=i(nn),T(G0.$$.fragment,nn),nn.forEach(t),Ei.forEach(t),qdo=i(c),_c=n(c,"H2",{class:!0});var lfo=s(_c);O0=n(lfo,"A",{id:!0,class:!0,href:!0});var Yva=s(O0);Jye=n(Yva,"SPAN",{});var Zva=s(Jye);T(RP.$$.fragment,Zva),Zva.forEach(t),Yva.forEach(t),AWr=i(lfo),Yye=n(lfo,"SPAN",{});var Kva=s(Yye);LWr=r(Kva,"AutoModelForZeroShotObjectDetection"),Kva.forEach(t),lfo.forEach(t),jdo=i(c),hr=n(c,"DIV",{class:!0});var Ci=s(hr);T(PP.$$.fragment,Ci),yWr=i(Ci),bc=n(Ci,"P",{});var Dge=s(bc);xWr=r(Dge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a zero-shot object detection head) when created
with the `),Bae=n(Dge,"A",{href:!0});var eFa=s(Bae);$Wr=r(eFa,"from_pretrained()"),eFa.forEach(t),kWr=r(Dge," class method or the "),Iae=n(Dge,"A",{href:!0});var oFa=s(Iae);SWr=r(oFa,"from_config()"),oFa.forEach(t),RWr=r(Dge,` class
method.`),Dge.forEach(t),PWr=i(Ci),BP=n(Ci,"P",{});var ifo=s(BP);BWr=r(ifo,"This class cannot be instantiated directly using "),Zye=n(ifo,"CODE",{});var rFa=s(Zye);IWr=r(rFa,"__init__()"),rFa.forEach(t),NWr=r(ifo," (throws an error)."),ifo.forEach(t),qWr=i(Ci),ea=n(Ci,"DIV",{class:!0});var v$=s(ea);T(IP.$$.fragment,v$),jWr=i(v$),Kye=n(v$,"P",{});var tFa=s(Kye);DWr=r(tFa,"Instantiates one of the model classes of the library (with a zero-shot object detection head) from a configuration."),tFa.forEach(t),GWr=i(v$),vc=n(v$,"P",{});var Gge=s(vc);OWr=r(Gge,`Note:
Loading a model from its configuration file does `),e9e=n(Gge,"STRONG",{});var aFa=s(e9e);VWr=r(aFa,"not"),aFa.forEach(t),XWr=r(Gge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nae=n(Gge,"A",{href:!0});var nFa=s(Nae);zWr=r(nFa,"from_pretrained()"),nFa.forEach(t),QWr=r(Gge," to load the model weights."),Gge.forEach(t),WWr=i(v$),T(V0.$$.fragment,v$),v$.forEach(t),UWr=i(Ci),ko=n(Ci,"DIV",{class:!0});var sn=s(ko);T(NP.$$.fragment,sn),HWr=i(sn),o9e=n(sn,"P",{});var sFa=s(o9e);JWr=r(sFa,"Instantiate one of the model classes of the library (with a zero-shot object detection head) from a pretrained model."),sFa.forEach(t),YWr=i(sn),Gn=n(sn,"P",{});var F$=s(Gn);ZWr=r(F$,"The model class to instantiate is selected based on the "),r9e=n(F$,"CODE",{});var lFa=s(r9e);KWr=r(lFa,"model_type"),lFa.forEach(t),eUr=r(F$,` property of the config object (either
passed as an argument or loaded from `),t9e=n(F$,"CODE",{});var iFa=s(t9e);oUr=r(iFa,"pretrained_model_name_or_path"),iFa.forEach(t),rUr=r(F$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a9e=n(F$,"CODE",{});var dFa=s(a9e);tUr=r(dFa,"pretrained_model_name_or_path"),dFa.forEach(t),aUr=r(F$,":"),F$.forEach(t),nUr=i(sn),n9e=n(sn,"UL",{});var mFa=s(n9e);X0=n(mFa,"LI",{});var tro=s(X0);s9e=n(tro,"STRONG",{});var cFa=s(s9e);sUr=r(cFa,"owlvit"),cFa.forEach(t),lUr=r(tro," \u2014 "),qae=n(tro,"A",{href:!0});var fFa=s(qae);iUr=r(fFa,"OwlViTForObjectDetection"),fFa.forEach(t),dUr=r(tro," (OWL-ViT model)"),tro.forEach(t),mFa.forEach(t),mUr=i(sn),z0=n(sn,"P",{});var aro=s(z0);cUr=r(aro,"The model is set in evaluation mode by default using "),l9e=n(aro,"CODE",{});var gFa=s(l9e);fUr=r(gFa,"model.eval()"),gFa.forEach(t),gUr=r(aro,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i9e=n(aro,"CODE",{});var hFa=s(i9e);hUr=r(hFa,"model.train()"),hFa.forEach(t),aro.forEach(t),uUr=i(sn),T(Q0.$$.fragment,sn),sn.forEach(t),Ci.forEach(t),Ddo=i(c),Fc=n(c,"H2",{class:!0});var dfo=s(Fc);W0=n(dfo,"A",{id:!0,class:!0,href:!0});var uFa=s(W0);d9e=n(uFa,"SPAN",{});var pFa=s(d9e);T(qP.$$.fragment,pFa),pFa.forEach(t),uFa.forEach(t),pUr=i(dfo),m9e=n(dfo,"SPAN",{});var _Fa=s(m9e);_Ur=r(_Fa,"TFAutoModel"),_Fa.forEach(t),dfo.forEach(t),Gdo=i(c),ur=n(c,"DIV",{class:!0});var wi=s(ur);T(jP.$$.fragment,wi),bUr=i(wi),Tc=n(wi,"P",{});var Oge=s(Tc);vUr=r(Oge,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jae=n(Oge,"A",{href:!0});var bFa=s(jae);FUr=r(bFa,"from_pretrained()"),bFa.forEach(t),TUr=r(Oge," class method or the "),Dae=n(Oge,"A",{href:!0});var vFa=s(Dae);MUr=r(vFa,"from_config()"),vFa.forEach(t),EUr=r(Oge,` class
method.`),Oge.forEach(t),CUr=i(wi),DP=n(wi,"P",{});var mfo=s(DP);wUr=r(mfo,"This class cannot be instantiated directly using "),c9e=n(mfo,"CODE",{});var FFa=s(c9e);AUr=r(FFa,"__init__()"),FFa.forEach(t),LUr=r(mfo," (throws an error)."),mfo.forEach(t),yUr=i(wi),oa=n(wi,"DIV",{class:!0});var T$=s(oa);T(GP.$$.fragment,T$),xUr=i(T$),f9e=n(T$,"P",{});var TFa=s(f9e);$Ur=r(TFa,"Instantiates one of the base model classes of the library from a configuration."),TFa.forEach(t),kUr=i(T$),Mc=n(T$,"P",{});var Vge=s(Mc);SUr=r(Vge,`Note:
Loading a model from its configuration file does `),g9e=n(Vge,"STRONG",{});var MFa=s(g9e);RUr=r(MFa,"not"),MFa.forEach(t),PUr=r(Vge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gae=n(Vge,"A",{href:!0});var EFa=s(Gae);BUr=r(EFa,"from_pretrained()"),EFa.forEach(t),IUr=r(Vge," to load the model weights."),Vge.forEach(t),NUr=i(T$),T(U0.$$.fragment,T$),T$.forEach(t),qUr=i(wi),zr=n(wi,"DIV",{class:!0});var Ai=s(zr);T(OP.$$.fragment,Ai),jUr=i(Ai),h9e=n(Ai,"P",{});var CFa=s(h9e);DUr=r(CFa,"Instantiate one of the base model classes of the library from a pretrained model."),CFa.forEach(t),GUr=i(Ai),On=n(Ai,"P",{});var M$=s(On);OUr=r(M$,"The model class to instantiate is selected based on the "),u9e=n(M$,"CODE",{});var wFa=s(u9e);VUr=r(wFa,"model_type"),wFa.forEach(t),XUr=r(M$,` property of the config object (either
passed as an argument or loaded from `),p9e=n(M$,"CODE",{});var AFa=s(p9e);zUr=r(AFa,"pretrained_model_name_or_path"),AFa.forEach(t),QUr=r(M$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_9e=n(M$,"CODE",{});var LFa=s(_9e);WUr=r(LFa,"pretrained_model_name_or_path"),LFa.forEach(t),UUr=r(M$,":"),M$.forEach(t),HUr=i(Ai),P=n(Ai,"UL",{});var j=s(P);H0=n(j,"LI",{});var nro=s(H0);b9e=n(nro,"STRONG",{});var yFa=s(b9e);JUr=r(yFa,"albert"),yFa.forEach(t),YUr=r(nro," \u2014 "),Oae=n(nro,"A",{href:!0});var xFa=s(Oae);ZUr=r(xFa,"TFAlbertModel"),xFa.forEach(t),KUr=r(nro," (ALBERT model)"),nro.forEach(t),eHr=i(j),J0=n(j,"LI",{});var sro=s(J0);v9e=n(sro,"STRONG",{});var $Fa=s(v9e);oHr=r($Fa,"bart"),$Fa.forEach(t),rHr=r(sro," \u2014 "),Vae=n(sro,"A",{href:!0});var kFa=s(Vae);tHr=r(kFa,"TFBartModel"),kFa.forEach(t),aHr=r(sro," (BART model)"),sro.forEach(t),nHr=i(j),Y0=n(j,"LI",{});var lro=s(Y0);F9e=n(lro,"STRONG",{});var SFa=s(F9e);sHr=r(SFa,"bert"),SFa.forEach(t),lHr=r(lro," \u2014 "),Xae=n(lro,"A",{href:!0});var RFa=s(Xae);iHr=r(RFa,"TFBertModel"),RFa.forEach(t),dHr=r(lro," (BERT model)"),lro.forEach(t),mHr=i(j),Z0=n(j,"LI",{});var iro=s(Z0);T9e=n(iro,"STRONG",{});var PFa=s(T9e);cHr=r(PFa,"blenderbot"),PFa.forEach(t),fHr=r(iro," \u2014 "),zae=n(iro,"A",{href:!0});var BFa=s(zae);gHr=r(BFa,"TFBlenderbotModel"),BFa.forEach(t),hHr=r(iro," (Blenderbot model)"),iro.forEach(t),uHr=i(j),K0=n(j,"LI",{});var dro=s(K0);M9e=n(dro,"STRONG",{});var IFa=s(M9e);pHr=r(IFa,"blenderbot-small"),IFa.forEach(t),_Hr=r(dro," \u2014 "),Qae=n(dro,"A",{href:!0});var NFa=s(Qae);bHr=r(NFa,"TFBlenderbotSmallModel"),NFa.forEach(t),vHr=r(dro," (BlenderbotSmall model)"),dro.forEach(t),FHr=i(j),ew=n(j,"LI",{});var mro=s(ew);E9e=n(mro,"STRONG",{});var qFa=s(E9e);THr=r(qFa,"camembert"),qFa.forEach(t),MHr=r(mro," \u2014 "),Wae=n(mro,"A",{href:!0});var jFa=s(Wae);EHr=r(jFa,"TFCamembertModel"),jFa.forEach(t),CHr=r(mro," (CamemBERT model)"),mro.forEach(t),wHr=i(j),ow=n(j,"LI",{});var cro=s(ow);C9e=n(cro,"STRONG",{});var DFa=s(C9e);AHr=r(DFa,"clip"),DFa.forEach(t),LHr=r(cro," \u2014 "),Uae=n(cro,"A",{href:!0});var GFa=s(Uae);yHr=r(GFa,"TFCLIPModel"),GFa.forEach(t),xHr=r(cro," (CLIP model)"),cro.forEach(t),$Hr=i(j),rw=n(j,"LI",{});var fro=s(rw);w9e=n(fro,"STRONG",{});var OFa=s(w9e);kHr=r(OFa,"convbert"),OFa.forEach(t),SHr=r(fro," \u2014 "),Hae=n(fro,"A",{href:!0});var VFa=s(Hae);RHr=r(VFa,"TFConvBertModel"),VFa.forEach(t),PHr=r(fro," (ConvBERT model)"),fro.forEach(t),BHr=i(j),tw=n(j,"LI",{});var gro=s(tw);A9e=n(gro,"STRONG",{});var XFa=s(A9e);IHr=r(XFa,"convnext"),XFa.forEach(t),NHr=r(gro," \u2014 "),Jae=n(gro,"A",{href:!0});var zFa=s(Jae);qHr=r(zFa,"TFConvNextModel"),zFa.forEach(t),jHr=r(gro," (ConvNeXT model)"),gro.forEach(t),DHr=i(j),aw=n(j,"LI",{});var hro=s(aw);L9e=n(hro,"STRONG",{});var QFa=s(L9e);GHr=r(QFa,"ctrl"),QFa.forEach(t),OHr=r(hro," \u2014 "),Yae=n(hro,"A",{href:!0});var WFa=s(Yae);VHr=r(WFa,"TFCTRLModel"),WFa.forEach(t),XHr=r(hro," (CTRL model)"),hro.forEach(t),zHr=i(j),nw=n(j,"LI",{});var uro=s(nw);y9e=n(uro,"STRONG",{});var UFa=s(y9e);QHr=r(UFa,"cvt"),UFa.forEach(t),WHr=r(uro," \u2014 "),Zae=n(uro,"A",{href:!0});var HFa=s(Zae);UHr=r(HFa,"TFCvtModel"),HFa.forEach(t),HHr=r(uro," (CvT model)"),uro.forEach(t),JHr=i(j),sw=n(j,"LI",{});var pro=s(sw);x9e=n(pro,"STRONG",{});var JFa=s(x9e);YHr=r(JFa,"data2vec-vision"),JFa.forEach(t),ZHr=r(pro," \u2014 "),Kae=n(pro,"A",{href:!0});var YFa=s(Kae);KHr=r(YFa,"TFData2VecVisionModel"),YFa.forEach(t),eJr=r(pro," (Data2VecVision model)"),pro.forEach(t),oJr=i(j),lw=n(j,"LI",{});var _ro=s(lw);$9e=n(_ro,"STRONG",{});var ZFa=s($9e);rJr=r(ZFa,"deberta"),ZFa.forEach(t),tJr=r(_ro," \u2014 "),ene=n(_ro,"A",{href:!0});var KFa=s(ene);aJr=r(KFa,"TFDebertaModel"),KFa.forEach(t),nJr=r(_ro," (DeBERTa model)"),_ro.forEach(t),sJr=i(j),iw=n(j,"LI",{});var bro=s(iw);k9e=n(bro,"STRONG",{});var eTa=s(k9e);lJr=r(eTa,"deberta-v2"),eTa.forEach(t),iJr=r(bro," \u2014 "),one=n(bro,"A",{href:!0});var oTa=s(one);dJr=r(oTa,"TFDebertaV2Model"),oTa.forEach(t),mJr=r(bro," (DeBERTa-v2 model)"),bro.forEach(t),cJr=i(j),dw=n(j,"LI",{});var vro=s(dw);S9e=n(vro,"STRONG",{});var rTa=s(S9e);fJr=r(rTa,"deit"),rTa.forEach(t),gJr=r(vro," \u2014 "),rne=n(vro,"A",{href:!0});var tTa=s(rne);hJr=r(tTa,"TFDeiTModel"),tTa.forEach(t),uJr=r(vro," (DeiT model)"),vro.forEach(t),pJr=i(j),mw=n(j,"LI",{});var Fro=s(mw);R9e=n(Fro,"STRONG",{});var aTa=s(R9e);_Jr=r(aTa,"distilbert"),aTa.forEach(t),bJr=r(Fro," \u2014 "),tne=n(Fro,"A",{href:!0});var nTa=s(tne);vJr=r(nTa,"TFDistilBertModel"),nTa.forEach(t),FJr=r(Fro," (DistilBERT model)"),Fro.forEach(t),TJr=i(j),cw=n(j,"LI",{});var Tro=s(cw);P9e=n(Tro,"STRONG",{});var sTa=s(P9e);MJr=r(sTa,"dpr"),sTa.forEach(t),EJr=r(Tro," \u2014 "),ane=n(Tro,"A",{href:!0});var lTa=s(ane);CJr=r(lTa,"TFDPRQuestionEncoder"),lTa.forEach(t),wJr=r(Tro," (DPR model)"),Tro.forEach(t),AJr=i(j),fw=n(j,"LI",{});var Mro=s(fw);B9e=n(Mro,"STRONG",{});var iTa=s(B9e);LJr=r(iTa,"electra"),iTa.forEach(t),yJr=r(Mro," \u2014 "),nne=n(Mro,"A",{href:!0});var dTa=s(nne);xJr=r(dTa,"TFElectraModel"),dTa.forEach(t),$Jr=r(Mro," (ELECTRA model)"),Mro.forEach(t),kJr=i(j),gw=n(j,"LI",{});var Ero=s(gw);I9e=n(Ero,"STRONG",{});var mTa=s(I9e);SJr=r(mTa,"esm"),mTa.forEach(t),RJr=r(Ero," \u2014 "),sne=n(Ero,"A",{href:!0});var cTa=s(sne);PJr=r(cTa,"TFEsmModel"),cTa.forEach(t),BJr=r(Ero," (ESM model)"),Ero.forEach(t),IJr=i(j),hw=n(j,"LI",{});var Cro=s(hw);N9e=n(Cro,"STRONG",{});var fTa=s(N9e);NJr=r(fTa,"flaubert"),fTa.forEach(t),qJr=r(Cro," \u2014 "),lne=n(Cro,"A",{href:!0});var gTa=s(lne);jJr=r(gTa,"TFFlaubertModel"),gTa.forEach(t),DJr=r(Cro," (FlauBERT model)"),Cro.forEach(t),GJr=i(j),Gl=n(j,"LI",{});var Qq=s(Gl);q9e=n(Qq,"STRONG",{});var hTa=s(q9e);OJr=r(hTa,"funnel"),hTa.forEach(t),VJr=r(Qq," \u2014 "),ine=n(Qq,"A",{href:!0});var uTa=s(ine);XJr=r(uTa,"TFFunnelModel"),uTa.forEach(t),zJr=r(Qq," or "),dne=n(Qq,"A",{href:!0});var pTa=s(dne);QJr=r(pTa,"TFFunnelBaseModel"),pTa.forEach(t),WJr=r(Qq," (Funnel Transformer model)"),Qq.forEach(t),UJr=i(j),uw=n(j,"LI",{});var wro=s(uw);j9e=n(wro,"STRONG",{});var _Ta=s(j9e);HJr=r(_Ta,"gpt2"),_Ta.forEach(t),JJr=r(wro," \u2014 "),mne=n(wro,"A",{href:!0});var bTa=s(mne);YJr=r(bTa,"TFGPT2Model"),bTa.forEach(t),ZJr=r(wro," (OpenAI GPT-2 model)"),wro.forEach(t),KJr=i(j),pw=n(j,"LI",{});var Aro=s(pw);D9e=n(Aro,"STRONG",{});var vTa=s(D9e);eYr=r(vTa,"gptj"),vTa.forEach(t),oYr=r(Aro," \u2014 "),cne=n(Aro,"A",{href:!0});var FTa=s(cne);rYr=r(FTa,"TFGPTJModel"),FTa.forEach(t),tYr=r(Aro," (GPT-J model)"),Aro.forEach(t),aYr=i(j),_w=n(j,"LI",{});var Lro=s(_w);G9e=n(Lro,"STRONG",{});var TTa=s(G9e);nYr=r(TTa,"groupvit"),TTa.forEach(t),sYr=r(Lro," \u2014 "),fne=n(Lro,"A",{href:!0});var MTa=s(fne);lYr=r(MTa,"TFGroupViTModel"),MTa.forEach(t),iYr=r(Lro," (GroupViT model)"),Lro.forEach(t),dYr=i(j),bw=n(j,"LI",{});var yro=s(bw);O9e=n(yro,"STRONG",{});var ETa=s(O9e);mYr=r(ETa,"hubert"),ETa.forEach(t),cYr=r(yro," \u2014 "),gne=n(yro,"A",{href:!0});var CTa=s(gne);fYr=r(CTa,"TFHubertModel"),CTa.forEach(t),gYr=r(yro," (Hubert model)"),yro.forEach(t),hYr=i(j),vw=n(j,"LI",{});var xro=s(vw);V9e=n(xro,"STRONG",{});var wTa=s(V9e);uYr=r(wTa,"layoutlm"),wTa.forEach(t),pYr=r(xro," \u2014 "),hne=n(xro,"A",{href:!0});var ATa=s(hne);_Yr=r(ATa,"TFLayoutLMModel"),ATa.forEach(t),bYr=r(xro," (LayoutLM model)"),xro.forEach(t),vYr=i(j),Fw=n(j,"LI",{});var $ro=s(Fw);X9e=n($ro,"STRONG",{});var LTa=s(X9e);FYr=r(LTa,"layoutlmv3"),LTa.forEach(t),TYr=r($ro," \u2014 "),une=n($ro,"A",{href:!0});var yTa=s(une);MYr=r(yTa,"TFLayoutLMv3Model"),yTa.forEach(t),EYr=r($ro," (LayoutLMv3 model)"),$ro.forEach(t),CYr=i(j),Tw=n(j,"LI",{});var kro=s(Tw);z9e=n(kro,"STRONG",{});var xTa=s(z9e);wYr=r(xTa,"led"),xTa.forEach(t),AYr=r(kro," \u2014 "),pne=n(kro,"A",{href:!0});var $Ta=s(pne);LYr=r($Ta,"TFLEDModel"),$Ta.forEach(t),yYr=r(kro," (LED model)"),kro.forEach(t),xYr=i(j),Mw=n(j,"LI",{});var Sro=s(Mw);Q9e=n(Sro,"STRONG",{});var kTa=s(Q9e);$Yr=r(kTa,"longformer"),kTa.forEach(t),kYr=r(Sro," \u2014 "),_ne=n(Sro,"A",{href:!0});var STa=s(_ne);SYr=r(STa,"TFLongformerModel"),STa.forEach(t),RYr=r(Sro," (Longformer model)"),Sro.forEach(t),PYr=i(j),Ew=n(j,"LI",{});var Rro=s(Ew);W9e=n(Rro,"STRONG",{});var RTa=s(W9e);BYr=r(RTa,"lxmert"),RTa.forEach(t),IYr=r(Rro," \u2014 "),bne=n(Rro,"A",{href:!0});var PTa=s(bne);NYr=r(PTa,"TFLxmertModel"),PTa.forEach(t),qYr=r(Rro," (LXMERT model)"),Rro.forEach(t),jYr=i(j),Cw=n(j,"LI",{});var Pro=s(Cw);U9e=n(Pro,"STRONG",{});var BTa=s(U9e);DYr=r(BTa,"marian"),BTa.forEach(t),GYr=r(Pro," \u2014 "),vne=n(Pro,"A",{href:!0});var ITa=s(vne);OYr=r(ITa,"TFMarianModel"),ITa.forEach(t),VYr=r(Pro," (Marian model)"),Pro.forEach(t),XYr=i(j),ww=n(j,"LI",{});var Bro=s(ww);H9e=n(Bro,"STRONG",{});var NTa=s(H9e);zYr=r(NTa,"mbart"),NTa.forEach(t),QYr=r(Bro," \u2014 "),Fne=n(Bro,"A",{href:!0});var qTa=s(Fne);WYr=r(qTa,"TFMBartModel"),qTa.forEach(t),UYr=r(Bro," (mBART model)"),Bro.forEach(t),HYr=i(j),Aw=n(j,"LI",{});var Iro=s(Aw);J9e=n(Iro,"STRONG",{});var jTa=s(J9e);JYr=r(jTa,"mobilebert"),jTa.forEach(t),YYr=r(Iro," \u2014 "),Tne=n(Iro,"A",{href:!0});var DTa=s(Tne);ZYr=r(DTa,"TFMobileBertModel"),DTa.forEach(t),KYr=r(Iro," (MobileBERT model)"),Iro.forEach(t),eZr=i(j),Lw=n(j,"LI",{});var Nro=s(Lw);Y9e=n(Nro,"STRONG",{});var GTa=s(Y9e);oZr=r(GTa,"mobilevit"),GTa.forEach(t),rZr=r(Nro," \u2014 "),Mne=n(Nro,"A",{href:!0});var OTa=s(Mne);tZr=r(OTa,"TFMobileViTModel"),OTa.forEach(t),aZr=r(Nro," (MobileViT model)"),Nro.forEach(t),nZr=i(j),yw=n(j,"LI",{});var qro=s(yw);Z9e=n(qro,"STRONG",{});var VTa=s(Z9e);sZr=r(VTa,"mpnet"),VTa.forEach(t),lZr=r(qro," \u2014 "),Ene=n(qro,"A",{href:!0});var XTa=s(Ene);iZr=r(XTa,"TFMPNetModel"),XTa.forEach(t),dZr=r(qro," (MPNet model)"),qro.forEach(t),mZr=i(j),xw=n(j,"LI",{});var jro=s(xw);K9e=n(jro,"STRONG",{});var zTa=s(K9e);cZr=r(zTa,"mt5"),zTa.forEach(t),fZr=r(jro," \u2014 "),Cne=n(jro,"A",{href:!0});var QTa=s(Cne);gZr=r(QTa,"TFMT5Model"),QTa.forEach(t),hZr=r(jro," (MT5 model)"),jro.forEach(t),uZr=i(j),$w=n(j,"LI",{});var Dro=s($w);exe=n(Dro,"STRONG",{});var WTa=s(exe);pZr=r(WTa,"openai-gpt"),WTa.forEach(t),_Zr=r(Dro," \u2014 "),wne=n(Dro,"A",{href:!0});var UTa=s(wne);bZr=r(UTa,"TFOpenAIGPTModel"),UTa.forEach(t),vZr=r(Dro," (OpenAI GPT model)"),Dro.forEach(t),FZr=i(j),kw=n(j,"LI",{});var Gro=s(kw);oxe=n(Gro,"STRONG",{});var HTa=s(oxe);TZr=r(HTa,"opt"),HTa.forEach(t),MZr=r(Gro," \u2014 "),Ane=n(Gro,"A",{href:!0});var JTa=s(Ane);EZr=r(JTa,"TFOPTModel"),JTa.forEach(t),CZr=r(Gro," (OPT model)"),Gro.forEach(t),wZr=i(j),Sw=n(j,"LI",{});var Oro=s(Sw);rxe=n(Oro,"STRONG",{});var YTa=s(rxe);AZr=r(YTa,"pegasus"),YTa.forEach(t),LZr=r(Oro," \u2014 "),Lne=n(Oro,"A",{href:!0});var ZTa=s(Lne);yZr=r(ZTa,"TFPegasusModel"),ZTa.forEach(t),xZr=r(Oro," (Pegasus model)"),Oro.forEach(t),$Zr=i(j),Rw=n(j,"LI",{});var Vro=s(Rw);txe=n(Vro,"STRONG",{});var KTa=s(txe);kZr=r(KTa,"regnet"),KTa.forEach(t),SZr=r(Vro," \u2014 "),yne=n(Vro,"A",{href:!0});var eMa=s(yne);RZr=r(eMa,"TFRegNetModel"),eMa.forEach(t),PZr=r(Vro," (RegNet model)"),Vro.forEach(t),BZr=i(j),Pw=n(j,"LI",{});var Xro=s(Pw);axe=n(Xro,"STRONG",{});var oMa=s(axe);IZr=r(oMa,"rembert"),oMa.forEach(t),NZr=r(Xro," \u2014 "),xne=n(Xro,"A",{href:!0});var rMa=s(xne);qZr=r(rMa,"TFRemBertModel"),rMa.forEach(t),jZr=r(Xro," (RemBERT model)"),Xro.forEach(t),DZr=i(j),Bw=n(j,"LI",{});var zro=s(Bw);nxe=n(zro,"STRONG",{});var tMa=s(nxe);GZr=r(tMa,"resnet"),tMa.forEach(t),OZr=r(zro," \u2014 "),$ne=n(zro,"A",{href:!0});var aMa=s($ne);VZr=r(aMa,"TFResNetModel"),aMa.forEach(t),XZr=r(zro," (ResNet model)"),zro.forEach(t),zZr=i(j),Iw=n(j,"LI",{});var Qro=s(Iw);sxe=n(Qro,"STRONG",{});var nMa=s(sxe);QZr=r(nMa,"roberta"),nMa.forEach(t),WZr=r(Qro," \u2014 "),kne=n(Qro,"A",{href:!0});var sMa=s(kne);UZr=r(sMa,"TFRobertaModel"),sMa.forEach(t),HZr=r(Qro," (RoBERTa model)"),Qro.forEach(t),JZr=i(j),Nw=n(j,"LI",{});var Wro=s(Nw);lxe=n(Wro,"STRONG",{});var lMa=s(lxe);YZr=r(lMa,"roformer"),lMa.forEach(t),ZZr=r(Wro," \u2014 "),Sne=n(Wro,"A",{href:!0});var iMa=s(Sne);KZr=r(iMa,"TFRoFormerModel"),iMa.forEach(t),eKr=r(Wro," (RoFormer model)"),Wro.forEach(t),oKr=i(j),qw=n(j,"LI",{});var Uro=s(qw);ixe=n(Uro,"STRONG",{});var dMa=s(ixe);rKr=r(dMa,"segformer"),dMa.forEach(t),tKr=r(Uro," \u2014 "),Rne=n(Uro,"A",{href:!0});var mMa=s(Rne);aKr=r(mMa,"TFSegformerModel"),mMa.forEach(t),nKr=r(Uro," (SegFormer model)"),Uro.forEach(t),sKr=i(j),jw=n(j,"LI",{});var Hro=s(jw);dxe=n(Hro,"STRONG",{});var cMa=s(dxe);lKr=r(cMa,"speech_to_text"),cMa.forEach(t),iKr=r(Hro," \u2014 "),Pne=n(Hro,"A",{href:!0});var fMa=s(Pne);dKr=r(fMa,"TFSpeech2TextModel"),fMa.forEach(t),mKr=r(Hro," (Speech2Text model)"),Hro.forEach(t),cKr=i(j),Dw=n(j,"LI",{});var Jro=s(Dw);mxe=n(Jro,"STRONG",{});var gMa=s(mxe);fKr=r(gMa,"swin"),gMa.forEach(t),gKr=r(Jro," \u2014 "),Bne=n(Jro,"A",{href:!0});var hMa=s(Bne);hKr=r(hMa,"TFSwinModel"),hMa.forEach(t),uKr=r(Jro," (Swin Transformer model)"),Jro.forEach(t),pKr=i(j),Gw=n(j,"LI",{});var Yro=s(Gw);cxe=n(Yro,"STRONG",{});var uMa=s(cxe);_Kr=r(uMa,"t5"),uMa.forEach(t),bKr=r(Yro," \u2014 "),Ine=n(Yro,"A",{href:!0});var pMa=s(Ine);vKr=r(pMa,"TFT5Model"),pMa.forEach(t),FKr=r(Yro," (T5 model)"),Yro.forEach(t),TKr=i(j),Ow=n(j,"LI",{});var Zro=s(Ow);fxe=n(Zro,"STRONG",{});var _Ma=s(fxe);MKr=r(_Ma,"tapas"),_Ma.forEach(t),EKr=r(Zro," \u2014 "),Nne=n(Zro,"A",{href:!0});var bMa=s(Nne);CKr=r(bMa,"TFTapasModel"),bMa.forEach(t),wKr=r(Zro," (TAPAS model)"),Zro.forEach(t),AKr=i(j),Vw=n(j,"LI",{});var Kro=s(Vw);gxe=n(Kro,"STRONG",{});var vMa=s(gxe);LKr=r(vMa,"transfo-xl"),vMa.forEach(t),yKr=r(Kro," \u2014 "),qne=n(Kro,"A",{href:!0});var FMa=s(qne);xKr=r(FMa,"TFTransfoXLModel"),FMa.forEach(t),$Kr=r(Kro," (Transformer-XL model)"),Kro.forEach(t),kKr=i(j),Xw=n(j,"LI",{});var eto=s(Xw);hxe=n(eto,"STRONG",{});var TMa=s(hxe);SKr=r(TMa,"vit"),TMa.forEach(t),RKr=r(eto," \u2014 "),jne=n(eto,"A",{href:!0});var MMa=s(jne);PKr=r(MMa,"TFViTModel"),MMa.forEach(t),BKr=r(eto," (ViT model)"),eto.forEach(t),IKr=i(j),zw=n(j,"LI",{});var oto=s(zw);uxe=n(oto,"STRONG",{});var EMa=s(uxe);NKr=r(EMa,"vit_mae"),EMa.forEach(t),qKr=r(oto," \u2014 "),Dne=n(oto,"A",{href:!0});var CMa=s(Dne);jKr=r(CMa,"TFViTMAEModel"),CMa.forEach(t),DKr=r(oto," (ViTMAE model)"),oto.forEach(t),GKr=i(j),Qw=n(j,"LI",{});var rto=s(Qw);pxe=n(rto,"STRONG",{});var wMa=s(pxe);OKr=r(wMa,"wav2vec2"),wMa.forEach(t),VKr=r(rto," \u2014 "),Gne=n(rto,"A",{href:!0});var AMa=s(Gne);XKr=r(AMa,"TFWav2Vec2Model"),AMa.forEach(t),zKr=r(rto," (Wav2Vec2 model)"),rto.forEach(t),QKr=i(j),Ww=n(j,"LI",{});var tto=s(Ww);_xe=n(tto,"STRONG",{});var LMa=s(_xe);WKr=r(LMa,"whisper"),LMa.forEach(t),UKr=r(tto," \u2014 "),One=n(tto,"A",{href:!0});var yMa=s(One);HKr=r(yMa,"TFWhisperModel"),yMa.forEach(t),JKr=r(tto," (Whisper model)"),tto.forEach(t),YKr=i(j),Uw=n(j,"LI",{});var ato=s(Uw);bxe=n(ato,"STRONG",{});var xMa=s(bxe);ZKr=r(xMa,"xglm"),xMa.forEach(t),KKr=r(ato," \u2014 "),Vne=n(ato,"A",{href:!0});var $Ma=s(Vne);eet=r($Ma,"TFXGLMModel"),$Ma.forEach(t),oet=r(ato," (XGLM model)"),ato.forEach(t),ret=i(j),Hw=n(j,"LI",{});var nto=s(Hw);vxe=n(nto,"STRONG",{});var kMa=s(vxe);tet=r(kMa,"xlm"),kMa.forEach(t),aet=r(nto," \u2014 "),Xne=n(nto,"A",{href:!0});var SMa=s(Xne);net=r(SMa,"TFXLMModel"),SMa.forEach(t),set=r(nto," (XLM model)"),nto.forEach(t),iet=i(j),Jw=n(j,"LI",{});var sto=s(Jw);Fxe=n(sto,"STRONG",{});var RMa=s(Fxe);det=r(RMa,"xlm-roberta"),RMa.forEach(t),met=r(sto," \u2014 "),zne=n(sto,"A",{href:!0});var PMa=s(zne);cet=r(PMa,"TFXLMRobertaModel"),PMa.forEach(t),fet=r(sto," (XLM-RoBERTa model)"),sto.forEach(t),get=i(j),Yw=n(j,"LI",{});var lto=s(Yw);Txe=n(lto,"STRONG",{});var BMa=s(Txe);het=r(BMa,"xlnet"),BMa.forEach(t),uet=r(lto," \u2014 "),Qne=n(lto,"A",{href:!0});var IMa=s(Qne);pet=r(IMa,"TFXLNetModel"),IMa.forEach(t),_et=r(lto," (XLNet model)"),lto.forEach(t),j.forEach(t),bet=i(Ai),T(Zw.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),Odo=i(c),Ec=n(c,"H2",{class:!0});var cfo=s(Ec);Kw=n(cfo,"A",{id:!0,class:!0,href:!0});var NMa=s(Kw);Mxe=n(NMa,"SPAN",{});var qMa=s(Mxe);T(VP.$$.fragment,qMa),qMa.forEach(t),NMa.forEach(t),vet=i(cfo),Exe=n(cfo,"SPAN",{});var jMa=s(Exe);Fet=r(jMa,"TFAutoModelForPreTraining"),jMa.forEach(t),cfo.forEach(t),Vdo=i(c),pr=n(c,"DIV",{class:!0});var Li=s(pr);T(XP.$$.fragment,Li),Tet=i(Li),Cc=n(Li,"P",{});var Xge=s(Cc);Met=r(Xge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wne=n(Xge,"A",{href:!0});var DMa=s(Wne);Eet=r(DMa,"from_pretrained()"),DMa.forEach(t),Cet=r(Xge," class method or the "),Une=n(Xge,"A",{href:!0});var GMa=s(Une);wet=r(GMa,"from_config()"),GMa.forEach(t),Aet=r(Xge,` class
method.`),Xge.forEach(t),Let=i(Li),zP=n(Li,"P",{});var ffo=s(zP);yet=r(ffo,"This class cannot be instantiated directly using "),Cxe=n(ffo,"CODE",{});var OMa=s(Cxe);xet=r(OMa,"__init__()"),OMa.forEach(t),$et=r(ffo," (throws an error)."),ffo.forEach(t),ket=i(Li),ra=n(Li,"DIV",{class:!0});var E$=s(ra);T(QP.$$.fragment,E$),Set=i(E$),wxe=n(E$,"P",{});var VMa=s(wxe);Ret=r(VMa,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VMa.forEach(t),Pet=i(E$),wc=n(E$,"P",{});var zge=s(wc);Bet=r(zge,`Note:
Loading a model from its configuration file does `),Axe=n(zge,"STRONG",{});var XMa=s(Axe);Iet=r(XMa,"not"),XMa.forEach(t),Net=r(zge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hne=n(zge,"A",{href:!0});var zMa=s(Hne);qet=r(zMa,"from_pretrained()"),zMa.forEach(t),jet=r(zge," to load the model weights."),zge.forEach(t),Det=i(E$),T(eA.$$.fragment,E$),E$.forEach(t),Get=i(Li),Qr=n(Li,"DIV",{class:!0});var yi=s(Qr);T(WP.$$.fragment,yi),Oet=i(yi),Lxe=n(yi,"P",{});var QMa=s(Lxe);Vet=r(QMa,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),QMa.forEach(t),Xet=i(yi),Vn=n(yi,"P",{});var C$=s(Vn);zet=r(C$,"The model class to instantiate is selected based on the "),yxe=n(C$,"CODE",{});var WMa=s(yxe);Qet=r(WMa,"model_type"),WMa.forEach(t),Wet=r(C$,` property of the config object (either
passed as an argument or loaded from `),xxe=n(C$,"CODE",{});var UMa=s(xxe);Uet=r(UMa,"pretrained_model_name_or_path"),UMa.forEach(t),Het=r(C$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$xe=n(C$,"CODE",{});var HMa=s($xe);Jet=r(HMa,"pretrained_model_name_or_path"),HMa.forEach(t),Yet=r(C$,":"),C$.forEach(t),Zet=i(yi),de=n(yi,"UL",{});var fe=s(de);oA=n(fe,"LI",{});var ito=s(oA);kxe=n(ito,"STRONG",{});var JMa=s(kxe);Ket=r(JMa,"albert"),JMa.forEach(t),eot=r(ito," \u2014 "),Jne=n(ito,"A",{href:!0});var YMa=s(Jne);oot=r(YMa,"TFAlbertForPreTraining"),YMa.forEach(t),rot=r(ito," (ALBERT model)"),ito.forEach(t),tot=i(fe),rA=n(fe,"LI",{});var dto=s(rA);Sxe=n(dto,"STRONG",{});var ZMa=s(Sxe);aot=r(ZMa,"bart"),ZMa.forEach(t),not=r(dto," \u2014 "),Yne=n(dto,"A",{href:!0});var KMa=s(Yne);sot=r(KMa,"TFBartForConditionalGeneration"),KMa.forEach(t),lot=r(dto," (BART model)"),dto.forEach(t),iot=i(fe),tA=n(fe,"LI",{});var mto=s(tA);Rxe=n(mto,"STRONG",{});var eEa=s(Rxe);dot=r(eEa,"bert"),eEa.forEach(t),mot=r(mto," \u2014 "),Zne=n(mto,"A",{href:!0});var oEa=s(Zne);cot=r(oEa,"TFBertForPreTraining"),oEa.forEach(t),fot=r(mto," (BERT model)"),mto.forEach(t),got=i(fe),aA=n(fe,"LI",{});var cto=s(aA);Pxe=n(cto,"STRONG",{});var rEa=s(Pxe);hot=r(rEa,"camembert"),rEa.forEach(t),uot=r(cto," \u2014 "),Kne=n(cto,"A",{href:!0});var tEa=s(Kne);pot=r(tEa,"TFCamembertForMaskedLM"),tEa.forEach(t),_ot=r(cto," (CamemBERT model)"),cto.forEach(t),bot=i(fe),nA=n(fe,"LI",{});var fto=s(nA);Bxe=n(fto,"STRONG",{});var aEa=s(Bxe);vot=r(aEa,"ctrl"),aEa.forEach(t),Fot=r(fto," \u2014 "),ese=n(fto,"A",{href:!0});var nEa=s(ese);Tot=r(nEa,"TFCTRLLMHeadModel"),nEa.forEach(t),Mot=r(fto," (CTRL model)"),fto.forEach(t),Eot=i(fe),sA=n(fe,"LI",{});var gto=s(sA);Ixe=n(gto,"STRONG",{});var sEa=s(Ixe);Cot=r(sEa,"distilbert"),sEa.forEach(t),wot=r(gto," \u2014 "),ose=n(gto,"A",{href:!0});var lEa=s(ose);Aot=r(lEa,"TFDistilBertForMaskedLM"),lEa.forEach(t),Lot=r(gto," (DistilBERT model)"),gto.forEach(t),yot=i(fe),lA=n(fe,"LI",{});var hto=s(lA);Nxe=n(hto,"STRONG",{});var iEa=s(Nxe);xot=r(iEa,"electra"),iEa.forEach(t),$ot=r(hto," \u2014 "),rse=n(hto,"A",{href:!0});var dEa=s(rse);kot=r(dEa,"TFElectraForPreTraining"),dEa.forEach(t),Sot=r(hto," (ELECTRA model)"),hto.forEach(t),Rot=i(fe),iA=n(fe,"LI",{});var uto=s(iA);qxe=n(uto,"STRONG",{});var mEa=s(qxe);Pot=r(mEa,"flaubert"),mEa.forEach(t),Bot=r(uto," \u2014 "),tse=n(uto,"A",{href:!0});var cEa=s(tse);Iot=r(cEa,"TFFlaubertWithLMHeadModel"),cEa.forEach(t),Not=r(uto," (FlauBERT model)"),uto.forEach(t),qot=i(fe),dA=n(fe,"LI",{});var pto=s(dA);jxe=n(pto,"STRONG",{});var fEa=s(jxe);jot=r(fEa,"funnel"),fEa.forEach(t),Dot=r(pto," \u2014 "),ase=n(pto,"A",{href:!0});var gEa=s(ase);Got=r(gEa,"TFFunnelForPreTraining"),gEa.forEach(t),Oot=r(pto," (Funnel Transformer model)"),pto.forEach(t),Vot=i(fe),mA=n(fe,"LI",{});var _to=s(mA);Dxe=n(_to,"STRONG",{});var hEa=s(Dxe);Xot=r(hEa,"gpt2"),hEa.forEach(t),zot=r(_to," \u2014 "),nse=n(_to,"A",{href:!0});var uEa=s(nse);Qot=r(uEa,"TFGPT2LMHeadModel"),uEa.forEach(t),Wot=r(_to," (OpenAI GPT-2 model)"),_to.forEach(t),Uot=i(fe),cA=n(fe,"LI",{});var bto=s(cA);Gxe=n(bto,"STRONG",{});var pEa=s(Gxe);Hot=r(pEa,"layoutlm"),pEa.forEach(t),Jot=r(bto," \u2014 "),sse=n(bto,"A",{href:!0});var _Ea=s(sse);Yot=r(_Ea,"TFLayoutLMForMaskedLM"),_Ea.forEach(t),Zot=r(bto," (LayoutLM model)"),bto.forEach(t),Kot=i(fe),fA=n(fe,"LI",{});var vto=s(fA);Oxe=n(vto,"STRONG",{});var bEa=s(Oxe);ert=r(bEa,"lxmert"),bEa.forEach(t),ort=r(vto," \u2014 "),lse=n(vto,"A",{href:!0});var vEa=s(lse);rrt=r(vEa,"TFLxmertForPreTraining"),vEa.forEach(t),trt=r(vto," (LXMERT model)"),vto.forEach(t),art=i(fe),gA=n(fe,"LI",{});var Fto=s(gA);Vxe=n(Fto,"STRONG",{});var FEa=s(Vxe);nrt=r(FEa,"mobilebert"),FEa.forEach(t),srt=r(Fto," \u2014 "),ise=n(Fto,"A",{href:!0});var TEa=s(ise);lrt=r(TEa,"TFMobileBertForPreTraining"),TEa.forEach(t),irt=r(Fto," (MobileBERT model)"),Fto.forEach(t),drt=i(fe),hA=n(fe,"LI",{});var Tto=s(hA);Xxe=n(Tto,"STRONG",{});var MEa=s(Xxe);mrt=r(MEa,"mpnet"),MEa.forEach(t),crt=r(Tto," \u2014 "),dse=n(Tto,"A",{href:!0});var EEa=s(dse);frt=r(EEa,"TFMPNetForMaskedLM"),EEa.forEach(t),grt=r(Tto," (MPNet model)"),Tto.forEach(t),hrt=i(fe),uA=n(fe,"LI",{});var Mto=s(uA);zxe=n(Mto,"STRONG",{});var CEa=s(zxe);urt=r(CEa,"openai-gpt"),CEa.forEach(t),prt=r(Mto," \u2014 "),mse=n(Mto,"A",{href:!0});var wEa=s(mse);_rt=r(wEa,"TFOpenAIGPTLMHeadModel"),wEa.forEach(t),brt=r(Mto," (OpenAI GPT model)"),Mto.forEach(t),vrt=i(fe),pA=n(fe,"LI",{});var Eto=s(pA);Qxe=n(Eto,"STRONG",{});var AEa=s(Qxe);Frt=r(AEa,"roberta"),AEa.forEach(t),Trt=r(Eto," \u2014 "),cse=n(Eto,"A",{href:!0});var LEa=s(cse);Mrt=r(LEa,"TFRobertaForMaskedLM"),LEa.forEach(t),Ert=r(Eto," (RoBERTa model)"),Eto.forEach(t),Crt=i(fe),_A=n(fe,"LI",{});var Cto=s(_A);Wxe=n(Cto,"STRONG",{});var yEa=s(Wxe);wrt=r(yEa,"t5"),yEa.forEach(t),Art=r(Cto," \u2014 "),fse=n(Cto,"A",{href:!0});var xEa=s(fse);Lrt=r(xEa,"TFT5ForConditionalGeneration"),xEa.forEach(t),yrt=r(Cto," (T5 model)"),Cto.forEach(t),xrt=i(fe),bA=n(fe,"LI",{});var wto=s(bA);Uxe=n(wto,"STRONG",{});var $Ea=s(Uxe);$rt=r($Ea,"tapas"),$Ea.forEach(t),krt=r(wto," \u2014 "),gse=n(wto,"A",{href:!0});var kEa=s(gse);Srt=r(kEa,"TFTapasForMaskedLM"),kEa.forEach(t),Rrt=r(wto," (TAPAS model)"),wto.forEach(t),Prt=i(fe),vA=n(fe,"LI",{});var Ato=s(vA);Hxe=n(Ato,"STRONG",{});var SEa=s(Hxe);Brt=r(SEa,"transfo-xl"),SEa.forEach(t),Irt=r(Ato," \u2014 "),hse=n(Ato,"A",{href:!0});var REa=s(hse);Nrt=r(REa,"TFTransfoXLLMHeadModel"),REa.forEach(t),qrt=r(Ato," (Transformer-XL model)"),Ato.forEach(t),jrt=i(fe),FA=n(fe,"LI",{});var Lto=s(FA);Jxe=n(Lto,"STRONG",{});var PEa=s(Jxe);Drt=r(PEa,"vit_mae"),PEa.forEach(t),Grt=r(Lto," \u2014 "),use=n(Lto,"A",{href:!0});var BEa=s(use);Ort=r(BEa,"TFViTMAEForPreTraining"),BEa.forEach(t),Vrt=r(Lto," (ViTMAE model)"),Lto.forEach(t),Xrt=i(fe),TA=n(fe,"LI",{});var yto=s(TA);Yxe=n(yto,"STRONG",{});var IEa=s(Yxe);zrt=r(IEa,"xlm"),IEa.forEach(t),Qrt=r(yto," \u2014 "),pse=n(yto,"A",{href:!0});var NEa=s(pse);Wrt=r(NEa,"TFXLMWithLMHeadModel"),NEa.forEach(t),Urt=r(yto," (XLM model)"),yto.forEach(t),Hrt=i(fe),MA=n(fe,"LI",{});var xto=s(MA);Zxe=n(xto,"STRONG",{});var qEa=s(Zxe);Jrt=r(qEa,"xlm-roberta"),qEa.forEach(t),Yrt=r(xto," \u2014 "),_se=n(xto,"A",{href:!0});var jEa=s(_se);Zrt=r(jEa,"TFXLMRobertaForMaskedLM"),jEa.forEach(t),Krt=r(xto," (XLM-RoBERTa model)"),xto.forEach(t),ett=i(fe),EA=n(fe,"LI",{});var $to=s(EA);Kxe=n($to,"STRONG",{});var DEa=s(Kxe);ott=r(DEa,"xlnet"),DEa.forEach(t),rtt=r($to," \u2014 "),bse=n($to,"A",{href:!0});var GEa=s(bse);ttt=r(GEa,"TFXLNetLMHeadModel"),GEa.forEach(t),att=r($to," (XLNet model)"),$to.forEach(t),fe.forEach(t),ntt=i(yi),T(CA.$$.fragment,yi),yi.forEach(t),Li.forEach(t),Xdo=i(c),Ac=n(c,"H2",{class:!0});var gfo=s(Ac);wA=n(gfo,"A",{id:!0,class:!0,href:!0});var OEa=s(wA);e$e=n(OEa,"SPAN",{});var VEa=s(e$e);T(UP.$$.fragment,VEa),VEa.forEach(t),OEa.forEach(t),stt=i(gfo),o$e=n(gfo,"SPAN",{});var XEa=s(o$e);ltt=r(XEa,"TFAutoModelForCausalLM"),XEa.forEach(t),gfo.forEach(t),zdo=i(c),_r=n(c,"DIV",{class:!0});var xi=s(_r);T(HP.$$.fragment,xi),itt=i(xi),Lc=n(xi,"P",{});var Qge=s(Lc);dtt=r(Qge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vse=n(Qge,"A",{href:!0});var zEa=s(vse);mtt=r(zEa,"from_pretrained()"),zEa.forEach(t),ctt=r(Qge," class method or the "),Fse=n(Qge,"A",{href:!0});var QEa=s(Fse);ftt=r(QEa,"from_config()"),QEa.forEach(t),gtt=r(Qge,` class
method.`),Qge.forEach(t),htt=i(xi),JP=n(xi,"P",{});var hfo=s(JP);utt=r(hfo,"This class cannot be instantiated directly using "),r$e=n(hfo,"CODE",{});var WEa=s(r$e);ptt=r(WEa,"__init__()"),WEa.forEach(t),_tt=r(hfo," (throws an error)."),hfo.forEach(t),btt=i(xi),ta=n(xi,"DIV",{class:!0});var w$=s(ta);T(YP.$$.fragment,w$),vtt=i(w$),t$e=n(w$,"P",{});var UEa=s(t$e);Ftt=r(UEa,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UEa.forEach(t),Ttt=i(w$),yc=n(w$,"P",{});var Wge=s(yc);Mtt=r(Wge,`Note:
Loading a model from its configuration file does `),a$e=n(Wge,"STRONG",{});var HEa=s(a$e);Ett=r(HEa,"not"),HEa.forEach(t),Ctt=r(Wge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tse=n(Wge,"A",{href:!0});var JEa=s(Tse);wtt=r(JEa,"from_pretrained()"),JEa.forEach(t),Att=r(Wge," to load the model weights."),Wge.forEach(t),Ltt=i(w$),T(AA.$$.fragment,w$),w$.forEach(t),ytt=i(xi),Wr=n(xi,"DIV",{class:!0});var $i=s(Wr);T(ZP.$$.fragment,$i),xtt=i($i),n$e=n($i,"P",{});var YEa=s(n$e);$tt=r(YEa,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),YEa.forEach(t),ktt=i($i),Xn=n($i,"P",{});var A$=s(Xn);Stt=r(A$,"The model class to instantiate is selected based on the "),s$e=n(A$,"CODE",{});var ZEa=s(s$e);Rtt=r(ZEa,"model_type"),ZEa.forEach(t),Ptt=r(A$,` property of the config object (either
passed as an argument or loaded from `),l$e=n(A$,"CODE",{});var KEa=s(l$e);Btt=r(KEa,"pretrained_model_name_or_path"),KEa.forEach(t),Itt=r(A$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i$e=n(A$,"CODE",{});var e4a=s(i$e);Ntt=r(e4a,"pretrained_model_name_or_path"),e4a.forEach(t),qtt=r(A$,":"),A$.forEach(t),jtt=i($i),Ce=n($i,"UL",{});var Ae=s(Ce);LA=n(Ae,"LI",{});var kto=s(LA);d$e=n(kto,"STRONG",{});var o4a=s(d$e);Dtt=r(o4a,"bert"),o4a.forEach(t),Gtt=r(kto," \u2014 "),Mse=n(kto,"A",{href:!0});var r4a=s(Mse);Ott=r(r4a,"TFBertLMHeadModel"),r4a.forEach(t),Vtt=r(kto," (BERT model)"),kto.forEach(t),Xtt=i(Ae),yA=n(Ae,"LI",{});var Sto=s(yA);m$e=n(Sto,"STRONG",{});var t4a=s(m$e);ztt=r(t4a,"camembert"),t4a.forEach(t),Qtt=r(Sto," \u2014 "),Ese=n(Sto,"A",{href:!0});var a4a=s(Ese);Wtt=r(a4a,"TFCamembertForCausalLM"),a4a.forEach(t),Utt=r(Sto," (CamemBERT model)"),Sto.forEach(t),Htt=i(Ae),xA=n(Ae,"LI",{});var Rto=s(xA);c$e=n(Rto,"STRONG",{});var n4a=s(c$e);Jtt=r(n4a,"ctrl"),n4a.forEach(t),Ytt=r(Rto," \u2014 "),Cse=n(Rto,"A",{href:!0});var s4a=s(Cse);Ztt=r(s4a,"TFCTRLLMHeadModel"),s4a.forEach(t),Ktt=r(Rto," (CTRL model)"),Rto.forEach(t),eat=i(Ae),$A=n(Ae,"LI",{});var Pto=s($A);f$e=n(Pto,"STRONG",{});var l4a=s(f$e);oat=r(l4a,"gpt2"),l4a.forEach(t),rat=r(Pto," \u2014 "),wse=n(Pto,"A",{href:!0});var i4a=s(wse);tat=r(i4a,"TFGPT2LMHeadModel"),i4a.forEach(t),aat=r(Pto," (OpenAI GPT-2 model)"),Pto.forEach(t),nat=i(Ae),kA=n(Ae,"LI",{});var Bto=s(kA);g$e=n(Bto,"STRONG",{});var d4a=s(g$e);sat=r(d4a,"gptj"),d4a.forEach(t),lat=r(Bto," \u2014 "),Ase=n(Bto,"A",{href:!0});var m4a=s(Ase);iat=r(m4a,"TFGPTJForCausalLM"),m4a.forEach(t),dat=r(Bto," (GPT-J model)"),Bto.forEach(t),mat=i(Ae),SA=n(Ae,"LI",{});var Ito=s(SA);h$e=n(Ito,"STRONG",{});var c4a=s(h$e);cat=r(c4a,"openai-gpt"),c4a.forEach(t),fat=r(Ito," \u2014 "),Lse=n(Ito,"A",{href:!0});var f4a=s(Lse);gat=r(f4a,"TFOpenAIGPTLMHeadModel"),f4a.forEach(t),hat=r(Ito," (OpenAI GPT model)"),Ito.forEach(t),uat=i(Ae),RA=n(Ae,"LI",{});var Nto=s(RA);u$e=n(Nto,"STRONG",{});var g4a=s(u$e);pat=r(g4a,"opt"),g4a.forEach(t),_at=r(Nto," \u2014 "),yse=n(Nto,"A",{href:!0});var h4a=s(yse);bat=r(h4a,"TFOPTForCausalLM"),h4a.forEach(t),vat=r(Nto," (OPT model)"),Nto.forEach(t),Fat=i(Ae),PA=n(Ae,"LI",{});var qto=s(PA);p$e=n(qto,"STRONG",{});var u4a=s(p$e);Tat=r(u4a,"rembert"),u4a.forEach(t),Mat=r(qto," \u2014 "),xse=n(qto,"A",{href:!0});var p4a=s(xse);Eat=r(p4a,"TFRemBertForCausalLM"),p4a.forEach(t),Cat=r(qto," (RemBERT model)"),qto.forEach(t),wat=i(Ae),BA=n(Ae,"LI",{});var jto=s(BA);_$e=n(jto,"STRONG",{});var _4a=s(_$e);Aat=r(_4a,"roberta"),_4a.forEach(t),Lat=r(jto," \u2014 "),$se=n(jto,"A",{href:!0});var b4a=s($se);yat=r(b4a,"TFRobertaForCausalLM"),b4a.forEach(t),xat=r(jto," (RoBERTa model)"),jto.forEach(t),$at=i(Ae),IA=n(Ae,"LI",{});var Dto=s(IA);b$e=n(Dto,"STRONG",{});var v4a=s(b$e);kat=r(v4a,"roformer"),v4a.forEach(t),Sat=r(Dto," \u2014 "),kse=n(Dto,"A",{href:!0});var F4a=s(kse);Rat=r(F4a,"TFRoFormerForCausalLM"),F4a.forEach(t),Pat=r(Dto," (RoFormer model)"),Dto.forEach(t),Bat=i(Ae),NA=n(Ae,"LI",{});var Gto=s(NA);v$e=n(Gto,"STRONG",{});var T4a=s(v$e);Iat=r(T4a,"transfo-xl"),T4a.forEach(t),Nat=r(Gto," \u2014 "),Sse=n(Gto,"A",{href:!0});var M4a=s(Sse);qat=r(M4a,"TFTransfoXLLMHeadModel"),M4a.forEach(t),jat=r(Gto," (Transformer-XL model)"),Gto.forEach(t),Dat=i(Ae),qA=n(Ae,"LI",{});var Oto=s(qA);F$e=n(Oto,"STRONG",{});var E4a=s(F$e);Gat=r(E4a,"xglm"),E4a.forEach(t),Oat=r(Oto," \u2014 "),Rse=n(Oto,"A",{href:!0});var C4a=s(Rse);Vat=r(C4a,"TFXGLMForCausalLM"),C4a.forEach(t),Xat=r(Oto," (XGLM model)"),Oto.forEach(t),zat=i(Ae),jA=n(Ae,"LI",{});var Vto=s(jA);T$e=n(Vto,"STRONG",{});var w4a=s(T$e);Qat=r(w4a,"xlm"),w4a.forEach(t),Wat=r(Vto," \u2014 "),Pse=n(Vto,"A",{href:!0});var A4a=s(Pse);Uat=r(A4a,"TFXLMWithLMHeadModel"),A4a.forEach(t),Hat=r(Vto," (XLM model)"),Vto.forEach(t),Jat=i(Ae),DA=n(Ae,"LI",{});var Xto=s(DA);M$e=n(Xto,"STRONG",{});var L4a=s(M$e);Yat=r(L4a,"xlnet"),L4a.forEach(t),Zat=r(Xto," \u2014 "),Bse=n(Xto,"A",{href:!0});var y4a=s(Bse);Kat=r(y4a,"TFXLNetLMHeadModel"),y4a.forEach(t),ent=r(Xto," (XLNet model)"),Xto.forEach(t),Ae.forEach(t),ont=i($i),T(GA.$$.fragment,$i),$i.forEach(t),xi.forEach(t),Qdo=i(c),xc=n(c,"H2",{class:!0});var ufo=s(xc);OA=n(ufo,"A",{id:!0,class:!0,href:!0});var x4a=s(OA);E$e=n(x4a,"SPAN",{});var $4a=s(E$e);T(KP.$$.fragment,$4a),$4a.forEach(t),x4a.forEach(t),rnt=i(ufo),C$e=n(ufo,"SPAN",{});var k4a=s(C$e);tnt=r(k4a,"TFAutoModelForImageClassification"),k4a.forEach(t),ufo.forEach(t),Wdo=i(c),br=n(c,"DIV",{class:!0});var ki=s(br);T(eB.$$.fragment,ki),ant=i(ki),$c=n(ki,"P",{});var Uge=s($c);nnt=r(Uge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Ise=n(Uge,"A",{href:!0});var S4a=s(Ise);snt=r(S4a,"from_pretrained()"),S4a.forEach(t),lnt=r(Uge," class method or the "),Nse=n(Uge,"A",{href:!0});var R4a=s(Nse);int=r(R4a,"from_config()"),R4a.forEach(t),dnt=r(Uge,` class
method.`),Uge.forEach(t),mnt=i(ki),oB=n(ki,"P",{});var pfo=s(oB);cnt=r(pfo,"This class cannot be instantiated directly using "),w$e=n(pfo,"CODE",{});var P4a=s(w$e);fnt=r(P4a,"__init__()"),P4a.forEach(t),gnt=r(pfo," (throws an error)."),pfo.forEach(t),hnt=i(ki),aa=n(ki,"DIV",{class:!0});var L$=s(aa);T(rB.$$.fragment,L$),unt=i(L$),A$e=n(L$,"P",{});var B4a=s(A$e);pnt=r(B4a,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),B4a.forEach(t),_nt=i(L$),kc=n(L$,"P",{});var Hge=s(kc);bnt=r(Hge,`Note:
Loading a model from its configuration file does `),L$e=n(Hge,"STRONG",{});var I4a=s(L$e);vnt=r(I4a,"not"),I4a.forEach(t),Fnt=r(Hge,` load the model weights. It only affects the
model\u2019s configuration. Use `),qse=n(Hge,"A",{href:!0});var N4a=s(qse);Tnt=r(N4a,"from_pretrained()"),N4a.forEach(t),Mnt=r(Hge," to load the model weights."),Hge.forEach(t),Ent=i(L$),T(VA.$$.fragment,L$),L$.forEach(t),Cnt=i(ki),Ur=n(ki,"DIV",{class:!0});var Si=s(Ur);T(tB.$$.fragment,Si),wnt=i(Si),y$e=n(Si,"P",{});var q4a=s(y$e);Ant=r(q4a,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),q4a.forEach(t),Lnt=i(Si),zn=n(Si,"P",{});var y$=s(zn);ynt=r(y$,"The model class to instantiate is selected based on the "),x$e=n(y$,"CODE",{});var j4a=s(x$e);xnt=r(j4a,"model_type"),j4a.forEach(t),$nt=r(y$,` property of the config object (either
passed as an argument or loaded from `),$$e=n(y$,"CODE",{});var D4a=s($$e);knt=r(D4a,"pretrained_model_name_or_path"),D4a.forEach(t),Snt=r(y$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k$e=n(y$,"CODE",{});var G4a=s(k$e);Rnt=r(G4a,"pretrained_model_name_or_path"),G4a.forEach(t),Pnt=r(y$,":"),y$.forEach(t),Bnt=i(Si),$e=n(Si,"UL",{});var je=s($e);XA=n(je,"LI",{});var zto=s(XA);S$e=n(zto,"STRONG",{});var O4a=s(S$e);Int=r(O4a,"convnext"),O4a.forEach(t),Nnt=r(zto," \u2014 "),jse=n(zto,"A",{href:!0});var V4a=s(jse);qnt=r(V4a,"TFConvNextForImageClassification"),V4a.forEach(t),jnt=r(zto," (ConvNeXT model)"),zto.forEach(t),Dnt=i(je),zA=n(je,"LI",{});var Qto=s(zA);R$e=n(Qto,"STRONG",{});var X4a=s(R$e);Gnt=r(X4a,"cvt"),X4a.forEach(t),Ont=r(Qto," \u2014 "),Dse=n(Qto,"A",{href:!0});var z4a=s(Dse);Vnt=r(z4a,"TFCvtForImageClassification"),z4a.forEach(t),Xnt=r(Qto," (CvT model)"),Qto.forEach(t),znt=i(je),QA=n(je,"LI",{});var Wto=s(QA);P$e=n(Wto,"STRONG",{});var Q4a=s(P$e);Qnt=r(Q4a,"data2vec-vision"),Q4a.forEach(t),Wnt=r(Wto," \u2014 "),Gse=n(Wto,"A",{href:!0});var W4a=s(Gse);Unt=r(W4a,"TFData2VecVisionForImageClassification"),W4a.forEach(t),Hnt=r(Wto," (Data2VecVision model)"),Wto.forEach(t),Jnt=i(je),Ol=n(je,"LI",{});var Wq=s(Ol);B$e=n(Wq,"STRONG",{});var U4a=s(B$e);Ynt=r(U4a,"deit"),U4a.forEach(t),Znt=r(Wq," \u2014 "),Ose=n(Wq,"A",{href:!0});var H4a=s(Ose);Knt=r(H4a,"TFDeiTForImageClassification"),H4a.forEach(t),est=r(Wq," or "),Vse=n(Wq,"A",{href:!0});var J4a=s(Vse);ost=r(J4a,"TFDeiTForImageClassificationWithTeacher"),J4a.forEach(t),rst=r(Wq," (DeiT model)"),Wq.forEach(t),tst=i(je),WA=n(je,"LI",{});var Uto=s(WA);I$e=n(Uto,"STRONG",{});var Y4a=s(I$e);ast=r(Y4a,"mobilevit"),Y4a.forEach(t),nst=r(Uto," \u2014 "),Xse=n(Uto,"A",{href:!0});var Z4a=s(Xse);sst=r(Z4a,"TFMobileViTForImageClassification"),Z4a.forEach(t),lst=r(Uto," (MobileViT model)"),Uto.forEach(t),ist=i(je),UA=n(je,"LI",{});var Hto=s(UA);N$e=n(Hto,"STRONG",{});var K4a=s(N$e);dst=r(K4a,"regnet"),K4a.forEach(t),mst=r(Hto," \u2014 "),zse=n(Hto,"A",{href:!0});var eCa=s(zse);cst=r(eCa,"TFRegNetForImageClassification"),eCa.forEach(t),fst=r(Hto," (RegNet model)"),Hto.forEach(t),gst=i(je),HA=n(je,"LI",{});var Jto=s(HA);q$e=n(Jto,"STRONG",{});var oCa=s(q$e);hst=r(oCa,"resnet"),oCa.forEach(t),ust=r(Jto," \u2014 "),Qse=n(Jto,"A",{href:!0});var rCa=s(Qse);pst=r(rCa,"TFResNetForImageClassification"),rCa.forEach(t),_st=r(Jto," (ResNet model)"),Jto.forEach(t),bst=i(je),JA=n(je,"LI",{});var Yto=s(JA);j$e=n(Yto,"STRONG",{});var tCa=s(j$e);vst=r(tCa,"segformer"),tCa.forEach(t),Fst=r(Yto," \u2014 "),Wse=n(Yto,"A",{href:!0});var aCa=s(Wse);Tst=r(aCa,"TFSegformerForImageClassification"),aCa.forEach(t),Mst=r(Yto," (SegFormer model)"),Yto.forEach(t),Est=i(je),YA=n(je,"LI",{});var Zto=s(YA);D$e=n(Zto,"STRONG",{});var nCa=s(D$e);Cst=r(nCa,"swin"),nCa.forEach(t),wst=r(Zto," \u2014 "),Use=n(Zto,"A",{href:!0});var sCa=s(Use);Ast=r(sCa,"TFSwinForImageClassification"),sCa.forEach(t),Lst=r(Zto," (Swin Transformer model)"),Zto.forEach(t),yst=i(je),ZA=n(je,"LI",{});var Kto=s(ZA);G$e=n(Kto,"STRONG",{});var lCa=s(G$e);xst=r(lCa,"vit"),lCa.forEach(t),$st=r(Kto," \u2014 "),Hse=n(Kto,"A",{href:!0});var iCa=s(Hse);kst=r(iCa,"TFViTForImageClassification"),iCa.forEach(t),Sst=r(Kto," (ViT model)"),Kto.forEach(t),je.forEach(t),Rst=i(Si),T(KA.$$.fragment,Si),Si.forEach(t),ki.forEach(t),Udo=i(c),Sc=n(c,"H2",{class:!0});var _fo=s(Sc);e6=n(_fo,"A",{id:!0,class:!0,href:!0});var dCa=s(e6);O$e=n(dCa,"SPAN",{});var mCa=s(O$e);T(aB.$$.fragment,mCa),mCa.forEach(t),dCa.forEach(t),Pst=i(_fo),V$e=n(_fo,"SPAN",{});var cCa=s(V$e);Bst=r(cCa,"TFAutoModelForSemanticSegmentation"),cCa.forEach(t),_fo.forEach(t),Hdo=i(c),vr=n(c,"DIV",{class:!0});var Ri=s(vr);T(nB.$$.fragment,Ri),Ist=i(Ri),Rc=n(Ri,"P",{});var Jge=s(Rc);Nst=r(Jge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Jse=n(Jge,"A",{href:!0});var fCa=s(Jse);qst=r(fCa,"from_pretrained()"),fCa.forEach(t),jst=r(Jge," class method or the "),Yse=n(Jge,"A",{href:!0});var gCa=s(Yse);Dst=r(gCa,"from_config()"),gCa.forEach(t),Gst=r(Jge,` class
method.`),Jge.forEach(t),Ost=i(Ri),sB=n(Ri,"P",{});var bfo=s(sB);Vst=r(bfo,"This class cannot be instantiated directly using "),X$e=n(bfo,"CODE",{});var hCa=s(X$e);Xst=r(hCa,"__init__()"),hCa.forEach(t),zst=r(bfo," (throws an error)."),bfo.forEach(t),Qst=i(Ri),na=n(Ri,"DIV",{class:!0});var x$=s(na);T(lB.$$.fragment,x$),Wst=i(x$),z$e=n(x$,"P",{});var uCa=s(z$e);Ust=r(uCa,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),uCa.forEach(t),Hst=i(x$),Pc=n(x$,"P",{});var Yge=s(Pc);Jst=r(Yge,`Note:
Loading a model from its configuration file does `),Q$e=n(Yge,"STRONG",{});var pCa=s(Q$e);Yst=r(pCa,"not"),pCa.forEach(t),Zst=r(Yge,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zse=n(Yge,"A",{href:!0});var _Ca=s(Zse);Kst=r(_Ca,"from_pretrained()"),_Ca.forEach(t),elt=r(Yge," to load the model weights."),Yge.forEach(t),olt=i(x$),T(o6.$$.fragment,x$),x$.forEach(t),rlt=i(Ri),Hr=n(Ri,"DIV",{class:!0});var Pi=s(Hr);T(iB.$$.fragment,Pi),tlt=i(Pi),W$e=n(Pi,"P",{});var bCa=s(W$e);alt=r(bCa,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),bCa.forEach(t),nlt=i(Pi),Qn=n(Pi,"P",{});var $$=s(Qn);slt=r($$,"The model class to instantiate is selected based on the "),U$e=n($$,"CODE",{});var vCa=s(U$e);llt=r(vCa,"model_type"),vCa.forEach(t),ilt=r($$,` property of the config object (either
passed as an argument or loaded from `),H$e=n($$,"CODE",{});var FCa=s(H$e);dlt=r(FCa,"pretrained_model_name_or_path"),FCa.forEach(t),mlt=r($$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J$e=n($$,"CODE",{});var TCa=s(J$e);clt=r(TCa,"pretrained_model_name_or_path"),TCa.forEach(t),flt=r($$,":"),$$.forEach(t),glt=i(Pi),Bc=n(Pi,"UL",{});var Zge=s(Bc);r6=n(Zge,"LI",{});var eao=s(r6);Y$e=n(eao,"STRONG",{});var MCa=s(Y$e);hlt=r(MCa,"data2vec-vision"),MCa.forEach(t),ult=r(eao," \u2014 "),Kse=n(eao,"A",{href:!0});var ECa=s(Kse);plt=r(ECa,"TFData2VecVisionForSemanticSegmentation"),ECa.forEach(t),_lt=r(eao," (Data2VecVision model)"),eao.forEach(t),blt=i(Zge),t6=n(Zge,"LI",{});var oao=s(t6);Z$e=n(oao,"STRONG",{});var CCa=s(Z$e);vlt=r(CCa,"mobilevit"),CCa.forEach(t),Flt=r(oao," \u2014 "),ele=n(oao,"A",{href:!0});var wCa=s(ele);Tlt=r(wCa,"TFMobileViTForSemanticSegmentation"),wCa.forEach(t),Mlt=r(oao," (MobileViT model)"),oao.forEach(t),Elt=i(Zge),a6=n(Zge,"LI",{});var rao=s(a6);K$e=n(rao,"STRONG",{});var ACa=s(K$e);Clt=r(ACa,"segformer"),ACa.forEach(t),wlt=r(rao," \u2014 "),ole=n(rao,"A",{href:!0});var LCa=s(ole);Alt=r(LCa,"TFSegformerForSemanticSegmentation"),LCa.forEach(t),Llt=r(rao," (SegFormer model)"),rao.forEach(t),Zge.forEach(t),ylt=i(Pi),T(n6.$$.fragment,Pi),Pi.forEach(t),Ri.forEach(t),Jdo=i(c),Ic=n(c,"H2",{class:!0});var vfo=s(Ic);s6=n(vfo,"A",{id:!0,class:!0,href:!0});var yCa=s(s6);eke=n(yCa,"SPAN",{});var xCa=s(eke);T(dB.$$.fragment,xCa),xCa.forEach(t),yCa.forEach(t),xlt=i(vfo),oke=n(vfo,"SPAN",{});var $Ca=s(oke);$lt=r($Ca,"TFAutoModelForMaskedLM"),$Ca.forEach(t),vfo.forEach(t),Ydo=i(c),Fr=n(c,"DIV",{class:!0});var Bi=s(Fr);T(mB.$$.fragment,Bi),klt=i(Bi),Nc=n(Bi,"P",{});var Kge=s(Nc);Slt=r(Kge,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rle=n(Kge,"A",{href:!0});var kCa=s(rle);Rlt=r(kCa,"from_pretrained()"),kCa.forEach(t),Plt=r(Kge," class method or the "),tle=n(Kge,"A",{href:!0});var SCa=s(tle);Blt=r(SCa,"from_config()"),SCa.forEach(t),Ilt=r(Kge,` class
method.`),Kge.forEach(t),Nlt=i(Bi),cB=n(Bi,"P",{});var Ffo=s(cB);qlt=r(Ffo,"This class cannot be instantiated directly using "),rke=n(Ffo,"CODE",{});var RCa=s(rke);jlt=r(RCa,"__init__()"),RCa.forEach(t),Dlt=r(Ffo," (throws an error)."),Ffo.forEach(t),Glt=i(Bi),sa=n(Bi,"DIV",{class:!0});var k$=s(sa);T(fB.$$.fragment,k$),Olt=i(k$),tke=n(k$,"P",{});var PCa=s(tke);Vlt=r(PCa,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PCa.forEach(t),Xlt=i(k$),qc=n(k$,"P",{});var ehe=s(qc);zlt=r(ehe,`Note:
Loading a model from its configuration file does `),ake=n(ehe,"STRONG",{});var BCa=s(ake);Qlt=r(BCa,"not"),BCa.forEach(t),Wlt=r(ehe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ale=n(ehe,"A",{href:!0});var ICa=s(ale);Ult=r(ICa,"from_pretrained()"),ICa.forEach(t),Hlt=r(ehe," to load the model weights."),ehe.forEach(t),Jlt=i(k$),T(l6.$$.fragment,k$),k$.forEach(t),Ylt=i(Bi),Jr=n(Bi,"DIV",{class:!0});var Ii=s(Jr);T(gB.$$.fragment,Ii),Zlt=i(Ii),nke=n(Ii,"P",{});var NCa=s(nke);Klt=r(NCa,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),NCa.forEach(t),eit=i(Ii),Wn=n(Ii,"P",{});var S$=s(Wn);oit=r(S$,"The model class to instantiate is selected based on the "),ske=n(S$,"CODE",{});var qCa=s(ske);rit=r(qCa,"model_type"),qCa.forEach(t),tit=r(S$,` property of the config object (either
passed as an argument or loaded from `),lke=n(S$,"CODE",{});var jCa=s(lke);ait=r(jCa,"pretrained_model_name_or_path"),jCa.forEach(t),nit=r(S$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ike=n(S$,"CODE",{});var DCa=s(ike);sit=r(DCa,"pretrained_model_name_or_path"),DCa.forEach(t),lit=r(S$,":"),S$.forEach(t),iit=i(Ii),he=n(Ii,"UL",{});var be=s(he);i6=n(be,"LI",{});var tao=s(i6);dke=n(tao,"STRONG",{});var GCa=s(dke);dit=r(GCa,"albert"),GCa.forEach(t),mit=r(tao," \u2014 "),nle=n(tao,"A",{href:!0});var OCa=s(nle);cit=r(OCa,"TFAlbertForMaskedLM"),OCa.forEach(t),fit=r(tao," (ALBERT model)"),tao.forEach(t),git=i(be),d6=n(be,"LI",{});var aao=s(d6);mke=n(aao,"STRONG",{});var VCa=s(mke);hit=r(VCa,"bert"),VCa.forEach(t),uit=r(aao," \u2014 "),sle=n(aao,"A",{href:!0});var XCa=s(sle);pit=r(XCa,"TFBertForMaskedLM"),XCa.forEach(t),_it=r(aao," (BERT model)"),aao.forEach(t),bit=i(be),m6=n(be,"LI",{});var nao=s(m6);cke=n(nao,"STRONG",{});var zCa=s(cke);vit=r(zCa,"camembert"),zCa.forEach(t),Fit=r(nao," \u2014 "),lle=n(nao,"A",{href:!0});var QCa=s(lle);Tit=r(QCa,"TFCamembertForMaskedLM"),QCa.forEach(t),Mit=r(nao," (CamemBERT model)"),nao.forEach(t),Eit=i(be),c6=n(be,"LI",{});var sao=s(c6);fke=n(sao,"STRONG",{});var WCa=s(fke);Cit=r(WCa,"convbert"),WCa.forEach(t),wit=r(sao," \u2014 "),ile=n(sao,"A",{href:!0});var UCa=s(ile);Ait=r(UCa,"TFConvBertForMaskedLM"),UCa.forEach(t),Lit=r(sao," (ConvBERT model)"),sao.forEach(t),yit=i(be),f6=n(be,"LI",{});var lao=s(f6);gke=n(lao,"STRONG",{});var HCa=s(gke);xit=r(HCa,"deberta"),HCa.forEach(t),$it=r(lao," \u2014 "),dle=n(lao,"A",{href:!0});var JCa=s(dle);kit=r(JCa,"TFDebertaForMaskedLM"),JCa.forEach(t),Sit=r(lao," (DeBERTa model)"),lao.forEach(t),Rit=i(be),g6=n(be,"LI",{});var iao=s(g6);hke=n(iao,"STRONG",{});var YCa=s(hke);Pit=r(YCa,"deberta-v2"),YCa.forEach(t),Bit=r(iao," \u2014 "),mle=n(iao,"A",{href:!0});var ZCa=s(mle);Iit=r(ZCa,"TFDebertaV2ForMaskedLM"),ZCa.forEach(t),Nit=r(iao," (DeBERTa-v2 model)"),iao.forEach(t),qit=i(be),h6=n(be,"LI",{});var dao=s(h6);uke=n(dao,"STRONG",{});var KCa=s(uke);jit=r(KCa,"distilbert"),KCa.forEach(t),Dit=r(dao," \u2014 "),cle=n(dao,"A",{href:!0});var e3a=s(cle);Git=r(e3a,"TFDistilBertForMaskedLM"),e3a.forEach(t),Oit=r(dao," (DistilBERT model)"),dao.forEach(t),Vit=i(be),u6=n(be,"LI",{});var mao=s(u6);pke=n(mao,"STRONG",{});var o3a=s(pke);Xit=r(o3a,"electra"),o3a.forEach(t),zit=r(mao," \u2014 "),fle=n(mao,"A",{href:!0});var r3a=s(fle);Qit=r(r3a,"TFElectraForMaskedLM"),r3a.forEach(t),Wit=r(mao," (ELECTRA model)"),mao.forEach(t),Uit=i(be),p6=n(be,"LI",{});var cao=s(p6);_ke=n(cao,"STRONG",{});var t3a=s(_ke);Hit=r(t3a,"esm"),t3a.forEach(t),Jit=r(cao," \u2014 "),gle=n(cao,"A",{href:!0});var a3a=s(gle);Yit=r(a3a,"TFEsmForMaskedLM"),a3a.forEach(t),Zit=r(cao," (ESM model)"),cao.forEach(t),Kit=i(be),_6=n(be,"LI",{});var fao=s(_6);bke=n(fao,"STRONG",{});var n3a=s(bke);edt=r(n3a,"flaubert"),n3a.forEach(t),odt=r(fao," \u2014 "),hle=n(fao,"A",{href:!0});var s3a=s(hle);rdt=r(s3a,"TFFlaubertWithLMHeadModel"),s3a.forEach(t),tdt=r(fao," (FlauBERT model)"),fao.forEach(t),adt=i(be),b6=n(be,"LI",{});var gao=s(b6);vke=n(gao,"STRONG",{});var l3a=s(vke);ndt=r(l3a,"funnel"),l3a.forEach(t),sdt=r(gao," \u2014 "),ule=n(gao,"A",{href:!0});var i3a=s(ule);ldt=r(i3a,"TFFunnelForMaskedLM"),i3a.forEach(t),idt=r(gao," (Funnel Transformer model)"),gao.forEach(t),ddt=i(be),v6=n(be,"LI",{});var hao=s(v6);Fke=n(hao,"STRONG",{});var d3a=s(Fke);mdt=r(d3a,"layoutlm"),d3a.forEach(t),cdt=r(hao," \u2014 "),ple=n(hao,"A",{href:!0});var m3a=s(ple);fdt=r(m3a,"TFLayoutLMForMaskedLM"),m3a.forEach(t),gdt=r(hao," (LayoutLM model)"),hao.forEach(t),hdt=i(be),F6=n(be,"LI",{});var uao=s(F6);Tke=n(uao,"STRONG",{});var c3a=s(Tke);udt=r(c3a,"longformer"),c3a.forEach(t),pdt=r(uao," \u2014 "),_le=n(uao,"A",{href:!0});var f3a=s(_le);_dt=r(f3a,"TFLongformerForMaskedLM"),f3a.forEach(t),bdt=r(uao," (Longformer model)"),uao.forEach(t),vdt=i(be),T6=n(be,"LI",{});var pao=s(T6);Mke=n(pao,"STRONG",{});var g3a=s(Mke);Fdt=r(g3a,"mobilebert"),g3a.forEach(t),Tdt=r(pao," \u2014 "),ble=n(pao,"A",{href:!0});var h3a=s(ble);Mdt=r(h3a,"TFMobileBertForMaskedLM"),h3a.forEach(t),Edt=r(pao," (MobileBERT model)"),pao.forEach(t),Cdt=i(be),M6=n(be,"LI",{});var _ao=s(M6);Eke=n(_ao,"STRONG",{});var u3a=s(Eke);wdt=r(u3a,"mpnet"),u3a.forEach(t),Adt=r(_ao," \u2014 "),vle=n(_ao,"A",{href:!0});var p3a=s(vle);Ldt=r(p3a,"TFMPNetForMaskedLM"),p3a.forEach(t),ydt=r(_ao," (MPNet model)"),_ao.forEach(t),xdt=i(be),E6=n(be,"LI",{});var bao=s(E6);Cke=n(bao,"STRONG",{});var _3a=s(Cke);$dt=r(_3a,"rembert"),_3a.forEach(t),kdt=r(bao," \u2014 "),Fle=n(bao,"A",{href:!0});var b3a=s(Fle);Sdt=r(b3a,"TFRemBertForMaskedLM"),b3a.forEach(t),Rdt=r(bao," (RemBERT model)"),bao.forEach(t),Pdt=i(be),C6=n(be,"LI",{});var vao=s(C6);wke=n(vao,"STRONG",{});var v3a=s(wke);Bdt=r(v3a,"roberta"),v3a.forEach(t),Idt=r(vao," \u2014 "),Tle=n(vao,"A",{href:!0});var F3a=s(Tle);Ndt=r(F3a,"TFRobertaForMaskedLM"),F3a.forEach(t),qdt=r(vao," (RoBERTa model)"),vao.forEach(t),jdt=i(be),w6=n(be,"LI",{});var Fao=s(w6);Ake=n(Fao,"STRONG",{});var T3a=s(Ake);Ddt=r(T3a,"roformer"),T3a.forEach(t),Gdt=r(Fao," \u2014 "),Mle=n(Fao,"A",{href:!0});var M3a=s(Mle);Odt=r(M3a,"TFRoFormerForMaskedLM"),M3a.forEach(t),Vdt=r(Fao," (RoFormer model)"),Fao.forEach(t),Xdt=i(be),A6=n(be,"LI",{});var Tao=s(A6);Lke=n(Tao,"STRONG",{});var E3a=s(Lke);zdt=r(E3a,"tapas"),E3a.forEach(t),Qdt=r(Tao," \u2014 "),Ele=n(Tao,"A",{href:!0});var C3a=s(Ele);Wdt=r(C3a,"TFTapasForMaskedLM"),C3a.forEach(t),Udt=r(Tao," (TAPAS model)"),Tao.forEach(t),Hdt=i(be),L6=n(be,"LI",{});var Mao=s(L6);yke=n(Mao,"STRONG",{});var w3a=s(yke);Jdt=r(w3a,"xlm"),w3a.forEach(t),Ydt=r(Mao," \u2014 "),Cle=n(Mao,"A",{href:!0});var A3a=s(Cle);Zdt=r(A3a,"TFXLMWithLMHeadModel"),A3a.forEach(t),Kdt=r(Mao," (XLM model)"),Mao.forEach(t),emt=i(be),y6=n(be,"LI",{});var Eao=s(y6);xke=n(Eao,"STRONG",{});var L3a=s(xke);omt=r(L3a,"xlm-roberta"),L3a.forEach(t),rmt=r(Eao," \u2014 "),wle=n(Eao,"A",{href:!0});var y3a=s(wle);tmt=r(y3a,"TFXLMRobertaForMaskedLM"),y3a.forEach(t),amt=r(Eao," (XLM-RoBERTa model)"),Eao.forEach(t),be.forEach(t),nmt=i(Ii),T(x6.$$.fragment,Ii),Ii.forEach(t),Bi.forEach(t),Zdo=i(c),jc=n(c,"H2",{class:!0});var Tfo=s(jc);$6=n(Tfo,"A",{id:!0,class:!0,href:!0});var x3a=s($6);$ke=n(x3a,"SPAN",{});var $3a=s($ke);T(hB.$$.fragment,$3a),$3a.forEach(t),x3a.forEach(t),smt=i(Tfo),kke=n(Tfo,"SPAN",{});var k3a=s(kke);lmt=r(k3a,"TFAutoModelForSeq2SeqLM"),k3a.forEach(t),Tfo.forEach(t),Kdo=i(c),Tr=n(c,"DIV",{class:!0});var Ni=s(Tr);T(uB.$$.fragment,Ni),imt=i(Ni),Dc=n(Ni,"P",{});var ohe=s(Dc);dmt=r(ohe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ale=n(ohe,"A",{href:!0});var S3a=s(Ale);mmt=r(S3a,"from_pretrained()"),S3a.forEach(t),cmt=r(ohe," class method or the "),Lle=n(ohe,"A",{href:!0});var R3a=s(Lle);fmt=r(R3a,"from_config()"),R3a.forEach(t),gmt=r(ohe,` class
method.`),ohe.forEach(t),hmt=i(Ni),pB=n(Ni,"P",{});var Mfo=s(pB);umt=r(Mfo,"This class cannot be instantiated directly using "),Ske=n(Mfo,"CODE",{});var P3a=s(Ske);pmt=r(P3a,"__init__()"),P3a.forEach(t),_mt=r(Mfo," (throws an error)."),Mfo.forEach(t),bmt=i(Ni),la=n(Ni,"DIV",{class:!0});var R$=s(la);T(_B.$$.fragment,R$),vmt=i(R$),Rke=n(R$,"P",{});var B3a=s(Rke);Fmt=r(B3a,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),B3a.forEach(t),Tmt=i(R$),Gc=n(R$,"P",{});var rhe=s(Gc);Mmt=r(rhe,`Note:
Loading a model from its configuration file does `),Pke=n(rhe,"STRONG",{});var I3a=s(Pke);Emt=r(I3a,"not"),I3a.forEach(t),Cmt=r(rhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yle=n(rhe,"A",{href:!0});var N3a=s(yle);wmt=r(N3a,"from_pretrained()"),N3a.forEach(t),Amt=r(rhe," to load the model weights."),rhe.forEach(t),Lmt=i(R$),T(k6.$$.fragment,R$),R$.forEach(t),ymt=i(Ni),Yr=n(Ni,"DIV",{class:!0});var qi=s(Yr);T(bB.$$.fragment,qi),xmt=i(qi),Bke=n(qi,"P",{});var q3a=s(Bke);$mt=r(q3a,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),q3a.forEach(t),kmt=i(qi),Un=n(qi,"P",{});var P$=s(Un);Smt=r(P$,"The model class to instantiate is selected based on the "),Ike=n(P$,"CODE",{});var j3a=s(Ike);Rmt=r(j3a,"model_type"),j3a.forEach(t),Pmt=r(P$,` property of the config object (either
passed as an argument or loaded from `),Nke=n(P$,"CODE",{});var D3a=s(Nke);Bmt=r(D3a,"pretrained_model_name_or_path"),D3a.forEach(t),Imt=r(P$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qke=n(P$,"CODE",{});var G3a=s(qke);Nmt=r(G3a,"pretrained_model_name_or_path"),G3a.forEach(t),qmt=r(P$,":"),P$.forEach(t),jmt=i(qi),ke=n(qi,"UL",{});var De=s(ke);S6=n(De,"LI",{});var Cao=s(S6);jke=n(Cao,"STRONG",{});var O3a=s(jke);Dmt=r(O3a,"bart"),O3a.forEach(t),Gmt=r(Cao," \u2014 "),xle=n(Cao,"A",{href:!0});var V3a=s(xle);Omt=r(V3a,"TFBartForConditionalGeneration"),V3a.forEach(t),Vmt=r(Cao," (BART model)"),Cao.forEach(t),Xmt=i(De),R6=n(De,"LI",{});var wao=s(R6);Dke=n(wao,"STRONG",{});var X3a=s(Dke);zmt=r(X3a,"blenderbot"),X3a.forEach(t),Qmt=r(wao," \u2014 "),$le=n(wao,"A",{href:!0});var z3a=s($le);Wmt=r(z3a,"TFBlenderbotForConditionalGeneration"),z3a.forEach(t),Umt=r(wao," (Blenderbot model)"),wao.forEach(t),Hmt=i(De),P6=n(De,"LI",{});var Aao=s(P6);Gke=n(Aao,"STRONG",{});var Q3a=s(Gke);Jmt=r(Q3a,"blenderbot-small"),Q3a.forEach(t),Ymt=r(Aao," \u2014 "),kle=n(Aao,"A",{href:!0});var W3a=s(kle);Zmt=r(W3a,"TFBlenderbotSmallForConditionalGeneration"),W3a.forEach(t),Kmt=r(Aao," (BlenderbotSmall model)"),Aao.forEach(t),ect=i(De),B6=n(De,"LI",{});var Lao=s(B6);Oke=n(Lao,"STRONG",{});var U3a=s(Oke);oct=r(U3a,"encoder-decoder"),U3a.forEach(t),rct=r(Lao," \u2014 "),Sle=n(Lao,"A",{href:!0});var H3a=s(Sle);tct=r(H3a,"TFEncoderDecoderModel"),H3a.forEach(t),act=r(Lao," (Encoder decoder model)"),Lao.forEach(t),nct=i(De),I6=n(De,"LI",{});var yao=s(I6);Vke=n(yao,"STRONG",{});var J3a=s(Vke);sct=r(J3a,"led"),J3a.forEach(t),lct=r(yao," \u2014 "),Rle=n(yao,"A",{href:!0});var Y3a=s(Rle);ict=r(Y3a,"TFLEDForConditionalGeneration"),Y3a.forEach(t),dct=r(yao," (LED model)"),yao.forEach(t),mct=i(De),N6=n(De,"LI",{});var xao=s(N6);Xke=n(xao,"STRONG",{});var Z3a=s(Xke);cct=r(Z3a,"marian"),Z3a.forEach(t),fct=r(xao," \u2014 "),Ple=n(xao,"A",{href:!0});var K3a=s(Ple);gct=r(K3a,"TFMarianMTModel"),K3a.forEach(t),hct=r(xao," (Marian model)"),xao.forEach(t),uct=i(De),q6=n(De,"LI",{});var $ao=s(q6);zke=n($ao,"STRONG",{});var e5a=s(zke);pct=r(e5a,"mbart"),e5a.forEach(t),_ct=r($ao," \u2014 "),Ble=n($ao,"A",{href:!0});var o5a=s(Ble);bct=r(o5a,"TFMBartForConditionalGeneration"),o5a.forEach(t),vct=r($ao," (mBART model)"),$ao.forEach(t),Fct=i(De),j6=n(De,"LI",{});var kao=s(j6);Qke=n(kao,"STRONG",{});var r5a=s(Qke);Tct=r(r5a,"mt5"),r5a.forEach(t),Mct=r(kao," \u2014 "),Ile=n(kao,"A",{href:!0});var t5a=s(Ile);Ect=r(t5a,"TFMT5ForConditionalGeneration"),t5a.forEach(t),Cct=r(kao," (MT5 model)"),kao.forEach(t),wct=i(De),D6=n(De,"LI",{});var Sao=s(D6);Wke=n(Sao,"STRONG",{});var a5a=s(Wke);Act=r(a5a,"pegasus"),a5a.forEach(t),Lct=r(Sao," \u2014 "),Nle=n(Sao,"A",{href:!0});var n5a=s(Nle);yct=r(n5a,"TFPegasusForConditionalGeneration"),n5a.forEach(t),xct=r(Sao," (Pegasus model)"),Sao.forEach(t),$ct=i(De),G6=n(De,"LI",{});var Rao=s(G6);Uke=n(Rao,"STRONG",{});var s5a=s(Uke);kct=r(s5a,"t5"),s5a.forEach(t),Sct=r(Rao," \u2014 "),qle=n(Rao,"A",{href:!0});var l5a=s(qle);Rct=r(l5a,"TFT5ForConditionalGeneration"),l5a.forEach(t),Pct=r(Rao," (T5 model)"),Rao.forEach(t),De.forEach(t),Bct=i(qi),T(O6.$$.fragment,qi),qi.forEach(t),Ni.forEach(t),emo=i(c),Oc=n(c,"H2",{class:!0});var Efo=s(Oc);V6=n(Efo,"A",{id:!0,class:!0,href:!0});var i5a=s(V6);Hke=n(i5a,"SPAN",{});var d5a=s(Hke);T(vB.$$.fragment,d5a),d5a.forEach(t),i5a.forEach(t),Ict=i(Efo),Jke=n(Efo,"SPAN",{});var m5a=s(Jke);Nct=r(m5a,"TFAutoModelForSequenceClassification"),m5a.forEach(t),Efo.forEach(t),omo=i(c),Mr=n(c,"DIV",{class:!0});var ji=s(Mr);T(FB.$$.fragment,ji),qct=i(ji),Vc=n(ji,"P",{});var the=s(Vc);jct=r(the,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jle=n(the,"A",{href:!0});var c5a=s(jle);Dct=r(c5a,"from_pretrained()"),c5a.forEach(t),Gct=r(the," class method or the "),Dle=n(the,"A",{href:!0});var f5a=s(Dle);Oct=r(f5a,"from_config()"),f5a.forEach(t),Vct=r(the,` class
method.`),the.forEach(t),Xct=i(ji),TB=n(ji,"P",{});var Cfo=s(TB);zct=r(Cfo,"This class cannot be instantiated directly using "),Yke=n(Cfo,"CODE",{});var g5a=s(Yke);Qct=r(g5a,"__init__()"),g5a.forEach(t),Wct=r(Cfo," (throws an error)."),Cfo.forEach(t),Uct=i(ji),ia=n(ji,"DIV",{class:!0});var B$=s(ia);T(MB.$$.fragment,B$),Hct=i(B$),Zke=n(B$,"P",{});var h5a=s(Zke);Jct=r(h5a,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),h5a.forEach(t),Yct=i(B$),Xc=n(B$,"P",{});var ahe=s(Xc);Zct=r(ahe,`Note:
Loading a model from its configuration file does `),Kke=n(ahe,"STRONG",{});var u5a=s(Kke);Kct=r(u5a,"not"),u5a.forEach(t),eft=r(ahe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gle=n(ahe,"A",{href:!0});var p5a=s(Gle);oft=r(p5a,"from_pretrained()"),p5a.forEach(t),rft=r(ahe," to load the model weights."),ahe.forEach(t),tft=i(B$),T(X6.$$.fragment,B$),B$.forEach(t),aft=i(ji),Zr=n(ji,"DIV",{class:!0});var Di=s(Zr);T(EB.$$.fragment,Di),nft=i(Di),eSe=n(Di,"P",{});var _5a=s(eSe);sft=r(_5a,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_5a.forEach(t),lft=i(Di),Hn=n(Di,"P",{});var I$=s(Hn);ift=r(I$,"The model class to instantiate is selected based on the "),oSe=n(I$,"CODE",{});var b5a=s(oSe);dft=r(b5a,"model_type"),b5a.forEach(t),mft=r(I$,` property of the config object (either
passed as an argument or loaded from `),rSe=n(I$,"CODE",{});var v5a=s(rSe);cft=r(v5a,"pretrained_model_name_or_path"),v5a.forEach(t),fft=r(I$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tSe=n(I$,"CODE",{});var F5a=s(tSe);gft=r(F5a,"pretrained_model_name_or_path"),F5a.forEach(t),hft=r(I$,":"),I$.forEach(t),uft=i(Di),ae=n(Di,"UL",{});var se=s(ae);z6=n(se,"LI",{});var Pao=s(z6);aSe=n(Pao,"STRONG",{});var T5a=s(aSe);pft=r(T5a,"albert"),T5a.forEach(t),_ft=r(Pao," \u2014 "),Ole=n(Pao,"A",{href:!0});var M5a=s(Ole);bft=r(M5a,"TFAlbertForSequenceClassification"),M5a.forEach(t),vft=r(Pao," (ALBERT model)"),Pao.forEach(t),Fft=i(se),Q6=n(se,"LI",{});var Bao=s(Q6);nSe=n(Bao,"STRONG",{});var E5a=s(nSe);Tft=r(E5a,"bert"),E5a.forEach(t),Mft=r(Bao," \u2014 "),Vle=n(Bao,"A",{href:!0});var C5a=s(Vle);Eft=r(C5a,"TFBertForSequenceClassification"),C5a.forEach(t),Cft=r(Bao," (BERT model)"),Bao.forEach(t),wft=i(se),W6=n(se,"LI",{});var Iao=s(W6);sSe=n(Iao,"STRONG",{});var w5a=s(sSe);Aft=r(w5a,"camembert"),w5a.forEach(t),Lft=r(Iao," \u2014 "),Xle=n(Iao,"A",{href:!0});var A5a=s(Xle);yft=r(A5a,"TFCamembertForSequenceClassification"),A5a.forEach(t),xft=r(Iao," (CamemBERT model)"),Iao.forEach(t),$ft=i(se),U6=n(se,"LI",{});var Nao=s(U6);lSe=n(Nao,"STRONG",{});var L5a=s(lSe);kft=r(L5a,"convbert"),L5a.forEach(t),Sft=r(Nao," \u2014 "),zle=n(Nao,"A",{href:!0});var y5a=s(zle);Rft=r(y5a,"TFConvBertForSequenceClassification"),y5a.forEach(t),Pft=r(Nao," (ConvBERT model)"),Nao.forEach(t),Bft=i(se),H6=n(se,"LI",{});var qao=s(H6);iSe=n(qao,"STRONG",{});var x5a=s(iSe);Ift=r(x5a,"ctrl"),x5a.forEach(t),Nft=r(qao," \u2014 "),Qle=n(qao,"A",{href:!0});var $5a=s(Qle);qft=r($5a,"TFCTRLForSequenceClassification"),$5a.forEach(t),jft=r(qao," (CTRL model)"),qao.forEach(t),Dft=i(se),J6=n(se,"LI",{});var jao=s(J6);dSe=n(jao,"STRONG",{});var k5a=s(dSe);Gft=r(k5a,"deberta"),k5a.forEach(t),Oft=r(jao," \u2014 "),Wle=n(jao,"A",{href:!0});var S5a=s(Wle);Vft=r(S5a,"TFDebertaForSequenceClassification"),S5a.forEach(t),Xft=r(jao," (DeBERTa model)"),jao.forEach(t),zft=i(se),Y6=n(se,"LI",{});var Dao=s(Y6);mSe=n(Dao,"STRONG",{});var R5a=s(mSe);Qft=r(R5a,"deberta-v2"),R5a.forEach(t),Wft=r(Dao," \u2014 "),Ule=n(Dao,"A",{href:!0});var P5a=s(Ule);Uft=r(P5a,"TFDebertaV2ForSequenceClassification"),P5a.forEach(t),Hft=r(Dao," (DeBERTa-v2 model)"),Dao.forEach(t),Jft=i(se),Z6=n(se,"LI",{});var Gao=s(Z6);cSe=n(Gao,"STRONG",{});var B5a=s(cSe);Yft=r(B5a,"distilbert"),B5a.forEach(t),Zft=r(Gao," \u2014 "),Hle=n(Gao,"A",{href:!0});var I5a=s(Hle);Kft=r(I5a,"TFDistilBertForSequenceClassification"),I5a.forEach(t),egt=r(Gao," (DistilBERT model)"),Gao.forEach(t),ogt=i(se),K6=n(se,"LI",{});var Oao=s(K6);fSe=n(Oao,"STRONG",{});var N5a=s(fSe);rgt=r(N5a,"electra"),N5a.forEach(t),tgt=r(Oao," \u2014 "),Jle=n(Oao,"A",{href:!0});var q5a=s(Jle);agt=r(q5a,"TFElectraForSequenceClassification"),q5a.forEach(t),ngt=r(Oao," (ELECTRA model)"),Oao.forEach(t),sgt=i(se),e7=n(se,"LI",{});var Vao=s(e7);gSe=n(Vao,"STRONG",{});var j5a=s(gSe);lgt=r(j5a,"esm"),j5a.forEach(t),igt=r(Vao," \u2014 "),Yle=n(Vao,"A",{href:!0});var D5a=s(Yle);dgt=r(D5a,"TFEsmForSequenceClassification"),D5a.forEach(t),mgt=r(Vao," (ESM model)"),Vao.forEach(t),cgt=i(se),o7=n(se,"LI",{});var Xao=s(o7);hSe=n(Xao,"STRONG",{});var G5a=s(hSe);fgt=r(G5a,"flaubert"),G5a.forEach(t),ggt=r(Xao," \u2014 "),Zle=n(Xao,"A",{href:!0});var O5a=s(Zle);hgt=r(O5a,"TFFlaubertForSequenceClassification"),O5a.forEach(t),ugt=r(Xao," (FlauBERT model)"),Xao.forEach(t),pgt=i(se),r7=n(se,"LI",{});var zao=s(r7);uSe=n(zao,"STRONG",{});var V5a=s(uSe);_gt=r(V5a,"funnel"),V5a.forEach(t),bgt=r(zao," \u2014 "),Kle=n(zao,"A",{href:!0});var X5a=s(Kle);vgt=r(X5a,"TFFunnelForSequenceClassification"),X5a.forEach(t),Fgt=r(zao," (Funnel Transformer model)"),zao.forEach(t),Tgt=i(se),t7=n(se,"LI",{});var Qao=s(t7);pSe=n(Qao,"STRONG",{});var z5a=s(pSe);Mgt=r(z5a,"gpt2"),z5a.forEach(t),Egt=r(Qao," \u2014 "),eie=n(Qao,"A",{href:!0});var Q5a=s(eie);Cgt=r(Q5a,"TFGPT2ForSequenceClassification"),Q5a.forEach(t),wgt=r(Qao," (OpenAI GPT-2 model)"),Qao.forEach(t),Agt=i(se),a7=n(se,"LI",{});var Wao=s(a7);_Se=n(Wao,"STRONG",{});var W5a=s(_Se);Lgt=r(W5a,"gptj"),W5a.forEach(t),ygt=r(Wao," \u2014 "),oie=n(Wao,"A",{href:!0});var U5a=s(oie);xgt=r(U5a,"TFGPTJForSequenceClassification"),U5a.forEach(t),$gt=r(Wao," (GPT-J model)"),Wao.forEach(t),kgt=i(se),n7=n(se,"LI",{});var Uao=s(n7);bSe=n(Uao,"STRONG",{});var H5a=s(bSe);Sgt=r(H5a,"layoutlm"),H5a.forEach(t),Rgt=r(Uao," \u2014 "),rie=n(Uao,"A",{href:!0});var J5a=s(rie);Pgt=r(J5a,"TFLayoutLMForSequenceClassification"),J5a.forEach(t),Bgt=r(Uao," (LayoutLM model)"),Uao.forEach(t),Igt=i(se),s7=n(se,"LI",{});var Hao=s(s7);vSe=n(Hao,"STRONG",{});var Y5a=s(vSe);Ngt=r(Y5a,"layoutlmv3"),Y5a.forEach(t),qgt=r(Hao," \u2014 "),tie=n(Hao,"A",{href:!0});var Z5a=s(tie);jgt=r(Z5a,"TFLayoutLMv3ForSequenceClassification"),Z5a.forEach(t),Dgt=r(Hao," (LayoutLMv3 model)"),Hao.forEach(t),Ggt=i(se),l7=n(se,"LI",{});var Jao=s(l7);FSe=n(Jao,"STRONG",{});var K5a=s(FSe);Ogt=r(K5a,"longformer"),K5a.forEach(t),Vgt=r(Jao," \u2014 "),aie=n(Jao,"A",{href:!0});var e0a=s(aie);Xgt=r(e0a,"TFLongformerForSequenceClassification"),e0a.forEach(t),zgt=r(Jao," (Longformer model)"),Jao.forEach(t),Qgt=i(se),i7=n(se,"LI",{});var Yao=s(i7);TSe=n(Yao,"STRONG",{});var o0a=s(TSe);Wgt=r(o0a,"mobilebert"),o0a.forEach(t),Ugt=r(Yao," \u2014 "),nie=n(Yao,"A",{href:!0});var r0a=s(nie);Hgt=r(r0a,"TFMobileBertForSequenceClassification"),r0a.forEach(t),Jgt=r(Yao," (MobileBERT model)"),Yao.forEach(t),Ygt=i(se),d7=n(se,"LI",{});var Zao=s(d7);MSe=n(Zao,"STRONG",{});var t0a=s(MSe);Zgt=r(t0a,"mpnet"),t0a.forEach(t),Kgt=r(Zao," \u2014 "),sie=n(Zao,"A",{href:!0});var a0a=s(sie);eht=r(a0a,"TFMPNetForSequenceClassification"),a0a.forEach(t),oht=r(Zao," (MPNet model)"),Zao.forEach(t),rht=i(se),m7=n(se,"LI",{});var Kao=s(m7);ESe=n(Kao,"STRONG",{});var n0a=s(ESe);tht=r(n0a,"openai-gpt"),n0a.forEach(t),aht=r(Kao," \u2014 "),lie=n(Kao,"A",{href:!0});var s0a=s(lie);nht=r(s0a,"TFOpenAIGPTForSequenceClassification"),s0a.forEach(t),sht=r(Kao," (OpenAI GPT model)"),Kao.forEach(t),lht=i(se),c7=n(se,"LI",{});var eno=s(c7);CSe=n(eno,"STRONG",{});var l0a=s(CSe);iht=r(l0a,"rembert"),l0a.forEach(t),dht=r(eno," \u2014 "),iie=n(eno,"A",{href:!0});var i0a=s(iie);mht=r(i0a,"TFRemBertForSequenceClassification"),i0a.forEach(t),cht=r(eno," (RemBERT model)"),eno.forEach(t),fht=i(se),f7=n(se,"LI",{});var ono=s(f7);wSe=n(ono,"STRONG",{});var d0a=s(wSe);ght=r(d0a,"roberta"),d0a.forEach(t),hht=r(ono," \u2014 "),die=n(ono,"A",{href:!0});var m0a=s(die);uht=r(m0a,"TFRobertaForSequenceClassification"),m0a.forEach(t),pht=r(ono," (RoBERTa model)"),ono.forEach(t),_ht=i(se),g7=n(se,"LI",{});var rno=s(g7);ASe=n(rno,"STRONG",{});var c0a=s(ASe);bht=r(c0a,"roformer"),c0a.forEach(t),vht=r(rno," \u2014 "),mie=n(rno,"A",{href:!0});var f0a=s(mie);Fht=r(f0a,"TFRoFormerForSequenceClassification"),f0a.forEach(t),Tht=r(rno," (RoFormer model)"),rno.forEach(t),Mht=i(se),h7=n(se,"LI",{});var tno=s(h7);LSe=n(tno,"STRONG",{});var g0a=s(LSe);Eht=r(g0a,"tapas"),g0a.forEach(t),Cht=r(tno," \u2014 "),cie=n(tno,"A",{href:!0});var h0a=s(cie);wht=r(h0a,"TFTapasForSequenceClassification"),h0a.forEach(t),Aht=r(tno," (TAPAS model)"),tno.forEach(t),Lht=i(se),u7=n(se,"LI",{});var ano=s(u7);ySe=n(ano,"STRONG",{});var u0a=s(ySe);yht=r(u0a,"transfo-xl"),u0a.forEach(t),xht=r(ano," \u2014 "),fie=n(ano,"A",{href:!0});var p0a=s(fie);$ht=r(p0a,"TFTransfoXLForSequenceClassification"),p0a.forEach(t),kht=r(ano," (Transformer-XL model)"),ano.forEach(t),Sht=i(se),p7=n(se,"LI",{});var nno=s(p7);xSe=n(nno,"STRONG",{});var _0a=s(xSe);Rht=r(_0a,"xlm"),_0a.forEach(t),Pht=r(nno," \u2014 "),gie=n(nno,"A",{href:!0});var b0a=s(gie);Bht=r(b0a,"TFXLMForSequenceClassification"),b0a.forEach(t),Iht=r(nno," (XLM model)"),nno.forEach(t),Nht=i(se),_7=n(se,"LI",{});var sno=s(_7);$Se=n(sno,"STRONG",{});var v0a=s($Se);qht=r(v0a,"xlm-roberta"),v0a.forEach(t),jht=r(sno," \u2014 "),hie=n(sno,"A",{href:!0});var F0a=s(hie);Dht=r(F0a,"TFXLMRobertaForSequenceClassification"),F0a.forEach(t),Ght=r(sno," (XLM-RoBERTa model)"),sno.forEach(t),Oht=i(se),b7=n(se,"LI",{});var lno=s(b7);kSe=n(lno,"STRONG",{});var T0a=s(kSe);Vht=r(T0a,"xlnet"),T0a.forEach(t),Xht=r(lno," \u2014 "),uie=n(lno,"A",{href:!0});var M0a=s(uie);zht=r(M0a,"TFXLNetForSequenceClassification"),M0a.forEach(t),Qht=r(lno," (XLNet model)"),lno.forEach(t),se.forEach(t),Wht=i(Di),T(v7.$$.fragment,Di),Di.forEach(t),ji.forEach(t),rmo=i(c),zc=n(c,"H2",{class:!0});var wfo=s(zc);F7=n(wfo,"A",{id:!0,class:!0,href:!0});var E0a=s(F7);SSe=n(E0a,"SPAN",{});var C0a=s(SSe);T(CB.$$.fragment,C0a),C0a.forEach(t),E0a.forEach(t),Uht=i(wfo),RSe=n(wfo,"SPAN",{});var w0a=s(RSe);Hht=r(w0a,"TFAutoModelForMultipleChoice"),w0a.forEach(t),wfo.forEach(t),tmo=i(c),Er=n(c,"DIV",{class:!0});var Gi=s(Er);T(wB.$$.fragment,Gi),Jht=i(Gi),Qc=n(Gi,"P",{});var nhe=s(Qc);Yht=r(nhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pie=n(nhe,"A",{href:!0});var A0a=s(pie);Zht=r(A0a,"from_pretrained()"),A0a.forEach(t),Kht=r(nhe," class method or the "),_ie=n(nhe,"A",{href:!0});var L0a=s(_ie);eut=r(L0a,"from_config()"),L0a.forEach(t),out=r(nhe,` class
method.`),nhe.forEach(t),rut=i(Gi),AB=n(Gi,"P",{});var Afo=s(AB);tut=r(Afo,"This class cannot be instantiated directly using "),PSe=n(Afo,"CODE",{});var y0a=s(PSe);aut=r(y0a,"__init__()"),y0a.forEach(t),nut=r(Afo," (throws an error)."),Afo.forEach(t),sut=i(Gi),da=n(Gi,"DIV",{class:!0});var N$=s(da);T(LB.$$.fragment,N$),lut=i(N$),BSe=n(N$,"P",{});var x0a=s(BSe);iut=r(x0a,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),x0a.forEach(t),dut=i(N$),Wc=n(N$,"P",{});var she=s(Wc);mut=r(she,`Note:
Loading a model from its configuration file does `),ISe=n(she,"STRONG",{});var $0a=s(ISe);cut=r($0a,"not"),$0a.forEach(t),fut=r(she,` load the model weights. It only affects the
model\u2019s configuration. Use `),bie=n(she,"A",{href:!0});var k0a=s(bie);gut=r(k0a,"from_pretrained()"),k0a.forEach(t),hut=r(she," to load the model weights."),she.forEach(t),uut=i(N$),T(T7.$$.fragment,N$),N$.forEach(t),put=i(Gi),Kr=n(Gi,"DIV",{class:!0});var Oi=s(Kr);T(yB.$$.fragment,Oi),_ut=i(Oi),NSe=n(Oi,"P",{});var S0a=s(NSe);but=r(S0a,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),S0a.forEach(t),vut=i(Oi),Jn=n(Oi,"P",{});var q$=s(Jn);Fut=r(q$,"The model class to instantiate is selected based on the "),qSe=n(q$,"CODE",{});var R0a=s(qSe);Tut=r(R0a,"model_type"),R0a.forEach(t),Mut=r(q$,` property of the config object (either
passed as an argument or loaded from `),jSe=n(q$,"CODE",{});var P0a=s(jSe);Eut=r(P0a,"pretrained_model_name_or_path"),P0a.forEach(t),Cut=r(q$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DSe=n(q$,"CODE",{});var B0a=s(DSe);wut=r(B0a,"pretrained_model_name_or_path"),B0a.forEach(t),Aut=r(q$,":"),q$.forEach(t),Lut=i(Oi),Me=n(Oi,"UL",{});var Ee=s(Me);M7=n(Ee,"LI",{});var ino=s(M7);GSe=n(ino,"STRONG",{});var I0a=s(GSe);yut=r(I0a,"albert"),I0a.forEach(t),xut=r(ino," \u2014 "),vie=n(ino,"A",{href:!0});var N0a=s(vie);$ut=r(N0a,"TFAlbertForMultipleChoice"),N0a.forEach(t),kut=r(ino," (ALBERT model)"),ino.forEach(t),Sut=i(Ee),E7=n(Ee,"LI",{});var dno=s(E7);OSe=n(dno,"STRONG",{});var q0a=s(OSe);Rut=r(q0a,"bert"),q0a.forEach(t),Put=r(dno," \u2014 "),Fie=n(dno,"A",{href:!0});var j0a=s(Fie);But=r(j0a,"TFBertForMultipleChoice"),j0a.forEach(t),Iut=r(dno," (BERT model)"),dno.forEach(t),Nut=i(Ee),C7=n(Ee,"LI",{});var mno=s(C7);VSe=n(mno,"STRONG",{});var D0a=s(VSe);qut=r(D0a,"camembert"),D0a.forEach(t),jut=r(mno," \u2014 "),Tie=n(mno,"A",{href:!0});var G0a=s(Tie);Dut=r(G0a,"TFCamembertForMultipleChoice"),G0a.forEach(t),Gut=r(mno," (CamemBERT model)"),mno.forEach(t),Out=i(Ee),w7=n(Ee,"LI",{});var cno=s(w7);XSe=n(cno,"STRONG",{});var O0a=s(XSe);Vut=r(O0a,"convbert"),O0a.forEach(t),Xut=r(cno," \u2014 "),Mie=n(cno,"A",{href:!0});var V0a=s(Mie);zut=r(V0a,"TFConvBertForMultipleChoice"),V0a.forEach(t),Qut=r(cno," (ConvBERT model)"),cno.forEach(t),Wut=i(Ee),A7=n(Ee,"LI",{});var fno=s(A7);zSe=n(fno,"STRONG",{});var X0a=s(zSe);Uut=r(X0a,"distilbert"),X0a.forEach(t),Hut=r(fno," \u2014 "),Eie=n(fno,"A",{href:!0});var z0a=s(Eie);Jut=r(z0a,"TFDistilBertForMultipleChoice"),z0a.forEach(t),Yut=r(fno," (DistilBERT model)"),fno.forEach(t),Zut=i(Ee),L7=n(Ee,"LI",{});var gno=s(L7);QSe=n(gno,"STRONG",{});var Q0a=s(QSe);Kut=r(Q0a,"electra"),Q0a.forEach(t),ept=r(gno," \u2014 "),Cie=n(gno,"A",{href:!0});var W0a=s(Cie);opt=r(W0a,"TFElectraForMultipleChoice"),W0a.forEach(t),rpt=r(gno," (ELECTRA model)"),gno.forEach(t),tpt=i(Ee),y7=n(Ee,"LI",{});var hno=s(y7);WSe=n(hno,"STRONG",{});var U0a=s(WSe);apt=r(U0a,"flaubert"),U0a.forEach(t),npt=r(hno," \u2014 "),wie=n(hno,"A",{href:!0});var H0a=s(wie);spt=r(H0a,"TFFlaubertForMultipleChoice"),H0a.forEach(t),lpt=r(hno," (FlauBERT model)"),hno.forEach(t),ipt=i(Ee),x7=n(Ee,"LI",{});var uno=s(x7);USe=n(uno,"STRONG",{});var J0a=s(USe);dpt=r(J0a,"funnel"),J0a.forEach(t),mpt=r(uno," \u2014 "),Aie=n(uno,"A",{href:!0});var Y0a=s(Aie);cpt=r(Y0a,"TFFunnelForMultipleChoice"),Y0a.forEach(t),fpt=r(uno," (Funnel Transformer model)"),uno.forEach(t),gpt=i(Ee),$7=n(Ee,"LI",{});var pno=s($7);HSe=n(pno,"STRONG",{});var Z0a=s(HSe);hpt=r(Z0a,"longformer"),Z0a.forEach(t),upt=r(pno," \u2014 "),Lie=n(pno,"A",{href:!0});var K0a=s(Lie);ppt=r(K0a,"TFLongformerForMultipleChoice"),K0a.forEach(t),_pt=r(pno," (Longformer model)"),pno.forEach(t),bpt=i(Ee),k7=n(Ee,"LI",{});var _no=s(k7);JSe=n(_no,"STRONG",{});var ewa=s(JSe);vpt=r(ewa,"mobilebert"),ewa.forEach(t),Fpt=r(_no," \u2014 "),yie=n(_no,"A",{href:!0});var owa=s(yie);Tpt=r(owa,"TFMobileBertForMultipleChoice"),owa.forEach(t),Mpt=r(_no," (MobileBERT model)"),_no.forEach(t),Ept=i(Ee),S7=n(Ee,"LI",{});var bno=s(S7);YSe=n(bno,"STRONG",{});var rwa=s(YSe);Cpt=r(rwa,"mpnet"),rwa.forEach(t),wpt=r(bno," \u2014 "),xie=n(bno,"A",{href:!0});var twa=s(xie);Apt=r(twa,"TFMPNetForMultipleChoice"),twa.forEach(t),Lpt=r(bno," (MPNet model)"),bno.forEach(t),ypt=i(Ee),R7=n(Ee,"LI",{});var vno=s(R7);ZSe=n(vno,"STRONG",{});var awa=s(ZSe);xpt=r(awa,"rembert"),awa.forEach(t),$pt=r(vno," \u2014 "),$ie=n(vno,"A",{href:!0});var nwa=s($ie);kpt=r(nwa,"TFRemBertForMultipleChoice"),nwa.forEach(t),Spt=r(vno," (RemBERT model)"),vno.forEach(t),Rpt=i(Ee),P7=n(Ee,"LI",{});var Fno=s(P7);KSe=n(Fno,"STRONG",{});var swa=s(KSe);Ppt=r(swa,"roberta"),swa.forEach(t),Bpt=r(Fno," \u2014 "),kie=n(Fno,"A",{href:!0});var lwa=s(kie);Ipt=r(lwa,"TFRobertaForMultipleChoice"),lwa.forEach(t),Npt=r(Fno," (RoBERTa model)"),Fno.forEach(t),qpt=i(Ee),B7=n(Ee,"LI",{});var Tno=s(B7);eRe=n(Tno,"STRONG",{});var iwa=s(eRe);jpt=r(iwa,"roformer"),iwa.forEach(t),Dpt=r(Tno," \u2014 "),Sie=n(Tno,"A",{href:!0});var dwa=s(Sie);Gpt=r(dwa,"TFRoFormerForMultipleChoice"),dwa.forEach(t),Opt=r(Tno," (RoFormer model)"),Tno.forEach(t),Vpt=i(Ee),I7=n(Ee,"LI",{});var Mno=s(I7);oRe=n(Mno,"STRONG",{});var mwa=s(oRe);Xpt=r(mwa,"xlm"),mwa.forEach(t),zpt=r(Mno," \u2014 "),Rie=n(Mno,"A",{href:!0});var cwa=s(Rie);Qpt=r(cwa,"TFXLMForMultipleChoice"),cwa.forEach(t),Wpt=r(Mno," (XLM model)"),Mno.forEach(t),Upt=i(Ee),N7=n(Ee,"LI",{});var Eno=s(N7);rRe=n(Eno,"STRONG",{});var fwa=s(rRe);Hpt=r(fwa,"xlm-roberta"),fwa.forEach(t),Jpt=r(Eno," \u2014 "),Pie=n(Eno,"A",{href:!0});var gwa=s(Pie);Ypt=r(gwa,"TFXLMRobertaForMultipleChoice"),gwa.forEach(t),Zpt=r(Eno," (XLM-RoBERTa model)"),Eno.forEach(t),Kpt=i(Ee),q7=n(Ee,"LI",{});var Cno=s(q7);tRe=n(Cno,"STRONG",{});var hwa=s(tRe);e_t=r(hwa,"xlnet"),hwa.forEach(t),o_t=r(Cno," \u2014 "),Bie=n(Cno,"A",{href:!0});var uwa=s(Bie);r_t=r(uwa,"TFXLNetForMultipleChoice"),uwa.forEach(t),t_t=r(Cno," (XLNet model)"),Cno.forEach(t),Ee.forEach(t),a_t=i(Oi),T(j7.$$.fragment,Oi),Oi.forEach(t),Gi.forEach(t),amo=i(c),Uc=n(c,"H2",{class:!0});var Lfo=s(Uc);D7=n(Lfo,"A",{id:!0,class:!0,href:!0});var pwa=s(D7);aRe=n(pwa,"SPAN",{});var _wa=s(aRe);T(xB.$$.fragment,_wa),_wa.forEach(t),pwa.forEach(t),n_t=i(Lfo),nRe=n(Lfo,"SPAN",{});var bwa=s(nRe);s_t=r(bwa,"TFAutoModelForNextSentencePrediction"),bwa.forEach(t),Lfo.forEach(t),nmo=i(c),Cr=n(c,"DIV",{class:!0});var Vi=s(Cr);T($B.$$.fragment,Vi),l_t=i(Vi),Hc=n(Vi,"P",{});var lhe=s(Hc);i_t=r(lhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Iie=n(lhe,"A",{href:!0});var vwa=s(Iie);d_t=r(vwa,"from_pretrained()"),vwa.forEach(t),m_t=r(lhe," class method or the "),Nie=n(lhe,"A",{href:!0});var Fwa=s(Nie);c_t=r(Fwa,"from_config()"),Fwa.forEach(t),f_t=r(lhe,` class
method.`),lhe.forEach(t),g_t=i(Vi),kB=n(Vi,"P",{});var yfo=s(kB);h_t=r(yfo,"This class cannot be instantiated directly using "),sRe=n(yfo,"CODE",{});var Twa=s(sRe);u_t=r(Twa,"__init__()"),Twa.forEach(t),p_t=r(yfo," (throws an error)."),yfo.forEach(t),__t=i(Vi),ma=n(Vi,"DIV",{class:!0});var j$=s(ma);T(SB.$$.fragment,j$),b_t=i(j$),lRe=n(j$,"P",{});var Mwa=s(lRe);v_t=r(Mwa,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Mwa.forEach(t),F_t=i(j$),Jc=n(j$,"P",{});var ihe=s(Jc);T_t=r(ihe,`Note:
Loading a model from its configuration file does `),iRe=n(ihe,"STRONG",{});var Ewa=s(iRe);M_t=r(Ewa,"not"),Ewa.forEach(t),E_t=r(ihe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qie=n(ihe,"A",{href:!0});var Cwa=s(qie);C_t=r(Cwa,"from_pretrained()"),Cwa.forEach(t),w_t=r(ihe," to load the model weights."),ihe.forEach(t),A_t=i(j$),T(G7.$$.fragment,j$),j$.forEach(t),L_t=i(Vi),et=n(Vi,"DIV",{class:!0});var Xi=s(et);T(RB.$$.fragment,Xi),y_t=i(Xi),dRe=n(Xi,"P",{});var wwa=s(dRe);x_t=r(wwa,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wwa.forEach(t),$_t=i(Xi),Yn=n(Xi,"P",{});var D$=s(Yn);k_t=r(D$,"The model class to instantiate is selected based on the "),mRe=n(D$,"CODE",{});var Awa=s(mRe);S_t=r(Awa,"model_type"),Awa.forEach(t),R_t=r(D$,` property of the config object (either
passed as an argument or loaded from `),cRe=n(D$,"CODE",{});var Lwa=s(cRe);P_t=r(Lwa,"pretrained_model_name_or_path"),Lwa.forEach(t),B_t=r(D$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fRe=n(D$,"CODE",{});var ywa=s(fRe);I_t=r(ywa,"pretrained_model_name_or_path"),ywa.forEach(t),N_t=r(D$,":"),D$.forEach(t),q_t=i(Xi),PB=n(Xi,"UL",{});var xfo=s(PB);O7=n(xfo,"LI",{});var wno=s(O7);gRe=n(wno,"STRONG",{});var xwa=s(gRe);j_t=r(xwa,"bert"),xwa.forEach(t),D_t=r(wno," \u2014 "),jie=n(wno,"A",{href:!0});var $wa=s(jie);G_t=r($wa,"TFBertForNextSentencePrediction"),$wa.forEach(t),O_t=r(wno," (BERT model)"),wno.forEach(t),V_t=i(xfo),V7=n(xfo,"LI",{});var Ano=s(V7);hRe=n(Ano,"STRONG",{});var kwa=s(hRe);X_t=r(kwa,"mobilebert"),kwa.forEach(t),z_t=r(Ano," \u2014 "),Die=n(Ano,"A",{href:!0});var Swa=s(Die);Q_t=r(Swa,"TFMobileBertForNextSentencePrediction"),Swa.forEach(t),W_t=r(Ano," (MobileBERT model)"),Ano.forEach(t),xfo.forEach(t),U_t=i(Xi),T(X7.$$.fragment,Xi),Xi.forEach(t),Vi.forEach(t),smo=i(c),Yc=n(c,"H2",{class:!0});var $fo=s(Yc);z7=n($fo,"A",{id:!0,class:!0,href:!0});var Rwa=s(z7);uRe=n(Rwa,"SPAN",{});var Pwa=s(uRe);T(BB.$$.fragment,Pwa),Pwa.forEach(t),Rwa.forEach(t),H_t=i($fo),pRe=n($fo,"SPAN",{});var Bwa=s(pRe);J_t=r(Bwa,"TFAutoModelForTableQuestionAnswering"),Bwa.forEach(t),$fo.forEach(t),lmo=i(c),wr=n(c,"DIV",{class:!0});var zi=s(wr);T(IB.$$.fragment,zi),Y_t=i(zi),Zc=n(zi,"P",{});var dhe=s(Zc);Z_t=r(dhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Gie=n(dhe,"A",{href:!0});var Iwa=s(Gie);K_t=r(Iwa,"from_pretrained()"),Iwa.forEach(t),e1t=r(dhe," class method or the "),Oie=n(dhe,"A",{href:!0});var Nwa=s(Oie);o1t=r(Nwa,"from_config()"),Nwa.forEach(t),r1t=r(dhe,` class
method.`),dhe.forEach(t),t1t=i(zi),NB=n(zi,"P",{});var kfo=s(NB);a1t=r(kfo,"This class cannot be instantiated directly using "),_Re=n(kfo,"CODE",{});var qwa=s(_Re);n1t=r(qwa,"__init__()"),qwa.forEach(t),s1t=r(kfo," (throws an error)."),kfo.forEach(t),l1t=i(zi),ca=n(zi,"DIV",{class:!0});var G$=s(ca);T(qB.$$.fragment,G$),i1t=i(G$),bRe=n(G$,"P",{});var jwa=s(bRe);d1t=r(jwa,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),jwa.forEach(t),m1t=i(G$),Kc=n(G$,"P",{});var mhe=s(Kc);c1t=r(mhe,`Note:
Loading a model from its configuration file does `),vRe=n(mhe,"STRONG",{});var Dwa=s(vRe);f1t=r(Dwa,"not"),Dwa.forEach(t),g1t=r(mhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vie=n(mhe,"A",{href:!0});var Gwa=s(Vie);h1t=r(Gwa,"from_pretrained()"),Gwa.forEach(t),u1t=r(mhe," to load the model weights."),mhe.forEach(t),p1t=i(G$),T(Q7.$$.fragment,G$),G$.forEach(t),_1t=i(zi),ot=n(zi,"DIV",{class:!0});var Qi=s(ot);T(jB.$$.fragment,Qi),b1t=i(Qi),FRe=n(Qi,"P",{});var Owa=s(FRe);v1t=r(Owa,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Owa.forEach(t),F1t=i(Qi),Zn=n(Qi,"P",{});var O$=s(Zn);T1t=r(O$,"The model class to instantiate is selected based on the "),TRe=n(O$,"CODE",{});var Vwa=s(TRe);M1t=r(Vwa,"model_type"),Vwa.forEach(t),E1t=r(O$,` property of the config object (either
passed as an argument or loaded from `),MRe=n(O$,"CODE",{});var Xwa=s(MRe);C1t=r(Xwa,"pretrained_model_name_or_path"),Xwa.forEach(t),w1t=r(O$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ERe=n(O$,"CODE",{});var zwa=s(ERe);A1t=r(zwa,"pretrained_model_name_or_path"),zwa.forEach(t),L1t=r(O$,":"),O$.forEach(t),y1t=i(Qi),CRe=n(Qi,"UL",{});var Qwa=s(CRe);W7=n(Qwa,"LI",{});var Lno=s(W7);wRe=n(Lno,"STRONG",{});var Wwa=s(wRe);x1t=r(Wwa,"tapas"),Wwa.forEach(t),$1t=r(Lno," \u2014 "),Xie=n(Lno,"A",{href:!0});var Uwa=s(Xie);k1t=r(Uwa,"TFTapasForQuestionAnswering"),Uwa.forEach(t),S1t=r(Lno," (TAPAS model)"),Lno.forEach(t),Qwa.forEach(t),R1t=i(Qi),T(U7.$$.fragment,Qi),Qi.forEach(t),zi.forEach(t),imo=i(c),ef=n(c,"H2",{class:!0});var Sfo=s(ef);H7=n(Sfo,"A",{id:!0,class:!0,href:!0});var Hwa=s(H7);ARe=n(Hwa,"SPAN",{});var Jwa=s(ARe);T(DB.$$.fragment,Jwa),Jwa.forEach(t),Hwa.forEach(t),P1t=i(Sfo),LRe=n(Sfo,"SPAN",{});var Ywa=s(LRe);B1t=r(Ywa,"TFAutoModelForDocumentQuestionAnswering"),Ywa.forEach(t),Sfo.forEach(t),dmo=i(c),Ar=n(c,"DIV",{class:!0});var Wi=s(Ar);T(GB.$$.fragment,Wi),I1t=i(Wi),of=n(Wi,"P",{});var che=s(of);N1t=r(che,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),zie=n(che,"A",{href:!0});var Zwa=s(zie);q1t=r(Zwa,"from_pretrained()"),Zwa.forEach(t),j1t=r(che," class method or the "),Qie=n(che,"A",{href:!0});var Kwa=s(Qie);D1t=r(Kwa,"from_config()"),Kwa.forEach(t),G1t=r(che,` class
method.`),che.forEach(t),O1t=i(Wi),OB=n(Wi,"P",{});var Rfo=s(OB);V1t=r(Rfo,"This class cannot be instantiated directly using "),yRe=n(Rfo,"CODE",{});var eAa=s(yRe);X1t=r(eAa,"__init__()"),eAa.forEach(t),z1t=r(Rfo," (throws an error)."),Rfo.forEach(t),Q1t=i(Wi),fa=n(Wi,"DIV",{class:!0});var V$=s(fa);T(VB.$$.fragment,V$),W1t=i(V$),xRe=n(V$,"P",{});var oAa=s(xRe);U1t=r(oAa,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),oAa.forEach(t),H1t=i(V$),rf=n(V$,"P",{});var fhe=s(rf);J1t=r(fhe,`Note:
Loading a model from its configuration file does `),$Re=n(fhe,"STRONG",{});var rAa=s($Re);Y1t=r(rAa,"not"),rAa.forEach(t),Z1t=r(fhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wie=n(fhe,"A",{href:!0});var tAa=s(Wie);K1t=r(tAa,"from_pretrained()"),tAa.forEach(t),e2t=r(fhe," to load the model weights."),fhe.forEach(t),o2t=i(V$),T(J7.$$.fragment,V$),V$.forEach(t),r2t=i(Wi),rt=n(Wi,"DIV",{class:!0});var Ui=s(rt);T(XB.$$.fragment,Ui),t2t=i(Ui),kRe=n(Ui,"P",{});var aAa=s(kRe);a2t=r(aAa,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),aAa.forEach(t),n2t=i(Ui),Kn=n(Ui,"P",{});var X$=s(Kn);s2t=r(X$,"The model class to instantiate is selected based on the "),SRe=n(X$,"CODE",{});var nAa=s(SRe);l2t=r(nAa,"model_type"),nAa.forEach(t),i2t=r(X$,` property of the config object (either
passed as an argument or loaded from `),RRe=n(X$,"CODE",{});var sAa=s(RRe);d2t=r(sAa,"pretrained_model_name_or_path"),sAa.forEach(t),m2t=r(X$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PRe=n(X$,"CODE",{});var lAa=s(PRe);c2t=r(lAa,"pretrained_model_name_or_path"),lAa.forEach(t),f2t=r(X$,":"),X$.forEach(t),g2t=i(Ui),BRe=n(Ui,"UL",{});var iAa=s(BRe);Y7=n(iAa,"LI",{});var yno=s(Y7);IRe=n(yno,"STRONG",{});var dAa=s(IRe);h2t=r(dAa,"layoutlm"),dAa.forEach(t),u2t=r(yno," \u2014 "),Uie=n(yno,"A",{href:!0});var mAa=s(Uie);p2t=r(mAa,"TFLayoutLMForQuestionAnswering"),mAa.forEach(t),_2t=r(yno," (LayoutLM model)"),yno.forEach(t),iAa.forEach(t),b2t=i(Ui),T(Z7.$$.fragment,Ui),Ui.forEach(t),Wi.forEach(t),mmo=i(c),tf=n(c,"H2",{class:!0});var Pfo=s(tf);K7=n(Pfo,"A",{id:!0,class:!0,href:!0});var cAa=s(K7);NRe=n(cAa,"SPAN",{});var fAa=s(NRe);T(zB.$$.fragment,fAa),fAa.forEach(t),cAa.forEach(t),v2t=i(Pfo),qRe=n(Pfo,"SPAN",{});var gAa=s(qRe);F2t=r(gAa,"TFAutoModelForTokenClassification"),gAa.forEach(t),Pfo.forEach(t),cmo=i(c),Lr=n(c,"DIV",{class:!0});var Hi=s(Lr);T(QB.$$.fragment,Hi),T2t=i(Hi),af=n(Hi,"P",{});var ghe=s(af);M2t=r(ghe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hie=n(ghe,"A",{href:!0});var hAa=s(Hie);E2t=r(hAa,"from_pretrained()"),hAa.forEach(t),C2t=r(ghe," class method or the "),Jie=n(ghe,"A",{href:!0});var uAa=s(Jie);w2t=r(uAa,"from_config()"),uAa.forEach(t),A2t=r(ghe,` class
method.`),ghe.forEach(t),L2t=i(Hi),WB=n(Hi,"P",{});var Bfo=s(WB);y2t=r(Bfo,"This class cannot be instantiated directly using "),jRe=n(Bfo,"CODE",{});var pAa=s(jRe);x2t=r(pAa,"__init__()"),pAa.forEach(t),$2t=r(Bfo," (throws an error)."),Bfo.forEach(t),k2t=i(Hi),ga=n(Hi,"DIV",{class:!0});var z$=s(ga);T(UB.$$.fragment,z$),S2t=i(z$),DRe=n(z$,"P",{});var _Aa=s(DRe);R2t=r(_Aa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Aa.forEach(t),P2t=i(z$),nf=n(z$,"P",{});var hhe=s(nf);B2t=r(hhe,`Note:
Loading a model from its configuration file does `),GRe=n(hhe,"STRONG",{});var bAa=s(GRe);I2t=r(bAa,"not"),bAa.forEach(t),N2t=r(hhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yie=n(hhe,"A",{href:!0});var vAa=s(Yie);q2t=r(vAa,"from_pretrained()"),vAa.forEach(t),j2t=r(hhe," to load the model weights."),hhe.forEach(t),D2t=i(z$),T(e8.$$.fragment,z$),z$.forEach(t),G2t=i(Hi),tt=n(Hi,"DIV",{class:!0});var Ji=s(tt);T(HB.$$.fragment,Ji),O2t=i(Ji),ORe=n(Ji,"P",{});var FAa=s(ORe);V2t=r(FAa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FAa.forEach(t),X2t=i(Ji),es=n(Ji,"P",{});var Q$=s(es);z2t=r(Q$,"The model class to instantiate is selected based on the "),VRe=n(Q$,"CODE",{});var TAa=s(VRe);Q2t=r(TAa,"model_type"),TAa.forEach(t),W2t=r(Q$,` property of the config object (either
passed as an argument or loaded from `),XRe=n(Q$,"CODE",{});var MAa=s(XRe);U2t=r(MAa,"pretrained_model_name_or_path"),MAa.forEach(t),H2t=r(Q$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zRe=n(Q$,"CODE",{});var EAa=s(zRe);J2t=r(EAa,"pretrained_model_name_or_path"),EAa.forEach(t),Y2t=r(Q$,":"),Q$.forEach(t),Z2t=i(Ji),me=n(Ji,"UL",{});var pe=s(me);o8=n(pe,"LI",{});var xno=s(o8);QRe=n(xno,"STRONG",{});var CAa=s(QRe);K2t=r(CAa,"albert"),CAa.forEach(t),ebt=r(xno," \u2014 "),Zie=n(xno,"A",{href:!0});var wAa=s(Zie);obt=r(wAa,"TFAlbertForTokenClassification"),wAa.forEach(t),rbt=r(xno," (ALBERT model)"),xno.forEach(t),tbt=i(pe),r8=n(pe,"LI",{});var $no=s(r8);WRe=n($no,"STRONG",{});var AAa=s(WRe);abt=r(AAa,"bert"),AAa.forEach(t),nbt=r($no," \u2014 "),Kie=n($no,"A",{href:!0});var LAa=s(Kie);sbt=r(LAa,"TFBertForTokenClassification"),LAa.forEach(t),lbt=r($no," (BERT model)"),$no.forEach(t),ibt=i(pe),t8=n(pe,"LI",{});var kno=s(t8);URe=n(kno,"STRONG",{});var yAa=s(URe);dbt=r(yAa,"camembert"),yAa.forEach(t),mbt=r(kno," \u2014 "),ede=n(kno,"A",{href:!0});var xAa=s(ede);cbt=r(xAa,"TFCamembertForTokenClassification"),xAa.forEach(t),fbt=r(kno," (CamemBERT model)"),kno.forEach(t),gbt=i(pe),a8=n(pe,"LI",{});var Sno=s(a8);HRe=n(Sno,"STRONG",{});var $Aa=s(HRe);hbt=r($Aa,"convbert"),$Aa.forEach(t),ubt=r(Sno," \u2014 "),ode=n(Sno,"A",{href:!0});var kAa=s(ode);pbt=r(kAa,"TFConvBertForTokenClassification"),kAa.forEach(t),_bt=r(Sno," (ConvBERT model)"),Sno.forEach(t),bbt=i(pe),n8=n(pe,"LI",{});var Rno=s(n8);JRe=n(Rno,"STRONG",{});var SAa=s(JRe);vbt=r(SAa,"deberta"),SAa.forEach(t),Fbt=r(Rno," \u2014 "),rde=n(Rno,"A",{href:!0});var RAa=s(rde);Tbt=r(RAa,"TFDebertaForTokenClassification"),RAa.forEach(t),Mbt=r(Rno," (DeBERTa model)"),Rno.forEach(t),Ebt=i(pe),s8=n(pe,"LI",{});var Pno=s(s8);YRe=n(Pno,"STRONG",{});var PAa=s(YRe);Cbt=r(PAa,"deberta-v2"),PAa.forEach(t),wbt=r(Pno," \u2014 "),tde=n(Pno,"A",{href:!0});var BAa=s(tde);Abt=r(BAa,"TFDebertaV2ForTokenClassification"),BAa.forEach(t),Lbt=r(Pno," (DeBERTa-v2 model)"),Pno.forEach(t),ybt=i(pe),l8=n(pe,"LI",{});var Bno=s(l8);ZRe=n(Bno,"STRONG",{});var IAa=s(ZRe);xbt=r(IAa,"distilbert"),IAa.forEach(t),$bt=r(Bno," \u2014 "),ade=n(Bno,"A",{href:!0});var NAa=s(ade);kbt=r(NAa,"TFDistilBertForTokenClassification"),NAa.forEach(t),Sbt=r(Bno," (DistilBERT model)"),Bno.forEach(t),Rbt=i(pe),i8=n(pe,"LI",{});var Ino=s(i8);KRe=n(Ino,"STRONG",{});var qAa=s(KRe);Pbt=r(qAa,"electra"),qAa.forEach(t),Bbt=r(Ino," \u2014 "),nde=n(Ino,"A",{href:!0});var jAa=s(nde);Ibt=r(jAa,"TFElectraForTokenClassification"),jAa.forEach(t),Nbt=r(Ino," (ELECTRA model)"),Ino.forEach(t),qbt=i(pe),d8=n(pe,"LI",{});var Nno=s(d8);ePe=n(Nno,"STRONG",{});var DAa=s(ePe);jbt=r(DAa,"esm"),DAa.forEach(t),Dbt=r(Nno," \u2014 "),sde=n(Nno,"A",{href:!0});var GAa=s(sde);Gbt=r(GAa,"TFEsmForTokenClassification"),GAa.forEach(t),Obt=r(Nno," (ESM model)"),Nno.forEach(t),Vbt=i(pe),m8=n(pe,"LI",{});var qno=s(m8);oPe=n(qno,"STRONG",{});var OAa=s(oPe);Xbt=r(OAa,"flaubert"),OAa.forEach(t),zbt=r(qno," \u2014 "),lde=n(qno,"A",{href:!0});var VAa=s(lde);Qbt=r(VAa,"TFFlaubertForTokenClassification"),VAa.forEach(t),Wbt=r(qno," (FlauBERT model)"),qno.forEach(t),Ubt=i(pe),c8=n(pe,"LI",{});var jno=s(c8);rPe=n(jno,"STRONG",{});var XAa=s(rPe);Hbt=r(XAa,"funnel"),XAa.forEach(t),Jbt=r(jno," \u2014 "),ide=n(jno,"A",{href:!0});var zAa=s(ide);Ybt=r(zAa,"TFFunnelForTokenClassification"),zAa.forEach(t),Zbt=r(jno," (Funnel Transformer model)"),jno.forEach(t),Kbt=i(pe),f8=n(pe,"LI",{});var Dno=s(f8);tPe=n(Dno,"STRONG",{});var QAa=s(tPe);evt=r(QAa,"layoutlm"),QAa.forEach(t),ovt=r(Dno," \u2014 "),dde=n(Dno,"A",{href:!0});var WAa=s(dde);rvt=r(WAa,"TFLayoutLMForTokenClassification"),WAa.forEach(t),tvt=r(Dno," (LayoutLM model)"),Dno.forEach(t),avt=i(pe),g8=n(pe,"LI",{});var Gno=s(g8);aPe=n(Gno,"STRONG",{});var UAa=s(aPe);nvt=r(UAa,"layoutlmv3"),UAa.forEach(t),svt=r(Gno," \u2014 "),mde=n(Gno,"A",{href:!0});var HAa=s(mde);lvt=r(HAa,"TFLayoutLMv3ForTokenClassification"),HAa.forEach(t),ivt=r(Gno," (LayoutLMv3 model)"),Gno.forEach(t),dvt=i(pe),h8=n(pe,"LI",{});var Ono=s(h8);nPe=n(Ono,"STRONG",{});var JAa=s(nPe);mvt=r(JAa,"longformer"),JAa.forEach(t),cvt=r(Ono," \u2014 "),cde=n(Ono,"A",{href:!0});var YAa=s(cde);fvt=r(YAa,"TFLongformerForTokenClassification"),YAa.forEach(t),gvt=r(Ono," (Longformer model)"),Ono.forEach(t),hvt=i(pe),u8=n(pe,"LI",{});var Vno=s(u8);sPe=n(Vno,"STRONG",{});var ZAa=s(sPe);uvt=r(ZAa,"mobilebert"),ZAa.forEach(t),pvt=r(Vno," \u2014 "),fde=n(Vno,"A",{href:!0});var KAa=s(fde);_vt=r(KAa,"TFMobileBertForTokenClassification"),KAa.forEach(t),bvt=r(Vno," (MobileBERT model)"),Vno.forEach(t),vvt=i(pe),p8=n(pe,"LI",{});var Xno=s(p8);lPe=n(Xno,"STRONG",{});var e6a=s(lPe);Fvt=r(e6a,"mpnet"),e6a.forEach(t),Tvt=r(Xno," \u2014 "),gde=n(Xno,"A",{href:!0});var o6a=s(gde);Mvt=r(o6a,"TFMPNetForTokenClassification"),o6a.forEach(t),Evt=r(Xno," (MPNet model)"),Xno.forEach(t),Cvt=i(pe),_8=n(pe,"LI",{});var zno=s(_8);iPe=n(zno,"STRONG",{});var r6a=s(iPe);wvt=r(r6a,"rembert"),r6a.forEach(t),Avt=r(zno," \u2014 "),hde=n(zno,"A",{href:!0});var t6a=s(hde);Lvt=r(t6a,"TFRemBertForTokenClassification"),t6a.forEach(t),yvt=r(zno," (RemBERT model)"),zno.forEach(t),xvt=i(pe),b8=n(pe,"LI",{});var Qno=s(b8);dPe=n(Qno,"STRONG",{});var a6a=s(dPe);$vt=r(a6a,"roberta"),a6a.forEach(t),kvt=r(Qno," \u2014 "),ude=n(Qno,"A",{href:!0});var n6a=s(ude);Svt=r(n6a,"TFRobertaForTokenClassification"),n6a.forEach(t),Rvt=r(Qno," (RoBERTa model)"),Qno.forEach(t),Pvt=i(pe),v8=n(pe,"LI",{});var Wno=s(v8);mPe=n(Wno,"STRONG",{});var s6a=s(mPe);Bvt=r(s6a,"roformer"),s6a.forEach(t),Ivt=r(Wno," \u2014 "),pde=n(Wno,"A",{href:!0});var l6a=s(pde);Nvt=r(l6a,"TFRoFormerForTokenClassification"),l6a.forEach(t),qvt=r(Wno," (RoFormer model)"),Wno.forEach(t),jvt=i(pe),F8=n(pe,"LI",{});var Uno=s(F8);cPe=n(Uno,"STRONG",{});var i6a=s(cPe);Dvt=r(i6a,"xlm"),i6a.forEach(t),Gvt=r(Uno," \u2014 "),_de=n(Uno,"A",{href:!0});var d6a=s(_de);Ovt=r(d6a,"TFXLMForTokenClassification"),d6a.forEach(t),Vvt=r(Uno," (XLM model)"),Uno.forEach(t),Xvt=i(pe),T8=n(pe,"LI",{});var Hno=s(T8);fPe=n(Hno,"STRONG",{});var m6a=s(fPe);zvt=r(m6a,"xlm-roberta"),m6a.forEach(t),Qvt=r(Hno," \u2014 "),bde=n(Hno,"A",{href:!0});var c6a=s(bde);Wvt=r(c6a,"TFXLMRobertaForTokenClassification"),c6a.forEach(t),Uvt=r(Hno," (XLM-RoBERTa model)"),Hno.forEach(t),Hvt=i(pe),M8=n(pe,"LI",{});var Jno=s(M8);gPe=n(Jno,"STRONG",{});var f6a=s(gPe);Jvt=r(f6a,"xlnet"),f6a.forEach(t),Yvt=r(Jno," \u2014 "),vde=n(Jno,"A",{href:!0});var g6a=s(vde);Zvt=r(g6a,"TFXLNetForTokenClassification"),g6a.forEach(t),Kvt=r(Jno," (XLNet model)"),Jno.forEach(t),pe.forEach(t),eFt=i(Ji),T(E8.$$.fragment,Ji),Ji.forEach(t),Hi.forEach(t),fmo=i(c),sf=n(c,"H2",{class:!0});var Ifo=s(sf);C8=n(Ifo,"A",{id:!0,class:!0,href:!0});var h6a=s(C8);hPe=n(h6a,"SPAN",{});var u6a=s(hPe);T(JB.$$.fragment,u6a),u6a.forEach(t),h6a.forEach(t),oFt=i(Ifo),uPe=n(Ifo,"SPAN",{});var p6a=s(uPe);rFt=r(p6a,"TFAutoModelForQuestionAnswering"),p6a.forEach(t),Ifo.forEach(t),gmo=i(c),yr=n(c,"DIV",{class:!0});var Yi=s(yr);T(YB.$$.fragment,Yi),tFt=i(Yi),lf=n(Yi,"P",{});var uhe=s(lf);aFt=r(uhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Fde=n(uhe,"A",{href:!0});var _6a=s(Fde);nFt=r(_6a,"from_pretrained()"),_6a.forEach(t),sFt=r(uhe," class method or the "),Tde=n(uhe,"A",{href:!0});var b6a=s(Tde);lFt=r(b6a,"from_config()"),b6a.forEach(t),iFt=r(uhe,` class
method.`),uhe.forEach(t),dFt=i(Yi),ZB=n(Yi,"P",{});var Nfo=s(ZB);mFt=r(Nfo,"This class cannot be instantiated directly using "),pPe=n(Nfo,"CODE",{});var v6a=s(pPe);cFt=r(v6a,"__init__()"),v6a.forEach(t),fFt=r(Nfo," (throws an error)."),Nfo.forEach(t),gFt=i(Yi),ha=n(Yi,"DIV",{class:!0});var W$=s(ha);T(KB.$$.fragment,W$),hFt=i(W$),_Pe=n(W$,"P",{});var F6a=s(_Pe);uFt=r(F6a,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),F6a.forEach(t),pFt=i(W$),df=n(W$,"P",{});var phe=s(df);_Ft=r(phe,`Note:
Loading a model from its configuration file does `),bPe=n(phe,"STRONG",{});var T6a=s(bPe);bFt=r(T6a,"not"),T6a.forEach(t),vFt=r(phe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mde=n(phe,"A",{href:!0});var M6a=s(Mde);FFt=r(M6a,"from_pretrained()"),M6a.forEach(t),TFt=r(phe," to load the model weights."),phe.forEach(t),MFt=i(W$),T(w8.$$.fragment,W$),W$.forEach(t),EFt=i(Yi),at=n(Yi,"DIV",{class:!0});var Zi=s(at);T(eI.$$.fragment,Zi),CFt=i(Zi),vPe=n(Zi,"P",{});var E6a=s(vPe);wFt=r(E6a,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),E6a.forEach(t),AFt=i(Zi),os=n(Zi,"P",{});var U$=s(os);LFt=r(U$,"The model class to instantiate is selected based on the "),FPe=n(U$,"CODE",{});var C6a=s(FPe);yFt=r(C6a,"model_type"),C6a.forEach(t),xFt=r(U$,` property of the config object (either
passed as an argument or loaded from `),TPe=n(U$,"CODE",{});var w6a=s(TPe);$Ft=r(w6a,"pretrained_model_name_or_path"),w6a.forEach(t),kFt=r(U$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MPe=n(U$,"CODE",{});var A6a=s(MPe);SFt=r(A6a,"pretrained_model_name_or_path"),A6a.forEach(t),RFt=r(U$,":"),U$.forEach(t),PFt=i(Zi),ue=n(Zi,"UL",{});var ve=s(ue);A8=n(ve,"LI",{});var Yno=s(A8);EPe=n(Yno,"STRONG",{});var L6a=s(EPe);BFt=r(L6a,"albert"),L6a.forEach(t),IFt=r(Yno," \u2014 "),Ede=n(Yno,"A",{href:!0});var y6a=s(Ede);NFt=r(y6a,"TFAlbertForQuestionAnswering"),y6a.forEach(t),qFt=r(Yno," (ALBERT model)"),Yno.forEach(t),jFt=i(ve),L8=n(ve,"LI",{});var Zno=s(L8);CPe=n(Zno,"STRONG",{});var x6a=s(CPe);DFt=r(x6a,"bert"),x6a.forEach(t),GFt=r(Zno," \u2014 "),Cde=n(Zno,"A",{href:!0});var $6a=s(Cde);OFt=r($6a,"TFBertForQuestionAnswering"),$6a.forEach(t),VFt=r(Zno," (BERT model)"),Zno.forEach(t),XFt=i(ve),y8=n(ve,"LI",{});var Kno=s(y8);wPe=n(Kno,"STRONG",{});var k6a=s(wPe);zFt=r(k6a,"camembert"),k6a.forEach(t),QFt=r(Kno," \u2014 "),wde=n(Kno,"A",{href:!0});var S6a=s(wde);WFt=r(S6a,"TFCamembertForQuestionAnswering"),S6a.forEach(t),UFt=r(Kno," (CamemBERT model)"),Kno.forEach(t),HFt=i(ve),x8=n(ve,"LI",{});var eso=s(x8);APe=n(eso,"STRONG",{});var R6a=s(APe);JFt=r(R6a,"convbert"),R6a.forEach(t),YFt=r(eso," \u2014 "),Ade=n(eso,"A",{href:!0});var P6a=s(Ade);ZFt=r(P6a,"TFConvBertForQuestionAnswering"),P6a.forEach(t),KFt=r(eso," (ConvBERT model)"),eso.forEach(t),eTt=i(ve),$8=n(ve,"LI",{});var oso=s($8);LPe=n(oso,"STRONG",{});var B6a=s(LPe);oTt=r(B6a,"deberta"),B6a.forEach(t),rTt=r(oso," \u2014 "),Lde=n(oso,"A",{href:!0});var I6a=s(Lde);tTt=r(I6a,"TFDebertaForQuestionAnswering"),I6a.forEach(t),aTt=r(oso," (DeBERTa model)"),oso.forEach(t),nTt=i(ve),k8=n(ve,"LI",{});var rso=s(k8);yPe=n(rso,"STRONG",{});var N6a=s(yPe);sTt=r(N6a,"deberta-v2"),N6a.forEach(t),lTt=r(rso," \u2014 "),yde=n(rso,"A",{href:!0});var q6a=s(yde);iTt=r(q6a,"TFDebertaV2ForQuestionAnswering"),q6a.forEach(t),dTt=r(rso," (DeBERTa-v2 model)"),rso.forEach(t),mTt=i(ve),S8=n(ve,"LI",{});var tso=s(S8);xPe=n(tso,"STRONG",{});var j6a=s(xPe);cTt=r(j6a,"distilbert"),j6a.forEach(t),fTt=r(tso," \u2014 "),xde=n(tso,"A",{href:!0});var D6a=s(xde);gTt=r(D6a,"TFDistilBertForQuestionAnswering"),D6a.forEach(t),hTt=r(tso," (DistilBERT model)"),tso.forEach(t),uTt=i(ve),R8=n(ve,"LI",{});var aso=s(R8);$Pe=n(aso,"STRONG",{});var G6a=s($Pe);pTt=r(G6a,"electra"),G6a.forEach(t),_Tt=r(aso," \u2014 "),$de=n(aso,"A",{href:!0});var O6a=s($de);bTt=r(O6a,"TFElectraForQuestionAnswering"),O6a.forEach(t),vTt=r(aso," (ELECTRA model)"),aso.forEach(t),FTt=i(ve),P8=n(ve,"LI",{});var nso=s(P8);kPe=n(nso,"STRONG",{});var V6a=s(kPe);TTt=r(V6a,"flaubert"),V6a.forEach(t),MTt=r(nso," \u2014 "),kde=n(nso,"A",{href:!0});var X6a=s(kde);ETt=r(X6a,"TFFlaubertForQuestionAnsweringSimple"),X6a.forEach(t),CTt=r(nso," (FlauBERT model)"),nso.forEach(t),wTt=i(ve),B8=n(ve,"LI",{});var sso=s(B8);SPe=n(sso,"STRONG",{});var z6a=s(SPe);ATt=r(z6a,"funnel"),z6a.forEach(t),LTt=r(sso," \u2014 "),Sde=n(sso,"A",{href:!0});var Q6a=s(Sde);yTt=r(Q6a,"TFFunnelForQuestionAnswering"),Q6a.forEach(t),xTt=r(sso," (Funnel Transformer model)"),sso.forEach(t),$Tt=i(ve),I8=n(ve,"LI",{});var lso=s(I8);RPe=n(lso,"STRONG",{});var W6a=s(RPe);kTt=r(W6a,"gptj"),W6a.forEach(t),STt=r(lso," \u2014 "),Rde=n(lso,"A",{href:!0});var U6a=s(Rde);RTt=r(U6a,"TFGPTJForQuestionAnswering"),U6a.forEach(t),PTt=r(lso," (GPT-J model)"),lso.forEach(t),BTt=i(ve),N8=n(ve,"LI",{});var iso=s(N8);PPe=n(iso,"STRONG",{});var H6a=s(PPe);ITt=r(H6a,"layoutlmv3"),H6a.forEach(t),NTt=r(iso," \u2014 "),Pde=n(iso,"A",{href:!0});var J6a=s(Pde);qTt=r(J6a,"TFLayoutLMv3ForQuestionAnswering"),J6a.forEach(t),jTt=r(iso," (LayoutLMv3 model)"),iso.forEach(t),DTt=i(ve),q8=n(ve,"LI",{});var dso=s(q8);BPe=n(dso,"STRONG",{});var Y6a=s(BPe);GTt=r(Y6a,"longformer"),Y6a.forEach(t),OTt=r(dso," \u2014 "),Bde=n(dso,"A",{href:!0});var Z6a=s(Bde);VTt=r(Z6a,"TFLongformerForQuestionAnswering"),Z6a.forEach(t),XTt=r(dso," (Longformer model)"),dso.forEach(t),zTt=i(ve),j8=n(ve,"LI",{});var mso=s(j8);IPe=n(mso,"STRONG",{});var K6a=s(IPe);QTt=r(K6a,"mobilebert"),K6a.forEach(t),WTt=r(mso," \u2014 "),Ide=n(mso,"A",{href:!0});var e7a=s(Ide);UTt=r(e7a,"TFMobileBertForQuestionAnswering"),e7a.forEach(t),HTt=r(mso," (MobileBERT model)"),mso.forEach(t),JTt=i(ve),D8=n(ve,"LI",{});var cso=s(D8);NPe=n(cso,"STRONG",{});var o7a=s(NPe);YTt=r(o7a,"mpnet"),o7a.forEach(t),ZTt=r(cso," \u2014 "),Nde=n(cso,"A",{href:!0});var r7a=s(Nde);KTt=r(r7a,"TFMPNetForQuestionAnswering"),r7a.forEach(t),eMt=r(cso," (MPNet model)"),cso.forEach(t),oMt=i(ve),G8=n(ve,"LI",{});var fso=s(G8);qPe=n(fso,"STRONG",{});var t7a=s(qPe);rMt=r(t7a,"rembert"),t7a.forEach(t),tMt=r(fso," \u2014 "),qde=n(fso,"A",{href:!0});var a7a=s(qde);aMt=r(a7a,"TFRemBertForQuestionAnswering"),a7a.forEach(t),nMt=r(fso," (RemBERT model)"),fso.forEach(t),sMt=i(ve),O8=n(ve,"LI",{});var gso=s(O8);jPe=n(gso,"STRONG",{});var n7a=s(jPe);lMt=r(n7a,"roberta"),n7a.forEach(t),iMt=r(gso," \u2014 "),jde=n(gso,"A",{href:!0});var s7a=s(jde);dMt=r(s7a,"TFRobertaForQuestionAnswering"),s7a.forEach(t),mMt=r(gso," (RoBERTa model)"),gso.forEach(t),cMt=i(ve),V8=n(ve,"LI",{});var hso=s(V8);DPe=n(hso,"STRONG",{});var l7a=s(DPe);fMt=r(l7a,"roformer"),l7a.forEach(t),gMt=r(hso," \u2014 "),Dde=n(hso,"A",{href:!0});var i7a=s(Dde);hMt=r(i7a,"TFRoFormerForQuestionAnswering"),i7a.forEach(t),uMt=r(hso," (RoFormer model)"),hso.forEach(t),pMt=i(ve),X8=n(ve,"LI",{});var uso=s(X8);GPe=n(uso,"STRONG",{});var d7a=s(GPe);_Mt=r(d7a,"xlm"),d7a.forEach(t),bMt=r(uso," \u2014 "),Gde=n(uso,"A",{href:!0});var m7a=s(Gde);vMt=r(m7a,"TFXLMForQuestionAnsweringSimple"),m7a.forEach(t),FMt=r(uso," (XLM model)"),uso.forEach(t),TMt=i(ve),z8=n(ve,"LI",{});var pso=s(z8);OPe=n(pso,"STRONG",{});var c7a=s(OPe);MMt=r(c7a,"xlm-roberta"),c7a.forEach(t),EMt=r(pso," \u2014 "),Ode=n(pso,"A",{href:!0});var f7a=s(Ode);CMt=r(f7a,"TFXLMRobertaForQuestionAnswering"),f7a.forEach(t),wMt=r(pso," (XLM-RoBERTa model)"),pso.forEach(t),AMt=i(ve),Q8=n(ve,"LI",{});var _so=s(Q8);VPe=n(_so,"STRONG",{});var g7a=s(VPe);LMt=r(g7a,"xlnet"),g7a.forEach(t),yMt=r(_so," \u2014 "),Vde=n(_so,"A",{href:!0});var h7a=s(Vde);xMt=r(h7a,"TFXLNetForQuestionAnsweringSimple"),h7a.forEach(t),$Mt=r(_so," (XLNet model)"),_so.forEach(t),ve.forEach(t),kMt=i(Zi),T(W8.$$.fragment,Zi),Zi.forEach(t),Yi.forEach(t),hmo=i(c),mf=n(c,"H2",{class:!0});var qfo=s(mf);U8=n(qfo,"A",{id:!0,class:!0,href:!0});var u7a=s(U8);XPe=n(u7a,"SPAN",{});var p7a=s(XPe);T(oI.$$.fragment,p7a),p7a.forEach(t),u7a.forEach(t),SMt=i(qfo),zPe=n(qfo,"SPAN",{});var _7a=s(zPe);RMt=r(_7a,"TFAutoModelForVision2Seq"),_7a.forEach(t),qfo.forEach(t),umo=i(c),xr=n(c,"DIV",{class:!0});var Ki=s(xr);T(rI.$$.fragment,Ki),PMt=i(Ki),cf=n(Ki,"P",{});var _he=s(cf);BMt=r(_he,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Xde=n(_he,"A",{href:!0});var b7a=s(Xde);IMt=r(b7a,"from_pretrained()"),b7a.forEach(t),NMt=r(_he," class method or the "),zde=n(_he,"A",{href:!0});var v7a=s(zde);qMt=r(v7a,"from_config()"),v7a.forEach(t),jMt=r(_he,` class
method.`),_he.forEach(t),DMt=i(Ki),tI=n(Ki,"P",{});var jfo=s(tI);GMt=r(jfo,"This class cannot be instantiated directly using "),QPe=n(jfo,"CODE",{});var F7a=s(QPe);OMt=r(F7a,"__init__()"),F7a.forEach(t),VMt=r(jfo," (throws an error)."),jfo.forEach(t),XMt=i(Ki),ua=n(Ki,"DIV",{class:!0});var H$=s(ua);T(aI.$$.fragment,H$),zMt=i(H$),WPe=n(H$,"P",{});var T7a=s(WPe);QMt=r(T7a,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),T7a.forEach(t),WMt=i(H$),ff=n(H$,"P",{});var bhe=s(ff);UMt=r(bhe,`Note:
Loading a model from its configuration file does `),UPe=n(bhe,"STRONG",{});var M7a=s(UPe);HMt=r(M7a,"not"),M7a.forEach(t),JMt=r(bhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qde=n(bhe,"A",{href:!0});var E7a=s(Qde);YMt=r(E7a,"from_pretrained()"),E7a.forEach(t),ZMt=r(bhe," to load the model weights."),bhe.forEach(t),KMt=i(H$),T(H8.$$.fragment,H$),H$.forEach(t),eEt=i(Ki),nt=n(Ki,"DIV",{class:!0});var ed=s(nt);T(nI.$$.fragment,ed),oEt=i(ed),HPe=n(ed,"P",{});var C7a=s(HPe);rEt=r(C7a,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),C7a.forEach(t),tEt=i(ed),rs=n(ed,"P",{});var J$=s(rs);aEt=r(J$,"The model class to instantiate is selected based on the "),JPe=n(J$,"CODE",{});var w7a=s(JPe);nEt=r(w7a,"model_type"),w7a.forEach(t),sEt=r(J$,` property of the config object (either
passed as an argument or loaded from `),YPe=n(J$,"CODE",{});var A7a=s(YPe);lEt=r(A7a,"pretrained_model_name_or_path"),A7a.forEach(t),iEt=r(J$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZPe=n(J$,"CODE",{});var L7a=s(ZPe);dEt=r(L7a,"pretrained_model_name_or_path"),L7a.forEach(t),mEt=r(J$,":"),J$.forEach(t),cEt=i(ed),KPe=n(ed,"UL",{});var y7a=s(KPe);J8=n(y7a,"LI",{});var bso=s(J8);eBe=n(bso,"STRONG",{});var x7a=s(eBe);fEt=r(x7a,"vision-encoder-decoder"),x7a.forEach(t),gEt=r(bso," \u2014 "),Wde=n(bso,"A",{href:!0});var $7a=s(Wde);hEt=r($7a,"TFVisionEncoderDecoderModel"),$7a.forEach(t),uEt=r(bso," (Vision Encoder decoder model)"),bso.forEach(t),y7a.forEach(t),pEt=i(ed),T(Y8.$$.fragment,ed),ed.forEach(t),Ki.forEach(t),pmo=i(c),gf=n(c,"H2",{class:!0});var Dfo=s(gf);Z8=n(Dfo,"A",{id:!0,class:!0,href:!0});var k7a=s(Z8);oBe=n(k7a,"SPAN",{});var S7a=s(oBe);T(sI.$$.fragment,S7a),S7a.forEach(t),k7a.forEach(t),_Et=i(Dfo),rBe=n(Dfo,"SPAN",{});var R7a=s(rBe);bEt=r(R7a,"TFAutoModelForSpeechSeq2Seq"),R7a.forEach(t),Dfo.forEach(t),_mo=i(c),$r=n(c,"DIV",{class:!0});var od=s($r);T(lI.$$.fragment,od),vEt=i(od),hf=n(od,"P",{});var vhe=s(hf);FEt=r(vhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Ude=n(vhe,"A",{href:!0});var P7a=s(Ude);TEt=r(P7a,"from_pretrained()"),P7a.forEach(t),MEt=r(vhe," class method or the "),Hde=n(vhe,"A",{href:!0});var B7a=s(Hde);EEt=r(B7a,"from_config()"),B7a.forEach(t),CEt=r(vhe,` class
method.`),vhe.forEach(t),wEt=i(od),iI=n(od,"P",{});var Gfo=s(iI);AEt=r(Gfo,"This class cannot be instantiated directly using "),tBe=n(Gfo,"CODE",{});var I7a=s(tBe);LEt=r(I7a,"__init__()"),I7a.forEach(t),yEt=r(Gfo," (throws an error)."),Gfo.forEach(t),xEt=i(od),pa=n(od,"DIV",{class:!0});var Y$=s(pa);T(dI.$$.fragment,Y$),$Et=i(Y$),aBe=n(Y$,"P",{});var N7a=s(aBe);kEt=r(N7a,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),N7a.forEach(t),SEt=i(Y$),uf=n(Y$,"P",{});var Fhe=s(uf);REt=r(Fhe,`Note:
Loading a model from its configuration file does `),nBe=n(Fhe,"STRONG",{});var q7a=s(nBe);PEt=r(q7a,"not"),q7a.forEach(t),BEt=r(Fhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jde=n(Fhe,"A",{href:!0});var j7a=s(Jde);IEt=r(j7a,"from_pretrained()"),j7a.forEach(t),NEt=r(Fhe," to load the model weights."),Fhe.forEach(t),qEt=i(Y$),T(K8.$$.fragment,Y$),Y$.forEach(t),jEt=i(od),st=n(od,"DIV",{class:!0});var rd=s(st);T(mI.$$.fragment,rd),DEt=i(rd),sBe=n(rd,"P",{});var D7a=s(sBe);GEt=r(D7a,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),D7a.forEach(t),OEt=i(rd),ts=n(rd,"P",{});var Z$=s(ts);VEt=r(Z$,"The model class to instantiate is selected based on the "),lBe=n(Z$,"CODE",{});var G7a=s(lBe);XEt=r(G7a,"model_type"),G7a.forEach(t),zEt=r(Z$,` property of the config object (either
passed as an argument or loaded from `),iBe=n(Z$,"CODE",{});var O7a=s(iBe);QEt=r(O7a,"pretrained_model_name_or_path"),O7a.forEach(t),WEt=r(Z$,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dBe=n(Z$,"CODE",{});var V7a=s(dBe);UEt=r(V7a,"pretrained_model_name_or_path"),V7a.forEach(t),HEt=r(Z$,":"),Z$.forEach(t),JEt=i(rd),cI=n(rd,"UL",{});var Ofo=s(cI);eL=n(Ofo,"LI",{});var vso=s(eL);mBe=n(vso,"STRONG",{});var X7a=s(mBe);YEt=r(X7a,"speech_to_text"),X7a.forEach(t),ZEt=r(vso," \u2014 "),Yde=n(vso,"A",{href:!0});var z7a=s(Yde);KEt=r(z7a,"TFSpeech2TextForConditionalGeneration"),z7a.forEach(t),e4t=r(vso," (Speech2Text model)"),vso.forEach(t),o4t=i(Ofo),oL=n(Ofo,"LI",{});var Fso=s(oL);cBe=n(Fso,"STRONG",{});var Q7a=s(cBe);r4t=r(Q7a,"whisper"),Q7a.forEach(t),t4t=r(Fso," \u2014 "),Zde=n(Fso,"A",{href:!0});var W7a=s(Zde);a4t=r(W7a,"TFWhisperForConditionalGeneration"),W7a.forEach(t),n4t=r(Fso," (Whisper model)"),Fso.forEach(t),Ofo.forEach(t),s4t=i(rd),T(rL.$$.fragment,rd),rd.forEach(t),od.forEach(t),bmo=i(c),pf=n(c,"H2",{class:!0});var Vfo=s(pf);tL=n(Vfo,"A",{id:!0,class:!0,href:!0});var U7a=s(tL);fBe=n(U7a,"SPAN",{});var H7a=s(fBe);T(fI.$$.fragment,H7a),H7a.forEach(t),U7a.forEach(t),l4t=i(Vfo),gBe=n(Vfo,"SPAN",{});var J7a=s(gBe);i4t=r(J7a,"FlaxAutoModel"),J7a.forEach(t),Vfo.forEach(t),vmo=i(c),kr=n(c,"DIV",{class:!0});var td=s(kr);T(gI.$$.fragment,td),d4t=i(td),_f=n(td,"P",{});var The=s(_f);m4t=r(The,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Kde=n(The,"A",{href:!0});var Y7a=s(Kde);c4t=r(Y7a,"from_pretrained()"),Y7a.forEach(t),f4t=r(The," class method or the "),eme=n(The,"A",{href:!0});var Z7a=s(eme);g4t=r(Z7a,"from_config()"),Z7a.forEach(t),h4t=r(The,` class
method.`),The.forEach(t),u4t=i(td),hI=n(td,"P",{});var Xfo=s(hI);p4t=r(Xfo,"This class cannot be instantiated directly using "),hBe=n(Xfo,"CODE",{});var K7a=s(hBe);_4t=r(K7a,"__init__()"),K7a.forEach(t),b4t=r(Xfo," (throws an error)."),Xfo.forEach(t),v4t=i(td),_a=n(td,"DIV",{class:!0});var K$=s(_a);T(uI.$$.fragment,K$),F4t=i(K$),uBe=n(K$,"P",{});var e8a=s(uBe);T4t=r(e8a,"Instantiates one of the base model classes of the library from a configuration."),e8a.forEach(t),M4t=i(K$),bf=n(K$,"P",{});var Mhe=s(bf);E4t=r(Mhe,`Note:
Loading a model from its configuration file does `),pBe=n(Mhe,"STRONG",{});var o8a=s(pBe);C4t=r(o8a,"not"),o8a.forEach(t),w4t=r(Mhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ome=n(Mhe,"A",{href:!0});var r8a=s(ome);A4t=r(r8a,"from_pretrained()"),r8a.forEach(t),L4t=r(Mhe," to load the model weights."),Mhe.forEach(t),y4t=i(K$),T(aL.$$.fragment,K$),K$.forEach(t),x4t=i(td),lt=n(td,"DIV",{class:!0});var ad=s(lt);T(pI.$$.fragment,ad),$4t=i(ad),_Be=n(ad,"P",{});var t8a=s(_Be);k4t=r(t8a,"Instantiate one of the base model classes of the library from a pretrained model."),t8a.forEach(t),S4t=i(ad),as=n(ad,"P",{});var ek=s(as);R4t=r(ek,"The model class to instantiate is selected based on the "),bBe=n(ek,"CODE",{});var a8a=s(bBe);P4t=r(a8a,"model_type"),a8a.forEach(t),B4t=r(ek,` property of the config object (either
passed as an argument or loaded from `),vBe=n(ek,"CODE",{});var n8a=s(vBe);I4t=r(n8a,"pretrained_model_name_or_path"),n8a.forEach(t),N4t=r(ek,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FBe=n(ek,"CODE",{});var s8a=s(FBe);q4t=r(s8a,"pretrained_model_name_or_path"),s8a.forEach(t),j4t=r(ek,":"),ek.forEach(t),D4t=i(ad),ne=n(ad,"UL",{});var le=s(ne);nL=n(le,"LI",{});var Tso=s(nL);TBe=n(Tso,"STRONG",{});var l8a=s(TBe);G4t=r(l8a,"albert"),l8a.forEach(t),O4t=r(Tso," \u2014 "),rme=n(Tso,"A",{href:!0});var i8a=s(rme);V4t=r(i8a,"FlaxAlbertModel"),i8a.forEach(t),X4t=r(Tso," (ALBERT model)"),Tso.forEach(t),z4t=i(le),sL=n(le,"LI",{});var Mso=s(sL);MBe=n(Mso,"STRONG",{});var d8a=s(MBe);Q4t=r(d8a,"bart"),d8a.forEach(t),W4t=r(Mso," \u2014 "),tme=n(Mso,"A",{href:!0});var m8a=s(tme);U4t=r(m8a,"FlaxBartModel"),m8a.forEach(t),H4t=r(Mso," (BART model)"),Mso.forEach(t),J4t=i(le),lL=n(le,"LI",{});var Eso=s(lL);EBe=n(Eso,"STRONG",{});var c8a=s(EBe);Y4t=r(c8a,"beit"),c8a.forEach(t),Z4t=r(Eso," \u2014 "),ame=n(Eso,"A",{href:!0});var f8a=s(ame);K4t=r(f8a,"FlaxBeitModel"),f8a.forEach(t),eCt=r(Eso," (BEiT model)"),Eso.forEach(t),oCt=i(le),iL=n(le,"LI",{});var Cso=s(iL);CBe=n(Cso,"STRONG",{});var g8a=s(CBe);rCt=r(g8a,"bert"),g8a.forEach(t),tCt=r(Cso," \u2014 "),nme=n(Cso,"A",{href:!0});var h8a=s(nme);aCt=r(h8a,"FlaxBertModel"),h8a.forEach(t),nCt=r(Cso," (BERT model)"),Cso.forEach(t),sCt=i(le),dL=n(le,"LI",{});var wso=s(dL);wBe=n(wso,"STRONG",{});var u8a=s(wBe);lCt=r(u8a,"big_bird"),u8a.forEach(t),iCt=r(wso," \u2014 "),sme=n(wso,"A",{href:!0});var p8a=s(sme);dCt=r(p8a,"FlaxBigBirdModel"),p8a.forEach(t),mCt=r(wso," (BigBird model)"),wso.forEach(t),cCt=i(le),mL=n(le,"LI",{});var Aso=s(mL);ABe=n(Aso,"STRONG",{});var _8a=s(ABe);fCt=r(_8a,"blenderbot"),_8a.forEach(t),gCt=r(Aso," \u2014 "),lme=n(Aso,"A",{href:!0});var b8a=s(lme);hCt=r(b8a,"FlaxBlenderbotModel"),b8a.forEach(t),uCt=r(Aso," (Blenderbot model)"),Aso.forEach(t),pCt=i(le),cL=n(le,"LI",{});var Lso=s(cL);LBe=n(Lso,"STRONG",{});var v8a=s(LBe);_Ct=r(v8a,"blenderbot-small"),v8a.forEach(t),bCt=r(Lso," \u2014 "),ime=n(Lso,"A",{href:!0});var F8a=s(ime);vCt=r(F8a,"FlaxBlenderbotSmallModel"),F8a.forEach(t),FCt=r(Lso," (BlenderbotSmall model)"),Lso.forEach(t),TCt=i(le),fL=n(le,"LI",{});var yso=s(fL);yBe=n(yso,"STRONG",{});var T8a=s(yBe);MCt=r(T8a,"clip"),T8a.forEach(t),ECt=r(yso," \u2014 "),dme=n(yso,"A",{href:!0});var M8a=s(dme);CCt=r(M8a,"FlaxCLIPModel"),M8a.forEach(t),wCt=r(yso," (CLIP model)"),yso.forEach(t),ACt=i(le),gL=n(le,"LI",{});var xso=s(gL);xBe=n(xso,"STRONG",{});var E8a=s(xBe);LCt=r(E8a,"distilbert"),E8a.forEach(t),yCt=r(xso," \u2014 "),mme=n(xso,"A",{href:!0});var C8a=s(mme);xCt=r(C8a,"FlaxDistilBertModel"),C8a.forEach(t),$Ct=r(xso," (DistilBERT model)"),xso.forEach(t),kCt=i(le),hL=n(le,"LI",{});var $so=s(hL);$Be=n($so,"STRONG",{});var w8a=s($Be);SCt=r(w8a,"electra"),w8a.forEach(t),RCt=r($so," \u2014 "),cme=n($so,"A",{href:!0});var A8a=s(cme);PCt=r(A8a,"FlaxElectraModel"),A8a.forEach(t),BCt=r($so," (ELECTRA model)"),$so.forEach(t),ICt=i(le),uL=n(le,"LI",{});var kso=s(uL);kBe=n(kso,"STRONG",{});var L8a=s(kBe);NCt=r(L8a,"gpt2"),L8a.forEach(t),qCt=r(kso," \u2014 "),fme=n(kso,"A",{href:!0});var y8a=s(fme);jCt=r(y8a,"FlaxGPT2Model"),y8a.forEach(t),DCt=r(kso," (OpenAI GPT-2 model)"),kso.forEach(t),GCt=i(le),pL=n(le,"LI",{});var Sso=s(pL);SBe=n(Sso,"STRONG",{});var x8a=s(SBe);OCt=r(x8a,"gpt_neo"),x8a.forEach(t),VCt=r(Sso," \u2014 "),gme=n(Sso,"A",{href:!0});var $8a=s(gme);XCt=r($8a,"FlaxGPTNeoModel"),$8a.forEach(t),zCt=r(Sso," (GPT Neo model)"),Sso.forEach(t),QCt=i(le),_L=n(le,"LI",{});var Rso=s(_L);RBe=n(Rso,"STRONG",{});var k8a=s(RBe);WCt=r(k8a,"gptj"),k8a.forEach(t),UCt=r(Rso," \u2014 "),hme=n(Rso,"A",{href:!0});var S8a=s(hme);HCt=r(S8a,"FlaxGPTJModel"),S8a.forEach(t),JCt=r(Rso," (GPT-J model)"),Rso.forEach(t),YCt=i(le),bL=n(le,"LI",{});var Pso=s(bL);PBe=n(Pso,"STRONG",{});var R8a=s(PBe);ZCt=r(R8a,"longt5"),R8a.forEach(t),KCt=r(Pso," \u2014 "),ume=n(Pso,"A",{href:!0});var P8a=s(ume);e3t=r(P8a,"FlaxLongT5Model"),P8a.forEach(t),o3t=r(Pso," (LongT5 model)"),Pso.forEach(t),r3t=i(le),vL=n(le,"LI",{});var Bso=s(vL);BBe=n(Bso,"STRONG",{});var B8a=s(BBe);t3t=r(B8a,"marian"),B8a.forEach(t),a3t=r(Bso," \u2014 "),pme=n(Bso,"A",{href:!0});var I8a=s(pme);n3t=r(I8a,"FlaxMarianModel"),I8a.forEach(t),s3t=r(Bso," (Marian model)"),Bso.forEach(t),l3t=i(le),FL=n(le,"LI",{});var Iso=s(FL);IBe=n(Iso,"STRONG",{});var N8a=s(IBe);i3t=r(N8a,"mbart"),N8a.forEach(t),d3t=r(Iso," \u2014 "),_me=n(Iso,"A",{href:!0});var q8a=s(_me);m3t=r(q8a,"FlaxMBartModel"),q8a.forEach(t),c3t=r(Iso," (mBART model)"),Iso.forEach(t),f3t=i(le),TL=n(le,"LI",{});var Nso=s(TL);NBe=n(Nso,"STRONG",{});var j8a=s(NBe);g3t=r(j8a,"mt5"),j8a.forEach(t),h3t=r(Nso," \u2014 "),bme=n(Nso,"A",{href:!0});var D8a=s(bme);u3t=r(D8a,"FlaxMT5Model"),D8a.forEach(t),p3t=r(Nso," (MT5 model)"),Nso.forEach(t),_3t=i(le),ML=n(le,"LI",{});var qso=s(ML);qBe=n(qso,"STRONG",{});var G8a=s(qBe);b3t=r(G8a,"opt"),G8a.forEach(t),v3t=r(qso," \u2014 "),vme=n(qso,"A",{href:!0});var O8a=s(vme);F3t=r(O8a,"FlaxOPTModel"),O8a.forEach(t),T3t=r(qso," (OPT model)"),qso.forEach(t),M3t=i(le),EL=n(le,"LI",{});var jso=s(EL);jBe=n(jso,"STRONG",{});var V8a=s(jBe);E3t=r(V8a,"pegasus"),V8a.forEach(t),C3t=r(jso," \u2014 "),Fme=n(jso,"A",{href:!0});var X8a=s(Fme);w3t=r(X8a,"FlaxPegasusModel"),X8a.forEach(t),A3t=r(jso," (Pegasus model)"),jso.forEach(t),L3t=i(le),CL=n(le,"LI",{});var Dso=s(CL);DBe=n(Dso,"STRONG",{});var z8a=s(DBe);y3t=r(z8a,"roberta"),z8a.forEach(t),x3t=r(Dso," \u2014 "),Tme=n(Dso,"A",{href:!0});var Q8a=s(Tme);$3t=r(Q8a,"FlaxRobertaModel"),Q8a.forEach(t),k3t=r(Dso," (RoBERTa model)"),Dso.forEach(t),S3t=i(le),wL=n(le,"LI",{});var Gso=s(wL);GBe=n(Gso,"STRONG",{});var W8a=s(GBe);R3t=r(W8a,"roformer"),W8a.forEach(t),P3t=r(Gso," \u2014 "),Mme=n(Gso,"A",{href:!0});var U8a=s(Mme);B3t=r(U8a,"FlaxRoFormerModel"),U8a.forEach(t),I3t=r(Gso," (RoFormer model)"),Gso.forEach(t),N3t=i(le),AL=n(le,"LI",{});var Oso=s(AL);OBe=n(Oso,"STRONG",{});var H8a=s(OBe);q3t=r(H8a,"t5"),H8a.forEach(t),j3t=r(Oso," \u2014 "),Eme=n(Oso,"A",{href:!0});var J8a=s(Eme);D3t=r(J8a,"FlaxT5Model"),J8a.forEach(t),G3t=r(Oso," (T5 model)"),Oso.forEach(t),O3t=i(le),LL=n(le,"LI",{});var Vso=s(LL);VBe=n(Vso,"STRONG",{});var Y8a=s(VBe);V3t=r(Y8a,"vision-text-dual-encoder"),Y8a.forEach(t),X3t=r(Vso," \u2014 "),Cme=n(Vso,"A",{href:!0});var Z8a=s(Cme);z3t=r(Z8a,"FlaxVisionTextDualEncoderModel"),Z8a.forEach(t),Q3t=r(Vso," (VisionTextDualEncoder model)"),Vso.forEach(t),W3t=i(le),yL=n(le,"LI",{});var Xso=s(yL);XBe=n(Xso,"STRONG",{});var K8a=s(XBe);U3t=r(K8a,"vit"),K8a.forEach(t),H3t=r(Xso," \u2014 "),wme=n(Xso,"A",{href:!0});var eLa=s(wme);J3t=r(eLa,"FlaxViTModel"),eLa.forEach(t),Y3t=r(Xso," (ViT model)"),Xso.forEach(t),Z3t=i(le),xL=n(le,"LI",{});var zso=s(xL);zBe=n(zso,"STRONG",{});var oLa=s(zBe);K3t=r(oLa,"wav2vec2"),oLa.forEach(t),e5t=r(zso," \u2014 "),Ame=n(zso,"A",{href:!0});var rLa=s(Ame);o5t=r(rLa,"FlaxWav2Vec2Model"),rLa.forEach(t),r5t=r(zso," (Wav2Vec2 model)"),zso.forEach(t),t5t=i(le),$L=n(le,"LI",{});var Qso=s($L);QBe=n(Qso,"STRONG",{});var tLa=s(QBe);a5t=r(tLa,"xglm"),tLa.forEach(t),n5t=r(Qso," \u2014 "),Lme=n(Qso,"A",{href:!0});var aLa=s(Lme);s5t=r(aLa,"FlaxXGLMModel"),aLa.forEach(t),l5t=r(Qso," (XGLM model)"),Qso.forEach(t),i5t=i(le),kL=n(le,"LI",{});var Wso=s(kL);WBe=n(Wso,"STRONG",{});var nLa=s(WBe);d5t=r(nLa,"xlm-roberta"),nLa.forEach(t),m5t=r(Wso," \u2014 "),yme=n(Wso,"A",{href:!0});var sLa=s(yme);c5t=r(sLa,"FlaxXLMRobertaModel"),sLa.forEach(t),f5t=r(Wso," (XLM-RoBERTa model)"),Wso.forEach(t),le.forEach(t),g5t=i(ad),T(SL.$$.fragment,ad),ad.forEach(t),td.forEach(t),Fmo=i(c),vf=n(c,"H2",{class:!0});var zfo=s(vf);RL=n(zfo,"A",{id:!0,class:!0,href:!0});var lLa=s(RL);UBe=n(lLa,"SPAN",{});var iLa=s(UBe);T(_I.$$.fragment,iLa),iLa.forEach(t),lLa.forEach(t),h5t=i(zfo),HBe=n(zfo,"SPAN",{});var dLa=s(HBe);u5t=r(dLa,"FlaxAutoModelForCausalLM"),dLa.forEach(t),zfo.forEach(t),Tmo=i(c),Sr=n(c,"DIV",{class:!0});var nd=s(Sr);T(bI.$$.fragment,nd),p5t=i(nd),Ff=n(nd,"P",{});var Ehe=s(Ff);_5t=r(Ehe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xme=n(Ehe,"A",{href:!0});var mLa=s(xme);b5t=r(mLa,"from_pretrained()"),mLa.forEach(t),v5t=r(Ehe," class method or the "),$me=n(Ehe,"A",{href:!0});var cLa=s($me);F5t=r(cLa,"from_config()"),cLa.forEach(t),T5t=r(Ehe,` class
method.`),Ehe.forEach(t),M5t=i(nd),vI=n(nd,"P",{});var Qfo=s(vI);E5t=r(Qfo,"This class cannot be instantiated directly using "),JBe=n(Qfo,"CODE",{});var fLa=s(JBe);C5t=r(fLa,"__init__()"),fLa.forEach(t),w5t=r(Qfo," (throws an error)."),Qfo.forEach(t),A5t=i(nd),ba=n(nd,"DIV",{class:!0});var ok=s(ba);T(FI.$$.fragment,ok),L5t=i(ok),YBe=n(ok,"P",{});var gLa=s(YBe);y5t=r(gLa,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gLa.forEach(t),x5t=i(ok),Tf=n(ok,"P",{});var Che=s(Tf);$5t=r(Che,`Note:
Loading a model from its configuration file does `),ZBe=n(Che,"STRONG",{});var hLa=s(ZBe);k5t=r(hLa,"not"),hLa.forEach(t),S5t=r(Che,` load the model weights. It only affects the
model\u2019s configuration. Use `),kme=n(Che,"A",{href:!0});var uLa=s(kme);R5t=r(uLa,"from_pretrained()"),uLa.forEach(t),P5t=r(Che," to load the model weights."),Che.forEach(t),B5t=i(ok),T(PL.$$.fragment,ok),ok.forEach(t),I5t=i(nd),it=n(nd,"DIV",{class:!0});var sd=s(it);T(TI.$$.fragment,sd),N5t=i(sd),KBe=n(sd,"P",{});var pLa=s(KBe);q5t=r(pLa,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pLa.forEach(t),j5t=i(sd),ns=n(sd,"P",{});var rk=s(ns);D5t=r(rk,"The model class to instantiate is selected based on the "),eIe=n(rk,"CODE",{});var _La=s(eIe);G5t=r(_La,"model_type"),_La.forEach(t),O5t=r(rk,` property of the config object (either
passed as an argument or loaded from `),oIe=n(rk,"CODE",{});var bLa=s(oIe);V5t=r(bLa,"pretrained_model_name_or_path"),bLa.forEach(t),X5t=r(rk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rIe=n(rk,"CODE",{});var vLa=s(rIe);z5t=r(vLa,"pretrained_model_name_or_path"),vLa.forEach(t),Q5t=r(rk,":"),rk.forEach(t),W5t=i(sd),Se=n(sd,"UL",{});var Ge=s(Se);BL=n(Ge,"LI",{});var Uso=s(BL);tIe=n(Uso,"STRONG",{});var FLa=s(tIe);U5t=r(FLa,"bart"),FLa.forEach(t),H5t=r(Uso," \u2014 "),Sme=n(Uso,"A",{href:!0});var TLa=s(Sme);J5t=r(TLa,"FlaxBartForCausalLM"),TLa.forEach(t),Y5t=r(Uso," (BART model)"),Uso.forEach(t),Z5t=i(Ge),IL=n(Ge,"LI",{});var Hso=s(IL);aIe=n(Hso,"STRONG",{});var MLa=s(aIe);K5t=r(MLa,"bert"),MLa.forEach(t),e0t=r(Hso," \u2014 "),Rme=n(Hso,"A",{href:!0});var ELa=s(Rme);o0t=r(ELa,"FlaxBertForCausalLM"),ELa.forEach(t),r0t=r(Hso," (BERT model)"),Hso.forEach(t),t0t=i(Ge),NL=n(Ge,"LI",{});var Jso=s(NL);nIe=n(Jso,"STRONG",{});var CLa=s(nIe);a0t=r(CLa,"big_bird"),CLa.forEach(t),n0t=r(Jso," \u2014 "),Pme=n(Jso,"A",{href:!0});var wLa=s(Pme);s0t=r(wLa,"FlaxBigBirdForCausalLM"),wLa.forEach(t),l0t=r(Jso," (BigBird model)"),Jso.forEach(t),i0t=i(Ge),qL=n(Ge,"LI",{});var Yso=s(qL);sIe=n(Yso,"STRONG",{});var ALa=s(sIe);d0t=r(ALa,"electra"),ALa.forEach(t),m0t=r(Yso," \u2014 "),Bme=n(Yso,"A",{href:!0});var LLa=s(Bme);c0t=r(LLa,"FlaxElectraForCausalLM"),LLa.forEach(t),f0t=r(Yso," (ELECTRA model)"),Yso.forEach(t),g0t=i(Ge),jL=n(Ge,"LI",{});var Zso=s(jL);lIe=n(Zso,"STRONG",{});var yLa=s(lIe);h0t=r(yLa,"gpt2"),yLa.forEach(t),u0t=r(Zso," \u2014 "),Ime=n(Zso,"A",{href:!0});var xLa=s(Ime);p0t=r(xLa,"FlaxGPT2LMHeadModel"),xLa.forEach(t),_0t=r(Zso," (OpenAI GPT-2 model)"),Zso.forEach(t),b0t=i(Ge),DL=n(Ge,"LI",{});var Kso=s(DL);iIe=n(Kso,"STRONG",{});var $La=s(iIe);v0t=r($La,"gpt_neo"),$La.forEach(t),F0t=r(Kso," \u2014 "),Nme=n(Kso,"A",{href:!0});var kLa=s(Nme);T0t=r(kLa,"FlaxGPTNeoForCausalLM"),kLa.forEach(t),M0t=r(Kso," (GPT Neo model)"),Kso.forEach(t),E0t=i(Ge),GL=n(Ge,"LI",{});var elo=s(GL);dIe=n(elo,"STRONG",{});var SLa=s(dIe);C0t=r(SLa,"gptj"),SLa.forEach(t),w0t=r(elo," \u2014 "),qme=n(elo,"A",{href:!0});var RLa=s(qme);A0t=r(RLa,"FlaxGPTJForCausalLM"),RLa.forEach(t),L0t=r(elo," (GPT-J model)"),elo.forEach(t),y0t=i(Ge),OL=n(Ge,"LI",{});var olo=s(OL);mIe=n(olo,"STRONG",{});var PLa=s(mIe);x0t=r(PLa,"opt"),PLa.forEach(t),$0t=r(olo," \u2014 "),jme=n(olo,"A",{href:!0});var BLa=s(jme);k0t=r(BLa,"FlaxOPTForCausalLM"),BLa.forEach(t),S0t=r(olo," (OPT model)"),olo.forEach(t),R0t=i(Ge),VL=n(Ge,"LI",{});var rlo=s(VL);cIe=n(rlo,"STRONG",{});var ILa=s(cIe);P0t=r(ILa,"roberta"),ILa.forEach(t),B0t=r(rlo," \u2014 "),Dme=n(rlo,"A",{href:!0});var NLa=s(Dme);I0t=r(NLa,"FlaxRobertaForCausalLM"),NLa.forEach(t),N0t=r(rlo," (RoBERTa model)"),rlo.forEach(t),q0t=i(Ge),XL=n(Ge,"LI",{});var tlo=s(XL);fIe=n(tlo,"STRONG",{});var qLa=s(fIe);j0t=r(qLa,"xglm"),qLa.forEach(t),D0t=r(tlo," \u2014 "),Gme=n(tlo,"A",{href:!0});var jLa=s(Gme);G0t=r(jLa,"FlaxXGLMForCausalLM"),jLa.forEach(t),O0t=r(tlo," (XGLM model)"),tlo.forEach(t),Ge.forEach(t),V0t=i(sd),T(zL.$$.fragment,sd),sd.forEach(t),nd.forEach(t),Mmo=i(c),Mf=n(c,"H2",{class:!0});var Wfo=s(Mf);QL=n(Wfo,"A",{id:!0,class:!0,href:!0});var DLa=s(QL);gIe=n(DLa,"SPAN",{});var GLa=s(gIe);T(MI.$$.fragment,GLa),GLa.forEach(t),DLa.forEach(t),X0t=i(Wfo),hIe=n(Wfo,"SPAN",{});var OLa=s(hIe);z0t=r(OLa,"FlaxAutoModelForPreTraining"),OLa.forEach(t),Wfo.forEach(t),Emo=i(c),Rr=n(c,"DIV",{class:!0});var ld=s(Rr);T(EI.$$.fragment,ld),Q0t=i(ld),Ef=n(ld,"P",{});var whe=s(Ef);W0t=r(whe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ome=n(whe,"A",{href:!0});var VLa=s(Ome);U0t=r(VLa,"from_pretrained()"),VLa.forEach(t),H0t=r(whe," class method or the "),Vme=n(whe,"A",{href:!0});var XLa=s(Vme);J0t=r(XLa,"from_config()"),XLa.forEach(t),Y0t=r(whe,` class
method.`),whe.forEach(t),Z0t=i(ld),CI=n(ld,"P",{});var Ufo=s(CI);K0t=r(Ufo,"This class cannot be instantiated directly using "),uIe=n(Ufo,"CODE",{});var zLa=s(uIe);ewt=r(zLa,"__init__()"),zLa.forEach(t),owt=r(Ufo," (throws an error)."),Ufo.forEach(t),rwt=i(ld),va=n(ld,"DIV",{class:!0});var tk=s(va);T(wI.$$.fragment,tk),twt=i(tk),pIe=n(tk,"P",{});var QLa=s(pIe);awt=r(QLa,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),QLa.forEach(t),nwt=i(tk),Cf=n(tk,"P",{});var Ahe=s(Cf);swt=r(Ahe,`Note:
Loading a model from its configuration file does `),_Ie=n(Ahe,"STRONG",{});var WLa=s(_Ie);lwt=r(WLa,"not"),WLa.forEach(t),iwt=r(Ahe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xme=n(Ahe,"A",{href:!0});var ULa=s(Xme);dwt=r(ULa,"from_pretrained()"),ULa.forEach(t),mwt=r(Ahe," to load the model weights."),Ahe.forEach(t),cwt=i(tk),T(WL.$$.fragment,tk),tk.forEach(t),fwt=i(ld),dt=n(ld,"DIV",{class:!0});var id=s(dt);T(AI.$$.fragment,id),gwt=i(id),bIe=n(id,"P",{});var HLa=s(bIe);hwt=r(HLa,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),HLa.forEach(t),uwt=i(id),ss=n(id,"P",{});var ak=s(ss);pwt=r(ak,"The model class to instantiate is selected based on the "),vIe=n(ak,"CODE",{});var JLa=s(vIe);_wt=r(JLa,"model_type"),JLa.forEach(t),bwt=r(ak,` property of the config object (either
passed as an argument or loaded from `),FIe=n(ak,"CODE",{});var YLa=s(FIe);vwt=r(YLa,"pretrained_model_name_or_path"),YLa.forEach(t),Fwt=r(ak,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TIe=n(ak,"CODE",{});var ZLa=s(TIe);Twt=r(ZLa,"pretrained_model_name_or_path"),ZLa.forEach(t),Mwt=r(ak,":"),ak.forEach(t),Ewt=i(id),we=n(id,"UL",{});var Le=s(we);UL=n(Le,"LI",{});var alo=s(UL);MIe=n(alo,"STRONG",{});var KLa=s(MIe);Cwt=r(KLa,"albert"),KLa.forEach(t),wwt=r(alo," \u2014 "),zme=n(alo,"A",{href:!0});var eya=s(zme);Awt=r(eya,"FlaxAlbertForPreTraining"),eya.forEach(t),Lwt=r(alo," (ALBERT model)"),alo.forEach(t),ywt=i(Le),HL=n(Le,"LI",{});var nlo=s(HL);EIe=n(nlo,"STRONG",{});var oya=s(EIe);xwt=r(oya,"bart"),oya.forEach(t),$wt=r(nlo," \u2014 "),Qme=n(nlo,"A",{href:!0});var rya=s(Qme);kwt=r(rya,"FlaxBartForConditionalGeneration"),rya.forEach(t),Swt=r(nlo," (BART model)"),nlo.forEach(t),Rwt=i(Le),JL=n(Le,"LI",{});var slo=s(JL);CIe=n(slo,"STRONG",{});var tya=s(CIe);Pwt=r(tya,"bert"),tya.forEach(t),Bwt=r(slo," \u2014 "),Wme=n(slo,"A",{href:!0});var aya=s(Wme);Iwt=r(aya,"FlaxBertForPreTraining"),aya.forEach(t),Nwt=r(slo," (BERT model)"),slo.forEach(t),qwt=i(Le),YL=n(Le,"LI",{});var llo=s(YL);wIe=n(llo,"STRONG",{});var nya=s(wIe);jwt=r(nya,"big_bird"),nya.forEach(t),Dwt=r(llo," \u2014 "),Ume=n(llo,"A",{href:!0});var sya=s(Ume);Gwt=r(sya,"FlaxBigBirdForPreTraining"),sya.forEach(t),Owt=r(llo," (BigBird model)"),llo.forEach(t),Vwt=i(Le),ZL=n(Le,"LI",{});var ilo=s(ZL);AIe=n(ilo,"STRONG",{});var lya=s(AIe);Xwt=r(lya,"electra"),lya.forEach(t),zwt=r(ilo," \u2014 "),Hme=n(ilo,"A",{href:!0});var iya=s(Hme);Qwt=r(iya,"FlaxElectraForPreTraining"),iya.forEach(t),Wwt=r(ilo," (ELECTRA model)"),ilo.forEach(t),Uwt=i(Le),KL=n(Le,"LI",{});var dlo=s(KL);LIe=n(dlo,"STRONG",{});var dya=s(LIe);Hwt=r(dya,"longt5"),dya.forEach(t),Jwt=r(dlo," \u2014 "),Jme=n(dlo,"A",{href:!0});var mya=s(Jme);Ywt=r(mya,"FlaxLongT5ForConditionalGeneration"),mya.forEach(t),Zwt=r(dlo," (LongT5 model)"),dlo.forEach(t),Kwt=i(Le),ey=n(Le,"LI",{});var mlo=s(ey);yIe=n(mlo,"STRONG",{});var cya=s(yIe);eAt=r(cya,"mbart"),cya.forEach(t),oAt=r(mlo," \u2014 "),Yme=n(mlo,"A",{href:!0});var fya=s(Yme);rAt=r(fya,"FlaxMBartForConditionalGeneration"),fya.forEach(t),tAt=r(mlo," (mBART model)"),mlo.forEach(t),aAt=i(Le),oy=n(Le,"LI",{});var clo=s(oy);xIe=n(clo,"STRONG",{});var gya=s(xIe);nAt=r(gya,"mt5"),gya.forEach(t),sAt=r(clo," \u2014 "),Zme=n(clo,"A",{href:!0});var hya=s(Zme);lAt=r(hya,"FlaxMT5ForConditionalGeneration"),hya.forEach(t),iAt=r(clo," (MT5 model)"),clo.forEach(t),dAt=i(Le),ry=n(Le,"LI",{});var flo=s(ry);$Ie=n(flo,"STRONG",{});var uya=s($Ie);mAt=r(uya,"roberta"),uya.forEach(t),cAt=r(flo," \u2014 "),Kme=n(flo,"A",{href:!0});var pya=s(Kme);fAt=r(pya,"FlaxRobertaForMaskedLM"),pya.forEach(t),gAt=r(flo," (RoBERTa model)"),flo.forEach(t),hAt=i(Le),ty=n(Le,"LI",{});var glo=s(ty);kIe=n(glo,"STRONG",{});var _ya=s(kIe);uAt=r(_ya,"roformer"),_ya.forEach(t),pAt=r(glo," \u2014 "),ece=n(glo,"A",{href:!0});var bya=s(ece);_At=r(bya,"FlaxRoFormerForMaskedLM"),bya.forEach(t),bAt=r(glo," (RoFormer model)"),glo.forEach(t),vAt=i(Le),ay=n(Le,"LI",{});var hlo=s(ay);SIe=n(hlo,"STRONG",{});var vya=s(SIe);FAt=r(vya,"t5"),vya.forEach(t),TAt=r(hlo," \u2014 "),oce=n(hlo,"A",{href:!0});var Fya=s(oce);MAt=r(Fya,"FlaxT5ForConditionalGeneration"),Fya.forEach(t),EAt=r(hlo," (T5 model)"),hlo.forEach(t),CAt=i(Le),ny=n(Le,"LI",{});var ulo=s(ny);RIe=n(ulo,"STRONG",{});var Tya=s(RIe);wAt=r(Tya,"wav2vec2"),Tya.forEach(t),AAt=r(ulo," \u2014 "),rce=n(ulo,"A",{href:!0});var Mya=s(rce);LAt=r(Mya,"FlaxWav2Vec2ForPreTraining"),Mya.forEach(t),yAt=r(ulo," (Wav2Vec2 model)"),ulo.forEach(t),xAt=i(Le),sy=n(Le,"LI",{});var plo=s(sy);PIe=n(plo,"STRONG",{});var Eya=s(PIe);$At=r(Eya,"xlm-roberta"),Eya.forEach(t),kAt=r(plo," \u2014 "),tce=n(plo,"A",{href:!0});var Cya=s(tce);SAt=r(Cya,"FlaxXLMRobertaForMaskedLM"),Cya.forEach(t),RAt=r(plo," (XLM-RoBERTa model)"),plo.forEach(t),Le.forEach(t),PAt=i(id),T(ly.$$.fragment,id),id.forEach(t),ld.forEach(t),Cmo=i(c),wf=n(c,"H2",{class:!0});var Hfo=s(wf);iy=n(Hfo,"A",{id:!0,class:!0,href:!0});var wya=s(iy);BIe=n(wya,"SPAN",{});var Aya=s(BIe);T(LI.$$.fragment,Aya),Aya.forEach(t),wya.forEach(t),BAt=i(Hfo),IIe=n(Hfo,"SPAN",{});var Lya=s(IIe);IAt=r(Lya,"FlaxAutoModelForMaskedLM"),Lya.forEach(t),Hfo.forEach(t),wmo=i(c),Pr=n(c,"DIV",{class:!0});var dd=s(Pr);T(yI.$$.fragment,dd),NAt=i(dd),Af=n(dd,"P",{});var Lhe=s(Af);qAt=r(Lhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ace=n(Lhe,"A",{href:!0});var yya=s(ace);jAt=r(yya,"from_pretrained()"),yya.forEach(t),DAt=r(Lhe," class method or the "),nce=n(Lhe,"A",{href:!0});var xya=s(nce);GAt=r(xya,"from_config()"),xya.forEach(t),OAt=r(Lhe,` class
method.`),Lhe.forEach(t),VAt=i(dd),xI=n(dd,"P",{});var Jfo=s(xI);XAt=r(Jfo,"This class cannot be instantiated directly using "),NIe=n(Jfo,"CODE",{});var $ya=s(NIe);zAt=r($ya,"__init__()"),$ya.forEach(t),QAt=r(Jfo," (throws an error)."),Jfo.forEach(t),WAt=i(dd),Fa=n(dd,"DIV",{class:!0});var nk=s(Fa);T($I.$$.fragment,nk),UAt=i(nk),qIe=n(nk,"P",{});var kya=s(qIe);HAt=r(kya,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kya.forEach(t),JAt=i(nk),Lf=n(nk,"P",{});var yhe=s(Lf);YAt=r(yhe,`Note:
Loading a model from its configuration file does `),jIe=n(yhe,"STRONG",{});var Sya=s(jIe);ZAt=r(Sya,"not"),Sya.forEach(t),KAt=r(yhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sce=n(yhe,"A",{href:!0});var Rya=s(sce);e6t=r(Rya,"from_pretrained()"),Rya.forEach(t),o6t=r(yhe," to load the model weights."),yhe.forEach(t),r6t=i(nk),T(dy.$$.fragment,nk),nk.forEach(t),t6t=i(dd),mt=n(dd,"DIV",{class:!0});var md=s(mt);T(kI.$$.fragment,md),a6t=i(md),DIe=n(md,"P",{});var Pya=s(DIe);n6t=r(Pya,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pya.forEach(t),s6t=i(md),ls=n(md,"P",{});var sk=s(ls);l6t=r(sk,"The model class to instantiate is selected based on the "),GIe=n(sk,"CODE",{});var Bya=s(GIe);i6t=r(Bya,"model_type"),Bya.forEach(t),d6t=r(sk,` property of the config object (either
passed as an argument or loaded from `),OIe=n(sk,"CODE",{});var Iya=s(OIe);m6t=r(Iya,"pretrained_model_name_or_path"),Iya.forEach(t),c6t=r(sk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VIe=n(sk,"CODE",{});var Nya=s(VIe);f6t=r(Nya,"pretrained_model_name_or_path"),Nya.forEach(t),g6t=r(sk,":"),sk.forEach(t),h6t=i(md),Re=n(md,"UL",{});var Oe=s(Re);my=n(Oe,"LI",{});var _lo=s(my);XIe=n(_lo,"STRONG",{});var qya=s(XIe);u6t=r(qya,"albert"),qya.forEach(t),p6t=r(_lo," \u2014 "),lce=n(_lo,"A",{href:!0});var jya=s(lce);_6t=r(jya,"FlaxAlbertForMaskedLM"),jya.forEach(t),b6t=r(_lo," (ALBERT model)"),_lo.forEach(t),v6t=i(Oe),cy=n(Oe,"LI",{});var blo=s(cy);zIe=n(blo,"STRONG",{});var Dya=s(zIe);F6t=r(Dya,"bart"),Dya.forEach(t),T6t=r(blo," \u2014 "),ice=n(blo,"A",{href:!0});var Gya=s(ice);M6t=r(Gya,"FlaxBartForConditionalGeneration"),Gya.forEach(t),E6t=r(blo," (BART model)"),blo.forEach(t),C6t=i(Oe),fy=n(Oe,"LI",{});var vlo=s(fy);QIe=n(vlo,"STRONG",{});var Oya=s(QIe);w6t=r(Oya,"bert"),Oya.forEach(t),A6t=r(vlo," \u2014 "),dce=n(vlo,"A",{href:!0});var Vya=s(dce);L6t=r(Vya,"FlaxBertForMaskedLM"),Vya.forEach(t),y6t=r(vlo," (BERT model)"),vlo.forEach(t),x6t=i(Oe),gy=n(Oe,"LI",{});var Flo=s(gy);WIe=n(Flo,"STRONG",{});var Xya=s(WIe);$6t=r(Xya,"big_bird"),Xya.forEach(t),k6t=r(Flo," \u2014 "),mce=n(Flo,"A",{href:!0});var zya=s(mce);S6t=r(zya,"FlaxBigBirdForMaskedLM"),zya.forEach(t),R6t=r(Flo," (BigBird model)"),Flo.forEach(t),P6t=i(Oe),hy=n(Oe,"LI",{});var Tlo=s(hy);UIe=n(Tlo,"STRONG",{});var Qya=s(UIe);B6t=r(Qya,"distilbert"),Qya.forEach(t),I6t=r(Tlo," \u2014 "),cce=n(Tlo,"A",{href:!0});var Wya=s(cce);N6t=r(Wya,"FlaxDistilBertForMaskedLM"),Wya.forEach(t),q6t=r(Tlo," (DistilBERT model)"),Tlo.forEach(t),j6t=i(Oe),uy=n(Oe,"LI",{});var Mlo=s(uy);HIe=n(Mlo,"STRONG",{});var Uya=s(HIe);D6t=r(Uya,"electra"),Uya.forEach(t),G6t=r(Mlo," \u2014 "),fce=n(Mlo,"A",{href:!0});var Hya=s(fce);O6t=r(Hya,"FlaxElectraForMaskedLM"),Hya.forEach(t),V6t=r(Mlo," (ELECTRA model)"),Mlo.forEach(t),X6t=i(Oe),py=n(Oe,"LI",{});var Elo=s(py);JIe=n(Elo,"STRONG",{});var Jya=s(JIe);z6t=r(Jya,"mbart"),Jya.forEach(t),Q6t=r(Elo," \u2014 "),gce=n(Elo,"A",{href:!0});var Yya=s(gce);W6t=r(Yya,"FlaxMBartForConditionalGeneration"),Yya.forEach(t),U6t=r(Elo," (mBART model)"),Elo.forEach(t),H6t=i(Oe),_y=n(Oe,"LI",{});var Clo=s(_y);YIe=n(Clo,"STRONG",{});var Zya=s(YIe);J6t=r(Zya,"roberta"),Zya.forEach(t),Y6t=r(Clo," \u2014 "),hce=n(Clo,"A",{href:!0});var Kya=s(hce);Z6t=r(Kya,"FlaxRobertaForMaskedLM"),Kya.forEach(t),K6t=r(Clo," (RoBERTa model)"),Clo.forEach(t),e7t=i(Oe),by=n(Oe,"LI",{});var wlo=s(by);ZIe=n(wlo,"STRONG",{});var e9a=s(ZIe);o7t=r(e9a,"roformer"),e9a.forEach(t),r7t=r(wlo," \u2014 "),uce=n(wlo,"A",{href:!0});var o9a=s(uce);t7t=r(o9a,"FlaxRoFormerForMaskedLM"),o9a.forEach(t),a7t=r(wlo," (RoFormer model)"),wlo.forEach(t),n7t=i(Oe),vy=n(Oe,"LI",{});var Alo=s(vy);KIe=n(Alo,"STRONG",{});var r9a=s(KIe);s7t=r(r9a,"xlm-roberta"),r9a.forEach(t),l7t=r(Alo," \u2014 "),pce=n(Alo,"A",{href:!0});var t9a=s(pce);i7t=r(t9a,"FlaxXLMRobertaForMaskedLM"),t9a.forEach(t),d7t=r(Alo," (XLM-RoBERTa model)"),Alo.forEach(t),Oe.forEach(t),m7t=i(md),T(Fy.$$.fragment,md),md.forEach(t),dd.forEach(t),Amo=i(c),yf=n(c,"H2",{class:!0});var Yfo=s(yf);Ty=n(Yfo,"A",{id:!0,class:!0,href:!0});var a9a=s(Ty);eNe=n(a9a,"SPAN",{});var n9a=s(eNe);T(SI.$$.fragment,n9a),n9a.forEach(t),a9a.forEach(t),c7t=i(Yfo),oNe=n(Yfo,"SPAN",{});var s9a=s(oNe);f7t=r(s9a,"FlaxAutoModelForSeq2SeqLM"),s9a.forEach(t),Yfo.forEach(t),Lmo=i(c),Br=n(c,"DIV",{class:!0});var cd=s(Br);T(RI.$$.fragment,cd),g7t=i(cd),xf=n(cd,"P",{});var xhe=s(xf);h7t=r(xhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_ce=n(xhe,"A",{href:!0});var l9a=s(_ce);u7t=r(l9a,"from_pretrained()"),l9a.forEach(t),p7t=r(xhe," class method or the "),bce=n(xhe,"A",{href:!0});var i9a=s(bce);_7t=r(i9a,"from_config()"),i9a.forEach(t),b7t=r(xhe,` class
method.`),xhe.forEach(t),v7t=i(cd),PI=n(cd,"P",{});var Zfo=s(PI);F7t=r(Zfo,"This class cannot be instantiated directly using "),rNe=n(Zfo,"CODE",{});var d9a=s(rNe);T7t=r(d9a,"__init__()"),d9a.forEach(t),M7t=r(Zfo," (throws an error)."),Zfo.forEach(t),E7t=i(cd),Ta=n(cd,"DIV",{class:!0});var lk=s(Ta);T(BI.$$.fragment,lk),C7t=i(lk),tNe=n(lk,"P",{});var m9a=s(tNe);w7t=r(m9a,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),m9a.forEach(t),A7t=i(lk),$f=n(lk,"P",{});var $he=s($f);L7t=r($he,`Note:
Loading a model from its configuration file does `),aNe=n($he,"STRONG",{});var c9a=s(aNe);y7t=r(c9a,"not"),c9a.forEach(t),x7t=r($he,` load the model weights. It only affects the
model\u2019s configuration. Use `),vce=n($he,"A",{href:!0});var f9a=s(vce);$7t=r(f9a,"from_pretrained()"),f9a.forEach(t),k7t=r($he," to load the model weights."),$he.forEach(t),S7t=i(lk),T(My.$$.fragment,lk),lk.forEach(t),R7t=i(cd),ct=n(cd,"DIV",{class:!0});var fd=s(ct);T(II.$$.fragment,fd),P7t=i(fd),nNe=n(fd,"P",{});var g9a=s(nNe);B7t=r(g9a,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),g9a.forEach(t),I7t=i(fd),is=n(fd,"P",{});var ik=s(is);N7t=r(ik,"The model class to instantiate is selected based on the "),sNe=n(ik,"CODE",{});var h9a=s(sNe);q7t=r(h9a,"model_type"),h9a.forEach(t),j7t=r(ik,` property of the config object (either
passed as an argument or loaded from `),lNe=n(ik,"CODE",{});var u9a=s(lNe);D7t=r(u9a,"pretrained_model_name_or_path"),u9a.forEach(t),G7t=r(ik,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iNe=n(ik,"CODE",{});var p9a=s(iNe);O7t=r(p9a,"pretrained_model_name_or_path"),p9a.forEach(t),V7t=r(ik,":"),ik.forEach(t),X7t=i(fd),Pe=n(fd,"UL",{});var Ve=s(Pe);Ey=n(Ve,"LI",{});var Llo=s(Ey);dNe=n(Llo,"STRONG",{});var _9a=s(dNe);z7t=r(_9a,"bart"),_9a.forEach(t),Q7t=r(Llo," \u2014 "),Fce=n(Llo,"A",{href:!0});var b9a=s(Fce);W7t=r(b9a,"FlaxBartForConditionalGeneration"),b9a.forEach(t),U7t=r(Llo," (BART model)"),Llo.forEach(t),H7t=i(Ve),Cy=n(Ve,"LI",{});var ylo=s(Cy);mNe=n(ylo,"STRONG",{});var v9a=s(mNe);J7t=r(v9a,"blenderbot"),v9a.forEach(t),Y7t=r(ylo," \u2014 "),Tce=n(ylo,"A",{href:!0});var F9a=s(Tce);Z7t=r(F9a,"FlaxBlenderbotForConditionalGeneration"),F9a.forEach(t),K7t=r(ylo," (Blenderbot model)"),ylo.forEach(t),e8t=i(Ve),wy=n(Ve,"LI",{});var xlo=s(wy);cNe=n(xlo,"STRONG",{});var T9a=s(cNe);o8t=r(T9a,"blenderbot-small"),T9a.forEach(t),r8t=r(xlo," \u2014 "),Mce=n(xlo,"A",{href:!0});var M9a=s(Mce);t8t=r(M9a,"FlaxBlenderbotSmallForConditionalGeneration"),M9a.forEach(t),a8t=r(xlo," (BlenderbotSmall model)"),xlo.forEach(t),n8t=i(Ve),Ay=n(Ve,"LI",{});var $lo=s(Ay);fNe=n($lo,"STRONG",{});var E9a=s(fNe);s8t=r(E9a,"encoder-decoder"),E9a.forEach(t),l8t=r($lo," \u2014 "),Ece=n($lo,"A",{href:!0});var C9a=s(Ece);i8t=r(C9a,"FlaxEncoderDecoderModel"),C9a.forEach(t),d8t=r($lo," (Encoder decoder model)"),$lo.forEach(t),m8t=i(Ve),Ly=n(Ve,"LI",{});var klo=s(Ly);gNe=n(klo,"STRONG",{});var w9a=s(gNe);c8t=r(w9a,"longt5"),w9a.forEach(t),f8t=r(klo," \u2014 "),Cce=n(klo,"A",{href:!0});var A9a=s(Cce);g8t=r(A9a,"FlaxLongT5ForConditionalGeneration"),A9a.forEach(t),h8t=r(klo," (LongT5 model)"),klo.forEach(t),u8t=i(Ve),yy=n(Ve,"LI",{});var Slo=s(yy);hNe=n(Slo,"STRONG",{});var L9a=s(hNe);p8t=r(L9a,"marian"),L9a.forEach(t),_8t=r(Slo," \u2014 "),wce=n(Slo,"A",{href:!0});var y9a=s(wce);b8t=r(y9a,"FlaxMarianMTModel"),y9a.forEach(t),v8t=r(Slo," (Marian model)"),Slo.forEach(t),F8t=i(Ve),xy=n(Ve,"LI",{});var Rlo=s(xy);uNe=n(Rlo,"STRONG",{});var x9a=s(uNe);T8t=r(x9a,"mbart"),x9a.forEach(t),M8t=r(Rlo," \u2014 "),Ace=n(Rlo,"A",{href:!0});var $9a=s(Ace);E8t=r($9a,"FlaxMBartForConditionalGeneration"),$9a.forEach(t),C8t=r(Rlo," (mBART model)"),Rlo.forEach(t),w8t=i(Ve),$y=n(Ve,"LI",{});var Plo=s($y);pNe=n(Plo,"STRONG",{});var k9a=s(pNe);A8t=r(k9a,"mt5"),k9a.forEach(t),L8t=r(Plo," \u2014 "),Lce=n(Plo,"A",{href:!0});var S9a=s(Lce);y8t=r(S9a,"FlaxMT5ForConditionalGeneration"),S9a.forEach(t),x8t=r(Plo," (MT5 model)"),Plo.forEach(t),$8t=i(Ve),ky=n(Ve,"LI",{});var Blo=s(ky);_Ne=n(Blo,"STRONG",{});var R9a=s(_Ne);k8t=r(R9a,"pegasus"),R9a.forEach(t),S8t=r(Blo," \u2014 "),yce=n(Blo,"A",{href:!0});var P9a=s(yce);R8t=r(P9a,"FlaxPegasusForConditionalGeneration"),P9a.forEach(t),P8t=r(Blo," (Pegasus model)"),Blo.forEach(t),B8t=i(Ve),Sy=n(Ve,"LI",{});var Ilo=s(Sy);bNe=n(Ilo,"STRONG",{});var B9a=s(bNe);I8t=r(B9a,"t5"),B9a.forEach(t),N8t=r(Ilo," \u2014 "),xce=n(Ilo,"A",{href:!0});var I9a=s(xce);q8t=r(I9a,"FlaxT5ForConditionalGeneration"),I9a.forEach(t),j8t=r(Ilo," (T5 model)"),Ilo.forEach(t),Ve.forEach(t),D8t=i(fd),T(Ry.$$.fragment,fd),fd.forEach(t),cd.forEach(t),ymo=i(c),kf=n(c,"H2",{class:!0});var Kfo=s(kf);Py=n(Kfo,"A",{id:!0,class:!0,href:!0});var N9a=s(Py);vNe=n(N9a,"SPAN",{});var q9a=s(vNe);T(NI.$$.fragment,q9a),q9a.forEach(t),N9a.forEach(t),G8t=i(Kfo),FNe=n(Kfo,"SPAN",{});var j9a=s(FNe);O8t=r(j9a,"FlaxAutoModelForSequenceClassification"),j9a.forEach(t),Kfo.forEach(t),xmo=i(c),Ir=n(c,"DIV",{class:!0});var gd=s(Ir);T(qI.$$.fragment,gd),V8t=i(gd),Sf=n(gd,"P",{});var khe=s(Sf);X8t=r(khe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$ce=n(khe,"A",{href:!0});var D9a=s($ce);z8t=r(D9a,"from_pretrained()"),D9a.forEach(t),Q8t=r(khe," class method or the "),kce=n(khe,"A",{href:!0});var G9a=s(kce);W8t=r(G9a,"from_config()"),G9a.forEach(t),U8t=r(khe,` class
method.`),khe.forEach(t),H8t=i(gd),jI=n(gd,"P",{});var ego=s(jI);J8t=r(ego,"This class cannot be instantiated directly using "),TNe=n(ego,"CODE",{});var O9a=s(TNe);Y8t=r(O9a,"__init__()"),O9a.forEach(t),Z8t=r(ego," (throws an error)."),ego.forEach(t),K8t=i(gd),Ma=n(gd,"DIV",{class:!0});var dk=s(Ma);T(DI.$$.fragment,dk),eLt=i(dk),MNe=n(dk,"P",{});var V9a=s(MNe);oLt=r(V9a,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),V9a.forEach(t),rLt=i(dk),Rf=n(dk,"P",{});var She=s(Rf);tLt=r(She,`Note:
Loading a model from its configuration file does `),ENe=n(She,"STRONG",{});var X9a=s(ENe);aLt=r(X9a,"not"),X9a.forEach(t),nLt=r(She,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sce=n(She,"A",{href:!0});var z9a=s(Sce);sLt=r(z9a,"from_pretrained()"),z9a.forEach(t),lLt=r(She," to load the model weights."),She.forEach(t),iLt=i(dk),T(By.$$.fragment,dk),dk.forEach(t),dLt=i(gd),ft=n(gd,"DIV",{class:!0});var hd=s(ft);T(GI.$$.fragment,hd),mLt=i(hd),CNe=n(hd,"P",{});var Q9a=s(CNe);cLt=r(Q9a,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Q9a.forEach(t),fLt=i(hd),ds=n(hd,"P",{});var mk=s(ds);gLt=r(mk,"The model class to instantiate is selected based on the "),wNe=n(mk,"CODE",{});var W9a=s(wNe);hLt=r(W9a,"model_type"),W9a.forEach(t),uLt=r(mk,` property of the config object (either
passed as an argument or loaded from `),ANe=n(mk,"CODE",{});var U9a=s(ANe);pLt=r(U9a,"pretrained_model_name_or_path"),U9a.forEach(t),_Lt=r(mk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LNe=n(mk,"CODE",{});var H9a=s(LNe);bLt=r(H9a,"pretrained_model_name_or_path"),H9a.forEach(t),vLt=r(mk,":"),mk.forEach(t),FLt=i(hd),Be=n(hd,"UL",{});var Xe=s(Be);Iy=n(Xe,"LI",{});var Nlo=s(Iy);yNe=n(Nlo,"STRONG",{});var J9a=s(yNe);TLt=r(J9a,"albert"),J9a.forEach(t),MLt=r(Nlo," \u2014 "),Rce=n(Nlo,"A",{href:!0});var Y9a=s(Rce);ELt=r(Y9a,"FlaxAlbertForSequenceClassification"),Y9a.forEach(t),CLt=r(Nlo," (ALBERT model)"),Nlo.forEach(t),wLt=i(Xe),Ny=n(Xe,"LI",{});var qlo=s(Ny);xNe=n(qlo,"STRONG",{});var Z9a=s(xNe);ALt=r(Z9a,"bart"),Z9a.forEach(t),LLt=r(qlo," \u2014 "),Pce=n(qlo,"A",{href:!0});var K9a=s(Pce);yLt=r(K9a,"FlaxBartForSequenceClassification"),K9a.forEach(t),xLt=r(qlo," (BART model)"),qlo.forEach(t),$Lt=i(Xe),qy=n(Xe,"LI",{});var jlo=s(qy);$Ne=n(jlo,"STRONG",{});var exa=s($Ne);kLt=r(exa,"bert"),exa.forEach(t),SLt=r(jlo," \u2014 "),Bce=n(jlo,"A",{href:!0});var oxa=s(Bce);RLt=r(oxa,"FlaxBertForSequenceClassification"),oxa.forEach(t),PLt=r(jlo," (BERT model)"),jlo.forEach(t),BLt=i(Xe),jy=n(Xe,"LI",{});var Dlo=s(jy);kNe=n(Dlo,"STRONG",{});var rxa=s(kNe);ILt=r(rxa,"big_bird"),rxa.forEach(t),NLt=r(Dlo," \u2014 "),Ice=n(Dlo,"A",{href:!0});var txa=s(Ice);qLt=r(txa,"FlaxBigBirdForSequenceClassification"),txa.forEach(t),jLt=r(Dlo," (BigBird model)"),Dlo.forEach(t),DLt=i(Xe),Dy=n(Xe,"LI",{});var Glo=s(Dy);SNe=n(Glo,"STRONG",{});var axa=s(SNe);GLt=r(axa,"distilbert"),axa.forEach(t),OLt=r(Glo," \u2014 "),Nce=n(Glo,"A",{href:!0});var nxa=s(Nce);VLt=r(nxa,"FlaxDistilBertForSequenceClassification"),nxa.forEach(t),XLt=r(Glo," (DistilBERT model)"),Glo.forEach(t),zLt=i(Xe),Gy=n(Xe,"LI",{});var Olo=s(Gy);RNe=n(Olo,"STRONG",{});var sxa=s(RNe);QLt=r(sxa,"electra"),sxa.forEach(t),WLt=r(Olo," \u2014 "),qce=n(Olo,"A",{href:!0});var lxa=s(qce);ULt=r(lxa,"FlaxElectraForSequenceClassification"),lxa.forEach(t),HLt=r(Olo," (ELECTRA model)"),Olo.forEach(t),JLt=i(Xe),Oy=n(Xe,"LI",{});var Vlo=s(Oy);PNe=n(Vlo,"STRONG",{});var ixa=s(PNe);YLt=r(ixa,"mbart"),ixa.forEach(t),ZLt=r(Vlo," \u2014 "),jce=n(Vlo,"A",{href:!0});var dxa=s(jce);KLt=r(dxa,"FlaxMBartForSequenceClassification"),dxa.forEach(t),eyt=r(Vlo," (mBART model)"),Vlo.forEach(t),oyt=i(Xe),Vy=n(Xe,"LI",{});var Xlo=s(Vy);BNe=n(Xlo,"STRONG",{});var mxa=s(BNe);ryt=r(mxa,"roberta"),mxa.forEach(t),tyt=r(Xlo," \u2014 "),Dce=n(Xlo,"A",{href:!0});var cxa=s(Dce);ayt=r(cxa,"FlaxRobertaForSequenceClassification"),cxa.forEach(t),nyt=r(Xlo," (RoBERTa model)"),Xlo.forEach(t),syt=i(Xe),Xy=n(Xe,"LI",{});var zlo=s(Xy);INe=n(zlo,"STRONG",{});var fxa=s(INe);lyt=r(fxa,"roformer"),fxa.forEach(t),iyt=r(zlo," \u2014 "),Gce=n(zlo,"A",{href:!0});var gxa=s(Gce);dyt=r(gxa,"FlaxRoFormerForSequenceClassification"),gxa.forEach(t),myt=r(zlo," (RoFormer model)"),zlo.forEach(t),cyt=i(Xe),zy=n(Xe,"LI",{});var Qlo=s(zy);NNe=n(Qlo,"STRONG",{});var hxa=s(NNe);fyt=r(hxa,"xlm-roberta"),hxa.forEach(t),gyt=r(Qlo," \u2014 "),Oce=n(Qlo,"A",{href:!0});var uxa=s(Oce);hyt=r(uxa,"FlaxXLMRobertaForSequenceClassification"),uxa.forEach(t),uyt=r(Qlo," (XLM-RoBERTa model)"),Qlo.forEach(t),Xe.forEach(t),pyt=i(hd),T(Qy.$$.fragment,hd),hd.forEach(t),gd.forEach(t),$mo=i(c),Pf=n(c,"H2",{class:!0});var ogo=s(Pf);Wy=n(ogo,"A",{id:!0,class:!0,href:!0});var pxa=s(Wy);qNe=n(pxa,"SPAN",{});var _xa=s(qNe);T(OI.$$.fragment,_xa),_xa.forEach(t),pxa.forEach(t),_yt=i(ogo),jNe=n(ogo,"SPAN",{});var bxa=s(jNe);byt=r(bxa,"FlaxAutoModelForQuestionAnswering"),bxa.forEach(t),ogo.forEach(t),kmo=i(c),Nr=n(c,"DIV",{class:!0});var ud=s(Nr);T(VI.$$.fragment,ud),vyt=i(ud),Bf=n(ud,"P",{});var Rhe=s(Bf);Fyt=r(Rhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vce=n(Rhe,"A",{href:!0});var vxa=s(Vce);Tyt=r(vxa,"from_pretrained()"),vxa.forEach(t),Myt=r(Rhe," class method or the "),Xce=n(Rhe,"A",{href:!0});var Fxa=s(Xce);Eyt=r(Fxa,"from_config()"),Fxa.forEach(t),Cyt=r(Rhe,` class
method.`),Rhe.forEach(t),wyt=i(ud),XI=n(ud,"P",{});var rgo=s(XI);Ayt=r(rgo,"This class cannot be instantiated directly using "),DNe=n(rgo,"CODE",{});var Txa=s(DNe);Lyt=r(Txa,"__init__()"),Txa.forEach(t),yyt=r(rgo," (throws an error)."),rgo.forEach(t),xyt=i(ud),Ea=n(ud,"DIV",{class:!0});var ck=s(Ea);T(zI.$$.fragment,ck),$yt=i(ck),GNe=n(ck,"P",{});var Mxa=s(GNe);kyt=r(Mxa,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Mxa.forEach(t),Syt=i(ck),If=n(ck,"P",{});var Phe=s(If);Ryt=r(Phe,`Note:
Loading a model from its configuration file does `),ONe=n(Phe,"STRONG",{});var Exa=s(ONe);Pyt=r(Exa,"not"),Exa.forEach(t),Byt=r(Phe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zce=n(Phe,"A",{href:!0});var Cxa=s(zce);Iyt=r(Cxa,"from_pretrained()"),Cxa.forEach(t),Nyt=r(Phe," to load the model weights."),Phe.forEach(t),qyt=i(ck),T(Uy.$$.fragment,ck),ck.forEach(t),jyt=i(ud),gt=n(ud,"DIV",{class:!0});var pd=s(gt);T(QI.$$.fragment,pd),Dyt=i(pd),VNe=n(pd,"P",{});var wxa=s(VNe);Gyt=r(wxa,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wxa.forEach(t),Oyt=i(pd),ms=n(pd,"P",{});var fk=s(ms);Vyt=r(fk,"The model class to instantiate is selected based on the "),XNe=n(fk,"CODE",{});var Axa=s(XNe);Xyt=r(Axa,"model_type"),Axa.forEach(t),zyt=r(fk,` property of the config object (either
passed as an argument or loaded from `),zNe=n(fk,"CODE",{});var Lxa=s(zNe);Qyt=r(Lxa,"pretrained_model_name_or_path"),Lxa.forEach(t),Wyt=r(fk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QNe=n(fk,"CODE",{});var yxa=s(QNe);Uyt=r(yxa,"pretrained_model_name_or_path"),yxa.forEach(t),Hyt=r(fk,":"),fk.forEach(t),Jyt=i(pd),Ie=n(pd,"UL",{});var ze=s(Ie);Hy=n(ze,"LI",{});var Wlo=s(Hy);WNe=n(Wlo,"STRONG",{});var xxa=s(WNe);Yyt=r(xxa,"albert"),xxa.forEach(t),Zyt=r(Wlo," \u2014 "),Qce=n(Wlo,"A",{href:!0});var $xa=s(Qce);Kyt=r($xa,"FlaxAlbertForQuestionAnswering"),$xa.forEach(t),e9t=r(Wlo," (ALBERT model)"),Wlo.forEach(t),o9t=i(ze),Jy=n(ze,"LI",{});var Ulo=s(Jy);UNe=n(Ulo,"STRONG",{});var kxa=s(UNe);r9t=r(kxa,"bart"),kxa.forEach(t),t9t=r(Ulo," \u2014 "),Wce=n(Ulo,"A",{href:!0});var Sxa=s(Wce);a9t=r(Sxa,"FlaxBartForQuestionAnswering"),Sxa.forEach(t),n9t=r(Ulo," (BART model)"),Ulo.forEach(t),s9t=i(ze),Yy=n(ze,"LI",{});var Hlo=s(Yy);HNe=n(Hlo,"STRONG",{});var Rxa=s(HNe);l9t=r(Rxa,"bert"),Rxa.forEach(t),i9t=r(Hlo," \u2014 "),Uce=n(Hlo,"A",{href:!0});var Pxa=s(Uce);d9t=r(Pxa,"FlaxBertForQuestionAnswering"),Pxa.forEach(t),m9t=r(Hlo," (BERT model)"),Hlo.forEach(t),c9t=i(ze),Zy=n(ze,"LI",{});var Jlo=s(Zy);JNe=n(Jlo,"STRONG",{});var Bxa=s(JNe);f9t=r(Bxa,"big_bird"),Bxa.forEach(t),g9t=r(Jlo," \u2014 "),Hce=n(Jlo,"A",{href:!0});var Ixa=s(Hce);h9t=r(Ixa,"FlaxBigBirdForQuestionAnswering"),Ixa.forEach(t),u9t=r(Jlo," (BigBird model)"),Jlo.forEach(t),p9t=i(ze),Ky=n(ze,"LI",{});var Ylo=s(Ky);YNe=n(Ylo,"STRONG",{});var Nxa=s(YNe);_9t=r(Nxa,"distilbert"),Nxa.forEach(t),b9t=r(Ylo," \u2014 "),Jce=n(Ylo,"A",{href:!0});var qxa=s(Jce);v9t=r(qxa,"FlaxDistilBertForQuestionAnswering"),qxa.forEach(t),F9t=r(Ylo," (DistilBERT model)"),Ylo.forEach(t),T9t=i(ze),e9=n(ze,"LI",{});var Zlo=s(e9);ZNe=n(Zlo,"STRONG",{});var jxa=s(ZNe);M9t=r(jxa,"electra"),jxa.forEach(t),E9t=r(Zlo," \u2014 "),Yce=n(Zlo,"A",{href:!0});var Dxa=s(Yce);C9t=r(Dxa,"FlaxElectraForQuestionAnswering"),Dxa.forEach(t),w9t=r(Zlo," (ELECTRA model)"),Zlo.forEach(t),A9t=i(ze),o9=n(ze,"LI",{});var Klo=s(o9);KNe=n(Klo,"STRONG",{});var Gxa=s(KNe);L9t=r(Gxa,"mbart"),Gxa.forEach(t),y9t=r(Klo," \u2014 "),Zce=n(Klo,"A",{href:!0});var Oxa=s(Zce);x9t=r(Oxa,"FlaxMBartForQuestionAnswering"),Oxa.forEach(t),$9t=r(Klo," (mBART model)"),Klo.forEach(t),k9t=i(ze),r9=n(ze,"LI",{});var eio=s(r9);eqe=n(eio,"STRONG",{});var Vxa=s(eqe);S9t=r(Vxa,"roberta"),Vxa.forEach(t),R9t=r(eio," \u2014 "),Kce=n(eio,"A",{href:!0});var Xxa=s(Kce);P9t=r(Xxa,"FlaxRobertaForQuestionAnswering"),Xxa.forEach(t),B9t=r(eio," (RoBERTa model)"),eio.forEach(t),I9t=i(ze),t9=n(ze,"LI",{});var oio=s(t9);oqe=n(oio,"STRONG",{});var zxa=s(oqe);N9t=r(zxa,"roformer"),zxa.forEach(t),q9t=r(oio," \u2014 "),efe=n(oio,"A",{href:!0});var Qxa=s(efe);j9t=r(Qxa,"FlaxRoFormerForQuestionAnswering"),Qxa.forEach(t),D9t=r(oio," (RoFormer model)"),oio.forEach(t),G9t=i(ze),a9=n(ze,"LI",{});var rio=s(a9);rqe=n(rio,"STRONG",{});var Wxa=s(rqe);O9t=r(Wxa,"xlm-roberta"),Wxa.forEach(t),V9t=r(rio," \u2014 "),ofe=n(rio,"A",{href:!0});var Uxa=s(ofe);X9t=r(Uxa,"FlaxXLMRobertaForQuestionAnswering"),Uxa.forEach(t),z9t=r(rio," (XLM-RoBERTa model)"),rio.forEach(t),ze.forEach(t),Q9t=i(pd),T(n9.$$.fragment,pd),pd.forEach(t),ud.forEach(t),Smo=i(c),Nf=n(c,"H2",{class:!0});var tgo=s(Nf);s9=n(tgo,"A",{id:!0,class:!0,href:!0});var Hxa=s(s9);tqe=n(Hxa,"SPAN",{});var Jxa=s(tqe);T(WI.$$.fragment,Jxa),Jxa.forEach(t),Hxa.forEach(t),W9t=i(tgo),aqe=n(tgo,"SPAN",{});var Yxa=s(aqe);U9t=r(Yxa,"FlaxAutoModelForTokenClassification"),Yxa.forEach(t),tgo.forEach(t),Rmo=i(c),qr=n(c,"DIV",{class:!0});var _d=s(qr);T(UI.$$.fragment,_d),H9t=i(_d),qf=n(_d,"P",{});var Bhe=s(qf);J9t=r(Bhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rfe=n(Bhe,"A",{href:!0});var Zxa=s(rfe);Y9t=r(Zxa,"from_pretrained()"),Zxa.forEach(t),Z9t=r(Bhe," class method or the "),tfe=n(Bhe,"A",{href:!0});var Kxa=s(tfe);K9t=r(Kxa,"from_config()"),Kxa.forEach(t),ext=r(Bhe,` class
method.`),Bhe.forEach(t),oxt=i(_d),HI=n(_d,"P",{});var ago=s(HI);rxt=r(ago,"This class cannot be instantiated directly using "),nqe=n(ago,"CODE",{});var e$a=s(nqe);txt=r(e$a,"__init__()"),e$a.forEach(t),axt=r(ago," (throws an error)."),ago.forEach(t),nxt=i(_d),Ca=n(_d,"DIV",{class:!0});var gk=s(Ca);T(JI.$$.fragment,gk),sxt=i(gk),sqe=n(gk,"P",{});var o$a=s(sqe);lxt=r(o$a,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),o$a.forEach(t),ixt=i(gk),jf=n(gk,"P",{});var Ihe=s(jf);dxt=r(Ihe,`Note:
Loading a model from its configuration file does `),lqe=n(Ihe,"STRONG",{});var r$a=s(lqe);mxt=r(r$a,"not"),r$a.forEach(t),cxt=r(Ihe,` load the model weights. It only affects the
model\u2019s configuration. Use `),afe=n(Ihe,"A",{href:!0});var t$a=s(afe);fxt=r(t$a,"from_pretrained()"),t$a.forEach(t),gxt=r(Ihe," to load the model weights."),Ihe.forEach(t),hxt=i(gk),T(l9.$$.fragment,gk),gk.forEach(t),uxt=i(_d),ht=n(_d,"DIV",{class:!0});var bd=s(ht);T(YI.$$.fragment,bd),pxt=i(bd),iqe=n(bd,"P",{});var a$a=s(iqe);_xt=r(a$a,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),a$a.forEach(t),bxt=i(bd),cs=n(bd,"P",{});var hk=s(cs);vxt=r(hk,"The model class to instantiate is selected based on the "),dqe=n(hk,"CODE",{});var n$a=s(dqe);Fxt=r(n$a,"model_type"),n$a.forEach(t),Txt=r(hk,` property of the config object (either
passed as an argument or loaded from `),mqe=n(hk,"CODE",{});var s$a=s(mqe);Mxt=r(s$a,"pretrained_model_name_or_path"),s$a.forEach(t),Ext=r(hk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cqe=n(hk,"CODE",{});var l$a=s(cqe);Cxt=r(l$a,"pretrained_model_name_or_path"),l$a.forEach(t),wxt=r(hk,":"),hk.forEach(t),Axt=i(bd),We=n(bd,"UL",{});var So=s(We);i9=n(So,"LI",{});var tio=s(i9);fqe=n(tio,"STRONG",{});var i$a=s(fqe);Lxt=r(i$a,"albert"),i$a.forEach(t),yxt=r(tio," \u2014 "),nfe=n(tio,"A",{href:!0});var d$a=s(nfe);xxt=r(d$a,"FlaxAlbertForTokenClassification"),d$a.forEach(t),$xt=r(tio," (ALBERT model)"),tio.forEach(t),kxt=i(So),d9=n(So,"LI",{});var aio=s(d9);gqe=n(aio,"STRONG",{});var m$a=s(gqe);Sxt=r(m$a,"bert"),m$a.forEach(t),Rxt=r(aio," \u2014 "),sfe=n(aio,"A",{href:!0});var c$a=s(sfe);Pxt=r(c$a,"FlaxBertForTokenClassification"),c$a.forEach(t),Bxt=r(aio," (BERT model)"),aio.forEach(t),Ixt=i(So),m9=n(So,"LI",{});var nio=s(m9);hqe=n(nio,"STRONG",{});var f$a=s(hqe);Nxt=r(f$a,"big_bird"),f$a.forEach(t),qxt=r(nio," \u2014 "),lfe=n(nio,"A",{href:!0});var g$a=s(lfe);jxt=r(g$a,"FlaxBigBirdForTokenClassification"),g$a.forEach(t),Dxt=r(nio," (BigBird model)"),nio.forEach(t),Gxt=i(So),c9=n(So,"LI",{});var sio=s(c9);uqe=n(sio,"STRONG",{});var h$a=s(uqe);Oxt=r(h$a,"distilbert"),h$a.forEach(t),Vxt=r(sio," \u2014 "),ife=n(sio,"A",{href:!0});var u$a=s(ife);Xxt=r(u$a,"FlaxDistilBertForTokenClassification"),u$a.forEach(t),zxt=r(sio," (DistilBERT model)"),sio.forEach(t),Qxt=i(So),f9=n(So,"LI",{});var lio=s(f9);pqe=n(lio,"STRONG",{});var p$a=s(pqe);Wxt=r(p$a,"electra"),p$a.forEach(t),Uxt=r(lio," \u2014 "),dfe=n(lio,"A",{href:!0});var _$a=s(dfe);Hxt=r(_$a,"FlaxElectraForTokenClassification"),_$a.forEach(t),Jxt=r(lio," (ELECTRA model)"),lio.forEach(t),Yxt=i(So),g9=n(So,"LI",{});var iio=s(g9);_qe=n(iio,"STRONG",{});var b$a=s(_qe);Zxt=r(b$a,"roberta"),b$a.forEach(t),Kxt=r(iio," \u2014 "),mfe=n(iio,"A",{href:!0});var v$a=s(mfe);e$t=r(v$a,"FlaxRobertaForTokenClassification"),v$a.forEach(t),o$t=r(iio," (RoBERTa model)"),iio.forEach(t),r$t=i(So),h9=n(So,"LI",{});var dio=s(h9);bqe=n(dio,"STRONG",{});var F$a=s(bqe);t$t=r(F$a,"roformer"),F$a.forEach(t),a$t=r(dio," \u2014 "),cfe=n(dio,"A",{href:!0});var T$a=s(cfe);n$t=r(T$a,"FlaxRoFormerForTokenClassification"),T$a.forEach(t),s$t=r(dio," (RoFormer model)"),dio.forEach(t),l$t=i(So),u9=n(So,"LI",{});var mio=s(u9);vqe=n(mio,"STRONG",{});var M$a=s(vqe);i$t=r(M$a,"xlm-roberta"),M$a.forEach(t),d$t=r(mio," \u2014 "),ffe=n(mio,"A",{href:!0});var E$a=s(ffe);m$t=r(E$a,"FlaxXLMRobertaForTokenClassification"),E$a.forEach(t),c$t=r(mio," (XLM-RoBERTa model)"),mio.forEach(t),So.forEach(t),f$t=i(bd),T(p9.$$.fragment,bd),bd.forEach(t),_d.forEach(t),Pmo=i(c),Df=n(c,"H2",{class:!0});var ngo=s(Df);_9=n(ngo,"A",{id:!0,class:!0,href:!0});var C$a=s(_9);Fqe=n(C$a,"SPAN",{});var w$a=s(Fqe);T(ZI.$$.fragment,w$a),w$a.forEach(t),C$a.forEach(t),g$t=i(ngo),Tqe=n(ngo,"SPAN",{});var A$a=s(Tqe);h$t=r(A$a,"FlaxAutoModelForMultipleChoice"),A$a.forEach(t),ngo.forEach(t),Bmo=i(c),jr=n(c,"DIV",{class:!0});var vd=s(jr);T(KI.$$.fragment,vd),u$t=i(vd),Gf=n(vd,"P",{});var Nhe=s(Gf);p$t=r(Nhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gfe=n(Nhe,"A",{href:!0});var L$a=s(gfe);_$t=r(L$a,"from_pretrained()"),L$a.forEach(t),b$t=r(Nhe," class method or the "),hfe=n(Nhe,"A",{href:!0});var y$a=s(hfe);v$t=r(y$a,"from_config()"),y$a.forEach(t),F$t=r(Nhe,` class
method.`),Nhe.forEach(t),T$t=i(vd),eN=n(vd,"P",{});var sgo=s(eN);M$t=r(sgo,"This class cannot be instantiated directly using "),Mqe=n(sgo,"CODE",{});var x$a=s(Mqe);E$t=r(x$a,"__init__()"),x$a.forEach(t),C$t=r(sgo," (throws an error)."),sgo.forEach(t),w$t=i(vd),wa=n(vd,"DIV",{class:!0});var uk=s(wa);T(oN.$$.fragment,uk),A$t=i(uk),Eqe=n(uk,"P",{});var $$a=s(Eqe);L$t=r($$a,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$$a.forEach(t),y$t=i(uk),Of=n(uk,"P",{});var qhe=s(Of);x$t=r(qhe,`Note:
Loading a model from its configuration file does `),Cqe=n(qhe,"STRONG",{});var k$a=s(Cqe);$$t=r(k$a,"not"),k$a.forEach(t),k$t=r(qhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ufe=n(qhe,"A",{href:!0});var S$a=s(ufe);S$t=r(S$a,"from_pretrained()"),S$a.forEach(t),R$t=r(qhe," to load the model weights."),qhe.forEach(t),P$t=i(uk),T(b9.$$.fragment,uk),uk.forEach(t),B$t=i(vd),ut=n(vd,"DIV",{class:!0});var Fd=s(ut);T(rN.$$.fragment,Fd),I$t=i(Fd),wqe=n(Fd,"P",{});var R$a=s(wqe);N$t=r(R$a,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),R$a.forEach(t),q$t=i(Fd),fs=n(Fd,"P",{});var pk=s(fs);j$t=r(pk,"The model class to instantiate is selected based on the "),Aqe=n(pk,"CODE",{});var P$a=s(Aqe);D$t=r(P$a,"model_type"),P$a.forEach(t),G$t=r(pk,` property of the config object (either
passed as an argument or loaded from `),Lqe=n(pk,"CODE",{});var B$a=s(Lqe);O$t=r(B$a,"pretrained_model_name_or_path"),B$a.forEach(t),V$t=r(pk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yqe=n(pk,"CODE",{});var I$a=s(yqe);X$t=r(I$a,"pretrained_model_name_or_path"),I$a.forEach(t),z$t=r(pk,":"),pk.forEach(t),Q$t=i(Fd),Ue=n(Fd,"UL",{});var Ro=s(Ue);v9=n(Ro,"LI",{});var cio=s(v9);xqe=n(cio,"STRONG",{});var N$a=s(xqe);W$t=r(N$a,"albert"),N$a.forEach(t),U$t=r(cio," \u2014 "),pfe=n(cio,"A",{href:!0});var q$a=s(pfe);H$t=r(q$a,"FlaxAlbertForMultipleChoice"),q$a.forEach(t),J$t=r(cio," (ALBERT model)"),cio.forEach(t),Y$t=i(Ro),F9=n(Ro,"LI",{});var fio=s(F9);$qe=n(fio,"STRONG",{});var j$a=s($qe);Z$t=r(j$a,"bert"),j$a.forEach(t),K$t=r(fio," \u2014 "),_fe=n(fio,"A",{href:!0});var D$a=s(_fe);ekt=r(D$a,"FlaxBertForMultipleChoice"),D$a.forEach(t),okt=r(fio," (BERT model)"),fio.forEach(t),rkt=i(Ro),T9=n(Ro,"LI",{});var gio=s(T9);kqe=n(gio,"STRONG",{});var G$a=s(kqe);tkt=r(G$a,"big_bird"),G$a.forEach(t),akt=r(gio," \u2014 "),bfe=n(gio,"A",{href:!0});var O$a=s(bfe);nkt=r(O$a,"FlaxBigBirdForMultipleChoice"),O$a.forEach(t),skt=r(gio," (BigBird model)"),gio.forEach(t),lkt=i(Ro),M9=n(Ro,"LI",{});var hio=s(M9);Sqe=n(hio,"STRONG",{});var V$a=s(Sqe);ikt=r(V$a,"distilbert"),V$a.forEach(t),dkt=r(hio," \u2014 "),vfe=n(hio,"A",{href:!0});var X$a=s(vfe);mkt=r(X$a,"FlaxDistilBertForMultipleChoice"),X$a.forEach(t),ckt=r(hio," (DistilBERT model)"),hio.forEach(t),fkt=i(Ro),E9=n(Ro,"LI",{});var uio=s(E9);Rqe=n(uio,"STRONG",{});var z$a=s(Rqe);gkt=r(z$a,"electra"),z$a.forEach(t),hkt=r(uio," \u2014 "),Ffe=n(uio,"A",{href:!0});var Q$a=s(Ffe);ukt=r(Q$a,"FlaxElectraForMultipleChoice"),Q$a.forEach(t),pkt=r(uio," (ELECTRA model)"),uio.forEach(t),_kt=i(Ro),C9=n(Ro,"LI",{});var pio=s(C9);Pqe=n(pio,"STRONG",{});var W$a=s(Pqe);bkt=r(W$a,"roberta"),W$a.forEach(t),vkt=r(pio," \u2014 "),Tfe=n(pio,"A",{href:!0});var U$a=s(Tfe);Fkt=r(U$a,"FlaxRobertaForMultipleChoice"),U$a.forEach(t),Tkt=r(pio," (RoBERTa model)"),pio.forEach(t),Mkt=i(Ro),w9=n(Ro,"LI",{});var _io=s(w9);Bqe=n(_io,"STRONG",{});var H$a=s(Bqe);Ekt=r(H$a,"roformer"),H$a.forEach(t),Ckt=r(_io," \u2014 "),Mfe=n(_io,"A",{href:!0});var J$a=s(Mfe);wkt=r(J$a,"FlaxRoFormerForMultipleChoice"),J$a.forEach(t),Akt=r(_io," (RoFormer model)"),_io.forEach(t),Lkt=i(Ro),A9=n(Ro,"LI",{});var bio=s(A9);Iqe=n(bio,"STRONG",{});var Y$a=s(Iqe);ykt=r(Y$a,"xlm-roberta"),Y$a.forEach(t),xkt=r(bio," \u2014 "),Efe=n(bio,"A",{href:!0});var Z$a=s(Efe);$kt=r(Z$a,"FlaxXLMRobertaForMultipleChoice"),Z$a.forEach(t),kkt=r(bio," (XLM-RoBERTa model)"),bio.forEach(t),Ro.forEach(t),Skt=i(Fd),T(L9.$$.fragment,Fd),Fd.forEach(t),vd.forEach(t),Imo=i(c),Vf=n(c,"H2",{class:!0});var lgo=s(Vf);y9=n(lgo,"A",{id:!0,class:!0,href:!0});var K$a=s(y9);Nqe=n(K$a,"SPAN",{});var eka=s(Nqe);T(tN.$$.fragment,eka),eka.forEach(t),K$a.forEach(t),Rkt=i(lgo),qqe=n(lgo,"SPAN",{});var oka=s(qqe);Pkt=r(oka,"FlaxAutoModelForNextSentencePrediction"),oka.forEach(t),lgo.forEach(t),Nmo=i(c),Dr=n(c,"DIV",{class:!0});var Td=s(Dr);T(aN.$$.fragment,Td),Bkt=i(Td),Xf=n(Td,"P",{});var jhe=s(Xf);Ikt=r(jhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Cfe=n(jhe,"A",{href:!0});var rka=s(Cfe);Nkt=r(rka,"from_pretrained()"),rka.forEach(t),qkt=r(jhe," class method or the "),wfe=n(jhe,"A",{href:!0});var tka=s(wfe);jkt=r(tka,"from_config()"),tka.forEach(t),Dkt=r(jhe,` class
method.`),jhe.forEach(t),Gkt=i(Td),nN=n(Td,"P",{});var igo=s(nN);Okt=r(igo,"This class cannot be instantiated directly using "),jqe=n(igo,"CODE",{});var aka=s(jqe);Vkt=r(aka,"__init__()"),aka.forEach(t),Xkt=r(igo," (throws an error)."),igo.forEach(t),zkt=i(Td),Aa=n(Td,"DIV",{class:!0});var _k=s(Aa);T(sN.$$.fragment,_k),Qkt=i(_k),Dqe=n(_k,"P",{});var nka=s(Dqe);Wkt=r(nka,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nka.forEach(t),Ukt=i(_k),zf=n(_k,"P",{});var Dhe=s(zf);Hkt=r(Dhe,`Note:
Loading a model from its configuration file does `),Gqe=n(Dhe,"STRONG",{});var ska=s(Gqe);Jkt=r(ska,"not"),ska.forEach(t),Ykt=r(Dhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Afe=n(Dhe,"A",{href:!0});var lka=s(Afe);Zkt=r(lka,"from_pretrained()"),lka.forEach(t),Kkt=r(Dhe," to load the model weights."),Dhe.forEach(t),eSt=i(_k),T(x9.$$.fragment,_k),_k.forEach(t),oSt=i(Td),pt=n(Td,"DIV",{class:!0});var Md=s(pt);T(lN.$$.fragment,Md),rSt=i(Md),Oqe=n(Md,"P",{});var ika=s(Oqe);tSt=r(ika,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ika.forEach(t),aSt=i(Md),gs=n(Md,"P",{});var bk=s(gs);nSt=r(bk,"The model class to instantiate is selected based on the "),Vqe=n(bk,"CODE",{});var dka=s(Vqe);sSt=r(dka,"model_type"),dka.forEach(t),lSt=r(bk,` property of the config object (either
passed as an argument or loaded from `),Xqe=n(bk,"CODE",{});var mka=s(Xqe);iSt=r(mka,"pretrained_model_name_or_path"),mka.forEach(t),dSt=r(bk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zqe=n(bk,"CODE",{});var cka=s(zqe);mSt=r(cka,"pretrained_model_name_or_path"),cka.forEach(t),cSt=r(bk,":"),bk.forEach(t),fSt=i(Md),Qqe=n(Md,"UL",{});var fka=s(Qqe);$9=n(fka,"LI",{});var vio=s($9);Wqe=n(vio,"STRONG",{});var gka=s(Wqe);gSt=r(gka,"bert"),gka.forEach(t),hSt=r(vio," \u2014 "),Lfe=n(vio,"A",{href:!0});var hka=s(Lfe);uSt=r(hka,"FlaxBertForNextSentencePrediction"),hka.forEach(t),pSt=r(vio," (BERT model)"),vio.forEach(t),fka.forEach(t),_St=i(Md),T(k9.$$.fragment,Md),Md.forEach(t),Td.forEach(t),qmo=i(c),Qf=n(c,"H2",{class:!0});var dgo=s(Qf);S9=n(dgo,"A",{id:!0,class:!0,href:!0});var uka=s(S9);Uqe=n(uka,"SPAN",{});var pka=s(Uqe);T(iN.$$.fragment,pka),pka.forEach(t),uka.forEach(t),bSt=i(dgo),Hqe=n(dgo,"SPAN",{});var _ka=s(Hqe);vSt=r(_ka,"FlaxAutoModelForImageClassification"),_ka.forEach(t),dgo.forEach(t),jmo=i(c),Gr=n(c,"DIV",{class:!0});var Ed=s(Gr);T(dN.$$.fragment,Ed),FSt=i(Ed),Wf=n(Ed,"P",{});var Ghe=s(Wf);TSt=r(Ghe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yfe=n(Ghe,"A",{href:!0});var bka=s(yfe);MSt=r(bka,"from_pretrained()"),bka.forEach(t),ESt=r(Ghe," class method or the "),xfe=n(Ghe,"A",{href:!0});var vka=s(xfe);CSt=r(vka,"from_config()"),vka.forEach(t),wSt=r(Ghe,` class
method.`),Ghe.forEach(t),ASt=i(Ed),mN=n(Ed,"P",{});var mgo=s(mN);LSt=r(mgo,"This class cannot be instantiated directly using "),Jqe=n(mgo,"CODE",{});var Fka=s(Jqe);ySt=r(Fka,"__init__()"),Fka.forEach(t),xSt=r(mgo," (throws an error)."),mgo.forEach(t),$St=i(Ed),La=n(Ed,"DIV",{class:!0});var vk=s(La);T(cN.$$.fragment,vk),kSt=i(vk),Yqe=n(vk,"P",{});var Tka=s(Yqe);SSt=r(Tka,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Tka.forEach(t),RSt=i(vk),Uf=n(vk,"P",{});var Ohe=s(Uf);PSt=r(Ohe,`Note:
Loading a model from its configuration file does `),Zqe=n(Ohe,"STRONG",{});var Mka=s(Zqe);BSt=r(Mka,"not"),Mka.forEach(t),ISt=r(Ohe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$fe=n(Ohe,"A",{href:!0});var Eka=s($fe);NSt=r(Eka,"from_pretrained()"),Eka.forEach(t),qSt=r(Ohe," to load the model weights."),Ohe.forEach(t),jSt=i(vk),T(R9.$$.fragment,vk),vk.forEach(t),DSt=i(Ed),_t=n(Ed,"DIV",{class:!0});var Cd=s(_t);T(fN.$$.fragment,Cd),GSt=i(Cd),Kqe=n(Cd,"P",{});var Cka=s(Kqe);OSt=r(Cka,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Cka.forEach(t),VSt=i(Cd),hs=n(Cd,"P",{});var Fk=s(hs);XSt=r(Fk,"The model class to instantiate is selected based on the "),eje=n(Fk,"CODE",{});var wka=s(eje);zSt=r(wka,"model_type"),wka.forEach(t),QSt=r(Fk,` property of the config object (either
passed as an argument or loaded from `),oje=n(Fk,"CODE",{});var Aka=s(oje);WSt=r(Aka,"pretrained_model_name_or_path"),Aka.forEach(t),USt=r(Fk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rje=n(Fk,"CODE",{});var Lka=s(rje);HSt=r(Lka,"pretrained_model_name_or_path"),Lka.forEach(t),JSt=r(Fk,":"),Fk.forEach(t),YSt=i(Cd),gN=n(Cd,"UL",{});var cgo=s(gN);P9=n(cgo,"LI",{});var Fio=s(P9);tje=n(Fio,"STRONG",{});var yka=s(tje);ZSt=r(yka,"beit"),yka.forEach(t),KSt=r(Fio," \u2014 "),kfe=n(Fio,"A",{href:!0});var xka=s(kfe);eRt=r(xka,"FlaxBeitForImageClassification"),xka.forEach(t),oRt=r(Fio," (BEiT model)"),Fio.forEach(t),rRt=i(cgo),B9=n(cgo,"LI",{});var Tio=s(B9);aje=n(Tio,"STRONG",{});var $ka=s(aje);tRt=r($ka,"vit"),$ka.forEach(t),aRt=r(Tio," \u2014 "),Sfe=n(Tio,"A",{href:!0});var kka=s(Sfe);nRt=r(kka,"FlaxViTForImageClassification"),kka.forEach(t),sRt=r(Tio," (ViT model)"),Tio.forEach(t),cgo.forEach(t),lRt=i(Cd),T(I9.$$.fragment,Cd),Cd.forEach(t),Ed.forEach(t),Dmo=i(c),Hf=n(c,"H2",{class:!0});var fgo=s(Hf);N9=n(fgo,"A",{id:!0,class:!0,href:!0});var Ska=s(N9);nje=n(Ska,"SPAN",{});var Rka=s(nje);T(hN.$$.fragment,Rka),Rka.forEach(t),Ska.forEach(t),iRt=i(fgo),sje=n(fgo,"SPAN",{});var Pka=s(sje);dRt=r(Pka,"FlaxAutoModelForVision2Seq"),Pka.forEach(t),fgo.forEach(t),Gmo=i(c),Or=n(c,"DIV",{class:!0});var wd=s(Or);T(uN.$$.fragment,wd),mRt=i(wd),Jf=n(wd,"P",{});var Vhe=s(Jf);cRt=r(Vhe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Rfe=n(Vhe,"A",{href:!0});var Bka=s(Rfe);fRt=r(Bka,"from_pretrained()"),Bka.forEach(t),gRt=r(Vhe," class method or the "),Pfe=n(Vhe,"A",{href:!0});var Ika=s(Pfe);hRt=r(Ika,"from_config()"),Ika.forEach(t),uRt=r(Vhe,` class
method.`),Vhe.forEach(t),pRt=i(wd),pN=n(wd,"P",{});var ggo=s(pN);_Rt=r(ggo,"This class cannot be instantiated directly using "),lje=n(ggo,"CODE",{});var Nka=s(lje);bRt=r(Nka,"__init__()"),Nka.forEach(t),vRt=r(ggo," (throws an error)."),ggo.forEach(t),FRt=i(wd),ya=n(wd,"DIV",{class:!0});var Tk=s(ya);T(_N.$$.fragment,Tk),TRt=i(Tk),ije=n(Tk,"P",{});var qka=s(ije);MRt=r(qka,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qka.forEach(t),ERt=i(Tk),Yf=n(Tk,"P",{});var Xhe=s(Yf);CRt=r(Xhe,`Note:
Loading a model from its configuration file does `),dje=n(Xhe,"STRONG",{});var jka=s(dje);wRt=r(jka,"not"),jka.forEach(t),ARt=r(Xhe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bfe=n(Xhe,"A",{href:!0});var Dka=s(Bfe);LRt=r(Dka,"from_pretrained()"),Dka.forEach(t),yRt=r(Xhe," to load the model weights."),Xhe.forEach(t),xRt=i(Tk),T(q9.$$.fragment,Tk),Tk.forEach(t),$Rt=i(wd),bt=n(wd,"DIV",{class:!0});var Ad=s(bt);T(bN.$$.fragment,Ad),kRt=i(Ad),mje=n(Ad,"P",{});var Gka=s(mje);SRt=r(Gka,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Gka.forEach(t),RRt=i(Ad),us=n(Ad,"P",{});var Mk=s(us);PRt=r(Mk,"The model class to instantiate is selected based on the "),cje=n(Mk,"CODE",{});var Oka=s(cje);BRt=r(Oka,"model_type"),Oka.forEach(t),IRt=r(Mk,` property of the config object (either
passed as an argument or loaded from `),fje=n(Mk,"CODE",{});var Vka=s(fje);NRt=r(Vka,"pretrained_model_name_or_path"),Vka.forEach(t),qRt=r(Mk,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gje=n(Mk,"CODE",{});var Xka=s(gje);jRt=r(Xka,"pretrained_model_name_or_path"),Xka.forEach(t),DRt=r(Mk,":"),Mk.forEach(t),GRt=i(Ad),hje=n(Ad,"UL",{});var zka=s(hje);j9=n(zka,"LI",{});var Mio=s(j9);uje=n(Mio,"STRONG",{});var Qka=s(uje);ORt=r(Qka,"vision-encoder-decoder"),Qka.forEach(t),VRt=r(Mio," \u2014 "),Ife=n(Mio,"A",{href:!0});var Wka=s(Ife);XRt=r(Wka,"FlaxVisionEncoderDecoderModel"),Wka.forEach(t),zRt=r(Mio," (Vision Encoder decoder model)"),Mio.forEach(t),zka.forEach(t),QRt=i(Ad),T(D9.$$.fragment,Ad),Ad.forEach(t),wd.forEach(t),this.h()},h(){d(g,"name","hf:doc:metadata"),d(g,"content",JSON.stringify(gPa)),d(f,"id","auto-classes"),d(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f,"href","#auto-classes"),d(u,"class","relative group"),d(_s,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),d(vs,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),d(Fs,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),d(Rd,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(ng,"id","extending-the-auto-classes"),d(ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ng,"href","#extending-the-auto-classes"),d(Pd,"class","relative group"),d(lg,"id","transformers.AutoConfig"),d(lg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lg,"href","#transformers.AutoConfig"),d(Bd,"class","relative group"),d(ej,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(oj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),d(rj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(tj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),d(aj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),d(nj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(sj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),d(lj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(ij,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(dj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(mj,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),d(cj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),d(fj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),d(gj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),d(hj,"href","/docs/transformers/main/en/model_doc/clipseg#transformers.CLIPSegConfig"),d(uj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),d(pj,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig"),d(_j,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),d(bj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),d(vj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),d(Fj,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),d(Tj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(Mj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(Ej,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(Cj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),d(wj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(Aj,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(Lj,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"),d(yj,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),d(xj,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),d($j,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),d(kj,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),d(Sj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),d(Rj,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),d(Pj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),d(Bj,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(Ij,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig"),d(Nj,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig"),d(qj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),d(jj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),d(Dj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),d(Gj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),d(Oj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),d(Vj,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),d(Xj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),d(zj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(Qj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),d(Wj,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig"),d(Uj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),d(Hj,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),d(Jj,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),d(Yj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),d(Zj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(Kj,"href","/docs/transformers/main/en/model_doc/jukebox#transformers.JukeboxConfig"),d(eD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(oD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(rD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),d(tD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),d(aD,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),d(nD,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltConfig"),d(sD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),d(lD,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),d(iD,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),d(dD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),d(mD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),d(cD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),d(fD,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig"),d(gD,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(hD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),d(uD,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),d(pD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(_D,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(bD,"href","/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config"),d(vD,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),d(FD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),d(TD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),d(MD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),d(ED,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),d(CD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(wD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(AD,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),d(LD,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),d(yD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),d(xD,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig"),d($D,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),d(kD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),d(SD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(RD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(PD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(BD,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),d(ID,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),d(ND,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),d(qD,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),d(jD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),d(DD,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),d(GD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),d(OD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),d(VD,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertConfig"),d(XD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),d(zD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),d(QD,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),d(WD,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),d(UD,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(HD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(JD,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(YD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),d(ZD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(KD,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),d(eG,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),d(oG,"href","/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersConfig"),d(rG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),d(tG,"href","/docs/transformers/main/en/model_doc/table-transformer#transformers.TableTransformerConfig"),d(aG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),d(nG,"href","/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerConfig"),d(sG,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),d(lG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(iG,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),d(dG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(mG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(cG,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),d(fG,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),d(gG,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),d(hG,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(uG,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(pG,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(_G,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),d(bG,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(vG,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig"),d(FG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(TG,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),d(MG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),d(EG,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperConfig"),d(CG,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig"),d(wG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),d(AG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),d(LG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(yG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(xG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d($G,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),d(kG,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),d(SG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ou,"id","transformers.AutoTokenizer"),d(Ou,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ou,"href","#transformers.AutoTokenizer"),d(Nd,"class","relative group"),d(RG,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(PG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(BG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(IG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),d(NG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),d(qG,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),d(jG,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(DG,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(GG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(OG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(VG,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(XG,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(zG,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(QG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(WG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(UG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(HG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(JG,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(YG,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(ZG,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(KG,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),d(eO,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(oO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),d(rO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(tO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),d(aO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(nO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(sO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(lO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(iO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),d(dO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),d(mO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(cO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(fO,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),d(gO,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),d(hO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(uO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(pO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(_O,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),d(bO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(vO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(FO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(TO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(MO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(EO,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(CO,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(wO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),d(AO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(LO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(yO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(xO,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmTokenizer"),d($O,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(kO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),d(SO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(RO,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(PO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),d(BO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(IO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(NO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(qO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(jO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(DO,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),d(GO,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseTokenizer"),d(OO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(VO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(XO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(zO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(QO,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),d(WO,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(UO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(HO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(JO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(YO,"href","/docs/transformers/main/en/model_doc/jukebox#transformers.JukeboxTokenizer"),d(ZO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(KO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(eV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(oV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(rV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),d(tV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),d(aV,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(nV,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(sV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),d(lV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),d(iV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),d(dV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),d(mV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),d(cV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(fV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(gV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(hV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),d(uV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(pV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(_V,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(bV,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),d(vV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),d(FV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(TV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(MV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(EV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(CV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(wV,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),d(AV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(LV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(yV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(xV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d($V,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(kV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(SV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),d(RV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),d(PV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(BV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(IV,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),d(NV,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),d(qV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(jV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(DV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(GV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(OV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(VV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(XV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(zV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(QV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(WV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(UV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(HV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(JV,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),d(YV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),d(ZV,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(KV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(eX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(oX,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),d(rX,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),d(tX,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),d(aX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),d(nX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(sX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),d(lX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(iX,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(dX,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(mX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(cX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(fX,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertTokenizer"),d(gX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(hX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(uX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(pX,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(_X,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),d(bX,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(vX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(FX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(TX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(MX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(EX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(CX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(wX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),d(AX,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),d(LX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(yX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(xX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d($X,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(kX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(SX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(RX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(PX,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(BX,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperTokenizer"),d(IX,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(NX,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(qX,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),d(jX,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(DX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),d(GX,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(OX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(VX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(XX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(zX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(QX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(WX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(UX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(HX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xp,"id","transformers.AutoFeatureExtractor"),d(xp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xp,"href","#transformers.AutoFeatureExtractor"),d(qd,"class","relative group"),d(JX,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(YX,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitImageProcessor"),d(ZX,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPImageProcessor"),d(KX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(ez,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor"),d(oz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(rz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(tz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(az,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitImageProcessor"),d(nz,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrFeatureExtractor"),d(sz,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTImageProcessor"),d(lz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(iz,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),d(dz,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTImageProcessor"),d(mz,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaImageProcessor"),d(cz,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNImageProcessor"),d(fz,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPImageProcessor"),d(gz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(hz,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTImageProcessor"),d(uz,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ImageProcessor"),d(pz,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ImageProcessor"),d(_z,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitImageProcessor"),d(bz,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(vz,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),d(Fz,"href","/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2ImageProcessor"),d(Tz,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTImageProcessor"),d(Mz,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(Ez,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverImageProcessor"),d(Cz,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerImageProcessor"),d(wz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(Az,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(Lz,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerImageProcessor"),d(yz,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(xz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d($z,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(kz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(Sz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(Rz,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEImageProcessor"),d(Pz,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltImageProcessor"),d(Bz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(Iz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(Nz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(qz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(jz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Dz,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperFeatureExtractor"),d(Gz,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPImageProcessor"),d(Oz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w_,"id","transformers.AutoImageProcessor"),d(w_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w_,"href","#transformers.AutoImageProcessor"),d(jd,"class","relative group"),d(Vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoImageProcessor.from_pretrained"),d(Xz,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitImageProcessor"),d(zz,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPImageProcessor"),d(Qz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(Wz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(Uz,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitImageProcessor"),d(Hz,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTImageProcessor"),d(Jz,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTImageProcessor"),d(Yz,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaImageProcessor"),d(Zz,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNImageProcessor"),d(Kz,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPImageProcessor"),d(eQ,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTImageProcessor"),d(oQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ImageProcessor"),d(rQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ImageProcessor"),d(tQ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitImageProcessor"),d(aQ,"href","/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2ImageProcessor"),d(nQ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTImageProcessor"),d(sQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverImageProcessor"),d(lQ,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerImageProcessor"),d(iQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(dQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(mQ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerImageProcessor"),d(cQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(fQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(gQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextImageProcessor"),d(hQ,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEImageProcessor"),d(uQ,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltImageProcessor"),d(pQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(_Q,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(bQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTImageProcessor"),d(vQ,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPImageProcessor"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a1,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n1,"id","transformers.AutoProcessor"),d(n1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n1,"href","#transformers.AutoProcessor"),d(Dd,"class","relative group"),d(FQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(TQ,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(MQ,"href","/docs/transformers/main/en/model_doc/clipseg#transformers.CLIPSegProcessor"),d(EQ,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),d(CQ,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(wQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(AQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),d(LQ,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(yQ,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMProcessor"),d(xQ,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),d($Q,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(kQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(SQ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(RQ,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(PQ,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),d(BQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(IQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(NQ,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),d(qQ,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(jQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(DQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(GQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(OQ,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperProcessor"),d(VQ,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPProcessor"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k1,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S1,"id","transformers.AutoModel"),d(S1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S1,"href","#transformers.AutoModel"),d(Od,"class","relative group"),d(XQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),d(UQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),d(HQ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),d(JQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(YQ,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(ZQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),d(KQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(eW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(oW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(rW,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),d(tW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),d(aW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),d(nW,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),d(sW,"href","/docs/transformers/main/en/model_doc/clipseg#transformers.CLIPSegModel"),d(lW,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),d(iW,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel"),d(dW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),d(mW,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d(cW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),d(fW,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),d(gW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(hW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(uW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(pW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),d(_W,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(bW,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(vW,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),d(FW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),d(TW,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),d(MW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),d(EW,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),d(CW,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(wW,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),d(AW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),d(LW,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel"),d(yW,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmModel"),d(xW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),d($W,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),d(kW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),d(SW,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),d(RW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),d(PW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),d(BW,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),d(IW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),d(NW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(qW,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),d(jW,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel"),d(DW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),d(GW,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),d(OW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),d(VW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),d(XW,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(zW,"href","/docs/transformers/main/en/model_doc/jukebox#transformers.JukeboxModel"),d(QW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(WW,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(UW,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),d(HW,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),d(JW,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),d(YW,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltModel"),d(ZW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),d(KW,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),d(eU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),d(oU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),d(rU,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(tU,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),d(aU,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMModel"),d(nU,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),d(sU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),d(lU,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),d(iU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(dU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),d(mU,"href","/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model"),d(cU,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),d(fU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),d(gU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),d(hU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),d(uU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),d(pU,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(_U,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),d(bU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(vU,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),d(FU,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),d(TU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),d(MU,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel"),d(EU,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),d(CU,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),d(wU,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(AU,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(LU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),d(yU,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),d(xU,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),d($U,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),d(kU,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),d(SU,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(RU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),d(PU,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertModel"),d(BU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),d(IU,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),d(NU,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),d(qU,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),d(jU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(DU,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),d(GU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(OU,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),d(VU,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),d(XU,"href","/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersModel"),d(zU,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),d(QU,"href","/docs/transformers/main/en/model_doc/table-transformer#transformers.TableTransformerModel"),d(WU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),d(UU,"href","/docs/transformers/main/en/model_doc/time_series_transformer#transformers.TimeSeriesTransformerModel"),d(HU,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),d(JU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(YU,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),d(ZU,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(KU,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),d(eH,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),d(oH,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),d(rH,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(tH,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),d(aH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),d(nH,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(sH,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel"),d(lH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(iH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),d(dH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),d(mH,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperModel"),d(cH,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel"),d(fH,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),d(gH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),d(hH,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(uH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(pH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(_H,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),d(bH,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),d(vH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lv,"id","transformers.AutoModelForPreTraining"),d(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lv,"href","#transformers.AutoModelForPreTraining"),d(zd,"class","relative group"),d(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EH,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),d(CH,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(wH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),d(AH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(LH,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),d(yH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(xH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d($H,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(kH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(SH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(RH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(PH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),d(BH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining"),d(IH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(NH,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),d(qH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),d(jH,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(DH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(GH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(OH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(VH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(XH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(zH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),d(QH,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(WH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(UH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(HH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(JH,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(YH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),d(ZH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(KH,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(eJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(oJ,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForPreTraining"),d(rJ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),d(tJ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(aJ,"href","/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersForConditionalGeneration"),d(nJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(sJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(lJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(iJ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(dJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(mJ,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),d(cJ,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(fJ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(gJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(hJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),d(uJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(pJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(_J,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(bJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lF,"id","transformers.AutoModelForCausalLM"),d(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lF,"href","#transformers.AutoModelForCausalLM"),d(Ud,"class","relative group"),d(vJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),d(EJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),d(CJ,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(wJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(AJ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(LJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(yJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(xJ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),d($J,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(kJ,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),d(SJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(RJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(PJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),d(BJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM"),d(IJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(NJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(qJ,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),d(jJ,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM"),d(DJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(GJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),d(OJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),d(VJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(XJ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),d(zJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(QJ,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),d(WJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(UJ,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(HJ,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(JJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(YJ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(ZJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(KJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(eY,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForCausalLM"),d(oY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(rY,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(tY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(aY,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(nY,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(sY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(lY,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(iY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(dY,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(mY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eT,"id","transformers.AutoModelForDepthEstimation"),d(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eT,"href","#transformers.AutoModelForDepthEstimation"),d(Yd,"class","relative group"),d(cY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hY,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForDepthEstimation"),d(uY,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNForDepthEstimation"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sT,"id","transformers.AutoModelForMaskedLM"),d(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sT,"href","#transformers.AutoModelForMaskedLM"),d(em,"class","relative group"),d(pY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_Y,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vY,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(FY,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(TY,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),d(MY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(EY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(CY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(wY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(AY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(LY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(yY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(xY,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),d($Y,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM"),d(kY,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForMaskedLM"),d(SY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(RY,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(PY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(BY,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(IY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(NY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(qY,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),d(jY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(DY,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(GY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(OY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(VY,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(XY,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),d(zY,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(QY,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(WY,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(UY,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(HY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(JY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(YY,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForMaskedLM"),d(ZY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(KY,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(eZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(oZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(rZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(tZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(aZ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YT,"id","transformers.AutoModelForSeq2SeqLM"),d(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YT,"href","#transformers.AutoModelForSeq2SeqLM"),d(tm,"class","relative group"),d(nZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(dZ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(mZ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(cZ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(fZ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(gZ,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(hZ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(uZ,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(pZ,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(_Z,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),d(bZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(vZ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(FZ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(TZ,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(MZ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(EZ,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),d(CZ,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(wZ,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(AZ,"href","/docs/transformers/main/en/model_doc/switch_transformers#transformers.SwitchTransformersForConditionalGeneration"),d(LZ,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(yZ,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MM,"id","transformers.AutoModelForSequenceClassification"),d(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MM,"href","#transformers.AutoModelForSequenceClassification"),d(sm,"class","relative group"),d(xZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(RZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(PZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),d(BZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(IZ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(NZ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),d(qZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(jZ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(DZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(GZ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(OZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(VZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(XZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(zZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(QZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(WZ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification"),d(UZ,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForSequenceClassification"),d(HZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(JZ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(YZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(ZZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(KZ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(eK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(oK,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(rK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(tK,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(aK,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),d(nK,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),d(sK,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltForSequenceClassification"),d(lK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(iK,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),d(dK,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification"),d(mK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(cK,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(fK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(gK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(hK,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),d(uK,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),d(pK,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(_K,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(bK,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),d(vK,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(FK,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(TK,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(MK,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(EK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(CK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(wK,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForSequenceClassification"),d(AK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(LK,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(yK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(xK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d($K,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(kK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(SK,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(RK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(PK,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xE,"id","transformers.AutoModelForMultipleChoice"),d(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xE,"href","#transformers.AutoModelForMultipleChoice"),d(dm,"class","relative group"),d(BK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qK,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(jK,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),d(DK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(GK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(OK,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(VK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(XK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(zK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),d(QK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(WK,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(UK,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice"),d(HK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(JK,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(YK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(ZK,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(KK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(eee,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),d(oee,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(ree,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(tee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(aee,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),d(nee,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(see,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(lee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(iee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(dee,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForMultipleChoice"),d(mee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(cee,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(fee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(gee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(hee,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(uee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(pee,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f4,"id","transformers.AutoModelForNextSentencePrediction"),d(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f4,"href","#transformers.AutoModelForNextSentencePrediction"),d(fm,"class","relative group"),d(_ee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fee,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(Tee,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction"),d(Mee,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(Eee,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(Cee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(wee,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),d(Aee,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E4,"id","transformers.AutoModelForTokenClassification"),d(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E4,"href","#transformers.AutoModelForTokenClassification"),d(um,"class","relative group"),d(Lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($ee,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(kee,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),d(See,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Ree,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),d(Pee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(Bee,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Iee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(Nee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(qee,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(jee,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Dee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(Gee,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Oee,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification"),d(Vee,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForTokenClassification"),d(Xee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(zee,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Qee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(Wee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Uee,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Hee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Jee,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Yee,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),d(Zee,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltForTokenClassification"),d(Kee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(eoe,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),d(ooe,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification"),d(roe,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(toe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(aoe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(noe,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),d(soe,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(loe,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(ioe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(doe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(moe,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForTokenClassification"),d(coe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(foe,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(goe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(hoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(uoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(poe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(_oe,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uC,"id","transformers.AutoModelForQuestionAnswering"),d(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uC,"href","#transformers.AutoModelForQuestionAnswering"),d(bm,"class","relative group"),d(boe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(voe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Toe,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Moe,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Eoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Coe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(woe,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Aoe,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForQuestionAnswering"),d(Loe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(yoe,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(xoe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d($oe,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(koe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(Soe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Roe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Poe,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Boe,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering"),d(Ioe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(Noe,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(qoe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(joe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(Doe,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(Goe,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(Ooe,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),d(Voe,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(Xoe,"href","/docs/transformers/main/en/model_doc/lilt#transformers.LiltForQuestionAnswering"),d(zoe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(Qoe,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),d(Woe,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(Uoe,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering"),d(Hoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(Joe,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(Yoe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(Zoe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(Koe,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),d(ere,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),d(ore,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(rre,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForQuestionAnswering"),d(tre,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(are,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(nre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(sre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(lre,"href","/docs/transformers/main/en/model_doc/roc_bert#transformers.RoCBertForQuestionAnswering"),d(ire,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(dre,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(mre,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(cre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(fre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(gre,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(hre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(ure,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h3,"id","transformers.AutoModelForTableQuestionAnswering"),d(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h3,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Tm,"class","relative group"),d(pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vre,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v3,"id","transformers.AutoModelForDocumentQuestionAnswering"),d(v3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v3,"href","#transformers.AutoModelForDocumentQuestionAnswering"),d(Cm,"class","relative group"),d(Fre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ere,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering"),d(Cre,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(wre,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A3,"id","transformers.AutoModelForImageClassification"),d(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A3,"href","#transformers.AutoModelForImageClassification"),d(ym,"class","relative group"),d(Are,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xre,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),d($re,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(kre,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),d(Sre,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(Rre,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),d(Pre,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Bre,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Ire,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),d(Nre,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),d(qre,"href","/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForImageClassification"),d(jre,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),d(Dre,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(Gre,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(Ore,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Vre,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Xre,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(zre,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(Qre,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(Wre,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),d(Ure,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),d(Hre,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),d(Jre,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),d(Yre,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q3,"id","transformers.AutoModelForVideoClassification"),d(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q3,"href","#transformers.AutoModelForVideoClassification"),d(km,"class","relative group"),d(Zre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ete,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ote,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y3,"id","transformers.AutoModelForVision2Seq"),d(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y3,"href","#transformers.AutoModelForVision2Seq"),d(Pm,"class","relative group"),d(rte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ate,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nte,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(r5,"id","transformers.AutoModelForVisualQuestionAnswering"),d(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r5,"href","#transformers.AutoModelForVisualQuestionAnswering"),d(Nm,"class","relative group"),d(ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ite,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dte,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l5,"id","transformers.AutoModelForAudioClassification"),d(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l5,"href","#transformers.AutoModelForAudioClassification"),d(Dm,"class","relative group"),d(mte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gte,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(hte,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(ute,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(pte,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(_te,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(bte,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(vte,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(Fte,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),d(Tte,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F5,"id","transformers.AutoModelForAudioFrameClassification"),d(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F5,"href","#transformers.AutoModelForAudioFrameClassification"),d(Vm,"class","relative group"),d(Mte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ete,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wte,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(Ate,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(Lte,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(yte,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),d(xte,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x5,"id","transformers.AutoModelForCTC"),d(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x5,"href","#transformers.AutoModelForCTC"),d(Qm,"class","relative group"),d($te,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rte,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(Pte,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),d(Bte,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),d(Ite,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),d(Nte,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),d(qte,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(jte,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(Dte,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(Gte,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),d(Ote,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V5,"id","transformers.AutoModelForSpeechSeq2Seq"),d(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V5,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Hm,"class","relative group"),d(Vte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qte,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(Wte,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ute,"href","/docs/transformers/main/en/model_doc/whisper#transformers.WhisperForConditionalGeneration"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J5,"id","transformers.AutoModelForAudioXVector"),d(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J5,"href","#transformers.AutoModelForAudioXVector"),d(Km,"class","relative group"),d(Hte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Yte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zte,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(Kte,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(eae,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(oae,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),d(rae,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n0,"id","transformers.AutoModelForMaskedImageModeling"),d(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n0,"href","#transformers.AutoModelForMaskedImageModeling"),d(rc,"class","relative group"),d(tae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sae,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(lae,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(iae,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),d(dae,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(g0,"id","transformers.AutoModelForObjectDetection"),d(g0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g0,"href","#transformers.AutoModelForObjectDetection"),d(nc,"class","relative group"),d(mae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gae,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection"),d(hae,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),d(uae,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),d(pae,"href","/docs/transformers/main/en/model_doc/table-transformer#transformers.TableTransformerForObjectDetection"),d(_ae,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M0,"id","transformers.AutoModelForImageSegmentation"),d(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M0,"href","#transformers.AutoModelForImageSegmentation"),d(ic,"class","relative group"),d(bae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tae,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L0,"id","transformers.AutoModelForSemanticSegmentation"),d(L0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L0,"href","#transformers.AutoModelForSemanticSegmentation"),d(cc,"class","relative group"),d(Mae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Eae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Cae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wae,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(Aae,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(Lae,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(yae,"href","/docs/transformers/main/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForSemanticSegmentation"),d(xae,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),d($ae,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N0,"id","transformers.AutoModelForInstanceSegmentation"),d(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N0,"href","#transformers.AutoModelForInstanceSegmentation"),d(hc,"class","relative group"),d(kae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Sae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Rae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pae,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O0,"id","transformers.AutoModelForZeroShotObjectDetection"),d(O0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O0,"href","#transformers.AutoModelForZeroShotObjectDetection"),d(_c,"class","relative group"),d(Bae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Iae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Nae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qae,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTForObjectDetection"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W0,"id","transformers.TFAutoModel"),d(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W0,"href","#transformers.TFAutoModel"),d(Fc,"class","relative group"),d(jae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Gae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oae,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),d(Vae,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),d(Xae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),d(zae,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(Qae,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(Wae,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),d(Uae,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),d(Hae,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),d(Jae,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),d(Yae,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),d(Zae,"href","/docs/transformers/main/en/model_doc/cvt#transformers.TFCvtModel"),d(Kae,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),d(ene,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),d(one,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(rne,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),d(tne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(ane,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(nne,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),d(sne,"href","/docs/transformers/main/en/model_doc/esm#transformers.TFEsmModel"),d(lne,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(ine,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),d(dne,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(mne,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),d(cne,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),d(fne,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel"),d(gne,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),d(hne,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(une,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),d(pne,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),d(_ne,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),d(bne,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),d(vne,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),d(Fne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),d(Tne,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(Mne,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),d(Ene,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),d(Cne,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),d(wne,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(Ane,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),d(Lne,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),d(yne,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),d(xne,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),d($ne,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),d(kne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),d(Sne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),d(Rne,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),d(Pne,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(Bne,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),d(Ine,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),d(Nne,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),d(qne,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(jne,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),d(Dne,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(Gne,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(One,"href","/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperModel"),d(Vne,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),d(Xne,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),d(zne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(Qne,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kw,"id","transformers.TFAutoModelForPreTraining"),d(Kw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kw,"href","#transformers.TFAutoModelForPreTraining"),d(Ec,"class","relative group"),d(Wne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Une,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Hne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jne,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(Yne,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(Zne,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),d(Kne,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(ese,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(ose,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(rse,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(tse,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(ase,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(nse,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(sse,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(lse,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(ise,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(dse,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(mse,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(cse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(fse,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(gse,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(hse,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(use,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(pse,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(_se,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bse,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wA,"id","transformers.TFAutoModelForCausalLM"),d(wA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wA,"href","#transformers.TFAutoModelForCausalLM"),d(Ac,"class","relative group"),d(vse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Fse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Tse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mse,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(Ese,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(Cse,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(wse,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(Ase,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(Lse,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(yse,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),d(xse,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d($se,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(kse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(Sse,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(Rse,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),d(Pse,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(Bse,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OA,"id","transformers.TFAutoModelForImageClassification"),d(OA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OA,"href","#transformers.TFAutoModelForImageClassification"),d(xc,"class","relative group"),d(Ise,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jse,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(Dse,"href","/docs/transformers/main/en/model_doc/cvt#transformers.TFCvtForImageClassification"),d(Gse,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),d(Ose,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),d(Vse,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),d(Xse,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),d(zse,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),d(Qse,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),d(Wse,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),d(Use,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),d(Hse,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e6,"id","transformers.TFAutoModelForSemanticSegmentation"),d(e6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e6,"href","#transformers.TFAutoModelForSemanticSegmentation"),d(Sc,"class","relative group"),d(Jse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Zse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kse,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),d(ele,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),d(ole,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(s6,"id","transformers.TFAutoModelForMaskedLM"),d(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s6,"href","#transformers.TFAutoModelForMaskedLM"),d(Ic,"class","relative group"),d(rle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ale,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nle,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(sle,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(lle,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(ile,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(dle,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(mle,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(cle,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(fle,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(gle,"href","/docs/transformers/main/en/model_doc/esm#transformers.TFEsmForMaskedLM"),d(hle,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(ule,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(ple,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(_le,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(ble,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(vle,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(Fle,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(Tle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(Mle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(Ele,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(Cle,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(wle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($6,"id","transformers.TFAutoModelForSeq2SeqLM"),d($6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($6,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(jc,"class","relative group"),d(Ale,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xle,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d($le,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(kle,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(Sle,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(Rle,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(Ple,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),d(Ble,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(Ile,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(Nle,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(qle,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V6,"id","transformers.TFAutoModelForSequenceClassification"),d(V6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V6,"href","#transformers.TFAutoModelForSequenceClassification"),d(Oc,"class","relative group"),d(jle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Gle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ole,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(Vle,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(Xle,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(zle,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(Qle,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(Wle,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(Ule,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(Hle,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(Jle,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(Yle,"href","/docs/transformers/main/en/model_doc/esm#transformers.TFEsmForSequenceClassification"),d(Zle,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(Kle,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(eie,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(oie,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(rie,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(tie,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),d(aie,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(nie,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(sie,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(lie,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(iie,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(die,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(mie,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(cie,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(fie,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(gie,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(hie,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(uie,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F7,"id","transformers.TFAutoModelForMultipleChoice"),d(F7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F7,"href","#transformers.TFAutoModelForMultipleChoice"),d(zc,"class","relative group"),d(pie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_ie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vie,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(Fie,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(Tie,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Mie,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(Eie,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Cie,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(wie,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Aie,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(Lie,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(yie,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(xie,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d($ie,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(kie,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Sie,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Rie,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Pie,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Bie,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D7,"id","transformers.TFAutoModelForNextSentencePrediction"),d(D7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D7,"href","#transformers.TFAutoModelForNextSentencePrediction"),d(Uc,"class","relative group"),d(Iie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jie,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),d(Die,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z7,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Yc,"class","relative group"),d(Gie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Oie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Vie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xie,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H7,"id","transformers.TFAutoModelForDocumentQuestionAnswering"),d(H7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H7,"href","#transformers.TFAutoModelForDocumentQuestionAnswering"),d(ef,"class","relative group"),d(zie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Wie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uie,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K7,"id","transformers.TFAutoModelForTokenClassification"),d(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K7,"href","#transformers.TFAutoModelForTokenClassification"),d(tf,"class","relative group"),d(Hie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Yie,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zie,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Kie,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(ede,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(ode,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(rde,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(tde,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(ade,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(nde,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(sde,"href","/docs/transformers/main/en/model_doc/esm#transformers.TFEsmForTokenClassification"),d(lde,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(ide,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(dde,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(mde,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),d(cde,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(fde,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(gde,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(hde,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(ude,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(pde,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(_de,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(bde,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(vde,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C8,"id","transformers.TFAutoModelForQuestionAnswering"),d(C8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C8,"href","#transformers.TFAutoModelForQuestionAnswering"),d(sf,"class","relative group"),d(Fde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Mde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ede,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(Cde,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(wde,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(Ade,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(Lde,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(yde,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(xde,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d($de,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(kde,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(Sde,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(Rde,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(Pde,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),d(Bde,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(Ide,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(Nde,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(qde,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(jde,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(Dde,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(Gde,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(Ode,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(Vde,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U8,"id","transformers.TFAutoModelForVision2Seq"),d(U8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U8,"href","#transformers.TFAutoModelForVision2Seq"),d(mf,"class","relative group"),d(Xde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Qde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wde,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z8,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(Z8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z8,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(gf,"class","relative group"),d(Ude,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yde,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Zde,"href","/docs/transformers/main/en/model_doc/whisper#transformers.TFWhisperForConditionalGeneration"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tL,"id","transformers.FlaxAutoModel"),d(tL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tL,"href","#transformers.FlaxAutoModel"),d(pf,"class","relative group"),d(Kde,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eme,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ome,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rme,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),d(tme,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),d(ame,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),d(nme,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),d(sme,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(lme,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(ime,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(dme,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),d(mme,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(cme,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),d(fme,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(gme,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(hme,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(ume,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(pme,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),d(_me,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),d(bme,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),d(vme,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),d(Fme,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(Tme,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(Mme,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(Eme,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),d(Cme,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(wme,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),d(Ame,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(Lme,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(yme,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RL,"id","transformers.FlaxAutoModelForCausalLM"),d(RL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RL,"href","#transformers.FlaxAutoModelForCausalLM"),d(vf,"class","relative group"),d(xme,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($me,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kme,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sme,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(Rme,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),d(Pme,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),d(Bme,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),d(Ime,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(Nme,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(qme,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(jme,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),d(Dme,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),d(Gme,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QL,"id","transformers.FlaxAutoModelForPreTraining"),d(QL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QL,"href","#transformers.FlaxAutoModelForPreTraining"),d(Mf,"class","relative group"),d(Ome,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vme,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Xme,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zme,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(Qme,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Wme,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(Ume,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(Hme,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(Jme,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(Yme,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(Zme,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(Kme,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(ece,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(oce,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(rce,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(tce,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iy,"id","transformers.FlaxAutoModelForMaskedLM"),d(iy,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iy,"href","#transformers.FlaxAutoModelForMaskedLM"),d(wf,"class","relative group"),d(ace,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lce,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(ice,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(dce,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(mce,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(cce,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(fce,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(gce,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(hce,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(uce,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(pce,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ty,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(Ty,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ty,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(yf,"class","relative group"),d(_ce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fce,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Tce,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(Mce,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(Ece,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(Cce,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(wce,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(Ace,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(Lce,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(yce,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(xce,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Py,"id","transformers.FlaxAutoModelForSequenceClassification"),d(Py,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Py,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(kf,"class","relative group"),d($ce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Sce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rce,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(Pce,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(Bce,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(Ice,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(Nce,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(qce,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(jce,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(Dce,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(Gce,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(Oce,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wy,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(Wy,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wy,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(Pf,"class","relative group"),d(Vce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zce,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qce,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(Wce,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(Uce,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(Hce,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Jce,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Yce,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(Zce,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(Kce,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(efe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(ofe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(s9,"id","transformers.FlaxAutoModelForTokenClassification"),d(s9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s9,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Nf,"class","relative group"),d(rfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(afe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nfe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(sfe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(lfe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(ife,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(dfe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(mfe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(cfe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(ffe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_9,"id","transformers.FlaxAutoModelForMultipleChoice"),d(_9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_9,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Df,"class","relative group"),d(gfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ufe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pfe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(_fe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(bfe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(vfe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Ffe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Tfe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Mfe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Efe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y9,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(y9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y9,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Vf,"class","relative group"),d(Cfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Afe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lfe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S9,"id","transformers.FlaxAutoModelForImageClassification"),d(S9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S9,"href","#transformers.FlaxAutoModelForImageClassification"),d(Qf,"class","relative group"),d(yfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($fe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(La,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kfe,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Sfe,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N9,"id","transformers.FlaxAutoModelForVision2Seq"),d(N9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N9,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Hf,"class","relative group"),d(Rfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Bfe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ife,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,_){e(document.head,g),b(c,v,_),b(c,u,_),e(u,f),e(f,p),M(m,p,null),e(u,h),e(u,He),e(He,Ld),b(c,og,_),b(c,wt,_),e(wt,yd),e(wt,xd),e(xd,Ek),e(wt,rg),b(c,Qe,_),b(c,Ze,_),e(Ze,$d),e(Ze,_s),e(_s,Ck),e(Ze,bs),e(Ze,vs),e(vs,wk),e(Ze,kd),e(Ze,Fs),e(Fs,Ak),e(Ze,Sd),b(c,tg,_),M(ln,c,_),b(c,Ke,_),b(c,ye,_),e(ye,Uq),e(ye,Rd),e(Rd,Hq),e(ye,Jq),b(c,Po,_),b(c,dn,_),e(dn,Yq),e(dn,ag),e(ag,Zq),e(dn,ugo),b(c,Eio,_),b(c,Pd,_),e(Pd,ng),e(ng,zhe),M(Lk,zhe,null),e(Pd,pgo),e(Pd,Qhe),e(Qhe,_go),b(c,Cio,_),b(c,Ts,_),e(Ts,bgo),e(Ts,Whe),e(Whe,vgo),e(Ts,Fgo),e(Ts,Uhe),e(Uhe,Tgo),e(Ts,Mgo),b(c,wio,_),M(yk,c,_),b(c,Aio,_),b(c,Kq,_),e(Kq,Ego),b(c,Lio,_),M(sg,c,_),b(c,yio,_),b(c,Bd,_),e(Bd,lg),e(lg,Hhe),M(xk,Hhe,null),e(Bd,Cgo),e(Bd,Jhe),e(Jhe,wgo),b(c,xio,_),b(c,Bo,_),M($k,Bo,null),e(Bo,Ago),e(Bo,kk),e(kk,Lgo),e(kk,ej),e(ej,ygo),e(kk,xgo),e(Bo,$go),e(Bo,Sk),e(Sk,kgo),e(Sk,Yhe),e(Yhe,Sgo),e(Sk,Rgo),e(Bo,Pgo),e(Bo,Vr),M(Rk,Vr,null),e(Vr,Bgo),e(Vr,Zhe),e(Zhe,Igo),e(Vr,Ngo),e(Vr,Id),e(Id,qgo),e(Id,Khe),e(Khe,jgo),e(Id,Dgo),e(Id,eue),e(eue,Ggo),e(Id,Ogo),e(Vr,Vgo),e(Vr,A),e(A,ig),e(ig,oue),e(oue,Xgo),e(ig,zgo),e(ig,oj),e(oj,Qgo),e(ig,Wgo),e(A,Ugo),e(A,dg),e(dg,rue),e(rue,Hgo),e(dg,Jgo),e(dg,rj),e(rj,Ygo),e(dg,Zgo),e(A,Kgo),e(A,mg),e(mg,tue),e(tue,eho),e(mg,oho),e(mg,tj),e(tj,rho),e(mg,tho),e(A,aho),e(A,cg),e(cg,aue),e(aue,nho),e(cg,sho),e(cg,aj),e(aj,lho),e(cg,iho),e(A,dho),e(A,fg),e(fg,nue),e(nue,mho),e(fg,cho),e(fg,nj),e(nj,fho),e(fg,gho),e(A,hho),e(A,gg),e(gg,sue),e(sue,uho),e(gg,pho),e(gg,sj),e(sj,_ho),e(gg,bho),e(A,vho),e(A,hg),e(hg,lue),e(lue,Fho),e(hg,Tho),e(hg,lj),e(lj,Mho),e(hg,Eho),e(A,Cho),e(A,ug),e(ug,iue),e(iue,who),e(ug,Aho),e(ug,ij),e(ij,Lho),e(ug,yho),e(A,xho),e(A,pg),e(pg,due),e(due,$ho),e(pg,kho),e(pg,dj),e(dj,Sho),e(pg,Rho),e(A,Pho),e(A,_g),e(_g,mue),e(mue,Bho),e(_g,Iho),e(_g,mj),e(mj,Nho),e(_g,qho),e(A,jho),e(A,bg),e(bg,cue),e(cue,Dho),e(bg,Gho),e(bg,cj),e(cj,Oho),e(bg,Vho),e(A,Xho),e(A,vg),e(vg,fue),e(fue,zho),e(vg,Qho),e(vg,fj),e(fj,Who),e(vg,Uho),e(A,Hho),e(A,Fg),e(Fg,gue),e(gue,Jho),e(Fg,Yho),e(Fg,gj),e(gj,Zho),e(Fg,Kho),e(A,euo),e(A,Tg),e(Tg,hue),e(hue,ouo),e(Tg,ruo),e(Tg,hj),e(hj,tuo),e(Tg,auo),e(A,nuo),e(A,Mg),e(Mg,uue),e(uue,suo),e(Mg,luo),e(Mg,uj),e(uj,iuo),e(Mg,duo),e(A,muo),e(A,Eg),e(Eg,pue),e(pue,cuo),e(Eg,fuo),e(Eg,pj),e(pj,guo),e(Eg,huo),e(A,uuo),e(A,Cg),e(Cg,_ue),e(_ue,puo),e(Cg,_uo),e(Cg,_j),e(_j,buo),e(Cg,vuo),e(A,Fuo),e(A,wg),e(wg,bue),e(bue,Tuo),e(wg,Muo),e(wg,bj),e(bj,Euo),e(wg,Cuo),e(A,wuo),e(A,Ag),e(Ag,vue),e(vue,Auo),e(Ag,Luo),e(Ag,vj),e(vj,yuo),e(Ag,xuo),e(A,$uo),e(A,Lg),e(Lg,Fue),e(Fue,kuo),e(Lg,Suo),e(Lg,Fj),e(Fj,Ruo),e(Lg,Puo),e(A,Buo),e(A,yg),e(yg,Tue),e(Tue,Iuo),e(yg,Nuo),e(yg,Tj),e(Tj,quo),e(yg,juo),e(A,Duo),e(A,xg),e(xg,Mue),e(Mue,Guo),e(xg,Ouo),e(xg,Mj),e(Mj,Vuo),e(xg,Xuo),e(A,zuo),e(A,$g),e($g,Eue),e(Eue,Quo),e($g,Wuo),e($g,Ej),e(Ej,Uuo),e($g,Huo),e(A,Juo),e(A,kg),e(kg,Cue),e(Cue,Yuo),e(kg,Zuo),e(kg,Cj),e(Cj,Kuo),e(kg,epo),e(A,opo),e(A,Sg),e(Sg,wue),e(wue,rpo),e(Sg,tpo),e(Sg,wj),e(wj,apo),e(Sg,npo),e(A,spo),e(A,Rg),e(Rg,Aue),e(Aue,lpo),e(Rg,ipo),e(Rg,Aj),e(Aj,dpo),e(Rg,mpo),e(A,cpo),e(A,Pg),e(Pg,Lue),e(Lue,fpo),e(Pg,gpo),e(Pg,Lj),e(Lj,hpo),e(Pg,upo),e(A,ppo),e(A,Bg),e(Bg,yue),e(yue,_po),e(Bg,bpo),e(Bg,yj),e(yj,vpo),e(Bg,Fpo),e(A,Tpo),e(A,Ig),e(Ig,xue),e(xue,Mpo),e(Ig,Epo),e(Ig,xj),e(xj,Cpo),e(Ig,wpo),e(A,Apo),e(A,Ng),e(Ng,$ue),e($ue,Lpo),e(Ng,ypo),e(Ng,$j),e($j,xpo),e(Ng,$po),e(A,kpo),e(A,qg),e(qg,kue),e(kue,Spo),e(qg,Rpo),e(qg,kj),e(kj,Ppo),e(qg,Bpo),e(A,Ipo),e(A,jg),e(jg,Sue),e(Sue,Npo),e(jg,qpo),e(jg,Sj),e(Sj,jpo),e(jg,Dpo),e(A,Gpo),e(A,Dg),e(Dg,Rue),e(Rue,Opo),e(Dg,Vpo),e(Dg,Rj),e(Rj,Xpo),e(Dg,zpo),e(A,Qpo),e(A,Gg),e(Gg,Pue),e(Pue,Wpo),e(Gg,Upo),e(Gg,Pj),e(Pj,Hpo),e(Gg,Jpo),e(A,Ypo),e(A,Og),e(Og,Bue),e(Bue,Zpo),e(Og,Kpo),e(Og,Bj),e(Bj,e_o),e(Og,o_o),e(A,r_o),e(A,Vg),e(Vg,Iue),e(Iue,t_o),e(Vg,a_o),e(Vg,Ij),e(Ij,n_o),e(Vg,s_o),e(A,l_o),e(A,Xg),e(Xg,Nue),e(Nue,i_o),e(Xg,d_o),e(Xg,Nj),e(Nj,m_o),e(Xg,c_o),e(A,f_o),e(A,zg),e(zg,que),e(que,g_o),e(zg,h_o),e(zg,qj),e(qj,u_o),e(zg,p_o),e(A,__o),e(A,Qg),e(Qg,jue),e(jue,b_o),e(Qg,v_o),e(Qg,jj),e(jj,F_o),e(Qg,T_o),e(A,M_o),e(A,Wg),e(Wg,Due),e(Due,E_o),e(Wg,C_o),e(Wg,Dj),e(Dj,w_o),e(Wg,A_o),e(A,L_o),e(A,Ug),e(Ug,Gue),e(Gue,y_o),e(Ug,x_o),e(Ug,Gj),e(Gj,$_o),e(Ug,k_o),e(A,S_o),e(A,Hg),e(Hg,Oue),e(Oue,R_o),e(Hg,P_o),e(Hg,Oj),e(Oj,B_o),e(Hg,I_o),e(A,N_o),e(A,Jg),e(Jg,Vue),e(Vue,q_o),e(Jg,j_o),e(Jg,Vj),e(Vj,D_o),e(Jg,G_o),e(A,O_o),e(A,Yg),e(Yg,Xue),e(Xue,V_o),e(Yg,X_o),e(Yg,Xj),e(Xj,z_o),e(Yg,Q_o),e(A,W_o),e(A,Zg),e(Zg,zue),e(zue,U_o),e(Zg,H_o),e(Zg,zj),e(zj,J_o),e(Zg,Y_o),e(A,Z_o),e(A,Kg),e(Kg,Que),e(Que,K_o),e(Kg,e1o),e(Kg,Qj),e(Qj,o1o),e(Kg,r1o),e(A,t1o),e(A,eh),e(eh,Wue),e(Wue,a1o),e(eh,n1o),e(eh,Wj),e(Wj,s1o),e(eh,l1o),e(A,i1o),e(A,oh),e(oh,Uue),e(Uue,d1o),e(oh,m1o),e(oh,Uj),e(Uj,c1o),e(oh,f1o),e(A,g1o),e(A,rh),e(rh,Hue),e(Hue,h1o),e(rh,u1o),e(rh,Hj),e(Hj,p1o),e(rh,_1o),e(A,b1o),e(A,th),e(th,Jue),e(Jue,v1o),e(th,F1o),e(th,Jj),e(Jj,T1o),e(th,M1o),e(A,E1o),e(A,ah),e(ah,Yue),e(Yue,C1o),e(ah,w1o),e(ah,Yj),e(Yj,A1o),e(ah,L1o),e(A,y1o),e(A,nh),e(nh,Zue),e(Zue,x1o),e(nh,$1o),e(nh,Zj),e(Zj,k1o),e(nh,S1o),e(A,R1o),e(A,sh),e(sh,Kue),e(Kue,P1o),e(sh,B1o),e(sh,Kj),e(Kj,I1o),e(sh,N1o),e(A,q1o),e(A,lh),e(lh,epe),e(epe,j1o),e(lh,D1o),e(lh,eD),e(eD,G1o),e(lh,O1o),e(A,V1o),e(A,ih),e(ih,ope),e(ope,X1o),e(ih,z1o),e(ih,oD),e(oD,Q1o),e(ih,W1o),e(A,U1o),e(A,dh),e(dh,rpe),e(rpe,H1o),e(dh,J1o),e(dh,rD),e(rD,Y1o),e(dh,Z1o),e(A,K1o),e(A,mh),e(mh,tpe),e(tpe,e2o),e(mh,o2o),e(mh,tD),e(tD,r2o),e(mh,t2o),e(A,a2o),e(A,ch),e(ch,ape),e(ape,n2o),e(ch,s2o),e(ch,aD),e(aD,l2o),e(ch,i2o),e(A,d2o),e(A,fh),e(fh,npe),e(npe,m2o),e(fh,c2o),e(fh,nD),e(nD,f2o),e(fh,g2o),e(A,h2o),e(A,gh),e(gh,spe),e(spe,u2o),e(gh,p2o),e(gh,sD),e(sD,_2o),e(gh,b2o),e(A,v2o),e(A,hh),e(hh,lpe),e(lpe,F2o),e(hh,T2o),e(hh,lD),e(lD,M2o),e(hh,E2o),e(A,C2o),e(A,uh),e(uh,ipe),e(ipe,w2o),e(uh,A2o),e(uh,iD),e(iD,L2o),e(uh,y2o),e(A,x2o),e(A,ph),e(ph,dpe),e(dpe,$2o),e(ph,k2o),e(ph,dD),e(dD,S2o),e(ph,R2o),e(A,P2o),e(A,_h),e(_h,mpe),e(mpe,B2o),e(_h,I2o),e(_h,mD),e(mD,N2o),e(_h,q2o),e(A,j2o),e(A,bh),e(bh,cpe),e(cpe,D2o),e(bh,G2o),e(bh,cD),e(cD,O2o),e(bh,V2o),e(A,X2o),e(A,vh),e(vh,fpe),e(fpe,z2o),e(vh,Q2o),e(vh,fD),e(fD,W2o),e(vh,U2o),e(A,H2o),e(A,Fh),e(Fh,gpe),e(gpe,J2o),e(Fh,Y2o),e(Fh,gD),e(gD,Z2o),e(Fh,K2o),e(A,ebo),e(A,Th),e(Th,hpe),e(hpe,obo),e(Th,rbo),e(Th,hD),e(hD,tbo),e(Th,abo),e(A,nbo),e(A,Mh),e(Mh,upe),e(upe,sbo),e(Mh,lbo),e(Mh,uD),e(uD,ibo),e(Mh,dbo),e(A,mbo),e(A,Eh),e(Eh,ppe),e(ppe,cbo),e(Eh,fbo),e(Eh,pD),e(pD,gbo),e(Eh,hbo),e(A,ubo),e(A,Ch),e(Ch,_pe),e(_pe,pbo),e(Ch,_bo),e(Ch,_D),e(_D,bbo),e(Ch,vbo),e(A,Fbo),e(A,wh),e(wh,bpe),e(bpe,Tbo),e(wh,Mbo),e(wh,bD),e(bD,Ebo),e(wh,Cbo),e(A,wbo),e(A,Ah),e(Ah,vpe),e(vpe,Abo),e(Ah,Lbo),e(Ah,vD),e(vD,ybo),e(Ah,xbo),e(A,$bo),e(A,Lh),e(Lh,Fpe),e(Fpe,kbo),e(Lh,Sbo),e(Lh,FD),e(FD,Rbo),e(Lh,Pbo),e(A,Bbo),e(A,yh),e(yh,Tpe),e(Tpe,Ibo),e(yh,Nbo),e(yh,TD),e(TD,qbo),e(yh,jbo),e(A,Dbo),e(A,xh),e(xh,Mpe),e(Mpe,Gbo),e(xh,Obo),e(xh,MD),e(MD,Vbo),e(xh,Xbo),e(A,zbo),e(A,$h),e($h,Epe),e(Epe,Qbo),e($h,Wbo),e($h,ED),e(ED,Ubo),e($h,Hbo),e(A,Jbo),e(A,kh),e(kh,Cpe),e(Cpe,Ybo),e(kh,Zbo),e(kh,CD),e(CD,Kbo),e(kh,evo),e(A,ovo),e(A,Sh),e(Sh,wpe),e(wpe,rvo),e(Sh,tvo),e(Sh,wD),e(wD,avo),e(Sh,nvo),e(A,svo),e(A,Rh),e(Rh,Ape),e(Ape,lvo),e(Rh,ivo),e(Rh,AD),e(AD,dvo),e(Rh,mvo),e(A,cvo),e(A,Ph),e(Ph,Lpe),e(Lpe,fvo),e(Ph,gvo),e(Ph,LD),e(LD,hvo),e(Ph,uvo),e(A,pvo),e(A,Bh),e(Bh,ype),e(ype,_vo),e(Bh,bvo),e(Bh,yD),e(yD,vvo),e(Bh,Fvo),e(A,Tvo),e(A,Ih),e(Ih,xpe),e(xpe,Mvo),e(Ih,Evo),e(Ih,xD),e(xD,Cvo),e(Ih,wvo),e(A,Avo),e(A,Nh),e(Nh,$pe),e($pe,Lvo),e(Nh,yvo),e(Nh,$D),e($D,xvo),e(Nh,$vo),e(A,kvo),e(A,qh),e(qh,kpe),e(kpe,Svo),e(qh,Rvo),e(qh,kD),e(kD,Pvo),e(qh,Bvo),e(A,Ivo),e(A,jh),e(jh,Spe),e(Spe,Nvo),e(jh,qvo),e(jh,SD),e(SD,jvo),e(jh,Dvo),e(A,Gvo),e(A,Dh),e(Dh,Rpe),e(Rpe,Ovo),e(Dh,Vvo),e(Dh,RD),e(RD,Xvo),e(Dh,zvo),e(A,Qvo),e(A,Gh),e(Gh,Ppe),e(Ppe,Wvo),e(Gh,Uvo),e(Gh,PD),e(PD,Hvo),e(Gh,Jvo),e(A,Yvo),e(A,Oh),e(Oh,Bpe),e(Bpe,Zvo),e(Oh,Kvo),e(Oh,BD),e(BD,eFo),e(Oh,oFo),e(A,rFo),e(A,Vh),e(Vh,Ipe),e(Ipe,tFo),e(Vh,aFo),e(Vh,ID),e(ID,nFo),e(Vh,sFo),e(A,lFo),e(A,Xh),e(Xh,Npe),e(Npe,iFo),e(Xh,dFo),e(Xh,ND),e(ND,mFo),e(Xh,cFo),e(A,fFo),e(A,zh),e(zh,qpe),e(qpe,gFo),e(zh,hFo),e(zh,qD),e(qD,uFo),e(zh,pFo),e(A,_Fo),e(A,Qh),e(Qh,jpe),e(jpe,bFo),e(Qh,vFo),e(Qh,jD),e(jD,FFo),e(Qh,TFo),e(A,MFo),e(A,Wh),e(Wh,Dpe),e(Dpe,EFo),e(Wh,CFo),e(Wh,DD),e(DD,wFo),e(Wh,AFo),e(A,LFo),e(A,Uh),e(Uh,Gpe),e(Gpe,yFo),e(Uh,xFo),e(Uh,GD),e(GD,$Fo),e(Uh,kFo),e(A,SFo),e(A,Hh),e(Hh,Ope),e(Ope,RFo),e(Hh,PFo),e(Hh,OD),e(OD,BFo),e(Hh,IFo),e(A,NFo),e(A,Jh),e(Jh,Vpe),e(Vpe,qFo),e(Jh,jFo),e(Jh,VD),e(VD,DFo),e(Jh,GFo),e(A,OFo),e(A,Yh),e(Yh,Xpe),e(Xpe,VFo),e(Yh,XFo),e(Yh,XD),e(XD,zFo),e(Yh,QFo),e(A,WFo),e(A,Zh),e(Zh,zpe),e(zpe,UFo),e(Zh,HFo),e(Zh,zD),e(zD,JFo),e(Zh,YFo),e(A,ZFo),e(A,Kh),e(Kh,Qpe),e(Qpe,KFo),e(Kh,eTo),e(Kh,QD),e(QD,oTo),e(Kh,rTo),e(A,tTo),e(A,eu),e(eu,Wpe),e(Wpe,aTo),e(eu,nTo),e(eu,WD),e(WD,sTo),e(eu,lTo),e(A,iTo),e(A,ou),e(ou,Upe),e(Upe,dTo),e(ou,mTo),e(ou,UD),e(UD,cTo),e(ou,fTo),e(A,gTo),e(A,ru),e(ru,Hpe),e(Hpe,hTo),e(ru,uTo),e(ru,HD),e(HD,pTo),e(ru,_To),e(A,bTo),e(A,tu),e(tu,Jpe),e(Jpe,vTo),e(tu,FTo),e(tu,JD),e(JD,TTo),e(tu,MTo),e(A,ETo),e(A,au),e(au,Ype),e(Ype,CTo),e(au,wTo),e(au,YD),e(YD,ATo),e(au,LTo),e(A,yTo),e(A,nu),e(nu,Zpe),e(Zpe,xTo),e(nu,$To),e(nu,ZD),e(ZD,kTo),e(nu,STo),e(A,RTo),e(A,su),e(su,Kpe),e(Kpe,PTo),e(su,BTo),e(su,KD),e(KD,ITo),e(su,NTo),e(A,qTo),e(A,lu),e(lu,e_e),e(e_e,jTo),e(lu,DTo),e(lu,eG),e(eG,GTo),e(lu,OTo),e(A,VTo),e(A,iu),e(iu,o_e),e(o_e,XTo),e(iu,zTo),e(iu,oG),e(oG,QTo),e(iu,WTo),e(A,UTo),e(A,du),e(du,r_e),e(r_e,HTo),e(du,JTo),e(du,rG),e(rG,YTo),e(du,ZTo),e(A,KTo),e(A,mu),e(mu,t_e),e(t_e,eMo),e(mu,oMo),e(mu,tG),e(tG,rMo),e(mu,tMo),e(A,aMo),e(A,cu),e(cu,a_e),e(a_e,nMo),e(cu,sMo),e(cu,aG),e(aG,lMo),e(cu,iMo),e(A,dMo),e(A,fu),e(fu,n_e),e(n_e,mMo),e(fu,cMo),e(fu,nG),e(nG,fMo),e(fu,gMo),e(A,hMo),e(A,gu),e(gu,s_e),e(s_e,uMo),e(gu,pMo),e(gu,sG),e(sG,_Mo),e(gu,bMo),e(A,vMo),e(A,hu),e(hu,l_e),e(l_e,FMo),e(hu,TMo),e(hu,lG),e(lG,MMo),e(hu,EMo),e(A,CMo),e(A,uu),e(uu,i_e),e(i_e,wMo),e(uu,AMo),e(uu,iG),e(iG,LMo),e(uu,yMo),e(A,xMo),e(A,pu),e(pu,d_e),e(d_e,$Mo),e(pu,kMo),e(pu,dG),e(dG,SMo),e(pu,RMo),e(A,PMo),e(A,_u),e(_u,m_e),e(m_e,BMo),e(_u,IMo),e(_u,mG),e(mG,NMo),e(_u,qMo),e(A,jMo),e(A,bu),e(bu,c_e),e(c_e,DMo),e(bu,GMo),e(bu,cG),e(cG,OMo),e(bu,VMo),e(A,XMo),e(A,vu),e(vu,f_e),e(f_e,zMo),e(vu,QMo),e(vu,fG),e(fG,WMo),e(vu,UMo),e(A,HMo),e(A,Fu),e(Fu,g_e),e(g_e,JMo),e(Fu,YMo),e(Fu,gG),e(gG,ZMo),e(Fu,KMo),e(A,eEo),e(A,Tu),e(Tu,h_e),e(h_e,oEo),e(Tu,rEo),e(Tu,hG),e(hG,tEo),e(Tu,aEo),e(A,nEo),e(A,Mu),e(Mu,u_e),e(u_e,sEo),e(Mu,lEo),e(Mu,uG),e(uG,iEo),e(Mu,dEo),e(A,mEo),e(A,Eu),e(Eu,p_e),e(p_e,cEo),e(Eu,fEo),e(Eu,pG),e(pG,gEo),e(Eu,hEo),e(A,uEo),e(A,Cu),e(Cu,__e),e(__e,pEo),e(Cu,_Eo),e(Cu,_G),e(_G,bEo),e(Cu,vEo),e(A,FEo),e(A,wu),e(wu,b_e),e(b_e,TEo),e(wu,MEo),e(wu,bG),e(bG,EEo),e(wu,CEo),e(A,wEo),e(A,Au),e(Au,v_e),e(v_e,AEo),e(Au,LEo),e(Au,vG),e(vG,yEo),e(Au,xEo),e(A,$Eo),e(A,Lu),e(Lu,F_e),e(F_e,kEo),e(Lu,SEo),e(Lu,FG),e(FG,REo),e(Lu,PEo),e(A,BEo),e(A,yu),e(yu,T_e),e(T_e,IEo),e(yu,NEo),e(yu,TG),e(TG,qEo),e(yu,jEo),e(A,DEo),e(A,xu),e(xu,M_e),e(M_e,GEo),e(xu,OEo),e(xu,MG),e(MG,VEo),e(xu,XEo),e(A,zEo),e(A,$u),e($u,E_e),e(E_e,QEo),e($u,WEo),e($u,EG),e(EG,UEo),e($u,HEo),e(A,JEo),e(A,ku),e(ku,C_e),e(C_e,YEo),e(ku,ZEo),e(ku,CG),e(CG,KEo),e(ku,e4o),e(A,o4o),e(A,Su),e(Su,w_e),e(w_e,r4o),e(Su,t4o),e(Su,wG),e(wG,a4o),e(Su,n4o),e(A,s4o),e(A,Ru),e(Ru,A_e),e(A_e,l4o),e(Ru,i4o),e(Ru,AG),e(AG,d4o),e(Ru,m4o),e(A,c4o),e(A,Pu),e(Pu,L_e),e(L_e,f4o),e(Pu,g4o),e(Pu,LG),e(LG,h4o),e(Pu,u4o),e(A,p4o),e(A,Bu),e(Bu,y_e),e(y_e,_4o),e(Bu,b4o),e(Bu,yG),e(yG,v4o),e(Bu,F4o),e(A,T4o),e(A,Iu),e(Iu,x_e),e(x_e,M4o),e(Iu,E4o),e(Iu,xG),e(xG,C4o),e(Iu,w4o),e(A,A4o),e(A,Nu),e(Nu,$_e),e($_e,L4o),e(Nu,y4o),e(Nu,$G),e($G,x4o),e(Nu,$4o),e(A,k4o),e(A,qu),e(qu,k_e),e(k_e,S4o),e(qu,R4o),e(qu,kG),e(kG,P4o),e(qu,B4o),e(A,I4o),e(A,ju),e(ju,S_e),e(S_e,N4o),e(ju,q4o),e(ju,SG),e(SG,j4o),e(ju,D4o),e(Vr,G4o),M(Du,Vr,null),e(Bo,O4o),e(Bo,Gu),M(Pk,Gu,null),e(Gu,V4o),e(Gu,R_e),e(R_e,X4o),b(c,$io,_),b(c,Nd,_),e(Nd,Ou),e(Ou,P_e),M(Bk,P_e,null),e(Nd,z4o),e(Nd,B_e),e(B_e,Q4o),b(c,kio,_),b(c,Io,_),M(Ik,Io,null),e(Io,W4o),e(Io,Nk),e(Nk,U4o),e(Nk,RG),e(RG,H4o),e(Nk,J4o),e(Io,Y4o),e(Io,qk),e(qk,Z4o),e(qk,I_e),e(I_e,K4o),e(qk,eCo),e(Io,oCo),e(Io,Xr),M(jk,Xr,null),e(Xr,rCo),e(Xr,N_e),e(N_e,tCo),e(Xr,aCo),e(Xr,mn),e(mn,nCo),e(mn,q_e),e(q_e,sCo),e(mn,lCo),e(mn,j_e),e(j_e,iCo),e(mn,dCo),e(mn,D_e),e(D_e,mCo),e(mn,cCo),e(Xr,fCo),e(Xr,k),e(k,Ms),e(Ms,G_e),e(G_e,gCo),e(Ms,hCo),e(Ms,PG),e(PG,uCo),e(Ms,pCo),e(Ms,BG),e(BG,_Co),e(Ms,bCo),e(k,vCo),e(k,Es),e(Es,O_e),e(O_e,FCo),e(Es,TCo),e(Es,IG),e(IG,MCo),e(Es,ECo),e(Es,NG),e(NG,CCo),e(Es,wCo),e(k,ACo),e(k,Cs),e(Cs,V_e),e(V_e,LCo),e(Cs,yCo),e(Cs,qG),e(qG,xCo),e(Cs,$Co),e(Cs,jG),e(jG,kCo),e(Cs,SCo),e(k,RCo),e(k,Vu),e(Vu,X_e),e(X_e,PCo),e(Vu,BCo),e(Vu,DG),e(DG,ICo),e(Vu,NCo),e(k,qCo),e(k,ws),e(ws,z_e),e(z_e,jCo),e(ws,DCo),e(ws,GG),e(GG,GCo),e(ws,OCo),e(ws,OG),e(OG,VCo),e(ws,XCo),e(k,zCo),e(k,Xu),e(Xu,Q_e),e(Q_e,QCo),e(Xu,WCo),e(Xu,VG),e(VG,UCo),e(Xu,HCo),e(k,JCo),e(k,zu),e(zu,W_e),e(W_e,YCo),e(zu,ZCo),e(zu,XG),e(XG,KCo),e(zu,e3o),e(k,o3o),e(k,Qu),e(Qu,U_e),e(U_e,r3o),e(Qu,t3o),e(Qu,zG),e(zG,a3o),e(Qu,n3o),e(k,s3o),e(k,As),e(As,H_e),e(H_e,l3o),e(As,i3o),e(As,QG),e(QG,d3o),e(As,m3o),e(As,WG),e(WG,c3o),e(As,f3o),e(k,g3o),e(k,Ls),e(Ls,J_e),e(J_e,h3o),e(Ls,u3o),e(Ls,UG),e(UG,p3o),e(Ls,_3o),e(Ls,HG),e(HG,b3o),e(Ls,v3o),e(k,F3o),e(k,ys),e(ys,Y_e),e(Y_e,T3o),e(ys,M3o),e(ys,JG),e(JG,E3o),e(ys,C3o),e(ys,YG),e(YG,w3o),e(ys,A3o),e(k,L3o),e(k,Wu),e(Wu,Z_e),e(Z_e,y3o),e(Wu,x3o),e(Wu,ZG),e(ZG,$3o),e(Wu,k3o),e(k,S3o),e(k,Uu),e(Uu,K_e),e(K_e,R3o),e(Uu,P3o),e(Uu,KG),e(KG,B3o),e(Uu,I3o),e(k,N3o),e(k,Hu),e(Hu,e1e),e(e1e,q3o),e(Hu,j3o),e(Hu,eO),e(eO,D3o),e(Hu,G3o),e(k,O3o),e(k,xs),e(xs,o1e),e(o1e,V3o),e(xs,X3o),e(xs,oO),e(oO,z3o),e(xs,Q3o),e(xs,rO),e(rO,W3o),e(xs,U3o),e(k,H3o),e(k,Ju),e(Ju,r1e),e(r1e,J3o),e(Ju,Y3o),e(Ju,tO),e(tO,Z3o),e(Ju,K3o),e(k,e5o),e(k,$s),e($s,t1e),e(t1e,o5o),e($s,r5o),e($s,aO),e(aO,t5o),e($s,a5o),e($s,nO),e(nO,n5o),e($s,s5o),e(k,l5o),e(k,ks),e(ks,a1e),e(a1e,i5o),e(ks,d5o),e(ks,sO),e(sO,m5o),e(ks,c5o),e(ks,lO),e(lO,f5o),e(ks,g5o),e(k,h5o),e(k,Ss),e(Ss,n1e),e(n1e,u5o),e(Ss,p5o),e(Ss,iO),e(iO,_5o),e(Ss,b5o),e(Ss,dO),e(dO,v5o),e(Ss,F5o),e(k,T5o),e(k,Rs),e(Rs,s1e),e(s1e,M5o),e(Rs,E5o),e(Rs,mO),e(mO,C5o),e(Rs,w5o),e(Rs,cO),e(cO,A5o),e(Rs,L5o),e(k,y5o),e(k,Ps),e(Ps,l1e),e(l1e,x5o),e(Ps,$5o),e(Ps,fO),e(fO,k5o),e(Ps,S5o),e(Ps,gO),e(gO,R5o),e(Ps,P5o),e(k,B5o),e(k,Yu),e(Yu,i1e),e(i1e,I5o),e(Yu,N5o),e(Yu,hO),e(hO,q5o),e(Yu,j5o),e(k,D5o),e(k,Bs),e(Bs,d1e),e(d1e,G5o),e(Bs,O5o),e(Bs,uO),e(uO,V5o),e(Bs,X5o),e(Bs,pO),e(pO,z5o),e(Bs,Q5o),e(k,W5o),e(k,Is),e(Is,m1e),e(m1e,U5o),e(Is,H5o),e(Is,_O),e(_O,J5o),e(Is,Y5o),e(Is,bO),e(bO,Z5o),e(Is,K5o),e(k,e0o),e(k,Ns),e(Ns,c1e),e(c1e,o0o),e(Ns,r0o),e(Ns,vO),e(vO,t0o),e(Ns,a0o),e(Ns,FO),e(FO,n0o),e(Ns,s0o),e(k,l0o),e(k,qs),e(qs,f1e),e(f1e,i0o),e(qs,d0o),e(qs,TO),e(TO,m0o),e(qs,c0o),e(qs,MO),e(MO,f0o),e(qs,g0o),e(k,h0o),e(k,js),e(js,g1e),e(g1e,u0o),e(js,p0o),e(js,EO),e(EO,_0o),e(js,b0o),e(js,CO),e(CO,v0o),e(js,F0o),e(k,T0o),e(k,Ds),e(Ds,h1e),e(h1e,M0o),e(Ds,E0o),e(Ds,wO),e(wO,C0o),e(Ds,w0o),e(Ds,AO),e(AO,A0o),e(Ds,L0o),e(k,y0o),e(k,Gs),e(Gs,u1e),e(u1e,x0o),e(Gs,$0o),e(Gs,LO),e(LO,k0o),e(Gs,S0o),e(Gs,yO),e(yO,R0o),e(Gs,P0o),e(k,B0o),e(k,Zu),e(Zu,p1e),e(p1e,I0o),e(Zu,N0o),e(Zu,xO),e(xO,q0o),e(Zu,j0o),e(k,D0o),e(k,Ku),e(Ku,_1e),e(_1e,G0o),e(Ku,O0o),e(Ku,$O),e($O,V0o),e(Ku,X0o),e(k,z0o),e(k,Os),e(Os,b1e),e(b1e,Q0o),e(Os,W0o),e(Os,kO),e(kO,U0o),e(Os,H0o),e(Os,SO),e(SO,J0o),e(Os,Y0o),e(k,Z0o),e(k,ep),e(ep,v1e),e(v1e,K0o),e(ep,ewo),e(ep,RO),e(RO,owo),e(ep,rwo),e(k,two),e(k,Vs),e(Vs,F1e),e(F1e,awo),e(Vs,nwo),e(Vs,PO),e(PO,swo),e(Vs,lwo),e(Vs,BO),e(BO,iwo),e(Vs,dwo),e(k,mwo),e(k,Xs),e(Xs,T1e),e(T1e,cwo),e(Xs,fwo),e(Xs,IO),e(IO,gwo),e(Xs,hwo),e(Xs,NO),e(NO,uwo),e(Xs,pwo),e(k,_wo),e(k,zs),e(zs,M1e),e(M1e,bwo),e(zs,vwo),e(zs,qO),e(qO,Fwo),e(zs,Two),e(zs,jO),e(jO,Mwo),e(zs,Ewo),e(k,Cwo),e(k,op),e(op,E1e),e(E1e,wwo),e(op,Awo),e(op,DO),e(DO,Lwo),e(op,ywo),e(k,xwo),e(k,rp),e(rp,C1e),e(C1e,$wo),e(rp,kwo),e(rp,GO),e(GO,Swo),e(rp,Rwo),e(k,Pwo),e(k,Qs),e(Qs,w1e),e(w1e,Bwo),e(Qs,Iwo),e(Qs,OO),e(OO,Nwo),e(Qs,qwo),e(Qs,VO),e(VO,jwo),e(Qs,Dwo),e(k,Gwo),e(k,Ws),e(Ws,A1e),e(A1e,Owo),e(Ws,Vwo),e(Ws,XO),e(XO,Xwo),e(Ws,zwo),e(Ws,zO),e(zO,Qwo),e(Ws,Wwo),e(k,Uwo),e(k,Us),e(Us,L1e),e(L1e,Hwo),e(Us,Jwo),e(Us,QO),e(QO,Ywo),e(Us,Zwo),e(Us,WO),e(WO,Kwo),e(Us,eAo),e(k,oAo),e(k,tp),e(tp,y1e),e(y1e,rAo),e(tp,tAo),e(tp,UO),e(UO,aAo),e(tp,nAo),e(k,sAo),e(k,Hs),e(Hs,x1e),e(x1e,lAo),e(Hs,iAo),e(Hs,HO),e(HO,dAo),e(Hs,mAo),e(Hs,JO),e(JO,cAo),e(Hs,fAo),e(k,gAo),e(k,ap),e(ap,$1e),e($1e,hAo),e(ap,uAo),e(ap,YO),e(YO,pAo),e(ap,_Ao),e(k,bAo),e(k,Js),e(Js,k1e),e(k1e,vAo),e(Js,FAo),e(Js,ZO),e(ZO,TAo),e(Js,MAo),e(Js,KO),e(KO,EAo),e(Js,CAo),e(k,wAo),e(k,Ys),e(Ys,S1e),e(S1e,AAo),e(Ys,LAo),e(Ys,eV),e(eV,yAo),e(Ys,xAo),e(Ys,oV),e(oV,$Ao),e(Ys,kAo),e(k,SAo),e(k,Zs),e(Zs,R1e),e(R1e,RAo),e(Zs,PAo),e(Zs,rV),e(rV,BAo),e(Zs,IAo),e(Zs,tV),e(tV,NAo),e(Zs,qAo),e(k,jAo),e(k,Ks),e(Ks,P1e),e(P1e,DAo),e(Ks,GAo),e(Ks,aV),e(aV,OAo),e(Ks,VAo),e(Ks,nV),e(nV,XAo),e(Ks,zAo),e(k,QAo),e(k,el),e(el,B1e),e(B1e,WAo),e(el,UAo),e(el,sV),e(sV,HAo),e(el,JAo),e(el,lV),e(lV,YAo),e(el,ZAo),e(k,KAo),e(k,ol),e(ol,I1e),e(I1e,e6o),e(ol,o6o),e(ol,iV),e(iV,r6o),e(ol,t6o),e(ol,dV),e(dV,a6o),e(ol,n6o),e(k,s6o),e(k,rl),e(rl,N1e),e(N1e,l6o),e(rl,i6o),e(rl,mV),e(mV,d6o),e(rl,m6o),e(rl,cV),e(cV,c6o),e(rl,f6o),e(k,g6o),e(k,tl),e(tl,q1e),e(q1e,h6o),e(tl,u6o),e(tl,fV),e(fV,p6o),e(tl,_6o),e(tl,gV),e(gV,b6o),e(tl,v6o),e(k,F6o),e(k,np),e(np,j1e),e(j1e,T6o),e(np,M6o),e(np,hV),e(hV,E6o),e(np,C6o),e(k,w6o),e(k,al),e(al,D1e),e(D1e,A6o),e(al,L6o),e(al,uV),e(uV,y6o),e(al,x6o),e(al,pV),e(pV,$6o),e(al,k6o),e(k,S6o),e(k,sp),e(sp,G1e),e(G1e,R6o),e(sp,P6o),e(sp,_V),e(_V,B6o),e(sp,I6o),e(k,N6o),e(k,lp),e(lp,O1e),e(O1e,q6o),e(lp,j6o),e(lp,bV),e(bV,D6o),e(lp,G6o),e(k,O6o),e(k,nl),e(nl,V1e),e(V1e,V6o),e(nl,X6o),e(nl,vV),e(vV,z6o),e(nl,Q6o),e(nl,FV),e(FV,W6o),e(nl,U6o),e(k,H6o),e(k,sl),e(sl,X1e),e(X1e,J6o),e(sl,Y6o),e(sl,TV),e(TV,Z6o),e(sl,K6o),e(sl,MV),e(MV,e7o),e(sl,o7o),e(k,r7o),e(k,ll),e(ll,z1e),e(z1e,t7o),e(ll,a7o),e(ll,EV),e(EV,n7o),e(ll,s7o),e(ll,CV),e(CV,l7o),e(ll,i7o),e(k,d7o),e(k,ip),e(ip,Q1e),e(Q1e,m7o),e(ip,c7o),e(ip,wV),e(wV,f7o),e(ip,g7o),e(k,h7o),e(k,il),e(il,W1e),e(W1e,u7o),e(il,p7o),e(il,AV),e(AV,_7o),e(il,b7o),e(il,LV),e(LV,v7o),e(il,F7o),e(k,T7o),e(k,dl),e(dl,U1e),e(U1e,M7o),e(dl,E7o),e(dl,yV),e(yV,C7o),e(dl,w7o),e(dl,xV),e(xV,A7o),e(dl,L7o),e(k,y7o),e(k,ml),e(ml,H1e),e(H1e,x7o),e(ml,$7o),e(ml,$V),e($V,k7o),e(ml,S7o),e(ml,kV),e(kV,R7o),e(ml,P7o),e(k,B7o),e(k,cl),e(cl,J1e),e(J1e,I7o),e(cl,N7o),e(cl,SV),e(SV,q7o),e(cl,j7o),e(cl,RV),e(RV,D7o),e(cl,G7o),e(k,O7o),e(k,fl),e(fl,Y1e),e(Y1e,V7o),e(fl,X7o),e(fl,PV),e(PV,z7o),e(fl,Q7o),e(fl,BV),e(BV,W7o),e(fl,U7o),e(k,H7o),e(k,gl),e(gl,Z1e),e(Z1e,J7o),e(gl,Y7o),e(gl,IV),e(IV,Z7o),e(gl,K7o),e(gl,NV),e(NV,e8o),e(gl,o8o),e(k,r8o),e(k,hl),e(hl,K1e),e(K1e,t8o),e(hl,a8o),e(hl,qV),e(qV,n8o),e(hl,s8o),e(hl,jV),e(jV,l8o),e(hl,i8o),e(k,d8o),e(k,ul),e(ul,e2e),e(e2e,m8o),e(ul,c8o),e(ul,DV),e(DV,f8o),e(ul,g8o),e(ul,GV),e(GV,h8o),e(ul,u8o),e(k,p8o),e(k,dp),e(dp,o2e),e(o2e,_8o),e(dp,b8o),e(dp,OV),e(OV,v8o),e(dp,F8o),e(k,T8o),e(k,pl),e(pl,r2e),e(r2e,M8o),e(pl,E8o),e(pl,VV),e(VV,C8o),e(pl,w8o),e(pl,XV),e(XV,A8o),e(pl,L8o),e(k,y8o),e(k,_l),e(_l,t2e),e(t2e,x8o),e(_l,$8o),e(_l,zV),e(zV,k8o),e(_l,S8o),e(_l,QV),e(QV,R8o),e(_l,P8o),e(k,B8o),e(k,bl),e(bl,a2e),e(a2e,I8o),e(bl,N8o),e(bl,WV),e(WV,q8o),e(bl,j8o),e(bl,UV),e(UV,D8o),e(bl,G8o),e(k,O8o),e(k,mp),e(mp,n2e),e(n2e,V8o),e(mp,X8o),e(mp,HV),e(HV,z8o),e(mp,Q8o),e(k,W8o),e(k,cp),e(cp,s2e),e(s2e,U8o),e(cp,H8o),e(cp,JV),e(JV,J8o),e(cp,Y8o),e(k,Z8o),e(k,fp),e(fp,l2e),e(l2e,K8o),e(fp,eLo),e(fp,YV),e(YV,oLo),e(fp,rLo),e(k,tLo),e(k,gp),e(gp,i2e),e(i2e,aLo),e(gp,nLo),e(gp,ZV),e(ZV,sLo),e(gp,lLo),e(k,iLo),e(k,vl),e(vl,d2e),e(d2e,dLo),e(vl,mLo),e(vl,KV),e(KV,cLo),e(vl,fLo),e(vl,eX),e(eX,gLo),e(vl,hLo),e(k,uLo),e(k,hp),e(hp,m2e),e(m2e,pLo),e(hp,_Lo),e(hp,oX),e(oX,bLo),e(hp,vLo),e(k,FLo),e(k,Fl),e(Fl,c2e),e(c2e,TLo),e(Fl,MLo),e(Fl,rX),e(rX,ELo),e(Fl,CLo),e(Fl,tX),e(tX,wLo),e(Fl,ALo),e(k,LLo),e(k,Tl),e(Tl,f2e),e(f2e,yLo),e(Tl,xLo),e(Tl,aX),e(aX,$Lo),e(Tl,kLo),e(Tl,nX),e(nX,SLo),e(Tl,RLo),e(k,PLo),e(k,Ml),e(Ml,g2e),e(g2e,BLo),e(Ml,ILo),e(Ml,sX),e(sX,NLo),e(Ml,qLo),e(Ml,lX),e(lX,jLo),e(Ml,DLo),e(k,GLo),e(k,El),e(El,h2e),e(h2e,OLo),e(El,VLo),e(El,iX),e(iX,XLo),e(El,zLo),e(El,dX),e(dX,QLo),e(El,WLo),e(k,ULo),e(k,Cl),e(Cl,u2e),e(u2e,HLo),e(Cl,JLo),e(Cl,mX),e(mX,YLo),e(Cl,ZLo),e(Cl,cX),e(cX,KLo),e(Cl,eyo),e(k,oyo),e(k,up),e(up,p2e),e(p2e,ryo),e(up,tyo),e(up,fX),e(fX,ayo),e(up,nyo),e(k,syo),e(k,wl),e(wl,_2e),e(_2e,lyo),e(wl,iyo),e(wl,gX),e(gX,dyo),e(wl,myo),e(wl,hX),e(hX,cyo),e(wl,fyo),e(k,gyo),e(k,pp),e(pp,b2e),e(b2e,hyo),e(pp,uyo),e(pp,uX),e(uX,pyo),e(pp,_yo),e(k,byo),e(k,_p),e(_p,v2e),e(v2e,vyo),e(_p,Fyo),e(_p,pX),e(pX,Tyo),e(_p,Myo),e(k,Eyo),e(k,Al),e(Al,F2e),e(F2e,Cyo),e(Al,wyo),e(Al,_X),e(_X,Ayo),e(Al,Lyo),e(Al,bX),e(bX,yyo),e(Al,xyo),e(k,$yo),e(k,Ll),e(Ll,T2e),e(T2e,kyo),e(Ll,Syo),e(Ll,vX),e(vX,Ryo),e(Ll,Pyo),e(Ll,FX),e(FX,Byo),e(Ll,Iyo),e(k,Nyo),e(k,yl),e(yl,M2e),e(M2e,qyo),e(yl,jyo),e(yl,TX),e(TX,Dyo),e(yl,Gyo),e(yl,MX),e(MX,Oyo),e(yl,Vyo),e(k,Xyo),e(k,xl),e(xl,E2e),e(E2e,zyo),e(xl,Qyo),e(xl,EX),e(EX,Wyo),e(xl,Uyo),e(xl,CX),e(CX,Hyo),e(xl,Jyo),e(k,Yyo),e(k,bp),e(bp,C2e),e(C2e,Zyo),e(bp,Kyo),e(bp,wX),e(wX,e9o),e(bp,o9o),e(k,r9o),e(k,vp),e(vp,w2e),e(w2e,t9o),e(vp,a9o),e(vp,AX),e(AX,n9o),e(vp,s9o),e(k,l9o),e(k,Fp),e(Fp,A2e),e(A2e,i9o),e(Fp,d9o),e(Fp,LX),e(LX,m9o),e(Fp,c9o),e(k,f9o),e(k,$l),e($l,L2e),e(L2e,g9o),e($l,h9o),e($l,yX),e(yX,u9o),e($l,p9o),e($l,xX),e(xX,_9o),e($l,b9o),e(k,v9o),e(k,kl),e(kl,y2e),e(y2e,F9o),e(kl,T9o),e(kl,$X),e($X,M9o),e(kl,E9o),e(kl,kX),e(kX,C9o),e(kl,w9o),e(k,A9o),e(k,Tp),e(Tp,x2e),e(x2e,L9o),e(Tp,y9o),e(Tp,SX),e(SX,x9o),e(Tp,$9o),e(k,k9o),e(k,Mp),e(Mp,$2e),e($2e,S9o),e(Mp,R9o),e(Mp,RX),e(RX,P9o),e(Mp,B9o),e(k,I9o),e(k,Ep),e(Ep,k2e),e(k2e,N9o),e(Ep,q9o),e(Ep,PX),e(PX,j9o),e(Ep,D9o),e(k,G9o),e(k,Cp),e(Cp,S2e),e(S2e,O9o),e(Cp,V9o),e(Cp,BX),e(BX,X9o),e(Cp,z9o),e(k,Q9o),e(k,Sl),e(Sl,R2e),e(R2e,W9o),e(Sl,U9o),e(Sl,IX),e(IX,H9o),e(Sl,J9o),e(Sl,NX),e(NX,Y9o),e(Sl,Z9o),e(k,K9o),e(k,Rl),e(Rl,P2e),e(P2e,exo),e(Rl,oxo),e(Rl,qX),e(qX,rxo),e(Rl,txo),e(Rl,jX),e(jX,axo),e(Rl,nxo),e(k,sxo),e(k,wp),e(wp,B2e),e(B2e,lxo),e(wp,ixo),e(wp,DX),e(DX,dxo),e(wp,mxo),e(k,cxo),e(k,Ap),e(Ap,I2e),e(I2e,fxo),e(Ap,gxo),e(Ap,GX),e(GX,hxo),e(Ap,uxo),e(k,pxo),e(k,Pl),e(Pl,N2e),e(N2e,_xo),e(Pl,bxo),e(Pl,OX),e(OX,vxo),e(Pl,Fxo),e(Pl,VX),e(VX,Txo),e(Pl,Mxo),e(k,Exo),e(k,Bl),e(Bl,q2e),e(q2e,Cxo),e(Bl,wxo),e(Bl,XX),e(XX,Axo),e(Bl,Lxo),e(Bl,zX),e(zX,yxo),e(Bl,xxo),e(k,$xo),e(k,Il),e(Il,j2e),e(j2e,kxo),e(Il,Sxo),e(Il,QX),e(QX,Rxo),e(Il,Pxo),e(Il,WX),e(WX,Bxo),e(Il,Ixo),e(k,Nxo),e(k,Nl),e(Nl,D2e),e(D2e,qxo),e(Nl,jxo),e(Nl,UX),e(UX,Dxo),e(Nl,Gxo),e(Nl,HX),e(HX,Oxo),e(Nl,Vxo),e(Xr,Xxo),M(Lp,Xr,null),e(Io,zxo),e(Io,yp),M(Dk,yp,null),e(yp,Qxo),e(yp,G2e),e(G2e,Wxo),b(c,Sio,_),b(c,qd,_),e(qd,xp),e(xp,O2e),M(Gk,O2e,null),e(qd,Uxo),e(qd,V2e),e(V2e,Hxo),b(c,Rio,_),b(c,No,_),M(Ok,No,null),e(No,Jxo),e(No,Vk),e(Vk,Yxo),e(Vk,JX),e(JX,Zxo),e(Vk,Kxo),e(No,e$o),e(No,Xk),e(Xk,o$o),e(Xk,X2e),e(X2e,r$o),e(Xk,t$o),e(No,a$o),e(No,eo),M(zk,eo,null),e(eo,n$o),e(eo,z2e),e(z2e,s$o),e(eo,l$o),e(eo,cn),e(cn,i$o),e(cn,Q2e),e(Q2e,d$o),e(cn,m$o),e(cn,W2e),e(W2e,c$o),e(cn,f$o),e(cn,U2e),e(U2e,g$o),e(cn,h$o),e(eo,u$o),e(eo,z),e(z,$p),e($p,H2e),e(H2e,p$o),e($p,_$o),e($p,YX),e(YX,b$o),e($p,v$o),e(z,F$o),e(z,kp),e(kp,J2e),e(J2e,T$o),e(kp,M$o),e(kp,ZX),e(ZX,E$o),e(kp,C$o),e(z,w$o),e(z,Sp),e(Sp,Y2e),e(Y2e,A$o),e(Sp,L$o),e(Sp,KX),e(KX,y$o),e(Sp,x$o),e(z,$$o),e(z,Rp),e(Rp,Z2e),e(Z2e,k$o),e(Rp,S$o),e(Rp,ez),e(ez,R$o),e(Rp,P$o),e(z,B$o),e(z,Pp),e(Pp,K2e),e(K2e,I$o),e(Pp,N$o),e(Pp,oz),e(oz,q$o),e(Pp,j$o),e(z,D$o),e(z,Bp),e(Bp,ebe),e(ebe,G$o),e(Bp,O$o),e(Bp,rz),e(rz,V$o),e(Bp,X$o),e(z,z$o),e(z,Ip),e(Ip,obe),e(obe,Q$o),e(Ip,W$o),e(Ip,tz),e(tz,U$o),e(Ip,H$o),e(z,J$o),e(z,Np),e(Np,rbe),e(rbe,Y$o),e(Np,Z$o),e(Np,az),e(az,K$o),e(Np,eko),e(z,oko),e(z,qp),e(qp,tbe),e(tbe,rko),e(qp,tko),e(qp,nz),e(nz,ako),e(qp,nko),e(z,sko),e(z,jp),e(jp,abe),e(abe,lko),e(jp,iko),e(jp,sz),e(sz,dko),e(jp,mko),e(z,cko),e(z,Dp),e(Dp,nbe),e(nbe,fko),e(Dp,gko),e(Dp,lz),e(lz,hko),e(Dp,uko),e(z,pko),e(z,Gp),e(Gp,sbe),e(sbe,_ko),e(Gp,bko),e(Gp,iz),e(iz,vko),e(Gp,Fko),e(z,Tko),e(z,Op),e(Op,lbe),e(lbe,Mko),e(Op,Eko),e(Op,dz),e(dz,Cko),e(Op,wko),e(z,Ako),e(z,Vp),e(Vp,ibe),e(ibe,Lko),e(Vp,yko),e(Vp,mz),e(mz,xko),e(Vp,$ko),e(z,kko),e(z,Xp),e(Xp,dbe),e(dbe,Sko),e(Xp,Rko),e(Xp,cz),e(cz,Pko),e(Xp,Bko),e(z,Iko),e(z,zp),e(zp,mbe),e(mbe,Nko),e(zp,qko),e(zp,fz),e(fz,jko),e(zp,Dko),e(z,Gko),e(z,Qp),e(Qp,cbe),e(cbe,Oko),e(Qp,Vko),e(Qp,gz),e(gz,Xko),e(Qp,zko),e(z,Qko),e(z,Wp),e(Wp,fbe),e(fbe,Wko),e(Wp,Uko),e(Wp,hz),e(hz,Hko),e(Wp,Jko),e(z,Yko),e(z,Up),e(Up,gbe),e(gbe,Zko),e(Up,Kko),e(Up,uz),e(uz,eSo),e(Up,oSo),e(z,rSo),e(z,Hp),e(Hp,hbe),e(hbe,tSo),e(Hp,aSo),e(Hp,pz),e(pz,nSo),e(Hp,sSo),e(z,lSo),e(z,Jp),e(Jp,ube),e(ube,iSo),e(Jp,dSo),e(Jp,_z),e(_z,mSo),e(Jp,cSo),e(z,fSo),e(z,Yp),e(Yp,pbe),e(pbe,gSo),e(Yp,hSo),e(Yp,bz),e(bz,uSo),e(Yp,pSo),e(z,_So),e(z,Zp),e(Zp,_be),e(_be,bSo),e(Zp,vSo),e(Zp,vz),e(vz,FSo),e(Zp,TSo),e(z,MSo),e(z,Kp),e(Kp,bbe),e(bbe,ESo),e(Kp,CSo),e(Kp,Fz),e(Fz,wSo),e(Kp,ASo),e(z,LSo),e(z,e_),e(e_,vbe),e(vbe,ySo),e(e_,xSo),e(e_,Tz),e(Tz,$So),e(e_,kSo),e(z,SSo),e(z,o_),e(o_,Fbe),e(Fbe,RSo),e(o_,PSo),e(o_,Mz),e(Mz,BSo),e(o_,ISo),e(z,NSo),e(z,r_),e(r_,Tbe),e(Tbe,qSo),e(r_,jSo),e(r_,Ez),e(Ez,DSo),e(r_,GSo),e(z,OSo),e(z,t_),e(t_,Mbe),e(Mbe,VSo),e(t_,XSo),e(t_,Cz),e(Cz,zSo),e(t_,QSo),e(z,WSo),e(z,a_),e(a_,Ebe),e(Ebe,USo),e(a_,HSo),e(a_,wz),e(wz,JSo),e(a_,YSo),e(z,ZSo),e(z,n_),e(n_,Cbe),e(Cbe,KSo),e(n_,eRo),e(n_,Az),e(Az,oRo),e(n_,rRo),e(z,tRo),e(z,s_),e(s_,wbe),e(wbe,aRo),e(s_,nRo),e(s_,Lz),e(Lz,sRo),e(s_,lRo),e(z,iRo),e(z,l_),e(l_,Abe),e(Abe,dRo),e(l_,mRo),e(l_,yz),e(yz,cRo),e(l_,fRo),e(z,gRo),e(z,i_),e(i_,Lbe),e(Lbe,hRo),e(i_,uRo),e(i_,xz),e(xz,pRo),e(i_,_Ro),e(z,bRo),e(z,d_),e(d_,ybe),e(ybe,vRo),e(d_,FRo),e(d_,$z),e($z,TRo),e(d_,MRo),e(z,ERo),e(z,m_),e(m_,xbe),e(xbe,CRo),e(m_,wRo),e(m_,kz),e(kz,ARo),e(m_,LRo),e(z,yRo),e(z,c_),e(c_,$be),e($be,xRo),e(c_,$Ro),e(c_,Sz),e(Sz,kRo),e(c_,SRo),e(z,RRo),e(z,f_),e(f_,kbe),e(kbe,PRo),e(f_,BRo),e(f_,Rz),e(Rz,IRo),e(f_,NRo),e(z,qRo),e(z,g_),e(g_,Sbe),e(Sbe,jRo),e(g_,DRo),e(g_,Pz),e(Pz,GRo),e(g_,ORo),e(z,VRo),e(z,h_),e(h_,Rbe),e(Rbe,XRo),e(h_,zRo),e(h_,Bz),e(Bz,QRo),e(h_,WRo),e(z,URo),e(z,u_),e(u_,Pbe),e(Pbe,HRo),e(u_,JRo),e(u_,Iz),e(Iz,YRo),e(u_,ZRo),e(z,KRo),e(z,p_),e(p_,Bbe),e(Bbe,ePo),e(p_,oPo),e(p_,Nz),e(Nz,rPo),e(p_,tPo),e(z,aPo),e(z,__),e(__,Ibe),e(Ibe,nPo),e(__,sPo),e(__,qz),e(qz,lPo),e(__,iPo),e(z,dPo),e(z,b_),e(b_,Nbe),e(Nbe,mPo),e(b_,cPo),e(b_,jz),e(jz,fPo),e(b_,gPo),e(z,hPo),e(z,v_),e(v_,qbe),e(qbe,uPo),e(v_,pPo),e(v_,Dz),e(Dz,_Po),e(v_,bPo),e(z,vPo),e(z,F_),e(F_,jbe),e(jbe,FPo),e(F_,TPo),e(F_,Gz),e(Gz,MPo),e(F_,EPo),e(z,CPo),e(z,T_),e(T_,Dbe),e(Dbe,wPo),e(T_,APo),e(T_,Oz),e(Oz,LPo),e(T_,yPo),e(eo,xPo),M(M_,eo,null),e(eo,$Po),M(E_,eo,null),e(No,kPo),e(No,C_),M(Qk,C_,null),e(C_,SPo),e(C_,Gbe),e(Gbe,RPo),b(c,Pio,_),b(c,jd,_),e(jd,w_),e(w_,Obe),M(Wk,Obe,null),e(jd,PPo),e(jd,Vbe),e(Vbe,BPo),b(c,Bio,_),b(c,qo,_),M(Uk,qo,null),e(qo,IPo),e(qo,Hk),e(Hk,NPo),e(Hk,Vz),e(Vz,qPo),e(Hk,jPo),e(qo,DPo),e(qo,Jk),e(Jk,GPo),e(Jk,Xbe),e(Xbe,OPo),e(Jk,VPo),e(qo,XPo),e(qo,oo),M(Yk,oo,null),e(oo,zPo),e(oo,zbe),e(zbe,QPo),e(oo,WPo),e(oo,fn),e(fn,UPo),e(fn,Qbe),e(Qbe,HPo),e(fn,JPo),e(fn,Wbe),e(Wbe,YPo),e(fn,ZPo),e(fn,Ube),e(Ube,KPo),e(fn,eBo),e(oo,oBo),e(oo,oe),e(oe,A_),e(A_,Hbe),e(Hbe,rBo),e(A_,tBo),e(A_,Xz),e(Xz,aBo),e(A_,nBo),e(oe,sBo),e(oe,L_),e(L_,Jbe),e(Jbe,lBo),e(L_,iBo),e(L_,zz),e(zz,dBo),e(L_,mBo),e(oe,cBo),e(oe,y_),e(y_,Ybe),e(Ybe,fBo),e(y_,gBo),e(y_,Qz),e(Qz,hBo),e(y_,uBo),e(oe,pBo),e(oe,x_),e(x_,Zbe),e(Zbe,_Bo),e(x_,bBo),e(x_,Wz),e(Wz,vBo),e(x_,FBo),e(oe,TBo),e(oe,$_),e($_,Kbe),e(Kbe,MBo),e($_,EBo),e($_,Uz),e(Uz,CBo),e($_,wBo),e(oe,ABo),e(oe,k_),e(k_,eve),e(eve,LBo),e(k_,yBo),e(k_,Hz),e(Hz,xBo),e(k_,$Bo),e(oe,kBo),e(oe,S_),e(S_,ove),e(ove,SBo),e(S_,RBo),e(S_,Jz),e(Jz,PBo),e(S_,BBo),e(oe,IBo),e(oe,R_),e(R_,rve),e(rve,NBo),e(R_,qBo),e(R_,Yz),e(Yz,jBo),e(R_,DBo),e(oe,GBo),e(oe,P_),e(P_,tve),e(tve,OBo),e(P_,VBo),e(P_,Zz),e(Zz,XBo),e(P_,zBo),e(oe,QBo),e(oe,B_),e(B_,ave),e(ave,WBo),e(B_,UBo),e(B_,Kz),e(Kz,HBo),e(B_,JBo),e(oe,YBo),e(oe,I_),e(I_,nve),e(nve,ZBo),e(I_,KBo),e(I_,eQ),e(eQ,eIo),e(I_,oIo),e(oe,rIo),e(oe,N_),e(N_,sve),e(sve,tIo),e(N_,aIo),e(N_,oQ),e(oQ,nIo),e(N_,sIo),e(oe,lIo),e(oe,q_),e(q_,lve),e(lve,iIo),e(q_,dIo),e(q_,rQ),e(rQ,mIo),e(q_,cIo),e(oe,fIo),e(oe,j_),e(j_,ive),e(ive,gIo),e(j_,hIo),e(j_,tQ),e(tQ,uIo),e(j_,pIo),e(oe,_Io),e(oe,D_),e(D_,dve),e(dve,bIo),e(D_,vIo),e(D_,aQ),e(aQ,FIo),e(D_,TIo),e(oe,MIo),e(oe,G_),e(G_,mve),e(mve,EIo),e(G_,CIo),e(G_,nQ),e(nQ,wIo),e(G_,AIo),e(oe,LIo),e(oe,O_),e(O_,cve),e(cve,yIo),e(O_,xIo),e(O_,sQ),e(sQ,$Io),e(O_,kIo),e(oe,SIo),e(oe,V_),e(V_,fve),e(fve,RIo),e(V_,PIo),e(V_,lQ),e(lQ,BIo),e(V_,IIo),e(oe,NIo),e(oe,X_),e(X_,gve),e(gve,qIo),e(X_,jIo),e(X_,iQ),e(iQ,DIo),e(X_,GIo),e(oe,OIo),e(oe,z_),e(z_,hve),e(hve,VIo),e(z_,XIo),e(z_,dQ),e(dQ,zIo),e(z_,QIo),e(oe,WIo),e(oe,Q_),e(Q_,uve),e(uve,UIo),e(Q_,HIo),e(Q_,mQ),e(mQ,JIo),e(Q_,YIo),e(oe,ZIo),e(oe,W_),e(W_,pve),e(pve,KIo),e(W_,eNo),e(W_,cQ),e(cQ,oNo),e(W_,rNo),e(oe,tNo),e(oe,U_),e(U_,_ve),e(_ve,aNo),e(U_,nNo),e(U_,fQ),e(fQ,sNo),e(U_,lNo),e(oe,iNo),e(oe,H_),e(H_,bve),e(bve,dNo),e(H_,mNo),e(H_,gQ),e(gQ,cNo),e(H_,fNo),e(oe,gNo),e(oe,J_),e(J_,vve),e(vve,hNo),e(J_,uNo),e(J_,hQ),e(hQ,pNo),e(J_,_No),e(oe,bNo),e(oe,Y_),e(Y_,Fve),e(Fve,vNo),e(Y_,FNo),e(Y_,uQ),e(uQ,TNo),e(Y_,MNo),e(oe,ENo),e(oe,Z_),e(Z_,Tve),e(Tve,CNo),e(Z_,wNo),e(Z_,pQ),e(pQ,ANo),e(Z_,LNo),e(oe,yNo),e(oe,K_),e(K_,Mve),e(Mve,xNo),e(K_,$No),e(K_,_Q),e(_Q,kNo),e(K_,SNo),e(oe,RNo),e(oe,e1),e(e1,Eve),e(Eve,PNo),e(e1,BNo),e(e1,bQ),e(bQ,INo),e(e1,NNo),e(oe,qNo),e(oe,o1),e(o1,Cve),e(Cve,jNo),e(o1,DNo),e(o1,vQ),e(vQ,GNo),e(o1,ONo),e(oo,VNo),M(r1,oo,null),e(oo,XNo),M(t1,oo,null),e(qo,zNo),e(qo,a1),M(Zk,a1,null),e(a1,QNo),e(a1,wve),e(wve,WNo),b(c,Iio,_),b(c,Dd,_),e(Dd,n1),e(n1,Ave),M(Kk,Ave,null),e(Dd,UNo),e(Dd,Lve),e(Lve,HNo),b(c,Nio,_),b(c,jo,_),M(eS,jo,null),e(jo,JNo),e(jo,oS),e(oS,YNo),e(oS,FQ),e(FQ,ZNo),e(oS,KNo),e(jo,eqo),e(jo,rS),e(rS,oqo),e(rS,yve),e(yve,rqo),e(rS,tqo),e(jo,aqo),e(jo,ro),M(tS,ro,null),e(ro,nqo),e(ro,xve),e(xve,sqo),e(ro,lqo),e(ro,Gd),e(Gd,iqo),e(Gd,$ve),e($ve,dqo),e(Gd,mqo),e(Gd,kve),e(kve,cqo),e(Gd,fqo),e(ro,gqo),e(ro,ie),e(ie,s1),e(s1,Sve),e(Sve,hqo),e(s1,uqo),e(s1,TQ),e(TQ,pqo),e(s1,_qo),e(ie,bqo),e(ie,l1),e(l1,Rve),e(Rve,vqo),e(l1,Fqo),e(l1,MQ),e(MQ,Tqo),e(l1,Mqo),e(ie,Eqo),e(ie,i1),e(i1,Pve),e(Pve,Cqo),e(i1,wqo),e(i1,EQ),e(EQ,Aqo),e(i1,Lqo),e(ie,yqo),e(ie,d1),e(d1,Bve),e(Bve,xqo),e(d1,$qo),e(d1,CQ),e(CQ,kqo),e(d1,Sqo),e(ie,Rqo),e(ie,m1),e(m1,Ive),e(Ive,Pqo),e(m1,Bqo),e(m1,wQ),e(wQ,Iqo),e(m1,Nqo),e(ie,qqo),e(ie,c1),e(c1,Nve),e(Nve,jqo),e(c1,Dqo),e(c1,AQ),e(AQ,Gqo),e(c1,Oqo),e(ie,Vqo),e(ie,f1),e(f1,qve),e(qve,Xqo),e(f1,zqo),e(f1,LQ),e(LQ,Qqo),e(f1,Wqo),e(ie,Uqo),e(ie,g1),e(g1,jve),e(jve,Hqo),e(g1,Jqo),e(g1,yQ),e(yQ,Yqo),e(g1,Zqo),e(ie,Kqo),e(ie,h1),e(h1,Dve),e(Dve,ejo),e(h1,ojo),e(h1,xQ),e(xQ,rjo),e(h1,tjo),e(ie,ajo),e(ie,u1),e(u1,Gve),e(Gve,njo),e(u1,sjo),e(u1,$Q),e($Q,ljo),e(u1,ijo),e(ie,djo),e(ie,p1),e(p1,Ove),e(Ove,mjo),e(p1,cjo),e(p1,kQ),e(kQ,fjo),e(p1,gjo),e(ie,hjo),e(ie,_1),e(_1,Vve),e(Vve,ujo),e(_1,pjo),e(_1,SQ),e(SQ,_jo),e(_1,bjo),e(ie,vjo),e(ie,b1),e(b1,Xve),e(Xve,Fjo),e(b1,Tjo),e(b1,RQ),e(RQ,Mjo),e(b1,Ejo),e(ie,Cjo),e(ie,v1),e(v1,zve),e(zve,wjo),e(v1,Ajo),e(v1,PQ),e(PQ,Ljo),e(v1,yjo),e(ie,xjo),e(ie,F1),e(F1,Qve),e(Qve,$jo),e(F1,kjo),e(F1,BQ),e(BQ,Sjo),e(F1,Rjo),e(ie,Pjo),e(ie,T1),e(T1,Wve),e(Wve,Bjo),e(T1,Ijo),e(T1,IQ),e(IQ,Njo),e(T1,qjo),e(ie,jjo),e(ie,M1),e(M1,Uve),e(Uve,Djo),e(M1,Gjo),e(M1,NQ),e(NQ,Ojo),e(M1,Vjo),e(ie,Xjo),e(ie,E1),e(E1,Hve),e(Hve,zjo),e(E1,Qjo),e(E1,qQ),e(qQ,Wjo),e(E1,Ujo),e(ie,Hjo),e(ie,C1),e(C1,Jve),e(Jve,Jjo),e(C1,Yjo),e(C1,jQ),e(jQ,Zjo),e(C1,Kjo),e(ie,eDo),e(ie,w1),e(w1,Yve),e(Yve,oDo),e(w1,rDo),e(w1,DQ),e(DQ,tDo),e(w1,aDo),e(ie,nDo),e(ie,A1),e(A1,Zve),e(Zve,sDo),e(A1,lDo),e(A1,GQ),e(GQ,iDo),e(A1,dDo),e(ie,mDo),e(ie,L1),e(L1,Kve),e(Kve,cDo),e(L1,fDo),e(L1,OQ),e(OQ,gDo),e(L1,hDo),e(ie,uDo),e(ie,y1),e(y1,eFe),e(eFe,pDo),e(y1,_Do),e(y1,VQ),e(VQ,bDo),e(y1,vDo),e(ro,FDo),M(x1,ro,null),e(ro,TDo),M($1,ro,null),e(jo,MDo),e(jo,k1),M(aS,k1,null),e(k1,EDo),e(k1,oFe),e(oFe,CDo),b(c,qio,_),b(c,Od,_),e(Od,S1),e(S1,rFe),M(nS,rFe,null),e(Od,wDo),e(Od,tFe),e(tFe,ADo),b(c,jio,_),b(c,Do,_),M(sS,Do,null),e(Do,LDo),e(Do,Vd),e(Vd,yDo),e(Vd,XQ),e(XQ,xDo),e(Vd,$Do),e(Vd,zQ),e(zQ,kDo),e(Vd,SDo),e(Do,RDo),e(Do,lS),e(lS,PDo),e(lS,aFe),e(aFe,BDo),e(lS,IDo),e(Do,NDo),e(Do,At),M(iS,At,null),e(At,qDo),e(At,nFe),e(nFe,jDo),e(At,DDo),e(At,Xd),e(Xd,GDo),e(Xd,sFe),e(sFe,ODo),e(Xd,VDo),e(Xd,QQ),e(QQ,XDo),e(Xd,zDo),e(At,QDo),M(R1,At,null),e(Do,WDo),e(Do,to),M(dS,to,null),e(to,UDo),e(to,lFe),e(lFe,HDo),e(to,JDo),e(to,gn),e(gn,YDo),e(gn,iFe),e(iFe,ZDo),e(gn,KDo),e(gn,dFe),e(dFe,eGo),e(gn,oGo),e(gn,mFe),e(mFe,rGo),e(gn,tGo),e(to,aGo),e(to,y),e(y,P1),e(P1,cFe),e(cFe,nGo),e(P1,sGo),e(P1,WQ),e(WQ,lGo),e(P1,iGo),e(y,dGo),e(y,B1),e(B1,fFe),e(fFe,mGo),e(B1,cGo),e(B1,UQ),e(UQ,fGo),e(B1,gGo),e(y,hGo),e(y,I1),e(I1,gFe),e(gFe,uGo),e(I1,pGo),e(I1,HQ),e(HQ,_Go),e(I1,bGo),e(y,vGo),e(y,N1),e(N1,hFe),e(hFe,FGo),e(N1,TGo),e(N1,JQ),e(JQ,MGo),e(N1,EGo),e(y,CGo),e(y,q1),e(q1,uFe),e(uFe,wGo),e(q1,AGo),e(q1,YQ),e(YQ,LGo),e(q1,yGo),e(y,xGo),e(y,j1),e(j1,pFe),e(pFe,$Go),e(j1,kGo),e(j1,ZQ),e(ZQ,SGo),e(j1,RGo),e(y,PGo),e(y,D1),e(D1,_Fe),e(_Fe,BGo),e(D1,IGo),e(D1,KQ),e(KQ,NGo),e(D1,qGo),e(y,jGo),e(y,G1),e(G1,bFe),e(bFe,DGo),e(G1,GGo),e(G1,eW),e(eW,OGo),e(G1,VGo),e(y,XGo),e(y,O1),e(O1,vFe),e(vFe,zGo),e(O1,QGo),e(O1,oW),e(oW,WGo),e(O1,UGo),e(y,HGo),e(y,V1),e(V1,FFe),e(FFe,JGo),e(V1,YGo),e(V1,rW),e(rW,ZGo),e(V1,KGo),e(y,eOo),e(y,X1),e(X1,TFe),e(TFe,oOo),e(X1,rOo),e(X1,tW),e(tW,tOo),e(X1,aOo),e(y,nOo),e(y,z1),e(z1,MFe),e(MFe,sOo),e(z1,lOo),e(z1,aW),e(aW,iOo),e(z1,dOo),e(y,mOo),e(y,Q1),e(Q1,EFe),e(EFe,cOo),e(Q1,fOo),e(Q1,nW),e(nW,gOo),e(Q1,hOo),e(y,uOo),e(y,W1),e(W1,CFe),e(CFe,pOo),e(W1,_Oo),e(W1,sW),e(sW,bOo),e(W1,vOo),e(y,FOo),e(y,U1),e(U1,wFe),e(wFe,TOo),e(U1,MOo),e(U1,lW),e(lW,EOo),e(U1,COo),e(y,wOo),e(y,H1),e(H1,AFe),e(AFe,AOo),e(H1,LOo),e(H1,iW),e(iW,yOo),e(H1,xOo),e(y,$Oo),e(y,J1),e(J1,LFe),e(LFe,kOo),e(J1,SOo),e(J1,dW),e(dW,ROo),e(J1,POo),e(y,BOo),e(y,Y1),e(Y1,yFe),e(yFe,IOo),e(Y1,NOo),e(Y1,mW),e(mW,qOo),e(Y1,jOo),e(y,DOo),e(y,Z1),e(Z1,xFe),e(xFe,GOo),e(Z1,OOo),e(Z1,cW),e(cW,VOo),e(Z1,XOo),e(y,zOo),e(y,K1),e(K1,$Fe),e($Fe,QOo),e(K1,WOo),e(K1,fW),e(fW,UOo),e(K1,HOo),e(y,JOo),e(y,e2),e(e2,kFe),e(kFe,YOo),e(e2,ZOo),e(e2,gW),e(gW,KOo),e(e2,eVo),e(y,oVo),e(y,o2),e(o2,SFe),e(SFe,rVo),e(o2,tVo),e(o2,hW),e(hW,aVo),e(o2,nVo),e(y,sVo),e(y,r2),e(r2,RFe),e(RFe,lVo),e(r2,iVo),e(r2,uW),e(uW,dVo),e(r2,mVo),e(y,cVo),e(y,t2),e(t2,PFe),e(PFe,fVo),e(t2,gVo),e(t2,pW),e(pW,hVo),e(t2,uVo),e(y,pVo),e(y,a2),e(a2,BFe),e(BFe,_Vo),e(a2,bVo),e(a2,_W),e(_W,vVo),e(a2,FVo),e(y,TVo),e(y,n2),e(n2,IFe),e(IFe,MVo),e(n2,EVo),e(n2,bW),e(bW,CVo),e(n2,wVo),e(y,AVo),e(y,s2),e(s2,NFe),e(NFe,LVo),e(s2,yVo),e(s2,vW),e(vW,xVo),e(s2,$Vo),e(y,kVo),e(y,l2),e(l2,qFe),e(qFe,SVo),e(l2,RVo),e(l2,FW),e(FW,PVo),e(l2,BVo),e(y,IVo),e(y,i2),e(i2,jFe),e(jFe,NVo),e(i2,qVo),e(i2,TW),e(TW,jVo),e(i2,DVo),e(y,GVo),e(y,d2),e(d2,DFe),e(DFe,OVo),e(d2,VVo),e(d2,MW),e(MW,XVo),e(d2,zVo),e(y,QVo),e(y,m2),e(m2,GFe),e(GFe,WVo),e(m2,UVo),e(m2,EW),e(EW,HVo),e(m2,JVo),e(y,YVo),e(y,c2),e(c2,OFe),e(OFe,ZVo),e(c2,KVo),e(c2,CW),e(CW,eXo),e(c2,oXo),e(y,rXo),e(y,f2),e(f2,VFe),e(VFe,tXo),e(f2,aXo),e(f2,wW),e(wW,nXo),e(f2,sXo),e(y,lXo),e(y,g2),e(g2,XFe),e(XFe,iXo),e(g2,dXo),e(g2,AW),e(AW,mXo),e(g2,cXo),e(y,fXo),e(y,h2),e(h2,zFe),e(zFe,gXo),e(h2,hXo),e(h2,LW),e(LW,uXo),e(h2,pXo),e(y,_Xo),e(y,u2),e(u2,QFe),e(QFe,bXo),e(u2,vXo),e(u2,yW),e(yW,FXo),e(u2,TXo),e(y,MXo),e(y,p2),e(p2,WFe),e(WFe,EXo),e(p2,CXo),e(p2,xW),e(xW,wXo),e(p2,AXo),e(y,LXo),e(y,_2),e(_2,UFe),e(UFe,yXo),e(_2,xXo),e(_2,$W),e($W,$Xo),e(_2,kXo),e(y,SXo),e(y,b2),e(b2,HFe),e(HFe,RXo),e(b2,PXo),e(b2,kW),e(kW,BXo),e(b2,IXo),e(y,NXo),e(y,v2),e(v2,JFe),e(JFe,qXo),e(v2,jXo),e(v2,SW),e(SW,DXo),e(v2,GXo),e(y,OXo),e(y,ql),e(ql,YFe),e(YFe,VXo),e(ql,XXo),e(ql,RW),e(RW,zXo),e(ql,QXo),e(ql,PW),e(PW,WXo),e(ql,UXo),e(y,HXo),e(y,F2),e(F2,ZFe),e(ZFe,JXo),e(F2,YXo),e(F2,BW),e(BW,ZXo),e(F2,KXo),e(y,ezo),e(y,T2),e(T2,KFe),e(KFe,ozo),e(T2,rzo),e(T2,IW),e(IW,tzo),e(T2,azo),e(y,nzo),e(y,M2),e(M2,eTe),e(eTe,szo),e(M2,lzo),e(M2,NW),e(NW,izo),e(M2,dzo),e(y,mzo),e(y,E2),e(E2,oTe),e(oTe,czo),e(E2,fzo),e(E2,qW),e(qW,gzo),e(E2,hzo),e(y,uzo),e(y,C2),e(C2,rTe),e(rTe,pzo),e(C2,_zo),e(C2,jW),e(jW,bzo),e(C2,vzo),e(y,Fzo),e(y,w2),e(w2,tTe),e(tTe,Tzo),e(w2,Mzo),e(w2,DW),e(DW,Ezo),e(w2,Czo),e(y,wzo),e(y,A2),e(A2,aTe),e(aTe,Azo),e(A2,Lzo),e(A2,GW),e(GW,yzo),e(A2,xzo),e(y,$zo),e(y,L2),e(L2,nTe),e(nTe,kzo),e(L2,Szo),e(L2,OW),e(OW,Rzo),e(L2,Pzo),e(y,Bzo),e(y,y2),e(y2,sTe),e(sTe,Izo),e(y2,Nzo),e(y2,VW),e(VW,qzo),e(y2,jzo),e(y,Dzo),e(y,x2),e(x2,lTe),e(lTe,Gzo),e(x2,Ozo),e(x2,XW),e(XW,Vzo),e(x2,Xzo),e(y,zzo),e(y,$2),e($2,iTe),e(iTe,Qzo),e($2,Wzo),e($2,zW),e(zW,Uzo),e($2,Hzo),e(y,Jzo),e(y,k2),e(k2,dTe),e(dTe,Yzo),e(k2,Zzo),e(k2,QW),e(QW,Kzo),e(k2,eQo),e(y,oQo),e(y,S2),e(S2,mTe),e(mTe,rQo),e(S2,tQo),e(S2,WW),e(WW,aQo),e(S2,nQo),e(y,sQo),e(y,R2),e(R2,cTe),e(cTe,lQo),e(R2,iQo),e(R2,UW),e(UW,dQo),e(R2,mQo),e(y,cQo),e(y,P2),e(P2,fTe),e(fTe,fQo),e(P2,gQo),e(P2,HW),e(HW,hQo),e(P2,uQo),e(y,pQo),e(y,B2),e(B2,gTe),e(gTe,_Qo),e(B2,bQo),e(B2,JW),e(JW,vQo),e(B2,FQo),e(y,TQo),e(y,I2),e(I2,hTe),e(hTe,MQo),e(I2,EQo),e(I2,YW),e(YW,CQo),e(I2,wQo),e(y,AQo),e(y,N2),e(N2,uTe),e(uTe,LQo),e(N2,yQo),e(N2,ZW),e(ZW,xQo),e(N2,$Qo),e(y,kQo),e(y,q2),e(q2,pTe),e(pTe,SQo),e(q2,RQo),e(q2,KW),e(KW,PQo),e(q2,BQo),e(y,IQo),e(y,j2),e(j2,_Te),e(_Te,NQo),e(j2,qQo),e(j2,eU),e(eU,jQo),e(j2,DQo),e(y,GQo),e(y,D2),e(D2,bTe),e(bTe,OQo),e(D2,VQo),e(D2,oU),e(oU,XQo),e(D2,zQo),e(y,QQo),e(y,G2),e(G2,vTe),e(vTe,WQo),e(G2,UQo),e(G2,rU),e(rU,HQo),e(G2,JQo),e(y,YQo),e(y,O2),e(O2,FTe),e(FTe,ZQo),e(O2,KQo),e(O2,tU),e(tU,eWo),e(O2,oWo),e(y,rWo),e(y,V2),e(V2,TTe),e(TTe,tWo),e(V2,aWo),e(V2,aU),e(aU,nWo),e(V2,sWo),e(y,lWo),e(y,X2),e(X2,MTe),e(MTe,iWo),e(X2,dWo),e(X2,nU),e(nU,mWo),e(X2,cWo),e(y,fWo),e(y,z2),e(z2,ETe),e(ETe,gWo),e(z2,hWo),e(z2,sU),e(sU,uWo),e(z2,pWo),e(y,_Wo),e(y,Q2),e(Q2,CTe),e(CTe,bWo),e(Q2,vWo),e(Q2,lU),e(lU,FWo),e(Q2,TWo),e(y,MWo),e(y,W2),e(W2,wTe),e(wTe,EWo),e(W2,CWo),e(W2,iU),e(iU,wWo),e(W2,AWo),e(y,LWo),e(y,U2),e(U2,ATe),e(ATe,yWo),e(U2,xWo),e(U2,dU),e(dU,$Wo),e(U2,kWo),e(y,SWo),e(y,H2),e(H2,LTe),e(LTe,RWo),e(H2,PWo),e(H2,mU),e(mU,BWo),e(H2,IWo),e(y,NWo),e(y,J2),e(J2,yTe),e(yTe,qWo),e(J2,jWo),e(J2,cU),e(cU,DWo),e(J2,GWo),e(y,OWo),e(y,Y2),e(Y2,xTe),e(xTe,VWo),e(Y2,XWo),e(Y2,fU),e(fU,zWo),e(Y2,QWo),e(y,WWo),e(y,Z2),e(Z2,$Te),e($Te,UWo),e(Z2,HWo),e(Z2,gU),e(gU,JWo),e(Z2,YWo),e(y,ZWo),e(y,K2),e(K2,kTe),e(kTe,KWo),e(K2,eUo),e(K2,hU),e(hU,oUo),e(K2,rUo),e(y,tUo),e(y,eb),e(eb,STe),e(STe,aUo),e(eb,nUo),e(eb,uU),e(uU,sUo),e(eb,lUo),e(y,iUo),e(y,ob),e(ob,RTe),e(RTe,dUo),e(ob,mUo),e(ob,pU),e(pU,cUo),e(ob,fUo),e(y,gUo),e(y,rb),e(rb,PTe),e(PTe,hUo),e(rb,uUo),e(rb,_U),e(_U,pUo),e(rb,_Uo),e(y,bUo),e(y,tb),e(tb,BTe),e(BTe,vUo),e(tb,FUo),e(tb,bU),e(bU,TUo),e(tb,MUo),e(y,EUo),e(y,ab),e(ab,ITe),e(ITe,CUo),e(ab,wUo),e(ab,vU),e(vU,AUo),e(ab,LUo),e(y,yUo),e(y,nb),e(nb,NTe),e(NTe,xUo),e(nb,$Uo),e(nb,FU),e(FU,kUo),e(nb,SUo),e(y,RUo),e(y,sb),e(sb,qTe),e(qTe,PUo),e(sb,BUo),e(sb,TU),e(TU,IUo),e(sb,NUo),e(y,qUo),e(y,lb),e(lb,jTe),e(jTe,jUo),e(lb,DUo),e(lb,MU),e(MU,GUo),e(lb,OUo),e(y,VUo),e(y,ib),e(ib,DTe),e(DTe,XUo),e(ib,zUo),e(ib,EU),e(EU,QUo),e(ib,WUo),e(y,UUo),e(y,db),e(db,GTe),e(GTe,HUo),e(db,JUo),e(db,CU),e(CU,YUo),e(db,ZUo),e(y,KUo),e(y,mb),e(mb,OTe),e(OTe,eHo),e(mb,oHo),e(mb,wU),e(wU,rHo),e(mb,tHo),e(y,aHo),e(y,cb),e(cb,VTe),e(VTe,nHo),e(cb,sHo),e(cb,AU),e(AU,lHo),e(cb,iHo),e(y,dHo),e(y,fb),e(fb,XTe),e(XTe,mHo),e(fb,cHo),e(fb,LU),e(LU,fHo),e(fb,gHo),e(y,hHo),e(y,gb),e(gb,zTe),e(zTe,uHo),e(gb,pHo),e(gb,yU),e(yU,_Ho),e(gb,bHo),e(y,vHo),e(y,hb),e(hb,QTe),e(QTe,FHo),e(hb,THo),e(hb,xU),e(xU,MHo),e(hb,EHo),e(y,CHo),e(y,ub),e(ub,WTe),e(WTe,wHo),e(ub,AHo),e(ub,$U),e($U,LHo),e(ub,yHo),e(y,xHo),e(y,pb),e(pb,UTe),e(UTe,$Ho),e(pb,kHo),e(pb,kU),e(kU,SHo),e(pb,RHo),e(y,PHo),e(y,_b),e(_b,HTe),e(HTe,BHo),e(_b,IHo),e(_b,SU),e(SU,NHo),e(_b,qHo),e(y,jHo),e(y,bb),e(bb,JTe),e(JTe,DHo),e(bb,GHo),e(bb,RU),e(RU,OHo),e(bb,VHo),e(y,XHo),e(y,vb),e(vb,YTe),e(YTe,zHo),e(vb,QHo),e(vb,PU),e(PU,WHo),e(vb,UHo),e(y,HHo),e(y,Fb),e(Fb,ZTe),e(ZTe,JHo),e(Fb,YHo),e(Fb,BU),e(BU,ZHo),e(Fb,KHo),e(y,eJo),e(y,Tb),e(Tb,KTe),e(KTe,oJo),e(Tb,rJo),e(Tb,IU),e(IU,tJo),e(Tb,aJo),e(y,nJo),e(y,Mb),e(Mb,eMe),e(eMe,sJo),e(Mb,lJo),e(Mb,NU),e(NU,iJo),e(Mb,dJo),e(y,mJo),e(y,Eb),e(Eb,oMe),e(oMe,cJo),e(Eb,fJo),e(Eb,qU),e(qU,gJo),e(Eb,hJo),e(y,uJo),e(y,Cb),e(Cb,rMe),e(rMe,pJo),e(Cb,_Jo),e(Cb,jU),e(jU,bJo),e(Cb,vJo),e(y,FJo),e(y,wb),e(wb,tMe),e(tMe,TJo),e(wb,MJo),e(wb,DU),e(DU,EJo),e(wb,CJo),e(y,wJo),e(y,Ab),e(Ab,aMe),e(aMe,AJo),e(Ab,LJo),e(Ab,GU),e(GU,yJo),e(Ab,xJo),e(y,$Jo),e(y,Lb),e(Lb,nMe),e(nMe,kJo),e(Lb,SJo),e(Lb,OU),e(OU,RJo),e(Lb,PJo),e(y,BJo),e(y,yb),e(yb,sMe),e(sMe,IJo),e(yb,NJo),e(yb,VU),e(VU,qJo),e(yb,jJo),e(y,DJo),e(y,xb),e(xb,lMe),e(lMe,GJo),e(xb,OJo),e(xb,XU),e(XU,VJo),e(xb,XJo),e(y,zJo),e(y,$b),e($b,iMe),e(iMe,QJo),e($b,WJo),e($b,zU),e(zU,UJo),e($b,HJo),e(y,JJo),e(y,kb),e(kb,dMe),e(dMe,YJo),e(kb,ZJo),e(kb,QU),e(QU,KJo),e(kb,eYo),e(y,oYo),e(y,Sb),e(Sb,mMe),e(mMe,rYo),e(Sb,tYo),e(Sb,WU),e(WU,aYo),e(Sb,nYo),e(y,sYo),e(y,Rb),e(Rb,cMe),e(cMe,lYo),e(Rb,iYo),e(Rb,UU),e(UU,dYo),e(Rb,mYo),e(y,cYo),e(y,Pb),e(Pb,fMe),e(fMe,fYo),e(Pb,gYo),e(Pb,HU),e(HU,hYo),e(Pb,uYo),e(y,pYo),e(y,Bb),e(Bb,gMe),e(gMe,_Yo),e(Bb,bYo),e(Bb,JU),e(JU,vYo),e(Bb,FYo),e(y,TYo),e(y,Ib),e(Ib,hMe),e(hMe,MYo),e(Ib,EYo),e(Ib,YU),e(YU,CYo),e(Ib,wYo),e(y,AYo),e(y,Nb),e(Nb,uMe),e(uMe,LYo),e(Nb,yYo),e(Nb,ZU),e(ZU,xYo),e(Nb,$Yo),e(y,kYo),e(y,qb),e(qb,pMe),e(pMe,SYo),e(qb,RYo),e(qb,KU),e(KU,PYo),e(qb,BYo),e(y,IYo),e(y,jb),e(jb,_Me),e(_Me,NYo),e(jb,qYo),e(jb,eH),e(eH,jYo),e(jb,DYo),e(y,GYo),e(y,Db),e(Db,bMe),e(bMe,OYo),e(Db,VYo),e(Db,oH),e(oH,XYo),e(Db,zYo),e(y,QYo),e(y,Gb),e(Gb,vMe),e(vMe,WYo),e(Gb,UYo),e(Gb,rH),e(rH,HYo),e(Gb,JYo),e(y,YYo),e(y,Ob),e(Ob,FMe),e(FMe,ZYo),e(Ob,KYo),e(Ob,tH),e(tH,eZo),e(Ob,oZo),e(y,rZo),e(y,Vb),e(Vb,TMe),e(TMe,tZo),e(Vb,aZo),e(Vb,aH),e(aH,nZo),e(Vb,sZo),e(y,lZo),e(y,Xb),e(Xb,MMe),e(MMe,iZo),e(Xb,dZo),e(Xb,nH),e(nH,mZo),e(Xb,cZo),e(y,fZo),e(y,zb),e(zb,EMe),e(EMe,gZo),e(zb,hZo),e(zb,sH),e(sH,uZo),e(zb,pZo),e(y,_Zo),e(y,Qb),e(Qb,CMe),e(CMe,bZo),e(Qb,vZo),e(Qb,lH),e(lH,FZo),e(Qb,TZo),e(y,MZo),e(y,Wb),e(Wb,wMe),e(wMe,EZo),e(Wb,CZo),e(Wb,iH),e(iH,wZo),e(Wb,AZo),e(y,LZo),e(y,Ub),e(Ub,AMe),e(AMe,yZo),e(Ub,xZo),e(Ub,dH),e(dH,$Zo),e(Ub,kZo),e(y,SZo),e(y,Hb),e(Hb,LMe),e(LMe,RZo),e(Hb,PZo),e(Hb,mH),e(mH,BZo),e(Hb,IZo),e(y,NZo),e(y,Jb),e(Jb,yMe),e(yMe,qZo),e(Jb,jZo),e(Jb,cH),e(cH,DZo),e(Jb,GZo),e(y,OZo),e(y,Yb),e(Yb,xMe),e(xMe,VZo),e(Yb,XZo),e(Yb,fH),e(fH,zZo),e(Yb,QZo),e(y,WZo),e(y,Zb),e(Zb,$Me),e($Me,UZo),e(Zb,HZo),e(Zb,gH),e(gH,JZo),e(Zb,YZo),e(y,ZZo),e(y,Kb),e(Kb,kMe),e(kMe,KZo),e(Kb,eKo),e(Kb,hH),e(hH,oKo),e(Kb,rKo),e(y,tKo),e(y,ev),e(ev,SMe),e(SMe,aKo),e(ev,nKo),e(ev,uH),e(uH,sKo),e(ev,lKo),e(y,iKo),e(y,ov),e(ov,RMe),e(RMe,dKo),e(ov,mKo),e(ov,pH),e(pH,cKo),e(ov,fKo),e(y,gKo),e(y,rv),e(rv,PMe),e(PMe,hKo),e(rv,uKo),e(rv,_H),e(_H,pKo),e(rv,_Ko),e(y,bKo),e(y,tv),e(tv,BMe),e(BMe,vKo),e(tv,FKo),e(tv,bH),e(bH,TKo),e(tv,MKo),e(y,EKo),e(y,av),e(av,IMe),e(IMe,CKo),e(av,wKo),e(av,vH),e(vH,AKo),e(av,LKo),e(to,yKo),e(to,nv),e(nv,xKo),e(nv,NMe),e(NMe,$Ko),e(nv,kKo),e(nv,qMe),e(qMe,SKo),e(to,RKo),M(sv,to,null),b(c,Dio,_),b(c,zd,_),e(zd,lv),e(lv,jMe),M(mS,jMe,null),e(zd,PKo),e(zd,DMe),e(DMe,BKo),b(c,Gio,_),b(c,Go,_),M(cS,Go,null),e(Go,IKo),e(Go,Qd),e(Qd,NKo),e(Qd,FH),e(FH,qKo),e(Qd,jKo),e(Qd,TH),e(TH,DKo),e(Qd,GKo),e(Go,OKo),e(Go,fS),e(fS,VKo),e(fS,GMe),e(GMe,XKo),e(fS,zKo),e(Go,QKo),e(Go,Lt),M(gS,Lt,null),e(Lt,WKo),e(Lt,OMe),e(OMe,UKo),e(Lt,HKo),e(Lt,Wd),e(Wd,JKo),e(Wd,VMe),e(VMe,YKo),e(Wd,ZKo),e(Wd,MH),e(MH,KKo),e(Wd,eer),e(Lt,oer),M(iv,Lt,null),e(Go,rer),e(Go,ao),M(hS,ao,null),e(ao,ter),e(ao,XMe),e(XMe,aer),e(ao,ner),e(ao,hn),e(hn,ser),e(hn,zMe),e(zMe,ler),e(hn,ier),e(hn,QMe),e(QMe,der),e(hn,mer),e(hn,WMe),e(WMe,cer),e(hn,fer),e(ao,ger),e(ao,G),e(G,dv),e(dv,UMe),e(UMe,her),e(dv,uer),e(dv,EH),e(EH,per),e(dv,_er),e(G,ber),e(G,mv),e(mv,HMe),e(HMe,ver),e(mv,Fer),e(mv,CH),e(CH,Ter),e(mv,Mer),e(G,Eer),e(G,cv),e(cv,JMe),e(JMe,Cer),e(cv,wer),e(cv,wH),e(wH,Aer),e(cv,Ler),e(G,yer),e(G,fv),e(fv,YMe),e(YMe,xer),e(fv,$er),e(fv,AH),e(AH,ker),e(fv,Ser),e(G,Rer),e(G,gv),e(gv,ZMe),e(ZMe,Per),e(gv,Ber),e(gv,LH),e(LH,Ier),e(gv,Ner),e(G,qer),e(G,hv),e(hv,KMe),e(KMe,jer),e(hv,Der),e(hv,yH),e(yH,Ger),e(hv,Oer),e(G,Ver),e(G,uv),e(uv,eEe),e(eEe,Xer),e(uv,zer),e(uv,xH),e(xH,Qer),e(uv,Wer),e(G,Uer),e(G,pv),e(pv,oEe),e(oEe,Her),e(pv,Jer),e(pv,$H),e($H,Yer),e(pv,Zer),e(G,Ker),e(G,_v),e(_v,rEe),e(rEe,eor),e(_v,oor),e(_v,kH),e(kH,ror),e(_v,tor),e(G,aor),e(G,bv),e(bv,tEe),e(tEe,nor),e(bv,sor),e(bv,SH),e(SH,lor),e(bv,ior),e(G,dor),e(G,vv),e(vv,aEe),e(aEe,mor),e(vv,cor),e(vv,RH),e(RH,gor),e(vv,hor),e(G,uor),e(G,Fv),e(Fv,nEe),e(nEe,por),e(Fv,_or),e(Fv,PH),e(PH,bor),e(Fv,vor),e(G,For),e(G,Tv),e(Tv,sEe),e(sEe,Tor),e(Tv,Mor),e(Tv,BH),e(BH,Eor),e(Tv,Cor),e(G,wor),e(G,Mv),e(Mv,lEe),e(lEe,Aor),e(Mv,Lor),e(Mv,IH),e(IH,yor),e(Mv,xor),e(G,$or),e(G,Ev),e(Ev,iEe),e(iEe,kor),e(Ev,Sor),e(Ev,NH),e(NH,Ror),e(Ev,Por),e(G,Bor),e(G,Cv),e(Cv,dEe),e(dEe,Ior),e(Cv,Nor),e(Cv,qH),e(qH,qor),e(Cv,jor),e(G,Dor),e(G,wv),e(wv,mEe),e(mEe,Gor),e(wv,Oor),e(wv,jH),e(jH,Vor),e(wv,Xor),e(G,zor),e(G,Av),e(Av,cEe),e(cEe,Qor),e(Av,Wor),e(Av,DH),e(DH,Uor),e(Av,Hor),e(G,Jor),e(G,Lv),e(Lv,fEe),e(fEe,Yor),e(Lv,Zor),e(Lv,GH),e(GH,Kor),e(Lv,err),e(G,orr),e(G,yv),e(yv,gEe),e(gEe,rrr),e(yv,trr),e(yv,OH),e(OH,arr),e(yv,nrr),e(G,srr),e(G,xv),e(xv,hEe),e(hEe,lrr),e(xv,irr),e(xv,VH),e(VH,drr),e(xv,mrr),e(G,crr),e(G,$v),e($v,uEe),e(uEe,frr),e($v,grr),e($v,XH),e(XH,hrr),e($v,urr),e(G,prr),e(G,kv),e(kv,pEe),e(pEe,_rr),e(kv,brr),e(kv,zH),e(zH,vrr),e(kv,Frr),e(G,Trr),e(G,Sv),e(Sv,_Ee),e(_Ee,Mrr),e(Sv,Err),e(Sv,QH),e(QH,Crr),e(Sv,wrr),e(G,Arr),e(G,Rv),e(Rv,bEe),e(bEe,Lrr),e(Rv,yrr),e(Rv,WH),e(WH,xrr),e(Rv,$rr),e(G,krr),e(G,Pv),e(Pv,vEe),e(vEe,Srr),e(Pv,Rrr),e(Pv,UH),e(UH,Prr),e(Pv,Brr),e(G,Irr),e(G,Bv),e(Bv,FEe),e(FEe,Nrr),e(Bv,qrr),e(Bv,HH),e(HH,jrr),e(Bv,Drr),e(G,Grr),e(G,Iv),e(Iv,TEe),e(TEe,Orr),e(Iv,Vrr),e(Iv,JH),e(JH,Xrr),e(Iv,zrr),e(G,Qrr),e(G,Nv),e(Nv,MEe),e(MEe,Wrr),e(Nv,Urr),e(Nv,YH),e(YH,Hrr),e(Nv,Jrr),e(G,Yrr),e(G,qv),e(qv,EEe),e(EEe,Zrr),e(qv,Krr),e(qv,ZH),e(ZH,etr),e(qv,otr),e(G,rtr),e(G,jv),e(jv,CEe),e(CEe,ttr),e(jv,atr),e(jv,KH),e(KH,ntr),e(jv,str),e(G,ltr),e(G,Dv),e(Dv,wEe),e(wEe,itr),e(Dv,dtr),e(Dv,eJ),e(eJ,mtr),e(Dv,ctr),e(G,ftr),e(G,Gv),e(Gv,AEe),e(AEe,gtr),e(Gv,htr),e(Gv,oJ),e(oJ,utr),e(Gv,ptr),e(G,_tr),e(G,Ov),e(Ov,LEe),e(LEe,btr),e(Ov,vtr),e(Ov,rJ),e(rJ,Ftr),e(Ov,Ttr),e(G,Mtr),e(G,Vv),e(Vv,yEe),e(yEe,Etr),e(Vv,Ctr),e(Vv,tJ),e(tJ,wtr),e(Vv,Atr),e(G,Ltr),e(G,Xv),e(Xv,xEe),e(xEe,ytr),e(Xv,xtr),e(Xv,aJ),e(aJ,$tr),e(Xv,ktr),e(G,Str),e(G,zv),e(zv,$Ee),e($Ee,Rtr),e(zv,Ptr),e(zv,nJ),e(nJ,Btr),e(zv,Itr),e(G,Ntr),e(G,Qv),e(Qv,kEe),e(kEe,qtr),e(Qv,jtr),e(Qv,sJ),e(sJ,Dtr),e(Qv,Gtr),e(G,Otr),e(G,Wv),e(Wv,SEe),e(SEe,Vtr),e(Wv,Xtr),e(Wv,lJ),e(lJ,ztr),e(Wv,Qtr),e(G,Wtr),e(G,Uv),e(Uv,REe),e(REe,Utr),e(Uv,Htr),e(Uv,iJ),e(iJ,Jtr),e(Uv,Ytr),e(G,Ztr),e(G,Hv),e(Hv,PEe),e(PEe,Ktr),e(Hv,ear),e(Hv,dJ),e(dJ,oar),e(Hv,rar),e(G,tar),e(G,Jv),e(Jv,BEe),e(BEe,aar),e(Jv,nar),e(Jv,mJ),e(mJ,sar),e(Jv,lar),e(G,iar),e(G,Yv),e(Yv,IEe),e(IEe,dar),e(Yv,mar),e(Yv,cJ),e(cJ,car),e(Yv,far),e(G,gar),e(G,Zv),e(Zv,NEe),e(NEe,har),e(Zv,uar),e(Zv,fJ),e(fJ,par),e(Zv,_ar),e(G,bar),e(G,Kv),e(Kv,qEe),e(qEe,Far),e(Kv,Tar),e(Kv,gJ),e(gJ,Mar),e(Kv,Ear),e(G,Car),e(G,eF),e(eF,jEe),e(jEe,war),e(eF,Aar),e(eF,hJ),e(hJ,Lar),e(eF,yar),e(G,xar),e(G,oF),e(oF,DEe),e(DEe,$ar),e(oF,kar),e(oF,uJ),e(uJ,Sar),e(oF,Rar),e(G,Par),e(G,rF),e(rF,GEe),e(GEe,Bar),e(rF,Iar),e(rF,pJ),e(pJ,Nar),e(rF,qar),e(G,jar),e(G,tF),e(tF,OEe),e(OEe,Dar),e(tF,Gar),e(tF,_J),e(_J,Oar),e(tF,Var),e(G,Xar),e(G,aF),e(aF,VEe),e(VEe,zar),e(aF,Qar),e(aF,bJ),e(bJ,War),e(aF,Uar),e(ao,Har),e(ao,nF),e(nF,Jar),e(nF,XEe),e(XEe,Yar),e(nF,Zar),e(nF,zEe),e(zEe,Kar),e(ao,enr),M(sF,ao,null),b(c,Oio,_),b(c,Ud,_),e(Ud,lF),e(lF,QEe),M(uS,QEe,null),e(Ud,onr),e(Ud,WEe),e(WEe,rnr),b(c,Vio,_),b(c,Oo,_),M(pS,Oo,null),e(Oo,tnr),e(Oo,Hd),e(Hd,anr),e(Hd,vJ),e(vJ,nnr),e(Hd,snr),e(Hd,FJ),e(FJ,lnr),e(Hd,inr),e(Oo,dnr),e(Oo,_S),e(_S,mnr),e(_S,UEe),e(UEe,cnr),e(_S,fnr),e(Oo,gnr),e(Oo,yt),M(bS,yt,null),e(yt,hnr),e(yt,HEe),e(HEe,unr),e(yt,pnr),e(yt,Jd),e(Jd,_nr),e(Jd,JEe),e(JEe,bnr),e(Jd,vnr),e(Jd,TJ),e(TJ,Fnr),e(Jd,Tnr),e(yt,Mnr),M(iF,yt,null),e(Oo,Enr),e(Oo,no),M(vS,no,null),e(no,Cnr),e(no,YEe),e(YEe,wnr),e(no,Anr),e(no,un),e(un,Lnr),e(un,ZEe),e(ZEe,ynr),e(un,xnr),e(un,KEe),e(KEe,$nr),e(un,knr),e(un,e4e),e(e4e,Snr),e(un,Rnr),e(no,Pnr),e(no,W),e(W,dF),e(dF,o4e),e(o4e,Bnr),e(dF,Inr),e(dF,MJ),e(MJ,Nnr),e(dF,qnr),e(W,jnr),e(W,mF),e(mF,r4e),e(r4e,Dnr),e(mF,Gnr),e(mF,EJ),e(EJ,Onr),e(mF,Vnr),e(W,Xnr),e(W,cF),e(cF,t4e),e(t4e,znr),e(cF,Qnr),e(cF,CJ),e(CJ,Wnr),e(cF,Unr),e(W,Hnr),e(W,fF),e(fF,a4e),e(a4e,Jnr),e(fF,Ynr),e(fF,wJ),e(wJ,Znr),e(fF,Knr),e(W,esr),e(W,gF),e(gF,n4e),e(n4e,osr),e(gF,rsr),e(gF,AJ),e(AJ,tsr),e(gF,asr),e(W,nsr),e(W,hF),e(hF,s4e),e(s4e,ssr),e(hF,lsr),e(hF,LJ),e(LJ,isr),e(hF,dsr),e(W,msr),e(W,uF),e(uF,l4e),e(l4e,csr),e(uF,fsr),e(uF,yJ),e(yJ,gsr),e(uF,hsr),e(W,usr),e(W,pF),e(pF,i4e),e(i4e,psr),e(pF,_sr),e(pF,xJ),e(xJ,bsr),e(pF,vsr),e(W,Fsr),e(W,_F),e(_F,d4e),e(d4e,Tsr),e(_F,Msr),e(_F,$J),e($J,Esr),e(_F,Csr),e(W,wsr),e(W,bF),e(bF,m4e),e(m4e,Asr),e(bF,Lsr),e(bF,kJ),e(kJ,ysr),e(bF,xsr),e(W,$sr),e(W,vF),e(vF,c4e),e(c4e,ksr),e(vF,Ssr),e(vF,SJ),e(SJ,Rsr),e(vF,Psr),e(W,Bsr),e(W,FF),e(FF,f4e),e(f4e,Isr),e(FF,Nsr),e(FF,RJ),e(RJ,qsr),e(FF,jsr),e(W,Dsr),e(W,TF),e(TF,g4e),e(g4e,Gsr),e(TF,Osr),e(TF,PJ),e(PJ,Vsr),e(TF,Xsr),e(W,zsr),e(W,MF),e(MF,h4e),e(h4e,Qsr),e(MF,Wsr),e(MF,BJ),e(BJ,Usr),e(MF,Hsr),e(W,Jsr),e(W,EF),e(EF,u4e),e(u4e,Ysr),e(EF,Zsr),e(EF,IJ),e(IJ,Ksr),e(EF,elr),e(W,olr),e(W,CF),e(CF,p4e),e(p4e,rlr),e(CF,tlr),e(CF,NJ),e(NJ,alr),e(CF,nlr),e(W,slr),e(W,wF),e(wF,_4e),e(_4e,llr),e(wF,ilr),e(wF,qJ),e(qJ,dlr),e(wF,mlr),e(W,clr),e(W,AF),e(AF,b4e),e(b4e,flr),e(AF,glr),e(AF,jJ),e(jJ,hlr),e(AF,ulr),e(W,plr),e(W,LF),e(LF,v4e),e(v4e,_lr),e(LF,blr),e(LF,DJ),e(DJ,vlr),e(LF,Flr),e(W,Tlr),e(W,yF),e(yF,F4e),e(F4e,Mlr),e(yF,Elr),e(yF,GJ),e(GJ,Clr),e(yF,wlr),e(W,Alr),e(W,xF),e(xF,T4e),e(T4e,Llr),e(xF,ylr),e(xF,OJ),e(OJ,xlr),e(xF,$lr),e(W,klr),e(W,$F),e($F,M4e),e(M4e,Slr),e($F,Rlr),e($F,VJ),e(VJ,Plr),e($F,Blr),e(W,Ilr),e(W,kF),e(kF,E4e),e(E4e,Nlr),e(kF,qlr),e(kF,XJ),e(XJ,jlr),e(kF,Dlr),e(W,Glr),e(W,SF),e(SF,C4e),e(C4e,Olr),e(SF,Vlr),e(SF,zJ),e(zJ,Xlr),e(SF,zlr),e(W,Qlr),e(W,RF),e(RF,w4e),e(w4e,Wlr),e(RF,Ulr),e(RF,QJ),e(QJ,Hlr),e(RF,Jlr),e(W,Ylr),e(W,PF),e(PF,A4e),e(A4e,Zlr),e(PF,Klr),e(PF,WJ),e(WJ,eir),e(PF,oir),e(W,rir),e(W,BF),e(BF,L4e),e(L4e,tir),e(BF,air),e(BF,UJ),e(UJ,nir),e(BF,sir),e(W,lir),e(W,IF),e(IF,y4e),e(y4e,iir),e(IF,dir),e(IF,HJ),e(HJ,mir),e(IF,cir),e(W,fir),e(W,NF),e(NF,x4e),e(x4e,gir),e(NF,hir),e(NF,JJ),e(JJ,uir),e(NF,pir),e(W,_ir),e(W,qF),e(qF,$4e),e($4e,bir),e(qF,vir),e(qF,YJ),e(YJ,Fir),e(qF,Tir),e(W,Mir),e(W,jF),e(jF,k4e),e(k4e,Eir),e(jF,Cir),e(jF,ZJ),e(ZJ,wir),e(jF,Air),e(W,Lir),e(W,DF),e(DF,S4e),e(S4e,yir),e(DF,xir),e(DF,KJ),e(KJ,$ir),e(DF,kir),e(W,Sir),e(W,GF),e(GF,R4e),e(R4e,Rir),e(GF,Pir),e(GF,eY),e(eY,Bir),e(GF,Iir),e(W,Nir),e(W,OF),e(OF,P4e),e(P4e,qir),e(OF,jir),e(OF,oY),e(oY,Dir),e(OF,Gir),e(W,Oir),e(W,VF),e(VF,B4e),e(B4e,Vir),e(VF,Xir),e(VF,rY),e(rY,zir),e(VF,Qir),e(W,Wir),e(W,XF),e(XF,I4e),e(I4e,Uir),e(XF,Hir),e(XF,tY),e(tY,Jir),e(XF,Yir),e(W,Zir),e(W,zF),e(zF,N4e),e(N4e,Kir),e(zF,edr),e(zF,aY),e(aY,odr),e(zF,rdr),e(W,tdr),e(W,QF),e(QF,q4e),e(q4e,adr),e(QF,ndr),e(QF,nY),e(nY,sdr),e(QF,ldr),e(W,idr),e(W,WF),e(WF,j4e),e(j4e,ddr),e(WF,mdr),e(WF,sY),e(sY,cdr),e(WF,fdr),e(W,gdr),e(W,UF),e(UF,D4e),e(D4e,hdr),e(UF,udr),e(UF,lY),e(lY,pdr),e(UF,_dr),e(W,bdr),e(W,HF),e(HF,G4e),e(G4e,vdr),e(HF,Fdr),e(HF,iY),e(iY,Tdr),e(HF,Mdr),e(W,Edr),e(W,JF),e(JF,O4e),e(O4e,Cdr),e(JF,wdr),e(JF,dY),e(dY,Adr),e(JF,Ldr),e(W,ydr),e(W,YF),e(YF,V4e),e(V4e,xdr),e(YF,$dr),e(YF,mY),e(mY,kdr),e(YF,Sdr),e(no,Rdr),e(no,ZF),e(ZF,Pdr),e(ZF,X4e),e(X4e,Bdr),e(ZF,Idr),e(ZF,z4e),e(z4e,Ndr),e(no,qdr),M(KF,no,null),b(c,Xio,_),b(c,Yd,_),e(Yd,eT),e(eT,Q4e),M(FS,Q4e,null),e(Yd,jdr),e(Yd,W4e),e(W4e,Ddr),b(c,zio,_),b(c,Vo,_),M(TS,Vo,null),e(Vo,Gdr),e(Vo,Zd),e(Zd,Odr),e(Zd,cY),e(cY,Vdr),e(Zd,Xdr),e(Zd,fY),e(fY,zdr),e(Zd,Qdr),e(Vo,Wdr),e(Vo,MS),e(MS,Udr),e(MS,U4e),e(U4e,Hdr),e(MS,Jdr),e(Vo,Ydr),e(Vo,xt),M(ES,xt,null),e(xt,Zdr),e(xt,H4e),e(H4e,Kdr),e(xt,emr),e(xt,Kd),e(Kd,omr),e(Kd,J4e),e(J4e,rmr),e(Kd,tmr),e(Kd,gY),e(gY,amr),e(Kd,nmr),e(xt,smr),M(oT,xt,null),e(Vo,lmr),e(Vo,so),M(CS,so,null),e(so,imr),e(so,Y4e),e(Y4e,dmr),e(so,mmr),e(so,pn),e(pn,cmr),e(pn,Z4e),e(Z4e,fmr),e(pn,gmr),e(pn,K4e),e(K4e,hmr),e(pn,umr),e(pn,eCe),e(eCe,pmr),e(pn,_mr),e(so,bmr),e(so,wS),e(wS,rT),e(rT,oCe),e(oCe,vmr),e(rT,Fmr),e(rT,hY),e(hY,Tmr),e(rT,Mmr),e(wS,Emr),e(wS,tT),e(tT,rCe),e(rCe,Cmr),e(tT,wmr),e(tT,uY),e(uY,Amr),e(tT,Lmr),e(so,ymr),e(so,aT),e(aT,xmr),e(aT,tCe),e(tCe,$mr),e(aT,kmr),e(aT,aCe),e(aCe,Smr),e(so,Rmr),M(nT,so,null),b(c,Qio,_),b(c,em,_),e(em,sT),e(sT,nCe),M(AS,nCe,null),e(em,Pmr),e(em,sCe),e(sCe,Bmr),b(c,Wio,_),b(c,Xo,_),M(LS,Xo,null),e(Xo,Imr),e(Xo,om),e(om,Nmr),e(om,pY),e(pY,qmr),e(om,jmr),e(om,_Y),e(_Y,Dmr),e(om,Gmr),e(Xo,Omr),e(Xo,yS),e(yS,Vmr),e(yS,lCe),e(lCe,Xmr),e(yS,zmr),e(Xo,Qmr),e(Xo,$t),M(xS,$t,null),e($t,Wmr),e($t,iCe),e(iCe,Umr),e($t,Hmr),e($t,rm),e(rm,Jmr),e(rm,dCe),e(dCe,Ymr),e(rm,Zmr),e(rm,bY),e(bY,Kmr),e(rm,ecr),e($t,ocr),M(lT,$t,null),e(Xo,rcr),e(Xo,lo),M($S,lo,null),e(lo,tcr),e(lo,mCe),e(mCe,acr),e(lo,ncr),e(lo,_n),e(_n,scr),e(_n,cCe),e(cCe,lcr),e(_n,icr),e(_n,fCe),e(fCe,dcr),e(_n,mcr),e(_n,gCe),e(gCe,ccr),e(_n,fcr),e(lo,gcr),e(lo,J),e(J,iT),e(iT,hCe),e(hCe,hcr),e(iT,ucr),e(iT,vY),e(vY,pcr),e(iT,_cr),e(J,bcr),e(J,dT),e(dT,uCe),e(uCe,vcr),e(dT,Fcr),e(dT,FY),e(FY,Tcr),e(dT,Mcr),e(J,Ecr),e(J,mT),e(mT,pCe),e(pCe,Ccr),e(mT,wcr),e(mT,TY),e(TY,Acr),e(mT,Lcr),e(J,ycr),e(J,cT),e(cT,_Ce),e(_Ce,xcr),e(cT,$cr),e(cT,MY),e(MY,kcr),e(cT,Scr),e(J,Rcr),e(J,fT),e(fT,bCe),e(bCe,Pcr),e(fT,Bcr),e(fT,EY),e(EY,Icr),e(fT,Ncr),e(J,qcr),e(J,gT),e(gT,vCe),e(vCe,jcr),e(gT,Dcr),e(gT,CY),e(CY,Gcr),e(gT,Ocr),e(J,Vcr),e(J,hT),e(hT,FCe),e(FCe,Xcr),e(hT,zcr),e(hT,wY),e(wY,Qcr),e(hT,Wcr),e(J,Ucr),e(J,uT),e(uT,TCe),e(TCe,Hcr),e(uT,Jcr),e(uT,AY),e(AY,Ycr),e(uT,Zcr),e(J,Kcr),e(J,pT),e(pT,MCe),e(MCe,efr),e(pT,ofr),e(pT,LY),e(LY,rfr),e(pT,tfr),e(J,afr),e(J,_T),e(_T,ECe),e(ECe,nfr),e(_T,sfr),e(_T,yY),e(yY,lfr),e(_T,ifr),e(J,dfr),e(J,bT),e(bT,CCe),e(CCe,mfr),e(bT,cfr),e(bT,xY),e(xY,ffr),e(bT,gfr),e(J,hfr),e(J,vT),e(vT,wCe),e(wCe,ufr),e(vT,pfr),e(vT,$Y),e($Y,_fr),e(vT,bfr),e(J,vfr),e(J,FT),e(FT,ACe),e(ACe,Ffr),e(FT,Tfr),e(FT,kY),e(kY,Mfr),e(FT,Efr),e(J,Cfr),e(J,TT),e(TT,LCe),e(LCe,wfr),e(TT,Afr),e(TT,SY),e(SY,Lfr),e(TT,yfr),e(J,xfr),e(J,MT),e(MT,yCe),e(yCe,$fr),e(MT,kfr),e(MT,RY),e(RY,Sfr),e(MT,Rfr),e(J,Pfr),e(J,ET),e(ET,xCe),e(xCe,Bfr),e(ET,Ifr),e(ET,PY),e(PY,Nfr),e(ET,qfr),e(J,jfr),e(J,CT),e(CT,$Ce),e($Ce,Dfr),e(CT,Gfr),e(CT,BY),e(BY,Ofr),e(CT,Vfr),e(J,Xfr),e(J,wT),e(wT,kCe),e(kCe,zfr),e(wT,Qfr),e(wT,IY),e(IY,Wfr),e(wT,Ufr),e(J,Hfr),e(J,AT),e(AT,SCe),e(SCe,Jfr),e(AT,Yfr),e(AT,NY),e(NY,Zfr),e(AT,Kfr),e(J,egr),e(J,LT),e(LT,RCe),e(RCe,ogr),e(LT,rgr),e(LT,qY),e(qY,tgr),e(LT,agr),e(J,ngr),e(J,yT),e(yT,PCe),e(PCe,sgr),e(yT,lgr),e(yT,jY),e(jY,igr),e(yT,dgr),e(J,mgr),e(J,xT),e(xT,BCe),e(BCe,cgr),e(xT,fgr),e(xT,DY),e(DY,ggr),e(xT,hgr),e(J,ugr),e(J,$T),e($T,ICe),e(ICe,pgr),e($T,_gr),e($T,GY),e(GY,bgr),e($T,vgr),e(J,Fgr),e(J,kT),e(kT,NCe),e(NCe,Tgr),e(kT,Mgr),e(kT,OY),e(OY,Egr),e(kT,Cgr),e(J,wgr),e(J,ST),e(ST,qCe),e(qCe,Agr),e(ST,Lgr),e(ST,VY),e(VY,ygr),e(ST,xgr),e(J,$gr),e(J,RT),e(RT,jCe),e(jCe,kgr),e(RT,Sgr),e(RT,XY),e(XY,Rgr),e(RT,Pgr),e(J,Bgr),e(J,PT),e(PT,DCe),e(DCe,Igr),e(PT,Ngr),e(PT,zY),e(zY,qgr),e(PT,jgr),e(J,Dgr),e(J,BT),e(BT,GCe),e(GCe,Ggr),e(BT,Ogr),e(BT,QY),e(QY,Vgr),e(BT,Xgr),e(J,zgr),e(J,IT),e(IT,OCe),e(OCe,Qgr),e(IT,Wgr),e(IT,WY),e(WY,Ugr),e(IT,Hgr),e(J,Jgr),e(J,NT),e(NT,VCe),e(VCe,Ygr),e(NT,Zgr),e(NT,UY),e(UY,Kgr),e(NT,ehr),e(J,ohr),e(J,qT),e(qT,XCe),e(XCe,rhr),e(qT,thr),e(qT,HY),e(HY,ahr),e(qT,nhr),e(J,shr),e(J,jT),e(jT,zCe),e(zCe,lhr),e(jT,ihr),e(jT,JY),e(JY,dhr),e(jT,mhr),e(J,chr),e(J,DT),e(DT,QCe),e(QCe,fhr),e(DT,ghr),e(DT,YY),e(YY,hhr),e(DT,uhr),e(J,phr),e(J,GT),e(GT,WCe),e(WCe,_hr),e(GT,bhr),e(GT,ZY),e(ZY,vhr),e(GT,Fhr),e(J,Thr),e(J,OT),e(OT,UCe),e(UCe,Mhr),e(OT,Ehr),e(OT,KY),e(KY,Chr),e(OT,whr),e(J,Ahr),e(J,VT),e(VT,HCe),e(HCe,Lhr),e(VT,yhr),e(VT,eZ),e(eZ,xhr),e(VT,$hr),e(J,khr),e(J,XT),e(XT,JCe),e(JCe,Shr),e(XT,Rhr),e(XT,YCe),e(YCe,Phr),e(XT,Bhr),e(J,Ihr),e(J,zT),e(zT,ZCe),e(ZCe,Nhr),e(zT,qhr),e(zT,oZ),e(oZ,jhr),e(zT,Dhr),e(J,Ghr),e(J,QT),e(QT,KCe),e(KCe,Ohr),e(QT,Vhr),e(QT,rZ),e(rZ,Xhr),e(QT,zhr),e(J,Qhr),e(J,WT),e(WT,e3e),e(e3e,Whr),e(WT,Uhr),e(WT,tZ),e(tZ,Hhr),e(WT,Jhr),e(J,Yhr),e(J,UT),e(UT,o3e),e(o3e,Zhr),e(UT,Khr),e(UT,aZ),e(aZ,eur),e(UT,our),e(lo,rur),e(lo,HT),e(HT,tur),e(HT,r3e),e(r3e,aur),e(HT,nur),e(HT,t3e),e(t3e,sur),e(lo,lur),M(JT,lo,null),b(c,Uio,_),b(c,tm,_),e(tm,YT),e(YT,a3e),M(kS,a3e,null),e(tm,iur),e(tm,n3e),e(n3e,dur),b(c,Hio,_),b(c,zo,_),M(SS,zo,null),e(zo,mur),e(zo,am),e(am,cur),e(am,nZ),e(nZ,fur),e(am,gur),e(am,sZ),e(sZ,hur),e(am,uur),e(zo,pur),e(zo,RS),e(RS,_ur),e(RS,s3e),e(s3e,bur),e(RS,vur),e(zo,Fur),e(zo,kt),M(PS,kt,null),e(kt,Tur),e(kt,l3e),e(l3e,Mur),e(kt,Eur),e(kt,nm),e(nm,Cur),e(nm,i3e),e(i3e,wur),e(nm,Aur),e(nm,lZ),e(lZ,Lur),e(nm,yur),e(kt,xur),M(ZT,kt,null),e(zo,$ur),e(zo,io),M(BS,io,null),e(io,kur),e(io,d3e),e(d3e,Sur),e(io,Rur),e(io,bn),e(bn,Pur),e(bn,m3e),e(m3e,Bur),e(bn,Iur),e(bn,c3e),e(c3e,Nur),e(bn,qur),e(bn,f3e),e(f3e,jur),e(bn,Dur),e(io,Gur),e(io,ge),e(ge,KT),e(KT,g3e),e(g3e,Our),e(KT,Vur),e(KT,iZ),e(iZ,Xur),e(KT,zur),e(ge,Qur),e(ge,eM),e(eM,h3e),e(h3e,Wur),e(eM,Uur),e(eM,dZ),e(dZ,Hur),e(eM,Jur),e(ge,Yur),e(ge,oM),e(oM,u3e),e(u3e,Zur),e(oM,Kur),e(oM,mZ),e(mZ,epr),e(oM,opr),e(ge,rpr),e(ge,rM),e(rM,p3e),e(p3e,tpr),e(rM,apr),e(rM,cZ),e(cZ,npr),e(rM,spr),e(ge,lpr),e(ge,tM),e(tM,_3e),e(_3e,ipr),e(tM,dpr),e(tM,fZ),e(fZ,mpr),e(tM,cpr),e(ge,fpr),e(ge,aM),e(aM,b3e),e(b3e,gpr),e(aM,hpr),e(aM,gZ),e(gZ,upr),e(aM,ppr),e(ge,_pr),e(ge,nM),e(nM,v3e),e(v3e,bpr),e(nM,vpr),e(nM,hZ),e(hZ,Fpr),e(nM,Tpr),e(ge,Mpr),e(ge,sM),e(sM,F3e),e(F3e,Epr),e(sM,Cpr),e(sM,uZ),e(uZ,wpr),e(sM,Apr),e(ge,Lpr),e(ge,lM),e(lM,T3e),e(T3e,ypr),e(lM,xpr),e(lM,pZ),e(pZ,$pr),e(lM,kpr),e(ge,Spr),e(ge,iM),e(iM,M3e),e(M3e,Rpr),e(iM,Ppr),e(iM,_Z),e(_Z,Bpr),e(iM,Ipr),e(ge,Npr),e(ge,dM),e(dM,E3e),e(E3e,qpr),e(dM,jpr),e(dM,bZ),e(bZ,Dpr),e(dM,Gpr),e(ge,Opr),e(ge,mM),e(mM,C3e),e(C3e,Vpr),e(mM,Xpr),e(mM,vZ),e(vZ,zpr),e(mM,Qpr),e(ge,Wpr),e(ge,cM),e(cM,w3e),e(w3e,Upr),e(cM,Hpr),e(cM,FZ),e(FZ,Jpr),e(cM,Ypr),e(ge,Zpr),e(ge,fM),e(fM,A3e),e(A3e,Kpr),e(fM,e_r),e(fM,TZ),e(TZ,o_r),e(fM,r_r),e(ge,t_r),e(ge,gM),e(gM,L3e),e(L3e,a_r),e(gM,n_r),e(gM,MZ),e(MZ,s_r),e(gM,l_r),e(ge,i_r),e(ge,hM),e(hM,y3e),e(y3e,d_r),e(hM,m_r),e(hM,EZ),e(EZ,c_r),e(hM,f_r),e(ge,g_r),e(ge,uM),e(uM,x3e),e(x3e,h_r),e(uM,u_r),e(uM,CZ),e(CZ,p_r),e(uM,__r),e(ge,b_r),e(ge,pM),e(pM,$3e),e($3e,v_r),e(pM,F_r),e(pM,wZ),e(wZ,T_r),e(pM,M_r),e(ge,E_r),e(ge,_M),e(_M,k3e),e(k3e,C_r),e(_M,w_r),e(_M,AZ),e(AZ,A_r),e(_M,L_r),e(ge,y_r),e(ge,bM),e(bM,S3e),e(S3e,x_r),e(bM,$_r),e(bM,LZ),e(LZ,k_r),e(bM,S_r),e(ge,R_r),e(ge,vM),e(vM,R3e),e(R3e,P_r),e(vM,B_r),e(vM,yZ),e(yZ,I_r),e(vM,N_r),e(io,q_r),e(io,FM),e(FM,j_r),e(FM,P3e),e(P3e,D_r),e(FM,G_r),e(FM,B3e),e(B3e,O_r),e(io,V_r),M(TM,io,null),b(c,Jio,_),b(c,sm,_),e(sm,MM),e(MM,I3e),M(IS,I3e,null),e(sm,X_r),e(sm,N3e),e(N3e,z_r),b(c,Yio,_),b(c,Qo,_),M(NS,Qo,null),e(Qo,Q_r),e(Qo,lm),e(lm,W_r),e(lm,xZ),e(xZ,U_r),e(lm,H_r),e(lm,$Z),e($Z,J_r),e(lm,Y_r),e(Qo,Z_r),e(Qo,qS),e(qS,K_r),e(qS,q3e),e(q3e,e1r),e(qS,o1r),e(Qo,r1r),e(Qo,St),M(jS,St,null),e(St,t1r),e(St,j3e),e(j3e,a1r),e(St,n1r),e(St,im),e(im,s1r),e(im,D3e),e(D3e,l1r),e(im,i1r),e(im,kZ),e(kZ,d1r),e(im,m1r),e(St,c1r),M(EM,St,null),e(Qo,f1r),e(Qo,mo),M(DS,mo,null),e(mo,g1r),e(mo,G3e),e(G3e,h1r),e(mo,u1r),e(mo,vn),e(vn,p1r),e(vn,O3e),e(O3e,_1r),e(vn,b1r),e(vn,V3e),e(V3e,v1r),e(vn,F1r),e(vn,X3e),e(X3e,T1r),e(vn,M1r),e(mo,E1r),e(mo,I),e(I,CM),e(CM,z3e),e(z3e,C1r),e(CM,w1r),e(CM,SZ),e(SZ,A1r),e(CM,L1r),e(I,y1r),e(I,wM),e(wM,Q3e),e(Q3e,x1r),e(wM,$1r),e(wM,RZ),e(RZ,k1r),e(wM,S1r),e(I,R1r),e(I,AM),e(AM,W3e),e(W3e,P1r),e(AM,B1r),e(AM,PZ),e(PZ,I1r),e(AM,N1r),e(I,q1r),e(I,LM),e(LM,U3e),e(U3e,j1r),e(LM,D1r),e(LM,BZ),e(BZ,G1r),e(LM,O1r),e(I,V1r),e(I,yM),e(yM,H3e),e(H3e,X1r),e(yM,z1r),e(yM,IZ),e(IZ,Q1r),e(yM,W1r),e(I,U1r),e(I,xM),e(xM,J3e),e(J3e,H1r),e(xM,J1r),e(xM,NZ),e(NZ,Y1r),e(xM,Z1r),e(I,K1r),e(I,$M),e($M,Y3e),e(Y3e,e2r),e($M,o2r),e($M,qZ),e(qZ,r2r),e($M,t2r),e(I,a2r),e(I,kM),e(kM,Z3e),e(Z3e,n2r),e(kM,s2r),e(kM,jZ),e(jZ,l2r),e(kM,i2r),e(I,d2r),e(I,SM),e(SM,K3e),e(K3e,m2r),e(SM,c2r),e(SM,DZ),e(DZ,f2r),e(SM,g2r),e(I,h2r),e(I,RM),e(RM,e5e),e(e5e,u2r),e(RM,p2r),e(RM,GZ),e(GZ,_2r),e(RM,b2r),e(I,v2r),e(I,PM),e(PM,o5e),e(o5e,F2r),e(PM,T2r),e(PM,OZ),e(OZ,M2r),e(PM,E2r),e(I,C2r),e(I,BM),e(BM,r5e),e(r5e,w2r),e(BM,A2r),e(BM,VZ),e(VZ,L2r),e(BM,y2r),e(I,x2r),e(I,IM),e(IM,t5e),e(t5e,$2r),e(IM,k2r),e(IM,XZ),e(XZ,S2r),e(IM,R2r),e(I,P2r),e(I,NM),e(NM,a5e),e(a5e,B2r),e(NM,I2r),e(NM,zZ),e(zZ,N2r),e(NM,q2r),e(I,j2r),e(I,qM),e(qM,n5e),e(n5e,D2r),e(qM,G2r),e(qM,QZ),e(QZ,O2r),e(qM,V2r),e(I,X2r),e(I,jM),e(jM,s5e),e(s5e,z2r),e(jM,Q2r),e(jM,WZ),e(WZ,W2r),e(jM,U2r),e(I,H2r),e(I,DM),e(DM,l5e),e(l5e,J2r),e(DM,Y2r),e(DM,UZ),e(UZ,Z2r),e(DM,K2r),e(I,ebr),e(I,GM),e(GM,i5e),e(i5e,obr),e(GM,rbr),e(GM,HZ),e(HZ,tbr),e(GM,abr),e(I,nbr),e(I,OM),e(OM,d5e),e(d5e,sbr),e(OM,lbr),e(OM,JZ),e(JZ,ibr),e(OM,dbr),e(I,mbr),e(I,VM),e(VM,m5e),e(m5e,cbr),e(VM,fbr),e(VM,YZ),e(YZ,gbr),e(VM,hbr),e(I,ubr),e(I,XM),e(XM,c5e),e(c5e,pbr),e(XM,_br),e(XM,ZZ),e(ZZ,bbr),e(XM,vbr),e(I,Fbr),e(I,zM),e(zM,f5e),e(f5e,Tbr),e(zM,Mbr),e(zM,KZ),e(KZ,Ebr),e(zM,Cbr),e(I,wbr),e(I,QM),e(QM,g5e),e(g5e,Abr),e(QM,Lbr),e(QM,eK),e(eK,ybr),e(QM,xbr),e(I,$br),e(I,WM),e(WM,h5e),e(h5e,kbr),e(WM,Sbr),e(WM,oK),e(oK,Rbr),e(WM,Pbr),e(I,Bbr),e(I,UM),e(UM,u5e),e(u5e,Ibr),e(UM,Nbr),e(UM,rK),e(rK,qbr),e(UM,jbr),e(I,Dbr),e(I,HM),e(HM,p5e),e(p5e,Gbr),e(HM,Obr),e(HM,tK),e(tK,Vbr),e(HM,Xbr),e(I,zbr),e(I,JM),e(JM,_5e),e(_5e,Qbr),e(JM,Wbr),e(JM,aK),e(aK,Ubr),e(JM,Hbr),e(I,Jbr),e(I,YM),e(YM,b5e),e(b5e,Ybr),e(YM,Zbr),e(YM,nK),e(nK,Kbr),e(YM,evr),e(I,ovr),e(I,ZM),e(ZM,v5e),e(v5e,rvr),e(ZM,tvr),e(ZM,sK),e(sK,avr),e(ZM,nvr),e(I,svr),e(I,KM),e(KM,F5e),e(F5e,lvr),e(KM,ivr),e(KM,lK),e(lK,dvr),e(KM,mvr),e(I,cvr),e(I,eE),e(eE,T5e),e(T5e,fvr),e(eE,gvr),e(eE,iK),e(iK,hvr),e(eE,uvr),e(I,pvr),e(I,oE),e(oE,M5e),e(M5e,_vr),e(oE,bvr),e(oE,dK),e(dK,vvr),e(oE,Fvr),e(I,Tvr),e(I,rE),e(rE,E5e),e(E5e,Mvr),e(rE,Evr),e(rE,mK),e(mK,Cvr),e(rE,wvr),e(I,Avr),e(I,tE),e(tE,C5e),e(C5e,Lvr),e(tE,yvr),e(tE,cK),e(cK,xvr),e(tE,$vr),e(I,kvr),e(I,aE),e(aE,w5e),e(w5e,Svr),e(aE,Rvr),e(aE,fK),e(fK,Pvr),e(aE,Bvr),e(I,Ivr),e(I,nE),e(nE,A5e),e(A5e,Nvr),e(nE,qvr),e(nE,gK),e(gK,jvr),e(nE,Dvr),e(I,Gvr),e(I,sE),e(sE,L5e),e(L5e,Ovr),e(sE,Vvr),e(sE,hK),e(hK,Xvr),e(sE,zvr),e(I,Qvr),e(I,lE),e(lE,y5e),e(y5e,Wvr),e(lE,Uvr),e(lE,uK),e(uK,Hvr),e(lE,Jvr),e(I,Yvr),e(I,iE),e(iE,x5e),e(x5e,Zvr),e(iE,Kvr),e(iE,pK),e(pK,eFr),e(iE,oFr),e(I,rFr),e(I,dE),e(dE,$5e),e($5e,tFr),e(dE,aFr),e(dE,_K),e(_K,nFr),e(dE,sFr),e(I,lFr),e(I,mE),e(mE,k5e),e(k5e,iFr),e(mE,dFr),e(mE,bK),e(bK,mFr),e(mE,cFr),e(I,fFr),e(I,cE),e(cE,S5e),e(S5e,gFr),e(cE,hFr),e(cE,vK),e(vK,uFr),e(cE,pFr),e(I,_Fr),e(I,fE),e(fE,R5e),e(R5e,bFr),e(fE,vFr),e(fE,FK),e(FK,FFr),e(fE,TFr),e(I,MFr),e(I,gE),e(gE,P5e),e(P5e,EFr),e(gE,CFr),e(gE,TK),e(TK,wFr),e(gE,AFr),e(I,LFr),e(I,hE),e(hE,B5e),e(B5e,yFr),e(hE,xFr),e(hE,MK),e(MK,$Fr),e(hE,kFr),e(I,SFr),e(I,uE),e(uE,I5e),e(I5e,RFr),e(uE,PFr),e(uE,EK),e(EK,BFr),e(uE,IFr),e(I,NFr),e(I,pE),e(pE,N5e),e(N5e,qFr),e(pE,jFr),e(pE,CK),e(CK,DFr),e(pE,GFr),e(I,OFr),e(I,_E),e(_E,q5e),e(q5e,VFr),e(_E,XFr),e(_E,wK),e(wK,zFr),e(_E,QFr),e(I,WFr),e(I,bE),e(bE,j5e),e(j5e,UFr),e(bE,HFr),e(bE,AK),e(AK,JFr),e(bE,YFr),e(I,ZFr),e(I,vE),e(vE,D5e),e(D5e,KFr),e(vE,eTr),e(vE,LK),e(LK,oTr),e(vE,rTr),e(I,tTr),e(I,FE),e(FE,G5e),e(G5e,aTr),e(FE,nTr),e(FE,yK),e(yK,sTr),e(FE,lTr),e(I,iTr),e(I,TE),e(TE,O5e),e(O5e,dTr),e(TE,mTr),e(TE,xK),e(xK,cTr),e(TE,fTr),e(I,gTr),e(I,ME),e(ME,V5e),e(V5e,hTr),e(ME,uTr),e(ME,$K),e($K,pTr),e(ME,_Tr),e(I,bTr),e(I,EE),e(EE,X5e),e(X5e,vTr),e(EE,FTr),e(EE,kK),e(kK,TTr),e(EE,MTr),e(I,ETr),e(I,CE),e(CE,z5e),e(z5e,CTr),e(CE,wTr),e(CE,SK),e(SK,ATr),e(CE,LTr),e(I,yTr),e(I,wE),e(wE,Q5e),e(Q5e,xTr),e(wE,$Tr),e(wE,RK),e(RK,kTr),e(wE,STr),e(I,RTr),e(I,AE),e(AE,W5e),e(W5e,PTr),e(AE,BTr),e(AE,PK),e(PK,ITr),e(AE,NTr),e(mo,qTr),e(mo,LE),e(LE,jTr),e(LE,U5e),e(U5e,DTr),e(LE,GTr),e(LE,H5e),e(H5e,OTr),e(mo,VTr),M(yE,mo,null),b(c,Zio,_),b(c,dm,_),e(dm,xE),e(xE,J5e),M(GS,J5e,null),e(dm,XTr),e(dm,Y5e),e(Y5e,zTr),b(c,Kio,_),b(c,Wo,_),M(OS,Wo,null),e(Wo,QTr),e(Wo,mm),e(mm,WTr),e(mm,BK),e(BK,UTr),e(mm,HTr),e(mm,IK),e(IK,JTr),e(mm,YTr),e(Wo,ZTr),e(Wo,VS),e(VS,KTr),e(VS,Z5e),e(Z5e,eMr),e(VS,oMr),e(Wo,rMr),e(Wo,Rt),M(XS,Rt,null),e(Rt,tMr),e(Rt,K5e),e(K5e,aMr),e(Rt,nMr),e(Rt,cm),e(cm,sMr),e(cm,e0e),e(e0e,lMr),e(cm,iMr),e(cm,NK),e(NK,dMr),e(cm,mMr),e(Rt,cMr),M($E,Rt,null),e(Wo,fMr),e(Wo,co),M(zS,co,null),e(co,gMr),e(co,o0e),e(o0e,hMr),e(co,uMr),e(co,Fn),e(Fn,pMr),e(Fn,r0e),e(r0e,_Mr),e(Fn,bMr),e(Fn,t0e),e(t0e,vMr),e(Fn,FMr),e(Fn,a0e),e(a0e,TMr),e(Fn,MMr),e(co,EMr),e(co,K),e(K,kE),e(kE,n0e),e(n0e,CMr),e(kE,wMr),e(kE,qK),e(qK,AMr),e(kE,LMr),e(K,yMr),e(K,SE),e(SE,s0e),e(s0e,xMr),e(SE,$Mr),e(SE,jK),e(jK,kMr),e(SE,SMr),e(K,RMr),e(K,RE),e(RE,l0e),e(l0e,PMr),e(RE,BMr),e(RE,DK),e(DK,IMr),e(RE,NMr),e(K,qMr),e(K,PE),e(PE,i0e),e(i0e,jMr),e(PE,DMr),e(PE,GK),e(GK,GMr),e(PE,OMr),e(K,VMr),e(K,BE),e(BE,d0e),e(d0e,XMr),e(BE,zMr),e(BE,OK),e(OK,QMr),e(BE,WMr),e(K,UMr),e(K,IE),e(IE,m0e),e(m0e,HMr),e(IE,JMr),e(IE,VK),e(VK,YMr),e(IE,ZMr),e(K,KMr),e(K,NE),e(NE,c0e),e(c0e,eEr),e(NE,oEr),e(NE,XK),e(XK,rEr),e(NE,tEr),e(K,aEr),e(K,qE),e(qE,f0e),e(f0e,nEr),e(qE,sEr),e(qE,zK),e(zK,lEr),e(qE,iEr),e(K,dEr),e(K,jE),e(jE,g0e),e(g0e,mEr),e(jE,cEr),e(jE,QK),e(QK,fEr),e(jE,gEr),e(K,hEr),e(K,DE),e(DE,h0e),e(h0e,uEr),e(DE,pEr),e(DE,WK),e(WK,_Er),e(DE,bEr),e(K,vEr),e(K,GE),e(GE,u0e),e(u0e,FEr),e(GE,TEr),e(GE,UK),e(UK,MEr),e(GE,EEr),e(K,CEr),e(K,OE),e(OE,p0e),e(p0e,wEr),e(OE,AEr),e(OE,HK),e(HK,LEr),e(OE,yEr),e(K,xEr),e(K,VE),e(VE,_0e),e(_0e,$Er),e(VE,kEr),e(VE,JK),e(JK,SEr),e(VE,REr),e(K,PEr),e(K,XE),e(XE,b0e),e(b0e,BEr),e(XE,IEr),e(XE,YK),e(YK,NEr),e(XE,qEr),e(K,jEr),e(K,zE),e(zE,v0e),e(v0e,DEr),e(zE,GEr),e(zE,ZK),e(ZK,OEr),e(zE,VEr),e(K,XEr),e(K,QE),e(QE,F0e),e(F0e,zEr),e(QE,QEr),e(QE,KK),e(KK,WEr),e(QE,UEr),e(K,HEr),e(K,WE),e(WE,T0e),e(T0e,JEr),e(WE,YEr),e(WE,eee),e(eee,ZEr),e(WE,KEr),e(K,e4r),e(K,UE),e(UE,M0e),e(M0e,o4r),e(UE,r4r),e(UE,oee),e(oee,t4r),e(UE,a4r),e(K,n4r),e(K,HE),e(HE,E0e),e(E0e,s4r),e(HE,l4r),e(HE,ree),e(ree,i4r),e(HE,d4r),e(K,m4r),e(K,JE),e(JE,C0e),e(C0e,c4r),e(JE,f4r),e(JE,tee),e(tee,g4r),e(JE,h4r),e(K,u4r),e(K,YE),e(YE,w0e),e(w0e,p4r),e(YE,_4r),e(YE,aee),e(aee,b4r),e(YE,v4r),e(K,F4r),e(K,ZE),e(ZE,A0e),e(A0e,T4r),e(ZE,M4r),e(ZE,nee),e(nee,E4r),e(ZE,C4r),e(K,w4r),e(K,KE),e(KE,L0e),e(L0e,A4r),e(KE,L4r),e(KE,see),e(see,y4r),e(KE,x4r),e(K,$4r),e(K,e4),e(e4,y0e),e(y0e,k4r),e(e4,S4r),e(e4,lee),e(lee,R4r),e(e4,P4r),e(K,B4r),e(K,o4),e(o4,x0e),e(x0e,I4r),e(o4,N4r),e(o4,iee),e(iee,q4r),e(o4,j4r),e(K,D4r),e(K,r4),e(r4,$0e),e($0e,G4r),e(r4,O4r),e(r4,dee),e(dee,V4r),e(r4,X4r),e(K,z4r),e(K,t4),e(t4,k0e),e(k0e,Q4r),e(t4,W4r),e(t4,mee),e(mee,U4r),e(t4,H4r),e(K,J4r),e(K,a4),e(a4,S0e),e(S0e,Y4r),e(a4,Z4r),e(a4,cee),e(cee,K4r),e(a4,eCr),e(K,oCr),e(K,n4),e(n4,R0e),e(R0e,rCr),e(n4,tCr),e(n4,fee),e(fee,aCr),e(n4,nCr),e(K,sCr),e(K,s4),e(s4,P0e),e(P0e,lCr),e(s4,iCr),e(s4,gee),e(gee,dCr),e(s4,mCr),e(K,cCr),e(K,l4),e(l4,B0e),e(B0e,fCr),e(l4,gCr),e(l4,hee),e(hee,hCr),e(l4,uCr),e(K,pCr),e(K,i4),e(i4,I0e),e(I0e,_Cr),e(i4,bCr),e(i4,uee),e(uee,vCr),e(i4,FCr),e(K,TCr),e(K,d4),e(d4,N0e),e(N0e,MCr),e(d4,ECr),e(d4,pee),e(pee,CCr),e(d4,wCr),e(co,ACr),e(co,m4),e(m4,LCr),e(m4,q0e),e(q0e,yCr),e(m4,xCr),e(m4,j0e),e(j0e,$Cr),e(co,kCr),M(c4,co,null),b(c,edo,_),b(c,fm,_),e(fm,f4),e(f4,D0e),M(QS,D0e,null),e(fm,SCr),e(fm,G0e),e(G0e,RCr),b(c,odo,_),b(c,Uo,_),M(WS,Uo,null),e(Uo,PCr),e(Uo,gm),e(gm,BCr),e(gm,_ee),e(_ee,ICr),e(gm,NCr),e(gm,bee),e(bee,qCr),e(gm,jCr),e(Uo,DCr),e(Uo,US),e(US,GCr),e(US,O0e),e(O0e,OCr),e(US,VCr),e(Uo,XCr),e(Uo,Pt),M(HS,Pt,null),e(Pt,zCr),e(Pt,V0e),e(V0e,QCr),e(Pt,WCr),e(Pt,hm),e(hm,UCr),e(hm,X0e),e(X0e,HCr),e(hm,JCr),e(hm,vee),e(vee,YCr),e(hm,ZCr),e(Pt,KCr),M(g4,Pt,null),e(Uo,e3r),e(Uo,fo),M(JS,fo,null),e(fo,o3r),e(fo,z0e),e(z0e,r3r),e(fo,t3r),e(fo,Tn),e(Tn,a3r),e(Tn,Q0e),e(Q0e,n3r),e(Tn,s3r),e(Tn,W0e),e(W0e,l3r),e(Tn,i3r),e(Tn,U0e),e(U0e,d3r),e(Tn,m3r),e(fo,c3r),e(fo,Ye),e(Ye,h4),e(h4,H0e),e(H0e,f3r),e(h4,g3r),e(h4,Fee),e(Fee,h3r),e(h4,u3r),e(Ye,p3r),e(Ye,u4),e(u4,J0e),e(J0e,_3r),e(u4,b3r),e(u4,Tee),e(Tee,v3r),e(u4,F3r),e(Ye,T3r),e(Ye,p4),e(p4,Y0e),e(Y0e,M3r),e(p4,E3r),e(p4,Mee),e(Mee,C3r),e(p4,w3r),e(Ye,A3r),e(Ye,_4),e(_4,Z0e),e(Z0e,L3r),e(_4,y3r),e(_4,Eee),e(Eee,x3r),e(_4,$3r),e(Ye,k3r),e(Ye,b4),e(b4,K0e),e(K0e,S3r),e(b4,R3r),e(b4,Cee),e(Cee,P3r),e(b4,B3r),e(Ye,I3r),e(Ye,v4),e(v4,ewe),e(ewe,N3r),e(v4,q3r),e(v4,wee),e(wee,j3r),e(v4,D3r),e(Ye,G3r),e(Ye,F4),e(F4,owe),e(owe,O3r),e(F4,V3r),e(F4,Aee),e(Aee,X3r),e(F4,z3r),e(fo,Q3r),e(fo,T4),e(T4,W3r),e(T4,rwe),e(rwe,U3r),e(T4,H3r),e(T4,twe),e(twe,J3r),e(fo,Y3r),M(M4,fo,null),b(c,rdo,_),b(c,um,_),e(um,E4),e(E4,awe),M(YS,awe,null),e(um,Z3r),e(um,nwe),e(nwe,K3r),b(c,tdo,_),b(c,Ho,_),M(ZS,Ho,null),e(Ho,e5r),e(Ho,pm),e(pm,o5r),e(pm,Lee),e(Lee,r5r),e(pm,t5r),e(pm,yee),e(yee,a5r),e(pm,n5r),e(Ho,s5r),e(Ho,KS),e(KS,l5r),e(KS,swe),e(swe,i5r),e(KS,d5r),e(Ho,m5r),e(Ho,Bt),M(eR,Bt,null),e(Bt,c5r),e(Bt,lwe),e(lwe,f5r),e(Bt,g5r),e(Bt,_m),e(_m,h5r),e(_m,iwe),e(iwe,u5r),e(_m,p5r),e(_m,xee),e(xee,_5r),e(_m,b5r),e(Bt,v5r),M(C4,Bt,null),e(Ho,F5r),e(Ho,go),M(oR,go,null),e(go,T5r),e(go,dwe),e(dwe,M5r),e(go,E5r),e(go,Mn),e(Mn,C5r),e(Mn,mwe),e(mwe,w5r),e(Mn,A5r),e(Mn,cwe),e(cwe,L5r),e(Mn,y5r),e(Mn,fwe),e(fwe,x5r),e(Mn,$5r),e(go,k5r),e(go,U),e(U,w4),e(w4,gwe),e(gwe,S5r),e(w4,R5r),e(w4,$ee),e($ee,P5r),e(w4,B5r),e(U,I5r),e(U,A4),e(A4,hwe),e(hwe,N5r),e(A4,q5r),e(A4,kee),e(kee,j5r),e(A4,D5r),e(U,G5r),e(U,L4),e(L4,uwe),e(uwe,O5r),e(L4,V5r),e(L4,See),e(See,X5r),e(L4,z5r),e(U,Q5r),e(U,y4),e(y4,pwe),e(pwe,W5r),e(y4,U5r),e(y4,Ree),e(Ree,H5r),e(y4,J5r),e(U,Y5r),e(U,x4),e(x4,_we),e(_we,Z5r),e(x4,K5r),e(x4,Pee),e(Pee,e0r),e(x4,o0r),e(U,r0r),e(U,$4),e($4,bwe),e(bwe,t0r),e($4,a0r),e($4,Bee),e(Bee,n0r),e($4,s0r),e(U,l0r),e(U,k4),e(k4,vwe),e(vwe,i0r),e(k4,d0r),e(k4,Iee),e(Iee,m0r),e(k4,c0r),e(U,f0r),e(U,S4),e(S4,Fwe),e(Fwe,g0r),e(S4,h0r),e(S4,Nee),e(Nee,u0r),e(S4,p0r),e(U,_0r),e(U,R4),e(R4,Twe),e(Twe,b0r),e(R4,v0r),e(R4,qee),e(qee,F0r),e(R4,T0r),e(U,M0r),e(U,P4),e(P4,Mwe),e(Mwe,E0r),e(P4,C0r),e(P4,jee),e(jee,w0r),e(P4,A0r),e(U,L0r),e(U,B4),e(B4,Ewe),e(Ewe,y0r),e(B4,x0r),e(B4,Dee),e(Dee,$0r),e(B4,k0r),e(U,S0r),e(U,I4),e(I4,Cwe),e(Cwe,R0r),e(I4,P0r),e(I4,Gee),e(Gee,B0r),e(I4,I0r),e(U,N0r),e(U,N4),e(N4,wwe),e(wwe,q0r),e(N4,j0r),e(N4,Oee),e(Oee,D0r),e(N4,G0r),e(U,O0r),e(U,q4),e(q4,Awe),e(Awe,V0r),e(q4,X0r),e(q4,Vee),e(Vee,z0r),e(q4,Q0r),e(U,W0r),e(U,j4),e(j4,Lwe),e(Lwe,U0r),e(j4,H0r),e(j4,Xee),e(Xee,J0r),e(j4,Y0r),e(U,Z0r),e(U,D4),e(D4,ywe),e(ywe,K0r),e(D4,ewr),e(D4,zee),e(zee,owr),e(D4,rwr),e(U,twr),e(U,G4),e(G4,xwe),e(xwe,awr),e(G4,nwr),e(G4,Qee),e(Qee,swr),e(G4,lwr),e(U,iwr),e(U,O4),e(O4,$we),e($we,dwr),e(O4,mwr),e(O4,Wee),e(Wee,cwr),e(O4,fwr),e(U,gwr),e(U,V4),e(V4,kwe),e(kwe,hwr),e(V4,uwr),e(V4,Uee),e(Uee,pwr),e(V4,_wr),e(U,bwr),e(U,X4),e(X4,Swe),e(Swe,vwr),e(X4,Fwr),e(X4,Hee),e(Hee,Twr),e(X4,Mwr),e(U,Ewr),e(U,z4),e(z4,Rwe),e(Rwe,Cwr),e(z4,wwr),e(z4,Jee),e(Jee,Awr),e(z4,Lwr),e(U,ywr),e(U,Q4),e(Q4,Pwe),e(Pwe,xwr),e(Q4,$wr),e(Q4,Yee),e(Yee,kwr),e(Q4,Swr),e(U,Rwr),e(U,W4),e(W4,Bwe),e(Bwe,Pwr),e(W4,Bwr),e(W4,Zee),e(Zee,Iwr),e(W4,Nwr),e(U,qwr),e(U,U4),e(U4,Iwe),e(Iwe,jwr),e(U4,Dwr),e(U4,Kee),e(Kee,Gwr),e(U4,Owr),e(U,Vwr),e(U,H4),e(H4,Nwe),e(Nwe,Xwr),e(H4,zwr),e(H4,eoe),e(eoe,Qwr),e(H4,Wwr),e(U,Uwr),e(U,J4),e(J4,qwe),e(qwe,Hwr),e(J4,Jwr),e(J4,ooe),e(ooe,Ywr),e(J4,Zwr),e(U,Kwr),e(U,Y4),e(Y4,jwe),e(jwe,eAr),e(Y4,oAr),e(Y4,roe),e(roe,rAr),e(Y4,tAr),e(U,aAr),e(U,Z4),e(Z4,Dwe),e(Dwe,nAr),e(Z4,sAr),e(Z4,toe),e(toe,lAr),e(Z4,iAr),e(U,dAr),e(U,K4),e(K4,Gwe),e(Gwe,mAr),e(K4,cAr),e(K4,aoe),e(aoe,fAr),e(K4,gAr),e(U,hAr),e(U,eC),e(eC,Owe),e(Owe,uAr),e(eC,pAr),e(eC,noe),e(noe,_Ar),e(eC,bAr),e(U,vAr),e(U,oC),e(oC,Vwe),e(Vwe,FAr),e(oC,TAr),e(oC,soe),e(soe,MAr),e(oC,EAr),e(U,CAr),e(U,rC),e(rC,Xwe),e(Xwe,wAr),e(rC,AAr),e(rC,loe),e(loe,LAr),e(rC,yAr),e(U,xAr),e(U,tC),e(tC,zwe),e(zwe,$Ar),e(tC,kAr),e(tC,ioe),e(ioe,SAr),e(tC,RAr),e(U,PAr),e(U,aC),e(aC,Qwe),e(Qwe,BAr),e(aC,IAr),e(aC,doe),e(doe,NAr),e(aC,qAr),e(U,jAr),e(U,nC),e(nC,Wwe),e(Wwe,DAr),e(nC,GAr),e(nC,moe),e(moe,OAr),e(nC,VAr),e(U,XAr),e(U,sC),e(sC,Uwe),e(Uwe,zAr),e(sC,QAr),e(sC,coe),e(coe,WAr),e(sC,UAr),e(U,HAr),e(U,lC),e(lC,Hwe),e(Hwe,JAr),e(lC,YAr),e(lC,foe),e(foe,ZAr),e(lC,KAr),e(U,e6r),e(U,iC),e(iC,Jwe),e(Jwe,o6r),e(iC,r6r),e(iC,goe),e(goe,t6r),e(iC,a6r),e(U,n6r),e(U,dC),e(dC,Ywe),e(Ywe,s6r),e(dC,l6r),e(dC,hoe),e(hoe,i6r),e(dC,d6r),e(U,m6r),e(U,mC),e(mC,Zwe),e(Zwe,c6r),e(mC,f6r),e(mC,uoe),e(uoe,g6r),e(mC,h6r),e(U,u6r),e(U,cC),e(cC,Kwe),e(Kwe,p6r),e(cC,_6r),e(cC,poe),e(poe,b6r),e(cC,v6r),e(U,F6r),e(U,fC),e(fC,eAe),e(eAe,T6r),e(fC,M6r),e(fC,_oe),e(_oe,E6r),e(fC,C6r),e(go,w6r),e(go,gC),e(gC,A6r),e(gC,oAe),e(oAe,L6r),e(gC,y6r),e(gC,rAe),e(rAe,x6r),e(go,$6r),M(hC,go,null),b(c,ado,_),b(c,bm,_),e(bm,uC),e(uC,tAe),M(rR,tAe,null),e(bm,k6r),e(bm,aAe),e(aAe,S6r),b(c,ndo,_),b(c,Jo,_),M(tR,Jo,null),e(Jo,R6r),e(Jo,vm),e(vm,P6r),e(vm,boe),e(boe,B6r),e(vm,I6r),e(vm,voe),e(voe,N6r),e(vm,q6r),e(Jo,j6r),e(Jo,aR),e(aR,D6r),e(aR,nAe),e(nAe,G6r),e(aR,O6r),e(Jo,V6r),e(Jo,It),M(nR,It,null),e(It,X6r),e(It,sAe),e(sAe,z6r),e(It,Q6r),e(It,Fm),e(Fm,W6r),e(Fm,lAe),e(lAe,U6r),e(Fm,H6r),e(Fm,Foe),e(Foe,J6r),e(Fm,Y6r),e(It,Z6r),M(pC,It,null),e(Jo,K6r),e(Jo,ho),M(sR,ho,null),e(ho,e7r),e(ho,iAe),e(iAe,o7r),e(ho,r7r),e(ho,En),e(En,t7r),e(En,dAe),e(dAe,a7r),e(En,n7r),e(En,mAe),e(mAe,s7r),e(En,l7r),e(En,cAe),e(cAe,i7r),e(En,d7r),e(ho,m7r),e(ho,O),e(O,_C),e(_C,fAe),e(fAe,c7r),e(_C,f7r),e(_C,Toe),e(Toe,g7r),e(_C,h7r),e(O,u7r),e(O,bC),e(bC,gAe),e(gAe,p7r),e(bC,_7r),e(bC,Moe),e(Moe,b7r),e(bC,v7r),e(O,F7r),e(O,vC),e(vC,hAe),e(hAe,T7r),e(vC,M7r),e(vC,Eoe),e(Eoe,E7r),e(vC,C7r),e(O,w7r),e(O,FC),e(FC,uAe),e(uAe,A7r),e(FC,L7r),e(FC,Coe),e(Coe,y7r),e(FC,x7r),e(O,$7r),e(O,TC),e(TC,pAe),e(pAe,k7r),e(TC,S7r),e(TC,woe),e(woe,R7r),e(TC,P7r),e(O,B7r),e(O,MC),e(MC,_Ae),e(_Ae,I7r),e(MC,N7r),e(MC,Aoe),e(Aoe,q7r),e(MC,j7r),e(O,D7r),e(O,EC),e(EC,bAe),e(bAe,G7r),e(EC,O7r),e(EC,Loe),e(Loe,V7r),e(EC,X7r),e(O,z7r),e(O,CC),e(CC,vAe),e(vAe,Q7r),e(CC,W7r),e(CC,yoe),e(yoe,U7r),e(CC,H7r),e(O,J7r),e(O,wC),e(wC,FAe),e(FAe,Y7r),e(wC,Z7r),e(wC,xoe),e(xoe,K7r),e(wC,e8r),e(O,o8r),e(O,AC),e(AC,TAe),e(TAe,r8r),e(AC,t8r),e(AC,$oe),e($oe,a8r),e(AC,n8r),e(O,s8r),e(O,LC),e(LC,MAe),e(MAe,l8r),e(LC,i8r),e(LC,koe),e(koe,d8r),e(LC,m8r),e(O,c8r),e(O,yC),e(yC,EAe),e(EAe,f8r),e(yC,g8r),e(yC,Soe),e(Soe,h8r),e(yC,u8r),e(O,p8r),e(O,xC),e(xC,CAe),e(CAe,_8r),e(xC,b8r),e(xC,Roe),e(Roe,v8r),e(xC,F8r),e(O,T8r),e(O,$C),e($C,wAe),e(wAe,M8r),e($C,E8r),e($C,Poe),e(Poe,C8r),e($C,w8r),e(O,A8r),e(O,kC),e(kC,AAe),e(AAe,L8r),e(kC,y8r),e(kC,Boe),e(Boe,x8r),e(kC,$8r),e(O,k8r),e(O,SC),e(SC,LAe),e(LAe,S8r),e(SC,R8r),e(SC,Ioe),e(Ioe,P8r),e(SC,B8r),e(O,I8r),e(O,RC),e(RC,yAe),e(yAe,N8r),e(RC,q8r),e(RC,Noe),e(Noe,j8r),e(RC,D8r),e(O,G8r),e(O,PC),e(PC,xAe),e(xAe,O8r),e(PC,V8r),e(PC,qoe),e(qoe,X8r),e(PC,z8r),e(O,Q8r),e(O,BC),e(BC,$Ae),e($Ae,W8r),e(BC,U8r),e(BC,joe),e(joe,H8r),e(BC,J8r),e(O,Y8r),e(O,IC),e(IC,kAe),e(kAe,Z8r),e(IC,K8r),e(IC,Doe),e(Doe,eLr),e(IC,oLr),e(O,rLr),e(O,NC),e(NC,SAe),e(SAe,tLr),e(NC,aLr),e(NC,Goe),e(Goe,nLr),e(NC,sLr),e(O,lLr),e(O,qC),e(qC,RAe),e(RAe,iLr),e(qC,dLr),e(qC,Ooe),e(Ooe,mLr),e(qC,cLr),e(O,fLr),e(O,jC),e(jC,PAe),e(PAe,gLr),e(jC,hLr),e(jC,Voe),e(Voe,uLr),e(jC,pLr),e(O,_Lr),e(O,DC),e(DC,BAe),e(BAe,bLr),e(DC,vLr),e(DC,Xoe),e(Xoe,FLr),e(DC,TLr),e(O,MLr),e(O,GC),e(GC,IAe),e(IAe,ELr),e(GC,CLr),e(GC,zoe),e(zoe,wLr),e(GC,ALr),e(O,LLr),e(O,OC),e(OC,NAe),e(NAe,yLr),e(OC,xLr),e(OC,Qoe),e(Qoe,$Lr),e(OC,kLr),e(O,SLr),e(O,VC),e(VC,qAe),e(qAe,RLr),e(VC,PLr),e(VC,Woe),e(Woe,BLr),e(VC,ILr),e(O,NLr),e(O,XC),e(XC,jAe),e(jAe,qLr),e(XC,jLr),e(XC,Uoe),e(Uoe,DLr),e(XC,GLr),e(O,OLr),e(O,zC),e(zC,DAe),e(DAe,VLr),e(zC,XLr),e(zC,Hoe),e(Hoe,zLr),e(zC,QLr),e(O,WLr),e(O,QC),e(QC,GAe),e(GAe,ULr),e(QC,HLr),e(QC,Joe),e(Joe,JLr),e(QC,YLr),e(O,ZLr),e(O,WC),e(WC,OAe),e(OAe,KLr),e(WC,eyr),e(WC,Yoe),e(Yoe,oyr),e(WC,ryr),e(O,tyr),e(O,UC),e(UC,VAe),e(VAe,ayr),e(UC,nyr),e(UC,Zoe),e(Zoe,syr),e(UC,lyr),e(O,iyr),e(O,HC),e(HC,XAe),e(XAe,dyr),e(HC,myr),e(HC,Koe),e(Koe,cyr),e(HC,fyr),e(O,gyr),e(O,JC),e(JC,zAe),e(zAe,hyr),e(JC,uyr),e(JC,ere),e(ere,pyr),e(JC,_yr),e(O,byr),e(O,YC),e(YC,QAe),e(QAe,vyr),e(YC,Fyr),e(YC,ore),e(ore,Tyr),e(YC,Myr),e(O,Eyr),e(O,ZC),e(ZC,WAe),e(WAe,Cyr),e(ZC,wyr),e(ZC,rre),e(rre,Ayr),e(ZC,Lyr),e(O,yyr),e(O,KC),e(KC,UAe),e(UAe,xyr),e(KC,$yr),e(KC,tre),e(tre,kyr),e(KC,Syr),e(O,Ryr),e(O,e3),e(e3,HAe),e(HAe,Pyr),e(e3,Byr),e(e3,are),e(are,Iyr),e(e3,Nyr),e(O,qyr),e(O,o3),e(o3,JAe),e(JAe,jyr),e(o3,Dyr),e(o3,nre),e(nre,Gyr),e(o3,Oyr),e(O,Vyr),e(O,r3),e(r3,YAe),e(YAe,Xyr),e(r3,zyr),e(r3,sre),e(sre,Qyr),e(r3,Wyr),e(O,Uyr),e(O,t3),e(t3,ZAe),e(ZAe,Hyr),e(t3,Jyr),e(t3,lre),e(lre,Yyr),e(t3,Zyr),e(O,Kyr),e(O,a3),e(a3,KAe),e(KAe,e9r),e(a3,o9r),e(a3,ire),e(ire,r9r),e(a3,t9r),e(O,a9r),e(O,n3),e(n3,e6e),e(e6e,n9r),e(n3,s9r),e(n3,dre),e(dre,l9r),e(n3,i9r),e(O,d9r),e(O,s3),e(s3,o6e),e(o6e,m9r),e(s3,c9r),e(s3,mre),e(mre,f9r),e(s3,g9r),e(O,h9r),e(O,l3),e(l3,r6e),e(r6e,u9r),e(l3,p9r),e(l3,cre),e(cre,_9r),e(l3,b9r),e(O,v9r),e(O,i3),e(i3,t6e),e(t6e,F9r),e(i3,T9r),e(i3,fre),e(fre,M9r),e(i3,E9r),e(O,C9r),e(O,d3),e(d3,a6e),e(a6e,w9r),e(d3,A9r),e(d3,gre),e(gre,L9r),e(d3,y9r),e(O,x9r),e(O,m3),e(m3,n6e),e(n6e,$9r),e(m3,k9r),e(m3,hre),e(hre,S9r),e(m3,R9r),e(O,P9r),e(O,c3),e(c3,s6e),e(s6e,B9r),e(c3,I9r),e(c3,ure),e(ure,N9r),e(c3,q9r),e(ho,j9r),e(ho,f3),e(f3,D9r),e(f3,l6e),e(l6e,G9r),e(f3,O9r),e(f3,i6e),e(i6e,V9r),e(ho,X9r),M(g3,ho,null),b(c,sdo,_),b(c,Tm,_),e(Tm,h3),e(h3,d6e),M(lR,d6e,null),e(Tm,z9r),e(Tm,m6e),e(m6e,Q9r),b(c,ldo,_),b(c,Yo,_),M(iR,Yo,null),e(Yo,W9r),e(Yo,Mm),e(Mm,U9r),e(Mm,pre),e(pre,H9r),e(Mm,J9r),e(Mm,_re),e(_re,Y9r),e(Mm,Z9r),e(Yo,K9r),e(Yo,dR),e(dR,exr),e(dR,c6e),e(c6e,oxr),e(dR,rxr),e(Yo,txr),e(Yo,Nt),M(mR,Nt,null),e(Nt,axr),e(Nt,f6e),e(f6e,nxr),e(Nt,sxr),e(Nt,Em),e(Em,lxr),e(Em,g6e),e(g6e,ixr),e(Em,dxr),e(Em,bre),e(bre,mxr),e(Em,cxr),e(Nt,fxr),M(u3,Nt,null),e(Yo,gxr),e(Yo,uo),M(cR,uo,null),e(uo,hxr),e(uo,h6e),e(h6e,uxr),e(uo,pxr),e(uo,Cn),e(Cn,_xr),e(Cn,u6e),e(u6e,bxr),e(Cn,vxr),e(Cn,p6e),e(p6e,Fxr),e(Cn,Txr),e(Cn,_6e),e(_6e,Mxr),e(Cn,Exr),e(uo,Cxr),e(uo,b6e),e(b6e,p3),e(p3,v6e),e(v6e,wxr),e(p3,Axr),e(p3,vre),e(vre,Lxr),e(p3,yxr),e(uo,xxr),e(uo,_3),e(_3,$xr),e(_3,F6e),e(F6e,kxr),e(_3,Sxr),e(_3,T6e),e(T6e,Rxr),e(uo,Pxr),M(b3,uo,null),b(c,ido,_),b(c,Cm,_),e(Cm,v3),e(v3,M6e),M(fR,M6e,null),e(Cm,Bxr),e(Cm,E6e),e(E6e,Ixr),b(c,ddo,_),b(c,Zo,_),M(gR,Zo,null),e(Zo,Nxr),e(Zo,wm),e(wm,qxr),e(wm,Fre),e(Fre,jxr),e(wm,Dxr),e(wm,Tre),e(Tre,Gxr),e(wm,Oxr),e(Zo,Vxr),e(Zo,hR),e(hR,Xxr),e(hR,C6e),e(C6e,zxr),e(hR,Qxr),e(Zo,Wxr),e(Zo,qt),M(uR,qt,null),e(qt,Uxr),e(qt,w6e),e(w6e,Hxr),e(qt,Jxr),e(qt,Am),e(Am,Yxr),e(Am,A6e),e(A6e,Zxr),e(Am,Kxr),e(Am,Mre),e(Mre,e$r),e(Am,o$r),e(qt,r$r),M(F3,qt,null),e(Zo,t$r),e(Zo,po),M(pR,po,null),e(po,a$r),e(po,L6e),e(L6e,n$r),e(po,s$r),e(po,wn),e(wn,l$r),e(wn,y6e),e(y6e,i$r),e(wn,d$r),e(wn,x6e),e(x6e,m$r),e(wn,c$r),e(wn,$6e),e($6e,f$r),e(wn,g$r),e(po,h$r),e(po,Lm),e(Lm,T3),e(T3,k6e),e(k6e,u$r),e(T3,p$r),e(T3,Ere),e(Ere,_$r),e(T3,b$r),e(Lm,v$r),e(Lm,M3),e(M3,S6e),e(S6e,F$r),e(M3,T$r),e(M3,Cre),e(Cre,M$r),e(M3,E$r),e(Lm,C$r),e(Lm,E3),e(E3,R6e),e(R6e,w$r),e(E3,A$r),e(E3,wre),e(wre,L$r),e(E3,y$r),e(po,x$r),e(po,C3),e(C3,$$r),e(C3,P6e),e(P6e,k$r),e(C3,S$r),e(C3,B6e),e(B6e,R$r),e(po,P$r),M(w3,po,null),b(c,mdo,_),b(c,ym,_),e(ym,A3),e(A3,I6e),M(_R,I6e,null),e(ym,B$r),e(ym,N6e),e(N6e,I$r),b(c,cdo,_),b(c,Ko,_),M(bR,Ko,null),e(Ko,N$r),e(Ko,xm),e(xm,q$r),e(xm,Are),e(Are,j$r),e(xm,D$r),e(xm,Lre),e(Lre,G$r),e(xm,O$r),e(Ko,V$r),e(Ko,vR),e(vR,X$r),e(vR,q6e),e(q6e,z$r),e(vR,Q$r),e(Ko,W$r),e(Ko,jt),M(FR,jt,null),e(jt,U$r),e(jt,j6e),e(j6e,H$r),e(jt,J$r),e(jt,$m),e($m,Y$r),e($m,D6e),e(D6e,Z$r),e($m,K$r),e($m,yre),e(yre,ekr),e($m,okr),e(jt,rkr),M(L3,jt,null),e(Ko,tkr),e(Ko,_o),M(TR,_o,null),e(_o,akr),e(_o,G6e),e(G6e,nkr),e(_o,skr),e(_o,An),e(An,lkr),e(An,O6e),e(O6e,ikr),e(An,dkr),e(An,V6e),e(V6e,mkr),e(An,ckr),e(An,X6e),e(X6e,fkr),e(An,gkr),e(_o,hkr),e(_o,Fe),e(Fe,y3),e(y3,z6e),e(z6e,ukr),e(y3,pkr),e(y3,xre),e(xre,_kr),e(y3,bkr),e(Fe,vkr),e(Fe,x3),e(x3,Q6e),e(Q6e,Fkr),e(x3,Tkr),e(x3,$re),e($re,Mkr),e(x3,Ekr),e(Fe,Ckr),e(Fe,$3),e($3,W6e),e(W6e,wkr),e($3,Akr),e($3,kre),e(kre,Lkr),e($3,ykr),e(Fe,xkr),e(Fe,k3),e(k3,U6e),e(U6e,$kr),e(k3,kkr),e(k3,Sre),e(Sre,Skr),e(k3,Rkr),e(Fe,Pkr),e(Fe,jl),e(jl,H6e),e(H6e,Bkr),e(jl,Ikr),e(jl,Rre),e(Rre,Nkr),e(jl,qkr),e(jl,Pre),e(Pre,jkr),e(jl,Dkr),e(Fe,Gkr),e(Fe,S3),e(S3,J6e),e(J6e,Okr),e(S3,Vkr),e(S3,Bre),e(Bre,Xkr),e(S3,zkr),e(Fe,Qkr),e(Fe,Dl),e(Dl,Y6e),e(Y6e,Wkr),e(Dl,Ukr),e(Dl,Ire),e(Ire,Hkr),e(Dl,Jkr),e(Dl,Nre),e(Nre,Ykr),e(Dl,Zkr),e(Fe,Kkr),e(Fe,R3),e(R3,Z6e),e(Z6e,eSr),e(R3,oSr),e(R3,qre),e(qre,rSr),e(R3,tSr),e(Fe,aSr),e(Fe,P3),e(P3,K6e),e(K6e,nSr),e(P3,sSr),e(P3,jre),e(jre,lSr),e(P3,iSr),e(Fe,dSr),e(Fe,Dt),e(Dt,e7e),e(e7e,mSr),e(Dt,cSr),e(Dt,Dre),e(Dre,fSr),e(Dt,gSr),e(Dt,Gre),e(Gre,hSr),e(Dt,uSr),e(Dt,Ore),e(Ore,pSr),e(Dt,_Sr),e(Fe,bSr),e(Fe,B3),e(B3,o7e),e(o7e,vSr),e(B3,FSr),e(B3,Vre),e(Vre,TSr),e(B3,MSr),e(Fe,ESr),e(Fe,I3),e(I3,r7e),e(r7e,CSr),e(I3,wSr),e(I3,Xre),e(Xre,ASr),e(I3,LSr),e(Fe,ySr),e(Fe,N3),e(N3,t7e),e(t7e,xSr),e(N3,$Sr),e(N3,zre),e(zre,kSr),e(N3,SSr),e(Fe,RSr),e(Fe,q3),e(q3,a7e),e(a7e,PSr),e(q3,BSr),e(q3,Qre),e(Qre,ISr),e(q3,NSr),e(Fe,qSr),e(Fe,j3),e(j3,n7e),e(n7e,jSr),e(j3,DSr),e(j3,Wre),e(Wre,GSr),e(j3,OSr),e(Fe,VSr),e(Fe,D3),e(D3,s7e),e(s7e,XSr),e(D3,zSr),e(D3,Ure),e(Ure,QSr),e(D3,WSr),e(Fe,USr),e(Fe,G3),e(G3,l7e),e(l7e,HSr),e(G3,JSr),e(G3,Hre),e(Hre,YSr),e(G3,ZSr),e(Fe,KSr),e(Fe,O3),e(O3,i7e),e(i7e,eRr),e(O3,oRr),e(O3,Jre),e(Jre,rRr),e(O3,tRr),e(Fe,aRr),e(Fe,V3),e(V3,d7e),e(d7e,nRr),e(V3,sRr),e(V3,Yre),e(Yre,lRr),e(V3,iRr),e(_o,dRr),e(_o,X3),e(X3,mRr),e(X3,m7e),e(m7e,cRr),e(X3,fRr),e(X3,c7e),e(c7e,gRr),e(_o,hRr),M(z3,_o,null),b(c,fdo,_),b(c,km,_),e(km,Q3),e(Q3,f7e),M(MR,f7e,null),e(km,uRr),e(km,g7e),e(g7e,pRr),b(c,gdo,_),b(c,er,_),M(ER,er,null),e(er,_Rr),e(er,Sm),e(Sm,bRr),e(Sm,Zre),e(Zre,vRr),e(Sm,FRr),e(Sm,Kre),e(Kre,TRr),e(Sm,MRr),e(er,ERr),e(er,CR),e(CR,CRr),e(CR,h7e),e(h7e,wRr),e(CR,ARr),e(er,LRr),e(er,Gt),M(wR,Gt,null),e(Gt,yRr),e(Gt,u7e),e(u7e,xRr),e(Gt,$Rr),e(Gt,Rm),e(Rm,kRr),e(Rm,p7e),e(p7e,SRr),e(Rm,RRr),e(Rm,ete),e(ete,PRr),e(Rm,BRr),e(Gt,IRr),M(W3,Gt,null),e(er,NRr),e(er,bo),M(AR,bo,null),e(bo,qRr),e(bo,_7e),e(_7e,jRr),e(bo,DRr),e(bo,Ln),e(Ln,GRr),e(Ln,b7e),e(b7e,ORr),e(Ln,VRr),e(Ln,v7e),e(v7e,XRr),e(Ln,zRr),e(Ln,F7e),e(F7e,QRr),e(Ln,WRr),e(bo,URr),e(bo,T7e),e(T7e,U3),e(U3,M7e),e(M7e,HRr),e(U3,JRr),e(U3,ote),e(ote,YRr),e(U3,ZRr),e(bo,KRr),e(bo,H3),e(H3,ePr),e(H3,E7e),e(E7e,oPr),e(H3,rPr),e(H3,C7e),e(C7e,tPr),e(bo,aPr),M(J3,bo,null),b(c,hdo,_),b(c,Pm,_),e(Pm,Y3),e(Y3,w7e),M(LR,w7e,null),e(Pm,nPr),e(Pm,A7e),e(A7e,sPr),b(c,udo,_),b(c,or,_),M(yR,or,null),e(or,lPr),e(or,Bm),e(Bm,iPr),e(Bm,rte),e(rte,dPr),e(Bm,mPr),e(Bm,tte),e(tte,cPr),e(Bm,fPr),e(or,gPr),e(or,xR),e(xR,hPr),e(xR,L7e),e(L7e,uPr),e(xR,pPr),e(or,_Pr),e(or,Ot),M($R,Ot,null),e(Ot,bPr),e(Ot,y7e),e(y7e,vPr),e(Ot,FPr),e(Ot,Im),e(Im,TPr),e(Im,x7e),e(x7e,MPr),e(Im,EPr),e(Im,ate),e(ate,CPr),e(Im,wPr),e(Ot,APr),M(Z3,Ot,null),e(or,LPr),e(or,vo),M(kR,vo,null),e(vo,yPr),e(vo,$7e),e($7e,xPr),e(vo,$Pr),e(vo,yn),e(yn,kPr),e(yn,k7e),e(k7e,SPr),e(yn,RPr),e(yn,S7e),e(S7e,PPr),e(yn,BPr),e(yn,R7e),e(R7e,IPr),e(yn,NPr),e(vo,qPr),e(vo,P7e),e(P7e,K3),e(K3,B7e),e(B7e,jPr),e(K3,DPr),e(K3,nte),e(nte,GPr),e(K3,OPr),e(vo,VPr),e(vo,e5),e(e5,XPr),e(e5,I7e),e(I7e,zPr),e(e5,QPr),e(e5,N7e),e(N7e,WPr),e(vo,UPr),M(o5,vo,null),b(c,pdo,_),b(c,Nm,_),e(Nm,r5),e(r5,q7e),M(SR,q7e,null),e(Nm,HPr),e(Nm,j7e),e(j7e,JPr),b(c,_do,_),b(c,rr,_),M(RR,rr,null),e(rr,YPr),e(rr,qm),e(qm,ZPr),e(qm,ste),e(ste,KPr),e(qm,eBr),e(qm,lte),e(lte,oBr),e(qm,rBr),e(rr,tBr),e(rr,PR),e(PR,aBr),e(PR,D7e),e(D7e,nBr),e(PR,sBr),e(rr,lBr),e(rr,Vt),M(BR,Vt,null),e(Vt,iBr),e(Vt,G7e),e(G7e,dBr),e(Vt,mBr),e(Vt,jm),e(jm,cBr),e(jm,O7e),e(O7e,fBr),e(jm,gBr),e(jm,ite),e(ite,hBr),e(jm,uBr),e(Vt,pBr),M(t5,Vt,null),e(rr,_Br),e(rr,Fo),M(IR,Fo,null),e(Fo,bBr),e(Fo,V7e),e(V7e,vBr),e(Fo,FBr),e(Fo,xn),e(xn,TBr),e(xn,X7e),e(X7e,MBr),e(xn,EBr),e(xn,z7e),e(z7e,CBr),e(xn,wBr),e(xn,Q7e),e(Q7e,ABr),e(xn,LBr),e(Fo,yBr),e(Fo,W7e),e(W7e,a5),e(a5,U7e),e(U7e,xBr),e(a5,$Br),e(a5,dte),e(dte,kBr),e(a5,SBr),e(Fo,RBr),e(Fo,n5),e(n5,PBr),e(n5,H7e),e(H7e,BBr),e(n5,IBr),e(n5,J7e),e(J7e,NBr),e(Fo,qBr),M(s5,Fo,null),b(c,bdo,_),b(c,Dm,_),e(Dm,l5),e(l5,Y7e),M(NR,Y7e,null),e(Dm,jBr),e(Dm,Z7e),e(Z7e,DBr),b(c,vdo,_),b(c,tr,_),M(qR,tr,null),e(tr,GBr),e(tr,Gm),e(Gm,OBr),e(Gm,mte),e(mte,VBr),e(Gm,XBr),e(Gm,cte),e(cte,zBr),e(Gm,QBr),e(tr,WBr),e(tr,jR),e(jR,UBr),e(jR,K7e),e(K7e,HBr),e(jR,JBr),e(tr,YBr),e(tr,Xt),M(DR,Xt,null),e(Xt,ZBr),e(Xt,e8e),e(e8e,KBr),e(Xt,eIr),e(Xt,Om),e(Om,oIr),e(Om,o8e),e(o8e,rIr),e(Om,tIr),e(Om,fte),e(fte,aIr),e(Om,nIr),e(Xt,sIr),M(i5,Xt,null),e(tr,lIr),e(tr,To),M(GR,To,null),e(To,iIr),e(To,r8e),e(r8e,dIr),e(To,mIr),e(To,$n),e($n,cIr),e($n,t8e),e(t8e,fIr),e($n,gIr),e($n,a8e),e(a8e,hIr),e($n,uIr),e($n,n8e),e(n8e,pIr),e($n,_Ir),e(To,bIr),e(To,Ne),e(Ne,d5),e(d5,s8e),e(s8e,vIr),e(d5,FIr),e(d5,gte),e(gte,TIr),e(d5,MIr),e(Ne,EIr),e(Ne,m5),e(m5,l8e),e(l8e,CIr),e(m5,wIr),e(m5,hte),e(hte,AIr),e(m5,LIr),e(Ne,yIr),e(Ne,c5),e(c5,i8e),e(i8e,xIr),e(c5,$Ir),e(c5,ute),e(ute,kIr),e(c5,SIr),e(Ne,RIr),e(Ne,f5),e(f5,d8e),e(d8e,PIr),e(f5,BIr),e(f5,pte),e(pte,IIr),e(f5,NIr),e(Ne,qIr),e(Ne,g5),e(g5,m8e),e(m8e,jIr),e(g5,DIr),e(g5,_te),e(_te,GIr),e(g5,OIr),e(Ne,VIr),e(Ne,h5),e(h5,c8e),e(c8e,XIr),e(h5,zIr),e(h5,bte),e(bte,QIr),e(h5,WIr),e(Ne,UIr),e(Ne,u5),e(u5,f8e),e(f8e,HIr),e(u5,JIr),e(u5,vte),e(vte,YIr),e(u5,ZIr),e(Ne,KIr),e(Ne,p5),e(p5,g8e),e(g8e,eNr),e(p5,oNr),e(p5,Fte),e(Fte,rNr),e(p5,tNr),e(Ne,aNr),e(Ne,_5),e(_5,h8e),e(h8e,nNr),e(_5,sNr),e(_5,Tte),e(Tte,lNr),e(_5,iNr),e(To,dNr),e(To,b5),e(b5,mNr),e(b5,u8e),e(u8e,cNr),e(b5,fNr),e(b5,p8e),e(p8e,gNr),e(To,hNr),M(v5,To,null),b(c,Fdo,_),b(c,Vm,_),e(Vm,F5),e(F5,_8e),M(OR,_8e,null),e(Vm,uNr),e(Vm,b8e),e(b8e,pNr),b(c,Tdo,_),b(c,ar,_),M(VR,ar,null),e(ar,_Nr),e(ar,Xm),e(Xm,bNr),e(Xm,Mte),e(Mte,vNr),e(Xm,FNr),e(Xm,Ete),e(Ete,TNr),e(Xm,MNr),e(ar,ENr),e(ar,XR),e(XR,CNr),e(XR,v8e),e(v8e,wNr),e(XR,ANr),e(ar,LNr),e(ar,zt),M(zR,zt,null),e(zt,yNr),e(zt,F8e),e(F8e,xNr),e(zt,$Nr),e(zt,zm),e(zm,kNr),e(zm,T8e),e(T8e,SNr),e(zm,RNr),e(zm,Cte),e(Cte,PNr),e(zm,BNr),e(zt,INr),M(T5,zt,null),e(ar,NNr),e(ar,Mo),M(QR,Mo,null),e(Mo,qNr),e(Mo,M8e),e(M8e,jNr),e(Mo,DNr),e(Mo,kn),e(kn,GNr),e(kn,E8e),e(E8e,ONr),e(kn,VNr),e(kn,C8e),e(C8e,XNr),e(kn,zNr),e(kn,w8e),e(w8e,QNr),e(kn,WNr),e(Mo,UNr),e(Mo,Ft),e(Ft,M5),e(M5,A8e),e(A8e,HNr),e(M5,JNr),e(M5,wte),e(wte,YNr),e(M5,ZNr),e(Ft,KNr),e(Ft,E5),e(E5,L8e),e(L8e,eqr),e(E5,oqr),e(E5,Ate),e(Ate,rqr),e(E5,tqr),e(Ft,aqr),e(Ft,C5),e(C5,y8e),e(y8e,nqr),e(C5,sqr),e(C5,Lte),e(Lte,lqr),e(C5,iqr),e(Ft,dqr),e(Ft,w5),e(w5,x8e),e(x8e,mqr),e(w5,cqr),e(w5,yte),e(yte,fqr),e(w5,gqr),e(Ft,hqr),e(Ft,A5),e(A5,$8e),e($8e,uqr),e(A5,pqr),e(A5,xte),e(xte,_qr),e(A5,bqr),e(Mo,vqr),e(Mo,L5),e(L5,Fqr),e(L5,k8e),e(k8e,Tqr),e(L5,Mqr),e(L5,S8e),e(S8e,Eqr),e(Mo,Cqr),M(y5,Mo,null),b(c,Mdo,_),b(c,Qm,_),e(Qm,x5),e(x5,R8e),M(WR,R8e,null),e(Qm,wqr),e(Qm,P8e),e(P8e,Aqr),b(c,Edo,_),b(c,nr,_),M(UR,nr,null),e(nr,Lqr),e(nr,Wm),e(Wm,yqr),e(Wm,$te),e($te,xqr),e(Wm,$qr),e(Wm,kte),e(kte,kqr),e(Wm,Sqr),e(nr,Rqr),e(nr,HR),e(HR,Pqr),e(HR,B8e),e(B8e,Bqr),e(HR,Iqr),e(nr,Nqr),e(nr,Qt),M(JR,Qt,null),e(Qt,qqr),e(Qt,I8e),e(I8e,jqr),e(Qt,Dqr),e(Qt,Um),e(Um,Gqr),e(Um,N8e),e(N8e,Oqr),e(Um,Vqr),e(Um,Ste),e(Ste,Xqr),e(Um,zqr),e(Qt,Qqr),M($5,Qt,null),e(nr,Wqr),e(nr,Eo),M(YR,Eo,null),e(Eo,Uqr),e(Eo,q8e),e(q8e,Hqr),e(Eo,Jqr),e(Eo,Sn),e(Sn,Yqr),e(Sn,j8e),e(j8e,Zqr),e(Sn,Kqr),e(Sn,D8e),e(D8e,ejr),e(Sn,ojr),e(Sn,G8e),e(G8e,rjr),e(Sn,tjr),e(Eo,ajr),e(Eo,xe),e(xe,k5),e(k5,O8e),e(O8e,njr),e(k5,sjr),e(k5,Rte),e(Rte,ljr),e(k5,ijr),e(xe,djr),e(xe,S5),e(S5,V8e),e(V8e,mjr),e(S5,cjr),e(S5,Pte),e(Pte,fjr),e(S5,gjr),e(xe,hjr),e(xe,R5),e(R5,X8e),e(X8e,ujr),e(R5,pjr),e(R5,Bte),e(Bte,_jr),e(R5,bjr),e(xe,vjr),e(xe,P5),e(P5,z8e),e(z8e,Fjr),e(P5,Tjr),e(P5,Ite),e(Ite,Mjr),e(P5,Ejr),e(xe,Cjr),e(xe,B5),e(B5,Q8e),e(Q8e,wjr),e(B5,Ajr),e(B5,Nte),e(Nte,Ljr),e(B5,yjr),e(xe,xjr),e(xe,I5),e(I5,W8e),e(W8e,$jr),e(I5,kjr),e(I5,qte),e(qte,Sjr),e(I5,Rjr),e(xe,Pjr),e(xe,N5),e(N5,U8e),e(U8e,Bjr),e(N5,Ijr),e(N5,jte),e(jte,Njr),e(N5,qjr),e(xe,jjr),e(xe,q5),e(q5,H8e),e(H8e,Djr),e(q5,Gjr),e(q5,Dte),e(Dte,Ojr),e(q5,Vjr),e(xe,Xjr),e(xe,j5),e(j5,J8e),e(J8e,zjr),e(j5,Qjr),e(j5,Gte),e(Gte,Wjr),e(j5,Ujr),e(xe,Hjr),e(xe,D5),e(D5,Y8e),e(Y8e,Jjr),e(D5,Yjr),e(D5,Ote),e(Ote,Zjr),e(D5,Kjr),e(Eo,eDr),e(Eo,G5),e(G5,oDr),e(G5,Z8e),e(Z8e,rDr),e(G5,tDr),e(G5,K8e),e(K8e,aDr),e(Eo,nDr),M(O5,Eo,null),b(c,Cdo,_),b(c,Hm,_),e(Hm,V5),e(V5,eLe),M(ZR,eLe,null),e(Hm,sDr),e(Hm,oLe),e(oLe,lDr),b(c,wdo,_),b(c,sr,_),M(KR,sr,null),e(sr,iDr),e(sr,Jm),e(Jm,dDr),e(Jm,Vte),e(Vte,mDr),e(Jm,cDr),e(Jm,Xte),e(Xte,fDr),e(Jm,gDr),e(sr,hDr),e(sr,eP),e(eP,uDr),e(eP,rLe),e(rLe,pDr),e(eP,_Dr),e(sr,bDr),e(sr,Wt),M(oP,Wt,null),e(Wt,vDr),e(Wt,tLe),e(tLe,FDr),e(Wt,TDr),e(Wt,Ym),e(Ym,MDr),e(Ym,aLe),e(aLe,EDr),e(Ym,CDr),e(Ym,zte),e(zte,wDr),e(Ym,ADr),e(Wt,LDr),M(X5,Wt,null),e(sr,yDr),e(sr,Co),M(rP,Co,null),e(Co,xDr),e(Co,nLe),e(nLe,$Dr),e(Co,kDr),e(Co,Rn),e(Rn,SDr),e(Rn,sLe),e(sLe,RDr),e(Rn,PDr),e(Rn,lLe),e(lLe,BDr),e(Rn,IDr),e(Rn,iLe),e(iLe,NDr),e(Rn,qDr),e(Co,jDr),e(Co,Zm),e(Zm,z5),e(z5,dLe),e(dLe,DDr),e(z5,GDr),e(z5,Qte),e(Qte,ODr),e(z5,VDr),e(Zm,XDr),e(Zm,Q5),e(Q5,mLe),e(mLe,zDr),e(Q5,QDr),e(Q5,Wte),e(Wte,WDr),e(Q5,UDr),e(Zm,HDr),e(Zm,W5),e(W5,cLe),e(cLe,JDr),e(W5,YDr),e(W5,Ute),e(Ute,ZDr),e(W5,KDr),e(Co,eGr),e(Co,U5),e(U5,oGr),e(U5,fLe),e(fLe,rGr),e(U5,tGr),e(U5,gLe),e(gLe,aGr),e(Co,nGr),M(H5,Co,null),b(c,Ado,_),b(c,Km,_),e(Km,J5),e(J5,hLe),M(tP,hLe,null),e(Km,sGr),e(Km,uLe),e(uLe,lGr),b(c,Ldo,_),b(c,lr,_),M(aP,lr,null),e(lr,iGr),e(lr,ec),e(ec,dGr),e(ec,Hte),e(Hte,mGr),e(ec,cGr),e(ec,Jte),e(Jte,fGr),e(ec,gGr),e(lr,hGr),e(lr,nP),e(nP,uGr),e(nP,pLe),e(pLe,pGr),e(nP,_Gr),e(lr,bGr),e(lr,Ut),M(sP,Ut,null),e(Ut,vGr),e(Ut,_Le),e(_Le,FGr),e(Ut,TGr),e(Ut,oc),e(oc,MGr),e(oc,bLe),e(bLe,EGr),e(oc,CGr),e(oc,Yte),e(Yte,wGr),e(oc,AGr),e(Ut,LGr),M(Y5,Ut,null),e(lr,yGr),e(lr,wo),M(lP,wo,null),e(wo,xGr),e(wo,vLe),e(vLe,$Gr),e(wo,kGr),e(wo,Pn),e(Pn,SGr),e(Pn,FLe),e(FLe,RGr),e(Pn,PGr),e(Pn,TLe),e(TLe,BGr),e(Pn,IGr),e(Pn,MLe),e(MLe,NGr),e(Pn,qGr),e(wo,jGr),e(wo,Tt),e(Tt,Z5),e(Z5,ELe),e(ELe,DGr),e(Z5,GGr),e(Z5,Zte),e(Zte,OGr),e(Z5,VGr),e(Tt,XGr),e(Tt,K5),e(K5,CLe),e(CLe,zGr),e(K5,QGr),e(K5,Kte),e(Kte,WGr),e(K5,UGr),e(Tt,HGr),e(Tt,e0),e(e0,wLe),e(wLe,JGr),e(e0,YGr),e(e0,eae),e(eae,ZGr),e(e0,KGr),e(Tt,eOr),e(Tt,o0),e(o0,ALe),e(ALe,oOr),e(o0,rOr),e(o0,oae),e(oae,tOr),e(o0,aOr),e(Tt,nOr),e(Tt,r0),e(r0,LLe),e(LLe,sOr),e(r0,lOr),e(r0,rae),e(rae,iOr),e(r0,dOr),e(wo,mOr),e(wo,t0),e(t0,cOr),e(t0,yLe),e(yLe,fOr),e(t0,gOr),e(t0,xLe),e(xLe,hOr),e(wo,uOr),M(a0,wo,null),b(c,ydo,_),b(c,rc,_),e(rc,n0),e(n0,$Le),M(iP,$Le,null),e(rc,pOr),e(rc,kLe),e(kLe,_Or),b(c,xdo,_),b(c,ir,_),M(dP,ir,null),e(ir,bOr),e(ir,tc),e(tc,vOr),e(tc,tae),e(tae,FOr),e(tc,TOr),e(tc,aae),e(aae,MOr),e(tc,EOr),e(ir,COr),e(ir,mP),e(mP,wOr),e(mP,SLe),e(SLe,AOr),e(mP,LOr),e(ir,yOr),e(ir,Ht),M(cP,Ht,null),e(Ht,xOr),e(Ht,RLe),e(RLe,$Or),e(Ht,kOr),e(Ht,ac),e(ac,SOr),e(ac,PLe),e(PLe,ROr),e(ac,POr),e(ac,nae),e(nae,BOr),e(ac,IOr),e(Ht,NOr),M(s0,Ht,null),e(ir,qOr),e(ir,Ao),M(fP,Ao,null),e(Ao,jOr),e(Ao,BLe),e(BLe,DOr),e(Ao,GOr),e(Ao,Bn),e(Bn,OOr),e(Bn,ILe),e(ILe,VOr),e(Bn,XOr),e(Bn,NLe),e(NLe,zOr),e(Bn,QOr),e(Bn,qLe),e(qLe,WOr),e(Bn,UOr),e(Ao,HOr),e(Ao,In),e(In,l0),e(l0,jLe),e(jLe,JOr),e(l0,YOr),e(l0,sae),e(sae,ZOr),e(l0,KOr),e(In,eVr),e(In,i0),e(i0,DLe),e(DLe,oVr),e(i0,rVr),e(i0,lae),e(lae,tVr),e(i0,aVr),e(In,nVr),e(In,d0),e(d0,GLe),e(GLe,sVr),e(d0,lVr),e(d0,iae),e(iae,iVr),e(d0,dVr),e(In,mVr),e(In,m0),e(m0,OLe),e(OLe,cVr),e(m0,fVr),e(m0,dae),e(dae,gVr),e(m0,hVr),e(Ao,uVr),e(Ao,c0),e(c0,pVr),e(c0,VLe),e(VLe,_Vr),e(c0,bVr),e(c0,XLe),e(XLe,vVr),e(Ao,FVr),M(f0,Ao,null),b(c,$do,_),b(c,nc,_),e(nc,g0),e(g0,zLe),M(gP,zLe,null),e(nc,TVr),e(nc,QLe),e(QLe,MVr),b(c,kdo,_),b(c,dr,_),M(hP,dr,null),e(dr,EVr),e(dr,sc),e(sc,CVr),e(sc,mae),e(mae,wVr),e(sc,AVr),e(sc,cae),e(cae,LVr),e(sc,yVr),e(dr,xVr),e(dr,uP),e(uP,$Vr),e(uP,WLe),e(WLe,kVr),e(uP,SVr),e(dr,RVr),e(dr,Jt),M(pP,Jt,null),e(Jt,PVr),e(Jt,ULe),e(ULe,BVr),e(Jt,IVr),e(Jt,lc),e(lc,NVr),e(lc,HLe),e(HLe,qVr),e(lc,jVr),e(lc,fae),e(fae,DVr),e(lc,GVr),e(Jt,OVr),M(h0,Jt,null),e(dr,VVr),e(dr,Lo),M(_P,Lo,null),e(Lo,XVr),e(Lo,JLe),e(JLe,zVr),e(Lo,QVr),e(Lo,Nn),e(Nn,WVr),e(Nn,YLe),e(YLe,UVr),e(Nn,HVr),e(Nn,ZLe),e(ZLe,JVr),e(Nn,YVr),e(Nn,KLe),e(KLe,ZVr),e(Nn,KVr),e(Lo,eXr),e(Lo,Mt),e(Mt,u0),e(u0,eye),e(eye,oXr),e(u0,rXr),e(u0,gae),e(gae,tXr),e(u0,aXr),e(Mt,nXr),e(Mt,p0),e(p0,oye),e(oye,sXr),e(p0,lXr),e(p0,hae),e(hae,iXr),e(p0,dXr),e(Mt,mXr),e(Mt,_0),e(_0,rye),e(rye,cXr),e(_0,fXr),e(_0,uae),e(uae,gXr),e(_0,hXr),e(Mt,uXr),e(Mt,b0),e(b0,tye),e(tye,pXr),e(b0,_Xr),e(b0,pae),e(pae,bXr),e(b0,vXr),e(Mt,FXr),e(Mt,v0),e(v0,aye),e(aye,TXr),e(v0,MXr),e(v0,_ae),e(_ae,EXr),e(v0,CXr),e(Lo,wXr),e(Lo,F0),e(F0,AXr),e(F0,nye),e(nye,LXr),e(F0,yXr),e(F0,sye),e(sye,xXr),e(Lo,$Xr),M(T0,Lo,null),b(c,Sdo,_),b(c,ic,_),e(ic,M0),e(M0,lye),M(bP,lye,null),e(ic,kXr),e(ic,iye),e(iye,SXr),b(c,Rdo,_),b(c,mr,_),M(vP,mr,null),e(mr,RXr),e(mr,dc),e(dc,PXr),e(dc,bae),e(bae,BXr),e(dc,IXr),e(dc,vae),e(vae,NXr),e(dc,qXr),e(mr,jXr),e(mr,FP),e(FP,DXr),e(FP,dye),e(dye,GXr),e(FP,OXr),e(mr,VXr),e(mr,Yt),M(TP,Yt,null),e(Yt,XXr),e(Yt,mye),e(mye,zXr),e(Yt,QXr),e(Yt,mc),e(mc,WXr),e(mc,cye),e(cye,UXr),e(mc,HXr),e(mc,Fae),e(Fae,JXr),e(mc,YXr),e(Yt,ZXr),M(E0,Yt,null),e(mr,KXr),e(mr,yo),M(MP,yo,null),e(yo,ezr),e(yo,fye),e(fye,ozr),e(yo,rzr),e(yo,qn),e(qn,tzr),e(qn,gye),e(gye,azr),e(qn,nzr),e(qn,hye),e(hye,szr),e(qn,lzr),e(qn,uye),e(uye,izr),e(qn,dzr),e(yo,mzr),e(yo,pye),e(pye,C0),e(C0,_ye),e(_ye,czr),e(C0,fzr),e(C0,Tae),e(Tae,gzr),e(C0,hzr),e(yo,uzr),e(yo,w0),e(w0,pzr),e(w0,bye),e(bye,_zr),e(w0,bzr),e(w0,vye),e(vye,vzr),e(yo,Fzr),M(A0,yo,null),b(c,Pdo,_),b(c,cc,_),e(cc,L0),e(L0,Fye),M(EP,Fye,null),e(cc,Tzr),e(cc,Tye),e(Tye,Mzr),b(c,Bdo,_),b(c,cr,_),M(CP,cr,null),e(cr,Ezr),e(cr,fc),e(fc,Czr),e(fc,Mae),e(Mae,wzr),e(fc,Azr),e(fc,Eae),e(Eae,Lzr),e(fc,yzr),e(cr,xzr),e(cr,wP),e(wP,$zr),e(wP,Mye),e(Mye,kzr),e(wP,Szr),e(cr,Rzr),e(cr,Zt),M(AP,Zt,null),e(Zt,Pzr),e(Zt,Eye),e(Eye,Bzr),e(Zt,Izr),e(Zt,gc),e(gc,Nzr),e(gc,Cye),e(Cye,qzr),e(gc,jzr),e(gc,Cae),e(Cae,Dzr),e(gc,Gzr),e(Zt,Ozr),M(y0,Zt,null),e(cr,Vzr),e(cr,xo),M(LP,xo,null),e(xo,Xzr),e(xo,wye),e(wye,zzr),e(xo,Qzr),e(xo,jn),e(jn,Wzr),e(jn,Aye),e(Aye,Uzr),e(jn,Hzr),e(jn,Lye),e(Lye,Jzr),e(jn,Yzr),e(jn,yye),e(yye,Zzr),e(jn,Kzr),e(xo,eQr),e(xo,fr),e(fr,x0),e(x0,xye),e(xye,oQr),e(x0,rQr),e(x0,wae),e(wae,tQr),e(x0,aQr),e(fr,nQr),e(fr,$0),e($0,$ye),e($ye,sQr),e($0,lQr),e($0,Aae),e(Aae,iQr),e($0,dQr),e(fr,mQr),e(fr,k0),e(k0,kye),e(kye,cQr),e(k0,fQr),e(k0,Lae),e(Lae,gQr),e(k0,hQr),e(fr,uQr),e(fr,S0),e(S0,Sye),e(Sye,pQr),e(S0,_Qr),e(S0,yae),e(yae,bQr),e(S0,vQr),e(fr,FQr),e(fr,R0),e(R0,Rye),e(Rye,TQr),e(R0,MQr),e(R0,xae),e(xae,EQr),e(R0,CQr),e(fr,wQr),e(fr,P0),e(P0,Pye),e(Pye,AQr),e(P0,LQr),e(P0,$ae),e($ae,yQr),e(P0,xQr),e(xo,$Qr),e(xo,B0),e(B0,kQr),e(B0,Bye),e(Bye,SQr),e(B0,RQr),e(B0,Iye),e(Iye,PQr),e(xo,BQr),M(I0,xo,null),b(c,Ido,_),b(c,hc,_),e(hc,N0),e(N0,Nye),M(yP,Nye,null),e(hc,IQr),e(hc,qye),e(qye,NQr),b(c,Ndo,_),b(c,gr,_),M(xP,gr,null),e(gr,qQr),e(gr,uc),e(uc,jQr),e(uc,kae),e(kae,DQr),e(uc,GQr),e(uc,Sae),e(Sae,OQr),e(uc,VQr),e(gr,XQr),e(gr,$P),e($P,zQr),e($P,jye),e(jye,QQr),e($P,WQr),e(gr,UQr),e(gr,Kt),M(kP,Kt,null),e(Kt,HQr),e(Kt,Dye),e(Dye,JQr),e(Kt,YQr),e(Kt,pc),e(pc,ZQr),e(pc,Gye),e(Gye,KQr),e(pc,eWr),e(pc,Rae),e(Rae,oWr),e(pc,rWr),e(Kt,tWr),M(q0,Kt,null),e(gr,aWr),e(gr,$o),M(SP,$o,null),e($o,nWr),e($o,Oye),e(Oye,sWr),e($o,lWr),e($o,Dn),e(Dn,iWr),e(Dn,Vye),e(Vye,dWr),e(Dn,mWr),e(Dn,Xye),e(Xye,cWr),e(Dn,fWr),e(Dn,zye),e(zye,gWr),e(Dn,hWr),e($o,uWr),e($o,Qye),e(Qye,j0),e(j0,Wye),e(Wye,pWr),e(j0,_Wr),e(j0,Pae),e(Pae,bWr),e(j0,vWr),e($o,FWr),e($o,D0),e(D0,TWr),e(D0,Uye),e(Uye,MWr),e(D0,EWr),e(D0,Hye),e(Hye,CWr),e($o,wWr),M(G0,$o,null),b(c,qdo,_),b(c,_c,_),e(_c,O0),e(O0,Jye),M(RP,Jye,null),e(_c,AWr),e(_c,Yye),e(Yye,LWr),b(c,jdo,_),b(c,hr,_),M(PP,hr,null),e(hr,yWr),e(hr,bc),e(bc,xWr),e(bc,Bae),e(Bae,$Wr),e(bc,kWr),e(bc,Iae),e(Iae,SWr),e(bc,RWr),e(hr,PWr),e(hr,BP),e(BP,BWr),e(BP,Zye),e(Zye,IWr),e(BP,NWr),e(hr,qWr),e(hr,ea),M(IP,ea,null),e(ea,jWr),e(ea,Kye),e(Kye,DWr),e(ea,GWr),e(ea,vc),e(vc,OWr),e(vc,e9e),e(e9e,VWr),e(vc,XWr),e(vc,Nae),e(Nae,zWr),e(vc,QWr),e(ea,WWr),M(V0,ea,null),e(hr,UWr),e(hr,ko),M(NP,ko,null),e(ko,HWr),e(ko,o9e),e(o9e,JWr),e(ko,YWr),e(ko,Gn),e(Gn,ZWr),e(Gn,r9e),e(r9e,KWr),e(Gn,eUr),e(Gn,t9e),e(t9e,oUr),e(Gn,rUr),e(Gn,a9e),e(a9e,tUr),e(Gn,aUr),e(ko,nUr),e(ko,n9e),e(n9e,X0),e(X0,s9e),e(s9e,sUr),e(X0,lUr),e(X0,qae),e(qae,iUr),e(X0,dUr),e(ko,mUr),e(ko,z0),e(z0,cUr),e(z0,l9e),e(l9e,fUr),e(z0,gUr),e(z0,i9e),e(i9e,hUr),e(ko,uUr),M(Q0,ko,null),b(c,Ddo,_),b(c,Fc,_),e(Fc,W0),e(W0,d9e),M(qP,d9e,null),e(Fc,pUr),e(Fc,m9e),e(m9e,_Ur),b(c,Gdo,_),b(c,ur,_),M(jP,ur,null),e(ur,bUr),e(ur,Tc),e(Tc,vUr),e(Tc,jae),e(jae,FUr),e(Tc,TUr),e(Tc,Dae),e(Dae,MUr),e(Tc,EUr),e(ur,CUr),e(ur,DP),e(DP,wUr),e(DP,c9e),e(c9e,AUr),e(DP,LUr),e(ur,yUr),e(ur,oa),M(GP,oa,null),e(oa,xUr),e(oa,f9e),e(f9e,$Ur),e(oa,kUr),e(oa,Mc),e(Mc,SUr),e(Mc,g9e),e(g9e,RUr),e(Mc,PUr),e(Mc,Gae),e(Gae,BUr),e(Mc,IUr),e(oa,NUr),M(U0,oa,null),e(ur,qUr),e(ur,zr),M(OP,zr,null),e(zr,jUr),e(zr,h9e),e(h9e,DUr),e(zr,GUr),e(zr,On),e(On,OUr),e(On,u9e),e(u9e,VUr),e(On,XUr),e(On,p9e),e(p9e,zUr),e(On,QUr),e(On,_9e),e(_9e,WUr),e(On,UUr),e(zr,HUr),e(zr,P),e(P,H0),e(H0,b9e),e(b9e,JUr),e(H0,YUr),e(H0,Oae),e(Oae,ZUr),e(H0,KUr),e(P,eHr),e(P,J0),e(J0,v9e),e(v9e,oHr),e(J0,rHr),e(J0,Vae),e(Vae,tHr),e(J0,aHr),e(P,nHr),e(P,Y0),e(Y0,F9e),e(F9e,sHr),e(Y0,lHr),e(Y0,Xae),e(Xae,iHr),e(Y0,dHr),e(P,mHr),e(P,Z0),e(Z0,T9e),e(T9e,cHr),e(Z0,fHr),e(Z0,zae),e(zae,gHr),e(Z0,hHr),e(P,uHr),e(P,K0),e(K0,M9e),e(M9e,pHr),e(K0,_Hr),e(K0,Qae),e(Qae,bHr),e(K0,vHr),e(P,FHr),e(P,ew),e(ew,E9e),e(E9e,THr),e(ew,MHr),e(ew,Wae),e(Wae,EHr),e(ew,CHr),e(P,wHr),e(P,ow),e(ow,C9e),e(C9e,AHr),e(ow,LHr),e(ow,Uae),e(Uae,yHr),e(ow,xHr),e(P,$Hr),e(P,rw),e(rw,w9e),e(w9e,kHr),e(rw,SHr),e(rw,Hae),e(Hae,RHr),e(rw,PHr),e(P,BHr),e(P,tw),e(tw,A9e),e(A9e,IHr),e(tw,NHr),e(tw,Jae),e(Jae,qHr),e(tw,jHr),e(P,DHr),e(P,aw),e(aw,L9e),e(L9e,GHr),e(aw,OHr),e(aw,Yae),e(Yae,VHr),e(aw,XHr),e(P,zHr),e(P,nw),e(nw,y9e),e(y9e,QHr),e(nw,WHr),e(nw,Zae),e(Zae,UHr),e(nw,HHr),e(P,JHr),e(P,sw),e(sw,x9e),e(x9e,YHr),e(sw,ZHr),e(sw,Kae),e(Kae,KHr),e(sw,eJr),e(P,oJr),e(P,lw),e(lw,$9e),e($9e,rJr),e(lw,tJr),e(lw,ene),e(ene,aJr),e(lw,nJr),e(P,sJr),e(P,iw),e(iw,k9e),e(k9e,lJr),e(iw,iJr),e(iw,one),e(one,dJr),e(iw,mJr),e(P,cJr),e(P,dw),e(dw,S9e),e(S9e,fJr),e(dw,gJr),e(dw,rne),e(rne,hJr),e(dw,uJr),e(P,pJr),e(P,mw),e(mw,R9e),e(R9e,_Jr),e(mw,bJr),e(mw,tne),e(tne,vJr),e(mw,FJr),e(P,TJr),e(P,cw),e(cw,P9e),e(P9e,MJr),e(cw,EJr),e(cw,ane),e(ane,CJr),e(cw,wJr),e(P,AJr),e(P,fw),e(fw,B9e),e(B9e,LJr),e(fw,yJr),e(fw,nne),e(nne,xJr),e(fw,$Jr),e(P,kJr),e(P,gw),e(gw,I9e),e(I9e,SJr),e(gw,RJr),e(gw,sne),e(sne,PJr),e(gw,BJr),e(P,IJr),e(P,hw),e(hw,N9e),e(N9e,NJr),e(hw,qJr),e(hw,lne),e(lne,jJr),e(hw,DJr),e(P,GJr),e(P,Gl),e(Gl,q9e),e(q9e,OJr),e(Gl,VJr),e(Gl,ine),e(ine,XJr),e(Gl,zJr),e(Gl,dne),e(dne,QJr),e(Gl,WJr),e(P,UJr),e(P,uw),e(uw,j9e),e(j9e,HJr),e(uw,JJr),e(uw,mne),e(mne,YJr),e(uw,ZJr),e(P,KJr),e(P,pw),e(pw,D9e),e(D9e,eYr),e(pw,oYr),e(pw,cne),e(cne,rYr),e(pw,tYr),e(P,aYr),e(P,_w),e(_w,G9e),e(G9e,nYr),e(_w,sYr),e(_w,fne),e(fne,lYr),e(_w,iYr),e(P,dYr),e(P,bw),e(bw,O9e),e(O9e,mYr),e(bw,cYr),e(bw,gne),e(gne,fYr),e(bw,gYr),e(P,hYr),e(P,vw),e(vw,V9e),e(V9e,uYr),e(vw,pYr),e(vw,hne),e(hne,_Yr),e(vw,bYr),e(P,vYr),e(P,Fw),e(Fw,X9e),e(X9e,FYr),e(Fw,TYr),e(Fw,une),e(une,MYr),e(Fw,EYr),e(P,CYr),e(P,Tw),e(Tw,z9e),e(z9e,wYr),e(Tw,AYr),e(Tw,pne),e(pne,LYr),e(Tw,yYr),e(P,xYr),e(P,Mw),e(Mw,Q9e),e(Q9e,$Yr),e(Mw,kYr),e(Mw,_ne),e(_ne,SYr),e(Mw,RYr),e(P,PYr),e(P,Ew),e(Ew,W9e),e(W9e,BYr),e(Ew,IYr),e(Ew,bne),e(bne,NYr),e(Ew,qYr),e(P,jYr),e(P,Cw),e(Cw,U9e),e(U9e,DYr),e(Cw,GYr),e(Cw,vne),e(vne,OYr),e(Cw,VYr),e(P,XYr),e(P,ww),e(ww,H9e),e(H9e,zYr),e(ww,QYr),e(ww,Fne),e(Fne,WYr),e(ww,UYr),e(P,HYr),e(P,Aw),e(Aw,J9e),e(J9e,JYr),e(Aw,YYr),e(Aw,Tne),e(Tne,ZYr),e(Aw,KYr),e(P,eZr),e(P,Lw),e(Lw,Y9e),e(Y9e,oZr),e(Lw,rZr),e(Lw,Mne),e(Mne,tZr),e(Lw,aZr),e(P,nZr),e(P,yw),e(yw,Z9e),e(Z9e,sZr),e(yw,lZr),e(yw,Ene),e(Ene,iZr),e(yw,dZr),e(P,mZr),e(P,xw),e(xw,K9e),e(K9e,cZr),e(xw,fZr),e(xw,Cne),e(Cne,gZr),e(xw,hZr),e(P,uZr),e(P,$w),e($w,exe),e(exe,pZr),e($w,_Zr),e($w,wne),e(wne,bZr),e($w,vZr),e(P,FZr),e(P,kw),e(kw,oxe),e(oxe,TZr),e(kw,MZr),e(kw,Ane),e(Ane,EZr),e(kw,CZr),e(P,wZr),e(P,Sw),e(Sw,rxe),e(rxe,AZr),e(Sw,LZr),e(Sw,Lne),e(Lne,yZr),e(Sw,xZr),e(P,$Zr),e(P,Rw),e(Rw,txe),e(txe,kZr),e(Rw,SZr),e(Rw,yne),e(yne,RZr),e(Rw,PZr),e(P,BZr),e(P,Pw),e(Pw,axe),e(axe,IZr),e(Pw,NZr),e(Pw,xne),e(xne,qZr),e(Pw,jZr),e(P,DZr),e(P,Bw),e(Bw,nxe),e(nxe,GZr),e(Bw,OZr),e(Bw,$ne),e($ne,VZr),e(Bw,XZr),e(P,zZr),e(P,Iw),e(Iw,sxe),e(sxe,QZr),e(Iw,WZr),e(Iw,kne),e(kne,UZr),e(Iw,HZr),e(P,JZr),e(P,Nw),e(Nw,lxe),e(lxe,YZr),e(Nw,ZZr),e(Nw,Sne),e(Sne,KZr),e(Nw,eKr),e(P,oKr),e(P,qw),e(qw,ixe),e(ixe,rKr),e(qw,tKr),e(qw,Rne),e(Rne,aKr),e(qw,nKr),e(P,sKr),e(P,jw),e(jw,dxe),e(dxe,lKr),e(jw,iKr),e(jw,Pne),e(Pne,dKr),e(jw,mKr),e(P,cKr),e(P,Dw),e(Dw,mxe),e(mxe,fKr),e(Dw,gKr),e(Dw,Bne),e(Bne,hKr),e(Dw,uKr),e(P,pKr),e(P,Gw),e(Gw,cxe),e(cxe,_Kr),e(Gw,bKr),e(Gw,Ine),e(Ine,vKr),e(Gw,FKr),e(P,TKr),e(P,Ow),e(Ow,fxe),e(fxe,MKr),e(Ow,EKr),e(Ow,Nne),e(Nne,CKr),e(Ow,wKr),e(P,AKr),e(P,Vw),e(Vw,gxe),e(gxe,LKr),e(Vw,yKr),e(Vw,qne),e(qne,xKr),e(Vw,$Kr),e(P,kKr),e(P,Xw),e(Xw,hxe),e(hxe,SKr),e(Xw,RKr),e(Xw,jne),e(jne,PKr),e(Xw,BKr),e(P,IKr),e(P,zw),e(zw,uxe),e(uxe,NKr),e(zw,qKr),e(zw,Dne),e(Dne,jKr),e(zw,DKr),e(P,GKr),e(P,Qw),e(Qw,pxe),e(pxe,OKr),e(Qw,VKr),e(Qw,Gne),e(Gne,XKr),e(Qw,zKr),e(P,QKr),e(P,Ww),e(Ww,_xe),e(_xe,WKr),e(Ww,UKr),e(Ww,One),e(One,HKr),e(Ww,JKr),e(P,YKr),e(P,Uw),e(Uw,bxe),e(bxe,ZKr),e(Uw,KKr),e(Uw,Vne),e(Vne,eet),e(Uw,oet),e(P,ret),e(P,Hw),e(Hw,vxe),e(vxe,tet),e(Hw,aet),e(Hw,Xne),e(Xne,net),e(Hw,set),e(P,iet),e(P,Jw),e(Jw,Fxe),e(Fxe,det),e(Jw,met),e(Jw,zne),e(zne,cet),e(Jw,fet),e(P,get),e(P,Yw),e(Yw,Txe),e(Txe,het),e(Yw,uet),e(Yw,Qne),e(Qne,pet),e(Yw,_et),e(zr,bet),M(Zw,zr,null),b(c,Odo,_),b(c,Ec,_),e(Ec,Kw),e(Kw,Mxe),M(VP,Mxe,null),e(Ec,vet),e(Ec,Exe),e(Exe,Fet),b(c,Vdo,_),b(c,pr,_),M(XP,pr,null),e(pr,Tet),e(pr,Cc),e(Cc,Met),e(Cc,Wne),e(Wne,Eet),e(Cc,Cet),e(Cc,Une),e(Une,wet),e(Cc,Aet),e(pr,Let),e(pr,zP),e(zP,yet),e(zP,Cxe),e(Cxe,xet),e(zP,$et),e(pr,ket),e(pr,ra),M(QP,ra,null),e(ra,Set),e(ra,wxe),e(wxe,Ret),e(ra,Pet),e(ra,wc),e(wc,Bet),e(wc,Axe),e(Axe,Iet),e(wc,Net),e(wc,Hne),e(Hne,qet),e(wc,jet),e(ra,Det),M(eA,ra,null),e(pr,Get),e(pr,Qr),M(WP,Qr,null),e(Qr,Oet),e(Qr,Lxe),e(Lxe,Vet),e(Qr,Xet),e(Qr,Vn),e(Vn,zet),e(Vn,yxe),e(yxe,Qet),e(Vn,Wet),e(Vn,xxe),e(xxe,Uet),e(Vn,Het),e(Vn,$xe),e($xe,Jet),e(Vn,Yet),e(Qr,Zet),e(Qr,de),e(de,oA),e(oA,kxe),e(kxe,Ket),e(oA,eot),e(oA,Jne),e(Jne,oot),e(oA,rot),e(de,tot),e(de,rA),e(rA,Sxe),e(Sxe,aot),e(rA,not),e(rA,Yne),e(Yne,sot),e(rA,lot),e(de,iot),e(de,tA),e(tA,Rxe),e(Rxe,dot),e(tA,mot),e(tA,Zne),e(Zne,cot),e(tA,fot),e(de,got),e(de,aA),e(aA,Pxe),e(Pxe,hot),e(aA,uot),e(aA,Kne),e(Kne,pot),e(aA,_ot),e(de,bot),e(de,nA),e(nA,Bxe),e(Bxe,vot),e(nA,Fot),e(nA,ese),e(ese,Tot),e(nA,Mot),e(de,Eot),e(de,sA),e(sA,Ixe),e(Ixe,Cot),e(sA,wot),e(sA,ose),e(ose,Aot),e(sA,Lot),e(de,yot),e(de,lA),e(lA,Nxe),e(Nxe,xot),e(lA,$ot),e(lA,rse),e(rse,kot),e(lA,Sot),e(de,Rot),e(de,iA),e(iA,qxe),e(qxe,Pot),e(iA,Bot),e(iA,tse),e(tse,Iot),e(iA,Not),e(de,qot),e(de,dA),e(dA,jxe),e(jxe,jot),e(dA,Dot),e(dA,ase),e(ase,Got),e(dA,Oot),e(de,Vot),e(de,mA),e(mA,Dxe),e(Dxe,Xot),e(mA,zot),e(mA,nse),e(nse,Qot),e(mA,Wot),e(de,Uot),e(de,cA),e(cA,Gxe),e(Gxe,Hot),e(cA,Jot),e(cA,sse),e(sse,Yot),e(cA,Zot),e(de,Kot),e(de,fA),e(fA,Oxe),e(Oxe,ert),e(fA,ort),e(fA,lse),e(lse,rrt),e(fA,trt),e(de,art),e(de,gA),e(gA,Vxe),e(Vxe,nrt),e(gA,srt),e(gA,ise),e(ise,lrt),e(gA,irt),e(de,drt),e(de,hA),e(hA,Xxe),e(Xxe,mrt),e(hA,crt),e(hA,dse),e(dse,frt),e(hA,grt),e(de,hrt),e(de,uA),e(uA,zxe),e(zxe,urt),e(uA,prt),e(uA,mse),e(mse,_rt),e(uA,brt),e(de,vrt),e(de,pA),e(pA,Qxe),e(Qxe,Frt),e(pA,Trt),e(pA,cse),e(cse,Mrt),e(pA,Ert),e(de,Crt),e(de,_A),e(_A,Wxe),e(Wxe,wrt),e(_A,Art),e(_A,fse),e(fse,Lrt),e(_A,yrt),e(de,xrt),e(de,bA),e(bA,Uxe),e(Uxe,$rt),e(bA,krt),e(bA,gse),e(gse,Srt),e(bA,Rrt),e(de,Prt),e(de,vA),e(vA,Hxe),e(Hxe,Brt),e(vA,Irt),e(vA,hse),e(hse,Nrt),e(vA,qrt),e(de,jrt),e(de,FA),e(FA,Jxe),e(Jxe,Drt),e(FA,Grt),e(FA,use),e(use,Ort),e(FA,Vrt),e(de,Xrt),e(de,TA),e(TA,Yxe),e(Yxe,zrt),e(TA,Qrt),e(TA,pse),e(pse,Wrt),e(TA,Urt),e(de,Hrt),e(de,MA),e(MA,Zxe),e(Zxe,Jrt),e(MA,Yrt),e(MA,_se),e(_se,Zrt),e(MA,Krt),e(de,ett),e(de,EA),e(EA,Kxe),e(Kxe,ott),e(EA,rtt),e(EA,bse),e(bse,ttt),e(EA,att),e(Qr,ntt),M(CA,Qr,null),b(c,Xdo,_),b(c,Ac,_),e(Ac,wA),e(wA,e$e),M(UP,e$e,null),e(Ac,stt),e(Ac,o$e),e(o$e,ltt),b(c,zdo,_),b(c,_r,_),M(HP,_r,null),e(_r,itt),e(_r,Lc),e(Lc,dtt),e(Lc,vse),e(vse,mtt),e(Lc,ctt),e(Lc,Fse),e(Fse,ftt),e(Lc,gtt),e(_r,htt),e(_r,JP),e(JP,utt),e(JP,r$e),e(r$e,ptt),e(JP,_tt),e(_r,btt),e(_r,ta),M(YP,ta,null),e(ta,vtt),e(ta,t$e),e(t$e,Ftt),e(ta,Ttt),e(ta,yc),e(yc,Mtt),e(yc,a$e),e(a$e,Ett),e(yc,Ctt),e(yc,Tse),e(Tse,wtt),e(yc,Att),e(ta,Ltt),M(AA,ta,null),e(_r,ytt),e(_r,Wr),M(ZP,Wr,null),e(Wr,xtt),e(Wr,n$e),e(n$e,$tt),e(Wr,ktt),e(Wr,Xn),e(Xn,Stt),e(Xn,s$e),e(s$e,Rtt),e(Xn,Ptt),e(Xn,l$e),e(l$e,Btt),e(Xn,Itt),e(Xn,i$e),e(i$e,Ntt),e(Xn,qtt),e(Wr,jtt),e(Wr,Ce),e(Ce,LA),e(LA,d$e),e(d$e,Dtt),e(LA,Gtt),e(LA,Mse),e(Mse,Ott),e(LA,Vtt),e(Ce,Xtt),e(Ce,yA),e(yA,m$e),e(m$e,ztt),e(yA,Qtt),e(yA,Ese),e(Ese,Wtt),e(yA,Utt),e(Ce,Htt),e(Ce,xA),e(xA,c$e),e(c$e,Jtt),e(xA,Ytt),e(xA,Cse),e(Cse,Ztt),e(xA,Ktt),e(Ce,eat),e(Ce,$A),e($A,f$e),e(f$e,oat),e($A,rat),e($A,wse),e(wse,tat),e($A,aat),e(Ce,nat),e(Ce,kA),e(kA,g$e),e(g$e,sat),e(kA,lat),e(kA,Ase),e(Ase,iat),e(kA,dat),e(Ce,mat),e(Ce,SA),e(SA,h$e),e(h$e,cat),e(SA,fat),e(SA,Lse),e(Lse,gat),e(SA,hat),e(Ce,uat),e(Ce,RA),e(RA,u$e),e(u$e,pat),e(RA,_at),e(RA,yse),e(yse,bat),e(RA,vat),e(Ce,Fat),e(Ce,PA),e(PA,p$e),e(p$e,Tat),e(PA,Mat),e(PA,xse),e(xse,Eat),e(PA,Cat),e(Ce,wat),e(Ce,BA),e(BA,_$e),e(_$e,Aat),e(BA,Lat),e(BA,$se),e($se,yat),e(BA,xat),e(Ce,$at),e(Ce,IA),e(IA,b$e),e(b$e,kat),e(IA,Sat),e(IA,kse),e(kse,Rat),e(IA,Pat),e(Ce,Bat),e(Ce,NA),e(NA,v$e),e(v$e,Iat),e(NA,Nat),e(NA,Sse),e(Sse,qat),e(NA,jat),e(Ce,Dat),e(Ce,qA),e(qA,F$e),e(F$e,Gat),e(qA,Oat),e(qA,Rse),e(Rse,Vat),e(qA,Xat),e(Ce,zat),e(Ce,jA),e(jA,T$e),e(T$e,Qat),e(jA,Wat),e(jA,Pse),e(Pse,Uat),e(jA,Hat),e(Ce,Jat),e(Ce,DA),e(DA,M$e),e(M$e,Yat),e(DA,Zat),e(DA,Bse),e(Bse,Kat),e(DA,ent),e(Wr,ont),M(GA,Wr,null),b(c,Qdo,_),b(c,xc,_),e(xc,OA),e(OA,E$e),M(KP,E$e,null),e(xc,rnt),e(xc,C$e),e(C$e,tnt),b(c,Wdo,_),b(c,br,_),M(eB,br,null),e(br,ant),e(br,$c),e($c,nnt),e($c,Ise),e(Ise,snt),e($c,lnt),e($c,Nse),e(Nse,int),e($c,dnt),e(br,mnt),e(br,oB),e(oB,cnt),e(oB,w$e),e(w$e,fnt),e(oB,gnt),e(br,hnt),e(br,aa),M(rB,aa,null),e(aa,unt),e(aa,A$e),e(A$e,pnt),e(aa,_nt),e(aa,kc),e(kc,bnt),e(kc,L$e),e(L$e,vnt),e(kc,Fnt),e(kc,qse),e(qse,Tnt),e(kc,Mnt),e(aa,Ent),M(VA,aa,null),e(br,Cnt),e(br,Ur),M(tB,Ur,null),e(Ur,wnt),e(Ur,y$e),e(y$e,Ant),e(Ur,Lnt),e(Ur,zn),e(zn,ynt),e(zn,x$e),e(x$e,xnt),e(zn,$nt),e(zn,$$e),e($$e,knt),e(zn,Snt),e(zn,k$e),e(k$e,Rnt),e(zn,Pnt),e(Ur,Bnt),e(Ur,$e),e($e,XA),e(XA,S$e),e(S$e,Int),e(XA,Nnt),e(XA,jse),e(jse,qnt),e(XA,jnt),e($e,Dnt),e($e,zA),e(zA,R$e),e(R$e,Gnt),e(zA,Ont),e(zA,Dse),e(Dse,Vnt),e(zA,Xnt),e($e,znt),e($e,QA),e(QA,P$e),e(P$e,Qnt),e(QA,Wnt),e(QA,Gse),e(Gse,Unt),e(QA,Hnt),e($e,Jnt),e($e,Ol),e(Ol,B$e),e(B$e,Ynt),e(Ol,Znt),e(Ol,Ose),e(Ose,Knt),e(Ol,est),e(Ol,Vse),e(Vse,ost),e(Ol,rst),e($e,tst),e($e,WA),e(WA,I$e),e(I$e,ast),e(WA,nst),e(WA,Xse),e(Xse,sst),e(WA,lst),e($e,ist),e($e,UA),e(UA,N$e),e(N$e,dst),e(UA,mst),e(UA,zse),e(zse,cst),e(UA,fst),e($e,gst),e($e,HA),e(HA,q$e),e(q$e,hst),e(HA,ust),e(HA,Qse),e(Qse,pst),e(HA,_st),e($e,bst),e($e,JA),e(JA,j$e),e(j$e,vst),e(JA,Fst),e(JA,Wse),e(Wse,Tst),e(JA,Mst),e($e,Est),e($e,YA),e(YA,D$e),e(D$e,Cst),e(YA,wst),e(YA,Use),e(Use,Ast),e(YA,Lst),e($e,yst),e($e,ZA),e(ZA,G$e),e(G$e,xst),e(ZA,$st),e(ZA,Hse),e(Hse,kst),e(ZA,Sst),e(Ur,Rst),M(KA,Ur,null),b(c,Udo,_),b(c,Sc,_),e(Sc,e6),e(e6,O$e),M(aB,O$e,null),e(Sc,Pst),e(Sc,V$e),e(V$e,Bst),b(c,Hdo,_),b(c,vr,_),M(nB,vr,null),e(vr,Ist),e(vr,Rc),e(Rc,Nst),e(Rc,Jse),e(Jse,qst),e(Rc,jst),e(Rc,Yse),e(Yse,Dst),e(Rc,Gst),e(vr,Ost),e(vr,sB),e(sB,Vst),e(sB,X$e),e(X$e,Xst),e(sB,zst),e(vr,Qst),e(vr,na),M(lB,na,null),e(na,Wst),e(na,z$e),e(z$e,Ust),e(na,Hst),e(na,Pc),e(Pc,Jst),e(Pc,Q$e),e(Q$e,Yst),e(Pc,Zst),e(Pc,Zse),e(Zse,Kst),e(Pc,elt),e(na,olt),M(o6,na,null),e(vr,rlt),e(vr,Hr),M(iB,Hr,null),e(Hr,tlt),e(Hr,W$e),e(W$e,alt),e(Hr,nlt),e(Hr,Qn),e(Qn,slt),e(Qn,U$e),e(U$e,llt),e(Qn,ilt),e(Qn,H$e),e(H$e,dlt),e(Qn,mlt),e(Qn,J$e),e(J$e,clt),e(Qn,flt),e(Hr,glt),e(Hr,Bc),e(Bc,r6),e(r6,Y$e),e(Y$e,hlt),e(r6,ult),e(r6,Kse),e(Kse,plt),e(r6,_lt),e(Bc,blt),e(Bc,t6),e(t6,Z$e),e(Z$e,vlt),e(t6,Flt),e(t6,ele),e(ele,Tlt),e(t6,Mlt),e(Bc,Elt),e(Bc,a6),e(a6,K$e),e(K$e,Clt),e(a6,wlt),e(a6,ole),e(ole,Alt),e(a6,Llt),e(Hr,ylt),M(n6,Hr,null),b(c,Jdo,_),b(c,Ic,_),e(Ic,s6),e(s6,eke),M(dB,eke,null),e(Ic,xlt),e(Ic,oke),e(oke,$lt),b(c,Ydo,_),b(c,Fr,_),M(mB,Fr,null),e(Fr,klt),e(Fr,Nc),e(Nc,Slt),e(Nc,rle),e(rle,Rlt),e(Nc,Plt),e(Nc,tle),e(tle,Blt),e(Nc,Ilt),e(Fr,Nlt),e(Fr,cB),e(cB,qlt),e(cB,rke),e(rke,jlt),e(cB,Dlt),e(Fr,Glt),e(Fr,sa),M(fB,sa,null),e(sa,Olt),e(sa,tke),e(tke,Vlt),e(sa,Xlt),e(sa,qc),e(qc,zlt),e(qc,ake),e(ake,Qlt),e(qc,Wlt),e(qc,ale),e(ale,Ult),e(qc,Hlt),e(sa,Jlt),M(l6,sa,null),e(Fr,Ylt),e(Fr,Jr),M(gB,Jr,null),e(Jr,Zlt),e(Jr,nke),e(nke,Klt),e(Jr,eit),e(Jr,Wn),e(Wn,oit),e(Wn,ske),e(ske,rit),e(Wn,tit),e(Wn,lke),e(lke,ait),e(Wn,nit),e(Wn,ike),e(ike,sit),e(Wn,lit),e(Jr,iit),e(Jr,he),e(he,i6),e(i6,dke),e(dke,dit),e(i6,mit),e(i6,nle),e(nle,cit),e(i6,fit),e(he,git),e(he,d6),e(d6,mke),e(mke,hit),e(d6,uit),e(d6,sle),e(sle,pit),e(d6,_it),e(he,bit),e(he,m6),e(m6,cke),e(cke,vit),e(m6,Fit),e(m6,lle),e(lle,Tit),e(m6,Mit),e(he,Eit),e(he,c6),e(c6,fke),e(fke,Cit),e(c6,wit),e(c6,ile),e(ile,Ait),e(c6,Lit),e(he,yit),e(he,f6),e(f6,gke),e(gke,xit),e(f6,$it),e(f6,dle),e(dle,kit),e(f6,Sit),e(he,Rit),e(he,g6),e(g6,hke),e(hke,Pit),e(g6,Bit),e(g6,mle),e(mle,Iit),e(g6,Nit),e(he,qit),e(he,h6),e(h6,uke),e(uke,jit),e(h6,Dit),e(h6,cle),e(cle,Git),e(h6,Oit),e(he,Vit),e(he,u6),e(u6,pke),e(pke,Xit),e(u6,zit),e(u6,fle),e(fle,Qit),e(u6,Wit),e(he,Uit),e(he,p6),e(p6,_ke),e(_ke,Hit),e(p6,Jit),e(p6,gle),e(gle,Yit),e(p6,Zit),e(he,Kit),e(he,_6),e(_6,bke),e(bke,edt),e(_6,odt),e(_6,hle),e(hle,rdt),e(_6,tdt),e(he,adt),e(he,b6),e(b6,vke),e(vke,ndt),e(b6,sdt),e(b6,ule),e(ule,ldt),e(b6,idt),e(he,ddt),e(he,v6),e(v6,Fke),e(Fke,mdt),e(v6,cdt),e(v6,ple),e(ple,fdt),e(v6,gdt),e(he,hdt),e(he,F6),e(F6,Tke),e(Tke,udt),e(F6,pdt),e(F6,_le),e(_le,_dt),e(F6,bdt),e(he,vdt),e(he,T6),e(T6,Mke),e(Mke,Fdt),e(T6,Tdt),e(T6,ble),e(ble,Mdt),e(T6,Edt),e(he,Cdt),e(he,M6),e(M6,Eke),e(Eke,wdt),e(M6,Adt),e(M6,vle),e(vle,Ldt),e(M6,ydt),e(he,xdt),e(he,E6),e(E6,Cke),e(Cke,$dt),e(E6,kdt),e(E6,Fle),e(Fle,Sdt),e(E6,Rdt),e(he,Pdt),e(he,C6),e(C6,wke),e(wke,Bdt),e(C6,Idt),e(C6,Tle),e(Tle,Ndt),e(C6,qdt),e(he,jdt),e(he,w6),e(w6,Ake),e(Ake,Ddt),e(w6,Gdt),e(w6,Mle),e(Mle,Odt),e(w6,Vdt),e(he,Xdt),e(he,A6),e(A6,Lke),e(Lke,zdt),e(A6,Qdt),e(A6,Ele),e(Ele,Wdt),e(A6,Udt),e(he,Hdt),e(he,L6),e(L6,yke),e(yke,Jdt),e(L6,Ydt),e(L6,Cle),e(Cle,Zdt),e(L6,Kdt),e(he,emt),e(he,y6),e(y6,xke),e(xke,omt),e(y6,rmt),e(y6,wle),e(wle,tmt),e(y6,amt),e(Jr,nmt),M(x6,Jr,null),b(c,Zdo,_),b(c,jc,_),e(jc,$6),e($6,$ke),M(hB,$ke,null),e(jc,smt),e(jc,kke),e(kke,lmt),b(c,Kdo,_),b(c,Tr,_),M(uB,Tr,null),e(Tr,imt),e(Tr,Dc),e(Dc,dmt),e(Dc,Ale),e(Ale,mmt),e(Dc,cmt),e(Dc,Lle),e(Lle,fmt),e(Dc,gmt),e(Tr,hmt),e(Tr,pB),e(pB,umt),e(pB,Ske),e(Ske,pmt),e(pB,_mt),e(Tr,bmt),e(Tr,la),M(_B,la,null),e(la,vmt),e(la,Rke),e(Rke,Fmt),e(la,Tmt),e(la,Gc),e(Gc,Mmt),e(Gc,Pke),e(Pke,Emt),e(Gc,Cmt),e(Gc,yle),e(yle,wmt),e(Gc,Amt),e(la,Lmt),M(k6,la,null),e(Tr,ymt),e(Tr,Yr),M(bB,Yr,null),e(Yr,xmt),e(Yr,Bke),e(Bke,$mt),e(Yr,kmt),e(Yr,Un),e(Un,Smt),e(Un,Ike),e(Ike,Rmt),e(Un,Pmt),e(Un,Nke),e(Nke,Bmt),e(Un,Imt),e(Un,qke),e(qke,Nmt),e(Un,qmt),e(Yr,jmt),e(Yr,ke),e(ke,S6),e(S6,jke),e(jke,Dmt),e(S6,Gmt),e(S6,xle),e(xle,Omt),e(S6,Vmt),e(ke,Xmt),e(ke,R6),e(R6,Dke),e(Dke,zmt),e(R6,Qmt),e(R6,$le),e($le,Wmt),e(R6,Umt),e(ke,Hmt),e(ke,P6),e(P6,Gke),e(Gke,Jmt),e(P6,Ymt),e(P6,kle),e(kle,Zmt),e(P6,Kmt),e(ke,ect),e(ke,B6),e(B6,Oke),e(Oke,oct),e(B6,rct),e(B6,Sle),e(Sle,tct),e(B6,act),e(ke,nct),e(ke,I6),e(I6,Vke),e(Vke,sct),e(I6,lct),e(I6,Rle),e(Rle,ict),e(I6,dct),e(ke,mct),e(ke,N6),e(N6,Xke),e(Xke,cct),e(N6,fct),e(N6,Ple),e(Ple,gct),e(N6,hct),e(ke,uct),e(ke,q6),e(q6,zke),e(zke,pct),e(q6,_ct),e(q6,Ble),e(Ble,bct),e(q6,vct),e(ke,Fct),e(ke,j6),e(j6,Qke),e(Qke,Tct),e(j6,Mct),e(j6,Ile),e(Ile,Ect),e(j6,Cct),e(ke,wct),e(ke,D6),e(D6,Wke),e(Wke,Act),e(D6,Lct),e(D6,Nle),e(Nle,yct),e(D6,xct),e(ke,$ct),e(ke,G6),e(G6,Uke),e(Uke,kct),e(G6,Sct),e(G6,qle),e(qle,Rct),e(G6,Pct),e(Yr,Bct),M(O6,Yr,null),b(c,emo,_),b(c,Oc,_),e(Oc,V6),e(V6,Hke),M(vB,Hke,null),e(Oc,Ict),e(Oc,Jke),e(Jke,Nct),b(c,omo,_),b(c,Mr,_),M(FB,Mr,null),e(Mr,qct),e(Mr,Vc),e(Vc,jct),e(Vc,jle),e(jle,Dct),e(Vc,Gct),e(Vc,Dle),e(Dle,Oct),e(Vc,Vct),e(Mr,Xct),e(Mr,TB),e(TB,zct),e(TB,Yke),e(Yke,Qct),e(TB,Wct),e(Mr,Uct),e(Mr,ia),M(MB,ia,null),e(ia,Hct),e(ia,Zke),e(Zke,Jct),e(ia,Yct),e(ia,Xc),e(Xc,Zct),e(Xc,Kke),e(Kke,Kct),e(Xc,eft),e(Xc,Gle),e(Gle,oft),e(Xc,rft),e(ia,tft),M(X6,ia,null),e(Mr,aft),e(Mr,Zr),M(EB,Zr,null),e(Zr,nft),e(Zr,eSe),e(eSe,sft),e(Zr,lft),e(Zr,Hn),e(Hn,ift),e(Hn,oSe),e(oSe,dft),e(Hn,mft),e(Hn,rSe),e(rSe,cft),e(Hn,fft),e(Hn,tSe),e(tSe,gft),e(Hn,hft),e(Zr,uft),e(Zr,ae),e(ae,z6),e(z6,aSe),e(aSe,pft),e(z6,_ft),e(z6,Ole),e(Ole,bft),e(z6,vft),e(ae,Fft),e(ae,Q6),e(Q6,nSe),e(nSe,Tft),e(Q6,Mft),e(Q6,Vle),e(Vle,Eft),e(Q6,Cft),e(ae,wft),e(ae,W6),e(W6,sSe),e(sSe,Aft),e(W6,Lft),e(W6,Xle),e(Xle,yft),e(W6,xft),e(ae,$ft),e(ae,U6),e(U6,lSe),e(lSe,kft),e(U6,Sft),e(U6,zle),e(zle,Rft),e(U6,Pft),e(ae,Bft),e(ae,H6),e(H6,iSe),e(iSe,Ift),e(H6,Nft),e(H6,Qle),e(Qle,qft),e(H6,jft),e(ae,Dft),e(ae,J6),e(J6,dSe),e(dSe,Gft),e(J6,Oft),e(J6,Wle),e(Wle,Vft),e(J6,Xft),e(ae,zft),e(ae,Y6),e(Y6,mSe),e(mSe,Qft),e(Y6,Wft),e(Y6,Ule),e(Ule,Uft),e(Y6,Hft),e(ae,Jft),e(ae,Z6),e(Z6,cSe),e(cSe,Yft),e(Z6,Zft),e(Z6,Hle),e(Hle,Kft),e(Z6,egt),e(ae,ogt),e(ae,K6),e(K6,fSe),e(fSe,rgt),e(K6,tgt),e(K6,Jle),e(Jle,agt),e(K6,ngt),e(ae,sgt),e(ae,e7),e(e7,gSe),e(gSe,lgt),e(e7,igt),e(e7,Yle),e(Yle,dgt),e(e7,mgt),e(ae,cgt),e(ae,o7),e(o7,hSe),e(hSe,fgt),e(o7,ggt),e(o7,Zle),e(Zle,hgt),e(o7,ugt),e(ae,pgt),e(ae,r7),e(r7,uSe),e(uSe,_gt),e(r7,bgt),e(r7,Kle),e(Kle,vgt),e(r7,Fgt),e(ae,Tgt),e(ae,t7),e(t7,pSe),e(pSe,Mgt),e(t7,Egt),e(t7,eie),e(eie,Cgt),e(t7,wgt),e(ae,Agt),e(ae,a7),e(a7,_Se),e(_Se,Lgt),e(a7,ygt),e(a7,oie),e(oie,xgt),e(a7,$gt),e(ae,kgt),e(ae,n7),e(n7,bSe),e(bSe,Sgt),e(n7,Rgt),e(n7,rie),e(rie,Pgt),e(n7,Bgt),e(ae,Igt),e(ae,s7),e(s7,vSe),e(vSe,Ngt),e(s7,qgt),e(s7,tie),e(tie,jgt),e(s7,Dgt),e(ae,Ggt),e(ae,l7),e(l7,FSe),e(FSe,Ogt),e(l7,Vgt),e(l7,aie),e(aie,Xgt),e(l7,zgt),e(ae,Qgt),e(ae,i7),e(i7,TSe),e(TSe,Wgt),e(i7,Ugt),e(i7,nie),e(nie,Hgt),e(i7,Jgt),e(ae,Ygt),e(ae,d7),e(d7,MSe),e(MSe,Zgt),e(d7,Kgt),e(d7,sie),e(sie,eht),e(d7,oht),e(ae,rht),e(ae,m7),e(m7,ESe),e(ESe,tht),e(m7,aht),e(m7,lie),e(lie,nht),e(m7,sht),e(ae,lht),e(ae,c7),e(c7,CSe),e(CSe,iht),e(c7,dht),e(c7,iie),e(iie,mht),e(c7,cht),e(ae,fht),e(ae,f7),e(f7,wSe),e(wSe,ght),e(f7,hht),e(f7,die),e(die,uht),e(f7,pht),e(ae,_ht),e(ae,g7),e(g7,ASe),e(ASe,bht),e(g7,vht),e(g7,mie),e(mie,Fht),e(g7,Tht),e(ae,Mht),e(ae,h7),e(h7,LSe),e(LSe,Eht),e(h7,Cht),e(h7,cie),e(cie,wht),e(h7,Aht),e(ae,Lht),e(ae,u7),e(u7,ySe),e(ySe,yht),e(u7,xht),e(u7,fie),e(fie,$ht),e(u7,kht),e(ae,Sht),e(ae,p7),e(p7,xSe),e(xSe,Rht),e(p7,Pht),e(p7,gie),e(gie,Bht),e(p7,Iht),e(ae,Nht),e(ae,_7),e(_7,$Se),e($Se,qht),e(_7,jht),e(_7,hie),e(hie,Dht),e(_7,Ght),e(ae,Oht),e(ae,b7),e(b7,kSe),e(kSe,Vht),e(b7,Xht),e(b7,uie),e(uie,zht),e(b7,Qht),e(Zr,Wht),M(v7,Zr,null),b(c,rmo,_),b(c,zc,_),e(zc,F7),e(F7,SSe),M(CB,SSe,null),e(zc,Uht),e(zc,RSe),e(RSe,Hht),b(c,tmo,_),b(c,Er,_),M(wB,Er,null),e(Er,Jht),e(Er,Qc),e(Qc,Yht),e(Qc,pie),e(pie,Zht),e(Qc,Kht),e(Qc,_ie),e(_ie,eut),e(Qc,out),e(Er,rut),e(Er,AB),e(AB,tut),e(AB,PSe),e(PSe,aut),e(AB,nut),e(Er,sut),e(Er,da),M(LB,da,null),e(da,lut),e(da,BSe),e(BSe,iut),e(da,dut),e(da,Wc),e(Wc,mut),e(Wc,ISe),e(ISe,cut),e(Wc,fut),e(Wc,bie),e(bie,gut),e(Wc,hut),e(da,uut),M(T7,da,null),e(Er,put),e(Er,Kr),M(yB,Kr,null),e(Kr,_ut),e(Kr,NSe),e(NSe,but),e(Kr,vut),e(Kr,Jn),e(Jn,Fut),e(Jn,qSe),e(qSe,Tut),e(Jn,Mut),e(Jn,jSe),e(jSe,Eut),e(Jn,Cut),e(Jn,DSe),e(DSe,wut),e(Jn,Aut),e(Kr,Lut),e(Kr,Me),e(Me,M7),e(M7,GSe),e(GSe,yut),e(M7,xut),e(M7,vie),e(vie,$ut),e(M7,kut),e(Me,Sut),e(Me,E7),e(E7,OSe),e(OSe,Rut),e(E7,Put),e(E7,Fie),e(Fie,But),e(E7,Iut),e(Me,Nut),e(Me,C7),e(C7,VSe),e(VSe,qut),e(C7,jut),e(C7,Tie),e(Tie,Dut),e(C7,Gut),e(Me,Out),e(Me,w7),e(w7,XSe),e(XSe,Vut),e(w7,Xut),e(w7,Mie),e(Mie,zut),e(w7,Qut),e(Me,Wut),e(Me,A7),e(A7,zSe),e(zSe,Uut),e(A7,Hut),e(A7,Eie),e(Eie,Jut),e(A7,Yut),e(Me,Zut),e(Me,L7),e(L7,QSe),e(QSe,Kut),e(L7,ept),e(L7,Cie),e(Cie,opt),e(L7,rpt),e(Me,tpt),e(Me,y7),e(y7,WSe),e(WSe,apt),e(y7,npt),e(y7,wie),e(wie,spt),e(y7,lpt),e(Me,ipt),e(Me,x7),e(x7,USe),e(USe,dpt),e(x7,mpt),e(x7,Aie),e(Aie,cpt),e(x7,fpt),e(Me,gpt),e(Me,$7),e($7,HSe),e(HSe,hpt),e($7,upt),e($7,Lie),e(Lie,ppt),e($7,_pt),e(Me,bpt),e(Me,k7),e(k7,JSe),e(JSe,vpt),e(k7,Fpt),e(k7,yie),e(yie,Tpt),e(k7,Mpt),e(Me,Ept),e(Me,S7),e(S7,YSe),e(YSe,Cpt),e(S7,wpt),e(S7,xie),e(xie,Apt),e(S7,Lpt),e(Me,ypt),e(Me,R7),e(R7,ZSe),e(ZSe,xpt),e(R7,$pt),e(R7,$ie),e($ie,kpt),e(R7,Spt),e(Me,Rpt),e(Me,P7),e(P7,KSe),e(KSe,Ppt),e(P7,Bpt),e(P7,kie),e(kie,Ipt),e(P7,Npt),e(Me,qpt),e(Me,B7),e(B7,eRe),e(eRe,jpt),e(B7,Dpt),e(B7,Sie),e(Sie,Gpt),e(B7,Opt),e(Me,Vpt),e(Me,I7),e(I7,oRe),e(oRe,Xpt),e(I7,zpt),e(I7,Rie),e(Rie,Qpt),e(I7,Wpt),e(Me,Upt),e(Me,N7),e(N7,rRe),e(rRe,Hpt),e(N7,Jpt),e(N7,Pie),e(Pie,Ypt),e(N7,Zpt),e(Me,Kpt),e(Me,q7),e(q7,tRe),e(tRe,e_t),e(q7,o_t),e(q7,Bie),e(Bie,r_t),e(q7,t_t),e(Kr,a_t),M(j7,Kr,null),b(c,amo,_),b(c,Uc,_),e(Uc,D7),e(D7,aRe),M(xB,aRe,null),e(Uc,n_t),e(Uc,nRe),e(nRe,s_t),b(c,nmo,_),b(c,Cr,_),M($B,Cr,null),e(Cr,l_t),e(Cr,Hc),e(Hc,i_t),e(Hc,Iie),e(Iie,d_t),e(Hc,m_t),e(Hc,Nie),e(Nie,c_t),e(Hc,f_t),e(Cr,g_t),e(Cr,kB),e(kB,h_t),e(kB,sRe),e(sRe,u_t),e(kB,p_t),e(Cr,__t),e(Cr,ma),M(SB,ma,null),e(ma,b_t),e(ma,lRe),e(lRe,v_t),e(ma,F_t),e(ma,Jc),e(Jc,T_t),e(Jc,iRe),e(iRe,M_t),e(Jc,E_t),e(Jc,qie),e(qie,C_t),e(Jc,w_t),e(ma,A_t),M(G7,ma,null),e(Cr,L_t),e(Cr,et),M(RB,et,null),e(et,y_t),e(et,dRe),e(dRe,x_t),e(et,$_t),e(et,Yn),e(Yn,k_t),e(Yn,mRe),e(mRe,S_t),e(Yn,R_t),e(Yn,cRe),e(cRe,P_t),e(Yn,B_t),e(Yn,fRe),e(fRe,I_t),e(Yn,N_t),e(et,q_t),e(et,PB),e(PB,O7),e(O7,gRe),e(gRe,j_t),e(O7,D_t),e(O7,jie),e(jie,G_t),e(O7,O_t),e(PB,V_t),e(PB,V7),e(V7,hRe),e(hRe,X_t),e(V7,z_t),e(V7,Die),e(Die,Q_t),e(V7,W_t),e(et,U_t),M(X7,et,null),b(c,smo,_),b(c,Yc,_),e(Yc,z7),e(z7,uRe),M(BB,uRe,null),e(Yc,H_t),e(Yc,pRe),e(pRe,J_t),b(c,lmo,_),b(c,wr,_),M(IB,wr,null),e(wr,Y_t),e(wr,Zc),e(Zc,Z_t),e(Zc,Gie),e(Gie,K_t),e(Zc,e1t),e(Zc,Oie),e(Oie,o1t),e(Zc,r1t),e(wr,t1t),e(wr,NB),e(NB,a1t),e(NB,_Re),e(_Re,n1t),e(NB,s1t),e(wr,l1t),e(wr,ca),M(qB,ca,null),e(ca,i1t),e(ca,bRe),e(bRe,d1t),e(ca,m1t),e(ca,Kc),e(Kc,c1t),e(Kc,vRe),e(vRe,f1t),e(Kc,g1t),e(Kc,Vie),e(Vie,h1t),e(Kc,u1t),e(ca,p1t),M(Q7,ca,null),e(wr,_1t),e(wr,ot),M(jB,ot,null),e(ot,b1t),e(ot,FRe),e(FRe,v1t),e(ot,F1t),e(ot,Zn),e(Zn,T1t),e(Zn,TRe),e(TRe,M1t),e(Zn,E1t),e(Zn,MRe),e(MRe,C1t),e(Zn,w1t),e(Zn,ERe),e(ERe,A1t),e(Zn,L1t),e(ot,y1t),e(ot,CRe),e(CRe,W7),e(W7,wRe),e(wRe,x1t),e(W7,$1t),e(W7,Xie),e(Xie,k1t),e(W7,S1t),e(ot,R1t),M(U7,ot,null),b(c,imo,_),b(c,ef,_),e(ef,H7),e(H7,ARe),M(DB,ARe,null),e(ef,P1t),e(ef,LRe),e(LRe,B1t),b(c,dmo,_),b(c,Ar,_),M(GB,Ar,null),e(Ar,I1t),e(Ar,of),e(of,N1t),e(of,zie),e(zie,q1t),e(of,j1t),e(of,Qie),e(Qie,D1t),e(of,G1t),e(Ar,O1t),e(Ar,OB),e(OB,V1t),e(OB,yRe),e(yRe,X1t),e(OB,z1t),e(Ar,Q1t),e(Ar,fa),M(VB,fa,null),e(fa,W1t),e(fa,xRe),e(xRe,U1t),e(fa,H1t),e(fa,rf),e(rf,J1t),e(rf,$Re),e($Re,Y1t),e(rf,Z1t),e(rf,Wie),e(Wie,K1t),e(rf,e2t),e(fa,o2t),M(J7,fa,null),e(Ar,r2t),e(Ar,rt),M(XB,rt,null),e(rt,t2t),e(rt,kRe),e(kRe,a2t),e(rt,n2t),e(rt,Kn),e(Kn,s2t),e(Kn,SRe),e(SRe,l2t),e(Kn,i2t),e(Kn,RRe),e(RRe,d2t),e(Kn,m2t),e(Kn,PRe),e(PRe,c2t),e(Kn,f2t),e(rt,g2t),e(rt,BRe),e(BRe,Y7),e(Y7,IRe),e(IRe,h2t),e(Y7,u2t),e(Y7,Uie),e(Uie,p2t),e(Y7,_2t),e(rt,b2t),M(Z7,rt,null),b(c,mmo,_),b(c,tf,_),e(tf,K7),e(K7,NRe),M(zB,NRe,null),e(tf,v2t),e(tf,qRe),e(qRe,F2t),b(c,cmo,_),b(c,Lr,_),M(QB,Lr,null),e(Lr,T2t),e(Lr,af),e(af,M2t),e(af,Hie),e(Hie,E2t),e(af,C2t),e(af,Jie),e(Jie,w2t),e(af,A2t),e(Lr,L2t),e(Lr,WB),e(WB,y2t),e(WB,jRe),e(jRe,x2t),e(WB,$2t),e(Lr,k2t),e(Lr,ga),M(UB,ga,null),e(ga,S2t),e(ga,DRe),e(DRe,R2t),e(ga,P2t),e(ga,nf),e(nf,B2t),e(nf,GRe),e(GRe,I2t),e(nf,N2t),e(nf,Yie),e(Yie,q2t),e(nf,j2t),e(ga,D2t),M(e8,ga,null),e(Lr,G2t),e(Lr,tt),M(HB,tt,null),e(tt,O2t),e(tt,ORe),e(ORe,V2t),e(tt,X2t),e(tt,es),e(es,z2t),e(es,VRe),e(VRe,Q2t),e(es,W2t),e(es,XRe),e(XRe,U2t),e(es,H2t),e(es,zRe),e(zRe,J2t),e(es,Y2t),e(tt,Z2t),e(tt,me),e(me,o8),e(o8,QRe),e(QRe,K2t),e(o8,ebt),e(o8,Zie),e(Zie,obt),e(o8,rbt),e(me,tbt),e(me,r8),e(r8,WRe),e(WRe,abt),e(r8,nbt),e(r8,Kie),e(Kie,sbt),e(r8,lbt),e(me,ibt),e(me,t8),e(t8,URe),e(URe,dbt),e(t8,mbt),e(t8,ede),e(ede,cbt),e(t8,fbt),e(me,gbt),e(me,a8),e(a8,HRe),e(HRe,hbt),e(a8,ubt),e(a8,ode),e(ode,pbt),e(a8,_bt),e(me,bbt),e(me,n8),e(n8,JRe),e(JRe,vbt),e(n8,Fbt),e(n8,rde),e(rde,Tbt),e(n8,Mbt),e(me,Ebt),e(me,s8),e(s8,YRe),e(YRe,Cbt),e(s8,wbt),e(s8,tde),e(tde,Abt),e(s8,Lbt),e(me,ybt),e(me,l8),e(l8,ZRe),e(ZRe,xbt),e(l8,$bt),e(l8,ade),e(ade,kbt),e(l8,Sbt),e(me,Rbt),e(me,i8),e(i8,KRe),e(KRe,Pbt),e(i8,Bbt),e(i8,nde),e(nde,Ibt),e(i8,Nbt),e(me,qbt),e(me,d8),e(d8,ePe),e(ePe,jbt),e(d8,Dbt),e(d8,sde),e(sde,Gbt),e(d8,Obt),e(me,Vbt),e(me,m8),e(m8,oPe),e(oPe,Xbt),e(m8,zbt),e(m8,lde),e(lde,Qbt),e(m8,Wbt),e(me,Ubt),e(me,c8),e(c8,rPe),e(rPe,Hbt),e(c8,Jbt),e(c8,ide),e(ide,Ybt),e(c8,Zbt),e(me,Kbt),e(me,f8),e(f8,tPe),e(tPe,evt),e(f8,ovt),e(f8,dde),e(dde,rvt),e(f8,tvt),e(me,avt),e(me,g8),e(g8,aPe),e(aPe,nvt),e(g8,svt),e(g8,mde),e(mde,lvt),e(g8,ivt),e(me,dvt),e(me,h8),e(h8,nPe),e(nPe,mvt),e(h8,cvt),e(h8,cde),e(cde,fvt),e(h8,gvt),e(me,hvt),e(me,u8),e(u8,sPe),e(sPe,uvt),e(u8,pvt),e(u8,fde),e(fde,_vt),e(u8,bvt),e(me,vvt),e(me,p8),e(p8,lPe),e(lPe,Fvt),e(p8,Tvt),e(p8,gde),e(gde,Mvt),e(p8,Evt),e(me,Cvt),e(me,_8),e(_8,iPe),e(iPe,wvt),e(_8,Avt),e(_8,hde),e(hde,Lvt),e(_8,yvt),e(me,xvt),e(me,b8),e(b8,dPe),e(dPe,$vt),e(b8,kvt),e(b8,ude),e(ude,Svt),e(b8,Rvt),e(me,Pvt),e(me,v8),e(v8,mPe),e(mPe,Bvt),e(v8,Ivt),e(v8,pde),e(pde,Nvt),e(v8,qvt),e(me,jvt),e(me,F8),e(F8,cPe),e(cPe,Dvt),e(F8,Gvt),e(F8,_de),e(_de,Ovt),e(F8,Vvt),e(me,Xvt),e(me,T8),e(T8,fPe),e(fPe,zvt),e(T8,Qvt),e(T8,bde),e(bde,Wvt),e(T8,Uvt),e(me,Hvt),e(me,M8),e(M8,gPe),e(gPe,Jvt),e(M8,Yvt),e(M8,vde),e(vde,Zvt),e(M8,Kvt),e(tt,eFt),M(E8,tt,null),b(c,fmo,_),b(c,sf,_),e(sf,C8),e(C8,hPe),M(JB,hPe,null),e(sf,oFt),e(sf,uPe),e(uPe,rFt),b(c,gmo,_),b(c,yr,_),M(YB,yr,null),e(yr,tFt),e(yr,lf),e(lf,aFt),e(lf,Fde),e(Fde,nFt),e(lf,sFt),e(lf,Tde),e(Tde,lFt),e(lf,iFt),e(yr,dFt),e(yr,ZB),e(ZB,mFt),e(ZB,pPe),e(pPe,cFt),e(ZB,fFt),e(yr,gFt),e(yr,ha),M(KB,ha,null),e(ha,hFt),e(ha,_Pe),e(_Pe,uFt),e(ha,pFt),e(ha,df),e(df,_Ft),e(df,bPe),e(bPe,bFt),e(df,vFt),e(df,Mde),e(Mde,FFt),e(df,TFt),e(ha,MFt),M(w8,ha,null),e(yr,EFt),e(yr,at),M(eI,at,null),e(at,CFt),e(at,vPe),e(vPe,wFt),e(at,AFt),e(at,os),e(os,LFt),e(os,FPe),e(FPe,yFt),e(os,xFt),e(os,TPe),e(TPe,$Ft),e(os,kFt),e(os,MPe),e(MPe,SFt),e(os,RFt),e(at,PFt),e(at,ue),e(ue,A8),e(A8,EPe),e(EPe,BFt),e(A8,IFt),e(A8,Ede),e(Ede,NFt),e(A8,qFt),e(ue,jFt),e(ue,L8),e(L8,CPe),e(CPe,DFt),e(L8,GFt),e(L8,Cde),e(Cde,OFt),e(L8,VFt),e(ue,XFt),e(ue,y8),e(y8,wPe),e(wPe,zFt),e(y8,QFt),e(y8,wde),e(wde,WFt),e(y8,UFt),e(ue,HFt),e(ue,x8),e(x8,APe),e(APe,JFt),e(x8,YFt),e(x8,Ade),e(Ade,ZFt),e(x8,KFt),e(ue,eTt),e(ue,$8),e($8,LPe),e(LPe,oTt),e($8,rTt),e($8,Lde),e(Lde,tTt),e($8,aTt),e(ue,nTt),e(ue,k8),e(k8,yPe),e(yPe,sTt),e(k8,lTt),e(k8,yde),e(yde,iTt),e(k8,dTt),e(ue,mTt),e(ue,S8),e(S8,xPe),e(xPe,cTt),e(S8,fTt),e(S8,xde),e(xde,gTt),e(S8,hTt),e(ue,uTt),e(ue,R8),e(R8,$Pe),e($Pe,pTt),e(R8,_Tt),e(R8,$de),e($de,bTt),e(R8,vTt),e(ue,FTt),e(ue,P8),e(P8,kPe),e(kPe,TTt),e(P8,MTt),e(P8,kde),e(kde,ETt),e(P8,CTt),e(ue,wTt),e(ue,B8),e(B8,SPe),e(SPe,ATt),e(B8,LTt),e(B8,Sde),e(Sde,yTt),e(B8,xTt),e(ue,$Tt),e(ue,I8),e(I8,RPe),e(RPe,kTt),e(I8,STt),e(I8,Rde),e(Rde,RTt),e(I8,PTt),e(ue,BTt),e(ue,N8),e(N8,PPe),e(PPe,ITt),e(N8,NTt),e(N8,Pde),e(Pde,qTt),e(N8,jTt),e(ue,DTt),e(ue,q8),e(q8,BPe),e(BPe,GTt),e(q8,OTt),e(q8,Bde),e(Bde,VTt),e(q8,XTt),e(ue,zTt),e(ue,j8),e(j8,IPe),e(IPe,QTt),e(j8,WTt),e(j8,Ide),e(Ide,UTt),e(j8,HTt),e(ue,JTt),e(ue,D8),e(D8,NPe),e(NPe,YTt),e(D8,ZTt),e(D8,Nde),e(Nde,KTt),e(D8,eMt),e(ue,oMt),e(ue,G8),e(G8,qPe),e(qPe,rMt),e(G8,tMt),e(G8,qde),e(qde,aMt),e(G8,nMt),e(ue,sMt),e(ue,O8),e(O8,jPe),e(jPe,lMt),e(O8,iMt),e(O8,jde),e(jde,dMt),e(O8,mMt),e(ue,cMt),e(ue,V8),e(V8,DPe),e(DPe,fMt),e(V8,gMt),e(V8,Dde),e(Dde,hMt),e(V8,uMt),e(ue,pMt),e(ue,X8),e(X8,GPe),e(GPe,_Mt),e(X8,bMt),e(X8,Gde),e(Gde,vMt),e(X8,FMt),e(ue,TMt),e(ue,z8),e(z8,OPe),e(OPe,MMt),e(z8,EMt),e(z8,Ode),e(Ode,CMt),e(z8,wMt),e(ue,AMt),e(ue,Q8),e(Q8,VPe),e(VPe,LMt),e(Q8,yMt),e(Q8,Vde),e(Vde,xMt),e(Q8,$Mt),e(at,kMt),M(W8,at,null),b(c,hmo,_),b(c,mf,_),e(mf,U8),e(U8,XPe),M(oI,XPe,null),e(mf,SMt),e(mf,zPe),e(zPe,RMt),b(c,umo,_),b(c,xr,_),M(rI,xr,null),e(xr,PMt),e(xr,cf),e(cf,BMt),e(cf,Xde),e(Xde,IMt),e(cf,NMt),e(cf,zde),e(zde,qMt),e(cf,jMt),e(xr,DMt),e(xr,tI),e(tI,GMt),e(tI,QPe),e(QPe,OMt),e(tI,VMt),e(xr,XMt),e(xr,ua),M(aI,ua,null),e(ua,zMt),e(ua,WPe),e(WPe,QMt),e(ua,WMt),e(ua,ff),e(ff,UMt),e(ff,UPe),e(UPe,HMt),e(ff,JMt),e(ff,Qde),e(Qde,YMt),e(ff,ZMt),e(ua,KMt),M(H8,ua,null),e(xr,eEt),e(xr,nt),M(nI,nt,null),e(nt,oEt),e(nt,HPe),e(HPe,rEt),e(nt,tEt),e(nt,rs),e(rs,aEt),e(rs,JPe),e(JPe,nEt),e(rs,sEt),e(rs,YPe),e(YPe,lEt),e(rs,iEt),e(rs,ZPe),e(ZPe,dEt),e(rs,mEt),e(nt,cEt),e(nt,KPe),e(KPe,J8),e(J8,eBe),e(eBe,fEt),e(J8,gEt),e(J8,Wde),e(Wde,hEt),e(J8,uEt),e(nt,pEt),M(Y8,nt,null),b(c,pmo,_),b(c,gf,_),e(gf,Z8),e(Z8,oBe),M(sI,oBe,null),e(gf,_Et),e(gf,rBe),e(rBe,bEt),b(c,_mo,_),b(c,$r,_),M(lI,$r,null),e($r,vEt),e($r,hf),e(hf,FEt),e(hf,Ude),e(Ude,TEt),e(hf,MEt),e(hf,Hde),e(Hde,EEt),e(hf,CEt),e($r,wEt),e($r,iI),e(iI,AEt),e(iI,tBe),e(tBe,LEt),e(iI,yEt),e($r,xEt),e($r,pa),M(dI,pa,null),e(pa,$Et),e(pa,aBe),e(aBe,kEt),e(pa,SEt),e(pa,uf),e(uf,REt),e(uf,nBe),e(nBe,PEt),e(uf,BEt),e(uf,Jde),e(Jde,IEt),e(uf,NEt),e(pa,qEt),M(K8,pa,null),e($r,jEt),e($r,st),M(mI,st,null),e(st,DEt),e(st,sBe),e(sBe,GEt),e(st,OEt),e(st,ts),e(ts,VEt),e(ts,lBe),e(lBe,XEt),e(ts,zEt),e(ts,iBe),e(iBe,QEt),e(ts,WEt),e(ts,dBe),e(dBe,UEt),e(ts,HEt),e(st,JEt),e(st,cI),e(cI,eL),e(eL,mBe),e(mBe,YEt),e(eL,ZEt),e(eL,Yde),e(Yde,KEt),e(eL,e4t),e(cI,o4t),e(cI,oL),e(oL,cBe),e(cBe,r4t),e(oL,t4t),e(oL,Zde),e(Zde,a4t),e(oL,n4t),e(st,s4t),M(rL,st,null),b(c,bmo,_),b(c,pf,_),e(pf,tL),e(tL,fBe),M(fI,fBe,null),e(pf,l4t),e(pf,gBe),e(gBe,i4t),b(c,vmo,_),b(c,kr,_),M(gI,kr,null),e(kr,d4t),e(kr,_f),e(_f,m4t),e(_f,Kde),e(Kde,c4t),e(_f,f4t),e(_f,eme),e(eme,g4t),e(_f,h4t),e(kr,u4t),e(kr,hI),e(hI,p4t),e(hI,hBe),e(hBe,_4t),e(hI,b4t),e(kr,v4t),e(kr,_a),M(uI,_a,null),e(_a,F4t),e(_a,uBe),e(uBe,T4t),e(_a,M4t),e(_a,bf),e(bf,E4t),e(bf,pBe),e(pBe,C4t),e(bf,w4t),e(bf,ome),e(ome,A4t),e(bf,L4t),e(_a,y4t),M(aL,_a,null),e(kr,x4t),e(kr,lt),M(pI,lt,null),e(lt,$4t),e(lt,_Be),e(_Be,k4t),e(lt,S4t),e(lt,as),e(as,R4t),e(as,bBe),e(bBe,P4t),e(as,B4t),e(as,vBe),e(vBe,I4t),e(as,N4t),e(as,FBe),e(FBe,q4t),e(as,j4t),e(lt,D4t),e(lt,ne),e(ne,nL),e(nL,TBe),e(TBe,G4t),e(nL,O4t),e(nL,rme),e(rme,V4t),e(nL,X4t),e(ne,z4t),e(ne,sL),e(sL,MBe),e(MBe,Q4t),e(sL,W4t),e(sL,tme),e(tme,U4t),e(sL,H4t),e(ne,J4t),e(ne,lL),e(lL,EBe),e(EBe,Y4t),e(lL,Z4t),e(lL,ame),e(ame,K4t),e(lL,eCt),e(ne,oCt),e(ne,iL),e(iL,CBe),e(CBe,rCt),e(iL,tCt),e(iL,nme),e(nme,aCt),e(iL,nCt),e(ne,sCt),e(ne,dL),e(dL,wBe),e(wBe,lCt),e(dL,iCt),e(dL,sme),e(sme,dCt),e(dL,mCt),e(ne,cCt),e(ne,mL),e(mL,ABe),e(ABe,fCt),e(mL,gCt),e(mL,lme),e(lme,hCt),e(mL,uCt),e(ne,pCt),e(ne,cL),e(cL,LBe),e(LBe,_Ct),e(cL,bCt),e(cL,ime),e(ime,vCt),e(cL,FCt),e(ne,TCt),e(ne,fL),e(fL,yBe),e(yBe,MCt),e(fL,ECt),e(fL,dme),e(dme,CCt),e(fL,wCt),e(ne,ACt),e(ne,gL),e(gL,xBe),e(xBe,LCt),e(gL,yCt),e(gL,mme),e(mme,xCt),e(gL,$Ct),e(ne,kCt),e(ne,hL),e(hL,$Be),e($Be,SCt),e(hL,RCt),e(hL,cme),e(cme,PCt),e(hL,BCt),e(ne,ICt),e(ne,uL),e(uL,kBe),e(kBe,NCt),e(uL,qCt),e(uL,fme),e(fme,jCt),e(uL,DCt),e(ne,GCt),e(ne,pL),e(pL,SBe),e(SBe,OCt),e(pL,VCt),e(pL,gme),e(gme,XCt),e(pL,zCt),e(ne,QCt),e(ne,_L),e(_L,RBe),e(RBe,WCt),e(_L,UCt),e(_L,hme),e(hme,HCt),e(_L,JCt),e(ne,YCt),e(ne,bL),e(bL,PBe),e(PBe,ZCt),e(bL,KCt),e(bL,ume),e(ume,e3t),e(bL,o3t),e(ne,r3t),e(ne,vL),e(vL,BBe),e(BBe,t3t),e(vL,a3t),e(vL,pme),e(pme,n3t),e(vL,s3t),e(ne,l3t),e(ne,FL),e(FL,IBe),e(IBe,i3t),e(FL,d3t),e(FL,_me),e(_me,m3t),e(FL,c3t),e(ne,f3t),e(ne,TL),e(TL,NBe),e(NBe,g3t),e(TL,h3t),e(TL,bme),e(bme,u3t),e(TL,p3t),e(ne,_3t),e(ne,ML),e(ML,qBe),e(qBe,b3t),e(ML,v3t),e(ML,vme),e(vme,F3t),e(ML,T3t),e(ne,M3t),e(ne,EL),e(EL,jBe),e(jBe,E3t),e(EL,C3t),e(EL,Fme),e(Fme,w3t),e(EL,A3t),e(ne,L3t),e(ne,CL),e(CL,DBe),e(DBe,y3t),e(CL,x3t),e(CL,Tme),e(Tme,$3t),e(CL,k3t),e(ne,S3t),e(ne,wL),e(wL,GBe),e(GBe,R3t),e(wL,P3t),e(wL,Mme),e(Mme,B3t),e(wL,I3t),e(ne,N3t),e(ne,AL),e(AL,OBe),e(OBe,q3t),e(AL,j3t),e(AL,Eme),e(Eme,D3t),e(AL,G3t),e(ne,O3t),e(ne,LL),e(LL,VBe),e(VBe,V3t),e(LL,X3t),e(LL,Cme),e(Cme,z3t),e(LL,Q3t),e(ne,W3t),e(ne,yL),e(yL,XBe),e(XBe,U3t),e(yL,H3t),e(yL,wme),e(wme,J3t),e(yL,Y3t),e(ne,Z3t),e(ne,xL),e(xL,zBe),e(zBe,K3t),e(xL,e5t),e(xL,Ame),e(Ame,o5t),e(xL,r5t),e(ne,t5t),e(ne,$L),e($L,QBe),e(QBe,a5t),e($L,n5t),e($L,Lme),e(Lme,s5t),e($L,l5t),e(ne,i5t),e(ne,kL),e(kL,WBe),e(WBe,d5t),e(kL,m5t),e(kL,yme),e(yme,c5t),e(kL,f5t),e(lt,g5t),M(SL,lt,null),b(c,Fmo,_),b(c,vf,_),e(vf,RL),e(RL,UBe),M(_I,UBe,null),e(vf,h5t),e(vf,HBe),e(HBe,u5t),b(c,Tmo,_),b(c,Sr,_),M(bI,Sr,null),e(Sr,p5t),e(Sr,Ff),e(Ff,_5t),e(Ff,xme),e(xme,b5t),e(Ff,v5t),e(Ff,$me),e($me,F5t),e(Ff,T5t),e(Sr,M5t),e(Sr,vI),e(vI,E5t),e(vI,JBe),e(JBe,C5t),e(vI,w5t),e(Sr,A5t),e(Sr,ba),M(FI,ba,null),e(ba,L5t),e(ba,YBe),e(YBe,y5t),e(ba,x5t),e(ba,Tf),e(Tf,$5t),e(Tf,ZBe),e(ZBe,k5t),e(Tf,S5t),e(Tf,kme),e(kme,R5t),e(Tf,P5t),e(ba,B5t),M(PL,ba,null),e(Sr,I5t),e(Sr,it),M(TI,it,null),e(it,N5t),e(it,KBe),e(KBe,q5t),e(it,j5t),e(it,ns),e(ns,D5t),e(ns,eIe),e(eIe,G5t),e(ns,O5t),e(ns,oIe),e(oIe,V5t),e(ns,X5t),e(ns,rIe),e(rIe,z5t),e(ns,Q5t),e(it,W5t),e(it,Se),e(Se,BL),e(BL,tIe),e(tIe,U5t),e(BL,H5t),e(BL,Sme),e(Sme,J5t),e(BL,Y5t),e(Se,Z5t),e(Se,IL),e(IL,aIe),e(aIe,K5t),e(IL,e0t),e(IL,Rme),e(Rme,o0t),e(IL,r0t),e(Se,t0t),e(Se,NL),e(NL,nIe),e(nIe,a0t),e(NL,n0t),e(NL,Pme),e(Pme,s0t),e(NL,l0t),e(Se,i0t),e(Se,qL),e(qL,sIe),e(sIe,d0t),e(qL,m0t),e(qL,Bme),e(Bme,c0t),e(qL,f0t),e(Se,g0t),e(Se,jL),e(jL,lIe),e(lIe,h0t),e(jL,u0t),e(jL,Ime),e(Ime,p0t),e(jL,_0t),e(Se,b0t),e(Se,DL),e(DL,iIe),e(iIe,v0t),e(DL,F0t),e(DL,Nme),e(Nme,T0t),e(DL,M0t),e(Se,E0t),e(Se,GL),e(GL,dIe),e(dIe,C0t),e(GL,w0t),e(GL,qme),e(qme,A0t),e(GL,L0t),e(Se,y0t),e(Se,OL),e(OL,mIe),e(mIe,x0t),e(OL,$0t),e(OL,jme),e(jme,k0t),e(OL,S0t),e(Se,R0t),e(Se,VL),e(VL,cIe),e(cIe,P0t),e(VL,B0t),e(VL,Dme),e(Dme,I0t),e(VL,N0t),e(Se,q0t),e(Se,XL),e(XL,fIe),e(fIe,j0t),e(XL,D0t),e(XL,Gme),e(Gme,G0t),e(XL,O0t),e(it,V0t),M(zL,it,null),b(c,Mmo,_),b(c,Mf,_),e(Mf,QL),e(QL,gIe),M(MI,gIe,null),e(Mf,X0t),e(Mf,hIe),e(hIe,z0t),b(c,Emo,_),b(c,Rr,_),M(EI,Rr,null),e(Rr,Q0t),e(Rr,Ef),e(Ef,W0t),e(Ef,Ome),e(Ome,U0t),e(Ef,H0t),e(Ef,Vme),e(Vme,J0t),e(Ef,Y0t),e(Rr,Z0t),e(Rr,CI),e(CI,K0t),e(CI,uIe),e(uIe,ewt),e(CI,owt),e(Rr,rwt),e(Rr,va),M(wI,va,null),e(va,twt),e(va,pIe),e(pIe,awt),e(va,nwt),e(va,Cf),e(Cf,swt),e(Cf,_Ie),e(_Ie,lwt),e(Cf,iwt),e(Cf,Xme),e(Xme,dwt),e(Cf,mwt),e(va,cwt),M(WL,va,null),e(Rr,fwt),e(Rr,dt),M(AI,dt,null),e(dt,gwt),e(dt,bIe),e(bIe,hwt),e(dt,uwt),e(dt,ss),e(ss,pwt),e(ss,vIe),e(vIe,_wt),e(ss,bwt),e(ss,FIe),e(FIe,vwt),e(ss,Fwt),e(ss,TIe),e(TIe,Twt),e(ss,Mwt),e(dt,Ewt),e(dt,we),e(we,UL),e(UL,MIe),e(MIe,Cwt),e(UL,wwt),e(UL,zme),e(zme,Awt),e(UL,Lwt),e(we,ywt),e(we,HL),e(HL,EIe),e(EIe,xwt),e(HL,$wt),e(HL,Qme),e(Qme,kwt),e(HL,Swt),e(we,Rwt),e(we,JL),e(JL,CIe),e(CIe,Pwt),e(JL,Bwt),e(JL,Wme),e(Wme,Iwt),e(JL,Nwt),e(we,qwt),e(we,YL),e(YL,wIe),e(wIe,jwt),e(YL,Dwt),e(YL,Ume),e(Ume,Gwt),e(YL,Owt),e(we,Vwt),e(we,ZL),e(ZL,AIe),e(AIe,Xwt),e(ZL,zwt),e(ZL,Hme),e(Hme,Qwt),e(ZL,Wwt),e(we,Uwt),e(we,KL),e(KL,LIe),e(LIe,Hwt),e(KL,Jwt),e(KL,Jme),e(Jme,Ywt),e(KL,Zwt),e(we,Kwt),e(we,ey),e(ey,yIe),e(yIe,eAt),e(ey,oAt),e(ey,Yme),e(Yme,rAt),e(ey,tAt),e(we,aAt),e(we,oy),e(oy,xIe),e(xIe,nAt),e(oy,sAt),e(oy,Zme),e(Zme,lAt),e(oy,iAt),e(we,dAt),e(we,ry),e(ry,$Ie),e($Ie,mAt),e(ry,cAt),e(ry,Kme),e(Kme,fAt),e(ry,gAt),e(we,hAt),e(we,ty),e(ty,kIe),e(kIe,uAt),e(ty,pAt),e(ty,ece),e(ece,_At),e(ty,bAt),e(we,vAt),e(we,ay),e(ay,SIe),e(SIe,FAt),e(ay,TAt),e(ay,oce),e(oce,MAt),e(ay,EAt),e(we,CAt),e(we,ny),e(ny,RIe),e(RIe,wAt),e(ny,AAt),e(ny,rce),e(rce,LAt),e(ny,yAt),e(we,xAt),e(we,sy),e(sy,PIe),e(PIe,$At),e(sy,kAt),e(sy,tce),e(tce,SAt),e(sy,RAt),e(dt,PAt),M(ly,dt,null),b(c,Cmo,_),b(c,wf,_),e(wf,iy),e(iy,BIe),M(LI,BIe,null),e(wf,BAt),e(wf,IIe),e(IIe,IAt),b(c,wmo,_),b(c,Pr,_),M(yI,Pr,null),e(Pr,NAt),e(Pr,Af),e(Af,qAt),e(Af,ace),e(ace,jAt),e(Af,DAt),e(Af,nce),e(nce,GAt),e(Af,OAt),e(Pr,VAt),e(Pr,xI),e(xI,XAt),e(xI,NIe),e(NIe,zAt),e(xI,QAt),e(Pr,WAt),e(Pr,Fa),M($I,Fa,null),e(Fa,UAt),e(Fa,qIe),e(qIe,HAt),e(Fa,JAt),e(Fa,Lf),e(Lf,YAt),e(Lf,jIe),e(jIe,ZAt),e(Lf,KAt),e(Lf,sce),e(sce,e6t),e(Lf,o6t),e(Fa,r6t),M(dy,Fa,null),e(Pr,t6t),e(Pr,mt),M(kI,mt,null),e(mt,a6t),e(mt,DIe),e(DIe,n6t),e(mt,s6t),e(mt,ls),e(ls,l6t),e(ls,GIe),e(GIe,i6t),e(ls,d6t),e(ls,OIe),e(OIe,m6t),e(ls,c6t),e(ls,VIe),e(VIe,f6t),e(ls,g6t),e(mt,h6t),e(mt,Re),e(Re,my),e(my,XIe),e(XIe,u6t),e(my,p6t),e(my,lce),e(lce,_6t),e(my,b6t),e(Re,v6t),e(Re,cy),e(cy,zIe),e(zIe,F6t),e(cy,T6t),e(cy,ice),e(ice,M6t),e(cy,E6t),e(Re,C6t),e(Re,fy),e(fy,QIe),e(QIe,w6t),e(fy,A6t),e(fy,dce),e(dce,L6t),e(fy,y6t),e(Re,x6t),e(Re,gy),e(gy,WIe),e(WIe,$6t),e(gy,k6t),e(gy,mce),e(mce,S6t),e(gy,R6t),e(Re,P6t),e(Re,hy),e(hy,UIe),e(UIe,B6t),e(hy,I6t),e(hy,cce),e(cce,N6t),e(hy,q6t),e(Re,j6t),e(Re,uy),e(uy,HIe),e(HIe,D6t),e(uy,G6t),e(uy,fce),e(fce,O6t),e(uy,V6t),e(Re,X6t),e(Re,py),e(py,JIe),e(JIe,z6t),e(py,Q6t),e(py,gce),e(gce,W6t),e(py,U6t),e(Re,H6t),e(Re,_y),e(_y,YIe),e(YIe,J6t),e(_y,Y6t),e(_y,hce),e(hce,Z6t),e(_y,K6t),e(Re,e7t),e(Re,by),e(by,ZIe),e(ZIe,o7t),e(by,r7t),e(by,uce),e(uce,t7t),e(by,a7t),e(Re,n7t),e(Re,vy),e(vy,KIe),e(KIe,s7t),e(vy,l7t),e(vy,pce),e(pce,i7t),e(vy,d7t),e(mt,m7t),M(Fy,mt,null),b(c,Amo,_),b(c,yf,_),e(yf,Ty),e(Ty,eNe),M(SI,eNe,null),e(yf,c7t),e(yf,oNe),e(oNe,f7t),b(c,Lmo,_),b(c,Br,_),M(RI,Br,null),e(Br,g7t),e(Br,xf),e(xf,h7t),e(xf,_ce),e(_ce,u7t),e(xf,p7t),e(xf,bce),e(bce,_7t),e(xf,b7t),e(Br,v7t),e(Br,PI),e(PI,F7t),e(PI,rNe),e(rNe,T7t),e(PI,M7t),e(Br,E7t),e(Br,Ta),M(BI,Ta,null),e(Ta,C7t),e(Ta,tNe),e(tNe,w7t),e(Ta,A7t),e(Ta,$f),e($f,L7t),e($f,aNe),e(aNe,y7t),e($f,x7t),e($f,vce),e(vce,$7t),e($f,k7t),e(Ta,S7t),M(My,Ta,null),e(Br,R7t),e(Br,ct),M(II,ct,null),e(ct,P7t),e(ct,nNe),e(nNe,B7t),e(ct,I7t),e(ct,is),e(is,N7t),e(is,sNe),e(sNe,q7t),e(is,j7t),e(is,lNe),e(lNe,D7t),e(is,G7t),e(is,iNe),e(iNe,O7t),e(is,V7t),e(ct,X7t),e(ct,Pe),e(Pe,Ey),e(Ey,dNe),e(dNe,z7t),e(Ey,Q7t),e(Ey,Fce),e(Fce,W7t),e(Ey,U7t),e(Pe,H7t),e(Pe,Cy),e(Cy,mNe),e(mNe,J7t),e(Cy,Y7t),e(Cy,Tce),e(Tce,Z7t),e(Cy,K7t),e(Pe,e8t),e(Pe,wy),e(wy,cNe),e(cNe,o8t),e(wy,r8t),e(wy,Mce),e(Mce,t8t),e(wy,a8t),e(Pe,n8t),e(Pe,Ay),e(Ay,fNe),e(fNe,s8t),e(Ay,l8t),e(Ay,Ece),e(Ece,i8t),e(Ay,d8t),e(Pe,m8t),e(Pe,Ly),e(Ly,gNe),e(gNe,c8t),e(Ly,f8t),e(Ly,Cce),e(Cce,g8t),e(Ly,h8t),e(Pe,u8t),e(Pe,yy),e(yy,hNe),e(hNe,p8t),e(yy,_8t),e(yy,wce),e(wce,b8t),e(yy,v8t),e(Pe,F8t),e(Pe,xy),e(xy,uNe),e(uNe,T8t),e(xy,M8t),e(xy,Ace),e(Ace,E8t),e(xy,C8t),e(Pe,w8t),e(Pe,$y),e($y,pNe),e(pNe,A8t),e($y,L8t),e($y,Lce),e(Lce,y8t),e($y,x8t),e(Pe,$8t),e(Pe,ky),e(ky,_Ne),e(_Ne,k8t),e(ky,S8t),e(ky,yce),e(yce,R8t),e(ky,P8t),e(Pe,B8t),e(Pe,Sy),e(Sy,bNe),e(bNe,I8t),e(Sy,N8t),e(Sy,xce),e(xce,q8t),e(Sy,j8t),e(ct,D8t),M(Ry,ct,null),b(c,ymo,_),b(c,kf,_),e(kf,Py),e(Py,vNe),M(NI,vNe,null),e(kf,G8t),e(kf,FNe),e(FNe,O8t),b(c,xmo,_),b(c,Ir,_),M(qI,Ir,null),e(Ir,V8t),e(Ir,Sf),e(Sf,X8t),e(Sf,$ce),e($ce,z8t),e(Sf,Q8t),e(Sf,kce),e(kce,W8t),e(Sf,U8t),e(Ir,H8t),e(Ir,jI),e(jI,J8t),e(jI,TNe),e(TNe,Y8t),e(jI,Z8t),e(Ir,K8t),e(Ir,Ma),M(DI,Ma,null),e(Ma,eLt),e(Ma,MNe),e(MNe,oLt),e(Ma,rLt),e(Ma,Rf),e(Rf,tLt),e(Rf,ENe),e(ENe,aLt),e(Rf,nLt),e(Rf,Sce),e(Sce,sLt),e(Rf,lLt),e(Ma,iLt),M(By,Ma,null),e(Ir,dLt),e(Ir,ft),M(GI,ft,null),e(ft,mLt),e(ft,CNe),e(CNe,cLt),e(ft,fLt),e(ft,ds),e(ds,gLt),e(ds,wNe),e(wNe,hLt),e(ds,uLt),e(ds,ANe),e(ANe,pLt),e(ds,_Lt),e(ds,LNe),e(LNe,bLt),e(ds,vLt),e(ft,FLt),e(ft,Be),e(Be,Iy),e(Iy,yNe),e(yNe,TLt),e(Iy,MLt),e(Iy,Rce),e(Rce,ELt),e(Iy,CLt),e(Be,wLt),e(Be,Ny),e(Ny,xNe),e(xNe,ALt),e(Ny,LLt),e(Ny,Pce),e(Pce,yLt),e(Ny,xLt),e(Be,$Lt),e(Be,qy),e(qy,$Ne),e($Ne,kLt),e(qy,SLt),e(qy,Bce),e(Bce,RLt),e(qy,PLt),e(Be,BLt),e(Be,jy),e(jy,kNe),e(kNe,ILt),e(jy,NLt),e(jy,Ice),e(Ice,qLt),e(jy,jLt),e(Be,DLt),e(Be,Dy),e(Dy,SNe),e(SNe,GLt),e(Dy,OLt),e(Dy,Nce),e(Nce,VLt),e(Dy,XLt),e(Be,zLt),e(Be,Gy),e(Gy,RNe),e(RNe,QLt),e(Gy,WLt),e(Gy,qce),e(qce,ULt),e(Gy,HLt),e(Be,JLt),e(Be,Oy),e(Oy,PNe),e(PNe,YLt),e(Oy,ZLt),e(Oy,jce),e(jce,KLt),e(Oy,eyt),e(Be,oyt),e(Be,Vy),e(Vy,BNe),e(BNe,ryt),e(Vy,tyt),e(Vy,Dce),e(Dce,ayt),e(Vy,nyt),e(Be,syt),e(Be,Xy),e(Xy,INe),e(INe,lyt),e(Xy,iyt),e(Xy,Gce),e(Gce,dyt),e(Xy,myt),e(Be,cyt),e(Be,zy),e(zy,NNe),e(NNe,fyt),e(zy,gyt),e(zy,Oce),e(Oce,hyt),e(zy,uyt),e(ft,pyt),M(Qy,ft,null),b(c,$mo,_),b(c,Pf,_),e(Pf,Wy),e(Wy,qNe),M(OI,qNe,null),e(Pf,_yt),e(Pf,jNe),e(jNe,byt),b(c,kmo,_),b(c,Nr,_),M(VI,Nr,null),e(Nr,vyt),e(Nr,Bf),e(Bf,Fyt),e(Bf,Vce),e(Vce,Tyt),e(Bf,Myt),e(Bf,Xce),e(Xce,Eyt),e(Bf,Cyt),e(Nr,wyt),e(Nr,XI),e(XI,Ayt),e(XI,DNe),e(DNe,Lyt),e(XI,yyt),e(Nr,xyt),e(Nr,Ea),M(zI,Ea,null),e(Ea,$yt),e(Ea,GNe),e(GNe,kyt),e(Ea,Syt),e(Ea,If),e(If,Ryt),e(If,ONe),e(ONe,Pyt),e(If,Byt),e(If,zce),e(zce,Iyt),e(If,Nyt),e(Ea,qyt),M(Uy,Ea,null),e(Nr,jyt),e(Nr,gt),M(QI,gt,null),e(gt,Dyt),e(gt,VNe),e(VNe,Gyt),e(gt,Oyt),e(gt,ms),e(ms,Vyt),e(ms,XNe),e(XNe,Xyt),e(ms,zyt),e(ms,zNe),e(zNe,Qyt),e(ms,Wyt),e(ms,QNe),e(QNe,Uyt),e(ms,Hyt),e(gt,Jyt),e(gt,Ie),e(Ie,Hy),e(Hy,WNe),e(WNe,Yyt),e(Hy,Zyt),e(Hy,Qce),e(Qce,Kyt),e(Hy,e9t),e(Ie,o9t),e(Ie,Jy),e(Jy,UNe),e(UNe,r9t),e(Jy,t9t),e(Jy,Wce),e(Wce,a9t),e(Jy,n9t),e(Ie,s9t),e(Ie,Yy),e(Yy,HNe),e(HNe,l9t),e(Yy,i9t),e(Yy,Uce),e(Uce,d9t),e(Yy,m9t),e(Ie,c9t),e(Ie,Zy),e(Zy,JNe),e(JNe,f9t),e(Zy,g9t),e(Zy,Hce),e(Hce,h9t),e(Zy,u9t),e(Ie,p9t),e(Ie,Ky),e(Ky,YNe),e(YNe,_9t),e(Ky,b9t),e(Ky,Jce),e(Jce,v9t),e(Ky,F9t),e(Ie,T9t),e(Ie,e9),e(e9,ZNe),e(ZNe,M9t),e(e9,E9t),e(e9,Yce),e(Yce,C9t),e(e9,w9t),e(Ie,A9t),e(Ie,o9),e(o9,KNe),e(KNe,L9t),e(o9,y9t),e(o9,Zce),e(Zce,x9t),e(o9,$9t),e(Ie,k9t),e(Ie,r9),e(r9,eqe),e(eqe,S9t),e(r9,R9t),e(r9,Kce),e(Kce,P9t),e(r9,B9t),e(Ie,I9t),e(Ie,t9),e(t9,oqe),e(oqe,N9t),e(t9,q9t),e(t9,efe),e(efe,j9t),e(t9,D9t),e(Ie,G9t),e(Ie,a9),e(a9,rqe),e(rqe,O9t),e(a9,V9t),e(a9,ofe),e(ofe,X9t),e(a9,z9t),e(gt,Q9t),M(n9,gt,null),b(c,Smo,_),b(c,Nf,_),e(Nf,s9),e(s9,tqe),M(WI,tqe,null),e(Nf,W9t),e(Nf,aqe),e(aqe,U9t),b(c,Rmo,_),b(c,qr,_),M(UI,qr,null),e(qr,H9t),e(qr,qf),e(qf,J9t),e(qf,rfe),e(rfe,Y9t),e(qf,Z9t),e(qf,tfe),e(tfe,K9t),e(qf,ext),e(qr,oxt),e(qr,HI),e(HI,rxt),e(HI,nqe),e(nqe,txt),e(HI,axt),e(qr,nxt),e(qr,Ca),M(JI,Ca,null),e(Ca,sxt),e(Ca,sqe),e(sqe,lxt),e(Ca,ixt),e(Ca,jf),e(jf,dxt),e(jf,lqe),e(lqe,mxt),e(jf,cxt),e(jf,afe),e(afe,fxt),e(jf,gxt),e(Ca,hxt),M(l9,Ca,null),e(qr,uxt),e(qr,ht),M(YI,ht,null),e(ht,pxt),e(ht,iqe),e(iqe,_xt),e(ht,bxt),e(ht,cs),e(cs,vxt),e(cs,dqe),e(dqe,Fxt),e(cs,Txt),e(cs,mqe),e(mqe,Mxt),e(cs,Ext),e(cs,cqe),e(cqe,Cxt),e(cs,wxt),e(ht,Axt),e(ht,We),e(We,i9),e(i9,fqe),e(fqe,Lxt),e(i9,yxt),e(i9,nfe),e(nfe,xxt),e(i9,$xt),e(We,kxt),e(We,d9),e(d9,gqe),e(gqe,Sxt),e(d9,Rxt),e(d9,sfe),e(sfe,Pxt),e(d9,Bxt),e(We,Ixt),e(We,m9),e(m9,hqe),e(hqe,Nxt),e(m9,qxt),e(m9,lfe),e(lfe,jxt),e(m9,Dxt),e(We,Gxt),e(We,c9),e(c9,uqe),e(uqe,Oxt),e(c9,Vxt),e(c9,ife),e(ife,Xxt),e(c9,zxt),e(We,Qxt),e(We,f9),e(f9,pqe),e(pqe,Wxt),e(f9,Uxt),e(f9,dfe),e(dfe,Hxt),e(f9,Jxt),e(We,Yxt),e(We,g9),e(g9,_qe),e(_qe,Zxt),e(g9,Kxt),e(g9,mfe),e(mfe,e$t),e(g9,o$t),e(We,r$t),e(We,h9),e(h9,bqe),e(bqe,t$t),e(h9,a$t),e(h9,cfe),e(cfe,n$t),e(h9,s$t),e(We,l$t),e(We,u9),e(u9,vqe),e(vqe,i$t),e(u9,d$t),e(u9,ffe),e(ffe,m$t),e(u9,c$t),e(ht,f$t),M(p9,ht,null),b(c,Pmo,_),b(c,Df,_),e(Df,_9),e(_9,Fqe),M(ZI,Fqe,null),e(Df,g$t),e(Df,Tqe),e(Tqe,h$t),b(c,Bmo,_),b(c,jr,_),M(KI,jr,null),e(jr,u$t),e(jr,Gf),e(Gf,p$t),e(Gf,gfe),e(gfe,_$t),e(Gf,b$t),e(Gf,hfe),e(hfe,v$t),e(Gf,F$t),e(jr,T$t),e(jr,eN),e(eN,M$t),e(eN,Mqe),e(Mqe,E$t),e(eN,C$t),e(jr,w$t),e(jr,wa),M(oN,wa,null),e(wa,A$t),e(wa,Eqe),e(Eqe,L$t),e(wa,y$t),e(wa,Of),e(Of,x$t),e(Of,Cqe),e(Cqe,$$t),e(Of,k$t),e(Of,ufe),e(ufe,S$t),e(Of,R$t),e(wa,P$t),M(b9,wa,null),e(jr,B$t),e(jr,ut),M(rN,ut,null),e(ut,I$t),e(ut,wqe),e(wqe,N$t),e(ut,q$t),e(ut,fs),e(fs,j$t),e(fs,Aqe),e(Aqe,D$t),e(fs,G$t),e(fs,Lqe),e(Lqe,O$t),e(fs,V$t),e(fs,yqe),e(yqe,X$t),e(fs,z$t),e(ut,Q$t),e(ut,Ue),e(Ue,v9),e(v9,xqe),e(xqe,W$t),e(v9,U$t),e(v9,pfe),e(pfe,H$t),e(v9,J$t),e(Ue,Y$t),e(Ue,F9),e(F9,$qe),e($qe,Z$t),e(F9,K$t),e(F9,_fe),e(_fe,ekt),e(F9,okt),e(Ue,rkt),e(Ue,T9),e(T9,kqe),e(kqe,tkt),e(T9,akt),e(T9,bfe),e(bfe,nkt),e(T9,skt),e(Ue,lkt),e(Ue,M9),e(M9,Sqe),e(Sqe,ikt),e(M9,dkt),e(M9,vfe),e(vfe,mkt),e(M9,ckt),e(Ue,fkt),e(Ue,E9),e(E9,Rqe),e(Rqe,gkt),e(E9,hkt),e(E9,Ffe),e(Ffe,ukt),e(E9,pkt),e(Ue,_kt),e(Ue,C9),e(C9,Pqe),e(Pqe,bkt),e(C9,vkt),e(C9,Tfe),e(Tfe,Fkt),e(C9,Tkt),e(Ue,Mkt),e(Ue,w9),e(w9,Bqe),e(Bqe,Ekt),e(w9,Ckt),e(w9,Mfe),e(Mfe,wkt),e(w9,Akt),e(Ue,Lkt),e(Ue,A9),e(A9,Iqe),e(Iqe,ykt),e(A9,xkt),e(A9,Efe),e(Efe,$kt),e(A9,kkt),e(ut,Skt),M(L9,ut,null),b(c,Imo,_),b(c,Vf,_),e(Vf,y9),e(y9,Nqe),M(tN,Nqe,null),e(Vf,Rkt),e(Vf,qqe),e(qqe,Pkt),b(c,Nmo,_),b(c,Dr,_),M(aN,Dr,null),e(Dr,Bkt),e(Dr,Xf),e(Xf,Ikt),e(Xf,Cfe),e(Cfe,Nkt),e(Xf,qkt),e(Xf,wfe),e(wfe,jkt),e(Xf,Dkt),e(Dr,Gkt),e(Dr,nN),e(nN,Okt),e(nN,jqe),e(jqe,Vkt),e(nN,Xkt),e(Dr,zkt),e(Dr,Aa),M(sN,Aa,null),e(Aa,Qkt),e(Aa,Dqe),e(Dqe,Wkt),e(Aa,Ukt),e(Aa,zf),e(zf,Hkt),e(zf,Gqe),e(Gqe,Jkt),e(zf,Ykt),e(zf,Afe),e(Afe,Zkt),e(zf,Kkt),e(Aa,eSt),M(x9,Aa,null),e(Dr,oSt),e(Dr,pt),M(lN,pt,null),e(pt,rSt),e(pt,Oqe),e(Oqe,tSt),e(pt,aSt),e(pt,gs),e(gs,nSt),e(gs,Vqe),e(Vqe,sSt),e(gs,lSt),e(gs,Xqe),e(Xqe,iSt),e(gs,dSt),e(gs,zqe),e(zqe,mSt),e(gs,cSt),e(pt,fSt),e(pt,Qqe),e(Qqe,$9),e($9,Wqe),e(Wqe,gSt),e($9,hSt),e($9,Lfe),e(Lfe,uSt),e($9,pSt),e(pt,_St),M(k9,pt,null),b(c,qmo,_),b(c,Qf,_),e(Qf,S9),e(S9,Uqe),M(iN,Uqe,null),e(Qf,bSt),e(Qf,Hqe),e(Hqe,vSt),b(c,jmo,_),b(c,Gr,_),M(dN,Gr,null),e(Gr,FSt),e(Gr,Wf),e(Wf,TSt),e(Wf,yfe),e(yfe,MSt),e(Wf,ESt),e(Wf,xfe),e(xfe,CSt),e(Wf,wSt),e(Gr,ASt),e(Gr,mN),e(mN,LSt),e(mN,Jqe),e(Jqe,ySt),e(mN,xSt),e(Gr,$St),e(Gr,La),M(cN,La,null),e(La,kSt),e(La,Yqe),e(Yqe,SSt),e(La,RSt),e(La,Uf),e(Uf,PSt),e(Uf,Zqe),e(Zqe,BSt),e(Uf,ISt),e(Uf,$fe),e($fe,NSt),e(Uf,qSt),e(La,jSt),M(R9,La,null),e(Gr,DSt),e(Gr,_t),M(fN,_t,null),e(_t,GSt),e(_t,Kqe),e(Kqe,OSt),e(_t,VSt),e(_t,hs),e(hs,XSt),e(hs,eje),e(eje,zSt),e(hs,QSt),e(hs,oje),e(oje,WSt),e(hs,USt),e(hs,rje),e(rje,HSt),e(hs,JSt),e(_t,YSt),e(_t,gN),e(gN,P9),e(P9,tje),e(tje,ZSt),e(P9,KSt),e(P9,kfe),e(kfe,eRt),e(P9,oRt),e(gN,rRt),e(gN,B9),e(B9,aje),e(aje,tRt),e(B9,aRt),e(B9,Sfe),e(Sfe,nRt),e(B9,sRt),e(_t,lRt),M(I9,_t,null),b(c,Dmo,_),b(c,Hf,_),e(Hf,N9),e(N9,nje),M(hN,nje,null),e(Hf,iRt),e(Hf,sje),e(sje,dRt),b(c,Gmo,_),b(c,Or,_),M(uN,Or,null),e(Or,mRt),e(Or,Jf),e(Jf,cRt),e(Jf,Rfe),e(Rfe,fRt),e(Jf,gRt),e(Jf,Pfe),e(Pfe,hRt),e(Jf,uRt),e(Or,pRt),e(Or,pN),e(pN,_Rt),e(pN,lje),e(lje,bRt),e(pN,vRt),e(Or,FRt),e(Or,ya),M(_N,ya,null),e(ya,TRt),e(ya,ije),e(ije,MRt),e(ya,ERt),e(ya,Yf),e(Yf,CRt),e(Yf,dje),e(dje,wRt),e(Yf,ARt),e(Yf,Bfe),e(Bfe,LRt),e(Yf,yRt),e(ya,xRt),M(q9,ya,null),e(Or,$Rt),e(Or,bt),M(bN,bt,null),e(bt,kRt),e(bt,mje),e(mje,SRt),e(bt,RRt),e(bt,us),e(us,PRt),e(us,cje),e(cje,BRt),e(us,IRt),e(us,fje),e(fje,NRt),e(us,qRt),e(us,gje),e(gje,jRt),e(us,DRt),e(bt,GRt),e(bt,hje),e(hje,j9),e(j9,uje),e(uje,ORt),e(j9,VRt),e(j9,Ife),e(Ife,XRt),e(j9,zRt),e(bt,QRt),M(D9,bt,null),Omo=!0},p(c,[_]){const vN={};_&2&&(vN.$$scope={dirty:_,ctx:c}),sg.$set(vN);const pje={};_&2&&(pje.$$scope={dirty:_,ctx:c}),Du.$set(pje);const _je={};_&2&&(_je.$$scope={dirty:_,ctx:c}),Lp.$set(_je);const bje={};_&2&&(bje.$$scope={dirty:_,ctx:c}),M_.$set(bje);const FN={};_&2&&(FN.$$scope={dirty:_,ctx:c}),E_.$set(FN);const vje={};_&2&&(vje.$$scope={dirty:_,ctx:c}),r1.$set(vje);const ps={};_&2&&(ps.$$scope={dirty:_,ctx:c}),t1.$set(ps);const Fje={};_&2&&(Fje.$$scope={dirty:_,ctx:c}),x1.$set(Fje);const Tje={};_&2&&(Tje.$$scope={dirty:_,ctx:c}),$1.$set(Tje);const Mje={};_&2&&(Mje.$$scope={dirty:_,ctx:c}),R1.$set(Mje);const TN={};_&2&&(TN.$$scope={dirty:_,ctx:c}),sv.$set(TN);const Eje={};_&2&&(Eje.$$scope={dirty:_,ctx:c}),iv.$set(Eje);const MN={};_&2&&(MN.$$scope={dirty:_,ctx:c}),sF.$set(MN);const Cje={};_&2&&(Cje.$$scope={dirty:_,ctx:c}),iF.$set(Cje);const EN={};_&2&&(EN.$$scope={dirty:_,ctx:c}),KF.$set(EN);const wje={};_&2&&(wje.$$scope={dirty:_,ctx:c}),oT.$set(wje);const Aje={};_&2&&(Aje.$$scope={dirty:_,ctx:c}),nT.$set(Aje);const Lje={};_&2&&(Lje.$$scope={dirty:_,ctx:c}),lT.$set(Lje);const Zf={};_&2&&(Zf.$$scope={dirty:_,ctx:c}),JT.$set(Zf);const yje={};_&2&&(yje.$$scope={dirty:_,ctx:c}),ZT.$set(yje);const xje={};_&2&&(xje.$$scope={dirty:_,ctx:c}),TM.$set(xje);const $je={};_&2&&($je.$$scope={dirty:_,ctx:c}),EM.$set($je);const CN={};_&2&&(CN.$$scope={dirty:_,ctx:c}),yE.$set(CN);const kje={};_&2&&(kje.$$scope={dirty:_,ctx:c}),$E.$set(kje);const Sje={};_&2&&(Sje.$$scope={dirty:_,ctx:c}),c4.$set(Sje);const Rje={};_&2&&(Rje.$$scope={dirty:_,ctx:c}),g4.$set(Rje);const Et={};_&2&&(Et.$$scope={dirty:_,ctx:c}),M4.$set(Et);const wN={};_&2&&(wN.$$scope={dirty:_,ctx:c}),C4.$set(wN);const Pje={};_&2&&(Pje.$$scope={dirty:_,ctx:c}),hC.$set(Pje);const AN={};_&2&&(AN.$$scope={dirty:_,ctx:c}),pC.$set(AN);const Bje={};_&2&&(Bje.$$scope={dirty:_,ctx:c}),g3.$set(Bje);const Ct={};_&2&&(Ct.$$scope={dirty:_,ctx:c}),u3.$set(Ct);const Ije={};_&2&&(Ije.$$scope={dirty:_,ctx:c}),b3.$set(Ije);const Kf={};_&2&&(Kf.$$scope={dirty:_,ctx:c}),F3.$set(Kf);const Nje={};_&2&&(Nje.$$scope={dirty:_,ctx:c}),w3.$set(Nje);const qje={};_&2&&(qje.$$scope={dirty:_,ctx:c}),L3.$set(qje);const L={};_&2&&(L.$$scope={dirty:_,ctx:c}),z3.$set(L);const G9={};_&2&&(G9.$$scope={dirty:_,ctx:c}),W3.$set(G9);const jje={};_&2&&(jje.$$scope={dirty:_,ctx:c}),J3.$set(jje);const Dje={};_&2&&(Dje.$$scope={dirty:_,ctx:c}),Z3.$set(Dje);const O9={};_&2&&(O9.$$scope={dirty:_,ctx:c}),o5.$set(O9);const Gje={};_&2&&(Gje.$$scope={dirty:_,ctx:c}),t5.$set(Gje);const Oje={};_&2&&(Oje.$$scope={dirty:_,ctx:c}),s5.$set(Oje);const V9={};_&2&&(V9.$$scope={dirty:_,ctx:c}),i5.$set(V9);const Vje={};_&2&&(Vje.$$scope={dirty:_,ctx:c}),v5.$set(Vje);const Xje={};_&2&&(Xje.$$scope={dirty:_,ctx:c}),T5.$set(Xje);const X9={};_&2&&(X9.$$scope={dirty:_,ctx:c}),y5.$set(X9);const zje={};_&2&&(zje.$$scope={dirty:_,ctx:c}),$5.$set(zje);const Qje={};_&2&&(Qje.$$scope={dirty:_,ctx:c}),O5.$set(Qje);const z9={};_&2&&(z9.$$scope={dirty:_,ctx:c}),X5.$set(z9);const Wje={};_&2&&(Wje.$$scope={dirty:_,ctx:c}),H5.$set(Wje);const Uje={};_&2&&(Uje.$$scope={dirty:_,ctx:c}),Y5.$set(Uje);const Q9={};_&2&&(Q9.$$scope={dirty:_,ctx:c}),a0.$set(Q9);const Hje={};_&2&&(Hje.$$scope={dirty:_,ctx:c}),s0.$set(Hje);const Jje={};_&2&&(Jje.$$scope={dirty:_,ctx:c}),f0.$set(Jje);const W9={};_&2&&(W9.$$scope={dirty:_,ctx:c}),h0.$set(W9);const Yje={};_&2&&(Yje.$$scope={dirty:_,ctx:c}),T0.$set(Yje);const Zje={};_&2&&(Zje.$$scope={dirty:_,ctx:c}),E0.$set(Zje);const U9={};_&2&&(U9.$$scope={dirty:_,ctx:c}),A0.$set(U9);const Kje={};_&2&&(Kje.$$scope={dirty:_,ctx:c}),y0.$set(Kje);const eDe={};_&2&&(eDe.$$scope={dirty:_,ctx:c}),I0.$set(eDe);const H9={};_&2&&(H9.$$scope={dirty:_,ctx:c}),q0.$set(H9);const oDe={};_&2&&(oDe.$$scope={dirty:_,ctx:c}),G0.$set(oDe);const rDe={};_&2&&(rDe.$$scope={dirty:_,ctx:c}),V0.$set(rDe);const J9={};_&2&&(J9.$$scope={dirty:_,ctx:c}),Q0.$set(J9);const tDe={};_&2&&(tDe.$$scope={dirty:_,ctx:c}),U0.$set(tDe);const aDe={};_&2&&(aDe.$$scope={dirty:_,ctx:c}),Zw.$set(aDe);const Y9={};_&2&&(Y9.$$scope={dirty:_,ctx:c}),eA.$set(Y9);const nDe={};_&2&&(nDe.$$scope={dirty:_,ctx:c}),CA.$set(nDe);const sDe={};_&2&&(sDe.$$scope={dirty:_,ctx:c}),AA.$set(sDe);const Z9={};_&2&&(Z9.$$scope={dirty:_,ctx:c}),GA.$set(Z9);const lDe={};_&2&&(lDe.$$scope={dirty:_,ctx:c}),VA.$set(lDe);const iDe={};_&2&&(iDe.$$scope={dirty:_,ctx:c}),KA.$set(iDe);const K9={};_&2&&(K9.$$scope={dirty:_,ctx:c}),o6.$set(K9);const dDe={};_&2&&(dDe.$$scope={dirty:_,ctx:c}),n6.$set(dDe);const mDe={};_&2&&(mDe.$$scope={dirty:_,ctx:c}),l6.$set(mDe);const ex={};_&2&&(ex.$$scope={dirty:_,ctx:c}),x6.$set(ex);const cDe={};_&2&&(cDe.$$scope={dirty:_,ctx:c}),k6.$set(cDe);const fDe={};_&2&&(fDe.$$scope={dirty:_,ctx:c}),O6.$set(fDe);const ox={};_&2&&(ox.$$scope={dirty:_,ctx:c}),X6.$set(ox);const gDe={};_&2&&(gDe.$$scope={dirty:_,ctx:c}),v7.$set(gDe);const hDe={};_&2&&(hDe.$$scope={dirty:_,ctx:c}),T7.$set(hDe);const rx={};_&2&&(rx.$$scope={dirty:_,ctx:c}),j7.$set(rx);const uDe={};_&2&&(uDe.$$scope={dirty:_,ctx:c}),G7.$set(uDe);const pDe={};_&2&&(pDe.$$scope={dirty:_,ctx:c}),X7.$set(pDe);const tx={};_&2&&(tx.$$scope={dirty:_,ctx:c}),Q7.$set(tx);const _De={};_&2&&(_De.$$scope={dirty:_,ctx:c}),U7.$set(_De);const bDe={};_&2&&(bDe.$$scope={dirty:_,ctx:c}),J7.$set(bDe);const ax={};_&2&&(ax.$$scope={dirty:_,ctx:c}),Z7.$set(ax);const vDe={};_&2&&(vDe.$$scope={dirty:_,ctx:c}),e8.$set(vDe);const FDe={};_&2&&(FDe.$$scope={dirty:_,ctx:c}),E8.$set(FDe);const nx={};_&2&&(nx.$$scope={dirty:_,ctx:c}),w8.$set(nx);const TDe={};_&2&&(TDe.$$scope={dirty:_,ctx:c}),W8.$set(TDe);const MDe={};_&2&&(MDe.$$scope={dirty:_,ctx:c}),H8.$set(MDe);const sx={};_&2&&(sx.$$scope={dirty:_,ctx:c}),Y8.$set(sx);const EDe={};_&2&&(EDe.$$scope={dirty:_,ctx:c}),K8.$set(EDe);const CDe={};_&2&&(CDe.$$scope={dirty:_,ctx:c}),rL.$set(CDe);const lx={};_&2&&(lx.$$scope={dirty:_,ctx:c}),aL.$set(lx);const wDe={};_&2&&(wDe.$$scope={dirty:_,ctx:c}),SL.$set(wDe);const ADe={};_&2&&(ADe.$$scope={dirty:_,ctx:c}),PL.$set(ADe);const ix={};_&2&&(ix.$$scope={dirty:_,ctx:c}),zL.$set(ix);const LDe={};_&2&&(LDe.$$scope={dirty:_,ctx:c}),WL.$set(LDe);const yDe={};_&2&&(yDe.$$scope={dirty:_,ctx:c}),ly.$set(yDe);const dx={};_&2&&(dx.$$scope={dirty:_,ctx:c}),dy.$set(dx);const xDe={};_&2&&(xDe.$$scope={dirty:_,ctx:c}),Fy.$set(xDe);const $De={};_&2&&($De.$$scope={dirty:_,ctx:c}),My.$set($De);const mx={};_&2&&(mx.$$scope={dirty:_,ctx:c}),Ry.$set(mx);const kDe={};_&2&&(kDe.$$scope={dirty:_,ctx:c}),By.$set(kDe);const SDe={};_&2&&(SDe.$$scope={dirty:_,ctx:c}),Qy.$set(SDe);const cx={};_&2&&(cx.$$scope={dirty:_,ctx:c}),Uy.$set(cx);const RDe={};_&2&&(RDe.$$scope={dirty:_,ctx:c}),n9.$set(RDe);const PDe={};_&2&&(PDe.$$scope={dirty:_,ctx:c}),l9.$set(PDe);const fx={};_&2&&(fx.$$scope={dirty:_,ctx:c}),p9.$set(fx);const BDe={};_&2&&(BDe.$$scope={dirty:_,ctx:c}),b9.$set(BDe);const IDe={};_&2&&(IDe.$$scope={dirty:_,ctx:c}),L9.$set(IDe);const gx={};_&2&&(gx.$$scope={dirty:_,ctx:c}),x9.$set(gx);const NDe={};_&2&&(NDe.$$scope={dirty:_,ctx:c}),k9.$set(NDe);const qDe={};_&2&&(qDe.$$scope={dirty:_,ctx:c}),R9.$set(qDe);const hx={};_&2&&(hx.$$scope={dirty:_,ctx:c}),I9.$set(hx);const jDe={};_&2&&(jDe.$$scope={dirty:_,ctx:c}),q9.$set(jDe);const DDe={};_&2&&(DDe.$$scope={dirty:_,ctx:c}),D9.$set(DDe)},i(c){Omo||(E(m.$$.fragment,c),E(ln.$$.fragment,c),E(Lk.$$.fragment,c),E(yk.$$.fragment,c),E(sg.$$.fragment,c),E(xk.$$.fragment,c),E($k.$$.fragment,c),E(Rk.$$.fragment,c),E(Du.$$.fragment,c),E(Pk.$$.fragment,c),E(Bk.$$.fragment,c),E(Ik.$$.fragment,c),E(jk.$$.fragment,c),E(Lp.$$.fragment,c),E(Dk.$$.fragment,c),E(Gk.$$.fragment,c),E(Ok.$$.fragment,c),E(zk.$$.fragment,c),E(M_.$$.fragment,c),E(E_.$$.fragment,c),E(Qk.$$.fragment,c),E(Wk.$$.fragment,c),E(Uk.$$.fragment,c),E(Yk.$$.fragment,c),E(r1.$$.fragment,c),E(t1.$$.fragment,c),E(Zk.$$.fragment,c),E(Kk.$$.fragment,c),E(eS.$$.fragment,c),E(tS.$$.fragment,c),E(x1.$$.fragment,c),E($1.$$.fragment,c),E(aS.$$.fragment,c),E(nS.$$.fragment,c),E(sS.$$.fragment,c),E(iS.$$.fragment,c),E(R1.$$.fragment,c),E(dS.$$.fragment,c),E(sv.$$.fragment,c),E(mS.$$.fragment,c),E(cS.$$.fragment,c),E(gS.$$.fragment,c),E(iv.$$.fragment,c),E(hS.$$.fragment,c),E(sF.$$.fragment,c),E(uS.$$.fragment,c),E(pS.$$.fragment,c),E(bS.$$.fragment,c),E(iF.$$.fragment,c),E(vS.$$.fragment,c),E(KF.$$.fragment,c),E(FS.$$.fragment,c),E(TS.$$.fragment,c),E(ES.$$.fragment,c),E(oT.$$.fragment,c),E(CS.$$.fragment,c),E(nT.$$.fragment,c),E(AS.$$.fragment,c),E(LS.$$.fragment,c),E(xS.$$.fragment,c),E(lT.$$.fragment,c),E($S.$$.fragment,c),E(JT.$$.fragment,c),E(kS.$$.fragment,c),E(SS.$$.fragment,c),E(PS.$$.fragment,c),E(ZT.$$.fragment,c),E(BS.$$.fragment,c),E(TM.$$.fragment,c),E(IS.$$.fragment,c),E(NS.$$.fragment,c),E(jS.$$.fragment,c),E(EM.$$.fragment,c),E(DS.$$.fragment,c),E(yE.$$.fragment,c),E(GS.$$.fragment,c),E(OS.$$.fragment,c),E(XS.$$.fragment,c),E($E.$$.fragment,c),E(zS.$$.fragment,c),E(c4.$$.fragment,c),E(QS.$$.fragment,c),E(WS.$$.fragment,c),E(HS.$$.fragment,c),E(g4.$$.fragment,c),E(JS.$$.fragment,c),E(M4.$$.fragment,c),E(YS.$$.fragment,c),E(ZS.$$.fragment,c),E(eR.$$.fragment,c),E(C4.$$.fragment,c),E(oR.$$.fragment,c),E(hC.$$.fragment,c),E(rR.$$.fragment,c),E(tR.$$.fragment,c),E(nR.$$.fragment,c),E(pC.$$.fragment,c),E(sR.$$.fragment,c),E(g3.$$.fragment,c),E(lR.$$.fragment,c),E(iR.$$.fragment,c),E(mR.$$.fragment,c),E(u3.$$.fragment,c),E(cR.$$.fragment,c),E(b3.$$.fragment,c),E(fR.$$.fragment,c),E(gR.$$.fragment,c),E(uR.$$.fragment,c),E(F3.$$.fragment,c),E(pR.$$.fragment,c),E(w3.$$.fragment,c),E(_R.$$.fragment,c),E(bR.$$.fragment,c),E(FR.$$.fragment,c),E(L3.$$.fragment,c),E(TR.$$.fragment,c),E(z3.$$.fragment,c),E(MR.$$.fragment,c),E(ER.$$.fragment,c),E(wR.$$.fragment,c),E(W3.$$.fragment,c),E(AR.$$.fragment,c),E(J3.$$.fragment,c),E(LR.$$.fragment,c),E(yR.$$.fragment,c),E($R.$$.fragment,c),E(Z3.$$.fragment,c),E(kR.$$.fragment,c),E(o5.$$.fragment,c),E(SR.$$.fragment,c),E(RR.$$.fragment,c),E(BR.$$.fragment,c),E(t5.$$.fragment,c),E(IR.$$.fragment,c),E(s5.$$.fragment,c),E(NR.$$.fragment,c),E(qR.$$.fragment,c),E(DR.$$.fragment,c),E(i5.$$.fragment,c),E(GR.$$.fragment,c),E(v5.$$.fragment,c),E(OR.$$.fragment,c),E(VR.$$.fragment,c),E(zR.$$.fragment,c),E(T5.$$.fragment,c),E(QR.$$.fragment,c),E(y5.$$.fragment,c),E(WR.$$.fragment,c),E(UR.$$.fragment,c),E(JR.$$.fragment,c),E($5.$$.fragment,c),E(YR.$$.fragment,c),E(O5.$$.fragment,c),E(ZR.$$.fragment,c),E(KR.$$.fragment,c),E(oP.$$.fragment,c),E(X5.$$.fragment,c),E(rP.$$.fragment,c),E(H5.$$.fragment,c),E(tP.$$.fragment,c),E(aP.$$.fragment,c),E(sP.$$.fragment,c),E(Y5.$$.fragment,c),E(lP.$$.fragment,c),E(a0.$$.fragment,c),E(iP.$$.fragment,c),E(dP.$$.fragment,c),E(cP.$$.fragment,c),E(s0.$$.fragment,c),E(fP.$$.fragment,c),E(f0.$$.fragment,c),E(gP.$$.fragment,c),E(hP.$$.fragment,c),E(pP.$$.fragment,c),E(h0.$$.fragment,c),E(_P.$$.fragment,c),E(T0.$$.fragment,c),E(bP.$$.fragment,c),E(vP.$$.fragment,c),E(TP.$$.fragment,c),E(E0.$$.fragment,c),E(MP.$$.fragment,c),E(A0.$$.fragment,c),E(EP.$$.fragment,c),E(CP.$$.fragment,c),E(AP.$$.fragment,c),E(y0.$$.fragment,c),E(LP.$$.fragment,c),E(I0.$$.fragment,c),E(yP.$$.fragment,c),E(xP.$$.fragment,c),E(kP.$$.fragment,c),E(q0.$$.fragment,c),E(SP.$$.fragment,c),E(G0.$$.fragment,c),E(RP.$$.fragment,c),E(PP.$$.fragment,c),E(IP.$$.fragment,c),E(V0.$$.fragment,c),E(NP.$$.fragment,c),E(Q0.$$.fragment,c),E(qP.$$.fragment,c),E(jP.$$.fragment,c),E(GP.$$.fragment,c),E(U0.$$.fragment,c),E(OP.$$.fragment,c),E(Zw.$$.fragment,c),E(VP.$$.fragment,c),E(XP.$$.fragment,c),E(QP.$$.fragment,c),E(eA.$$.fragment,c),E(WP.$$.fragment,c),E(CA.$$.fragment,c),E(UP.$$.fragment,c),E(HP.$$.fragment,c),E(YP.$$.fragment,c),E(AA.$$.fragment,c),E(ZP.$$.fragment,c),E(GA.$$.fragment,c),E(KP.$$.fragment,c),E(eB.$$.fragment,c),E(rB.$$.fragment,c),E(VA.$$.fragment,c),E(tB.$$.fragment,c),E(KA.$$.fragment,c),E(aB.$$.fragment,c),E(nB.$$.fragment,c),E(lB.$$.fragment,c),E(o6.$$.fragment,c),E(iB.$$.fragment,c),E(n6.$$.fragment,c),E(dB.$$.fragment,c),E(mB.$$.fragment,c),E(fB.$$.fragment,c),E(l6.$$.fragment,c),E(gB.$$.fragment,c),E(x6.$$.fragment,c),E(hB.$$.fragment,c),E(uB.$$.fragment,c),E(_B.$$.fragment,c),E(k6.$$.fragment,c),E(bB.$$.fragment,c),E(O6.$$.fragment,c),E(vB.$$.fragment,c),E(FB.$$.fragment,c),E(MB.$$.fragment,c),E(X6.$$.fragment,c),E(EB.$$.fragment,c),E(v7.$$.fragment,c),E(CB.$$.fragment,c),E(wB.$$.fragment,c),E(LB.$$.fragment,c),E(T7.$$.fragment,c),E(yB.$$.fragment,c),E(j7.$$.fragment,c),E(xB.$$.fragment,c),E($B.$$.fragment,c),E(SB.$$.fragment,c),E(G7.$$.fragment,c),E(RB.$$.fragment,c),E(X7.$$.fragment,c),E(BB.$$.fragment,c),E(IB.$$.fragment,c),E(qB.$$.fragment,c),E(Q7.$$.fragment,c),E(jB.$$.fragment,c),E(U7.$$.fragment,c),E(DB.$$.fragment,c),E(GB.$$.fragment,c),E(VB.$$.fragment,c),E(J7.$$.fragment,c),E(XB.$$.fragment,c),E(Z7.$$.fragment,c),E(zB.$$.fragment,c),E(QB.$$.fragment,c),E(UB.$$.fragment,c),E(e8.$$.fragment,c),E(HB.$$.fragment,c),E(E8.$$.fragment,c),E(JB.$$.fragment,c),E(YB.$$.fragment,c),E(KB.$$.fragment,c),E(w8.$$.fragment,c),E(eI.$$.fragment,c),E(W8.$$.fragment,c),E(oI.$$.fragment,c),E(rI.$$.fragment,c),E(aI.$$.fragment,c),E(H8.$$.fragment,c),E(nI.$$.fragment,c),E(Y8.$$.fragment,c),E(sI.$$.fragment,c),E(lI.$$.fragment,c),E(dI.$$.fragment,c),E(K8.$$.fragment,c),E(mI.$$.fragment,c),E(rL.$$.fragment,c),E(fI.$$.fragment,c),E(gI.$$.fragment,c),E(uI.$$.fragment,c),E(aL.$$.fragment,c),E(pI.$$.fragment,c),E(SL.$$.fragment,c),E(_I.$$.fragment,c),E(bI.$$.fragment,c),E(FI.$$.fragment,c),E(PL.$$.fragment,c),E(TI.$$.fragment,c),E(zL.$$.fragment,c),E(MI.$$.fragment,c),E(EI.$$.fragment,c),E(wI.$$.fragment,c),E(WL.$$.fragment,c),E(AI.$$.fragment,c),E(ly.$$.fragment,c),E(LI.$$.fragment,c),E(yI.$$.fragment,c),E($I.$$.fragment,c),E(dy.$$.fragment,c),E(kI.$$.fragment,c),E(Fy.$$.fragment,c),E(SI.$$.fragment,c),E(RI.$$.fragment,c),E(BI.$$.fragment,c),E(My.$$.fragment,c),E(II.$$.fragment,c),E(Ry.$$.fragment,c),E(NI.$$.fragment,c),E(qI.$$.fragment,c),E(DI.$$.fragment,c),E(By.$$.fragment,c),E(GI.$$.fragment,c),E(Qy.$$.fragment,c),E(OI.$$.fragment,c),E(VI.$$.fragment,c),E(zI.$$.fragment,c),E(Uy.$$.fragment,c),E(QI.$$.fragment,c),E(n9.$$.fragment,c),E(WI.$$.fragment,c),E(UI.$$.fragment,c),E(JI.$$.fragment,c),E(l9.$$.fragment,c),E(YI.$$.fragment,c),E(p9.$$.fragment,c),E(ZI.$$.fragment,c),E(KI.$$.fragment,c),E(oN.$$.fragment,c),E(b9.$$.fragment,c),E(rN.$$.fragment,c),E(L9.$$.fragment,c),E(tN.$$.fragment,c),E(aN.$$.fragment,c),E(sN.$$.fragment,c),E(x9.$$.fragment,c),E(lN.$$.fragment,c),E(k9.$$.fragment,c),E(iN.$$.fragment,c),E(dN.$$.fragment,c),E(cN.$$.fragment,c),E(R9.$$.fragment,c),E(fN.$$.fragment,c),E(I9.$$.fragment,c),E(hN.$$.fragment,c),E(uN.$$.fragment,c),E(_N.$$.fragment,c),E(q9.$$.fragment,c),E(bN.$$.fragment,c),E(D9.$$.fragment,c),Omo=!0)},o(c){C(m.$$.fragment,c),C(ln.$$.fragment,c),C(Lk.$$.fragment,c),C(yk.$$.fragment,c),C(sg.$$.fragment,c),C(xk.$$.fragment,c),C($k.$$.fragment,c),C(Rk.$$.fragment,c),C(Du.$$.fragment,c),C(Pk.$$.fragment,c),C(Bk.$$.fragment,c),C(Ik.$$.fragment,c),C(jk.$$.fragment,c),C(Lp.$$.fragment,c),C(Dk.$$.fragment,c),C(Gk.$$.fragment,c),C(Ok.$$.fragment,c),C(zk.$$.fragment,c),C(M_.$$.fragment,c),C(E_.$$.fragment,c),C(Qk.$$.fragment,c),C(Wk.$$.fragment,c),C(Uk.$$.fragment,c),C(Yk.$$.fragment,c),C(r1.$$.fragment,c),C(t1.$$.fragment,c),C(Zk.$$.fragment,c),C(Kk.$$.fragment,c),C(eS.$$.fragment,c),C(tS.$$.fragment,c),C(x1.$$.fragment,c),C($1.$$.fragment,c),C(aS.$$.fragment,c),C(nS.$$.fragment,c),C(sS.$$.fragment,c),C(iS.$$.fragment,c),C(R1.$$.fragment,c),C(dS.$$.fragment,c),C(sv.$$.fragment,c),C(mS.$$.fragment,c),C(cS.$$.fragment,c),C(gS.$$.fragment,c),C(iv.$$.fragment,c),C(hS.$$.fragment,c),C(sF.$$.fragment,c),C(uS.$$.fragment,c),C(pS.$$.fragment,c),C(bS.$$.fragment,c),C(iF.$$.fragment,c),C(vS.$$.fragment,c),C(KF.$$.fragment,c),C(FS.$$.fragment,c),C(TS.$$.fragment,c),C(ES.$$.fragment,c),C(oT.$$.fragment,c),C(CS.$$.fragment,c),C(nT.$$.fragment,c),C(AS.$$.fragment,c),C(LS.$$.fragment,c),C(xS.$$.fragment,c),C(lT.$$.fragment,c),C($S.$$.fragment,c),C(JT.$$.fragment,c),C(kS.$$.fragment,c),C(SS.$$.fragment,c),C(PS.$$.fragment,c),C(ZT.$$.fragment,c),C(BS.$$.fragment,c),C(TM.$$.fragment,c),C(IS.$$.fragment,c),C(NS.$$.fragment,c),C(jS.$$.fragment,c),C(EM.$$.fragment,c),C(DS.$$.fragment,c),C(yE.$$.fragment,c),C(GS.$$.fragment,c),C(OS.$$.fragment,c),C(XS.$$.fragment,c),C($E.$$.fragment,c),C(zS.$$.fragment,c),C(c4.$$.fragment,c),C(QS.$$.fragment,c),C(WS.$$.fragment,c),C(HS.$$.fragment,c),C(g4.$$.fragment,c),C(JS.$$.fragment,c),C(M4.$$.fragment,c),C(YS.$$.fragment,c),C(ZS.$$.fragment,c),C(eR.$$.fragment,c),C(C4.$$.fragment,c),C(oR.$$.fragment,c),C(hC.$$.fragment,c),C(rR.$$.fragment,c),C(tR.$$.fragment,c),C(nR.$$.fragment,c),C(pC.$$.fragment,c),C(sR.$$.fragment,c),C(g3.$$.fragment,c),C(lR.$$.fragment,c),C(iR.$$.fragment,c),C(mR.$$.fragment,c),C(u3.$$.fragment,c),C(cR.$$.fragment,c),C(b3.$$.fragment,c),C(fR.$$.fragment,c),C(gR.$$.fragment,c),C(uR.$$.fragment,c),C(F3.$$.fragment,c),C(pR.$$.fragment,c),C(w3.$$.fragment,c),C(_R.$$.fragment,c),C(bR.$$.fragment,c),C(FR.$$.fragment,c),C(L3.$$.fragment,c),C(TR.$$.fragment,c),C(z3.$$.fragment,c),C(MR.$$.fragment,c),C(ER.$$.fragment,c),C(wR.$$.fragment,c),C(W3.$$.fragment,c),C(AR.$$.fragment,c),C(J3.$$.fragment,c),C(LR.$$.fragment,c),C(yR.$$.fragment,c),C($R.$$.fragment,c),C(Z3.$$.fragment,c),C(kR.$$.fragment,c),C(o5.$$.fragment,c),C(SR.$$.fragment,c),C(RR.$$.fragment,c),C(BR.$$.fragment,c),C(t5.$$.fragment,c),C(IR.$$.fragment,c),C(s5.$$.fragment,c),C(NR.$$.fragment,c),C(qR.$$.fragment,c),C(DR.$$.fragment,c),C(i5.$$.fragment,c),C(GR.$$.fragment,c),C(v5.$$.fragment,c),C(OR.$$.fragment,c),C(VR.$$.fragment,c),C(zR.$$.fragment,c),C(T5.$$.fragment,c),C(QR.$$.fragment,c),C(y5.$$.fragment,c),C(WR.$$.fragment,c),C(UR.$$.fragment,c),C(JR.$$.fragment,c),C($5.$$.fragment,c),C(YR.$$.fragment,c),C(O5.$$.fragment,c),C(ZR.$$.fragment,c),C(KR.$$.fragment,c),C(oP.$$.fragment,c),C(X5.$$.fragment,c),C(rP.$$.fragment,c),C(H5.$$.fragment,c),C(tP.$$.fragment,c),C(aP.$$.fragment,c),C(sP.$$.fragment,c),C(Y5.$$.fragment,c),C(lP.$$.fragment,c),C(a0.$$.fragment,c),C(iP.$$.fragment,c),C(dP.$$.fragment,c),C(cP.$$.fragment,c),C(s0.$$.fragment,c),C(fP.$$.fragment,c),C(f0.$$.fragment,c),C(gP.$$.fragment,c),C(hP.$$.fragment,c),C(pP.$$.fragment,c),C(h0.$$.fragment,c),C(_P.$$.fragment,c),C(T0.$$.fragment,c),C(bP.$$.fragment,c),C(vP.$$.fragment,c),C(TP.$$.fragment,c),C(E0.$$.fragment,c),C(MP.$$.fragment,c),C(A0.$$.fragment,c),C(EP.$$.fragment,c),C(CP.$$.fragment,c),C(AP.$$.fragment,c),C(y0.$$.fragment,c),C(LP.$$.fragment,c),C(I0.$$.fragment,c),C(yP.$$.fragment,c),C(xP.$$.fragment,c),C(kP.$$.fragment,c),C(q0.$$.fragment,c),C(SP.$$.fragment,c),C(G0.$$.fragment,c),C(RP.$$.fragment,c),C(PP.$$.fragment,c),C(IP.$$.fragment,c),C(V0.$$.fragment,c),C(NP.$$.fragment,c),C(Q0.$$.fragment,c),C(qP.$$.fragment,c),C(jP.$$.fragment,c),C(GP.$$.fragment,c),C(U0.$$.fragment,c),C(OP.$$.fragment,c),C(Zw.$$.fragment,c),C(VP.$$.fragment,c),C(XP.$$.fragment,c),C(QP.$$.fragment,c),C(eA.$$.fragment,c),C(WP.$$.fragment,c),C(CA.$$.fragment,c),C(UP.$$.fragment,c),C(HP.$$.fragment,c),C(YP.$$.fragment,c),C(AA.$$.fragment,c),C(ZP.$$.fragment,c),C(GA.$$.fragment,c),C(KP.$$.fragment,c),C(eB.$$.fragment,c),C(rB.$$.fragment,c),C(VA.$$.fragment,c),C(tB.$$.fragment,c),C(KA.$$.fragment,c),C(aB.$$.fragment,c),C(nB.$$.fragment,c),C(lB.$$.fragment,c),C(o6.$$.fragment,c),C(iB.$$.fragment,c),C(n6.$$.fragment,c),C(dB.$$.fragment,c),C(mB.$$.fragment,c),C(fB.$$.fragment,c),C(l6.$$.fragment,c),C(gB.$$.fragment,c),C(x6.$$.fragment,c),C(hB.$$.fragment,c),C(uB.$$.fragment,c),C(_B.$$.fragment,c),C(k6.$$.fragment,c),C(bB.$$.fragment,c),C(O6.$$.fragment,c),C(vB.$$.fragment,c),C(FB.$$.fragment,c),C(MB.$$.fragment,c),C(X6.$$.fragment,c),C(EB.$$.fragment,c),C(v7.$$.fragment,c),C(CB.$$.fragment,c),C(wB.$$.fragment,c),C(LB.$$.fragment,c),C(T7.$$.fragment,c),C(yB.$$.fragment,c),C(j7.$$.fragment,c),C(xB.$$.fragment,c),C($B.$$.fragment,c),C(SB.$$.fragment,c),C(G7.$$.fragment,c),C(RB.$$.fragment,c),C(X7.$$.fragment,c),C(BB.$$.fragment,c),C(IB.$$.fragment,c),C(qB.$$.fragment,c),C(Q7.$$.fragment,c),C(jB.$$.fragment,c),C(U7.$$.fragment,c),C(DB.$$.fragment,c),C(GB.$$.fragment,c),C(VB.$$.fragment,c),C(J7.$$.fragment,c),C(XB.$$.fragment,c),C(Z7.$$.fragment,c),C(zB.$$.fragment,c),C(QB.$$.fragment,c),C(UB.$$.fragment,c),C(e8.$$.fragment,c),C(HB.$$.fragment,c),C(E8.$$.fragment,c),C(JB.$$.fragment,c),C(YB.$$.fragment,c),C(KB.$$.fragment,c),C(w8.$$.fragment,c),C(eI.$$.fragment,c),C(W8.$$.fragment,c),C(oI.$$.fragment,c),C(rI.$$.fragment,c),C(aI.$$.fragment,c),C(H8.$$.fragment,c),C(nI.$$.fragment,c),C(Y8.$$.fragment,c),C(sI.$$.fragment,c),C(lI.$$.fragment,c),C(dI.$$.fragment,c),C(K8.$$.fragment,c),C(mI.$$.fragment,c),C(rL.$$.fragment,c),C(fI.$$.fragment,c),C(gI.$$.fragment,c),C(uI.$$.fragment,c),C(aL.$$.fragment,c),C(pI.$$.fragment,c),C(SL.$$.fragment,c),C(_I.$$.fragment,c),C(bI.$$.fragment,c),C(FI.$$.fragment,c),C(PL.$$.fragment,c),C(TI.$$.fragment,c),C(zL.$$.fragment,c),C(MI.$$.fragment,c),C(EI.$$.fragment,c),C(wI.$$.fragment,c),C(WL.$$.fragment,c),C(AI.$$.fragment,c),C(ly.$$.fragment,c),C(LI.$$.fragment,c),C(yI.$$.fragment,c),C($I.$$.fragment,c),C(dy.$$.fragment,c),C(kI.$$.fragment,c),C(Fy.$$.fragment,c),C(SI.$$.fragment,c),C(RI.$$.fragment,c),C(BI.$$.fragment,c),C(My.$$.fragment,c),C(II.$$.fragment,c),C(Ry.$$.fragment,c),C(NI.$$.fragment,c),C(qI.$$.fragment,c),C(DI.$$.fragment,c),C(By.$$.fragment,c),C(GI.$$.fragment,c),C(Qy.$$.fragment,c),C(OI.$$.fragment,c),C(VI.$$.fragment,c),C(zI.$$.fragment,c),C(Uy.$$.fragment,c),C(QI.$$.fragment,c),C(n9.$$.fragment,c),C(WI.$$.fragment,c),C(UI.$$.fragment,c),C(JI.$$.fragment,c),C(l9.$$.fragment,c),C(YI.$$.fragment,c),C(p9.$$.fragment,c),C(ZI.$$.fragment,c),C(KI.$$.fragment,c),C(oN.$$.fragment,c),C(b9.$$.fragment,c),C(rN.$$.fragment,c),C(L9.$$.fragment,c),C(tN.$$.fragment,c),C(aN.$$.fragment,c),C(sN.$$.fragment,c),C(x9.$$.fragment,c),C(lN.$$.fragment,c),C(k9.$$.fragment,c),C(iN.$$.fragment,c),C(dN.$$.fragment,c),C(cN.$$.fragment,c),C(R9.$$.fragment,c),C(fN.$$.fragment,c),C(I9.$$.fragment,c),C(hN.$$.fragment,c),C(uN.$$.fragment,c),C(_N.$$.fragment,c),C(q9.$$.fragment,c),C(bN.$$.fragment,c),C(D9.$$.fragment,c),Omo=!1},d(c){t(g),c&&t(v),c&&t(u),w(m),c&&t(og),c&&t(wt),c&&t(Qe),c&&t(Ze),c&&t(tg),w(ln,c),c&&t(Ke),c&&t(ye),c&&t(Po),c&&t(dn),c&&t(Eio),c&&t(Pd),w(Lk),c&&t(Cio),c&&t(Ts),c&&t(wio),w(yk,c),c&&t(Aio),c&&t(Kq),c&&t(Lio),w(sg,c),c&&t(yio),c&&t(Bd),w(xk),c&&t(xio),c&&t(Bo),w($k),w(Rk),w(Du),w(Pk),c&&t($io),c&&t(Nd),w(Bk),c&&t(kio),c&&t(Io),w(Ik),w(jk),w(Lp),w(Dk),c&&t(Sio),c&&t(qd),w(Gk),c&&t(Rio),c&&t(No),w(Ok),w(zk),w(M_),w(E_),w(Qk),c&&t(Pio),c&&t(jd),w(Wk),c&&t(Bio),c&&t(qo),w(Uk),w(Yk),w(r1),w(t1),w(Zk),c&&t(Iio),c&&t(Dd),w(Kk),c&&t(Nio),c&&t(jo),w(eS),w(tS),w(x1),w($1),w(aS),c&&t(qio),c&&t(Od),w(nS),c&&t(jio),c&&t(Do),w(sS),w(iS),w(R1),w(dS),w(sv),c&&t(Dio),c&&t(zd),w(mS),c&&t(Gio),c&&t(Go),w(cS),w(gS),w(iv),w(hS),w(sF),c&&t(Oio),c&&t(Ud),w(uS),c&&t(Vio),c&&t(Oo),w(pS),w(bS),w(iF),w(vS),w(KF),c&&t(Xio),c&&t(Yd),w(FS),c&&t(zio),c&&t(Vo),w(TS),w(ES),w(oT),w(CS),w(nT),c&&t(Qio),c&&t(em),w(AS),c&&t(Wio),c&&t(Xo),w(LS),w(xS),w(lT),w($S),w(JT),c&&t(Uio),c&&t(tm),w(kS),c&&t(Hio),c&&t(zo),w(SS),w(PS),w(ZT),w(BS),w(TM),c&&t(Jio),c&&t(sm),w(IS),c&&t(Yio),c&&t(Qo),w(NS),w(jS),w(EM),w(DS),w(yE),c&&t(Zio),c&&t(dm),w(GS),c&&t(Kio),c&&t(Wo),w(OS),w(XS),w($E),w(zS),w(c4),c&&t(edo),c&&t(fm),w(QS),c&&t(odo),c&&t(Uo),w(WS),w(HS),w(g4),w(JS),w(M4),c&&t(rdo),c&&t(um),w(YS),c&&t(tdo),c&&t(Ho),w(ZS),w(eR),w(C4),w(oR),w(hC),c&&t(ado),c&&t(bm),w(rR),c&&t(ndo),c&&t(Jo),w(tR),w(nR),w(pC),w(sR),w(g3),c&&t(sdo),c&&t(Tm),w(lR),c&&t(ldo),c&&t(Yo),w(iR),w(mR),w(u3),w(cR),w(b3),c&&t(ido),c&&t(Cm),w(fR),c&&t(ddo),c&&t(Zo),w(gR),w(uR),w(F3),w(pR),w(w3),c&&t(mdo),c&&t(ym),w(_R),c&&t(cdo),c&&t(Ko),w(bR),w(FR),w(L3),w(TR),w(z3),c&&t(fdo),c&&t(km),w(MR),c&&t(gdo),c&&t(er),w(ER),w(wR),w(W3),w(AR),w(J3),c&&t(hdo),c&&t(Pm),w(LR),c&&t(udo),c&&t(or),w(yR),w($R),w(Z3),w(kR),w(o5),c&&t(pdo),c&&t(Nm),w(SR),c&&t(_do),c&&t(rr),w(RR),w(BR),w(t5),w(IR),w(s5),c&&t(bdo),c&&t(Dm),w(NR),c&&t(vdo),c&&t(tr),w(qR),w(DR),w(i5),w(GR),w(v5),c&&t(Fdo),c&&t(Vm),w(OR),c&&t(Tdo),c&&t(ar),w(VR),w(zR),w(T5),w(QR),w(y5),c&&t(Mdo),c&&t(Qm),w(WR),c&&t(Edo),c&&t(nr),w(UR),w(JR),w($5),w(YR),w(O5),c&&t(Cdo),c&&t(Hm),w(ZR),c&&t(wdo),c&&t(sr),w(KR),w(oP),w(X5),w(rP),w(H5),c&&t(Ado),c&&t(Km),w(tP),c&&t(Ldo),c&&t(lr),w(aP),w(sP),w(Y5),w(lP),w(a0),c&&t(ydo),c&&t(rc),w(iP),c&&t(xdo),c&&t(ir),w(dP),w(cP),w(s0),w(fP),w(f0),c&&t($do),c&&t(nc),w(gP),c&&t(kdo),c&&t(dr),w(hP),w(pP),w(h0),w(_P),w(T0),c&&t(Sdo),c&&t(ic),w(bP),c&&t(Rdo),c&&t(mr),w(vP),w(TP),w(E0),w(MP),w(A0),c&&t(Pdo),c&&t(cc),w(EP),c&&t(Bdo),c&&t(cr),w(CP),w(AP),w(y0),w(LP),w(I0),c&&t(Ido),c&&t(hc),w(yP),c&&t(Ndo),c&&t(gr),w(xP),w(kP),w(q0),w(SP),w(G0),c&&t(qdo),c&&t(_c),w(RP),c&&t(jdo),c&&t(hr),w(PP),w(IP),w(V0),w(NP),w(Q0),c&&t(Ddo),c&&t(Fc),w(qP),c&&t(Gdo),c&&t(ur),w(jP),w(GP),w(U0),w(OP),w(Zw),c&&t(Odo),c&&t(Ec),w(VP),c&&t(Vdo),c&&t(pr),w(XP),w(QP),w(eA),w(WP),w(CA),c&&t(Xdo),c&&t(Ac),w(UP),c&&t(zdo),c&&t(_r),w(HP),w(YP),w(AA),w(ZP),w(GA),c&&t(Qdo),c&&t(xc),w(KP),c&&t(Wdo),c&&t(br),w(eB),w(rB),w(VA),w(tB),w(KA),c&&t(Udo),c&&t(Sc),w(aB),c&&t(Hdo),c&&t(vr),w(nB),w(lB),w(o6),w(iB),w(n6),c&&t(Jdo),c&&t(Ic),w(dB),c&&t(Ydo),c&&t(Fr),w(mB),w(fB),w(l6),w(gB),w(x6),c&&t(Zdo),c&&t(jc),w(hB),c&&t(Kdo),c&&t(Tr),w(uB),w(_B),w(k6),w(bB),w(O6),c&&t(emo),c&&t(Oc),w(vB),c&&t(omo),c&&t(Mr),w(FB),w(MB),w(X6),w(EB),w(v7),c&&t(rmo),c&&t(zc),w(CB),c&&t(tmo),c&&t(Er),w(wB),w(LB),w(T7),w(yB),w(j7),c&&t(amo),c&&t(Uc),w(xB),c&&t(nmo),c&&t(Cr),w($B),w(SB),w(G7),w(RB),w(X7),c&&t(smo),c&&t(Yc),w(BB),c&&t(lmo),c&&t(wr),w(IB),w(qB),w(Q7),w(jB),w(U7),c&&t(imo),c&&t(ef),w(DB),c&&t(dmo),c&&t(Ar),w(GB),w(VB),w(J7),w(XB),w(Z7),c&&t(mmo),c&&t(tf),w(zB),c&&t(cmo),c&&t(Lr),w(QB),w(UB),w(e8),w(HB),w(E8),c&&t(fmo),c&&t(sf),w(JB),c&&t(gmo),c&&t(yr),w(YB),w(KB),w(w8),w(eI),w(W8),c&&t(hmo),c&&t(mf),w(oI),c&&t(umo),c&&t(xr),w(rI),w(aI),w(H8),w(nI),w(Y8),c&&t(pmo),c&&t(gf),w(sI),c&&t(_mo),c&&t($r),w(lI),w(dI),w(K8),w(mI),w(rL),c&&t(bmo),c&&t(pf),w(fI),c&&t(vmo),c&&t(kr),w(gI),w(uI),w(aL),w(pI),w(SL),c&&t(Fmo),c&&t(vf),w(_I),c&&t(Tmo),c&&t(Sr),w(bI),w(FI),w(PL),w(TI),w(zL),c&&t(Mmo),c&&t(Mf),w(MI),c&&t(Emo),c&&t(Rr),w(EI),w(wI),w(WL),w(AI),w(ly),c&&t(Cmo),c&&t(wf),w(LI),c&&t(wmo),c&&t(Pr),w(yI),w($I),w(dy),w(kI),w(Fy),c&&t(Amo),c&&t(yf),w(SI),c&&t(Lmo),c&&t(Br),w(RI),w(BI),w(My),w(II),w(Ry),c&&t(ymo),c&&t(kf),w(NI),c&&t(xmo),c&&t(Ir),w(qI),w(DI),w(By),w(GI),w(Qy),c&&t($mo),c&&t(Pf),w(OI),c&&t(kmo),c&&t(Nr),w(VI),w(zI),w(Uy),w(QI),w(n9),c&&t(Smo),c&&t(Nf),w(WI),c&&t(Rmo),c&&t(qr),w(UI),w(JI),w(l9),w(YI),w(p9),c&&t(Pmo),c&&t(Df),w(ZI),c&&t(Bmo),c&&t(jr),w(KI),w(oN),w(b9),w(rN),w(L9),c&&t(Imo),c&&t(Vf),w(tN),c&&t(Nmo),c&&t(Dr),w(aN),w(sN),w(x9),w(lN),w(k9),c&&t(qmo),c&&t(Qf),w(iN),c&&t(jmo),c&&t(Gr),w(dN),w(cN),w(R9),w(fN),w(I9),c&&t(Dmo),c&&t(Hf),w(hN),c&&t(Gmo),c&&t(Or),w(uN),w(_N),w(q9),w(bN),w(D9)}}}const gPa={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoImageProcessor",title:"AutoImageProcessor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForDepthEstimation",title:"AutoModelForDepthEstimation"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.AutoModelForZeroShotObjectDetection",title:"AutoModelForZeroShotObjectDetection"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForDocumentQuestionAnswering",title:"TFAutoModelForDocumentQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function hPa($){return Zka(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class TPa extends Uka{constructor(g){super();Hka(this,g,hPa,fPa,Jka,{})}}export{TPa as default,gPa as metadata};
