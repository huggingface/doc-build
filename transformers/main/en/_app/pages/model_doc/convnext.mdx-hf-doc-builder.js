import{S as Ar,i as Lr,s as Or,e as a,k as m,w as b,t as n,M as Sr,c as r,d as t,m as p,a as i,x as C,h as s,b as d,N as Rr,G as e,g as h,y as $,q as T,o as N,B as E,v as Ur,L as un}from"../../chunks/vendor-hf-doc-builder.js";import{T as Lo}from"../../chunks/Tip-hf-doc-builder.js";import{D as ue}from"../../chunks/Docstring-hf-doc-builder.js";import{C as _n}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Wt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as gn}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Wr(z){let c,y,u,g,x;return g=new _n({props:{code:`from transformers import ConvNextConfig, ConvNextModel

# Initializing a ConvNext convnext-tiny-224 style configuration
configuration = ConvNextConfig()

# Initializing a model (with random weights) from the convnext-tiny-224 style configuration
model = ConvNextModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextConfig, ConvNextModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ConvNext convnext-tiny-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ConvNextConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model (with random weights) from the convnext-tiny-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){c=a("p"),y=n("Example:"),u=m(),b(g.$$.fragment)},l(l){c=r(l,"P",{});var f=i(c);y=s(f,"Example:"),f.forEach(t),u=p(l),C(g.$$.fragment,l)},m(l,f){h(l,c,f),e(c,y),h(l,u,f),$(g,l,f),x=!0},p:un,i(l){x||(T(g.$$.fragment,l),x=!0)},o(l){N(g.$$.fragment,l),x=!1},d(l){l&&t(c),l&&t(u),E(g,l)}}}function Kr(z){let c,y,u,g,x;return{c(){c=a("p"),y=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),g=n("Module"),x=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=r(l,"P",{});var f=i(c);y=s(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r(f,"CODE",{});var F=i(u);g=s(F,"Module"),F.forEach(t),x=s(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(l,f){h(l,c,f),e(c,y),e(c,u),e(u,g),e(c,x)},d(l){l&&t(c)}}}function Xr(z){let c,y,u,g,x;return g=new _n({props:{code:`from transformers import ConvNextFeatureExtractor, ConvNextModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = ConvNextModel.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ConvNextModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextModel.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">768</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]`}}),{c(){c=a("p"),y=n("Example:"),u=m(),b(g.$$.fragment)},l(l){c=r(l,"P",{});var f=i(c);y=s(f,"Example:"),f.forEach(t),u=p(l),C(g.$$.fragment,l)},m(l,f){h(l,c,f),e(c,y),h(l,u,f),$(g,l,f),x=!0},p:un,i(l){x||(T(g.$$.fragment,l),x=!0)},o(l){N(g.$$.fragment,l),x=!1},d(l){l&&t(c),l&&t(u),E(g,l)}}}function Vr(z){let c,y,u,g,x;return{c(){c=a("p"),y=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),g=n("Module"),x=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=r(l,"P",{});var f=i(c);y=s(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r(f,"CODE",{});var F=i(u);g=s(F,"Module"),F.forEach(t),x=s(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(l,f){h(l,c,f),e(c,y),e(c,u),e(u,g),e(c,x)},d(l){l&&t(c)}}}function Hr(z){let c,y,u,g,x;return g=new _n({props:{code:`from transformers import ConvNextFeatureExtractor, ConvNextForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = ConvNextForImageClassification.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ConvNextForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextForImageClassification.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){c=a("p"),y=n("Example:"),u=m(),b(g.$$.fragment)},l(l){c=r(l,"P",{});var f=i(c);y=s(f,"Example:"),f.forEach(t),u=p(l),C(g.$$.fragment,l)},m(l,f){h(l,c,f),e(c,y),h(l,u,f),$(g,l,f),x=!0},p:un,i(l){x||(T(g.$$.fragment,l),x=!0)},o(l){N(g.$$.fragment,l),x=!1},d(l){l&&t(c),l&&t(u),E(g,l)}}}function Br(z){let c,y,u,g,x,l,f,F,De,be,D,Z,oe,w,Ae,V,Le,Ce,O,Oe,ne,se,Se,$e,W,Re,Te,K,_e,Ue,fe,P,A,Ne,X,ve,We,Q,ee,Ze,q,te,ae,he,Ke,re,Ee,j,H,ie,le,Xe,B,L,Ve,M,He,Be;return{c(){c=a("p"),y=n("TensorFlow models and layers in "),u=a("code"),g=n("transformers"),x=n(" accept two formats as input:"),l=m(),f=a("ul"),F=a("li"),De=n("having all inputs as keyword arguments (like PyTorch models), or"),be=m(),D=a("li"),Z=n("having all inputs as a list, tuple or dict in the first positional argument."),oe=m(),w=a("p"),Ae=n(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),V=a("code"),Le=n("model.fit()"),Ce=n(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),O=a("code"),Oe=n("model.fit()"),ne=n(` supports! If, however, you want to use the second
format outside of Keras methods like `),se=a("code"),Se=n("fit()"),$e=n(" and "),W=a("code"),Re=n("predict()"),Te=n(`, such as when creating your own layers or models with
the Keras `),K=a("code"),_e=n("Functional"),Ue=n(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),fe=m(),P=a("ul"),A=a("li"),Ne=n("a single Tensor with "),X=a("code"),ve=n("pixel_values"),We=n(" only and nothing else: "),Q=a("code"),ee=n("model(pixel_values)"),Ze=m(),q=a("li"),te=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),ae=a("code"),he=n("model([pixel_values, attention_mask])"),Ke=n(" or "),re=a("code"),Ee=n("model([pixel_values, attention_mask, token_type_ids])"),j=m(),H=a("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),le=a("code"),Xe=n('model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),B=m(),L=a("p"),Ve=n(`Note that when creating models and layers with
`),M=a("a"),He=n("subclassing"),Be=n(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(v){c=r(v,"P",{});var I=i(c);y=s(I,"TensorFlow models and layers in "),u=r(I,"CODE",{});var tt=i(u);g=s(tt,"transformers"),tt.forEach(t),x=s(I," accept two formats as input:"),I.forEach(t),l=p(v),f=r(v,"UL",{});var G=i(f);F=r(G,"LI",{});var ot=i(F);De=s(ot,"having all inputs as keyword arguments (like PyTorch models), or"),ot.forEach(t),be=p(G),D=r(G,"LI",{});var nt=i(D);Z=s(nt,"having all inputs as a list, tuple or dict in the first positional argument."),nt.forEach(t),G.forEach(t),oe=p(v),w=r(v,"P",{});var k=i(w);Ae=s(k,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),V=r(k,"CODE",{});var ce=i(V);Le=s(ce,"model.fit()"),ce.forEach(t),Ce=s(k,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),O=r(k,"CODE",{});var ge=i(O);Oe=s(ge,"model.fit()"),ge.forEach(t),ne=s(k,` supports! If, however, you want to use the second
format outside of Keras methods like `),se=r(k,"CODE",{});var Ge=i(se);Se=s(Ge,"fit()"),Ge.forEach(t),$e=s(k," and "),W=r(k,"CODE",{});var xe=i(W);Re=s(xe,"predict()"),xe.forEach(t),Te=s(k,`, such as when creating your own layers or models with
the Keras `),K=r(k,"CODE",{});var st=i(K);_e=s(st,"Functional"),st.forEach(t),Ue=s(k,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),k.forEach(t),fe=p(v),P=r(v,"UL",{});var S=i(P);A=r(S,"LI",{});var de=i(A);Ne=s(de,"a single Tensor with "),X=r(de,"CODE",{});var Qe=i(X);ve=s(Qe,"pixel_values"),Qe.forEach(t),We=s(de," only and nothing else: "),Q=r(de,"CODE",{});var R=i(Q);ee=s(R,"model(pixel_values)"),R.forEach(t),de.forEach(t),Ze=p(S),q=r(S,"LI",{});var U=i(q);te=s(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),ae=r(U,"CODE",{});var at=i(ae);he=s(at,"model([pixel_values, attention_mask])"),at.forEach(t),Ke=s(U," or "),re=r(U,"CODE",{});var me=i(re);Ee=s(me,"model([pixel_values, attention_mask, token_type_ids])"),me.forEach(t),U.forEach(t),j=p(S),H=r(S,"LI",{});var Ye=i(H);ie=s(Ye,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),le=r(Ye,"CODE",{});var Ie=i(le);Xe=s(Ie,'model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),Ie.forEach(t),Ye.forEach(t),S.forEach(t),B=p(v),L=r(v,"P",{});var ye=i(L);Ve=s(ye,`Note that when creating models and layers with
`),M=r(ye,"A",{href:!0,rel:!0});var rt=i(M);He=s(rt,"subclassing"),rt.forEach(t),Be=s(ye,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),ye.forEach(t),this.h()},h(){d(M,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),d(M,"rel","nofollow")},m(v,I){h(v,c,I),e(c,y),e(c,u),e(u,g),e(c,x),h(v,l,I),h(v,f,I),e(f,F),e(F,De),e(f,be),e(f,D),e(D,Z),h(v,oe,I),h(v,w,I),e(w,Ae),e(w,V),e(V,Le),e(w,Ce),e(w,O),e(O,Oe),e(w,ne),e(w,se),e(se,Se),e(w,$e),e(w,W),e(W,Re),e(w,Te),e(w,K),e(K,_e),e(w,Ue),h(v,fe,I),h(v,P,I),e(P,A),e(A,Ne),e(A,X),e(X,ve),e(A,We),e(A,Q),e(Q,ee),e(P,Ze),e(P,q),e(q,te),e(q,ae),e(ae,he),e(q,Ke),e(q,re),e(re,Ee),e(P,j),e(P,H),e(H,ie),e(H,le),e(le,Xe),h(v,B,I),h(v,L,I),e(L,Ve),e(L,M),e(M,He),e(L,Be)},d(v){v&&t(c),v&&t(l),v&&t(f),v&&t(oe),v&&t(w),v&&t(fe),v&&t(P),v&&t(B),v&&t(L)}}}function Gr(z){let c,y,u,g,x;return{c(){c=a("p"),y=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),g=n("Module"),x=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=r(l,"P",{});var f=i(c);y=s(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r(f,"CODE",{});var F=i(u);g=s(F,"Module"),F.forEach(t),x=s(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(l,f){h(l,c,f),e(c,y),e(c,u),e(u,g),e(c,x)},d(l){l&&t(c)}}}function Yr(z){let c,y,u,g,x;return g=new _n({props:{code:`from transformers import ConvNextFeatureExtractor, TFConvNextModel
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = TFConvNextModel.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs)
last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, TFConvNextModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFConvNextModel.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){c=a("p"),y=n("Examples:"),u=m(),b(g.$$.fragment)},l(l){c=r(l,"P",{});var f=i(c);y=s(f,"Examples:"),f.forEach(t),u=p(l),C(g.$$.fragment,l)},m(l,f){h(l,c,f),e(c,y),h(l,u,f),$(g,l,f),x=!0},p:un,i(l){x||(T(g.$$.fragment,l),x=!0)},o(l){N(g.$$.fragment,l),x=!1},d(l){l&&t(c),l&&t(u),E(g,l)}}}function Jr(z){let c,y,u,g,x,l,f,F,De,be,D,Z,oe,w,Ae,V,Le,Ce,O,Oe,ne,se,Se,$e,W,Re,Te,K,_e,Ue,fe,P,A,Ne,X,ve,We,Q,ee,Ze,q,te,ae,he,Ke,re,Ee,j,H,ie,le,Xe,B,L,Ve,M,He,Be;return{c(){c=a("p"),y=n("TensorFlow models and layers in "),u=a("code"),g=n("transformers"),x=n(" accept two formats as input:"),l=m(),f=a("ul"),F=a("li"),De=n("having all inputs as keyword arguments (like PyTorch models), or"),be=m(),D=a("li"),Z=n("having all inputs as a list, tuple or dict in the first positional argument."),oe=m(),w=a("p"),Ae=n(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),V=a("code"),Le=n("model.fit()"),Ce=n(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),O=a("code"),Oe=n("model.fit()"),ne=n(` supports! If, however, you want to use the second
format outside of Keras methods like `),se=a("code"),Se=n("fit()"),$e=n(" and "),W=a("code"),Re=n("predict()"),Te=n(`, such as when creating your own layers or models with
the Keras `),K=a("code"),_e=n("Functional"),Ue=n(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),fe=m(),P=a("ul"),A=a("li"),Ne=n("a single Tensor with "),X=a("code"),ve=n("pixel_values"),We=n(" only and nothing else: "),Q=a("code"),ee=n("model(pixel_values)"),Ze=m(),q=a("li"),te=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),ae=a("code"),he=n("model([pixel_values, attention_mask])"),Ke=n(" or "),re=a("code"),Ee=n("model([pixel_values, attention_mask, token_type_ids])"),j=m(),H=a("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),le=a("code"),Xe=n('model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),B=m(),L=a("p"),Ve=n(`Note that when creating models and layers with
`),M=a("a"),He=n("subclassing"),Be=n(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(v){c=r(v,"P",{});var I=i(c);y=s(I,"TensorFlow models and layers in "),u=r(I,"CODE",{});var tt=i(u);g=s(tt,"transformers"),tt.forEach(t),x=s(I," accept two formats as input:"),I.forEach(t),l=p(v),f=r(v,"UL",{});var G=i(f);F=r(G,"LI",{});var ot=i(F);De=s(ot,"having all inputs as keyword arguments (like PyTorch models), or"),ot.forEach(t),be=p(G),D=r(G,"LI",{});var nt=i(D);Z=s(nt,"having all inputs as a list, tuple or dict in the first positional argument."),nt.forEach(t),G.forEach(t),oe=p(v),w=r(v,"P",{});var k=i(w);Ae=s(k,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),V=r(k,"CODE",{});var ce=i(V);Le=s(ce,"model.fit()"),ce.forEach(t),Ce=s(k,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),O=r(k,"CODE",{});var ge=i(O);Oe=s(ge,"model.fit()"),ge.forEach(t),ne=s(k,` supports! If, however, you want to use the second
format outside of Keras methods like `),se=r(k,"CODE",{});var Ge=i(se);Se=s(Ge,"fit()"),Ge.forEach(t),$e=s(k," and "),W=r(k,"CODE",{});var xe=i(W);Re=s(xe,"predict()"),xe.forEach(t),Te=s(k,`, such as when creating your own layers or models with
the Keras `),K=r(k,"CODE",{});var st=i(K);_e=s(st,"Functional"),st.forEach(t),Ue=s(k,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),k.forEach(t),fe=p(v),P=r(v,"UL",{});var S=i(P);A=r(S,"LI",{});var de=i(A);Ne=s(de,"a single Tensor with "),X=r(de,"CODE",{});var Qe=i(X);ve=s(Qe,"pixel_values"),Qe.forEach(t),We=s(de," only and nothing else: "),Q=r(de,"CODE",{});var R=i(Q);ee=s(R,"model(pixel_values)"),R.forEach(t),de.forEach(t),Ze=p(S),q=r(S,"LI",{});var U=i(q);te=s(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),ae=r(U,"CODE",{});var at=i(ae);he=s(at,"model([pixel_values, attention_mask])"),at.forEach(t),Ke=s(U," or "),re=r(U,"CODE",{});var me=i(re);Ee=s(me,"model([pixel_values, attention_mask, token_type_ids])"),me.forEach(t),U.forEach(t),j=p(S),H=r(S,"LI",{});var Ye=i(H);ie=s(Ye,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),le=r(Ye,"CODE",{});var Ie=i(le);Xe=s(Ie,'model({"pixel_values": pixel_values, "token_type_ids": token_type_ids})'),Ie.forEach(t),Ye.forEach(t),S.forEach(t),B=p(v),L=r(v,"P",{});var ye=i(L);Ve=s(ye,`Note that when creating models and layers with
`),M=r(ye,"A",{href:!0,rel:!0});var rt=i(M);He=s(rt,"subclassing"),rt.forEach(t),Be=s(ye,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),ye.forEach(t),this.h()},h(){d(M,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),d(M,"rel","nofollow")},m(v,I){h(v,c,I),e(c,y),e(c,u),e(u,g),e(c,x),h(v,l,I),h(v,f,I),e(f,F),e(F,De),e(f,be),e(f,D),e(D,Z),h(v,oe,I),h(v,w,I),e(w,Ae),e(w,V),e(V,Le),e(w,Ce),e(w,O),e(O,Oe),e(w,ne),e(w,se),e(se,Se),e(w,$e),e(w,W),e(W,Re),e(w,Te),e(w,K),e(K,_e),e(w,Ue),h(v,fe,I),h(v,P,I),e(P,A),e(A,Ne),e(A,X),e(X,ve),e(A,We),e(A,Q),e(Q,ee),e(P,Ze),e(P,q),e(q,te),e(q,ae),e(ae,he),e(q,Ke),e(q,re),e(re,Ee),e(P,j),e(P,H),e(H,ie),e(H,le),e(le,Xe),h(v,B,I),h(v,L,I),e(L,Ve),e(L,M),e(M,He),e(L,Be)},d(v){v&&t(c),v&&t(l),v&&t(f),v&&t(oe),v&&t(w),v&&t(fe),v&&t(P),v&&t(B),v&&t(L)}}}function Zr(z){let c,y,u,g,x;return{c(){c=a("p"),y=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),g=n("Module"),x=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=r(l,"P",{});var f=i(c);y=s(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=r(f,"CODE",{});var F=i(u);g=s(F,"Module"),F.forEach(t),x=s(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(l,f){h(l,c,f),e(c,y),e(c,u),e(u,g),e(c,x)},d(l){l&&t(c)}}}function Qr(z){let c,y,u,g,x;return g=new _n({props:{code:`from transformers import ConvNextFeatureExtractor, TFConvNextForImageClassification
import tensorflow as tf
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = TFConvNextForImageClassification.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs)
logits = outputs.logits
# model predicts one of the 1000 ImageNet classes
predicted_class_idx = tf.math.argmax(logits, axis=-1)[0]
print("Predicted class:", model.config.id2label[int(predicted_class_idx)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, TFConvNextForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFConvNextForImageClassification.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_idx = tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Predicted class:&quot;</span>, model.config.id2label[<span class="hljs-built_in">int</span>(predicted_class_idx)])`}}),{c(){c=a("p"),y=n("Examples:"),u=m(),b(g.$$.fragment)},l(l){c=r(l,"P",{});var f=i(c);y=s(f,"Examples:"),f.forEach(t),u=p(l),C(g.$$.fragment,l)},m(l,f){h(l,c,f),e(c,y),h(l,u,f),$(g,l,f),x=!0},p:un,i(l){x||(T(g.$$.fragment,l),x=!0)},o(l){N(g.$$.fragment,l),x=!1},d(l){l&&t(c),l&&t(u),E(g,l)}}}function ei(z){let c,y,u,g,x,l,f,F,De,be,D,Z,oe,w,Ae,V,Le,Ce,O,Oe,ne,se,Se,$e,W,Re,Te,K,_e,Ue,fe,P,A,Ne,X,ve,We,Q,ee,Ze,q,te,ae,he,Ke,re,Ee,j,H,ie,le,Xe,B,L,Ve,M,He,Be,v,I,tt,G,ot,nt,k,ce,ge,Ge,xe,st,S,de,Qe,R,U,at,me,Ye,Ie,ye,rt,Kt,Vn,Hn,Bn,it,Gn,Co,Yn,Jn,$o,Zn,Qn,es,_t,vn,lt,vt,Oo,Xt,ts,So,os,xn,Y,Vt,ns,Ro,ss,as,xt,Ht,rs,Uo,is,ls,yt,Bt,cs,Wo,ds,ms,wt,Gt,ps,Ko,fs,hs,bt,Yt,gs,Xo,us,yn,ct,Ct,Vo,Jt,_s,Ho,vs,wn,Je,Zt,xs,Qt,ys,eo,ws,bs,Cs,ke,to,$s,dt,Ts,To,Ns,Es,Bo,Is,ks,Fs,$t,Ps,Tt,bn,mt,Nt,Go,oo,zs,Yo,js,Cn,we,no,Ms,Jo,qs,Ds,so,As,ao,Ls,Os,Ss,Fe,ro,Rs,pt,Us,No,Ws,Ks,Zo,Xs,Vs,Hs,Et,Bs,It,$n,ft,kt,Qo,io,Gs,en,Ys,Tn,pe,lo,Js,co,Zs,Eo,Qs,ea,ta,mo,oa,po,na,sa,aa,Ft,ra,Pe,fo,ia,ht,la,Io,ca,da,tn,ma,pa,fa,Pt,ha,zt,Nn,gt,jt,on,ho,ga,nn,ua,En,J,go,_a,sn,va,xa,uo,ya,ko,wa,ba,Ca,_o,$a,vo,Ta,Na,Ea,Mt,Ia,ze,xo,ka,ut,Fa,Fo,Pa,za,an,ja,Ma,qa,qt,Da,Dt,In;return l=new Wt({}),w=new Wt({}),xe=new Wt({}),U=new ue({props:{name:"class transformers.ConvNextConfig",anchor:"transformers.ConvNextConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"patch_size",val:" = 4"},{name:"num_stages",val:" = 4"},{name:"hidden_sizes",val:" = None"},{name:"depths",val:" = None"},{name:"hidden_act",val:" = 'gelu'"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"is_encoder_decoder",val:" = False"},{name:"layer_scale_init_value",val:" = 1e-06"},{name:"drop_path_rate",val:" = 0.0"},{name:"image_size",val:" = 224"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConvNextConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.ConvNextConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
Patch size to use in the patch embedding layer.`,name:"patch_size"},{anchor:"transformers.ConvNextConfig.num_stages",description:`<strong>num_stages</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
The number of stages in the model.`,name:"num_stages"},{anchor:"transformers.ConvNextConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [96, 192, 384, 768]) &#x2014;
Dimensionality (hidden size) at each stage.`,name:"hidden_sizes"},{anchor:"transformers.ConvNextConfig.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [3, 3, 9, 3]) &#x2014;
Depth (number of blocks) for each stage.`,name:"depths"},{anchor:"transformers.ConvNextConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in each block. If string, <code>&quot;gelu&quot;</code>, <code>&quot;relu&quot;</code>,
<code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.ConvNextConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.ConvNextConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.ConvNextConfig.layer_scale_init_value",description:`<strong>layer_scale_init_value</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-6) &#x2014;
The initial value for the layer scale.`,name:"layer_scale_init_value"},{anchor:"transformers.ConvNextConfig.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The drop rate for stochastic depth.`,name:"drop_path_rate"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/convnext/configuration_convnext.py#L35"}}),_t=new gn({props:{anchor:"transformers.ConvNextConfig.example",$$slots:{default:[Wr]},$$scope:{ctx:z}}}),Xt=new Wt({}),Vt=new ue({props:{name:"class transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor",anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor",parameters:[{name:"do_resize",val:": bool = True"},{name:"size",val:": typing.Dict[str, int] = None"},{name:"crop_pct",val:": float = None"},{name:"resample",val:": Resampling = <Resampling.BILINEAR: 2>"},{name:"do_rescale",val:": bool = True"},{name:"rescale_factor",val:": typing.Union[int, float] = 0.00392156862745098"},{name:"do_normalize",val:": bool = True"},{name:"image_mean",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"image_std",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Controls whether to resize the image&#x2019;s (height, width) dimensions to the specified <code>size</code>. Can be overriden
by <code>do_resize</code> in the <code>preprocess</code> method.`,name:"do_resize"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.size",description:`<strong>size</strong> (<code>Dict[str, int]</code> <em>optional</em>, defaults to <code>{&quot;shortest_edge&quot; -- 384}</code>):
Resolution of the output image after <code>resize</code> is applied. If <code>size[&quot;shortest_edge&quot;]</code> &gt;= 384, the image is
resized to <code>(size[&quot;shortest_edge&quot;], size[&quot;shortest_edge&quot;])</code>. Otherwise, the smaller edge of the image will
be matched to <code>int(size[&quot;shortest_edge&quot;]/crop_pct)</code>, after which the image is cropped to
<code>(size[&quot;shortest_edge&quot;], size[&quot;shortest_edge&quot;])</code>. Only has an effect if <code>do_resize</code> is set to <code>True</code>. Can
be overriden by <code>size</code> in the <code>preprocess</code> method.`,name:"size"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.crop_pct",description:`<strong>crop_pct</strong> (<code>float</code> <em>optional</em>, defaults to 244 / 256) &#x2014;
Percentage of the image to crop. Only has an effect if <code>do_resize</code> is <code>True</code> and size &lt; 384. Can be
overriden by <code>crop_pct</code> in the <code>preprocess</code> method.`,name:"crop_pct"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.resample",description:`<strong>resample</strong> (<code>PILImageResampling</code>, <em>optional</em>, defaults to <code>PILImageResampling.BILINEAR</code>) &#x2014;
Resampling filter to use if resizing the image. Can be overriden by <code>resample</code> in the <code>preprocess</code> method.`,name:"resample"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to rescale the image by the specified scale <code>rescale_factor</code>. Can be overriden by <code>do_rescale</code> in
the <code>preprocess</code> method.`,name:"do_rescale"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.rescale_factor",description:`<strong>rescale_factor</strong> (<code>int</code> or <code>float</code>, <em>optional</em>, defaults to <code>1/255</code>) &#x2014;
Scale factor to use if rescaling the image. Can be overriden by <code>rescale_factor</code> in the <code>preprocess</code>
method.`,name:"rescale_factor"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to normalize the image. Can be overridden by the <code>do_normalize</code> parameter in the <code>preprocess</code>
method.`,name:"do_normalize"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.image_mean",description:`<strong>image_mean</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>IMAGENET_STANDARD_MEAN</code>) &#x2014;
Mean to use if normalizing the image. This is a float or list of floats the length of the number of
channels in the image. Can be overridden by the <code>image_mean</code> parameter in the <code>preprocess</code> method.`,name:"image_mean"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.image_std",description:`<strong>image_std</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>IMAGENET_STANDARD_STD</code>) &#x2014;
Standard deviation to use if normalizing the image. This is a float or list of floats the length of the
number of channels in the image. Can be overridden by the <code>image_std</code> parameter in the <code>preprocess</code> method.`,name:"image_std"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/convnext/image_processing_convnext.py#L53"}}),Ht=new ue({props:{name:"normalize",anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.normalize",parameters:[{name:"image",val:": ndarray"},{name:"mean",val:": typing.Union[float, typing.List[float]]"},{name:"std",val:": typing.Union[float, typing.List[float]]"},{name:"data_format",val:": typing.Union[str, transformers.image_utils.ChannelDimension, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.normalize.image",description:`<strong>image</strong> (<code>np.ndarray</code>) &#x2014;
Image to normalize.`,name:"image"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.normalize.image_mean",description:`<strong>image_mean</strong> (<code>float</code> or <code>List[float]</code>) &#x2014;
Image mean.`,name:"image_mean"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.normalize.image_std",description:`<strong>image_std</strong> (<code>float</code> or <code>List[float]</code>) &#x2014;
Image standard deviation.`,name:"image_std"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.normalize.data_format",description:`<strong>data_format</strong> (<code>str</code> or <code>ChannelDimension</code>, <em>optional</em>) &#x2014;
The channel dimension format of the image. If not provided, it will be the same as the input image.`,name:"data_format"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/convnext/image_processing_convnext.py#L184"}}),Bt=new ue({props:{name:"preprocess",anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.preprocess",parameters:[{name:"images",val:": typing.Union[ForwardRef('PIL.Image.Image'), numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[ForwardRef('PIL.Image.Image')], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"do_resize",val:": bool = None"},{name:"size",val:": typing.Dict[str, int] = None"},{name:"crop_pct",val:": float = None"},{name:"resample",val:": Resampling = None"},{name:"do_rescale",val:": bool = None"},{name:"rescale_factor",val:": float = None"},{name:"do_normalize",val:": bool = None"},{name:"image_mean",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"image_std",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"data_format",val:": ChannelDimension = <ChannelDimension.FIRST: 'channels_first'>"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.preprocess.images",description:`<strong>images</strong> (<code>ImageInput</code>) &#x2014;
Image to preprocess.`,name:"images"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.preprocess.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_resize</code>) &#x2014;
Whether to resize the image.`,name:"do_resize"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.preprocess.size",description:`<strong>size</strong> (<code>Dict[str, int]</code>, <em>optional</em>, defaults to <code>self.size</code>) &#x2014;
Size of the output image after <code>resize</code> has been applied. If <code>size[&quot;shortest_edge&quot;]</code> &gt;= 384, the image
is resized to <code>(size[&quot;shortest_edge&quot;], size[&quot;shortest_edge&quot;])</code>. Otherwise, the smaller edge of the
image will be matched to <code>int(size[&quot;shortest_edge&quot;]/ crop_pct)</code>, after which the image is cropped to
<code>(size[&quot;shortest_edge&quot;], size[&quot;shortest_edge&quot;])</code>. Only has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"size"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.preprocess.crop_pct",description:`<strong>crop_pct</strong> (<code>float</code>, <em>optional</em>, defaults to <code>self.crop_pct</code>) &#x2014;
Percentage of the image to crop if size &lt; 384.`,name:"crop_pct"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.preprocess.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>self.resample</code>) &#x2014;
Resampling filter to use if resizing the image. This can be one of <code>PILImageResampling</code>, filters. Only
has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.preprocess.do_rescale",description:`<strong>do_rescale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_rescale</code>) &#x2014;
Whether to rescale the image values between [0 - 1].`,name:"do_rescale"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.preprocess.rescale_factor",description:`<strong>rescale_factor</strong> (<code>float</code>, <em>optional</em>, defaults to <code>self.rescale_factor</code>) &#x2014;
Rescale factor to rescale the image by if <code>do_rescale</code> is set to <code>True</code>.`,name:"rescale_factor"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.preprocess.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>self.do_normalize</code>) &#x2014;
Whether to normalize the image.`,name:"do_normalize"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.preprocess.image_mean",description:`<strong>image_mean</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>self.image_mean</code>) &#x2014;
Image mean.`,name:"image_mean"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.preprocess.image_std",description:`<strong>image_std</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>self.image_std</code>) &#x2014;
Image standard deviation.`,name:"image_std"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.preprocess.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <code>TensorType</code>, <em>optional</em>) &#x2014;
The type of tensors to return. Can be one of:<ul>
<li>Unset: Return a list of <code>np.ndarray</code>.</li>
<li><code>TensorType.TENSORFLOW</code> or <code>&apos;tf&apos;</code>: Return a batch of type <code>tf.Tensor</code>.</li>
<li><code>TensorType.PYTORCH</code> or <code>&apos;pt&apos;</code>: Return a batch of type <code>torch.Tensor</code>.</li>
<li><code>TensorType.NUMPY</code> or <code>&apos;np&apos;</code>: Return a batch of type <code>np.ndarray</code>.</li>
<li><code>TensorType.JAX</code> or <code>&apos;jax&apos;</code>: Return a batch of type <code>jax.numpy.ndarray</code>.</li>
</ul>`,name:"return_tensors"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.preprocess.data_format",description:`<strong>data_format</strong> (<code>ChannelDimension</code> or <code>str</code>, <em>optional</em>, defaults to <code>ChannelDimension.FIRST</code>) &#x2014;
The channel dimension format for the output image. Can be one of:<ul>
<li><code>ChannelDimension.FIRST</code>: image in (num_channels, height, width) format.</li>
<li><code>ChannelDimension.LAST</code>: image in (height, width, num_channels) format.</li>
</ul>`,name:"data_format"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/convnext/image_processing_convnext.py#L207"}}),Gt=new ue({props:{name:"rescale",anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.rescale",parameters:[{name:"image",val:": ndarray"},{name:"scale",val:": typing.Union[int, float]"},{name:"data_format",val:": typing.Union[str, transformers.image_utils.ChannelDimension, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.rescale.image",description:`<strong>image</strong> (<code>np.ndarray</code>) &#x2014;
Image to rescale.`,name:"image"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.rescale.scale",description:`<strong>scale</strong> (<code>int</code> or <code>float</code>) &#x2014;
Scale to apply to the image.`,name:"scale"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.rescale.data_format",description:`<strong>data_format</strong> (<code>str</code> or <code>ChannelDimension</code>, <em>optional</em>) &#x2014;
The channel dimension format of the image. If not provided, it will be the same as the input image.`,name:"data_format"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/convnext/image_processing_convnext.py#L164"}}),Yt=new ue({props:{name:"resize",anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.resize",parameters:[{name:"image",val:": ndarray"},{name:"size",val:": typing.Dict[str, int]"},{name:"crop_pct",val:": float"},{name:"resample",val:": Resampling = <Resampling.BICUBIC: 3>"},{name:"data_format",val:": typing.Union[str, transformers.image_utils.ChannelDimension, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.resize.image",description:`<strong>image</strong> (<code>np.ndarray</code>) &#x2014;
Image to resize.`,name:"image"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.resize.size",description:`<strong>size</strong> (<code>Dict[str, int]</code>) &#x2014;
Dictionary of the form <code>{&quot;shortest_edge&quot;: int}</code>, specifying the size of the output image. If
<code>size[&quot;shortest_edge&quot;]</code> &gt;= 384 image is resized to <code>(size[&quot;shortest_edge&quot;], size[&quot;shortest_edge&quot;])</code>.
Otherwise, the smaller edge of the image will be matched to <code>int(size[&quot;shortest_edge&quot;] / crop_pct)</code>,
after which the image is cropped to <code>(size[&quot;shortest_edge&quot;], size[&quot;shortest_edge&quot;])</code>.`,name:"size"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.resize.crop_pct",description:`<strong>crop_pct</strong> (<code>float</code>) &#x2014;
Percentage of the image to crop. Only has an effect if size &lt; 384.`,name:"crop_pct"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.resize.resample",description:`<strong>resample</strong> (<code>PILImageResampling</code>, <em>optional</em>, defaults to <code>PILImageResampling.BICUBIC</code>) &#x2014;
Resampling filter to use when resizing the image.`,name:"resample"},{anchor:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor.resize.data_format",description:`<strong>data_format</strong> (<code>str</code> or <code>ChannelDimension</code>, <em>optional</em>) &#x2014;
The channel dimension format of the image. If not provided, it will be the same as the input image.`,name:"data_format"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/convnext/image_processing_convnext.py#L119"}}),Jt=new Wt({}),Zt=new ue({props:{name:"class transformers.ConvNextModel",anchor:"transformers.ConvNextModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ConvNextModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/convnext/modeling_convnext.py#L326"}}),to=new ue({props:{name:"forward",anchor:"transformers.ConvNextModel.forward",parameters:[{name:"pixel_values",val:": FloatTensor = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.ConvNextModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/convnext/modeling_convnext.py#L340",returnDescription:`
<p>A <code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state after a pooling operation on the spatial dimensions.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),$t=new Lo({props:{$$slots:{default:[Kr]},$$scope:{ctx:z}}}),Tt=new gn({props:{anchor:"transformers.ConvNextModel.forward.example",$$slots:{default:[Xr]},$$scope:{ctx:z}}}),oo=new Wt({}),no=new ue({props:{name:"class transformers.ConvNextForImageClassification",anchor:"transformers.ConvNextForImageClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ConvNextForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/convnext/modeling_convnext.py#L393"}}),ro=new ue({props:{name:"forward",anchor:"transformers.ConvNextForImageClassification.forward",parameters:[{name:"pixel_values",val:": FloatTensor = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.ConvNextForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ConvNextForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/convnext/modeling_convnext.py#L408",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Et=new Lo({props:{$$slots:{default:[Vr]},$$scope:{ctx:z}}}),It=new gn({props:{anchor:"transformers.ConvNextForImageClassification.forward.example",$$slots:{default:[Hr]},$$scope:{ctx:z}}}),io=new Wt({}),lo=new ue({props:{name:"class transformers.TFConvNextModel",anchor:"transformers.TFConvNextModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFConvNextModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/convnext/modeling_tf_convnext.py#L452"}}),Ft=new Lo({props:{$$slots:{default:[Br]},$$scope:{ctx:z}}}),fo=new ue({props:{name:"call",anchor:"transformers.TFConvNextModel.call",parameters:[{name:"pixel_values",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TFConvNextModel.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/convnext#transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor">ConvNextFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.models.layoutlmv2.image_processing_layoutlmv2.LayoutLMv2ImageProcessor.__call__">ConvNextFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.TFConvNextModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFConvNextModel.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/convnext/modeling_tf_convnext.py#L457",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) further processed by a
Linear layer and a Tanh activation function. The Linear layer weights are trained from the next sentence
prediction (classification) objective during pretraining.</p>
<p>This output is usually <em>not</em> a good summary of the semantic content of the input, you\u2019re often better with
averaging or pooling the sequence of hidden-states for the whole input sequence.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Pt=new Lo({props:{$$slots:{default:[Gr]},$$scope:{ctx:z}}}),zt=new gn({props:{anchor:"transformers.TFConvNextModel.call.example",$$slots:{default:[Yr]},$$scope:{ctx:z}}}),ho=new Wt({}),go=new ue({props:{name:"class transformers.TFConvNextForImageClassification",anchor:"transformers.TFConvNextForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFConvNextForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/convnext/modeling_tf_convnext.py#L527"}}),Mt=new Lo({props:{$$slots:{default:[Jr]},$$scope:{ctx:z}}}),xo=new ue({props:{name:"call",anchor:"transformers.TFConvNextForImageClassification.call",parameters:[{name:"pixel_values",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"training",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"transformers.TFConvNextForImageClassification.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/convnext#transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor">ConvNextFeatureExtractor</a>. See
<a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.models.layoutlmv2.image_processing_layoutlmv2.LayoutLMv2ImageProcessor.__call__">ConvNextFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.TFConvNextForImageClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFConvNextForImageClassification.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFConvNextForImageClassification.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> or <code>np.ndarray</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/convnext/modeling_tf_convnext.py#L542",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, )</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),qt=new Lo({props:{$$slots:{default:[Zr]},$$scope:{ctx:z}}}),Dt=new gn({props:{anchor:"transformers.TFConvNextForImageClassification.call.example",$$slots:{default:[Qr]},$$scope:{ctx:z}}}),{c(){c=a("meta"),y=m(),u=a("h1"),g=a("a"),x=a("span"),b(l.$$.fragment),f=m(),F=a("span"),De=n("ConvNeXT"),be=m(),D=a("h2"),Z=a("a"),oe=a("span"),b(w.$$.fragment),Ae=m(),V=a("span"),Le=n("Overview"),Ce=m(),O=a("p"),Oe=n("The ConvNeXT model was proposed in "),ne=a("a"),se=n("A ConvNet for the 2020s"),Se=n(` by Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, Saining Xie.
ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them.`),$e=m(),W=a("p"),Re=n("The abstract from the paper is the following:"),Te=m(),K=a("p"),_e=a("em"),Ue=n(`The \u201CRoaring 20s\u201D of visual recognition began with the introduction of Vision Transformers (ViTs), which quickly superseded ConvNets as the state-of-the-art image classification model.
A vanilla ViT, on the other hand, faces difficulties when applied to general computer vision tasks such as object detection and semantic segmentation. It is the hierarchical Transformers
(e.g., Swin Transformers) that reintroduced several ConvNet priors, making Transformers practically viable as a generic vision backbone and demonstrating remarkable performance on a wide
variety of vision tasks. However, the effectiveness of such hybrid approaches is still largely credited to the intrinsic superiority of Transformers, rather than the inherent inductive
biases of convolutions. In this work, we reexamine the design spaces and test the limits of what a pure ConvNet can achieve. We gradually \u201Cmodernize\u201D a standard ResNet toward the design
of a vision Transformer, and discover several key components that contribute to the performance difference along the way. The outcome of this exploration is a family of pure ConvNet models
dubbed ConvNeXt. Constructed entirely from standard ConvNet modules, ConvNeXts compete favorably with Transformers in terms of accuracy and scalability, achieving 87.8% ImageNet top-1 accuracy
and outperforming Swin Transformers on COCO detection and ADE20K segmentation, while maintaining the simplicity and efficiency of standard ConvNets.`),fe=m(),P=a("p"),A=n("Tips:"),Ne=m(),X=a("ul"),ve=a("li"),We=n("See the code examples below each model regarding usage."),Q=m(),ee=a("img"),q=m(),te=a("small"),ae=n("ConvNeXT architecture. Taken from the "),he=a("a"),Ke=n("original paper"),re=n("."),Ee=m(),j=a("p"),H=n("This model was contributed by "),ie=a("a"),le=n("nielsr"),Xe=n(". TensorFlow version of the model was contributed by "),B=a("a"),L=n("ariG23498"),Ve=n(`,
`),M=a("a"),He=n("gante"),Be=n(", and "),v=a("a"),I=n("sayakpaul"),tt=n(" (equal contribution). The original code can be found "),G=a("a"),ot=n("here"),nt=n("."),k=m(),ce=a("h2"),ge=a("a"),Ge=a("span"),b(xe.$$.fragment),st=m(),S=a("span"),de=n("ConvNextConfig"),Qe=m(),R=a("div"),b(U.$$.fragment),at=m(),me=a("p"),Ye=n("This is the configuration class to store the configuration of a "),Ie=a("a"),ye=n("ConvNextModel"),rt=n(`. It is used to instantiate an
ConvNeXT model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the ConvNeXT
`),Kt=a("a"),Vn=n("facebook/convnext-tiny-224"),Hn=n(" architecture."),Bn=m(),it=a("p"),Gn=n("Configuration objects inherit from "),Co=a("a"),Yn=n("PretrainedConfig"),Jn=n(` and can be used to control the model outputs. Read the
documentation from `),$o=a("a"),Zn=n("PretrainedConfig"),Qn=n(" for more information."),es=m(),b(_t.$$.fragment),vn=m(),lt=a("h2"),vt=a("a"),Oo=a("span"),b(Xt.$$.fragment),ts=m(),So=a("span"),os=n("ConvNextFeatureExtractor"),xn=m(),Y=a("div"),b(Vt.$$.fragment),ns=m(),Ro=a("p"),ss=n("Constructs a ConvNeXT image processor."),as=m(),xt=a("div"),b(Ht.$$.fragment),rs=m(),Uo=a("p"),is=n("Normalize an image. image = (image - image_mean) / image_std."),ls=m(),yt=a("div"),b(Bt.$$.fragment),cs=m(),Wo=a("p"),ds=n("Preprocess an image or batch of images."),ms=m(),wt=a("div"),b(Gt.$$.fragment),ps=m(),Ko=a("p"),fs=n("Rescale an image by a scale factor. image = image * scale."),hs=m(),bt=a("div"),b(Yt.$$.fragment),gs=m(),Xo=a("p"),us=n("Resize an image."),yn=m(),ct=a("h2"),Ct=a("a"),Vo=a("span"),b(Jt.$$.fragment),_s=m(),Ho=a("span"),vs=n("ConvNextModel"),wn=m(),Je=a("div"),b(Zt.$$.fragment),xs=m(),Qt=a("p"),ys=n(`The bare ConvNext model outputting raw features without any specific head on top.
This model is a PyTorch `),eo=a("a"),ws=n("torch.nn.Module"),bs=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Cs=m(),ke=a("div"),b(to.$$.fragment),$s=m(),dt=a("p"),Ts=n("The "),To=a("a"),Ns=n("ConvNextModel"),Es=n(" forward method, overrides the "),Bo=a("code"),Is=n("__call__"),ks=n(" special method."),Fs=m(),b($t.$$.fragment),Ps=m(),b(Tt.$$.fragment),bn=m(),mt=a("h2"),Nt=a("a"),Go=a("span"),b(oo.$$.fragment),zs=m(),Yo=a("span"),js=n("ConvNextForImageClassification"),Cn=m(),we=a("div"),b(no.$$.fragment),Ms=m(),Jo=a("p"),qs=n(`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Ds=m(),so=a("p"),As=n("This model is a PyTorch "),ao=a("a"),Ls=n("torch.nn.Module"),Os=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Ss=m(),Fe=a("div"),b(ro.$$.fragment),Rs=m(),pt=a("p"),Us=n("The "),No=a("a"),Ws=n("ConvNextForImageClassification"),Ks=n(" forward method, overrides the "),Zo=a("code"),Xs=n("__call__"),Vs=n(" special method."),Hs=m(),b(Et.$$.fragment),Bs=m(),b(It.$$.fragment),$n=m(),ft=a("h2"),kt=a("a"),Qo=a("span"),b(io.$$.fragment),Gs=m(),en=a("span"),Ys=n("TFConvNextModel"),Tn=m(),pe=a("div"),b(lo.$$.fragment),Js=m(),co=a("p"),Zs=n(`The bare ConvNext model outputting raw features without any specific head on top.
This model inherits from `),Eo=a("a"),Qs=n("TFPreTrainedModel"),ea=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ta=m(),mo=a("p"),oa=n("This model is also a "),po=a("a"),na=n("tf.keras.Model"),sa=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),aa=m(),b(Ft.$$.fragment),ra=m(),Pe=a("div"),b(fo.$$.fragment),ia=m(),ht=a("p"),la=n("The "),Io=a("a"),ca=n("TFConvNextModel"),da=n(" forward method, overrides the "),tn=a("code"),ma=n("__call__"),pa=n(" special method."),fa=m(),b(Pt.$$.fragment),ha=m(),b(zt.$$.fragment),Nn=m(),gt=a("h2"),jt=a("a"),on=a("span"),b(ho.$$.fragment),ga=m(),nn=a("span"),ua=n("TFConvNextForImageClassification"),En=m(),J=a("div"),b(go.$$.fragment),_a=m(),sn=a("p"),va=n(`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),xa=m(),uo=a("p"),ya=n("This model inherits from "),ko=a("a"),wa=n("TFPreTrainedModel"),ba=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ca=m(),_o=a("p"),$a=n("This model is also a "),vo=a("a"),Ta=n("tf.keras.Model"),Na=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ea=m(),b(Mt.$$.fragment),Ia=m(),ze=a("div"),b(xo.$$.fragment),ka=m(),ut=a("p"),Fa=n("The "),Fo=a("a"),Pa=n("TFConvNextForImageClassification"),za=n(" forward method, overrides the "),an=a("code"),ja=n("__call__"),Ma=n(" special method."),qa=m(),b(qt.$$.fragment),Da=m(),b(Dt.$$.fragment),this.h()},l(o){const _=Sr('[data-svelte="svelte-1phssyn"]',document.head);c=r(_,"META",{name:!0,content:!0}),_.forEach(t),y=p(o),u=r(o,"H1",{class:!0});var yo=i(u);g=r(yo,"A",{id:!0,class:!0,href:!0});var rn=i(g);x=r(rn,"SPAN",{});var ln=i(x);C(l.$$.fragment,ln),ln.forEach(t),rn.forEach(t),f=p(yo),F=r(yo,"SPAN",{});var cn=i(F);De=s(cn,"ConvNeXT"),cn.forEach(t),yo.forEach(t),be=p(o),D=r(o,"H2",{class:!0});var wo=i(D);Z=r(wo,"A",{id:!0,class:!0,href:!0});var dn=i(Z);oe=r(dn,"SPAN",{});var mn=i(oe);C(w.$$.fragment,mn),mn.forEach(t),dn.forEach(t),Ae=p(wo),V=r(wo,"SPAN",{});var pn=i(V);Le=s(pn,"Overview"),pn.forEach(t),wo.forEach(t),Ce=p(o),O=r(o,"P",{});var bo=i(O);Oe=s(bo,"The ConvNeXT model was proposed in "),ne=r(bo,"A",{href:!0,rel:!0});var fn=i(ne);se=s(fn,"A ConvNet for the 2020s"),fn.forEach(t),Se=s(bo,` by Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, Saining Xie.
ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them.`),bo.forEach(t),$e=p(o),W=r(o,"P",{});var hn=i(W);Re=s(hn,"The abstract from the paper is the following:"),hn.forEach(t),Te=p(o),K=r(o,"P",{});var Aa=i(K);_e=r(Aa,"EM",{});var La=i(_e);Ue=s(La,`The \u201CRoaring 20s\u201D of visual recognition began with the introduction of Vision Transformers (ViTs), which quickly superseded ConvNets as the state-of-the-art image classification model.
A vanilla ViT, on the other hand, faces difficulties when applied to general computer vision tasks such as object detection and semantic segmentation. It is the hierarchical Transformers
(e.g., Swin Transformers) that reintroduced several ConvNet priors, making Transformers practically viable as a generic vision backbone and demonstrating remarkable performance on a wide
variety of vision tasks. However, the effectiveness of such hybrid approaches is still largely credited to the intrinsic superiority of Transformers, rather than the inherent inductive
biases of convolutions. In this work, we reexamine the design spaces and test the limits of what a pure ConvNet can achieve. We gradually \u201Cmodernize\u201D a standard ResNet toward the design
of a vision Transformer, and discover several key components that contribute to the performance difference along the way. The outcome of this exploration is a family of pure ConvNet models
dubbed ConvNeXt. Constructed entirely from standard ConvNet modules, ConvNeXts compete favorably with Transformers in terms of accuracy and scalability, achieving 87.8% ImageNet top-1 accuracy
and outperforming Swin Transformers on COCO detection and ADE20K segmentation, while maintaining the simplicity and efficiency of standard ConvNets.`),La.forEach(t),Aa.forEach(t),fe=p(o),P=r(o,"P",{});var Oa=i(P);A=s(Oa,"Tips:"),Oa.forEach(t),Ne=p(o),X=r(o,"UL",{});var Sa=i(X);ve=r(Sa,"LI",{});var Ra=i(ve);We=s(Ra,"See the code examples below each model regarding usage."),Ra.forEach(t),Sa.forEach(t),Q=p(o),ee=r(o,"IMG",{src:!0,alt:!0,width:!0}),q=p(o),te=r(o,"SMALL",{});var kn=i(te);ae=s(kn,"ConvNeXT architecture. Taken from the "),he=r(kn,"A",{href:!0});var Ua=i(he);Ke=s(Ua,"original paper"),Ua.forEach(t),re=s(kn,"."),kn.forEach(t),Ee=p(o),j=r(o,"P",{});var je=i(j);H=s(je,"This model was contributed by "),ie=r(je,"A",{href:!0,rel:!0});var Wa=i(ie);le=s(Wa,"nielsr"),Wa.forEach(t),Xe=s(je,". TensorFlow version of the model was contributed by "),B=r(je,"A",{href:!0,rel:!0});var Ka=i(B);L=s(Ka,"ariG23498"),Ka.forEach(t),Ve=s(je,`,
`),M=r(je,"A",{href:!0,rel:!0});var Xa=i(M);He=s(Xa,"gante"),Xa.forEach(t),Be=s(je,", and "),v=r(je,"A",{href:!0,rel:!0});var Va=i(v);I=s(Va,"sayakpaul"),Va.forEach(t),tt=s(je," (equal contribution). The original code can be found "),G=r(je,"A",{href:!0,rel:!0});var Ha=i(G);ot=s(Ha,"here"),Ha.forEach(t),nt=s(je,"."),je.forEach(t),k=p(o),ce=r(o,"H2",{class:!0});var Fn=i(ce);ge=r(Fn,"A",{id:!0,class:!0,href:!0});var Ba=i(ge);Ge=r(Ba,"SPAN",{});var Ga=i(Ge);C(xe.$$.fragment,Ga),Ga.forEach(t),Ba.forEach(t),st=p(Fn),S=r(Fn,"SPAN",{});var Ya=i(S);de=s(Ya,"ConvNextConfig"),Ya.forEach(t),Fn.forEach(t),Qe=p(o),R=r(o,"DIV",{class:!0});var At=i(R);C(U.$$.fragment,At),at=p(At),me=r(At,"P",{});var Po=i(me);Ye=s(Po,"This is the configuration class to store the configuration of a "),Ie=r(Po,"A",{href:!0});var Ja=i(Ie);ye=s(Ja,"ConvNextModel"),Ja.forEach(t),rt=s(Po,`. It is used to instantiate an
ConvNeXT model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the ConvNeXT
`),Kt=r(Po,"A",{href:!0,rel:!0});var Za=i(Kt);Vn=s(Za,"facebook/convnext-tiny-224"),Za.forEach(t),Hn=s(Po," architecture."),Po.forEach(t),Bn=p(At),it=r(At,"P",{});var zo=i(it);Gn=s(zo,"Configuration objects inherit from "),Co=r(zo,"A",{href:!0});var Qa=i(Co);Yn=s(Qa,"PretrainedConfig"),Qa.forEach(t),Jn=s(zo,` and can be used to control the model outputs. Read the
documentation from `),$o=r(zo,"A",{href:!0});var er=i($o);Zn=s(er,"PretrainedConfig"),er.forEach(t),Qn=s(zo," for more information."),zo.forEach(t),es=p(At),C(_t.$$.fragment,At),At.forEach(t),vn=p(o),lt=r(o,"H2",{class:!0});var Pn=i(lt);vt=r(Pn,"A",{id:!0,class:!0,href:!0});var tr=i(vt);Oo=r(tr,"SPAN",{});var or=i(Oo);C(Xt.$$.fragment,or),or.forEach(t),tr.forEach(t),ts=p(Pn),So=r(Pn,"SPAN",{});var nr=i(So);os=s(nr,"ConvNextFeatureExtractor"),nr.forEach(t),Pn.forEach(t),xn=p(o),Y=r(o,"DIV",{class:!0});var Me=i(Y);C(Vt.$$.fragment,Me),ns=p(Me),Ro=r(Me,"P",{});var sr=i(Ro);ss=s(sr,"Constructs a ConvNeXT image processor."),sr.forEach(t),as=p(Me),xt=r(Me,"DIV",{class:!0});var zn=i(xt);C(Ht.$$.fragment,zn),rs=p(zn),Uo=r(zn,"P",{});var ar=i(Uo);is=s(ar,"Normalize an image. image = (image - image_mean) / image_std."),ar.forEach(t),zn.forEach(t),ls=p(Me),yt=r(Me,"DIV",{class:!0});var jn=i(yt);C(Bt.$$.fragment,jn),cs=p(jn),Wo=r(jn,"P",{});var rr=i(Wo);ds=s(rr,"Preprocess an image or batch of images."),rr.forEach(t),jn.forEach(t),ms=p(Me),wt=r(Me,"DIV",{class:!0});var Mn=i(wt);C(Gt.$$.fragment,Mn),ps=p(Mn),Ko=r(Mn,"P",{});var ir=i(Ko);fs=s(ir,"Rescale an image by a scale factor. image = image * scale."),ir.forEach(t),Mn.forEach(t),hs=p(Me),bt=r(Me,"DIV",{class:!0});var qn=i(bt);C(Yt.$$.fragment,qn),gs=p(qn),Xo=r(qn,"P",{});var lr=i(Xo);us=s(lr,"Resize an image."),lr.forEach(t),qn.forEach(t),Me.forEach(t),yn=p(o),ct=r(o,"H2",{class:!0});var Dn=i(ct);Ct=r(Dn,"A",{id:!0,class:!0,href:!0});var cr=i(Ct);Vo=r(cr,"SPAN",{});var dr=i(Vo);C(Jt.$$.fragment,dr),dr.forEach(t),cr.forEach(t),_s=p(Dn),Ho=r(Dn,"SPAN",{});var mr=i(Ho);vs=s(mr,"ConvNextModel"),mr.forEach(t),Dn.forEach(t),wn=p(o),Je=r(o,"DIV",{class:!0});var jo=i(Je);C(Zt.$$.fragment,jo),xs=p(jo),Qt=r(jo,"P",{});var An=i(Qt);ys=s(An,`The bare ConvNext model outputting raw features without any specific head on top.
This model is a PyTorch `),eo=r(An,"A",{href:!0,rel:!0});var pr=i(eo);ws=s(pr,"torch.nn.Module"),pr.forEach(t),bs=s(An,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),An.forEach(t),Cs=p(jo),ke=r(jo,"DIV",{class:!0});var Lt=i(ke);C(to.$$.fragment,Lt),$s=p(Lt),dt=r(Lt,"P",{});var Mo=i(dt);Ts=s(Mo,"The "),To=r(Mo,"A",{href:!0});var fr=i(To);Ns=s(fr,"ConvNextModel"),fr.forEach(t),Es=s(Mo," forward method, overrides the "),Bo=r(Mo,"CODE",{});var hr=i(Bo);Is=s(hr,"__call__"),hr.forEach(t),ks=s(Mo," special method."),Mo.forEach(t),Fs=p(Lt),C($t.$$.fragment,Lt),Ps=p(Lt),C(Tt.$$.fragment,Lt),Lt.forEach(t),jo.forEach(t),bn=p(o),mt=r(o,"H2",{class:!0});var Ln=i(mt);Nt=r(Ln,"A",{id:!0,class:!0,href:!0});var gr=i(Nt);Go=r(gr,"SPAN",{});var ur=i(Go);C(oo.$$.fragment,ur),ur.forEach(t),gr.forEach(t),zs=p(Ln),Yo=r(Ln,"SPAN",{});var _r=i(Yo);js=s(_r,"ConvNextForImageClassification"),_r.forEach(t),Ln.forEach(t),Cn=p(o),we=r(o,"DIV",{class:!0});var Ot=i(we);C(no.$$.fragment,Ot),Ms=p(Ot),Jo=r(Ot,"P",{});var vr=i(Jo);qs=s(vr,`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),vr.forEach(t),Ds=p(Ot),so=r(Ot,"P",{});var On=i(so);As=s(On,"This model is a PyTorch "),ao=r(On,"A",{href:!0,rel:!0});var xr=i(ao);Ls=s(xr,"torch.nn.Module"),xr.forEach(t),Os=s(On,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),On.forEach(t),Ss=p(Ot),Fe=r(Ot,"DIV",{class:!0});var St=i(Fe);C(ro.$$.fragment,St),Rs=p(St),pt=r(St,"P",{});var qo=i(pt);Us=s(qo,"The "),No=r(qo,"A",{href:!0});var yr=i(No);Ws=s(yr,"ConvNextForImageClassification"),yr.forEach(t),Ks=s(qo," forward method, overrides the "),Zo=r(qo,"CODE",{});var wr=i(Zo);Xs=s(wr,"__call__"),wr.forEach(t),Vs=s(qo," special method."),qo.forEach(t),Hs=p(St),C(Et.$$.fragment,St),Bs=p(St),C(It.$$.fragment,St),St.forEach(t),Ot.forEach(t),$n=p(o),ft=r(o,"H2",{class:!0});var Sn=i(ft);kt=r(Sn,"A",{id:!0,class:!0,href:!0});var br=i(kt);Qo=r(br,"SPAN",{});var Cr=i(Qo);C(io.$$.fragment,Cr),Cr.forEach(t),br.forEach(t),Gs=p(Sn),en=r(Sn,"SPAN",{});var $r=i(en);Ys=s($r,"TFConvNextModel"),$r.forEach(t),Sn.forEach(t),Tn=p(o),pe=r(o,"DIV",{class:!0});var et=i(pe);C(lo.$$.fragment,et),Js=p(et),co=r(et,"P",{});var Rn=i(co);Zs=s(Rn,`The bare ConvNext model outputting raw features without any specific head on top.
This model inherits from `),Eo=r(Rn,"A",{href:!0});var Tr=i(Eo);Qs=s(Tr,"TFPreTrainedModel"),Tr.forEach(t),ea=s(Rn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Rn.forEach(t),ta=p(et),mo=r(et,"P",{});var Un=i(mo);oa=s(Un,"This model is also a "),po=r(Un,"A",{href:!0,rel:!0});var Nr=i(po);na=s(Nr,"tf.keras.Model"),Nr.forEach(t),sa=s(Un,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Un.forEach(t),aa=p(et),C(Ft.$$.fragment,et),ra=p(et),Pe=r(et,"DIV",{class:!0});var Rt=i(Pe);C(fo.$$.fragment,Rt),ia=p(Rt),ht=r(Rt,"P",{});var Do=i(ht);la=s(Do,"The "),Io=r(Do,"A",{href:!0});var Er=i(Io);ca=s(Er,"TFConvNextModel"),Er.forEach(t),da=s(Do," forward method, overrides the "),tn=r(Do,"CODE",{});var Ir=i(tn);ma=s(Ir,"__call__"),Ir.forEach(t),pa=s(Do," special method."),Do.forEach(t),fa=p(Rt),C(Pt.$$.fragment,Rt),ha=p(Rt),C(zt.$$.fragment,Rt),Rt.forEach(t),et.forEach(t),Nn=p(o),gt=r(o,"H2",{class:!0});var Wn=i(gt);jt=r(Wn,"A",{id:!0,class:!0,href:!0});var kr=i(jt);on=r(kr,"SPAN",{});var Fr=i(on);C(ho.$$.fragment,Fr),Fr.forEach(t),kr.forEach(t),ga=p(Wn),nn=r(Wn,"SPAN",{});var Pr=i(nn);ua=s(Pr,"TFConvNextForImageClassification"),Pr.forEach(t),Wn.forEach(t),En=p(o),J=r(o,"DIV",{class:!0});var qe=i(J);C(go.$$.fragment,qe),_a=p(qe),sn=r(qe,"P",{});var zr=i(sn);va=s(zr,`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),zr.forEach(t),xa=p(qe),uo=r(qe,"P",{});var Kn=i(uo);ya=s(Kn,"This model inherits from "),ko=r(Kn,"A",{href:!0});var jr=i(ko);wa=s(jr,"TFPreTrainedModel"),jr.forEach(t),ba=s(Kn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Kn.forEach(t),Ca=p(qe),_o=r(qe,"P",{});var Xn=i(_o);$a=s(Xn,"This model is also a "),vo=r(Xn,"A",{href:!0,rel:!0});var Mr=i(vo);Ta=s(Mr,"tf.keras.Model"),Mr.forEach(t),Na=s(Xn,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Xn.forEach(t),Ea=p(qe),C(Mt.$$.fragment,qe),Ia=p(qe),ze=r(qe,"DIV",{class:!0});var Ut=i(ze);C(xo.$$.fragment,Ut),ka=p(Ut),ut=r(Ut,"P",{});var Ao=i(ut);Fa=s(Ao,"The "),Fo=r(Ao,"A",{href:!0});var qr=i(Fo);Pa=s(qr,"TFConvNextForImageClassification"),qr.forEach(t),za=s(Ao," forward method, overrides the "),an=r(Ao,"CODE",{});var Dr=i(an);ja=s(Dr,"__call__"),Dr.forEach(t),Ma=s(Ao," special method."),Ao.forEach(t),qa=p(Ut),C(qt.$$.fragment,Ut),Da=p(Ut),C(Dt.$$.fragment,Ut),Ut.forEach(t),qe.forEach(t),this.h()},h(){d(c,"name","hf:doc:metadata"),d(c,"content",JSON.stringify(ti)),d(g,"id","convnext"),d(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g,"href","#convnext"),d(u,"class","relative group"),d(Z,"id","overview"),d(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z,"href","#overview"),d(D,"class","relative group"),d(ne,"href","https://arxiv.org/abs/2201.03545"),d(ne,"rel","nofollow"),Rr(ee.src,Ze="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/convnext_architecture.jpg")||d(ee,"src",Ze),d(ee,"alt","drawing"),d(ee,"width","600"),d(he,"href","https://arxiv.org/abs/2201.03545"),d(ie,"href","https://huggingface.co/nielsr"),d(ie,"rel","nofollow"),d(B,"href","https://github.com/ariG23498"),d(B,"rel","nofollow"),d(M,"href","https://github.com/gante"),d(M,"rel","nofollow"),d(v,"href","https://github.com/sayakpaul"),d(v,"rel","nofollow"),d(G,"href","https://github.com/facebookresearch/ConvNeXt"),d(G,"rel","nofollow"),d(ge,"id","transformers.ConvNextConfig"),d(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ge,"href","#transformers.ConvNextConfig"),d(ce,"class","relative group"),d(Ie,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d(Kt,"href","https://huggingface.co/facebook/convnext-tiny-224"),d(Kt,"rel","nofollow"),d(Co,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),d($o,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vt,"id","transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor"),d(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vt,"href","#transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor"),d(lt,"class","relative group"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ct,"id","transformers.ConvNextModel"),d(Ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ct,"href","#transformers.ConvNextModel"),d(ct,"class","relative group"),d(eo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(eo,"rel","nofollow"),d(To,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nt,"id","transformers.ConvNextForImageClassification"),d(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nt,"href","#transformers.ConvNextForImageClassification"),d(mt,"class","relative group"),d(ao,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(ao,"rel","nofollow"),d(No,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kt,"id","transformers.TFConvNextModel"),d(kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kt,"href","#transformers.TFConvNextModel"),d(ft,"class","relative group"),d(Eo,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),d(po,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),d(po,"rel","nofollow"),d(Io,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),d(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jt,"id","transformers.TFConvNextForImageClassification"),d(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jt,"href","#transformers.TFConvNextForImageClassification"),d(gt,"class","relative group"),d(ko,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),d(vo,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),d(vo,"rel","nofollow"),d(Fo,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,_){e(document.head,c),h(o,y,_),h(o,u,_),e(u,g),e(g,x),$(l,x,null),e(u,f),e(u,F),e(F,De),h(o,be,_),h(o,D,_),e(D,Z),e(Z,oe),$(w,oe,null),e(D,Ae),e(D,V),e(V,Le),h(o,Ce,_),h(o,O,_),e(O,Oe),e(O,ne),e(ne,se),e(O,Se),h(o,$e,_),h(o,W,_),e(W,Re),h(o,Te,_),h(o,K,_),e(K,_e),e(_e,Ue),h(o,fe,_),h(o,P,_),e(P,A),h(o,Ne,_),h(o,X,_),e(X,ve),e(ve,We),h(o,Q,_),h(o,ee,_),h(o,q,_),h(o,te,_),e(te,ae),e(te,he),e(he,Ke),e(te,re),h(o,Ee,_),h(o,j,_),e(j,H),e(j,ie),e(ie,le),e(j,Xe),e(j,B),e(B,L),e(j,Ve),e(j,M),e(M,He),e(j,Be),e(j,v),e(v,I),e(j,tt),e(j,G),e(G,ot),e(j,nt),h(o,k,_),h(o,ce,_),e(ce,ge),e(ge,Ge),$(xe,Ge,null),e(ce,st),e(ce,S),e(S,de),h(o,Qe,_),h(o,R,_),$(U,R,null),e(R,at),e(R,me),e(me,Ye),e(me,Ie),e(Ie,ye),e(me,rt),e(me,Kt),e(Kt,Vn),e(me,Hn),e(R,Bn),e(R,it),e(it,Gn),e(it,Co),e(Co,Yn),e(it,Jn),e(it,$o),e($o,Zn),e(it,Qn),e(R,es),$(_t,R,null),h(o,vn,_),h(o,lt,_),e(lt,vt),e(vt,Oo),$(Xt,Oo,null),e(lt,ts),e(lt,So),e(So,os),h(o,xn,_),h(o,Y,_),$(Vt,Y,null),e(Y,ns),e(Y,Ro),e(Ro,ss),e(Y,as),e(Y,xt),$(Ht,xt,null),e(xt,rs),e(xt,Uo),e(Uo,is),e(Y,ls),e(Y,yt),$(Bt,yt,null),e(yt,cs),e(yt,Wo),e(Wo,ds),e(Y,ms),e(Y,wt),$(Gt,wt,null),e(wt,ps),e(wt,Ko),e(Ko,fs),e(Y,hs),e(Y,bt),$(Yt,bt,null),e(bt,gs),e(bt,Xo),e(Xo,us),h(o,yn,_),h(o,ct,_),e(ct,Ct),e(Ct,Vo),$(Jt,Vo,null),e(ct,_s),e(ct,Ho),e(Ho,vs),h(o,wn,_),h(o,Je,_),$(Zt,Je,null),e(Je,xs),e(Je,Qt),e(Qt,ys),e(Qt,eo),e(eo,ws),e(Qt,bs),e(Je,Cs),e(Je,ke),$(to,ke,null),e(ke,$s),e(ke,dt),e(dt,Ts),e(dt,To),e(To,Ns),e(dt,Es),e(dt,Bo),e(Bo,Is),e(dt,ks),e(ke,Fs),$($t,ke,null),e(ke,Ps),$(Tt,ke,null),h(o,bn,_),h(o,mt,_),e(mt,Nt),e(Nt,Go),$(oo,Go,null),e(mt,zs),e(mt,Yo),e(Yo,js),h(o,Cn,_),h(o,we,_),$(no,we,null),e(we,Ms),e(we,Jo),e(Jo,qs),e(we,Ds),e(we,so),e(so,As),e(so,ao),e(ao,Ls),e(so,Os),e(we,Ss),e(we,Fe),$(ro,Fe,null),e(Fe,Rs),e(Fe,pt),e(pt,Us),e(pt,No),e(No,Ws),e(pt,Ks),e(pt,Zo),e(Zo,Xs),e(pt,Vs),e(Fe,Hs),$(Et,Fe,null),e(Fe,Bs),$(It,Fe,null),h(o,$n,_),h(o,ft,_),e(ft,kt),e(kt,Qo),$(io,Qo,null),e(ft,Gs),e(ft,en),e(en,Ys),h(o,Tn,_),h(o,pe,_),$(lo,pe,null),e(pe,Js),e(pe,co),e(co,Zs),e(co,Eo),e(Eo,Qs),e(co,ea),e(pe,ta),e(pe,mo),e(mo,oa),e(mo,po),e(po,na),e(mo,sa),e(pe,aa),$(Ft,pe,null),e(pe,ra),e(pe,Pe),$(fo,Pe,null),e(Pe,ia),e(Pe,ht),e(ht,la),e(ht,Io),e(Io,ca),e(ht,da),e(ht,tn),e(tn,ma),e(ht,pa),e(Pe,fa),$(Pt,Pe,null),e(Pe,ha),$(zt,Pe,null),h(o,Nn,_),h(o,gt,_),e(gt,jt),e(jt,on),$(ho,on,null),e(gt,ga),e(gt,nn),e(nn,ua),h(o,En,_),h(o,J,_),$(go,J,null),e(J,_a),e(J,sn),e(sn,va),e(J,xa),e(J,uo),e(uo,ya),e(uo,ko),e(ko,wa),e(uo,ba),e(J,Ca),e(J,_o),e(_o,$a),e(_o,vo),e(vo,Ta),e(_o,Na),e(J,Ea),$(Mt,J,null),e(J,Ia),e(J,ze),$(xo,ze,null),e(ze,ka),e(ze,ut),e(ut,Fa),e(ut,Fo),e(Fo,Pa),e(ut,za),e(ut,an),e(an,ja),e(ut,Ma),e(ze,qa),$(qt,ze,null),e(ze,Da),$(Dt,ze,null),In=!0},p(o,[_]){const yo={};_&2&&(yo.$$scope={dirty:_,ctx:o}),_t.$set(yo);const rn={};_&2&&(rn.$$scope={dirty:_,ctx:o}),$t.$set(rn);const ln={};_&2&&(ln.$$scope={dirty:_,ctx:o}),Tt.$set(ln);const cn={};_&2&&(cn.$$scope={dirty:_,ctx:o}),Et.$set(cn);const wo={};_&2&&(wo.$$scope={dirty:_,ctx:o}),It.$set(wo);const dn={};_&2&&(dn.$$scope={dirty:_,ctx:o}),Ft.$set(dn);const mn={};_&2&&(mn.$$scope={dirty:_,ctx:o}),Pt.$set(mn);const pn={};_&2&&(pn.$$scope={dirty:_,ctx:o}),zt.$set(pn);const bo={};_&2&&(bo.$$scope={dirty:_,ctx:o}),Mt.$set(bo);const fn={};_&2&&(fn.$$scope={dirty:_,ctx:o}),qt.$set(fn);const hn={};_&2&&(hn.$$scope={dirty:_,ctx:o}),Dt.$set(hn)},i(o){In||(T(l.$$.fragment,o),T(w.$$.fragment,o),T(xe.$$.fragment,o),T(U.$$.fragment,o),T(_t.$$.fragment,o),T(Xt.$$.fragment,o),T(Vt.$$.fragment,o),T(Ht.$$.fragment,o),T(Bt.$$.fragment,o),T(Gt.$$.fragment,o),T(Yt.$$.fragment,o),T(Jt.$$.fragment,o),T(Zt.$$.fragment,o),T(to.$$.fragment,o),T($t.$$.fragment,o),T(Tt.$$.fragment,o),T(oo.$$.fragment,o),T(no.$$.fragment,o),T(ro.$$.fragment,o),T(Et.$$.fragment,o),T(It.$$.fragment,o),T(io.$$.fragment,o),T(lo.$$.fragment,o),T(Ft.$$.fragment,o),T(fo.$$.fragment,o),T(Pt.$$.fragment,o),T(zt.$$.fragment,o),T(ho.$$.fragment,o),T(go.$$.fragment,o),T(Mt.$$.fragment,o),T(xo.$$.fragment,o),T(qt.$$.fragment,o),T(Dt.$$.fragment,o),In=!0)},o(o){N(l.$$.fragment,o),N(w.$$.fragment,o),N(xe.$$.fragment,o),N(U.$$.fragment,o),N(_t.$$.fragment,o),N(Xt.$$.fragment,o),N(Vt.$$.fragment,o),N(Ht.$$.fragment,o),N(Bt.$$.fragment,o),N(Gt.$$.fragment,o),N(Yt.$$.fragment,o),N(Jt.$$.fragment,o),N(Zt.$$.fragment,o),N(to.$$.fragment,o),N($t.$$.fragment,o),N(Tt.$$.fragment,o),N(oo.$$.fragment,o),N(no.$$.fragment,o),N(ro.$$.fragment,o),N(Et.$$.fragment,o),N(It.$$.fragment,o),N(io.$$.fragment,o),N(lo.$$.fragment,o),N(Ft.$$.fragment,o),N(fo.$$.fragment,o),N(Pt.$$.fragment,o),N(zt.$$.fragment,o),N(ho.$$.fragment,o),N(go.$$.fragment,o),N(Mt.$$.fragment,o),N(xo.$$.fragment,o),N(qt.$$.fragment,o),N(Dt.$$.fragment,o),In=!1},d(o){t(c),o&&t(y),o&&t(u),E(l),o&&t(be),o&&t(D),E(w),o&&t(Ce),o&&t(O),o&&t($e),o&&t(W),o&&t(Te),o&&t(K),o&&t(fe),o&&t(P),o&&t(Ne),o&&t(X),o&&t(Q),o&&t(ee),o&&t(q),o&&t(te),o&&t(Ee),o&&t(j),o&&t(k),o&&t(ce),E(xe),o&&t(Qe),o&&t(R),E(U),E(_t),o&&t(vn),o&&t(lt),E(Xt),o&&t(xn),o&&t(Y),E(Vt),E(Ht),E(Bt),E(Gt),E(Yt),o&&t(yn),o&&t(ct),E(Jt),o&&t(wn),o&&t(Je),E(Zt),E(to),E($t),E(Tt),o&&t(bn),o&&t(mt),E(oo),o&&t(Cn),o&&t(we),E(no),E(ro),E(Et),E(It),o&&t($n),o&&t(ft),E(io),o&&t(Tn),o&&t(pe),E(lo),E(Ft),E(fo),E(Pt),E(zt),o&&t(Nn),o&&t(gt),E(ho),o&&t(En),o&&t(J),E(go),E(Mt),E(xo),E(qt),E(Dt)}}}const ti={local:"convnext",sections:[{local:"overview",title:"Overview"},{local:"transformers.ConvNextConfig",title:"ConvNextConfig"},{local:"transformers.models.convnext.image_processing_convnext.ConvNextImageProcessor",title:"ConvNextFeatureExtractor"},{local:"transformers.ConvNextModel",title:"ConvNextModel"},{local:"transformers.ConvNextForImageClassification",title:"ConvNextForImageClassification"},{local:"transformers.TFConvNextModel",title:"TFConvNextModel"},{local:"transformers.TFConvNextForImageClassification",title:"TFConvNextForImageClassification"}],title:"ConvNeXT"};function oi(z){return Ur(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ci extends Ar{constructor(c){super();Lr(this,c,oi,ei,Or,{})}}export{ci as default,ti as metadata};
