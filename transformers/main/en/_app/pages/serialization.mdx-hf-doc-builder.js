import{S as tg,i as og,s as sg,e as a,k as p,w as j,t as s,M as ng,c as l,d as o,m as f,a as r,x as C,h as n,b as v,G as e,g as d,y as D,q,o as L,B as A,v as ag,L as Zm}from"../chunks/vendor-hf-doc-builder.js";import{T as Rt}from"../chunks/Tip-hf-doc-builder.js";import{I as Ve}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as B}from"../chunks/CodeBlock-hf-doc-builder.js";import{F as lg,M as eg}from"../chunks/Markdown-hf-doc-builder.js";function rg(X){let c,$,m,E,w;return{c(){c=a("p"),$=s(`Once exported, a model can be optimized for inference via techniques such as
quantization and pruning. If you are interested in optimizing your models to run with
maximum efficiency, check out the `),m=a("a"),E=s(`\u{1F917} Optimum
library`),w=s("."),this.h()},l(_){c=l(_,"P",{});var x=r(c);$=n(x,`Once exported, a model can be optimized for inference via techniques such as
quantization and pruning. If you are interested in optimizing your models to run with
maximum efficiency, check out the `),m=l(x,"A",{href:!0,rel:!0});var b=r(m);E=n(b,`\u{1F917} Optimum
library`),b.forEach(o),w=n(x,"."),x.forEach(o),this.h()},h(){v(m,"href","https://github.com/huggingface/optimum"),v(m,"rel","nofollow")},m(_,x){d(_,c,x),e(c,$),e(c,m),e(m,E),e(c,w)},d(_){_&&o(c)}}}function ig(X){let c,$,m,E,w,_,x,b,k,T,I,y,O;return c=new B({props:{code:`from transformers import AutoTokenizer, AutoModelForSequenceClassification

# Load tokenizer and PyTorch weights form the Hub
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
pt_model = AutoModelForSequenceClassification.from_pretrained("distilbert-base-uncased")
# Save to disk
tokenizer.save_pretrained("local-pt-checkpoint")
pt_model.save_pretrained("local-pt-checkpoint")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load tokenizer and PyTorch weights form the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Save to disk</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;local-pt-checkpoint&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.save_pretrained(<span class="hljs-string">&quot;local-pt-checkpoint&quot;</span>)`}}),y=new B({props:{code:"python -m transformers.onnx --model=local-pt-checkpoint onnx/",highlighted:"python -m transformers.onnx --model=local-pt-checkpoint onnx/"}}),{c(){j(c.$$.fragment),$=p(),m=a("p"),E=s("Once the checkpoint is saved, we can export it to ONNX by pointing the "),w=a("code"),_=s("--model"),x=s(`
argument of the `),b=a("code"),k=s("transformers.onnx"),T=s(" package to the desired directory:"),I=p(),j(y.$$.fragment)},l(g){C(c.$$.fragment,g),$=f(g),m=l(g,"P",{});var N=r(m);E=n(N,"Once the checkpoint is saved, we can export it to ONNX by pointing the "),w=l(N,"CODE",{});var M=r(w);_=n(M,"--model"),M.forEach(o),x=n(N,`
argument of the `),b=l(N,"CODE",{});var R=r(b);k=n(R,"transformers.onnx"),R.forEach(o),T=n(N," package to the desired directory:"),N.forEach(o),I=f(g),C(y.$$.fragment,g)},m(g,N){D(c,g,N),d(g,$,N),d(g,m,N),e(m,E),e(m,w),e(w,_),e(m,x),e(m,b),e(b,k),e(m,T),d(g,I,N),D(y,g,N),O=!0},p:Zm,i(g){O||(q(c.$$.fragment,g),q(y.$$.fragment,g),O=!0)},o(g){L(c.$$.fragment,g),L(y.$$.fragment,g),O=!1},d(g){A(c,g),g&&o($),g&&o(m),g&&o(I),A(y,g)}}}function pg(X){let c,$;return c=new eg({props:{$$slots:{default:[ig]},$$scope:{ctx:X}}}),{c(){j(c.$$.fragment)},l(m){C(c.$$.fragment,m)},m(m,E){D(c,m,E),$=!0},p(m,E){const w={};E&2&&(w.$$scope={dirty:E,ctx:m}),c.$set(w)},i(m){$||(q(c.$$.fragment,m),$=!0)},o(m){L(c.$$.fragment,m),$=!1},d(m){A(c,m)}}}function fg(X){let c,$,m,E,w,_,x,b,k,T,I,y,O;return c=new B({props:{code:`from transformers import AutoTokenizer, TFAutoModelForSequenceClassification

# Load tokenizer and TensorFlow weights from the Hub
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
tf_model = TFAutoModelForSequenceClassification.from_pretrained("distilbert-base-uncased")
# Save to disk
tokenizer.save_pretrained("local-tf-checkpoint")
tf_model.save_pretrained("local-tf-checkpoint")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load tokenizer and TensorFlow weights from the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Save to disk</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;local-tf-checkpoint&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model.save_pretrained(<span class="hljs-string">&quot;local-tf-checkpoint&quot;</span>)`}}),y=new B({props:{code:"python -m transformers.onnx --model=local-tf-checkpoint onnx/",highlighted:"python -m transformers.onnx --model=local-tf-checkpoint onnx/"}}),{c(){j(c.$$.fragment),$=p(),m=a("p"),E=s("Once the checkpoint is saved, we can export it to ONNX by pointing the "),w=a("code"),_=s("--model"),x=s(`
argument of the `),b=a("code"),k=s("transformers.onnx"),T=s(" package to the desired directory:"),I=p(),j(y.$$.fragment)},l(g){C(c.$$.fragment,g),$=f(g),m=l(g,"P",{});var N=r(m);E=n(N,"Once the checkpoint is saved, we can export it to ONNX by pointing the "),w=l(N,"CODE",{});var M=r(w);_=n(M,"--model"),M.forEach(o),x=n(N,`
argument of the `),b=l(N,"CODE",{});var R=r(b);k=n(R,"transformers.onnx"),R.forEach(o),T=n(N," package to the desired directory:"),N.forEach(o),I=f(g),C(y.$$.fragment,g)},m(g,N){D(c,g,N),d(g,$,N),d(g,m,N),e(m,E),e(m,w),e(w,_),e(m,x),e(m,b),e(b,k),e(m,T),d(g,I,N),D(y,g,N),O=!0},p:Zm,i(g){O||(q(c.$$.fragment,g),q(y.$$.fragment,g),O=!0)},o(g){L(c.$$.fragment,g),L(y.$$.fragment,g),O=!1},d(g){A(c,g),g&&o($),g&&o(m),g&&o(I),A(y,g)}}}function dg(X){let c,$;return c=new eg({props:{$$slots:{default:[fg]},$$scope:{ctx:X}}}),{c(){j(c.$$.fragment)},l(m){C(c.$$.fragment,m)},m(m,E){D(c,m,E),$=!0},p(m,E){const w={};E&2&&(w.$$scope={dirty:E,ctx:m}),c.$set(w)},i(m){$||(q(c.$$.fragment,m),$=!0)},o(m){L(c.$$.fragment,m),$=!1},d(m){A(c,m)}}}function cg(X){let c,$,m,E,w,_,x,b;return{c(){c=a("p"),$=s("The features that have a "),m=a("code"),E=s("with-past"),w=s(" suffix (like "),_=a("code"),x=s("causal-lm-with-past"),b=s(`) correspond to
model classes with precomputed hidden states (key and values in the attention blocks)
that can be used for fast autoregressive decoding.`)},l(k){c=l(k,"P",{});var T=r(c);$=n(T,"The features that have a "),m=l(T,"CODE",{});var I=r(m);E=n(I,"with-past"),I.forEach(o),w=n(T," suffix (like "),_=l(T,"CODE",{});var y=r(_);x=n(y,"causal-lm-with-past"),y.forEach(o),b=n(T,`) correspond to
model classes with precomputed hidden states (key and values in the attention blocks)
that can be used for fast autoregressive decoding.`),T.forEach(o)},m(k,T){d(k,c,T),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b)},d(k){k&&o(c)}}}function hg(X){let c,$,m,E,w,_,x,b,k,T,I;return{c(){c=a("p"),$=s("For "),m=a("code"),E=s("VisionEncoderDecoder"),w=s(` type models, the encoder and decoder parts are
exported separately as two ONNX files named `),_=a("code"),x=s("encoder_model.onnx"),b=s(" and "),k=a("code"),T=s("decoder_model.onnx"),I=s(" respectively.")},l(y){c=l(y,"P",{});var O=r(c);$=n(O,"For "),m=l(O,"CODE",{});var g=r(m);E=n(g,"VisionEncoderDecoder"),g.forEach(o),w=n(O,` type models, the encoder and decoder parts are
exported separately as two ONNX files named `),_=l(O,"CODE",{});var N=r(_);x=n(N,"encoder_model.onnx"),N.forEach(o),b=n(O," and "),k=l(O,"CODE",{});var M=r(k);T=n(M,"decoder_model.onnx"),M.forEach(o),I=n(O," respectively."),O.forEach(o)},m(y,O){d(y,c,O),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b),e(c,k),e(k,T),e(c,I)},d(y){y&&o(c)}}}function ug(X){let c,$,m,E,w;return{c(){c=a("p"),$=s(`A good way to implement a custom ONNX configuration is to look at the existing
implementation in the `),m=a("code"),E=s("configuration_<model_name>.py"),w=s(" file of a similar architecture.")},l(_){c=l(_,"P",{});var x=r(c);$=n(x,`A good way to implement a custom ONNX configuration is to look at the existing
implementation in the `),m=l(x,"CODE",{});var b=r(m);E=n(b,"configuration_<model_name>.py"),b.forEach(o),w=n(x," file of a similar architecture."),x.forEach(o)},m(_,x){d(_,c,x),e(c,$),e(c,m),e(m,E),e(c,w)},d(_){_&&o(c)}}}function mg(X){let c,$,m,E,w,_,x,b,k,T,I,y,O,g,N,M,R,Q,W,He,K,We,Ge;return{c(){c=a("p"),$=s("Notice that "),m=a("code"),E=s("inputs"),w=s(" property for "),_=a("code"),x=s("DistilBertOnnxConfig"),b=s(" returns an "),k=a("code"),T=s("OrderedDict"),I=s(`. This
ensures that the inputs are matched with their relative position within the
`),y=a("code"),O=s("PreTrainedModel.forward()"),g=s(` method when tracing the graph. We recommend using an
`),N=a("code"),M=s("OrderedDict"),R=s(" for the "),Q=a("code"),W=s("inputs"),He=s(" and "),K=a("code"),We=s("outputs"),Ge=s(` properties when implementing custom ONNX
configurations.`)},l(Z){c=l(Z,"P",{});var P=r(c);$=n(P,"Notice that "),m=l(P,"CODE",{});var Ft=r(m);E=n(Ft,"inputs"),Ft.forEach(o),w=n(P," property for "),_=l(P,"CODE",{});var Ye=r(_);x=n(Ye,"DistilBertOnnxConfig"),Ye.forEach(o),b=n(P," returns an "),k=l(P,"CODE",{});var J=r(k);T=n(J,"OrderedDict"),J.forEach(o),I=n(P,`. This
ensures that the inputs are matched with their relative position within the
`),y=l(P,"CODE",{});var St=r(y);O=n(St,"PreTrainedModel.forward()"),St.forEach(o),g=n(P,` method when tracing the graph. We recommend using an
`),N=l(P,"CODE",{});var fe=r(N);M=n(fe,"OrderedDict"),fe.forEach(o),R=n(P," for the "),Q=l(P,"CODE",{});var ve=r(Q);W=n(ve,"inputs"),ve.forEach(o),He=n(P," and "),K=l(P,"CODE",{});var zt=r(K);We=n(zt,"outputs"),zt.forEach(o),Ge=n(P,` properties when implementing custom ONNX
configurations.`),P.forEach(o)},m(Z,P){d(Z,c,P),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b),e(c,k),e(k,T),e(c,I),e(c,y),e(y,O),e(c,g),e(c,N),e(N,M),e(c,R),e(c,Q),e(Q,W),e(c,He),e(c,K),e(K,We),e(c,Ge)},d(Z){Z&&o(c)}}}function gg(X){let c,$,m,E,w,_,x,b;return{c(){c=a("p"),$=s("All of the base properties and methods associated with "),m=a("a"),E=s("OnnxConfig"),w=s(` and
the other configuration classes can be overriden if needed. Check out `),_=a("code"),x=s("BartOnnxConfig"),b=s(`
for an advanced example.`),this.h()},l(k){c=l(k,"P",{});var T=r(c);$=n(T,"All of the base properties and methods associated with "),m=l(T,"A",{href:!0});var I=r(m);E=n(I,"OnnxConfig"),I.forEach(o),w=n(T,` and
the other configuration classes can be overriden if needed. Check out `),_=l(T,"CODE",{});var y=r(_);x=n(y,"BartOnnxConfig"),y.forEach(o),b=n(T,`
for an advanced example.`),T.forEach(o),this.h()},h(){v(m,"href","/docs/transformers/main/en/main_classes/onnx#transformers.onnx.OnnxConfig")},m(k,T){d(k,c,T),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b)},d(k){k&&o(c)}}}function _g(X){let c,$,m,E,w,_,x,b,k,T,I;return{c(){c=a("p"),$=s(`If your model is larger than 2GB, you will see that many additional files are created
during the export. This is `),m=a("em"),E=s("expected"),w=s(" because ONNX uses "),_=a("a"),x=s(`Protocol
Buffers`),b=s(` to store the model and these
have a size limit of 2GB. See the `),k=a("a"),T=s(`ONNX
documentation`),I=s(` for
instructions on how to load models with external data.`),this.h()},l(y){c=l(y,"P",{});var O=r(c);$=n(O,`If your model is larger than 2GB, you will see that many additional files are created
during the export. This is `),m=l(O,"EM",{});var g=r(m);E=n(g,"expected"),g.forEach(o),w=n(O," because ONNX uses "),_=l(O,"A",{href:!0,rel:!0});var N=r(_);x=n(N,`Protocol
Buffers`),N.forEach(o),b=n(O,` to store the model and these
have a size limit of 2GB. See the `),k=l(O,"A",{href:!0,rel:!0});var M=r(k);T=n(M,`ONNX
documentation`),M.forEach(o),I=n(O,` for
instructions on how to load models with external data.`),O.forEach(o),this.h()},h(){v(_,"href","https://developers.google.com/protocol-buffers/"),v(_,"rel","nofollow"),v(k,"href","https://github.com/onnx/onnx/blob/master/docs/ExternalData.md"),v(k,"rel","nofollow")},m(y,O){d(y,c,O),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b),e(c,k),e(k,T),e(c,I)},d(y){y&&o(c)}}}function vg(X){let c,$,m,E,w,_,x,b,k,T,I,y,O,g,N,M,R,Q,W,He,K,We,Ge,Z,P,Ft,Ye,J,St,fe,ve,zt,or,fa,Vt,sr,da,h,bo,nr,ar,ko,lr,rr,yo,ir,pr,Oo,fr,dr,To,cr,hr,No,ur,mr,jo,gr,_r,Co,vr,Er,Do,$r,wr,qo,xr,br,Lo,kr,yr,Ao,Or,Tr,Io,Nr,jr,Po,Cr,Dr,Xo,qr,Lr,Bo,Ar,Ir,Mo,Pr,Xr,Ro,Br,Mr,Fo,Rr,Fr,So,Sr,zr,zo,Vr,Hr,Vo,Wr,Gr,Ho,Yr,Ur,Wo,Kr,Jr,Go,Qr,Zr,Yo,ei,ti,Uo,oi,si,Ko,ni,ai,Jo,li,ri,Qo,ii,pi,Zo,fi,di,es,ci,hi,ts,ui,mi,os,gi,_i,ss,vi,Ei,ns,$i,wi,as,xi,bi,ls,ki,yi,rs,Oi,Ti,is,Ni,ji,ps,Ci,Di,fs,qi,Li,ds,Ai,Ii,cs,Pi,Xi,hs,Bi,Mi,us,Ri,Fi,ms,Si,zi,gs,Vi,Hi,_s,Wi,Gi,vs,Yi,Ui,Es,Ki,Ji,$s,Qi,Zi,ws,ep,tp,xs,op,sp,bs,np,ap,ks,lp,rp,ys,ip,pp,Os,fp,dp,Ts,cp,hp,Ns,up,ca,Ht,mp,ha,Ee,Ue,gp,js,_p,vp,Ep,Cs,$p,ua,de,$e,Ds,Ke,wp,qs,xp,ma,Wt,bp,ga,Je,_a,we,kp,Ls,yp,Op,va,Qe,Ea,Gt,Tp,$a,Ze,wa,Yt,Np,xa,et,ba,ee,jp,As,Cp,Dp,Is,qp,Lp,ka,G,Ap,Ps,Ip,Pp,tt,Xp,Bp,ot,Mp,Rp,ya,st,Oa,xe,Fp,Xs,Sp,zp,Ta,nt,Na,be,Vp,at,Hp,Wp,ja,lt,Ca,Ut,Gp,Da,ke,qa,ce,ye,Bs,rt,Yp,Ms,Up,La,te,Kp,Rs,Jp,Qp,Fs,Zp,ef,Aa,Oe,Ss,it,zs,tf,of,Vs,sf,nf,F,pt,ft,Hs,af,lf,Ws,rf,pf,Gs,Ys,ff,df,dt,ct,Us,cf,hf,Ks,uf,mf,Js,Qs,gf,_f,ht,Zs,en,vf,Ef,tn,on,$f,wf,ut,sn,nn,xf,bf,an,ln,kf,yf,mt,gt,rn,Of,Tf,pn,Nf,jf,fn,dn,Cf,Df,_t,cn,hn,qf,Lf,un,mn,Af,If,vt,gn,_n,Pf,Xf,vn,En,Bf,Ia,Te,Mf,Kt,Rf,Ff,Pa,Et,Xa,oe,Sf,$n,zf,Vf,wn,Hf,Wf,Ba,$t,Ma,Jt,Gf,Ra,wt,Fa,Y,Yf,xn,Uf,Kf,bn,Jf,Qf,kn,Zf,ed,Sa,Ne,za,je,Va,he,Ce,yn,xt,td,On,od,Ha,Qt,sd,Wa,se,Tn,nd,ad,Nn,ld,rd,jn,id,Ga,Zt,pd,Ya,ue,De,Cn,bt,fd,Dn,dd,Ua,eo,cd,Ka,ne,to,hd,oo,ud,md,so,gd,no,_d,vd,ao,Ed,lo,$d,Ja,qe,Qa,Le,wd,qn,xd,bd,Za,kt,el,z,kd,Ln,yd,Od,An,Td,Nd,In,jd,Cd,Pn,Dd,qd,tl,Ae,ol,ro,Ld,sl,yt,nl,io,Ad,al,Ot,ll,po,Id,rl,Tt,il,V,Pd,Xn,Xd,Bd,Bn,Md,Rd,Mn,Fd,Sd,Rn,zd,Vd,pl,Nt,fl,Ie,dl,me,Pe,Fn,jt,Hd,Sn,Wd,cl,ae,Gd,zn,Yd,Ud,Vn,Kd,Jd,hl,Ct,ul,S,Qd,Hn,Zd,ec,Wn,tc,oc,Gn,sc,nc,Yn,ac,lc,Un,rc,ic,ml,Dt,gl,Xe,_l,ge,Be,Kn,qt,pc,Jn,fc,vl,le,dc,Qn,cc,hc,Zn,uc,mc,El,Lt,$l,Me,gc,fo,_c,vc,wl,_e,Re,ea,At,Ec,ta,$c,xl,co,wc,bl,re,It,xc,oa,bc,kc,yc,ho,Oc,sa,Tc,Nc,uo,jc,na,Cc,kl,Fe,Dc,Pt,qc,Lc,yl;return _=new Ve({}),R=new Rt({props:{$$slots:{default:[rg]},$$scope:{ctx:X}}}),Ke=new Ve({}),Je=new B({props:{code:"pip install transformers[onnx]",highlighted:"pip install transformers[onnx]"}}),Qe=new B({props:{code:`python -m transformers.onnx --help

usage: Hugging Face Transformers ONNX exporter [-h] -m MODEL [--feature {causal-lm, ...}] [--opset OPSET] [--atol ATOL] output

positional arguments:
  output                Path indicating where to store generated ONNX model.

optional arguments:
  -h, --help            show this help message and exit
  -m MODEL, --model MODEL
                        Model ID on huggingface.co or path on disk to load model from.
  --feature {causal-lm, ...}
                        The type of features to export the model with.
  --opset OPSET         ONNX opset version to export the model with.
  --atol ATOL           Absolute difference tolerence when validating the model.`,highlighted:`python -m transformers.onnx --<span class="hljs-built_in">help</span>

usage: Hugging Face Transformers ONNX exporter [-h] -m MODEL [--feature {causal-lm, ...}] [--opset OPSET] [--atol ATOL] output

positional arguments:
  output                Path indicating <span class="hljs-built_in">where</span> to store generated ONNX model.

optional arguments:
  -h, --<span class="hljs-built_in">help</span>            show this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span>
  -m MODEL, --model MODEL
                        Model ID on huggingface.co or path on disk to load model from.
  --feature {causal-lm, ...}
                        The <span class="hljs-built_in">type</span> of features to <span class="hljs-built_in">export</span> the model with.
  --opset OPSET         ONNX opset version to <span class="hljs-built_in">export</span> the model with.
  --atol ATOL           Absolute difference tolerence when validating the model.`}}),Ze=new B({props:{code:"python -m transformers.onnx --model=distilbert-base-uncased onnx/",highlighted:"python -m transformers.onnx --model=distilbert-base-uncased onnx/"}}),et=new B({props:{code:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({'last_hidden_state'})
        - Validating ONNX Model output "last_hidden_state":
                -[\u2713] (2, 8, 768) matches (2, 8, 768)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`,highlighted:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({<span class="hljs-string">&#x27;last_hidden_state&#x27;</span>})
        - Validating ONNX Model output <span class="hljs-string">&quot;last_hidden_state&quot;</span>:
                -[\u2713] (2, 8, 768) matches (2, 8, 768)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`}}),st=new B({props:{code:`from transformers import AutoTokenizer
from onnxruntime import InferenceSession

tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
session = InferenceSession("onnx/model.onnx")
# ONNX Runtime expects NumPy arrays as input
inputs = tokenizer("Using DistilBERT with ONNX Runtime!", return_tensors="np")
outputs = session.run(output_names=["last_hidden_state"], input_feed=dict(inputs))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> onnxruntime <span class="hljs-keyword">import</span> InferenceSession

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>session = InferenceSession(<span class="hljs-string">&quot;onnx/model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># ONNX Runtime expects NumPy arrays as input</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Using DistilBERT with ONNX Runtime!&quot;</span>, return_tensors=<span class="hljs-string">&quot;np&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = session.run(output_names=[<span class="hljs-string">&quot;last_hidden_state&quot;</span>], input_feed=<span class="hljs-built_in">dict</span>(inputs))`}}),nt=new B({props:{code:`from transformers.models.distilbert import DistilBertConfig, DistilBertOnnxConfig

config = DistilBertConfig()
onnx_config = DistilBertOnnxConfig(config)
print(list(onnx_config.outputs.keys()))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.models.distilbert <span class="hljs-keyword">import</span> DistilBertConfig, DistilBertOnnxConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = DistilBertConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config = DistilBertOnnxConfig(config)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(onnx_config.outputs.keys()))
[<span class="hljs-string">&quot;last_hidden_state&quot;</span>]`}}),lt=new B({props:{code:"python -m transformers.onnx --model=keras-io/transformers-qa onnx/",highlighted:"python -m transformers.onnx --model=keras-io/transformers-qa onnx/"}}),ke=new lg({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[dg],pytorch:[pg]},$$scope:{ctx:X}}}),rt=new Ve({}),Et=new B({props:{code:`from transformers.onnx.features import FeaturesManager

distilbert_features = list(FeaturesManager.get_supported_features_for_model_type("distilbert").keys())
print(distilbert_features)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx.features <span class="hljs-keyword">import</span> FeaturesManager

<span class="hljs-meta">&gt;&gt;&gt; </span>distilbert_features = <span class="hljs-built_in">list</span>(FeaturesManager.get_supported_features_for_model_type(<span class="hljs-string">&quot;distilbert&quot;</span>).keys())
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(distilbert_features)
[<span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-string">&quot;masked-lm&quot;</span>, <span class="hljs-string">&quot;causal-lm&quot;</span>, <span class="hljs-string">&quot;sequence-classification&quot;</span>, <span class="hljs-string">&quot;token-classification&quot;</span>, <span class="hljs-string">&quot;question-answering&quot;</span>]`}}),$t=new B({props:{code:`python -m transformers.onnx --model=distilbert-base-uncased-finetuned-sst-2-english \\
                            --feature=sequence-classification onnx/`,highlighted:`python -m transformers.onnx --model=distilbert-base-uncased-finetuned-sst-2-english \\
                            --feature=sequence-classification onnx/`}}),wt=new B({props:{code:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({'logits'})
        - Validating ONNX Model output "logits":
                -[\u2713] (2, 2) matches (2, 2)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`,highlighted:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({<span class="hljs-string">&#x27;logits&#x27;</span>})
        - Validating ONNX Model output <span class="hljs-string">&quot;logits&quot;</span>:
                -[\u2713] (2, 2) matches (2, 2)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`}}),Ne=new Rt({props:{$$slots:{default:[cg]},$$scope:{ctx:X}}}),je=new Rt({props:{$$slots:{default:[hg]},$$scope:{ctx:X}}}),xt=new Ve({}),bt=new Ve({}),qe=new Rt({props:{$$slots:{default:[ug]},$$scope:{ctx:X}}}),kt=new B({props:{code:`from typing import Mapping, OrderedDict
from transformers.onnx import OnnxConfig


class DistilBertOnnxConfig(OnnxConfig):
    @property
    def inputs(self) -> Mapping[str, Mapping[int, str]]:
        return OrderedDict(
            [
                ("input_ids", {0: "batch", 1: "sequence"}),
                ("attention_mask", {0: "batch", 1: "sequence"}),
            ]
        )`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Mapping, OrderedDict
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> OnnxConfig


<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">DistilBertOnnxConfig</span>(<span class="hljs-title class_ inherited__">OnnxConfig</span>):
<span class="hljs-meta">... </span>    @<span class="hljs-built_in">property</span>
<span class="hljs-meta">... </span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inputs</span>(<span class="hljs-params">self</span>) -&gt; Mapping[<span class="hljs-built_in">str</span>, Mapping[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>]]:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> OrderedDict(
<span class="hljs-meta">... </span>            [
<span class="hljs-meta">... </span>                (<span class="hljs-string">&quot;input_ids&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>}),
<span class="hljs-meta">... </span>                (<span class="hljs-string">&quot;attention_mask&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>}),
<span class="hljs-meta">... </span>            ]
<span class="hljs-meta">... </span>        )`}}),Ae=new Rt({props:{$$slots:{default:[mg]},$$scope:{ctx:X}}}),yt=new B({props:{code:`from transformers import AutoConfig

config = AutoConfig.from_pretrained("distilbert-base-uncased")
onnx_config = DistilBertOnnxConfig(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config = DistilBertOnnxConfig(config)`}}),Ot=new B({props:{code:"print(onnx_config.default_onnx_opset)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config.default_onnx_opset)
<span class="hljs-number">11</span>`}}),Tt=new B({props:{code:"print(onnx_config.outputs)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config.outputs)
OrderedDict([(<span class="hljs-string">&quot;last_hidden_state&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>})])`}}),Nt=new B({props:{code:`from transformers import AutoConfig

config = AutoConfig.from_pretrained("distilbert-base-uncased")
onnx_config_for_seq_clf = DistilBertOnnxConfig(config, task="sequence-classification")
print(onnx_config_for_seq_clf.outputs)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config_for_seq_clf = DistilBertOnnxConfig(config, task=<span class="hljs-string">&quot;sequence-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config_for_seq_clf.outputs)
OrderedDict([(<span class="hljs-string">&#x27;logits&#x27;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;batch&#x27;</span>})])`}}),Ie=new Rt({props:{$$slots:{default:[gg]},$$scope:{ctx:X}}}),jt=new Ve({}),Ct=new B({props:{code:`from pathlib import Path
from transformers.onnx import export
from transformers import AutoTokenizer, AutoModel

onnx_path = Path("model.onnx")
model_ckpt = "distilbert-base-uncased"
base_model = AutoModel.from_pretrained(model_ckpt)
tokenizer = AutoTokenizer.from_pretrained(model_ckpt)

onnx_inputs, onnx_outputs = export(tokenizer, base_model, onnx_config, onnx_config.default_onnx_opset, onnx_path)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> export
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_path = Path(<span class="hljs-string">&quot;model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model_ckpt = <span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>base_model = AutoModel.from_pretrained(model_ckpt)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_ckpt)

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_inputs, onnx_outputs = export(tokenizer, base_model, onnx_config, onnx_config.default_onnx_opset, onnx_path)`}}),Dt=new B({props:{code:`import onnx

onnx_model = onnx.load("model.onnx")
onnx.checker.check_model(onnx_model)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> onnx

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_model = onnx.load(<span class="hljs-string">&quot;model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx.checker.check_model(onnx_model)`}}),Xe=new Rt({props:{$$slots:{default:[_g]},$$scope:{ctx:X}}}),qt=new Ve({}),Lt=new B({props:{code:`from transformers.onnx import validate_model_outputs

validate_model_outputs(
    onnx_config, tokenizer, base_model, onnx_path, onnx_outputs, onnx_config.atol_for_validation
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> validate_model_outputs

<span class="hljs-meta">&gt;&gt;&gt; </span>validate_model_outputs(
<span class="hljs-meta">... </span>    onnx_config, tokenizer, base_model, onnx_path, onnx_outputs, onnx_config.atol_for_validation
<span class="hljs-meta">... </span>)`}}),At=new Ve({}),{c(){c=a("meta"),$=p(),m=a("h1"),E=a("a"),w=a("span"),j(_.$$.fragment),x=p(),b=a("span"),k=s("Export to ONNX"),T=p(),I=a("p"),y=s(`If you need to deploy \u{1F917} Transformers models in production environments, we recommend
exporting them to a serialized format that can be loaded and executed on specialized
runtimes and hardware. In this guide, we\u2019ll show you how to export \u{1F917} Transformers
models to `),O=a("a"),g=s("ONNX (Open Neural Network eXchange)"),N=s("."),M=p(),j(R.$$.fragment),Q=p(),W=a("p"),He=s(`ONNX is an open standard that defines a common set of operators and a common file format
to represent deep learning models in a wide variety of frameworks, including PyTorch and
TensorFlow. When a model is exported to the ONNX format, these operators are used to
construct a computational graph (often called an `),K=a("em"),We=s("intermediate representation"),Ge=s(`) which
represents the flow of data through the neural network.`),Z=p(),P=a("p"),Ft=s(`By exposing a graph with standardized operators and data types, ONNX makes it easy to
switch between frameworks. For example, a model trained in PyTorch can be exported to
ONNX format and then imported in TensorFlow (and vice versa).`),Ye=p(),J=a("p"),St=s("\u{1F917} Transformers provides a "),fe=a("a"),ve=a("code"),zt=s("transformers.onnx"),or=s(` package that enables
you to convert model checkpoints to an ONNX graph by leveraging configuration objects.
These configuration objects come ready made for a number of model architectures, and are
designed to be easily extendable to other architectures.`),fa=p(),Vt=a("p"),sr=s("Ready-made configurations include the following architectures:"),da=p(),h=a("ul"),bo=a("li"),nr=s("ALBERT"),ar=p(),ko=a("li"),lr=s("BART"),rr=p(),yo=a("li"),ir=s("BEiT"),pr=p(),Oo=a("li"),fr=s("BERT"),dr=p(),To=a("li"),cr=s("BigBird"),hr=p(),No=a("li"),ur=s("BigBird-Pegasus"),mr=p(),jo=a("li"),gr=s("Blenderbot"),_r=p(),Co=a("li"),vr=s("BlenderbotSmall"),Er=p(),Do=a("li"),$r=s("BLOOM"),wr=p(),qo=a("li"),xr=s("CamemBERT"),br=p(),Lo=a("li"),kr=s("CLIP"),yr=p(),Ao=a("li"),Or=s("CodeGen"),Tr=p(),Io=a("li"),Nr=s("Conditional DETR"),jr=p(),Po=a("li"),Cr=s("ConvBERT"),Dr=p(),Xo=a("li"),qr=s("ConvNeXT"),Lr=p(),Bo=a("li"),Ar=s("Data2VecText"),Ir=p(),Mo=a("li"),Pr=s("Data2VecVision"),Xr=p(),Ro=a("li"),Br=s("DeBERTa"),Mr=p(),Fo=a("li"),Rr=s("DeBERTa-v2"),Fr=p(),So=a("li"),Sr=s("DeiT"),zr=p(),zo=a("li"),Vr=s("DETR"),Hr=p(),Vo=a("li"),Wr=s("DistilBERT"),Gr=p(),Ho=a("li"),Yr=s("ELECTRA"),Ur=p(),Wo=a("li"),Kr=s("ERNIE"),Jr=p(),Go=a("li"),Qr=s("FlauBERT"),Zr=p(),Yo=a("li"),ei=s("GPT Neo"),ti=p(),Uo=a("li"),oi=s("GPT-J"),si=p(),Ko=a("li"),ni=s("GroupViT"),ai=p(),Jo=a("li"),li=s("I-BERT"),ri=p(),Qo=a("li"),ii=s("ImageGPT"),pi=p(),Zo=a("li"),fi=s("LayoutLM"),di=p(),es=a("li"),ci=s("LayoutLMv3"),hi=p(),ts=a("li"),ui=s("LeViT"),mi=p(),os=a("li"),gi=s("Longformer"),_i=p(),ss=a("li"),vi=s("LongT5"),Ei=p(),ns=a("li"),$i=s("M2M100"),wi=p(),as=a("li"),xi=s("Marian"),bi=p(),ls=a("li"),ki=s("mBART"),yi=p(),rs=a("li"),Oi=s("MobileBERT"),Ti=p(),is=a("li"),Ni=s("MobileViT"),ji=p(),ps=a("li"),Ci=s("MT5"),Di=p(),fs=a("li"),qi=s("OpenAI GPT-2"),Li=p(),ds=a("li"),Ai=s("OWL-ViT"),Ii=p(),cs=a("li"),Pi=s("Perceiver"),Xi=p(),hs=a("li"),Bi=s("PLBart"),Mi=p(),us=a("li"),Ri=s("ResNet"),Fi=p(),ms=a("li"),Si=s("RoBERTa"),zi=p(),gs=a("li"),Vi=s("RoFormer"),Hi=p(),_s=a("li"),Wi=s("SegFormer"),Gi=p(),vs=a("li"),Yi=s("SqueezeBERT"),Ui=p(),Es=a("li"),Ki=s("Swin Transformer"),Ji=p(),$s=a("li"),Qi=s("T5"),Zi=p(),ws=a("li"),ep=s("Table Transformer"),tp=p(),xs=a("li"),op=s("Vision Encoder decoder"),sp=p(),bs=a("li"),np=s("ViT"),ap=p(),ks=a("li"),lp=s("Whisper"),rp=p(),ys=a("li"),ip=s("XLM"),pp=p(),Os=a("li"),fp=s("XLM-RoBERTa"),dp=p(),Ts=a("li"),cp=s("XLM-RoBERTa-XL"),hp=p(),Ns=a("li"),up=s("YOLOS"),ca=p(),Ht=a("p"),mp=s("In the next two sections, we\u2019ll show you how to:"),ha=p(),Ee=a("ul"),Ue=a("li"),gp=s("Export a supported model using the "),js=a("code"),_p=s("transformers.onnx"),vp=s(" package."),Ep=p(),Cs=a("li"),$p=s("Export a custom model for an unsupported architecture."),ua=p(),de=a("h2"),$e=a("a"),Ds=a("span"),j(Ke.$$.fragment),wp=p(),qs=a("span"),xp=s("Exporting a model to ONNX"),ma=p(),Wt=a("p"),bp=s(`To export a \u{1F917} Transformers model to ONNX, you\u2019ll first need to install some extra
dependencies:`),ga=p(),j(Je.$$.fragment),_a=p(),we=a("p"),kp=s("The "),Ls=a("code"),yp=s("transformers.onnx"),Op=s(" package can then be used as a Python module:"),va=p(),j(Qe.$$.fragment),Ea=p(),Gt=a("p"),Tp=s("Exporting a checkpoint using a ready-made configuration can be done as follows:"),$a=p(),j(Ze.$$.fragment),wa=p(),Yt=a("p"),Np=s("You should see the following logs:"),xa=p(),j(et.$$.fragment),ba=p(),ee=a("p"),jp=s("This exports an ONNX graph of the checkpoint defined by the "),As=a("code"),Cp=s("--model"),Dp=s(` argument. In this
example, it is `),Is=a("code"),qp=s("distilbert-base-uncased"),Lp=s(`, but it can be any checkpoint on the Hugging
Face Hub or one that\u2019s stored locally.`),ka=p(),G=a("p"),Ap=s("The resulting "),Ps=a("code"),Ip=s("model.onnx"),Pp=s(" file can then be run on one of the "),tt=a("a"),Xp=s(`many
accelerators`),Bp=s(` that support the ONNX
standard. For example, we can load and run the model with `),ot=a("a"),Mp=s(`ONNX
Runtime`),Rp=s(" as follows:"),ya=p(),j(st.$$.fragment),Oa=p(),xe=a("p"),Fp=s("The required output names (like "),Xs=a("code"),Sp=s('["last_hidden_state"]'),zp=s(`) can be obtained by taking a
look at the ONNX configuration of each model. For example, for DistilBERT we have:`),Ta=p(),j(nt.$$.fragment),Na=p(),be=a("p"),Vp=s(`The process is identical for TensorFlow checkpoints on the Hub. For example, we can
export a pure TensorFlow checkpoint from the `),at=a("a"),Hp=s(`Keras
organization`),Wp=s(" as follows:"),ja=p(),j(lt.$$.fragment),Ca=p(),Ut=a("p"),Gp=s(`To export a model that\u2019s stored locally, you\u2019ll need to have the model\u2019s weights and
tokenizer files stored in a directory. For example, we can load and save a checkpoint as
follows:`),Da=p(),j(ke.$$.fragment),qa=p(),ce=a("h2"),ye=a("a"),Bs=a("span"),j(rt.$$.fragment),Yp=p(),Ms=a("span"),Up=s("Selecting features for different model tasks"),La=p(),te=a("p"),Kp=s("Each ready-made configuration comes with a set of "),Rs=a("em"),Jp=s("features"),Qp=s(` that enable you to export
models for different types of tasks. As shown in the table below, each feature is
associated with a different `),Fs=a("code"),Zp=s("AutoClass"),ef=s(":"),Aa=p(),Oe=a("table"),Ss=a("thead"),it=a("tr"),zs=a("th"),tf=s("Feature"),of=p(),Vs=a("th"),sf=s("Auto Class"),nf=p(),F=a("tbody"),pt=a("tr"),ft=a("td"),Hs=a("code"),af=s("causal-lm"),lf=s(", "),Ws=a("code"),rf=s("causal-lm-with-past"),pf=p(),Gs=a("td"),Ys=a("code"),ff=s("AutoModelForCausalLM"),df=p(),dt=a("tr"),ct=a("td"),Us=a("code"),cf=s("default"),hf=s(", "),Ks=a("code"),uf=s("default-with-past"),mf=p(),Js=a("td"),Qs=a("code"),gf=s("AutoModel"),_f=p(),ht=a("tr"),Zs=a("td"),en=a("code"),vf=s("masked-lm"),Ef=p(),tn=a("td"),on=a("code"),$f=s("AutoModelForMaskedLM"),wf=p(),ut=a("tr"),sn=a("td"),nn=a("code"),xf=s("question-answering"),bf=p(),an=a("td"),ln=a("code"),kf=s("AutoModelForQuestionAnswering"),yf=p(),mt=a("tr"),gt=a("td"),rn=a("code"),Of=s("seq2seq-lm"),Tf=s(", "),pn=a("code"),Nf=s("seq2seq-lm-with-past"),jf=p(),fn=a("td"),dn=a("code"),Cf=s("AutoModelForSeq2SeqLM"),Df=p(),_t=a("tr"),cn=a("td"),hn=a("code"),qf=s("sequence-classification"),Lf=p(),un=a("td"),mn=a("code"),Af=s("AutoModelForSequenceClassification"),If=p(),vt=a("tr"),gn=a("td"),_n=a("code"),Pf=s("token-classification"),Xf=p(),vn=a("td"),En=a("code"),Bf=s("AutoModelForTokenClassification"),Ia=p(),Te=a("p"),Mf=s(`For each configuration, you can find the list of supported features via the
`),Kt=a("a"),Rf=s("FeaturesManager"),Ff=s(". For example, for DistilBERT we have:"),Pa=p(),j(Et.$$.fragment),Xa=p(),oe=a("p"),Sf=s("You can then pass one of these features to the "),$n=a("code"),zf=s("--feature"),Vf=s(` argument in the
`),wn=a("code"),Hf=s("transformers.onnx"),Wf=s(` package. For example, to export a text-classification model we can
pick a fine-tuned model from the Hub and run:`),Ba=p(),j($t.$$.fragment),Ma=p(),Jt=a("p"),Gf=s("This displays the following logs:"),Ra=p(),j(wt.$$.fragment),Fa=p(),Y=a("p"),Yf=s("Notice that in this case, the output names from the fine-tuned model are "),xn=a("code"),Uf=s("logits"),Kf=s(`
instead of the `),bn=a("code"),Jf=s("last_hidden_state"),Qf=s(" we saw with the "),kn=a("code"),Zf=s("distilbert-base-uncased"),ed=s(` checkpoint
earlier. This is expected since the fine-tuned model has a sequence classification head.`),Sa=p(),j(Ne.$$.fragment),za=p(),j(je.$$.fragment),Va=p(),he=a("h2"),Ce=a("a"),yn=a("span"),j(xt.$$.fragment),td=p(),On=a("span"),od=s("Exporting a model for an unsupported architecture"),Ha=p(),Qt=a("p"),sd=s(`If you wish to export a model whose architecture is not natively supported by the
library, there are three main steps to follow:`),Wa=p(),se=a("ol"),Tn=a("li"),nd=s("Implement a custom ONNX configuration."),ad=p(),Nn=a("li"),ld=s("Export the model to ONNX."),rd=p(),jn=a("li"),id=s("Validate the outputs of the PyTorch and exported models."),Ga=p(),Zt=a("p"),pd=s(`In this section, we\u2019ll look at how DistilBERT was implemented to show what\u2019s involved
with each step.`),Ya=p(),ue=a("h3"),De=a("a"),Cn=a("span"),j(bt.$$.fragment),fd=p(),Dn=a("span"),dd=s("Implementing a custom ONNX configuration"),Ua=p(),eo=a("p"),cd=s(`Let\u2019s start with the ONNX configuration object. We provide three abstract classes that
you should inherit from, depending on the type of model architecture you wish to export:`),Ka=p(),ne=a("ul"),to=a("li"),hd=s("Encoder-based models inherit from "),oo=a("a"),ud=s("OnnxConfig"),md=p(),so=a("li"),gd=s("Decoder-based models inherit from "),no=a("a"),_d=s("OnnxConfigWithPast"),vd=p(),ao=a("li"),Ed=s("Encoder-decoder models inherit from "),lo=a("a"),$d=s("OnnxSeq2SeqConfigWithPast"),Ja=p(),j(qe.$$.fragment),Qa=p(),Le=a("p"),wd=s(`Since DistilBERT is an encoder-based model, its configuration inherits from
`),qn=a("code"),xd=s("OnnxConfig"),bd=s(":"),Za=p(),j(kt.$$.fragment),el=p(),z=a("p"),kd=s("Every configuration object must implement the "),Ln=a("code"),yd=s("inputs"),Od=s(` property and return a mapping,
where each key corresponds to an expected input, and each value indicates the axis of
that input. For DistilBERT, we can see that two inputs are required: `),An=a("code"),Td=s("input_ids"),Nd=s(` and
`),In=a("code"),jd=s("attention_mask"),Cd=s(". These inputs have the same shape of "),Pn=a("code"),Dd=s("(batch_size, sequence_length)"),qd=s(`
which is why we see the same axes used in the configuration.`),tl=p(),j(Ae.$$.fragment),ol=p(),ro=a("p"),Ld=s(`Once you have implemented an ONNX configuration, you can instantiate it by providing the
base model\u2019s configuration as follows:`),sl=p(),j(yt.$$.fragment),nl=p(),io=a("p"),Ad=s(`The resulting object has several useful properties. For example, you can view the ONNX
operator set that will be used during the export:`),al=p(),j(Ot.$$.fragment),ll=p(),po=a("p"),Id=s("You can also view the outputs associated with the model as follows:"),rl=p(),j(Tt.$$.fragment),il=p(),V=a("p"),Pd=s(`Notice that the outputs property follows the same structure as the inputs; it returns an
`),Xn=a("code"),Xd=s("OrderedDict"),Bd=s(` of named outputs and their shapes. The output structure is linked to the
choice of feature that the configuration is initialised with. By default, the ONNX
configuration is initialized with the `),Bn=a("code"),Md=s("default"),Rd=s(` feature that corresponds to exporting a
model loaded with the `),Mn=a("code"),Fd=s("AutoModel"),Sd=s(` class. If you want to export a model for another task,
just provide a different feature to the `),Rn=a("code"),zd=s("task"),Vd=s(` argument when you initialize the ONNX
configuration. For example, if we wished to export DistilBERT with a sequence
classification head, we could use:`),pl=p(),j(Nt.$$.fragment),fl=p(),j(Ie.$$.fragment),dl=p(),me=a("h3"),Pe=a("a"),Fn=a("span"),j(jt.$$.fragment),Hd=p(),Sn=a("span"),Wd=s("Exporting the model"),cl=p(),ae=a("p"),Gd=s(`Once you have implemented the ONNX configuration, the next step is to export the model.
Here we can use the `),zn=a("code"),Yd=s("export()"),Ud=s(" function provided by the "),Vn=a("code"),Kd=s("transformers.onnx"),Jd=s(` package.
This function expects the ONNX configuration, along with the base model and tokenizer,
and the path to save the exported file:`),hl=p(),j(Ct.$$.fragment),ul=p(),S=a("p"),Qd=s("The "),Hn=a("code"),Zd=s("onnx_inputs"),ec=s(" and "),Wn=a("code"),tc=s("onnx_outputs"),oc=s(" returned by the "),Gn=a("code"),sc=s("export()"),nc=s(` function are lists of
the keys defined in the `),Yn=a("code"),ac=s("inputs"),lc=s(" and "),Un=a("code"),rc=s("outputs"),ic=s(` properties of the configuration. Once the
model is exported, you can test that the model is well formed as follows:`),ml=p(),j(Dt.$$.fragment),gl=p(),j(Xe.$$.fragment),_l=p(),ge=a("h3"),Be=a("a"),Kn=a("span"),j(qt.$$.fragment),pc=p(),Jn=a("span"),fc=s("Validating the model outputs"),vl=p(),le=a("p"),dc=s(`The final step is to validate that the outputs from the base and exported model agree
within some absolute tolerance. Here we can use the `),Qn=a("code"),cc=s("validate_model_outputs()"),hc=s(` function
provided by the `),Zn=a("code"),uc=s("transformers.onnx"),mc=s(" package as follows:"),El=p(),j(Lt.$$.fragment),$l=p(),Me=a("p"),gc=s("This function uses the "),fo=a("a"),_c=s("generate_dummy_inputs()"),vc=s(` method to
generate inputs for the base and exported model, and the absolute tolerance can be
defined in the configuration. We generally find numerical agreement in the 1e-6 to 1e-4
range, although anything smaller than 1e-3 is likely to be OK.`),wl=p(),_e=a("h2"),Re=a("a"),ea=a("span"),j(At.$$.fragment),Ec=p(),ta=a("span"),$c=s("Contributing a new configuration to \u{1F917} Transformers"),xl=p(),co=a("p"),wc=s(`We are looking to expand the set of ready-made configurations and welcome contributions
from the community! If you would like to contribute your addition to the library, you
will need to:`),bl=p(),re=a("ul"),It=a("li"),xc=s("Implement the ONNX configuration in the corresponding "),oa=a("code"),bc=s("configuration_<model_name>.py"),kc=s(`
file`),yc=p(),ho=a("li"),Oc=s(`Include the model architecture and corresponding features in
`),sa=a("code"),Tc=s("~onnx.features.FeatureManager"),Nc=p(),uo=a("li"),jc=s("Add your model architecture to the tests in "),na=a("code"),Cc=s("test_onnx_v2.py"),kl=p(),Fe=a("p"),Dc=s("Check out how the configuration for "),Pt=a("a"),qc=s(`IBERT was
contributed`),Lc=s(` to get an
idea of what\u2019s involved.`),this.h()},l(t){const i=ng('[data-svelte="svelte-1phssyn"]',document.head);c=l(i,"META",{name:!0,content:!0}),i.forEach(o),$=f(t),m=l(t,"H1",{class:!0});var Xt=r(m);E=l(Xt,"A",{id:!0,class:!0,href:!0});var aa=r(E);w=l(aa,"SPAN",{});var la=r(w);C(_.$$.fragment,la),la.forEach(o),aa.forEach(o),x=f(Xt),b=l(Xt,"SPAN",{});var ra=r(b);k=n(ra,"Export to ONNX"),ra.forEach(o),Xt.forEach(o),T=f(t),I=l(t,"P",{});var Bt=r(I);y=n(Bt,`If you need to deploy \u{1F917} Transformers models in production environments, we recommend
exporting them to a serialized format that can be loaded and executed on specialized
runtimes and hardware. In this guide, we\u2019ll show you how to export \u{1F917} Transformers
models to `),O=l(Bt,"A",{href:!0,rel:!0});var ia=r(O);g=n(ia,"ONNX (Open Neural Network eXchange)"),ia.forEach(o),N=n(Bt,"."),Bt.forEach(o),M=f(t),C(R.$$.fragment,t),Q=f(t),W=l(t,"P",{});var Mt=r(W);He=n(Mt,`ONNX is an open standard that defines a common set of operators and a common file format
to represent deep learning models in a wide variety of frameworks, including PyTorch and
TensorFlow. When a model is exported to the ONNX format, these operators are used to
construct a computational graph (often called an `),K=l(Mt,"EM",{});var pa=r(K);We=n(pa,"intermediate representation"),pa.forEach(o),Ge=n(Mt,`) which
represents the flow of data through the neural network.`),Mt.forEach(o),Z=f(t),P=l(t,"P",{});var Mc=r(P);Ft=n(Mc,`By exposing a graph with standardized operators and data types, ONNX makes it easy to
switch between frameworks. For example, a model trained in PyTorch can be exported to
ONNX format and then imported in TensorFlow (and vice versa).`),Mc.forEach(o),Ye=f(t),J=l(t,"P",{});var Ol=r(J);St=n(Ol,"\u{1F917} Transformers provides a "),fe=l(Ol,"A",{href:!0});var Rc=r(fe);ve=l(Rc,"CODE",{});var Fc=r(ve);zt=n(Fc,"transformers.onnx"),Fc.forEach(o),Rc.forEach(o),or=n(Ol,` package that enables
you to convert model checkpoints to an ONNX graph by leveraging configuration objects.
These configuration objects come ready made for a number of model architectures, and are
designed to be easily extendable to other architectures.`),Ol.forEach(o),fa=f(t),Vt=l(t,"P",{});var Sc=r(Vt);sr=n(Sc,"Ready-made configurations include the following architectures:"),Sc.forEach(o),da=f(t),h=l(t,"UL",{});var u=r(h);bo=l(u,"LI",{});var zc=r(bo);nr=n(zc,"ALBERT"),zc.forEach(o),ar=f(u),ko=l(u,"LI",{});var Vc=r(ko);lr=n(Vc,"BART"),Vc.forEach(o),rr=f(u),yo=l(u,"LI",{});var Hc=r(yo);ir=n(Hc,"BEiT"),Hc.forEach(o),pr=f(u),Oo=l(u,"LI",{});var Wc=r(Oo);fr=n(Wc,"BERT"),Wc.forEach(o),dr=f(u),To=l(u,"LI",{});var Gc=r(To);cr=n(Gc,"BigBird"),Gc.forEach(o),hr=f(u),No=l(u,"LI",{});var Yc=r(No);ur=n(Yc,"BigBird-Pegasus"),Yc.forEach(o),mr=f(u),jo=l(u,"LI",{});var Uc=r(jo);gr=n(Uc,"Blenderbot"),Uc.forEach(o),_r=f(u),Co=l(u,"LI",{});var Kc=r(Co);vr=n(Kc,"BlenderbotSmall"),Kc.forEach(o),Er=f(u),Do=l(u,"LI",{});var Jc=r(Do);$r=n(Jc,"BLOOM"),Jc.forEach(o),wr=f(u),qo=l(u,"LI",{});var Qc=r(qo);xr=n(Qc,"CamemBERT"),Qc.forEach(o),br=f(u),Lo=l(u,"LI",{});var Zc=r(Lo);kr=n(Zc,"CLIP"),Zc.forEach(o),yr=f(u),Ao=l(u,"LI",{});var eh=r(Ao);Or=n(eh,"CodeGen"),eh.forEach(o),Tr=f(u),Io=l(u,"LI",{});var th=r(Io);Nr=n(th,"Conditional DETR"),th.forEach(o),jr=f(u),Po=l(u,"LI",{});var oh=r(Po);Cr=n(oh,"ConvBERT"),oh.forEach(o),Dr=f(u),Xo=l(u,"LI",{});var sh=r(Xo);qr=n(sh,"ConvNeXT"),sh.forEach(o),Lr=f(u),Bo=l(u,"LI",{});var nh=r(Bo);Ar=n(nh,"Data2VecText"),nh.forEach(o),Ir=f(u),Mo=l(u,"LI",{});var ah=r(Mo);Pr=n(ah,"Data2VecVision"),ah.forEach(o),Xr=f(u),Ro=l(u,"LI",{});var lh=r(Ro);Br=n(lh,"DeBERTa"),lh.forEach(o),Mr=f(u),Fo=l(u,"LI",{});var rh=r(Fo);Rr=n(rh,"DeBERTa-v2"),rh.forEach(o),Fr=f(u),So=l(u,"LI",{});var ih=r(So);Sr=n(ih,"DeiT"),ih.forEach(o),zr=f(u),zo=l(u,"LI",{});var ph=r(zo);Vr=n(ph,"DETR"),ph.forEach(o),Hr=f(u),Vo=l(u,"LI",{});var fh=r(Vo);Wr=n(fh,"DistilBERT"),fh.forEach(o),Gr=f(u),Ho=l(u,"LI",{});var dh=r(Ho);Yr=n(dh,"ELECTRA"),dh.forEach(o),Ur=f(u),Wo=l(u,"LI",{});var ch=r(Wo);Kr=n(ch,"ERNIE"),ch.forEach(o),Jr=f(u),Go=l(u,"LI",{});var hh=r(Go);Qr=n(hh,"FlauBERT"),hh.forEach(o),Zr=f(u),Yo=l(u,"LI",{});var uh=r(Yo);ei=n(uh,"GPT Neo"),uh.forEach(o),ti=f(u),Uo=l(u,"LI",{});var mh=r(Uo);oi=n(mh,"GPT-J"),mh.forEach(o),si=f(u),Ko=l(u,"LI",{});var gh=r(Ko);ni=n(gh,"GroupViT"),gh.forEach(o),ai=f(u),Jo=l(u,"LI",{});var _h=r(Jo);li=n(_h,"I-BERT"),_h.forEach(o),ri=f(u),Qo=l(u,"LI",{});var vh=r(Qo);ii=n(vh,"ImageGPT"),vh.forEach(o),pi=f(u),Zo=l(u,"LI",{});var Eh=r(Zo);fi=n(Eh,"LayoutLM"),Eh.forEach(o),di=f(u),es=l(u,"LI",{});var $h=r(es);ci=n($h,"LayoutLMv3"),$h.forEach(o),hi=f(u),ts=l(u,"LI",{});var wh=r(ts);ui=n(wh,"LeViT"),wh.forEach(o),mi=f(u),os=l(u,"LI",{});var xh=r(os);gi=n(xh,"Longformer"),xh.forEach(o),_i=f(u),ss=l(u,"LI",{});var bh=r(ss);vi=n(bh,"LongT5"),bh.forEach(o),Ei=f(u),ns=l(u,"LI",{});var kh=r(ns);$i=n(kh,"M2M100"),kh.forEach(o),wi=f(u),as=l(u,"LI",{});var yh=r(as);xi=n(yh,"Marian"),yh.forEach(o),bi=f(u),ls=l(u,"LI",{});var Oh=r(ls);ki=n(Oh,"mBART"),Oh.forEach(o),yi=f(u),rs=l(u,"LI",{});var Th=r(rs);Oi=n(Th,"MobileBERT"),Th.forEach(o),Ti=f(u),is=l(u,"LI",{});var Nh=r(is);Ni=n(Nh,"MobileViT"),Nh.forEach(o),ji=f(u),ps=l(u,"LI",{});var jh=r(ps);Ci=n(jh,"MT5"),jh.forEach(o),Di=f(u),fs=l(u,"LI",{});var Ch=r(fs);qi=n(Ch,"OpenAI GPT-2"),Ch.forEach(o),Li=f(u),ds=l(u,"LI",{});var Dh=r(ds);Ai=n(Dh,"OWL-ViT"),Dh.forEach(o),Ii=f(u),cs=l(u,"LI",{});var qh=r(cs);Pi=n(qh,"Perceiver"),qh.forEach(o),Xi=f(u),hs=l(u,"LI",{});var Lh=r(hs);Bi=n(Lh,"PLBart"),Lh.forEach(o),Mi=f(u),us=l(u,"LI",{});var Ah=r(us);Ri=n(Ah,"ResNet"),Ah.forEach(o),Fi=f(u),ms=l(u,"LI",{});var Ih=r(ms);Si=n(Ih,"RoBERTa"),Ih.forEach(o),zi=f(u),gs=l(u,"LI",{});var Ph=r(gs);Vi=n(Ph,"RoFormer"),Ph.forEach(o),Hi=f(u),_s=l(u,"LI",{});var Xh=r(_s);Wi=n(Xh,"SegFormer"),Xh.forEach(o),Gi=f(u),vs=l(u,"LI",{});var Bh=r(vs);Yi=n(Bh,"SqueezeBERT"),Bh.forEach(o),Ui=f(u),Es=l(u,"LI",{});var Mh=r(Es);Ki=n(Mh,"Swin Transformer"),Mh.forEach(o),Ji=f(u),$s=l(u,"LI",{});var Rh=r($s);Qi=n(Rh,"T5"),Rh.forEach(o),Zi=f(u),ws=l(u,"LI",{});var Fh=r(ws);ep=n(Fh,"Table Transformer"),Fh.forEach(o),tp=f(u),xs=l(u,"LI",{});var Sh=r(xs);op=n(Sh,"Vision Encoder decoder"),Sh.forEach(o),sp=f(u),bs=l(u,"LI",{});var zh=r(bs);np=n(zh,"ViT"),zh.forEach(o),ap=f(u),ks=l(u,"LI",{});var Vh=r(ks);lp=n(Vh,"Whisper"),Vh.forEach(o),rp=f(u),ys=l(u,"LI",{});var Hh=r(ys);ip=n(Hh,"XLM"),Hh.forEach(o),pp=f(u),Os=l(u,"LI",{});var Wh=r(Os);fp=n(Wh,"XLM-RoBERTa"),Wh.forEach(o),dp=f(u),Ts=l(u,"LI",{});var Gh=r(Ts);cp=n(Gh,"XLM-RoBERTa-XL"),Gh.forEach(o),hp=f(u),Ns=l(u,"LI",{});var Yh=r(Ns);up=n(Yh,"YOLOS"),Yh.forEach(o),u.forEach(o),ca=f(t),Ht=l(t,"P",{});var Uh=r(Ht);mp=n(Uh,"In the next two sections, we\u2019ll show you how to:"),Uh.forEach(o),ha=f(t),Ee=l(t,"UL",{});var Tl=r(Ee);Ue=l(Tl,"LI",{});var Nl=r(Ue);gp=n(Nl,"Export a supported model using the "),js=l(Nl,"CODE",{});var Kh=r(js);_p=n(Kh,"transformers.onnx"),Kh.forEach(o),vp=n(Nl," package."),Nl.forEach(o),Ep=f(Tl),Cs=l(Tl,"LI",{});var Jh=r(Cs);$p=n(Jh,"Export a custom model for an unsupported architecture."),Jh.forEach(o),Tl.forEach(o),ua=f(t),de=l(t,"H2",{class:!0});var jl=r(de);$e=l(jl,"A",{id:!0,class:!0,href:!0});var Qh=r($e);Ds=l(Qh,"SPAN",{});var Zh=r(Ds);C(Ke.$$.fragment,Zh),Zh.forEach(o),Qh.forEach(o),wp=f(jl),qs=l(jl,"SPAN",{});var eu=r(qs);xp=n(eu,"Exporting a model to ONNX"),eu.forEach(o),jl.forEach(o),ma=f(t),Wt=l(t,"P",{});var tu=r(Wt);bp=n(tu,`To export a \u{1F917} Transformers model to ONNX, you\u2019ll first need to install some extra
dependencies:`),tu.forEach(o),ga=f(t),C(Je.$$.fragment,t),_a=f(t),we=l(t,"P",{});var Cl=r(we);kp=n(Cl,"The "),Ls=l(Cl,"CODE",{});var ou=r(Ls);yp=n(ou,"transformers.onnx"),ou.forEach(o),Op=n(Cl," package can then be used as a Python module:"),Cl.forEach(o),va=f(t),C(Qe.$$.fragment,t),Ea=f(t),Gt=l(t,"P",{});var su=r(Gt);Tp=n(su,"Exporting a checkpoint using a ready-made configuration can be done as follows:"),su.forEach(o),$a=f(t),C(Ze.$$.fragment,t),wa=f(t),Yt=l(t,"P",{});var nu=r(Yt);Np=n(nu,"You should see the following logs:"),nu.forEach(o),xa=f(t),C(et.$$.fragment,t),ba=f(t),ee=l(t,"P",{});var mo=r(ee);jp=n(mo,"This exports an ONNX graph of the checkpoint defined by the "),As=l(mo,"CODE",{});var au=r(As);Cp=n(au,"--model"),au.forEach(o),Dp=n(mo,` argument. In this
example, it is `),Is=l(mo,"CODE",{});var lu=r(Is);qp=n(lu,"distilbert-base-uncased"),lu.forEach(o),Lp=n(mo,`, but it can be any checkpoint on the Hugging
Face Hub or one that\u2019s stored locally.`),mo.forEach(o),ka=f(t),G=l(t,"P",{});var Se=r(G);Ap=n(Se,"The resulting "),Ps=l(Se,"CODE",{});var ru=r(Ps);Ip=n(ru,"model.onnx"),ru.forEach(o),Pp=n(Se," file can then be run on one of the "),tt=l(Se,"A",{href:!0,rel:!0});var iu=r(tt);Xp=n(iu,`many
accelerators`),iu.forEach(o),Bp=n(Se,` that support the ONNX
standard. For example, we can load and run the model with `),ot=l(Se,"A",{href:!0,rel:!0});var pu=r(ot);Mp=n(pu,`ONNX
Runtime`),pu.forEach(o),Rp=n(Se," as follows:"),Se.forEach(o),ya=f(t),C(st.$$.fragment,t),Oa=f(t),xe=l(t,"P",{});var Dl=r(xe);Fp=n(Dl,"The required output names (like "),Xs=l(Dl,"CODE",{});var fu=r(Xs);Sp=n(fu,'["last_hidden_state"]'),fu.forEach(o),zp=n(Dl,`) can be obtained by taking a
look at the ONNX configuration of each model. For example, for DistilBERT we have:`),Dl.forEach(o),Ta=f(t),C(nt.$$.fragment,t),Na=f(t),be=l(t,"P",{});var ql=r(be);Vp=n(ql,`The process is identical for TensorFlow checkpoints on the Hub. For example, we can
export a pure TensorFlow checkpoint from the `),at=l(ql,"A",{href:!0,rel:!0});var du=r(at);Hp=n(du,`Keras
organization`),du.forEach(o),Wp=n(ql," as follows:"),ql.forEach(o),ja=f(t),C(lt.$$.fragment,t),Ca=f(t),Ut=l(t,"P",{});var cu=r(Ut);Gp=n(cu,`To export a model that\u2019s stored locally, you\u2019ll need to have the model\u2019s weights and
tokenizer files stored in a directory. For example, we can load and save a checkpoint as
follows:`),cu.forEach(o),Da=f(t),C(ke.$$.fragment,t),qa=f(t),ce=l(t,"H2",{class:!0});var Ll=r(ce);ye=l(Ll,"A",{id:!0,class:!0,href:!0});var hu=r(ye);Bs=l(hu,"SPAN",{});var uu=r(Bs);C(rt.$$.fragment,uu),uu.forEach(o),hu.forEach(o),Yp=f(Ll),Ms=l(Ll,"SPAN",{});var mu=r(Ms);Up=n(mu,"Selecting features for different model tasks"),mu.forEach(o),Ll.forEach(o),La=f(t),te=l(t,"P",{});var go=r(te);Kp=n(go,"Each ready-made configuration comes with a set of "),Rs=l(go,"EM",{});var gu=r(Rs);Jp=n(gu,"features"),gu.forEach(o),Qp=n(go,` that enable you to export
models for different types of tasks. As shown in the table below, each feature is
associated with a different `),Fs=l(go,"CODE",{});var _u=r(Fs);Zp=n(_u,"AutoClass"),_u.forEach(o),ef=n(go,":"),go.forEach(o),Aa=f(t),Oe=l(t,"TABLE",{});var Al=r(Oe);Ss=l(Al,"THEAD",{});var vu=r(Ss);it=l(vu,"TR",{});var Il=r(it);zs=l(Il,"TH",{});var Eu=r(zs);tf=n(Eu,"Feature"),Eu.forEach(o),of=f(Il),Vs=l(Il,"TH",{});var $u=r(Vs);sf=n($u,"Auto Class"),$u.forEach(o),Il.forEach(o),vu.forEach(o),nf=f(Al),F=l(Al,"TBODY",{});var H=r(F);pt=l(H,"TR",{});var Pl=r(pt);ft=l(Pl,"TD",{});var Xl=r(ft);Hs=l(Xl,"CODE",{});var wu=r(Hs);af=n(wu,"causal-lm"),wu.forEach(o),lf=n(Xl,", "),Ws=l(Xl,"CODE",{});var xu=r(Ws);rf=n(xu,"causal-lm-with-past"),xu.forEach(o),Xl.forEach(o),pf=f(Pl),Gs=l(Pl,"TD",{});var bu=r(Gs);Ys=l(bu,"CODE",{});var ku=r(Ys);ff=n(ku,"AutoModelForCausalLM"),ku.forEach(o),bu.forEach(o),Pl.forEach(o),df=f(H),dt=l(H,"TR",{});var Bl=r(dt);ct=l(Bl,"TD",{});var Ml=r(ct);Us=l(Ml,"CODE",{});var yu=r(Us);cf=n(yu,"default"),yu.forEach(o),hf=n(Ml,", "),Ks=l(Ml,"CODE",{});var Ou=r(Ks);uf=n(Ou,"default-with-past"),Ou.forEach(o),Ml.forEach(o),mf=f(Bl),Js=l(Bl,"TD",{});var Tu=r(Js);Qs=l(Tu,"CODE",{});var Nu=r(Qs);gf=n(Nu,"AutoModel"),Nu.forEach(o),Tu.forEach(o),Bl.forEach(o),_f=f(H),ht=l(H,"TR",{});var Rl=r(ht);Zs=l(Rl,"TD",{});var ju=r(Zs);en=l(ju,"CODE",{});var Cu=r(en);vf=n(Cu,"masked-lm"),Cu.forEach(o),ju.forEach(o),Ef=f(Rl),tn=l(Rl,"TD",{});var Du=r(tn);on=l(Du,"CODE",{});var qu=r(on);$f=n(qu,"AutoModelForMaskedLM"),qu.forEach(o),Du.forEach(o),Rl.forEach(o),wf=f(H),ut=l(H,"TR",{});var Fl=r(ut);sn=l(Fl,"TD",{});var Lu=r(sn);nn=l(Lu,"CODE",{});var Au=r(nn);xf=n(Au,"question-answering"),Au.forEach(o),Lu.forEach(o),bf=f(Fl),an=l(Fl,"TD",{});var Iu=r(an);ln=l(Iu,"CODE",{});var Pu=r(ln);kf=n(Pu,"AutoModelForQuestionAnswering"),Pu.forEach(o),Iu.forEach(o),Fl.forEach(o),yf=f(H),mt=l(H,"TR",{});var Sl=r(mt);gt=l(Sl,"TD",{});var zl=r(gt);rn=l(zl,"CODE",{});var Xu=r(rn);Of=n(Xu,"seq2seq-lm"),Xu.forEach(o),Tf=n(zl,", "),pn=l(zl,"CODE",{});var Bu=r(pn);Nf=n(Bu,"seq2seq-lm-with-past"),Bu.forEach(o),zl.forEach(o),jf=f(Sl),fn=l(Sl,"TD",{});var Mu=r(fn);dn=l(Mu,"CODE",{});var Ru=r(dn);Cf=n(Ru,"AutoModelForSeq2SeqLM"),Ru.forEach(o),Mu.forEach(o),Sl.forEach(o),Df=f(H),_t=l(H,"TR",{});var Vl=r(_t);cn=l(Vl,"TD",{});var Fu=r(cn);hn=l(Fu,"CODE",{});var Su=r(hn);qf=n(Su,"sequence-classification"),Su.forEach(o),Fu.forEach(o),Lf=f(Vl),un=l(Vl,"TD",{});var zu=r(un);mn=l(zu,"CODE",{});var Vu=r(mn);Af=n(Vu,"AutoModelForSequenceClassification"),Vu.forEach(o),zu.forEach(o),Vl.forEach(o),If=f(H),vt=l(H,"TR",{});var Hl=r(vt);gn=l(Hl,"TD",{});var Hu=r(gn);_n=l(Hu,"CODE",{});var Wu=r(_n);Pf=n(Wu,"token-classification"),Wu.forEach(o),Hu.forEach(o),Xf=f(Hl),vn=l(Hl,"TD",{});var Gu=r(vn);En=l(Gu,"CODE",{});var Yu=r(En);Bf=n(Yu,"AutoModelForTokenClassification"),Yu.forEach(o),Gu.forEach(o),Hl.forEach(o),H.forEach(o),Al.forEach(o),Ia=f(t),Te=l(t,"P",{});var Wl=r(Te);Mf=n(Wl,`For each configuration, you can find the list of supported features via the
`),Kt=l(Wl,"A",{href:!0});var Uu=r(Kt);Rf=n(Uu,"FeaturesManager"),Uu.forEach(o),Ff=n(Wl,". For example, for DistilBERT we have:"),Wl.forEach(o),Pa=f(t),C(Et.$$.fragment,t),Xa=f(t),oe=l(t,"P",{});var _o=r(oe);Sf=n(_o,"You can then pass one of these features to the "),$n=l(_o,"CODE",{});var Ku=r($n);zf=n(Ku,"--feature"),Ku.forEach(o),Vf=n(_o,` argument in the
`),wn=l(_o,"CODE",{});var Ju=r(wn);Hf=n(Ju,"transformers.onnx"),Ju.forEach(o),Wf=n(_o,` package. For example, to export a text-classification model we can
pick a fine-tuned model from the Hub and run:`),_o.forEach(o),Ba=f(t),C($t.$$.fragment,t),Ma=f(t),Jt=l(t,"P",{});var Qu=r(Jt);Gf=n(Qu,"This displays the following logs:"),Qu.forEach(o),Ra=f(t),C(wt.$$.fragment,t),Fa=f(t),Y=l(t,"P",{});var ze=r(Y);Yf=n(ze,"Notice that in this case, the output names from the fine-tuned model are "),xn=l(ze,"CODE",{});var Zu=r(xn);Uf=n(Zu,"logits"),Zu.forEach(o),Kf=n(ze,`
instead of the `),bn=l(ze,"CODE",{});var em=r(bn);Jf=n(em,"last_hidden_state"),em.forEach(o),Qf=n(ze," we saw with the "),kn=l(ze,"CODE",{});var tm=r(kn);Zf=n(tm,"distilbert-base-uncased"),tm.forEach(o),ed=n(ze,` checkpoint
earlier. This is expected since the fine-tuned model has a sequence classification head.`),ze.forEach(o),Sa=f(t),C(Ne.$$.fragment,t),za=f(t),C(je.$$.fragment,t),Va=f(t),he=l(t,"H2",{class:!0});var Gl=r(he);Ce=l(Gl,"A",{id:!0,class:!0,href:!0});var om=r(Ce);yn=l(om,"SPAN",{});var sm=r(yn);C(xt.$$.fragment,sm),sm.forEach(o),om.forEach(o),td=f(Gl),On=l(Gl,"SPAN",{});var nm=r(On);od=n(nm,"Exporting a model for an unsupported architecture"),nm.forEach(o),Gl.forEach(o),Ha=f(t),Qt=l(t,"P",{});var am=r(Qt);sd=n(am,`If you wish to export a model whose architecture is not natively supported by the
library, there are three main steps to follow:`),am.forEach(o),Wa=f(t),se=l(t,"OL",{});var vo=r(se);Tn=l(vo,"LI",{});var lm=r(Tn);nd=n(lm,"Implement a custom ONNX configuration."),lm.forEach(o),ad=f(vo),Nn=l(vo,"LI",{});var rm=r(Nn);ld=n(rm,"Export the model to ONNX."),rm.forEach(o),rd=f(vo),jn=l(vo,"LI",{});var im=r(jn);id=n(im,"Validate the outputs of the PyTorch and exported models."),im.forEach(o),vo.forEach(o),Ga=f(t),Zt=l(t,"P",{});var pm=r(Zt);pd=n(pm,`In this section, we\u2019ll look at how DistilBERT was implemented to show what\u2019s involved
with each step.`),pm.forEach(o),Ya=f(t),ue=l(t,"H3",{class:!0});var Yl=r(ue);De=l(Yl,"A",{id:!0,class:!0,href:!0});var fm=r(De);Cn=l(fm,"SPAN",{});var dm=r(Cn);C(bt.$$.fragment,dm),dm.forEach(o),fm.forEach(o),fd=f(Yl),Dn=l(Yl,"SPAN",{});var cm=r(Dn);dd=n(cm,"Implementing a custom ONNX configuration"),cm.forEach(o),Yl.forEach(o),Ua=f(t),eo=l(t,"P",{});var hm=r(eo);cd=n(hm,`Let\u2019s start with the ONNX configuration object. We provide three abstract classes that
you should inherit from, depending on the type of model architecture you wish to export:`),hm.forEach(o),Ka=f(t),ne=l(t,"UL",{});var Eo=r(ne);to=l(Eo,"LI",{});var Ac=r(to);hd=n(Ac,"Encoder-based models inherit from "),oo=l(Ac,"A",{href:!0});var um=r(oo);ud=n(um,"OnnxConfig"),um.forEach(o),Ac.forEach(o),md=f(Eo),so=l(Eo,"LI",{});var Ic=r(so);gd=n(Ic,"Decoder-based models inherit from "),no=l(Ic,"A",{href:!0});var mm=r(no);_d=n(mm,"OnnxConfigWithPast"),mm.forEach(o),Ic.forEach(o),vd=f(Eo),ao=l(Eo,"LI",{});var Pc=r(ao);Ed=n(Pc,"Encoder-decoder models inherit from "),lo=l(Pc,"A",{href:!0});var gm=r(lo);$d=n(gm,"OnnxSeq2SeqConfigWithPast"),gm.forEach(o),Pc.forEach(o),Eo.forEach(o),Ja=f(t),C(qe.$$.fragment,t),Qa=f(t),Le=l(t,"P",{});var Ul=r(Le);wd=n(Ul,`Since DistilBERT is an encoder-based model, its configuration inherits from
`),qn=l(Ul,"CODE",{});var _m=r(qn);xd=n(_m,"OnnxConfig"),_m.forEach(o),bd=n(Ul,":"),Ul.forEach(o),Za=f(t),C(kt.$$.fragment,t),el=f(t),z=l(t,"P",{});var ie=r(z);kd=n(ie,"Every configuration object must implement the "),Ln=l(ie,"CODE",{});var vm=r(Ln);yd=n(vm,"inputs"),vm.forEach(o),Od=n(ie,` property and return a mapping,
where each key corresponds to an expected input, and each value indicates the axis of
that input. For DistilBERT, we can see that two inputs are required: `),An=l(ie,"CODE",{});var Em=r(An);Td=n(Em,"input_ids"),Em.forEach(o),Nd=n(ie,` and
`),In=l(ie,"CODE",{});var $m=r(In);jd=n($m,"attention_mask"),$m.forEach(o),Cd=n(ie,". These inputs have the same shape of "),Pn=l(ie,"CODE",{});var wm=r(Pn);Dd=n(wm,"(batch_size, sequence_length)"),wm.forEach(o),qd=n(ie,`
which is why we see the same axes used in the configuration.`),ie.forEach(o),tl=f(t),C(Ae.$$.fragment,t),ol=f(t),ro=l(t,"P",{});var xm=r(ro);Ld=n(xm,`Once you have implemented an ONNX configuration, you can instantiate it by providing the
base model\u2019s configuration as follows:`),xm.forEach(o),sl=f(t),C(yt.$$.fragment,t),nl=f(t),io=l(t,"P",{});var bm=r(io);Ad=n(bm,`The resulting object has several useful properties. For example, you can view the ONNX
operator set that will be used during the export:`),bm.forEach(o),al=f(t),C(Ot.$$.fragment,t),ll=f(t),po=l(t,"P",{});var km=r(po);Id=n(km,"You can also view the outputs associated with the model as follows:"),km.forEach(o),rl=f(t),C(Tt.$$.fragment,t),il=f(t),V=l(t,"P",{});var pe=r(V);Pd=n(pe,`Notice that the outputs property follows the same structure as the inputs; it returns an
`),Xn=l(pe,"CODE",{});var ym=r(Xn);Xd=n(ym,"OrderedDict"),ym.forEach(o),Bd=n(pe,` of named outputs and their shapes. The output structure is linked to the
choice of feature that the configuration is initialised with. By default, the ONNX
configuration is initialized with the `),Bn=l(pe,"CODE",{});var Om=r(Bn);Md=n(Om,"default"),Om.forEach(o),Rd=n(pe,` feature that corresponds to exporting a
model loaded with the `),Mn=l(pe,"CODE",{});var Tm=r(Mn);Fd=n(Tm,"AutoModel"),Tm.forEach(o),Sd=n(pe,` class. If you want to export a model for another task,
just provide a different feature to the `),Rn=l(pe,"CODE",{});var Nm=r(Rn);zd=n(Nm,"task"),Nm.forEach(o),Vd=n(pe,` argument when you initialize the ONNX
configuration. For example, if we wished to export DistilBERT with a sequence
classification head, we could use:`),pe.forEach(o),pl=f(t),C(Nt.$$.fragment,t),fl=f(t),C(Ie.$$.fragment,t),dl=f(t),me=l(t,"H3",{class:!0});var Kl=r(me);Pe=l(Kl,"A",{id:!0,class:!0,href:!0});var jm=r(Pe);Fn=l(jm,"SPAN",{});var Cm=r(Fn);C(jt.$$.fragment,Cm),Cm.forEach(o),jm.forEach(o),Hd=f(Kl),Sn=l(Kl,"SPAN",{});var Dm=r(Sn);Wd=n(Dm,"Exporting the model"),Dm.forEach(o),Kl.forEach(o),cl=f(t),ae=l(t,"P",{});var $o=r(ae);Gd=n($o,`Once you have implemented the ONNX configuration, the next step is to export the model.
Here we can use the `),zn=l($o,"CODE",{});var qm=r(zn);Yd=n(qm,"export()"),qm.forEach(o),Ud=n($o," function provided by the "),Vn=l($o,"CODE",{});var Lm=r(Vn);Kd=n(Lm,"transformers.onnx"),Lm.forEach(o),Jd=n($o,` package.
This function expects the ONNX configuration, along with the base model and tokenizer,
and the path to save the exported file:`),$o.forEach(o),hl=f(t),C(Ct.$$.fragment,t),ul=f(t),S=l(t,"P",{});var U=r(S);Qd=n(U,"The "),Hn=l(U,"CODE",{});var Am=r(Hn);Zd=n(Am,"onnx_inputs"),Am.forEach(o),ec=n(U," and "),Wn=l(U,"CODE",{});var Im=r(Wn);tc=n(Im,"onnx_outputs"),Im.forEach(o),oc=n(U," returned by the "),Gn=l(U,"CODE",{});var Pm=r(Gn);sc=n(Pm,"export()"),Pm.forEach(o),nc=n(U,` function are lists of
the keys defined in the `),Yn=l(U,"CODE",{});var Xm=r(Yn);ac=n(Xm,"inputs"),Xm.forEach(o),lc=n(U," and "),Un=l(U,"CODE",{});var Bm=r(Un);rc=n(Bm,"outputs"),Bm.forEach(o),ic=n(U,` properties of the configuration. Once the
model is exported, you can test that the model is well formed as follows:`),U.forEach(o),ml=f(t),C(Dt.$$.fragment,t),gl=f(t),C(Xe.$$.fragment,t),_l=f(t),ge=l(t,"H3",{class:!0});var Jl=r(ge);Be=l(Jl,"A",{id:!0,class:!0,href:!0});var Mm=r(Be);Kn=l(Mm,"SPAN",{});var Rm=r(Kn);C(qt.$$.fragment,Rm),Rm.forEach(o),Mm.forEach(o),pc=f(Jl),Jn=l(Jl,"SPAN",{});var Fm=r(Jn);fc=n(Fm,"Validating the model outputs"),Fm.forEach(o),Jl.forEach(o),vl=f(t),le=l(t,"P",{});var wo=r(le);dc=n(wo,`The final step is to validate that the outputs from the base and exported model agree
within some absolute tolerance. Here we can use the `),Qn=l(wo,"CODE",{});var Sm=r(Qn);cc=n(Sm,"validate_model_outputs()"),Sm.forEach(o),hc=n(wo,` function
provided by the `),Zn=l(wo,"CODE",{});var zm=r(Zn);uc=n(zm,"transformers.onnx"),zm.forEach(o),mc=n(wo," package as follows:"),wo.forEach(o),El=f(t),C(Lt.$$.fragment,t),$l=f(t),Me=l(t,"P",{});var Ql=r(Me);gc=n(Ql,"This function uses the "),fo=l(Ql,"A",{href:!0});var Vm=r(fo);_c=n(Vm,"generate_dummy_inputs()"),Vm.forEach(o),vc=n(Ql,` method to
generate inputs for the base and exported model, and the absolute tolerance can be
defined in the configuration. We generally find numerical agreement in the 1e-6 to 1e-4
range, although anything smaller than 1e-3 is likely to be OK.`),Ql.forEach(o),wl=f(t),_e=l(t,"H2",{class:!0});var Zl=r(_e);Re=l(Zl,"A",{id:!0,class:!0,href:!0});var Hm=r(Re);ea=l(Hm,"SPAN",{});var Wm=r(ea);C(At.$$.fragment,Wm),Wm.forEach(o),Hm.forEach(o),Ec=f(Zl),ta=l(Zl,"SPAN",{});var Gm=r(ta);$c=n(Gm,"Contributing a new configuration to \u{1F917} Transformers"),Gm.forEach(o),Zl.forEach(o),xl=f(t),co=l(t,"P",{});var Ym=r(co);wc=n(Ym,`We are looking to expand the set of ready-made configurations and welcome contributions
from the community! If you would like to contribute your addition to the library, you
will need to:`),Ym.forEach(o),bl=f(t),re=l(t,"UL",{});var xo=r(re);It=l(xo,"LI",{});var er=r(It);xc=n(er,"Implement the ONNX configuration in the corresponding "),oa=l(er,"CODE",{});var Um=r(oa);bc=n(Um,"configuration_<model_name>.py"),Um.forEach(o),kc=n(er,`
file`),er.forEach(o),yc=f(xo),ho=l(xo,"LI",{});var Xc=r(ho);Oc=n(Xc,`Include the model architecture and corresponding features in
`),sa=l(Xc,"CODE",{});var Km=r(sa);Tc=n(Km,"~onnx.features.FeatureManager"),Km.forEach(o),Xc.forEach(o),Nc=f(xo),uo=l(xo,"LI",{});var Bc=r(uo);jc=n(Bc,"Add your model architecture to the tests in "),na=l(Bc,"CODE",{});var Jm=r(na);Cc=n(Jm,"test_onnx_v2.py"),Jm.forEach(o),Bc.forEach(o),xo.forEach(o),kl=f(t),Fe=l(t,"P",{});var tr=r(Fe);Dc=n(tr,"Check out how the configuration for "),Pt=l(tr,"A",{href:!0,rel:!0});var Qm=r(Pt);qc=n(Qm,`IBERT was
contributed`),Qm.forEach(o),Lc=n(tr,` to get an
idea of what\u2019s involved.`),tr.forEach(o),this.h()},h(){v(c,"name","hf:doc:metadata"),v(c,"content",JSON.stringify(Eg)),v(E,"id","export-to-onnx"),v(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(E,"href","#export-to-onnx"),v(m,"class","relative group"),v(O,"href","http://onnx.ai"),v(O,"rel","nofollow"),v(fe,"href","main_classes/onnx"),v($e,"id","exporting-a-model-to-onnx"),v($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v($e,"href","#exporting-a-model-to-onnx"),v(de,"class","relative group"),v(tt,"href","https://onnx.ai/supported-tools.html#deployModel"),v(tt,"rel","nofollow"),v(ot,"href","https://onnxruntime.ai/"),v(ot,"rel","nofollow"),v(at,"href","https://huggingface.co/keras-io"),v(at,"rel","nofollow"),v(ye,"id","selecting-features-for-different-model-tasks"),v(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(ye,"href","#selecting-features-for-different-model-tasks"),v(ce,"class","relative group"),v(Kt,"href","/docs/transformers/main/en/main_classes/onnx#transformers.onnx.FeaturesManager"),v(Ce,"id","exporting-a-model-for-an-unsupported-architecture"),v(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ce,"href","#exporting-a-model-for-an-unsupported-architecture"),v(he,"class","relative group"),v(De,"id","implementing-a-custom-onnx-configuration"),v(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(De,"href","#implementing-a-custom-onnx-configuration"),v(ue,"class","relative group"),v(oo,"href","/docs/transformers/main/en/main_classes/onnx#transformers.onnx.OnnxConfig"),v(no,"href","/docs/transformers/main/en/main_classes/onnx#transformers.onnx.OnnxConfigWithPast"),v(lo,"href","/docs/transformers/main/en/main_classes/onnx#transformers.onnx.OnnxSeq2SeqConfigWithPast"),v(Pe,"id","exporting-the-model"),v(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Pe,"href","#exporting-the-model"),v(me,"class","relative group"),v(Be,"id","validating-the-model-outputs"),v(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Be,"href","#validating-the-model-outputs"),v(ge,"class","relative group"),v(fo,"href","/docs/transformers/main/en/main_classes/onnx#transformers.onnx.OnnxConfig.generate_dummy_inputs"),v(Re,"id","contributing-a-new-configuration-to-transformers"),v(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Re,"href","#contributing-a-new-configuration-to-transformers"),v(_e,"class","relative group"),v(Pt,"href","https://github.com/huggingface/transformers/pull/14868/files"),v(Pt,"rel","nofollow")},m(t,i){e(document.head,c),d(t,$,i),d(t,m,i),e(m,E),e(E,w),D(_,w,null),e(m,x),e(m,b),e(b,k),d(t,T,i),d(t,I,i),e(I,y),e(I,O),e(O,g),e(I,N),d(t,M,i),D(R,t,i),d(t,Q,i),d(t,W,i),e(W,He),e(W,K),e(K,We),e(W,Ge),d(t,Z,i),d(t,P,i),e(P,Ft),d(t,Ye,i),d(t,J,i),e(J,St),e(J,fe),e(fe,ve),e(ve,zt),e(J,or),d(t,fa,i),d(t,Vt,i),e(Vt,sr),d(t,da,i),d(t,h,i),e(h,bo),e(bo,nr),e(h,ar),e(h,ko),e(ko,lr),e(h,rr),e(h,yo),e(yo,ir),e(h,pr),e(h,Oo),e(Oo,fr),e(h,dr),e(h,To),e(To,cr),e(h,hr),e(h,No),e(No,ur),e(h,mr),e(h,jo),e(jo,gr),e(h,_r),e(h,Co),e(Co,vr),e(h,Er),e(h,Do),e(Do,$r),e(h,wr),e(h,qo),e(qo,xr),e(h,br),e(h,Lo),e(Lo,kr),e(h,yr),e(h,Ao),e(Ao,Or),e(h,Tr),e(h,Io),e(Io,Nr),e(h,jr),e(h,Po),e(Po,Cr),e(h,Dr),e(h,Xo),e(Xo,qr),e(h,Lr),e(h,Bo),e(Bo,Ar),e(h,Ir),e(h,Mo),e(Mo,Pr),e(h,Xr),e(h,Ro),e(Ro,Br),e(h,Mr),e(h,Fo),e(Fo,Rr),e(h,Fr),e(h,So),e(So,Sr),e(h,zr),e(h,zo),e(zo,Vr),e(h,Hr),e(h,Vo),e(Vo,Wr),e(h,Gr),e(h,Ho),e(Ho,Yr),e(h,Ur),e(h,Wo),e(Wo,Kr),e(h,Jr),e(h,Go),e(Go,Qr),e(h,Zr),e(h,Yo),e(Yo,ei),e(h,ti),e(h,Uo),e(Uo,oi),e(h,si),e(h,Ko),e(Ko,ni),e(h,ai),e(h,Jo),e(Jo,li),e(h,ri),e(h,Qo),e(Qo,ii),e(h,pi),e(h,Zo),e(Zo,fi),e(h,di),e(h,es),e(es,ci),e(h,hi),e(h,ts),e(ts,ui),e(h,mi),e(h,os),e(os,gi),e(h,_i),e(h,ss),e(ss,vi),e(h,Ei),e(h,ns),e(ns,$i),e(h,wi),e(h,as),e(as,xi),e(h,bi),e(h,ls),e(ls,ki),e(h,yi),e(h,rs),e(rs,Oi),e(h,Ti),e(h,is),e(is,Ni),e(h,ji),e(h,ps),e(ps,Ci),e(h,Di),e(h,fs),e(fs,qi),e(h,Li),e(h,ds),e(ds,Ai),e(h,Ii),e(h,cs),e(cs,Pi),e(h,Xi),e(h,hs),e(hs,Bi),e(h,Mi),e(h,us),e(us,Ri),e(h,Fi),e(h,ms),e(ms,Si),e(h,zi),e(h,gs),e(gs,Vi),e(h,Hi),e(h,_s),e(_s,Wi),e(h,Gi),e(h,vs),e(vs,Yi),e(h,Ui),e(h,Es),e(Es,Ki),e(h,Ji),e(h,$s),e($s,Qi),e(h,Zi),e(h,ws),e(ws,ep),e(h,tp),e(h,xs),e(xs,op),e(h,sp),e(h,bs),e(bs,np),e(h,ap),e(h,ks),e(ks,lp),e(h,rp),e(h,ys),e(ys,ip),e(h,pp),e(h,Os),e(Os,fp),e(h,dp),e(h,Ts),e(Ts,cp),e(h,hp),e(h,Ns),e(Ns,up),d(t,ca,i),d(t,Ht,i),e(Ht,mp),d(t,ha,i),d(t,Ee,i),e(Ee,Ue),e(Ue,gp),e(Ue,js),e(js,_p),e(Ue,vp),e(Ee,Ep),e(Ee,Cs),e(Cs,$p),d(t,ua,i),d(t,de,i),e(de,$e),e($e,Ds),D(Ke,Ds,null),e(de,wp),e(de,qs),e(qs,xp),d(t,ma,i),d(t,Wt,i),e(Wt,bp),d(t,ga,i),D(Je,t,i),d(t,_a,i),d(t,we,i),e(we,kp),e(we,Ls),e(Ls,yp),e(we,Op),d(t,va,i),D(Qe,t,i),d(t,Ea,i),d(t,Gt,i),e(Gt,Tp),d(t,$a,i),D(Ze,t,i),d(t,wa,i),d(t,Yt,i),e(Yt,Np),d(t,xa,i),D(et,t,i),d(t,ba,i),d(t,ee,i),e(ee,jp),e(ee,As),e(As,Cp),e(ee,Dp),e(ee,Is),e(Is,qp),e(ee,Lp),d(t,ka,i),d(t,G,i),e(G,Ap),e(G,Ps),e(Ps,Ip),e(G,Pp),e(G,tt),e(tt,Xp),e(G,Bp),e(G,ot),e(ot,Mp),e(G,Rp),d(t,ya,i),D(st,t,i),d(t,Oa,i),d(t,xe,i),e(xe,Fp),e(xe,Xs),e(Xs,Sp),e(xe,zp),d(t,Ta,i),D(nt,t,i),d(t,Na,i),d(t,be,i),e(be,Vp),e(be,at),e(at,Hp),e(be,Wp),d(t,ja,i),D(lt,t,i),d(t,Ca,i),d(t,Ut,i),e(Ut,Gp),d(t,Da,i),D(ke,t,i),d(t,qa,i),d(t,ce,i),e(ce,ye),e(ye,Bs),D(rt,Bs,null),e(ce,Yp),e(ce,Ms),e(Ms,Up),d(t,La,i),d(t,te,i),e(te,Kp),e(te,Rs),e(Rs,Jp),e(te,Qp),e(te,Fs),e(Fs,Zp),e(te,ef),d(t,Aa,i),d(t,Oe,i),e(Oe,Ss),e(Ss,it),e(it,zs),e(zs,tf),e(it,of),e(it,Vs),e(Vs,sf),e(Oe,nf),e(Oe,F),e(F,pt),e(pt,ft),e(ft,Hs),e(Hs,af),e(ft,lf),e(ft,Ws),e(Ws,rf),e(pt,pf),e(pt,Gs),e(Gs,Ys),e(Ys,ff),e(F,df),e(F,dt),e(dt,ct),e(ct,Us),e(Us,cf),e(ct,hf),e(ct,Ks),e(Ks,uf),e(dt,mf),e(dt,Js),e(Js,Qs),e(Qs,gf),e(F,_f),e(F,ht),e(ht,Zs),e(Zs,en),e(en,vf),e(ht,Ef),e(ht,tn),e(tn,on),e(on,$f),e(F,wf),e(F,ut),e(ut,sn),e(sn,nn),e(nn,xf),e(ut,bf),e(ut,an),e(an,ln),e(ln,kf),e(F,yf),e(F,mt),e(mt,gt),e(gt,rn),e(rn,Of),e(gt,Tf),e(gt,pn),e(pn,Nf),e(mt,jf),e(mt,fn),e(fn,dn),e(dn,Cf),e(F,Df),e(F,_t),e(_t,cn),e(cn,hn),e(hn,qf),e(_t,Lf),e(_t,un),e(un,mn),e(mn,Af),e(F,If),e(F,vt),e(vt,gn),e(gn,_n),e(_n,Pf),e(vt,Xf),e(vt,vn),e(vn,En),e(En,Bf),d(t,Ia,i),d(t,Te,i),e(Te,Mf),e(Te,Kt),e(Kt,Rf),e(Te,Ff),d(t,Pa,i),D(Et,t,i),d(t,Xa,i),d(t,oe,i),e(oe,Sf),e(oe,$n),e($n,zf),e(oe,Vf),e(oe,wn),e(wn,Hf),e(oe,Wf),d(t,Ba,i),D($t,t,i),d(t,Ma,i),d(t,Jt,i),e(Jt,Gf),d(t,Ra,i),D(wt,t,i),d(t,Fa,i),d(t,Y,i),e(Y,Yf),e(Y,xn),e(xn,Uf),e(Y,Kf),e(Y,bn),e(bn,Jf),e(Y,Qf),e(Y,kn),e(kn,Zf),e(Y,ed),d(t,Sa,i),D(Ne,t,i),d(t,za,i),D(je,t,i),d(t,Va,i),d(t,he,i),e(he,Ce),e(Ce,yn),D(xt,yn,null),e(he,td),e(he,On),e(On,od),d(t,Ha,i),d(t,Qt,i),e(Qt,sd),d(t,Wa,i),d(t,se,i),e(se,Tn),e(Tn,nd),e(se,ad),e(se,Nn),e(Nn,ld),e(se,rd),e(se,jn),e(jn,id),d(t,Ga,i),d(t,Zt,i),e(Zt,pd),d(t,Ya,i),d(t,ue,i),e(ue,De),e(De,Cn),D(bt,Cn,null),e(ue,fd),e(ue,Dn),e(Dn,dd),d(t,Ua,i),d(t,eo,i),e(eo,cd),d(t,Ka,i),d(t,ne,i),e(ne,to),e(to,hd),e(to,oo),e(oo,ud),e(ne,md),e(ne,so),e(so,gd),e(so,no),e(no,_d),e(ne,vd),e(ne,ao),e(ao,Ed),e(ao,lo),e(lo,$d),d(t,Ja,i),D(qe,t,i),d(t,Qa,i),d(t,Le,i),e(Le,wd),e(Le,qn),e(qn,xd),e(Le,bd),d(t,Za,i),D(kt,t,i),d(t,el,i),d(t,z,i),e(z,kd),e(z,Ln),e(Ln,yd),e(z,Od),e(z,An),e(An,Td),e(z,Nd),e(z,In),e(In,jd),e(z,Cd),e(z,Pn),e(Pn,Dd),e(z,qd),d(t,tl,i),D(Ae,t,i),d(t,ol,i),d(t,ro,i),e(ro,Ld),d(t,sl,i),D(yt,t,i),d(t,nl,i),d(t,io,i),e(io,Ad),d(t,al,i),D(Ot,t,i),d(t,ll,i),d(t,po,i),e(po,Id),d(t,rl,i),D(Tt,t,i),d(t,il,i),d(t,V,i),e(V,Pd),e(V,Xn),e(Xn,Xd),e(V,Bd),e(V,Bn),e(Bn,Md),e(V,Rd),e(V,Mn),e(Mn,Fd),e(V,Sd),e(V,Rn),e(Rn,zd),e(V,Vd),d(t,pl,i),D(Nt,t,i),d(t,fl,i),D(Ie,t,i),d(t,dl,i),d(t,me,i),e(me,Pe),e(Pe,Fn),D(jt,Fn,null),e(me,Hd),e(me,Sn),e(Sn,Wd),d(t,cl,i),d(t,ae,i),e(ae,Gd),e(ae,zn),e(zn,Yd),e(ae,Ud),e(ae,Vn),e(Vn,Kd),e(ae,Jd),d(t,hl,i),D(Ct,t,i),d(t,ul,i),d(t,S,i),e(S,Qd),e(S,Hn),e(Hn,Zd),e(S,ec),e(S,Wn),e(Wn,tc),e(S,oc),e(S,Gn),e(Gn,sc),e(S,nc),e(S,Yn),e(Yn,ac),e(S,lc),e(S,Un),e(Un,rc),e(S,ic),d(t,ml,i),D(Dt,t,i),d(t,gl,i),D(Xe,t,i),d(t,_l,i),d(t,ge,i),e(ge,Be),e(Be,Kn),D(qt,Kn,null),e(ge,pc),e(ge,Jn),e(Jn,fc),d(t,vl,i),d(t,le,i),e(le,dc),e(le,Qn),e(Qn,cc),e(le,hc),e(le,Zn),e(Zn,uc),e(le,mc),d(t,El,i),D(Lt,t,i),d(t,$l,i),d(t,Me,i),e(Me,gc),e(Me,fo),e(fo,_c),e(Me,vc),d(t,wl,i),d(t,_e,i),e(_e,Re),e(Re,ea),D(At,ea,null),e(_e,Ec),e(_e,ta),e(ta,$c),d(t,xl,i),d(t,co,i),e(co,wc),d(t,bl,i),d(t,re,i),e(re,It),e(It,xc),e(It,oa),e(oa,bc),e(It,kc),e(re,yc),e(re,ho),e(ho,Oc),e(ho,sa),e(sa,Tc),e(re,Nc),e(re,uo),e(uo,jc),e(uo,na),e(na,Cc),d(t,kl,i),d(t,Fe,i),e(Fe,Dc),e(Fe,Pt),e(Pt,qc),e(Fe,Lc),yl=!0},p(t,[i]){const Xt={};i&2&&(Xt.$$scope={dirty:i,ctx:t}),R.$set(Xt);const aa={};i&2&&(aa.$$scope={dirty:i,ctx:t}),ke.$set(aa);const la={};i&2&&(la.$$scope={dirty:i,ctx:t}),Ne.$set(la);const ra={};i&2&&(ra.$$scope={dirty:i,ctx:t}),je.$set(ra);const Bt={};i&2&&(Bt.$$scope={dirty:i,ctx:t}),qe.$set(Bt);const ia={};i&2&&(ia.$$scope={dirty:i,ctx:t}),Ae.$set(ia);const Mt={};i&2&&(Mt.$$scope={dirty:i,ctx:t}),Ie.$set(Mt);const pa={};i&2&&(pa.$$scope={dirty:i,ctx:t}),Xe.$set(pa)},i(t){yl||(q(_.$$.fragment,t),q(R.$$.fragment,t),q(Ke.$$.fragment,t),q(Je.$$.fragment,t),q(Qe.$$.fragment,t),q(Ze.$$.fragment,t),q(et.$$.fragment,t),q(st.$$.fragment,t),q(nt.$$.fragment,t),q(lt.$$.fragment,t),q(ke.$$.fragment,t),q(rt.$$.fragment,t),q(Et.$$.fragment,t),q($t.$$.fragment,t),q(wt.$$.fragment,t),q(Ne.$$.fragment,t),q(je.$$.fragment,t),q(xt.$$.fragment,t),q(bt.$$.fragment,t),q(qe.$$.fragment,t),q(kt.$$.fragment,t),q(Ae.$$.fragment,t),q(yt.$$.fragment,t),q(Ot.$$.fragment,t),q(Tt.$$.fragment,t),q(Nt.$$.fragment,t),q(Ie.$$.fragment,t),q(jt.$$.fragment,t),q(Ct.$$.fragment,t),q(Dt.$$.fragment,t),q(Xe.$$.fragment,t),q(qt.$$.fragment,t),q(Lt.$$.fragment,t),q(At.$$.fragment,t),yl=!0)},o(t){L(_.$$.fragment,t),L(R.$$.fragment,t),L(Ke.$$.fragment,t),L(Je.$$.fragment,t),L(Qe.$$.fragment,t),L(Ze.$$.fragment,t),L(et.$$.fragment,t),L(st.$$.fragment,t),L(nt.$$.fragment,t),L(lt.$$.fragment,t),L(ke.$$.fragment,t),L(rt.$$.fragment,t),L(Et.$$.fragment,t),L($t.$$.fragment,t),L(wt.$$.fragment,t),L(Ne.$$.fragment,t),L(je.$$.fragment,t),L(xt.$$.fragment,t),L(bt.$$.fragment,t),L(qe.$$.fragment,t),L(kt.$$.fragment,t),L(Ae.$$.fragment,t),L(yt.$$.fragment,t),L(Ot.$$.fragment,t),L(Tt.$$.fragment,t),L(Nt.$$.fragment,t),L(Ie.$$.fragment,t),L(jt.$$.fragment,t),L(Ct.$$.fragment,t),L(Dt.$$.fragment,t),L(Xe.$$.fragment,t),L(qt.$$.fragment,t),L(Lt.$$.fragment,t),L(At.$$.fragment,t),yl=!1},d(t){o(c),t&&o($),t&&o(m),A(_),t&&o(T),t&&o(I),t&&o(M),A(R,t),t&&o(Q),t&&o(W),t&&o(Z),t&&o(P),t&&o(Ye),t&&o(J),t&&o(fa),t&&o(Vt),t&&o(da),t&&o(h),t&&o(ca),t&&o(Ht),t&&o(ha),t&&o(Ee),t&&o(ua),t&&o(de),A(Ke),t&&o(ma),t&&o(Wt),t&&o(ga),A(Je,t),t&&o(_a),t&&o(we),t&&o(va),A(Qe,t),t&&o(Ea),t&&o(Gt),t&&o($a),A(Ze,t),t&&o(wa),t&&o(Yt),t&&o(xa),A(et,t),t&&o(ba),t&&o(ee),t&&o(ka),t&&o(G),t&&o(ya),A(st,t),t&&o(Oa),t&&o(xe),t&&o(Ta),A(nt,t),t&&o(Na),t&&o(be),t&&o(ja),A(lt,t),t&&o(Ca),t&&o(Ut),t&&o(Da),A(ke,t),t&&o(qa),t&&o(ce),A(rt),t&&o(La),t&&o(te),t&&o(Aa),t&&o(Oe),t&&o(Ia),t&&o(Te),t&&o(Pa),A(Et,t),t&&o(Xa),t&&o(oe),t&&o(Ba),A($t,t),t&&o(Ma),t&&o(Jt),t&&o(Ra),A(wt,t),t&&o(Fa),t&&o(Y),t&&o(Sa),A(Ne,t),t&&o(za),A(je,t),t&&o(Va),t&&o(he),A(xt),t&&o(Ha),t&&o(Qt),t&&o(Wa),t&&o(se),t&&o(Ga),t&&o(Zt),t&&o(Ya),t&&o(ue),A(bt),t&&o(Ua),t&&o(eo),t&&o(Ka),t&&o(ne),t&&o(Ja),A(qe,t),t&&o(Qa),t&&o(Le),t&&o(Za),A(kt,t),t&&o(el),t&&o(z),t&&o(tl),A(Ae,t),t&&o(ol),t&&o(ro),t&&o(sl),A(yt,t),t&&o(nl),t&&o(io),t&&o(al),A(Ot,t),t&&o(ll),t&&o(po),t&&o(rl),A(Tt,t),t&&o(il),t&&o(V),t&&o(pl),A(Nt,t),t&&o(fl),A(Ie,t),t&&o(dl),t&&o(me),A(jt),t&&o(cl),t&&o(ae),t&&o(hl),A(Ct,t),t&&o(ul),t&&o(S),t&&o(ml),A(Dt,t),t&&o(gl),A(Xe,t),t&&o(_l),t&&o(ge),A(qt),t&&o(vl),t&&o(le),t&&o(El),A(Lt,t),t&&o($l),t&&o(Me),t&&o(wl),t&&o(_e),A(At),t&&o(xl),t&&o(co),t&&o(bl),t&&o(re),t&&o(kl),t&&o(Fe)}}}const Eg={local:"export-to-onnx",sections:[{local:"exporting-a-model-to-onnx",title:"Exporting a model to ONNX"},{local:"selecting-features-for-different-model-tasks",title:"Selecting features for different model tasks"},{local:"exporting-a-model-for-an-unsupported-architecture",sections:[{local:"implementing-a-custom-onnx-configuration",title:"Implementing a custom ONNX configuration"},{local:"exporting-the-model",title:"Exporting the model"},{local:"validating-the-model-outputs",title:"Validating the model outputs"}],title:"Exporting a model for an unsupported architecture"},{local:"contributing-a-new-configuration-to-transformers",title:"Contributing a new configuration to \u{1F917} Transformers"}],title:"Export to ONNX"};function $g(X){return ag(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Og extends tg{constructor(c){super();og(this,c,$g,vg,sg,{})}}export{Og as default,Eg as metadata};
