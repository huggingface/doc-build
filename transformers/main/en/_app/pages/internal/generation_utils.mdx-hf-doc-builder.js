import{S as Pk,i as Fk,s as Dk,e as o,k as c,w as f,t as a,M as Sk,c as n,d as r,m as l,a as s,x as g,h as i,b as d,G as t,g as p,y as h,q as u,o as _,B as b,v as zk,L as Ok}from"../../chunks/vendor-hf-doc-builder.js";import{D as v}from"../../chunks/Docstring-hf-doc-builder.js";import{C as i1}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Ae}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as qk}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Bk(xd){let L,Re;return L=new i1({props:{code:`completed = False
while not completed:
    _, completed = constraint.update(constraint.advance())`,highlighted:`completed = <span class="hljs-literal">False</span>
<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> completed:
    _, completed = constraint.update(constraint.advance())`}}),{c(){f(L.$$.fragment)},l(k){g(L.$$.fragment,k)},m(k,Ce){h(L,k,Ce),Re=!0},p:Ok,i(k){Re||(u(L.$$.fragment,k),Re=!0)},o(k){_(L.$$.fragment,k),Re=!1},d(k){b(L,k)}}}function Ik(xd){let L,Re,k,Ce,fc,ar,Jp,gc,Qp,wd,y,Zp,Un,ef,tf,Yn,rf,of,Xn,nf,sf,Jn,af,cf,Qn,lf,df,Zn,mf,pf,es,ff,gf,ts,hf,uf,Ld,rs,_f,Ed,Ke,_t,hc,ir,bf,uc,vf,Pd,V,$f,os,Tf,yf,ns,kf,xf,ss,wf,Lf,Fd,as,Ef,Dd,cr,Sd,We,Pf,_c,Ff,Df,is,Sf,zf,zd,M,cs,bc,Of,qf,Bf,ls,vc,If,Af,Cf,ds,$c,Wf,Nf,Vf,ms,Tc,Mf,Gf,Od,x,jf,yc,Hf,Rf,kc,Kf,Uf,xc,Yf,Xf,wc,Jf,Qf,Lc,Zf,eg,Ec,tg,rg,qd,S,og,Pc,ng,sg,Fc,ag,ig,Dc,cg,lg,Sc,dg,mg,Bd,z,pg,zc,fg,gg,Oc,hg,ug,qc,_g,bg,Bc,vg,$g,Id,lr,Ad,bt,Tg,Ic,yg,kg,Cd,O,xg,Ac,wg,Lg,Cc,Eg,Pg,Wc,Fg,Dg,Nc,Sg,zg,Wd,ps,Og,Nd,Ue,vt,Vc,dr,qg,Mc,Bg,Vd,Ye,mr,Ig,Gc,Ag,Md,Xe,pr,Cg,jc,Wg,Gd,R,fr,Ng,Hc,Vg,Mg,$t,gr,Gg,Rc,jg,jd,Je,Tt,Kc,hr,Hg,Uc,Rg,Hd,Qe,ur,Kg,Yc,Ug,Rd,Ze,_r,Yg,Xc,Xg,Kd,K,br,Jg,Jc,Qg,Zg,yt,vr,eh,Qc,th,Ud,et,kt,Zc,$r,rh,el,oh,Yd,tt,Tr,nh,tl,sh,Xd,rt,yr,ah,rl,ih,Jd,ot,xt,ol,kr,ch,nl,lh,Qd,nt,xr,dh,sl,mh,Zd,st,wr,ph,al,fh,em,at,wt,il,Lr,gh,cl,hh,tm,Lt,uh,fs,_h,bh,rm,U,Er,vh,ll,$h,Th,Et,Pr,yh,dl,kh,om,Y,Fr,xh,E,wh,gs,Lh,Eh,hs,Ph,Fh,ml,Dh,Sh,pl,fl,zh,Oh,us,qh,Bh,_s,Ih,Ah,Ch,bs,Dr,nm,X,Sr,Wh,gl,Nh,Vh,Pt,zr,Mh,hl,Gh,sm,J,Or,jh,vs,$s,Hh,Rh,Kh,Ts,qr,am,Q,Br,Uh,ys,ks,Yh,Xh,Jh,xs,Ir,im,Z,Ar,Qh,ws,Ls,Zh,eu,tu,Es,Cr,cm,ee,Wr,ru,Ps,Fs,ou,nu,su,Ds,Nr,lm,te,Vr,au,Ss,zs,iu,cu,lu,Os,Mr,dm,re,Gr,du,Ft,qs,mu,pu,jr,fu,gu,hu,Bs,Hr,mm,oe,Rr,uu,Dt,Is,_u,bu,Kr,vu,$u,Tu,As,Ur,pm,ne,Yr,yu,Cs,Ws,ku,xu,wu,Ns,Xr,fm,se,Jr,Lu,St,Vs,Eu,Pu,Qr,Fu,Du,Su,Ms,Zr,gm,ae,eo,zu,Ne,Gs,Ou,qu,js,Bu,Iu,to,Au,Cu,Wu,Hs,ro,hm,ie,oo,Nu,Rs,Ks,Vu,Mu,Gu,Us,no,um,ce,so,ju,zt,Ys,Hu,Ru,ul,Ku,Uu,Yu,Xs,ao,_m,le,io,Xu,G,Js,Ju,Qu,_l,Zu,e_,bl,t_,r_,vl,o_,n_,s_,Qs,co,bm,de,lo,a_,$l,i_,c_,Ot,mo,l_,Tl,d_,vm,me,po,m_,A,p_,Zs,f_,g_,yl,h_,u_,kl,xl,__,b_,ea,v_,$_,T_,ta,fo,$m,pe,go,y_,wl,k_,x_,qt,ho,w_,Ll,L_,Tm,fe,uo,E_,ra,oa,P_,F_,D_,na,_o,ym,ge,bo,S_,sa,aa,z_,O_,q_,ia,vo,km,he,$o,B_,ca,la,I_,A_,C_,da,To,xm,ue,yo,W_,ma,pa,N_,V_,M_,fa,ko,wm,_e,xo,G_,ga,ha,j_,H_,R_,ua,wo,Lm,be,Lo,K_,Bt,_a,U_,Y_,Eo,X_,J_,Q_,ba,Po,Em,ve,Fo,Z_,va,$a,eb,tb,rb,Ta,Do,Pm,$e,So,ob,ya,ka,nb,sb,ab,xa,zo,Fm,Te,Oo,ib,It,wa,cb,lb,El,db,mb,pb,La,qo,Dm,ye,Bo,fb,Pl,gb,hb,At,Io,ub,Fl,_b,Sm,ke,Ao,bb,P,vb,Ea,$b,Tb,Pa,yb,kb,Dl,xb,wb,Sl,zl,Lb,Eb,Fa,Pb,Fb,Da,Db,Sb,zb,Sa,Co,zm,xe,Wo,Ob,Ol,qb,Bb,Ct,No,Ib,ql,Ab,Om,we,Vo,Cb,za,Oa,Wb,Nb,Vb,qa,Mo,qm,Le,Go,Mb,Ba,Ia,Gb,jb,Hb,Aa,jo,Bm,Ee,Ho,Rb,Ca,Wa,Kb,Ub,Yb,Na,Ro,Im,Pe,Ko,Xb,Va,Ma,Jb,Qb,Zb,Ga,Uo,Am,Fe,Yo,ev,Wt,ja,tv,rv,Bl,ov,nv,sv,Ha,Xo,Cm,De,Jo,av,Ra,Ka,iv,cv,lv,Ua,Qo,Wm,it,Nt,Il,Zo,dv,Al,mv,Nm,Vt,pv,Ya,fv,gv,Vm,Se,en,hv,Cl,uv,_v,Xa,tn,Mm,ct,rn,bv,Ja,on,Gm,ze,nn,vv,sn,$v,Wl,Tv,yv,kv,Qa,an,jm,Oe,cn,xv,ln,wv,Nl,Lv,Ev,Pv,Za,dn,Hm,lt,Mt,Vl,mn,Fv,Ml,Dv,Rm,Gt,Sv,ei,zv,Ov,Km,$,pn,qv,Gl,Bv,Iv,jl,Av,Cv,jt,Wv,Hl,Nv,Vv,Ht,fn,Mv,Rl,Gv,jv,Rt,gn,Hv,Kl,Rv,Kv,Kt,hn,Uv,Ul,Yv,Xv,Ut,un,Jv,_n,Qv,Yl,Zv,e$,t$,Yt,bn,r$,Xl,o$,n$,Xt,vn,s$,Jl,a$,i$,Ve,$n,c$,Tn,l$,Ql,d$,m$,p$,Zl,f$,Um,dt,yn,g$,ti,ri,h$,u$,Ym,mt,kn,_$,xn,b$,oi,v$,$$,Xm,C,wn,T$,ed,y$,k$,D,Ln,x$,td,w$,L$,pt,E$,rd,P$,F$,od,D$,S$,z$,nd,sd,O$,q$,qe,B$,ad,I$,A$,id,C$,W$,cd,N$,V$,M$,ld,G$,j$,Jt,En,H$,dd,R$,Jm,ft,Qt,md,Pn,K$,pd,U$,Qm,W,Fn,Y$,gt,X$,ni,J$,Q$,si,Z$,eT,tT,ai,Dn,rT,ii,Sn,Zm,F,zn,oT,ci,li,nT,sT,aT,On,iT,qn,cT,lT,dT,di,mT,Bn,pT,fT,mi,In,gT,pi,An,ep,N,Cn,hT,fi,gi,uT,_T,bT,hi,Wn,vT,ui,Nn,tp,ht,Zt,fd,Vn,$T,gd,TT,rp,Be,Mn,yT,hd,kT,xT,_i,wT,Gn,LT,op,Ie,jn,ET,ud,PT,FT,bi,DT,Hn,ST,np;return ar=new Ae({}),ir=new Ae({}),cr=new i1({props:{code:`from transformers import GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model = GPT2LMHeadModel.from_pretrained("gpt2")

inputs = tokenizer("Hello, my dog is cute and ", return_tensors="pt")
generation_output = model.generate(**inputs, return_dict_in_generate=True, output_scores=True)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)
model = GPT2LMHeadModel.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)

inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute and &quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
generation_output = model.generate(**inputs, return_dict_in_generate=<span class="hljs-literal">True</span>, output_scores=<span class="hljs-literal">True</span>)`}}),lr=new i1({props:{code:"generation_output[:2]",highlighted:'generation_output[:<span class="hljs-number">2</span>]'}}),dr=new Ae({}),mr=new v({props:{name:"class transformers.generation_utils.GreedySearchDecoderOnlyOutput",anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L73"}}),pr=new v({props:{name:"class transformers.generation_utils.GreedySearchEncoderDecoderOutput",anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L151"}}),fr=new v({props:{name:"class transformers.generation_flax_utils.FlaxGreedySearchOutput",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_utils.py#L51"}}),gr=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/flax/struct.py#L108"}}),hr=new Ae({}),ur=new v({props:{name:"class transformers.generation_utils.SampleDecoderOnlyOutput",anchor:"transformers.generation_utils.SampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L193"}}),_r=new v({props:{name:"class transformers.generation_utils.SampleEncoderDecoderOutput",anchor:"transformers.generation_utils.SampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape
<code>(batch_size*num_return_sequences, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L222"}}),br=new v({props:{name:"class transformers.generation_flax_utils.FlaxSampleOutput",anchor:"transformers.generation_flax_utils.FlaxSampleOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxSampleOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_utils.py#L65"}}),vr=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxSampleOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/flax/struct.py#L108"}}),$r=new Ae({}),Tr=new v({props:{name:"class transformers.generation_utils.BeamSearchDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, input_ids.shape[-1])</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L265"}}),yr=new v({props:{name:"class transformers.generation_utils.BeamSearchEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, max_length-1)</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.attentions",description:"<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;",name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L300"}}),kr=new Ae({}),xr=new v({props:{name:"class transformers.generation_utils.BeamSampleDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, input_ids.shape[-1])</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L351"}}),wr=new v({props:{name:"class transformers.generation_utils.BeamSampleEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_beams, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>torch.LongTensor</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, max_length-1)</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L386"}}),Lr=new Ae({}),Er=new v({props:{name:"class transformers.LogitsProcessor",anchor:"transformers.LogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L51"}}),Pr=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L54",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Fr=new v({props:{name:"class transformers.LogitsProcessorList",anchor:"transformers.LogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L73"}}),Dr=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L80",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Sr=new v({props:{name:"class transformers.LogitsWarper",anchor:"transformers.LogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L62"}}),zr=new v({props:{name:"__call__",anchor:"transformers.LogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L65",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Or=new v({props:{name:"class transformers.MinLengthLogitsProcessor",anchor:"transformers.MinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.MinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.MinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L96"}}),qr=new v({props:{name:"__call__",anchor:"transformers.MinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L117"}}),Br=new v({props:{name:"class transformers.TemperatureLogitsWarper",anchor:"transformers.TemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L124"}}),Ir=new v({props:{name:"__call__",anchor:"transformers.TemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L139"}}),Ar=new v({props:{name:"class transformers.RepetitionPenaltyLogitsProcessor",anchor:"transformers.RepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.RepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L144"}}),Cr=new v({props:{name:"__call__",anchor:"transformers.RepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L160"}}),Wr=new v({props:{name:"class transformers.TopPLogitsWarper",anchor:"transformers.TopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the smallest set of most probable tokens with probabilities that add up to <code>top_p</code> or
higher are kept for generation.`,name:"top_p"},{anchor:"transformers.TopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L170"}}),Nr=new v({props:{name:"__call__",anchor:"transformers.TopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L193"}}),Vr=new v({props:{name:"class transformers.TopKLogitsWarper",anchor:"transformers.TopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L209"}}),Mr=new v({props:{name:"__call__",anchor:"transformers.TopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L230"}}),Gr=new v({props:{name:"class transformers.TypicalLogitsWarper",anchor:"transformers.TypicalLogitsWarper",parameters:[{name:"mass",val:": float = 0.9"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TypicalLogitsWarper.mass",description:`<strong>mass</strong> (<code>float</code>) &#x2014;
Value of typical_p between 0 and 1 inclusive, defaults to 0.9.`,name:"mass"},{anchor:"transformers.TypicalLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TypicalLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L238"}}),Hr=new v({props:{name:"__call__",anchor:"transformers.TypicalLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L261"}}),Rr=new v({props:{name:"class transformers.NoRepeatNGramLogitsProcessor",anchor:"transformers.NoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.NoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L322"}}),Ur=new v({props:{name:"__call__",anchor:"transformers.NoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L337"}}),Yr=new v({props:{name:"class transformers.NoBadWordsLogitsProcessor",anchor:"transformers.NoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.NoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the token ids of the words
that should not appear in the generated text, use <code>tokenizer(bad_words, add_prefix_space=True, add_special_tokens=False).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.NoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L389"}}),Xr=new v({props:{name:"__call__",anchor:"transformers.NoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L431"}}),Jr=new v({props:{name:"class transformers.PrefixConstrainedLogitsProcessor",anchor:"transformers.PrefixConstrainedLogitsProcessor",parameters:[{name:"prefix_allowed_tokens_fn",val:": typing.Callable[[int, torch.Tensor], typing.List[int]]"},{name:"num_beams",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L517"}}),Zr=new v({props:{name:"__call__",anchor:"transformers.PrefixConstrainedLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L534"}}),eo=new v({props:{name:"class transformers.HammingDiversityLogitsProcessor",anchor:"transformers.HammingDiversityLogitsProcessor",parameters:[{name:"diversity_penalty",val:": float"},{name:"num_beams",val:": int"},{name:"num_beam_groups",val:": int"}],parametersDescription:[{anchor:"transformers.HammingDiversityLogitsProcessor.diversity_penalty",description:`<strong>diversity_penalty</strong> (<code>float</code>) &#x2014;
This value is subtracted from a beam&#x2019;s score if it generates a token same as any beam from other group at a
particular time. Note that <code>diversity_penalty</code> is only effective if <code>group beam search</code> is enabled.`,name:"diversity_penalty"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams used for group beam search. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more
details.`,name:"num_beams"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L543"}}),ro=new v({props:{name:"__call__",anchor:"transformers.HammingDiversityLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"current_tokens",val:": LongTensor"},{name:"beam_group_idx",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L574"}}),oo=new v({props:{name:"class transformers.ForcedBOSTokenLogitsProcessor",anchor:"transformers.ForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L603"}}),no=new v({props:{name:"__call__",anchor:"transformers.ForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L615"}}),so=new v({props:{name:"class transformers.ForcedEOSTokenLogitsProcessor",anchor:"transformers.ForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L624"}}),ao=new v({props:{name:"__call__",anchor:"transformers.ForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L639"}}),io=new v({props:{name:"class transformers.InfNanRemoveLogitsProcessor",anchor:"transformers.InfNanRemoveLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L648"}}),co=new v({props:{name:"__call__",anchor:"transformers.InfNanRemoveLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L655"}}),lo=new v({props:{name:"class transformers.TFLogitsProcessor",anchor:"transformers.TFLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L53"}}),mo=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],parametersDescription:[{anchor:"transformers.TFLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsProcessor.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L56",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),po=new v({props:{name:"class transformers.TFLogitsProcessorList",anchor:"transformers.TFLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L75"}}),fo=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsProcessorList.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L82",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),go=new v({props:{name:"class transformers.TFLogitsWarper",anchor:"transformers.TFLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L64"}}),ho=new v({props:{name:"__call__",anchor:"transformers.TFLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],parametersDescription:[{anchor:"transformers.TFLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsWarper.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L67",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),uo=new v({props:{name:"class transformers.TFTemperatureLogitsWarper",anchor:"transformers.TFTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TFTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L98"}}),_o=new v({props:{name:"__call__",anchor:"transformers.TFTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L113"}}),bo=new v({props:{name:"class transformers.TFTopPLogitsWarper",anchor:"transformers.TFTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the smallest set of most probable tokens with probabilities that add up to <code>top_p</code> or
higher are kept for generation.`,name:"top_p"},{anchor:"transformers.TFTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L147"}}),vo=new v({props:{name:"__call__",anchor:"transformers.TFTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L169"}}),$o=new v({props:{name:"class transformers.TFTopKLogitsWarper",anchor:"transformers.TFTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TFTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L118"}}),To=new v({props:{name:"__call__",anchor:"transformers.TFTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L139"}}),yo=new v({props:{name:"class transformers.TFMinLengthLogitsProcessor",anchor:"transformers.TFMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.TFMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L201"}}),ko=new v({props:{name:"__call__",anchor:"transformers.TFMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L227"}}),xo=new v({props:{name:"class transformers.TFNoBadWordsLogitsProcessor",anchor:"transformers.TFNoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the tokens of the words
that should not appear in the generated text, use <code>tokenizer(bad_word, add_prefix_space=True).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.TFNoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L287"}}),wo=new v({props:{name:"__call__",anchor:"transformers.TFNoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L364"}}),Lo=new v({props:{name:"class transformers.TFNoRepeatNGramLogitsProcessor",anchor:"transformers.TFNoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L385"}}),Po=new v({props:{name:"__call__",anchor:"transformers.TFNoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L424"}}),Fo=new v({props:{name:"class transformers.TFRepetitionPenaltyLogitsProcessor",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L237"}}),Do=new v({props:{name:"__call__",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L279"}}),So=new v({props:{name:"class transformers.TFForcedBOSTokenLogitsProcessor",anchor:"transformers.TFForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L446"}}),zo=new v({props:{name:"__call__",anchor:"transformers.TFForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L460"}}),Oo=new v({props:{name:"class transformers.TFForcedEOSTokenLogitsProcessor",anchor:"transformers.TFForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.TFForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L476"}}),qo=new v({props:{name:"__call__",anchor:"transformers.TFForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L493"}}),Bo=new v({props:{name:"class transformers.FlaxLogitsProcessor",anchor:"transformers.FlaxLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L50"}}),Io=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L53",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Ao=new v({props:{name:"class transformers.FlaxLogitsProcessorList",anchor:"transformers.FlaxLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L72"}}),Co=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L79",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Wo=new v({props:{name:"class transformers.FlaxLogitsWarper",anchor:"transformers.FlaxLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L61"}}),No=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L64",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Vo=new v({props:{name:"class transformers.FlaxTemperatureLogitsWarper",anchor:"transformers.FlaxTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.FlaxTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L95"}}),Mo=new v({props:{name:"__call__",anchor:"transformers.FlaxTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L110"}}),Go=new v({props:{name:"class transformers.FlaxTopPLogitsWarper",anchor:"transformers.FlaxTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the smallest set of most probable tokens with probabilities that add up to <code>top_p</code> or
higher are kept for generation.`,name:"top_p"},{anchor:"transformers.FlaxTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L115"}}),jo=new v({props:{name:"__call__",anchor:"transformers.FlaxTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L137"}}),Ho=new v({props:{name:"class transformers.FlaxTopKLogitsWarper",anchor:"transformers.FlaxTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.FlaxTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L157"}}),Ro=new v({props:{name:"__call__",anchor:"transformers.FlaxTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L178"}}),Ko=new v({props:{name:"class transformers.FlaxForcedBOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L193"}}),Uo=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L205"}}),Yo=new v({props:{name:"class transformers.FlaxForcedEOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L215"}}),Xo=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L230"}}),Jo=new v({props:{name:"class transformers.FlaxMinLengthLogitsProcessor",anchor:"transformers.FlaxMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.FlaxMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L240"}}),Qo=new v({props:{name:"__call__",anchor:"transformers.FlaxMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L261"}}),Zo=new Ae({}),en=new v({props:{name:"class transformers.StoppingCriteria",anchor:"transformers.StoppingCriteria",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L33"}}),tn=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L36",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),rn=new v({props:{name:"class transformers.StoppingCriteriaList",anchor:"transformers.StoppingCriteriaList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L110"}}),on=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteriaList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteriaList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteriaList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L111",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),nn=new v({props:{name:"class transformers.MaxLengthCriteria",anchor:"transformers.MaxLengthCriteria",parameters:[{name:"max_length",val:": int"}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length that the output sequence can have in number of tokens.`,name:"max_length"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L41"}}),an=new v({props:{name:"__call__",anchor:"transformers.MaxLengthCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxLengthCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L54",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),cn=new v({props:{name:"class transformers.MaxTimeCriteria",anchor:"transformers.MaxTimeCriteria",parameters:[{name:"max_time",val:": float"},{name:"initial_timestamp",val:": typing.Optional[float] = None"}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.max_time",description:`<strong>max_time</strong> (<code>float</code>) &#x2014;
The maximum allowed time in seconds for the generation.`,name:"max_time"},{anchor:"transformers.MaxTimeCriteria.initial_time",description:`<strong>initial_time</strong> (<code>float</code>, <em>optional</em>, defaults to <code>time.time()</code>) &#x2014;
The start of the generation allowed time.`,name:"initial_time"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L88"}}),dn=new v({props:{name:"__call__",anchor:"transformers.MaxTimeCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxTimeCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L105",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),mn=new Ae({}),pn=new v({props:{name:"class transformers.Constraint",anchor:"transformers.Constraint",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L5"}}),jt=new qk({props:{anchor:"transformers.Constraint.example",$$slots:{default:[Bk]},$$scope:{ctx:xd}}}),fn=new v({props:{name:"advance",anchor:"transformers.Constraint.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L48",returnDescription:`
<p>Must be a tensor of a list of indexable tokens, not some integer.</p>
`,returnType:`
<p>token_ids(<code>torch.tensor</code>)</p>
`}}),gn=new v({props:{name:"copy",anchor:"transformers.Constraint.copy",parameters:[{name:"stateful",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L113",returnDescription:`
<p>The same constraint as the one being called from.</p>
`,returnType:`
<p>constraint(<code>Constraint</code>)</p>
`}}),hn=new v({props:{name:"does_advance",anchor:"transformers.Constraint.does_advance",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L60"}}),un=new v({props:{name:"remaining",anchor:"transformers.Constraint.remaining",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L104"}}),bn=new v({props:{name:"reset",anchor:"transformers.Constraint.reset",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L94"}}),vn=new v({props:{name:"test",anchor:"transformers.Constraint.test",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L24"}}),$n=new v({props:{name:"update",anchor:"transformers.Constraint.update",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L69",returnDescription:`
<p>Whether this constraint has become one step closer to being fulfuilled.
completed(<code>bool</code>):
Whether this constraint has been completely fulfilled by this token being generated.
reset (<code>bool</code>):
Whether this constraint has reset its progress by this token being generated.</p>
`,returnType:`
<p>stepped(<code>bool</code>)</p>
`}}),yn=new v({props:{name:"class transformers.PhrasalConstraint",anchor:"transformers.PhrasalConstraint",parameters:[{name:"token_ids",val:": typing.List[int]"}],parametersDescription:[{anchor:"transformers.PhrasalConstraint.token_ids",description:`<strong>token_ids</strong> (<code>List[int]</code>) &#x2014;
The id of the token that must be generated by the output.`,name:"token_ids"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L129"}}),kn=new v({props:{name:"class transformers.DisjunctiveConstraint",anchor:"transformers.DisjunctiveConstraint",parameters:[{name:"nested_token_ids",val:": typing.List[typing.List[int]]"}],parametersDescription:[{anchor:"transformers.DisjunctiveConstraint.nested_token_ids",description:"<strong>nested_token_ids</strong> (<code>List[List[int]]</code>) &#x2014; a list of words, where each word is a list of ids. This constraint",name:"nested_token_ids"},{anchor:"transformers.DisjunctiveConstraint.is",description:"<strong>is</strong> fulfilled by generating just one from the list of words. &#x2014;",name:"is"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L261"}}),wn=new v({props:{name:"class transformers.ConstraintListState",anchor:"transformers.ConstraintListState",parameters:[{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"}],parametersDescription:[{anchor:"transformers.ConstraintListState.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of <a href="/docs/transformers/main/en/internal/generation_utils#transformers.Constraint">Constraint</a> objects that must be fulfilled by the beam scorer.`,name:"constraints"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L350"}}),Ln=new v({props:{name:"advance",anchor:"transformers.ConstraintListState.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L382"}}),En=new v({props:{name:"reset",anchor:"transformers.ConstraintListState.reset",parameters:[{name:"token_ids",val:": typing.Optional[typing.List[int]]"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L417"}}),Pn=new Ae({}),Fn=new v({props:{name:"class transformers.BeamScorer",anchor:"transformers.BeamScorer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L88"}}),Dn=new v({props:{name:"process",anchor:"transformers.BeamScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.BeamScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.BeamScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.BeamScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L94",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of all
non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be added
to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),Sn=new v({props:{name:"finalize",anchor:"transformers.BeamScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.finalize.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.finalize.final_beam_scores",description:`<strong>final_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The final scores of all non-finished beams.`,name:"final_beam_scores"},{anchor:"transformers.BeamScorer.finalize.final_beam_tokens",description:`<strong>final_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The last tokens to be added to the non-finished beam_hypotheses.`,name:"final_beam_tokens"},{anchor:"transformers.BeamScorer.finalize.final_beam_indices",description:`<strong>final_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The beam indices indicating to which beam the <code>final_beam_tokens</code> shall be added.`,name:"final_beam_indices"},{anchor:"transformers.BeamScorer.finalize.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.finalize.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L106",returnDescription:`
<p>The generated sequences.
The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter if all batches finished early
due to the <code>eos_token_id</code>.</p>
`,returnType:`
<p><code>torch.LongTensor</code> of shape <code>(batch_size * num_return_sequences, sequence_length)</code></p>
`}}),zn=new v({props:{name:"class transformers.BeamSearchScorer",anchor:"transformers.BeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.BeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.BeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.BeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.BeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length that is used with beam-based generation. It is applied as an exponent to
the sequence length, which in turn is used to divide the score of the sequence. Since the score is the log
likelihood of the sequence (i.e. negative), <code>length_penalty</code> &gt; 0.0 promotes longer sequences, while
<code>length_penalty</code> &lt; 0.0 encourages shorter sequences.`,name:"length_penalty"},{anchor:"transformers.BeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.BeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>~transformer.BeamSearchScorer.finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.BeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L120"}}),In=new v({props:{name:"process",anchor:"transformers.BeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L208"}}),An=new v({props:{name:"finalize",anchor:"transformers.BeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L302"}}),Cn=new v({props:{name:"class transformers.ConstrainedBeamSearchScorer",anchor:"transformers.ConstrainedBeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.ConstrainedBeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.ConstrainedBeamSearchScorer.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of positive constraints represented as <code>Constraint</code> objects that must be fulfilled in the generation
output. For more information, the documentation of <a href="/docs/transformers/main/en/internal/generation_utils#transformers.Constraint">Constraint</a> should be read.`,name:"constraints"},{anchor:"transformers.ConstrainedBeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.ConstrainedBeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length that is used with beam-based generation. It is applied as an exponent to
the sequence length, which in turn is used to divide the score of the sequence. Since the score is the log
likelihood of the sequence (i.e. negative), <code>length_penalty</code> &gt; 0.0 promotes longer sequences, while
<code>length_penalty</code> &lt; 0.0 encourages shorter sequences.`,name:"length_penalty"},{anchor:"transformers.ConstrainedBeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>~transformer.BeamSearchScorer.finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L390"}}),Wn=new v({props:{name:"process",anchor:"transformers.ConstrainedBeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"scores_for_all_vocab",val:": FloatTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.scores_for_all_vocab",description:`<strong>scores_for_all_vocab</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
The scores of all tokens in the vocabulary for each of the beam hypotheses.`,name:"scores_for_all_vocab"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L486",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li>
<p><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of
all
non-finished beams.</p>
</li>
<li>
<p><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be
added
to the non-finished beam_hypotheses.</p>
</li>
<li>
<p><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</p>
</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),Nn=new v({props:{name:"finalize",anchor:"transformers.ConstrainedBeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L768"}}),Vn=new Ae({}),Mn=new v({props:{name:"transformers.top_k_top_p_filtering",anchor:"transformers.top_k_top_p_filtering",parameters:[{name:"logits",val:": FloatTensor"},{name:"top_k",val:": int = 0"},{name:"top_p",val:": float = 1.0"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L3863"}}),jn=new v({props:{name:"transformers.tf_top_k_top_p_filtering",anchor:"transformers.tf_top_k_top_p_filtering",parameters:[{name:"logits",val:""},{name:"top_k",val:" = 0"},{name:"top_p",val:" = 1.0"},{name:"filter_value",val:" = -inf"},{name:"min_tokens_to_keep",val:" = 1"}],parametersDescription:[{anchor:"transformers.tf_top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.tf_top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.tf_top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_utils.py#L3269"}}),{c(){L=o("meta"),Re=c(),k=o("h1"),Ce=o("a"),fc=o("span"),f(ar.$$.fragment),Jp=c(),gc=o("span"),Qp=a("Utilities for Generation"),wd=c(),y=o("p"),Zp=a("This page lists all the utility functions used by "),Un=o("a"),ef=a("generate()"),tf=a(`,
`),Yn=o("a"),rf=a("greedy_search()"),of=a(`,
`),Xn=o("a"),nf=a("contrastive_search()"),sf=a(`,
`),Jn=o("a"),af=a("sample()"),cf=a(`,
`),Qn=o("a"),lf=a("beam_search()"),df=a(`,
`),Zn=o("a"),mf=a("beam_sample()"),pf=a(`,
`),es=o("a"),ff=a("group_beam_search()"),gf=a(`, and
`),ts=o("a"),hf=a("constrained_beam_search()"),uf=a("."),Ld=c(),rs=o("p"),_f=a("Most of those are only useful if you are studying the code of the generate methods in the library."),Ed=c(),Ke=o("h2"),_t=o("a"),hc=o("span"),f(ir.$$.fragment),bf=c(),uc=o("span"),vf=a("Generate Outputs"),Pd=c(),V=o("p"),$f=a("The output of "),os=o("a"),Tf=a("generate()"),yf=a(` is an instance of a subclass of
`),ns=o("a"),kf=a("ModelOutput"),xf=a(`. This output is a data structure containing all the information returned
by `),ss=o("a"),wf=a("generate()"),Lf=a(", but that can also be used as tuple or dictionary."),Fd=c(),as=o("p"),Ef=a("Here\u2019s an example:"),Dd=c(),f(cr.$$.fragment),Sd=c(),We=o("p"),Pf=a("The "),_c=o("code"),Ff=a("generation_output"),Df=a(" object is a "),is=o("a"),Sf=a("GreedySearchDecoderOnlyOutput"),zf=a(`, as we can
see in the documentation of that class below, it means it has the following attributes:`),zd=c(),M=o("ul"),cs=o("li"),bc=o("code"),Of=a("sequences"),qf=a(": the generated sequences of tokens"),Bf=c(),ls=o("li"),vc=o("code"),If=a("scores"),Af=a(" (optional): the prediction scores of the language modelling head, for each generation step"),Cf=c(),ds=o("li"),$c=o("code"),Wf=a("hidden_states"),Nf=a(" (optional): the hidden states of the model, for each generation step"),Vf=c(),ms=o("li"),Tc=o("code"),Mf=a("attentions"),Gf=a(" (optional): the attention weights of the model, for each generation step"),Od=c(),x=o("p"),jf=a("Here we have the "),yc=o("code"),Hf=a("scores"),Rf=a(" since we passed along "),kc=o("code"),Kf=a("output_scores=True"),Uf=a(", but we don\u2019t have "),xc=o("code"),Yf=a("hidden_states"),Xf=a(` and
`),wc=o("code"),Jf=a("attentions"),Qf=a(" because we didn\u2019t pass "),Lc=o("code"),Zf=a("output_hidden_states=True"),eg=a(" or "),Ec=o("code"),tg=a("output_attentions=True"),rg=a("."),qd=c(),S=o("p"),og=a(`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),Pc=o("code"),ng=a("None"),sg=a(". Here for instance "),Fc=o("code"),ag=a("generation_output.scores"),ig=a(` are all the generated prediction scores of the
language modeling head, and `),Dc=o("code"),cg=a("generation_output.attentions"),lg=a(" is "),Sc=o("code"),dg=a("None"),mg=a("."),Bd=c(),z=o("p"),pg=a("When using our "),zc=o("code"),fg=a("generation_output"),gg=a(" object as a tuple, it only keeps the attributes that don\u2019t have "),Oc=o("code"),hg=a("None"),ug=a(` values.
Here, for instance, it has two elements, `),qc=o("code"),_g=a("loss"),bg=a(" then "),Bc=o("code"),vg=a("logits"),$g=a(", so"),Id=c(),f(lr.$$.fragment),Ad=c(),bt=o("p"),Tg=a("will return the tuple "),Ic=o("code"),yg=a("(generation_output.sequences, generation_output.scores)"),kg=a(" for instance."),Cd=c(),O=o("p"),xg=a("When using our "),Ac=o("code"),wg=a("generation_output"),Lg=a(" object as a dictionary, it only keeps the attributes that don\u2019t have "),Cc=o("code"),Eg=a("None"),Pg=a(`
values. Here, for instance, it has two keys that are `),Wc=o("code"),Fg=a("sequences"),Dg=a(" and "),Nc=o("code"),Sg=a("scores"),zg=a("."),Wd=c(),ps=o("p"),Og=a("We document here all output types."),Nd=c(),Ue=o("h3"),vt=o("a"),Vc=o("span"),f(dr.$$.fragment),qg=c(),Mc=o("span"),Bg=a("GreedySearchOutput"),Vd=c(),Ye=o("div"),f(mr.$$.fragment),Ig=c(),Gc=o("p"),Ag=a("Base class for outputs of decoder-only generation models using greedy search."),Md=c(),Xe=o("div"),f(pr.$$.fragment),Cg=c(),jc=o("p"),Wg=a(`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Gd=c(),R=o("div"),f(fr.$$.fragment),Ng=c(),Hc=o("p"),Vg=a("Flax Base class for outputs of decoder-only generation models using greedy search."),Mg=c(),$t=o("div"),f(gr.$$.fragment),Gg=c(),Rc=o("p"),jg=a("\u201CReturns a new object replacing the specified fields with new values."),jd=c(),Je=o("h3"),Tt=o("a"),Kc=o("span"),f(hr.$$.fragment),Hg=c(),Uc=o("span"),Rg=a("SampleOutput"),Hd=c(),Qe=o("div"),f(ur.$$.fragment),Kg=c(),Yc=o("p"),Ug=a("Base class for outputs of decoder-only generation models using sampling."),Rd=c(),Ze=o("div"),f(_r.$$.fragment),Yg=c(),Xc=o("p"),Xg=a(`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Kd=c(),K=o("div"),f(br.$$.fragment),Jg=c(),Jc=o("p"),Qg=a("Flax Base class for outputs of decoder-only generation models using sampling."),Zg=c(),yt=o("div"),f(vr.$$.fragment),eh=c(),Qc=o("p"),th=a("\u201CReturns a new object replacing the specified fields with new values."),Ud=c(),et=o("h3"),kt=o("a"),Zc=o("span"),f($r.$$.fragment),rh=c(),el=o("span"),oh=a("BeamSearchOutput"),Yd=c(),tt=o("div"),f(Tr.$$.fragment),nh=c(),tl=o("p"),sh=a("Base class for outputs of decoder-only generation models using beam search."),Xd=c(),rt=o("div"),f(yr.$$.fragment),ah=c(),rl=o("p"),ih=a(`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Jd=c(),ot=o("h3"),xt=o("a"),ol=o("span"),f(kr.$$.fragment),ch=c(),nl=o("span"),lh=a("BeamSampleOutput"),Qd=c(),nt=o("div"),f(xr.$$.fragment),dh=c(),sl=o("p"),mh=a("Base class for outputs of decoder-only generation models using beam sample."),Zd=c(),st=o("div"),f(wr.$$.fragment),ph=c(),al=o("p"),fh=a(`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),em=c(),at=o("h2"),wt=o("a"),il=o("span"),f(Lr.$$.fragment),gh=c(),cl=o("span"),hh=a("LogitsProcessor"),tm=c(),Lt=o("p"),uh=a("A "),fs=o("a"),_h=a("LogitsProcessor"),bh=a(` can be used to modify the prediction scores of a language model head for
generation.`),rm=c(),U=o("div"),f(Er.$$.fragment),vh=c(),ll=o("p"),$h=a("Abstract base class for all logit processors that can be applied during generation."),Th=c(),Et=o("div"),f(Pr.$$.fragment),yh=c(),dl=o("p"),kh=a("Torch method for processing logits."),om=c(),Y=o("div"),f(Fr.$$.fragment),xh=c(),E=o("p"),wh=a("This class can be used to create a list of "),gs=o("a"),Lh=a("LogitsProcessor"),Eh=a(" or "),hs=o("a"),Ph=a("LogitsWarper"),Fh=a(` to subsequently process a
`),ml=o("code"),Dh=a("scores"),Sh=a(" input tensor. This class inherits from list and adds a specific "),pl=o("em"),fl=o("strong"),zh=a("call"),Oh=a(` method to apply each
`),us=o("a"),qh=a("LogitsProcessor"),Bh=a(" or "),_s=o("a"),Ih=a("LogitsWarper"),Ah=a(" to the inputs."),Ch=c(),bs=o("div"),f(Dr.$$.fragment),nm=c(),X=o("div"),f(Sr.$$.fragment),Wh=c(),gl=o("p"),Nh=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Vh=c(),Pt=o("div"),f(zr.$$.fragment),Mh=c(),hl=o("p"),Gh=a("Torch method for warping logits."),sm=c(),J=o("div"),f(Or.$$.fragment),jh=c(),vs=o("p"),$s=o("a"),Hh=a("LogitsProcessor"),Rh=a(" enforcing a min-length by setting EOS probability to 0."),Kh=c(),Ts=o("div"),f(qr.$$.fragment),am=c(),Q=o("div"),f(Br.$$.fragment),Uh=c(),ys=o("p"),ks=o("a"),Yh=a("LogitsWarper"),Xh=a(" for temperature (exponential scaling output probability distribution)."),Jh=c(),xs=o("div"),f(Ir.$$.fragment),im=c(),Z=o("div"),f(Ar.$$.fragment),Qh=c(),ws=o("p"),Ls=o("a"),Zh=a("LogitsProcessor"),eu=a(" enforcing an exponential penalty on repeated sequences."),tu=c(),Es=o("div"),f(Cr.$$.fragment),cm=c(),ee=o("div"),f(Wr.$$.fragment),ru=c(),Ps=o("p"),Fs=o("a"),ou=a("LogitsWarper"),nu=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),su=c(),Ds=o("div"),f(Nr.$$.fragment),lm=c(),te=o("div"),f(Vr.$$.fragment),au=c(),Ss=o("p"),zs=o("a"),iu=a("LogitsWarper"),cu=a(" that performs top-k, i.e. restricting to the k highest probability elements."),lu=c(),Os=o("div"),f(Mr.$$.fragment),dm=c(),re=o("div"),f(Gr.$$.fragment),du=c(),Ft=o("p"),qs=o("a"),mu=a("LogitsWarper"),pu=a(" that performs typical decoding. See "),jr=o("a"),fu=a(`Typical Decoding for Natural Language
Generation`),gu=a(" for more information."),hu=c(),Bs=o("div"),f(Hr.$$.fragment),mm=c(),oe=o("div"),f(Rr.$$.fragment),uu=c(),Dt=o("p"),Is=o("a"),_u=a("LogitsProcessor"),bu=a(` that enforces no repetition of n-grams. See
`),Kr=o("a"),vu=a("Fairseq"),$u=a("."),Tu=c(),As=o("div"),f(Ur.$$.fragment),pm=c(),ne=o("div"),f(Yr.$$.fragment),yu=c(),Cs=o("p"),Ws=o("a"),ku=a("LogitsProcessor"),xu=a(" that enforces that specified sequences will never be sampled."),wu=c(),Ns=o("div"),f(Xr.$$.fragment),fm=c(),se=o("div"),f(Jr.$$.fragment),Lu=c(),St=o("p"),Vs=o("a"),Eu=a("LogitsProcessor"),Pu=a(` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Qr=o("a"),Fu=a("Autoregressive Entity Retrieval"),Du=a(" for more information."),Su=c(),Ms=o("div"),f(Zr.$$.fragment),gm=c(),ae=o("div"),f(eo.$$.fragment),zu=c(),Ne=o("p"),Gs=o("a"),Ou=a("LogitsProcessor"),qu=a(` that enforces diverse beam search. Note that this logits processor is only effective for
`),js=o("a"),Bu=a("PreTrainedModel.group_beam_search()"),Iu=a(". See "),to=o("a"),Au=a(`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),Cu=a(" for more details."),Wu=c(),Hs=o("div"),f(ro.$$.fragment),hm=c(),ie=o("div"),f(oo.$$.fragment),Nu=c(),Rs=o("p"),Ks=o("a"),Vu=a("LogitsProcessor"),Mu=a(" that enforces the specified token as the first generated token."),Gu=c(),Us=o("div"),f(no.$$.fragment),um=c(),ce=o("div"),f(so.$$.fragment),ju=c(),zt=o("p"),Ys=o("a"),Hu=a("LogitsProcessor"),Ru=a(" that enforces the specified token as the last generated token when "),ul=o("code"),Ku=a("max_length"),Uu=a(" is reached."),Yu=c(),Xs=o("div"),f(ao.$$.fragment),_m=c(),le=o("div"),f(io.$$.fragment),Xu=c(),G=o("p"),Js=o("a"),Ju=a("LogitsProcessor"),Qu=a(" that removes all "),_l=o("code"),Zu=a("nan"),e_=a(" and "),bl=o("code"),t_=a("inf"),r_=a(` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),vl=o("code"),o_=a("max_length"),n_=a(` is
reached.`),s_=c(),Qs=o("div"),f(co.$$.fragment),bm=c(),de=o("div"),f(lo.$$.fragment),a_=c(),$l=o("p"),i_=a("Abstract base class for all logit processors that can be applied during generation."),c_=c(),Ot=o("div"),f(mo.$$.fragment),l_=c(),Tl=o("p"),d_=a("TF method for processing logits."),vm=c(),me=o("div"),f(po.$$.fragment),m_=c(),A=o("p"),p_=a("This class can be used to create a list of "),Zs=o("a"),f_=a("TFLogitsProcessor"),g_=a(" to subsequently process a "),yl=o("code"),h_=a("scores"),u_=a(` input tensor.
This class inherits from list and adds a specific `),kl=o("em"),xl=o("strong"),__=a("call"),b_=a(" method to apply each "),ea=o("a"),v_=a("TFLogitsProcessor"),$_=a(` to the
inputs.`),T_=c(),ta=o("div"),f(fo.$$.fragment),$m=c(),pe=o("div"),f(go.$$.fragment),y_=c(),wl=o("p"),k_=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),x_=c(),qt=o("div"),f(ho.$$.fragment),w_=c(),Ll=o("p"),L_=a("TF method for warping logits."),Tm=c(),fe=o("div"),f(uo.$$.fragment),E_=c(),ra=o("p"),oa=o("a"),P_=a("TFLogitsWarper"),F_=a(" for temperature (exponential scaling output probability distribution)."),D_=c(),na=o("div"),f(_o.$$.fragment),ym=c(),ge=o("div"),f(bo.$$.fragment),S_=c(),sa=o("p"),aa=o("a"),z_=a("TFLogitsWarper"),O_=a(" that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),q_=c(),ia=o("div"),f(vo.$$.fragment),km=c(),he=o("div"),f($o.$$.fragment),B_=c(),ca=o("p"),la=o("a"),I_=a("TFLogitsWarper"),A_=a(" that performs top-k, i.e. restricting to the k highest probability elements."),C_=c(),da=o("div"),f(To.$$.fragment),xm=c(),ue=o("div"),f(yo.$$.fragment),W_=c(),ma=o("p"),pa=o("a"),N_=a("TFLogitsProcessor"),V_=a(" enforcing a min-length by setting EOS probability to 0."),M_=c(),fa=o("div"),f(ko.$$.fragment),wm=c(),_e=o("div"),f(xo.$$.fragment),G_=c(),ga=o("p"),ha=o("a"),j_=a("TFLogitsProcessor"),H_=a(" that enforces that specified sequences will never be sampled."),R_=c(),ua=o("div"),f(wo.$$.fragment),Lm=c(),be=o("div"),f(Lo.$$.fragment),K_=c(),Bt=o("p"),_a=o("a"),U_=a("TFLogitsProcessor"),Y_=a(` that enforces no repetition of n-grams. See
`),Eo=o("a"),X_=a("Fairseq"),J_=a("."),Q_=c(),ba=o("div"),f(Po.$$.fragment),Em=c(),ve=o("div"),f(Fo.$$.fragment),Z_=c(),va=o("p"),$a=o("a"),eb=a("TFLogitsProcessor"),tb=a(" enforcing an exponential penalty on repeated sequences."),rb=c(),Ta=o("div"),f(Do.$$.fragment),Pm=c(),$e=o("div"),f(So.$$.fragment),ob=c(),ya=o("p"),ka=o("a"),nb=a("TFLogitsProcessor"),sb=a(" that enforces the specified token as the first generated token."),ab=c(),xa=o("div"),f(zo.$$.fragment),Fm=c(),Te=o("div"),f(Oo.$$.fragment),ib=c(),It=o("p"),wa=o("a"),cb=a("TFLogitsProcessor"),lb=a(" that enforces the specified token as the last generated token when "),El=o("code"),db=a("max_length"),mb=a(" is reached."),pb=c(),La=o("div"),f(qo.$$.fragment),Dm=c(),ye=o("div"),f(Bo.$$.fragment),fb=c(),Pl=o("p"),gb=a("Abstract base class for all logit processors that can be applied during generation."),hb=c(),At=o("div"),f(Io.$$.fragment),ub=c(),Fl=o("p"),_b=a("Flax method for processing logits."),Sm=c(),ke=o("div"),f(Ao.$$.fragment),bb=c(),P=o("p"),vb=a("This class can be used to create a list of "),Ea=o("a"),$b=a("FlaxLogitsProcessor"),Tb=a(" or "),Pa=o("a"),yb=a("FlaxLogitsWarper"),kb=a(` to subsequently process
a `),Dl=o("code"),xb=a("scores"),wb=a(" input tensor. This class inherits from list and adds a specific "),Sl=o("em"),zl=o("strong"),Lb=a("call"),Eb=a(` method to apply each
`),Fa=o("a"),Pb=a("FlaxLogitsProcessor"),Fb=a(" or "),Da=o("a"),Db=a("FlaxLogitsWarper"),Sb=a(" to the inputs."),zb=c(),Sa=o("div"),f(Co.$$.fragment),zm=c(),xe=o("div"),f(Wo.$$.fragment),Ob=c(),Ol=o("p"),qb=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Bb=c(),Ct=o("div"),f(No.$$.fragment),Ib=c(),ql=o("p"),Ab=a("Flax method for warping logits."),Om=c(),we=o("div"),f(Vo.$$.fragment),Cb=c(),za=o("p"),Oa=o("a"),Wb=a("FlaxLogitsWarper"),Nb=a(" for temperature (exponential scaling output probability distribution)."),Vb=c(),qa=o("div"),f(Mo.$$.fragment),qm=c(),Le=o("div"),f(Go.$$.fragment),Mb=c(),Ba=o("p"),Ia=o("a"),Gb=a("FlaxLogitsWarper"),jb=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Hb=c(),Aa=o("div"),f(jo.$$.fragment),Bm=c(),Ee=o("div"),f(Ho.$$.fragment),Rb=c(),Ca=o("p"),Wa=o("a"),Kb=a("FlaxLogitsWarper"),Ub=a(" that performs top-k, i.e. restricting to the k highest probability elements."),Yb=c(),Na=o("div"),f(Ro.$$.fragment),Im=c(),Pe=o("div"),f(Ko.$$.fragment),Xb=c(),Va=o("p"),Ma=o("a"),Jb=a("FlaxLogitsProcessor"),Qb=a(" that enforces the specified token as the first generated token."),Zb=c(),Ga=o("div"),f(Uo.$$.fragment),Am=c(),Fe=o("div"),f(Yo.$$.fragment),ev=c(),Wt=o("p"),ja=o("a"),tv=a("FlaxLogitsProcessor"),rv=a(" that enforces the specified token as the last generated token when "),Bl=o("code"),ov=a("max_length"),nv=a(" is reached."),sv=c(),Ha=o("div"),f(Xo.$$.fragment),Cm=c(),De=o("div"),f(Jo.$$.fragment),av=c(),Ra=o("p"),Ka=o("a"),iv=a("FlaxLogitsProcessor"),cv=a(" enforcing a min-length by setting EOS probability to 0."),lv=c(),Ua=o("div"),f(Qo.$$.fragment),Wm=c(),it=o("h2"),Nt=o("a"),Il=o("span"),f(Zo.$$.fragment),dv=c(),Al=o("span"),mv=a("StoppingCriteria"),Nm=c(),Vt=o("p"),pv=a("A "),Ya=o("a"),fv=a("StoppingCriteria"),gv=a(" can be used to change when to stop generation (other than EOS token)."),Vm=c(),Se=o("div"),f(en.$$.fragment),hv=c(),Cl=o("p"),uv=a("Abstract base class for all stopping criteria that can be applied during generation."),_v=c(),Xa=o("div"),f(tn.$$.fragment),Mm=c(),ct=o("div"),f(rn.$$.fragment),bv=c(),Ja=o("div"),f(on.$$.fragment),Gm=c(),ze=o("div"),f(nn.$$.fragment),vv=c(),sn=o("p"),$v=a("This class can be used to stop generation whenever the full generated number of tokens exceeds "),Wl=o("code"),Tv=a("max_length"),yv=a(`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),kv=c(),Qa=o("div"),f(an.$$.fragment),jm=c(),Oe=o("div"),f(cn.$$.fragment),xv=c(),ln=o("p"),wv=a(`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),Nl=o("code"),Lv=a("initial_time"),Ev=a("."),Pv=c(),Za=o("div"),f(dn.$$.fragment),Hm=c(),lt=o("h2"),Mt=o("a"),Vl=o("span"),f(mn.$$.fragment),Fv=c(),Ml=o("span"),Dv=a("Constraints"),Rm=c(),Gt=o("p"),Sv=a("A "),ei=o("a"),zv=a("Constraint"),Ov=a(" can be used to force the generation to include specific tokens or sequences in the output."),Km=c(),$=o("div"),f(pn.$$.fragment),qv=c(),Gl=o("p"),Bv=a(`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),Iv=c(),jl=o("p"),Av=a("All classes that inherit Constraint must follow the requirement that"),Cv=c(),f(jt.$$.fragment),Wv=c(),Hl=o("p"),Nv=a("will always terminate (halt)."),Vv=c(),Ht=o("div"),f(fn.$$.fragment),Mv=c(),Rl=o("p"),Gv=a("When called, returns the token that would take this constraint one step closer to being fulfilled."),jv=c(),Rt=o("div"),f(gn.$$.fragment),Hv=c(),Kl=o("p"),Rv=a("Creates a new instance of this constraint."),Kv=c(),Kt=o("div"),f(hn.$$.fragment),Uv=c(),Ul=o("p"),Yv=a("Reads in a token and returns whether it creates progress."),Xv=c(),Ut=o("div"),f(un.$$.fragment),Jv=c(),_n=o("p"),Qv=a("Returns the number of remaining steps of "),Yl=o("code"),Zv=a("advance()"),e$=a(" in order to complete this constraint."),t$=c(),Yt=o("div"),f(bn.$$.fragment),r$=c(),Xl=o("p"),o$=a(`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),n$=c(),Xt=o("div"),f(vn.$$.fragment),s$=c(),Jl=o("p"),a$=a("Tests whether this constraint has been properly defined."),i$=c(),Ve=o("div"),f($n.$$.fragment),c$=c(),Tn=o("p"),l$=a(`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Ql=o("code"),d$=a("does_advance(self, token_id: int)"),m$=a("."),p$=c(),Zl=o("p"),f$=a(`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),Um=c(),dt=o("div"),f(yn.$$.fragment),g$=c(),ti=o("p"),ri=o("a"),h$=a("Constraint"),u$=a(" enforcing that an ordered sequence of tokens is included in the output."),Ym=c(),mt=o("div"),f(kn.$$.fragment),_$=c(),xn=o("p"),b$=a("A special "),oi=o("a"),v$=a("Constraint"),$$=a(" that is fulfilled by fulfilling just one of several constraints."),Xm=c(),C=o("div"),f(wn.$$.fragment),T$=c(),ed=o("p"),y$=a("A class for beam scorers to track its progress through a list of constraints."),k$=c(),D=o("div"),f(Ln.$$.fragment),x$=c(),td=o("p"),w$=a(`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),L$=c(),pt=o("p"),E$=a("Given constraints "),rd=o("code"),P$=a("c_i = {t_ij | j == # of tokens}"),F$=a(`, If we\u2019re not in the middle of progressing through a
specific constraint `),od=o("code"),D$=a("c_i"),S$=a(", we return:"),z$=c(),nd=o("p"),sd=o("code"),O$=a("[t_k1 for k in indices of unfulfilled constraints]"),q$=c(),qe=o("p"),B$=a(`If we are in the middle of a constraint, then we return:
`),ad=o("code"),I$=a("[t_ij]"),A$=a(", where "),id=o("code"),C$=a("i"),W$=a(" is the index of the inprogress constraint, "),cd=o("code"),N$=a("j"),V$=a(" is the next step for the constraint."),M$=c(),ld=o("p"),G$=a(`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),j$=c(),Jt=o("div"),f(En.$$.fragment),H$=c(),dd=o("p"),R$=a("token_ids: the tokens generated thus far to reset the state of the progress through constraints."),Jm=c(),ft=o("h2"),Qt=o("a"),md=o("span"),f(Pn.$$.fragment),K$=c(),pd=o("span"),U$=a("BeamSearch"),Qm=c(),W=o("div"),f(Fn.$$.fragment),Y$=c(),gt=o("p"),X$=a("Abstract base class for all beam scorers that are used for "),ni=o("a"),J$=a("beam_search()"),Q$=a(` and
`),si=o("a"),Z$=a("beam_sample()"),eT=a("."),tT=c(),ai=o("div"),f(Dn.$$.fragment),rT=c(),ii=o("div"),f(Sn.$$.fragment),Zm=c(),F=o("div"),f(zn.$$.fragment),oT=c(),ci=o("p"),li=o("a"),nT=a("BeamScorer"),sT=a(" implementing standard beam search decoding."),aT=c(),On=o("p"),iT=a("Adapted in part from "),qn=o("a"),cT=a(`Facebook\u2019s XLM beam search
code`),lT=a("."),dT=c(),di=o("p"),mT=a("Reference for the diverse beam search algorithm and implementation "),Bn=o("a"),pT=a(`Ashwin Kalyan\u2019s DBS
implementation`),fT=c(),mi=o("div"),f(In.$$.fragment),gT=c(),pi=o("div"),f(An.$$.fragment),ep=c(),N=o("div"),f(Cn.$$.fragment),hT=c(),fi=o("p"),gi=o("a"),uT=a("BeamScorer"),_T=a(" implementing constrained beam search decoding."),bT=c(),hi=o("div"),f(Wn.$$.fragment),vT=c(),ui=o("div"),f(Nn.$$.fragment),tp=c(),ht=o("h2"),Zt=o("a"),fd=o("span"),f(Vn.$$.fragment),$T=c(),gd=o("span"),TT=a("Utilities"),rp=c(),Be=o("div"),f(Mn.$$.fragment),yT=c(),hd=o("p"),kT=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),xT=c(),_i=o("p"),wT=a("From: "),Gn=o("a"),LT=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),op=c(),Ie=o("div"),f(jn.$$.fragment),ET=c(),ud=o("p"),PT=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),FT=c(),bi=o("p"),DT=a("From: "),Hn=o("a"),ST=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),this.h()},l(e){const m=Sk('[data-svelte="svelte-1phssyn"]',document.head);L=n(m,"META",{name:!0,content:!0}),m.forEach(r),Re=l(e),k=n(e,"H1",{class:!0});var Rn=s(k);Ce=n(Rn,"A",{id:!0,class:!0,href:!0});var c1=s(Ce);fc=n(c1,"SPAN",{});var l1=s(fc);g(ar.$$.fragment,l1),l1.forEach(r),c1.forEach(r),Jp=l(Rn),gc=n(Rn,"SPAN",{});var d1=s(gc);Qp=i(d1,"Utilities for Generation"),d1.forEach(r),Rn.forEach(r),wd=l(e),y=n(e,"P",{});var w=s(y);Zp=i(w,"This page lists all the utility functions used by "),Un=n(w,"A",{href:!0});var m1=s(Un);ef=i(m1,"generate()"),m1.forEach(r),tf=i(w,`,
`),Yn=n(w,"A",{href:!0});var p1=s(Yn);rf=i(p1,"greedy_search()"),p1.forEach(r),of=i(w,`,
`),Xn=n(w,"A",{href:!0});var f1=s(Xn);nf=i(f1,"contrastive_search()"),f1.forEach(r),sf=i(w,`,
`),Jn=n(w,"A",{href:!0});var g1=s(Jn);af=i(g1,"sample()"),g1.forEach(r),cf=i(w,`,
`),Qn=n(w,"A",{href:!0});var h1=s(Qn);lf=i(h1,"beam_search()"),h1.forEach(r),df=i(w,`,
`),Zn=n(w,"A",{href:!0});var u1=s(Zn);mf=i(u1,"beam_sample()"),u1.forEach(r),pf=i(w,`,
`),es=n(w,"A",{href:!0});var _1=s(es);ff=i(_1,"group_beam_search()"),_1.forEach(r),gf=i(w,`, and
`),ts=n(w,"A",{href:!0});var b1=s(ts);hf=i(b1,"constrained_beam_search()"),b1.forEach(r),uf=i(w,"."),w.forEach(r),Ld=l(e),rs=n(e,"P",{});var v1=s(rs);_f=i(v1,"Most of those are only useful if you are studying the code of the generate methods in the library."),v1.forEach(r),Ed=l(e),Ke=n(e,"H2",{class:!0});var sp=s(Ke);_t=n(sp,"A",{id:!0,class:!0,href:!0});var $1=s(_t);hc=n($1,"SPAN",{});var T1=s(hc);g(ir.$$.fragment,T1),T1.forEach(r),$1.forEach(r),bf=l(sp),uc=n(sp,"SPAN",{});var y1=s(uc);vf=i(y1,"Generate Outputs"),y1.forEach(r),sp.forEach(r),Pd=l(e),V=n(e,"P",{});var er=s(V);$f=i(er,"The output of "),os=n(er,"A",{href:!0});var k1=s(os);Tf=i(k1,"generate()"),k1.forEach(r),yf=i(er,` is an instance of a subclass of
`),ns=n(er,"A",{href:!0});var x1=s(ns);kf=i(x1,"ModelOutput"),x1.forEach(r),xf=i(er,`. This output is a data structure containing all the information returned
by `),ss=n(er,"A",{href:!0});var w1=s(ss);wf=i(w1,"generate()"),w1.forEach(r),Lf=i(er,", but that can also be used as tuple or dictionary."),er.forEach(r),Fd=l(e),as=n(e,"P",{});var L1=s(as);Ef=i(L1,"Here\u2019s an example:"),L1.forEach(r),Dd=l(e),g(cr.$$.fragment,e),Sd=l(e),We=n(e,"P",{});var vi=s(We);Pf=i(vi,"The "),_c=n(vi,"CODE",{});var E1=s(_c);Ff=i(E1,"generation_output"),E1.forEach(r),Df=i(vi," object is a "),is=n(vi,"A",{href:!0});var P1=s(is);Sf=i(P1,"GreedySearchDecoderOnlyOutput"),P1.forEach(r),zf=i(vi,`, as we can
see in the documentation of that class below, it means it has the following attributes:`),vi.forEach(r),zd=l(e),M=n(e,"UL",{});var tr=s(M);cs=n(tr,"LI",{});var zT=s(cs);bc=n(zT,"CODE",{});var F1=s(bc);Of=i(F1,"sequences"),F1.forEach(r),qf=i(zT,": the generated sequences of tokens"),zT.forEach(r),Bf=l(tr),ls=n(tr,"LI",{});var OT=s(ls);vc=n(OT,"CODE",{});var D1=s(vc);If=i(D1,"scores"),D1.forEach(r),Af=i(OT," (optional): the prediction scores of the language modelling head, for each generation step"),OT.forEach(r),Cf=l(tr),ds=n(tr,"LI",{});var qT=s(ds);$c=n(qT,"CODE",{});var S1=s($c);Wf=i(S1,"hidden_states"),S1.forEach(r),Nf=i(qT," (optional): the hidden states of the model, for each generation step"),qT.forEach(r),Vf=l(tr),ms=n(tr,"LI",{});var BT=s(ms);Tc=n(BT,"CODE",{});var z1=s(Tc);Mf=i(z1,"attentions"),z1.forEach(r),Gf=i(BT," (optional): the attention weights of the model, for each generation step"),BT.forEach(r),tr.forEach(r),Od=l(e),x=n(e,"P",{});var q=s(x);jf=i(q,"Here we have the "),yc=n(q,"CODE",{});var O1=s(yc);Hf=i(O1,"scores"),O1.forEach(r),Rf=i(q," since we passed along "),kc=n(q,"CODE",{});var q1=s(kc);Kf=i(q1,"output_scores=True"),q1.forEach(r),Uf=i(q,", but we don\u2019t have "),xc=n(q,"CODE",{});var B1=s(xc);Yf=i(B1,"hidden_states"),B1.forEach(r),Xf=i(q,` and
`),wc=n(q,"CODE",{});var I1=s(wc);Jf=i(I1,"attentions"),I1.forEach(r),Qf=i(q," because we didn\u2019t pass "),Lc=n(q,"CODE",{});var A1=s(Lc);Zf=i(A1,"output_hidden_states=True"),A1.forEach(r),eg=i(q," or "),Ec=n(q,"CODE",{});var C1=s(Ec);tg=i(C1,"output_attentions=True"),C1.forEach(r),rg=i(q,"."),q.forEach(r),qd=l(e),S=n(e,"P",{});var Me=s(S);og=i(Me,`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),Pc=n(Me,"CODE",{});var W1=s(Pc);ng=i(W1,"None"),W1.forEach(r),sg=i(Me,". Here for instance "),Fc=n(Me,"CODE",{});var N1=s(Fc);ag=i(N1,"generation_output.scores"),N1.forEach(r),ig=i(Me,` are all the generated prediction scores of the
language modeling head, and `),Dc=n(Me,"CODE",{});var V1=s(Dc);cg=i(V1,"generation_output.attentions"),V1.forEach(r),lg=i(Me," is "),Sc=n(Me,"CODE",{});var M1=s(Sc);dg=i(M1,"None"),M1.forEach(r),mg=i(Me,"."),Me.forEach(r),Bd=l(e),z=n(e,"P",{});var Ge=s(z);pg=i(Ge,"When using our "),zc=n(Ge,"CODE",{});var G1=s(zc);fg=i(G1,"generation_output"),G1.forEach(r),gg=i(Ge," object as a tuple, it only keeps the attributes that don\u2019t have "),Oc=n(Ge,"CODE",{});var j1=s(Oc);hg=i(j1,"None"),j1.forEach(r),ug=i(Ge,` values.
Here, for instance, it has two elements, `),qc=n(Ge,"CODE",{});var H1=s(qc);_g=i(H1,"loss"),H1.forEach(r),bg=i(Ge," then "),Bc=n(Ge,"CODE",{});var R1=s(Bc);vg=i(R1,"logits"),R1.forEach(r),$g=i(Ge,", so"),Ge.forEach(r),Id=l(e),g(lr.$$.fragment,e),Ad=l(e),bt=n(e,"P",{});var ap=s(bt);Tg=i(ap,"will return the tuple "),Ic=n(ap,"CODE",{});var K1=s(Ic);yg=i(K1,"(generation_output.sequences, generation_output.scores)"),K1.forEach(r),kg=i(ap," for instance."),ap.forEach(r),Cd=l(e),O=n(e,"P",{});var je=s(O);xg=i(je,"When using our "),Ac=n(je,"CODE",{});var U1=s(Ac);wg=i(U1,"generation_output"),U1.forEach(r),Lg=i(je," object as a dictionary, it only keeps the attributes that don\u2019t have "),Cc=n(je,"CODE",{});var Y1=s(Cc);Eg=i(Y1,"None"),Y1.forEach(r),Pg=i(je,`
values. Here, for instance, it has two keys that are `),Wc=n(je,"CODE",{});var X1=s(Wc);Fg=i(X1,"sequences"),X1.forEach(r),Dg=i(je," and "),Nc=n(je,"CODE",{});var J1=s(Nc);Sg=i(J1,"scores"),J1.forEach(r),zg=i(je,"."),je.forEach(r),Wd=l(e),ps=n(e,"P",{});var Q1=s(ps);Og=i(Q1,"We document here all output types."),Q1.forEach(r),Nd=l(e),Ue=n(e,"H3",{class:!0});var ip=s(Ue);vt=n(ip,"A",{id:!0,class:!0,href:!0});var Z1=s(vt);Vc=n(Z1,"SPAN",{});var e2=s(Vc);g(dr.$$.fragment,e2),e2.forEach(r),Z1.forEach(r),qg=l(ip),Mc=n(ip,"SPAN",{});var t2=s(Mc);Bg=i(t2,"GreedySearchOutput"),t2.forEach(r),ip.forEach(r),Vd=l(e),Ye=n(e,"DIV",{class:!0});var cp=s(Ye);g(mr.$$.fragment,cp),Ig=l(cp),Gc=n(cp,"P",{});var r2=s(Gc);Ag=i(r2,"Base class for outputs of decoder-only generation models using greedy search."),r2.forEach(r),cp.forEach(r),Md=l(e),Xe=n(e,"DIV",{class:!0});var lp=s(Xe);g(pr.$$.fragment,lp),Cg=l(lp),jc=n(lp,"P",{});var o2=s(jc);Wg=i(o2,`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),o2.forEach(r),lp.forEach(r),Gd=l(e),R=n(e,"DIV",{class:!0});var $i=s(R);g(fr.$$.fragment,$i),Ng=l($i),Hc=n($i,"P",{});var n2=s(Hc);Vg=i(n2,"Flax Base class for outputs of decoder-only generation models using greedy search."),n2.forEach(r),Mg=l($i),$t=n($i,"DIV",{class:!0});var dp=s($t);g(gr.$$.fragment,dp),Gg=l(dp),Rc=n(dp,"P",{});var s2=s(Rc);jg=i(s2,"\u201CReturns a new object replacing the specified fields with new values."),s2.forEach(r),dp.forEach(r),$i.forEach(r),jd=l(e),Je=n(e,"H3",{class:!0});var mp=s(Je);Tt=n(mp,"A",{id:!0,class:!0,href:!0});var a2=s(Tt);Kc=n(a2,"SPAN",{});var i2=s(Kc);g(hr.$$.fragment,i2),i2.forEach(r),a2.forEach(r),Hg=l(mp),Uc=n(mp,"SPAN",{});var c2=s(Uc);Rg=i(c2,"SampleOutput"),c2.forEach(r),mp.forEach(r),Hd=l(e),Qe=n(e,"DIV",{class:!0});var pp=s(Qe);g(ur.$$.fragment,pp),Kg=l(pp),Yc=n(pp,"P",{});var l2=s(Yc);Ug=i(l2,"Base class for outputs of decoder-only generation models using sampling."),l2.forEach(r),pp.forEach(r),Rd=l(e),Ze=n(e,"DIV",{class:!0});var fp=s(Ze);g(_r.$$.fragment,fp),Yg=l(fp),Xc=n(fp,"P",{});var d2=s(Xc);Xg=i(d2,`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),d2.forEach(r),fp.forEach(r),Kd=l(e),K=n(e,"DIV",{class:!0});var Ti=s(K);g(br.$$.fragment,Ti),Jg=l(Ti),Jc=n(Ti,"P",{});var m2=s(Jc);Qg=i(m2,"Flax Base class for outputs of decoder-only generation models using sampling."),m2.forEach(r),Zg=l(Ti),yt=n(Ti,"DIV",{class:!0});var gp=s(yt);g(vr.$$.fragment,gp),eh=l(gp),Qc=n(gp,"P",{});var p2=s(Qc);th=i(p2,"\u201CReturns a new object replacing the specified fields with new values."),p2.forEach(r),gp.forEach(r),Ti.forEach(r),Ud=l(e),et=n(e,"H3",{class:!0});var hp=s(et);kt=n(hp,"A",{id:!0,class:!0,href:!0});var f2=s(kt);Zc=n(f2,"SPAN",{});var g2=s(Zc);g($r.$$.fragment,g2),g2.forEach(r),f2.forEach(r),rh=l(hp),el=n(hp,"SPAN",{});var h2=s(el);oh=i(h2,"BeamSearchOutput"),h2.forEach(r),hp.forEach(r),Yd=l(e),tt=n(e,"DIV",{class:!0});var up=s(tt);g(Tr.$$.fragment,up),nh=l(up),tl=n(up,"P",{});var u2=s(tl);sh=i(u2,"Base class for outputs of decoder-only generation models using beam search."),u2.forEach(r),up.forEach(r),Xd=l(e),rt=n(e,"DIV",{class:!0});var _p=s(rt);g(yr.$$.fragment,_p),ah=l(_p),rl=n(_p,"P",{});var _2=s(rl);ih=i(_2,`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),_2.forEach(r),_p.forEach(r),Jd=l(e),ot=n(e,"H3",{class:!0});var bp=s(ot);xt=n(bp,"A",{id:!0,class:!0,href:!0});var b2=s(xt);ol=n(b2,"SPAN",{});var v2=s(ol);g(kr.$$.fragment,v2),v2.forEach(r),b2.forEach(r),ch=l(bp),nl=n(bp,"SPAN",{});var $2=s(nl);lh=i($2,"BeamSampleOutput"),$2.forEach(r),bp.forEach(r),Qd=l(e),nt=n(e,"DIV",{class:!0});var vp=s(nt);g(xr.$$.fragment,vp),dh=l(vp),sl=n(vp,"P",{});var T2=s(sl);mh=i(T2,"Base class for outputs of decoder-only generation models using beam sample."),T2.forEach(r),vp.forEach(r),Zd=l(e),st=n(e,"DIV",{class:!0});var $p=s(st);g(wr.$$.fragment,$p),ph=l($p),al=n($p,"P",{});var y2=s(al);fh=i(y2,`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),y2.forEach(r),$p.forEach(r),em=l(e),at=n(e,"H2",{class:!0});var Tp=s(at);wt=n(Tp,"A",{id:!0,class:!0,href:!0});var k2=s(wt);il=n(k2,"SPAN",{});var x2=s(il);g(Lr.$$.fragment,x2),x2.forEach(r),k2.forEach(r),gh=l(Tp),cl=n(Tp,"SPAN",{});var w2=s(cl);hh=i(w2,"LogitsProcessor"),w2.forEach(r),Tp.forEach(r),tm=l(e),Lt=n(e,"P",{});var yp=s(Lt);uh=i(yp,"A "),fs=n(yp,"A",{href:!0});var L2=s(fs);_h=i(L2,"LogitsProcessor"),L2.forEach(r),bh=i(yp,` can be used to modify the prediction scores of a language model head for
generation.`),yp.forEach(r),rm=l(e),U=n(e,"DIV",{class:!0});var yi=s(U);g(Er.$$.fragment,yi),vh=l(yi),ll=n(yi,"P",{});var E2=s(ll);$h=i(E2,"Abstract base class for all logit processors that can be applied during generation."),E2.forEach(r),Th=l(yi),Et=n(yi,"DIV",{class:!0});var kp=s(Et);g(Pr.$$.fragment,kp),yh=l(kp),dl=n(kp,"P",{});var P2=s(dl);kh=i(P2,"Torch method for processing logits."),P2.forEach(r),kp.forEach(r),yi.forEach(r),om=l(e),Y=n(e,"DIV",{class:!0});var ki=s(Y);g(Fr.$$.fragment,ki),xh=l(ki),E=n(ki,"P",{});var B=s(E);wh=i(B,"This class can be used to create a list of "),gs=n(B,"A",{href:!0});var F2=s(gs);Lh=i(F2,"LogitsProcessor"),F2.forEach(r),Eh=i(B," or "),hs=n(B,"A",{href:!0});var D2=s(hs);Ph=i(D2,"LogitsWarper"),D2.forEach(r),Fh=i(B,` to subsequently process a
`),ml=n(B,"CODE",{});var S2=s(ml);Dh=i(S2,"scores"),S2.forEach(r),Sh=i(B," input tensor. This class inherits from list and adds a specific "),pl=n(B,"EM",{});var z2=s(pl);fl=n(z2,"STRONG",{});var O2=s(fl);zh=i(O2,"call"),O2.forEach(r),z2.forEach(r),Oh=i(B,` method to apply each
`),us=n(B,"A",{href:!0});var q2=s(us);qh=i(q2,"LogitsProcessor"),q2.forEach(r),Bh=i(B," or "),_s=n(B,"A",{href:!0});var B2=s(_s);Ih=i(B2,"LogitsWarper"),B2.forEach(r),Ah=i(B," to the inputs."),B.forEach(r),Ch=l(ki),bs=n(ki,"DIV",{class:!0});var I2=s(bs);g(Dr.$$.fragment,I2),I2.forEach(r),ki.forEach(r),nm=l(e),X=n(e,"DIV",{class:!0});var xi=s(X);g(Sr.$$.fragment,xi),Wh=l(xi),gl=n(xi,"P",{});var A2=s(gl);Nh=i(A2,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),A2.forEach(r),Vh=l(xi),Pt=n(xi,"DIV",{class:!0});var xp=s(Pt);g(zr.$$.fragment,xp),Mh=l(xp),hl=n(xp,"P",{});var C2=s(hl);Gh=i(C2,"Torch method for warping logits."),C2.forEach(r),xp.forEach(r),xi.forEach(r),sm=l(e),J=n(e,"DIV",{class:!0});var wi=s(J);g(Or.$$.fragment,wi),jh=l(wi),vs=n(wi,"P",{});var IT=s(vs);$s=n(IT,"A",{href:!0});var W2=s($s);Hh=i(W2,"LogitsProcessor"),W2.forEach(r),Rh=i(IT," enforcing a min-length by setting EOS probability to 0."),IT.forEach(r),Kh=l(wi),Ts=n(wi,"DIV",{class:!0});var N2=s(Ts);g(qr.$$.fragment,N2),N2.forEach(r),wi.forEach(r),am=l(e),Q=n(e,"DIV",{class:!0});var Li=s(Q);g(Br.$$.fragment,Li),Uh=l(Li),ys=n(Li,"P",{});var AT=s(ys);ks=n(AT,"A",{href:!0});var V2=s(ks);Yh=i(V2,"LogitsWarper"),V2.forEach(r),Xh=i(AT," for temperature (exponential scaling output probability distribution)."),AT.forEach(r),Jh=l(Li),xs=n(Li,"DIV",{class:!0});var M2=s(xs);g(Ir.$$.fragment,M2),M2.forEach(r),Li.forEach(r),im=l(e),Z=n(e,"DIV",{class:!0});var Ei=s(Z);g(Ar.$$.fragment,Ei),Qh=l(Ei),ws=n(Ei,"P",{});var CT=s(ws);Ls=n(CT,"A",{href:!0});var G2=s(Ls);Zh=i(G2,"LogitsProcessor"),G2.forEach(r),eu=i(CT," enforcing an exponential penalty on repeated sequences."),CT.forEach(r),tu=l(Ei),Es=n(Ei,"DIV",{class:!0});var j2=s(Es);g(Cr.$$.fragment,j2),j2.forEach(r),Ei.forEach(r),cm=l(e),ee=n(e,"DIV",{class:!0});var Pi=s(ee);g(Wr.$$.fragment,Pi),ru=l(Pi),Ps=n(Pi,"P",{});var WT=s(Ps);Fs=n(WT,"A",{href:!0});var H2=s(Fs);ou=i(H2,"LogitsWarper"),H2.forEach(r),nu=i(WT," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),WT.forEach(r),su=l(Pi),Ds=n(Pi,"DIV",{class:!0});var R2=s(Ds);g(Nr.$$.fragment,R2),R2.forEach(r),Pi.forEach(r),lm=l(e),te=n(e,"DIV",{class:!0});var Fi=s(te);g(Vr.$$.fragment,Fi),au=l(Fi),Ss=n(Fi,"P",{});var NT=s(Ss);zs=n(NT,"A",{href:!0});var K2=s(zs);iu=i(K2,"LogitsWarper"),K2.forEach(r),cu=i(NT," that performs top-k, i.e. restricting to the k highest probability elements."),NT.forEach(r),lu=l(Fi),Os=n(Fi,"DIV",{class:!0});var U2=s(Os);g(Mr.$$.fragment,U2),U2.forEach(r),Fi.forEach(r),dm=l(e),re=n(e,"DIV",{class:!0});var Di=s(re);g(Gr.$$.fragment,Di),du=l(Di),Ft=n(Di,"P",{});var _d=s(Ft);qs=n(_d,"A",{href:!0});var Y2=s(qs);mu=i(Y2,"LogitsWarper"),Y2.forEach(r),pu=i(_d," that performs typical decoding. See "),jr=n(_d,"A",{href:!0,rel:!0});var X2=s(jr);fu=i(X2,`Typical Decoding for Natural Language
Generation`),X2.forEach(r),gu=i(_d," for more information."),_d.forEach(r),hu=l(Di),Bs=n(Di,"DIV",{class:!0});var J2=s(Bs);g(Hr.$$.fragment,J2),J2.forEach(r),Di.forEach(r),mm=l(e),oe=n(e,"DIV",{class:!0});var Si=s(oe);g(Rr.$$.fragment,Si),uu=l(Si),Dt=n(Si,"P",{});var bd=s(Dt);Is=n(bd,"A",{href:!0});var Q2=s(Is);_u=i(Q2,"LogitsProcessor"),Q2.forEach(r),bu=i(bd,` that enforces no repetition of n-grams. See
`),Kr=n(bd,"A",{href:!0,rel:!0});var Z2=s(Kr);vu=i(Z2,"Fairseq"),Z2.forEach(r),$u=i(bd,"."),bd.forEach(r),Tu=l(Si),As=n(Si,"DIV",{class:!0});var ey=s(As);g(Ur.$$.fragment,ey),ey.forEach(r),Si.forEach(r),pm=l(e),ne=n(e,"DIV",{class:!0});var zi=s(ne);g(Yr.$$.fragment,zi),yu=l(zi),Cs=n(zi,"P",{});var VT=s(Cs);Ws=n(VT,"A",{href:!0});var ty=s(Ws);ku=i(ty,"LogitsProcessor"),ty.forEach(r),xu=i(VT," that enforces that specified sequences will never be sampled."),VT.forEach(r),wu=l(zi),Ns=n(zi,"DIV",{class:!0});var ry=s(Ns);g(Xr.$$.fragment,ry),ry.forEach(r),zi.forEach(r),fm=l(e),se=n(e,"DIV",{class:!0});var Oi=s(se);g(Jr.$$.fragment,Oi),Lu=l(Oi),St=n(Oi,"P",{});var vd=s(St);Vs=n(vd,"A",{href:!0});var oy=s(Vs);Eu=i(oy,"LogitsProcessor"),oy.forEach(r),Pu=i(vd,` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Qr=n(vd,"A",{href:!0,rel:!0});var ny=s(Qr);Fu=i(ny,"Autoregressive Entity Retrieval"),ny.forEach(r),Du=i(vd," for more information."),vd.forEach(r),Su=l(Oi),Ms=n(Oi,"DIV",{class:!0});var sy=s(Ms);g(Zr.$$.fragment,sy),sy.forEach(r),Oi.forEach(r),gm=l(e),ae=n(e,"DIV",{class:!0});var qi=s(ae);g(eo.$$.fragment,qi),zu=l(qi),Ne=n(qi,"P",{});var Kn=s(Ne);Gs=n(Kn,"A",{href:!0});var ay=s(Gs);Ou=i(ay,"LogitsProcessor"),ay.forEach(r),qu=i(Kn,` that enforces diverse beam search. Note that this logits processor is only effective for
`),js=n(Kn,"A",{href:!0});var iy=s(js);Bu=i(iy,"PreTrainedModel.group_beam_search()"),iy.forEach(r),Iu=i(Kn,". See "),to=n(Kn,"A",{href:!0,rel:!0});var cy=s(to);Au=i(cy,`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),cy.forEach(r),Cu=i(Kn," for more details."),Kn.forEach(r),Wu=l(qi),Hs=n(qi,"DIV",{class:!0});var ly=s(Hs);g(ro.$$.fragment,ly),ly.forEach(r),qi.forEach(r),hm=l(e),ie=n(e,"DIV",{class:!0});var Bi=s(ie);g(oo.$$.fragment,Bi),Nu=l(Bi),Rs=n(Bi,"P",{});var MT=s(Rs);Ks=n(MT,"A",{href:!0});var dy=s(Ks);Vu=i(dy,"LogitsProcessor"),dy.forEach(r),Mu=i(MT," that enforces the specified token as the first generated token."),MT.forEach(r),Gu=l(Bi),Us=n(Bi,"DIV",{class:!0});var my=s(Us);g(no.$$.fragment,my),my.forEach(r),Bi.forEach(r),um=l(e),ce=n(e,"DIV",{class:!0});var Ii=s(ce);g(so.$$.fragment,Ii),ju=l(Ii),zt=n(Ii,"P",{});var $d=s(zt);Ys=n($d,"A",{href:!0});var py=s(Ys);Hu=i(py,"LogitsProcessor"),py.forEach(r),Ru=i($d," that enforces the specified token as the last generated token when "),ul=n($d,"CODE",{});var fy=s(ul);Ku=i(fy,"max_length"),fy.forEach(r),Uu=i($d," is reached."),$d.forEach(r),Yu=l(Ii),Xs=n(Ii,"DIV",{class:!0});var gy=s(Xs);g(ao.$$.fragment,gy),gy.forEach(r),Ii.forEach(r),_m=l(e),le=n(e,"DIV",{class:!0});var Ai=s(le);g(io.$$.fragment,Ai),Xu=l(Ai),G=n(Ai,"P",{});var ut=s(G);Js=n(ut,"A",{href:!0});var hy=s(Js);Ju=i(hy,"LogitsProcessor"),hy.forEach(r),Qu=i(ut," that removes all "),_l=n(ut,"CODE",{});var uy=s(_l);Zu=i(uy,"nan"),uy.forEach(r),e_=i(ut," and "),bl=n(ut,"CODE",{});var _y=s(bl);t_=i(_y,"inf"),_y.forEach(r),r_=i(ut,` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),vl=n(ut,"CODE",{});var by=s(vl);o_=i(by,"max_length"),by.forEach(r),n_=i(ut,` is
reached.`),ut.forEach(r),s_=l(Ai),Qs=n(Ai,"DIV",{class:!0});var vy=s(Qs);g(co.$$.fragment,vy),vy.forEach(r),Ai.forEach(r),bm=l(e),de=n(e,"DIV",{class:!0});var Ci=s(de);g(lo.$$.fragment,Ci),a_=l(Ci),$l=n(Ci,"P",{});var $y=s($l);i_=i($y,"Abstract base class for all logit processors that can be applied during generation."),$y.forEach(r),c_=l(Ci),Ot=n(Ci,"DIV",{class:!0});var wp=s(Ot);g(mo.$$.fragment,wp),l_=l(wp),Tl=n(wp,"P",{});var Ty=s(Tl);d_=i(Ty,"TF method for processing logits."),Ty.forEach(r),wp.forEach(r),Ci.forEach(r),vm=l(e),me=n(e,"DIV",{class:!0});var Wi=s(me);g(po.$$.fragment,Wi),m_=l(Wi),A=n(Wi,"P",{});var He=s(A);p_=i(He,"This class can be used to create a list of "),Zs=n(He,"A",{href:!0});var yy=s(Zs);f_=i(yy,"TFLogitsProcessor"),yy.forEach(r),g_=i(He," to subsequently process a "),yl=n(He,"CODE",{});var ky=s(yl);h_=i(ky,"scores"),ky.forEach(r),u_=i(He,` input tensor.
This class inherits from list and adds a specific `),kl=n(He,"EM",{});var xy=s(kl);xl=n(xy,"STRONG",{});var wy=s(xl);__=i(wy,"call"),wy.forEach(r),xy.forEach(r),b_=i(He," method to apply each "),ea=n(He,"A",{href:!0});var Ly=s(ea);v_=i(Ly,"TFLogitsProcessor"),Ly.forEach(r),$_=i(He,` to the
inputs.`),He.forEach(r),T_=l(Wi),ta=n(Wi,"DIV",{class:!0});var Ey=s(ta);g(fo.$$.fragment,Ey),Ey.forEach(r),Wi.forEach(r),$m=l(e),pe=n(e,"DIV",{class:!0});var Ni=s(pe);g(go.$$.fragment,Ni),y_=l(Ni),wl=n(Ni,"P",{});var Py=s(wl);k_=i(Py,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Py.forEach(r),x_=l(Ni),qt=n(Ni,"DIV",{class:!0});var Lp=s(qt);g(ho.$$.fragment,Lp),w_=l(Lp),Ll=n(Lp,"P",{});var Fy=s(Ll);L_=i(Fy,"TF method for warping logits."),Fy.forEach(r),Lp.forEach(r),Ni.forEach(r),Tm=l(e),fe=n(e,"DIV",{class:!0});var Vi=s(fe);g(uo.$$.fragment,Vi),E_=l(Vi),ra=n(Vi,"P",{});var GT=s(ra);oa=n(GT,"A",{href:!0});var Dy=s(oa);P_=i(Dy,"TFLogitsWarper"),Dy.forEach(r),F_=i(GT," for temperature (exponential scaling output probability distribution)."),GT.forEach(r),D_=l(Vi),na=n(Vi,"DIV",{class:!0});var Sy=s(na);g(_o.$$.fragment,Sy),Sy.forEach(r),Vi.forEach(r),ym=l(e),ge=n(e,"DIV",{class:!0});var Mi=s(ge);g(bo.$$.fragment,Mi),S_=l(Mi),sa=n(Mi,"P",{});var jT=s(sa);aa=n(jT,"A",{href:!0});var zy=s(aa);z_=i(zy,"TFLogitsWarper"),zy.forEach(r),O_=i(jT," that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),jT.forEach(r),q_=l(Mi),ia=n(Mi,"DIV",{class:!0});var Oy=s(ia);g(vo.$$.fragment,Oy),Oy.forEach(r),Mi.forEach(r),km=l(e),he=n(e,"DIV",{class:!0});var Gi=s(he);g($o.$$.fragment,Gi),B_=l(Gi),ca=n(Gi,"P",{});var HT=s(ca);la=n(HT,"A",{href:!0});var qy=s(la);I_=i(qy,"TFLogitsWarper"),qy.forEach(r),A_=i(HT," that performs top-k, i.e. restricting to the k highest probability elements."),HT.forEach(r),C_=l(Gi),da=n(Gi,"DIV",{class:!0});var By=s(da);g(To.$$.fragment,By),By.forEach(r),Gi.forEach(r),xm=l(e),ue=n(e,"DIV",{class:!0});var ji=s(ue);g(yo.$$.fragment,ji),W_=l(ji),ma=n(ji,"P",{});var RT=s(ma);pa=n(RT,"A",{href:!0});var Iy=s(pa);N_=i(Iy,"TFLogitsProcessor"),Iy.forEach(r),V_=i(RT," enforcing a min-length by setting EOS probability to 0."),RT.forEach(r),M_=l(ji),fa=n(ji,"DIV",{class:!0});var Ay=s(fa);g(ko.$$.fragment,Ay),Ay.forEach(r),ji.forEach(r),wm=l(e),_e=n(e,"DIV",{class:!0});var Hi=s(_e);g(xo.$$.fragment,Hi),G_=l(Hi),ga=n(Hi,"P",{});var KT=s(ga);ha=n(KT,"A",{href:!0});var Cy=s(ha);j_=i(Cy,"TFLogitsProcessor"),Cy.forEach(r),H_=i(KT," that enforces that specified sequences will never be sampled."),KT.forEach(r),R_=l(Hi),ua=n(Hi,"DIV",{class:!0});var Wy=s(ua);g(wo.$$.fragment,Wy),Wy.forEach(r),Hi.forEach(r),Lm=l(e),be=n(e,"DIV",{class:!0});var Ri=s(be);g(Lo.$$.fragment,Ri),K_=l(Ri),Bt=n(Ri,"P",{});var Td=s(Bt);_a=n(Td,"A",{href:!0});var Ny=s(_a);U_=i(Ny,"TFLogitsProcessor"),Ny.forEach(r),Y_=i(Td,` that enforces no repetition of n-grams. See
`),Eo=n(Td,"A",{href:!0,rel:!0});var Vy=s(Eo);X_=i(Vy,"Fairseq"),Vy.forEach(r),J_=i(Td,"."),Td.forEach(r),Q_=l(Ri),ba=n(Ri,"DIV",{class:!0});var My=s(ba);g(Po.$$.fragment,My),My.forEach(r),Ri.forEach(r),Em=l(e),ve=n(e,"DIV",{class:!0});var Ki=s(ve);g(Fo.$$.fragment,Ki),Z_=l(Ki),va=n(Ki,"P",{});var UT=s(va);$a=n(UT,"A",{href:!0});var Gy=s($a);eb=i(Gy,"TFLogitsProcessor"),Gy.forEach(r),tb=i(UT," enforcing an exponential penalty on repeated sequences."),UT.forEach(r),rb=l(Ki),Ta=n(Ki,"DIV",{class:!0});var jy=s(Ta);g(Do.$$.fragment,jy),jy.forEach(r),Ki.forEach(r),Pm=l(e),$e=n(e,"DIV",{class:!0});var Ui=s($e);g(So.$$.fragment,Ui),ob=l(Ui),ya=n(Ui,"P",{});var YT=s(ya);ka=n(YT,"A",{href:!0});var Hy=s(ka);nb=i(Hy,"TFLogitsProcessor"),Hy.forEach(r),sb=i(YT," that enforces the specified token as the first generated token."),YT.forEach(r),ab=l(Ui),xa=n(Ui,"DIV",{class:!0});var Ry=s(xa);g(zo.$$.fragment,Ry),Ry.forEach(r),Ui.forEach(r),Fm=l(e),Te=n(e,"DIV",{class:!0});var Yi=s(Te);g(Oo.$$.fragment,Yi),ib=l(Yi),It=n(Yi,"P",{});var yd=s(It);wa=n(yd,"A",{href:!0});var Ky=s(wa);cb=i(Ky,"TFLogitsProcessor"),Ky.forEach(r),lb=i(yd," that enforces the specified token as the last generated token when "),El=n(yd,"CODE",{});var Uy=s(El);db=i(Uy,"max_length"),Uy.forEach(r),mb=i(yd," is reached."),yd.forEach(r),pb=l(Yi),La=n(Yi,"DIV",{class:!0});var Yy=s(La);g(qo.$$.fragment,Yy),Yy.forEach(r),Yi.forEach(r),Dm=l(e),ye=n(e,"DIV",{class:!0});var Xi=s(ye);g(Bo.$$.fragment,Xi),fb=l(Xi),Pl=n(Xi,"P",{});var Xy=s(Pl);gb=i(Xy,"Abstract base class for all logit processors that can be applied during generation."),Xy.forEach(r),hb=l(Xi),At=n(Xi,"DIV",{class:!0});var Ep=s(At);g(Io.$$.fragment,Ep),ub=l(Ep),Fl=n(Ep,"P",{});var Jy=s(Fl);_b=i(Jy,"Flax method for processing logits."),Jy.forEach(r),Ep.forEach(r),Xi.forEach(r),Sm=l(e),ke=n(e,"DIV",{class:!0});var Ji=s(ke);g(Ao.$$.fragment,Ji),bb=l(Ji),P=n(Ji,"P",{});var I=s(P);vb=i(I,"This class can be used to create a list of "),Ea=n(I,"A",{href:!0});var Qy=s(Ea);$b=i(Qy,"FlaxLogitsProcessor"),Qy.forEach(r),Tb=i(I," or "),Pa=n(I,"A",{href:!0});var Zy=s(Pa);yb=i(Zy,"FlaxLogitsWarper"),Zy.forEach(r),kb=i(I,` to subsequently process
a `),Dl=n(I,"CODE",{});var e0=s(Dl);xb=i(e0,"scores"),e0.forEach(r),wb=i(I," input tensor. This class inherits from list and adds a specific "),Sl=n(I,"EM",{});var t0=s(Sl);zl=n(t0,"STRONG",{});var r0=s(zl);Lb=i(r0,"call"),r0.forEach(r),t0.forEach(r),Eb=i(I,` method to apply each
`),Fa=n(I,"A",{href:!0});var o0=s(Fa);Pb=i(o0,"FlaxLogitsProcessor"),o0.forEach(r),Fb=i(I," or "),Da=n(I,"A",{href:!0});var n0=s(Da);Db=i(n0,"FlaxLogitsWarper"),n0.forEach(r),Sb=i(I," to the inputs."),I.forEach(r),zb=l(Ji),Sa=n(Ji,"DIV",{class:!0});var s0=s(Sa);g(Co.$$.fragment,s0),s0.forEach(r),Ji.forEach(r),zm=l(e),xe=n(e,"DIV",{class:!0});var Qi=s(xe);g(Wo.$$.fragment,Qi),Ob=l(Qi),Ol=n(Qi,"P",{});var a0=s(Ol);qb=i(a0,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),a0.forEach(r),Bb=l(Qi),Ct=n(Qi,"DIV",{class:!0});var Pp=s(Ct);g(No.$$.fragment,Pp),Ib=l(Pp),ql=n(Pp,"P",{});var i0=s(ql);Ab=i(i0,"Flax method for warping logits."),i0.forEach(r),Pp.forEach(r),Qi.forEach(r),Om=l(e),we=n(e,"DIV",{class:!0});var Zi=s(we);g(Vo.$$.fragment,Zi),Cb=l(Zi),za=n(Zi,"P",{});var XT=s(za);Oa=n(XT,"A",{href:!0});var c0=s(Oa);Wb=i(c0,"FlaxLogitsWarper"),c0.forEach(r),Nb=i(XT," for temperature (exponential scaling output probability distribution)."),XT.forEach(r),Vb=l(Zi),qa=n(Zi,"DIV",{class:!0});var l0=s(qa);g(Mo.$$.fragment,l0),l0.forEach(r),Zi.forEach(r),qm=l(e),Le=n(e,"DIV",{class:!0});var ec=s(Le);g(Go.$$.fragment,ec),Mb=l(ec),Ba=n(ec,"P",{});var JT=s(Ba);Ia=n(JT,"A",{href:!0});var d0=s(Ia);Gb=i(d0,"FlaxLogitsWarper"),d0.forEach(r),jb=i(JT," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),JT.forEach(r),Hb=l(ec),Aa=n(ec,"DIV",{class:!0});var m0=s(Aa);g(jo.$$.fragment,m0),m0.forEach(r),ec.forEach(r),Bm=l(e),Ee=n(e,"DIV",{class:!0});var tc=s(Ee);g(Ho.$$.fragment,tc),Rb=l(tc),Ca=n(tc,"P",{});var QT=s(Ca);Wa=n(QT,"A",{href:!0});var p0=s(Wa);Kb=i(p0,"FlaxLogitsWarper"),p0.forEach(r),Ub=i(QT," that performs top-k, i.e. restricting to the k highest probability elements."),QT.forEach(r),Yb=l(tc),Na=n(tc,"DIV",{class:!0});var f0=s(Na);g(Ro.$$.fragment,f0),f0.forEach(r),tc.forEach(r),Im=l(e),Pe=n(e,"DIV",{class:!0});var rc=s(Pe);g(Ko.$$.fragment,rc),Xb=l(rc),Va=n(rc,"P",{});var ZT=s(Va);Ma=n(ZT,"A",{href:!0});var g0=s(Ma);Jb=i(g0,"FlaxLogitsProcessor"),g0.forEach(r),Qb=i(ZT," that enforces the specified token as the first generated token."),ZT.forEach(r),Zb=l(rc),Ga=n(rc,"DIV",{class:!0});var h0=s(Ga);g(Uo.$$.fragment,h0),h0.forEach(r),rc.forEach(r),Am=l(e),Fe=n(e,"DIV",{class:!0});var oc=s(Fe);g(Yo.$$.fragment,oc),ev=l(oc),Wt=n(oc,"P",{});var kd=s(Wt);ja=n(kd,"A",{href:!0});var u0=s(ja);tv=i(u0,"FlaxLogitsProcessor"),u0.forEach(r),rv=i(kd," that enforces the specified token as the last generated token when "),Bl=n(kd,"CODE",{});var _0=s(Bl);ov=i(_0,"max_length"),_0.forEach(r),nv=i(kd," is reached."),kd.forEach(r),sv=l(oc),Ha=n(oc,"DIV",{class:!0});var b0=s(Ha);g(Xo.$$.fragment,b0),b0.forEach(r),oc.forEach(r),Cm=l(e),De=n(e,"DIV",{class:!0});var nc=s(De);g(Jo.$$.fragment,nc),av=l(nc),Ra=n(nc,"P",{});var e1=s(Ra);Ka=n(e1,"A",{href:!0});var v0=s(Ka);iv=i(v0,"FlaxLogitsProcessor"),v0.forEach(r),cv=i(e1," enforcing a min-length by setting EOS probability to 0."),e1.forEach(r),lv=l(nc),Ua=n(nc,"DIV",{class:!0});var $0=s(Ua);g(Qo.$$.fragment,$0),$0.forEach(r),nc.forEach(r),Wm=l(e),it=n(e,"H2",{class:!0});var Fp=s(it);Nt=n(Fp,"A",{id:!0,class:!0,href:!0});var T0=s(Nt);Il=n(T0,"SPAN",{});var y0=s(Il);g(Zo.$$.fragment,y0),y0.forEach(r),T0.forEach(r),dv=l(Fp),Al=n(Fp,"SPAN",{});var k0=s(Al);mv=i(k0,"StoppingCriteria"),k0.forEach(r),Fp.forEach(r),Nm=l(e),Vt=n(e,"P",{});var Dp=s(Vt);pv=i(Dp,"A "),Ya=n(Dp,"A",{href:!0});var x0=s(Ya);fv=i(x0,"StoppingCriteria"),x0.forEach(r),gv=i(Dp," can be used to change when to stop generation (other than EOS token)."),Dp.forEach(r),Vm=l(e),Se=n(e,"DIV",{class:!0});var sc=s(Se);g(en.$$.fragment,sc),hv=l(sc),Cl=n(sc,"P",{});var w0=s(Cl);uv=i(w0,"Abstract base class for all stopping criteria that can be applied during generation."),w0.forEach(r),_v=l(sc),Xa=n(sc,"DIV",{class:!0});var L0=s(Xa);g(tn.$$.fragment,L0),L0.forEach(r),sc.forEach(r),Mm=l(e),ct=n(e,"DIV",{class:!0});var Sp=s(ct);g(rn.$$.fragment,Sp),bv=l(Sp),Ja=n(Sp,"DIV",{class:!0});var E0=s(Ja);g(on.$$.fragment,E0),E0.forEach(r),Sp.forEach(r),Gm=l(e),ze=n(e,"DIV",{class:!0});var ac=s(ze);g(nn.$$.fragment,ac),vv=l(ac),sn=n(ac,"P",{});var zp=s(sn);$v=i(zp,"This class can be used to stop generation whenever the full generated number of tokens exceeds "),Wl=n(zp,"CODE",{});var P0=s(Wl);Tv=i(P0,"max_length"),P0.forEach(r),yv=i(zp,`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),zp.forEach(r),kv=l(ac),Qa=n(ac,"DIV",{class:!0});var F0=s(Qa);g(an.$$.fragment,F0),F0.forEach(r),ac.forEach(r),jm=l(e),Oe=n(e,"DIV",{class:!0});var ic=s(Oe);g(cn.$$.fragment,ic),xv=l(ic),ln=n(ic,"P",{});var Op=s(ln);wv=i(Op,`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),Nl=n(Op,"CODE",{});var D0=s(Nl);Lv=i(D0,"initial_time"),D0.forEach(r),Ev=i(Op,"."),Op.forEach(r),Pv=l(ic),Za=n(ic,"DIV",{class:!0});var S0=s(Za);g(dn.$$.fragment,S0),S0.forEach(r),ic.forEach(r),Hm=l(e),lt=n(e,"H2",{class:!0});var qp=s(lt);Mt=n(qp,"A",{id:!0,class:!0,href:!0});var z0=s(Mt);Vl=n(z0,"SPAN",{});var O0=s(Vl);g(mn.$$.fragment,O0),O0.forEach(r),z0.forEach(r),Fv=l(qp),Ml=n(qp,"SPAN",{});var q0=s(Ml);Dv=i(q0,"Constraints"),q0.forEach(r),qp.forEach(r),Rm=l(e),Gt=n(e,"P",{});var Bp=s(Gt);Sv=i(Bp,"A "),ei=n(Bp,"A",{href:!0});var B0=s(ei);zv=i(B0,"Constraint"),B0.forEach(r),Ov=i(Bp," can be used to force the generation to include specific tokens or sequences in the output."),Bp.forEach(r),Km=l(e),$=n(e,"DIV",{class:!0});var T=s($);g(pn.$$.fragment,T),qv=l(T),Gl=n(T,"P",{});var I0=s(Gl);Bv=i(I0,`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),I0.forEach(r),Iv=l(T),jl=n(T,"P",{});var A0=s(jl);Av=i(A0,"All classes that inherit Constraint must follow the requirement that"),A0.forEach(r),Cv=l(T),g(jt.$$.fragment,T),Wv=l(T),Hl=n(T,"P",{});var C0=s(Hl);Nv=i(C0,"will always terminate (halt)."),C0.forEach(r),Vv=l(T),Ht=n(T,"DIV",{class:!0});var Ip=s(Ht);g(fn.$$.fragment,Ip),Mv=l(Ip),Rl=n(Ip,"P",{});var W0=s(Rl);Gv=i(W0,"When called, returns the token that would take this constraint one step closer to being fulfilled."),W0.forEach(r),Ip.forEach(r),jv=l(T),Rt=n(T,"DIV",{class:!0});var Ap=s(Rt);g(gn.$$.fragment,Ap),Hv=l(Ap),Kl=n(Ap,"P",{});var N0=s(Kl);Rv=i(N0,"Creates a new instance of this constraint."),N0.forEach(r),Ap.forEach(r),Kv=l(T),Kt=n(T,"DIV",{class:!0});var Cp=s(Kt);g(hn.$$.fragment,Cp),Uv=l(Cp),Ul=n(Cp,"P",{});var V0=s(Ul);Yv=i(V0,"Reads in a token and returns whether it creates progress."),V0.forEach(r),Cp.forEach(r),Xv=l(T),Ut=n(T,"DIV",{class:!0});var Wp=s(Ut);g(un.$$.fragment,Wp),Jv=l(Wp),_n=n(Wp,"P",{});var Np=s(_n);Qv=i(Np,"Returns the number of remaining steps of "),Yl=n(Np,"CODE",{});var M0=s(Yl);Zv=i(M0,"advance()"),M0.forEach(r),e$=i(Np," in order to complete this constraint."),Np.forEach(r),Wp.forEach(r),t$=l(T),Yt=n(T,"DIV",{class:!0});var Vp=s(Yt);g(bn.$$.fragment,Vp),r$=l(Vp),Xl=n(Vp,"P",{});var G0=s(Xl);o$=i(G0,`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),G0.forEach(r),Vp.forEach(r),n$=l(T),Xt=n(T,"DIV",{class:!0});var Mp=s(Xt);g(vn.$$.fragment,Mp),s$=l(Mp),Jl=n(Mp,"P",{});var j0=s(Jl);a$=i(j0,"Tests whether this constraint has been properly defined."),j0.forEach(r),Mp.forEach(r),i$=l(T),Ve=n(T,"DIV",{class:!0});var cc=s(Ve);g($n.$$.fragment,cc),c$=l(cc),Tn=n(cc,"P",{});var Gp=s(Tn);l$=i(Gp,`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Ql=n(Gp,"CODE",{});var H0=s(Ql);d$=i(H0,"does_advance(self, token_id: int)"),H0.forEach(r),m$=i(Gp,"."),Gp.forEach(r),p$=l(cc),Zl=n(cc,"P",{});var R0=s(Zl);f$=i(R0,`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),R0.forEach(r),cc.forEach(r),T.forEach(r),Um=l(e),dt=n(e,"DIV",{class:!0});var jp=s(dt);g(yn.$$.fragment,jp),g$=l(jp),ti=n(jp,"P",{});var t1=s(ti);ri=n(t1,"A",{href:!0});var K0=s(ri);h$=i(K0,"Constraint"),K0.forEach(r),u$=i(t1," enforcing that an ordered sequence of tokens is included in the output."),t1.forEach(r),jp.forEach(r),Ym=l(e),mt=n(e,"DIV",{class:!0});var Hp=s(mt);g(kn.$$.fragment,Hp),_$=l(Hp),xn=n(Hp,"P",{});var Rp=s(xn);b$=i(Rp,"A special "),oi=n(Rp,"A",{href:!0});var U0=s(oi);v$=i(U0,"Constraint"),U0.forEach(r),$$=i(Rp," that is fulfilled by fulfilling just one of several constraints."),Rp.forEach(r),Hp.forEach(r),Xm=l(e),C=n(e,"DIV",{class:!0});var rr=s(C);g(wn.$$.fragment,rr),T$=l(rr),ed=n(rr,"P",{});var Y0=s(ed);y$=i(Y0,"A class for beam scorers to track its progress through a list of constraints."),Y0.forEach(r),k$=l(rr),D=n(rr,"DIV",{class:!0});var j=s(D);g(Ln.$$.fragment,j),x$=l(j),td=n(j,"P",{});var X0=s(td);w$=i(X0,`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),X0.forEach(r),L$=l(j),pt=n(j,"P",{});var lc=s(pt);E$=i(lc,"Given constraints "),rd=n(lc,"CODE",{});var J0=s(rd);P$=i(J0,"c_i = {t_ij | j == # of tokens}"),J0.forEach(r),F$=i(lc,`, If we\u2019re not in the middle of progressing through a
specific constraint `),od=n(lc,"CODE",{});var Q0=s(od);D$=i(Q0,"c_i"),Q0.forEach(r),S$=i(lc,", we return:"),lc.forEach(r),z$=l(j),nd=n(j,"P",{});var Z0=s(nd);sd=n(Z0,"CODE",{});var ek=s(sd);O$=i(ek,"[t_k1 for k in indices of unfulfilled constraints]"),ek.forEach(r),Z0.forEach(r),q$=l(j),qe=n(j,"P",{});var or=s(qe);B$=i(or,`If we are in the middle of a constraint, then we return:
`),ad=n(or,"CODE",{});var tk=s(ad);I$=i(tk,"[t_ij]"),tk.forEach(r),A$=i(or,", where "),id=n(or,"CODE",{});var rk=s(id);C$=i(rk,"i"),rk.forEach(r),W$=i(or," is the index of the inprogress constraint, "),cd=n(or,"CODE",{});var ok=s(cd);N$=i(ok,"j"),ok.forEach(r),V$=i(or," is the next step for the constraint."),or.forEach(r),M$=l(j),ld=n(j,"P",{});var nk=s(ld);G$=i(nk,`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),nk.forEach(r),j.forEach(r),j$=l(rr),Jt=n(rr,"DIV",{class:!0});var Kp=s(Jt);g(En.$$.fragment,Kp),H$=l(Kp),dd=n(Kp,"P",{});var sk=s(dd);R$=i(sk,"token_ids: the tokens generated thus far to reset the state of the progress through constraints."),sk.forEach(r),Kp.forEach(r),rr.forEach(r),Jm=l(e),ft=n(e,"H2",{class:!0});var Up=s(ft);Qt=n(Up,"A",{id:!0,class:!0,href:!0});var ak=s(Qt);md=n(ak,"SPAN",{});var ik=s(md);g(Pn.$$.fragment,ik),ik.forEach(r),ak.forEach(r),K$=l(Up),pd=n(Up,"SPAN",{});var ck=s(pd);U$=i(ck,"BeamSearch"),ck.forEach(r),Up.forEach(r),Qm=l(e),W=n(e,"DIV",{class:!0});var nr=s(W);g(Fn.$$.fragment,nr),Y$=l(nr),gt=n(nr,"P",{});var dc=s(gt);X$=i(dc,"Abstract base class for all beam scorers that are used for "),ni=n(dc,"A",{href:!0});var lk=s(ni);J$=i(lk,"beam_search()"),lk.forEach(r),Q$=i(dc,` and
`),si=n(dc,"A",{href:!0});var dk=s(si);Z$=i(dk,"beam_sample()"),dk.forEach(r),eT=i(dc,"."),dc.forEach(r),tT=l(nr),ai=n(nr,"DIV",{class:!0});var mk=s(ai);g(Dn.$$.fragment,mk),mk.forEach(r),rT=l(nr),ii=n(nr,"DIV",{class:!0});var pk=s(ii);g(Sn.$$.fragment,pk),pk.forEach(r),nr.forEach(r),Zm=l(e),F=n(e,"DIV",{class:!0});var H=s(F);g(zn.$$.fragment,H),oT=l(H),ci=n(H,"P",{});var r1=s(ci);li=n(r1,"A",{href:!0});var fk=s(li);nT=i(fk,"BeamScorer"),fk.forEach(r),sT=i(r1," implementing standard beam search decoding."),r1.forEach(r),aT=l(H),On=n(H,"P",{});var Yp=s(On);iT=i(Yp,"Adapted in part from "),qn=n(Yp,"A",{href:!0,rel:!0});var gk=s(qn);cT=i(gk,`Facebook\u2019s XLM beam search
code`),gk.forEach(r),lT=i(Yp,"."),Yp.forEach(r),dT=l(H),di=n(H,"P",{});var o1=s(di);mT=i(o1,"Reference for the diverse beam search algorithm and implementation "),Bn=n(o1,"A",{href:!0,rel:!0});var hk=s(Bn);pT=i(hk,`Ashwin Kalyan\u2019s DBS
implementation`),hk.forEach(r),o1.forEach(r),fT=l(H),mi=n(H,"DIV",{class:!0});var uk=s(mi);g(In.$$.fragment,uk),uk.forEach(r),gT=l(H),pi=n(H,"DIV",{class:!0});var _k=s(pi);g(An.$$.fragment,_k),_k.forEach(r),H.forEach(r),ep=l(e),N=n(e,"DIV",{class:!0});var sr=s(N);g(Cn.$$.fragment,sr),hT=l(sr),fi=n(sr,"P",{});var n1=s(fi);gi=n(n1,"A",{href:!0});var bk=s(gi);uT=i(bk,"BeamScorer"),bk.forEach(r),_T=i(n1," implementing constrained beam search decoding."),n1.forEach(r),bT=l(sr),hi=n(sr,"DIV",{class:!0});var vk=s(hi);g(Wn.$$.fragment,vk),vk.forEach(r),vT=l(sr),ui=n(sr,"DIV",{class:!0});var $k=s(ui);g(Nn.$$.fragment,$k),$k.forEach(r),sr.forEach(r),tp=l(e),ht=n(e,"H2",{class:!0});var Xp=s(ht);Zt=n(Xp,"A",{id:!0,class:!0,href:!0});var Tk=s(Zt);fd=n(Tk,"SPAN",{});var yk=s(fd);g(Vn.$$.fragment,yk),yk.forEach(r),Tk.forEach(r),$T=l(Xp),gd=n(Xp,"SPAN",{});var kk=s(gd);TT=i(kk,"Utilities"),kk.forEach(r),Xp.forEach(r),rp=l(e),Be=n(e,"DIV",{class:!0});var mc=s(Be);g(Mn.$$.fragment,mc),yT=l(mc),hd=n(mc,"P",{});var xk=s(hd);kT=i(xk,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),xk.forEach(r),xT=l(mc),_i=n(mc,"P",{});var s1=s(_i);wT=i(s1,"From: "),Gn=n(s1,"A",{href:!0,rel:!0});var wk=s(Gn);LT=i(wk,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),wk.forEach(r),s1.forEach(r),mc.forEach(r),op=l(e),Ie=n(e,"DIV",{class:!0});var pc=s(Ie);g(jn.$$.fragment,pc),ET=l(pc),ud=n(pc,"P",{});var Lk=s(ud);PT=i(Lk,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),Lk.forEach(r),FT=l(pc),bi=n(pc,"P",{});var a1=s(bi);DT=i(a1,"From: "),Hn=n(a1,"A",{href:!0,rel:!0});var Ek=s(Hn);ST=i(Ek,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),Ek.forEach(r),a1.forEach(r),pc.forEach(r),this.h()},h(){d(L,"name","hf:doc:metadata"),d(L,"content",JSON.stringify(Ak)),d(Ce,"id","utilities-for-generation"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#utilities-for-generation"),d(k,"class","relative group"),d(Un,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Yn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.greedy_search"),d(Xn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.contrastive_search"),d(Jn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.sample"),d(Qn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(Zn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(es,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(ts,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.constrained_beam_search"),d(_t,"id","generate-outputs"),d(_t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_t,"href","#generate-outputs"),d(Ke,"class","relative group"),d(os,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(ns,"href","/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput"),d(ss,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(is,"href","/docs/transformers/main/en/internal/generation_utils#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(vt,"id","transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vt,"href","#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(Ue,"class","relative group"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tt,"id","transformers.generation_utils.SampleDecoderOnlyOutput"),d(Tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tt,"href","#transformers.generation_utils.SampleDecoderOnlyOutput"),d(Je,"class","relative group"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kt,"id","transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kt,"href","#transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(et,"class","relative group"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xt,"id","transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xt,"href","#transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(ot,"class","relative group"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wt,"id","transformers.LogitsProcessor"),d(wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wt,"href","#transformers.LogitsProcessor"),d(at,"class","relative group"),d(fs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(hs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(us,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(_s,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($s,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ts,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ks,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ls,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(Ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(Os,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(jr,"href","https://arxiv.org/abs/2202.00666"),d(jr,"rel","nofollow"),d(Bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Is,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Kr,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Kr,"rel","nofollow"),d(As,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ws,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ns,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Qr,"href","https://arxiv.org/abs/2010.00904"),d(Qr,"rel","nofollow"),d(Ms,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(js,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(to,"href","https://arxiv.org/pdf/1610.02424.pdf"),d(to,"rel","nofollow"),d(Hs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ks,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ys,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Js,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ea,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsWarper"),d(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsWarper"),d(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(la,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsWarper"),d(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ha,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_a,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Eo,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Eo,"rel","nofollow"),d(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($a,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ka,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(La,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ea,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Pa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Fa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Da,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ia,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ma,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ja,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ka,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nt,"id","transformers.StoppingCriteria"),d(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nt,"href","#transformers.StoppingCriteria"),d(it,"class","relative group"),d(Ya,"href","/docs/transformers/main/en/internal/generation_utils#transformers.StoppingCriteria"),d(Xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mt,"id","transformers.Constraint"),d(Mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mt,"href","#transformers.Constraint"),d(lt,"class","relative group"),d(ei,"href","/docs/transformers/main/en/internal/generation_utils#transformers.Constraint"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ri,"href","/docs/transformers/main/en/internal/generation_utils#transformers.Constraint"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oi,"href","/docs/transformers/main/en/internal/generation_utils#transformers.Constraint"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qt,"id","transformers.BeamScorer"),d(Qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qt,"href","#transformers.BeamScorer"),d(ft,"class","relative group"),d(ni,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(si,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(ai,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ii,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(li,"href","/docs/transformers/main/en/internal/generation_utils#transformers.BeamScorer"),d(qn,"href","https://github.com/facebookresearch/XLM/blob/9e6f6814d17be4fe5b15f2e6c43eb2b2d76daeb4/src/model/transformer.py#L529"),d(qn,"rel","nofollow"),d(Bn,"href","https://github.com/ashwinkalyan/dbs/blob/master/dbs/beam_utils.lua"),d(Bn,"rel","nofollow"),d(mi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gi,"href","/docs/transformers/main/en/internal/generation_utils#transformers.BeamScorer"),d(hi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ui,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zt,"id","transformers.top_k_top_p_filtering"),d(Zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zt,"href","#transformers.top_k_top_p_filtering"),d(ht,"class","relative group"),d(Gn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Gn,"rel","nofollow"),d(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Hn,"rel","nofollow"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,m){t(document.head,L),p(e,Re,m),p(e,k,m),t(k,Ce),t(Ce,fc),h(ar,fc,null),t(k,Jp),t(k,gc),t(gc,Qp),p(e,wd,m),p(e,y,m),t(y,Zp),t(y,Un),t(Un,ef),t(y,tf),t(y,Yn),t(Yn,rf),t(y,of),t(y,Xn),t(Xn,nf),t(y,sf),t(y,Jn),t(Jn,af),t(y,cf),t(y,Qn),t(Qn,lf),t(y,df),t(y,Zn),t(Zn,mf),t(y,pf),t(y,es),t(es,ff),t(y,gf),t(y,ts),t(ts,hf),t(y,uf),p(e,Ld,m),p(e,rs,m),t(rs,_f),p(e,Ed,m),p(e,Ke,m),t(Ke,_t),t(_t,hc),h(ir,hc,null),t(Ke,bf),t(Ke,uc),t(uc,vf),p(e,Pd,m),p(e,V,m),t(V,$f),t(V,os),t(os,Tf),t(V,yf),t(V,ns),t(ns,kf),t(V,xf),t(V,ss),t(ss,wf),t(V,Lf),p(e,Fd,m),p(e,as,m),t(as,Ef),p(e,Dd,m),h(cr,e,m),p(e,Sd,m),p(e,We,m),t(We,Pf),t(We,_c),t(_c,Ff),t(We,Df),t(We,is),t(is,Sf),t(We,zf),p(e,zd,m),p(e,M,m),t(M,cs),t(cs,bc),t(bc,Of),t(cs,qf),t(M,Bf),t(M,ls),t(ls,vc),t(vc,If),t(ls,Af),t(M,Cf),t(M,ds),t(ds,$c),t($c,Wf),t(ds,Nf),t(M,Vf),t(M,ms),t(ms,Tc),t(Tc,Mf),t(ms,Gf),p(e,Od,m),p(e,x,m),t(x,jf),t(x,yc),t(yc,Hf),t(x,Rf),t(x,kc),t(kc,Kf),t(x,Uf),t(x,xc),t(xc,Yf),t(x,Xf),t(x,wc),t(wc,Jf),t(x,Qf),t(x,Lc),t(Lc,Zf),t(x,eg),t(x,Ec),t(Ec,tg),t(x,rg),p(e,qd,m),p(e,S,m),t(S,og),t(S,Pc),t(Pc,ng),t(S,sg),t(S,Fc),t(Fc,ag),t(S,ig),t(S,Dc),t(Dc,cg),t(S,lg),t(S,Sc),t(Sc,dg),t(S,mg),p(e,Bd,m),p(e,z,m),t(z,pg),t(z,zc),t(zc,fg),t(z,gg),t(z,Oc),t(Oc,hg),t(z,ug),t(z,qc),t(qc,_g),t(z,bg),t(z,Bc),t(Bc,vg),t(z,$g),p(e,Id,m),h(lr,e,m),p(e,Ad,m),p(e,bt,m),t(bt,Tg),t(bt,Ic),t(Ic,yg),t(bt,kg),p(e,Cd,m),p(e,O,m),t(O,xg),t(O,Ac),t(Ac,wg),t(O,Lg),t(O,Cc),t(Cc,Eg),t(O,Pg),t(O,Wc),t(Wc,Fg),t(O,Dg),t(O,Nc),t(Nc,Sg),t(O,zg),p(e,Wd,m),p(e,ps,m),t(ps,Og),p(e,Nd,m),p(e,Ue,m),t(Ue,vt),t(vt,Vc),h(dr,Vc,null),t(Ue,qg),t(Ue,Mc),t(Mc,Bg),p(e,Vd,m),p(e,Ye,m),h(mr,Ye,null),t(Ye,Ig),t(Ye,Gc),t(Gc,Ag),p(e,Md,m),p(e,Xe,m),h(pr,Xe,null),t(Xe,Cg),t(Xe,jc),t(jc,Wg),p(e,Gd,m),p(e,R,m),h(fr,R,null),t(R,Ng),t(R,Hc),t(Hc,Vg),t(R,Mg),t(R,$t),h(gr,$t,null),t($t,Gg),t($t,Rc),t(Rc,jg),p(e,jd,m),p(e,Je,m),t(Je,Tt),t(Tt,Kc),h(hr,Kc,null),t(Je,Hg),t(Je,Uc),t(Uc,Rg),p(e,Hd,m),p(e,Qe,m),h(ur,Qe,null),t(Qe,Kg),t(Qe,Yc),t(Yc,Ug),p(e,Rd,m),p(e,Ze,m),h(_r,Ze,null),t(Ze,Yg),t(Ze,Xc),t(Xc,Xg),p(e,Kd,m),p(e,K,m),h(br,K,null),t(K,Jg),t(K,Jc),t(Jc,Qg),t(K,Zg),t(K,yt),h(vr,yt,null),t(yt,eh),t(yt,Qc),t(Qc,th),p(e,Ud,m),p(e,et,m),t(et,kt),t(kt,Zc),h($r,Zc,null),t(et,rh),t(et,el),t(el,oh),p(e,Yd,m),p(e,tt,m),h(Tr,tt,null),t(tt,nh),t(tt,tl),t(tl,sh),p(e,Xd,m),p(e,rt,m),h(yr,rt,null),t(rt,ah),t(rt,rl),t(rl,ih),p(e,Jd,m),p(e,ot,m),t(ot,xt),t(xt,ol),h(kr,ol,null),t(ot,ch),t(ot,nl),t(nl,lh),p(e,Qd,m),p(e,nt,m),h(xr,nt,null),t(nt,dh),t(nt,sl),t(sl,mh),p(e,Zd,m),p(e,st,m),h(wr,st,null),t(st,ph),t(st,al),t(al,fh),p(e,em,m),p(e,at,m),t(at,wt),t(wt,il),h(Lr,il,null),t(at,gh),t(at,cl),t(cl,hh),p(e,tm,m),p(e,Lt,m),t(Lt,uh),t(Lt,fs),t(fs,_h),t(Lt,bh),p(e,rm,m),p(e,U,m),h(Er,U,null),t(U,vh),t(U,ll),t(ll,$h),t(U,Th),t(U,Et),h(Pr,Et,null),t(Et,yh),t(Et,dl),t(dl,kh),p(e,om,m),p(e,Y,m),h(Fr,Y,null),t(Y,xh),t(Y,E),t(E,wh),t(E,gs),t(gs,Lh),t(E,Eh),t(E,hs),t(hs,Ph),t(E,Fh),t(E,ml),t(ml,Dh),t(E,Sh),t(E,pl),t(pl,fl),t(fl,zh),t(E,Oh),t(E,us),t(us,qh),t(E,Bh),t(E,_s),t(_s,Ih),t(E,Ah),t(Y,Ch),t(Y,bs),h(Dr,bs,null),p(e,nm,m),p(e,X,m),h(Sr,X,null),t(X,Wh),t(X,gl),t(gl,Nh),t(X,Vh),t(X,Pt),h(zr,Pt,null),t(Pt,Mh),t(Pt,hl),t(hl,Gh),p(e,sm,m),p(e,J,m),h(Or,J,null),t(J,jh),t(J,vs),t(vs,$s),t($s,Hh),t(vs,Rh),t(J,Kh),t(J,Ts),h(qr,Ts,null),p(e,am,m),p(e,Q,m),h(Br,Q,null),t(Q,Uh),t(Q,ys),t(ys,ks),t(ks,Yh),t(ys,Xh),t(Q,Jh),t(Q,xs),h(Ir,xs,null),p(e,im,m),p(e,Z,m),h(Ar,Z,null),t(Z,Qh),t(Z,ws),t(ws,Ls),t(Ls,Zh),t(ws,eu),t(Z,tu),t(Z,Es),h(Cr,Es,null),p(e,cm,m),p(e,ee,m),h(Wr,ee,null),t(ee,ru),t(ee,Ps),t(Ps,Fs),t(Fs,ou),t(Ps,nu),t(ee,su),t(ee,Ds),h(Nr,Ds,null),p(e,lm,m),p(e,te,m),h(Vr,te,null),t(te,au),t(te,Ss),t(Ss,zs),t(zs,iu),t(Ss,cu),t(te,lu),t(te,Os),h(Mr,Os,null),p(e,dm,m),p(e,re,m),h(Gr,re,null),t(re,du),t(re,Ft),t(Ft,qs),t(qs,mu),t(Ft,pu),t(Ft,jr),t(jr,fu),t(Ft,gu),t(re,hu),t(re,Bs),h(Hr,Bs,null),p(e,mm,m),p(e,oe,m),h(Rr,oe,null),t(oe,uu),t(oe,Dt),t(Dt,Is),t(Is,_u),t(Dt,bu),t(Dt,Kr),t(Kr,vu),t(Dt,$u),t(oe,Tu),t(oe,As),h(Ur,As,null),p(e,pm,m),p(e,ne,m),h(Yr,ne,null),t(ne,yu),t(ne,Cs),t(Cs,Ws),t(Ws,ku),t(Cs,xu),t(ne,wu),t(ne,Ns),h(Xr,Ns,null),p(e,fm,m),p(e,se,m),h(Jr,se,null),t(se,Lu),t(se,St),t(St,Vs),t(Vs,Eu),t(St,Pu),t(St,Qr),t(Qr,Fu),t(St,Du),t(se,Su),t(se,Ms),h(Zr,Ms,null),p(e,gm,m),p(e,ae,m),h(eo,ae,null),t(ae,zu),t(ae,Ne),t(Ne,Gs),t(Gs,Ou),t(Ne,qu),t(Ne,js),t(js,Bu),t(Ne,Iu),t(Ne,to),t(to,Au),t(Ne,Cu),t(ae,Wu),t(ae,Hs),h(ro,Hs,null),p(e,hm,m),p(e,ie,m),h(oo,ie,null),t(ie,Nu),t(ie,Rs),t(Rs,Ks),t(Ks,Vu),t(Rs,Mu),t(ie,Gu),t(ie,Us),h(no,Us,null),p(e,um,m),p(e,ce,m),h(so,ce,null),t(ce,ju),t(ce,zt),t(zt,Ys),t(Ys,Hu),t(zt,Ru),t(zt,ul),t(ul,Ku),t(zt,Uu),t(ce,Yu),t(ce,Xs),h(ao,Xs,null),p(e,_m,m),p(e,le,m),h(io,le,null),t(le,Xu),t(le,G),t(G,Js),t(Js,Ju),t(G,Qu),t(G,_l),t(_l,Zu),t(G,e_),t(G,bl),t(bl,t_),t(G,r_),t(G,vl),t(vl,o_),t(G,n_),t(le,s_),t(le,Qs),h(co,Qs,null),p(e,bm,m),p(e,de,m),h(lo,de,null),t(de,a_),t(de,$l),t($l,i_),t(de,c_),t(de,Ot),h(mo,Ot,null),t(Ot,l_),t(Ot,Tl),t(Tl,d_),p(e,vm,m),p(e,me,m),h(po,me,null),t(me,m_),t(me,A),t(A,p_),t(A,Zs),t(Zs,f_),t(A,g_),t(A,yl),t(yl,h_),t(A,u_),t(A,kl),t(kl,xl),t(xl,__),t(A,b_),t(A,ea),t(ea,v_),t(A,$_),t(me,T_),t(me,ta),h(fo,ta,null),p(e,$m,m),p(e,pe,m),h(go,pe,null),t(pe,y_),t(pe,wl),t(wl,k_),t(pe,x_),t(pe,qt),h(ho,qt,null),t(qt,w_),t(qt,Ll),t(Ll,L_),p(e,Tm,m),p(e,fe,m),h(uo,fe,null),t(fe,E_),t(fe,ra),t(ra,oa),t(oa,P_),t(ra,F_),t(fe,D_),t(fe,na),h(_o,na,null),p(e,ym,m),p(e,ge,m),h(bo,ge,null),t(ge,S_),t(ge,sa),t(sa,aa),t(aa,z_),t(sa,O_),t(ge,q_),t(ge,ia),h(vo,ia,null),p(e,km,m),p(e,he,m),h($o,he,null),t(he,B_),t(he,ca),t(ca,la),t(la,I_),t(ca,A_),t(he,C_),t(he,da),h(To,da,null),p(e,xm,m),p(e,ue,m),h(yo,ue,null),t(ue,W_),t(ue,ma),t(ma,pa),t(pa,N_),t(ma,V_),t(ue,M_),t(ue,fa),h(ko,fa,null),p(e,wm,m),p(e,_e,m),h(xo,_e,null),t(_e,G_),t(_e,ga),t(ga,ha),t(ha,j_),t(ga,H_),t(_e,R_),t(_e,ua),h(wo,ua,null),p(e,Lm,m),p(e,be,m),h(Lo,be,null),t(be,K_),t(be,Bt),t(Bt,_a),t(_a,U_),t(Bt,Y_),t(Bt,Eo),t(Eo,X_),t(Bt,J_),t(be,Q_),t(be,ba),h(Po,ba,null),p(e,Em,m),p(e,ve,m),h(Fo,ve,null),t(ve,Z_),t(ve,va),t(va,$a),t($a,eb),t(va,tb),t(ve,rb),t(ve,Ta),h(Do,Ta,null),p(e,Pm,m),p(e,$e,m),h(So,$e,null),t($e,ob),t($e,ya),t(ya,ka),t(ka,nb),t(ya,sb),t($e,ab),t($e,xa),h(zo,xa,null),p(e,Fm,m),p(e,Te,m),h(Oo,Te,null),t(Te,ib),t(Te,It),t(It,wa),t(wa,cb),t(It,lb),t(It,El),t(El,db),t(It,mb),t(Te,pb),t(Te,La),h(qo,La,null),p(e,Dm,m),p(e,ye,m),h(Bo,ye,null),t(ye,fb),t(ye,Pl),t(Pl,gb),t(ye,hb),t(ye,At),h(Io,At,null),t(At,ub),t(At,Fl),t(Fl,_b),p(e,Sm,m),p(e,ke,m),h(Ao,ke,null),t(ke,bb),t(ke,P),t(P,vb),t(P,Ea),t(Ea,$b),t(P,Tb),t(P,Pa),t(Pa,yb),t(P,kb),t(P,Dl),t(Dl,xb),t(P,wb),t(P,Sl),t(Sl,zl),t(zl,Lb),t(P,Eb),t(P,Fa),t(Fa,Pb),t(P,Fb),t(P,Da),t(Da,Db),t(P,Sb),t(ke,zb),t(ke,Sa),h(Co,Sa,null),p(e,zm,m),p(e,xe,m),h(Wo,xe,null),t(xe,Ob),t(xe,Ol),t(Ol,qb),t(xe,Bb),t(xe,Ct),h(No,Ct,null),t(Ct,Ib),t(Ct,ql),t(ql,Ab),p(e,Om,m),p(e,we,m),h(Vo,we,null),t(we,Cb),t(we,za),t(za,Oa),t(Oa,Wb),t(za,Nb),t(we,Vb),t(we,qa),h(Mo,qa,null),p(e,qm,m),p(e,Le,m),h(Go,Le,null),t(Le,Mb),t(Le,Ba),t(Ba,Ia),t(Ia,Gb),t(Ba,jb),t(Le,Hb),t(Le,Aa),h(jo,Aa,null),p(e,Bm,m),p(e,Ee,m),h(Ho,Ee,null),t(Ee,Rb),t(Ee,Ca),t(Ca,Wa),t(Wa,Kb),t(Ca,Ub),t(Ee,Yb),t(Ee,Na),h(Ro,Na,null),p(e,Im,m),p(e,Pe,m),h(Ko,Pe,null),t(Pe,Xb),t(Pe,Va),t(Va,Ma),t(Ma,Jb),t(Va,Qb),t(Pe,Zb),t(Pe,Ga),h(Uo,Ga,null),p(e,Am,m),p(e,Fe,m),h(Yo,Fe,null),t(Fe,ev),t(Fe,Wt),t(Wt,ja),t(ja,tv),t(Wt,rv),t(Wt,Bl),t(Bl,ov),t(Wt,nv),t(Fe,sv),t(Fe,Ha),h(Xo,Ha,null),p(e,Cm,m),p(e,De,m),h(Jo,De,null),t(De,av),t(De,Ra),t(Ra,Ka),t(Ka,iv),t(Ra,cv),t(De,lv),t(De,Ua),h(Qo,Ua,null),p(e,Wm,m),p(e,it,m),t(it,Nt),t(Nt,Il),h(Zo,Il,null),t(it,dv),t(it,Al),t(Al,mv),p(e,Nm,m),p(e,Vt,m),t(Vt,pv),t(Vt,Ya),t(Ya,fv),t(Vt,gv),p(e,Vm,m),p(e,Se,m),h(en,Se,null),t(Se,hv),t(Se,Cl),t(Cl,uv),t(Se,_v),t(Se,Xa),h(tn,Xa,null),p(e,Mm,m),p(e,ct,m),h(rn,ct,null),t(ct,bv),t(ct,Ja),h(on,Ja,null),p(e,Gm,m),p(e,ze,m),h(nn,ze,null),t(ze,vv),t(ze,sn),t(sn,$v),t(sn,Wl),t(Wl,Tv),t(sn,yv),t(ze,kv),t(ze,Qa),h(an,Qa,null),p(e,jm,m),p(e,Oe,m),h(cn,Oe,null),t(Oe,xv),t(Oe,ln),t(ln,wv),t(ln,Nl),t(Nl,Lv),t(ln,Ev),t(Oe,Pv),t(Oe,Za),h(dn,Za,null),p(e,Hm,m),p(e,lt,m),t(lt,Mt),t(Mt,Vl),h(mn,Vl,null),t(lt,Fv),t(lt,Ml),t(Ml,Dv),p(e,Rm,m),p(e,Gt,m),t(Gt,Sv),t(Gt,ei),t(ei,zv),t(Gt,Ov),p(e,Km,m),p(e,$,m),h(pn,$,null),t($,qv),t($,Gl),t(Gl,Bv),t($,Iv),t($,jl),t(jl,Av),t($,Cv),h(jt,$,null),t($,Wv),t($,Hl),t(Hl,Nv),t($,Vv),t($,Ht),h(fn,Ht,null),t(Ht,Mv),t(Ht,Rl),t(Rl,Gv),t($,jv),t($,Rt),h(gn,Rt,null),t(Rt,Hv),t(Rt,Kl),t(Kl,Rv),t($,Kv),t($,Kt),h(hn,Kt,null),t(Kt,Uv),t(Kt,Ul),t(Ul,Yv),t($,Xv),t($,Ut),h(un,Ut,null),t(Ut,Jv),t(Ut,_n),t(_n,Qv),t(_n,Yl),t(Yl,Zv),t(_n,e$),t($,t$),t($,Yt),h(bn,Yt,null),t(Yt,r$),t(Yt,Xl),t(Xl,o$),t($,n$),t($,Xt),h(vn,Xt,null),t(Xt,s$),t(Xt,Jl),t(Jl,a$),t($,i$),t($,Ve),h($n,Ve,null),t(Ve,c$),t(Ve,Tn),t(Tn,l$),t(Tn,Ql),t(Ql,d$),t(Tn,m$),t(Ve,p$),t(Ve,Zl),t(Zl,f$),p(e,Um,m),p(e,dt,m),h(yn,dt,null),t(dt,g$),t(dt,ti),t(ti,ri),t(ri,h$),t(ti,u$),p(e,Ym,m),p(e,mt,m),h(kn,mt,null),t(mt,_$),t(mt,xn),t(xn,b$),t(xn,oi),t(oi,v$),t(xn,$$),p(e,Xm,m),p(e,C,m),h(wn,C,null),t(C,T$),t(C,ed),t(ed,y$),t(C,k$),t(C,D),h(Ln,D,null),t(D,x$),t(D,td),t(td,w$),t(D,L$),t(D,pt),t(pt,E$),t(pt,rd),t(rd,P$),t(pt,F$),t(pt,od),t(od,D$),t(pt,S$),t(D,z$),t(D,nd),t(nd,sd),t(sd,O$),t(D,q$),t(D,qe),t(qe,B$),t(qe,ad),t(ad,I$),t(qe,A$),t(qe,id),t(id,C$),t(qe,W$),t(qe,cd),t(cd,N$),t(qe,V$),t(D,M$),t(D,ld),t(ld,G$),t(C,j$),t(C,Jt),h(En,Jt,null),t(Jt,H$),t(Jt,dd),t(dd,R$),p(e,Jm,m),p(e,ft,m),t(ft,Qt),t(Qt,md),h(Pn,md,null),t(ft,K$),t(ft,pd),t(pd,U$),p(e,Qm,m),p(e,W,m),h(Fn,W,null),t(W,Y$),t(W,gt),t(gt,X$),t(gt,ni),t(ni,J$),t(gt,Q$),t(gt,si),t(si,Z$),t(gt,eT),t(W,tT),t(W,ai),h(Dn,ai,null),t(W,rT),t(W,ii),h(Sn,ii,null),p(e,Zm,m),p(e,F,m),h(zn,F,null),t(F,oT),t(F,ci),t(ci,li),t(li,nT),t(ci,sT),t(F,aT),t(F,On),t(On,iT),t(On,qn),t(qn,cT),t(On,lT),t(F,dT),t(F,di),t(di,mT),t(di,Bn),t(Bn,pT),t(F,fT),t(F,mi),h(In,mi,null),t(F,gT),t(F,pi),h(An,pi,null),p(e,ep,m),p(e,N,m),h(Cn,N,null),t(N,hT),t(N,fi),t(fi,gi),t(gi,uT),t(fi,_T),t(N,bT),t(N,hi),h(Wn,hi,null),t(N,vT),t(N,ui),h(Nn,ui,null),p(e,tp,m),p(e,ht,m),t(ht,Zt),t(Zt,fd),h(Vn,fd,null),t(ht,$T),t(ht,gd),t(gd,TT),p(e,rp,m),p(e,Be,m),h(Mn,Be,null),t(Be,yT),t(Be,hd),t(hd,kT),t(Be,xT),t(Be,_i),t(_i,wT),t(_i,Gn),t(Gn,LT),p(e,op,m),p(e,Ie,m),h(jn,Ie,null),t(Ie,ET),t(Ie,ud),t(ud,PT),t(Ie,FT),t(Ie,bi),t(bi,DT),t(bi,Hn),t(Hn,ST),np=!0},p(e,[m]){const Rn={};m&2&&(Rn.$$scope={dirty:m,ctx:e}),jt.$set(Rn)},i(e){np||(u(ar.$$.fragment,e),u(ir.$$.fragment,e),u(cr.$$.fragment,e),u(lr.$$.fragment,e),u(dr.$$.fragment,e),u(mr.$$.fragment,e),u(pr.$$.fragment,e),u(fr.$$.fragment,e),u(gr.$$.fragment,e),u(hr.$$.fragment,e),u(ur.$$.fragment,e),u(_r.$$.fragment,e),u(br.$$.fragment,e),u(vr.$$.fragment,e),u($r.$$.fragment,e),u(Tr.$$.fragment,e),u(yr.$$.fragment,e),u(kr.$$.fragment,e),u(xr.$$.fragment,e),u(wr.$$.fragment,e),u(Lr.$$.fragment,e),u(Er.$$.fragment,e),u(Pr.$$.fragment,e),u(Fr.$$.fragment,e),u(Dr.$$.fragment,e),u(Sr.$$.fragment,e),u(zr.$$.fragment,e),u(Or.$$.fragment,e),u(qr.$$.fragment,e),u(Br.$$.fragment,e),u(Ir.$$.fragment,e),u(Ar.$$.fragment,e),u(Cr.$$.fragment,e),u(Wr.$$.fragment,e),u(Nr.$$.fragment,e),u(Vr.$$.fragment,e),u(Mr.$$.fragment,e),u(Gr.$$.fragment,e),u(Hr.$$.fragment,e),u(Rr.$$.fragment,e),u(Ur.$$.fragment,e),u(Yr.$$.fragment,e),u(Xr.$$.fragment,e),u(Jr.$$.fragment,e),u(Zr.$$.fragment,e),u(eo.$$.fragment,e),u(ro.$$.fragment,e),u(oo.$$.fragment,e),u(no.$$.fragment,e),u(so.$$.fragment,e),u(ao.$$.fragment,e),u(io.$$.fragment,e),u(co.$$.fragment,e),u(lo.$$.fragment,e),u(mo.$$.fragment,e),u(po.$$.fragment,e),u(fo.$$.fragment,e),u(go.$$.fragment,e),u(ho.$$.fragment,e),u(uo.$$.fragment,e),u(_o.$$.fragment,e),u(bo.$$.fragment,e),u(vo.$$.fragment,e),u($o.$$.fragment,e),u(To.$$.fragment,e),u(yo.$$.fragment,e),u(ko.$$.fragment,e),u(xo.$$.fragment,e),u(wo.$$.fragment,e),u(Lo.$$.fragment,e),u(Po.$$.fragment,e),u(Fo.$$.fragment,e),u(Do.$$.fragment,e),u(So.$$.fragment,e),u(zo.$$.fragment,e),u(Oo.$$.fragment,e),u(qo.$$.fragment,e),u(Bo.$$.fragment,e),u(Io.$$.fragment,e),u(Ao.$$.fragment,e),u(Co.$$.fragment,e),u(Wo.$$.fragment,e),u(No.$$.fragment,e),u(Vo.$$.fragment,e),u(Mo.$$.fragment,e),u(Go.$$.fragment,e),u(jo.$$.fragment,e),u(Ho.$$.fragment,e),u(Ro.$$.fragment,e),u(Ko.$$.fragment,e),u(Uo.$$.fragment,e),u(Yo.$$.fragment,e),u(Xo.$$.fragment,e),u(Jo.$$.fragment,e),u(Qo.$$.fragment,e),u(Zo.$$.fragment,e),u(en.$$.fragment,e),u(tn.$$.fragment,e),u(rn.$$.fragment,e),u(on.$$.fragment,e),u(nn.$$.fragment,e),u(an.$$.fragment,e),u(cn.$$.fragment,e),u(dn.$$.fragment,e),u(mn.$$.fragment,e),u(pn.$$.fragment,e),u(jt.$$.fragment,e),u(fn.$$.fragment,e),u(gn.$$.fragment,e),u(hn.$$.fragment,e),u(un.$$.fragment,e),u(bn.$$.fragment,e),u(vn.$$.fragment,e),u($n.$$.fragment,e),u(yn.$$.fragment,e),u(kn.$$.fragment,e),u(wn.$$.fragment,e),u(Ln.$$.fragment,e),u(En.$$.fragment,e),u(Pn.$$.fragment,e),u(Fn.$$.fragment,e),u(Dn.$$.fragment,e),u(Sn.$$.fragment,e),u(zn.$$.fragment,e),u(In.$$.fragment,e),u(An.$$.fragment,e),u(Cn.$$.fragment,e),u(Wn.$$.fragment,e),u(Nn.$$.fragment,e),u(Vn.$$.fragment,e),u(Mn.$$.fragment,e),u(jn.$$.fragment,e),np=!0)},o(e){_(ar.$$.fragment,e),_(ir.$$.fragment,e),_(cr.$$.fragment,e),_(lr.$$.fragment,e),_(dr.$$.fragment,e),_(mr.$$.fragment,e),_(pr.$$.fragment,e),_(fr.$$.fragment,e),_(gr.$$.fragment,e),_(hr.$$.fragment,e),_(ur.$$.fragment,e),_(_r.$$.fragment,e),_(br.$$.fragment,e),_(vr.$$.fragment,e),_($r.$$.fragment,e),_(Tr.$$.fragment,e),_(yr.$$.fragment,e),_(kr.$$.fragment,e),_(xr.$$.fragment,e),_(wr.$$.fragment,e),_(Lr.$$.fragment,e),_(Er.$$.fragment,e),_(Pr.$$.fragment,e),_(Fr.$$.fragment,e),_(Dr.$$.fragment,e),_(Sr.$$.fragment,e),_(zr.$$.fragment,e),_(Or.$$.fragment,e),_(qr.$$.fragment,e),_(Br.$$.fragment,e),_(Ir.$$.fragment,e),_(Ar.$$.fragment,e),_(Cr.$$.fragment,e),_(Wr.$$.fragment,e),_(Nr.$$.fragment,e),_(Vr.$$.fragment,e),_(Mr.$$.fragment,e),_(Gr.$$.fragment,e),_(Hr.$$.fragment,e),_(Rr.$$.fragment,e),_(Ur.$$.fragment,e),_(Yr.$$.fragment,e),_(Xr.$$.fragment,e),_(Jr.$$.fragment,e),_(Zr.$$.fragment,e),_(eo.$$.fragment,e),_(ro.$$.fragment,e),_(oo.$$.fragment,e),_(no.$$.fragment,e),_(so.$$.fragment,e),_(ao.$$.fragment,e),_(io.$$.fragment,e),_(co.$$.fragment,e),_(lo.$$.fragment,e),_(mo.$$.fragment,e),_(po.$$.fragment,e),_(fo.$$.fragment,e),_(go.$$.fragment,e),_(ho.$$.fragment,e),_(uo.$$.fragment,e),_(_o.$$.fragment,e),_(bo.$$.fragment,e),_(vo.$$.fragment,e),_($o.$$.fragment,e),_(To.$$.fragment,e),_(yo.$$.fragment,e),_(ko.$$.fragment,e),_(xo.$$.fragment,e),_(wo.$$.fragment,e),_(Lo.$$.fragment,e),_(Po.$$.fragment,e),_(Fo.$$.fragment,e),_(Do.$$.fragment,e),_(So.$$.fragment,e),_(zo.$$.fragment,e),_(Oo.$$.fragment,e),_(qo.$$.fragment,e),_(Bo.$$.fragment,e),_(Io.$$.fragment,e),_(Ao.$$.fragment,e),_(Co.$$.fragment,e),_(Wo.$$.fragment,e),_(No.$$.fragment,e),_(Vo.$$.fragment,e),_(Mo.$$.fragment,e),_(Go.$$.fragment,e),_(jo.$$.fragment,e),_(Ho.$$.fragment,e),_(Ro.$$.fragment,e),_(Ko.$$.fragment,e),_(Uo.$$.fragment,e),_(Yo.$$.fragment,e),_(Xo.$$.fragment,e),_(Jo.$$.fragment,e),_(Qo.$$.fragment,e),_(Zo.$$.fragment,e),_(en.$$.fragment,e),_(tn.$$.fragment,e),_(rn.$$.fragment,e),_(on.$$.fragment,e),_(nn.$$.fragment,e),_(an.$$.fragment,e),_(cn.$$.fragment,e),_(dn.$$.fragment,e),_(mn.$$.fragment,e),_(pn.$$.fragment,e),_(jt.$$.fragment,e),_(fn.$$.fragment,e),_(gn.$$.fragment,e),_(hn.$$.fragment,e),_(un.$$.fragment,e),_(bn.$$.fragment,e),_(vn.$$.fragment,e),_($n.$$.fragment,e),_(yn.$$.fragment,e),_(kn.$$.fragment,e),_(wn.$$.fragment,e),_(Ln.$$.fragment,e),_(En.$$.fragment,e),_(Pn.$$.fragment,e),_(Fn.$$.fragment,e),_(Dn.$$.fragment,e),_(Sn.$$.fragment,e),_(zn.$$.fragment,e),_(In.$$.fragment,e),_(An.$$.fragment,e),_(Cn.$$.fragment,e),_(Wn.$$.fragment,e),_(Nn.$$.fragment,e),_(Vn.$$.fragment,e),_(Mn.$$.fragment,e),_(jn.$$.fragment,e),np=!1},d(e){r(L),e&&r(Re),e&&r(k),b(ar),e&&r(wd),e&&r(y),e&&r(Ld),e&&r(rs),e&&r(Ed),e&&r(Ke),b(ir),e&&r(Pd),e&&r(V),e&&r(Fd),e&&r(as),e&&r(Dd),b(cr,e),e&&r(Sd),e&&r(We),e&&r(zd),e&&r(M),e&&r(Od),e&&r(x),e&&r(qd),e&&r(S),e&&r(Bd),e&&r(z),e&&r(Id),b(lr,e),e&&r(Ad),e&&r(bt),e&&r(Cd),e&&r(O),e&&r(Wd),e&&r(ps),e&&r(Nd),e&&r(Ue),b(dr),e&&r(Vd),e&&r(Ye),b(mr),e&&r(Md),e&&r(Xe),b(pr),e&&r(Gd),e&&r(R),b(fr),b(gr),e&&r(jd),e&&r(Je),b(hr),e&&r(Hd),e&&r(Qe),b(ur),e&&r(Rd),e&&r(Ze),b(_r),e&&r(Kd),e&&r(K),b(br),b(vr),e&&r(Ud),e&&r(et),b($r),e&&r(Yd),e&&r(tt),b(Tr),e&&r(Xd),e&&r(rt),b(yr),e&&r(Jd),e&&r(ot),b(kr),e&&r(Qd),e&&r(nt),b(xr),e&&r(Zd),e&&r(st),b(wr),e&&r(em),e&&r(at),b(Lr),e&&r(tm),e&&r(Lt),e&&r(rm),e&&r(U),b(Er),b(Pr),e&&r(om),e&&r(Y),b(Fr),b(Dr),e&&r(nm),e&&r(X),b(Sr),b(zr),e&&r(sm),e&&r(J),b(Or),b(qr),e&&r(am),e&&r(Q),b(Br),b(Ir),e&&r(im),e&&r(Z),b(Ar),b(Cr),e&&r(cm),e&&r(ee),b(Wr),b(Nr),e&&r(lm),e&&r(te),b(Vr),b(Mr),e&&r(dm),e&&r(re),b(Gr),b(Hr),e&&r(mm),e&&r(oe),b(Rr),b(Ur),e&&r(pm),e&&r(ne),b(Yr),b(Xr),e&&r(fm),e&&r(se),b(Jr),b(Zr),e&&r(gm),e&&r(ae),b(eo),b(ro),e&&r(hm),e&&r(ie),b(oo),b(no),e&&r(um),e&&r(ce),b(so),b(ao),e&&r(_m),e&&r(le),b(io),b(co),e&&r(bm),e&&r(de),b(lo),b(mo),e&&r(vm),e&&r(me),b(po),b(fo),e&&r($m),e&&r(pe),b(go),b(ho),e&&r(Tm),e&&r(fe),b(uo),b(_o),e&&r(ym),e&&r(ge),b(bo),b(vo),e&&r(km),e&&r(he),b($o),b(To),e&&r(xm),e&&r(ue),b(yo),b(ko),e&&r(wm),e&&r(_e),b(xo),b(wo),e&&r(Lm),e&&r(be),b(Lo),b(Po),e&&r(Em),e&&r(ve),b(Fo),b(Do),e&&r(Pm),e&&r($e),b(So),b(zo),e&&r(Fm),e&&r(Te),b(Oo),b(qo),e&&r(Dm),e&&r(ye),b(Bo),b(Io),e&&r(Sm),e&&r(ke),b(Ao),b(Co),e&&r(zm),e&&r(xe),b(Wo),b(No),e&&r(Om),e&&r(we),b(Vo),b(Mo),e&&r(qm),e&&r(Le),b(Go),b(jo),e&&r(Bm),e&&r(Ee),b(Ho),b(Ro),e&&r(Im),e&&r(Pe),b(Ko),b(Uo),e&&r(Am),e&&r(Fe),b(Yo),b(Xo),e&&r(Cm),e&&r(De),b(Jo),b(Qo),e&&r(Wm),e&&r(it),b(Zo),e&&r(Nm),e&&r(Vt),e&&r(Vm),e&&r(Se),b(en),b(tn),e&&r(Mm),e&&r(ct),b(rn),b(on),e&&r(Gm),e&&r(ze),b(nn),b(an),e&&r(jm),e&&r(Oe),b(cn),b(dn),e&&r(Hm),e&&r(lt),b(mn),e&&r(Rm),e&&r(Gt),e&&r(Km),e&&r($),b(pn),b(jt),b(fn),b(gn),b(hn),b(un),b(bn),b(vn),b($n),e&&r(Um),e&&r(dt),b(yn),e&&r(Ym),e&&r(mt),b(kn),e&&r(Xm),e&&r(C),b(wn),b(Ln),b(En),e&&r(Jm),e&&r(ft),b(Pn),e&&r(Qm),e&&r(W),b(Fn),b(Dn),b(Sn),e&&r(Zm),e&&r(F),b(zn),b(In),b(An),e&&r(ep),e&&r(N),b(Cn),b(Wn),b(Nn),e&&r(tp),e&&r(ht),b(Vn),e&&r(rp),e&&r(Be),b(Mn),e&&r(op),e&&r(Ie),b(jn)}}}const Ak={local:"utilities-for-generation",sections:[{local:"generate-outputs",sections:[{local:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",title:"GreedySearchOutput"},{local:"transformers.generation_utils.SampleDecoderOnlyOutput",title:"SampleOutput"},{local:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",title:"BeamSearchOutput"},{local:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",title:"BeamSampleOutput"}],title:"Generate Outputs"},{local:"transformers.LogitsProcessor",title:"LogitsProcessor"},{local:"transformers.StoppingCriteria",title:"StoppingCriteria"},{local:"transformers.Constraint",title:"Constraints"},{local:"transformers.BeamScorer",title:"BeamSearch"},{local:"transformers.top_k_top_p_filtering",title:"Utilities"}],title:"Utilities for Generation"};function Ck(xd){return zk(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jk extends Pk{constructor(L){super();Fk(this,L,Ck,Ik,Dk,{})}}export{jk as default,Ak as metadata};
