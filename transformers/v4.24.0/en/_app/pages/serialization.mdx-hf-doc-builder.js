import{S as Jm,i as Qm,s as Zm,e as a,k as p,w as j,t as s,M as eg,c as l,d as o,m as f,a as r,x as C,h as n,b as v,G as e,g as d,y as D,q,o as L,B as A,v as tg,L as Um}from"../chunks/vendor-hf-doc-builder.js";import{T as Rt}from"../chunks/Tip-hf-doc-builder.js";import{I as Ve}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as B}from"../chunks/CodeBlock-hf-doc-builder.js";import{F as og,M as Km}from"../chunks/Markdown-hf-doc-builder.js";function sg(X){let c,$,m,E,w;return{c(){c=a("p"),$=s(`Once exported, a model can be optimized for inference via techniques such as
quantization and pruning. If you are interested in optimizing your models to run with
maximum efficiency, check out the `),m=a("a"),E=s(`\u{1F917} Optimum
library`),w=s("."),this.h()},l(_){c=l(_,"P",{});var x=r(c);$=n(x,`Once exported, a model can be optimized for inference via techniques such as
quantization and pruning. If you are interested in optimizing your models to run with
maximum efficiency, check out the `),m=l(x,"A",{href:!0,rel:!0});var b=r(m);E=n(b,`\u{1F917} Optimum
library`),b.forEach(o),w=n(x,"."),x.forEach(o),this.h()},h(){v(m,"href","https://github.com/huggingface/optimum"),v(m,"rel","nofollow")},m(_,x){d(_,c,x),e(c,$),e(c,m),e(m,E),e(c,w)},d(_){_&&o(c)}}}function ng(X){let c,$,m,E,w,_,x,b,k,T,I,y,O;return c=new B({props:{code:`from transformers import AutoTokenizer, AutoModelForSequenceClassification

# Load tokenizer and PyTorch weights form the Hub
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
pt_model = AutoModelForSequenceClassification.from_pretrained("distilbert-base-uncased")
# Save to disk
tokenizer.save_pretrained("local-pt-checkpoint")
pt_model.save_pretrained("local-pt-checkpoint")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load tokenizer and PyTorch weights form the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Save to disk</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;local-pt-checkpoint&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.save_pretrained(<span class="hljs-string">&quot;local-pt-checkpoint&quot;</span>)`}}),y=new B({props:{code:"python -m transformers.onnx --model=local-pt-checkpoint onnx/",highlighted:"python -m transformers.onnx --model=local-pt-checkpoint onnx/"}}),{c(){j(c.$$.fragment),$=p(),m=a("p"),E=s("Once the checkpoint is saved, we can export it to ONNX by pointing the "),w=a("code"),_=s("--model"),x=s(`
argument of the `),b=a("code"),k=s("transformers.onnx"),T=s(" package to the desired directory:"),I=p(),j(y.$$.fragment)},l(g){C(c.$$.fragment,g),$=f(g),m=l(g,"P",{});var N=r(m);E=n(N,"Once the checkpoint is saved, we can export it to ONNX by pointing the "),w=l(N,"CODE",{});var M=r(w);_=n(M,"--model"),M.forEach(o),x=n(N,`
argument of the `),b=l(N,"CODE",{});var R=r(b);k=n(R,"transformers.onnx"),R.forEach(o),T=n(N," package to the desired directory:"),N.forEach(o),I=f(g),C(y.$$.fragment,g)},m(g,N){D(c,g,N),d(g,$,N),d(g,m,N),e(m,E),e(m,w),e(w,_),e(m,x),e(m,b),e(b,k),e(m,T),d(g,I,N),D(y,g,N),O=!0},p:Um,i(g){O||(q(c.$$.fragment,g),q(y.$$.fragment,g),O=!0)},o(g){L(c.$$.fragment,g),L(y.$$.fragment,g),O=!1},d(g){A(c,g),g&&o($),g&&o(m),g&&o(I),A(y,g)}}}function ag(X){let c,$;return c=new Km({props:{$$slots:{default:[ng]},$$scope:{ctx:X}}}),{c(){j(c.$$.fragment)},l(m){C(c.$$.fragment,m)},m(m,E){D(c,m,E),$=!0},p(m,E){const w={};E&2&&(w.$$scope={dirty:E,ctx:m}),c.$set(w)},i(m){$||(q(c.$$.fragment,m),$=!0)},o(m){L(c.$$.fragment,m),$=!1},d(m){A(c,m)}}}function lg(X){let c,$,m,E,w,_,x,b,k,T,I,y,O;return c=new B({props:{code:`from transformers import AutoTokenizer, TFAutoModelForSequenceClassification

# Load tokenizer and TensorFlow weights from the Hub
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
tf_model = TFAutoModelForSequenceClassification.from_pretrained("distilbert-base-uncased")
# Save to disk
tokenizer.save_pretrained("local-tf-checkpoint")
tf_model.save_pretrained("local-tf-checkpoint")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load tokenizer and TensorFlow weights from the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Save to disk</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(<span class="hljs-string">&quot;local-tf-checkpoint&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model.save_pretrained(<span class="hljs-string">&quot;local-tf-checkpoint&quot;</span>)`}}),y=new B({props:{code:"python -m transformers.onnx --model=local-tf-checkpoint onnx/",highlighted:"python -m transformers.onnx --model=local-tf-checkpoint onnx/"}}),{c(){j(c.$$.fragment),$=p(),m=a("p"),E=s("Once the checkpoint is saved, we can export it to ONNX by pointing the "),w=a("code"),_=s("--model"),x=s(`
argument of the `),b=a("code"),k=s("transformers.onnx"),T=s(" package to the desired directory:"),I=p(),j(y.$$.fragment)},l(g){C(c.$$.fragment,g),$=f(g),m=l(g,"P",{});var N=r(m);E=n(N,"Once the checkpoint is saved, we can export it to ONNX by pointing the "),w=l(N,"CODE",{});var M=r(w);_=n(M,"--model"),M.forEach(o),x=n(N,`
argument of the `),b=l(N,"CODE",{});var R=r(b);k=n(R,"transformers.onnx"),R.forEach(o),T=n(N," package to the desired directory:"),N.forEach(o),I=f(g),C(y.$$.fragment,g)},m(g,N){D(c,g,N),d(g,$,N),d(g,m,N),e(m,E),e(m,w),e(w,_),e(m,x),e(m,b),e(b,k),e(m,T),d(g,I,N),D(y,g,N),O=!0},p:Um,i(g){O||(q(c.$$.fragment,g),q(y.$$.fragment,g),O=!0)},o(g){L(c.$$.fragment,g),L(y.$$.fragment,g),O=!1},d(g){A(c,g),g&&o($),g&&o(m),g&&o(I),A(y,g)}}}function rg(X){let c,$;return c=new Km({props:{$$slots:{default:[lg]},$$scope:{ctx:X}}}),{c(){j(c.$$.fragment)},l(m){C(c.$$.fragment,m)},m(m,E){D(c,m,E),$=!0},p(m,E){const w={};E&2&&(w.$$scope={dirty:E,ctx:m}),c.$set(w)},i(m){$||(q(c.$$.fragment,m),$=!0)},o(m){L(c.$$.fragment,m),$=!1},d(m){A(c,m)}}}function ig(X){let c,$,m,E,w,_,x,b;return{c(){c=a("p"),$=s("The features that have a "),m=a("code"),E=s("with-past"),w=s(" suffix (like "),_=a("code"),x=s("causal-lm-with-past"),b=s(`) correspond to
model classes with precomputed hidden states (key and values in the attention blocks)
that can be used for fast autoregressive decoding.`)},l(k){c=l(k,"P",{});var T=r(c);$=n(T,"The features that have a "),m=l(T,"CODE",{});var I=r(m);E=n(I,"with-past"),I.forEach(o),w=n(T," suffix (like "),_=l(T,"CODE",{});var y=r(_);x=n(y,"causal-lm-with-past"),y.forEach(o),b=n(T,`) correspond to
model classes with precomputed hidden states (key and values in the attention blocks)
that can be used for fast autoregressive decoding.`),T.forEach(o)},m(k,T){d(k,c,T),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b)},d(k){k&&o(c)}}}function pg(X){let c,$,m,E,w,_,x,b,k,T,I;return{c(){c=a("p"),$=s("For "),m=a("code"),E=s("VisionEncoderDecoder"),w=s(` type models, the encoder and decoder parts are
exported separately as two ONNX files named `),_=a("code"),x=s("encoder_model.onnx"),b=s(" and "),k=a("code"),T=s("decoder_model.onnx"),I=s(" respectively.")},l(y){c=l(y,"P",{});var O=r(c);$=n(O,"For "),m=l(O,"CODE",{});var g=r(m);E=n(g,"VisionEncoderDecoder"),g.forEach(o),w=n(O,` type models, the encoder and decoder parts are
exported separately as two ONNX files named `),_=l(O,"CODE",{});var N=r(_);x=n(N,"encoder_model.onnx"),N.forEach(o),b=n(O," and "),k=l(O,"CODE",{});var M=r(k);T=n(M,"decoder_model.onnx"),M.forEach(o),I=n(O," respectively."),O.forEach(o)},m(y,O){d(y,c,O),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b),e(c,k),e(k,T),e(c,I)},d(y){y&&o(c)}}}function fg(X){let c,$,m,E,w;return{c(){c=a("p"),$=s(`A good way to implement a custom ONNX configuration is to look at the existing
implementation in the `),m=a("code"),E=s("configuration_<model_name>.py"),w=s(" file of a similar architecture.")},l(_){c=l(_,"P",{});var x=r(c);$=n(x,`A good way to implement a custom ONNX configuration is to look at the existing
implementation in the `),m=l(x,"CODE",{});var b=r(m);E=n(b,"configuration_<model_name>.py"),b.forEach(o),w=n(x," file of a similar architecture."),x.forEach(o)},m(_,x){d(_,c,x),e(c,$),e(c,m),e(m,E),e(c,w)},d(_){_&&o(c)}}}function dg(X){let c,$,m,E,w,_,x,b,k,T,I,y,O,g,N,M,R,Q,W,He,K,We,Ge;return{c(){c=a("p"),$=s("Notice that "),m=a("code"),E=s("inputs"),w=s(" property for "),_=a("code"),x=s("DistilBertOnnxConfig"),b=s(" returns an "),k=a("code"),T=s("OrderedDict"),I=s(`. This
ensures that the inputs are matched with their relative position within the
`),y=a("code"),O=s("PreTrainedModel.forward()"),g=s(` method when tracing the graph. We recommend using an
`),N=a("code"),M=s("OrderedDict"),R=s(" for the "),Q=a("code"),W=s("inputs"),He=s(" and "),K=a("code"),We=s("outputs"),Ge=s(` properties when implementing custom ONNX
configurations.`)},l(Z){c=l(Z,"P",{});var P=r(c);$=n(P,"Notice that "),m=l(P,"CODE",{});var Ft=r(m);E=n(Ft,"inputs"),Ft.forEach(o),w=n(P," property for "),_=l(P,"CODE",{});var Ye=r(_);x=n(Ye,"DistilBertOnnxConfig"),Ye.forEach(o),b=n(P," returns an "),k=l(P,"CODE",{});var J=r(k);T=n(J,"OrderedDict"),J.forEach(o),I=n(P,`. This
ensures that the inputs are matched with their relative position within the
`),y=l(P,"CODE",{});var St=r(y);O=n(St,"PreTrainedModel.forward()"),St.forEach(o),g=n(P,` method when tracing the graph. We recommend using an
`),N=l(P,"CODE",{});var fe=r(N);M=n(fe,"OrderedDict"),fe.forEach(o),R=n(P," for the "),Q=l(P,"CODE",{});var ve=r(Q);W=n(ve,"inputs"),ve.forEach(o),He=n(P," and "),K=l(P,"CODE",{});var zt=r(K);We=n(zt,"outputs"),zt.forEach(o),Ge=n(P,` properties when implementing custom ONNX
configurations.`),P.forEach(o)},m(Z,P){d(Z,c,P),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b),e(c,k),e(k,T),e(c,I),e(c,y),e(y,O),e(c,g),e(c,N),e(N,M),e(c,R),e(c,Q),e(Q,W),e(c,He),e(c,K),e(K,We),e(c,Ge)},d(Z){Z&&o(c)}}}function cg(X){let c,$,m,E,w,_,x,b;return{c(){c=a("p"),$=s("All of the base properties and methods associated with "),m=a("a"),E=s("OnnxConfig"),w=s(` and
the other configuration classes can be overriden if needed. Check out `),_=a("code"),x=s("BartOnnxConfig"),b=s(`
for an advanced example.`),this.h()},l(k){c=l(k,"P",{});var T=r(c);$=n(T,"All of the base properties and methods associated with "),m=l(T,"A",{href:!0});var I=r(m);E=n(I,"OnnxConfig"),I.forEach(o),w=n(T,` and
the other configuration classes can be overriden if needed. Check out `),_=l(T,"CODE",{});var y=r(_);x=n(y,"BartOnnxConfig"),y.forEach(o),b=n(T,`
for an advanced example.`),T.forEach(o),this.h()},h(){v(m,"href","/docs/transformers/v4.24.0/en/main_classes/onnx#transformers.onnx.OnnxConfig")},m(k,T){d(k,c,T),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b)},d(k){k&&o(c)}}}function hg(X){let c,$,m,E,w,_,x,b,k,T,I;return{c(){c=a("p"),$=s(`If your model is larger than 2GB, you will see that many additional files are created
during the export. This is `),m=a("em"),E=s("expected"),w=s(" because ONNX uses "),_=a("a"),x=s(`Protocol
Buffers`),b=s(` to store the model and these
have a size limit of 2GB. See the `),k=a("a"),T=s(`ONNX
documentation`),I=s(` for
instructions on how to load models with external data.`),this.h()},l(y){c=l(y,"P",{});var O=r(c);$=n(O,`If your model is larger than 2GB, you will see that many additional files are created
during the export. This is `),m=l(O,"EM",{});var g=r(m);E=n(g,"expected"),g.forEach(o),w=n(O," because ONNX uses "),_=l(O,"A",{href:!0,rel:!0});var N=r(_);x=n(N,`Protocol
Buffers`),N.forEach(o),b=n(O,` to store the model and these
have a size limit of 2GB. See the `),k=l(O,"A",{href:!0,rel:!0});var M=r(k);T=n(M,`ONNX
documentation`),M.forEach(o),I=n(O,` for
instructions on how to load models with external data.`),O.forEach(o),this.h()},h(){v(_,"href","https://developers.google.com/protocol-buffers/"),v(_,"rel","nofollow"),v(k,"href","https://github.com/onnx/onnx/blob/master/docs/ExternalData.md"),v(k,"rel","nofollow")},m(y,O){d(y,c,O),e(c,$),e(c,m),e(m,E),e(c,w),e(c,_),e(_,x),e(c,b),e(c,k),e(k,T),e(c,I)},d(y){y&&o(c)}}}function ug(X){let c,$,m,E,w,_,x,b,k,T,I,y,O,g,N,M,R,Q,W,He,K,We,Ge,Z,P,Ft,Ye,J,St,fe,ve,zt,tr,pa,Vt,or,fa,h,bo,sr,nr,ko,ar,lr,yo,rr,ir,Oo,pr,fr,To,dr,cr,No,hr,ur,jo,mr,gr,Co,_r,vr,Do,Er,$r,qo,wr,xr,Lo,br,kr,Ao,yr,Or,Io,Tr,Nr,Po,jr,Cr,Xo,Dr,qr,Bo,Lr,Ar,Mo,Ir,Pr,Ro,Xr,Br,Fo,Mr,Rr,So,Fr,Sr,zo,zr,Vr,Vo,Hr,Wr,Ho,Gr,Yr,Wo,Ur,Kr,Go,Jr,Qr,Yo,Zr,ei,Uo,ti,oi,Ko,si,ni,Jo,ai,li,Qo,ri,ii,Zo,pi,fi,es,di,ci,ts,hi,ui,os,mi,gi,ss,_i,vi,ns,Ei,$i,as,wi,xi,ls,bi,ki,rs,yi,Oi,is,Ti,Ni,ps,ji,Ci,fs,Di,qi,ds,Li,Ai,cs,Ii,Pi,hs,Xi,Bi,us,Mi,Ri,ms,Fi,Si,gs,zi,Vi,_s,Hi,Wi,vs,Gi,Yi,Es,Ui,Ki,$s,Ji,Qi,ws,Zi,ep,xs,tp,op,bs,sp,np,ks,ap,lp,ys,rp,ip,Os,pp,fp,Ts,dp,da,Ht,cp,ca,Ee,Ue,hp,Ns,up,mp,gp,js,_p,ha,de,$e,Cs,Ke,vp,Ds,Ep,ua,Wt,$p,ma,Je,ga,we,wp,qs,xp,bp,_a,Qe,va,Gt,kp,Ea,Ze,$a,Yt,yp,wa,et,xa,ee,Op,Ls,Tp,Np,As,jp,Cp,ba,G,Dp,Is,qp,Lp,tt,Ap,Ip,ot,Pp,Xp,ka,st,ya,xe,Bp,Ps,Mp,Rp,Oa,nt,Ta,be,Fp,at,Sp,zp,Na,lt,ja,Ut,Vp,Ca,ke,Da,ce,ye,Xs,rt,Hp,Bs,Wp,qa,te,Gp,Ms,Yp,Up,Rs,Kp,Jp,La,Oe,Fs,it,Ss,Qp,Zp,zs,ef,tf,F,pt,ft,Vs,of,sf,Hs,nf,af,Ws,Gs,lf,rf,dt,ct,Ys,pf,ff,Us,df,cf,Ks,Js,hf,uf,ht,Qs,Zs,mf,gf,en,tn,_f,vf,ut,on,sn,Ef,$f,nn,an,wf,xf,mt,gt,ln,bf,kf,rn,yf,Of,pn,fn,Tf,Nf,_t,dn,cn,jf,Cf,hn,un,Df,qf,vt,mn,gn,Lf,Af,_n,vn,If,Aa,Te,Pf,Kt,Xf,Bf,Ia,Et,Pa,oe,Mf,En,Rf,Ff,$n,Sf,zf,Xa,$t,Ba,Jt,Vf,Ma,wt,Ra,Y,Hf,wn,Wf,Gf,xn,Yf,Uf,bn,Kf,Jf,Fa,Ne,Sa,je,za,he,Ce,kn,xt,Qf,yn,Zf,Va,Qt,ed,Ha,se,On,td,od,Tn,sd,nd,Nn,ad,Wa,Zt,ld,Ga,ue,De,jn,bt,rd,Cn,id,Ya,eo,pd,Ua,ne,to,fd,oo,dd,cd,so,hd,no,ud,md,ao,gd,lo,_d,Ka,qe,Ja,Le,vd,Dn,Ed,$d,Qa,kt,Za,z,wd,qn,xd,bd,Ln,kd,yd,An,Od,Td,In,Nd,jd,el,Ae,tl,ro,Cd,ol,yt,sl,io,Dd,nl,Ot,al,po,qd,ll,Tt,rl,V,Ld,Pn,Ad,Id,Xn,Pd,Xd,Bn,Bd,Md,Mn,Rd,Fd,il,Nt,pl,Ie,fl,me,Pe,Rn,jt,Sd,Fn,zd,dl,ae,Vd,Sn,Hd,Wd,zn,Gd,Yd,cl,Ct,hl,S,Ud,Vn,Kd,Jd,Hn,Qd,Zd,Wn,ec,tc,Gn,oc,sc,Yn,nc,ac,ul,Dt,ml,Xe,gl,ge,Be,Un,qt,lc,Kn,rc,_l,le,ic,Jn,pc,fc,Qn,dc,cc,vl,Lt,El,Me,hc,fo,uc,mc,$l,_e,Re,Zn,At,gc,ea,_c,wl,co,vc,xl,re,It,Ec,ta,$c,wc,xc,ho,bc,oa,kc,yc,uo,Oc,sa,Tc,bl,Fe,Nc,Pt,jc,Cc,kl;return _=new Ve({}),R=new Rt({props:{$$slots:{default:[sg]},$$scope:{ctx:X}}}),Ke=new Ve({}),Je=new B({props:{code:"pip install transformers[onnx]",highlighted:"pip install transformers[onnx]"}}),Qe=new B({props:{code:`python -m transformers.onnx --help

usage: Hugging Face Transformers ONNX exporter [-h] -m MODEL [--feature {causal-lm, ...}] [--opset OPSET] [--atol ATOL] output

positional arguments:
  output                Path indicating where to store generated ONNX model.

optional arguments:
  -h, --help            show this help message and exit
  -m MODEL, --model MODEL
                        Model ID on huggingface.co or path on disk to load model from.
  --feature {causal-lm, ...}
                        The type of features to export the model with.
  --opset OPSET         ONNX opset version to export the model with.
  --atol ATOL           Absolute difference tolerence when validating the model.`,highlighted:`python -m transformers.onnx --<span class="hljs-built_in">help</span>

usage: Hugging Face Transformers ONNX exporter [-h] -m MODEL [--feature {causal-lm, ...}] [--opset OPSET] [--atol ATOL] output

positional arguments:
  output                Path indicating <span class="hljs-built_in">where</span> to store generated ONNX model.

optional arguments:
  -h, --<span class="hljs-built_in">help</span>            show this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span>
  -m MODEL, --model MODEL
                        Model ID on huggingface.co or path on disk to load model from.
  --feature {causal-lm, ...}
                        The <span class="hljs-built_in">type</span> of features to <span class="hljs-built_in">export</span> the model with.
  --opset OPSET         ONNX opset version to <span class="hljs-built_in">export</span> the model with.
  --atol ATOL           Absolute difference tolerence when validating the model.`}}),Ze=new B({props:{code:"python -m transformers.onnx --model=distilbert-base-uncased onnx/",highlighted:"python -m transformers.onnx --model=distilbert-base-uncased onnx/"}}),et=new B({props:{code:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({'last_hidden_state'})
        - Validating ONNX Model output "last_hidden_state":
                -[\u2713] (2, 8, 768) matches (2, 8, 768)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`,highlighted:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({<span class="hljs-string">&#x27;last_hidden_state&#x27;</span>})
        - Validating ONNX Model output <span class="hljs-string">&quot;last_hidden_state&quot;</span>:
                -[\u2713] (2, 8, 768) matches (2, 8, 768)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`}}),st=new B({props:{code:`from transformers import AutoTokenizer
from onnxruntime import InferenceSession

tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
session = InferenceSession("onnx/model.onnx")
# ONNX Runtime expects NumPy arrays as input
inputs = tokenizer("Using DistilBERT with ONNX Runtime!", return_tensors="np")
outputs = session.run(output_names=["last_hidden_state"], input_feed=dict(inputs))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> onnxruntime <span class="hljs-keyword">import</span> InferenceSession

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>session = InferenceSession(<span class="hljs-string">&quot;onnx/model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># ONNX Runtime expects NumPy arrays as input</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Using DistilBERT with ONNX Runtime!&quot;</span>, return_tensors=<span class="hljs-string">&quot;np&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = session.run(output_names=[<span class="hljs-string">&quot;last_hidden_state&quot;</span>], input_feed=<span class="hljs-built_in">dict</span>(inputs))`}}),nt=new B({props:{code:`from transformers.models.distilbert import DistilBertConfig, DistilBertOnnxConfig

config = DistilBertConfig()
onnx_config = DistilBertOnnxConfig(config)
print(list(onnx_config.outputs.keys()))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.models.distilbert <span class="hljs-keyword">import</span> DistilBertConfig, DistilBertOnnxConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = DistilBertConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config = DistilBertOnnxConfig(config)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(onnx_config.outputs.keys()))
[<span class="hljs-string">&quot;last_hidden_state&quot;</span>]`}}),lt=new B({props:{code:"python -m transformers.onnx --model=keras-io/transformers-qa onnx/",highlighted:"python -m transformers.onnx --model=keras-io/transformers-qa onnx/"}}),ke=new og({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[rg],pytorch:[ag]},$$scope:{ctx:X}}}),rt=new Ve({}),Et=new B({props:{code:`from transformers.onnx.features import FeaturesManager

distilbert_features = list(FeaturesManager.get_supported_features_for_model_type("distilbert").keys())
print(distilbert_features)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx.features <span class="hljs-keyword">import</span> FeaturesManager

<span class="hljs-meta">&gt;&gt;&gt; </span>distilbert_features = <span class="hljs-built_in">list</span>(FeaturesManager.get_supported_features_for_model_type(<span class="hljs-string">&quot;distilbert&quot;</span>).keys())
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(distilbert_features)
[<span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-string">&quot;masked-lm&quot;</span>, <span class="hljs-string">&quot;causal-lm&quot;</span>, <span class="hljs-string">&quot;sequence-classification&quot;</span>, <span class="hljs-string">&quot;token-classification&quot;</span>, <span class="hljs-string">&quot;question-answering&quot;</span>]`}}),$t=new B({props:{code:`python -m transformers.onnx --model=distilbert-base-uncased-finetuned-sst-2-english \\
                            --feature=sequence-classification onnx/`,highlighted:`python -m transformers.onnx --model=distilbert-base-uncased-finetuned-sst-2-english \\
                            --feature=sequence-classification onnx/`}}),wt=new B({props:{code:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({'logits'})
        - Validating ONNX Model output "logits":
                -[\u2713] (2, 2) matches (2, 2)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`,highlighted:`Validating ONNX model...
        -[\u2713] ONNX model output names match reference model ({<span class="hljs-string">&#x27;logits&#x27;</span>})
        - Validating ONNX Model output <span class="hljs-string">&quot;logits&quot;</span>:
                -[\u2713] (2, 2) matches (2, 2)
                -[\u2713] all values close (atol: 1e-05)
All good, model saved at: onnx/model.onnx`}}),Ne=new Rt({props:{$$slots:{default:[ig]},$$scope:{ctx:X}}}),je=new Rt({props:{$$slots:{default:[pg]},$$scope:{ctx:X}}}),xt=new Ve({}),bt=new Ve({}),qe=new Rt({props:{$$slots:{default:[fg]},$$scope:{ctx:X}}}),kt=new B({props:{code:`from typing import Mapping, OrderedDict
from transformers.onnx import OnnxConfig


class DistilBertOnnxConfig(OnnxConfig):
    @property
    def inputs(self) -> Mapping[str, Mapping[int, str]]:
        return OrderedDict(
            [
                ("input_ids", {0: "batch", 1: "sequence"}),
                ("attention_mask", {0: "batch", 1: "sequence"}),
            ]
        )`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Mapping, OrderedDict
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> OnnxConfig


<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">DistilBertOnnxConfig</span>(<span class="hljs-title class_ inherited__">OnnxConfig</span>):
<span class="hljs-meta">... </span>    @<span class="hljs-built_in">property</span>
<span class="hljs-meta">... </span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inputs</span>(<span class="hljs-params">self</span>) -&gt; Mapping[<span class="hljs-built_in">str</span>, Mapping[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>]]:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> OrderedDict(
<span class="hljs-meta">... </span>            [
<span class="hljs-meta">... </span>                (<span class="hljs-string">&quot;input_ids&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>}),
<span class="hljs-meta">... </span>                (<span class="hljs-string">&quot;attention_mask&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>}),
<span class="hljs-meta">... </span>            ]
<span class="hljs-meta">... </span>        )`}}),Ae=new Rt({props:{$$slots:{default:[dg]},$$scope:{ctx:X}}}),yt=new B({props:{code:`from transformers import AutoConfig

config = AutoConfig.from_pretrained("distilbert-base-uncased")
onnx_config = DistilBertOnnxConfig(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config = DistilBertOnnxConfig(config)`}}),Ot=new B({props:{code:"print(onnx_config.default_onnx_opset)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config.default_onnx_opset)
<span class="hljs-number">11</span>`}}),Tt=new B({props:{code:"print(onnx_config.outputs)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config.outputs)
OrderedDict([(<span class="hljs-string">&quot;last_hidden_state&quot;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;batch&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;sequence&quot;</span>})])`}}),Nt=new B({props:{code:`from transformers import AutoConfig

config = AutoConfig.from_pretrained("distilbert-base-uncased")
onnx_config_for_seq_clf = DistilBertOnnxConfig(config, task="sequence-classification")
print(onnx_config_for_seq_clf.outputs)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_config_for_seq_clf = DistilBertOnnxConfig(config, task=<span class="hljs-string">&quot;sequence-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(onnx_config_for_seq_clf.outputs)
OrderedDict([(<span class="hljs-string">&#x27;logits&#x27;</span>, {<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;batch&#x27;</span>})])`}}),Ie=new Rt({props:{$$slots:{default:[cg]},$$scope:{ctx:X}}}),jt=new Ve({}),Ct=new B({props:{code:`from pathlib import Path
from transformers.onnx import export
from transformers import AutoTokenizer, AutoModel

onnx_path = Path("model.onnx")
model_ckpt = "distilbert-base-uncased"
base_model = AutoModel.from_pretrained(model_ckpt)
tokenizer = AutoTokenizer.from_pretrained(model_ckpt)

onnx_inputs, onnx_outputs = export(tokenizer, base_model, onnx_config, onnx_config.default_onnx_opset, onnx_path)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> export
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_path = Path(<span class="hljs-string">&quot;model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model_ckpt = <span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>base_model = AutoModel.from_pretrained(model_ckpt)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_ckpt)

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_inputs, onnx_outputs = export(tokenizer, base_model, onnx_config, onnx_config.default_onnx_opset, onnx_path)`}}),Dt=new B({props:{code:`import onnx

onnx_model = onnx.load("model.onnx")
onnx.checker.check_model(onnx_model)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> onnx

<span class="hljs-meta">&gt;&gt;&gt; </span>onnx_model = onnx.load(<span class="hljs-string">&quot;model.onnx&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>onnx.checker.check_model(onnx_model)`}}),Xe=new Rt({props:{$$slots:{default:[hg]},$$scope:{ctx:X}}}),qt=new Ve({}),Lt=new B({props:{code:`from transformers.onnx import validate_model_outputs

validate_model_outputs(
    onnx_config, tokenizer, base_model, onnx_path, onnx_outputs, onnx_config.atol_for_validation
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers.onnx <span class="hljs-keyword">import</span> validate_model_outputs

<span class="hljs-meta">&gt;&gt;&gt; </span>validate_model_outputs(
<span class="hljs-meta">... </span>    onnx_config, tokenizer, base_model, onnx_path, onnx_outputs, onnx_config.atol_for_validation
<span class="hljs-meta">... </span>)`}}),At=new Ve({}),{c(){c=a("meta"),$=p(),m=a("h1"),E=a("a"),w=a("span"),j(_.$$.fragment),x=p(),b=a("span"),k=s("Export to ONNX"),T=p(),I=a("p"),y=s(`If you need to deploy \u{1F917} Transformers models in production environments, we recommend
exporting them to a serialized format that can be loaded and executed on specialized
runtimes and hardware. In this guide, we\u2019ll show you how to export \u{1F917} Transformers
models to `),O=a("a"),g=s("ONNX (Open Neural Network eXchange)"),N=s("."),M=p(),j(R.$$.fragment),Q=p(),W=a("p"),He=s(`ONNX is an open standard that defines a common set of operators and a common file format
to represent deep learning models in a wide variety of frameworks, including PyTorch and
TensorFlow. When a model is exported to the ONNX format, these operators are used to
construct a computational graph (often called an `),K=a("em"),We=s("intermediate representation"),Ge=s(`) which
represents the flow of data through the neural network.`),Z=p(),P=a("p"),Ft=s(`By exposing a graph with standardized operators and data types, ONNX makes it easy to
switch between frameworks. For example, a model trained in PyTorch can be exported to
ONNX format and then imported in TensorFlow (and vice versa).`),Ye=p(),J=a("p"),St=s("\u{1F917} Transformers provides a "),fe=a("a"),ve=a("code"),zt=s("transformers.onnx"),tr=s(` package that enables
you to convert model checkpoints to an ONNX graph by leveraging configuration objects.
These configuration objects come ready made for a number of model architectures, and are
designed to be easily extendable to other architectures.`),pa=p(),Vt=a("p"),or=s("Ready-made configurations include the following architectures:"),fa=p(),h=a("ul"),bo=a("li"),sr=s("ALBERT"),nr=p(),ko=a("li"),ar=s("BART"),lr=p(),yo=a("li"),rr=s("BEiT"),ir=p(),Oo=a("li"),pr=s("BERT"),fr=p(),To=a("li"),dr=s("BigBird"),cr=p(),No=a("li"),hr=s("BigBird-Pegasus"),ur=p(),jo=a("li"),mr=s("Blenderbot"),gr=p(),Co=a("li"),_r=s("BlenderbotSmall"),vr=p(),Do=a("li"),Er=s("BLOOM"),$r=p(),qo=a("li"),wr=s("CamemBERT"),xr=p(),Lo=a("li"),br=s("CLIP"),kr=p(),Ao=a("li"),yr=s("CodeGen"),Or=p(),Io=a("li"),Tr=s("Conditional DETR"),Nr=p(),Po=a("li"),jr=s("ConvBERT"),Cr=p(),Xo=a("li"),Dr=s("ConvNeXT"),qr=p(),Bo=a("li"),Lr=s("Data2VecText"),Ar=p(),Mo=a("li"),Ir=s("Data2VecVision"),Pr=p(),Ro=a("li"),Xr=s("DeBERTa"),Br=p(),Fo=a("li"),Mr=s("DeBERTa-v2"),Rr=p(),So=a("li"),Fr=s("DeiT"),Sr=p(),zo=a("li"),zr=s("DETR"),Vr=p(),Vo=a("li"),Hr=s("DistilBERT"),Wr=p(),Ho=a("li"),Gr=s("ELECTRA"),Yr=p(),Wo=a("li"),Ur=s("ERNIE"),Kr=p(),Go=a("li"),Jr=s("FlauBERT"),Qr=p(),Yo=a("li"),Zr=s("GPT Neo"),ei=p(),Uo=a("li"),ti=s("GPT-J"),oi=p(),Ko=a("li"),si=s("GroupViT"),ni=p(),Jo=a("li"),ai=s("I-BERT"),li=p(),Qo=a("li"),ri=s("ImageGPT"),ii=p(),Zo=a("li"),pi=s("LayoutLM"),fi=p(),es=a("li"),di=s("LayoutLMv3"),ci=p(),ts=a("li"),hi=s("LeViT"),ui=p(),os=a("li"),mi=s("Longformer"),gi=p(),ss=a("li"),_i=s("LongT5"),vi=p(),ns=a("li"),Ei=s("M2M100"),$i=p(),as=a("li"),wi=s("Marian"),xi=p(),ls=a("li"),bi=s("mBART"),ki=p(),rs=a("li"),yi=s("MobileBERT"),Oi=p(),is=a("li"),Ti=s("MobileViT"),Ni=p(),ps=a("li"),ji=s("MT5"),Ci=p(),fs=a("li"),Di=s("OpenAI GPT-2"),qi=p(),ds=a("li"),Li=s("OWL-ViT"),Ai=p(),cs=a("li"),Ii=s("Perceiver"),Pi=p(),hs=a("li"),Xi=s("PLBart"),Bi=p(),us=a("li"),Mi=s("ResNet"),Ri=p(),ms=a("li"),Fi=s("RoBERTa"),Si=p(),gs=a("li"),zi=s("RoFormer"),Vi=p(),_s=a("li"),Hi=s("SegFormer"),Wi=p(),vs=a("li"),Gi=s("SqueezeBERT"),Yi=p(),Es=a("li"),Ui=s("Swin Transformer"),Ki=p(),$s=a("li"),Ji=s("T5"),Qi=p(),ws=a("li"),Zi=s("Table Transformer"),ep=p(),xs=a("li"),tp=s("Vision Encoder decoder"),op=p(),bs=a("li"),sp=s("ViT"),np=p(),ks=a("li"),ap=s("XLM"),lp=p(),ys=a("li"),rp=s("XLM-RoBERTa"),ip=p(),Os=a("li"),pp=s("XLM-RoBERTa-XL"),fp=p(),Ts=a("li"),dp=s("YOLOS"),da=p(),Ht=a("p"),cp=s("In the next two sections, we\u2019ll show you how to:"),ca=p(),Ee=a("ul"),Ue=a("li"),hp=s("Export a supported model using the "),Ns=a("code"),up=s("transformers.onnx"),mp=s(" package."),gp=p(),js=a("li"),_p=s("Export a custom model for an unsupported architecture."),ha=p(),de=a("h2"),$e=a("a"),Cs=a("span"),j(Ke.$$.fragment),vp=p(),Ds=a("span"),Ep=s("Exporting a model to ONNX"),ua=p(),Wt=a("p"),$p=s(`To export a \u{1F917} Transformers model to ONNX, you\u2019ll first need to install some extra
dependencies:`),ma=p(),j(Je.$$.fragment),ga=p(),we=a("p"),wp=s("The "),qs=a("code"),xp=s("transformers.onnx"),bp=s(" package can then be used as a Python module:"),_a=p(),j(Qe.$$.fragment),va=p(),Gt=a("p"),kp=s("Exporting a checkpoint using a ready-made configuration can be done as follows:"),Ea=p(),j(Ze.$$.fragment),$a=p(),Yt=a("p"),yp=s("You should see the following logs:"),wa=p(),j(et.$$.fragment),xa=p(),ee=a("p"),Op=s("This exports an ONNX graph of the checkpoint defined by the "),Ls=a("code"),Tp=s("--model"),Np=s(` argument. In this
example, it is `),As=a("code"),jp=s("distilbert-base-uncased"),Cp=s(`, but it can be any checkpoint on the Hugging
Face Hub or one that\u2019s stored locally.`),ba=p(),G=a("p"),Dp=s("The resulting "),Is=a("code"),qp=s("model.onnx"),Lp=s(" file can then be run on one of the "),tt=a("a"),Ap=s(`many
accelerators`),Ip=s(` that support the ONNX
standard. For example, we can load and run the model with `),ot=a("a"),Pp=s(`ONNX
Runtime`),Xp=s(" as follows:"),ka=p(),j(st.$$.fragment),ya=p(),xe=a("p"),Bp=s("The required output names (like "),Ps=a("code"),Mp=s('["last_hidden_state"]'),Rp=s(`) can be obtained by taking a
look at the ONNX configuration of each model. For example, for DistilBERT we have:`),Oa=p(),j(nt.$$.fragment),Ta=p(),be=a("p"),Fp=s(`The process is identical for TensorFlow checkpoints on the Hub. For example, we can
export a pure TensorFlow checkpoint from the `),at=a("a"),Sp=s(`Keras
organization`),zp=s(" as follows:"),Na=p(),j(lt.$$.fragment),ja=p(),Ut=a("p"),Vp=s(`To export a model that\u2019s stored locally, you\u2019ll need to have the model\u2019s weights and
tokenizer files stored in a directory. For example, we can load and save a checkpoint as
follows:`),Ca=p(),j(ke.$$.fragment),Da=p(),ce=a("h2"),ye=a("a"),Xs=a("span"),j(rt.$$.fragment),Hp=p(),Bs=a("span"),Wp=s("Selecting features for different model tasks"),qa=p(),te=a("p"),Gp=s("Each ready-made configuration comes with a set of "),Ms=a("em"),Yp=s("features"),Up=s(` that enable you to export
models for different types of tasks. As shown in the table below, each feature is
associated with a different `),Rs=a("code"),Kp=s("AutoClass"),Jp=s(":"),La=p(),Oe=a("table"),Fs=a("thead"),it=a("tr"),Ss=a("th"),Qp=s("Feature"),Zp=p(),zs=a("th"),ef=s("Auto Class"),tf=p(),F=a("tbody"),pt=a("tr"),ft=a("td"),Vs=a("code"),of=s("causal-lm"),sf=s(", "),Hs=a("code"),nf=s("causal-lm-with-past"),af=p(),Ws=a("td"),Gs=a("code"),lf=s("AutoModelForCausalLM"),rf=p(),dt=a("tr"),ct=a("td"),Ys=a("code"),pf=s("default"),ff=s(", "),Us=a("code"),df=s("default-with-past"),cf=p(),Ks=a("td"),Js=a("code"),hf=s("AutoModel"),uf=p(),ht=a("tr"),Qs=a("td"),Zs=a("code"),mf=s("masked-lm"),gf=p(),en=a("td"),tn=a("code"),_f=s("AutoModelForMaskedLM"),vf=p(),ut=a("tr"),on=a("td"),sn=a("code"),Ef=s("question-answering"),$f=p(),nn=a("td"),an=a("code"),wf=s("AutoModelForQuestionAnswering"),xf=p(),mt=a("tr"),gt=a("td"),ln=a("code"),bf=s("seq2seq-lm"),kf=s(", "),rn=a("code"),yf=s("seq2seq-lm-with-past"),Of=p(),pn=a("td"),fn=a("code"),Tf=s("AutoModelForSeq2SeqLM"),Nf=p(),_t=a("tr"),dn=a("td"),cn=a("code"),jf=s("sequence-classification"),Cf=p(),hn=a("td"),un=a("code"),Df=s("AutoModelForSequenceClassification"),qf=p(),vt=a("tr"),mn=a("td"),gn=a("code"),Lf=s("token-classification"),Af=p(),_n=a("td"),vn=a("code"),If=s("AutoModelForTokenClassification"),Aa=p(),Te=a("p"),Pf=s(`For each configuration, you can find the list of supported features via the
`),Kt=a("a"),Xf=s("FeaturesManager"),Bf=s(". For example, for DistilBERT we have:"),Ia=p(),j(Et.$$.fragment),Pa=p(),oe=a("p"),Mf=s("You can then pass one of these features to the "),En=a("code"),Rf=s("--feature"),Ff=s(` argument in the
`),$n=a("code"),Sf=s("transformers.onnx"),zf=s(` package. For example, to export a text-classification model we can
pick a fine-tuned model from the Hub and run:`),Xa=p(),j($t.$$.fragment),Ba=p(),Jt=a("p"),Vf=s("This displays the following logs:"),Ma=p(),j(wt.$$.fragment),Ra=p(),Y=a("p"),Hf=s("Notice that in this case, the output names from the fine-tuned model are "),wn=a("code"),Wf=s("logits"),Gf=s(`
instead of the `),xn=a("code"),Yf=s("last_hidden_state"),Uf=s(" we saw with the "),bn=a("code"),Kf=s("distilbert-base-uncased"),Jf=s(` checkpoint
earlier. This is expected since the fine-tuned model has a sequence classification head.`),Fa=p(),j(Ne.$$.fragment),Sa=p(),j(je.$$.fragment),za=p(),he=a("h2"),Ce=a("a"),kn=a("span"),j(xt.$$.fragment),Qf=p(),yn=a("span"),Zf=s("Exporting a model for an unsupported architecture"),Va=p(),Qt=a("p"),ed=s(`If you wish to export a model whose architecture is not natively supported by the
library, there are three main steps to follow:`),Ha=p(),se=a("ol"),On=a("li"),td=s("Implement a custom ONNX configuration."),od=p(),Tn=a("li"),sd=s("Export the model to ONNX."),nd=p(),Nn=a("li"),ad=s("Validate the outputs of the PyTorch and exported models."),Wa=p(),Zt=a("p"),ld=s(`In this section, we\u2019ll look at how DistilBERT was implemented to show what\u2019s involved
with each step.`),Ga=p(),ue=a("h3"),De=a("a"),jn=a("span"),j(bt.$$.fragment),rd=p(),Cn=a("span"),id=s("Implementing a custom ONNX configuration"),Ya=p(),eo=a("p"),pd=s(`Let\u2019s start with the ONNX configuration object. We provide three abstract classes that
you should inherit from, depending on the type of model architecture you wish to export:`),Ua=p(),ne=a("ul"),to=a("li"),fd=s("Encoder-based models inherit from "),oo=a("a"),dd=s("OnnxConfig"),cd=p(),so=a("li"),hd=s("Decoder-based models inherit from "),no=a("a"),ud=s("OnnxConfigWithPast"),md=p(),ao=a("li"),gd=s("Encoder-decoder models inherit from "),lo=a("a"),_d=s("OnnxSeq2SeqConfigWithPast"),Ka=p(),j(qe.$$.fragment),Ja=p(),Le=a("p"),vd=s(`Since DistilBERT is an encoder-based model, its configuration inherits from
`),Dn=a("code"),Ed=s("OnnxConfig"),$d=s(":"),Qa=p(),j(kt.$$.fragment),Za=p(),z=a("p"),wd=s("Every configuration object must implement the "),qn=a("code"),xd=s("inputs"),bd=s(` property and return a mapping,
where each key corresponds to an expected input, and each value indicates the axis of
that input. For DistilBERT, we can see that two inputs are required: `),Ln=a("code"),kd=s("input_ids"),yd=s(` and
`),An=a("code"),Od=s("attention_mask"),Td=s(". These inputs have the same shape of "),In=a("code"),Nd=s("(batch_size, sequence_length)"),jd=s(`
which is why we see the same axes used in the configuration.`),el=p(),j(Ae.$$.fragment),tl=p(),ro=a("p"),Cd=s(`Once you have implemented an ONNX configuration, you can instantiate it by providing the
base model\u2019s configuration as follows:`),ol=p(),j(yt.$$.fragment),sl=p(),io=a("p"),Dd=s(`The resulting object has several useful properties. For example, you can view the ONNX
operator set that will be used during the export:`),nl=p(),j(Ot.$$.fragment),al=p(),po=a("p"),qd=s("You can also view the outputs associated with the model as follows:"),ll=p(),j(Tt.$$.fragment),rl=p(),V=a("p"),Ld=s(`Notice that the outputs property follows the same structure as the inputs; it returns an
`),Pn=a("code"),Ad=s("OrderedDict"),Id=s(` of named outputs and their shapes. The output structure is linked to the
choice of feature that the configuration is initialised with. By default, the ONNX
configuration is initialized with the `),Xn=a("code"),Pd=s("default"),Xd=s(` feature that corresponds to exporting a
model loaded with the `),Bn=a("code"),Bd=s("AutoModel"),Md=s(` class. If you want to export a model for another task,
just provide a different feature to the `),Mn=a("code"),Rd=s("task"),Fd=s(` argument when you initialize the ONNX
configuration. For example, if we wished to export DistilBERT with a sequence
classification head, we could use:`),il=p(),j(Nt.$$.fragment),pl=p(),j(Ie.$$.fragment),fl=p(),me=a("h3"),Pe=a("a"),Rn=a("span"),j(jt.$$.fragment),Sd=p(),Fn=a("span"),zd=s("Exporting the model"),dl=p(),ae=a("p"),Vd=s(`Once you have implemented the ONNX configuration, the next step is to export the model.
Here we can use the `),Sn=a("code"),Hd=s("export()"),Wd=s(" function provided by the "),zn=a("code"),Gd=s("transformers.onnx"),Yd=s(` package.
This function expects the ONNX configuration, along with the base model and tokenizer,
and the path to save the exported file:`),cl=p(),j(Ct.$$.fragment),hl=p(),S=a("p"),Ud=s("The "),Vn=a("code"),Kd=s("onnx_inputs"),Jd=s(" and "),Hn=a("code"),Qd=s("onnx_outputs"),Zd=s(" returned by the "),Wn=a("code"),ec=s("export()"),tc=s(` function are lists of
the keys defined in the `),Gn=a("code"),oc=s("inputs"),sc=s(" and "),Yn=a("code"),nc=s("outputs"),ac=s(` properties of the configuration. Once the
model is exported, you can test that the model is well formed as follows:`),ul=p(),j(Dt.$$.fragment),ml=p(),j(Xe.$$.fragment),gl=p(),ge=a("h3"),Be=a("a"),Un=a("span"),j(qt.$$.fragment),lc=p(),Kn=a("span"),rc=s("Validating the model outputs"),_l=p(),le=a("p"),ic=s(`The final step is to validate that the outputs from the base and exported model agree
within some absolute tolerance. Here we can use the `),Jn=a("code"),pc=s("validate_model_outputs()"),fc=s(` function
provided by the `),Qn=a("code"),dc=s("transformers.onnx"),cc=s(" package as follows:"),vl=p(),j(Lt.$$.fragment),El=p(),Me=a("p"),hc=s("This function uses the "),fo=a("a"),uc=s("generate_dummy_inputs()"),mc=s(` method to
generate inputs for the base and exported model, and the absolute tolerance can be
defined in the configuration. We generally find numerical agreement in the 1e-6 to 1e-4
range, although anything smaller than 1e-3 is likely to be OK.`),$l=p(),_e=a("h2"),Re=a("a"),Zn=a("span"),j(At.$$.fragment),gc=p(),ea=a("span"),_c=s("Contributing a new configuration to \u{1F917} Transformers"),wl=p(),co=a("p"),vc=s(`We are looking to expand the set of ready-made configurations and welcome contributions
from the community! If you would like to contribute your addition to the library, you
will need to:`),xl=p(),re=a("ul"),It=a("li"),Ec=s("Implement the ONNX configuration in the corresponding "),ta=a("code"),$c=s("configuration_<model_name>.py"),wc=s(`
file`),xc=p(),ho=a("li"),bc=s(`Include the model architecture and corresponding features in
`),oa=a("code"),kc=s("~onnx.features.FeatureManager"),yc=p(),uo=a("li"),Oc=s("Add your model architecture to the tests in "),sa=a("code"),Tc=s("test_onnx_v2.py"),bl=p(),Fe=a("p"),Nc=s("Check out how the configuration for "),Pt=a("a"),jc=s(`IBERT was
contributed`),Cc=s(` to get an
idea of what\u2019s involved.`),this.h()},l(t){const i=eg('[data-svelte="svelte-1phssyn"]',document.head);c=l(i,"META",{name:!0,content:!0}),i.forEach(o),$=f(t),m=l(t,"H1",{class:!0});var Xt=r(m);E=l(Xt,"A",{id:!0,class:!0,href:!0});var na=r(E);w=l(na,"SPAN",{});var aa=r(w);C(_.$$.fragment,aa),aa.forEach(o),na.forEach(o),x=f(Xt),b=l(Xt,"SPAN",{});var la=r(b);k=n(la,"Export to ONNX"),la.forEach(o),Xt.forEach(o),T=f(t),I=l(t,"P",{});var Bt=r(I);y=n(Bt,`If you need to deploy \u{1F917} Transformers models in production environments, we recommend
exporting them to a serialized format that can be loaded and executed on specialized
runtimes and hardware. In this guide, we\u2019ll show you how to export \u{1F917} Transformers
models to `),O=l(Bt,"A",{href:!0,rel:!0});var ra=r(O);g=n(ra,"ONNX (Open Neural Network eXchange)"),ra.forEach(o),N=n(Bt,"."),Bt.forEach(o),M=f(t),C(R.$$.fragment,t),Q=f(t),W=l(t,"P",{});var Mt=r(W);He=n(Mt,`ONNX is an open standard that defines a common set of operators and a common file format
to represent deep learning models in a wide variety of frameworks, including PyTorch and
TensorFlow. When a model is exported to the ONNX format, these operators are used to
construct a computational graph (often called an `),K=l(Mt,"EM",{});var ia=r(K);We=n(ia,"intermediate representation"),ia.forEach(o),Ge=n(Mt,`) which
represents the flow of data through the neural network.`),Mt.forEach(o),Z=f(t),P=l(t,"P",{});var Pc=r(P);Ft=n(Pc,`By exposing a graph with standardized operators and data types, ONNX makes it easy to
switch between frameworks. For example, a model trained in PyTorch can be exported to
ONNX format and then imported in TensorFlow (and vice versa).`),Pc.forEach(o),Ye=f(t),J=l(t,"P",{});var yl=r(J);St=n(yl,"\u{1F917} Transformers provides a "),fe=l(yl,"A",{href:!0});var Xc=r(fe);ve=l(Xc,"CODE",{});var Bc=r(ve);zt=n(Bc,"transformers.onnx"),Bc.forEach(o),Xc.forEach(o),tr=n(yl,` package that enables
you to convert model checkpoints to an ONNX graph by leveraging configuration objects.
These configuration objects come ready made for a number of model architectures, and are
designed to be easily extendable to other architectures.`),yl.forEach(o),pa=f(t),Vt=l(t,"P",{});var Mc=r(Vt);or=n(Mc,"Ready-made configurations include the following architectures:"),Mc.forEach(o),fa=f(t),h=l(t,"UL",{});var u=r(h);bo=l(u,"LI",{});var Rc=r(bo);sr=n(Rc,"ALBERT"),Rc.forEach(o),nr=f(u),ko=l(u,"LI",{});var Fc=r(ko);ar=n(Fc,"BART"),Fc.forEach(o),lr=f(u),yo=l(u,"LI",{});var Sc=r(yo);rr=n(Sc,"BEiT"),Sc.forEach(o),ir=f(u),Oo=l(u,"LI",{});var zc=r(Oo);pr=n(zc,"BERT"),zc.forEach(o),fr=f(u),To=l(u,"LI",{});var Vc=r(To);dr=n(Vc,"BigBird"),Vc.forEach(o),cr=f(u),No=l(u,"LI",{});var Hc=r(No);hr=n(Hc,"BigBird-Pegasus"),Hc.forEach(o),ur=f(u),jo=l(u,"LI",{});var Wc=r(jo);mr=n(Wc,"Blenderbot"),Wc.forEach(o),gr=f(u),Co=l(u,"LI",{});var Gc=r(Co);_r=n(Gc,"BlenderbotSmall"),Gc.forEach(o),vr=f(u),Do=l(u,"LI",{});var Yc=r(Do);Er=n(Yc,"BLOOM"),Yc.forEach(o),$r=f(u),qo=l(u,"LI",{});var Uc=r(qo);wr=n(Uc,"CamemBERT"),Uc.forEach(o),xr=f(u),Lo=l(u,"LI",{});var Kc=r(Lo);br=n(Kc,"CLIP"),Kc.forEach(o),kr=f(u),Ao=l(u,"LI",{});var Jc=r(Ao);yr=n(Jc,"CodeGen"),Jc.forEach(o),Or=f(u),Io=l(u,"LI",{});var Qc=r(Io);Tr=n(Qc,"Conditional DETR"),Qc.forEach(o),Nr=f(u),Po=l(u,"LI",{});var Zc=r(Po);jr=n(Zc,"ConvBERT"),Zc.forEach(o),Cr=f(u),Xo=l(u,"LI",{});var eh=r(Xo);Dr=n(eh,"ConvNeXT"),eh.forEach(o),qr=f(u),Bo=l(u,"LI",{});var th=r(Bo);Lr=n(th,"Data2VecText"),th.forEach(o),Ar=f(u),Mo=l(u,"LI",{});var oh=r(Mo);Ir=n(oh,"Data2VecVision"),oh.forEach(o),Pr=f(u),Ro=l(u,"LI",{});var sh=r(Ro);Xr=n(sh,"DeBERTa"),sh.forEach(o),Br=f(u),Fo=l(u,"LI",{});var nh=r(Fo);Mr=n(nh,"DeBERTa-v2"),nh.forEach(o),Rr=f(u),So=l(u,"LI",{});var ah=r(So);Fr=n(ah,"DeiT"),ah.forEach(o),Sr=f(u),zo=l(u,"LI",{});var lh=r(zo);zr=n(lh,"DETR"),lh.forEach(o),Vr=f(u),Vo=l(u,"LI",{});var rh=r(Vo);Hr=n(rh,"DistilBERT"),rh.forEach(o),Wr=f(u),Ho=l(u,"LI",{});var ih=r(Ho);Gr=n(ih,"ELECTRA"),ih.forEach(o),Yr=f(u),Wo=l(u,"LI",{});var ph=r(Wo);Ur=n(ph,"ERNIE"),ph.forEach(o),Kr=f(u),Go=l(u,"LI",{});var fh=r(Go);Jr=n(fh,"FlauBERT"),fh.forEach(o),Qr=f(u),Yo=l(u,"LI",{});var dh=r(Yo);Zr=n(dh,"GPT Neo"),dh.forEach(o),ei=f(u),Uo=l(u,"LI",{});var ch=r(Uo);ti=n(ch,"GPT-J"),ch.forEach(o),oi=f(u),Ko=l(u,"LI",{});var hh=r(Ko);si=n(hh,"GroupViT"),hh.forEach(o),ni=f(u),Jo=l(u,"LI",{});var uh=r(Jo);ai=n(uh,"I-BERT"),uh.forEach(o),li=f(u),Qo=l(u,"LI",{});var mh=r(Qo);ri=n(mh,"ImageGPT"),mh.forEach(o),ii=f(u),Zo=l(u,"LI",{});var gh=r(Zo);pi=n(gh,"LayoutLM"),gh.forEach(o),fi=f(u),es=l(u,"LI",{});var _h=r(es);di=n(_h,"LayoutLMv3"),_h.forEach(o),ci=f(u),ts=l(u,"LI",{});var vh=r(ts);hi=n(vh,"LeViT"),vh.forEach(o),ui=f(u),os=l(u,"LI",{});var Eh=r(os);mi=n(Eh,"Longformer"),Eh.forEach(o),gi=f(u),ss=l(u,"LI",{});var $h=r(ss);_i=n($h,"LongT5"),$h.forEach(o),vi=f(u),ns=l(u,"LI",{});var wh=r(ns);Ei=n(wh,"M2M100"),wh.forEach(o),$i=f(u),as=l(u,"LI",{});var xh=r(as);wi=n(xh,"Marian"),xh.forEach(o),xi=f(u),ls=l(u,"LI",{});var bh=r(ls);bi=n(bh,"mBART"),bh.forEach(o),ki=f(u),rs=l(u,"LI",{});var kh=r(rs);yi=n(kh,"MobileBERT"),kh.forEach(o),Oi=f(u),is=l(u,"LI",{});var yh=r(is);Ti=n(yh,"MobileViT"),yh.forEach(o),Ni=f(u),ps=l(u,"LI",{});var Oh=r(ps);ji=n(Oh,"MT5"),Oh.forEach(o),Ci=f(u),fs=l(u,"LI",{});var Th=r(fs);Di=n(Th,"OpenAI GPT-2"),Th.forEach(o),qi=f(u),ds=l(u,"LI",{});var Nh=r(ds);Li=n(Nh,"OWL-ViT"),Nh.forEach(o),Ai=f(u),cs=l(u,"LI",{});var jh=r(cs);Ii=n(jh,"Perceiver"),jh.forEach(o),Pi=f(u),hs=l(u,"LI",{});var Ch=r(hs);Xi=n(Ch,"PLBart"),Ch.forEach(o),Bi=f(u),us=l(u,"LI",{});var Dh=r(us);Mi=n(Dh,"ResNet"),Dh.forEach(o),Ri=f(u),ms=l(u,"LI",{});var qh=r(ms);Fi=n(qh,"RoBERTa"),qh.forEach(o),Si=f(u),gs=l(u,"LI",{});var Lh=r(gs);zi=n(Lh,"RoFormer"),Lh.forEach(o),Vi=f(u),_s=l(u,"LI",{});var Ah=r(_s);Hi=n(Ah,"SegFormer"),Ah.forEach(o),Wi=f(u),vs=l(u,"LI",{});var Ih=r(vs);Gi=n(Ih,"SqueezeBERT"),Ih.forEach(o),Yi=f(u),Es=l(u,"LI",{});var Ph=r(Es);Ui=n(Ph,"Swin Transformer"),Ph.forEach(o),Ki=f(u),$s=l(u,"LI",{});var Xh=r($s);Ji=n(Xh,"T5"),Xh.forEach(o),Qi=f(u),ws=l(u,"LI",{});var Bh=r(ws);Zi=n(Bh,"Table Transformer"),Bh.forEach(o),ep=f(u),xs=l(u,"LI",{});var Mh=r(xs);tp=n(Mh,"Vision Encoder decoder"),Mh.forEach(o),op=f(u),bs=l(u,"LI",{});var Rh=r(bs);sp=n(Rh,"ViT"),Rh.forEach(o),np=f(u),ks=l(u,"LI",{});var Fh=r(ks);ap=n(Fh,"XLM"),Fh.forEach(o),lp=f(u),ys=l(u,"LI",{});var Sh=r(ys);rp=n(Sh,"XLM-RoBERTa"),Sh.forEach(o),ip=f(u),Os=l(u,"LI",{});var zh=r(Os);pp=n(zh,"XLM-RoBERTa-XL"),zh.forEach(o),fp=f(u),Ts=l(u,"LI",{});var Vh=r(Ts);dp=n(Vh,"YOLOS"),Vh.forEach(o),u.forEach(o),da=f(t),Ht=l(t,"P",{});var Hh=r(Ht);cp=n(Hh,"In the next two sections, we\u2019ll show you how to:"),Hh.forEach(o),ca=f(t),Ee=l(t,"UL",{});var Ol=r(Ee);Ue=l(Ol,"LI",{});var Tl=r(Ue);hp=n(Tl,"Export a supported model using the "),Ns=l(Tl,"CODE",{});var Wh=r(Ns);up=n(Wh,"transformers.onnx"),Wh.forEach(o),mp=n(Tl," package."),Tl.forEach(o),gp=f(Ol),js=l(Ol,"LI",{});var Gh=r(js);_p=n(Gh,"Export a custom model for an unsupported architecture."),Gh.forEach(o),Ol.forEach(o),ha=f(t),de=l(t,"H2",{class:!0});var Nl=r(de);$e=l(Nl,"A",{id:!0,class:!0,href:!0});var Yh=r($e);Cs=l(Yh,"SPAN",{});var Uh=r(Cs);C(Ke.$$.fragment,Uh),Uh.forEach(o),Yh.forEach(o),vp=f(Nl),Ds=l(Nl,"SPAN",{});var Kh=r(Ds);Ep=n(Kh,"Exporting a model to ONNX"),Kh.forEach(o),Nl.forEach(o),ua=f(t),Wt=l(t,"P",{});var Jh=r(Wt);$p=n(Jh,`To export a \u{1F917} Transformers model to ONNX, you\u2019ll first need to install some extra
dependencies:`),Jh.forEach(o),ma=f(t),C(Je.$$.fragment,t),ga=f(t),we=l(t,"P",{});var jl=r(we);wp=n(jl,"The "),qs=l(jl,"CODE",{});var Qh=r(qs);xp=n(Qh,"transformers.onnx"),Qh.forEach(o),bp=n(jl," package can then be used as a Python module:"),jl.forEach(o),_a=f(t),C(Qe.$$.fragment,t),va=f(t),Gt=l(t,"P",{});var Zh=r(Gt);kp=n(Zh,"Exporting a checkpoint using a ready-made configuration can be done as follows:"),Zh.forEach(o),Ea=f(t),C(Ze.$$.fragment,t),$a=f(t),Yt=l(t,"P",{});var eu=r(Yt);yp=n(eu,"You should see the following logs:"),eu.forEach(o),wa=f(t),C(et.$$.fragment,t),xa=f(t),ee=l(t,"P",{});var mo=r(ee);Op=n(mo,"This exports an ONNX graph of the checkpoint defined by the "),Ls=l(mo,"CODE",{});var tu=r(Ls);Tp=n(tu,"--model"),tu.forEach(o),Np=n(mo,` argument. In this
example, it is `),As=l(mo,"CODE",{});var ou=r(As);jp=n(ou,"distilbert-base-uncased"),ou.forEach(o),Cp=n(mo,`, but it can be any checkpoint on the Hugging
Face Hub or one that\u2019s stored locally.`),mo.forEach(o),ba=f(t),G=l(t,"P",{});var Se=r(G);Dp=n(Se,"The resulting "),Is=l(Se,"CODE",{});var su=r(Is);qp=n(su,"model.onnx"),su.forEach(o),Lp=n(Se," file can then be run on one of the "),tt=l(Se,"A",{href:!0,rel:!0});var nu=r(tt);Ap=n(nu,`many
accelerators`),nu.forEach(o),Ip=n(Se,` that support the ONNX
standard. For example, we can load and run the model with `),ot=l(Se,"A",{href:!0,rel:!0});var au=r(ot);Pp=n(au,`ONNX
Runtime`),au.forEach(o),Xp=n(Se," as follows:"),Se.forEach(o),ka=f(t),C(st.$$.fragment,t),ya=f(t),xe=l(t,"P",{});var Cl=r(xe);Bp=n(Cl,"The required output names (like "),Ps=l(Cl,"CODE",{});var lu=r(Ps);Mp=n(lu,'["last_hidden_state"]'),lu.forEach(o),Rp=n(Cl,`) can be obtained by taking a
look at the ONNX configuration of each model. For example, for DistilBERT we have:`),Cl.forEach(o),Oa=f(t),C(nt.$$.fragment,t),Ta=f(t),be=l(t,"P",{});var Dl=r(be);Fp=n(Dl,`The process is identical for TensorFlow checkpoints on the Hub. For example, we can
export a pure TensorFlow checkpoint from the `),at=l(Dl,"A",{href:!0,rel:!0});var ru=r(at);Sp=n(ru,`Keras
organization`),ru.forEach(o),zp=n(Dl," as follows:"),Dl.forEach(o),Na=f(t),C(lt.$$.fragment,t),ja=f(t),Ut=l(t,"P",{});var iu=r(Ut);Vp=n(iu,`To export a model that\u2019s stored locally, you\u2019ll need to have the model\u2019s weights and
tokenizer files stored in a directory. For example, we can load and save a checkpoint as
follows:`),iu.forEach(o),Ca=f(t),C(ke.$$.fragment,t),Da=f(t),ce=l(t,"H2",{class:!0});var ql=r(ce);ye=l(ql,"A",{id:!0,class:!0,href:!0});var pu=r(ye);Xs=l(pu,"SPAN",{});var fu=r(Xs);C(rt.$$.fragment,fu),fu.forEach(o),pu.forEach(o),Hp=f(ql),Bs=l(ql,"SPAN",{});var du=r(Bs);Wp=n(du,"Selecting features for different model tasks"),du.forEach(o),ql.forEach(o),qa=f(t),te=l(t,"P",{});var go=r(te);Gp=n(go,"Each ready-made configuration comes with a set of "),Ms=l(go,"EM",{});var cu=r(Ms);Yp=n(cu,"features"),cu.forEach(o),Up=n(go,` that enable you to export
models for different types of tasks. As shown in the table below, each feature is
associated with a different `),Rs=l(go,"CODE",{});var hu=r(Rs);Kp=n(hu,"AutoClass"),hu.forEach(o),Jp=n(go,":"),go.forEach(o),La=f(t),Oe=l(t,"TABLE",{});var Ll=r(Oe);Fs=l(Ll,"THEAD",{});var uu=r(Fs);it=l(uu,"TR",{});var Al=r(it);Ss=l(Al,"TH",{});var mu=r(Ss);Qp=n(mu,"Feature"),mu.forEach(o),Zp=f(Al),zs=l(Al,"TH",{});var gu=r(zs);ef=n(gu,"Auto Class"),gu.forEach(o),Al.forEach(o),uu.forEach(o),tf=f(Ll),F=l(Ll,"TBODY",{});var H=r(F);pt=l(H,"TR",{});var Il=r(pt);ft=l(Il,"TD",{});var Pl=r(ft);Vs=l(Pl,"CODE",{});var _u=r(Vs);of=n(_u,"causal-lm"),_u.forEach(o),sf=n(Pl,", "),Hs=l(Pl,"CODE",{});var vu=r(Hs);nf=n(vu,"causal-lm-with-past"),vu.forEach(o),Pl.forEach(o),af=f(Il),Ws=l(Il,"TD",{});var Eu=r(Ws);Gs=l(Eu,"CODE",{});var $u=r(Gs);lf=n($u,"AutoModelForCausalLM"),$u.forEach(o),Eu.forEach(o),Il.forEach(o),rf=f(H),dt=l(H,"TR",{});var Xl=r(dt);ct=l(Xl,"TD",{});var Bl=r(ct);Ys=l(Bl,"CODE",{});var wu=r(Ys);pf=n(wu,"default"),wu.forEach(o),ff=n(Bl,", "),Us=l(Bl,"CODE",{});var xu=r(Us);df=n(xu,"default-with-past"),xu.forEach(o),Bl.forEach(o),cf=f(Xl),Ks=l(Xl,"TD",{});var bu=r(Ks);Js=l(bu,"CODE",{});var ku=r(Js);hf=n(ku,"AutoModel"),ku.forEach(o),bu.forEach(o),Xl.forEach(o),uf=f(H),ht=l(H,"TR",{});var Ml=r(ht);Qs=l(Ml,"TD",{});var yu=r(Qs);Zs=l(yu,"CODE",{});var Ou=r(Zs);mf=n(Ou,"masked-lm"),Ou.forEach(o),yu.forEach(o),gf=f(Ml),en=l(Ml,"TD",{});var Tu=r(en);tn=l(Tu,"CODE",{});var Nu=r(tn);_f=n(Nu,"AutoModelForMaskedLM"),Nu.forEach(o),Tu.forEach(o),Ml.forEach(o),vf=f(H),ut=l(H,"TR",{});var Rl=r(ut);on=l(Rl,"TD",{});var ju=r(on);sn=l(ju,"CODE",{});var Cu=r(sn);Ef=n(Cu,"question-answering"),Cu.forEach(o),ju.forEach(o),$f=f(Rl),nn=l(Rl,"TD",{});var Du=r(nn);an=l(Du,"CODE",{});var qu=r(an);wf=n(qu,"AutoModelForQuestionAnswering"),qu.forEach(o),Du.forEach(o),Rl.forEach(o),xf=f(H),mt=l(H,"TR",{});var Fl=r(mt);gt=l(Fl,"TD",{});var Sl=r(gt);ln=l(Sl,"CODE",{});var Lu=r(ln);bf=n(Lu,"seq2seq-lm"),Lu.forEach(o),kf=n(Sl,", "),rn=l(Sl,"CODE",{});var Au=r(rn);yf=n(Au,"seq2seq-lm-with-past"),Au.forEach(o),Sl.forEach(o),Of=f(Fl),pn=l(Fl,"TD",{});var Iu=r(pn);fn=l(Iu,"CODE",{});var Pu=r(fn);Tf=n(Pu,"AutoModelForSeq2SeqLM"),Pu.forEach(o),Iu.forEach(o),Fl.forEach(o),Nf=f(H),_t=l(H,"TR",{});var zl=r(_t);dn=l(zl,"TD",{});var Xu=r(dn);cn=l(Xu,"CODE",{});var Bu=r(cn);jf=n(Bu,"sequence-classification"),Bu.forEach(o),Xu.forEach(o),Cf=f(zl),hn=l(zl,"TD",{});var Mu=r(hn);un=l(Mu,"CODE",{});var Ru=r(un);Df=n(Ru,"AutoModelForSequenceClassification"),Ru.forEach(o),Mu.forEach(o),zl.forEach(o),qf=f(H),vt=l(H,"TR",{});var Vl=r(vt);mn=l(Vl,"TD",{});var Fu=r(mn);gn=l(Fu,"CODE",{});var Su=r(gn);Lf=n(Su,"token-classification"),Su.forEach(o),Fu.forEach(o),Af=f(Vl),_n=l(Vl,"TD",{});var zu=r(_n);vn=l(zu,"CODE",{});var Vu=r(vn);If=n(Vu,"AutoModelForTokenClassification"),Vu.forEach(o),zu.forEach(o),Vl.forEach(o),H.forEach(o),Ll.forEach(o),Aa=f(t),Te=l(t,"P",{});var Hl=r(Te);Pf=n(Hl,`For each configuration, you can find the list of supported features via the
`),Kt=l(Hl,"A",{href:!0});var Hu=r(Kt);Xf=n(Hu,"FeaturesManager"),Hu.forEach(o),Bf=n(Hl,". For example, for DistilBERT we have:"),Hl.forEach(o),Ia=f(t),C(Et.$$.fragment,t),Pa=f(t),oe=l(t,"P",{});var _o=r(oe);Mf=n(_o,"You can then pass one of these features to the "),En=l(_o,"CODE",{});var Wu=r(En);Rf=n(Wu,"--feature"),Wu.forEach(o),Ff=n(_o,` argument in the
`),$n=l(_o,"CODE",{});var Gu=r($n);Sf=n(Gu,"transformers.onnx"),Gu.forEach(o),zf=n(_o,` package. For example, to export a text-classification model we can
pick a fine-tuned model from the Hub and run:`),_o.forEach(o),Xa=f(t),C($t.$$.fragment,t),Ba=f(t),Jt=l(t,"P",{});var Yu=r(Jt);Vf=n(Yu,"This displays the following logs:"),Yu.forEach(o),Ma=f(t),C(wt.$$.fragment,t),Ra=f(t),Y=l(t,"P",{});var ze=r(Y);Hf=n(ze,"Notice that in this case, the output names from the fine-tuned model are "),wn=l(ze,"CODE",{});var Uu=r(wn);Wf=n(Uu,"logits"),Uu.forEach(o),Gf=n(ze,`
instead of the `),xn=l(ze,"CODE",{});var Ku=r(xn);Yf=n(Ku,"last_hidden_state"),Ku.forEach(o),Uf=n(ze," we saw with the "),bn=l(ze,"CODE",{});var Ju=r(bn);Kf=n(Ju,"distilbert-base-uncased"),Ju.forEach(o),Jf=n(ze,` checkpoint
earlier. This is expected since the fine-tuned model has a sequence classification head.`),ze.forEach(o),Fa=f(t),C(Ne.$$.fragment,t),Sa=f(t),C(je.$$.fragment,t),za=f(t),he=l(t,"H2",{class:!0});var Wl=r(he);Ce=l(Wl,"A",{id:!0,class:!0,href:!0});var Qu=r(Ce);kn=l(Qu,"SPAN",{});var Zu=r(kn);C(xt.$$.fragment,Zu),Zu.forEach(o),Qu.forEach(o),Qf=f(Wl),yn=l(Wl,"SPAN",{});var em=r(yn);Zf=n(em,"Exporting a model for an unsupported architecture"),em.forEach(o),Wl.forEach(o),Va=f(t),Qt=l(t,"P",{});var tm=r(Qt);ed=n(tm,`If you wish to export a model whose architecture is not natively supported by the
library, there are three main steps to follow:`),tm.forEach(o),Ha=f(t),se=l(t,"OL",{});var vo=r(se);On=l(vo,"LI",{});var om=r(On);td=n(om,"Implement a custom ONNX configuration."),om.forEach(o),od=f(vo),Tn=l(vo,"LI",{});var sm=r(Tn);sd=n(sm,"Export the model to ONNX."),sm.forEach(o),nd=f(vo),Nn=l(vo,"LI",{});var nm=r(Nn);ad=n(nm,"Validate the outputs of the PyTorch and exported models."),nm.forEach(o),vo.forEach(o),Wa=f(t),Zt=l(t,"P",{});var am=r(Zt);ld=n(am,`In this section, we\u2019ll look at how DistilBERT was implemented to show what\u2019s involved
with each step.`),am.forEach(o),Ga=f(t),ue=l(t,"H3",{class:!0});var Gl=r(ue);De=l(Gl,"A",{id:!0,class:!0,href:!0});var lm=r(De);jn=l(lm,"SPAN",{});var rm=r(jn);C(bt.$$.fragment,rm),rm.forEach(o),lm.forEach(o),rd=f(Gl),Cn=l(Gl,"SPAN",{});var im=r(Cn);id=n(im,"Implementing a custom ONNX configuration"),im.forEach(o),Gl.forEach(o),Ya=f(t),eo=l(t,"P",{});var pm=r(eo);pd=n(pm,`Let\u2019s start with the ONNX configuration object. We provide three abstract classes that
you should inherit from, depending on the type of model architecture you wish to export:`),pm.forEach(o),Ua=f(t),ne=l(t,"UL",{});var Eo=r(ne);to=l(Eo,"LI",{});var Dc=r(to);fd=n(Dc,"Encoder-based models inherit from "),oo=l(Dc,"A",{href:!0});var fm=r(oo);dd=n(fm,"OnnxConfig"),fm.forEach(o),Dc.forEach(o),cd=f(Eo),so=l(Eo,"LI",{});var qc=r(so);hd=n(qc,"Decoder-based models inherit from "),no=l(qc,"A",{href:!0});var dm=r(no);ud=n(dm,"OnnxConfigWithPast"),dm.forEach(o),qc.forEach(o),md=f(Eo),ao=l(Eo,"LI",{});var Lc=r(ao);gd=n(Lc,"Encoder-decoder models inherit from "),lo=l(Lc,"A",{href:!0});var cm=r(lo);_d=n(cm,"OnnxSeq2SeqConfigWithPast"),cm.forEach(o),Lc.forEach(o),Eo.forEach(o),Ka=f(t),C(qe.$$.fragment,t),Ja=f(t),Le=l(t,"P",{});var Yl=r(Le);vd=n(Yl,`Since DistilBERT is an encoder-based model, its configuration inherits from
`),Dn=l(Yl,"CODE",{});var hm=r(Dn);Ed=n(hm,"OnnxConfig"),hm.forEach(o),$d=n(Yl,":"),Yl.forEach(o),Qa=f(t),C(kt.$$.fragment,t),Za=f(t),z=l(t,"P",{});var ie=r(z);wd=n(ie,"Every configuration object must implement the "),qn=l(ie,"CODE",{});var um=r(qn);xd=n(um,"inputs"),um.forEach(o),bd=n(ie,` property and return a mapping,
where each key corresponds to an expected input, and each value indicates the axis of
that input. For DistilBERT, we can see that two inputs are required: `),Ln=l(ie,"CODE",{});var mm=r(Ln);kd=n(mm,"input_ids"),mm.forEach(o),yd=n(ie,` and
`),An=l(ie,"CODE",{});var gm=r(An);Od=n(gm,"attention_mask"),gm.forEach(o),Td=n(ie,". These inputs have the same shape of "),In=l(ie,"CODE",{});var _m=r(In);Nd=n(_m,"(batch_size, sequence_length)"),_m.forEach(o),jd=n(ie,`
which is why we see the same axes used in the configuration.`),ie.forEach(o),el=f(t),C(Ae.$$.fragment,t),tl=f(t),ro=l(t,"P",{});var vm=r(ro);Cd=n(vm,`Once you have implemented an ONNX configuration, you can instantiate it by providing the
base model\u2019s configuration as follows:`),vm.forEach(o),ol=f(t),C(yt.$$.fragment,t),sl=f(t),io=l(t,"P",{});var Em=r(io);Dd=n(Em,`The resulting object has several useful properties. For example, you can view the ONNX
operator set that will be used during the export:`),Em.forEach(o),nl=f(t),C(Ot.$$.fragment,t),al=f(t),po=l(t,"P",{});var $m=r(po);qd=n($m,"You can also view the outputs associated with the model as follows:"),$m.forEach(o),ll=f(t),C(Tt.$$.fragment,t),rl=f(t),V=l(t,"P",{});var pe=r(V);Ld=n(pe,`Notice that the outputs property follows the same structure as the inputs; it returns an
`),Pn=l(pe,"CODE",{});var wm=r(Pn);Ad=n(wm,"OrderedDict"),wm.forEach(o),Id=n(pe,` of named outputs and their shapes. The output structure is linked to the
choice of feature that the configuration is initialised with. By default, the ONNX
configuration is initialized with the `),Xn=l(pe,"CODE",{});var xm=r(Xn);Pd=n(xm,"default"),xm.forEach(o),Xd=n(pe,` feature that corresponds to exporting a
model loaded with the `),Bn=l(pe,"CODE",{});var bm=r(Bn);Bd=n(bm,"AutoModel"),bm.forEach(o),Md=n(pe,` class. If you want to export a model for another task,
just provide a different feature to the `),Mn=l(pe,"CODE",{});var km=r(Mn);Rd=n(km,"task"),km.forEach(o),Fd=n(pe,` argument when you initialize the ONNX
configuration. For example, if we wished to export DistilBERT with a sequence
classification head, we could use:`),pe.forEach(o),il=f(t),C(Nt.$$.fragment,t),pl=f(t),C(Ie.$$.fragment,t),fl=f(t),me=l(t,"H3",{class:!0});var Ul=r(me);Pe=l(Ul,"A",{id:!0,class:!0,href:!0});var ym=r(Pe);Rn=l(ym,"SPAN",{});var Om=r(Rn);C(jt.$$.fragment,Om),Om.forEach(o),ym.forEach(o),Sd=f(Ul),Fn=l(Ul,"SPAN",{});var Tm=r(Fn);zd=n(Tm,"Exporting the model"),Tm.forEach(o),Ul.forEach(o),dl=f(t),ae=l(t,"P",{});var $o=r(ae);Vd=n($o,`Once you have implemented the ONNX configuration, the next step is to export the model.
Here we can use the `),Sn=l($o,"CODE",{});var Nm=r(Sn);Hd=n(Nm,"export()"),Nm.forEach(o),Wd=n($o," function provided by the "),zn=l($o,"CODE",{});var jm=r(zn);Gd=n(jm,"transformers.onnx"),jm.forEach(o),Yd=n($o,` package.
This function expects the ONNX configuration, along with the base model and tokenizer,
and the path to save the exported file:`),$o.forEach(o),cl=f(t),C(Ct.$$.fragment,t),hl=f(t),S=l(t,"P",{});var U=r(S);Ud=n(U,"The "),Vn=l(U,"CODE",{});var Cm=r(Vn);Kd=n(Cm,"onnx_inputs"),Cm.forEach(o),Jd=n(U," and "),Hn=l(U,"CODE",{});var Dm=r(Hn);Qd=n(Dm,"onnx_outputs"),Dm.forEach(o),Zd=n(U," returned by the "),Wn=l(U,"CODE",{});var qm=r(Wn);ec=n(qm,"export()"),qm.forEach(o),tc=n(U,` function are lists of
the keys defined in the `),Gn=l(U,"CODE",{});var Lm=r(Gn);oc=n(Lm,"inputs"),Lm.forEach(o),sc=n(U," and "),Yn=l(U,"CODE",{});var Am=r(Yn);nc=n(Am,"outputs"),Am.forEach(o),ac=n(U,` properties of the configuration. Once the
model is exported, you can test that the model is well formed as follows:`),U.forEach(o),ul=f(t),C(Dt.$$.fragment,t),ml=f(t),C(Xe.$$.fragment,t),gl=f(t),ge=l(t,"H3",{class:!0});var Kl=r(ge);Be=l(Kl,"A",{id:!0,class:!0,href:!0});var Im=r(Be);Un=l(Im,"SPAN",{});var Pm=r(Un);C(qt.$$.fragment,Pm),Pm.forEach(o),Im.forEach(o),lc=f(Kl),Kn=l(Kl,"SPAN",{});var Xm=r(Kn);rc=n(Xm,"Validating the model outputs"),Xm.forEach(o),Kl.forEach(o),_l=f(t),le=l(t,"P",{});var wo=r(le);ic=n(wo,`The final step is to validate that the outputs from the base and exported model agree
within some absolute tolerance. Here we can use the `),Jn=l(wo,"CODE",{});var Bm=r(Jn);pc=n(Bm,"validate_model_outputs()"),Bm.forEach(o),fc=n(wo,` function
provided by the `),Qn=l(wo,"CODE",{});var Mm=r(Qn);dc=n(Mm,"transformers.onnx"),Mm.forEach(o),cc=n(wo," package as follows:"),wo.forEach(o),vl=f(t),C(Lt.$$.fragment,t),El=f(t),Me=l(t,"P",{});var Jl=r(Me);hc=n(Jl,"This function uses the "),fo=l(Jl,"A",{href:!0});var Rm=r(fo);uc=n(Rm,"generate_dummy_inputs()"),Rm.forEach(o),mc=n(Jl,` method to
generate inputs for the base and exported model, and the absolute tolerance can be
defined in the configuration. We generally find numerical agreement in the 1e-6 to 1e-4
range, although anything smaller than 1e-3 is likely to be OK.`),Jl.forEach(o),$l=f(t),_e=l(t,"H2",{class:!0});var Ql=r(_e);Re=l(Ql,"A",{id:!0,class:!0,href:!0});var Fm=r(Re);Zn=l(Fm,"SPAN",{});var Sm=r(Zn);C(At.$$.fragment,Sm),Sm.forEach(o),Fm.forEach(o),gc=f(Ql),ea=l(Ql,"SPAN",{});var zm=r(ea);_c=n(zm,"Contributing a new configuration to \u{1F917} Transformers"),zm.forEach(o),Ql.forEach(o),wl=f(t),co=l(t,"P",{});var Vm=r(co);vc=n(Vm,`We are looking to expand the set of ready-made configurations and welcome contributions
from the community! If you would like to contribute your addition to the library, you
will need to:`),Vm.forEach(o),xl=f(t),re=l(t,"UL",{});var xo=r(re);It=l(xo,"LI",{});var Zl=r(It);Ec=n(Zl,"Implement the ONNX configuration in the corresponding "),ta=l(Zl,"CODE",{});var Hm=r(ta);$c=n(Hm,"configuration_<model_name>.py"),Hm.forEach(o),wc=n(Zl,`
file`),Zl.forEach(o),xc=f(xo),ho=l(xo,"LI",{});var Ac=r(ho);bc=n(Ac,`Include the model architecture and corresponding features in
`),oa=l(Ac,"CODE",{});var Wm=r(oa);kc=n(Wm,"~onnx.features.FeatureManager"),Wm.forEach(o),Ac.forEach(o),yc=f(xo),uo=l(xo,"LI",{});var Ic=r(uo);Oc=n(Ic,"Add your model architecture to the tests in "),sa=l(Ic,"CODE",{});var Gm=r(sa);Tc=n(Gm,"test_onnx_v2.py"),Gm.forEach(o),Ic.forEach(o),xo.forEach(o),bl=f(t),Fe=l(t,"P",{});var er=r(Fe);Nc=n(er,"Check out how the configuration for "),Pt=l(er,"A",{href:!0,rel:!0});var Ym=r(Pt);jc=n(Ym,`IBERT was
contributed`),Ym.forEach(o),Cc=n(er,` to get an
idea of what\u2019s involved.`),er.forEach(o),this.h()},h(){v(c,"name","hf:doc:metadata"),v(c,"content",JSON.stringify(mg)),v(E,"id","export-to-onnx"),v(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(E,"href","#export-to-onnx"),v(m,"class","relative group"),v(O,"href","http://onnx.ai"),v(O,"rel","nofollow"),v(fe,"href","main_classes/onnx"),v($e,"id","exporting-a-model-to-onnx"),v($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v($e,"href","#exporting-a-model-to-onnx"),v(de,"class","relative group"),v(tt,"href","https://onnx.ai/supported-tools.html#deployModel"),v(tt,"rel","nofollow"),v(ot,"href","https://onnxruntime.ai/"),v(ot,"rel","nofollow"),v(at,"href","https://huggingface.co/keras-io"),v(at,"rel","nofollow"),v(ye,"id","selecting-features-for-different-model-tasks"),v(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(ye,"href","#selecting-features-for-different-model-tasks"),v(ce,"class","relative group"),v(Kt,"href","/docs/transformers/v4.24.0/en/main_classes/onnx#transformers.onnx.FeaturesManager"),v(Ce,"id","exporting-a-model-for-an-unsupported-architecture"),v(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ce,"href","#exporting-a-model-for-an-unsupported-architecture"),v(he,"class","relative group"),v(De,"id","implementing-a-custom-onnx-configuration"),v(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(De,"href","#implementing-a-custom-onnx-configuration"),v(ue,"class","relative group"),v(oo,"href","/docs/transformers/v4.24.0/en/main_classes/onnx#transformers.onnx.OnnxConfig"),v(no,"href","/docs/transformers/v4.24.0/en/main_classes/onnx#transformers.onnx.OnnxConfigWithPast"),v(lo,"href","/docs/transformers/v4.24.0/en/main_classes/onnx#transformers.onnx.OnnxSeq2SeqConfigWithPast"),v(Pe,"id","exporting-the-model"),v(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Pe,"href","#exporting-the-model"),v(me,"class","relative group"),v(Be,"id","validating-the-model-outputs"),v(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Be,"href","#validating-the-model-outputs"),v(ge,"class","relative group"),v(fo,"href","/docs/transformers/v4.24.0/en/main_classes/onnx#transformers.onnx.OnnxConfig.generate_dummy_inputs"),v(Re,"id","contributing-a-new-configuration-to-transformers"),v(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Re,"href","#contributing-a-new-configuration-to-transformers"),v(_e,"class","relative group"),v(Pt,"href","https://github.com/huggingface/transformers/pull/14868/files"),v(Pt,"rel","nofollow")},m(t,i){e(document.head,c),d(t,$,i),d(t,m,i),e(m,E),e(E,w),D(_,w,null),e(m,x),e(m,b),e(b,k),d(t,T,i),d(t,I,i),e(I,y),e(I,O),e(O,g),e(I,N),d(t,M,i),D(R,t,i),d(t,Q,i),d(t,W,i),e(W,He),e(W,K),e(K,We),e(W,Ge),d(t,Z,i),d(t,P,i),e(P,Ft),d(t,Ye,i),d(t,J,i),e(J,St),e(J,fe),e(fe,ve),e(ve,zt),e(J,tr),d(t,pa,i),d(t,Vt,i),e(Vt,or),d(t,fa,i),d(t,h,i),e(h,bo),e(bo,sr),e(h,nr),e(h,ko),e(ko,ar),e(h,lr),e(h,yo),e(yo,rr),e(h,ir),e(h,Oo),e(Oo,pr),e(h,fr),e(h,To),e(To,dr),e(h,cr),e(h,No),e(No,hr),e(h,ur),e(h,jo),e(jo,mr),e(h,gr),e(h,Co),e(Co,_r),e(h,vr),e(h,Do),e(Do,Er),e(h,$r),e(h,qo),e(qo,wr),e(h,xr),e(h,Lo),e(Lo,br),e(h,kr),e(h,Ao),e(Ao,yr),e(h,Or),e(h,Io),e(Io,Tr),e(h,Nr),e(h,Po),e(Po,jr),e(h,Cr),e(h,Xo),e(Xo,Dr),e(h,qr),e(h,Bo),e(Bo,Lr),e(h,Ar),e(h,Mo),e(Mo,Ir),e(h,Pr),e(h,Ro),e(Ro,Xr),e(h,Br),e(h,Fo),e(Fo,Mr),e(h,Rr),e(h,So),e(So,Fr),e(h,Sr),e(h,zo),e(zo,zr),e(h,Vr),e(h,Vo),e(Vo,Hr),e(h,Wr),e(h,Ho),e(Ho,Gr),e(h,Yr),e(h,Wo),e(Wo,Ur),e(h,Kr),e(h,Go),e(Go,Jr),e(h,Qr),e(h,Yo),e(Yo,Zr),e(h,ei),e(h,Uo),e(Uo,ti),e(h,oi),e(h,Ko),e(Ko,si),e(h,ni),e(h,Jo),e(Jo,ai),e(h,li),e(h,Qo),e(Qo,ri),e(h,ii),e(h,Zo),e(Zo,pi),e(h,fi),e(h,es),e(es,di),e(h,ci),e(h,ts),e(ts,hi),e(h,ui),e(h,os),e(os,mi),e(h,gi),e(h,ss),e(ss,_i),e(h,vi),e(h,ns),e(ns,Ei),e(h,$i),e(h,as),e(as,wi),e(h,xi),e(h,ls),e(ls,bi),e(h,ki),e(h,rs),e(rs,yi),e(h,Oi),e(h,is),e(is,Ti),e(h,Ni),e(h,ps),e(ps,ji),e(h,Ci),e(h,fs),e(fs,Di),e(h,qi),e(h,ds),e(ds,Li),e(h,Ai),e(h,cs),e(cs,Ii),e(h,Pi),e(h,hs),e(hs,Xi),e(h,Bi),e(h,us),e(us,Mi),e(h,Ri),e(h,ms),e(ms,Fi),e(h,Si),e(h,gs),e(gs,zi),e(h,Vi),e(h,_s),e(_s,Hi),e(h,Wi),e(h,vs),e(vs,Gi),e(h,Yi),e(h,Es),e(Es,Ui),e(h,Ki),e(h,$s),e($s,Ji),e(h,Qi),e(h,ws),e(ws,Zi),e(h,ep),e(h,xs),e(xs,tp),e(h,op),e(h,bs),e(bs,sp),e(h,np),e(h,ks),e(ks,ap),e(h,lp),e(h,ys),e(ys,rp),e(h,ip),e(h,Os),e(Os,pp),e(h,fp),e(h,Ts),e(Ts,dp),d(t,da,i),d(t,Ht,i),e(Ht,cp),d(t,ca,i),d(t,Ee,i),e(Ee,Ue),e(Ue,hp),e(Ue,Ns),e(Ns,up),e(Ue,mp),e(Ee,gp),e(Ee,js),e(js,_p),d(t,ha,i),d(t,de,i),e(de,$e),e($e,Cs),D(Ke,Cs,null),e(de,vp),e(de,Ds),e(Ds,Ep),d(t,ua,i),d(t,Wt,i),e(Wt,$p),d(t,ma,i),D(Je,t,i),d(t,ga,i),d(t,we,i),e(we,wp),e(we,qs),e(qs,xp),e(we,bp),d(t,_a,i),D(Qe,t,i),d(t,va,i),d(t,Gt,i),e(Gt,kp),d(t,Ea,i),D(Ze,t,i),d(t,$a,i),d(t,Yt,i),e(Yt,yp),d(t,wa,i),D(et,t,i),d(t,xa,i),d(t,ee,i),e(ee,Op),e(ee,Ls),e(Ls,Tp),e(ee,Np),e(ee,As),e(As,jp),e(ee,Cp),d(t,ba,i),d(t,G,i),e(G,Dp),e(G,Is),e(Is,qp),e(G,Lp),e(G,tt),e(tt,Ap),e(G,Ip),e(G,ot),e(ot,Pp),e(G,Xp),d(t,ka,i),D(st,t,i),d(t,ya,i),d(t,xe,i),e(xe,Bp),e(xe,Ps),e(Ps,Mp),e(xe,Rp),d(t,Oa,i),D(nt,t,i),d(t,Ta,i),d(t,be,i),e(be,Fp),e(be,at),e(at,Sp),e(be,zp),d(t,Na,i),D(lt,t,i),d(t,ja,i),d(t,Ut,i),e(Ut,Vp),d(t,Ca,i),D(ke,t,i),d(t,Da,i),d(t,ce,i),e(ce,ye),e(ye,Xs),D(rt,Xs,null),e(ce,Hp),e(ce,Bs),e(Bs,Wp),d(t,qa,i),d(t,te,i),e(te,Gp),e(te,Ms),e(Ms,Yp),e(te,Up),e(te,Rs),e(Rs,Kp),e(te,Jp),d(t,La,i),d(t,Oe,i),e(Oe,Fs),e(Fs,it),e(it,Ss),e(Ss,Qp),e(it,Zp),e(it,zs),e(zs,ef),e(Oe,tf),e(Oe,F),e(F,pt),e(pt,ft),e(ft,Vs),e(Vs,of),e(ft,sf),e(ft,Hs),e(Hs,nf),e(pt,af),e(pt,Ws),e(Ws,Gs),e(Gs,lf),e(F,rf),e(F,dt),e(dt,ct),e(ct,Ys),e(Ys,pf),e(ct,ff),e(ct,Us),e(Us,df),e(dt,cf),e(dt,Ks),e(Ks,Js),e(Js,hf),e(F,uf),e(F,ht),e(ht,Qs),e(Qs,Zs),e(Zs,mf),e(ht,gf),e(ht,en),e(en,tn),e(tn,_f),e(F,vf),e(F,ut),e(ut,on),e(on,sn),e(sn,Ef),e(ut,$f),e(ut,nn),e(nn,an),e(an,wf),e(F,xf),e(F,mt),e(mt,gt),e(gt,ln),e(ln,bf),e(gt,kf),e(gt,rn),e(rn,yf),e(mt,Of),e(mt,pn),e(pn,fn),e(fn,Tf),e(F,Nf),e(F,_t),e(_t,dn),e(dn,cn),e(cn,jf),e(_t,Cf),e(_t,hn),e(hn,un),e(un,Df),e(F,qf),e(F,vt),e(vt,mn),e(mn,gn),e(gn,Lf),e(vt,Af),e(vt,_n),e(_n,vn),e(vn,If),d(t,Aa,i),d(t,Te,i),e(Te,Pf),e(Te,Kt),e(Kt,Xf),e(Te,Bf),d(t,Ia,i),D(Et,t,i),d(t,Pa,i),d(t,oe,i),e(oe,Mf),e(oe,En),e(En,Rf),e(oe,Ff),e(oe,$n),e($n,Sf),e(oe,zf),d(t,Xa,i),D($t,t,i),d(t,Ba,i),d(t,Jt,i),e(Jt,Vf),d(t,Ma,i),D(wt,t,i),d(t,Ra,i),d(t,Y,i),e(Y,Hf),e(Y,wn),e(wn,Wf),e(Y,Gf),e(Y,xn),e(xn,Yf),e(Y,Uf),e(Y,bn),e(bn,Kf),e(Y,Jf),d(t,Fa,i),D(Ne,t,i),d(t,Sa,i),D(je,t,i),d(t,za,i),d(t,he,i),e(he,Ce),e(Ce,kn),D(xt,kn,null),e(he,Qf),e(he,yn),e(yn,Zf),d(t,Va,i),d(t,Qt,i),e(Qt,ed),d(t,Ha,i),d(t,se,i),e(se,On),e(On,td),e(se,od),e(se,Tn),e(Tn,sd),e(se,nd),e(se,Nn),e(Nn,ad),d(t,Wa,i),d(t,Zt,i),e(Zt,ld),d(t,Ga,i),d(t,ue,i),e(ue,De),e(De,jn),D(bt,jn,null),e(ue,rd),e(ue,Cn),e(Cn,id),d(t,Ya,i),d(t,eo,i),e(eo,pd),d(t,Ua,i),d(t,ne,i),e(ne,to),e(to,fd),e(to,oo),e(oo,dd),e(ne,cd),e(ne,so),e(so,hd),e(so,no),e(no,ud),e(ne,md),e(ne,ao),e(ao,gd),e(ao,lo),e(lo,_d),d(t,Ka,i),D(qe,t,i),d(t,Ja,i),d(t,Le,i),e(Le,vd),e(Le,Dn),e(Dn,Ed),e(Le,$d),d(t,Qa,i),D(kt,t,i),d(t,Za,i),d(t,z,i),e(z,wd),e(z,qn),e(qn,xd),e(z,bd),e(z,Ln),e(Ln,kd),e(z,yd),e(z,An),e(An,Od),e(z,Td),e(z,In),e(In,Nd),e(z,jd),d(t,el,i),D(Ae,t,i),d(t,tl,i),d(t,ro,i),e(ro,Cd),d(t,ol,i),D(yt,t,i),d(t,sl,i),d(t,io,i),e(io,Dd),d(t,nl,i),D(Ot,t,i),d(t,al,i),d(t,po,i),e(po,qd),d(t,ll,i),D(Tt,t,i),d(t,rl,i),d(t,V,i),e(V,Ld),e(V,Pn),e(Pn,Ad),e(V,Id),e(V,Xn),e(Xn,Pd),e(V,Xd),e(V,Bn),e(Bn,Bd),e(V,Md),e(V,Mn),e(Mn,Rd),e(V,Fd),d(t,il,i),D(Nt,t,i),d(t,pl,i),D(Ie,t,i),d(t,fl,i),d(t,me,i),e(me,Pe),e(Pe,Rn),D(jt,Rn,null),e(me,Sd),e(me,Fn),e(Fn,zd),d(t,dl,i),d(t,ae,i),e(ae,Vd),e(ae,Sn),e(Sn,Hd),e(ae,Wd),e(ae,zn),e(zn,Gd),e(ae,Yd),d(t,cl,i),D(Ct,t,i),d(t,hl,i),d(t,S,i),e(S,Ud),e(S,Vn),e(Vn,Kd),e(S,Jd),e(S,Hn),e(Hn,Qd),e(S,Zd),e(S,Wn),e(Wn,ec),e(S,tc),e(S,Gn),e(Gn,oc),e(S,sc),e(S,Yn),e(Yn,nc),e(S,ac),d(t,ul,i),D(Dt,t,i),d(t,ml,i),D(Xe,t,i),d(t,gl,i),d(t,ge,i),e(ge,Be),e(Be,Un),D(qt,Un,null),e(ge,lc),e(ge,Kn),e(Kn,rc),d(t,_l,i),d(t,le,i),e(le,ic),e(le,Jn),e(Jn,pc),e(le,fc),e(le,Qn),e(Qn,dc),e(le,cc),d(t,vl,i),D(Lt,t,i),d(t,El,i),d(t,Me,i),e(Me,hc),e(Me,fo),e(fo,uc),e(Me,mc),d(t,$l,i),d(t,_e,i),e(_e,Re),e(Re,Zn),D(At,Zn,null),e(_e,gc),e(_e,ea),e(ea,_c),d(t,wl,i),d(t,co,i),e(co,vc),d(t,xl,i),d(t,re,i),e(re,It),e(It,Ec),e(It,ta),e(ta,$c),e(It,wc),e(re,xc),e(re,ho),e(ho,bc),e(ho,oa),e(oa,kc),e(re,yc),e(re,uo),e(uo,Oc),e(uo,sa),e(sa,Tc),d(t,bl,i),d(t,Fe,i),e(Fe,Nc),e(Fe,Pt),e(Pt,jc),e(Fe,Cc),kl=!0},p(t,[i]){const Xt={};i&2&&(Xt.$$scope={dirty:i,ctx:t}),R.$set(Xt);const na={};i&2&&(na.$$scope={dirty:i,ctx:t}),ke.$set(na);const aa={};i&2&&(aa.$$scope={dirty:i,ctx:t}),Ne.$set(aa);const la={};i&2&&(la.$$scope={dirty:i,ctx:t}),je.$set(la);const Bt={};i&2&&(Bt.$$scope={dirty:i,ctx:t}),qe.$set(Bt);const ra={};i&2&&(ra.$$scope={dirty:i,ctx:t}),Ae.$set(ra);const Mt={};i&2&&(Mt.$$scope={dirty:i,ctx:t}),Ie.$set(Mt);const ia={};i&2&&(ia.$$scope={dirty:i,ctx:t}),Xe.$set(ia)},i(t){kl||(q(_.$$.fragment,t),q(R.$$.fragment,t),q(Ke.$$.fragment,t),q(Je.$$.fragment,t),q(Qe.$$.fragment,t),q(Ze.$$.fragment,t),q(et.$$.fragment,t),q(st.$$.fragment,t),q(nt.$$.fragment,t),q(lt.$$.fragment,t),q(ke.$$.fragment,t),q(rt.$$.fragment,t),q(Et.$$.fragment,t),q($t.$$.fragment,t),q(wt.$$.fragment,t),q(Ne.$$.fragment,t),q(je.$$.fragment,t),q(xt.$$.fragment,t),q(bt.$$.fragment,t),q(qe.$$.fragment,t),q(kt.$$.fragment,t),q(Ae.$$.fragment,t),q(yt.$$.fragment,t),q(Ot.$$.fragment,t),q(Tt.$$.fragment,t),q(Nt.$$.fragment,t),q(Ie.$$.fragment,t),q(jt.$$.fragment,t),q(Ct.$$.fragment,t),q(Dt.$$.fragment,t),q(Xe.$$.fragment,t),q(qt.$$.fragment,t),q(Lt.$$.fragment,t),q(At.$$.fragment,t),kl=!0)},o(t){L(_.$$.fragment,t),L(R.$$.fragment,t),L(Ke.$$.fragment,t),L(Je.$$.fragment,t),L(Qe.$$.fragment,t),L(Ze.$$.fragment,t),L(et.$$.fragment,t),L(st.$$.fragment,t),L(nt.$$.fragment,t),L(lt.$$.fragment,t),L(ke.$$.fragment,t),L(rt.$$.fragment,t),L(Et.$$.fragment,t),L($t.$$.fragment,t),L(wt.$$.fragment,t),L(Ne.$$.fragment,t),L(je.$$.fragment,t),L(xt.$$.fragment,t),L(bt.$$.fragment,t),L(qe.$$.fragment,t),L(kt.$$.fragment,t),L(Ae.$$.fragment,t),L(yt.$$.fragment,t),L(Ot.$$.fragment,t),L(Tt.$$.fragment,t),L(Nt.$$.fragment,t),L(Ie.$$.fragment,t),L(jt.$$.fragment,t),L(Ct.$$.fragment,t),L(Dt.$$.fragment,t),L(Xe.$$.fragment,t),L(qt.$$.fragment,t),L(Lt.$$.fragment,t),L(At.$$.fragment,t),kl=!1},d(t){o(c),t&&o($),t&&o(m),A(_),t&&o(T),t&&o(I),t&&o(M),A(R,t),t&&o(Q),t&&o(W),t&&o(Z),t&&o(P),t&&o(Ye),t&&o(J),t&&o(pa),t&&o(Vt),t&&o(fa),t&&o(h),t&&o(da),t&&o(Ht),t&&o(ca),t&&o(Ee),t&&o(ha),t&&o(de),A(Ke),t&&o(ua),t&&o(Wt),t&&o(ma),A(Je,t),t&&o(ga),t&&o(we),t&&o(_a),A(Qe,t),t&&o(va),t&&o(Gt),t&&o(Ea),A(Ze,t),t&&o($a),t&&o(Yt),t&&o(wa),A(et,t),t&&o(xa),t&&o(ee),t&&o(ba),t&&o(G),t&&o(ka),A(st,t),t&&o(ya),t&&o(xe),t&&o(Oa),A(nt,t),t&&o(Ta),t&&o(be),t&&o(Na),A(lt,t),t&&o(ja),t&&o(Ut),t&&o(Ca),A(ke,t),t&&o(Da),t&&o(ce),A(rt),t&&o(qa),t&&o(te),t&&o(La),t&&o(Oe),t&&o(Aa),t&&o(Te),t&&o(Ia),A(Et,t),t&&o(Pa),t&&o(oe),t&&o(Xa),A($t,t),t&&o(Ba),t&&o(Jt),t&&o(Ma),A(wt,t),t&&o(Ra),t&&o(Y),t&&o(Fa),A(Ne,t),t&&o(Sa),A(je,t),t&&o(za),t&&o(he),A(xt),t&&o(Va),t&&o(Qt),t&&o(Ha),t&&o(se),t&&o(Wa),t&&o(Zt),t&&o(Ga),t&&o(ue),A(bt),t&&o(Ya),t&&o(eo),t&&o(Ua),t&&o(ne),t&&o(Ka),A(qe,t),t&&o(Ja),t&&o(Le),t&&o(Qa),A(kt,t),t&&o(Za),t&&o(z),t&&o(el),A(Ae,t),t&&o(tl),t&&o(ro),t&&o(ol),A(yt,t),t&&o(sl),t&&o(io),t&&o(nl),A(Ot,t),t&&o(al),t&&o(po),t&&o(ll),A(Tt,t),t&&o(rl),t&&o(V),t&&o(il),A(Nt,t),t&&o(pl),A(Ie,t),t&&o(fl),t&&o(me),A(jt),t&&o(dl),t&&o(ae),t&&o(cl),A(Ct,t),t&&o(hl),t&&o(S),t&&o(ul),A(Dt,t),t&&o(ml),A(Xe,t),t&&o(gl),t&&o(ge),A(qt),t&&o(_l),t&&o(le),t&&o(vl),A(Lt,t),t&&o(El),t&&o(Me),t&&o($l),t&&o(_e),A(At),t&&o(wl),t&&o(co),t&&o(xl),t&&o(re),t&&o(bl),t&&o(Fe)}}}const mg={local:"export-to-onnx",sections:[{local:"exporting-a-model-to-onnx",title:"Exporting a model to ONNX"},{local:"selecting-features-for-different-model-tasks",title:"Selecting features for different model tasks"},{local:"exporting-a-model-for-an-unsupported-architecture",sections:[{local:"implementing-a-custom-onnx-configuration",title:"Implementing a custom ONNX configuration"},{local:"exporting-the-model",title:"Exporting the model"},{local:"validating-the-model-outputs",title:"Validating the model outputs"}],title:"Exporting a model for an unsupported architecture"},{local:"contributing-a-new-configuration-to-transformers",title:"Contributing a new configuration to \u{1F917} Transformers"}],title:"Export to ONNX"};function gg(X){return tg(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class xg extends Jm{constructor(c){super();Qm(this,c,gg,ug,Zm,{})}}export{xg as default,mg as metadata};
