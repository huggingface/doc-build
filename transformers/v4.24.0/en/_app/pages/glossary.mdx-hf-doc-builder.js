import{S as mp,i as bp,s as _p,e as o,k as p,w as m,t as n,M as gp,c as l,d as t,m as d,a as r,x as b,h as a,b as c,G as s,g as h,y as _,L as vp,q as g,o as v,B as k,v as kp}from"../chunks/vendor-hf-doc-builder.js";import{Y as ii}from"../chunks/Youtube-hf-doc-builder.js";import{I as C}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as E}from"../chunks/CodeBlock-hf-doc-builder.js";function wp(hi){let D,Qt,M,Y,Ss,ve,Da,Fs,Ma,Jt,L,Q,Ns,ke,La,Rs,Ba,Kt,u,Os,Sa,Fa,Hs,Na,Ra,Gs,Oa,Ha,Ws,Ga,Wa,Us,Ua,Va,Vs,Xa,Ya,Xs,Qa,Ja,Ys,Ka,Za,Qs,eo,so,Js,to,no,Ks,ao,oo,Zs,lo,ro,B,io,Je,ho,po,Ke,co,uo,fo,et,mo,bo,st,_o,Zt,S,J,tt,we,go,nt,vo,en,Ze,ko,sn,F,K,at,ye,wo,ot,yo,tn,Z,$o,lt,Eo,jo,nn,$e,an,ee,qo,Ee,To,zo,on,je,ln,es,xo,rn,qe,hn,ss,Po,pn,Te,dn,se,Ao,ze,Io,Co,cn,xe,un,ts,Do,fn,Pe,mn,ns,Mo,bn,as,Lo,_n,Ae,gn,os,Bo,vn,Ie,kn,te,So,ls,Fo,No,wn,N,ne,rt,Ce,Ro,it,Oo,yn,rs,Ho,$n,De,En,is,Go,jn,hs,Wo,qn,Me,Tn,ps,Uo,zn,Le,xn,ds,Vo,Pn,cs,Xo,An,Be,In,us,Yo,Cn,Se,Dn,q,Qo,fs,Jo,Ko,ht,Zo,el,pt,sl,tl,Mn,Fe,Ln,R,ae,dt,Ne,nl,ct,al,Bn,ms,ol,Sn,Re,Fn,P,ll,ut,rl,il,ft,hl,pl,Nn,Oe,Rn,oe,dl,mt,cl,ul,On,He,Hn,bs,fl,Gn,Ge,Wn,_s,ml,Un,gs,bl,Vn,We,Xn,A,_l,bt,gl,vl,_t,kl,wl,Yn,I,yl,vs,$l,El,gt,jl,ql,Qn,O,le,vt,Ue,Tl,kt,zl,Jn,re,xl,wt,Pl,Al,Kn,ie,Il,yt,Cl,Dl,Zn,he,Ml,$t,Ll,Bl,ea,H,pe,Et,Ve,Sl,jt,Fl,sa,ks,Nl,ta,ws,Rl,na,T,G,Ol,ys,Hl,Gl,qt,Wl,Ul,Vl,W,Xl,$s,Yl,Ql,Tt,Jl,Kl,Zl,U,er,Es,sr,tr,zt,nr,ar,or,$,lr,js,rr,ir,qs,hr,pr,xt,dr,cr,Pt,ur,fr,At,mr,br,It,_r,gr,aa,de,vr,Ts,kr,wr,oa,V,ce,Ct,Xe,yr,Dt,$r,la,zs,Er,ra,z,jr,Mt,qr,Tr,Lt,zr,xr,Bt,Pr,Ar,ia,xs,Ir,ha,X,ue,St,Ye,Cr,Ft,Dr,pa,fe,Mr,Nt,Lr,Br,da,w,Sr,Rt,Fr,Nr,Ot,Rr,Or,Qe,Hr,Gr,Ht,Wr,Ur,Gt,Vr,Xr,Wt,Yr,Qr,Ut,Jr,Kr,Vt,Zr,ei,ca,x,si,Ps,ti,ni,Xt,ai,oi,Yt,li,ri,ua;return ve=new C({}),ke=new C({}),we=new C({}),ye=new C({}),$e=new ii({props:{id:"VFp38yj8h3A"}}),je=new E({props:{code:`from transformers import BertTokenizer

tokenizer = BertTokenizer.from_pretrained("bert-base-cased")

sequence = "A Titan RTX has 24GB of VRAM"`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>sequence = <span class="hljs-string">&quot;A Titan RTX has 24GB of VRAM&quot;</span>`}}),qe=new E({props:{code:"tokenized_sequence = tokenizer.tokenize(sequence)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tokenized_sequence = tokenizer.tokenize(sequence)'}}),Te=new E({props:{code:"print(tokenized_sequence)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tokenized_sequence)
[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;Titan&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;##T&#x27;</span>, <span class="hljs-string">&#x27;##X&#x27;</span>, <span class="hljs-string">&#x27;has&#x27;</span>, <span class="hljs-string">&#x27;24&#x27;</span>, <span class="hljs-string">&#x27;##GB&#x27;</span>, <span class="hljs-string">&#x27;of&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;##RA&#x27;</span>, <span class="hljs-string">&#x27;##M&#x27;</span>]`}}),xe=new E({props:{code:"inputs = tokenizer(sequence)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(sequence)'}}),Pe=new E({props:{code:`encoded_sequence = inputs["input_ids"]
print(encoded_sequence)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_sequence = inputs[<span class="hljs-string">&quot;input_ids&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoded_sequence)
[<span class="hljs-number">101</span>, <span class="hljs-number">138</span>, <span class="hljs-number">18696</span>, <span class="hljs-number">155</span>, <span class="hljs-number">1942</span>, <span class="hljs-number">3190</span>, <span class="hljs-number">1144</span>, <span class="hljs-number">1572</span>, <span class="hljs-number">13745</span>, <span class="hljs-number">1104</span>, <span class="hljs-number">159</span>, <span class="hljs-number">9664</span>, <span class="hljs-number">2107</span>, <span class="hljs-number">102</span>]`}}),Ae=new E({props:{code:"decoded_sequence = tokenizer.decode(encoded_sequence)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>decoded_sequence = tokenizer.decode(encoded_sequence)'}}),Ie=new E({props:{code:"print(decoded_sequence)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(decoded_sequence)
[CLS] A Titan RTX has 24GB of VRAM [SEP]`}}),Ce=new C({}),De=new ii({props:{id:"M6adb1j2jPI"}}),Me=new E({props:{code:`from transformers import BertTokenizer

tokenizer = BertTokenizer.from_pretrained("bert-base-cased")

sequence_a = "This is a short sequence."
sequence_b = "This is a rather long sequence. It is at least longer than the sequence A."

encoded_sequence_a = tokenizer(sequence_a)["input_ids"]
encoded_sequence_b = tokenizer(sequence_b)["input_ids"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_a = <span class="hljs-string">&quot;This is a short sequence.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_b = <span class="hljs-string">&quot;This is a rather long sequence. It is at least longer than the sequence A.&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_sequence_a = tokenizer(sequence_a)[<span class="hljs-string">&quot;input_ids&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_sequence_b = tokenizer(sequence_b)[<span class="hljs-string">&quot;input_ids&quot;</span>]`}}),Le=new E({props:{code:"len(encoded_sequence_a), len(encoded_sequence_b)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(encoded_sequence_a), <span class="hljs-built_in">len</span>(encoded_sequence_b)
(<span class="hljs-number">8</span>, <span class="hljs-number">19</span>)`}}),Be=new E({props:{code:"padded_sequences = tokenizer([sequence_a, sequence_b], padding=True)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>padded_sequences = tokenizer([sequence_a, sequence_b], padding=<span class="hljs-literal">True</span>)'}}),Se=new E({props:{code:'padded_sequences["input_ids"]',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>padded_sequences[<span class="hljs-string">&quot;input_ids&quot;</span>]
[[<span class="hljs-number">101</span>, <span class="hljs-number">1188</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">170</span>, <span class="hljs-number">1603</span>, <span class="hljs-number">4954</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">101</span>, <span class="hljs-number">1188</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">170</span>, <span class="hljs-number">1897</span>, <span class="hljs-number">1263</span>, <span class="hljs-number">4954</span>, <span class="hljs-number">119</span>, <span class="hljs-number">1135</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">1120</span>, <span class="hljs-number">1655</span>, <span class="hljs-number">2039</span>, <span class="hljs-number">1190</span>, <span class="hljs-number">1103</span>, <span class="hljs-number">4954</span>, <span class="hljs-number">138</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>]]`}}),Fe=new E({props:{code:'padded_sequences["attention_mask"]',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>padded_sequences[<span class="hljs-string">&quot;attention_mask&quot;</span>]
[[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]]`}}),Ne=new C({}),Re=new ii({props:{id:"0u3ioSwev3s"}}),Oe=new E({props:{code:"# [CLS] SEQUENCE_A [SEP] SEQUENCE_B [SEP]",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># [CLS] SEQUENCE_A [SEP] SEQUENCE_B [SEP]</span>'}}),He=new E({props:{code:`from transformers import BertTokenizer

tokenizer = BertTokenizer.from_pretrained("bert-base-cased")
sequence_a = "HuggingFace is based in NYC"
sequence_b = "Where is HuggingFace based?"

encoded_dict = tokenizer(sequence_a, sequence_b)
decoded = tokenizer.decode(encoded_dict["input_ids"])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_a = <span class="hljs-string">&quot;HuggingFace is based in NYC&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>sequence_b = <span class="hljs-string">&quot;Where is HuggingFace based?&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dict = tokenizer(sequence_a, sequence_b)
<span class="hljs-meta">&gt;&gt;&gt; </span>decoded = tokenizer.decode(encoded_dict[<span class="hljs-string">&quot;input_ids&quot;</span>])`}}),Ge=new E({props:{code:"print(decoded)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(decoded)
[CLS] HuggingFace <span class="hljs-keyword">is</span> based <span class="hljs-keyword">in</span> NYC [SEP] Where <span class="hljs-keyword">is</span> HuggingFace based? [SEP]`}}),We=new E({props:{code:'encoded_dict["token_type_ids"]',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dict[<span class="hljs-string">&quot;token_type_ids&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]`}}),Ue=new C({}),Ve=new C({}),Xe=new C({}),Ye=new C({}),{c(){D=o("meta"),Qt=p(),M=o("h1"),Y=o("a"),Ss=o("span"),m(ve.$$.fragment),Da=p(),Fs=o("span"),Ma=n("Glossary"),Jt=p(),L=o("h2"),Q=o("a"),Ns=o("span"),m(ke.$$.fragment),La=p(),Rs=o("span"),Ba=n("General terms"),Kt=p(),u=o("ul"),Os=o("li"),Sa=n("autoencoding models: see MLM"),Fa=p(),Hs=o("li"),Na=n("autoregressive models: see CLM"),Ra=p(),Gs=o("li"),Oa=n(`CLM: causal language modeling, a pretraining task where the model reads the texts in order and has to predict the
next word. It\u2019s usually done by reading the whole sentence but using a mask inside the model to hide the future
tokens at a certain timestep.`),Ha=p(),Ws=o("li"),Ga=n("deep learning: machine learning algorithms which uses neural networks with several layers."),Wa=p(),Us=o("li"),Ua=n(`MLM: masked language modeling, a pretraining task where the model sees a corrupted version of the texts, usually done
by masking some tokens randomly, and has to predict the original text.`),Va=p(),Vs=o("li"),Xa=n("multimodal: a task that combines texts with another kind of inputs (for instance images)."),Ya=p(),Xs=o("li"),Qa=n(`NLG: natural language generation, all tasks related to generating text (for instance talk with transformers,
translation).`),Ja=p(),Ys=o("li"),Ka=n("NLP: natural language processing, a generic way to say \u201Cdeal with texts\u201D."),Za=p(),Qs=o("li"),eo=n(`NLU: natural language understanding, all tasks related to understanding what is in a text (for instance classifying
the whole text, individual words).`),so=p(),Js=o("li"),to=n(`pretrained model: a model that has been pretrained on some data (for instance all of Wikipedia). Pretraining methods
involve a self-supervised objective, which can be reading the text and trying to predict the next word (see CLM) or
masking some words and trying to predict them (see MLM).`),no=p(),Ks=o("li"),ao=n("RNN: recurrent neural network, a type of model that uses a loop over a layer to process texts."),oo=p(),Zs=o("li"),lo=n("self-attention: each element of the input finds out which other elements of the input they should attend to."),ro=p(),B=o("li"),io=n(`seq2seq or sequence-to-sequence: models that generate a new sequence from an input, like translation models, or
summarization models (such as `),Je=o("a"),ho=n("Bart"),po=n(" or "),Ke=o("a"),co=n("T5"),uo=n(")."),fo=p(),et=o("li"),mo=n(`token: a part of a sentence, usually a word, but can also be a subword (non-common words are often split in subwords)
or a punctuation symbol.`),bo=p(),st=o("li"),_o=n("transformer: self-attention based deep learning model architecture."),Zt=p(),S=o("h2"),J=o("a"),tt=o("span"),m(we.$$.fragment),go=p(),nt=o("span"),vo=n("Model inputs"),en=p(),Ze=o("p"),ko=n(`Every model is different yet bears similarities with the others. Therefore most models use the same inputs, which are
detailed here alongside usage examples.`),sn=p(),F=o("h3"),K=o("a"),at=o("span"),m(ye.$$.fragment),wo=p(),ot=o("span"),yo=n("Input IDs"),tn=p(),Z=o("p"),$o=n("The input ids are often the only required parameters to be passed to the model as input. "),lt=o("em"),Eo=n(`They are token indices,
numerical representations of tokens building the sequences that will be used as input by the model`),jo=n("."),nn=p(),m($e.$$.fragment),an=p(),ee=o("p"),qo=n(`Each tokenizer works differently but the underlying mechanism remains the same. Here\u2019s an example using the BERT
tokenizer, which is a `),Ee=o("a"),To=n("WordPiece"),zo=n(" tokenizer:"),on=p(),m(je.$$.fragment),ln=p(),es=o("p"),xo=n("The tokenizer takes care of splitting the sequence into tokens available in the tokenizer vocabulary."),rn=p(),m(qe.$$.fragment),hn=p(),ss=o("p"),Po=n(`The tokens are either words or subwords. Here for instance, \u201CVRAM\u201D wasn\u2019t in the model vocabulary, so it\u2019s been split
in \u201CV\u201D, \u201CRA\u201D and \u201CM\u201D. To indicate those tokens are not separate words but parts of the same word, a double-hash prefix
is added for \u201CRA\u201D and \u201CM\u201D:`),pn=p(),m(Te.$$.fragment),dn=p(),se=o("p"),Ao=n(`These tokens can then be converted into IDs which are understandable by the model. This can be done by directly feeding
the sentence to the tokenizer, which leverages the Rust implementation of `),ze=o("a"),Io=n("\u{1F917} Tokenizers"),Co=n(" for peak performance."),cn=p(),m(xe.$$.fragment),un=p(),ts=o("p"),Do=n(`The tokenizer returns a dictionary with all the arguments necessary for its corresponding model to work properly. The
token indices are under the key \u201Cinput_ids\u201D:`),fn=p(),m(Pe.$$.fragment),mn=p(),ns=o("p"),Mo=n(`Note that the tokenizer automatically adds \u201Cspecial tokens\u201D (if the associated model relies on them) which are special
IDs the model sometimes uses.`),bn=p(),as=o("p"),Lo=n("If we decode the previous sequence of ids,"),_n=p(),m(Ae.$$.fragment),gn=p(),os=o("p"),Bo=n("we will see"),vn=p(),m(Ie.$$.fragment),kn=p(),te=o("p"),So=n("because this is the way a "),ls=o("a"),Fo=n("BertModel"),No=n(" is going to expect its inputs."),wn=p(),N=o("h3"),ne=o("a"),rt=o("span"),m(Ce.$$.fragment),Ro=p(),it=o("span"),Oo=n("Attention mask"),yn=p(),rs=o("p"),Ho=n("The attention mask is an optional argument used when batching sequences together."),$n=p(),m(De.$$.fragment),En=p(),is=o("p"),Go=n("This argument indicates to the model which tokens should be attended to, and which should not."),jn=p(),hs=o("p"),Wo=n("For example, consider these two sequences:"),qn=p(),m(Me.$$.fragment),Tn=p(),ps=o("p"),Uo=n("The encoded versions have different lengths:"),zn=p(),m(Le.$$.fragment),xn=p(),ds=o("p"),Vo=n(`Therefore, we can\u2019t put them together in the same tensor as-is. The first sequence needs to be padded up to the length
of the second one, or the second one needs to be truncated down to the length of the first one.`),Pn=p(),cs=o("p"),Xo=n(`In the first case, the list of IDs will be extended by the padding indices. We can pass a list to the tokenizer and ask
it to pad like this:`),An=p(),m(Be.$$.fragment),In=p(),us=o("p"),Yo=n("We can see that 0s have been added on the right of the first sentence to make it the same length as the second one:"),Cn=p(),m(Se.$$.fragment),Dn=p(),q=o("p"),Qo=n(`This can then be converted into a tensor in PyTorch or TensorFlow. The attention mask is a binary tensor indicating the
position of the padded indices so that the model does not attend to them. For the `),fs=o("a"),Jo=n("BertTokenizer"),Ko=n(`,
`),ht=o("code"),Zo=n("1"),el=n(" indicates a value that should be attended to, while "),pt=o("code"),sl=n("0"),tl=n(` indicates a padded value. This attention mask is
in the dictionary returned by the tokenizer under the key \u201Cattention_mask\u201D:`),Mn=p(),m(Fe.$$.fragment),Ln=p(),R=o("h3"),ae=o("a"),dt=o("span"),m(Ne.$$.fragment),nl=p(),ct=o("span"),al=n("Token Type IDs"),Bn=p(),ms=o("p"),ol=n("Some models\u2019 purpose is to do classification on pairs of sentences or question answering."),Sn=p(),m(Re.$$.fragment),Fn=p(),P=o("p"),ll=n(`These require two different sequences to be joined in a single \u201Cinput_ids\u201D entry, which usually is performed with the
help of special tokens, such as the classifier (`),ut=o("code"),rl=n("[CLS]"),il=n(") and separator ("),ft=o("code"),hl=n("[SEP]"),pl=n(`) tokens. For example, the BERT
model builds its two sequence input as such:`),Nn=p(),m(Oe.$$.fragment),Rn=p(),oe=o("p"),dl=n("We can use our tokenizer to automatically generate such a sentence by passing the two sequences to "),mt=o("code"),cl=n("tokenizer"),ul=n(` as two
arguments (and not a list, like before) like this:`),On=p(),m(He.$$.fragment),Hn=p(),bs=o("p"),fl=n("which will return:"),Gn=p(),m(Ge.$$.fragment),Wn=p(),_s=o("p"),ml=n(`This is enough for some models to understand where one sequence ends and where another begins. However, other models,
such as BERT, also deploy token type IDs (also called segment IDs). They are represented as a binary mask identifying
the two types of sequence in the model.`),Un=p(),gs=o("p"),bl=n("The tokenizer returns this mask as the \u201Ctoken_type_ids\u201D entry:"),Vn=p(),m(We.$$.fragment),Xn=p(),A=o("p"),_l=n("The first sequence, the \u201Ccontext\u201D used for the question, has all its tokens represented by a "),bt=o("code"),gl=n("0"),vl=n(`, whereas the
second sequence, corresponding to the \u201Cquestion\u201D, has all its tokens represented by a `),_t=o("code"),kl=n("1"),wl=n("."),Yn=p(),I=o("p"),yl=n("Some models, like "),vs=o("a"),$l=n("XLNetModel"),El=n(" use an additional token represented by a "),gt=o("code"),jl=n("2"),ql=n("."),Qn=p(),O=o("h3"),le=o("a"),vt=o("span"),m(Ue.$$.fragment),Tl=p(),kt=o("span"),zl=n("Position IDs"),Jn=p(),re=o("p"),xl=n(`Contrary to RNNs that have the position of each token embedded within them, transformers are unaware of the position of
each token. Therefore, the position IDs (`),wt=o("code"),Pl=n("position_ids"),Al=n(`) are used by the model to identify each token\u2019s position in
the list of tokens.`),Kn=p(),ie=o("p"),Il=n("They are an optional parameter. If no "),yt=o("code"),Cl=n("position_ids"),Dl=n(` are passed to the model, the IDs are automatically created as
absolute positional embeddings.`),Zn=p(),he=o("p"),Ml=n("Absolute positional embeddings are selected in the range "),$t=o("code"),Ll=n("[0, config.max_position_embeddings - 1]"),Bl=n(`. Some models use
other types of positional embeddings, such as sinusoidal position embeddings or relative position embeddings.`),ea=p(),H=o("h3"),pe=o("a"),Et=o("span"),m(Ve.$$.fragment),Sl=p(),jt=o("span"),Fl=n("Labels"),sa=p(),ks=o("p"),Nl=n(`The labels are an optional argument which can be passed in order for the model to compute the loss itself. These labels
should be the expected prediction of the model: it will use the standard loss in order to compute the loss between its
predictions and the expected value (the label).`),ta=p(),ws=o("p"),Rl=n("These labels are different according to the model head, for example:"),na=p(),T=o("ul"),G=o("li"),Ol=n("For sequence classification models (e.g., "),ys=o("a"),Hl=n("BertForSequenceClassification"),Gl=n(`), the model expects a
tensor of dimension `),qt=o("code"),Wl=n("(batch_size)"),Ul=n(` with each value of the batch corresponding to the expected label of the
entire sequence.`),Vl=p(),W=o("li"),Xl=n("For token classification models (e.g., "),$s=o("a"),Yl=n("BertForTokenClassification"),Ql=n(`), the model expects a tensor
of dimension `),Tt=o("code"),Jl=n("(batch_size, seq_length)"),Kl=n(` with each value corresponding to the expected label of each individual
token.`),Zl=p(),U=o("li"),er=n("For masked language modeling (e.g., "),Es=o("a"),sr=n("BertForMaskedLM"),tr=n(`), the model expects a tensor of dimension
`),zt=o("code"),nr=n("(batch_size, seq_length)"),ar=n(` with each value corresponding to the expected label of each individual token: the
labels being the token ID for the masked token, and values to be ignored for the rest (usually -100).`),or=p(),$=o("li"),lr=n("For sequence to sequence tasks,(e.g., "),js=o("a"),rr=n("BartForConditionalGeneration"),ir=n(`,
`),qs=o("a"),hr=n("MBartForConditionalGeneration"),pr=n("), the model expects a tensor of dimension "),xt=o("code"),dr=n("(batch_size, tgt_seq_length)"),cr=n(` with each value corresponding to the target sequences associated with each input sequence. During
training, both `),Pt=o("em"),ur=n("BART"),fr=n(" and "),At=o("em"),mr=n("T5"),br=n(" will make the appropriate "),It=o("em"),_r=n("decoder_input_ids"),gr=n(` and decoder attention masks internally.
They usually do not need to be supplied. This does not apply to models leveraging the Encoder-Decoder framework. See
the documentation of each model for more information on each specific model\u2019s labels.`),aa=p(),de=o("p"),vr=n("The base models (e.g., "),Ts=o("a"),kr=n("BertModel"),wr=n(`) do not accept labels, as these are the base transformer
models, simply outputting features.`),oa=p(),V=o("h3"),ce=o("a"),Ct=o("span"),m(Xe.$$.fragment),yr=p(),Dt=o("span"),$r=n("Decoder input IDs"),la=p(),zs=o("p"),Er=n(`This input is specific to encoder-decoder models, and contains the input IDs that will be fed to the decoder. These
inputs should be used for sequence to sequence tasks, such as translation or summarization, and are usually built in a
way specific to each model.`),ra=p(),z=o("p"),jr=n("Most encoder-decoder models (BART, T5) create their "),Mt=o("code"),qr=n("decoder_input_ids"),Tr=n(" on their own from the "),Lt=o("code"),zr=n("labels"),xr=n(`. In
such models, passing the `),Bt=o("code"),Pr=n("labels"),Ar=n(" is the preferred way to handle training."),ia=p(),xs=o("p"),Ir=n("Please check each model\u2019s docs to see how they handle these input IDs for sequence to sequence training."),ha=p(),X=o("h3"),ue=o("a"),St=o("span"),m(Ye.$$.fragment),Cr=p(),Ft=o("span"),Dr=n("Feed Forward Chunking"),pa=p(),fe=o("p"),Mr=n(`In each residual attention block in transformers the self-attention layer is usually followed by 2 feed forward layers.
The intermediate embedding size of the feed forward layers is often bigger than the hidden size of the model (e.g., for
`),Nt=o("code"),Lr=n("bert-base-uncased"),Br=n(")."),da=p(),w=o("p"),Sr=n("For an input of size "),Rt=o("code"),Fr=n("[batch_size, sequence_length]"),Nr=n(`, the memory required to store the intermediate feed forward
embeddings `),Ot=o("code"),Rr=n("[batch_size, sequence_length, config.intermediate_size]"),Or=n(` can account for a large fraction of the memory
use. The authors of `),Qe=o("a"),Hr=n("Reformer: The Efficient Transformer"),Gr=n(` noticed that since the
computation is independent of the `),Ht=o("code"),Wr=n("sequence_length"),Ur=n(` dimension, it is mathematically equivalent to compute the output
embeddings of both feed forward layers `),Gt=o("code"),Vr=n("[batch_size, config.hidden_size]_0, ..., [batch_size, config.hidden_size]_n"),Xr=n(`
individually and concat them afterward to `),Wt=o("code"),Yr=n("[batch_size, sequence_length, config.hidden_size]"),Qr=n(" with "),Ut=o("code"),Jr=n("n = sequence_length"),Kr=n(`, which trades increased computation time against reduced memory use, but yields a mathematically
`),Vt=o("strong"),Zr=n("equivalent"),ei=n(" result."),ca=p(),x=o("p"),si=n("For models employing the function "),Ps=o("a"),ti=n("apply_chunking_to_forward()"),ni=n(", the "),Xt=o("code"),ai=n("chunk_size"),oi=n(` defines the
number of output embeddings that are computed in parallel and thus defines the trade-off between memory and time
complexity. If `),Yt=o("code"),li=n("chunk_size"),ri=n(" is set to 0, no feed forward chunking is done."),this.h()},l(e){const i=gp('[data-svelte="svelte-1phssyn"]',document.head);D=l(i,"META",{name:!0,content:!0}),i.forEach(t),Qt=d(e),M=l(e,"H1",{class:!0});var fa=r(M);Y=l(fa,"A",{id:!0,class:!0,href:!0});var pi=r(Y);Ss=l(pi,"SPAN",{});var di=r(Ss);b(ve.$$.fragment,di),di.forEach(t),pi.forEach(t),Da=d(fa),Fs=l(fa,"SPAN",{});var ci=r(Fs);Ma=a(ci,"Glossary"),ci.forEach(t),fa.forEach(t),Jt=d(e),L=l(e,"H2",{class:!0});var ma=r(L);Q=l(ma,"A",{id:!0,class:!0,href:!0});var ui=r(Q);Ns=l(ui,"SPAN",{});var fi=r(Ns);b(ke.$$.fragment,fi),fi.forEach(t),ui.forEach(t),La=d(ma),Rs=l(ma,"SPAN",{});var mi=r(Rs);Ba=a(mi,"General terms"),mi.forEach(t),ma.forEach(t),Kt=d(e),u=l(e,"UL",{});var f=r(u);Os=l(f,"LI",{});var bi=r(Os);Sa=a(bi,"autoencoding models: see MLM"),bi.forEach(t),Fa=d(f),Hs=l(f,"LI",{});var _i=r(Hs);Na=a(_i,"autoregressive models: see CLM"),_i.forEach(t),Ra=d(f),Gs=l(f,"LI",{});var gi=r(Gs);Oa=a(gi,`CLM: causal language modeling, a pretraining task where the model reads the texts in order and has to predict the
next word. It\u2019s usually done by reading the whole sentence but using a mask inside the model to hide the future
tokens at a certain timestep.`),gi.forEach(t),Ha=d(f),Ws=l(f,"LI",{});var vi=r(Ws);Ga=a(vi,"deep learning: machine learning algorithms which uses neural networks with several layers."),vi.forEach(t),Wa=d(f),Us=l(f,"LI",{});var ki=r(Us);Ua=a(ki,`MLM: masked language modeling, a pretraining task where the model sees a corrupted version of the texts, usually done
by masking some tokens randomly, and has to predict the original text.`),ki.forEach(t),Va=d(f),Vs=l(f,"LI",{});var wi=r(Vs);Xa=a(wi,"multimodal: a task that combines texts with another kind of inputs (for instance images)."),wi.forEach(t),Ya=d(f),Xs=l(f,"LI",{});var yi=r(Xs);Qa=a(yi,`NLG: natural language generation, all tasks related to generating text (for instance talk with transformers,
translation).`),yi.forEach(t),Ja=d(f),Ys=l(f,"LI",{});var $i=r(Ys);Ka=a($i,"NLP: natural language processing, a generic way to say \u201Cdeal with texts\u201D."),$i.forEach(t),Za=d(f),Qs=l(f,"LI",{});var Ei=r(Qs);eo=a(Ei,`NLU: natural language understanding, all tasks related to understanding what is in a text (for instance classifying
the whole text, individual words).`),Ei.forEach(t),so=d(f),Js=l(f,"LI",{});var ji=r(Js);to=a(ji,`pretrained model: a model that has been pretrained on some data (for instance all of Wikipedia). Pretraining methods
involve a self-supervised objective, which can be reading the text and trying to predict the next word (see CLM) or
masking some words and trying to predict them (see MLM).`),ji.forEach(t),no=d(f),Ks=l(f,"LI",{});var qi=r(Ks);ao=a(qi,"RNN: recurrent neural network, a type of model that uses a loop over a layer to process texts."),qi.forEach(t),oo=d(f),Zs=l(f,"LI",{});var Ti=r(Zs);lo=a(Ti,"self-attention: each element of the input finds out which other elements of the input they should attend to."),Ti.forEach(t),ro=d(f),B=l(f,"LI",{});var As=r(B);io=a(As,`seq2seq or sequence-to-sequence: models that generate a new sequence from an input, like translation models, or
summarization models (such as `),Je=l(As,"A",{href:!0});var zi=r(Je);ho=a(zi,"Bart"),zi.forEach(t),po=a(As," or "),Ke=l(As,"A",{href:!0});var xi=r(Ke);co=a(xi,"T5"),xi.forEach(t),uo=a(As,")."),As.forEach(t),fo=d(f),et=l(f,"LI",{});var Pi=r(et);mo=a(Pi,`token: a part of a sentence, usually a word, but can also be a subword (non-common words are often split in subwords)
or a punctuation symbol.`),Pi.forEach(t),bo=d(f),st=l(f,"LI",{});var Ai=r(st);_o=a(Ai,"transformer: self-attention based deep learning model architecture."),Ai.forEach(t),f.forEach(t),Zt=d(e),S=l(e,"H2",{class:!0});var ba=r(S);J=l(ba,"A",{id:!0,class:!0,href:!0});var Ii=r(J);tt=l(Ii,"SPAN",{});var Ci=r(tt);b(we.$$.fragment,Ci),Ci.forEach(t),Ii.forEach(t),go=d(ba),nt=l(ba,"SPAN",{});var Di=r(nt);vo=a(Di,"Model inputs"),Di.forEach(t),ba.forEach(t),en=d(e),Ze=l(e,"P",{});var Mi=r(Ze);ko=a(Mi,`Every model is different yet bears similarities with the others. Therefore most models use the same inputs, which are
detailed here alongside usage examples.`),Mi.forEach(t),sn=d(e),F=l(e,"H3",{class:!0});var _a=r(F);K=l(_a,"A",{id:!0,class:!0,href:!0});var Li=r(K);at=l(Li,"SPAN",{});var Bi=r(at);b(ye.$$.fragment,Bi),Bi.forEach(t),Li.forEach(t),wo=d(_a),ot=l(_a,"SPAN",{});var Si=r(ot);yo=a(Si,"Input IDs"),Si.forEach(t),_a.forEach(t),tn=d(e),Z=l(e,"P",{});var ga=r(Z);$o=a(ga,"The input ids are often the only required parameters to be passed to the model as input. "),lt=l(ga,"EM",{});var Fi=r(lt);Eo=a(Fi,`They are token indices,
numerical representations of tokens building the sequences that will be used as input by the model`),Fi.forEach(t),jo=a(ga,"."),ga.forEach(t),nn=d(e),b($e.$$.fragment,e),an=d(e),ee=l(e,"P",{});var va=r(ee);qo=a(va,`Each tokenizer works differently but the underlying mechanism remains the same. Here\u2019s an example using the BERT
tokenizer, which is a `),Ee=l(va,"A",{href:!0,rel:!0});var Ni=r(Ee);To=a(Ni,"WordPiece"),Ni.forEach(t),zo=a(va," tokenizer:"),va.forEach(t),on=d(e),b(je.$$.fragment,e),ln=d(e),es=l(e,"P",{});var Ri=r(es);xo=a(Ri,"The tokenizer takes care of splitting the sequence into tokens available in the tokenizer vocabulary."),Ri.forEach(t),rn=d(e),b(qe.$$.fragment,e),hn=d(e),ss=l(e,"P",{});var Oi=r(ss);Po=a(Oi,`The tokens are either words or subwords. Here for instance, \u201CVRAM\u201D wasn\u2019t in the model vocabulary, so it\u2019s been split
in \u201CV\u201D, \u201CRA\u201D and \u201CM\u201D. To indicate those tokens are not separate words but parts of the same word, a double-hash prefix
is added for \u201CRA\u201D and \u201CM\u201D:`),Oi.forEach(t),pn=d(e),b(Te.$$.fragment,e),dn=d(e),se=l(e,"P",{});var ka=r(se);Ao=a(ka,`These tokens can then be converted into IDs which are understandable by the model. This can be done by directly feeding
the sentence to the tokenizer, which leverages the Rust implementation of `),ze=l(ka,"A",{href:!0,rel:!0});var Hi=r(ze);Io=a(Hi,"\u{1F917} Tokenizers"),Hi.forEach(t),Co=a(ka," for peak performance."),ka.forEach(t),cn=d(e),b(xe.$$.fragment,e),un=d(e),ts=l(e,"P",{});var Gi=r(ts);Do=a(Gi,`The tokenizer returns a dictionary with all the arguments necessary for its corresponding model to work properly. The
token indices are under the key \u201Cinput_ids\u201D:`),Gi.forEach(t),fn=d(e),b(Pe.$$.fragment,e),mn=d(e),ns=l(e,"P",{});var Wi=r(ns);Mo=a(Wi,`Note that the tokenizer automatically adds \u201Cspecial tokens\u201D (if the associated model relies on them) which are special
IDs the model sometimes uses.`),Wi.forEach(t),bn=d(e),as=l(e,"P",{});var Ui=r(as);Lo=a(Ui,"If we decode the previous sequence of ids,"),Ui.forEach(t),_n=d(e),b(Ae.$$.fragment,e),gn=d(e),os=l(e,"P",{});var Vi=r(os);Bo=a(Vi,"we will see"),Vi.forEach(t),vn=d(e),b(Ie.$$.fragment,e),kn=d(e),te=l(e,"P",{});var wa=r(te);So=a(wa,"because this is the way a "),ls=l(wa,"A",{href:!0});var Xi=r(ls);Fo=a(Xi,"BertModel"),Xi.forEach(t),No=a(wa," is going to expect its inputs."),wa.forEach(t),wn=d(e),N=l(e,"H3",{class:!0});var ya=r(N);ne=l(ya,"A",{id:!0,class:!0,href:!0});var Yi=r(ne);rt=l(Yi,"SPAN",{});var Qi=r(rt);b(Ce.$$.fragment,Qi),Qi.forEach(t),Yi.forEach(t),Ro=d(ya),it=l(ya,"SPAN",{});var Ji=r(it);Oo=a(Ji,"Attention mask"),Ji.forEach(t),ya.forEach(t),yn=d(e),rs=l(e,"P",{});var Ki=r(rs);Ho=a(Ki,"The attention mask is an optional argument used when batching sequences together."),Ki.forEach(t),$n=d(e),b(De.$$.fragment,e),En=d(e),is=l(e,"P",{});var Zi=r(is);Go=a(Zi,"This argument indicates to the model which tokens should be attended to, and which should not."),Zi.forEach(t),jn=d(e),hs=l(e,"P",{});var eh=r(hs);Wo=a(eh,"For example, consider these two sequences:"),eh.forEach(t),qn=d(e),b(Me.$$.fragment,e),Tn=d(e),ps=l(e,"P",{});var sh=r(ps);Uo=a(sh,"The encoded versions have different lengths:"),sh.forEach(t),zn=d(e),b(Le.$$.fragment,e),xn=d(e),ds=l(e,"P",{});var th=r(ds);Vo=a(th,`Therefore, we can\u2019t put them together in the same tensor as-is. The first sequence needs to be padded up to the length
of the second one, or the second one needs to be truncated down to the length of the first one.`),th.forEach(t),Pn=d(e),cs=l(e,"P",{});var nh=r(cs);Xo=a(nh,`In the first case, the list of IDs will be extended by the padding indices. We can pass a list to the tokenizer and ask
it to pad like this:`),nh.forEach(t),An=d(e),b(Be.$$.fragment,e),In=d(e),us=l(e,"P",{});var ah=r(us);Yo=a(ah,"We can see that 0s have been added on the right of the first sentence to make it the same length as the second one:"),ah.forEach(t),Cn=d(e),b(Se.$$.fragment,e),Dn=d(e),q=l(e,"P",{});var me=r(q);Qo=a(me,`This can then be converted into a tensor in PyTorch or TensorFlow. The attention mask is a binary tensor indicating the
position of the padded indices so that the model does not attend to them. For the `),fs=l(me,"A",{href:!0});var oh=r(fs);Jo=a(oh,"BertTokenizer"),oh.forEach(t),Ko=a(me,`,
`),ht=l(me,"CODE",{});var lh=r(ht);Zo=a(lh,"1"),lh.forEach(t),el=a(me," indicates a value that should be attended to, while "),pt=l(me,"CODE",{});var rh=r(pt);sl=a(rh,"0"),rh.forEach(t),tl=a(me,` indicates a padded value. This attention mask is
in the dictionary returned by the tokenizer under the key \u201Cattention_mask\u201D:`),me.forEach(t),Mn=d(e),b(Fe.$$.fragment,e),Ln=d(e),R=l(e,"H3",{class:!0});var $a=r(R);ae=l($a,"A",{id:!0,class:!0,href:!0});var ih=r(ae);dt=l(ih,"SPAN",{});var hh=r(dt);b(Ne.$$.fragment,hh),hh.forEach(t),ih.forEach(t),nl=d($a),ct=l($a,"SPAN",{});var ph=r(ct);al=a(ph,"Token Type IDs"),ph.forEach(t),$a.forEach(t),Bn=d(e),ms=l(e,"P",{});var dh=r(ms);ol=a(dh,"Some models\u2019 purpose is to do classification on pairs of sentences or question answering."),dh.forEach(t),Sn=d(e),b(Re.$$.fragment,e),Fn=d(e),P=l(e,"P",{});var Is=r(P);ll=a(Is,`These require two different sequences to be joined in a single \u201Cinput_ids\u201D entry, which usually is performed with the
help of special tokens, such as the classifier (`),ut=l(Is,"CODE",{});var ch=r(ut);rl=a(ch,"[CLS]"),ch.forEach(t),il=a(Is,") and separator ("),ft=l(Is,"CODE",{});var uh=r(ft);hl=a(uh,"[SEP]"),uh.forEach(t),pl=a(Is,`) tokens. For example, the BERT
model builds its two sequence input as such:`),Is.forEach(t),Nn=d(e),b(Oe.$$.fragment,e),Rn=d(e),oe=l(e,"P",{});var Ea=r(oe);dl=a(Ea,"We can use our tokenizer to automatically generate such a sentence by passing the two sequences to "),mt=l(Ea,"CODE",{});var fh=r(mt);cl=a(fh,"tokenizer"),fh.forEach(t),ul=a(Ea,` as two
arguments (and not a list, like before) like this:`),Ea.forEach(t),On=d(e),b(He.$$.fragment,e),Hn=d(e),bs=l(e,"P",{});var mh=r(bs);fl=a(mh,"which will return:"),mh.forEach(t),Gn=d(e),b(Ge.$$.fragment,e),Wn=d(e),_s=l(e,"P",{});var bh=r(_s);ml=a(bh,`This is enough for some models to understand where one sequence ends and where another begins. However, other models,
such as BERT, also deploy token type IDs (also called segment IDs). They are represented as a binary mask identifying
the two types of sequence in the model.`),bh.forEach(t),Un=d(e),gs=l(e,"P",{});var _h=r(gs);bl=a(_h,"The tokenizer returns this mask as the \u201Ctoken_type_ids\u201D entry:"),_h.forEach(t),Vn=d(e),b(We.$$.fragment,e),Xn=d(e),A=l(e,"P",{});var Cs=r(A);_l=a(Cs,"The first sequence, the \u201Ccontext\u201D used for the question, has all its tokens represented by a "),bt=l(Cs,"CODE",{});var gh=r(bt);gl=a(gh,"0"),gh.forEach(t),vl=a(Cs,`, whereas the
second sequence, corresponding to the \u201Cquestion\u201D, has all its tokens represented by a `),_t=l(Cs,"CODE",{});var vh=r(_t);kl=a(vh,"1"),vh.forEach(t),wl=a(Cs,"."),Cs.forEach(t),Yn=d(e),I=l(e,"P",{});var Ds=r(I);yl=a(Ds,"Some models, like "),vs=l(Ds,"A",{href:!0});var kh=r(vs);$l=a(kh,"XLNetModel"),kh.forEach(t),El=a(Ds," use an additional token represented by a "),gt=l(Ds,"CODE",{});var wh=r(gt);jl=a(wh,"2"),wh.forEach(t),ql=a(Ds,"."),Ds.forEach(t),Qn=d(e),O=l(e,"H3",{class:!0});var ja=r(O);le=l(ja,"A",{id:!0,class:!0,href:!0});var yh=r(le);vt=l(yh,"SPAN",{});var $h=r(vt);b(Ue.$$.fragment,$h),$h.forEach(t),yh.forEach(t),Tl=d(ja),kt=l(ja,"SPAN",{});var Eh=r(kt);zl=a(Eh,"Position IDs"),Eh.forEach(t),ja.forEach(t),Jn=d(e),re=l(e,"P",{});var qa=r(re);xl=a(qa,`Contrary to RNNs that have the position of each token embedded within them, transformers are unaware of the position of
each token. Therefore, the position IDs (`),wt=l(qa,"CODE",{});var jh=r(wt);Pl=a(jh,"position_ids"),jh.forEach(t),Al=a(qa,`) are used by the model to identify each token\u2019s position in
the list of tokens.`),qa.forEach(t),Kn=d(e),ie=l(e,"P",{});var Ta=r(ie);Il=a(Ta,"They are an optional parameter. If no "),yt=l(Ta,"CODE",{});var qh=r(yt);Cl=a(qh,"position_ids"),qh.forEach(t),Dl=a(Ta,` are passed to the model, the IDs are automatically created as
absolute positional embeddings.`),Ta.forEach(t),Zn=d(e),he=l(e,"P",{});var za=r(he);Ml=a(za,"Absolute positional embeddings are selected in the range "),$t=l(za,"CODE",{});var Th=r($t);Ll=a(Th,"[0, config.max_position_embeddings - 1]"),Th.forEach(t),Bl=a(za,`. Some models use
other types of positional embeddings, such as sinusoidal position embeddings or relative position embeddings.`),za.forEach(t),ea=d(e),H=l(e,"H3",{class:!0});var xa=r(H);pe=l(xa,"A",{id:!0,class:!0,href:!0});var zh=r(pe);Et=l(zh,"SPAN",{});var xh=r(Et);b(Ve.$$.fragment,xh),xh.forEach(t),zh.forEach(t),Sl=d(xa),jt=l(xa,"SPAN",{});var Ph=r(jt);Fl=a(Ph,"Labels"),Ph.forEach(t),xa.forEach(t),sa=d(e),ks=l(e,"P",{});var Ah=r(ks);Nl=a(Ah,`The labels are an optional argument which can be passed in order for the model to compute the loss itself. These labels
should be the expected prediction of the model: it will use the standard loss in order to compute the loss between its
predictions and the expected value (the label).`),Ah.forEach(t),ta=d(e),ws=l(e,"P",{});var Ih=r(ws);Rl=a(Ih,"These labels are different according to the model head, for example:"),Ih.forEach(t),na=d(e),T=l(e,"UL",{});var be=r(T);G=l(be,"LI",{});var Ms=r(G);Ol=a(Ms,"For sequence classification models (e.g., "),ys=l(Ms,"A",{href:!0});var Ch=r(ys);Hl=a(Ch,"BertForSequenceClassification"),Ch.forEach(t),Gl=a(Ms,`), the model expects a
tensor of dimension `),qt=l(Ms,"CODE",{});var Dh=r(qt);Wl=a(Dh,"(batch_size)"),Dh.forEach(t),Ul=a(Ms,` with each value of the batch corresponding to the expected label of the
entire sequence.`),Ms.forEach(t),Vl=d(be),W=l(be,"LI",{});var Ls=r(W);Xl=a(Ls,"For token classification models (e.g., "),$s=l(Ls,"A",{href:!0});var Mh=r($s);Yl=a(Mh,"BertForTokenClassification"),Mh.forEach(t),Ql=a(Ls,`), the model expects a tensor
of dimension `),Tt=l(Ls,"CODE",{});var Lh=r(Tt);Jl=a(Lh,"(batch_size, seq_length)"),Lh.forEach(t),Kl=a(Ls,` with each value corresponding to the expected label of each individual
token.`),Ls.forEach(t),Zl=d(be),U=l(be,"LI",{});var Bs=r(U);er=a(Bs,"For masked language modeling (e.g., "),Es=l(Bs,"A",{href:!0});var Bh=r(Es);sr=a(Bh,"BertForMaskedLM"),Bh.forEach(t),tr=a(Bs,`), the model expects a tensor of dimension
`),zt=l(Bs,"CODE",{});var Sh=r(zt);nr=a(Sh,"(batch_size, seq_length)"),Sh.forEach(t),ar=a(Bs,` with each value corresponding to the expected label of each individual token: the
labels being the token ID for the masked token, and values to be ignored for the rest (usually -100).`),Bs.forEach(t),or=d(be),$=l(be,"LI",{});var j=r($);lr=a(j,"For sequence to sequence tasks,(e.g., "),js=l(j,"A",{href:!0});var Fh=r(js);rr=a(Fh,"BartForConditionalGeneration"),Fh.forEach(t),ir=a(j,`,
`),qs=l(j,"A",{href:!0});var Nh=r(qs);hr=a(Nh,"MBartForConditionalGeneration"),Nh.forEach(t),pr=a(j,"), the model expects a tensor of dimension "),xt=l(j,"CODE",{});var Rh=r(xt);dr=a(Rh,"(batch_size, tgt_seq_length)"),Rh.forEach(t),cr=a(j,` with each value corresponding to the target sequences associated with each input sequence. During
training, both `),Pt=l(j,"EM",{});var Oh=r(Pt);ur=a(Oh,"BART"),Oh.forEach(t),fr=a(j," and "),At=l(j,"EM",{});var Hh=r(At);mr=a(Hh,"T5"),Hh.forEach(t),br=a(j," will make the appropriate "),It=l(j,"EM",{});var Gh=r(It);_r=a(Gh,"decoder_input_ids"),Gh.forEach(t),gr=a(j,` and decoder attention masks internally.
They usually do not need to be supplied. This does not apply to models leveraging the Encoder-Decoder framework. See
the documentation of each model for more information on each specific model\u2019s labels.`),j.forEach(t),be.forEach(t),aa=d(e),de=l(e,"P",{});var Pa=r(de);vr=a(Pa,"The base models (e.g., "),Ts=l(Pa,"A",{href:!0});var Wh=r(Ts);kr=a(Wh,"BertModel"),Wh.forEach(t),wr=a(Pa,`) do not accept labels, as these are the base transformer
models, simply outputting features.`),Pa.forEach(t),oa=d(e),V=l(e,"H3",{class:!0});var Aa=r(V);ce=l(Aa,"A",{id:!0,class:!0,href:!0});var Uh=r(ce);Ct=l(Uh,"SPAN",{});var Vh=r(Ct);b(Xe.$$.fragment,Vh),Vh.forEach(t),Uh.forEach(t),yr=d(Aa),Dt=l(Aa,"SPAN",{});var Xh=r(Dt);$r=a(Xh,"Decoder input IDs"),Xh.forEach(t),Aa.forEach(t),la=d(e),zs=l(e,"P",{});var Yh=r(zs);Er=a(Yh,`This input is specific to encoder-decoder models, and contains the input IDs that will be fed to the decoder. These
inputs should be used for sequence to sequence tasks, such as translation or summarization, and are usually built in a
way specific to each model.`),Yh.forEach(t),ra=d(e),z=l(e,"P",{});var _e=r(z);jr=a(_e,"Most encoder-decoder models (BART, T5) create their "),Mt=l(_e,"CODE",{});var Qh=r(Mt);qr=a(Qh,"decoder_input_ids"),Qh.forEach(t),Tr=a(_e," on their own from the "),Lt=l(_e,"CODE",{});var Jh=r(Lt);zr=a(Jh,"labels"),Jh.forEach(t),xr=a(_e,`. In
such models, passing the `),Bt=l(_e,"CODE",{});var Kh=r(Bt);Pr=a(Kh,"labels"),Kh.forEach(t),Ar=a(_e," is the preferred way to handle training."),_e.forEach(t),ia=d(e),xs=l(e,"P",{});var Zh=r(xs);Ir=a(Zh,"Please check each model\u2019s docs to see how they handle these input IDs for sequence to sequence training."),Zh.forEach(t),ha=d(e),X=l(e,"H3",{class:!0});var Ia=r(X);ue=l(Ia,"A",{id:!0,class:!0,href:!0});var ep=r(ue);St=l(ep,"SPAN",{});var sp=r(St);b(Ye.$$.fragment,sp),sp.forEach(t),ep.forEach(t),Cr=d(Ia),Ft=l(Ia,"SPAN",{});var tp=r(Ft);Dr=a(tp,"Feed Forward Chunking"),tp.forEach(t),Ia.forEach(t),pa=d(e),fe=l(e,"P",{});var Ca=r(fe);Mr=a(Ca,`In each residual attention block in transformers the self-attention layer is usually followed by 2 feed forward layers.
The intermediate embedding size of the feed forward layers is often bigger than the hidden size of the model (e.g., for
`),Nt=l(Ca,"CODE",{});var np=r(Nt);Lr=a(np,"bert-base-uncased"),np.forEach(t),Br=a(Ca,")."),Ca.forEach(t),da=d(e),w=l(e,"P",{});var y=r(w);Sr=a(y,"For an input of size "),Rt=l(y,"CODE",{});var ap=r(Rt);Fr=a(ap,"[batch_size, sequence_length]"),ap.forEach(t),Nr=a(y,`, the memory required to store the intermediate feed forward
embeddings `),Ot=l(y,"CODE",{});var op=r(Ot);Rr=a(op,"[batch_size, sequence_length, config.intermediate_size]"),op.forEach(t),Or=a(y,` can account for a large fraction of the memory
use. The authors of `),Qe=l(y,"A",{href:!0,rel:!0});var lp=r(Qe);Hr=a(lp,"Reformer: The Efficient Transformer"),lp.forEach(t),Gr=a(y,` noticed that since the
computation is independent of the `),Ht=l(y,"CODE",{});var rp=r(Ht);Wr=a(rp,"sequence_length"),rp.forEach(t),Ur=a(y,` dimension, it is mathematically equivalent to compute the output
embeddings of both feed forward layers `),Gt=l(y,"CODE",{});var ip=r(Gt);Vr=a(ip,"[batch_size, config.hidden_size]_0, ..., [batch_size, config.hidden_size]_n"),ip.forEach(t),Xr=a(y,`
individually and concat them afterward to `),Wt=l(y,"CODE",{});var hp=r(Wt);Yr=a(hp,"[batch_size, sequence_length, config.hidden_size]"),hp.forEach(t),Qr=a(y," with "),Ut=l(y,"CODE",{});var pp=r(Ut);Jr=a(pp,"n = sequence_length"),pp.forEach(t),Kr=a(y,`, which trades increased computation time against reduced memory use, but yields a mathematically
`),Vt=l(y,"STRONG",{});var dp=r(Vt);Zr=a(dp,"equivalent"),dp.forEach(t),ei=a(y," result."),y.forEach(t),ca=d(e),x=l(e,"P",{});var ge=r(x);si=a(ge,"For models employing the function "),Ps=l(ge,"A",{href:!0});var cp=r(Ps);ti=a(cp,"apply_chunking_to_forward()"),cp.forEach(t),ni=a(ge,", the "),Xt=l(ge,"CODE",{});var up=r(Xt);ai=a(up,"chunk_size"),up.forEach(t),oi=a(ge,` defines the
number of output embeddings that are computed in parallel and thus defines the trade-off between memory and time
complexity. If `),Yt=l(ge,"CODE",{});var fp=r(Yt);li=a(fp,"chunk_size"),fp.forEach(t),ri=a(ge," is set to 0, no feed forward chunking is done."),ge.forEach(t),this.h()},h(){c(D,"name","hf:doc:metadata"),c(D,"content",JSON.stringify(yp)),c(Y,"id","glossary"),c(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y,"href","#glossary"),c(M,"class","relative group"),c(Q,"id","general-terms"),c(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q,"href","#general-terms"),c(L,"class","relative group"),c(Je,"href","model_doc/bart"),c(Ke,"href","model_doc/t5"),c(J,"id","model-inputs"),c(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J,"href","#model-inputs"),c(S,"class","relative group"),c(K,"id","input-ids"),c(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K,"href","#input-ids"),c(F,"class","relative group"),c(Ee,"href","https://arxiv.org/pdf/1609.08144.pdf"),c(Ee,"rel","nofollow"),c(ze,"href","https://github.com/huggingface/tokenizers"),c(ze,"rel","nofollow"),c(ls,"href","/docs/transformers/v4.24.0/en/model_doc/bert#transformers.BertModel"),c(ne,"id","attention-mask"),c(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ne,"href","#attention-mask"),c(N,"class","relative group"),c(fs,"href","/docs/transformers/v4.24.0/en/model_doc/bert#transformers.BertTokenizer"),c(ae,"id","token-type-ids"),c(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ae,"href","#token-type-ids"),c(R,"class","relative group"),c(vs,"href","/docs/transformers/v4.24.0/en/model_doc/xlnet#transformers.XLNetModel"),c(le,"id","position-ids"),c(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(le,"href","#position-ids"),c(O,"class","relative group"),c(pe,"id","labels"),c(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pe,"href","#labels"),c(H,"class","relative group"),c(ys,"href","/docs/transformers/v4.24.0/en/model_doc/bert#transformers.BertForSequenceClassification"),c($s,"href","/docs/transformers/v4.24.0/en/model_doc/bert#transformers.BertForTokenClassification"),c(Es,"href","/docs/transformers/v4.24.0/en/model_doc/bert#transformers.BertForMaskedLM"),c(js,"href","/docs/transformers/v4.24.0/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qs,"href","/docs/transformers/v4.24.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Ts,"href","/docs/transformers/v4.24.0/en/model_doc/bert#transformers.BertModel"),c(ce,"id","decoder-input-ids"),c(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ce,"href","#decoder-input-ids"),c(V,"class","relative group"),c(ue,"id","feed-forward-chunking"),c(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ue,"href","#feed-forward-chunking"),c(X,"class","relative group"),c(Qe,"href","https://arxiv.org/abs/2001.04451"),c(Qe,"rel","nofollow"),c(Ps,"href","/docs/transformers/v4.24.0/en/internal/modeling_utils#transformers.apply_chunking_to_forward")},m(e,i){s(document.head,D),h(e,Qt,i),h(e,M,i),s(M,Y),s(Y,Ss),_(ve,Ss,null),s(M,Da),s(M,Fs),s(Fs,Ma),h(e,Jt,i),h(e,L,i),s(L,Q),s(Q,Ns),_(ke,Ns,null),s(L,La),s(L,Rs),s(Rs,Ba),h(e,Kt,i),h(e,u,i),s(u,Os),s(Os,Sa),s(u,Fa),s(u,Hs),s(Hs,Na),s(u,Ra),s(u,Gs),s(Gs,Oa),s(u,Ha),s(u,Ws),s(Ws,Ga),s(u,Wa),s(u,Us),s(Us,Ua),s(u,Va),s(u,Vs),s(Vs,Xa),s(u,Ya),s(u,Xs),s(Xs,Qa),s(u,Ja),s(u,Ys),s(Ys,Ka),s(u,Za),s(u,Qs),s(Qs,eo),s(u,so),s(u,Js),s(Js,to),s(u,no),s(u,Ks),s(Ks,ao),s(u,oo),s(u,Zs),s(Zs,lo),s(u,ro),s(u,B),s(B,io),s(B,Je),s(Je,ho),s(B,po),s(B,Ke),s(Ke,co),s(B,uo),s(u,fo),s(u,et),s(et,mo),s(u,bo),s(u,st),s(st,_o),h(e,Zt,i),h(e,S,i),s(S,J),s(J,tt),_(we,tt,null),s(S,go),s(S,nt),s(nt,vo),h(e,en,i),h(e,Ze,i),s(Ze,ko),h(e,sn,i),h(e,F,i),s(F,K),s(K,at),_(ye,at,null),s(F,wo),s(F,ot),s(ot,yo),h(e,tn,i),h(e,Z,i),s(Z,$o),s(Z,lt),s(lt,Eo),s(Z,jo),h(e,nn,i),_($e,e,i),h(e,an,i),h(e,ee,i),s(ee,qo),s(ee,Ee),s(Ee,To),s(ee,zo),h(e,on,i),_(je,e,i),h(e,ln,i),h(e,es,i),s(es,xo),h(e,rn,i),_(qe,e,i),h(e,hn,i),h(e,ss,i),s(ss,Po),h(e,pn,i),_(Te,e,i),h(e,dn,i),h(e,se,i),s(se,Ao),s(se,ze),s(ze,Io),s(se,Co),h(e,cn,i),_(xe,e,i),h(e,un,i),h(e,ts,i),s(ts,Do),h(e,fn,i),_(Pe,e,i),h(e,mn,i),h(e,ns,i),s(ns,Mo),h(e,bn,i),h(e,as,i),s(as,Lo),h(e,_n,i),_(Ae,e,i),h(e,gn,i),h(e,os,i),s(os,Bo),h(e,vn,i),_(Ie,e,i),h(e,kn,i),h(e,te,i),s(te,So),s(te,ls),s(ls,Fo),s(te,No),h(e,wn,i),h(e,N,i),s(N,ne),s(ne,rt),_(Ce,rt,null),s(N,Ro),s(N,it),s(it,Oo),h(e,yn,i),h(e,rs,i),s(rs,Ho),h(e,$n,i),_(De,e,i),h(e,En,i),h(e,is,i),s(is,Go),h(e,jn,i),h(e,hs,i),s(hs,Wo),h(e,qn,i),_(Me,e,i),h(e,Tn,i),h(e,ps,i),s(ps,Uo),h(e,zn,i),_(Le,e,i),h(e,xn,i),h(e,ds,i),s(ds,Vo),h(e,Pn,i),h(e,cs,i),s(cs,Xo),h(e,An,i),_(Be,e,i),h(e,In,i),h(e,us,i),s(us,Yo),h(e,Cn,i),_(Se,e,i),h(e,Dn,i),h(e,q,i),s(q,Qo),s(q,fs),s(fs,Jo),s(q,Ko),s(q,ht),s(ht,Zo),s(q,el),s(q,pt),s(pt,sl),s(q,tl),h(e,Mn,i),_(Fe,e,i),h(e,Ln,i),h(e,R,i),s(R,ae),s(ae,dt),_(Ne,dt,null),s(R,nl),s(R,ct),s(ct,al),h(e,Bn,i),h(e,ms,i),s(ms,ol),h(e,Sn,i),_(Re,e,i),h(e,Fn,i),h(e,P,i),s(P,ll),s(P,ut),s(ut,rl),s(P,il),s(P,ft),s(ft,hl),s(P,pl),h(e,Nn,i),_(Oe,e,i),h(e,Rn,i),h(e,oe,i),s(oe,dl),s(oe,mt),s(mt,cl),s(oe,ul),h(e,On,i),_(He,e,i),h(e,Hn,i),h(e,bs,i),s(bs,fl),h(e,Gn,i),_(Ge,e,i),h(e,Wn,i),h(e,_s,i),s(_s,ml),h(e,Un,i),h(e,gs,i),s(gs,bl),h(e,Vn,i),_(We,e,i),h(e,Xn,i),h(e,A,i),s(A,_l),s(A,bt),s(bt,gl),s(A,vl),s(A,_t),s(_t,kl),s(A,wl),h(e,Yn,i),h(e,I,i),s(I,yl),s(I,vs),s(vs,$l),s(I,El),s(I,gt),s(gt,jl),s(I,ql),h(e,Qn,i),h(e,O,i),s(O,le),s(le,vt),_(Ue,vt,null),s(O,Tl),s(O,kt),s(kt,zl),h(e,Jn,i),h(e,re,i),s(re,xl),s(re,wt),s(wt,Pl),s(re,Al),h(e,Kn,i),h(e,ie,i),s(ie,Il),s(ie,yt),s(yt,Cl),s(ie,Dl),h(e,Zn,i),h(e,he,i),s(he,Ml),s(he,$t),s($t,Ll),s(he,Bl),h(e,ea,i),h(e,H,i),s(H,pe),s(pe,Et),_(Ve,Et,null),s(H,Sl),s(H,jt),s(jt,Fl),h(e,sa,i),h(e,ks,i),s(ks,Nl),h(e,ta,i),h(e,ws,i),s(ws,Rl),h(e,na,i),h(e,T,i),s(T,G),s(G,Ol),s(G,ys),s(ys,Hl),s(G,Gl),s(G,qt),s(qt,Wl),s(G,Ul),s(T,Vl),s(T,W),s(W,Xl),s(W,$s),s($s,Yl),s(W,Ql),s(W,Tt),s(Tt,Jl),s(W,Kl),s(T,Zl),s(T,U),s(U,er),s(U,Es),s(Es,sr),s(U,tr),s(U,zt),s(zt,nr),s(U,ar),s(T,or),s(T,$),s($,lr),s($,js),s(js,rr),s($,ir),s($,qs),s(qs,hr),s($,pr),s($,xt),s(xt,dr),s($,cr),s($,Pt),s(Pt,ur),s($,fr),s($,At),s(At,mr),s($,br),s($,It),s(It,_r),s($,gr),h(e,aa,i),h(e,de,i),s(de,vr),s(de,Ts),s(Ts,kr),s(de,wr),h(e,oa,i),h(e,V,i),s(V,ce),s(ce,Ct),_(Xe,Ct,null),s(V,yr),s(V,Dt),s(Dt,$r),h(e,la,i),h(e,zs,i),s(zs,Er),h(e,ra,i),h(e,z,i),s(z,jr),s(z,Mt),s(Mt,qr),s(z,Tr),s(z,Lt),s(Lt,zr),s(z,xr),s(z,Bt),s(Bt,Pr),s(z,Ar),h(e,ia,i),h(e,xs,i),s(xs,Ir),h(e,ha,i),h(e,X,i),s(X,ue),s(ue,St),_(Ye,St,null),s(X,Cr),s(X,Ft),s(Ft,Dr),h(e,pa,i),h(e,fe,i),s(fe,Mr),s(fe,Nt),s(Nt,Lr),s(fe,Br),h(e,da,i),h(e,w,i),s(w,Sr),s(w,Rt),s(Rt,Fr),s(w,Nr),s(w,Ot),s(Ot,Rr),s(w,Or),s(w,Qe),s(Qe,Hr),s(w,Gr),s(w,Ht),s(Ht,Wr),s(w,Ur),s(w,Gt),s(Gt,Vr),s(w,Xr),s(w,Wt),s(Wt,Yr),s(w,Qr),s(w,Ut),s(Ut,Jr),s(w,Kr),s(w,Vt),s(Vt,Zr),s(w,ei),h(e,ca,i),h(e,x,i),s(x,si),s(x,Ps),s(Ps,ti),s(x,ni),s(x,Xt),s(Xt,ai),s(x,oi),s(x,Yt),s(Yt,li),s(x,ri),ua=!0},p:vp,i(e){ua||(g(ve.$$.fragment,e),g(ke.$$.fragment,e),g(we.$$.fragment,e),g(ye.$$.fragment,e),g($e.$$.fragment,e),g(je.$$.fragment,e),g(qe.$$.fragment,e),g(Te.$$.fragment,e),g(xe.$$.fragment,e),g(Pe.$$.fragment,e),g(Ae.$$.fragment,e),g(Ie.$$.fragment,e),g(Ce.$$.fragment,e),g(De.$$.fragment,e),g(Me.$$.fragment,e),g(Le.$$.fragment,e),g(Be.$$.fragment,e),g(Se.$$.fragment,e),g(Fe.$$.fragment,e),g(Ne.$$.fragment,e),g(Re.$$.fragment,e),g(Oe.$$.fragment,e),g(He.$$.fragment,e),g(Ge.$$.fragment,e),g(We.$$.fragment,e),g(Ue.$$.fragment,e),g(Ve.$$.fragment,e),g(Xe.$$.fragment,e),g(Ye.$$.fragment,e),ua=!0)},o(e){v(ve.$$.fragment,e),v(ke.$$.fragment,e),v(we.$$.fragment,e),v(ye.$$.fragment,e),v($e.$$.fragment,e),v(je.$$.fragment,e),v(qe.$$.fragment,e),v(Te.$$.fragment,e),v(xe.$$.fragment,e),v(Pe.$$.fragment,e),v(Ae.$$.fragment,e),v(Ie.$$.fragment,e),v(Ce.$$.fragment,e),v(De.$$.fragment,e),v(Me.$$.fragment,e),v(Le.$$.fragment,e),v(Be.$$.fragment,e),v(Se.$$.fragment,e),v(Fe.$$.fragment,e),v(Ne.$$.fragment,e),v(Re.$$.fragment,e),v(Oe.$$.fragment,e),v(He.$$.fragment,e),v(Ge.$$.fragment,e),v(We.$$.fragment,e),v(Ue.$$.fragment,e),v(Ve.$$.fragment,e),v(Xe.$$.fragment,e),v(Ye.$$.fragment,e),ua=!1},d(e){t(D),e&&t(Qt),e&&t(M),k(ve),e&&t(Jt),e&&t(L),k(ke),e&&t(Kt),e&&t(u),e&&t(Zt),e&&t(S),k(we),e&&t(en),e&&t(Ze),e&&t(sn),e&&t(F),k(ye),e&&t(tn),e&&t(Z),e&&t(nn),k($e,e),e&&t(an),e&&t(ee),e&&t(on),k(je,e),e&&t(ln),e&&t(es),e&&t(rn),k(qe,e),e&&t(hn),e&&t(ss),e&&t(pn),k(Te,e),e&&t(dn),e&&t(se),e&&t(cn),k(xe,e),e&&t(un),e&&t(ts),e&&t(fn),k(Pe,e),e&&t(mn),e&&t(ns),e&&t(bn),e&&t(as),e&&t(_n),k(Ae,e),e&&t(gn),e&&t(os),e&&t(vn),k(Ie,e),e&&t(kn),e&&t(te),e&&t(wn),e&&t(N),k(Ce),e&&t(yn),e&&t(rs),e&&t($n),k(De,e),e&&t(En),e&&t(is),e&&t(jn),e&&t(hs),e&&t(qn),k(Me,e),e&&t(Tn),e&&t(ps),e&&t(zn),k(Le,e),e&&t(xn),e&&t(ds),e&&t(Pn),e&&t(cs),e&&t(An),k(Be,e),e&&t(In),e&&t(us),e&&t(Cn),k(Se,e),e&&t(Dn),e&&t(q),e&&t(Mn),k(Fe,e),e&&t(Ln),e&&t(R),k(Ne),e&&t(Bn),e&&t(ms),e&&t(Sn),k(Re,e),e&&t(Fn),e&&t(P),e&&t(Nn),k(Oe,e),e&&t(Rn),e&&t(oe),e&&t(On),k(He,e),e&&t(Hn),e&&t(bs),e&&t(Gn),k(Ge,e),e&&t(Wn),e&&t(_s),e&&t(Un),e&&t(gs),e&&t(Vn),k(We,e),e&&t(Xn),e&&t(A),e&&t(Yn),e&&t(I),e&&t(Qn),e&&t(O),k(Ue),e&&t(Jn),e&&t(re),e&&t(Kn),e&&t(ie),e&&t(Zn),e&&t(he),e&&t(ea),e&&t(H),k(Ve),e&&t(sa),e&&t(ks),e&&t(ta),e&&t(ws),e&&t(na),e&&t(T),e&&t(aa),e&&t(de),e&&t(oa),e&&t(V),k(Xe),e&&t(la),e&&t(zs),e&&t(ra),e&&t(z),e&&t(ia),e&&t(xs),e&&t(ha),e&&t(X),k(Ye),e&&t(pa),e&&t(fe),e&&t(da),e&&t(w),e&&t(ca),e&&t(x)}}}const yp={local:"glossary",sections:[{local:"general-terms",title:"General terms"},{local:"model-inputs",sections:[{local:"input-ids",title:"Input IDs"},{local:"attention-mask",title:"Attention mask"},{local:"token-type-ids",title:"Token Type IDs"},{local:"position-ids",title:"Position IDs"},{local:"labels",title:"Labels"},{local:"decoder-input-ids",title:"Decoder input IDs"},{local:"feed-forward-chunking",title:"Feed Forward Chunking"}],title:"Model inputs"}],title:"Glossary"};function $p(hi){return kp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class zp extends mp{constructor(D){super();bp(this,D,$p,wp,_p,{})}}export{zp as default,yp as metadata};
