import{S as Qa,i as Xa,s as Ka,e as s,k as m,w as y,t as r,M as Za,c as a,d as o,m as p,a as n,x as w,h as i,b as c,N as en,G as e,g as u,y as x,q as $,o as j,B as T,v as tn,L as aa}from"../../chunks/vendor-hf-doc-builder.js";import{T as oa}from"../../chunks/Tip-hf-doc-builder.js";import{D as J}from"../../chunks/Docstring-hf-doc-builder.js";import{C as na}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as mt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as sa}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function on(Y){let d,b,g,f,v;return f=new na({props:{code:`from transformers import YolosConfig, YolosModel

# Initializing a YOLOS hustvl/yolos-base style configuration
configuration = YolosConfig()

# Initializing a model (with random weights) from the hustvl/yolos-base style configuration
model = YolosModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> YolosConfig, YolosModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a YOLOS hustvl/yolos-base style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = YolosConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model (with random weights) from the hustvl/yolos-base style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = YolosModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){d=s("p"),b=r("Example:"),g=m(),y(f.$$.fragment)},l(l){d=a(l,"P",{});var _=n(d);b=i(_,"Example:"),_.forEach(o),g=p(l),w(f.$$.fragment,l)},m(l,_){u(l,d,_),e(d,b),u(l,g,_),x(f,l,_),v=!0},p:aa,i(l){v||($(f.$$.fragment,l),v=!0)},o(l){j(f.$$.fragment,l),v=!1},d(l){l&&o(d),l&&o(g),T(f,l)}}}function sn(Y){let d,b;return{c(){d=s("p"),b=r(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(g){d=a(g,"P",{});var f=n(d);b=i(f,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),f.forEach(o)},m(g,f){u(g,d,f),e(d,b)},d(g){g&&o(d)}}}function an(Y){let d,b,g,f,v;return{c(){d=s("p"),b=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=s("code"),f=r("Module"),v=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=a(l,"P",{});var _=n(d);b=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=a(_,"CODE",{});var D=n(g);f=i(D,"Module"),D.forEach(o),v=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(l,_){u(l,d,_),e(d,b),e(d,g),e(g,f),e(d,v)},d(l){l&&o(d)}}}function nn(Y){let d,b,g,f,v;return f=new na({props:{code:`from transformers import YolosFeatureExtractor, YolosModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = YolosFeatureExtractor.from_pretrained("hustvl/yolos-small")
model = YolosModel.from_pretrained("hustvl/yolos-small")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> YolosFeatureExtractor, YolosModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = YolosFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;hustvl/yolos-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = YolosModel.from_pretrained(<span class="hljs-string">&quot;hustvl/yolos-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">3401</span>, <span class="hljs-number">384</span>]`}}),{c(){d=s("p"),b=r("Example:"),g=m(),y(f.$$.fragment)},l(l){d=a(l,"P",{});var _=n(d);b=i(_,"Example:"),_.forEach(o),g=p(l),w(f.$$.fragment,l)},m(l,_){u(l,d,_),e(d,b),u(l,g,_),x(f,l,_),v=!0},p:aa,i(l){v||($(f.$$.fragment,l),v=!0)},o(l){j(f.$$.fragment,l),v=!1},d(l){l&&o(d),l&&o(g),T(f,l)}}}function rn(Y){let d,b,g,f,v;return{c(){d=s("p"),b=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=s("code"),f=r("Module"),v=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=a(l,"P",{});var _=n(d);b=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=a(_,"CODE",{});var D=n(g);f=i(D,"Module"),D.forEach(o),v=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(l,_){u(l,d,_),e(d,b),e(d,g),e(g,f),e(d,v)},d(l){l&&o(d)}}}function ln(Y){let d,b,g,f,v;return f=new na({props:{code:`from transformers import AutoFeatureExtractor, AutoModelForObjectDetection
import torch
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = AutoFeatureExtractor.from_pretrained("hustvl/yolos-tiny")
model = AutoModelForObjectDetection.from_pretrained("hustvl/yolos-tiny")

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)

# convert outputs (bounding boxes and class logits) to COCO API
target_sizes = torch.tensor([image.size[::-1]])
results = feature_extractor.post_process_object_detection(
    outputs, threshold=0.9, target_sizes=target_sizes
)[0]

for score, label, box in zip(results["scores"], results["labels"], results["boxes"]):
    box = [round(i, 2) for i in box.tolist()]
    print(
        f"Detected {model.config.id2label[label.item()]} with confidence "
        f"{round(score.item(), 3)} at location {box}"
    )`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, AutoModelForObjectDetection
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;hustvl/yolos-tiny&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;hustvl/yolos-tiny&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># convert outputs (bounding boxes and class logits) to COCO API</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>target_sizes = torch.tensor([image.size[::-<span class="hljs-number">1</span>]])
<span class="hljs-meta">&gt;&gt;&gt; </span>results = feature_extractor.post_process_object_detection(
<span class="hljs-meta">... </span>    outputs, threshold=<span class="hljs-number">0.9</span>, target_sizes=target_sizes
<span class="hljs-meta">... </span>)[<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> score, label, box <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(results[<span class="hljs-string">&quot;scores&quot;</span>], results[<span class="hljs-string">&quot;labels&quot;</span>], results[<span class="hljs-string">&quot;boxes&quot;</span>]):
<span class="hljs-meta">... </span>    box = [<span class="hljs-built_in">round</span>(i, <span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> box.tolist()]
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(
<span class="hljs-meta">... </span>        <span class="hljs-string">f&quot;Detected <span class="hljs-subst">{model.config.id2label[label.item()]}</span> with confidence &quot;</span>
<span class="hljs-meta">... </span>        <span class="hljs-string">f&quot;<span class="hljs-subst">{<span class="hljs-built_in">round</span>(score.item(), <span class="hljs-number">3</span>)}</span> at location <span class="hljs-subst">{box}</span>&quot;</span>
<span class="hljs-meta">... </span>    )
Detected remote <span class="hljs-keyword">with</span> confidence <span class="hljs-number">0.994</span> at location [<span class="hljs-number">46.96</span>, <span class="hljs-number">72.61</span>, <span class="hljs-number">181.02</span>, <span class="hljs-number">119.73</span>]
Detected remote <span class="hljs-keyword">with</span> confidence <span class="hljs-number">0.975</span> at location [<span class="hljs-number">340.66</span>, <span class="hljs-number">79.19</span>, <span class="hljs-number">372.59</span>, <span class="hljs-number">192.65</span>]
Detected cat <span class="hljs-keyword">with</span> confidence <span class="hljs-number">0.984</span> at location [<span class="hljs-number">12.27</span>, <span class="hljs-number">54.25</span>, <span class="hljs-number">319.42</span>, <span class="hljs-number">470.99</span>]
Detected remote <span class="hljs-keyword">with</span> confidence <span class="hljs-number">0.922</span> at location [<span class="hljs-number">41.66</span>, <span class="hljs-number">71.96</span>, <span class="hljs-number">178.7</span>, <span class="hljs-number">120.33</span>]
Detected cat <span class="hljs-keyword">with</span> confidence <span class="hljs-number">0.914</span> at location [<span class="hljs-number">342.34</span>, <span class="hljs-number">21.48</span>, <span class="hljs-number">638.64</span>, <span class="hljs-number">372.46</span>]`}}),{c(){d=s("p"),b=r("Examples:"),g=m(),y(f.$$.fragment)},l(l){d=a(l,"P",{});var _=n(d);b=i(_,"Examples:"),_.forEach(o),g=p(l),w(f.$$.fragment,l)},m(l,_){u(l,d,_),e(d,b),u(l,g,_),x(f,l,_),v=!0},p:aa,i(l){v||($(f.$$.fragment,l),v=!0)},o(l){j(f.$$.fragment,l),v=!1},d(l){l&&o(d),l&&o(g),T(f,l)}}}function cn(Y){let d,b,g,f,v,l,_,D,po,Lt,I,G,pt,ge,fo,ft,uo,qt,q,go,_e,_o,bo,Be,vo,yo,Mt,Ve,wo,At,Ue,ut,xo,It,He,$o,St,Q,P,jo,Je,To,Oo,Ge,Yo,Eo,gt,Fo,ko,zo,be,Co,ve,Do,Po,Nt,X,ra,Rt,K,Lo,Qe,qo,Mo,Wt,M,Ao,ye,Io,So,we,No,Ro,Bt,S,Z,_t,xe,Wo,bt,Bo,Vt,E,$e,Vo,N,Uo,Xe,Ho,Jo,je,Go,Qo,Xo,R,Ko,Ke,Zo,es,Ze,ts,os,ss,ee,Ut,W,te,vt,Te,as,yt,ns,Ht,O,Oe,rs,wt,is,ls,Ye,cs,et,ds,hs,ms,A,Ee,ps,xt,fs,us,oe,gs,se,Fe,_s,$t,bs,vs,ae,ke,ys,ze,ws,tt,xs,$s,Jt,B,ne,jt,Ce,js,Tt,Ts,Gt,L,De,Os,Pe,Ys,Le,Es,Fs,ks,k,qe,zs,V,Cs,ot,Ds,Ps,Ot,Ls,qs,Ms,re,As,ie,Qt,U,le,Yt,Me,Is,Et,Ss,Xt,F,Ae,Ns,Ft,Rs,Ws,Ie,Bs,Se,Vs,Us,Hs,z,Ne,Js,H,Gs,st,Qs,Xs,kt,Ks,Zs,ea,ce,ta,de,Kt;return l=new mt({}),ge=new mt({}),xe=new mt({}),$e=new J({props:{name:"class transformers.YolosConfig",anchor:"transformers.YolosConfig",parameters:[{name:"hidden_size",val:" = 768"},{name:"num_hidden_layers",val:" = 12"},{name:"num_attention_heads",val:" = 12"},{name:"intermediate_size",val:" = 3072"},{name:"hidden_act",val:" = 'gelu'"},{name:"hidden_dropout_prob",val:" = 0.0"},{name:"attention_probs_dropout_prob",val:" = 0.0"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"image_size",val:" = [512, 864]"},{name:"patch_size",val:" = 16"},{name:"num_channels",val:" = 3"},{name:"qkv_bias",val:" = True"},{name:"num_detection_tokens",val:" = 100"},{name:"use_mid_position_embeddings",val:" = True"},{name:"auxiliary_loss",val:" = False"},{name:"class_cost",val:" = 1"},{name:"bbox_cost",val:" = 5"},{name:"giou_cost",val:" = 2"},{name:"bbox_loss_coefficient",val:" = 5"},{name:"giou_loss_coefficient",val:" = 2"},{name:"eos_coefficient",val:" = 0.1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.YolosConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.YolosConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.YolosConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.YolosConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.YolosConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.YolosConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.YolosConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.YolosConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.YolosConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.YolosConfig.image_size",description:`<strong>image_size</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[512, 864]</code>) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.YolosConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>16</code>) &#x2014;
The size (resolution) of each patch.`,name:"patch_size"},{anchor:"transformers.YolosConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to <code>3</code>) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.YolosConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to add a bias to the queries, keys and values.`,name:"qkv_bias"},{anchor:"transformers.YolosConfig.num_detection_tokens",description:`<strong>num_detection_tokens</strong> (<code>int</code>, <em>optional</em>, defaults to <code>100</code>) &#x2014;
The number of detection tokens.`,name:"num_detection_tokens"},{anchor:"transformers.YolosConfig.use_mid_position_embeddings",description:`<strong>use_mid_position_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to use the mid-layer position encodings.`,name:"use_mid_position_embeddings"},{anchor:"transformers.YolosConfig.auxiliary_loss",description:`<strong>auxiliary_loss</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether auxiliary decoding losses (loss at each decoder layer) are to be used.`,name:"auxiliary_loss"},{anchor:"transformers.YolosConfig.class_cost",description:`<strong>class_cost</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
Relative weight of the classification error in the Hungarian matching cost.`,name:"class_cost"},{anchor:"transformers.YolosConfig.bbox_cost",description:`<strong>bbox_cost</strong> (<code>float</code>, <em>optional</em>, defaults to 5) &#x2014;
Relative weight of the L1 error of the bounding box coordinates in the Hungarian matching cost.`,name:"bbox_cost"},{anchor:"transformers.YolosConfig.giou_cost",description:`<strong>giou_cost</strong> (<code>float</code>, <em>optional</em>, defaults to 2) &#x2014;
Relative weight of the generalized IoU loss of the bounding box in the Hungarian matching cost.`,name:"giou_cost"},{anchor:"transformers.YolosConfig.bbox_loss_coefficient",description:`<strong>bbox_loss_coefficient</strong> (<code>float</code>, <em>optional</em>, defaults to 5) &#x2014;
Relative weight of the L1 bounding box loss in the object detection loss.`,name:"bbox_loss_coefficient"},{anchor:"transformers.YolosConfig.giou_loss_coefficient",description:`<strong>giou_loss_coefficient</strong> (<code>float</code>, <em>optional</em>, defaults to 2) &#x2014;
Relative weight of the generalized IoU loss in the object detection loss.`,name:"giou_loss_coefficient"},{anchor:"transformers.YolosConfig.eos_coefficient",description:`<strong>eos_coefficient</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
Relative classification weight of the &#x2018;no-object&#x2019; class in the object detection loss.`,name:"eos_coefficient"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/yolos/configuration_yolos.py#L35"}}),ee=new sa({props:{anchor:"transformers.YolosConfig.example",$$slots:{default:[on]},$$scope:{ctx:Y}}}),Te=new mt({}),Oe=new J({props:{name:"class transformers.YolosFeatureExtractor",anchor:"transformers.YolosFeatureExtractor",parameters:[{name:"format",val:" = 'coco_detection'"},{name:"do_resize",val:" = True"},{name:"size",val:" = 800"},{name:"max_size",val:" = 1333"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.YolosFeatureExtractor.format",description:`<strong>format</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;coco_detection&quot;</code>) &#x2014;
Data format of the annotations. One of &#x201C;coco_detection&#x201D; or &#x201C;coco_panoptic&#x201D;.`,name:"format"},{anchor:"transformers.YolosFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.YolosFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code>, <em>optional</em>, defaults to 800) &#x2014;
Resize the input to the given size. Only has an effect if <code>do_resize</code> is set to <code>True</code>. If size is a
sequence like <code>(width, height)</code>, output size will be matched to this. If size is an int, smaller edge of
the image will be matched to this number. i.e, if <code>height &gt; width</code>, then image will be rescaled to <code>(size * height / width, size)</code>.`,name:"size"},{anchor:"transformers.YolosFeatureExtractor.max_size",description:`<strong>max_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>1333</code>) &#x2014;
The largest size an image dimension can have (otherwise it&#x2019;s capped). Only has an effect if <code>do_resize</code> is
set to <code>True</code>.`,name:"max_size"},{anchor:"transformers.YolosFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with mean and standard deviation.`,name:"do_normalize"},{anchor:"transformers.YolosFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>int</code>, <em>optional</em>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images. Defaults to the ImageNet mean.`,name:"image_mean"},{anchor:"transformers.YolosFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>int</code>, <em>optional</em>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images. Defaults to the
ImageNet std.`,name:"image_std"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/yolos/feature_extraction_yolos.py#L122"}}),Ee=new J({props:{name:"__call__",anchor:"transformers.YolosFeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"annotations",val:": typing.Union[typing.List[typing.Dict], typing.List[typing.List[typing.Dict]]] = None"},{name:"return_segmentation_masks",val:": typing.Optional[bool] = False"},{name:"masks_path",val:": typing.Optional[pathlib.Path] = None"},{name:"padding",val:": typing.Optional[bool] = True"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.YolosFeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is a
number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.YolosFeatureExtractor.__call__.annotations",description:`<strong>annotations</strong> (<code>Dict</code>, <code>List[Dict]</code>, <em>optional</em>) &#x2014;
The corresponding annotations in COCO format.</p>
<p>In case <a href="/docs/transformers/v4.24.0/en/model_doc/detr#transformers.DetrFeatureExtractor">DetrFeatureExtractor</a> was initialized with <code>format = &quot;coco_detection&quot;</code>, the annotations for
each image should have the following format: {&#x2018;image_id&#x2019;: int, &#x2018;annotations&#x2019;: [annotation]}, with the
annotations being a list of COCO object annotations.</p>
<p>In case <a href="/docs/transformers/v4.24.0/en/model_doc/detr#transformers.DetrFeatureExtractor">DetrFeatureExtractor</a> was initialized with <code>format = &quot;coco_panoptic&quot;</code>, the annotations for
each image should have the following format: {&#x2018;image_id&#x2019;: int, &#x2018;file_name&#x2019;: str, &#x2018;segments_info&#x2019;:
[segment_info]} with segments_info being a list of COCO panoptic annotations.`,name:"annotations"},{anchor:"transformers.YolosFeatureExtractor.__call__.return_segmentation_masks",description:`<strong>return_segmentation_masks</strong> (<code>Dict</code>, <code>List[Dict]</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to also include instance segmentation masks as part of the labels in case <code>format = &quot;coco_detection&quot;</code>.`,name:"return_segmentation_masks"},{anchor:"transformers.YolosFeatureExtractor.__call__.masks_path",description:`<strong>masks_path</strong> (<code>pathlib.Path</code>, <em>optional</em>) &#x2014;
Path to the directory containing the PNG files that store the class-agnostic image segmentations. Only
relevant in case <a href="/docs/transformers/v4.24.0/en/model_doc/detr#transformers.DetrFeatureExtractor">DetrFeatureExtractor</a> was initialized with <code>format = &quot;coco_panoptic&quot;</code>.`,name:"masks_path"},{anchor:"transformers.YolosFeatureExtractor.__call__.padding",description:`<strong>padding</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to pad images up to the largest image in a batch.`,name:"padding"},{anchor:"transformers.YolosFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/v4.24.0/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of NumPy arrays. If set to <code>&apos;pt&apos;</code>, return PyTorch <code>torch.Tensor</code>
objects.`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/yolos/feature_extraction_yolos.py#L409",returnDescription:`
<p>A <a
  href="/docs/transformers/v4.24.0/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model.</li>
<li><strong>labels</strong> \u2014 Optional labels to be fed to a model (when <code>annotations</code> are provided)</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/v4.24.0/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),oe=new oa({props:{warning:!0,$$slots:{default:[sn]},$$scope:{ctx:Y}}}),Fe=new J({props:{name:"pad",anchor:"transformers.YolosFeatureExtractor.pad",parameters:[{name:"pixel_values_list",val:": typing.List[ForwardRef('torch.Tensor')]"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"}],parametersDescription:[{anchor:"transformers.YolosFeatureExtractor.pad.pixel_values_list",description:`<strong>pixel_values_list</strong> (<code>List[torch.Tensor]</code>) &#x2014;
List of images (pixel values) to be padded. Each image should be a tensor of shape (C, H, W).`,name:"pixel_values_list"},{anchor:"transformers.YolosFeatureExtractor.pad.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/v4.24.0/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of NumPy arrays. If set to <code>&apos;pt&apos;</code>, return PyTorch <code>torch.Tensor</code>
objects.`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/yolos/feature_extraction_yolos.py#L625",returnDescription:`
<p>A <a
  href="/docs/transformers/v4.24.0/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following field:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/v4.24.0/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),ke=new J({props:{name:"post_process_object_detection",anchor:"transformers.YolosFeatureExtractor.post_process_object_detection",parameters:[{name:"outputs",val:""},{name:"threshold",val:": float = 0.5"},{name:"target_sizes",val:": typing.Union[transformers.utils.generic.TensorType, typing.List[typing.Tuple]] = None"}],parametersDescription:[{anchor:"transformers.YolosFeatureExtractor.post_process_object_detection.outputs",description:`<strong>outputs</strong> (<code>YolosObjectDetectionOutput</code>) &#x2014;
Raw outputs of the model.`,name:"outputs"},{anchor:"transformers.YolosFeatureExtractor.post_process_object_detection.threshold",description:`<strong>threshold</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Score threshold to keep object detection predictions.`,name:"threshold"},{anchor:"transformers.YolosFeatureExtractor.post_process_object_detection.target_sizes",description:`<strong>target_sizes</strong> (<code>torch.Tensor</code> or <code>List[Tuple[int, int]]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Tensor of shape <code>(batch_size, 2)</code> or list of tuples (<code>Tuple[int, int]</code>) containing the target size
(height, width) of each image in the batch. If left to None, predictions will not be resized.`,name:"target_sizes"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/yolos/feature_extraction_yolos.py#L703",returnDescription:`
<p>A list of dictionaries, each dictionary containing the scores, labels and boxes for an image
in the batch as predicted by the model.</p>
`,returnType:`
<p><code>List[Dict]</code></p>
`}}),Ce=new mt({}),De=new J({props:{name:"class transformers.YolosModel",anchor:"transformers.YolosModel",parameters:[{name:"config",val:": YolosConfig"},{name:"add_pooling_layer",val:": bool = True"}],parametersDescription:[{anchor:"transformers.YolosModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.24.0/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/v4.24.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/yolos/modeling_yolos.py#L600"}}),qe=new J({props:{name:"forward",anchor:"transformers.YolosModel.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"head_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.YolosModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/v4.24.0/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.YolosModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.YolosModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.YolosModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.YolosModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/v4.24.0/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/yolos/modeling_yolos.py#L628",returnDescription:`
<p>A <a
  href="/docs/transformers/v4.24.0/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/v4.24.0/en/model_doc/yolos#transformers.YolosConfig"
>YolosConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) after further processing
through the layers used for the auxiliary pretraining task. E.g. for BERT-family of models, this returns
the classification token after processing through a linear layer and a tanh activation function. The linear
layer weights are trained from the next sentence prediction (classification) objective during pretraining.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/v4.24.0/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),re=new oa({props:{$$slots:{default:[an]},$$scope:{ctx:Y}}}),ie=new sa({props:{anchor:"transformers.YolosModel.forward.example",$$slots:{default:[nn]},$$scope:{ctx:Y}}}),Me=new mt({}),Ae=new J({props:{name:"class transformers.YolosForObjectDetection",anchor:"transformers.YolosForObjectDetection",parameters:[{name:"config",val:": YolosConfig"}],parametersDescription:[{anchor:"transformers.YolosForObjectDetection.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.24.0/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/v4.24.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/yolos/modeling_yolos.py#L709"}}),Ne=new J({props:{name:"forward",anchor:"transformers.YolosForObjectDetection.forward",parameters:[{name:"pixel_values",val:": FloatTensor"},{name:"labels",val:": typing.Optional[typing.List[typing.Dict]] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.YolosForObjectDetection.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/v4.24.0/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.YolosForObjectDetection.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.YolosForObjectDetection.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.YolosForObjectDetection.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.YolosForObjectDetection.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/v4.24.0/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.YolosForObjectDetection.forward.labels",description:`<strong>labels</strong> (<code>List[Dict]</code> of len <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the bipartite matching loss. List of dicts, each dictionary containing at least the
following 2 keys: <code>&apos;class_labels&apos;</code> and <code>&apos;boxes&apos;</code> (the class labels and bounding boxes of an image in the
batch respectively). The class labels themselves should be a <code>torch.LongTensor</code> of len <code>(number of bounding boxes in the image,)</code> and the boxes a <code>torch.FloatTensor</code> of shape <code>(number of bounding boxes in the image, 4)</code>.`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/yolos/modeling_yolos.py#L736",returnDescription:`
<p>A <code>transformers.models.yolos.modeling_yolos.YolosObjectDetectionOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/v4.24.0/en/model_doc/yolos#transformers.YolosConfig"
>YolosConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> are provided)) \u2014 Total loss as a linear combination of a negative log-likehood (cross-entropy) for class prediction and a
bounding box loss. The latter is defined as a linear combination of the L1 loss and the generalized
scale-invariant IoU loss.</li>
<li><strong>loss_dict</strong> (<code>Dict</code>, <em>optional</em>) \u2014 A dictionary containing the individual losses. Useful for logging.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, num_classes + 1)</code>) \u2014 Classification logits (including no-object) for all queries.</li>
<li><strong>pred_boxes</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, 4)</code>) \u2014 Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These
values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding
possible padding). You can use <code>post_process()</code> to retrieve the unnormalized bounding
boxes.</li>
<li><strong>auxiliary_outputs</strong> (<code>list[Dict]</code>, <em>optional</em>) \u2014 Optional, only returned when auxilary losses are activated (i.e. <code>config.auxiliary_loss</code> is set to <code>True</code>)
and labels are provided. It is a list of dictionaries containing the two above keys (<code>logits</code> and
<code>pred_boxes</code>) for each decoder layer.</li>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) \u2014 Sequence of hidden-states at the output of the last layer of the decoder of the model.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of
the model at the output of each layer plus the optional initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`
<p><code>transformers.models.yolos.modeling_yolos.YolosObjectDetectionOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ce=new oa({props:{$$slots:{default:[rn]},$$scope:{ctx:Y}}}),de=new sa({props:{anchor:"transformers.YolosForObjectDetection.forward.example",$$slots:{default:[ln]},$$scope:{ctx:Y}}}),{c(){d=s("meta"),b=m(),g=s("h1"),f=s("a"),v=s("span"),y(l.$$.fragment),_=m(),D=s("span"),po=r("YOLOS"),Lt=m(),I=s("h2"),G=s("a"),pt=s("span"),y(ge.$$.fragment),fo=m(),ft=s("span"),uo=r("Overview"),qt=m(),q=s("p"),go=r("The YOLOS model was proposed in "),_e=s("a"),_o=r("You Only Look at One Sequence: Rethinking Transformer in Vision through Object Detection"),bo=r(` by Yuxin Fang, Bencheng Liao, Xinggang Wang, Jiemin Fang, Jiyang Qi, Rui Wu, Jianwei Niu, Wenyu Liu.
YOLOS proposes to just leverage the plain `),Be=s("a"),vo=r("Vision Transformer (ViT)"),yo=r(" for object detection, inspired by DETR. It turns out that a base-sized encoder-only Transformer can also achieve 42 AP on COCO, similar to DETR and much more complex frameworks such as Faster R-CNN."),Mt=m(),Ve=s("p"),wo=r("The abstract from the paper is the following:"),At=m(),Ue=s("p"),ut=s("em"),xo=r("Can Transformer perform 2D object- and region-level recognition from a pure sequence-to-sequence perspective with minimal knowledge about the 2D spatial structure? To answer this question, we present You Only Look at One Sequence (YOLOS), a series of object detection models based on the vanilla Vision Transformer with the fewest possible modifications, region priors, as well as inductive biases of the target task. We find that YOLOS pre-trained on the mid-sized ImageNet-1k dataset only can already achieve quite competitive performance on the challenging COCO object detection benchmark, e.g., YOLOS-Base directly adopted from BERT-Base architecture can obtain 42.0 box AP on COCO val. We also discuss the impacts as well as limitations of current pre-train schemes and model scaling strategies for Transformer in vision through YOLOS."),It=m(),He=s("p"),$o=r("Tips:"),St=m(),Q=s("ul"),P=s("li"),jo=r("One can use "),Je=s("a"),To=r("YolosFeatureExtractor"),Oo=r(" for preparing images (and optional targets) for the model. Contrary to "),Ge=s("a"),Yo=r("DETR"),Eo=r(", YOLOS doesn\u2019t require a "),gt=s("code"),Fo=r("pixel_mask"),ko=r(" to be created."),zo=m(),be=s("li"),Co=r("Demo notebooks (regarding inference and fine-tuning on custom data) can be found "),ve=s("a"),Do=r("here"),Po=r("."),Nt=m(),X=s("img"),Rt=m(),K=s("small"),Lo=r("YOLOS architecture. Taken from the "),Qe=s("a"),qo=r("original paper"),Mo=r("."),Wt=m(),M=s("p"),Ao=r("This model was contributed by "),ye=s("a"),Io=r("nielsr"),So=r(". The original code can be found "),we=s("a"),No=r("here"),Ro=r("."),Bt=m(),S=s("h2"),Z=s("a"),_t=s("span"),y(xe.$$.fragment),Wo=m(),bt=s("span"),Bo=r("YolosConfig"),Vt=m(),E=s("div"),y($e.$$.fragment),Vo=m(),N=s("p"),Uo=r("This is the configuration class to store the configuration of a "),Xe=s("a"),Ho=r("YolosModel"),Jo=r(`. It is used to instantiate a YOLOS
model according to the specified arguments, defining the model architecture. Instantiating a configuration with the
defaults will yield a similar configuration to that of the YOLOS
`),je=s("a"),Go=r("hustvl/yolos-base"),Qo=r(" architecture."),Xo=m(),R=s("p"),Ko=r("Configuration objects inherit from "),Ke=s("a"),Zo=r("PretrainedConfig"),es=r(` and can be used to control the model outputs. Read the
documentation from `),Ze=s("a"),ts=r("PretrainedConfig"),os=r(" for more information."),ss=m(),y(ee.$$.fragment),Ut=m(),W=s("h2"),te=s("a"),vt=s("span"),y(Te.$$.fragment),as=m(),yt=s("span"),ns=r("YolosFeatureExtractor"),Ht=m(),O=s("div"),y(Oe.$$.fragment),rs=m(),wt=s("p"),is=r("Constructs a YOLOS feature extractor."),ls=m(),Ye=s("p"),cs=r("This feature extractor inherits from "),et=s("a"),ds=r("FeatureExtractionMixin"),hs=r(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),ms=m(),A=s("div"),y(Ee.$$.fragment),ps=m(),xt=s("p"),fs=r(`Main method to prepare for the model one or several image(s) and optional annotations. Images are by default
padded up to the largest image in a batch.`),us=m(),y(oe.$$.fragment),gs=m(),se=s("div"),y(Fe.$$.fragment),_s=m(),$t=s("p"),bs=r("Pad images up to the largest image in a batch."),vs=m(),ae=s("div"),y(ke.$$.fragment),ys=m(),ze=s("p"),ws=r("Converts the output of "),tt=s("a"),xs=r("YolosForObjectDetection"),$s=r(` into the format expected by the COCO api. Only supports
PyTorch.`),Jt=m(),B=s("h2"),ne=s("a"),jt=s("span"),y(Ce.$$.fragment),js=m(),Tt=s("span"),Ts=r("YolosModel"),Gt=m(),L=s("div"),y(De.$$.fragment),Os=m(),Pe=s("p"),Ys=r(`The bare YOLOS Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Le=s("a"),Es=r("torch.nn.Module"),Fs=r(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ks=m(),k=s("div"),y(qe.$$.fragment),zs=m(),V=s("p"),Cs=r("The "),ot=s("a"),Ds=r("YolosModel"),Ps=r(" forward method, overrides the "),Ot=s("code"),Ls=r("__call__"),qs=r(" special method."),Ms=m(),y(re.$$.fragment),As=m(),y(ie.$$.fragment),Qt=m(),U=s("h2"),le=s("a"),Yt=s("span"),y(Me.$$.fragment),Is=m(),Et=s("span"),Ss=r("YolosForObjectDetection"),Xt=m(),F=s("div"),y(Ae.$$.fragment),Ns=m(),Ft=s("p"),Rs=r("YOLOS Model (consisting of a ViT encoder) with object detection heads on top, for tasks such as COCO detection."),Ws=m(),Ie=s("p"),Bs=r("This model is a PyTorch "),Se=s("a"),Vs=r("torch.nn.Module"),Us=r(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Hs=m(),z=s("div"),y(Ne.$$.fragment),Js=m(),H=s("p"),Gs=r("The "),st=s("a"),Qs=r("YolosForObjectDetection"),Xs=r(" forward method, overrides the "),kt=s("code"),Ks=r("__call__"),Zs=r(" special method."),ea=m(),y(ce.$$.fragment),ta=m(),y(de.$$.fragment),this.h()},l(t){const h=Za('[data-svelte="svelte-1phssyn"]',document.head);d=a(h,"META",{name:!0,content:!0}),h.forEach(o),b=p(t),g=a(t,"H1",{class:!0});var Re=n(g);f=a(Re,"A",{id:!0,class:!0,href:!0});var zt=n(f);v=a(zt,"SPAN",{});var Ct=n(v);w(l.$$.fragment,Ct),Ct.forEach(o),zt.forEach(o),_=p(Re),D=a(Re,"SPAN",{});var Dt=n(D);po=i(Dt,"YOLOS"),Dt.forEach(o),Re.forEach(o),Lt=p(t),I=a(t,"H2",{class:!0});var We=n(I);G=a(We,"A",{id:!0,class:!0,href:!0});var Pt=n(G);pt=a(Pt,"SPAN",{});var ia=n(pt);w(ge.$$.fragment,ia),ia.forEach(o),Pt.forEach(o),fo=p(We),ft=a(We,"SPAN",{});var la=n(ft);uo=i(la,"Overview"),la.forEach(o),We.forEach(o),qt=p(t),q=a(t,"P",{});var at=n(q);go=i(at,"The YOLOS model was proposed in "),_e=a(at,"A",{href:!0,rel:!0});var ca=n(_e);_o=i(ca,"You Only Look at One Sequence: Rethinking Transformer in Vision through Object Detection"),ca.forEach(o),bo=i(at,` by Yuxin Fang, Bencheng Liao, Xinggang Wang, Jiemin Fang, Jiyang Qi, Rui Wu, Jianwei Niu, Wenyu Liu.
YOLOS proposes to just leverage the plain `),Be=a(at,"A",{href:!0});var da=n(Be);vo=i(da,"Vision Transformer (ViT)"),da.forEach(o),yo=i(at," for object detection, inspired by DETR. It turns out that a base-sized encoder-only Transformer can also achieve 42 AP on COCO, similar to DETR and much more complex frameworks such as Faster R-CNN."),at.forEach(o),Mt=p(t),Ve=a(t,"P",{});var ha=n(Ve);wo=i(ha,"The abstract from the paper is the following:"),ha.forEach(o),At=p(t),Ue=a(t,"P",{});var ma=n(Ue);ut=a(ma,"EM",{});var pa=n(ut);xo=i(pa,"Can Transformer perform 2D object- and region-level recognition from a pure sequence-to-sequence perspective with minimal knowledge about the 2D spatial structure? To answer this question, we present You Only Look at One Sequence (YOLOS), a series of object detection models based on the vanilla Vision Transformer with the fewest possible modifications, region priors, as well as inductive biases of the target task. We find that YOLOS pre-trained on the mid-sized ImageNet-1k dataset only can already achieve quite competitive performance on the challenging COCO object detection benchmark, e.g., YOLOS-Base directly adopted from BERT-Base architecture can obtain 42.0 box AP on COCO val. We also discuss the impacts as well as limitations of current pre-train schemes and model scaling strategies for Transformer in vision through YOLOS."),pa.forEach(o),ma.forEach(o),It=p(t),He=a(t,"P",{});var fa=n(He);$o=i(fa,"Tips:"),fa.forEach(o),St=p(t),Q=a(t,"UL",{});var Zt=n(Q);P=a(Zt,"LI",{});var he=n(P);jo=i(he,"One can use "),Je=a(he,"A",{href:!0});var ua=n(Je);To=i(ua,"YolosFeatureExtractor"),ua.forEach(o),Oo=i(he," for preparing images (and optional targets) for the model. Contrary to "),Ge=a(he,"A",{href:!0});var ga=n(Ge);Yo=i(ga,"DETR"),ga.forEach(o),Eo=i(he,", YOLOS doesn\u2019t require a "),gt=a(he,"CODE",{});var _a=n(gt);Fo=i(_a,"pixel_mask"),_a.forEach(o),ko=i(he," to be created."),he.forEach(o),zo=p(Zt),be=a(Zt,"LI",{});var eo=n(be);Co=i(eo,"Demo notebooks (regarding inference and fine-tuning on custom data) can be found "),ve=a(eo,"A",{href:!0,rel:!0});var ba=n(ve);Do=i(ba,"here"),ba.forEach(o),Po=i(eo,"."),eo.forEach(o),Zt.forEach(o),Nt=p(t),X=a(t,"IMG",{src:!0,alt:!0,width:!0}),Rt=p(t),K=a(t,"SMALL",{});var to=n(K);Lo=i(to,"YOLOS architecture. Taken from the "),Qe=a(to,"A",{href:!0});var va=n(Qe);qo=i(va,"original paper"),va.forEach(o),Mo=i(to,"."),to.forEach(o),Wt=p(t),M=a(t,"P",{});var nt=n(M);Ao=i(nt,"This model was contributed by "),ye=a(nt,"A",{href:!0,rel:!0});var ya=n(ye);Io=i(ya,"nielsr"),ya.forEach(o),So=i(nt,". The original code can be found "),we=a(nt,"A",{href:!0,rel:!0});var wa=n(we);No=i(wa,"here"),wa.forEach(o),Ro=i(nt,"."),nt.forEach(o),Bt=p(t),S=a(t,"H2",{class:!0});var oo=n(S);Z=a(oo,"A",{id:!0,class:!0,href:!0});var xa=n(Z);_t=a(xa,"SPAN",{});var $a=n(_t);w(xe.$$.fragment,$a),$a.forEach(o),xa.forEach(o),Wo=p(oo),bt=a(oo,"SPAN",{});var ja=n(bt);Bo=i(ja,"YolosConfig"),ja.forEach(o),oo.forEach(o),Vt=p(t),E=a(t,"DIV",{class:!0});var me=n(E);w($e.$$.fragment,me),Vo=p(me),N=a(me,"P",{});var rt=n(N);Uo=i(rt,"This is the configuration class to store the configuration of a "),Xe=a(rt,"A",{href:!0});var Ta=n(Xe);Ho=i(Ta,"YolosModel"),Ta.forEach(o),Jo=i(rt,`. It is used to instantiate a YOLOS
model according to the specified arguments, defining the model architecture. Instantiating a configuration with the
defaults will yield a similar configuration to that of the YOLOS
`),je=a(rt,"A",{href:!0,rel:!0});var Oa=n(je);Go=i(Oa,"hustvl/yolos-base"),Oa.forEach(o),Qo=i(rt," architecture."),rt.forEach(o),Xo=p(me),R=a(me,"P",{});var it=n(R);Ko=i(it,"Configuration objects inherit from "),Ke=a(it,"A",{href:!0});var Ya=n(Ke);Zo=i(Ya,"PretrainedConfig"),Ya.forEach(o),es=i(it,` and can be used to control the model outputs. Read the
documentation from `),Ze=a(it,"A",{href:!0});var Ea=n(Ze);ts=i(Ea,"PretrainedConfig"),Ea.forEach(o),os=i(it," for more information."),it.forEach(o),ss=p(me),w(ee.$$.fragment,me),me.forEach(o),Ut=p(t),W=a(t,"H2",{class:!0});var so=n(W);te=a(so,"A",{id:!0,class:!0,href:!0});var Fa=n(te);vt=a(Fa,"SPAN",{});var ka=n(vt);w(Te.$$.fragment,ka),ka.forEach(o),Fa.forEach(o),as=p(so),yt=a(so,"SPAN",{});var za=n(yt);ns=i(za,"YolosFeatureExtractor"),za.forEach(o),so.forEach(o),Ht=p(t),O=a(t,"DIV",{class:!0});var C=n(O);w(Oe.$$.fragment,C),rs=p(C),wt=a(C,"P",{});var Ca=n(wt);is=i(Ca,"Constructs a YOLOS feature extractor."),Ca.forEach(o),ls=p(C),Ye=a(C,"P",{});var ao=n(Ye);cs=i(ao,"This feature extractor inherits from "),et=a(ao,"A",{href:!0});var Da=n(et);ds=i(Da,"FeatureExtractionMixin"),Da.forEach(o),hs=i(ao,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),ao.forEach(o),ms=p(C),A=a(C,"DIV",{class:!0});var lt=n(A);w(Ee.$$.fragment,lt),ps=p(lt),xt=a(lt,"P",{});var Pa=n(xt);fs=i(Pa,`Main method to prepare for the model one or several image(s) and optional annotations. Images are by default
padded up to the largest image in a batch.`),Pa.forEach(o),us=p(lt),w(oe.$$.fragment,lt),lt.forEach(o),gs=p(C),se=a(C,"DIV",{class:!0});var no=n(se);w(Fe.$$.fragment,no),_s=p(no),$t=a(no,"P",{});var La=n($t);bs=i(La,"Pad images up to the largest image in a batch."),La.forEach(o),no.forEach(o),vs=p(C),ae=a(C,"DIV",{class:!0});var ro=n(ae);w(ke.$$.fragment,ro),ys=p(ro),ze=a(ro,"P",{});var io=n(ze);ws=i(io,"Converts the output of "),tt=a(io,"A",{href:!0});var qa=n(tt);xs=i(qa,"YolosForObjectDetection"),qa.forEach(o),$s=i(io,` into the format expected by the COCO api. Only supports
PyTorch.`),io.forEach(o),ro.forEach(o),C.forEach(o),Jt=p(t),B=a(t,"H2",{class:!0});var lo=n(B);ne=a(lo,"A",{id:!0,class:!0,href:!0});var Ma=n(ne);jt=a(Ma,"SPAN",{});var Aa=n(jt);w(Ce.$$.fragment,Aa),Aa.forEach(o),Ma.forEach(o),js=p(lo),Tt=a(lo,"SPAN",{});var Ia=n(Tt);Ts=i(Ia,"YolosModel"),Ia.forEach(o),lo.forEach(o),Gt=p(t),L=a(t,"DIV",{class:!0});var ct=n(L);w(De.$$.fragment,ct),Os=p(ct),Pe=a(ct,"P",{});var co=n(Pe);Ys=i(co,`The bare YOLOS Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Le=a(co,"A",{href:!0,rel:!0});var Sa=n(Le);Es=i(Sa,"torch.nn.Module"),Sa.forEach(o),Fs=i(co,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),co.forEach(o),ks=p(ct),k=a(ct,"DIV",{class:!0});var pe=n(k);w(qe.$$.fragment,pe),zs=p(pe),V=a(pe,"P",{});var dt=n(V);Cs=i(dt,"The "),ot=a(dt,"A",{href:!0});var Na=n(ot);Ds=i(Na,"YolosModel"),Na.forEach(o),Ps=i(dt," forward method, overrides the "),Ot=a(dt,"CODE",{});var Ra=n(Ot);Ls=i(Ra,"__call__"),Ra.forEach(o),qs=i(dt," special method."),dt.forEach(o),Ms=p(pe),w(re.$$.fragment,pe),As=p(pe),w(ie.$$.fragment,pe),pe.forEach(o),ct.forEach(o),Qt=p(t),U=a(t,"H2",{class:!0});var ho=n(U);le=a(ho,"A",{id:!0,class:!0,href:!0});var Wa=n(le);Yt=a(Wa,"SPAN",{});var Ba=n(Yt);w(Me.$$.fragment,Ba),Ba.forEach(o),Wa.forEach(o),Is=p(ho),Et=a(ho,"SPAN",{});var Va=n(Et);Ss=i(Va,"YolosForObjectDetection"),Va.forEach(o),ho.forEach(o),Xt=p(t),F=a(t,"DIV",{class:!0});var fe=n(F);w(Ae.$$.fragment,fe),Ns=p(fe),Ft=a(fe,"P",{});var Ua=n(Ft);Rs=i(Ua,"YOLOS Model (consisting of a ViT encoder) with object detection heads on top, for tasks such as COCO detection."),Ua.forEach(o),Ws=p(fe),Ie=a(fe,"P",{});var mo=n(Ie);Bs=i(mo,"This model is a PyTorch "),Se=a(mo,"A",{href:!0,rel:!0});var Ha=n(Se);Vs=i(Ha,"torch.nn.Module"),Ha.forEach(o),Us=i(mo,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),mo.forEach(o),Hs=p(fe),z=a(fe,"DIV",{class:!0});var ue=n(z);w(Ne.$$.fragment,ue),Js=p(ue),H=a(ue,"P",{});var ht=n(H);Gs=i(ht,"The "),st=a(ht,"A",{href:!0});var Ja=n(st);Qs=i(Ja,"YolosForObjectDetection"),Ja.forEach(o),Xs=i(ht," forward method, overrides the "),kt=a(ht,"CODE",{});var Ga=n(kt);Ks=i(Ga,"__call__"),Ga.forEach(o),Zs=i(ht," special method."),ht.forEach(o),ea=p(ue),w(ce.$$.fragment,ue),ta=p(ue),w(de.$$.fragment,ue),ue.forEach(o),fe.forEach(o),this.h()},h(){c(d,"name","hf:doc:metadata"),c(d,"content",JSON.stringify(dn)),c(f,"id","yolos"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#yolos"),c(g,"class","relative group"),c(G,"id","overview"),c(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G,"href","#overview"),c(I,"class","relative group"),c(_e,"href","https://arxiv.org/abs/2106.00666"),c(_e,"rel","nofollow"),c(Be,"href","vit"),c(Je,"href","/docs/transformers/v4.24.0/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ge,"href","detr"),c(ve,"href","https://github.com/NielsRogge/Transformers-Tutorials/tree/master/YOLOS"),c(ve,"rel","nofollow"),en(X.src,ra="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/yolos_architecture.png")||c(X,"src",ra),c(X,"alt","drawing"),c(X,"width","600"),c(Qe,"href","https://arxiv.org/abs/2106.00666"),c(ye,"href","https://huggingface.co/nielsr"),c(ye,"rel","nofollow"),c(we,"href","https://github.com/hustvl/YOLOS"),c(we,"rel","nofollow"),c(Z,"id","transformers.YolosConfig"),c(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z,"href","#transformers.YolosConfig"),c(S,"class","relative group"),c(Xe,"href","/docs/transformers/v4.24.0/en/model_doc/yolos#transformers.YolosModel"),c(je,"href","https://huggingface.co/hustvl/yolos-base"),c(je,"rel","nofollow"),c(Ke,"href","/docs/transformers/v4.24.0/en/main_classes/configuration#transformers.PretrainedConfig"),c(Ze,"href","/docs/transformers/v4.24.0/en/main_classes/configuration#transformers.PretrainedConfig"),c(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(te,"id","transformers.YolosFeatureExtractor"),c(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(te,"href","#transformers.YolosFeatureExtractor"),c(W,"class","relative group"),c(et,"href","/docs/transformers/v4.24.0/en/internal/image_processing_utils#transformers.FeatureExtractionMixin"),c(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tt,"href","/docs/transformers/v4.24.0/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ne,"id","transformers.YolosModel"),c(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ne,"href","#transformers.YolosModel"),c(B,"class","relative group"),c(Le,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Le,"rel","nofollow"),c(ot,"href","/docs/transformers/v4.24.0/en/model_doc/yolos#transformers.YolosModel"),c(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(le,"id","transformers.YolosForObjectDetection"),c(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(le,"href","#transformers.YolosForObjectDetection"),c(U,"class","relative group"),c(Se,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Se,"rel","nofollow"),c(st,"href","/docs/transformers/v4.24.0/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,h){e(document.head,d),u(t,b,h),u(t,g,h),e(g,f),e(f,v),x(l,v,null),e(g,_),e(g,D),e(D,po),u(t,Lt,h),u(t,I,h),e(I,G),e(G,pt),x(ge,pt,null),e(I,fo),e(I,ft),e(ft,uo),u(t,qt,h),u(t,q,h),e(q,go),e(q,_e),e(_e,_o),e(q,bo),e(q,Be),e(Be,vo),e(q,yo),u(t,Mt,h),u(t,Ve,h),e(Ve,wo),u(t,At,h),u(t,Ue,h),e(Ue,ut),e(ut,xo),u(t,It,h),u(t,He,h),e(He,$o),u(t,St,h),u(t,Q,h),e(Q,P),e(P,jo),e(P,Je),e(Je,To),e(P,Oo),e(P,Ge),e(Ge,Yo),e(P,Eo),e(P,gt),e(gt,Fo),e(P,ko),e(Q,zo),e(Q,be),e(be,Co),e(be,ve),e(ve,Do),e(be,Po),u(t,Nt,h),u(t,X,h),u(t,Rt,h),u(t,K,h),e(K,Lo),e(K,Qe),e(Qe,qo),e(K,Mo),u(t,Wt,h),u(t,M,h),e(M,Ao),e(M,ye),e(ye,Io),e(M,So),e(M,we),e(we,No),e(M,Ro),u(t,Bt,h),u(t,S,h),e(S,Z),e(Z,_t),x(xe,_t,null),e(S,Wo),e(S,bt),e(bt,Bo),u(t,Vt,h),u(t,E,h),x($e,E,null),e(E,Vo),e(E,N),e(N,Uo),e(N,Xe),e(Xe,Ho),e(N,Jo),e(N,je),e(je,Go),e(N,Qo),e(E,Xo),e(E,R),e(R,Ko),e(R,Ke),e(Ke,Zo),e(R,es),e(R,Ze),e(Ze,ts),e(R,os),e(E,ss),x(ee,E,null),u(t,Ut,h),u(t,W,h),e(W,te),e(te,vt),x(Te,vt,null),e(W,as),e(W,yt),e(yt,ns),u(t,Ht,h),u(t,O,h),x(Oe,O,null),e(O,rs),e(O,wt),e(wt,is),e(O,ls),e(O,Ye),e(Ye,cs),e(Ye,et),e(et,ds),e(Ye,hs),e(O,ms),e(O,A),x(Ee,A,null),e(A,ps),e(A,xt),e(xt,fs),e(A,us),x(oe,A,null),e(O,gs),e(O,se),x(Fe,se,null),e(se,_s),e(se,$t),e($t,bs),e(O,vs),e(O,ae),x(ke,ae,null),e(ae,ys),e(ae,ze),e(ze,ws),e(ze,tt),e(tt,xs),e(ze,$s),u(t,Jt,h),u(t,B,h),e(B,ne),e(ne,jt),x(Ce,jt,null),e(B,js),e(B,Tt),e(Tt,Ts),u(t,Gt,h),u(t,L,h),x(De,L,null),e(L,Os),e(L,Pe),e(Pe,Ys),e(Pe,Le),e(Le,Es),e(Pe,Fs),e(L,ks),e(L,k),x(qe,k,null),e(k,zs),e(k,V),e(V,Cs),e(V,ot),e(ot,Ds),e(V,Ps),e(V,Ot),e(Ot,Ls),e(V,qs),e(k,Ms),x(re,k,null),e(k,As),x(ie,k,null),u(t,Qt,h),u(t,U,h),e(U,le),e(le,Yt),x(Me,Yt,null),e(U,Is),e(U,Et),e(Et,Ss),u(t,Xt,h),u(t,F,h),x(Ae,F,null),e(F,Ns),e(F,Ft),e(Ft,Rs),e(F,Ws),e(F,Ie),e(Ie,Bs),e(Ie,Se),e(Se,Vs),e(Ie,Us),e(F,Hs),e(F,z),x(Ne,z,null),e(z,Js),e(z,H),e(H,Gs),e(H,st),e(st,Qs),e(H,Xs),e(H,kt),e(kt,Ks),e(H,Zs),e(z,ea),x(ce,z,null),e(z,ta),x(de,z,null),Kt=!0},p(t,[h]){const Re={};h&2&&(Re.$$scope={dirty:h,ctx:t}),ee.$set(Re);const zt={};h&2&&(zt.$$scope={dirty:h,ctx:t}),oe.$set(zt);const Ct={};h&2&&(Ct.$$scope={dirty:h,ctx:t}),re.$set(Ct);const Dt={};h&2&&(Dt.$$scope={dirty:h,ctx:t}),ie.$set(Dt);const We={};h&2&&(We.$$scope={dirty:h,ctx:t}),ce.$set(We);const Pt={};h&2&&(Pt.$$scope={dirty:h,ctx:t}),de.$set(Pt)},i(t){Kt||($(l.$$.fragment,t),$(ge.$$.fragment,t),$(xe.$$.fragment,t),$($e.$$.fragment,t),$(ee.$$.fragment,t),$(Te.$$.fragment,t),$(Oe.$$.fragment,t),$(Ee.$$.fragment,t),$(oe.$$.fragment,t),$(Fe.$$.fragment,t),$(ke.$$.fragment,t),$(Ce.$$.fragment,t),$(De.$$.fragment,t),$(qe.$$.fragment,t),$(re.$$.fragment,t),$(ie.$$.fragment,t),$(Me.$$.fragment,t),$(Ae.$$.fragment,t),$(Ne.$$.fragment,t),$(ce.$$.fragment,t),$(de.$$.fragment,t),Kt=!0)},o(t){j(l.$$.fragment,t),j(ge.$$.fragment,t),j(xe.$$.fragment,t),j($e.$$.fragment,t),j(ee.$$.fragment,t),j(Te.$$.fragment,t),j(Oe.$$.fragment,t),j(Ee.$$.fragment,t),j(oe.$$.fragment,t),j(Fe.$$.fragment,t),j(ke.$$.fragment,t),j(Ce.$$.fragment,t),j(De.$$.fragment,t),j(qe.$$.fragment,t),j(re.$$.fragment,t),j(ie.$$.fragment,t),j(Me.$$.fragment,t),j(Ae.$$.fragment,t),j(Ne.$$.fragment,t),j(ce.$$.fragment,t),j(de.$$.fragment,t),Kt=!1},d(t){o(d),t&&o(b),t&&o(g),T(l),t&&o(Lt),t&&o(I),T(ge),t&&o(qt),t&&o(q),t&&o(Mt),t&&o(Ve),t&&o(At),t&&o(Ue),t&&o(It),t&&o(He),t&&o(St),t&&o(Q),t&&o(Nt),t&&o(X),t&&o(Rt),t&&o(K),t&&o(Wt),t&&o(M),t&&o(Bt),t&&o(S),T(xe),t&&o(Vt),t&&o(E),T($e),T(ee),t&&o(Ut),t&&o(W),T(Te),t&&o(Ht),t&&o(O),T(Oe),T(Ee),T(oe),T(Fe),T(ke),t&&o(Jt),t&&o(B),T(Ce),t&&o(Gt),t&&o(L),T(De),T(qe),T(re),T(ie),t&&o(Qt),t&&o(U),T(Me),t&&o(Xt),t&&o(F),T(Ae),T(Ne),T(ce),T(de)}}}const dn={local:"yolos",sections:[{local:"overview",title:"Overview"},{local:"transformers.YolosConfig",title:"YolosConfig"},{local:"transformers.YolosFeatureExtractor",title:"YolosFeatureExtractor"},{local:"transformers.YolosModel",title:"YolosModel"},{local:"transformers.YolosForObjectDetection",title:"YolosForObjectDetection"}],title:"YOLOS"};function hn(Y){return tn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class bn extends Qa{constructor(d){super();Xa(this,d,hn,cn,Ka,{})}}export{bn as default,dn as metadata};
