import{S as cn,i as fn,s as mn,e as r,k as p,w as $,t as a,M as hn,c as n,d as t,m as u,a as l,x as w,h as s,b as f,G as e,g as v,y as T,q as y,o as k,B as F,v as pn,L as ko}from"../../chunks/vendor-hf-doc-builder.js";import{T as Zt}from"../../chunks/Tip-hf-doc-builder.js";import{D as be}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Fo}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as wt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as yo}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function un(j){let d,C,h,c,_;return c=new Fo({props:{code:`from transformers import CvtConfig, CvtModel

# Initializing a Cvt msft/cvt style configuration
configuration = CvtConfig()

# Initializing a model (with random weights) from the msft/cvt style configuration
model = CvtModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CvtConfig, CvtModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a Cvt msft/cvt style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = CvtConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model (with random weights) from the msft/cvt style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CvtModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){d=r("p"),C=a("Example:"),h=p(),$(c.$$.fragment)},l(i){d=n(i,"P",{});var m=l(d);C=s(m,"Example:"),m.forEach(t),h=u(i),w(c.$$.fragment,i)},m(i,m){v(i,d,m),e(d,C),v(i,h,m),T(c,i,m),_=!0},p:ko,i(i){_||(y(c.$$.fragment,i),_=!0)},o(i){k(c.$$.fragment,i),_=!1},d(i){i&&t(d),i&&t(h),F(c,i)}}}function gn(j){let d,C,h,c,_;return{c(){d=r("p"),C=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),h=r("code"),c=a("Module"),_=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(i){d=n(i,"P",{});var m=l(d);C=s(m,"Although the recipe for forward pass needs to be defined within this function, one should call the "),h=n(m,"CODE",{});var E=l(h);c=s(E,"Module"),E.forEach(t),_=s(m,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),m.forEach(t)},m(i,m){v(i,d,m),e(d,C),e(d,h),e(h,c),e(d,_)},d(i){i&&t(d)}}}function vn(j){let d,C,h,c,_;return c=new Fo({props:{code:`from transformers import AutoFeatureExtractor, CvtModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = AutoFeatureExtractor.from_pretrained("microsoft/cvt-13")
model = CvtModel.from_pretrained("microsoft/cvt-13")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, CvtModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;microsoft/cvt-13&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CvtModel.from_pretrained(<span class="hljs-string">&quot;microsoft/cvt-13&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">384</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>]`}}),{c(){d=r("p"),C=a("Example:"),h=p(),$(c.$$.fragment)},l(i){d=n(i,"P",{});var m=l(d);C=s(m,"Example:"),m.forEach(t),h=u(i),w(c.$$.fragment,i)},m(i,m){v(i,d,m),e(d,C),v(i,h,m),T(c,i,m),_=!0},p:ko,i(i){_||(y(c.$$.fragment,i),_=!0)},o(i){k(c.$$.fragment,i),_=!1},d(i){i&&t(d),i&&t(h),F(c,i)}}}function _n(j){let d,C,h,c,_;return{c(){d=r("p"),C=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),h=r("code"),c=a("Module"),_=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(i){d=n(i,"P",{});var m=l(d);C=s(m,"Although the recipe for forward pass needs to be defined within this function, one should call the "),h=n(m,"CODE",{});var E=l(h);c=s(E,"Module"),E.forEach(t),_=s(m,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),m.forEach(t)},m(i,m){v(i,d,m),e(d,C),e(d,h),e(h,c),e(d,_)},d(i){i&&t(d)}}}function Cn(j){let d,C,h,c,_;return c=new Fo({props:{code:`from transformers import AutoFeatureExtractor, CvtForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = AutoFeatureExtractor.from_pretrained("microsoft/cvt-13")
model = CvtForImageClassification.from_pretrained("microsoft/cvt-13")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, CvtForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;microsoft/cvt-13&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CvtForImageClassification.from_pretrained(<span class="hljs-string">&quot;microsoft/cvt-13&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){d=r("p"),C=a("Example:"),h=p(),$(c.$$.fragment)},l(i){d=n(i,"P",{});var m=l(d);C=s(m,"Example:"),m.forEach(t),h=u(i),w(c.$$.fragment,i)},m(i,m){v(i,d,m),e(d,C),v(i,h,m),T(c,i,m),_=!0},p:ko,i(i){_||(y(c.$$.fragment,i),_=!0)},o(i){k(c.$$.fragment,i),_=!1},d(i){i&&t(d),i&&t(h),F(c,i)}}}function bn(j){let d,C,h,c,_,i,m,E,G,V,x,z,P,O,J,A,Q,H;return{c(){d=r("p"),C=a("TF 2.0 models accepts two formats as inputs:"),h=p(),c=r("ul"),_=r("li"),i=a("having all inputs as keyword arguments (like PyTorch models), or"),m=p(),E=r("li"),G=a("having all inputs as a list, tuple or dict in the first positional arguments."),V=p(),x=r("p"),z=a("This second option is useful when using "),P=r("code"),O=a("tf.keras.Model.fit"),J=a(` method which currently requires having all the
tensors in the first argument of the model call function: `),A=r("code"),Q=a("model(inputs)"),H=a(".")},l(b){d=n(b,"P",{});var I=l(d);C=s(I,"TF 2.0 models accepts two formats as inputs:"),I.forEach(t),h=u(b),c=n(b,"UL",{});var q=l(c);_=n(q,"LI",{});var ae=l(_);i=s(ae,"having all inputs as keyword arguments (like PyTorch models), or"),ae.forEach(t),m=u(q),E=n(q,"LI",{});var se=l(E);G=s(se,"having all inputs as a list, tuple or dict in the first positional arguments."),se.forEach(t),q.forEach(t),V=u(b),x=n(b,"P",{});var M=l(x);z=s(M,"This second option is useful when using "),P=n(M,"CODE",{});var re=l(P);O=s(re,"tf.keras.Model.fit"),re.forEach(t),J=s(M,` method which currently requires having all the
tensors in the first argument of the model call function: `),A=n(M,"CODE",{});var ne=l(A);Q=s(ne,"model(inputs)"),ne.forEach(t),H=s(M,"."),M.forEach(t)},m(b,I){v(b,d,I),e(d,C),v(b,h,I),v(b,c,I),e(c,_),e(_,i),e(c,m),e(c,E),e(E,G),v(b,V,I),v(b,x,I),e(x,z),e(x,P),e(P,O),e(x,J),e(x,A),e(A,Q),e(x,H)},d(b){b&&t(d),b&&t(h),b&&t(c),b&&t(V),b&&t(x)}}}function $n(j){let d,C,h,c,_;return{c(){d=r("p"),C=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),h=r("code"),c=a("Module"),_=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(i){d=n(i,"P",{});var m=l(d);C=s(m,"Although the recipe for forward pass needs to be defined within this function, one should call the "),h=n(m,"CODE",{});var E=l(h);c=s(E,"Module"),E.forEach(t),_=s(m,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),m.forEach(t)},m(i,m){v(i,d,m),e(d,C),e(d,h),e(h,c),e(d,_)},d(i){i&&t(d)}}}function wn(j){let d,C,h,c,_;return c=new Fo({props:{code:`from transformers import AutoFeatureExtractor, TFCvtModel
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = AutoFeatureExtractor.from_pretrained("microsoft/cvt-13")
model = TFCvtModel.from_pretrained("microsoft/cvt-13")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs)
last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, TFCvtModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;microsoft/cvt-13&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFCvtModel.from_pretrained(<span class="hljs-string">&quot;microsoft/cvt-13&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){d=r("p"),C=a("Examples:"),h=p(),$(c.$$.fragment)},l(i){d=n(i,"P",{});var m=l(d);C=s(m,"Examples:"),m.forEach(t),h=u(i),w(c.$$.fragment,i)},m(i,m){v(i,d,m),e(d,C),v(i,h,m),T(c,i,m),_=!0},p:ko,i(i){_||(y(c.$$.fragment,i),_=!0)},o(i){k(c.$$.fragment,i),_=!1},d(i){i&&t(d),i&&t(h),F(c,i)}}}function Tn(j){let d,C,h,c,_,i,m,E,G,V,x,z,P,O,J,A,Q,H;return{c(){d=r("p"),C=a("TF 2.0 models accepts two formats as inputs:"),h=p(),c=r("ul"),_=r("li"),i=a("having all inputs as keyword arguments (like PyTorch models), or"),m=p(),E=r("li"),G=a("having all inputs as a list, tuple or dict in the first positional arguments."),V=p(),x=r("p"),z=a("This second option is useful when using "),P=r("code"),O=a("tf.keras.Model.fit"),J=a(` method which currently requires having all the
tensors in the first argument of the model call function: `),A=r("code"),Q=a("model(inputs)"),H=a(".")},l(b){d=n(b,"P",{});var I=l(d);C=s(I,"TF 2.0 models accepts two formats as inputs:"),I.forEach(t),h=u(b),c=n(b,"UL",{});var q=l(c);_=n(q,"LI",{});var ae=l(_);i=s(ae,"having all inputs as keyword arguments (like PyTorch models), or"),ae.forEach(t),m=u(q),E=n(q,"LI",{});var se=l(E);G=s(se,"having all inputs as a list, tuple or dict in the first positional arguments."),se.forEach(t),q.forEach(t),V=u(b),x=n(b,"P",{});var M=l(x);z=s(M,"This second option is useful when using "),P=n(M,"CODE",{});var re=l(P);O=s(re,"tf.keras.Model.fit"),re.forEach(t),J=s(M,` method which currently requires having all the
tensors in the first argument of the model call function: `),A=n(M,"CODE",{});var ne=l(A);Q=s(ne,"model(inputs)"),ne.forEach(t),H=s(M,"."),M.forEach(t)},m(b,I){v(b,d,I),e(d,C),v(b,h,I),v(b,c,I),e(c,_),e(_,i),e(c,m),e(c,E),e(E,G),v(b,V,I),v(b,x,I),e(x,z),e(x,P),e(P,O),e(x,J),e(x,A),e(A,Q),e(x,H)},d(b){b&&t(d),b&&t(h),b&&t(c),b&&t(V),b&&t(x)}}}function yn(j){let d,C,h,c,_;return{c(){d=r("p"),C=a("Although the recipe for forward pass needs to be defined within this function, one should call the "),h=r("code"),c=a("Module"),_=a(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(i){d=n(i,"P",{});var m=l(d);C=s(m,"Although the recipe for forward pass needs to be defined within this function, one should call the "),h=n(m,"CODE",{});var E=l(h);c=s(E,"Module"),E.forEach(t),_=s(m,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),m.forEach(t)},m(i,m){v(i,d,m),e(d,C),e(d,h),e(h,c),e(d,_)},d(i){i&&t(d)}}}function kn(j){let d,C,h,c,_;return c=new Fo({props:{code:`from transformers import AutoFeatureExtractor, TFCvtForImageClassification
import tensorflow as tf
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = AutoFeatureExtractor.from_pretrained("microsoft/cvt-13")
model = TFCvtForImageClassification.from_pretrained("microsoft/cvt-13")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs)
logits = outputs.logits
# model predicts one of the 1000 ImageNet classes
predicted_class_idx = tf.math.argmax(logits, axis=-1)[0]
print("Predicted class:", model.config.id2label[int(predicted_class_idx)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, TFCvtForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;microsoft/cvt-13&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFCvtForImageClassification.from_pretrained(<span class="hljs-string">&quot;microsoft/cvt-13&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_idx = tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Predicted class:&quot;</span>, model.config.id2label[<span class="hljs-built_in">int</span>(predicted_class_idx)])`}}),{c(){d=r("p"),C=a("Examples:"),h=p(),$(c.$$.fragment)},l(i){d=n(i,"P",{});var m=l(d);C=s(m,"Examples:"),m.forEach(t),h=u(i),w(c.$$.fragment,i)},m(i,m){v(i,d,m),e(d,C),v(i,h,m),T(c,i,m),_=!0},p:ko,i(i){_||(y(c.$$.fragment,i),_=!0)},o(i){k(c.$$.fragment,i),_=!1},d(i){i&&t(d),i&&t(h),F(c,i)}}}function Fn(j){let d,C,h,c,_,i,m,E,G,V,x,z,P,O,J,A,Q,H,b,I,q,ae,se,M,re,ne,xo,Tt,ta,Eo,yt,Gt,oa,jo,kt,aa,Io,te,He,sa,Ft,ra,na,ia,D,la,Re,da,ca,xt,fa,ma,Et,ha,pa,jt,ua,ga,It,va,_a,Ca,ie,ba,Ue,$a,wa,Be,Ta,ya,Mo,oe,ka,Ke,Fa,xa,Xe,Ea,ja,Po,le,$e,Jt,Ye,Ia,Qt,Ma,Ao,S,Ze,Pa,de,Aa,Mt,qa,Na,Ge,La,za,Oa,ce,Da,Pt,Va,Sa,At,Wa,Ha,Ra,we,qo,fe,Te,eo,Je,Ua,to,Ba,No,ee,Qe,Ka,et,Xa,tt,Ya,Za,Ga,R,ot,Ja,me,Qa,qt,es,ts,oo,os,as,ss,ye,rs,ke,Lo,he,Fe,ao,at,ns,so,is,zo,W,st,ls,ro,ds,cs,rt,fs,nt,ms,hs,ps,U,it,us,pe,gs,Nt,vs,_s,no,Cs,bs,$s,xe,ws,Ee,Oo,ue,je,io,lt,Ts,lo,ys,Do,N,dt,ks,co,Fs,xs,ct,Es,Lt,js,Is,Ms,ft,Ps,mt,As,qs,Ns,Ie,Ls,B,ht,zs,ge,Os,zt,Ds,Vs,fo,Ss,Ws,Hs,Me,Rs,Pe,Vo,ve,Ae,mo,pt,Us,ho,Bs,So,L,ut,Ks,po,Xs,Ys,gt,Zs,Ot,Gs,Js,Qs,vt,er,_t,tr,or,ar,qe,sr,K,Ct,rr,_e,nr,Dt,ir,lr,uo,dr,cr,fr,Ne,mr,Le,Wo;return i=new wt({}),O=new wt({}),Ye=new wt({}),Ze=new be({props:{name:"class transformers.CvtConfig",anchor:"transformers.CvtConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"patch_sizes",val:" = [7, 3, 3]"},{name:"patch_stride",val:" = [4, 2, 2]"},{name:"patch_padding",val:" = [2, 1, 1]"},{name:"embed_dim",val:" = [64, 192, 384]"},{name:"num_heads",val:" = [1, 3, 6]"},{name:"depth",val:" = [1, 2, 10]"},{name:"mlp_ratio",val:" = [4.0, 4.0, 4.0]"},{name:"attention_drop_rate",val:" = [0.0, 0.0, 0.0]"},{name:"drop_rate",val:" = [0.0, 0.0, 0.0]"},{name:"drop_path_rate",val:" = [0.0, 0.0, 0.1]"},{name:"qkv_bias",val:" = [True, True, True]"},{name:"cls_token",val:" = [False, False, True]"},{name:"qkv_projection_method",val:" = ['dw_bn', 'dw_bn', 'dw_bn']"},{name:"kernel_qkv",val:" = [3, 3, 3]"},{name:"padding_kv",val:" = [1, 1, 1]"},{name:"stride_kv",val:" = [2, 2, 2]"},{name:"padding_q",val:" = [1, 1, 1]"},{name:"stride_q",val:" = [1, 1, 1]"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.CvtConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.CvtConfig.patch_sizes",description:`<strong>patch_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[7, 3, 3]</code>) &#x2014;
The kernel size of each encoder&#x2019;s patch embedding.`,name:"patch_sizes"},{anchor:"transformers.CvtConfig.patch_stride",description:`<strong>patch_stride</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[4, 2, 2]</code>) &#x2014;
The stride size of each encoder&#x2019;s patch embedding.`,name:"patch_stride"},{anchor:"transformers.CvtConfig.patch_padding",description:`<strong>patch_padding</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[2, 1, 1]</code>) &#x2014;
The padding size of each encoder&#x2019;s patch embedding.`,name:"patch_padding"},{anchor:"transformers.CvtConfig.embed_dim",description:`<strong>embed_dim</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[64, 192, 384]</code>) &#x2014;
Dimension of each of the encoder blocks.`,name:"embed_dim"},{anchor:"transformers.CvtConfig.num_heads",description:`<strong>num_heads</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[1, 3, 6]</code>) &#x2014;
Number of attention heads for each attention layer in each block of the Transformer encoder.`,name:"num_heads"},{anchor:"transformers.CvtConfig.depth",description:`<strong>depth</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[1, 2, 10]</code>) &#x2014;
The number of layers in each encoder block.`,name:"depth"},{anchor:"transformers.CvtConfig.mlp_ratios",description:`<strong>mlp_ratios</strong> (<code>List[float]</code>, <em>optional</em>, defaults to <code>[4.0, 4.0, 4.0, 4.0]</code>) &#x2014;
Ratio of the size of the hidden layer compared to the size of the input layer of the Mix FFNs in the
encoder blocks.`,name:"mlp_ratios"},{anchor:"transformers.CvtConfig.attention_drop_rate",description:`<strong>attention_drop_rate</strong> (<code>List[float]</code>, <em>optional</em>, defaults to <code>[0.0, 0.0, 0.0]</code>) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_drop_rate"},{anchor:"transformers.CvtConfig.drop_rate",description:`<strong>drop_rate</strong> (<code>List[float]</code>, <em>optional</em>, defaults to <code>[0.0, 0.0, 0.0]</code>) &#x2014;
The dropout ratio for the patch embeddings probabilities.`,name:"drop_rate"},{anchor:"transformers.CvtConfig.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>List[float]</code>, <em>optional</em>, defaults to <code>[0.0, 0.0, 0.1]</code>) &#x2014;
The dropout probability for stochastic depth, used in the blocks of the Transformer encoder.`,name:"drop_path_rate"},{anchor:"transformers.CvtConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>List[bool]</code>, <em>optional</em>, defaults to <code>[True, True, True]</code>) &#x2014;
The bias bool for query, key and value in attentions`,name:"qkv_bias"},{anchor:"transformers.CvtConfig.cls_token",description:`<strong>cls_token</strong> (<code>List[bool]</code>, <em>optional</em>, defaults to <code>[False, False, True]</code>) &#x2014;
Whether or not to add a classification token to the output of each of the last 3 stages.`,name:"cls_token"},{anchor:"transformers.CvtConfig.qkv_projection_method",description:`<strong>qkv_projection_method</strong> (<code>List[string]</code>, <em>optional</em>, defaults to [&#x201C;dw_bn&#x201D;, &#x201C;dw_bn&#x201D;, &#x201C;dw_bn&#x201D;]\`) &#x2014;
The projection method for query, key and value Default is depth-wise convolutions with batch norm. For
Linear projection use &#x201C;avg&#x201D;.`,name:"qkv_projection_method"},{anchor:"transformers.CvtConfig.kernel_qkv",description:`<strong>kernel_qkv</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[3, 3, 3]</code>) &#x2014;
The kernel size for query, key and value in attention layer`,name:"kernel_qkv"},{anchor:"transformers.CvtConfig.padding_kv",description:`<strong>padding_kv</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[1, 1, 1]</code>) &#x2014;
The padding size for key and value in attention layer`,name:"padding_kv"},{anchor:"transformers.CvtConfig.stride_kv",description:`<strong>stride_kv</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[2, 2, 2]</code>) &#x2014;
The stride size for key and value in attention layer`,name:"stride_kv"},{anchor:"transformers.CvtConfig.padding_q",description:`<strong>padding_q</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[1, 1, 1]</code>) &#x2014;
The padding size for query in attention layer`,name:"padding_q"},{anchor:"transformers.CvtConfig.stride_q",description:`<strong>stride_q</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[1, 1, 1]</code>) &#x2014;
The stride size for query in attention layer`,name:"stride_q"},{anchor:"transformers.CvtConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.CvtConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-6) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/cvt/configuration_cvt.py#L29"}}),we=new yo({props:{anchor:"transformers.CvtConfig.example",$$slots:{default:[un]},$$scope:{ctx:j}}}),Je=new wt({}),Qe=new be({props:{name:"class transformers.CvtModel",anchor:"transformers.CvtModel",parameters:[{name:"config",val:""},{name:"add_pooling_layer",val:" = True"}],parametersDescription:[{anchor:"transformers.CvtModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.24.0/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/v4.24.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/cvt/modeling_cvt.py#L590"}}),ot=new be({props:{name:"forward",anchor:"transformers.CvtModel.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.CvtModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <code>CvtFeatureExtractor</code>. See
<code>CvtFeatureExtractor.__call__</code> for details.`,name:"pixel_values"},{anchor:"transformers.CvtModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.CvtModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/v4.24.0/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/cvt/modeling_cvt.py#L605",returnDescription:`
<p>A <code>transformers.models.cvt.modeling_cvt.BaseModelOutputWithCLSToken</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/v4.24.0/en/model_doc/cvt#transformers.CvtConfig"
>CvtConfig</a>) and inputs.</p>
<ul>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</li>
<li><strong>cls_token_value</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 1, hidden_size)</code>) \u2014 Classification token at the output of the last layer of the model.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
</ul>
`,returnType:`
<p><code>transformers.models.cvt.modeling_cvt.BaseModelOutputWithCLSToken</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ye=new Zt({props:{$$slots:{default:[gn]},$$scope:{ctx:j}}}),ke=new yo({props:{anchor:"transformers.CvtModel.forward.example",$$slots:{default:[vn]},$$scope:{ctx:j}}}),at=new wt({}),st=new be({props:{name:"class transformers.CvtForImageClassification",anchor:"transformers.CvtForImageClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.CvtForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.24.0/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/v4.24.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/cvt/modeling_cvt.py#L653"}}),it=new be({props:{name:"forward",anchor:"transformers.CvtForImageClassification.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.CvtForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <code>CvtFeatureExtractor</code>. See
<code>CvtFeatureExtractor.__call__</code> for details.`,name:"pixel_values"},{anchor:"transformers.CvtForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.CvtForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/v4.24.0/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.CvtForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/cvt/modeling_cvt.py#L668",returnDescription:`
<p>A <a
  href="/docs/transformers/v4.24.0/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/v4.24.0/en/model_doc/cvt#transformers.CvtConfig"
>CvtConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/v4.24.0/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),xe=new Zt({props:{$$slots:{default:[_n]},$$scope:{ctx:j}}}),Ee=new yo({props:{anchor:"transformers.CvtForImageClassification.forward.example",$$slots:{default:[Cn]},$$scope:{ctx:j}}}),lt=new wt({}),dt=new be({props:{name:"class transformers.TFCvtModel",anchor:"transformers.TFCvtModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFCvtModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.24.0/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/v4.24.0/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/cvt/modeling_tf_cvt.py#L789"}}),Ie=new Zt({props:{$$slots:{default:[bn]},$$scope:{ctx:j}}}),ht=new be({props:{name:"call",anchor:"transformers.TFCvtModel.call",parameters:[{name:"pixel_values",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"transformers.TFCvtModel.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/v4.24.0/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFCvtModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFCvtModel.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/v4.24.0/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFCvtModel.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to \`False&#x201C;) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/cvt/modeling_tf_cvt.py#L795",returnDescription:`
<p>A <code>transformers.models.cvt.modeling_tf_cvt.TFBaseModelOutputWithCLSToken</code> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/v4.24.0/en/model_doc/cvt#transformers.CvtConfig"
>CvtConfig</a>) and inputs.</p>
<ul>
<li><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</li>
<li><strong>cls_token_value</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, 1, hidden_size)</code>) \u2014 Classification token at the output of the last layer of the model.</li>
<li><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer plus
the initial embedding outputs.</li>
</ul>
`,returnType:`
<p><code>transformers.models.cvt.modeling_tf_cvt.TFBaseModelOutputWithCLSToken</code> or <code>tuple(tf.Tensor)</code></p>
`}}),Me=new Zt({props:{$$slots:{default:[$n]},$$scope:{ctx:j}}}),Pe=new yo({props:{anchor:"transformers.TFCvtModel.call.example",$$slots:{default:[wn]},$$scope:{ctx:j}}}),pt=new wt({}),ut=new be({props:{name:"class transformers.TFCvtForImageClassification",anchor:"transformers.TFCvtForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFCvtForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.24.0/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/v4.24.0/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/cvt/modeling_tf_cvt.py#L860"}}),qe=new Zt({props:{$$slots:{default:[Tn]},$$scope:{ctx:j}}}),Ct=new be({props:{name:"call",anchor:"transformers.TFCvtForImageClassification.call",parameters:[{name:"pixel_values",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"labels",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"transformers.TFCvtForImageClassification.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/v4.24.0/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFCvtForImageClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFCvtForImageClassification.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/v4.24.0/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFCvtForImageClassification.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to \`False&#x201C;) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"},{anchor:"transformers.TFCvtForImageClassification.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> or <code>np.ndarray</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/v4.24.0/src/transformers/models/cvt/modeling_tf_cvt.py#L878",returnDescription:`
<p>A <code>transformers.modeling_tf_outputs.TFImageClassifierOutputWithNoAttention</code> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/v4.24.0/en/model_doc/cvt#transformers.CvtConfig"
>CvtConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for
the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called
feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_tf_outputs.TFImageClassifierOutputWithNoAttention</code> or <code>tuple(tf.Tensor)</code></p>
`}}),Ne=new Zt({props:{$$slots:{default:[yn]},$$scope:{ctx:j}}}),Le=new yo({props:{anchor:"transformers.TFCvtForImageClassification.call.example",$$slots:{default:[kn]},$$scope:{ctx:j}}}),{c(){d=r("meta"),C=p(),h=r("h1"),c=r("a"),_=r("span"),$(i.$$.fragment),m=p(),E=r("span"),G=a("Convolutional Vision Transformer (CvT)"),V=p(),x=r("h2"),z=r("a"),P=r("span"),$(O.$$.fragment),J=p(),A=r("span"),Q=a("Overview"),H=p(),b=r("p"),I=a("The CvT model was proposed in "),q=r("a"),ae=a("CvT: Introducing Convolutions to Vision Transformers"),se=a(" by Haiping Wu, Bin Xiao, Noel Codella, Mengchen Liu, Xiyang Dai, Lu Yuan and Lei Zhang. The Convolutional vision Transformer (CvT) improves the "),M=r("a"),re=a("Vision Transformer (ViT)"),ne=a(" in performance and efficiency by introducing convolutions into ViT to yield the best of both designs."),xo=p(),Tt=r("p"),ta=a("The abstract from the paper is the following:"),Eo=p(),yt=r("p"),Gt=r("em"),oa=a(`We present in this paper a new architecture, named Convolutional vision Transformer (CvT), that improves Vision Transformer (ViT)
in performance and efficiency by introducing convolutions into ViT to yield the best of both designs. This is accomplished through
two primary modifications: a hierarchy of Transformers containing a new convolutional token embedding, and a convolutional Transformer
block leveraging a convolutional projection. These changes introduce desirable properties of convolutional neural networks (CNNs)
to the ViT architecture (\\ie shift, scale, and distortion invariance) while maintaining the merits of Transformers (\\ie dynamic attention,
global context, and better generalization). We validate CvT by conducting extensive experiments, showing that this approach achieves
state-of-the-art performance over other Vision Transformers and ResNets on ImageNet-1k, with fewer parameters and lower FLOPs. In addition,
performance gains are maintained when pretrained on larger datasets (\\eg ImageNet-22k) and fine-tuned to downstream tasks. Pre-trained on
ImageNet-22k, our CvT-W24 obtains a top-1 accuracy of 87.7\\% on the ImageNet-1k val set. Finally, our results show that the positional encoding,
a crucial component in existing Vision Transformers, can be safely removed in our model, simplifying the design for higher resolution vision tasks.`),jo=p(),kt=r("p"),aa=a("Tips:"),Io=p(),te=r("ul"),He=r("li"),sa=a("CvT models are regular Vision Transformers, but trained with convolutions. They outperform the "),Ft=r("a"),ra=a("original model (ViT)"),na=a(" when fine-tuned on ImageNet-1K and CIFAR-100."),ia=p(),D=r("li"),la=a("You can check out demo notebooks regarding inference as well as fine-tuning on custom data "),Re=r("a"),da=a("here"),ca=a(" (you can just replace "),xt=r("a"),fa=a("ViTFeatureExtractor"),ma=a(" by "),Et=r("a"),ha=a("AutoFeatureExtractor"),pa=a(" and "),jt=r("a"),ua=a("ViTForImageClassification"),ga=a(" by "),It=r("a"),va=a("CvtForImageClassification"),_a=a(")."),Ca=p(),ie=r("li"),ba=a("The available checkpoints are either (1) pre-trained on "),Ue=r("a"),$a=a("ImageNet-22k"),wa=a(" (a collection of 14 million images and 22k classes) only, (2) also fine-tuned on ImageNet-22k or (3) also fine-tuned on "),Be=r("a"),Ta=a("ImageNet-1k"),ya=a(` (also referred to as ILSVRC 2012, a collection of 1.3 million
images and 1,000 classes).`),Mo=p(),oe=r("p"),ka=a("This model was contributed by "),Ke=r("a"),Fa=a("anugunj"),xa=a(". The original code can be found "),Xe=r("a"),Ea=a("here"),ja=a("."),Po=p(),le=r("h2"),$e=r("a"),Jt=r("span"),$(Ye.$$.fragment),Ia=p(),Qt=r("span"),Ma=a("CvtConfig"),Ao=p(),S=r("div"),$(Ze.$$.fragment),Pa=p(),de=r("p"),Aa=a("This is the configuration class to store the configuration of a "),Mt=r("a"),qa=a("CvtModel"),Na=a(`. It is used to instantiate a CvT model
according to the specified arguments, defining the model architecture. Instantiating a configuration with the
defaults will yield a similar configuration to that of the CvT
`),Ge=r("a"),La=a("microsoft/cvt-13"),za=a(" architecture."),Oa=p(),ce=r("p"),Da=a("Configuration objects inherit from "),Pt=r("a"),Va=a("PretrainedConfig"),Sa=a(` and can be used to control the model outputs. Read the
documentation from `),At=r("a"),Wa=a("PretrainedConfig"),Ha=a(" for more information."),Ra=p(),$(we.$$.fragment),qo=p(),fe=r("h2"),Te=r("a"),eo=r("span"),$(Je.$$.fragment),Ua=p(),to=r("span"),Ba=a("CvtModel"),No=p(),ee=r("div"),$(Qe.$$.fragment),Ka=p(),et=r("p"),Xa=a(`The bare Cvt Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),tt=r("a"),Ya=a("torch.nn.Module"),Za=a(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Ga=p(),R=r("div"),$(ot.$$.fragment),Ja=p(),me=r("p"),Qa=a("The "),qt=r("a"),es=a("CvtModel"),ts=a(" forward method, overrides the "),oo=r("code"),os=a("__call__"),as=a(" special method."),ss=p(),$(ye.$$.fragment),rs=p(),$(ke.$$.fragment),Lo=p(),he=r("h2"),Fe=r("a"),ao=r("span"),$(at.$$.fragment),ns=p(),so=r("span"),is=a("CvtForImageClassification"),zo=p(),W=r("div"),$(st.$$.fragment),ls=p(),ro=r("p"),ds=a(`Cvt Model transformer with an image classification head on top (a linear layer on top of the final hidden state of
the [CLS] token) e.g. for ImageNet.`),cs=p(),rt=r("p"),fs=a("This model is a PyTorch "),nt=r("a"),ms=a("torch.nn.Module"),hs=a(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ps=p(),U=r("div"),$(it.$$.fragment),us=p(),pe=r("p"),gs=a("The "),Nt=r("a"),vs=a("CvtForImageClassification"),_s=a(" forward method, overrides the "),no=r("code"),Cs=a("__call__"),bs=a(" special method."),$s=p(),$(xe.$$.fragment),ws=p(),$(Ee.$$.fragment),Oo=p(),ue=r("h2"),je=r("a"),io=r("span"),$(lt.$$.fragment),Ts=p(),lo=r("span"),ys=a("TFCvtModel"),Do=p(),N=r("div"),$(dt.$$.fragment),ks=p(),co=r("p"),Fs=a("The bare Cvt Model transformer outputting raw hidden-states without any specific head on top."),xs=p(),ct=r("p"),Es=a("This model inherits from "),Lt=r("a"),js=a("TFPreTrainedModel"),Is=a(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ms=p(),ft=r("p"),Ps=a("This model is also a "),mt=r("a"),As=a("tf.keras.Model"),qs=a(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ns=p(),$(Ie.$$.fragment),Ls=p(),B=r("div"),$(ht.$$.fragment),zs=p(),ge=r("p"),Os=a("The "),zt=r("a"),Ds=a("TFCvtModel"),Vs=a(" forward method, overrides the "),fo=r("code"),Ss=a("__call__"),Ws=a(" special method."),Hs=p(),$(Me.$$.fragment),Rs=p(),$(Pe.$$.fragment),Vo=p(),ve=r("h2"),Ae=r("a"),mo=r("span"),$(pt.$$.fragment),Us=p(),ho=r("span"),Bs=a("TFCvtForImageClassification"),So=p(),L=r("div"),$(ut.$$.fragment),Ks=p(),po=r("p"),Xs=a(`Cvt Model transformer with an image classification head on top (a linear layer on top of the final hidden state of
the [CLS] token) e.g. for ImageNet.`),Ys=p(),gt=r("p"),Zs=a("This model inherits from "),Ot=r("a"),Gs=a("TFPreTrainedModel"),Js=a(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Qs=p(),vt=r("p"),er=a("This model is also a "),_t=r("a"),tr=a("tf.keras.Model"),or=a(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ar=p(),$(qe.$$.fragment),sr=p(),K=r("div"),$(Ct.$$.fragment),rr=p(),_e=r("p"),nr=a("The "),Dt=r("a"),ir=a("TFCvtForImageClassification"),lr=a(" forward method, overrides the "),uo=r("code"),dr=a("__call__"),cr=a(" special method."),fr=p(),$(Ne.$$.fragment),mr=p(),$(Le.$$.fragment),this.h()},l(o){const g=hn('[data-svelte="svelte-1phssyn"]',document.head);d=n(g,"META",{name:!0,content:!0}),g.forEach(t),C=u(o),h=n(o,"H1",{class:!0});var bt=l(h);c=n(bt,"A",{id:!0,class:!0,href:!0});var go=l(c);_=n(go,"SPAN",{});var vo=l(_);w(i.$$.fragment,vo),vo.forEach(t),go.forEach(t),m=u(bt),E=n(bt,"SPAN",{});var _o=l(E);G=s(_o,"Convolutional Vision Transformer (CvT)"),_o.forEach(t),bt.forEach(t),V=u(o),x=n(o,"H2",{class:!0});var $t=l(x);z=n($t,"A",{id:!0,class:!0,href:!0});var Co=l(z);P=n(Co,"SPAN",{});var bo=l(P);w(O.$$.fragment,bo),bo.forEach(t),Co.forEach(t),J=u($t),A=n($t,"SPAN",{});var $o=l(A);Q=s($o,"Overview"),$o.forEach(t),$t.forEach(t),H=u(o),b=n(o,"P",{});var Ce=l(b);I=s(Ce,"The CvT model was proposed in "),q=n(Ce,"A",{href:!0,rel:!0});var wo=l(q);ae=s(wo,"CvT: Introducing Convolutions to Vision Transformers"),wo.forEach(t),se=s(Ce," by Haiping Wu, Bin Xiao, Noel Codella, Mengchen Liu, Xiyang Dai, Lu Yuan and Lei Zhang. The Convolutional vision Transformer (CvT) improves the "),M=n(Ce,"A",{href:!0});var To=l(M);re=s(To,"Vision Transformer (ViT)"),To.forEach(t),ne=s(Ce," in performance and efficiency by introducing convolutions into ViT to yield the best of both designs."),Ce.forEach(t),xo=u(o),Tt=n(o,"P",{});var hr=l(Tt);ta=s(hr,"The abstract from the paper is the following:"),hr.forEach(t),Eo=u(o),yt=n(o,"P",{});var pr=l(yt);Gt=n(pr,"EM",{});var ur=l(Gt);oa=s(ur,`We present in this paper a new architecture, named Convolutional vision Transformer (CvT), that improves Vision Transformer (ViT)
in performance and efficiency by introducing convolutions into ViT to yield the best of both designs. This is accomplished through
two primary modifications: a hierarchy of Transformers containing a new convolutional token embedding, and a convolutional Transformer
block leveraging a convolutional projection. These changes introduce desirable properties of convolutional neural networks (CNNs)
to the ViT architecture (\\ie shift, scale, and distortion invariance) while maintaining the merits of Transformers (\\ie dynamic attention,
global context, and better generalization). We validate CvT by conducting extensive experiments, showing that this approach achieves
state-of-the-art performance over other Vision Transformers and ResNets on ImageNet-1k, with fewer parameters and lower FLOPs. In addition,
performance gains are maintained when pretrained on larger datasets (\\eg ImageNet-22k) and fine-tuned to downstream tasks. Pre-trained on
ImageNet-22k, our CvT-W24 obtains a top-1 accuracy of 87.7\\% on the ImageNet-1k val set. Finally, our results show that the positional encoding,
a crucial component in existing Vision Transformers, can be safely removed in our model, simplifying the design for higher resolution vision tasks.`),ur.forEach(t),pr.forEach(t),jo=u(o),kt=n(o,"P",{});var gr=l(kt);aa=s(gr,"Tips:"),gr.forEach(t),Io=u(o),te=n(o,"UL",{});var Vt=l(te);He=n(Vt,"LI",{});var Ho=l(He);sa=s(Ho,"CvT models are regular Vision Transformers, but trained with convolutions. They outperform the "),Ft=n(Ho,"A",{href:!0});var vr=l(Ft);ra=s(vr,"original model (ViT)"),vr.forEach(t),na=s(Ho," when fine-tuned on ImageNet-1K and CIFAR-100."),Ho.forEach(t),ia=u(Vt),D=n(Vt,"LI",{});var X=l(D);la=s(X,"You can check out demo notebooks regarding inference as well as fine-tuning on custom data "),Re=n(X,"A",{href:!0,rel:!0});var _r=l(Re);da=s(_r,"here"),_r.forEach(t),ca=s(X," (you can just replace "),xt=n(X,"A",{href:!0});var Cr=l(xt);fa=s(Cr,"ViTFeatureExtractor"),Cr.forEach(t),ma=s(X," by "),Et=n(X,"A",{href:!0});var br=l(Et);ha=s(br,"AutoFeatureExtractor"),br.forEach(t),pa=s(X," and "),jt=n(X,"A",{href:!0});var $r=l(jt);ua=s($r,"ViTForImageClassification"),$r.forEach(t),ga=s(X," by "),It=n(X,"A",{href:!0});var wr=l(It);va=s(wr,"CvtForImageClassification"),wr.forEach(t),_a=s(X,")."),X.forEach(t),Ca=u(Vt),ie=n(Vt,"LI",{});var St=l(ie);ba=s(St,"The available checkpoints are either (1) pre-trained on "),Ue=n(St,"A",{href:!0,rel:!0});var Tr=l(Ue);$a=s(Tr,"ImageNet-22k"),Tr.forEach(t),wa=s(St," (a collection of 14 million images and 22k classes) only, (2) also fine-tuned on ImageNet-22k or (3) also fine-tuned on "),Be=n(St,"A",{href:!0,rel:!0});var yr=l(Be);Ta=s(yr,"ImageNet-1k"),yr.forEach(t),ya=s(St,` (also referred to as ILSVRC 2012, a collection of 1.3 million
images and 1,000 classes).`),St.forEach(t),Vt.forEach(t),Mo=u(o),oe=n(o,"P",{});var Wt=l(oe);ka=s(Wt,"This model was contributed by "),Ke=n(Wt,"A",{href:!0,rel:!0});var kr=l(Ke);Fa=s(kr,"anugunj"),kr.forEach(t),xa=s(Wt,". The original code can be found "),Xe=n(Wt,"A",{href:!0,rel:!0});var Fr=l(Xe);Ea=s(Fr,"here"),Fr.forEach(t),ja=s(Wt,"."),Wt.forEach(t),Po=u(o),le=n(o,"H2",{class:!0});var Ro=l(le);$e=n(Ro,"A",{id:!0,class:!0,href:!0});var xr=l($e);Jt=n(xr,"SPAN",{});var Er=l(Jt);w(Ye.$$.fragment,Er),Er.forEach(t),xr.forEach(t),Ia=u(Ro),Qt=n(Ro,"SPAN",{});var jr=l(Qt);Ma=s(jr,"CvtConfig"),jr.forEach(t),Ro.forEach(t),Ao=u(o),S=n(o,"DIV",{class:!0});var ze=l(S);w(Ze.$$.fragment,ze),Pa=u(ze),de=n(ze,"P",{});var Ht=l(de);Aa=s(Ht,"This is the configuration class to store the configuration of a "),Mt=n(Ht,"A",{href:!0});var Ir=l(Mt);qa=s(Ir,"CvtModel"),Ir.forEach(t),Na=s(Ht,`. It is used to instantiate a CvT model
according to the specified arguments, defining the model architecture. Instantiating a configuration with the
defaults will yield a similar configuration to that of the CvT
`),Ge=n(Ht,"A",{href:!0,rel:!0});var Mr=l(Ge);La=s(Mr,"microsoft/cvt-13"),Mr.forEach(t),za=s(Ht," architecture."),Ht.forEach(t),Oa=u(ze),ce=n(ze,"P",{});var Rt=l(ce);Da=s(Rt,"Configuration objects inherit from "),Pt=n(Rt,"A",{href:!0});var Pr=l(Pt);Va=s(Pr,"PretrainedConfig"),Pr.forEach(t),Sa=s(Rt,` and can be used to control the model outputs. Read the
documentation from `),At=n(Rt,"A",{href:!0});var Ar=l(At);Wa=s(Ar,"PretrainedConfig"),Ar.forEach(t),Ha=s(Rt," for more information."),Rt.forEach(t),Ra=u(ze),w(we.$$.fragment,ze),ze.forEach(t),qo=u(o),fe=n(o,"H2",{class:!0});var Uo=l(fe);Te=n(Uo,"A",{id:!0,class:!0,href:!0});var qr=l(Te);eo=n(qr,"SPAN",{});var Nr=l(eo);w(Je.$$.fragment,Nr),Nr.forEach(t),qr.forEach(t),Ua=u(Uo),to=n(Uo,"SPAN",{});var Lr=l(to);Ba=s(Lr,"CvtModel"),Lr.forEach(t),Uo.forEach(t),No=u(o),ee=n(o,"DIV",{class:!0});var Ut=l(ee);w(Qe.$$.fragment,Ut),Ka=u(Ut),et=n(Ut,"P",{});var Bo=l(et);Xa=s(Bo,`The bare Cvt Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),tt=n(Bo,"A",{href:!0,rel:!0});var zr=l(tt);Ya=s(zr,"torch.nn.Module"),zr.forEach(t),Za=s(Bo,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Bo.forEach(t),Ga=u(Ut),R=n(Ut,"DIV",{class:!0});var Oe=l(R);w(ot.$$.fragment,Oe),Ja=u(Oe),me=n(Oe,"P",{});var Bt=l(me);Qa=s(Bt,"The "),qt=n(Bt,"A",{href:!0});var Or=l(qt);es=s(Or,"CvtModel"),Or.forEach(t),ts=s(Bt," forward method, overrides the "),oo=n(Bt,"CODE",{});var Dr=l(oo);os=s(Dr,"__call__"),Dr.forEach(t),as=s(Bt," special method."),Bt.forEach(t),ss=u(Oe),w(ye.$$.fragment,Oe),rs=u(Oe),w(ke.$$.fragment,Oe),Oe.forEach(t),Ut.forEach(t),Lo=u(o),he=n(o,"H2",{class:!0});var Ko=l(he);Fe=n(Ko,"A",{id:!0,class:!0,href:!0});var Vr=l(Fe);ao=n(Vr,"SPAN",{});var Sr=l(ao);w(at.$$.fragment,Sr),Sr.forEach(t),Vr.forEach(t),ns=u(Ko),so=n(Ko,"SPAN",{});var Wr=l(so);is=s(Wr,"CvtForImageClassification"),Wr.forEach(t),Ko.forEach(t),zo=u(o),W=n(o,"DIV",{class:!0});var De=l(W);w(st.$$.fragment,De),ls=u(De),ro=n(De,"P",{});var Hr=l(ro);ds=s(Hr,`Cvt Model transformer with an image classification head on top (a linear layer on top of the final hidden state of
the [CLS] token) e.g. for ImageNet.`),Hr.forEach(t),cs=u(De),rt=n(De,"P",{});var Xo=l(rt);fs=s(Xo,"This model is a PyTorch "),nt=n(Xo,"A",{href:!0,rel:!0});var Rr=l(nt);ms=s(Rr,"torch.nn.Module"),Rr.forEach(t),hs=s(Xo,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Xo.forEach(t),ps=u(De),U=n(De,"DIV",{class:!0});var Ve=l(U);w(it.$$.fragment,Ve),us=u(Ve),pe=n(Ve,"P",{});var Kt=l(pe);gs=s(Kt,"The "),Nt=n(Kt,"A",{href:!0});var Ur=l(Nt);vs=s(Ur,"CvtForImageClassification"),Ur.forEach(t),_s=s(Kt," forward method, overrides the "),no=n(Kt,"CODE",{});var Br=l(no);Cs=s(Br,"__call__"),Br.forEach(t),bs=s(Kt," special method."),Kt.forEach(t),$s=u(Ve),w(xe.$$.fragment,Ve),ws=u(Ve),w(Ee.$$.fragment,Ve),Ve.forEach(t),De.forEach(t),Oo=u(o),ue=n(o,"H2",{class:!0});var Yo=l(ue);je=n(Yo,"A",{id:!0,class:!0,href:!0});var Kr=l(je);io=n(Kr,"SPAN",{});var Xr=l(io);w(lt.$$.fragment,Xr),Xr.forEach(t),Kr.forEach(t),Ts=u(Yo),lo=n(Yo,"SPAN",{});var Yr=l(lo);ys=s(Yr,"TFCvtModel"),Yr.forEach(t),Yo.forEach(t),Do=u(o),N=n(o,"DIV",{class:!0});var Y=l(N);w(dt.$$.fragment,Y),ks=u(Y),co=n(Y,"P",{});var Zr=l(co);Fs=s(Zr,"The bare Cvt Model transformer outputting raw hidden-states without any specific head on top."),Zr.forEach(t),xs=u(Y),ct=n(Y,"P",{});var Zo=l(ct);Es=s(Zo,"This model inherits from "),Lt=n(Zo,"A",{href:!0});var Gr=l(Lt);js=s(Gr,"TFPreTrainedModel"),Gr.forEach(t),Is=s(Zo,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Zo.forEach(t),Ms=u(Y),ft=n(Y,"P",{});var Go=l(ft);Ps=s(Go,"This model is also a "),mt=n(Go,"A",{href:!0,rel:!0});var Jr=l(mt);As=s(Jr,"tf.keras.Model"),Jr.forEach(t),qs=s(Go,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Go.forEach(t),Ns=u(Y),w(Ie.$$.fragment,Y),Ls=u(Y),B=n(Y,"DIV",{class:!0});var Se=l(B);w(ht.$$.fragment,Se),zs=u(Se),ge=n(Se,"P",{});var Xt=l(ge);Os=s(Xt,"The "),zt=n(Xt,"A",{href:!0});var Qr=l(zt);Ds=s(Qr,"TFCvtModel"),Qr.forEach(t),Vs=s(Xt," forward method, overrides the "),fo=n(Xt,"CODE",{});var en=l(fo);Ss=s(en,"__call__"),en.forEach(t),Ws=s(Xt," special method."),Xt.forEach(t),Hs=u(Se),w(Me.$$.fragment,Se),Rs=u(Se),w(Pe.$$.fragment,Se),Se.forEach(t),Y.forEach(t),Vo=u(o),ve=n(o,"H2",{class:!0});var Jo=l(ve);Ae=n(Jo,"A",{id:!0,class:!0,href:!0});var tn=l(Ae);mo=n(tn,"SPAN",{});var on=l(mo);w(pt.$$.fragment,on),on.forEach(t),tn.forEach(t),Us=u(Jo),ho=n(Jo,"SPAN",{});var an=l(ho);Bs=s(an,"TFCvtForImageClassification"),an.forEach(t),Jo.forEach(t),So=u(o),L=n(o,"DIV",{class:!0});var Z=l(L);w(ut.$$.fragment,Z),Ks=u(Z),po=n(Z,"P",{});var sn=l(po);Xs=s(sn,`Cvt Model transformer with an image classification head on top (a linear layer on top of the final hidden state of
the [CLS] token) e.g. for ImageNet.`),sn.forEach(t),Ys=u(Z),gt=n(Z,"P",{});var Qo=l(gt);Zs=s(Qo,"This model inherits from "),Ot=n(Qo,"A",{href:!0});var rn=l(Ot);Gs=s(rn,"TFPreTrainedModel"),rn.forEach(t),Js=s(Qo,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Qo.forEach(t),Qs=u(Z),vt=n(Z,"P",{});var ea=l(vt);er=s(ea,"This model is also a "),_t=n(ea,"A",{href:!0,rel:!0});var nn=l(_t);tr=s(nn,"tf.keras.Model"),nn.forEach(t),or=s(ea,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ea.forEach(t),ar=u(Z),w(qe.$$.fragment,Z),sr=u(Z),K=n(Z,"DIV",{class:!0});var We=l(K);w(Ct.$$.fragment,We),rr=u(We),_e=n(We,"P",{});var Yt=l(_e);nr=s(Yt,"The "),Dt=n(Yt,"A",{href:!0});var ln=l(Dt);ir=s(ln,"TFCvtForImageClassification"),ln.forEach(t),lr=s(Yt," forward method, overrides the "),uo=n(Yt,"CODE",{});var dn=l(uo);dr=s(dn,"__call__"),dn.forEach(t),cr=s(Yt," special method."),Yt.forEach(t),fr=u(We),w(Ne.$$.fragment,We),mr=u(We),w(Le.$$.fragment,We),We.forEach(t),Z.forEach(t),this.h()},h(){f(d,"name","hf:doc:metadata"),f(d,"content",JSON.stringify(xn)),f(c,"id","convolutional-vision-transformer-cvt"),f(c,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(c,"href","#convolutional-vision-transformer-cvt"),f(h,"class","relative group"),f(z,"id","overview"),f(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(z,"href","#overview"),f(x,"class","relative group"),f(q,"href","https://arxiv.org/abs/2103.15808"),f(q,"rel","nofollow"),f(M,"href","vit"),f(Ft,"href","vit"),f(Re,"href","https://github.com/NielsRogge/Transformers-Tutorials/tree/master/VisionTransformer"),f(Re,"rel","nofollow"),f(xt,"href","/docs/transformers/v4.24.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),f(Et,"href","/docs/transformers/v4.24.0/en/model_doc/auto#transformers.AutoFeatureExtractor"),f(jt,"href","/docs/transformers/v4.24.0/en/model_doc/vit#transformers.ViTForImageClassification"),f(It,"href","/docs/transformers/v4.24.0/en/model_doc/cvt#transformers.CvtForImageClassification"),f(Ue,"href","http://www.image-net.org/"),f(Ue,"rel","nofollow"),f(Be,"href","http://www.image-net.org/challenges/LSVRC/2012/"),f(Be,"rel","nofollow"),f(Ke,"href","https://huggingface.co/anugunj"),f(Ke,"rel","nofollow"),f(Xe,"href","https://github.com/microsoft/CvT"),f(Xe,"rel","nofollow"),f($e,"id","transformers.CvtConfig"),f($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f($e,"href","#transformers.CvtConfig"),f(le,"class","relative group"),f(Mt,"href","/docs/transformers/v4.24.0/en/model_doc/cvt#transformers.CvtModel"),f(Ge,"href","https://huggingface.co/microsoft/cvt-13"),f(Ge,"rel","nofollow"),f(Pt,"href","/docs/transformers/v4.24.0/en/main_classes/configuration#transformers.PretrainedConfig"),f(At,"href","/docs/transformers/v4.24.0/en/main_classes/configuration#transformers.PretrainedConfig"),f(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Te,"id","transformers.CvtModel"),f(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Te,"href","#transformers.CvtModel"),f(fe,"class","relative group"),f(tt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),f(tt,"rel","nofollow"),f(qt,"href","/docs/transformers/v4.24.0/en/model_doc/cvt#transformers.CvtModel"),f(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Fe,"id","transformers.CvtForImageClassification"),f(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Fe,"href","#transformers.CvtForImageClassification"),f(he,"class","relative group"),f(nt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),f(nt,"rel","nofollow"),f(Nt,"href","/docs/transformers/v4.24.0/en/model_doc/cvt#transformers.CvtForImageClassification"),f(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(je,"id","transformers.TFCvtModel"),f(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(je,"href","#transformers.TFCvtModel"),f(ue,"class","relative group"),f(Lt,"href","/docs/transformers/v4.24.0/en/main_classes/model#transformers.TFPreTrainedModel"),f(mt,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),f(mt,"rel","nofollow"),f(zt,"href","/docs/transformers/v4.24.0/en/model_doc/cvt#transformers.TFCvtModel"),f(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Ae,"id","transformers.TFCvtForImageClassification"),f(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ae,"href","#transformers.TFCvtForImageClassification"),f(ve,"class","relative group"),f(Ot,"href","/docs/transformers/v4.24.0/en/main_classes/model#transformers.TFPreTrainedModel"),f(_t,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),f(_t,"rel","nofollow"),f(Dt,"href","/docs/transformers/v4.24.0/en/model_doc/cvt#transformers.TFCvtForImageClassification"),f(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,g){e(document.head,d),v(o,C,g),v(o,h,g),e(h,c),e(c,_),T(i,_,null),e(h,m),e(h,E),e(E,G),v(o,V,g),v(o,x,g),e(x,z),e(z,P),T(O,P,null),e(x,J),e(x,A),e(A,Q),v(o,H,g),v(o,b,g),e(b,I),e(b,q),e(q,ae),e(b,se),e(b,M),e(M,re),e(b,ne),v(o,xo,g),v(o,Tt,g),e(Tt,ta),v(o,Eo,g),v(o,yt,g),e(yt,Gt),e(Gt,oa),v(o,jo,g),v(o,kt,g),e(kt,aa),v(o,Io,g),v(o,te,g),e(te,He),e(He,sa),e(He,Ft),e(Ft,ra),e(He,na),e(te,ia),e(te,D),e(D,la),e(D,Re),e(Re,da),e(D,ca),e(D,xt),e(xt,fa),e(D,ma),e(D,Et),e(Et,ha),e(D,pa),e(D,jt),e(jt,ua),e(D,ga),e(D,It),e(It,va),e(D,_a),e(te,Ca),e(te,ie),e(ie,ba),e(ie,Ue),e(Ue,$a),e(ie,wa),e(ie,Be),e(Be,Ta),e(ie,ya),v(o,Mo,g),v(o,oe,g),e(oe,ka),e(oe,Ke),e(Ke,Fa),e(oe,xa),e(oe,Xe),e(Xe,Ea),e(oe,ja),v(o,Po,g),v(o,le,g),e(le,$e),e($e,Jt),T(Ye,Jt,null),e(le,Ia),e(le,Qt),e(Qt,Ma),v(o,Ao,g),v(o,S,g),T(Ze,S,null),e(S,Pa),e(S,de),e(de,Aa),e(de,Mt),e(Mt,qa),e(de,Na),e(de,Ge),e(Ge,La),e(de,za),e(S,Oa),e(S,ce),e(ce,Da),e(ce,Pt),e(Pt,Va),e(ce,Sa),e(ce,At),e(At,Wa),e(ce,Ha),e(S,Ra),T(we,S,null),v(o,qo,g),v(o,fe,g),e(fe,Te),e(Te,eo),T(Je,eo,null),e(fe,Ua),e(fe,to),e(to,Ba),v(o,No,g),v(o,ee,g),T(Qe,ee,null),e(ee,Ka),e(ee,et),e(et,Xa),e(et,tt),e(tt,Ya),e(et,Za),e(ee,Ga),e(ee,R),T(ot,R,null),e(R,Ja),e(R,me),e(me,Qa),e(me,qt),e(qt,es),e(me,ts),e(me,oo),e(oo,os),e(me,as),e(R,ss),T(ye,R,null),e(R,rs),T(ke,R,null),v(o,Lo,g),v(o,he,g),e(he,Fe),e(Fe,ao),T(at,ao,null),e(he,ns),e(he,so),e(so,is),v(o,zo,g),v(o,W,g),T(st,W,null),e(W,ls),e(W,ro),e(ro,ds),e(W,cs),e(W,rt),e(rt,fs),e(rt,nt),e(nt,ms),e(rt,hs),e(W,ps),e(W,U),T(it,U,null),e(U,us),e(U,pe),e(pe,gs),e(pe,Nt),e(Nt,vs),e(pe,_s),e(pe,no),e(no,Cs),e(pe,bs),e(U,$s),T(xe,U,null),e(U,ws),T(Ee,U,null),v(o,Oo,g),v(o,ue,g),e(ue,je),e(je,io),T(lt,io,null),e(ue,Ts),e(ue,lo),e(lo,ys),v(o,Do,g),v(o,N,g),T(dt,N,null),e(N,ks),e(N,co),e(co,Fs),e(N,xs),e(N,ct),e(ct,Es),e(ct,Lt),e(Lt,js),e(ct,Is),e(N,Ms),e(N,ft),e(ft,Ps),e(ft,mt),e(mt,As),e(ft,qs),e(N,Ns),T(Ie,N,null),e(N,Ls),e(N,B),T(ht,B,null),e(B,zs),e(B,ge),e(ge,Os),e(ge,zt),e(zt,Ds),e(ge,Vs),e(ge,fo),e(fo,Ss),e(ge,Ws),e(B,Hs),T(Me,B,null),e(B,Rs),T(Pe,B,null),v(o,Vo,g),v(o,ve,g),e(ve,Ae),e(Ae,mo),T(pt,mo,null),e(ve,Us),e(ve,ho),e(ho,Bs),v(o,So,g),v(o,L,g),T(ut,L,null),e(L,Ks),e(L,po),e(po,Xs),e(L,Ys),e(L,gt),e(gt,Zs),e(gt,Ot),e(Ot,Gs),e(gt,Js),e(L,Qs),e(L,vt),e(vt,er),e(vt,_t),e(_t,tr),e(vt,or),e(L,ar),T(qe,L,null),e(L,sr),e(L,K),T(Ct,K,null),e(K,rr),e(K,_e),e(_e,nr),e(_e,Dt),e(Dt,ir),e(_e,lr),e(_e,uo),e(uo,dr),e(_e,cr),e(K,fr),T(Ne,K,null),e(K,mr),T(Le,K,null),Wo=!0},p(o,[g]){const bt={};g&2&&(bt.$$scope={dirty:g,ctx:o}),we.$set(bt);const go={};g&2&&(go.$$scope={dirty:g,ctx:o}),ye.$set(go);const vo={};g&2&&(vo.$$scope={dirty:g,ctx:o}),ke.$set(vo);const _o={};g&2&&(_o.$$scope={dirty:g,ctx:o}),xe.$set(_o);const $t={};g&2&&($t.$$scope={dirty:g,ctx:o}),Ee.$set($t);const Co={};g&2&&(Co.$$scope={dirty:g,ctx:o}),Ie.$set(Co);const bo={};g&2&&(bo.$$scope={dirty:g,ctx:o}),Me.$set(bo);const $o={};g&2&&($o.$$scope={dirty:g,ctx:o}),Pe.$set($o);const Ce={};g&2&&(Ce.$$scope={dirty:g,ctx:o}),qe.$set(Ce);const wo={};g&2&&(wo.$$scope={dirty:g,ctx:o}),Ne.$set(wo);const To={};g&2&&(To.$$scope={dirty:g,ctx:o}),Le.$set(To)},i(o){Wo||(y(i.$$.fragment,o),y(O.$$.fragment,o),y(Ye.$$.fragment,o),y(Ze.$$.fragment,o),y(we.$$.fragment,o),y(Je.$$.fragment,o),y(Qe.$$.fragment,o),y(ot.$$.fragment,o),y(ye.$$.fragment,o),y(ke.$$.fragment,o),y(at.$$.fragment,o),y(st.$$.fragment,o),y(it.$$.fragment,o),y(xe.$$.fragment,o),y(Ee.$$.fragment,o),y(lt.$$.fragment,o),y(dt.$$.fragment,o),y(Ie.$$.fragment,o),y(ht.$$.fragment,o),y(Me.$$.fragment,o),y(Pe.$$.fragment,o),y(pt.$$.fragment,o),y(ut.$$.fragment,o),y(qe.$$.fragment,o),y(Ct.$$.fragment,o),y(Ne.$$.fragment,o),y(Le.$$.fragment,o),Wo=!0)},o(o){k(i.$$.fragment,o),k(O.$$.fragment,o),k(Ye.$$.fragment,o),k(Ze.$$.fragment,o),k(we.$$.fragment,o),k(Je.$$.fragment,o),k(Qe.$$.fragment,o),k(ot.$$.fragment,o),k(ye.$$.fragment,o),k(ke.$$.fragment,o),k(at.$$.fragment,o),k(st.$$.fragment,o),k(it.$$.fragment,o),k(xe.$$.fragment,o),k(Ee.$$.fragment,o),k(lt.$$.fragment,o),k(dt.$$.fragment,o),k(Ie.$$.fragment,o),k(ht.$$.fragment,o),k(Me.$$.fragment,o),k(Pe.$$.fragment,o),k(pt.$$.fragment,o),k(ut.$$.fragment,o),k(qe.$$.fragment,o),k(Ct.$$.fragment,o),k(Ne.$$.fragment,o),k(Le.$$.fragment,o),Wo=!1},d(o){t(d),o&&t(C),o&&t(h),F(i),o&&t(V),o&&t(x),F(O),o&&t(H),o&&t(b),o&&t(xo),o&&t(Tt),o&&t(Eo),o&&t(yt),o&&t(jo),o&&t(kt),o&&t(Io),o&&t(te),o&&t(Mo),o&&t(oe),o&&t(Po),o&&t(le),F(Ye),o&&t(Ao),o&&t(S),F(Ze),F(we),o&&t(qo),o&&t(fe),F(Je),o&&t(No),o&&t(ee),F(Qe),F(ot),F(ye),F(ke),o&&t(Lo),o&&t(he),F(at),o&&t(zo),o&&t(W),F(st),F(it),F(xe),F(Ee),o&&t(Oo),o&&t(ue),F(lt),o&&t(Do),o&&t(N),F(dt),F(Ie),F(ht),F(Me),F(Pe),o&&t(Vo),o&&t(ve),F(pt),o&&t(So),o&&t(L),F(ut),F(qe),F(Ct),F(Ne),F(Le)}}}const xn={local:"convolutional-vision-transformer-cvt",sections:[{local:"overview",title:"Overview"},{local:"transformers.CvtConfig",title:"CvtConfig"},{local:"transformers.CvtModel",title:"CvtModel"},{local:"transformers.CvtForImageClassification",title:"CvtForImageClassification"},{local:"transformers.TFCvtModel",title:"TFCvtModel"},{local:"transformers.TFCvtForImageClassification",title:"TFCvtForImageClassification"}],title:"Convolutional Vision Transformer (CvT)"};function En(j){return pn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Nn extends cn{constructor(d){super();fn(this,d,En,Fn,mn,{})}}export{Nn as default,xn as metadata};
