import{S as ls,i as ss,s as ns,e as a,k as c,w as N,t as l,N as fs,c as r,d as o,m as d,a as i,x as S,h as s,b as n,P as is,G as t,g as h,y as H,L as hs,q as C,o as O,B as U,v as cs}from"../chunks/vendor-hf-doc-builder.js";import{I as D}from"../chunks/IconCopyLink-hf-doc-builder.js";function ds(Ei){let w,ao,b,R,nt,fe,ca,ft,da,ro,_,q,ht,he,ua,ct,pa,io,Ge,ma,lo,E,Me,ki,va,Fe,Ai,so,Y,ga,dt,ya,wa,no,k,W,ut,ce,ba,pt,_a,fo,Be,Ea,ho,v,mt,ka,Aa,vt,Ia,Pa,gt,$a,co,Ve,Ta,uo,j,La,de,xa,Na,po,Je,Sa,mo,g,ue,Ha,yt,Ca,Oa,Ua,ze,Da,Ke,Ra,qa,wt,Ya,vo,Qe,Wa,go,G,ja,bt,Ga,Ma,yo,A,M,_t,pe,Fa,Et,Ba,wo,I,F,kt,me,Va,At,Ja,bo,u,za,It,Ka,Qa,Pt,Xa,Za,$t,er,tr,_o,B,Tt,ve,or,ar,Lt,ge,rr,Eo,Xe,ir,ko,P,V,xt,ye,lr,Nt,sr,Ao,J,nr,we,fr,hr,Io,Ze,St,cr,Po,z,K,dr,be,ur,pr,$,Ht,_e,mr,vr,Ct,Ee,gr,yr,Ot,ke,wr,br,Q,_r,Ae,Ut,Er,kr,Dt,Rt,Ie,Ar,$o,T,X,qt,Pe,Ir,Yt,Pr,To,et,Wt,$r,Lo,Z,Tr,$e,Lr,xr,xo,p,Nr,Te,Sr,Hr,jt,Cr,Or,Gt,Ur,Dr,No,L,ee,Mt,Le,Rr,Ft,qr,So,tt,Yr,Ho,ot,at,Wr,Bt,jr,Co,te,Gr,xe,Mr,Fr,Oo,oe,Ne,Br,Vt,Vr,Jr,zr,ae,Kr,Jt,Qr,Xr,Se,zt,He,Zr,ei,Kt,Ce,ti,Uo,Oe,Qt,oi,Do,m,ai,Ue,ri,ii,De,li,si,Re,ni,fi,Ro,x,re,Xt,qe,hi,Zt,ci,qo,ie,di,Ye,ui,pi,Yo,y,mi,We,vi,gi,je,yi,wi,Wo;return fe=new D({}),he=new D({}),ce=new D({}),pe=new D({}),me=new D({}),ye=new D({}),Pe=new D({}),Le=new D({}),qe=new D({}),{c(){w=a("meta"),ao=c(),b=a("h1"),R=a("a"),nt=a("span"),N(fe.$$.fragment),ca=c(),ft=a("span"),da=l("Tasks"),ro=c(),_=a("h2"),q=a("a"),ht=a("span"),N(he.$$.fragment),ua=c(),ct=a("span"),pa=l("What's a task?"),io=c(),Ge=a("p"),ma=l("Tasks, or pipeline types, describe the \u201Cshape\u201D of each model\u2019s API (inputs and outputs) and are used to determine which Inference API and widget we want to display for any given model."),lo=c(),E=a("div"),Me=a("img"),va=c(),Fe=a("img"),so=c(),Y=a("p"),ga=l("This classification is relatively coarse-grained (you can always add more fine-grained task names in your model tags), so "),dt=a("strong"),ya=l("you should rarely have to create a new task"),wa=l(". If you want to add support for a new task, this document explains the required steps."),no=c(),k=a("h2"),W=a("a"),ut=a("span"),N(ce.$$.fragment),ba=c(),pt=a("span"),_a=l("Overview"),fo=c(),Be=a("p"),Ea=l("Having a new task integrated into the Hub means that:"),ho=c(),v=a("ul"),mt=a("li"),ka=l("Users can search for all models \u2013 and datasets \u2013 of a given task."),Aa=c(),vt=a("li"),Ia=l("The Inference API supports the task."),Pa=c(),gt=a("li"),$a=l("Users can try out models directly with the widget. \u{1F3C6}"),co=c(),Ve=a("p"),Ta=l("Note that you don\u2019t need to implement all the steps by yourself. Adding a new task is a community effort, and multiple people can contribute. \u{1F9D1}\u200D\u{1F91D}\u200D\u{1F9D1}"),uo=c(),j=a("p"),La=l("To begin the process, open a new issue in the "),de=a("a"),xa=l("huggingface_hub"),Na=l(" repository. Please use the \u201CAdding a new task\u201D template. \u26A0\uFE0FBefore doing any coding, it\u2019s suggested to go over this document. \u26A0\uFE0F"),po=c(),Je=a("p"),Sa=l("The first step is to upload a model for your proposed task. Once you have a model in the Hub for the new task, the next step is to enable it in the Inference API. There are three types of support that you can choose from:"),mo=c(),g=a("ul"),ue=a("li"),Ha=l("\u{1F917} using a "),yt=a("code"),Ca=l("transformers"),Oa=l(" model"),Ua=c(),ze=a("li"),Da=l("\u{1F433} using a model from an "),Ke=a("a"),Ra=l("officially supported library"),qa=c(),wt=a("li"),Ya=l("\u{1F5A8}\uFE0F using a model with custom inference code. This experimental option has downsides, so we recommend using one of the other approaches."),vo=c(),Qe=a("p"),Wa=l("Finally, you can add a couple of UI elements, such as the task icon and the widget, that complete the integration in the Hub. \u{1F4F7}"),go=c(),G=a("p"),ja=l("Some steps are orthogonal; you don\u2019t need to do them in order. "),bt=a("strong"),Ga=l("You don\u2019t need the Inference API to add the icon."),Ma=l(" This means that, even if there isn\u2019t full integration yet, users can still search for models of a given task."),yo=c(),A=a("h2"),M=a("a"),_t=a("span"),N(pe.$$.fragment),Fa=c(),Et=a("span"),Ba=l("Adding new tasks to the Hub"),wo=c(),I=a("h3"),F=a("a"),kt=a("span"),N(me.$$.fragment),Va=c(),At=a("span"),Ja=l("Using Hugging Face transformers library"),bo=c(),u=a("p"),za=l("If your model is a "),It=a("code"),Ka=l("transformers"),Qa=l("-based model, there is a 1:1 mapping between the Inference API task and a "),Pt=a("code"),Xa=l("pipeline"),Za=l(" class. Here are some example PRs from the "),$t=a("code"),er=l("transformers"),tr=l(" library:"),_o=c(),B=a("ul"),Tt=a("li"),ve=a("a"),or=l("Adding ImageClassificationPipeline"),ar=c(),Lt=a("li"),ge=a("a"),rr=l("Adding AudioClassificationPipeline"),Eo=c(),Xe=a("p"),ir=l("Once the pipeline is submitted and deployed, you should be able to use the Inference API for your model."),ko=c(),P=a("h3"),V=a("a"),xt=a("span"),N(ye.$$.fragment),lr=c(),Nt=a("span"),sr=l("Using Community Inference API with a supported library"),Ao=c(),J=a("p"),nr=l("The Hub also supports over 10 open-source libraries in the "),we=a("a"),fr=l("Community Inference API"),hr=l("."),Io=c(),Ze=a("p"),St=a("strong"),cr=l("Adding a new task is relatively straightforward and requires 2 PRs:"),Po=c(),z=a("ul"),K=a("li"),dr=l("PR 1: Add the new task to the API "),be=a("a"),ur=l("validation"),pr=l(". This code ensures that the inference input is valid for a given task. Some PR examples:"),$=a("ul"),Ht=a("li"),_e=a("a"),mr=l("Add text-to-image"),vr=c(),Ct=a("li"),Ee=a("a"),gr=l("Add audio-classification"),yr=c(),Ot=a("li"),ke=a("a"),wr=l("Add tabular-classification"),br=c(),Q=a("li"),_r=l("PR 2: Add the new task to a library docker image. You should also add a template to "),Ae=a("a"),Ut=a("code"),Er=l("docker_images/common/app/pipelines"),kr=l(" to facilitate integrating the task in other libraries. Here is an example PR:"),Dt=a("ul"),Rt=a("li"),Ie=a("a"),Ar=l("Add text-classification to spaCy"),$o=c(),T=a("h3"),X=a("a"),qt=a("span"),N(Pe.$$.fragment),Ir=c(),Yt=a("span"),Pr=l("Adding Community Inference API for a quick prototype"),To=c(),et=a("p"),Wt=a("strong"),$r=l("My model is not supported by any library. Am I doomed? \u{1F631}"),Lo=c(),Z=a("p"),Tr=l("No, you\u2019re not! The "),$e=a("a"),Lr=l("generic Inference API"),xr=l(" is an experimental Docker image for quickly prototyping new tasks and introducing new libraries,  which should allow you to have a new task in production with very little development from your side."),xo=c(),p=a("p"),Nr=l("How does it work from the user\u2019s point of view? Users create a copy of a "),Te=a("a"),Sr=l("template"),Hr=l(" repo for their given task. Users then need to define their "),jt=a("code"),Cr=l("requirements.txt"),Or=l(" and fill "),Gt=a("code"),Ur=l("pipeline.py"),Dr=l(". Note that this is intended for quick experimentation and prototyping instead of fast production use-cases."),No=c(),L=a("h3"),ee=a("a"),Mt=a("span"),N(Le.$$.fragment),Rr=c(),Ft=a("span"),qr=l("UI elements"),So=c(),tt=a("p"),Yr=l("The Hub allows users to filter models by a given task. To do this, you need to add the task to several places. You\u2019ll also get to pick an icon for the task!"),Ho=c(),ot=a("ol"),at=a("li"),Wr=l("Add the task type to "),Bt=a("code"),jr=l("Types.ts"),Co=c(),te=a("p"),Gr=l("In "),xe=a("a"),Mr=l("interfaces/Types.ts"),Fr=l(", you need to do a couple of things"),Oo=c(),oe=a("ul"),Ne=a("li"),Br=l("Add the type to "),Vt=a("code"),Vr=l("PIPELINE_DATA"),Jr=l(". Note that pipeline types are sorted into different categories (NLP, Audio, Computer Vision, and others)."),zr=c(),ae=a("li"),Kr=l("Specify the display order in "),Jt=a("code"),Qr=l("PIPELINE_TAGS_DISPLAY_ORDER"),Xr=l(". It also needs minor changes in the following files:"),Se=a("ol"),zt=a("li"),He=a("a"),Zr=l("tasks/src/const.ts"),ei=c(),Kt=a("li"),Ce=a("a"),ti=l("tasks/src/tasksData.ts"),Uo=c(),Oe=a("ol"),Qt=a("li"),oi=l("Choose an icon"),Do=c(),m=a("p"),ai=l("You can add an icon in the "),Ue=a("a"),ri=l("lib/Icons"),ii=l(" directory. We usually choose carbon icons from "),De=a("a"),li=l("https://icones.js.org/collection/carbon"),si=l(". Also add the icon to "),Re=a("a"),ni=l("PipelineIcon"),fi=l("."),Ro=c(),x=a("h3"),re=a("a"),Xt=a("span"),N(qe.$$.fragment),hi=c(),Zt=a("span"),ci=l("Widget"),qo=c(),ie=a("p"),di=l("Once the task is in production, what could be more exciting than implementing some way for users to play directly with the models in their browser? \u{1F929} You can find all the widgets "),Ye=a("a"),ui=l("here"),pi=l("."),Yo=c(),y=a("p"),mi=l("If you would be interested in contributing with a widget, you can look at the "),We=a("a"),vi=l("implementation"),gi=l(" of all the widgets. You can also find WIP documentation on implementing a widget in "),je=a("a"),yi=l("https://github.com/huggingface/hub-docs/tree/main/js"),wi=l("."),this.h()},l(e){const f=fs('[data-svelte="svelte-1phssyn"]',document.head);w=r(f,"META",{name:!0,content:!0}),f.forEach(o),ao=d(e),b=r(e,"H1",{class:!0});var jo=i(b);R=r(jo,"A",{id:!0,class:!0,href:!0});var Ii=i(R);nt=r(Ii,"SPAN",{});var Pi=i(nt);S(fe.$$.fragment,Pi),Pi.forEach(o),Ii.forEach(o),ca=d(jo),ft=r(jo,"SPAN",{});var $i=i(ft);da=s($i,"Tasks"),$i.forEach(o),jo.forEach(o),ro=d(e),_=r(e,"H2",{class:!0});var Go=i(_);q=r(Go,"A",{id:!0,class:!0,href:!0});var Ti=i(q);ht=r(Ti,"SPAN",{});var Li=i(ht);S(he.$$.fragment,Li),Li.forEach(o),Ti.forEach(o),ua=d(Go),ct=r(Go,"SPAN",{});var xi=i(ct);pa=s(xi,"What's a task?"),xi.forEach(o),Go.forEach(o),io=d(e),Ge=r(e,"P",{});var Ni=i(Ge);ma=s(Ni,"Tasks, or pipeline types, describe the \u201Cshape\u201D of each model\u2019s API (inputs and outputs) and are used to determine which Inference API and widget we want to display for any given model."),Ni.forEach(o),lo=d(e),E=r(e,"DIV",{class:!0});var Mo=i(E);Me=r(Mo,"IMG",{class:!0,src:!0}),va=d(Mo),Fe=r(Mo,"IMG",{class:!0,src:!0}),Mo.forEach(o),so=d(e),Y=r(e,"P",{});var Fo=i(Y);ga=s(Fo,"This classification is relatively coarse-grained (you can always add more fine-grained task names in your model tags), so "),dt=r(Fo,"STRONG",{});var Si=i(dt);ya=s(Si,"you should rarely have to create a new task"),Si.forEach(o),wa=s(Fo,". If you want to add support for a new task, this document explains the required steps."),Fo.forEach(o),no=d(e),k=r(e,"H2",{class:!0});var Bo=i(k);W=r(Bo,"A",{id:!0,class:!0,href:!0});var Hi=i(W);ut=r(Hi,"SPAN",{});var Ci=i(ut);S(ce.$$.fragment,Ci),Ci.forEach(o),Hi.forEach(o),ba=d(Bo),pt=r(Bo,"SPAN",{});var Oi=i(pt);_a=s(Oi,"Overview"),Oi.forEach(o),Bo.forEach(o),fo=d(e),Be=r(e,"P",{});var Ui=i(Be);Ea=s(Ui,"Having a new task integrated into the Hub means that:"),Ui.forEach(o),ho=d(e),v=r(e,"UL",{});var rt=i(v);mt=r(rt,"LI",{});var Di=i(mt);ka=s(Di,"Users can search for all models \u2013 and datasets \u2013 of a given task."),Di.forEach(o),Aa=d(rt),vt=r(rt,"LI",{});var Ri=i(vt);Ia=s(Ri,"The Inference API supports the task."),Ri.forEach(o),Pa=d(rt),gt=r(rt,"LI",{});var qi=i(gt);$a=s(qi,"Users can try out models directly with the widget. \u{1F3C6}"),qi.forEach(o),rt.forEach(o),co=d(e),Ve=r(e,"P",{});var Yi=i(Ve);Ta=s(Yi,"Note that you don\u2019t need to implement all the steps by yourself. Adding a new task is a community effort, and multiple people can contribute. \u{1F9D1}\u200D\u{1F91D}\u200D\u{1F9D1}"),Yi.forEach(o),uo=d(e),j=r(e,"P",{});var Vo=i(j);La=s(Vo,"To begin the process, open a new issue in the "),de=r(Vo,"A",{href:!0,rel:!0});var Wi=i(de);xa=s(Wi,"huggingface_hub"),Wi.forEach(o),Na=s(Vo," repository. Please use the \u201CAdding a new task\u201D template. \u26A0\uFE0FBefore doing any coding, it\u2019s suggested to go over this document. \u26A0\uFE0F"),Vo.forEach(o),po=d(e),Je=r(e,"P",{});var ji=i(Je);Sa=s(ji,"The first step is to upload a model for your proposed task. Once you have a model in the Hub for the new task, the next step is to enable it in the Inference API. There are three types of support that you can choose from:"),ji.forEach(o),mo=d(e),g=r(e,"UL",{});var it=i(g);ue=r(it,"LI",{});var Jo=i(ue);Ha=s(Jo,"\u{1F917} using a "),yt=r(Jo,"CODE",{});var Gi=i(yt);Ca=s(Gi,"transformers"),Gi.forEach(o),Oa=s(Jo," model"),Jo.forEach(o),Ua=d(it),ze=r(it,"LI",{});var bi=i(ze);Da=s(bi,"\u{1F433} using a model from an "),Ke=r(bi,"A",{href:!0});var Mi=i(Ke);Ra=s(Mi,"officially supported library"),Mi.forEach(o),bi.forEach(o),qa=d(it),wt=r(it,"LI",{});var Fi=i(wt);Ya=s(Fi,"\u{1F5A8}\uFE0F using a model with custom inference code. This experimental option has downsides, so we recommend using one of the other approaches."),Fi.forEach(o),it.forEach(o),vo=d(e),Qe=r(e,"P",{});var Bi=i(Qe);Wa=s(Bi,"Finally, you can add a couple of UI elements, such as the task icon and the widget, that complete the integration in the Hub. \u{1F4F7}"),Bi.forEach(o),go=d(e),G=r(e,"P",{});var zo=i(G);ja=s(zo,"Some steps are orthogonal; you don\u2019t need to do them in order. "),bt=r(zo,"STRONG",{});var Vi=i(bt);Ga=s(Vi,"You don\u2019t need the Inference API to add the icon."),Vi.forEach(o),Ma=s(zo," This means that, even if there isn\u2019t full integration yet, users can still search for models of a given task."),zo.forEach(o),yo=d(e),A=r(e,"H2",{class:!0});var Ko=i(A);M=r(Ko,"A",{id:!0,class:!0,href:!0});var Ji=i(M);_t=r(Ji,"SPAN",{});var zi=i(_t);S(pe.$$.fragment,zi),zi.forEach(o),Ji.forEach(o),Fa=d(Ko),Et=r(Ko,"SPAN",{});var Ki=i(Et);Ba=s(Ki,"Adding new tasks to the Hub"),Ki.forEach(o),Ko.forEach(o),wo=d(e),I=r(e,"H3",{class:!0});var Qo=i(I);F=r(Qo,"A",{id:!0,class:!0,href:!0});var Qi=i(F);kt=r(Qi,"SPAN",{});var Xi=i(kt);S(me.$$.fragment,Xi),Xi.forEach(o),Qi.forEach(o),Va=d(Qo),At=r(Qo,"SPAN",{});var Zi=i(At);Ja=s(Zi,"Using Hugging Face transformers library"),Zi.forEach(o),Qo.forEach(o),bo=d(e),u=r(e,"P",{});var le=i(u);za=s(le,"If your model is a "),It=r(le,"CODE",{});var el=i(It);Ka=s(el,"transformers"),el.forEach(o),Qa=s(le,"-based model, there is a 1:1 mapping between the Inference API task and a "),Pt=r(le,"CODE",{});var tl=i(Pt);Xa=s(tl,"pipeline"),tl.forEach(o),Za=s(le," class. Here are some example PRs from the "),$t=r(le,"CODE",{});var ol=i($t);er=s(ol,"transformers"),ol.forEach(o),tr=s(le," library:"),le.forEach(o),_o=d(e),B=r(e,"UL",{});var Xo=i(B);Tt=r(Xo,"LI",{});var al=i(Tt);ve=r(al,"A",{href:!0,rel:!0});var rl=i(ve);or=s(rl,"Adding ImageClassificationPipeline"),rl.forEach(o),al.forEach(o),ar=d(Xo),Lt=r(Xo,"LI",{});var il=i(Lt);ge=r(il,"A",{href:!0,rel:!0});var ll=i(ge);rr=s(ll,"Adding AudioClassificationPipeline"),ll.forEach(o),il.forEach(o),Xo.forEach(o),Eo=d(e),Xe=r(e,"P",{});var sl=i(Xe);ir=s(sl,"Once the pipeline is submitted and deployed, you should be able to use the Inference API for your model."),sl.forEach(o),ko=d(e),P=r(e,"H3",{class:!0});var Zo=i(P);V=r(Zo,"A",{id:!0,class:!0,href:!0});var nl=i(V);xt=r(nl,"SPAN",{});var fl=i(xt);S(ye.$$.fragment,fl),fl.forEach(o),nl.forEach(o),lr=d(Zo),Nt=r(Zo,"SPAN",{});var hl=i(Nt);sr=s(hl,"Using Community Inference API with a supported library"),hl.forEach(o),Zo.forEach(o),Ao=d(e),J=r(e,"P",{});var ea=i(J);nr=s(ea,"The Hub also supports over 10 open-source libraries in the "),we=r(ea,"A",{href:!0,rel:!0});var cl=i(we);fr=s(cl,"Community Inference API"),cl.forEach(o),hr=s(ea,"."),ea.forEach(o),Io=d(e),Ze=r(e,"P",{});var dl=i(Ze);St=r(dl,"STRONG",{});var ul=i(St);cr=s(ul,"Adding a new task is relatively straightforward and requires 2 PRs:"),ul.forEach(o),dl.forEach(o),Po=d(e),z=r(e,"UL",{});var ta=i(z);K=r(ta,"LI",{});var eo=i(K);dr=s(eo,"PR 1: Add the new task to the API "),be=r(eo,"A",{href:!0,rel:!0});var pl=i(be);ur=s(pl,"validation"),pl.forEach(o),pr=s(eo,". This code ensures that the inference input is valid for a given task. Some PR examples:"),$=r(eo,"UL",{});var lt=i($);Ht=r(lt,"LI",{});var ml=i(Ht);_e=r(ml,"A",{href:!0,rel:!0});var vl=i(_e);mr=s(vl,"Add text-to-image"),vl.forEach(o),ml.forEach(o),vr=d(lt),Ct=r(lt,"LI",{});var gl=i(Ct);Ee=r(gl,"A",{href:!0,rel:!0});var yl=i(Ee);gr=s(yl,"Add audio-classification"),yl.forEach(o),gl.forEach(o),yr=d(lt),Ot=r(lt,"LI",{});var wl=i(Ot);ke=r(wl,"A",{href:!0,rel:!0});var bl=i(ke);wr=s(bl,"Add tabular-classification"),bl.forEach(o),wl.forEach(o),lt.forEach(o),eo.forEach(o),br=d(ta),Q=r(ta,"LI",{});var to=i(Q);_r=s(to,"PR 2: Add the new task to a library docker image. You should also add a template to "),Ae=r(to,"A",{href:!0,rel:!0});var _l=i(Ae);Ut=r(_l,"CODE",{});var El=i(Ut);Er=s(El,"docker_images/common/app/pipelines"),El.forEach(o),_l.forEach(o),kr=s(to," to facilitate integrating the task in other libraries. Here is an example PR:"),Dt=r(to,"UL",{});var kl=i(Dt);Rt=r(kl,"LI",{});var Al=i(Rt);Ie=r(Al,"A",{href:!0,rel:!0});var Il=i(Ie);Ar=s(Il,"Add text-classification to spaCy"),Il.forEach(o),Al.forEach(o),kl.forEach(o),to.forEach(o),ta.forEach(o),$o=d(e),T=r(e,"H3",{class:!0});var oa=i(T);X=r(oa,"A",{id:!0,class:!0,href:!0});var Pl=i(X);qt=r(Pl,"SPAN",{});var $l=i(qt);S(Pe.$$.fragment,$l),$l.forEach(o),Pl.forEach(o),Ir=d(oa),Yt=r(oa,"SPAN",{});var Tl=i(Yt);Pr=s(Tl,"Adding Community Inference API for a quick prototype"),Tl.forEach(o),oa.forEach(o),To=d(e),et=r(e,"P",{});var Ll=i(et);Wt=r(Ll,"STRONG",{});var xl=i(Wt);$r=s(xl,"My model is not supported by any library. Am I doomed? \u{1F631}"),xl.forEach(o),Ll.forEach(o),Lo=d(e),Z=r(e,"P",{});var aa=i(Z);Tr=s(aa,"No, you\u2019re not! The "),$e=r(aa,"A",{href:!0,rel:!0});var Nl=i($e);Lr=s(Nl,"generic Inference API"),Nl.forEach(o),xr=s(aa," is an experimental Docker image for quickly prototyping new tasks and introducing new libraries,  which should allow you to have a new task in production with very little development from your side."),aa.forEach(o),xo=d(e),p=r(e,"P",{});var se=i(p);Nr=s(se,"How does it work from the user\u2019s point of view? Users create a copy of a "),Te=r(se,"A",{href:!0,rel:!0});var Sl=i(Te);Sr=s(Sl,"template"),Sl.forEach(o),Hr=s(se," repo for their given task. Users then need to define their "),jt=r(se,"CODE",{});var Hl=i(jt);Cr=s(Hl,"requirements.txt"),Hl.forEach(o),Or=s(se," and fill "),Gt=r(se,"CODE",{});var Cl=i(Gt);Ur=s(Cl,"pipeline.py"),Cl.forEach(o),Dr=s(se,". Note that this is intended for quick experimentation and prototyping instead of fast production use-cases."),se.forEach(o),No=d(e),L=r(e,"H3",{class:!0});var ra=i(L);ee=r(ra,"A",{id:!0,class:!0,href:!0});var Ol=i(ee);Mt=r(Ol,"SPAN",{});var Ul=i(Mt);S(Le.$$.fragment,Ul),Ul.forEach(o),Ol.forEach(o),Rr=d(ra),Ft=r(ra,"SPAN",{});var Dl=i(Ft);qr=s(Dl,"UI elements"),Dl.forEach(o),ra.forEach(o),So=d(e),tt=r(e,"P",{});var Rl=i(tt);Yr=s(Rl,"The Hub allows users to filter models by a given task. To do this, you need to add the task to several places. You\u2019ll also get to pick an icon for the task!"),Rl.forEach(o),Ho=d(e),ot=r(e,"OL",{});var ql=i(ot);at=r(ql,"LI",{});var _i=i(at);Wr=s(_i,"Add the task type to "),Bt=r(_i,"CODE",{});var Yl=i(Bt);jr=s(Yl,"Types.ts"),Yl.forEach(o),_i.forEach(o),ql.forEach(o),Co=d(e),te=r(e,"P",{});var ia=i(te);Gr=s(ia,"In "),xe=r(ia,"A",{href:!0,rel:!0});var Wl=i(xe);Mr=s(Wl,"interfaces/Types.ts"),Wl.forEach(o),Fr=s(ia,", you need to do a couple of things"),ia.forEach(o),Oo=d(e),oe=r(e,"UL",{});var la=i(oe);Ne=r(la,"LI",{});var sa=i(Ne);Br=s(sa,"Add the type to "),Vt=r(sa,"CODE",{});var jl=i(Vt);Vr=s(jl,"PIPELINE_DATA"),jl.forEach(o),Jr=s(sa,". Note that pipeline types are sorted into different categories (NLP, Audio, Computer Vision, and others)."),sa.forEach(o),zr=d(la),ae=r(la,"LI",{});var oo=i(ae);Kr=s(oo,"Specify the display order in "),Jt=r(oo,"CODE",{});var Gl=i(Jt);Qr=s(Gl,"PIPELINE_TAGS_DISPLAY_ORDER"),Gl.forEach(o),Xr=s(oo,". It also needs minor changes in the following files:"),Se=r(oo,"OL",{});var na=i(Se);zt=r(na,"LI",{});var Ml=i(zt);He=r(Ml,"A",{href:!0,rel:!0});var Fl=i(He);Zr=s(Fl,"tasks/src/const.ts"),Fl.forEach(o),Ml.forEach(o),ei=d(na),Kt=r(na,"LI",{});var Bl=i(Kt);Ce=r(Bl,"A",{href:!0,rel:!0});var Vl=i(Ce);ti=s(Vl,"tasks/src/tasksData.ts"),Vl.forEach(o),Bl.forEach(o),na.forEach(o),oo.forEach(o),la.forEach(o),Uo=d(e),Oe=r(e,"OL",{start:!0});var Jl=i(Oe);Qt=r(Jl,"LI",{});var zl=i(Qt);oi=s(zl,"Choose an icon"),zl.forEach(o),Jl.forEach(o),Do=d(e),m=r(e,"P",{});var ne=i(m);ai=s(ne,"You can add an icon in the "),Ue=r(ne,"A",{href:!0,rel:!0});var Kl=i(Ue);ri=s(Kl,"lib/Icons"),Kl.forEach(o),ii=s(ne," directory. We usually choose carbon icons from "),De=r(ne,"A",{href:!0,rel:!0});var Ql=i(De);li=s(Ql,"https://icones.js.org/collection/carbon"),Ql.forEach(o),si=s(ne,". Also add the icon to "),Re=r(ne,"A",{href:!0,rel:!0});var Xl=i(Re);ni=s(Xl,"PipelineIcon"),Xl.forEach(o),fi=s(ne,"."),ne.forEach(o),Ro=d(e),x=r(e,"H3",{class:!0});var fa=i(x);re=r(fa,"A",{id:!0,class:!0,href:!0});var Zl=i(re);Xt=r(Zl,"SPAN",{});var es=i(Xt);S(qe.$$.fragment,es),es.forEach(o),Zl.forEach(o),hi=d(fa),Zt=r(fa,"SPAN",{});var ts=i(Zt);ci=s(ts,"Widget"),ts.forEach(o),fa.forEach(o),qo=d(e),ie=r(e,"P",{});var ha=i(ie);di=s(ha,"Once the task is in production, what could be more exciting than implementing some way for users to play directly with the models in their browser? \u{1F929} You can find all the widgets "),Ye=r(ha,"A",{href:!0,rel:!0});var os=i(Ye);ui=s(os,"here"),os.forEach(o),pi=s(ha,"."),ha.forEach(o),Yo=d(e),y=r(e,"P",{});var st=i(y);mi=s(st,"If you would be interested in contributing with a widget, you can look at the "),We=r(st,"A",{href:!0,rel:!0});var as=i(We);vi=s(as,"implementation"),as.forEach(o),gi=s(st," of all the widgets. You can also find WIP documentation on implementing a widget in "),je=r(st,"A",{href:!0,rel:!0});var rs=i(je);yi=s(rs,"https://github.com/huggingface/hub-docs/tree/main/js"),rs.forEach(o),wi=s(st,"."),st.forEach(o),this.h()},h(){n(w,"name","hf:doc:metadata"),n(w,"content",JSON.stringify(us)),n(R,"id","tasks"),n(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(R,"href","#tasks"),n(b,"class","relative group"),n(q,"id","whats-a-task"),n(q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(q,"href","#whats-a-task"),n(_,"class","relative group"),n(Me,"class","block dark:hidden"),is(Me.src,ki="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/tasks.png")||n(Me,"src",ki),n(Fe,"class","hidden dark:block"),is(Fe.src,Ai="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/tasks-dark.png")||n(Fe,"src",Ai),n(E,"class","flex justify-center"),n(W,"id","overview"),n(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(W,"href","#overview"),n(k,"class","relative group"),n(de,"href","https://github.com/huggingface/huggingface_hub/issues"),n(de,"rel","nofollow"),n(Ke,"href","./models-libraries"),n(M,"id","adding-new-tasks-to-the-hub"),n(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(M,"href","#adding-new-tasks-to-the-hub"),n(A,"class","relative group"),n(F,"id","using-hugging-face-transformers-library"),n(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(F,"href","#using-hugging-face-transformers-library"),n(I,"class","relative group"),n(ve,"href","https://github.com/huggingface/transformers/pull/11598"),n(ve,"rel","nofollow"),n(ge,"href","https://github.com/huggingface/transformers/pull/13342"),n(ge,"rel","nofollow"),n(V,"id","using-community-inference-api-with-a-supported-library"),n(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(V,"href","#using-community-inference-api-with-a-supported-library"),n(P,"class","relative group"),n(we,"href","https://github.com/huggingface/api-inference-community"),n(we,"rel","nofollow"),n(be,"href","https://github.com/huggingface/api-inference-community/blob/main/api_inference_community/validation.py"),n(be,"rel","nofollow"),n(_e,"href","https://github.com/huggingface/huggingface_hub/commit/5f040a117cf2a44d704621012eb41c01b103cfca#diff-db8bbac95c077540d79900384cfd524d451e629275cbb5de7a31fc1cd5d6c189"),n(_e,"rel","nofollow"),n(Ee,"href","https://github.com/huggingface/huggingface_hub/commit/141e30588a2031d4d5798eaa2c1250d1d1b75905#diff-db8bbac95c077540d79900384cfd524d451e629275cbb5de7a31fc1cd5d6c189"),n(Ee,"rel","nofollow"),n(ke,"href","https://github.com/huggingface/huggingface_hub/commit/dbea604a45df163d3f0b4b1d897e4b0fb951c650#diff-db8bbac95c077540d79900384cfd524d451e629275cbb5de7a31fc1cd5d6c189"),n(ke,"rel","nofollow"),n(Ae,"href","https://github.com/huggingface/api-inference-community/tree/main/docker_images/common/app/pipelines"),n(Ae,"rel","nofollow"),n(Ie,"href","https://github.com/huggingface/huggingface_hub/commit/6926fd9bec23cb963ce3f58ec53496083997f0fa#diff-3f1083a92ca0047b50f9ad2d04f0fe8dfaeee0e26ab71eb8835e365359a1d0dc"),n(Ie,"rel","nofollow"),n(X,"id","adding-community-inference-api-for-a-quick-prototype"),n(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(X,"href","#adding-community-inference-api-for-a-quick-prototype"),n(T,"class","relative group"),n($e,"href","https://github.com/huggingface/api-inference-community/tree/main/docker_images/generic"),n($e,"rel","nofollow"),n(Te,"href","https://huggingface.co/templates"),n(Te,"rel","nofollow"),n(ee,"id","ui-elements"),n(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(ee,"href","#ui-elements"),n(L,"class","relative group"),n(xe,"href","https://github.com/huggingface/hub-docs/blob/main/js/src/lib/interfaces/Types.ts"),n(xe,"rel","nofollow"),n(He,"href","https://github.com/huggingface/hub-docs/blob/main/tasks/src/const.ts"),n(He,"rel","nofollow"),n(Ce,"href","https://github.com/huggingface/hub-docs/blob/main/tasks/src/tasksData.ts"),n(Ce,"rel","nofollow"),n(Oe,"start","2"),n(Ue,"href","https://github.com/huggingface/hub-docs/tree/main/js/src/lib/components/Icons"),n(Ue,"rel","nofollow"),n(De,"href","https://icones.js.org/collection/carbon"),n(De,"rel","nofollow"),n(Re,"href","https://github.com/huggingface/hub-docs/blob/main/tasks/src/lib/components/PipelineIcon/PipelineIcon.svelte"),n(Re,"rel","nofollow"),n(re,"id","widget"),n(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(re,"href","#widget"),n(x,"class","relative group"),n(Ye,"href","https://huggingface-widgets.netlify.app/"),n(Ye,"rel","nofollow"),n(We,"href","https://github.com/huggingface/hub-docs/tree/main/js/src/lib/components/InferenceWidget/widgets"),n(We,"rel","nofollow"),n(je,"href","https://github.com/huggingface/hub-docs/tree/main/js"),n(je,"rel","nofollow")},m(e,f){t(document.head,w),h(e,ao,f),h(e,b,f),t(b,R),t(R,nt),H(fe,nt,null),t(b,ca),t(b,ft),t(ft,da),h(e,ro,f),h(e,_,f),t(_,q),t(q,ht),H(he,ht,null),t(_,ua),t(_,ct),t(ct,pa),h(e,io,f),h(e,Ge,f),t(Ge,ma),h(e,lo,f),h(e,E,f),t(E,Me),t(E,va),t(E,Fe),h(e,so,f),h(e,Y,f),t(Y,ga),t(Y,dt),t(dt,ya),t(Y,wa),h(e,no,f),h(e,k,f),t(k,W),t(W,ut),H(ce,ut,null),t(k,ba),t(k,pt),t(pt,_a),h(e,fo,f),h(e,Be,f),t(Be,Ea),h(e,ho,f),h(e,v,f),t(v,mt),t(mt,ka),t(v,Aa),t(v,vt),t(vt,Ia),t(v,Pa),t(v,gt),t(gt,$a),h(e,co,f),h(e,Ve,f),t(Ve,Ta),h(e,uo,f),h(e,j,f),t(j,La),t(j,de),t(de,xa),t(j,Na),h(e,po,f),h(e,Je,f),t(Je,Sa),h(e,mo,f),h(e,g,f),t(g,ue),t(ue,Ha),t(ue,yt),t(yt,Ca),t(ue,Oa),t(g,Ua),t(g,ze),t(ze,Da),t(ze,Ke),t(Ke,Ra),t(g,qa),t(g,wt),t(wt,Ya),h(e,vo,f),h(e,Qe,f),t(Qe,Wa),h(e,go,f),h(e,G,f),t(G,ja),t(G,bt),t(bt,Ga),t(G,Ma),h(e,yo,f),h(e,A,f),t(A,M),t(M,_t),H(pe,_t,null),t(A,Fa),t(A,Et),t(Et,Ba),h(e,wo,f),h(e,I,f),t(I,F),t(F,kt),H(me,kt,null),t(I,Va),t(I,At),t(At,Ja),h(e,bo,f),h(e,u,f),t(u,za),t(u,It),t(It,Ka),t(u,Qa),t(u,Pt),t(Pt,Xa),t(u,Za),t(u,$t),t($t,er),t(u,tr),h(e,_o,f),h(e,B,f),t(B,Tt),t(Tt,ve),t(ve,or),t(B,ar),t(B,Lt),t(Lt,ge),t(ge,rr),h(e,Eo,f),h(e,Xe,f),t(Xe,ir),h(e,ko,f),h(e,P,f),t(P,V),t(V,xt),H(ye,xt,null),t(P,lr),t(P,Nt),t(Nt,sr),h(e,Ao,f),h(e,J,f),t(J,nr),t(J,we),t(we,fr),t(J,hr),h(e,Io,f),h(e,Ze,f),t(Ze,St),t(St,cr),h(e,Po,f),h(e,z,f),t(z,K),t(K,dr),t(K,be),t(be,ur),t(K,pr),t(K,$),t($,Ht),t(Ht,_e),t(_e,mr),t($,vr),t($,Ct),t(Ct,Ee),t(Ee,gr),t($,yr),t($,Ot),t(Ot,ke),t(ke,wr),t(z,br),t(z,Q),t(Q,_r),t(Q,Ae),t(Ae,Ut),t(Ut,Er),t(Q,kr),t(Q,Dt),t(Dt,Rt),t(Rt,Ie),t(Ie,Ar),h(e,$o,f),h(e,T,f),t(T,X),t(X,qt),H(Pe,qt,null),t(T,Ir),t(T,Yt),t(Yt,Pr),h(e,To,f),h(e,et,f),t(et,Wt),t(Wt,$r),h(e,Lo,f),h(e,Z,f),t(Z,Tr),t(Z,$e),t($e,Lr),t(Z,xr),h(e,xo,f),h(e,p,f),t(p,Nr),t(p,Te),t(Te,Sr),t(p,Hr),t(p,jt),t(jt,Cr),t(p,Or),t(p,Gt),t(Gt,Ur),t(p,Dr),h(e,No,f),h(e,L,f),t(L,ee),t(ee,Mt),H(Le,Mt,null),t(L,Rr),t(L,Ft),t(Ft,qr),h(e,So,f),h(e,tt,f),t(tt,Yr),h(e,Ho,f),h(e,ot,f),t(ot,at),t(at,Wr),t(at,Bt),t(Bt,jr),h(e,Co,f),h(e,te,f),t(te,Gr),t(te,xe),t(xe,Mr),t(te,Fr),h(e,Oo,f),h(e,oe,f),t(oe,Ne),t(Ne,Br),t(Ne,Vt),t(Vt,Vr),t(Ne,Jr),t(oe,zr),t(oe,ae),t(ae,Kr),t(ae,Jt),t(Jt,Qr),t(ae,Xr),t(ae,Se),t(Se,zt),t(zt,He),t(He,Zr),t(Se,ei),t(Se,Kt),t(Kt,Ce),t(Ce,ti),h(e,Uo,f),h(e,Oe,f),t(Oe,Qt),t(Qt,oi),h(e,Do,f),h(e,m,f),t(m,ai),t(m,Ue),t(Ue,ri),t(m,ii),t(m,De),t(De,li),t(m,si),t(m,Re),t(Re,ni),t(m,fi),h(e,Ro,f),h(e,x,f),t(x,re),t(re,Xt),H(qe,Xt,null),t(x,hi),t(x,Zt),t(Zt,ci),h(e,qo,f),h(e,ie,f),t(ie,di),t(ie,Ye),t(Ye,ui),t(ie,pi),h(e,Yo,f),h(e,y,f),t(y,mi),t(y,We),t(We,vi),t(y,gi),t(y,je),t(je,yi),t(y,wi),Wo=!0},p:hs,i(e){Wo||(C(fe.$$.fragment,e),C(he.$$.fragment,e),C(ce.$$.fragment,e),C(pe.$$.fragment,e),C(me.$$.fragment,e),C(ye.$$.fragment,e),C(Pe.$$.fragment,e),C(Le.$$.fragment,e),C(qe.$$.fragment,e),Wo=!0)},o(e){O(fe.$$.fragment,e),O(he.$$.fragment,e),O(ce.$$.fragment,e),O(pe.$$.fragment,e),O(me.$$.fragment,e),O(ye.$$.fragment,e),O(Pe.$$.fragment,e),O(Le.$$.fragment,e),O(qe.$$.fragment,e),Wo=!1},d(e){o(w),e&&o(ao),e&&o(b),U(fe),e&&o(ro),e&&o(_),U(he),e&&o(io),e&&o(Ge),e&&o(lo),e&&o(E),e&&o(so),e&&o(Y),e&&o(no),e&&o(k),U(ce),e&&o(fo),e&&o(Be),e&&o(ho),e&&o(v),e&&o(co),e&&o(Ve),e&&o(uo),e&&o(j),e&&o(po),e&&o(Je),e&&o(mo),e&&o(g),e&&o(vo),e&&o(Qe),e&&o(go),e&&o(G),e&&o(yo),e&&o(A),U(pe),e&&o(wo),e&&o(I),U(me),e&&o(bo),e&&o(u),e&&o(_o),e&&o(B),e&&o(Eo),e&&o(Xe),e&&o(ko),e&&o(P),U(ye),e&&o(Ao),e&&o(J),e&&o(Io),e&&o(Ze),e&&o(Po),e&&o(z),e&&o($o),e&&o(T),U(Pe),e&&o(To),e&&o(et),e&&o(Lo),e&&o(Z),e&&o(xo),e&&o(p),e&&o(No),e&&o(L),U(Le),e&&o(So),e&&o(tt),e&&o(Ho),e&&o(ot),e&&o(Co),e&&o(te),e&&o(Oo),e&&o(oe),e&&o(Uo),e&&o(Oe),e&&o(Do),e&&o(m),e&&o(Ro),e&&o(x),U(qe),e&&o(qo),e&&o(ie),e&&o(Yo),e&&o(y)}}}const us={local:"tasks",sections:[{local:"whats-a-task",title:"What's a task?"},{local:"overview",title:"Overview"},{local:"adding-new-tasks-to-the-hub",sections:[{local:"using-hugging-face-transformers-library",title:"Using Hugging Face transformers library"},{local:"using-community-inference-api-with-a-supported-library",title:"Using Community Inference API with a supported library"},{local:"adding-community-inference-api-for-a-quick-prototype",title:"Adding Community Inference API for a quick prototype"},{local:"ui-elements",title:"UI elements"},{local:"widget",title:"Widget"}],title:"Adding new tasks to the Hub"}],title:"Tasks"};function ps(Ei){return cs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class gs extends ls{constructor(w){super();ss(this,w,ps,ds,ns,{})}}export{gs as default,us as metadata};
