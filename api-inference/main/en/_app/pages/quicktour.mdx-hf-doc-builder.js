import{S as $s,i as _s,s as bs,e as s,k as d,w,t as l,M as Ps,c as r,d as a,m as h,a as n,x as $,h as i,b as c,G as t,g as f,y as _,q as b,o as P,B as A,v as As,L as bo}from"../chunks/vendor-hf-doc-builder.js";import{I as we}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as Bt,I as Es,M as Po}from"../chunks/InferenceApi-hf-doc-builder.js";function ks(k){let u,m;return u=new Bt({props:{code:`import json
import requests
API_URL = "https://api-inference.huggingface.co/models/gpt2"
headers = {"Authorization": f"Bearer {API_TOKEN}"}
def query(payload):
    data = json.dumps(payload)
    response = requests.request("POST", API_URL, headers=headers, data=data)
    return json.loads(response.content.decode("utf-8"))
data = query("Can you please let us know more details about your ")`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
API_URL = <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/gpt2&quot;</span>
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">payload</span>):
    data = json.dumps(payload)
    response = requests.request(<span class="hljs-string">&quot;POST&quot;</span>, API_URL, headers=headers, data=data)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query(<span class="hljs-string">&quot;Can you please let us know more details about your &quot;</span>)`}}),{c(){w(u.$$.fragment)},l(o){$(u.$$.fragment,o)},m(o,g){_(u,o,g),m=!0},p:bo,i(o){m||(b(u.$$.fragment,o),m=!0)},o(o){P(u.$$.fragment,o),m=!1},d(o){A(u,o)}}}function Is(k){let u,m;return u=new Po({props:{$$slots:{default:[ks]},$$scope:{ctx:k}}}),{c(){w(u.$$.fragment)},l(o){$(u.$$.fragment,o)},m(o,g){_(u,o,g),m=!0},p(o,g){const E={};g&2&&(E.$$scope={dirty:g,ctx:o}),u.$set(E)},i(o){m||(b(u.$$.fragment,o),m=!0)},o(o){P(u.$$.fragment,o),m=!1},d(o){A(u,o)}}}function qs(k){let u,m;return u=new Bt({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://api-inference.huggingface.co/models/gpt2",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "POST",
            body: JSON.stringify(data),
        }
    );
    const result = await response.json();
    return result;
}
query("Can you please let us know more details about your ").then((response) => {
    console.log(JSON.stringify(response));
});
// [{"generated_text":"Can you please let us know more details about your ids as a subscriber or other related project? Be sure to update your username and password or it will be stolen via email. Our information is only accessible through our website, and the payment support services"}]`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://api-inference.huggingface.co/models/gpt2&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,
            <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data),
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>(<span class="hljs-string">&quot;Can you please let us know more details about your &quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});
<span class="hljs-comment">// [{&quot;generated_text&quot;:&quot;Can you please let us know more details about your ids as a subscriber or other related project? Be sure to update your username and password or it will be stolen via email. Our information is only accessible through our website, and the payment support services&quot;}]</span>`}}),{c(){w(u.$$.fragment)},l(o){$(u.$$.fragment,o)},m(o,g){_(u,o,g),m=!0},p:bo,i(o){m||(b(u.$$.fragment,o),m=!0)},o(o){P(u.$$.fragment,o),m=!1},d(o){A(u,o)}}}function js(k){let u,m;return u=new Po({props:{$$slots:{default:[qs]},$$scope:{ctx:k}}}),{c(){w(u.$$.fragment)},l(o){$(u.$$.fragment,o)},m(o,g){_(u,o,g),m=!0},p(o,g){const E={};g&2&&(E.$$scope={dirty:g,ctx:o}),u.$set(E)},i(o){m||(b(u.$$.fragment,o),m=!0)},o(o){P(u.$$.fragment,o),m=!1},d(o){A(u,o)}}}function Ts(k){let u,m;return u=new Bt({props:{code:`curl https://api-inference.huggingface.co/models/gpt2 \\
        -X POST \\
        -d '"Can you please let us know more details about your "' \\
        -H "Authorization: Bearer \${API_TOKEN}"
# [{"generated_text":"Can you please let us know more details about your ids as a subscriber or other related project? Be sure to update your username and password or it will be stolen via email. Our information is only accessible through our website, and the payment support services"}]`,highlighted:`curl https://api-inference.huggingface.co/models/gpt2 \\
        -X POST \\
        -d <span class="hljs-string">&#x27;&quot;Can you please let us know more details about your &quot;&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">\${API_TOKEN}</span>&quot;</span>
<span class="hljs-comment"># [{&quot;generated_text&quot;:&quot;Can you please let us know more details about your ids as a subscriber or other related project? Be sure to update your username and password or it will be stolen via email. Our information is only accessible through our website, and the payment support services&quot;}]</span>`}}),{c(){w(u.$$.fragment)},l(o){$(u.$$.fragment,o)},m(o,g){_(u,o,g),m=!0},p:bo,i(o){m||(b(u.$$.fragment,o),m=!0)},o(o){P(u.$$.fragment,o),m=!1},d(o){A(u,o)}}}function xs(k){let u,m;return u=new Po({props:{$$slots:{default:[Ts]},$$scope:{ctx:k}}}),{c(){w(u.$$.fragment)},l(o){$(u.$$.fragment,o)},m(o,g){_(u,o,g),m=!0},p(o,g){const E={};g&2&&(E.$$scope={dirty:g,ctx:o}),u.$set(E)},i(o){m||(b(u.$$.fragment,o),m=!0)},o(o){P(u.$$.fragment,o),m=!1},d(o){A(u,o)}}}function Os(k){let u,m,o,g,E,V,zt,je,Dt,ot,$e,Ft,st,j,N,Te,Y,Kt,xe,Jt,rt,y,Z,Wt,Oe,Qt,Vt,Yt,_e,Zt,Le,ea,ta,Se,aa,oa,ee,sa,Ne,ra,na,la,Ce,ia,ua,te,pa,Xe,ca,fa,da,ae,ha,Ue,ma,ga,ya,be,Re,va,wa,$a,He,_a,nt,T,C,Ge,oe,ba,Me,Pa,lt,Pe,Aa,it,X,U,se,Ea,ka,re,Ia,qa,ja,ne,Ta,le,xa,Oa,ut,I,La,Be,Sa,Na,ze,Ca,Xa,De,Ua,Ra,pt,Ae,Ha,ct,x,R,Fe,ie,Ga,Ke,Ma,ft,q,Ba,ue,za,Da,pe,Fa,Ka,ce,Ja,Wa,dt,fe,ht,H,Qa,de,Va,Ya,mt,G,gt,O,M,Je,he,Za,We,eo,yt,B,to,Ee,Qe,ao,oo,vt,L,z,Ve,me,so,Ye,ro,wt,D,no,Ze,lo,io,$t,ke,uo,_t,F,po,Ie,co,fo,bt,S,K,et,ge,ho,tt,mo,Pt,qe,go,At,J,yo,ye,vo,wo,Et;return V=new we({}),Y=new we({}),oe=new we({}),ie=new we({}),fe=new Bt({props:{code:"ENDPOINT = https://api-inference.huggingface.co/models/<MODEL_ID>",highlighted:'ENDPOINT = https:<span class="hljs-regexp">//</span>api-inference.huggingface.co<span class="hljs-regexp">/models/</span>&lt;MODEL_ID&gt;'}}),G=new Es({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[xs],js:[js],python:[Is]},$$scope:{ctx:k}}}),he=new we({}),me=new we({}),ge=new we({}),{c(){u=s("meta"),m=d(),o=s("h1"),g=s("a"),E=s("span"),w(V.$$.fragment),zt=d(),je=s("span"),Dt=l("Overview"),ot=d(),$e=s("p"),Ft=l("Let\u2019s have a quick look at the \u{1F917} Hosted Inference API."),st=d(),j=s("h2"),N=s("a"),Te=s("span"),w(Y.$$.fragment),Kt=d(),xe=s("span"),Jt=l("Main features:"),rt=d(),y=s("ul"),Z=s("li"),Wt=l("Leverage "),Oe=s("strong"),Qt=l("80,000+ Transformer models"),Vt=l(" (T5, Blenderbot, Bart, GPT-2, Pegasus...)"),Yt=d(),_e=s("li"),Zt=l("Upload, manage and serve your "),Le=s("strong"),ea=l("own models privately"),ta=d(),Se=s("li"),aa=l("Run Classification, NER, Conversational, Summarization, Translation, Question-Answering, Embeddings Extraction tasks"),oa=d(),ee=s("li"),sa=l("Get up to "),Ne=s("strong"),ra=l("10x inference speedup"),na=l(" to reduce user latency"),la=d(),Ce=s("li"),ia=l("Accelerated inference for a number of supported models on CPU"),ua=d(),te=s("li"),pa=l("Run "),Xe=s("strong"),ca=l("large models"),fa=l(" that are challenging to deploy in production"),da=d(),ae=s("li"),ha=l("Scale up to 1,000 requests per second with "),Ue=s("strong"),ma=l("automatic scaling"),ga=l(" built-in"),ya=d(),be=s("li"),Re=s("strong"),va=l("Ship new NLP, CV, Audio, or RL features faster"),wa=l(" as new models become available"),$a=d(),He=s("li"),_a=l("Build your business on a platform powered by the reference open source project in ML"),nt=d(),T=s("h2"),C=s("a"),Ge=s("span"),w(oe.$$.fragment),ba=d(),Me=s("span"),Pa=l("Get your API Token"),lt=d(),Pe=s("p"),Aa=l("To get started you need to:"),it=d(),X=s("ul"),U=s("li"),se=s("a"),Ea=l("Register"),ka=l(" or "),re=s("a"),Ia=l("Login"),qa=l("."),ja=d(),ne=s("li"),Ta=l("Get a User Access or API token "),le=s("a"),xa=l("in your Hugging Face profile settings"),Oa=l("."),ut=d(),I=s("p"),La=l("You should see a token "),Be=s("code"),Sa=l("hf_xxxxx"),Na=l(" (old tokens are "),ze=s("code"),Ca=l("api_XXXXXXXX"),Xa=l(" or "),De=s("code"),Ua=l("api_org_XXXXXXX"),Ra=l(")."),pt=d(),Ae=s("p"),Ha=l(`If you do not submit your API token when sending requests to the API,
you will not be able to run inference on your private models.`),ct=d(),x=s("h2"),R=s("a"),Fe=s("span"),w(ie.$$.fragment),Ga=d(),Ke=s("span"),Ma=l("Running Inference with API Requests"),ft=d(),q=s("p"),Ba=l(`The first step is to choose which model you are going to run. Go to the
`),ue=s("a"),za=l("Model Hub"),Da=l(` and select the model you want
to use. If you are unsure where to start, make sure to check the
`),pe=s("a"),Fa=l(`recommended models for each ML
task`),Ka=l(`
available, or the `),ce=s("a"),Ja=l("Tasks"),Wa=l(" overview."),dt=d(),w(fe.$$.fragment),ht=d(),H=s("p"),Qa=l("Let\u2019s use "),de=s("a"),Va=l("gpt2"),Ya=l(` as an example. To run
inference, simply use this code:`),mt=d(),w(G.$$.fragment),gt=d(),O=s("h2"),M=s("a"),Je=s("span"),w(he.$$.fragment),Za=d(),We=s("span"),eo=l("API Options and Parameters"),yt=d(),B=s("p"),to=l(`Depending on the task (aka pipeline) the model is configured for, the
request will accept specific parameters. When sending requests to run
any model, API options allow you to specify the caching and model
loading behavior. All API options and
parameters are detailed here `),Ee=s("a"),Qe=s("code"),ao=l("detailed_parameters"),oo=l("."),vt=d(),L=s("h2"),z=s("a"),Ve=s("span"),w(me.$$.fragment),so=d(),Ye=s("span"),ro=l("Using CPU-Accelerated Inference"),wt=d(),D=s("p"),no=l(`As an API customer, your API token will automatically enable CPU-Accelerated inference on your requests if the model type is supported. For instance, if you compare
gpt2 model inference through our API with
CPU-Acceleration, compared to running inference on the model out of the
box on a local setup, you should measure a `),Ze=s("strong"),lo=l("~10x speedup"),io=l(`. The
specific performance boost depends on the model and input payload (and
your local hardware).`),$t=d(),ke=s("p"),uo=l(`To verify you are using the CPU-Accelerated version of a model you can
check the x-compute-type header of your requests, which
should be cpu+optimized. If you do not see it, it simply
means not all optimizations are turned on. This can be for various
factors; the model might have been added recently to transformers, or
the model can be optimized in several different ways and the best one
depends on your use case.`),_t=d(),F=s("p"),po=l("If you contact us at "),Ie=s("a"),co=l("api-enterprise@huggingface.co"),fo=l(`, we\u2019ll be able to
increase the inference speed for you, depending on your actual use case.`),bt=d(),S=s("h2"),K=s("a"),et=s("span"),w(ge.$$.fragment),ho=d(),tt=s("span"),mo=l("Model Loading and latency"),Pt=d(),qe=s("p"),go=l("The Hosted Inference API can serve predictions on-demand from over 100,000 models deployed on the Hugging Face Hub, dynamically loaded on shared infrastructure. If the requested model is not loaded in memory, the Hosted Inference API will start by loading the model into memory and returning a 503 response, before it can respond with the prediction."),At=d(),J=s("p"),yo=l("If your use case requires large volume or predictable latencies, you can use our paid solution "),ye=s("a"),vo=l("Inference Endpoints"),wo=l(" to easily deploy your models on dedicated, fully-managed infrastructure. With Inference Endpoints you can quickly create endpoints on the cloud, region, CPU or GPU compute instance of your choice."),this.h()},l(e){const p=Ps('[data-svelte="svelte-1phssyn"]',document.head);u=r(p,"META",{name:!0,content:!0}),p.forEach(a),m=h(e),o=r(e,"H1",{class:!0});var ve=n(o);g=r(ve,"A",{id:!0,class:!0,href:!0});var Ao=n(g);E=r(Ao,"SPAN",{});var Eo=n(E);$(V.$$.fragment,Eo),Eo.forEach(a),Ao.forEach(a),zt=h(ve),je=r(ve,"SPAN",{});var ko=n(je);Dt=i(ko,"Overview"),ko.forEach(a),ve.forEach(a),ot=h(e),$e=r(e,"P",{});var Io=n($e);Ft=i(Io,"Let\u2019s have a quick look at the \u{1F917} Hosted Inference API."),Io.forEach(a),st=h(e),j=r(e,"H2",{class:!0});var kt=n(j);N=r(kt,"A",{id:!0,class:!0,href:!0});var qo=n(N);Te=r(qo,"SPAN",{});var jo=n(Te);$(Y.$$.fragment,jo),jo.forEach(a),qo.forEach(a),Kt=h(kt),xe=r(kt,"SPAN",{});var To=n(xe);Jt=i(To,"Main features:"),To.forEach(a),kt.forEach(a),rt=h(e),y=r(e,"UL",{});var v=n(y);Z=r(v,"LI",{});var It=n(Z);Wt=i(It,"Leverage "),Oe=r(It,"STRONG",{});var xo=n(Oe);Qt=i(xo,"80,000+ Transformer models"),xo.forEach(a),Vt=i(It," (T5, Blenderbot, Bart, GPT-2, Pegasus...)"),It.forEach(a),Yt=h(v),_e=r(v,"LI",{});var $o=n(_e);Zt=i($o,"Upload, manage and serve your "),Le=r($o,"STRONG",{});var Oo=n(Le);ea=i(Oo,"own models privately"),Oo.forEach(a),$o.forEach(a),ta=h(v),Se=r(v,"LI",{});var Lo=n(Se);aa=i(Lo,"Run Classification, NER, Conversational, Summarization, Translation, Question-Answering, Embeddings Extraction tasks"),Lo.forEach(a),oa=h(v),ee=r(v,"LI",{});var qt=n(ee);sa=i(qt,"Get up to "),Ne=r(qt,"STRONG",{});var So=n(Ne);ra=i(So,"10x inference speedup"),So.forEach(a),na=i(qt," to reduce user latency"),qt.forEach(a),la=h(v),Ce=r(v,"LI",{});var No=n(Ce);ia=i(No,"Accelerated inference for a number of supported models on CPU"),No.forEach(a),ua=h(v),te=r(v,"LI",{});var jt=n(te);pa=i(jt,"Run "),Xe=r(jt,"STRONG",{});var Co=n(Xe);ca=i(Co,"large models"),Co.forEach(a),fa=i(jt," that are challenging to deploy in production"),jt.forEach(a),da=h(v),ae=r(v,"LI",{});var Tt=n(ae);ha=i(Tt,"Scale up to 1,000 requests per second with "),Ue=r(Tt,"STRONG",{});var Xo=n(Ue);ma=i(Xo,"automatic scaling"),Xo.forEach(a),ga=i(Tt," built-in"),Tt.forEach(a),ya=h(v),be=r(v,"LI",{});var _o=n(be);Re=r(_o,"STRONG",{});var Uo=n(Re);va=i(Uo,"Ship new NLP, CV, Audio, or RL features faster"),Uo.forEach(a),wa=i(_o," as new models become available"),_o.forEach(a),$a=h(v),He=r(v,"LI",{});var Ro=n(He);_a=i(Ro,"Build your business on a platform powered by the reference open source project in ML"),Ro.forEach(a),v.forEach(a),nt=h(e),T=r(e,"H2",{class:!0});var xt=n(T);C=r(xt,"A",{id:!0,class:!0,href:!0});var Ho=n(C);Ge=r(Ho,"SPAN",{});var Go=n(Ge);$(oe.$$.fragment,Go),Go.forEach(a),Ho.forEach(a),ba=h(xt),Me=r(xt,"SPAN",{});var Mo=n(Me);Pa=i(Mo,"Get your API Token"),Mo.forEach(a),xt.forEach(a),lt=h(e),Pe=r(e,"P",{});var Bo=n(Pe);Aa=i(Bo,"To get started you need to:"),Bo.forEach(a),it=h(e),X=r(e,"UL",{});var Ot=n(X);U=r(Ot,"LI",{});var at=n(U);se=r(at,"A",{href:!0,rel:!0});var zo=n(se);Ea=i(zo,"Register"),zo.forEach(a),ka=i(at," or "),re=r(at,"A",{href:!0,rel:!0});var Do=n(re);Ia=i(Do,"Login"),Do.forEach(a),qa=i(at,"."),at.forEach(a),ja=h(Ot),ne=r(Ot,"LI",{});var Lt=n(ne);Ta=i(Lt,"Get a User Access or API token "),le=r(Lt,"A",{href:!0,rel:!0});var Fo=n(le);xa=i(Fo,"in your Hugging Face profile settings"),Fo.forEach(a),Oa=i(Lt,"."),Lt.forEach(a),Ot.forEach(a),ut=h(e),I=r(e,"P",{});var W=n(I);La=i(W,"You should see a token "),Be=r(W,"CODE",{});var Ko=n(Be);Sa=i(Ko,"hf_xxxxx"),Ko.forEach(a),Na=i(W," (old tokens are "),ze=r(W,"CODE",{});var Jo=n(ze);Ca=i(Jo,"api_XXXXXXXX"),Jo.forEach(a),Xa=i(W," or "),De=r(W,"CODE",{});var Wo=n(De);Ua=i(Wo,"api_org_XXXXXXX"),Wo.forEach(a),Ra=i(W,")."),W.forEach(a),pt=h(e),Ae=r(e,"P",{});var Qo=n(Ae);Ha=i(Qo,`If you do not submit your API token when sending requests to the API,
you will not be able to run inference on your private models.`),Qo.forEach(a),ct=h(e),x=r(e,"H2",{class:!0});var St=n(x);R=r(St,"A",{id:!0,class:!0,href:!0});var Vo=n(R);Fe=r(Vo,"SPAN",{});var Yo=n(Fe);$(ie.$$.fragment,Yo),Yo.forEach(a),Vo.forEach(a),Ga=h(St),Ke=r(St,"SPAN",{});var Zo=n(Ke);Ma=i(Zo,"Running Inference with API Requests"),Zo.forEach(a),St.forEach(a),ft=h(e),q=r(e,"P",{});var Q=n(q);Ba=i(Q,`The first step is to choose which model you are going to run. Go to the
`),ue=r(Q,"A",{href:!0,rel:!0});var es=n(ue);za=i(es,"Model Hub"),es.forEach(a),Da=i(Q,` and select the model you want
to use. If you are unsure where to start, make sure to check the
`),pe=r(Q,"A",{href:!0,rel:!0});var ts=n(pe);Fa=i(ts,`recommended models for each ML
task`),ts.forEach(a),Ka=i(Q,`
available, or the `),ce=r(Q,"A",{href:!0,rel:!0});var as=n(ce);Ja=i(as,"Tasks"),as.forEach(a),Wa=i(Q," overview."),Q.forEach(a),dt=h(e),$(fe.$$.fragment,e),ht=h(e),H=r(e,"P",{});var Nt=n(H);Qa=i(Nt,"Let\u2019s use "),de=r(Nt,"A",{href:!0,rel:!0});var os=n(de);Va=i(os,"gpt2"),os.forEach(a),Ya=i(Nt,` as an example. To run
inference, simply use this code:`),Nt.forEach(a),mt=h(e),$(G.$$.fragment,e),gt=h(e),O=r(e,"H2",{class:!0});var Ct=n(O);M=r(Ct,"A",{id:!0,class:!0,href:!0});var ss=n(M);Je=r(ss,"SPAN",{});var rs=n(Je);$(he.$$.fragment,rs),rs.forEach(a),ss.forEach(a),Za=h(Ct),We=r(Ct,"SPAN",{});var ns=n(We);eo=i(ns,"API Options and Parameters"),ns.forEach(a),Ct.forEach(a),yt=h(e),B=r(e,"P",{});var Xt=n(B);to=i(Xt,`Depending on the task (aka pipeline) the model is configured for, the
request will accept specific parameters. When sending requests to run
any model, API options allow you to specify the caching and model
loading behavior. All API options and
parameters are detailed here `),Ee=r(Xt,"A",{href:!0});var ls=n(Ee);Qe=r(ls,"CODE",{});var is=n(Qe);ao=i(is,"detailed_parameters"),is.forEach(a),ls.forEach(a),oo=i(Xt,"."),Xt.forEach(a),vt=h(e),L=r(e,"H2",{class:!0});var Ut=n(L);z=r(Ut,"A",{id:!0,class:!0,href:!0});var us=n(z);Ve=r(us,"SPAN",{});var ps=n(Ve);$(me.$$.fragment,ps),ps.forEach(a),us.forEach(a),so=h(Ut),Ye=r(Ut,"SPAN",{});var cs=n(Ye);ro=i(cs,"Using CPU-Accelerated Inference"),cs.forEach(a),Ut.forEach(a),wt=h(e),D=r(e,"P",{});var Rt=n(D);no=i(Rt,`As an API customer, your API token will automatically enable CPU-Accelerated inference on your requests if the model type is supported. For instance, if you compare
gpt2 model inference through our API with
CPU-Acceleration, compared to running inference on the model out of the
box on a local setup, you should measure a `),Ze=r(Rt,"STRONG",{});var fs=n(Ze);lo=i(fs,"~10x speedup"),fs.forEach(a),io=i(Rt,`. The
specific performance boost depends on the model and input payload (and
your local hardware).`),Rt.forEach(a),$t=h(e),ke=r(e,"P",{});var ds=n(ke);uo=i(ds,`To verify you are using the CPU-Accelerated version of a model you can
check the x-compute-type header of your requests, which
should be cpu+optimized. If you do not see it, it simply
means not all optimizations are turned on. This can be for various
factors; the model might have been added recently to transformers, or
the model can be optimized in several different ways and the best one
depends on your use case.`),ds.forEach(a),_t=h(e),F=r(e,"P",{});var Ht=n(F);po=i(Ht,"If you contact us at "),Ie=r(Ht,"A",{href:!0});var hs=n(Ie);co=i(hs,"api-enterprise@huggingface.co"),hs.forEach(a),fo=i(Ht,`, we\u2019ll be able to
increase the inference speed for you, depending on your actual use case.`),Ht.forEach(a),bt=h(e),S=r(e,"H2",{class:!0});var Gt=n(S);K=r(Gt,"A",{id:!0,class:!0,href:!0});var ms=n(K);et=r(ms,"SPAN",{});var gs=n(et);$(ge.$$.fragment,gs),gs.forEach(a),ms.forEach(a),ho=h(Gt),tt=r(Gt,"SPAN",{});var ys=n(tt);mo=i(ys,"Model Loading and latency"),ys.forEach(a),Gt.forEach(a),Pt=h(e),qe=r(e,"P",{});var vs=n(qe);go=i(vs,"The Hosted Inference API can serve predictions on-demand from over 100,000 models deployed on the Hugging Face Hub, dynamically loaded on shared infrastructure. If the requested model is not loaded in memory, the Hosted Inference API will start by loading the model into memory and returning a 503 response, before it can respond with the prediction."),vs.forEach(a),At=h(e),J=r(e,"P",{});var Mt=n(J);yo=i(Mt,"If your use case requires large volume or predictable latencies, you can use our paid solution "),ye=r(Mt,"A",{href:!0,rel:!0});var ws=n(ye);vo=i(ws,"Inference Endpoints"),ws.forEach(a),wo=i(Mt," to easily deploy your models on dedicated, fully-managed infrastructure. With Inference Endpoints you can quickly create endpoints on the cloud, region, CPU or GPU compute instance of your choice."),Mt.forEach(a),this.h()},h(){c(u,"name","hf:doc:metadata"),c(u,"content",JSON.stringify(Ls)),c(g,"id","overview"),c(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g,"href","#overview"),c(o,"class","relative group"),c(N,"id","main-features"),c(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N,"href","#main-features"),c(j,"class","relative group"),c(C,"id","get-your-api-token"),c(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C,"href","#get-your-api-token"),c(T,"class","relative group"),c(se,"href","https://huggingface.co/join"),c(se,"rel","nofollow"),c(re,"href","https://huggingface.co/login"),c(re,"rel","nofollow"),c(le,"href","https://huggingface.co/settings/tokens"),c(le,"rel","nofollow"),c(R,"id","running-inference-with-api-requests"),c(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R,"href","#running-inference-with-api-requests"),c(x,"class","relative group"),c(ue,"href","https://huggingface.co/models"),c(ue,"rel","nofollow"),c(pe,"href","https://api-inference.huggingface.co/docs/python/html/detailed_parameters.html#detailed-parameters"),c(pe,"rel","nofollow"),c(ce,"href","https://huggingface.co/tasks"),c(ce,"rel","nofollow"),c(de,"href","https://huggingface.co/gpt2"),c(de,"rel","nofollow"),c(M,"id","api-options-and-parameters"),c(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M,"href","#api-options-and-parameters"),c(O,"class","relative group"),c(Ee,"href","detailed_parameters"),c(z,"id","using-cpuaccelerated-inference"),c(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z,"href","#using-cpuaccelerated-inference"),c(L,"class","relative group"),c(Ie,"href","mailto:api-enterprise@huggingface.co"),c(K,"id","model-loading-and-latency"),c(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K,"href","#model-loading-and-latency"),c(S,"class","relative group"),c(ye,"href","https://huggingface.co/inference-endpoints"),c(ye,"rel","nofollow")},m(e,p){t(document.head,u),f(e,m,p),f(e,o,p),t(o,g),t(g,E),_(V,E,null),t(o,zt),t(o,je),t(je,Dt),f(e,ot,p),f(e,$e,p),t($e,Ft),f(e,st,p),f(e,j,p),t(j,N),t(N,Te),_(Y,Te,null),t(j,Kt),t(j,xe),t(xe,Jt),f(e,rt,p),f(e,y,p),t(y,Z),t(Z,Wt),t(Z,Oe),t(Oe,Qt),t(Z,Vt),t(y,Yt),t(y,_e),t(_e,Zt),t(_e,Le),t(Le,ea),t(y,ta),t(y,Se),t(Se,aa),t(y,oa),t(y,ee),t(ee,sa),t(ee,Ne),t(Ne,ra),t(ee,na),t(y,la),t(y,Ce),t(Ce,ia),t(y,ua),t(y,te),t(te,pa),t(te,Xe),t(Xe,ca),t(te,fa),t(y,da),t(y,ae),t(ae,ha),t(ae,Ue),t(Ue,ma),t(ae,ga),t(y,ya),t(y,be),t(be,Re),t(Re,va),t(be,wa),t(y,$a),t(y,He),t(He,_a),f(e,nt,p),f(e,T,p),t(T,C),t(C,Ge),_(oe,Ge,null),t(T,ba),t(T,Me),t(Me,Pa),f(e,lt,p),f(e,Pe,p),t(Pe,Aa),f(e,it,p),f(e,X,p),t(X,U),t(U,se),t(se,Ea),t(U,ka),t(U,re),t(re,Ia),t(U,qa),t(X,ja),t(X,ne),t(ne,Ta),t(ne,le),t(le,xa),t(ne,Oa),f(e,ut,p),f(e,I,p),t(I,La),t(I,Be),t(Be,Sa),t(I,Na),t(I,ze),t(ze,Ca),t(I,Xa),t(I,De),t(De,Ua),t(I,Ra),f(e,pt,p),f(e,Ae,p),t(Ae,Ha),f(e,ct,p),f(e,x,p),t(x,R),t(R,Fe),_(ie,Fe,null),t(x,Ga),t(x,Ke),t(Ke,Ma),f(e,ft,p),f(e,q,p),t(q,Ba),t(q,ue),t(ue,za),t(q,Da),t(q,pe),t(pe,Fa),t(q,Ka),t(q,ce),t(ce,Ja),t(q,Wa),f(e,dt,p),_(fe,e,p),f(e,ht,p),f(e,H,p),t(H,Qa),t(H,de),t(de,Va),t(H,Ya),f(e,mt,p),_(G,e,p),f(e,gt,p),f(e,O,p),t(O,M),t(M,Je),_(he,Je,null),t(O,Za),t(O,We),t(We,eo),f(e,yt,p),f(e,B,p),t(B,to),t(B,Ee),t(Ee,Qe),t(Qe,ao),t(B,oo),f(e,vt,p),f(e,L,p),t(L,z),t(z,Ve),_(me,Ve,null),t(L,so),t(L,Ye),t(Ye,ro),f(e,wt,p),f(e,D,p),t(D,no),t(D,Ze),t(Ze,lo),t(D,io),f(e,$t,p),f(e,ke,p),t(ke,uo),f(e,_t,p),f(e,F,p),t(F,po),t(F,Ie),t(Ie,co),t(F,fo),f(e,bt,p),f(e,S,p),t(S,K),t(K,et),_(ge,et,null),t(S,ho),t(S,tt),t(tt,mo),f(e,Pt,p),f(e,qe,p),t(qe,go),f(e,At,p),f(e,J,p),t(J,yo),t(J,ye),t(ye,vo),t(J,wo),Et=!0},p(e,[p]){const ve={};p&2&&(ve.$$scope={dirty:p,ctx:e}),G.$set(ve)},i(e){Et||(b(V.$$.fragment,e),b(Y.$$.fragment,e),b(oe.$$.fragment,e),b(ie.$$.fragment,e),b(fe.$$.fragment,e),b(G.$$.fragment,e),b(he.$$.fragment,e),b(me.$$.fragment,e),b(ge.$$.fragment,e),Et=!0)},o(e){P(V.$$.fragment,e),P(Y.$$.fragment,e),P(oe.$$.fragment,e),P(ie.$$.fragment,e),P(fe.$$.fragment,e),P(G.$$.fragment,e),P(he.$$.fragment,e),P(me.$$.fragment,e),P(ge.$$.fragment,e),Et=!1},d(e){a(u),e&&a(m),e&&a(o),A(V),e&&a(ot),e&&a($e),e&&a(st),e&&a(j),A(Y),e&&a(rt),e&&a(y),e&&a(nt),e&&a(T),A(oe),e&&a(lt),e&&a(Pe),e&&a(it),e&&a(X),e&&a(ut),e&&a(I),e&&a(pt),e&&a(Ae),e&&a(ct),e&&a(x),A(ie),e&&a(ft),e&&a(q),e&&a(dt),A(fe,e),e&&a(ht),e&&a(H),e&&a(mt),A(G,e),e&&a(gt),e&&a(O),A(he),e&&a(yt),e&&a(B),e&&a(vt),e&&a(L),A(me),e&&a(wt),e&&a(D),e&&a($t),e&&a(ke),e&&a(_t),e&&a(F),e&&a(bt),e&&a(S),A(ge),e&&a(Pt),e&&a(qe),e&&a(At),e&&a(J)}}}const Ls={local:"overview",sections:[{local:"main-features",title:"Main features:"},{local:"get-your-api-token",title:"Get your API Token"},{local:"running-inference-with-api-requests",title:"Running Inference with API Requests"},{local:"api-options-and-parameters",title:"API Options and Parameters"},{local:"using-cpuaccelerated-inference",title:"Using CPU-Accelerated Inference"},{local:"model-loading-and-latency",title:"Model Loading and latency"}],title:"Overview"};function Ss(k){return As(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Us extends $s{constructor(u){super();_s(this,u,Ss,Os,bs,{})}}export{Us as default,Ls as metadata};
