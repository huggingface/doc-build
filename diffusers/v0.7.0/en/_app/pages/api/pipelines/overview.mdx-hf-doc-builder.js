import{S as bg,i as Eg,s as yg,e as o,k as f,w as S,t as l,M as wg,c as a,d as t,m as d,a as n,x as $,h as s,b as i,N as ao,G as e,g as p,y as O,L as Ig,q as G,o as M,B as j,v as Dg}from"../../../chunks/vendor-hf-doc-builder.js";import{I as ge}from"../../../chunks/IconCopyLink-hf-doc-builder.js";import{C as cp}from"../../../chunks/CodeBlock-hf-doc-builder.js";function Tg(up){let ne,Gr,re,ve,ha,Ke,Ml,pa,jl,Mr,no,Cl,jr,_e,Ll,Xe,ql,Rl,Cr,b,ca,ro,Nl,Hl,ua,lo,Bl,Ul,ma,Ze,Yl,zl,et,Fl,so,Vl,Ql,Wl,tt,Jl,ot,Kl,Xl,Zl,at,es,io,ts,os,Lr,fo,as,qr,D,ga,va,C,ns,_a,rs,ls,nt,ss,is,rt,fs,ds,hs,ba,ho,lt,ps,po,cs,us,ms,Ea,co,st,gs,uo,vs,_s,bs,ya,mo,it,Es,go,ys,ws,Rr,L,wa,Is,Ds,Ia,Ts,ks,ft,xs,Ps,Nr,le,be,Da,dt,As,Ta,Ss,Hr,vo,$s,Br,Ee,ka,q,xa,Os,Gs,Pa,Ms,js,_o,Cs,Ls,bo,qs,Rs,c,R,Aa,Eo,Ns,Hs,Sa,ht,$a,Bs,Us,yo,Ys,zs,Oa,Fs,N,Ga,wo,Vs,Qs,Ma,pt,ja,Ws,Js,Io,Ks,Xs,Do,ct,To,mp,Zs,H,Ca,ko,ei,ti,La,ut,qa,oi,ai,xo,ni,ri,Ra,li,B,Na,Po,si,ii,Ha,mt,Ba,fi,di,Ao,hi,pi,Ua,ci,U,Ya,So,ui,mi,za,gt,Fa,gi,vi,$o,_i,bi,Va,Ei,Y,Qa,Oo,yi,wi,Wa,vt,Ja,Ii,Di,Go,Ti,ki,Ka,xi,z,Xa,Mo,Pi,Ai,Za,_t,en,Si,$i,jo,Oi,Gi,tn,Mi,F,on,Co,ji,Ci,an,bt,nn,Li,qi,Lo,Ri,Ni,qo,Et,Ro,gp,Hi,V,rn,No,Bi,Ui,ln,yt,sn,Yi,zi,Ho,Fi,Vi,Bo,wt,Uo,vp,Qi,Q,fn,Yo,Wi,Ji,dn,It,hn,Ki,Xi,zo,Zi,ef,Fo,Dt,Vo,_p,tf,W,pn,Qo,of,af,cn,Tt,un,nf,rf,Wo,lf,sf,mn,ff,J,gn,Jo,df,hf,vn,kt,_n,pf,cf,Ko,uf,mf,bn,gf,K,En,Xo,vf,_f,yn,xt,wn,bf,Ef,Zo,yf,wf,In,Ur,Pt,Dn,If,Df,Yr,ye,Tf,ea,kf,xf,zr,se,we,Tn,At,Pf,kn,Af,Fr,ta,Sf,Vr,Z,$f,xn,Of,Gf,St,Mf,jf,Qr,T,u,$t,Pn,Cf,Lf,qf,An,Rf,Nf,Ot,Hf,Bf,Sn,Uf,Yf,$n,zf,Ff,On,Vf,Qf,Gt,Wf,Jf,Gn,Kf,Xf,Mn,Zf,ed,jn,td,od,Cn,ad,nd,rd,v,oa,Ln,ld,sd,qn,id,fd,Rn,dd,hd,Nn,pd,cd,Hn,ud,md,Bn,gd,vd,Un,_d,bd,Yn,Ed,yd,wd,y,aa,zn,Id,Dd,Fn,Td,kd,Vn,xd,Pd,Qn,Ad,Sd,ie,$d,Wn,Od,Gd,Md,jd,E,Jn,Cd,Ld,Kn,qd,Rd,Xn,Nd,Hd,Zn,Bd,Ud,na,er,Yd,zd,Mt,Fd,Vd,Wr,k,tr,Qd,Wd,or,Jd,Kd,jt,ar,Xd,Zd,Ct,eh,Jr,fe,Ie,nr,Lt,th,rr,oh,Kr,w,ah,lr,nh,rh,sr,lh,sh,ir,ih,fh,fr,dh,hh,Xr,x,De,dr,ph,ch,qt,hr,uh,mh,gh,vh,ee,pr,_h,bh,cr,Eh,yh,ur,wh,Ih,Dh,te,mr,Th,kh,Rt,xh,Ph,ra,Ah,Sh,$h,P,gr,Oh,Gh,vr,Mh,jh,_r,Ch,Lh,br,qh,Rh,Zr,de,Te,Er,Nt,Nh,yr,Hh,el,he,ke,wr,Ht,Bh,Ir,Uh,tl,Bt,ol,pe,xe,Dr,Ut,Yh,Tr,zh,al,Pe,Fh,kr,Vh,Qh,nl,Yt,rl,zt,Wh,Ft,la,bp,ll,ce,Ae,xr,Vt,Jh,Pr,Kh,sl,oe,Xh,Qt,Zh,ep,Wt,sa,Ep,tp,il,ue,Se,Ar,Jt,op,Sr,ap,fl,$e,np,$r,rp,lp,dl,Kt,hl,Xt,sp,Zt,ia,yp,pl;return Ke=new ge({}),dt=new ge({}),At=new ge({}),Lt=new ge({}),Nt=new ge({}),Ht=new ge({}),Bt=new cp({props:{code:`# make sure you're logged in with \`huggingface-cli login\`
from diffusers import StableDiffusionPipeline, LMSDiscreteScheduler

pipe = StableDiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5")
pipe = pipe.to("cuda")

prompt = "a photo of an astronaut riding a horse on mars"
image = pipe(prompt).images[0]

image.save("astronaut_rides_horse.png")`,highlighted:`<span class="hljs-comment"># make sure you&#x27;re logged in with \`huggingface-cli login\`</span>
<span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionPipeline, LMSDiscreteScheduler

pipe = StableDiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span>)
pipe = pipe.to(<span class="hljs-string">&quot;cuda&quot;</span>)

prompt = <span class="hljs-string">&quot;a photo of an astronaut riding a horse on mars&quot;</span>
image = pipe(prompt).images[<span class="hljs-number">0</span>]

image.save(<span class="hljs-string">&quot;astronaut_rides_horse.png&quot;</span>)`}}),Ut=new ge({}),Yt=new cp({props:{code:`import requests
from PIL import Image
from io import BytesIO

from diffusers import StableDiffusionImg2ImgPipeline

# load the pipeline
device = "cuda"
pipe = StableDiffusionImg2ImgPipeline.from_pretrained(
    "runwayml/stable-diffusion-v1-5", revision="fp16", torch_dtype=torch.float16
).to(device)

# let's download an initial image
url = "https://raw.githubusercontent.com/CompVis/stable-diffusion/main/assets/stable-samples/img2img/sketch-mountains-input.jpg"

response = requests.get(url)
init_image = Image.open(BytesIO(response.content)).convert("RGB")
init_image = init_image.resize((768, 512))

prompt = "A fantasy landscape, trending on artstation"

images = pipe(prompt=prompt, init_image=init_image, strength=0.75, guidance_scale=7.5).images

images[0].save("fantasy_landscape.png")`,highlighted:`<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO

<span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionImg2ImgPipeline

<span class="hljs-comment"># load the pipeline</span>
device = <span class="hljs-string">&quot;cuda&quot;</span>
pipe = StableDiffusionImg2ImgPipeline.from_pretrained(
    <span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span>, revision=<span class="hljs-string">&quot;fp16&quot;</span>, torch_dtype=torch.float16
).to(device)

<span class="hljs-comment"># let&#x27;s download an initial image</span>
url = <span class="hljs-string">&quot;https://raw.githubusercontent.com/CompVis/stable-diffusion/main/assets/stable-samples/img2img/sketch-mountains-input.jpg&quot;</span>

response = requests.get(url)
init_image = Image.<span class="hljs-built_in">open</span>(BytesIO(response.content)).convert(<span class="hljs-string">&quot;RGB&quot;</span>)
init_image = init_image.resize((<span class="hljs-number">768</span>, <span class="hljs-number">512</span>))

prompt = <span class="hljs-string">&quot;A fantasy landscape, trending on artstation&quot;</span>

images = pipe(prompt=prompt, init_image=init_image, strength=<span class="hljs-number">0.75</span>, guidance_scale=<span class="hljs-number">7.5</span>).images

images[<span class="hljs-number">0</span>].save(<span class="hljs-string">&quot;fantasy_landscape.png&quot;</span>)`}}),Vt=new ge({}),Jt=new ge({}),Kt=new cp({props:{code:`import PIL
import requests
import torch
from io import BytesIO

from diffusers import StableDiffusionInpaintPipeline


def download_image(url):
    response = requests.get(url)
    return PIL.Image.open(BytesIO(response.content)).convert("RGB")


img_url = "https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png"
mask_url = "https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png"

init_image = download_image(img_url).resize((512, 512))
mask_image = download_image(mask_url).resize((512, 512))

pipe = StableDiffusionInpaintPipeline.from_pretrained(
    "runwayml/stable-diffusion-inpainting",
    revision="fp16",
    torch_dtype=torch.float16,
)
pipe = pipe.to("cuda")

prompt = "Face of a yellow cat, high resolution, sitting on a park bench"
image = pipe(prompt=prompt, image=init_image, mask_image=mask_image).images[0]`,highlighted:`<span class="hljs-keyword">import</span> PIL
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO

<span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionInpaintPipeline


<span class="hljs-keyword">def</span> <span class="hljs-title function_">download_image</span>(<span class="hljs-params">url</span>):
    response = requests.get(url)
    <span class="hljs-keyword">return</span> PIL.Image.<span class="hljs-built_in">open</span>(BytesIO(response.content)).convert(<span class="hljs-string">&quot;RGB&quot;</span>)


img_url = <span class="hljs-string">&quot;https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png&quot;</span>
mask_url = <span class="hljs-string">&quot;https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png&quot;</span>

init_image = download_image(img_url).resize((<span class="hljs-number">512</span>, <span class="hljs-number">512</span>))
mask_image = download_image(mask_url).resize((<span class="hljs-number">512</span>, <span class="hljs-number">512</span>))

pipe = StableDiffusionInpaintPipeline.from_pretrained(
    <span class="hljs-string">&quot;runwayml/stable-diffusion-inpainting&quot;</span>,
    revision=<span class="hljs-string">&quot;fp16&quot;</span>,
    torch_dtype=torch.float16,
)
pipe = pipe.to(<span class="hljs-string">&quot;cuda&quot;</span>)

prompt = <span class="hljs-string">&quot;Face of a yellow cat, high resolution, sitting on a park bench&quot;</span>
image = pipe(prompt=prompt, image=init_image, mask_image=mask_image).images[<span class="hljs-number">0</span>]`}}),{c(){ne=o("meta"),Gr=f(),re=o("h1"),ve=o("a"),ha=o("span"),S(Ke.$$.fragment),Ml=f(),pa=o("span"),jl=l("Pipelines"),Mr=f(),no=o("p"),Cl=l(`Pipelines provide a simple way to run state-of-the-art diffusion models in inference.
Most diffusion systems consist of multiple independently-trained models and highly adaptable scheduler
components - all of which are needed to have a functioning end-to-end diffusion system.`),jr=f(),_e=o("p"),Ll=l("As an example, "),Xe=o("a"),ql=l("Stable Diffusion"),Rl=l(" has three independently trained models:"),Cr=f(),b=o("ul"),ca=o("li"),ro=o("a"),Nl=l("Autoencoder"),Hl=f(),ua=o("li"),lo=o("a"),Bl=l("Conditional Unet"),Ul=f(),ma=o("li"),Ze=o("a"),Yl=l("CLIP text encoder"),zl=f(),et=o("li"),Fl=l("a scheduler component, "),so=o("a"),Vl=l("scheduler"),Ql=l(","),Wl=f(),tt=o("li"),Jl=l("a "),ot=o("a"),Kl=l("CLIPFeatureExtractor"),Xl=l(","),Zl=f(),at=o("li"),es=l("as well as a "),io=o("a"),ts=l("safety checker"),os=l(`.
All of these components are necessary to run stable diffusion in inference even though they were trained
or created independently from each other.`),Lr=f(),fo=o("p"),as=l(`To that end, we strive to offer all open-sourced, state-of-the-art diffusion system under a unified API.
More specifically, we strive to provide pipelines that`),qr=f(),D=o("ul"),ga=o("li"),va=o("ol"),C=o("li"),ns=l("can load the officially published weights and yield 1-to-1 the same outputs as the original implementation according to the corresponding paper ("),_a=o("em"),rs=l("e.g."),ls=f(),nt=o("a"),ss=l("LDMTextToImagePipeline"),is=l(", uses the officially released weights of "),rt=o("a"),fs=l("High-Resolution Image Synthesis with Latent Diffusion Models"),ds=l("),"),hs=f(),ba=o("li"),ho=o("ol"),lt=o("li"),ps=l("have a simple user interface to run the model in inference (see the "),po=o("a"),cs=l("Pipelines API"),us=l(" section),"),ms=f(),Ea=o("li"),co=o("ol"),st=o("li"),gs=l("are easy to understand with code that is self-explanatory and can be read along-side the official paper (see "),uo=o("a"),vs=l("Pipelines summary"),_s=l("),"),bs=f(),ya=o("li"),mo=o("ol"),it=o("li"),Es=l("can easily be contributed by the community (see the "),go=o("a"),ys=l("Contribution"),ws=l(" section)."),Rr=f(),L=o("p"),wa=o("strong"),Is=l("Note"),Ds=l(` that pipelines do not (and should not) offer any training functionality.
If you are looking for `),Ia=o("em"),Ts=l("official"),ks=l(" training examples, please have a look at "),ft=o("a"),xs=l("examples"),Ps=l("."),Nr=f(),le=o("h2"),be=o("a"),Da=o("span"),S(dt.$$.fragment),As=f(),Ta=o("span"),Ss=l("\u{1F9E8} Diffusers Summary"),Hr=f(),vo=o("p"),$s=l(`The following table summarizes all officially supported pipelines, their corresponding paper, and if
available a colab notebook to directly try them out.`),Br=f(),Ee=o("table"),ka=o("thead"),q=o("tr"),xa=o("th"),Os=l("Pipeline"),Gs=f(),Pa=o("th"),Ms=l("Paper"),js=f(),_o=o("th"),Cs=l("Tasks"),Ls=f(),bo=o("th"),qs=l("Colab"),Rs=f(),c=o("tbody"),R=o("tr"),Aa=o("td"),Eo=o("a"),Ns=l("ddpm"),Hs=f(),Sa=o("td"),ht=o("a"),$a=o("strong"),Bs=l("Denoising Diffusion Probabilistic Models"),Us=f(),yo=o("td"),Ys=l("Unconditional Image Generation"),zs=f(),Oa=o("td"),Fs=f(),N=o("tr"),Ga=o("td"),wo=o("a"),Vs=l("ddim"),Qs=f(),Ma=o("td"),pt=o("a"),ja=o("strong"),Ws=l("Denoising Diffusion Implicit Models"),Js=f(),Io=o("td"),Ks=l("Unconditional Image Generation"),Xs=f(),Do=o("td"),ct=o("a"),To=o("img"),Zs=f(),H=o("tr"),Ca=o("td"),ko=o("a"),ei=l("latent_diffusion"),ti=f(),La=o("td"),ut=o("a"),qa=o("strong"),oi=l("High-Resolution Image Synthesis with Latent Diffusion Models"),ai=f(),xo=o("td"),ni=l("Text-to-Image Generation"),ri=f(),Ra=o("td"),li=f(),B=o("tr"),Na=o("td"),Po=o("a"),si=l("latent_diffusion_uncond"),ii=f(),Ha=o("td"),mt=o("a"),Ba=o("strong"),fi=l("High-Resolution Image Synthesis with Latent Diffusion Models"),di=f(),Ao=o("td"),hi=l("Unconditional Image Generation"),pi=f(),Ua=o("td"),ci=f(),U=o("tr"),Ya=o("td"),So=o("a"),ui=l("pndm"),mi=f(),za=o("td"),gt=o("a"),Fa=o("strong"),gi=l("Pseudo Numerical Methods for Diffusion Models on Manifolds"),vi=f(),$o=o("td"),_i=l("Unconditional Image Generation"),bi=f(),Va=o("td"),Ei=f(),Y=o("tr"),Qa=o("td"),Oo=o("a"),yi=l("score_sde_ve"),wi=f(),Wa=o("td"),vt=o("a"),Ja=o("strong"),Ii=l("Score-Based Generative Modeling through Stochastic Differential Equations"),Di=f(),Go=o("td"),Ti=l("Unconditional Image Generation"),ki=f(),Ka=o("td"),xi=f(),z=o("tr"),Xa=o("td"),Mo=o("a"),Pi=l("score_sde_vp"),Ai=f(),Za=o("td"),_t=o("a"),en=o("strong"),Si=l("Score-Based Generative Modeling through Stochastic Differential Equations"),$i=f(),jo=o("td"),Oi=l("Unconditional Image Generation"),Gi=f(),tn=o("td"),Mi=f(),F=o("tr"),on=o("td"),Co=o("a"),ji=l("stable_diffusion"),Ci=f(),an=o("td"),bt=o("a"),nn=o("strong"),Li=l("Stable Diffusion"),qi=f(),Lo=o("td"),Ri=l("Text-to-Image Generation"),Ni=f(),qo=o("td"),Et=o("a"),Ro=o("img"),Hi=f(),V=o("tr"),rn=o("td"),No=o("a"),Bi=l("stable_diffusion"),Ui=f(),ln=o("td"),yt=o("a"),sn=o("strong"),Yi=l("Stable Diffusion"),zi=f(),Ho=o("td"),Fi=l("Image-to-Image Text-Guided Generation"),Vi=f(),Bo=o("td"),wt=o("a"),Uo=o("img"),Qi=f(),Q=o("tr"),fn=o("td"),Yo=o("a"),Wi=l("stable_diffusion"),Ji=f(),dn=o("td"),It=o("a"),hn=o("strong"),Ki=l("Stable Diffusion"),Xi=f(),zo=o("td"),Zi=l("Text-Guided Image Inpainting"),ef=f(),Fo=o("td"),Dt=o("a"),Vo=o("img"),tf=f(),W=o("tr"),pn=o("td"),Qo=o("a"),of=l("stochastic_karras_ve"),af=f(),cn=o("td"),Tt=o("a"),un=o("strong"),nf=l("Elucidating the Design Space of Diffusion-Based Generative Models"),rf=f(),Wo=o("td"),lf=l("Unconditional Image Generation"),sf=f(),mn=o("td"),ff=f(),J=o("tr"),gn=o("td"),Jo=o("a"),df=l("vq_diffusion"),hf=f(),vn=o("td"),kt=o("a"),_n=o("strong"),pf=l("Vector Quantized Diffusion Model for Text-to-Image Synthesis"),cf=f(),Ko=o("td"),uf=l("Text-to-Image Generation"),mf=f(),bn=o("td"),gf=f(),K=o("tr"),En=o("td"),Xo=o("a"),vf=l("repaint"),_f=f(),yn=o("td"),xt=o("a"),wn=o("strong"),bf=l("RePaint: Inpainting using Denoising Diffusion Probabilistic Models"),Ef=f(),Zo=o("td"),yf=l("Image Inpainting"),wf=f(),In=o("td"),Ur=f(),Pt=o("p"),Dn=o("strong"),If=l("Note"),Df=l(": Pipelines are simple examples of how to play around with the diffusion systems as described in the corresponding papers."),Yr=f(),ye=o("p"),Tf=l("However, most of them can be adapted to use different scheduler components or even different model components. Some pipeline examples are shown in the "),ea=o("a"),kf=l("Examples"),xf=l(" below."),zr=f(),se=o("h2"),we=o("a"),Tn=o("span"),S(At.$$.fragment),Pf=f(),kn=o("span"),Af=l("Pipelines API"),Fr=f(),ta=o("p"),Sf=l("Diffusion models often consist of multiple independently-trained models or other previously existing components."),Vr=f(),Z=o("p"),$f=l(`Each model has been trained independently on a different task and the scheduler can easily be swapped out and replaced with a different one.
During inference, we however want to be able to easily load all components and use them in inference - even if one component, `),xn=o("em"),Of=l("e.g."),Gf=l(" CLIP\u2019s text encoder, originates from a different library, such as "),St=o("a"),Mf=l("Transformers"),jf=l(". To that end, all pipelines provide the following functionality:"),Qr=f(),T=o("ul"),u=o("li"),$t=o("a"),Pn=o("code"),Cf=l("from_pretrained"),Lf=l(" method"),qf=l(" that accepts a Hugging Face Hub repository id, "),An=o("em"),Rf=l("e.g."),Nf=f(),Ot=o("a"),Hf=l("runwayml/stable-diffusion-v1-5"),Bf=l(" or a path to a local directory, "),Sn=o("em"),Uf=l("e.g."),Yf=l(`
\u201D./stable-diffusion\u201D. To correctly retrieve which models and components should be loaded, one has to provide a `),$n=o("code"),zf=l("model_index.json"),Ff=l(" file, "),On=o("em"),Vf=l("e.g."),Qf=f(),Gt=o("a"),Wf=l("runwayml/stable-diffusion-v1-5/model_index.json"),Jf=l(`, which defines all components that should be
loaded into the pipelines. More specifically, for each model/component one needs to define the format `),Gn=o("code"),Kf=l('<name>: ["<library>", "<class name>"]'),Xf=l(". "),Mn=o("code"),Zf=l("<name>"),ed=l(" is the attribute name given to the loaded instance of "),jn=o("code"),td=l("<class name>"),od=l(" which can be found in the library or pipeline folder called "),Cn=o("code"),ad=l('"<library>"'),nd=l("."),rd=f(),v=o("li"),oa=o("a"),Ln=o("code"),ld=l("save_pretrained"),sd=l(" that accepts a local path, "),qn=o("em"),id=l("e.g."),fd=f(),Rn=o("code"),dd=l("./stable-diffusion"),hd=l(" under which all models/components of the pipeline will be saved. For each component/model a folder is created inside the local path that is named after the given attribute name, "),Nn=o("em"),pd=l("e.g."),cd=f(),Hn=o("code"),ud=l("./stable_diffusion/unet"),md=l(`.
In addition, a `),Bn=o("code"),gd=l("model_index.json"),vd=l(" file is created at the root of the local path, "),Un=o("em"),_d=l("e.g."),bd=f(),Yn=o("code"),Ed=l("./stable_diffusion/model_index.json"),yd=l(` so that the complete pipeline can again be instantiated
from the local path.`),wd=f(),y=o("li"),aa=o("a"),zn=o("code"),Id=l("to"),Dd=l(" which accepts a "),Fn=o("code"),Td=l("string"),kd=l(" or "),Vn=o("code"),xd=l("torch.device"),Pd=l(" to move all models that are of type "),Qn=o("code"),Ad=l("torch.nn.Module"),Sd=l(" to the passed device. The behavior is fully analogous to "),ie=o("a"),$d=l("PyTorch\u2019s "),Wn=o("code"),Od=l("to"),Gd=l(" method"),Md=l("."),jd=f(),E=o("li"),Jn=o("code"),Cd=l("__call__"),Ld=l(" method to use the pipeline in inference. "),Kn=o("code"),qd=l("__call__"),Rd=l(" defines inference logic of the pipeline and should ideally encompass all aspects of it, from pre-processing to forwarding tensors to the different models and schedulers, as well as post-processing. The API of the "),Xn=o("code"),Nd=l("__call__"),Hd=l(" method can strongly vary from pipeline to pipeline. "),Zn=o("em"),Bd=l("E.g."),Ud=l(" a text-to-image pipeline, such as "),na=o("a"),er=o("code"),Yd=l("StableDiffusionPipeline"),zd=l(" should accept among other things the text prompt to generate the image. A pure image generation pipeline, such as "),Mt=o("a"),Fd=l("DDPMPipeline"),Vd=l(` on the other hand can be run without providing any inputs. To better understand what inputs can be adapted for
each pipeline, one should look directly into the respective pipeline.`),Wr=f(),k=o("p"),tr=o("strong"),Qd=l("Note"),Wd=l(": All pipelines have PyTorch\u2019s autograd disabled by decorating the "),or=o("code"),Jd=l("__call__"),Kd=l(" method with a "),jt=o("a"),ar=o("code"),Xd=l("torch.no_grad"),Zd=l(` decorator because pipelines should
not be used for training. If you want to store the gradients during the forward pass, we recommend writing your own pipeline, see also our `),Ct=o("a"),eh=l("community-examples"),Jr=f(),fe=o("h2"),Ie=o("a"),nr=o("span"),S(Lt.$$.fragment),th=f(),rr=o("span"),oh=l("Contribution"),Kr=f(),w=o("p"),ah=l(`We are more than happy about any contribution to the officially supported pipelines \u{1F917}. We aspire
all of our pipelines to be  `),lr=o("strong"),nh=l("self-contained"),rh=l(", "),sr=o("strong"),lh=l("easy-to-tweak"),sh=l(", "),ir=o("strong"),ih=l("beginner-friendly"),fh=l(" and for "),fr=o("strong"),dh=l("one-purpose-only"),hh=l("."),Xr=f(),x=o("ul"),De=o("li"),dr=o("strong"),ph=l("Self-contained"),ch=l(": A pipeline shall be as self-contained as possible. More specifically, this means that all functionality should be either directly defined in the pipeline file itself, should be inherited from (and only from) the "),qt=o("a"),hr=o("code"),uh=l("DiffusionPipeline"),mh=l(" class"),gh=l(" or be directly attached to the model and scheduler components of the pipeline."),vh=f(),ee=o("li"),pr=o("strong"),_h=l("Easy-to-use"),bh=l(`: Pipelines should be extremely easy to use - one should be able to load the pipeline and
use it for its designated task, `),cr=o("em"),Eh=l("e.g."),yh=l(` text-to-image generation, in just a couple of lines of code. Most
logic including pre-processing, an unrolled diffusion loop, and post-processing should all happen inside the `),ur=o("code"),wh=l("__call__"),Ih=l(" method."),Dh=f(),te=o("li"),mr=o("strong"),Th=l("Easy-to-tweak"),kh=l(": Certain pipelines will not be able to handle all use cases and tasks that you might like them to. If you want to use a certain pipeline for a specific use case that is not yet supported, you might have to copy the pipeline file and tweak the code to your needs. We try to make the pipeline code as readable as possible so that each part \u2013from pre-processing to diffusing to post-processing\u2013 can easily be adapted. If you would like the community to benefit from your customized pipeline, we would love to see a contribution to our "),Rt=o("a"),xh=l("community-examples"),Ph=l(". If you feel that an important pipeline should be part of the official pipelines but isn\u2019t, a contribution to the "),ra=o("a"),Ah=l("official pipelines"),Sh=l(" would be even better."),$h=f(),P=o("li"),gr=o("strong"),Oh=l("One-purpose-only"),Gh=l(": Pipelines should be used for one task and one task only. Even if two tasks are very similar from a modeling point of view, "),vr=o("em"),Mh=l("e.g."),jh=l(" image2image translation and in-painting, pipelines shall be used for one task only to keep them "),_r=o("em"),Ch=l("easy-to-tweak"),Lh=l(" and "),br=o("em"),qh=l("readable"),Rh=l("."),Zr=f(),de=o("h2"),Te=o("a"),Er=o("span"),S(Nt.$$.fragment),Nh=f(),yr=o("span"),Hh=l("Examples"),el=f(),he=o("h3"),ke=o("a"),wr=o("span"),S(Ht.$$.fragment),Bh=f(),Ir=o("span"),Uh=l("Text-to-Image generation with Stable Diffusion"),tl=f(),S(Bt.$$.fragment),ol=f(),pe=o("h3"),xe=o("a"),Dr=o("span"),S(Ut.$$.fragment),Yh=f(),Tr=o("span"),zh=l("Image-to-Image text-guided generation with Stable Diffusion"),al=f(),Pe=o("p"),Fh=l("The "),kr=o("code"),Vh=l("StableDiffusionImg2ImgPipeline"),Qh=l(" lets you pass a text prompt and an initial image to condition the generation of new images."),nl=f(),S(Yt.$$.fragment),rl=f(),zt=o("p"),Wh=l("You can also run this example on colab "),Ft=o("a"),la=o("img"),ll=f(),ce=o("h3"),Ae=o("a"),xr=o("span"),S(Vt.$$.fragment),Jh=f(),Pr=o("span"),Kh=l("Tweak prompts reusing seeds and latents"),sl=f(),oe=o("p"),Xh=l("You can generate your own latents to reproduce results, or tweak your prompt on a specific result you liked. "),Qt=o("a"),Zh=l("This notebook"),ep=l(" shows how to do it step by step. You can also run it in Google Colab "),Wt=o("a"),sa=o("img"),tp=l("."),il=f(),ue=o("h3"),Se=o("a"),Ar=o("span"),S(Jt.$$.fragment),op=f(),Sr=o("span"),ap=l("In-painting using Stable Diffusion"),fl=f(),$e=o("p"),np=l("The "),$r=o("code"),rp=l("StableDiffusionInpaintPipeline"),lp=l(" lets you edit specific parts of an image by providing a mask and text prompt."),dl=f(),S(Kt.$$.fragment),hl=f(),Xt=o("p"),sp=l("You can also run this example on colab "),Zt=o("a"),ia=o("img"),this.h()},l(r){const h=wg('[data-svelte="svelte-1phssyn"]',document.head);ne=a(h,"META",{name:!0,content:!0}),h.forEach(t),Gr=d(r),re=a(r,"H1",{class:!0});var cl=n(re);ve=a(cl,"A",{id:!0,class:!0,href:!0});var wp=n(ve);ha=a(wp,"SPAN",{});var Ip=n(ha);$(Ke.$$.fragment,Ip),Ip.forEach(t),wp.forEach(t),Ml=d(cl),pa=a(cl,"SPAN",{});var Dp=n(pa);jl=s(Dp,"Pipelines"),Dp.forEach(t),cl.forEach(t),Mr=d(r),no=a(r,"P",{});var Tp=n(no);Cl=s(Tp,`Pipelines provide a simple way to run state-of-the-art diffusion models in inference.
Most diffusion systems consist of multiple independently-trained models and highly adaptable scheduler
components - all of which are needed to have a functioning end-to-end diffusion system.`),Tp.forEach(t),jr=d(r),_e=a(r,"P",{});var ul=n(_e);Ll=s(ul,"As an example, "),Xe=a(ul,"A",{href:!0,rel:!0});var kp=n(Xe);ql=s(kp,"Stable Diffusion"),kp.forEach(t),Rl=s(ul," has three independently trained models:"),ul.forEach(t),Cr=d(r),b=a(r,"UL",{});var A=n(b);ca=a(A,"LI",{});var xp=n(ca);ro=a(xp,"A",{href:!0});var Pp=n(ro);Nl=s(Pp,"Autoencoder"),Pp.forEach(t),xp.forEach(t),Hl=d(A),ua=a(A,"LI",{});var Ap=n(ua);lo=a(Ap,"A",{href:!0});var Sp=n(lo);Bl=s(Sp,"Conditional Unet"),Sp.forEach(t),Ap.forEach(t),Ul=d(A),ma=a(A,"LI",{});var $p=n(ma);Ze=a($p,"A",{href:!0,rel:!0});var Op=n(Ze);Yl=s(Op,"CLIP text encoder"),Op.forEach(t),$p.forEach(t),zl=d(A),et=a(A,"LI",{});var ml=n(et);Fl=s(ml,"a scheduler component, "),so=a(ml,"A",{href:!0});var Gp=n(so);Vl=s(Gp,"scheduler"),Gp.forEach(t),Ql=s(ml,","),ml.forEach(t),Wl=d(A),tt=a(A,"LI",{});var gl=n(tt);Jl=s(gl,"a "),ot=a(gl,"A",{href:!0,rel:!0});var Mp=n(ot);Kl=s(Mp,"CLIPFeatureExtractor"),Mp.forEach(t),Xl=s(gl,","),gl.forEach(t),Zl=d(A),at=a(A,"LI",{});var vl=n(at);es=s(vl,"as well as a "),io=a(vl,"A",{href:!0});var jp=n(io);ts=s(jp,"safety checker"),jp.forEach(t),os=s(vl,`.
All of these components are necessary to run stable diffusion in inference even though they were trained
or created independently from each other.`),vl.forEach(t),A.forEach(t),Lr=d(r),fo=a(r,"P",{});var Cp=n(fo);as=s(Cp,`To that end, we strive to offer all open-sourced, state-of-the-art diffusion system under a unified API.
More specifically, we strive to provide pipelines that`),Cp.forEach(t),qr=d(r),D=a(r,"UL",{});var Oe=n(D);ga=a(Oe,"LI",{});var Lp=n(ga);va=a(Lp,"OL",{});var qp=n(va);C=a(qp,"LI",{});var Ge=n(C);ns=s(Ge,"can load the officially published weights and yield 1-to-1 the same outputs as the original implementation according to the corresponding paper ("),_a=a(Ge,"EM",{});var Rp=n(_a);rs=s(Rp,"e.g."),Rp.forEach(t),ls=d(Ge),nt=a(Ge,"A",{href:!0,rel:!0});var Np=n(nt);ss=s(Np,"LDMTextToImagePipeline"),Np.forEach(t),is=s(Ge,", uses the officially released weights of "),rt=a(Ge,"A",{href:!0,rel:!0});var Hp=n(rt);fs=s(Hp,"High-Resolution Image Synthesis with Latent Diffusion Models"),Hp.forEach(t),ds=s(Ge,"),"),Ge.forEach(t),qp.forEach(t),Lp.forEach(t),hs=d(Oe),ba=a(Oe,"LI",{});var Bp=n(ba);ho=a(Bp,"OL",{start:!0});var Up=n(ho);lt=a(Up,"LI",{});var _l=n(lt);ps=s(_l,"have a simple user interface to run the model in inference (see the "),po=a(_l,"A",{href:!0});var Yp=n(po);cs=s(Yp,"Pipelines API"),Yp.forEach(t),us=s(_l," section),"),_l.forEach(t),Up.forEach(t),Bp.forEach(t),ms=d(Oe),Ea=a(Oe,"LI",{});var zp=n(Ea);co=a(zp,"OL",{start:!0});var Fp=n(co);st=a(Fp,"LI",{});var bl=n(st);gs=s(bl,"are easy to understand with code that is self-explanatory and can be read along-side the official paper (see "),uo=a(bl,"A",{href:!0});var Vp=n(uo);vs=s(Vp,"Pipelines summary"),Vp.forEach(t),_s=s(bl,"),"),bl.forEach(t),Fp.forEach(t),zp.forEach(t),bs=d(Oe),ya=a(Oe,"LI",{});var Qp=n(ya);mo=a(Qp,"OL",{start:!0});var Wp=n(mo);it=a(Wp,"LI",{});var El=n(it);Es=s(El,"can easily be contributed by the community (see the "),go=a(El,"A",{href:!0});var Jp=n(go);ys=s(Jp,"Contribution"),Jp.forEach(t),ws=s(El," section)."),El.forEach(t),Wp.forEach(t),Qp.forEach(t),Oe.forEach(t),Rr=d(r),L=a(r,"P",{});var eo=n(L);wa=a(eo,"STRONG",{});var Kp=n(wa);Is=s(Kp,"Note"),Kp.forEach(t),Ds=s(eo,` that pipelines do not (and should not) offer any training functionality.
If you are looking for `),Ia=a(eo,"EM",{});var Xp=n(Ia);Ts=s(Xp,"official"),Xp.forEach(t),ks=s(eo," training examples, please have a look at "),ft=a(eo,"A",{href:!0,rel:!0});var Zp=n(ft);xs=s(Zp,"examples"),Zp.forEach(t),Ps=s(eo,"."),eo.forEach(t),Nr=d(r),le=a(r,"H2",{class:!0});var yl=n(le);be=a(yl,"A",{id:!0,class:!0,href:!0});var ec=n(be);Da=a(ec,"SPAN",{});var tc=n(Da);$(dt.$$.fragment,tc),tc.forEach(t),ec.forEach(t),As=d(yl),Ta=a(yl,"SPAN",{});var oc=n(Ta);Ss=s(oc,"\u{1F9E8} Diffusers Summary"),oc.forEach(t),yl.forEach(t),Hr=d(r),vo=a(r,"P",{});var ac=n(vo);$s=s(ac,`The following table summarizes all officially supported pipelines, their corresponding paper, and if
available a colab notebook to directly try them out.`),ac.forEach(t),Br=d(r),Ee=a(r,"TABLE",{});var wl=n(Ee);ka=a(wl,"THEAD",{});var nc=n(ka);q=a(nc,"TR",{});var Me=n(q);xa=a(Me,"TH",{});var rc=n(xa);Os=s(rc,"Pipeline"),rc.forEach(t),Gs=d(Me),Pa=a(Me,"TH",{});var lc=n(Pa);Ms=s(lc,"Paper"),lc.forEach(t),js=d(Me),_o=a(Me,"TH",{align:!0});var sc=n(_o);Cs=s(sc,"Tasks"),sc.forEach(t),Ls=d(Me),bo=a(Me,"TH",{align:!0});var ic=n(bo);qs=s(ic,"Colab"),ic.forEach(t),Me.forEach(t),nc.forEach(t),Rs=d(wl),c=a(wl,"TBODY",{});var m=n(c);R=a(m,"TR",{});var je=n(R);Aa=a(je,"TD",{});var fc=n(Aa);Eo=a(fc,"A",{href:!0});var dc=n(Eo);Ns=s(dc,"ddpm"),dc.forEach(t),fc.forEach(t),Hs=d(je),Sa=a(je,"TD",{});var hc=n(Sa);ht=a(hc,"A",{href:!0,rel:!0});var pc=n(ht);$a=a(pc,"STRONG",{});var cc=n($a);Bs=s(cc,"Denoising Diffusion Probabilistic Models"),cc.forEach(t),pc.forEach(t),hc.forEach(t),Us=d(je),yo=a(je,"TD",{align:!0});var uc=n(yo);Ys=s(uc,"Unconditional Image Generation"),uc.forEach(t),zs=d(je),Oa=a(je,"TD",{align:!0}),n(Oa).forEach(t),je.forEach(t),Fs=d(m),N=a(m,"TR",{});var Ce=n(N);Ga=a(Ce,"TD",{});var mc=n(Ga);wo=a(mc,"A",{href:!0});var gc=n(wo);Vs=s(gc,"ddim"),gc.forEach(t),mc.forEach(t),Qs=d(Ce),Ma=a(Ce,"TD",{});var vc=n(Ma);pt=a(vc,"A",{href:!0,rel:!0});var _c=n(pt);ja=a(_c,"STRONG",{});var bc=n(ja);Ws=s(bc,"Denoising Diffusion Implicit Models"),bc.forEach(t),_c.forEach(t),vc.forEach(t),Js=d(Ce),Io=a(Ce,"TD",{align:!0});var Ec=n(Io);Ks=s(Ec,"Unconditional Image Generation"),Ec.forEach(t),Xs=d(Ce),Do=a(Ce,"TD",{align:!0});var yc=n(Do);ct=a(yc,"A",{href:!0,rel:!0});var wc=n(ct);To=a(wc,"IMG",{src:!0,alt:!0}),wc.forEach(t),yc.forEach(t),Ce.forEach(t),Zs=d(m),H=a(m,"TR",{});var Le=n(H);Ca=a(Le,"TD",{});var Ic=n(Ca);ko=a(Ic,"A",{href:!0});var Dc=n(ko);ei=s(Dc,"latent_diffusion"),Dc.forEach(t),Ic.forEach(t),ti=d(Le),La=a(Le,"TD",{});var Tc=n(La);ut=a(Tc,"A",{href:!0,rel:!0});var kc=n(ut);qa=a(kc,"STRONG",{});var xc=n(qa);oi=s(xc,"High-Resolution Image Synthesis with Latent Diffusion Models"),xc.forEach(t),kc.forEach(t),Tc.forEach(t),ai=d(Le),xo=a(Le,"TD",{align:!0});var Pc=n(xo);ni=s(Pc,"Text-to-Image Generation"),Pc.forEach(t),ri=d(Le),Ra=a(Le,"TD",{align:!0}),n(Ra).forEach(t),Le.forEach(t),li=d(m),B=a(m,"TR",{});var qe=n(B);Na=a(qe,"TD",{});var Ac=n(Na);Po=a(Ac,"A",{href:!0});var Sc=n(Po);si=s(Sc,"latent_diffusion_uncond"),Sc.forEach(t),Ac.forEach(t),ii=d(qe),Ha=a(qe,"TD",{});var $c=n(Ha);mt=a($c,"A",{href:!0,rel:!0});var Oc=n(mt);Ba=a(Oc,"STRONG",{});var Gc=n(Ba);fi=s(Gc,"High-Resolution Image Synthesis with Latent Diffusion Models"),Gc.forEach(t),Oc.forEach(t),$c.forEach(t),di=d(qe),Ao=a(qe,"TD",{align:!0});var Mc=n(Ao);hi=s(Mc,"Unconditional Image Generation"),Mc.forEach(t),pi=d(qe),Ua=a(qe,"TD",{align:!0}),n(Ua).forEach(t),qe.forEach(t),ci=d(m),U=a(m,"TR",{});var Re=n(U);Ya=a(Re,"TD",{});var jc=n(Ya);So=a(jc,"A",{href:!0});var Cc=n(So);ui=s(Cc,"pndm"),Cc.forEach(t),jc.forEach(t),mi=d(Re),za=a(Re,"TD",{});var Lc=n(za);gt=a(Lc,"A",{href:!0,rel:!0});var qc=n(gt);Fa=a(qc,"STRONG",{});var Rc=n(Fa);gi=s(Rc,"Pseudo Numerical Methods for Diffusion Models on Manifolds"),Rc.forEach(t),qc.forEach(t),Lc.forEach(t),vi=d(Re),$o=a(Re,"TD",{align:!0});var Nc=n($o);_i=s(Nc,"Unconditional Image Generation"),Nc.forEach(t),bi=d(Re),Va=a(Re,"TD",{align:!0}),n(Va).forEach(t),Re.forEach(t),Ei=d(m),Y=a(m,"TR",{});var Ne=n(Y);Qa=a(Ne,"TD",{});var Hc=n(Qa);Oo=a(Hc,"A",{href:!0});var Bc=n(Oo);yi=s(Bc,"score_sde_ve"),Bc.forEach(t),Hc.forEach(t),wi=d(Ne),Wa=a(Ne,"TD",{});var Uc=n(Wa);vt=a(Uc,"A",{href:!0,rel:!0});var Yc=n(vt);Ja=a(Yc,"STRONG",{});var zc=n(Ja);Ii=s(zc,"Score-Based Generative Modeling through Stochastic Differential Equations"),zc.forEach(t),Yc.forEach(t),Uc.forEach(t),Di=d(Ne),Go=a(Ne,"TD",{align:!0});var Fc=n(Go);Ti=s(Fc,"Unconditional Image Generation"),Fc.forEach(t),ki=d(Ne),Ka=a(Ne,"TD",{align:!0}),n(Ka).forEach(t),Ne.forEach(t),xi=d(m),z=a(m,"TR",{});var He=n(z);Xa=a(He,"TD",{});var Vc=n(Xa);Mo=a(Vc,"A",{href:!0});var Qc=n(Mo);Pi=s(Qc,"score_sde_vp"),Qc.forEach(t),Vc.forEach(t),Ai=d(He),Za=a(He,"TD",{});var Wc=n(Za);_t=a(Wc,"A",{href:!0,rel:!0});var Jc=n(_t);en=a(Jc,"STRONG",{});var Kc=n(en);Si=s(Kc,"Score-Based Generative Modeling through Stochastic Differential Equations"),Kc.forEach(t),Jc.forEach(t),Wc.forEach(t),$i=d(He),jo=a(He,"TD",{align:!0});var Xc=n(jo);Oi=s(Xc,"Unconditional Image Generation"),Xc.forEach(t),Gi=d(He),tn=a(He,"TD",{align:!0}),n(tn).forEach(t),He.forEach(t),Mi=d(m),F=a(m,"TR",{});var Be=n(F);on=a(Be,"TD",{});var Zc=n(on);Co=a(Zc,"A",{href:!0});var eu=n(Co);ji=s(eu,"stable_diffusion"),eu.forEach(t),Zc.forEach(t),Ci=d(Be),an=a(Be,"TD",{});var tu=n(an);bt=a(tu,"A",{href:!0,rel:!0});var ou=n(bt);nn=a(ou,"STRONG",{});var au=n(nn);Li=s(au,"Stable Diffusion"),au.forEach(t),ou.forEach(t),tu.forEach(t),qi=d(Be),Lo=a(Be,"TD",{align:!0});var nu=n(Lo);Ri=s(nu,"Text-to-Image Generation"),nu.forEach(t),Ni=d(Be),qo=a(Be,"TD",{align:!0});var ru=n(qo);Et=a(ru,"A",{href:!0,rel:!0});var lu=n(Et);Ro=a(lu,"IMG",{src:!0,alt:!0}),lu.forEach(t),ru.forEach(t),Be.forEach(t),Hi=d(m),V=a(m,"TR",{});var Ue=n(V);rn=a(Ue,"TD",{});var su=n(rn);No=a(su,"A",{href:!0});var iu=n(No);Bi=s(iu,"stable_diffusion"),iu.forEach(t),su.forEach(t),Ui=d(Ue),ln=a(Ue,"TD",{});var fu=n(ln);yt=a(fu,"A",{href:!0,rel:!0});var du=n(yt);sn=a(du,"STRONG",{});var hu=n(sn);Yi=s(hu,"Stable Diffusion"),hu.forEach(t),du.forEach(t),fu.forEach(t),zi=d(Ue),Ho=a(Ue,"TD",{align:!0});var pu=n(Ho);Fi=s(pu,"Image-to-Image Text-Guided Generation"),pu.forEach(t),Vi=d(Ue),Bo=a(Ue,"TD",{align:!0});var cu=n(Bo);wt=a(cu,"A",{href:!0,rel:!0});var uu=n(wt);Uo=a(uu,"IMG",{src:!0,alt:!0}),uu.forEach(t),cu.forEach(t),Ue.forEach(t),Qi=d(m),Q=a(m,"TR",{});var Ye=n(Q);fn=a(Ye,"TD",{});var mu=n(fn);Yo=a(mu,"A",{href:!0});var gu=n(Yo);Wi=s(gu,"stable_diffusion"),gu.forEach(t),mu.forEach(t),Ji=d(Ye),dn=a(Ye,"TD",{});var vu=n(dn);It=a(vu,"A",{href:!0,rel:!0});var _u=n(It);hn=a(_u,"STRONG",{});var bu=n(hn);Ki=s(bu,"Stable Diffusion"),bu.forEach(t),_u.forEach(t),vu.forEach(t),Xi=d(Ye),zo=a(Ye,"TD",{align:!0});var Eu=n(zo);Zi=s(Eu,"Text-Guided Image Inpainting"),Eu.forEach(t),ef=d(Ye),Fo=a(Ye,"TD",{align:!0});var yu=n(Fo);Dt=a(yu,"A",{href:!0,rel:!0});var wu=n(Dt);Vo=a(wu,"IMG",{src:!0,alt:!0}),wu.forEach(t),yu.forEach(t),Ye.forEach(t),tf=d(m),W=a(m,"TR",{});var ze=n(W);pn=a(ze,"TD",{});var Iu=n(pn);Qo=a(Iu,"A",{href:!0});var Du=n(Qo);of=s(Du,"stochastic_karras_ve"),Du.forEach(t),Iu.forEach(t),af=d(ze),cn=a(ze,"TD",{});var Tu=n(cn);Tt=a(Tu,"A",{href:!0,rel:!0});var ku=n(Tt);un=a(ku,"STRONG",{});var xu=n(un);nf=s(xu,"Elucidating the Design Space of Diffusion-Based Generative Models"),xu.forEach(t),ku.forEach(t),Tu.forEach(t),rf=d(ze),Wo=a(ze,"TD",{align:!0});var Pu=n(Wo);lf=s(Pu,"Unconditional Image Generation"),Pu.forEach(t),sf=d(ze),mn=a(ze,"TD",{align:!0}),n(mn).forEach(t),ze.forEach(t),ff=d(m),J=a(m,"TR",{});var Fe=n(J);gn=a(Fe,"TD",{});var Au=n(gn);Jo=a(Au,"A",{href:!0});var Su=n(Jo);df=s(Su,"vq_diffusion"),Su.forEach(t),Au.forEach(t),hf=d(Fe),vn=a(Fe,"TD",{});var $u=n(vn);kt=a($u,"A",{href:!0,rel:!0});var Ou=n(kt);_n=a(Ou,"STRONG",{});var Gu=n(_n);pf=s(Gu,"Vector Quantized Diffusion Model for Text-to-Image Synthesis"),Gu.forEach(t),Ou.forEach(t),$u.forEach(t),cf=d(Fe),Ko=a(Fe,"TD",{align:!0});var Mu=n(Ko);uf=s(Mu,"Text-to-Image Generation"),Mu.forEach(t),mf=d(Fe),bn=a(Fe,"TD",{align:!0}),n(bn).forEach(t),Fe.forEach(t),gf=d(m),K=a(m,"TR",{});var Ve=n(K);En=a(Ve,"TD",{});var ju=n(En);Xo=a(ju,"A",{href:!0});var Cu=n(Xo);vf=s(Cu,"repaint"),Cu.forEach(t),ju.forEach(t),_f=d(Ve),yn=a(Ve,"TD",{});var Lu=n(yn);xt=a(Lu,"A",{href:!0,rel:!0});var qu=n(xt);wn=a(qu,"STRONG",{});var Ru=n(wn);bf=s(Ru,"RePaint: Inpainting using Denoising Diffusion Probabilistic Models"),Ru.forEach(t),qu.forEach(t),Lu.forEach(t),Ef=d(Ve),Zo=a(Ve,"TD",{align:!0});var Nu=n(Zo);yf=s(Nu,"Image Inpainting"),Nu.forEach(t),wf=d(Ve),In=a(Ve,"TD",{align:!0}),n(In).forEach(t),Ve.forEach(t),m.forEach(t),wl.forEach(t),Ur=d(r),Pt=a(r,"P",{});var ip=n(Pt);Dn=a(ip,"STRONG",{});var Hu=n(Dn);If=s(Hu,"Note"),Hu.forEach(t),Df=s(ip,": Pipelines are simple examples of how to play around with the diffusion systems as described in the corresponding papers."),ip.forEach(t),Yr=d(r),ye=a(r,"P",{});var Il=n(ye);Tf=s(Il,"However, most of them can be adapted to use different scheduler components or even different model components. Some pipeline examples are shown in the "),ea=a(Il,"A",{href:!0});var Bu=n(ea);kf=s(Bu,"Examples"),Bu.forEach(t),xf=s(Il," below."),Il.forEach(t),zr=d(r),se=a(r,"H2",{class:!0});var Dl=n(se);we=a(Dl,"A",{id:!0,class:!0,href:!0});var Uu=n(we);Tn=a(Uu,"SPAN",{});var Yu=n(Tn);$(At.$$.fragment,Yu),Yu.forEach(t),Uu.forEach(t),Pf=d(Dl),kn=a(Dl,"SPAN",{});var zu=n(kn);Af=s(zu,"Pipelines API"),zu.forEach(t),Dl.forEach(t),Fr=d(r),ta=a(r,"P",{});var Fu=n(ta);Sf=s(Fu,"Diffusion models often consist of multiple independently-trained models or other previously existing components."),Fu.forEach(t),Vr=d(r),Z=a(r,"P",{});var fa=n(Z);$f=s(fa,`Each model has been trained independently on a different task and the scheduler can easily be swapped out and replaced with a different one.
During inference, we however want to be able to easily load all components and use them in inference - even if one component, `),xn=a(fa,"EM",{});var Vu=n(xn);Of=s(Vu,"e.g."),Vu.forEach(t),Gf=s(fa," CLIP\u2019s text encoder, originates from a different library, such as "),St=a(fa,"A",{href:!0,rel:!0});var Qu=n(St);Mf=s(Qu,"Transformers"),Qu.forEach(t),jf=s(fa,". To that end, all pipelines provide the following functionality:"),fa.forEach(t),Qr=d(r),T=a(r,"UL",{});var Qe=n(T);u=a(Qe,"LI",{});var g=n(u);$t=a(g,"A",{href:!0});var fp=n($t);Pn=a(fp,"CODE",{});var Wu=n(Pn);Cf=s(Wu,"from_pretrained"),Wu.forEach(t),Lf=s(fp," method"),fp.forEach(t),qf=s(g," that accepts a Hugging Face Hub repository id, "),An=a(g,"EM",{});var Ju=n(An);Rf=s(Ju,"e.g."),Ju.forEach(t),Nf=d(g),Ot=a(g,"A",{href:!0,rel:!0});var Ku=n(Ot);Hf=s(Ku,"runwayml/stable-diffusion-v1-5"),Ku.forEach(t),Bf=s(g," or a path to a local directory, "),Sn=a(g,"EM",{});var Xu=n(Sn);Uf=s(Xu,"e.g."),Xu.forEach(t),Yf=s(g,`
\u201D./stable-diffusion\u201D. To correctly retrieve which models and components should be loaded, one has to provide a `),$n=a(g,"CODE",{});var Zu=n($n);zf=s(Zu,"model_index.json"),Zu.forEach(t),Ff=s(g," file, "),On=a(g,"EM",{});var em=n(On);Vf=s(em,"e.g."),em.forEach(t),Qf=d(g),Gt=a(g,"A",{href:!0,rel:!0});var tm=n(Gt);Wf=s(tm,"runwayml/stable-diffusion-v1-5/model_index.json"),tm.forEach(t),Jf=s(g,`, which defines all components that should be
loaded into the pipelines. More specifically, for each model/component one needs to define the format `),Gn=a(g,"CODE",{});var om=n(Gn);Kf=s(om,'<name>: ["<library>", "<class name>"]'),om.forEach(t),Xf=s(g,". "),Mn=a(g,"CODE",{});var am=n(Mn);Zf=s(am,"<name>"),am.forEach(t),ed=s(g," is the attribute name given to the loaded instance of "),jn=a(g,"CODE",{});var nm=n(jn);td=s(nm,"<class name>"),nm.forEach(t),od=s(g," which can be found in the library or pipeline folder called "),Cn=a(g,"CODE",{});var rm=n(Cn);ad=s(rm,'"<library>"'),rm.forEach(t),nd=s(g,"."),g.forEach(t),rd=d(Qe),v=a(Qe,"LI",{});var _=n(v);oa=a(_,"A",{href:!0});var lm=n(oa);Ln=a(lm,"CODE",{});var sm=n(Ln);ld=s(sm,"save_pretrained"),sm.forEach(t),lm.forEach(t),sd=s(_," that accepts a local path, "),qn=a(_,"EM",{});var im=n(qn);id=s(im,"e.g."),im.forEach(t),fd=d(_),Rn=a(_,"CODE",{});var fm=n(Rn);dd=s(fm,"./stable-diffusion"),fm.forEach(t),hd=s(_," under which all models/components of the pipeline will be saved. For each component/model a folder is created inside the local path that is named after the given attribute name, "),Nn=a(_,"EM",{});var dm=n(Nn);pd=s(dm,"e.g."),dm.forEach(t),cd=d(_),Hn=a(_,"CODE",{});var hm=n(Hn);ud=s(hm,"./stable_diffusion/unet"),hm.forEach(t),md=s(_,`.
In addition, a `),Bn=a(_,"CODE",{});var pm=n(Bn);gd=s(pm,"model_index.json"),pm.forEach(t),vd=s(_," file is created at the root of the local path, "),Un=a(_,"EM",{});var cm=n(Un);_d=s(cm,"e.g."),cm.forEach(t),bd=d(_),Yn=a(_,"CODE",{});var um=n(Yn);Ed=s(um,"./stable_diffusion/model_index.json"),um.forEach(t),yd=s(_,` so that the complete pipeline can again be instantiated
from the local path.`),_.forEach(t),wd=d(Qe),y=a(Qe,"LI",{});var X=n(y);aa=a(X,"A",{href:!0});var mm=n(aa);zn=a(mm,"CODE",{});var gm=n(zn);Id=s(gm,"to"),gm.forEach(t),mm.forEach(t),Dd=s(X," which accepts a "),Fn=a(X,"CODE",{});var vm=n(Fn);Td=s(vm,"string"),vm.forEach(t),kd=s(X," or "),Vn=a(X,"CODE",{});var _m=n(Vn);xd=s(_m,"torch.device"),_m.forEach(t),Pd=s(X," to move all models that are of type "),Qn=a(X,"CODE",{});var bm=n(Qn);Ad=s(bm,"torch.nn.Module"),bm.forEach(t),Sd=s(X," to the passed device. The behavior is fully analogous to "),ie=a(X,"A",{href:!0,rel:!0});var Tl=n(ie);$d=s(Tl,"PyTorch\u2019s "),Wn=a(Tl,"CODE",{});var Em=n(Wn);Od=s(Em,"to"),Em.forEach(t),Gd=s(Tl," method"),Tl.forEach(t),Md=s(X,"."),X.forEach(t),jd=d(Qe),E=a(Qe,"LI",{});var I=n(E);Jn=a(I,"CODE",{});var ym=n(Jn);Cd=s(ym,"__call__"),ym.forEach(t),Ld=s(I," method to use the pipeline in inference. "),Kn=a(I,"CODE",{});var wm=n(Kn);qd=s(wm,"__call__"),wm.forEach(t),Rd=s(I," defines inference logic of the pipeline and should ideally encompass all aspects of it, from pre-processing to forwarding tensors to the different models and schedulers, as well as post-processing. The API of the "),Xn=a(I,"CODE",{});var Im=n(Xn);Nd=s(Im,"__call__"),Im.forEach(t),Hd=s(I," method can strongly vary from pipeline to pipeline. "),Zn=a(I,"EM",{});var Dm=n(Zn);Bd=s(Dm,"E.g."),Dm.forEach(t),Ud=s(I," a text-to-image pipeline, such as "),na=a(I,"A",{href:!0});var Tm=n(na);er=a(Tm,"CODE",{});var km=n(er);Yd=s(km,"StableDiffusionPipeline"),km.forEach(t),Tm.forEach(t),zd=s(I," should accept among other things the text prompt to generate the image. A pure image generation pipeline, such as "),Mt=a(I,"A",{href:!0,rel:!0});var xm=n(Mt);Fd=s(xm,"DDPMPipeline"),xm.forEach(t),Vd=s(I,` on the other hand can be run without providing any inputs. To better understand what inputs can be adapted for
each pipeline, one should look directly into the respective pipeline.`),I.forEach(t),Qe.forEach(t),Wr=d(r),k=a(r,"P",{});var We=n(k);tr=a(We,"STRONG",{});var Pm=n(tr);Qd=s(Pm,"Note"),Pm.forEach(t),Wd=s(We,": All pipelines have PyTorch\u2019s autograd disabled by decorating the "),or=a(We,"CODE",{});var Am=n(or);Jd=s(Am,"__call__"),Am.forEach(t),Kd=s(We," method with a "),jt=a(We,"A",{href:!0,rel:!0});var Sm=n(jt);ar=a(Sm,"CODE",{});var $m=n(ar);Xd=s($m,"torch.no_grad"),$m.forEach(t),Sm.forEach(t),Zd=s(We,` decorator because pipelines should
not be used for training. If you want to store the gradients during the forward pass, we recommend writing your own pipeline, see also our `),Ct=a(We,"A",{href:!0,rel:!0});var Om=n(Ct);eh=s(Om,"community-examples"),Om.forEach(t),We.forEach(t),Jr=d(r),fe=a(r,"H2",{class:!0});var kl=n(fe);Ie=a(kl,"A",{id:!0,class:!0,href:!0});var Gm=n(Ie);nr=a(Gm,"SPAN",{});var Mm=n(nr);$(Lt.$$.fragment,Mm),Mm.forEach(t),Gm.forEach(t),th=d(kl),rr=a(kl,"SPAN",{});var jm=n(rr);oh=s(jm,"Contribution"),jm.forEach(t),kl.forEach(t),Kr=d(r),w=a(r,"P",{});var ae=n(w);ah=s(ae,`We are more than happy about any contribution to the officially supported pipelines \u{1F917}. We aspire
all of our pipelines to be  `),lr=a(ae,"STRONG",{});var Cm=n(lr);nh=s(Cm,"self-contained"),Cm.forEach(t),rh=s(ae,", "),sr=a(ae,"STRONG",{});var Lm=n(sr);lh=s(Lm,"easy-to-tweak"),Lm.forEach(t),sh=s(ae,", "),ir=a(ae,"STRONG",{});var qm=n(ir);ih=s(qm,"beginner-friendly"),qm.forEach(t),fh=s(ae," and for "),fr=a(ae,"STRONG",{});var Rm=n(fr);dh=s(Rm,"one-purpose-only"),Rm.forEach(t),hh=s(ae,"."),ae.forEach(t),Xr=d(r),x=a(r,"UL",{});var Je=n(x);De=a(Je,"LI",{});var Or=n(De);dr=a(Or,"STRONG",{});var Nm=n(dr);ph=s(Nm,"Self-contained"),Nm.forEach(t),ch=s(Or,": A pipeline shall be as self-contained as possible. More specifically, this means that all functionality should be either directly defined in the pipeline file itself, should be inherited from (and only from) the "),qt=a(Or,"A",{href:!0});var dp=n(qt);hr=a(dp,"CODE",{});var Hm=n(hr);uh=s(Hm,"DiffusionPipeline"),Hm.forEach(t),mh=s(dp," class"),dp.forEach(t),gh=s(Or," or be directly attached to the model and scheduler components of the pipeline."),Or.forEach(t),vh=d(Je),ee=a(Je,"LI",{});var to=n(ee);pr=a(to,"STRONG",{});var Bm=n(pr);_h=s(Bm,"Easy-to-use"),Bm.forEach(t),bh=s(to,`: Pipelines should be extremely easy to use - one should be able to load the pipeline and
use it for its designated task, `),cr=a(to,"EM",{});var Um=n(cr);Eh=s(Um,"e.g."),Um.forEach(t),yh=s(to,` text-to-image generation, in just a couple of lines of code. Most
logic including pre-processing, an unrolled diffusion loop, and post-processing should all happen inside the `),ur=a(to,"CODE",{});var Ym=n(ur);wh=s(Ym,"__call__"),Ym.forEach(t),Ih=s(to," method."),to.forEach(t),Dh=d(Je),te=a(Je,"LI",{});var oo=n(te);mr=a(oo,"STRONG",{});var zm=n(mr);Th=s(zm,"Easy-to-tweak"),zm.forEach(t),kh=s(oo,": Certain pipelines will not be able to handle all use cases and tasks that you might like them to. If you want to use a certain pipeline for a specific use case that is not yet supported, you might have to copy the pipeline file and tweak the code to your needs. We try to make the pipeline code as readable as possible so that each part \u2013from pre-processing to diffusing to post-processing\u2013 can easily be adapted. If you would like the community to benefit from your customized pipeline, we would love to see a contribution to our "),Rt=a(oo,"A",{href:!0,rel:!0});var Fm=n(Rt);xh=s(Fm,"community-examples"),Fm.forEach(t),Ph=s(oo,". If you feel that an important pipeline should be part of the official pipelines but isn\u2019t, a contribution to the "),ra=a(oo,"A",{href:!0});var Vm=n(ra);Ah=s(Vm,"official pipelines"),Vm.forEach(t),Sh=s(oo," would be even better."),oo.forEach(t),$h=d(Je),P=a(Je,"LI",{});var me=n(P);gr=a(me,"STRONG",{});var Qm=n(gr);Oh=s(Qm,"One-purpose-only"),Qm.forEach(t),Gh=s(me,": Pipelines should be used for one task and one task only. Even if two tasks are very similar from a modeling point of view, "),vr=a(me,"EM",{});var Wm=n(vr);Mh=s(Wm,"e.g."),Wm.forEach(t),jh=s(me," image2image translation and in-painting, pipelines shall be used for one task only to keep them "),_r=a(me,"EM",{});var Jm=n(_r);Ch=s(Jm,"easy-to-tweak"),Jm.forEach(t),Lh=s(me," and "),br=a(me,"EM",{});var Km=n(br);qh=s(Km,"readable"),Km.forEach(t),Rh=s(me,"."),me.forEach(t),Je.forEach(t),Zr=d(r),de=a(r,"H2",{class:!0});var xl=n(de);Te=a(xl,"A",{id:!0,class:!0,href:!0});var Xm=n(Te);Er=a(Xm,"SPAN",{});var Zm=n(Er);$(Nt.$$.fragment,Zm),Zm.forEach(t),Xm.forEach(t),Nh=d(xl),yr=a(xl,"SPAN",{});var eg=n(yr);Hh=s(eg,"Examples"),eg.forEach(t),xl.forEach(t),el=d(r),he=a(r,"H3",{class:!0});var Pl=n(he);ke=a(Pl,"A",{id:!0,class:!0,href:!0});var tg=n(ke);wr=a(tg,"SPAN",{});var og=n(wr);$(Ht.$$.fragment,og),og.forEach(t),tg.forEach(t),Bh=d(Pl),Ir=a(Pl,"SPAN",{});var ag=n(Ir);Uh=s(ag,"Text-to-Image generation with Stable Diffusion"),ag.forEach(t),Pl.forEach(t),tl=d(r),$(Bt.$$.fragment,r),ol=d(r),pe=a(r,"H3",{class:!0});var Al=n(pe);xe=a(Al,"A",{id:!0,class:!0,href:!0});var ng=n(xe);Dr=a(ng,"SPAN",{});var rg=n(Dr);$(Ut.$$.fragment,rg),rg.forEach(t),ng.forEach(t),Yh=d(Al),Tr=a(Al,"SPAN",{});var lg=n(Tr);zh=s(lg,"Image-to-Image text-guided generation with Stable Diffusion"),lg.forEach(t),Al.forEach(t),al=d(r),Pe=a(r,"P",{});var Sl=n(Pe);Fh=s(Sl,"The "),kr=a(Sl,"CODE",{});var sg=n(kr);Vh=s(sg,"StableDiffusionImg2ImgPipeline"),sg.forEach(t),Qh=s(Sl," lets you pass a text prompt and an initial image to condition the generation of new images."),Sl.forEach(t),nl=d(r),$(Yt.$$.fragment,r),rl=d(r),zt=a(r,"P",{});var hp=n(zt);Wh=s(hp,"You can also run this example on colab "),Ft=a(hp,"A",{href:!0,rel:!0});var ig=n(Ft);la=a(ig,"IMG",{src:!0,alt:!0}),ig.forEach(t),hp.forEach(t),ll=d(r),ce=a(r,"H3",{class:!0});var $l=n(ce);Ae=a($l,"A",{id:!0,class:!0,href:!0});var fg=n(Ae);xr=a(fg,"SPAN",{});var dg=n(xr);$(Vt.$$.fragment,dg),dg.forEach(t),fg.forEach(t),Jh=d($l),Pr=a($l,"SPAN",{});var hg=n(Pr);Kh=s(hg,"Tweak prompts reusing seeds and latents"),hg.forEach(t),$l.forEach(t),sl=d(r),oe=a(r,"P",{});var da=n(oe);Xh=s(da,"You can generate your own latents to reproduce results, or tweak your prompt on a specific result you liked. "),Qt=a(da,"A",{href:!0,rel:!0});var pg=n(Qt);Zh=s(pg,"This notebook"),pg.forEach(t),ep=s(da," shows how to do it step by step. You can also run it in Google Colab "),Wt=a(da,"A",{href:!0,rel:!0});var cg=n(Wt);sa=a(cg,"IMG",{src:!0,alt:!0}),cg.forEach(t),tp=s(da,"."),da.forEach(t),il=d(r),ue=a(r,"H3",{class:!0});var Ol=n(ue);Se=a(Ol,"A",{id:!0,class:!0,href:!0});var ug=n(Se);Ar=a(ug,"SPAN",{});var mg=n(Ar);$(Jt.$$.fragment,mg),mg.forEach(t),ug.forEach(t),op=d(Ol),Sr=a(Ol,"SPAN",{});var gg=n(Sr);ap=s(gg,"In-painting using Stable Diffusion"),gg.forEach(t),Ol.forEach(t),fl=d(r),$e=a(r,"P",{});var Gl=n($e);np=s(Gl,"The "),$r=a(Gl,"CODE",{});var vg=n($r);rp=s(vg,"StableDiffusionInpaintPipeline"),vg.forEach(t),lp=s(Gl," lets you edit specific parts of an image by providing a mask and text prompt."),Gl.forEach(t),dl=d(r),$(Kt.$$.fragment,r),hl=d(r),Xt=a(r,"P",{});var pp=n(Xt);sp=s(pp,"You can also run this example on colab "),Zt=a(pp,"A",{href:!0,rel:!0});var _g=n(Zt);ia=a(_g,"IMG",{src:!0,alt:!0}),_g.forEach(t),pp.forEach(t),this.h()},h(){i(ne,"name","hf:doc:metadata"),i(ne,"content",JSON.stringify(kg)),i(ve,"id","pipelines"),i(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ve,"href","#pipelines"),i(re,"class","relative group"),i(Xe,"href","https://huggingface.co/blog/stable_diffusion"),i(Xe,"rel","nofollow"),i(ro,"href","./api/models#vae"),i(lo,"href","./api/models#UNet2DConditionModel"),i(Ze,"href","https://huggingface.co/docs/transformers/v4.21.2/en/model_doc/clip#transformers.CLIPTextModel"),i(Ze,"rel","nofollow"),i(so,"href","./api/scheduler#pndm"),i(ot,"href","https://huggingface.co/docs/transformers/v4.21.2/en/model_doc/clip#transformers.CLIPFeatureExtractor"),i(ot,"rel","nofollow"),i(io,"href","./stable_diffusion#safety_checker"),i(nt,"href","https://github.com/huggingface/diffusers/tree/main/src/diffusers/pipelines/latent_diffusion"),i(nt,"rel","nofollow"),i(rt,"href","https://arxiv.org/abs/2112.10752"),i(rt,"rel","nofollow"),i(po,"href","#pipelines-api"),i(ho,"start","2"),i(uo,"href","#pipelines-summary"),i(co,"start","3"),i(go,"href","#contribution"),i(mo,"start","4"),i(ft,"href","https://github.com/huggingface/diffusers/tree/main/examples"),i(ft,"rel","nofollow"),i(be,"id","diffusers-summary"),i(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(be,"href","#diffusers-summary"),i(le,"class","relative group"),i(_o,"align","center"),i(bo,"align","center"),i(Eo,"href","./ddpm"),i(ht,"href","https://arxiv.org/abs/2006.11239"),i(ht,"rel","nofollow"),i(yo,"align","center"),i(Oa,"align","center"),i(wo,"href","./ddim"),i(pt,"href","https://arxiv.org/abs/2010.02502"),i(pt,"rel","nofollow"),i(Io,"align","center"),ao(To.src,mp="https://colab.research.google.com/assets/colab-badge.svg")||i(To,"src",mp),i(To,"alt","Open In Colab"),i(ct,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/training_example.ipynb"),i(ct,"rel","nofollow"),i(Do,"align","center"),i(ko,"href","./latent_diffusion"),i(ut,"href","https://arxiv.org/abs/2112.10752"),i(ut,"rel","nofollow"),i(xo,"align","center"),i(Ra,"align","center"),i(Po,"href","./latent_diffusion_uncond"),i(mt,"href","https://arxiv.org/abs/2112.10752"),i(mt,"rel","nofollow"),i(Ao,"align","center"),i(Ua,"align","center"),i(So,"href","./pndm"),i(gt,"href","https://arxiv.org/abs/2202.09778"),i(gt,"rel","nofollow"),i($o,"align","center"),i(Va,"align","center"),i(Oo,"href","./score_sde_ve"),i(vt,"href","https://openreview.net/forum?id=PxTIG12RRHS"),i(vt,"rel","nofollow"),i(Go,"align","center"),i(Ka,"align","center"),i(Mo,"href","./score_sde_vp"),i(_t,"href","https://openreview.net/forum?id=PxTIG12RRHS"),i(_t,"rel","nofollow"),i(jo,"align","center"),i(tn,"align","center"),i(Co,"href","./stable_diffusion"),i(bt,"href","https://stability.ai/blog/stable-diffusion-public-release"),i(bt,"rel","nofollow"),i(Lo,"align","center"),ao(Ro.src,gp="https://colab.research.google.com/assets/colab-badge.svg")||i(Ro,"src",gp),i(Ro,"alt","Open In Colab"),i(Et,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/training_example.ipynb"),i(Et,"rel","nofollow"),i(qo,"align","center"),i(No,"href","./stable_diffusion"),i(yt,"href","https://stability.ai/blog/stable-diffusion-public-release"),i(yt,"rel","nofollow"),i(Ho,"align","center"),ao(Uo.src,vp="https://colab.research.google.com/assets/colab-badge.svg")||i(Uo,"src",vp),i(Uo,"alt","Open In Colab"),i(wt,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/image_2_image_using_diffusers.ipynb"),i(wt,"rel","nofollow"),i(Bo,"align","center"),i(Yo,"href","./stable_diffusion"),i(It,"href","https://stability.ai/blog/stable-diffusion-public-release"),i(It,"rel","nofollow"),i(zo,"align","center"),ao(Vo.src,_p="https://colab.research.google.com/assets/colab-badge.svg")||i(Vo,"src",_p),i(Vo,"alt","Open In Colab"),i(Dt,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/in_painting_with_stable_diffusion_using_diffusers.ipynb"),i(Dt,"rel","nofollow"),i(Fo,"align","center"),i(Qo,"href","./stochastic_karras_ve"),i(Tt,"href","https://arxiv.org/abs/2206.00364"),i(Tt,"rel","nofollow"),i(Wo,"align","center"),i(mn,"align","center"),i(Jo,"href","./vq_diffusion"),i(kt,"href","https://arxiv.org/abs/2111.14822"),i(kt,"rel","nofollow"),i(Ko,"align","center"),i(bn,"align","center"),i(Xo,"href","./repaint"),i(xt,"href","https://arxiv.org/abs/2201.09865"),i(xt,"rel","nofollow"),i(Zo,"align","center"),i(In,"align","center"),i(ea,"href","#examples"),i(we,"id","pipelines-api"),i(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(we,"href","#pipelines-api"),i(se,"class","relative group"),i(St,"href","https://github.com/huggingface/transformers"),i(St,"rel","nofollow"),i($t,"href","../diffusion_pipeline"),i(Ot,"href","https://huggingface.co/runwayml/stable-diffusion-v1-5"),i(Ot,"rel","nofollow"),i(Gt,"href","https://huggingface.co/runwayml/stable-diffusion-v1-5/blob/main/model_index.json"),i(Gt,"rel","nofollow"),i(oa,"href","../diffusion_pipeline"),i(aa,"href","../diffusion_pipeline"),i(ie,"href","https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.to"),i(ie,"rel","nofollow"),i(na,"href","./stable_diffusion"),i(Mt,"href","https://github.com/huggingface/diffusers/tree/main/src/diffusers/pipelines/ddpm"),i(Mt,"rel","nofollow"),i(jt,"href","https://pytorch.org/docs/stable/generated/torch.no_grad.html"),i(jt,"rel","nofollow"),i(Ct,"href","https://github.com/huggingface/diffusers/tree/main/examples/community"),i(Ct,"rel","nofollow"),i(Ie,"id","contribution"),i(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ie,"href","#contribution"),i(fe,"class","relative group"),i(qt,"href",".../diffusion_pipeline"),i(Rt,"href","https://github.com/huggingface/diffusers/tree/main/examples/community"),i(Rt,"rel","nofollow"),i(ra,"href","./overview"),i(Te,"id","examples"),i(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Te,"href","#examples"),i(de,"class","relative group"),i(ke,"id","texttoimage-generation-with-stable-diffusion"),i(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ke,"href","#texttoimage-generation-with-stable-diffusion"),i(he,"class","relative group"),i(xe,"id","imagetoimage-textguided-generation-with-stable-diffusion"),i(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(xe,"href","#imagetoimage-textguided-generation-with-stable-diffusion"),i(pe,"class","relative group"),ao(la.src,bp="https://colab.research.google.com/assets/colab-badge.svg")||i(la,"src",bp),i(la,"alt","Open In Colab"),i(Ft,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/image_2_image_using_diffusers.ipynb"),i(Ft,"rel","nofollow"),i(Ae,"id","tweak-prompts-reusing-seeds-and-latents"),i(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ae,"href","#tweak-prompts-reusing-seeds-and-latents"),i(ce,"class","relative group"),i(Qt,"href","https://github.com/pcuenca/diffusers-examples/blob/main/notebooks/stable-diffusion-seeds.ipynb"),i(Qt,"rel","nofollow"),ao(sa.src,Ep="https://colab.research.google.com/assets/colab-badge.svg")||i(sa,"src",Ep),i(sa,"alt","Open In Colab"),i(Wt,"href","https://colab.research.google.com/github/pcuenca/diffusers-examples/blob/main/notebooks/stable-diffusion-seeds.ipynb"),i(Wt,"rel","nofollow"),i(Se,"id","inpainting-using-stable-diffusion"),i(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Se,"href","#inpainting-using-stable-diffusion"),i(ue,"class","relative group"),ao(ia.src,yp="https://colab.research.google.com/assets/colab-badge.svg")||i(ia,"src",yp),i(ia,"alt","Open In Colab"),i(Zt,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/in_painting_with_stable_diffusion_using_diffusers.ipynb"),i(Zt,"rel","nofollow")},m(r,h){e(document.head,ne),p(r,Gr,h),p(r,re,h),e(re,ve),e(ve,ha),O(Ke,ha,null),e(re,Ml),e(re,pa),e(pa,jl),p(r,Mr,h),p(r,no,h),e(no,Cl),p(r,jr,h),p(r,_e,h),e(_e,Ll),e(_e,Xe),e(Xe,ql),e(_e,Rl),p(r,Cr,h),p(r,b,h),e(b,ca),e(ca,ro),e(ro,Nl),e(b,Hl),e(b,ua),e(ua,lo),e(lo,Bl),e(b,Ul),e(b,ma),e(ma,Ze),e(Ze,Yl),e(b,zl),e(b,et),e(et,Fl),e(et,so),e(so,Vl),e(et,Ql),e(b,Wl),e(b,tt),e(tt,Jl),e(tt,ot),e(ot,Kl),e(tt,Xl),e(b,Zl),e(b,at),e(at,es),e(at,io),e(io,ts),e(at,os),p(r,Lr,h),p(r,fo,h),e(fo,as),p(r,qr,h),p(r,D,h),e(D,ga),e(ga,va),e(va,C),e(C,ns),e(C,_a),e(_a,rs),e(C,ls),e(C,nt),e(nt,ss),e(C,is),e(C,rt),e(rt,fs),e(C,ds),e(D,hs),e(D,ba),e(ba,ho),e(ho,lt),e(lt,ps),e(lt,po),e(po,cs),e(lt,us),e(D,ms),e(D,Ea),e(Ea,co),e(co,st),e(st,gs),e(st,uo),e(uo,vs),e(st,_s),e(D,bs),e(D,ya),e(ya,mo),e(mo,it),e(it,Es),e(it,go),e(go,ys),e(it,ws),p(r,Rr,h),p(r,L,h),e(L,wa),e(wa,Is),e(L,Ds),e(L,Ia),e(Ia,Ts),e(L,ks),e(L,ft),e(ft,xs),e(L,Ps),p(r,Nr,h),p(r,le,h),e(le,be),e(be,Da),O(dt,Da,null),e(le,As),e(le,Ta),e(Ta,Ss),p(r,Hr,h),p(r,vo,h),e(vo,$s),p(r,Br,h),p(r,Ee,h),e(Ee,ka),e(ka,q),e(q,xa),e(xa,Os),e(q,Gs),e(q,Pa),e(Pa,Ms),e(q,js),e(q,_o),e(_o,Cs),e(q,Ls),e(q,bo),e(bo,qs),e(Ee,Rs),e(Ee,c),e(c,R),e(R,Aa),e(Aa,Eo),e(Eo,Ns),e(R,Hs),e(R,Sa),e(Sa,ht),e(ht,$a),e($a,Bs),e(R,Us),e(R,yo),e(yo,Ys),e(R,zs),e(R,Oa),e(c,Fs),e(c,N),e(N,Ga),e(Ga,wo),e(wo,Vs),e(N,Qs),e(N,Ma),e(Ma,pt),e(pt,ja),e(ja,Ws),e(N,Js),e(N,Io),e(Io,Ks),e(N,Xs),e(N,Do),e(Do,ct),e(ct,To),e(c,Zs),e(c,H),e(H,Ca),e(Ca,ko),e(ko,ei),e(H,ti),e(H,La),e(La,ut),e(ut,qa),e(qa,oi),e(H,ai),e(H,xo),e(xo,ni),e(H,ri),e(H,Ra),e(c,li),e(c,B),e(B,Na),e(Na,Po),e(Po,si),e(B,ii),e(B,Ha),e(Ha,mt),e(mt,Ba),e(Ba,fi),e(B,di),e(B,Ao),e(Ao,hi),e(B,pi),e(B,Ua),e(c,ci),e(c,U),e(U,Ya),e(Ya,So),e(So,ui),e(U,mi),e(U,za),e(za,gt),e(gt,Fa),e(Fa,gi),e(U,vi),e(U,$o),e($o,_i),e(U,bi),e(U,Va),e(c,Ei),e(c,Y),e(Y,Qa),e(Qa,Oo),e(Oo,yi),e(Y,wi),e(Y,Wa),e(Wa,vt),e(vt,Ja),e(Ja,Ii),e(Y,Di),e(Y,Go),e(Go,Ti),e(Y,ki),e(Y,Ka),e(c,xi),e(c,z),e(z,Xa),e(Xa,Mo),e(Mo,Pi),e(z,Ai),e(z,Za),e(Za,_t),e(_t,en),e(en,Si),e(z,$i),e(z,jo),e(jo,Oi),e(z,Gi),e(z,tn),e(c,Mi),e(c,F),e(F,on),e(on,Co),e(Co,ji),e(F,Ci),e(F,an),e(an,bt),e(bt,nn),e(nn,Li),e(F,qi),e(F,Lo),e(Lo,Ri),e(F,Ni),e(F,qo),e(qo,Et),e(Et,Ro),e(c,Hi),e(c,V),e(V,rn),e(rn,No),e(No,Bi),e(V,Ui),e(V,ln),e(ln,yt),e(yt,sn),e(sn,Yi),e(V,zi),e(V,Ho),e(Ho,Fi),e(V,Vi),e(V,Bo),e(Bo,wt),e(wt,Uo),e(c,Qi),e(c,Q),e(Q,fn),e(fn,Yo),e(Yo,Wi),e(Q,Ji),e(Q,dn),e(dn,It),e(It,hn),e(hn,Ki),e(Q,Xi),e(Q,zo),e(zo,Zi),e(Q,ef),e(Q,Fo),e(Fo,Dt),e(Dt,Vo),e(c,tf),e(c,W),e(W,pn),e(pn,Qo),e(Qo,of),e(W,af),e(W,cn),e(cn,Tt),e(Tt,un),e(un,nf),e(W,rf),e(W,Wo),e(Wo,lf),e(W,sf),e(W,mn),e(c,ff),e(c,J),e(J,gn),e(gn,Jo),e(Jo,df),e(J,hf),e(J,vn),e(vn,kt),e(kt,_n),e(_n,pf),e(J,cf),e(J,Ko),e(Ko,uf),e(J,mf),e(J,bn),e(c,gf),e(c,K),e(K,En),e(En,Xo),e(Xo,vf),e(K,_f),e(K,yn),e(yn,xt),e(xt,wn),e(wn,bf),e(K,Ef),e(K,Zo),e(Zo,yf),e(K,wf),e(K,In),p(r,Ur,h),p(r,Pt,h),e(Pt,Dn),e(Dn,If),e(Pt,Df),p(r,Yr,h),p(r,ye,h),e(ye,Tf),e(ye,ea),e(ea,kf),e(ye,xf),p(r,zr,h),p(r,se,h),e(se,we),e(we,Tn),O(At,Tn,null),e(se,Pf),e(se,kn),e(kn,Af),p(r,Fr,h),p(r,ta,h),e(ta,Sf),p(r,Vr,h),p(r,Z,h),e(Z,$f),e(Z,xn),e(xn,Of),e(Z,Gf),e(Z,St),e(St,Mf),e(Z,jf),p(r,Qr,h),p(r,T,h),e(T,u),e(u,$t),e($t,Pn),e(Pn,Cf),e($t,Lf),e(u,qf),e(u,An),e(An,Rf),e(u,Nf),e(u,Ot),e(Ot,Hf),e(u,Bf),e(u,Sn),e(Sn,Uf),e(u,Yf),e(u,$n),e($n,zf),e(u,Ff),e(u,On),e(On,Vf),e(u,Qf),e(u,Gt),e(Gt,Wf),e(u,Jf),e(u,Gn),e(Gn,Kf),e(u,Xf),e(u,Mn),e(Mn,Zf),e(u,ed),e(u,jn),e(jn,td),e(u,od),e(u,Cn),e(Cn,ad),e(u,nd),e(T,rd),e(T,v),e(v,oa),e(oa,Ln),e(Ln,ld),e(v,sd),e(v,qn),e(qn,id),e(v,fd),e(v,Rn),e(Rn,dd),e(v,hd),e(v,Nn),e(Nn,pd),e(v,cd),e(v,Hn),e(Hn,ud),e(v,md),e(v,Bn),e(Bn,gd),e(v,vd),e(v,Un),e(Un,_d),e(v,bd),e(v,Yn),e(Yn,Ed),e(v,yd),e(T,wd),e(T,y),e(y,aa),e(aa,zn),e(zn,Id),e(y,Dd),e(y,Fn),e(Fn,Td),e(y,kd),e(y,Vn),e(Vn,xd),e(y,Pd),e(y,Qn),e(Qn,Ad),e(y,Sd),e(y,ie),e(ie,$d),e(ie,Wn),e(Wn,Od),e(ie,Gd),e(y,Md),e(T,jd),e(T,E),e(E,Jn),e(Jn,Cd),e(E,Ld),e(E,Kn),e(Kn,qd),e(E,Rd),e(E,Xn),e(Xn,Nd),e(E,Hd),e(E,Zn),e(Zn,Bd),e(E,Ud),e(E,na),e(na,er),e(er,Yd),e(E,zd),e(E,Mt),e(Mt,Fd),e(E,Vd),p(r,Wr,h),p(r,k,h),e(k,tr),e(tr,Qd),e(k,Wd),e(k,or),e(or,Jd),e(k,Kd),e(k,jt),e(jt,ar),e(ar,Xd),e(k,Zd),e(k,Ct),e(Ct,eh),p(r,Jr,h),p(r,fe,h),e(fe,Ie),e(Ie,nr),O(Lt,nr,null),e(fe,th),e(fe,rr),e(rr,oh),p(r,Kr,h),p(r,w,h),e(w,ah),e(w,lr),e(lr,nh),e(w,rh),e(w,sr),e(sr,lh),e(w,sh),e(w,ir),e(ir,ih),e(w,fh),e(w,fr),e(fr,dh),e(w,hh),p(r,Xr,h),p(r,x,h),e(x,De),e(De,dr),e(dr,ph),e(De,ch),e(De,qt),e(qt,hr),e(hr,uh),e(qt,mh),e(De,gh),e(x,vh),e(x,ee),e(ee,pr),e(pr,_h),e(ee,bh),e(ee,cr),e(cr,Eh),e(ee,yh),e(ee,ur),e(ur,wh),e(ee,Ih),e(x,Dh),e(x,te),e(te,mr),e(mr,Th),e(te,kh),e(te,Rt),e(Rt,xh),e(te,Ph),e(te,ra),e(ra,Ah),e(te,Sh),e(x,$h),e(x,P),e(P,gr),e(gr,Oh),e(P,Gh),e(P,vr),e(vr,Mh),e(P,jh),e(P,_r),e(_r,Ch),e(P,Lh),e(P,br),e(br,qh),e(P,Rh),p(r,Zr,h),p(r,de,h),e(de,Te),e(Te,Er),O(Nt,Er,null),e(de,Nh),e(de,yr),e(yr,Hh),p(r,el,h),p(r,he,h),e(he,ke),e(ke,wr),O(Ht,wr,null),e(he,Bh),e(he,Ir),e(Ir,Uh),p(r,tl,h),O(Bt,r,h),p(r,ol,h),p(r,pe,h),e(pe,xe),e(xe,Dr),O(Ut,Dr,null),e(pe,Yh),e(pe,Tr),e(Tr,zh),p(r,al,h),p(r,Pe,h),e(Pe,Fh),e(Pe,kr),e(kr,Vh),e(Pe,Qh),p(r,nl,h),O(Yt,r,h),p(r,rl,h),p(r,zt,h),e(zt,Wh),e(zt,Ft),e(Ft,la),p(r,ll,h),p(r,ce,h),e(ce,Ae),e(Ae,xr),O(Vt,xr,null),e(ce,Jh),e(ce,Pr),e(Pr,Kh),p(r,sl,h),p(r,oe,h),e(oe,Xh),e(oe,Qt),e(Qt,Zh),e(oe,ep),e(oe,Wt),e(Wt,sa),e(oe,tp),p(r,il,h),p(r,ue,h),e(ue,Se),e(Se,Ar),O(Jt,Ar,null),e(ue,op),e(ue,Sr),e(Sr,ap),p(r,fl,h),p(r,$e,h),e($e,np),e($e,$r),e($r,rp),e($e,lp),p(r,dl,h),O(Kt,r,h),p(r,hl,h),p(r,Xt,h),e(Xt,sp),e(Xt,Zt),e(Zt,ia),pl=!0},p:Ig,i(r){pl||(G(Ke.$$.fragment,r),G(dt.$$.fragment,r),G(At.$$.fragment,r),G(Lt.$$.fragment,r),G(Nt.$$.fragment,r),G(Ht.$$.fragment,r),G(Bt.$$.fragment,r),G(Ut.$$.fragment,r),G(Yt.$$.fragment,r),G(Vt.$$.fragment,r),G(Jt.$$.fragment,r),G(Kt.$$.fragment,r),pl=!0)},o(r){M(Ke.$$.fragment,r),M(dt.$$.fragment,r),M(At.$$.fragment,r),M(Lt.$$.fragment,r),M(Nt.$$.fragment,r),M(Ht.$$.fragment,r),M(Bt.$$.fragment,r),M(Ut.$$.fragment,r),M(Yt.$$.fragment,r),M(Vt.$$.fragment,r),M(Jt.$$.fragment,r),M(Kt.$$.fragment,r),pl=!1},d(r){t(ne),r&&t(Gr),r&&t(re),j(Ke),r&&t(Mr),r&&t(no),r&&t(jr),r&&t(_e),r&&t(Cr),r&&t(b),r&&t(Lr),r&&t(fo),r&&t(qr),r&&t(D),r&&t(Rr),r&&t(L),r&&t(Nr),r&&t(le),j(dt),r&&t(Hr),r&&t(vo),r&&t(Br),r&&t(Ee),r&&t(Ur),r&&t(Pt),r&&t(Yr),r&&t(ye),r&&t(zr),r&&t(se),j(At),r&&t(Fr),r&&t(ta),r&&t(Vr),r&&t(Z),r&&t(Qr),r&&t(T),r&&t(Wr),r&&t(k),r&&t(Jr),r&&t(fe),j(Lt),r&&t(Kr),r&&t(w),r&&t(Xr),r&&t(x),r&&t(Zr),r&&t(de),j(Nt),r&&t(el),r&&t(he),j(Ht),r&&t(tl),j(Bt,r),r&&t(ol),r&&t(pe),j(Ut),r&&t(al),r&&t(Pe),r&&t(nl),j(Yt,r),r&&t(rl),r&&t(zt),r&&t(ll),r&&t(ce),j(Vt),r&&t(sl),r&&t(oe),r&&t(il),r&&t(ue),j(Jt),r&&t(fl),r&&t($e),r&&t(dl),j(Kt,r),r&&t(hl),r&&t(Xt)}}}const kg={local:"pipelines",sections:[{local:"diffusers-summary",title:"\u{1F9E8} Diffusers Summary"},{local:"pipelines-api",title:"Pipelines API"},{local:"contribution",title:"Contribution"},{local:"examples",sections:[{local:"texttoimage-generation-with-stable-diffusion",title:"Text-to-Image generation with Stable Diffusion"},{local:"imagetoimage-textguided-generation-with-stable-diffusion",title:"Image-to-Image text-guided generation with Stable Diffusion"},{local:"tweak-prompts-reusing-seeds-and-latents",title:"Tweak prompts reusing seeds and latents"},{local:"inpainting-using-stable-diffusion",title:"In-painting using Stable Diffusion"}],title:"Examples"}],title:"Pipelines"};function xg(up){return Dg(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class $g extends bg{constructor(ne){super();Eg(this,ne,xg,Tg,yg,{})}}export{$g as default,kg as metadata};
