import{S as c_,i as u_,s as f_,e as s,k as l,w as p,t as i,M as p_,c as n,d as r,m as c,a as o,x as h,h as a,b as d,G as e,g as f,y as m,q as g,o as _,B as v,v as h_}from"../../chunks/vendor-hf-doc-builder.js";import{T as m_}from"../../chunks/Tip-hf-doc-builder.js";import{D as b}from"../../chunks/Docstring-hf-doc-builder.js";import{I}from"../../chunks/IconCopyLink-hf-doc-builder.js";function g_(Lo){let F,xe;return{c(){F=s("p"),xe=i("Score SDE-VP is under construction.")},l(K){F=n(K,"P",{});var X=o(F);xe=a(X,"Score SDE-VP is under construction."),X.forEach(r)},m(K,X){f(K,F,X),e(F,xe)},d(K){K&&r(F)}}}function __(Lo){let F,xe,K,X,Ns,Dt,Ma,Ls,Pa,Fo,qr,Ta,Io,oe,ye,Fs,Et,Oa,Is,ka,Ko,we,Va,Ks,Ca,Aa,qo,Me,Ur,Na,xt,qs,La,Fa,Us,Ia,Ka,ie,qa,Hs,Ua,Ha,Rs,Ra,Wa,Uo,ae,Pe,Ws,yt,Ba,Bs,Ga,Ho,M,Ya,Gs,Ja,za,Hr,ja,Qa,Rr,Xa,Za,Ys,ed,td,Wr,rd,sd,Js,nd,od,Ro,de,Te,zs,wt,id,js,ad,Wo,Br,dd,Bo,Oe,Qs,ld,cd,Xs,ud,Go,le,ke,Zs,Mt,fd,en,pd,Yo,Gr,hd,Jo,ee,Pt,md,tn,gd,_d,vd,Tt,bd,rn,Sd,$d,Dd,sn,Ed,zo,Ve,xd,Yr,yd,wd,jo,ce,Ce,nn,Ot,Md,on,Pd,Qo,ue,kt,Td,an,Od,Xo,fe,Ae,dn,Vt,kd,ln,Vd,Zo,pe,Ct,Cd,cn,Ad,ei,he,Ne,un,At,Nd,fn,Ld,ti,me,Le,pn,Nt,Fd,hn,Id,ri,Jr,Kd,si,x,Lt,qd,mn,Ud,Hd,P,zr,Rd,Wd,gn,Bd,Gd,_n,Yd,Jd,vn,zd,jd,jr,Qd,Xd,Qr,Zd,el,Xr,tl,rl,sl,Zr,nl,Ft,ol,il,Fe,It,al,bn,dl,ll,Ie,Kt,cl,Sn,ul,fl,Ke,qt,pl,$n,hl,ni,ge,qe,Dn,Ut,ml,En,gl,oi,Ue,_l,Ht,vl,bl,ii,y,Rt,Sl,xn,$l,Dl,T,es,El,xl,yn,yl,wl,wn,Ml,Pl,Mn,Tl,Ol,ts,kl,Vl,rs,Cl,Al,ss,Nl,Ll,Fl,ns,Il,Wt,Kl,ql,He,Bt,Ul,Pn,Hl,Rl,Re,Gt,Wl,Tn,Bl,Gl,We,Yt,Yl,On,Jl,ai,_e,Be,kn,Jt,zl,Vn,jl,di,Ge,Ql,zt,Xl,Zl,li,S,jt,ec,Cn,tc,rc,Ye,sc,Qt,nc,oc,Xt,ic,ac,O,os,dc,lc,An,cc,uc,Nn,fc,pc,Ln,hc,mc,is,gc,_c,as,vc,bc,ds,Sc,$c,Dc,Zt,Ec,er,xc,yc,wc,te,tr,Mc,Fn,Pc,Tc,In,Oc,kc,Je,rr,Vc,Kn,Cc,Ac,ze,sr,Nc,qn,Lc,Fc,je,nr,Ic,Un,Kc,qc,Qe,or,Uc,Hn,Hc,ci,ve,Xe,Rn,ir,Rc,Wn,Wc,ui,Ze,Bc,ar,Gc,Yc,fi,w,dr,Jc,ls,zc,lr,jc,Qc,k,cs,Xc,Zc,Bn,eu,tu,Gn,ru,su,Yn,nu,ou,us,iu,au,fs,du,lu,ps,cu,uu,fu,et,cr,pu,Jn,hu,mu,tt,ur,gu,fr,_u,zn,vu,bu,Su,rt,pr,$u,jn,Du,Eu,st,hr,xu,Qn,yu,pi,be,nt,Xn,mr,wu,Zn,Mu,hi,ot,Pu,gr,Tu,Ou,mi,$,_r,ku,eo,Vu,Cu,V,hs,Au,Nu,to,Lu,Fu,ro,Iu,Ku,so,qu,Uu,ms,Hu,Ru,gs,Wu,Bu,_s,Gu,Yu,Ju,vs,zu,vr,ju,Qu,it,br,Xu,no,Zu,ef,at,Sr,tf,oo,rf,sf,re,$r,nf,io,of,af,Z,df,ao,lf,cf,lo,uf,ff,co,pf,hf,mf,dt,Dr,gf,uo,_f,vf,lt,Er,bf,fo,Sf,gi,Se,ct,po,xr,$f,ho,Df,_i,ut,Ef,yr,xf,yf,vi,D,wr,wf,mo,Mf,Pf,bs,Tf,Mr,Of,kf,C,Ss,Vf,Cf,go,Af,Nf,_o,Lf,Ff,vo,If,Kf,$s,qf,Uf,Ds,Hf,Rf,Es,Wf,Bf,Gf,ft,Pr,Yf,bo,Jf,zf,se,Tr,jf,So,Qf,Xf,$e,Zf,$o,ep,tp,Do,rp,sp,np,pt,Or,op,Eo,ip,ap,ht,kr,dp,xo,lp,cp,mt,Vr,up,yo,fp,bi,De,gt,wo,Cr,pp,Mo,hp,Si,_t,mp,Ar,gp,_p,$i,Ee,vt,Po,Nr,vp,To,bp,Di,bt,Sp,Lr,$p,Dp,Ei,St,xi,q,Fr,Ep,Oo,xp,yp,A,xs,wp,Mp,ko,Pp,Tp,Vo,Op,kp,Co,Vp,Cp,ys,Ap,Np,ws,Lp,Fp,Ms,Ip,Kp,qp,Ps,Up,Ir,Hp,Rp,Ao,Wp,yi;return Dt=new I({}),Et=new I({}),yt=new I({}),wt=new I({}),Mt=new I({}),Ot=new I({}),kt=new b({props:{name:"class diffusers.SchedulerMixin",anchor:"diffusers.SchedulerMixin",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_utils.py#L38"}}),Vt=new I({}),Ct=new b({props:{name:"class diffusers.schedulers.scheduling_utils.SchedulerOutput",anchor:"diffusers.schedulers.scheduling_utils.SchedulerOutput",parameters:[{name:"prev_sample",val:": FloatTensor"}],parametersDescription:[{anchor:"diffusers.schedulers.scheduling_utils.SchedulerOutput.prev_sample",description:`<strong>prev_sample</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code> for images) &#x2014;
Computed sample (x_{t-1}) of previous timestep. <code>prev_sample</code> should be used as next model input in the
denoising loop.`,name:"prev_sample"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_utils.py#L25"}}),At=new I({}),Nt=new I({}),Lt=new b({props:{name:"class diffusers.DDIMScheduler",anchor:"diffusers.DDIMScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"},{name:"clip_sample",val:": bool = True"},{name:"set_alpha_to_one",val:": bool = True"},{name:"steps_offset",val:": int = 0"}],parametersDescription:[{anchor:"diffusers.DDIMScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.DDIMScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.DDIMScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.DDIMScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code>, <code>scaled_linear</code>, or <code>squaredcos_cap_v2</code>.`,name:"beta_schedule"},{anchor:"diffusers.DDIMScheduler.trained_betas",description:`<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014;
option to pass an array of betas directly to the constructor to bypass <code>beta_start</code>, <code>beta_end</code> etc.`,name:"trained_betas"},{anchor:"diffusers.DDIMScheduler.clip_sample",description:`<strong>clip_sample</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
option to clip predicted sample between -1 and 1 for numerical stability.`,name:"clip_sample"},{anchor:"diffusers.DDIMScheduler.set_alpha_to_one",description:`<strong>set_alpha_to_one</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
each diffusion step uses the value of alphas product at that step and at the previous one. For the final
step there is no previous alpha. When this option is <code>True</code> the previous alpha product is fixed to <code>1</code>,
otherwise it uses the value of alpha at step 0.`,name:"set_alpha_to_one"},{anchor:"diffusers.DDIMScheduler.steps_offset",description:`<strong>steps_offset</strong> (<code>int</code>, default <code>0</code>) &#x2014;
an offset added to the inference steps. You can use a combination of <code>offset=1</code> and
<code>set_alpha_to_one=False</code>, to make the last step use step 0 for the previous alpha product, as done in
stable diffusion.`,name:"steps_offset"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddim.py#L78"}}),It=new b({props:{name:"scale_model_input",anchor:"diffusers.DDIMScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"timestep",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"diffusers.DDIMScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"},{anchor:"diffusers.DDIMScheduler.scale_model_input.timestep",description:"<strong>timestep</strong> (<code>int</code>, optional) &#x2014; current timestep",name:"timestep"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddim.py#L155",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),Kt=new b({props:{name:"set_timesteps",anchor:"diffusers.DDIMScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.DDIMScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddim.py#L179"}}),qt=new b({props:{name:"step",anchor:"diffusers.DDIMScheduler.step",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": int"},{name:"sample",val:": FloatTensor"},{name:"eta",val:": float = 0.0"},{name:"use_clipped_model_output",val:": bool = False"},{name:"generator",val:" = None"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.DDIMScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.DDIMScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.DDIMScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.DDIMScheduler.step.eta",description:"<strong>eta</strong> (<code>float</code>) &#x2014; weight of noise for added noise in diffusion step.",name:"eta"},{anchor:"diffusers.DDIMScheduler.step.use_clipped_model_output",description:`<strong>use_clipped_model_output</strong> (<code>bool</code>) &#x2014; TODO
generator &#x2014; random number generator.`,name:"use_clipped_model_output"},{anchor:"diffusers.DDIMScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than DDIMSchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddim.py#L195",returnDescription:`
<p><code>~schedulers.scheduling_utils.DDIMSchedulerOutput</code> if <code>return_dict</code> is True, otherwise a <code>tuple</code>. When
returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>~schedulers.scheduling_utils.DDIMSchedulerOutput</code> or <code>tuple</code></p>
`}}),Ut=new I({}),Rt=new b({props:{name:"class diffusers.DDPMScheduler",anchor:"diffusers.DDPMScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"},{name:"variance_type",val:": str = 'fixed_small'"},{name:"clip_sample",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.DDPMScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.DDPMScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.DDPMScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.DDPMScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code>, <code>scaled_linear</code>, or <code>squaredcos_cap_v2</code>.`,name:"beta_schedule"},{anchor:"diffusers.DDPMScheduler.trained_betas",description:`<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014;
option to pass an array of betas directly to the constructor to bypass <code>beta_start</code>, <code>beta_end</code> etc.`,name:"trained_betas"},{anchor:"diffusers.DDPMScheduler.variance_type",description:`<strong>variance_type</strong> (<code>str</code>) &#x2014;
options to clip the variance used when adding noise to the denoised sample. Choose from <code>fixed_small</code>,
<code>fixed_small_log</code>, <code>fixed_large</code>, <code>fixed_large_log</code>, <code>learned</code> or <code>learned_range</code>.`,name:"variance_type"},{anchor:"diffusers.DDPMScheduler.clip_sample",description:`<strong>clip_sample</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
option to clip predicted sample between -1 and 1 for numerical stability.`,name:"clip_sample"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddpm.py#L76"}}),Bt=new b({props:{name:"scale_model_input",anchor:"diffusers.DDPMScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"timestep",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"diffusers.DDPMScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"},{anchor:"diffusers.DDPMScheduler.scale_model_input.timestep",description:"<strong>timestep</strong> (<code>int</code>, optional) &#x2014; current timestep",name:"timestep"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddpm.py#L148",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),Gt=new b({props:{name:"set_timesteps",anchor:"diffusers.DDPMScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.DDPMScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddpm.py#L162"}}),Yt=new b({props:{name:"step",anchor:"diffusers.DDPMScheduler.step",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": int"},{name:"sample",val:": FloatTensor"},{name:"predict_epsilon",val:" = True"},{name:"generator",val:" = None"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.DDPMScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.DDPMScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.DDPMScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.DDPMScheduler.step.predict_epsilon",description:`<strong>predict_epsilon</strong> (<code>bool</code>) &#x2014;
optional flag to use when model predicts the samples directly instead of the noise, epsilon.
generator &#x2014; random number generator.`,name:"predict_epsilon"},{anchor:"diffusers.DDPMScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than DDPMSchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddpm.py#L210",returnDescription:`
<p><code>~schedulers.scheduling_utils.DDPMSchedulerOutput</code> if <code>return_dict</code> is True, otherwise a <code>tuple</code>. When
returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>~schedulers.scheduling_utils.DDPMSchedulerOutput</code> or <code>tuple</code></p>
`}}),Jt=new I({}),jt=new b({props:{name:"class diffusers.KarrasVeScheduler",anchor:"diffusers.KarrasVeScheduler",parameters:[{name:"sigma_min",val:": float = 0.02"},{name:"sigma_max",val:": float = 100"},{name:"s_noise",val:": float = 1.007"},{name:"s_churn",val:": float = 80"},{name:"s_min",val:": float = 0.05"},{name:"s_max",val:": float = 50"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.sigma_min",description:"<strong>sigma_min</strong> (<code>float</code>) &#x2014; minimum noise magnitude",name:"sigma_min"},{anchor:"diffusers.KarrasVeScheduler.sigma_max",description:"<strong>sigma_max</strong> (<code>float</code>) &#x2014; maximum noise magnitude",name:"sigma_max"},{anchor:"diffusers.KarrasVeScheduler.s_noise",description:`<strong>s_noise</strong> (<code>float</code>) &#x2014; the amount of additional noise to counteract loss of detail during sampling.
A reasonable range is [1.000, 1.011].`,name:"s_noise"},{anchor:"diffusers.KarrasVeScheduler.s_churn",description:`<strong>s_churn</strong> (<code>float</code>) &#x2014; the parameter controlling the overall amount of stochasticity.
A reasonable range is [0, 100].`,name:"s_churn"},{anchor:"diffusers.KarrasVeScheduler.s_min",description:`<strong>s_min</strong> (<code>float</code>) &#x2014; the start value of the sigma range where we add noise (enable stochasticity).
A reasonable range is [0, 10].`,name:"s_min"},{anchor:"diffusers.KarrasVeScheduler.s_max",description:`<strong>s_max</strong> (<code>float</code>) &#x2014; the end value of the sigma range where we add noise.
A reasonable range is [0.2, 80].`,name:"s_max"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L48"}}),tr=new b({props:{name:"add_noise_to_input",anchor:"diffusers.KarrasVeScheduler.add_noise_to_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"sigma",val:": float"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L133"}}),rr=new b({props:{name:"scale_model_input",anchor:"diffusers.KarrasVeScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"timestep",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"},{anchor:"diffusers.KarrasVeScheduler.scale_model_input.timestep",description:"<strong>timestep</strong> (<code>int</code>, optional) &#x2014; current timestep",name:"timestep"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L98",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),sr=new b({props:{name:"set_timesteps",anchor:"diffusers.KarrasVeScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L112"}}),nr=new b({props:{name:"step",anchor:"diffusers.KarrasVeScheduler.step",parameters:[{name:"model_output",val:": FloatTensor"},{name:"sigma_hat",val:": float"},{name:"sigma_prev",val:": float"},{name:"sample_hat",val:": FloatTensor"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.KarrasVeScheduler.step.sigma_hat",description:"<strong>sigma_hat</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_hat"},{anchor:"diffusers.KarrasVeScheduler.step.sigma_prev",description:"<strong>sigma_prev</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_prev"},{anchor:"diffusers.KarrasVeScheduler.step.sample_hat",description:"<strong>sample_hat</strong> (<code>torch.FloatTensor</code>) &#x2014; TODO",name:"sample_hat"},{anchor:"diffusers.KarrasVeScheduler.step.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than KarrasVeOutput class</p>
<p>KarrasVeOutput &#x2014; updated sample in the diffusion chain and derivative (TODO double check).`,name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L154",returnDescription:`
<p><code>KarrasVeOutput</code> if <code>return_dict</code> is True, otherwise a <code>tuple</code>. When
returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>KarrasVeOutput</code> or <code>tuple</code></p>
`}}),or=new b({props:{name:"step_correct",anchor:"diffusers.KarrasVeScheduler.step_correct",parameters:[{name:"model_output",val:": FloatTensor"},{name:"sigma_hat",val:": float"},{name:"sigma_prev",val:": float"},{name:"sample_hat",val:": FloatTensor"},{name:"sample_prev",val:": FloatTensor"},{name:"derivative",val:": FloatTensor"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.step_correct.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sigma_hat",description:"<strong>sigma_hat</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_hat"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sigma_prev",description:"<strong>sigma_prev</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_prev"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sample_hat",description:"<strong>sample_hat</strong> (<code>torch.FloatTensor</code>) &#x2014; TODO",name:"sample_hat"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sample_prev",description:"<strong>sample_prev</strong> (<code>torch.FloatTensor</code>) &#x2014; TODO",name:"sample_prev"},{anchor:"diffusers.KarrasVeScheduler.step_correct.derivative",description:"<strong>derivative</strong> (<code>torch.FloatTensor</code>) &#x2014; TODO",name:"derivative"},{anchor:"diffusers.KarrasVeScheduler.step_correct.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than KarrasVeOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L192",returnDescription:`
<p>updated sample in the diffusion chain. derivative (TODO): TODO</p>
`,returnType:`
<p>prev_sample (TODO)</p>
`}}),ir=new I({}),dr=new b({props:{name:"class diffusers.LMSDiscreteScheduler",anchor:"diffusers.LMSDiscreteScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.LMSDiscreteScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.LMSDiscreteScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.LMSDiscreteScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code> or <code>scaled_linear</code>.`,name:"beta_schedule"},{anchor:"diffusers.LMSDiscreteScheduler.trained_betas",description:`<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014;
option to pass an array of betas directly to the constructor to bypass <code>beta_start</code>, <code>beta_end</code> etc.`,name:"trained_betas"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L47"}}),cr=new b({props:{name:"get_lms_coefficient",anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient",parameters:[{name:"order",val:""},{name:"t",val:""},{name:"current_order",val:""}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient.order",description:"<strong>order</strong> (TODO) &#x2014;",name:"order"},{anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient.t",description:"<strong>t</strong> (TODO) &#x2014;",name:"t"},{anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient.current_order",description:"<strong>current_order</strong> (TODO) &#x2014;",name:"current_order"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L129"}}),ur=new b({props:{name:"scale_model_input",anchor:"diffusers.LMSDiscreteScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"timestep",val:": typing.Union[float, torch.FloatTensor]"}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"},{anchor:"diffusers.LMSDiscreteScheduler.scale_model_input.timestep",description:"<strong>timestep</strong> (<code>float</code> or <code>torch.FloatTensor</code>) &#x2014; the current timestep in the diffusion chain",name:"timestep"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L108",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),pr=new b({props:{name:"set_timesteps",anchor:"diffusers.LMSDiscreteScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.LMSDiscreteScheduler.set_timesteps.device",description:`<strong>device</strong> (<code>str</code> or <code>torch.device</code>, optional) &#x2014;
the device to which the timesteps should be moved to. If <code>None</code>, the timesteps are not moved.`,name:"device"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L151"}}),hr=new b({props:{name:"step",anchor:"diffusers.LMSDiscreteScheduler.step",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": typing.Union[float, torch.FloatTensor]"},{name:"sample",val:": FloatTensor"},{name:"order",val:": int = 4"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.LMSDiscreteScheduler.step.timestep",description:"<strong>timestep</strong> (<code>float</code>) &#x2014; current timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.LMSDiscreteScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.
order &#x2014; coefficient for multi-step inference.`,name:"sample"},{anchor:"diffusers.LMSDiscreteScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than LMSDiscreteSchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L172",returnDescription:`
<p><code>~schedulers.scheduling_utils.LMSDiscreteSchedulerOutput</code> if <code>return_dict</code> is True, otherwise a <code>tuple</code>.
When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>~schedulers.scheduling_utils.LMSDiscreteSchedulerOutput</code> or <code>tuple</code></p>
`}}),mr=new I({}),_r=new b({props:{name:"class diffusers.PNDMScheduler",anchor:"diffusers.PNDMScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"},{name:"skip_prk_steps",val:": bool = False"},{name:"set_alpha_to_one",val:": bool = False"},{name:"steps_offset",val:": int = 0"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.PNDMScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.PNDMScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.PNDMScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code>, <code>scaled_linear</code>, or <code>squaredcos_cap_v2</code>.`,name:"beta_schedule"},{anchor:"diffusers.PNDMScheduler.trained_betas",description:`<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014;
option to pass an array of betas directly to the constructor to bypass <code>beta_start</code>, <code>beta_end</code> etc.`,name:"trained_betas"},{anchor:"diffusers.PNDMScheduler.skip_prk_steps",description:`<strong>skip_prk_steps</strong> (<code>bool</code>) &#x2014;
allows the scheduler to skip the Runge-Kutta steps that are defined in the original paper as being required
before plms steps; defaults to <code>False</code>.`,name:"skip_prk_steps"},{anchor:"diffusers.PNDMScheduler.set_alpha_to_one",description:`<strong>set_alpha_to_one</strong> (<code>bool</code>, default <code>False</code>) &#x2014;
each diffusion step uses the value of alphas product at that step and at the previous one. For the final
step there is no previous alpha. When this option is <code>True</code> the previous alpha product is fixed to <code>1</code>,
otherwise it uses the value of alpha at step 0.`,name:"set_alpha_to_one"},{anchor:"diffusers.PNDMScheduler.steps_offset",description:`<strong>steps_offset</strong> (<code>int</code>, default <code>0</code>) &#x2014;
an offset added to the inference steps. You can use a combination of <code>offset=1</code> and
<code>set_alpha_to_one=False</code>, to make the last step use step 0 for the previous alpha product, as done in
stable diffusion.`,name:"steps_offset"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L56"}}),br=new b({props:{name:"scale_model_input",anchor:"diffusers.PNDMScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L336",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),Sr=new b({props:{name:"set_timesteps",anchor:"diffusers.PNDMScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L144"}}),$r=new b({props:{name:"step",anchor:"diffusers.PNDMScheduler.step",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": int"},{name:"sample",val:": FloatTensor"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.PNDMScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.PNDMScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.PNDMScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L183",returnDescription:`
<p><a
  href="/docs/diffusers/main/en/api/schedulers#diffusers.schedulers.scheduling_utils.SchedulerOutput"
>SchedulerOutput</a> if <code>return_dict</code> is True, otherwise a <code>tuple</code>. When
returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><a
  href="/docs/diffusers/main/en/api/schedulers#diffusers.schedulers.scheduling_utils.SchedulerOutput"
>SchedulerOutput</a> or <code>tuple</code></p>
`}}),Dr=new b({props:{name:"step_plms",anchor:"diffusers.PNDMScheduler.step_plms",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": int"},{name:"sample",val:": FloatTensor"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.step_plms.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.PNDMScheduler.step_plms.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.PNDMScheduler.step_plms.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.PNDMScheduler.step_plms.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L269",returnDescription:`
<p><code>~scheduling_utils.SchedulerOutput</code> if <code>return_dict</code> is
True, otherwise a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>~scheduling_utils.SchedulerOutput</code> or <code>tuple</code></p>
`}}),Er=new b({props:{name:"step_prk",anchor:"diffusers.PNDMScheduler.step_prk",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": int"},{name:"sample",val:": FloatTensor"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.step_prk.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.PNDMScheduler.step_prk.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.PNDMScheduler.step_prk.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.PNDMScheduler.step_prk.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L214",returnDescription:`
<p><code>~scheduling_utils.SchedulerOutput</code> if <code>return_dict</code> is
True, otherwise a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>~scheduling_utils.SchedulerOutput</code> or <code>tuple</code></p>
`}}),xr=new I({}),wr=new b({props:{name:"class diffusers.ScoreSdeVeScheduler",anchor:"diffusers.ScoreSdeVeScheduler",parameters:[{name:"num_train_timesteps",val:": int = 2000"},{name:"snr",val:": float = 0.15"},{name:"sigma_min",val:": float = 0.01"},{name:"sigma_max",val:": float = 1348.0"},{name:"sampling_eps",val:": float = 1e-05"},{name:"correct_steps",val:": int = 1"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.ScoreSdeVeScheduler.snr",description:`<strong>snr</strong> (<code>float</code>) &#x2014;
coefficient weighting the step from the model_output sample (from the network) to the random noise.`,name:"snr"},{anchor:"diffusers.ScoreSdeVeScheduler.sigma_min",description:`<strong>sigma_min</strong> (<code>float</code>) &#x2014;
initial noise scale for sigma sequence in sampling procedure. The minimum sigma should mirror the
distribution of the data.`,name:"sigma_min"},{anchor:"diffusers.ScoreSdeVeScheduler.sigma_max",description:"<strong>sigma_max</strong> (<code>float</code>) &#x2014; maximum value used for the range of continuous timesteps passed into the model.",name:"sigma_max"},{anchor:"diffusers.ScoreSdeVeScheduler.sampling_eps",description:`<strong>sampling_eps</strong> (<code>float</code>) &#x2014; the end value of sampling, where timesteps decrease progressively from 1 to
epsilon. &#x2014;`,name:"sampling_eps"},{anchor:"diffusers.ScoreSdeVeScheduler.correct_steps",description:"<strong>correct_steps</strong> (<code>int</code>) &#x2014; number of correction steps performed on a produced sample.",name:"correct_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L45"}}),Pr=new b({props:{name:"scale_model_input",anchor:"diffusers.ScoreSdeVeScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"timestep",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"},{anchor:"diffusers.ScoreSdeVeScheduler.scale_model_input.timestep",description:"<strong>timestep</strong> (<code>int</code>, optional) &#x2014; current timestep",name:"timestep"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L87",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),Tr=new b({props:{name:"set_sigmas",anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas",parameters:[{name:"num_inference_steps",val:": int"},{name:"sigma_min",val:": float = None"},{name:"sigma_max",val:": float = None"},{name:"sampling_eps",val:": float = None"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.sigma_min",description:`<strong>sigma_min</strong> (<code>float</code>, optional) &#x2014;
initial noise scale value (overrides value given at Scheduler instantiation).`,name:"sigma_min"},{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.sigma_max",description:"<strong>sigma_max</strong> (<code>float</code>, optional) &#x2014; final noise scale value (overrides value given at Scheduler instantiation).",name:"sigma_max"},{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.sampling_eps",description:"<strong>sampling_eps</strong> (<code>float</code>, optional) &#x2014; final timestep value (overrides value given at Scheduler instantiation).",name:"sampling_eps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L117"}}),Or=new b({props:{name:"set_timesteps",anchor:"diffusers.ScoreSdeVeScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"sampling_eps",val:": float = None"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.ScoreSdeVeScheduler.set_timesteps.sampling_eps",description:"<strong>sampling_eps</strong> (<code>float</code>, optional) &#x2014; final timestep value (overrides value given at Scheduler instantiation).",name:"sampling_eps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L101"}}),kr=new b({props:{name:"step_correct",anchor:"diffusers.ScoreSdeVeScheduler.step_correct",parameters:[{name:"model_output",val:": FloatTensor"},{name:"sample",val:": FloatTensor"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.step_correct.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.ScoreSdeVeScheduler.step_correct.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.
generator &#x2014; random number generator.`,name:"sample"},{anchor:"diffusers.ScoreSdeVeScheduler.step_correct.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L212",returnDescription:`
<p><code>SdeVeOutput</code> if
<code>return_dict</code> is True, otherwise a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>SdeVeOutput</code> or <code>tuple</code></p>
`}}),Vr=new b({props:{name:"step_pred",anchor:"diffusers.ScoreSdeVeScheduler.step_pred",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": int"},{name:"sample",val:": FloatTensor"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.
generator &#x2014; random number generator.`,name:"sample"},{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L151",returnDescription:`
<p><code>SdeVeOutput</code> if
<code>return_dict</code> is True, otherwise a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>SdeVeOutput</code> or <code>tuple</code></p>
`}}),Cr=new I({}),Nr=new I({}),St=new m_({props:{warning:!0,$$slots:{default:[g_]},$$scope:{ctx:Lo}}}),Fr=new b({props:{name:"class diffusers.schedulers.ScoreSdeVpScheduler",anchor:"diffusers.schedulers.ScoreSdeVpScheduler",parameters:[{name:"num_train_timesteps",val:" = 2000"},{name:"beta_min",val:" = 0.1"},{name:"beta_max",val:" = 20"},{name:"sampling_eps",val:" = 0.001"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_vp.py#L26"}}),{c(){F=s("meta"),xe=l(),K=s("h1"),X=s("a"),Ns=s("span"),p(Dt.$$.fragment),Ma=l(),Ls=s("span"),Pa=i("Schedulers"),Fo=l(),qr=s("p"),Ta=i("Diffusers contains multiple pre-built schedule functions for the diffusion process."),Io=l(),oe=s("h2"),ye=s("a"),Fs=s("span"),p(Et.$$.fragment),Oa=l(),Is=s("span"),ka=i("What is a scheduler?"),Ko=l(),we=s("p"),Va=i("The schedule functions, denoted "),Ks=s("em"),Ca=i("Schedulers"),Aa=i(" in the library take in the output of a trained model, a sample which the diffusion process is iterating on, and a timestep to return a denoised sample."),qo=l(),Me=s("ul"),Ur=s("li"),Na=i("Schedulers define the methodology for iteratively adding noise to an image or for updating a sample based on model outputs."),xt=s("ul"),qs=s("li"),La=i("adding noise in different manners represent the algorithmic processes to train a diffusion model by adding noise to images."),Fa=l(),Us=s("li"),Ia=i("for inference, the scheduler defines how to update a sample based on an output from a pretrained model."),Ka=l(),ie=s("li"),qa=i("Schedulers are often defined by a "),Hs=s("em"),Ua=i("noise schedule"),Ha=i(" and an "),Rs=s("em"),Ra=i("update rule"),Wa=i(" to solve the differential equation solution."),Uo=l(),ae=s("h3"),Pe=s("a"),Ws=s("span"),p(yt.$$.fragment),Ba=l(),Bs=s("span"),Ga=i("Discrete versus continuous schedulers"),Ho=l(),M=s("p"),Ya=i(`All schedulers take in a timestep to predict the updated version of the sample being diffused.
The timesteps dictate where in the diffusion process the step is, where data is generated by iterating forward in time and inference is executed by propagating backwards through timesteps.
Different algorithms use timesteps that both discrete (accepting `),Gs=s("code"),Ja=i("int"),za=i(" inputs), such as the "),Hr=s("a"),ja=i("DDPMScheduler"),Qa=i(" or "),Rr=s("a"),Xa=i("PNDMScheduler"),Za=i(", and continuous (accepting "),Ys=s("code"),ed=i("float"),td=i(" inputs), such as the score-based schedulers "),Wr=s("a"),rd=i("ScoreSdeVeScheduler"),sd=i(" or "),Js=s("code"),nd=i("ScoreSdeVpScheduler"),od=i("."),Ro=l(),de=s("h2"),Te=s("a"),zs=s("span"),p(wt.$$.fragment),id=l(),js=s("span"),ad=i("Designing Re-usable schedulers"),Wo=l(),Br=s("p"),dd=i(`The core design principle between the schedule functions is to be model, system, and framework independent.
This allows for rapid experimentation and cleaner abstractions in the code, where the model prediction is separated from the sample update.
To this end, the design of schedulers is such that:`),Bo=l(),Oe=s("ul"),Qs=s("li"),ld=i("Schedulers can be used interchangeably between diffusion models in inference to find the preferred trade-off between speed and generation quality."),cd=l(),Xs=s("li"),ud=i("Schedulers are currently by default in PyTorch, but are designed to be framework independent (partial Jax support currently exists)."),Go=l(),le=s("h2"),ke=s("a"),Zs=s("span"),p(Mt.$$.fragment),fd=l(),en=s("span"),pd=i("API"),Yo=l(),Gr=s("p"),hd=i("The core API for any new scheduler must follow a limited structure."),Jo=l(),ee=s("ul"),Pt=s("li"),md=i("Schedulers should provide one or more "),tn=s("code"),gd=i("def step(...)"),_d=i(" functions that should be called to update the generated sample iteratively."),vd=l(),Tt=s("li"),bd=i("Schedulers should provide a "),rn=s("code"),Sd=i("set_timesteps(...)"),$d=i(" method that configures the parameters of a schedule function for a specific inference task."),Dd=l(),sn=s("li"),Ed=i("Schedulers should be framework-specific."),zo=l(),Ve=s("p"),xd=i("The base class "),Yr=s("a"),yd=i("SchedulerMixin"),wd=i(" implements low level utilities used by multiple schedulers."),jo=l(),ce=s("h3"),Ce=s("a"),nn=s("span"),p(Ot.$$.fragment),Md=l(),on=s("span"),Pd=i("SchedulerMixin"),Qo=l(),ue=s("div"),p(kt.$$.fragment),Td=l(),an=s("p"),Od=i("Mixin containing common functions for the schedulers."),Xo=l(),fe=s("h3"),Ae=s("a"),dn=s("span"),p(Vt.$$.fragment),kd=l(),ln=s("span"),Vd=i("SchedulerOutput"),Zo=i("\n\nThe class `SchedulerOutput` contains the outputs from any schedulers `step(...)` call.\n"),pe=s("div"),p(Ct.$$.fragment),Cd=l(),cn=s("p"),Ad=i("Base class for the scheduler\u2019s step function output."),ei=l(),he=s("h3"),Ne=s("a"),un=s("span"),p(At.$$.fragment),Nd=l(),fn=s("span"),Ld=i("Implemented Schedulers"),ti=l(),me=s("h4"),Le=s("a"),pn=s("span"),p(Nt.$$.fragment),Fd=l(),hn=s("span"),Id=i("Denoising diffusion implicit models (DDIM)"),ri=l(),Jr=s("p"),Kd=i("Original paper can be found here."),si=l(),x=s("div"),p(Lt.$$.fragment),qd=l(),mn=s("p"),Ud=i(`Denoising diffusion implicit models is a scheduler that extends the denoising procedure introduced in denoising
diffusion probabilistic models (DDPMs) with non-Markovian guidance.`),Hd=l(),P=s("p"),zr=s("a"),Rd=i("~ConfigMixin"),Wd=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),gn=s("code"),Bd=i("__init__"),Gd=i(`
function, such as `),_n=s("code"),Yd=i("num_train_timesteps"),Jd=i(". They can be accessed via "),vn=s("code"),zd=i("scheduler.config.num_train_timesteps"),jd=i(`.
`),jr=s("a"),Qd=i("~ConfigMixin"),Xd=i(" also provides general loading and saving functionality via the "),Qr=s("a"),Zd=i("save_config()"),el=i(` and
`),Xr=s("a"),tl=i("from_config()"),rl=i(" functions."),sl=l(),Zr=s("p"),nl=i("For more details, see the original paper: "),Ft=s("a"),ol=i("https://arxiv.org/abs/2010.02502"),il=l(),Fe=s("div"),p(It.$$.fragment),al=l(),bn=s("p"),dl=i(`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),ll=l(),Ie=s("div"),p(Kt.$$.fragment),cl=l(),Sn=s("p"),ul=i("Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),fl=l(),Ke=s("div"),p(qt.$$.fragment),pl=l(),$n=s("p"),hl=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),ni=l(),ge=s("h4"),qe=s("a"),Dn=s("span"),p(Ut.$$.fragment),ml=l(),En=s("span"),gl=i("Denoising diffusion probabilistic models (DDPM)"),oi=l(),Ue=s("p"),_l=i("Original paper can be found "),Ht=s("a"),vl=i("here"),bl=i("."),ii=l(),y=s("div"),p(Rt.$$.fragment),Sl=l(),xn=s("p"),$l=i(`Denoising diffusion probabilistic models (DDPMs) explores the connections between denoising score matching and
Langevin dynamics sampling.`),Dl=l(),T=s("p"),es=s("a"),El=i("~ConfigMixin"),xl=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),yn=s("code"),yl=i("__init__"),wl=i(`
function, such as `),wn=s("code"),Ml=i("num_train_timesteps"),Pl=i(". They can be accessed via "),Mn=s("code"),Tl=i("scheduler.config.num_train_timesteps"),Ol=i(`.
`),ts=s("a"),kl=i("~ConfigMixin"),Vl=i(" also provides general loading and saving functionality via the "),rs=s("a"),Cl=i("save_config()"),Al=i(` and
`),ss=s("a"),Nl=i("from_config()"),Ll=i(" functions."),Fl=l(),ns=s("p"),Il=i("For more details, see the original paper: "),Wt=s("a"),Kl=i("https://arxiv.org/abs/2006.11239"),ql=l(),He=s("div"),p(Bt.$$.fragment),Ul=l(),Pn=s("p"),Hl=i(`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),Rl=l(),Re=s("div"),p(Gt.$$.fragment),Wl=l(),Tn=s("p"),Bl=i("Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),Gl=l(),We=s("div"),p(Yt.$$.fragment),Yl=l(),On=s("p"),Jl=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),ai=l(),_e=s("h4"),Be=s("a"),kn=s("span"),p(Jt.$$.fragment),zl=l(),Vn=s("span"),jl=i("Variance exploding, stochastic sampling from Karras et. al"),di=l(),Ge=s("p"),Ql=i("Original paper can be found "),zt=s("a"),Xl=i("here"),Zl=i("."),li=l(),S=s("div"),p(jt.$$.fragment),ec=l(),Cn=s("p"),tc=i(`Stochastic sampling from Karras et al. [1] tailored to the Variance-Expanding (VE) models [2]. Use Algorithm 2 and
the VE column of Table 1 from [1] for reference.`),rc=l(),Ye=s("p"),sc=i(`[1] Karras, Tero, et al. \u201CElucidating the Design Space of Diffusion-Based Generative Models.\u201D
`),Qt=s("a"),nc=i("https://arxiv.org/abs/2206.00364"),oc=i(` [2] Song, Yang, et al. \u201CScore-based generative modeling through stochastic
differential equations.\u201D `),Xt=s("a"),ic=i("https://arxiv.org/abs/2011.13456"),ac=l(),O=s("p"),os=s("a"),dc=i("~ConfigMixin"),lc=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),An=s("code"),cc=i("__init__"),uc=i(`
function, such as `),Nn=s("code"),fc=i("num_train_timesteps"),pc=i(". They can be accessed via "),Ln=s("code"),hc=i("scheduler.config.num_train_timesteps"),mc=i(`.
`),is=s("a"),gc=i("~ConfigMixin"),_c=i(" also provides general loading and saving functionality via the "),as=s("a"),vc=i("save_config()"),bc=i(` and
`),ds=s("a"),Sc=i("from_config()"),$c=i(" functions."),Dc=l(),Zt=s("p"),Ec=i(`For more details on the parameters, see the original paper\u2019s Appendix E.: \u201CElucidating the Design Space of
Diffusion-Based Generative Models.\u201D `),er=s("a"),xc=i("https://arxiv.org/abs/2206.00364"),yc=i(`. The grid search values used to find the
optimal {s_noise, s_churn, s_min, s_max} for a specific model are described in Table 5 of the paper.`),wc=l(),te=s("div"),p(tr.$$.fragment),Mc=l(),Fn=s("p"),Pc=i(`Explicit Langevin-like \u201Cchurn\u201D step of adding noise to the sample according to a factor gamma_i \u2265 0 to reach a
higher noise level sigma_hat = sigma_i + gamma_i*sigma_i.`),Tc=l(),In=s("p"),Oc=i("TODO Args:"),kc=l(),Je=s("div"),p(rr.$$.fragment),Vc=l(),Kn=s("p"),Cc=i(`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),Ac=l(),ze=s("div"),p(sr.$$.fragment),Nc=l(),qn=s("p"),Lc=i("Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),Fc=l(),je=s("div"),p(nr.$$.fragment),Ic=l(),Un=s("p"),Kc=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),qc=l(),Qe=s("div"),p(or.$$.fragment),Uc=l(),Hn=s("p"),Hc=i("Correct the predicted sample based on the output model_output of the network. TODO complete description"),ci=l(),ve=s("h4"),Xe=s("a"),Rn=s("span"),p(ir.$$.fragment),Rc=l(),Wn=s("span"),Wc=i("Linear multistep scheduler for discrete beta schedules"),ui=l(),Ze=s("p"),Bc=i("Original implementation can be found "),ar=s("a"),Gc=i("here"),Yc=i("."),fi=l(),w=s("div"),p(dr.$$.fragment),Jc=l(),ls=s("p"),zc=i(`Linear Multistep Scheduler for discrete beta schedules. Based on the original k-diffusion implementation by
Katherine Crowson:
`),lr=s("a"),jc=i("https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),Qc=l(),k=s("p"),cs=s("a"),Xc=i("~ConfigMixin"),Zc=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),Bn=s("code"),eu=i("__init__"),tu=i(`
function, such as `),Gn=s("code"),ru=i("num_train_timesteps"),su=i(". They can be accessed via "),Yn=s("code"),nu=i("scheduler.config.num_train_timesteps"),ou=i(`.
`),us=s("a"),iu=i("~ConfigMixin"),au=i(" also provides general loading and saving functionality via the "),fs=s("a"),du=i("save_config()"),lu=i(` and
`),ps=s("a"),cu=i("from_config()"),uu=i(" functions."),fu=l(),et=s("div"),p(cr.$$.fragment),pu=l(),Jn=s("p"),hu=i("Compute a linear multistep coefficient."),mu=l(),tt=s("div"),p(ur.$$.fragment),gu=l(),fr=s("p"),_u=i("Scales the denoising model input by "),zn=s("code"),vu=i("(sigma**2 + 1) ** 0.5"),bu=i(" to match the K-LMS algorithm."),Su=l(),rt=s("div"),p(pr.$$.fragment),$u=l(),jn=s("p"),Du=i("Sets the timesteps used for the diffusion chain. Supporting function to be run before inference."),Eu=l(),st=s("div"),p(hr.$$.fragment),xu=l(),Qn=s("p"),yu=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),pi=l(),be=s("h4"),nt=s("a"),Xn=s("span"),p(mr.$$.fragment),wu=l(),Zn=s("span"),Mu=i("Pseudo numerical methods for diffusion models (PNDM)"),hi=l(),ot=s("p"),Pu=i("Original implementation can be found "),gr=s("a"),Tu=i("here"),Ou=i("."),mi=l(),$=s("div"),p(_r.$$.fragment),ku=l(),eo=s("p"),Vu=i(`Pseudo numerical methods for diffusion models (PNDM) proposes using more advanced ODE integration techniques,
namely Runge-Kutta method and a linear multi-step method.`),Cu=l(),V=s("p"),hs=s("a"),Au=i("~ConfigMixin"),Nu=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),to=s("code"),Lu=i("__init__"),Fu=i(`
function, such as `),ro=s("code"),Iu=i("num_train_timesteps"),Ku=i(". They can be accessed via "),so=s("code"),qu=i("scheduler.config.num_train_timesteps"),Uu=i(`.
`),ms=s("a"),Hu=i("~ConfigMixin"),Ru=i(" also provides general loading and saving functionality via the "),gs=s("a"),Wu=i("save_config()"),Bu=i(` and
`),_s=s("a"),Gu=i("from_config()"),Yu=i(" functions."),Ju=l(),vs=s("p"),zu=i("For more details, see the original paper: "),vr=s("a"),ju=i("https://arxiv.org/abs/2202.09778"),Qu=l(),it=s("div"),p(br.$$.fragment),Xu=l(),no=s("p"),Zu=i(`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),ef=l(),at=s("div"),p(Sr.$$.fragment),tf=l(),oo=s("p"),rf=i("Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),sf=l(),re=s("div"),p($r.$$.fragment),nf=l(),io=s("p"),of=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),af=l(),Z=s("p"),df=i("This function calls "),ao=s("code"),lf=i("step_prk()"),cf=i(" or "),lo=s("code"),uf=i("step_plms()"),ff=i(" depending on the internal variable "),co=s("code"),pf=i("counter"),hf=i("."),mf=l(),dt=s("div"),p(Dr.$$.fragment),gf=l(),uo=s("p"),_f=i(`Step function propagating the sample with the linear multi-step method. This has one forward pass with multiple
times to approximate the solution.`),vf=l(),lt=s("div"),p(Er.$$.fragment),bf=l(),fo=s("p"),Sf=i(`Step function propagating the sample with the Runge-Kutta method. RK takes 4 forward passes to approximate the
solution to the differential equation.`),gi=l(),Se=s("h4"),ct=s("a"),po=s("span"),p(xr.$$.fragment),$f=l(),ho=s("span"),Df=i("variance exploding stochastic differential equation (SDE) scheduler"),_i=l(),ut=s("p"),Ef=i("Original paper can be found "),yr=s("a"),xf=i("here"),yf=i("."),vi=l(),D=s("div"),p(wr.$$.fragment),wf=l(),mo=s("p"),Mf=i("The variance exploding stochastic differential equation (SDE) scheduler."),Pf=l(),bs=s("p"),Tf=i("For more information, see the original paper: "),Mr=s("a"),Of=i("https://arxiv.org/abs/2011.13456"),kf=l(),C=s("p"),Ss=s("a"),Vf=i("~ConfigMixin"),Cf=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),go=s("code"),Af=i("__init__"),Nf=i(`
function, such as `),_o=s("code"),Lf=i("num_train_timesteps"),Ff=i(". They can be accessed via "),vo=s("code"),If=i("scheduler.config.num_train_timesteps"),Kf=i(`.
`),$s=s("a"),qf=i("~ConfigMixin"),Uf=i(" also provides general loading and saving functionality via the "),Ds=s("a"),Hf=i("save_config()"),Rf=i(` and
`),Es=s("a"),Wf=i("from_config()"),Bf=i(" functions."),Gf=l(),ft=s("div"),p(Pr.$$.fragment),Yf=l(),bo=s("p"),Jf=i(`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),zf=l(),se=s("div"),p(Tr.$$.fragment),jf=l(),So=s("p"),Qf=i("Sets the noise scales used for the diffusion chain. Supporting function to be run before inference."),Xf=l(),$e=s("p"),Zf=i("The sigmas control the weight of the "),$o=s("code"),ep=i("drift"),tp=i(" and "),Do=s("code"),rp=i("diffusion"),sp=i(" components of sample update."),np=l(),pt=s("div"),p(Or.$$.fragment),op=l(),Eo=s("p"),ip=i("Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),ap=l(),ht=s("div"),p(kr.$$.fragment),dp=l(),xo=s("p"),lp=i(`Correct the predicted sample based on the output model_output of the network. This is often run repeatedly
after making the prediction for the previous timestep.`),cp=l(),mt=s("div"),p(Vr.$$.fragment),up=l(),yo=s("p"),fp=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),bi=l(),De=s("h4"),gt=s("a"),wo=s("span"),p(Cr.$$.fragment),pp=l(),Mo=s("span"),hp=i("improved pseudo numerical methods for diffusion models (iPNDM)"),Si=l(),_t=s("p"),mp=i("Original implementation can be found "),Ar=s("a"),gp=i("here"),_p=i("."),$i=l(),Ee=s("h4"),vt=s("a"),Po=s("span"),p(Nr.$$.fragment),vp=l(),To=s("span"),bp=i("variance preserving stochastic differential equation (SDE) scheduler"),Di=l(),bt=s("p"),Sp=i("Original paper can be found "),Lr=s("a"),$p=i("here"),Dp=i("."),Ei=l(),p(St.$$.fragment),xi=l(),q=s("div"),p(Fr.$$.fragment),Ep=l(),Oo=s("p"),xp=i("The variance preserving stochastic differential equation (SDE) scheduler."),yp=l(),A=s("p"),xs=s("a"),wp=i("~ConfigMixin"),Mp=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),ko=s("code"),Pp=i("__init__"),Tp=i(`
function, such as `),Vo=s("code"),Op=i("num_train_timesteps"),kp=i(". They can be accessed via "),Co=s("code"),Vp=i("scheduler.config.num_train_timesteps"),Cp=i(`.
`),ys=s("a"),Ap=i("~ConfigMixin"),Np=i(" also provides general loading and saving functionality via the "),ws=s("a"),Lp=i("save_config()"),Fp=i(` and
`),Ms=s("a"),Ip=i("from_config()"),Kp=i(" functions."),qp=l(),Ps=s("p"),Up=i("For more information, see the original paper: "),Ir=s("a"),Hp=i("https://arxiv.org/abs/2011.13456"),Rp=l(),Ao=s("p"),Wp=i("UNDER CONSTRUCTION"),this.h()},l(t){const u=p_('[data-svelte="svelte-1phssyn"]',document.head);F=n(u,"META",{name:!0,content:!0}),u.forEach(r),xe=c(t),K=n(t,"H1",{class:!0});var Kr=o(K);X=n(Kr,"A",{id:!0,class:!0,href:!0});var Xp=o(X);Ns=n(Xp,"SPAN",{});var Zp=o(Ns);h(Dt.$$.fragment,Zp),Zp.forEach(r),Xp.forEach(r),Ma=c(Kr),Ls=n(Kr,"SPAN",{});var eh=o(Ls);Pa=a(eh,"Schedulers"),eh.forEach(r),Kr.forEach(r),Fo=c(t),qr=n(t,"P",{});var th=o(qr);Ta=a(th,"Diffusers contains multiple pre-built schedule functions for the diffusion process."),th.forEach(r),Io=c(t),oe=n(t,"H2",{class:!0});var wi=o(oe);ye=n(wi,"A",{id:!0,class:!0,href:!0});var rh=o(ye);Fs=n(rh,"SPAN",{});var sh=o(Fs);h(Et.$$.fragment,sh),sh.forEach(r),rh.forEach(r),Oa=c(wi),Is=n(wi,"SPAN",{});var nh=o(Is);ka=a(nh,"What is a scheduler?"),nh.forEach(r),wi.forEach(r),Ko=c(t),we=n(t,"P",{});var Mi=o(we);Va=a(Mi,"The schedule functions, denoted "),Ks=n(Mi,"EM",{});var oh=o(Ks);Ca=a(oh,"Schedulers"),oh.forEach(r),Aa=a(Mi," in the library take in the output of a trained model, a sample which the diffusion process is iterating on, and a timestep to return a denoised sample."),Mi.forEach(r),qo=c(t),Me=n(t,"UL",{});var Pi=o(Me);Ur=n(Pi,"LI",{});var Bp=o(Ur);Na=a(Bp,"Schedulers define the methodology for iteratively adding noise to an image or for updating a sample based on model outputs."),xt=n(Bp,"UL",{});var Ti=o(xt);qs=n(Ti,"LI",{});var ih=o(qs);La=a(ih,"adding noise in different manners represent the algorithmic processes to train a diffusion model by adding noise to images."),ih.forEach(r),Fa=c(Ti),Us=n(Ti,"LI",{});var ah=o(Us);Ia=a(ah,"for inference, the scheduler defines how to update a sample based on an output from a pretrained model."),ah.forEach(r),Ti.forEach(r),Bp.forEach(r),Ka=c(Pi),ie=n(Pi,"LI",{});var Ts=o(ie);qa=a(Ts,"Schedulers are often defined by a "),Hs=n(Ts,"EM",{});var dh=o(Hs);Ua=a(dh,"noise schedule"),dh.forEach(r),Ha=a(Ts," and an "),Rs=n(Ts,"EM",{});var lh=o(Rs);Ra=a(lh,"update rule"),lh.forEach(r),Wa=a(Ts," to solve the differential equation solution."),Ts.forEach(r),Pi.forEach(r),Uo=c(t),ae=n(t,"H3",{class:!0});var Oi=o(ae);Pe=n(Oi,"A",{id:!0,class:!0,href:!0});var ch=o(Pe);Ws=n(ch,"SPAN",{});var uh=o(Ws);h(yt.$$.fragment,uh),uh.forEach(r),ch.forEach(r),Ba=c(Oi),Bs=n(Oi,"SPAN",{});var fh=o(Bs);Ga=a(fh,"Discrete versus continuous schedulers"),fh.forEach(r),Oi.forEach(r),Ho=c(t),M=n(t,"P",{});var J=o(M);Ya=a(J,`All schedulers take in a timestep to predict the updated version of the sample being diffused.
The timesteps dictate where in the diffusion process the step is, where data is generated by iterating forward in time and inference is executed by propagating backwards through timesteps.
Different algorithms use timesteps that both discrete (accepting `),Gs=n(J,"CODE",{});var ph=o(Gs);Ja=a(ph,"int"),ph.forEach(r),za=a(J," inputs), such as the "),Hr=n(J,"A",{href:!0});var hh=o(Hr);ja=a(hh,"DDPMScheduler"),hh.forEach(r),Qa=a(J," or "),Rr=n(J,"A",{href:!0});var mh=o(Rr);Xa=a(mh,"PNDMScheduler"),mh.forEach(r),Za=a(J,", and continuous (accepting "),Ys=n(J,"CODE",{});var gh=o(Ys);ed=a(gh,"float"),gh.forEach(r),td=a(J," inputs), such as the score-based schedulers "),Wr=n(J,"A",{href:!0});var _h=o(Wr);rd=a(_h,"ScoreSdeVeScheduler"),_h.forEach(r),sd=a(J," or "),Js=n(J,"CODE",{});var vh=o(Js);nd=a(vh,"ScoreSdeVpScheduler"),vh.forEach(r),od=a(J,"."),J.forEach(r),Ro=c(t),de=n(t,"H2",{class:!0});var ki=o(de);Te=n(ki,"A",{id:!0,class:!0,href:!0});var bh=o(Te);zs=n(bh,"SPAN",{});var Sh=o(zs);h(wt.$$.fragment,Sh),Sh.forEach(r),bh.forEach(r),id=c(ki),js=n(ki,"SPAN",{});var $h=o(js);ad=a($h,"Designing Re-usable schedulers"),$h.forEach(r),ki.forEach(r),Wo=c(t),Br=n(t,"P",{});var Dh=o(Br);dd=a(Dh,`The core design principle between the schedule functions is to be model, system, and framework independent.
This allows for rapid experimentation and cleaner abstractions in the code, where the model prediction is separated from the sample update.
To this end, the design of schedulers is such that:`),Dh.forEach(r),Bo=c(t),Oe=n(t,"UL",{});var Vi=o(Oe);Qs=n(Vi,"LI",{});var Eh=o(Qs);ld=a(Eh,"Schedulers can be used interchangeably between diffusion models in inference to find the preferred trade-off between speed and generation quality."),Eh.forEach(r),cd=c(Vi),Xs=n(Vi,"LI",{});var xh=o(Xs);ud=a(xh,"Schedulers are currently by default in PyTorch, but are designed to be framework independent (partial Jax support currently exists)."),xh.forEach(r),Vi.forEach(r),Go=c(t),le=n(t,"H2",{class:!0});var Ci=o(le);ke=n(Ci,"A",{id:!0,class:!0,href:!0});var yh=o(ke);Zs=n(yh,"SPAN",{});var wh=o(Zs);h(Mt.$$.fragment,wh),wh.forEach(r),yh.forEach(r),fd=c(Ci),en=n(Ci,"SPAN",{});var Mh=o(en);pd=a(Mh,"API"),Mh.forEach(r),Ci.forEach(r),Yo=c(t),Gr=n(t,"P",{});var Ph=o(Gr);hd=a(Ph,"The core API for any new scheduler must follow a limited structure."),Ph.forEach(r),Jo=c(t),ee=n(t,"UL",{});var Os=o(ee);Pt=n(Os,"LI",{});var Ai=o(Pt);md=a(Ai,"Schedulers should provide one or more "),tn=n(Ai,"CODE",{});var Th=o(tn);gd=a(Th,"def step(...)"),Th.forEach(r),_d=a(Ai," functions that should be called to update the generated sample iteratively."),Ai.forEach(r),vd=c(Os),Tt=n(Os,"LI",{});var Ni=o(Tt);bd=a(Ni,"Schedulers should provide a "),rn=n(Ni,"CODE",{});var Oh=o(rn);Sd=a(Oh,"set_timesteps(...)"),Oh.forEach(r),$d=a(Ni," method that configures the parameters of a schedule function for a specific inference task."),Ni.forEach(r),Dd=c(Os),sn=n(Os,"LI",{});var kh=o(sn);Ed=a(kh,"Schedulers should be framework-specific."),kh.forEach(r),Os.forEach(r),zo=c(t),Ve=n(t,"P",{});var Li=o(Ve);xd=a(Li,"The base class "),Yr=n(Li,"A",{href:!0});var Vh=o(Yr);yd=a(Vh,"SchedulerMixin"),Vh.forEach(r),wd=a(Li," implements low level utilities used by multiple schedulers."),Li.forEach(r),jo=c(t),ce=n(t,"H3",{class:!0});var Fi=o(ce);Ce=n(Fi,"A",{id:!0,class:!0,href:!0});var Ch=o(Ce);nn=n(Ch,"SPAN",{});var Ah=o(nn);h(Ot.$$.fragment,Ah),Ah.forEach(r),Ch.forEach(r),Md=c(Fi),on=n(Fi,"SPAN",{});var Nh=o(on);Pd=a(Nh,"SchedulerMixin"),Nh.forEach(r),Fi.forEach(r),Qo=c(t),ue=n(t,"DIV",{class:!0});var Ii=o(ue);h(kt.$$.fragment,Ii),Td=c(Ii),an=n(Ii,"P",{});var Lh=o(an);Od=a(Lh,"Mixin containing common functions for the schedulers."),Lh.forEach(r),Ii.forEach(r),Xo=c(t),fe=n(t,"H3",{class:!0});var Ki=o(fe);Ae=n(Ki,"A",{id:!0,class:!0,href:!0});var Fh=o(Ae);dn=n(Fh,"SPAN",{});var Ih=o(dn);h(Vt.$$.fragment,Ih),Ih.forEach(r),Fh.forEach(r),kd=c(Ki),ln=n(Ki,"SPAN",{});var Kh=o(ln);Vd=a(Kh,"SchedulerOutput"),Kh.forEach(r),Ki.forEach(r),Zo=a(t,"\n\nThe class `SchedulerOutput` contains the outputs from any schedulers `step(...)` call.\n"),pe=n(t,"DIV",{class:!0});var qi=o(pe);h(Ct.$$.fragment,qi),Cd=c(qi),cn=n(qi,"P",{});var qh=o(cn);Ad=a(qh,"Base class for the scheduler\u2019s step function output."),qh.forEach(r),qi.forEach(r),ei=c(t),he=n(t,"H3",{class:!0});var Ui=o(he);Ne=n(Ui,"A",{id:!0,class:!0,href:!0});var Uh=o(Ne);un=n(Uh,"SPAN",{});var Hh=o(un);h(At.$$.fragment,Hh),Hh.forEach(r),Uh.forEach(r),Nd=c(Ui),fn=n(Ui,"SPAN",{});var Rh=o(fn);Ld=a(Rh,"Implemented Schedulers"),Rh.forEach(r),Ui.forEach(r),ti=c(t),me=n(t,"H4",{class:!0});var Hi=o(me);Le=n(Hi,"A",{id:!0,class:!0,href:!0});var Wh=o(Le);pn=n(Wh,"SPAN",{});var Bh=o(pn);h(Nt.$$.fragment,Bh),Bh.forEach(r),Wh.forEach(r),Fd=c(Hi),hn=n(Hi,"SPAN",{});var Gh=o(hn);Id=a(Gh,"Denoising diffusion implicit models (DDIM)"),Gh.forEach(r),Hi.forEach(r),ri=c(t),Jr=n(t,"P",{});var Yh=o(Jr);Kd=a(Yh,"Original paper can be found here."),Yh.forEach(r),si=c(t),x=n(t,"DIV",{class:!0});var z=o(x);h(Lt.$$.fragment,z),qd=c(z),mn=n(z,"P",{});var Jh=o(mn);Ud=a(Jh,`Denoising diffusion implicit models is a scheduler that extends the denoising procedure introduced in denoising
diffusion probabilistic models (DDPMs) with non-Markovian guidance.`),Jh.forEach(r),Hd=c(z),P=n(z,"P",{});var U=o(P);zr=n(U,"A",{href:!0});var zh=o(zr);Rd=a(zh,"~ConfigMixin"),zh.forEach(r),Wd=a(U," takes care of storing all config attributes that are passed in the scheduler\u2019s "),gn=n(U,"CODE",{});var jh=o(gn);Bd=a(jh,"__init__"),jh.forEach(r),Gd=a(U,`
function, such as `),_n=n(U,"CODE",{});var Qh=o(_n);Yd=a(Qh,"num_train_timesteps"),Qh.forEach(r),Jd=a(U,". They can be accessed via "),vn=n(U,"CODE",{});var Xh=o(vn);zd=a(Xh,"scheduler.config.num_train_timesteps"),Xh.forEach(r),jd=a(U,`.
`),jr=n(U,"A",{href:!0});var Zh=o(jr);Qd=a(Zh,"~ConfigMixin"),Zh.forEach(r),Xd=a(U," also provides general loading and saving functionality via the "),Qr=n(U,"A",{href:!0});var em=o(Qr);Zd=a(em,"save_config()"),em.forEach(r),el=a(U,` and
`),Xr=n(U,"A",{href:!0});var tm=o(Xr);tl=a(tm,"from_config()"),tm.forEach(r),rl=a(U," functions."),U.forEach(r),sl=c(z),Zr=n(z,"P",{});var Gp=o(Zr);nl=a(Gp,"For more details, see the original paper: "),Ft=n(Gp,"A",{href:!0,rel:!0});var rm=o(Ft);ol=a(rm,"https://arxiv.org/abs/2010.02502"),rm.forEach(r),Gp.forEach(r),il=c(z),Fe=n(z,"DIV",{class:!0});var Ri=o(Fe);h(It.$$.fragment,Ri),al=c(Ri),bn=n(Ri,"P",{});var sm=o(bn);dl=a(sm,`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),sm.forEach(r),Ri.forEach(r),ll=c(z),Ie=n(z,"DIV",{class:!0});var Wi=o(Ie);h(Kt.$$.fragment,Wi),cl=c(Wi),Sn=n(Wi,"P",{});var nm=o(Sn);ul=a(nm,"Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),nm.forEach(r),Wi.forEach(r),fl=c(z),Ke=n(z,"DIV",{class:!0});var Bi=o(Ke);h(qt.$$.fragment,Bi),pl=c(Bi),$n=n(Bi,"P",{});var om=o($n);hl=a(om,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),om.forEach(r),Bi.forEach(r),z.forEach(r),ni=c(t),ge=n(t,"H4",{class:!0});var Gi=o(ge);qe=n(Gi,"A",{id:!0,class:!0,href:!0});var im=o(qe);Dn=n(im,"SPAN",{});var am=o(Dn);h(Ut.$$.fragment,am),am.forEach(r),im.forEach(r),ml=c(Gi),En=n(Gi,"SPAN",{});var dm=o(En);gl=a(dm,"Denoising diffusion probabilistic models (DDPM)"),dm.forEach(r),Gi.forEach(r),oi=c(t),Ue=n(t,"P",{});var Yi=o(Ue);_l=a(Yi,"Original paper can be found "),Ht=n(Yi,"A",{href:!0,rel:!0});var lm=o(Ht);vl=a(lm,"here"),lm.forEach(r),bl=a(Yi,"."),Yi.forEach(r),ii=c(t),y=n(t,"DIV",{class:!0});var j=o(y);h(Rt.$$.fragment,j),Sl=c(j),xn=n(j,"P",{});var cm=o(xn);$l=a(cm,`Denoising diffusion probabilistic models (DDPMs) explores the connections between denoising score matching and
Langevin dynamics sampling.`),cm.forEach(r),Dl=c(j),T=n(j,"P",{});var H=o(T);es=n(H,"A",{href:!0});var um=o(es);El=a(um,"~ConfigMixin"),um.forEach(r),xl=a(H," takes care of storing all config attributes that are passed in the scheduler\u2019s "),yn=n(H,"CODE",{});var fm=o(yn);yl=a(fm,"__init__"),fm.forEach(r),wl=a(H,`
function, such as `),wn=n(H,"CODE",{});var pm=o(wn);Ml=a(pm,"num_train_timesteps"),pm.forEach(r),Pl=a(H,". They can be accessed via "),Mn=n(H,"CODE",{});var hm=o(Mn);Tl=a(hm,"scheduler.config.num_train_timesteps"),hm.forEach(r),Ol=a(H,`.
`),ts=n(H,"A",{href:!0});var mm=o(ts);kl=a(mm,"~ConfigMixin"),mm.forEach(r),Vl=a(H," also provides general loading and saving functionality via the "),rs=n(H,"A",{href:!0});var gm=o(rs);Cl=a(gm,"save_config()"),gm.forEach(r),Al=a(H,` and
`),ss=n(H,"A",{href:!0});var _m=o(ss);Nl=a(_m,"from_config()"),_m.forEach(r),Ll=a(H," functions."),H.forEach(r),Fl=c(j),ns=n(j,"P",{});var Yp=o(ns);Il=a(Yp,"For more details, see the original paper: "),Wt=n(Yp,"A",{href:!0,rel:!0});var vm=o(Wt);Kl=a(vm,"https://arxiv.org/abs/2006.11239"),vm.forEach(r),Yp.forEach(r),ql=c(j),He=n(j,"DIV",{class:!0});var Ji=o(He);h(Bt.$$.fragment,Ji),Ul=c(Ji),Pn=n(Ji,"P",{});var bm=o(Pn);Hl=a(bm,`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),bm.forEach(r),Ji.forEach(r),Rl=c(j),Re=n(j,"DIV",{class:!0});var zi=o(Re);h(Gt.$$.fragment,zi),Wl=c(zi),Tn=n(zi,"P",{});var Sm=o(Tn);Bl=a(Sm,"Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),Sm.forEach(r),zi.forEach(r),Gl=c(j),We=n(j,"DIV",{class:!0});var ji=o(We);h(Yt.$$.fragment,ji),Yl=c(ji),On=n(ji,"P",{});var $m=o(On);Jl=a($m,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),$m.forEach(r),ji.forEach(r),j.forEach(r),ai=c(t),_e=n(t,"H4",{class:!0});var Qi=o(_e);Be=n(Qi,"A",{id:!0,class:!0,href:!0});var Dm=o(Be);kn=n(Dm,"SPAN",{});var Em=o(kn);h(Jt.$$.fragment,Em),Em.forEach(r),Dm.forEach(r),zl=c(Qi),Vn=n(Qi,"SPAN",{});var xm=o(Vn);jl=a(xm,"Variance exploding, stochastic sampling from Karras et. al"),xm.forEach(r),Qi.forEach(r),di=c(t),Ge=n(t,"P",{});var Xi=o(Ge);Ql=a(Xi,"Original paper can be found "),zt=n(Xi,"A",{href:!0,rel:!0});var ym=o(zt);Xl=a(ym,"here"),ym.forEach(r),Zl=a(Xi,"."),Xi.forEach(r),li=c(t),S=n(t,"DIV",{class:!0});var E=o(S);h(jt.$$.fragment,E),ec=c(E),Cn=n(E,"P",{});var wm=o(Cn);tc=a(wm,`Stochastic sampling from Karras et al. [1] tailored to the Variance-Expanding (VE) models [2]. Use Algorithm 2 and
the VE column of Table 1 from [1] for reference.`),wm.forEach(r),rc=c(E),Ye=n(E,"P",{});var No=o(Ye);sc=a(No,`[1] Karras, Tero, et al. \u201CElucidating the Design Space of Diffusion-Based Generative Models.\u201D
`),Qt=n(No,"A",{href:!0,rel:!0});var Mm=o(Qt);nc=a(Mm,"https://arxiv.org/abs/2206.00364"),Mm.forEach(r),oc=a(No,` [2] Song, Yang, et al. \u201CScore-based generative modeling through stochastic
differential equations.\u201D `),Xt=n(No,"A",{href:!0,rel:!0});var Pm=o(Xt);ic=a(Pm,"https://arxiv.org/abs/2011.13456"),Pm.forEach(r),No.forEach(r),ac=c(E),O=n(E,"P",{});var R=o(O);os=n(R,"A",{href:!0});var Tm=o(os);dc=a(Tm,"~ConfigMixin"),Tm.forEach(r),lc=a(R," takes care of storing all config attributes that are passed in the scheduler\u2019s "),An=n(R,"CODE",{});var Om=o(An);cc=a(Om,"__init__"),Om.forEach(r),uc=a(R,`
function, such as `),Nn=n(R,"CODE",{});var km=o(Nn);fc=a(km,"num_train_timesteps"),km.forEach(r),pc=a(R,". They can be accessed via "),Ln=n(R,"CODE",{});var Vm=o(Ln);hc=a(Vm,"scheduler.config.num_train_timesteps"),Vm.forEach(r),mc=a(R,`.
`),is=n(R,"A",{href:!0});var Cm=o(is);gc=a(Cm,"~ConfigMixin"),Cm.forEach(r),_c=a(R," also provides general loading and saving functionality via the "),as=n(R,"A",{href:!0});var Am=o(as);vc=a(Am,"save_config()"),Am.forEach(r),bc=a(R,` and
`),ds=n(R,"A",{href:!0});var Nm=o(ds);Sc=a(Nm,"from_config()"),Nm.forEach(r),$c=a(R," functions."),R.forEach(r),Dc=c(E),Zt=n(E,"P",{});var Zi=o(Zt);Ec=a(Zi,`For more details on the parameters, see the original paper\u2019s Appendix E.: \u201CElucidating the Design Space of
Diffusion-Based Generative Models.\u201D `),er=n(Zi,"A",{href:!0,rel:!0});var Lm=o(er);xc=a(Lm,"https://arxiv.org/abs/2206.00364"),Lm.forEach(r),yc=a(Zi,`. The grid search values used to find the
optimal {s_noise, s_churn, s_min, s_max} for a specific model are described in Table 5 of the paper.`),Zi.forEach(r),wc=c(E),te=n(E,"DIV",{class:!0});var ks=o(te);h(tr.$$.fragment,ks),Mc=c(ks),Fn=n(ks,"P",{});var Fm=o(Fn);Pc=a(Fm,`Explicit Langevin-like \u201Cchurn\u201D step of adding noise to the sample according to a factor gamma_i \u2265 0 to reach a
higher noise level sigma_hat = sigma_i + gamma_i*sigma_i.`),Fm.forEach(r),Tc=c(ks),In=n(ks,"P",{});var Im=o(In);Oc=a(Im,"TODO Args:"),Im.forEach(r),ks.forEach(r),kc=c(E),Je=n(E,"DIV",{class:!0});var ea=o(Je);h(rr.$$.fragment,ea),Vc=c(ea),Kn=n(ea,"P",{});var Km=o(Kn);Cc=a(Km,`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),Km.forEach(r),ea.forEach(r),Ac=c(E),ze=n(E,"DIV",{class:!0});var ta=o(ze);h(sr.$$.fragment,ta),Nc=c(ta),qn=n(ta,"P",{});var qm=o(qn);Lc=a(qm,"Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),qm.forEach(r),ta.forEach(r),Fc=c(E),je=n(E,"DIV",{class:!0});var ra=o(je);h(nr.$$.fragment,ra),Ic=c(ra),Un=n(ra,"P",{});var Um=o(Un);Kc=a(Um,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Um.forEach(r),ra.forEach(r),qc=c(E),Qe=n(E,"DIV",{class:!0});var sa=o(Qe);h(or.$$.fragment,sa),Uc=c(sa),Hn=n(sa,"P",{});var Hm=o(Hn);Hc=a(Hm,"Correct the predicted sample based on the output model_output of the network. TODO complete description"),Hm.forEach(r),sa.forEach(r),E.forEach(r),ci=c(t),ve=n(t,"H4",{class:!0});var na=o(ve);Xe=n(na,"A",{id:!0,class:!0,href:!0});var Rm=o(Xe);Rn=n(Rm,"SPAN",{});var Wm=o(Rn);h(ir.$$.fragment,Wm),Wm.forEach(r),Rm.forEach(r),Rc=c(na),Wn=n(na,"SPAN",{});var Bm=o(Wn);Wc=a(Bm,"Linear multistep scheduler for discrete beta schedules"),Bm.forEach(r),na.forEach(r),ui=c(t),Ze=n(t,"P",{});var oa=o(Ze);Bc=a(oa,"Original implementation can be found "),ar=n(oa,"A",{href:!0,rel:!0});var Gm=o(ar);Gc=a(Gm,"here"),Gm.forEach(r),Yc=a(oa,"."),oa.forEach(r),fi=c(t),w=n(t,"DIV",{class:!0});var Q=o(w);h(dr.$$.fragment,Q),Jc=c(Q),ls=n(Q,"P",{});var Jp=o(ls);zc=a(Jp,`Linear Multistep Scheduler for discrete beta schedules. Based on the original k-diffusion implementation by
Katherine Crowson:
`),lr=n(Jp,"A",{href:!0,rel:!0});var Ym=o(lr);jc=a(Ym,"https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),Ym.forEach(r),Jp.forEach(r),Qc=c(Q),k=n(Q,"P",{});var W=o(k);cs=n(W,"A",{href:!0});var Jm=o(cs);Xc=a(Jm,"~ConfigMixin"),Jm.forEach(r),Zc=a(W," takes care of storing all config attributes that are passed in the scheduler\u2019s "),Bn=n(W,"CODE",{});var zm=o(Bn);eu=a(zm,"__init__"),zm.forEach(r),tu=a(W,`
function, such as `),Gn=n(W,"CODE",{});var jm=o(Gn);ru=a(jm,"num_train_timesteps"),jm.forEach(r),su=a(W,". They can be accessed via "),Yn=n(W,"CODE",{});var Qm=o(Yn);nu=a(Qm,"scheduler.config.num_train_timesteps"),Qm.forEach(r),ou=a(W,`.
`),us=n(W,"A",{href:!0});var Xm=o(us);iu=a(Xm,"~ConfigMixin"),Xm.forEach(r),au=a(W," also provides general loading and saving functionality via the "),fs=n(W,"A",{href:!0});var Zm=o(fs);du=a(Zm,"save_config()"),Zm.forEach(r),lu=a(W,` and
`),ps=n(W,"A",{href:!0});var eg=o(ps);cu=a(eg,"from_config()"),eg.forEach(r),uu=a(W," functions."),W.forEach(r),fu=c(Q),et=n(Q,"DIV",{class:!0});var ia=o(et);h(cr.$$.fragment,ia),pu=c(ia),Jn=n(ia,"P",{});var tg=o(Jn);hu=a(tg,"Compute a linear multistep coefficient."),tg.forEach(r),ia.forEach(r),mu=c(Q),tt=n(Q,"DIV",{class:!0});var aa=o(tt);h(ur.$$.fragment,aa),gu=c(aa),fr=n(aa,"P",{});var da=o(fr);_u=a(da,"Scales the denoising model input by "),zn=n(da,"CODE",{});var rg=o(zn);vu=a(rg,"(sigma**2 + 1) ** 0.5"),rg.forEach(r),bu=a(da," to match the K-LMS algorithm."),da.forEach(r),aa.forEach(r),Su=c(Q),rt=n(Q,"DIV",{class:!0});var la=o(rt);h(pr.$$.fragment,la),$u=c(la),jn=n(la,"P",{});var sg=o(jn);Du=a(sg,"Sets the timesteps used for the diffusion chain. Supporting function to be run before inference."),sg.forEach(r),la.forEach(r),Eu=c(Q),st=n(Q,"DIV",{class:!0});var ca=o(st);h(hr.$$.fragment,ca),xu=c(ca),Qn=n(ca,"P",{});var ng=o(Qn);yu=a(ng,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),ng.forEach(r),ca.forEach(r),Q.forEach(r),pi=c(t),be=n(t,"H4",{class:!0});var ua=o(be);nt=n(ua,"A",{id:!0,class:!0,href:!0});var og=o(nt);Xn=n(og,"SPAN",{});var ig=o(Xn);h(mr.$$.fragment,ig),ig.forEach(r),og.forEach(r),wu=c(ua),Zn=n(ua,"SPAN",{});var ag=o(Zn);Mu=a(ag,"Pseudo numerical methods for diffusion models (PNDM)"),ag.forEach(r),ua.forEach(r),hi=c(t),ot=n(t,"P",{});var fa=o(ot);Pu=a(fa,"Original implementation can be found "),gr=n(fa,"A",{href:!0,rel:!0});var dg=o(gr);Tu=a(dg,"here"),dg.forEach(r),Ou=a(fa,"."),fa.forEach(r),mi=c(t),$=n(t,"DIV",{class:!0});var N=o($);h(_r.$$.fragment,N),ku=c(N),eo=n(N,"P",{});var lg=o(eo);Vu=a(lg,`Pseudo numerical methods for diffusion models (PNDM) proposes using more advanced ODE integration techniques,
namely Runge-Kutta method and a linear multi-step method.`),lg.forEach(r),Cu=c(N),V=n(N,"P",{});var B=o(V);hs=n(B,"A",{href:!0});var cg=o(hs);Au=a(cg,"~ConfigMixin"),cg.forEach(r),Nu=a(B," takes care of storing all config attributes that are passed in the scheduler\u2019s "),to=n(B,"CODE",{});var ug=o(to);Lu=a(ug,"__init__"),ug.forEach(r),Fu=a(B,`
function, such as `),ro=n(B,"CODE",{});var fg=o(ro);Iu=a(fg,"num_train_timesteps"),fg.forEach(r),Ku=a(B,". They can be accessed via "),so=n(B,"CODE",{});var pg=o(so);qu=a(pg,"scheduler.config.num_train_timesteps"),pg.forEach(r),Uu=a(B,`.
`),ms=n(B,"A",{href:!0});var hg=o(ms);Hu=a(hg,"~ConfigMixin"),hg.forEach(r),Ru=a(B," also provides general loading and saving functionality via the "),gs=n(B,"A",{href:!0});var mg=o(gs);Wu=a(mg,"save_config()"),mg.forEach(r),Bu=a(B,` and
`),_s=n(B,"A",{href:!0});var gg=o(_s);Gu=a(gg,"from_config()"),gg.forEach(r),Yu=a(B," functions."),B.forEach(r),Ju=c(N),vs=n(N,"P",{});var zp=o(vs);zu=a(zp,"For more details, see the original paper: "),vr=n(zp,"A",{href:!0,rel:!0});var _g=o(vr);ju=a(_g,"https://arxiv.org/abs/2202.09778"),_g.forEach(r),zp.forEach(r),Qu=c(N),it=n(N,"DIV",{class:!0});var pa=o(it);h(br.$$.fragment,pa),Xu=c(pa),no=n(pa,"P",{});var vg=o(no);Zu=a(vg,`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),vg.forEach(r),pa.forEach(r),ef=c(N),at=n(N,"DIV",{class:!0});var ha=o(at);h(Sr.$$.fragment,ha),tf=c(ha),oo=n(ha,"P",{});var bg=o(oo);rf=a(bg,"Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),bg.forEach(r),ha.forEach(r),sf=c(N),re=n(N,"DIV",{class:!0});var Vs=o(re);h($r.$$.fragment,Vs),nf=c(Vs),io=n(Vs,"P",{});var Sg=o(io);of=a(Sg,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Sg.forEach(r),af=c(Vs),Z=n(Vs,"P",{});var $t=o(Z);df=a($t,"This function calls "),ao=n($t,"CODE",{});var $g=o(ao);lf=a($g,"step_prk()"),$g.forEach(r),cf=a($t," or "),lo=n($t,"CODE",{});var Dg=o(lo);uf=a(Dg,"step_plms()"),Dg.forEach(r),ff=a($t," depending on the internal variable "),co=n($t,"CODE",{});var Eg=o(co);pf=a(Eg,"counter"),Eg.forEach(r),hf=a($t,"."),$t.forEach(r),Vs.forEach(r),mf=c(N),dt=n(N,"DIV",{class:!0});var ma=o(dt);h(Dr.$$.fragment,ma),gf=c(ma),uo=n(ma,"P",{});var xg=o(uo);_f=a(xg,`Step function propagating the sample with the linear multi-step method. This has one forward pass with multiple
times to approximate the solution.`),xg.forEach(r),ma.forEach(r),vf=c(N),lt=n(N,"DIV",{class:!0});var ga=o(lt);h(Er.$$.fragment,ga),bf=c(ga),fo=n(ga,"P",{});var yg=o(fo);Sf=a(yg,`Step function propagating the sample with the Runge-Kutta method. RK takes 4 forward passes to approximate the
solution to the differential equation.`),yg.forEach(r),ga.forEach(r),N.forEach(r),gi=c(t),Se=n(t,"H4",{class:!0});var _a=o(Se);ct=n(_a,"A",{id:!0,class:!0,href:!0});var wg=o(ct);po=n(wg,"SPAN",{});var Mg=o(po);h(xr.$$.fragment,Mg),Mg.forEach(r),wg.forEach(r),$f=c(_a),ho=n(_a,"SPAN",{});var Pg=o(ho);Df=a(Pg,"variance exploding stochastic differential equation (SDE) scheduler"),Pg.forEach(r),_a.forEach(r),_i=c(t),ut=n(t,"P",{});var va=o(ut);Ef=a(va,"Original paper can be found "),yr=n(va,"A",{href:!0,rel:!0});var Tg=o(yr);xf=a(Tg,"here"),Tg.forEach(r),yf=a(va,"."),va.forEach(r),vi=c(t),D=n(t,"DIV",{class:!0});var L=o(D);h(wr.$$.fragment,L),wf=c(L),mo=n(L,"P",{});var Og=o(mo);Mf=a(Og,"The variance exploding stochastic differential equation (SDE) scheduler."),Og.forEach(r),Pf=c(L),bs=n(L,"P",{});var jp=o(bs);Tf=a(jp,"For more information, see the original paper: "),Mr=n(jp,"A",{href:!0,rel:!0});var kg=o(Mr);Of=a(kg,"https://arxiv.org/abs/2011.13456"),kg.forEach(r),jp.forEach(r),kf=c(L),C=n(L,"P",{});var G=o(C);Ss=n(G,"A",{href:!0});var Vg=o(Ss);Vf=a(Vg,"~ConfigMixin"),Vg.forEach(r),Cf=a(G," takes care of storing all config attributes that are passed in the scheduler\u2019s "),go=n(G,"CODE",{});var Cg=o(go);Af=a(Cg,"__init__"),Cg.forEach(r),Nf=a(G,`
function, such as `),_o=n(G,"CODE",{});var Ag=o(_o);Lf=a(Ag,"num_train_timesteps"),Ag.forEach(r),Ff=a(G,". They can be accessed via "),vo=n(G,"CODE",{});var Ng=o(vo);If=a(Ng,"scheduler.config.num_train_timesteps"),Ng.forEach(r),Kf=a(G,`.
`),$s=n(G,"A",{href:!0});var Lg=o($s);qf=a(Lg,"~ConfigMixin"),Lg.forEach(r),Uf=a(G," also provides general loading and saving functionality via the "),Ds=n(G,"A",{href:!0});var Fg=o(Ds);Hf=a(Fg,"save_config()"),Fg.forEach(r),Rf=a(G,` and
`),Es=n(G,"A",{href:!0});var Ig=o(Es);Wf=a(Ig,"from_config()"),Ig.forEach(r),Bf=a(G," functions."),G.forEach(r),Gf=c(L),ft=n(L,"DIV",{class:!0});var ba=o(ft);h(Pr.$$.fragment,ba),Yf=c(ba),bo=n(ba,"P",{});var Kg=o(bo);Jf=a(Kg,`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),Kg.forEach(r),ba.forEach(r),zf=c(L),se=n(L,"DIV",{class:!0});var Cs=o(se);h(Tr.$$.fragment,Cs),jf=c(Cs),So=n(Cs,"P",{});var qg=o(So);Qf=a(qg,"Sets the noise scales used for the diffusion chain. Supporting function to be run before inference."),qg.forEach(r),Xf=c(Cs),$e=n(Cs,"P",{});var As=o($e);Zf=a(As,"The sigmas control the weight of the "),$o=n(As,"CODE",{});var Ug=o($o);ep=a(Ug,"drift"),Ug.forEach(r),tp=a(As," and "),Do=n(As,"CODE",{});var Hg=o(Do);rp=a(Hg,"diffusion"),Hg.forEach(r),sp=a(As," components of sample update."),As.forEach(r),Cs.forEach(r),np=c(L),pt=n(L,"DIV",{class:!0});var Sa=o(pt);h(Or.$$.fragment,Sa),op=c(Sa),Eo=n(Sa,"P",{});var Rg=o(Eo);ip=a(Rg,"Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),Rg.forEach(r),Sa.forEach(r),ap=c(L),ht=n(L,"DIV",{class:!0});var $a=o(ht);h(kr.$$.fragment,$a),dp=c($a),xo=n($a,"P",{});var Wg=o(xo);lp=a(Wg,`Correct the predicted sample based on the output model_output of the network. This is often run repeatedly
after making the prediction for the previous timestep.`),Wg.forEach(r),$a.forEach(r),cp=c(L),mt=n(L,"DIV",{class:!0});var Da=o(mt);h(Vr.$$.fragment,Da),up=c(Da),yo=n(Da,"P",{});var Bg=o(yo);fp=a(Bg,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Bg.forEach(r),Da.forEach(r),L.forEach(r),bi=c(t),De=n(t,"H4",{class:!0});var Ea=o(De);gt=n(Ea,"A",{id:!0,class:!0,href:!0});var Gg=o(gt);wo=n(Gg,"SPAN",{});var Yg=o(wo);h(Cr.$$.fragment,Yg),Yg.forEach(r),Gg.forEach(r),pp=c(Ea),Mo=n(Ea,"SPAN",{});var Jg=o(Mo);hp=a(Jg,"improved pseudo numerical methods for diffusion models (iPNDM)"),Jg.forEach(r),Ea.forEach(r),Si=c(t),_t=n(t,"P",{});var xa=o(_t);mp=a(xa,"Original implementation can be found "),Ar=n(xa,"A",{href:!0,rel:!0});var zg=o(Ar);gp=a(zg,"here"),zg.forEach(r),_p=a(xa,"."),xa.forEach(r),$i=c(t),Ee=n(t,"H4",{class:!0});var ya=o(Ee);vt=n(ya,"A",{id:!0,class:!0,href:!0});var jg=o(vt);Po=n(jg,"SPAN",{});var Qg=o(Po);h(Nr.$$.fragment,Qg),Qg.forEach(r),jg.forEach(r),vp=c(ya),To=n(ya,"SPAN",{});var Xg=o(To);bp=a(Xg,"variance preserving stochastic differential equation (SDE) scheduler"),Xg.forEach(r),ya.forEach(r),Di=c(t),bt=n(t,"P",{});var wa=o(bt);Sp=a(wa,"Original paper can be found "),Lr=n(wa,"A",{href:!0,rel:!0});var Zg=o(Lr);$p=a(Zg,"here"),Zg.forEach(r),Dp=a(wa,"."),wa.forEach(r),Ei=c(t),h(St.$$.fragment,t),xi=c(t),q=n(t,"DIV",{class:!0});var ne=o(q);h(Fr.$$.fragment,ne),Ep=c(ne),Oo=n(ne,"P",{});var e_=o(Oo);xp=a(e_,"The variance preserving stochastic differential equation (SDE) scheduler."),e_.forEach(r),yp=c(ne),A=n(ne,"P",{});var Y=o(A);xs=n(Y,"A",{href:!0});var t_=o(xs);wp=a(t_,"~ConfigMixin"),t_.forEach(r),Mp=a(Y," takes care of storing all config attributes that are passed in the scheduler\u2019s "),ko=n(Y,"CODE",{});var r_=o(ko);Pp=a(r_,"__init__"),r_.forEach(r),Tp=a(Y,`
function, such as `),Vo=n(Y,"CODE",{});var s_=o(Vo);Op=a(s_,"num_train_timesteps"),s_.forEach(r),kp=a(Y,". They can be accessed via "),Co=n(Y,"CODE",{});var n_=o(Co);Vp=a(n_,"scheduler.config.num_train_timesteps"),n_.forEach(r),Cp=a(Y,`.
`),ys=n(Y,"A",{href:!0});var o_=o(ys);Ap=a(o_,"~ConfigMixin"),o_.forEach(r),Np=a(Y," also provides general loading and saving functionality via the "),ws=n(Y,"A",{href:!0});var i_=o(ws);Lp=a(i_,"save_config()"),i_.forEach(r),Fp=a(Y,` and
`),Ms=n(Y,"A",{href:!0});var a_=o(Ms);Ip=a(a_,"from_config()"),a_.forEach(r),Kp=a(Y," functions."),Y.forEach(r),qp=c(ne),Ps=n(ne,"P",{});var Qp=o(Ps);Up=a(Qp,"For more information, see the original paper: "),Ir=n(Qp,"A",{href:!0,rel:!0});var d_=o(Ir);Hp=a(d_,"https://arxiv.org/abs/2011.13456"),d_.forEach(r),Qp.forEach(r),Rp=c(ne),Ao=n(ne,"P",{});var l_=o(Ao);Wp=a(l_,"UNDER CONSTRUCTION"),l_.forEach(r),ne.forEach(r),this.h()},h(){d(F,"name","hf:doc:metadata"),d(F,"content",JSON.stringify(v_)),d(X,"id","schedulers"),d(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X,"href","#schedulers"),d(K,"class","relative group"),d(ye,"id","what-is-a-scheduler"),d(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ye,"href","#what-is-a-scheduler"),d(oe,"class","relative group"),d(Pe,"id","discrete-versus-continuous-schedulers"),d(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pe,"href","#discrete-versus-continuous-schedulers"),d(ae,"class","relative group"),d(Hr,"href","/docs/diffusers/main/en/api/schedulers#diffusers.DDPMScheduler"),d(Rr,"href","/docs/diffusers/main/en/api/schedulers#diffusers.PNDMScheduler"),d(Wr,"href","/docs/diffusers/main/en/api/schedulers#diffusers.ScoreSdeVeScheduler"),d(Te,"id","designing-reusable-schedulers"),d(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Te,"href","#designing-reusable-schedulers"),d(de,"class","relative group"),d(ke,"id","api"),d(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ke,"href","#api"),d(le,"class","relative group"),d(Yr,"href","/docs/diffusers/main/en/api/schedulers#diffusers.SchedulerMixin"),d(Ce,"id","diffusers.SchedulerMixin"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#diffusers.SchedulerMixin"),d(ce,"class","relative group"),d(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ae,"id","diffusers.schedulers.scheduling_utils.SchedulerOutput"),d(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ae,"href","#diffusers.schedulers.scheduling_utils.SchedulerOutput"),d(fe,"class","relative group"),d(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ne,"id","implemented-schedulers"),d(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ne,"href","#implemented-schedulers"),d(he,"class","relative group"),d(Le,"id","diffusers.DDIMScheduler"),d(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Le,"href","#diffusers.DDIMScheduler"),d(me,"class","relative group"),d(zr,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(jr,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(Qr,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(Xr,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(Ft,"href","https://arxiv.org/abs/2010.02502"),d(Ft,"rel","nofollow"),d(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qe,"id","diffusers.DDPMScheduler"),d(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qe,"href","#diffusers.DDPMScheduler"),d(ge,"class","relative group"),d(Ht,"href","https://arxiv.org/abs/2010.02502"),d(Ht,"rel","nofollow"),d(es,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(ts,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(rs,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(ss,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(Wt,"href","https://arxiv.org/abs/2006.11239"),d(Wt,"rel","nofollow"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Be,"id","diffusers.KarrasVeScheduler"),d(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Be,"href","#diffusers.KarrasVeScheduler"),d(_e,"class","relative group"),d(zt,"href","https://arxiv.org/abs/2006.11239"),d(zt,"rel","nofollow"),d(Qt,"href","https://arxiv.org/abs/2206.00364"),d(Qt,"rel","nofollow"),d(Xt,"href","https://arxiv.org/abs/2011.13456"),d(Xt,"rel","nofollow"),d(os,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(is,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(as,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(ds,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(er,"href","https://arxiv.org/abs/2206.00364"),d(er,"rel","nofollow"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xe,"id","diffusers.LMSDiscreteScheduler"),d(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xe,"href","#diffusers.LMSDiscreteScheduler"),d(ve,"class","relative group"),d(ar,"href","https://arxiv.org/abs/2206.00364"),d(ar,"rel","nofollow"),d(lr,"href","https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),d(lr,"rel","nofollow"),d(cs,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(us,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(fs,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(ps,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nt,"id","diffusers.PNDMScheduler"),d(nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nt,"href","#diffusers.PNDMScheduler"),d(be,"class","relative group"),d(gr,"href","https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),d(gr,"rel","nofollow"),d(hs,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(ms,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(gs,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(_s,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(vr,"href","https://arxiv.org/abs/2202.09778"),d(vr,"rel","nofollow"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ct,"id","diffusers.ScoreSdeVeScheduler"),d(ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ct,"href","#diffusers.ScoreSdeVeScheduler"),d(Se,"class","relative group"),d(yr,"href","https://arxiv.org/abs/2011.13456"),d(yr,"rel","nofollow"),d(Mr,"href","https://arxiv.org/abs/2011.13456"),d(Mr,"rel","nofollow"),d(Ss,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d($s,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(Ds,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(Es,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gt,"id","improved-pseudo-numerical-methods-for-diffusion-models-ipndm"),d(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gt,"href","#improved-pseudo-numerical-methods-for-diffusion-models-ipndm"),d(De,"class","relative group"),d(Ar,"href","https://github.com/crowsonkb/v-diffusion-pytorch/blob/987f8985e38208345c1959b0ea767a625831cc9b/diffusion/sampling.py#L296"),d(Ar,"rel","nofollow"),d(vt,"id","diffusers.schedulers.ScoreSdeVpScheduler"),d(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vt,"href","#diffusers.schedulers.ScoreSdeVpScheduler"),d(Ee,"class","relative group"),d(Lr,"href","https://arxiv.org/abs/2011.13456"),d(Lr,"rel","nofollow"),d(xs,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(ys,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(ws,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(Ms,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(Ir,"href","https://arxiv.org/abs/2011.13456"),d(Ir,"rel","nofollow"),d(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,u){e(document.head,F),f(t,xe,u),f(t,K,u),e(K,X),e(X,Ns),m(Dt,Ns,null),e(K,Ma),e(K,Ls),e(Ls,Pa),f(t,Fo,u),f(t,qr,u),e(qr,Ta),f(t,Io,u),f(t,oe,u),e(oe,ye),e(ye,Fs),m(Et,Fs,null),e(oe,Oa),e(oe,Is),e(Is,ka),f(t,Ko,u),f(t,we,u),e(we,Va),e(we,Ks),e(Ks,Ca),e(we,Aa),f(t,qo,u),f(t,Me,u),e(Me,Ur),e(Ur,Na),e(Ur,xt),e(xt,qs),e(qs,La),e(xt,Fa),e(xt,Us),e(Us,Ia),e(Me,Ka),e(Me,ie),e(ie,qa),e(ie,Hs),e(Hs,Ua),e(ie,Ha),e(ie,Rs),e(Rs,Ra),e(ie,Wa),f(t,Uo,u),f(t,ae,u),e(ae,Pe),e(Pe,Ws),m(yt,Ws,null),e(ae,Ba),e(ae,Bs),e(Bs,Ga),f(t,Ho,u),f(t,M,u),e(M,Ya),e(M,Gs),e(Gs,Ja),e(M,za),e(M,Hr),e(Hr,ja),e(M,Qa),e(M,Rr),e(Rr,Xa),e(M,Za),e(M,Ys),e(Ys,ed),e(M,td),e(M,Wr),e(Wr,rd),e(M,sd),e(M,Js),e(Js,nd),e(M,od),f(t,Ro,u),f(t,de,u),e(de,Te),e(Te,zs),m(wt,zs,null),e(de,id),e(de,js),e(js,ad),f(t,Wo,u),f(t,Br,u),e(Br,dd),f(t,Bo,u),f(t,Oe,u),e(Oe,Qs),e(Qs,ld),e(Oe,cd),e(Oe,Xs),e(Xs,ud),f(t,Go,u),f(t,le,u),e(le,ke),e(ke,Zs),m(Mt,Zs,null),e(le,fd),e(le,en),e(en,pd),f(t,Yo,u),f(t,Gr,u),e(Gr,hd),f(t,Jo,u),f(t,ee,u),e(ee,Pt),e(Pt,md),e(Pt,tn),e(tn,gd),e(Pt,_d),e(ee,vd),e(ee,Tt),e(Tt,bd),e(Tt,rn),e(rn,Sd),e(Tt,$d),e(ee,Dd),e(ee,sn),e(sn,Ed),f(t,zo,u),f(t,Ve,u),e(Ve,xd),e(Ve,Yr),e(Yr,yd),e(Ve,wd),f(t,jo,u),f(t,ce,u),e(ce,Ce),e(Ce,nn),m(Ot,nn,null),e(ce,Md),e(ce,on),e(on,Pd),f(t,Qo,u),f(t,ue,u),m(kt,ue,null),e(ue,Td),e(ue,an),e(an,Od),f(t,Xo,u),f(t,fe,u),e(fe,Ae),e(Ae,dn),m(Vt,dn,null),e(fe,kd),e(fe,ln),e(ln,Vd),f(t,Zo,u),f(t,pe,u),m(Ct,pe,null),e(pe,Cd),e(pe,cn),e(cn,Ad),f(t,ei,u),f(t,he,u),e(he,Ne),e(Ne,un),m(At,un,null),e(he,Nd),e(he,fn),e(fn,Ld),f(t,ti,u),f(t,me,u),e(me,Le),e(Le,pn),m(Nt,pn,null),e(me,Fd),e(me,hn),e(hn,Id),f(t,ri,u),f(t,Jr,u),e(Jr,Kd),f(t,si,u),f(t,x,u),m(Lt,x,null),e(x,qd),e(x,mn),e(mn,Ud),e(x,Hd),e(x,P),e(P,zr),e(zr,Rd),e(P,Wd),e(P,gn),e(gn,Bd),e(P,Gd),e(P,_n),e(_n,Yd),e(P,Jd),e(P,vn),e(vn,zd),e(P,jd),e(P,jr),e(jr,Qd),e(P,Xd),e(P,Qr),e(Qr,Zd),e(P,el),e(P,Xr),e(Xr,tl),e(P,rl),e(x,sl),e(x,Zr),e(Zr,nl),e(Zr,Ft),e(Ft,ol),e(x,il),e(x,Fe),m(It,Fe,null),e(Fe,al),e(Fe,bn),e(bn,dl),e(x,ll),e(x,Ie),m(Kt,Ie,null),e(Ie,cl),e(Ie,Sn),e(Sn,ul),e(x,fl),e(x,Ke),m(qt,Ke,null),e(Ke,pl),e(Ke,$n),e($n,hl),f(t,ni,u),f(t,ge,u),e(ge,qe),e(qe,Dn),m(Ut,Dn,null),e(ge,ml),e(ge,En),e(En,gl),f(t,oi,u),f(t,Ue,u),e(Ue,_l),e(Ue,Ht),e(Ht,vl),e(Ue,bl),f(t,ii,u),f(t,y,u),m(Rt,y,null),e(y,Sl),e(y,xn),e(xn,$l),e(y,Dl),e(y,T),e(T,es),e(es,El),e(T,xl),e(T,yn),e(yn,yl),e(T,wl),e(T,wn),e(wn,Ml),e(T,Pl),e(T,Mn),e(Mn,Tl),e(T,Ol),e(T,ts),e(ts,kl),e(T,Vl),e(T,rs),e(rs,Cl),e(T,Al),e(T,ss),e(ss,Nl),e(T,Ll),e(y,Fl),e(y,ns),e(ns,Il),e(ns,Wt),e(Wt,Kl),e(y,ql),e(y,He),m(Bt,He,null),e(He,Ul),e(He,Pn),e(Pn,Hl),e(y,Rl),e(y,Re),m(Gt,Re,null),e(Re,Wl),e(Re,Tn),e(Tn,Bl),e(y,Gl),e(y,We),m(Yt,We,null),e(We,Yl),e(We,On),e(On,Jl),f(t,ai,u),f(t,_e,u),e(_e,Be),e(Be,kn),m(Jt,kn,null),e(_e,zl),e(_e,Vn),e(Vn,jl),f(t,di,u),f(t,Ge,u),e(Ge,Ql),e(Ge,zt),e(zt,Xl),e(Ge,Zl),f(t,li,u),f(t,S,u),m(jt,S,null),e(S,ec),e(S,Cn),e(Cn,tc),e(S,rc),e(S,Ye),e(Ye,sc),e(Ye,Qt),e(Qt,nc),e(Ye,oc),e(Ye,Xt),e(Xt,ic),e(S,ac),e(S,O),e(O,os),e(os,dc),e(O,lc),e(O,An),e(An,cc),e(O,uc),e(O,Nn),e(Nn,fc),e(O,pc),e(O,Ln),e(Ln,hc),e(O,mc),e(O,is),e(is,gc),e(O,_c),e(O,as),e(as,vc),e(O,bc),e(O,ds),e(ds,Sc),e(O,$c),e(S,Dc),e(S,Zt),e(Zt,Ec),e(Zt,er),e(er,xc),e(Zt,yc),e(S,wc),e(S,te),m(tr,te,null),e(te,Mc),e(te,Fn),e(Fn,Pc),e(te,Tc),e(te,In),e(In,Oc),e(S,kc),e(S,Je),m(rr,Je,null),e(Je,Vc),e(Je,Kn),e(Kn,Cc),e(S,Ac),e(S,ze),m(sr,ze,null),e(ze,Nc),e(ze,qn),e(qn,Lc),e(S,Fc),e(S,je),m(nr,je,null),e(je,Ic),e(je,Un),e(Un,Kc),e(S,qc),e(S,Qe),m(or,Qe,null),e(Qe,Uc),e(Qe,Hn),e(Hn,Hc),f(t,ci,u),f(t,ve,u),e(ve,Xe),e(Xe,Rn),m(ir,Rn,null),e(ve,Rc),e(ve,Wn),e(Wn,Wc),f(t,ui,u),f(t,Ze,u),e(Ze,Bc),e(Ze,ar),e(ar,Gc),e(Ze,Yc),f(t,fi,u),f(t,w,u),m(dr,w,null),e(w,Jc),e(w,ls),e(ls,zc),e(ls,lr),e(lr,jc),e(w,Qc),e(w,k),e(k,cs),e(cs,Xc),e(k,Zc),e(k,Bn),e(Bn,eu),e(k,tu),e(k,Gn),e(Gn,ru),e(k,su),e(k,Yn),e(Yn,nu),e(k,ou),e(k,us),e(us,iu),e(k,au),e(k,fs),e(fs,du),e(k,lu),e(k,ps),e(ps,cu),e(k,uu),e(w,fu),e(w,et),m(cr,et,null),e(et,pu),e(et,Jn),e(Jn,hu),e(w,mu),e(w,tt),m(ur,tt,null),e(tt,gu),e(tt,fr),e(fr,_u),e(fr,zn),e(zn,vu),e(fr,bu),e(w,Su),e(w,rt),m(pr,rt,null),e(rt,$u),e(rt,jn),e(jn,Du),e(w,Eu),e(w,st),m(hr,st,null),e(st,xu),e(st,Qn),e(Qn,yu),f(t,pi,u),f(t,be,u),e(be,nt),e(nt,Xn),m(mr,Xn,null),e(be,wu),e(be,Zn),e(Zn,Mu),f(t,hi,u),f(t,ot,u),e(ot,Pu),e(ot,gr),e(gr,Tu),e(ot,Ou),f(t,mi,u),f(t,$,u),m(_r,$,null),e($,ku),e($,eo),e(eo,Vu),e($,Cu),e($,V),e(V,hs),e(hs,Au),e(V,Nu),e(V,to),e(to,Lu),e(V,Fu),e(V,ro),e(ro,Iu),e(V,Ku),e(V,so),e(so,qu),e(V,Uu),e(V,ms),e(ms,Hu),e(V,Ru),e(V,gs),e(gs,Wu),e(V,Bu),e(V,_s),e(_s,Gu),e(V,Yu),e($,Ju),e($,vs),e(vs,zu),e(vs,vr),e(vr,ju),e($,Qu),e($,it),m(br,it,null),e(it,Xu),e(it,no),e(no,Zu),e($,ef),e($,at),m(Sr,at,null),e(at,tf),e(at,oo),e(oo,rf),e($,sf),e($,re),m($r,re,null),e(re,nf),e(re,io),e(io,of),e(re,af),e(re,Z),e(Z,df),e(Z,ao),e(ao,lf),e(Z,cf),e(Z,lo),e(lo,uf),e(Z,ff),e(Z,co),e(co,pf),e(Z,hf),e($,mf),e($,dt),m(Dr,dt,null),e(dt,gf),e(dt,uo),e(uo,_f),e($,vf),e($,lt),m(Er,lt,null),e(lt,bf),e(lt,fo),e(fo,Sf),f(t,gi,u),f(t,Se,u),e(Se,ct),e(ct,po),m(xr,po,null),e(Se,$f),e(Se,ho),e(ho,Df),f(t,_i,u),f(t,ut,u),e(ut,Ef),e(ut,yr),e(yr,xf),e(ut,yf),f(t,vi,u),f(t,D,u),m(wr,D,null),e(D,wf),e(D,mo),e(mo,Mf),e(D,Pf),e(D,bs),e(bs,Tf),e(bs,Mr),e(Mr,Of),e(D,kf),e(D,C),e(C,Ss),e(Ss,Vf),e(C,Cf),e(C,go),e(go,Af),e(C,Nf),e(C,_o),e(_o,Lf),e(C,Ff),e(C,vo),e(vo,If),e(C,Kf),e(C,$s),e($s,qf),e(C,Uf),e(C,Ds),e(Ds,Hf),e(C,Rf),e(C,Es),e(Es,Wf),e(C,Bf),e(D,Gf),e(D,ft),m(Pr,ft,null),e(ft,Yf),e(ft,bo),e(bo,Jf),e(D,zf),e(D,se),m(Tr,se,null),e(se,jf),e(se,So),e(So,Qf),e(se,Xf),e(se,$e),e($e,Zf),e($e,$o),e($o,ep),e($e,tp),e($e,Do),e(Do,rp),e($e,sp),e(D,np),e(D,pt),m(Or,pt,null),e(pt,op),e(pt,Eo),e(Eo,ip),e(D,ap),e(D,ht),m(kr,ht,null),e(ht,dp),e(ht,xo),e(xo,lp),e(D,cp),e(D,mt),m(Vr,mt,null),e(mt,up),e(mt,yo),e(yo,fp),f(t,bi,u),f(t,De,u),e(De,gt),e(gt,wo),m(Cr,wo,null),e(De,pp),e(De,Mo),e(Mo,hp),f(t,Si,u),f(t,_t,u),e(_t,mp),e(_t,Ar),e(Ar,gp),e(_t,_p),f(t,$i,u),f(t,Ee,u),e(Ee,vt),e(vt,Po),m(Nr,Po,null),e(Ee,vp),e(Ee,To),e(To,bp),f(t,Di,u),f(t,bt,u),e(bt,Sp),e(bt,Lr),e(Lr,$p),e(bt,Dp),f(t,Ei,u),m(St,t,u),f(t,xi,u),f(t,q,u),m(Fr,q,null),e(q,Ep),e(q,Oo),e(Oo,xp),e(q,yp),e(q,A),e(A,xs),e(xs,wp),e(A,Mp),e(A,ko),e(ko,Pp),e(A,Tp),e(A,Vo),e(Vo,Op),e(A,kp),e(A,Co),e(Co,Vp),e(A,Cp),e(A,ys),e(ys,Ap),e(A,Np),e(A,ws),e(ws,Lp),e(A,Fp),e(A,Ms),e(Ms,Ip),e(A,Kp),e(q,qp),e(q,Ps),e(Ps,Up),e(Ps,Ir),e(Ir,Hp),e(q,Rp),e(q,Ao),e(Ao,Wp),yi=!0},p(t,[u]){const Kr={};u&2&&(Kr.$$scope={dirty:u,ctx:t}),St.$set(Kr)},i(t){yi||(g(Dt.$$.fragment,t),g(Et.$$.fragment,t),g(yt.$$.fragment,t),g(wt.$$.fragment,t),g(Mt.$$.fragment,t),g(Ot.$$.fragment,t),g(kt.$$.fragment,t),g(Vt.$$.fragment,t),g(Ct.$$.fragment,t),g(At.$$.fragment,t),g(Nt.$$.fragment,t),g(Lt.$$.fragment,t),g(It.$$.fragment,t),g(Kt.$$.fragment,t),g(qt.$$.fragment,t),g(Ut.$$.fragment,t),g(Rt.$$.fragment,t),g(Bt.$$.fragment,t),g(Gt.$$.fragment,t),g(Yt.$$.fragment,t),g(Jt.$$.fragment,t),g(jt.$$.fragment,t),g(tr.$$.fragment,t),g(rr.$$.fragment,t),g(sr.$$.fragment,t),g(nr.$$.fragment,t),g(or.$$.fragment,t),g(ir.$$.fragment,t),g(dr.$$.fragment,t),g(cr.$$.fragment,t),g(ur.$$.fragment,t),g(pr.$$.fragment,t),g(hr.$$.fragment,t),g(mr.$$.fragment,t),g(_r.$$.fragment,t),g(br.$$.fragment,t),g(Sr.$$.fragment,t),g($r.$$.fragment,t),g(Dr.$$.fragment,t),g(Er.$$.fragment,t),g(xr.$$.fragment,t),g(wr.$$.fragment,t),g(Pr.$$.fragment,t),g(Tr.$$.fragment,t),g(Or.$$.fragment,t),g(kr.$$.fragment,t),g(Vr.$$.fragment,t),g(Cr.$$.fragment,t),g(Nr.$$.fragment,t),g(St.$$.fragment,t),g(Fr.$$.fragment,t),yi=!0)},o(t){_(Dt.$$.fragment,t),_(Et.$$.fragment,t),_(yt.$$.fragment,t),_(wt.$$.fragment,t),_(Mt.$$.fragment,t),_(Ot.$$.fragment,t),_(kt.$$.fragment,t),_(Vt.$$.fragment,t),_(Ct.$$.fragment,t),_(At.$$.fragment,t),_(Nt.$$.fragment,t),_(Lt.$$.fragment,t),_(It.$$.fragment,t),_(Kt.$$.fragment,t),_(qt.$$.fragment,t),_(Ut.$$.fragment,t),_(Rt.$$.fragment,t),_(Bt.$$.fragment,t),_(Gt.$$.fragment,t),_(Yt.$$.fragment,t),_(Jt.$$.fragment,t),_(jt.$$.fragment,t),_(tr.$$.fragment,t),_(rr.$$.fragment,t),_(sr.$$.fragment,t),_(nr.$$.fragment,t),_(or.$$.fragment,t),_(ir.$$.fragment,t),_(dr.$$.fragment,t),_(cr.$$.fragment,t),_(ur.$$.fragment,t),_(pr.$$.fragment,t),_(hr.$$.fragment,t),_(mr.$$.fragment,t),_(_r.$$.fragment,t),_(br.$$.fragment,t),_(Sr.$$.fragment,t),_($r.$$.fragment,t),_(Dr.$$.fragment,t),_(Er.$$.fragment,t),_(xr.$$.fragment,t),_(wr.$$.fragment,t),_(Pr.$$.fragment,t),_(Tr.$$.fragment,t),_(Or.$$.fragment,t),_(kr.$$.fragment,t),_(Vr.$$.fragment,t),_(Cr.$$.fragment,t),_(Nr.$$.fragment,t),_(St.$$.fragment,t),_(Fr.$$.fragment,t),yi=!1},d(t){r(F),t&&r(xe),t&&r(K),v(Dt),t&&r(Fo),t&&r(qr),t&&r(Io),t&&r(oe),v(Et),t&&r(Ko),t&&r(we),t&&r(qo),t&&r(Me),t&&r(Uo),t&&r(ae),v(yt),t&&r(Ho),t&&r(M),t&&r(Ro),t&&r(de),v(wt),t&&r(Wo),t&&r(Br),t&&r(Bo),t&&r(Oe),t&&r(Go),t&&r(le),v(Mt),t&&r(Yo),t&&r(Gr),t&&r(Jo),t&&r(ee),t&&r(zo),t&&r(Ve),t&&r(jo),t&&r(ce),v(Ot),t&&r(Qo),t&&r(ue),v(kt),t&&r(Xo),t&&r(fe),v(Vt),t&&r(Zo),t&&r(pe),v(Ct),t&&r(ei),t&&r(he),v(At),t&&r(ti),t&&r(me),v(Nt),t&&r(ri),t&&r(Jr),t&&r(si),t&&r(x),v(Lt),v(It),v(Kt),v(qt),t&&r(ni),t&&r(ge),v(Ut),t&&r(oi),t&&r(Ue),t&&r(ii),t&&r(y),v(Rt),v(Bt),v(Gt),v(Yt),t&&r(ai),t&&r(_e),v(Jt),t&&r(di),t&&r(Ge),t&&r(li),t&&r(S),v(jt),v(tr),v(rr),v(sr),v(nr),v(or),t&&r(ci),t&&r(ve),v(ir),t&&r(ui),t&&r(Ze),t&&r(fi),t&&r(w),v(dr),v(cr),v(ur),v(pr),v(hr),t&&r(pi),t&&r(be),v(mr),t&&r(hi),t&&r(ot),t&&r(mi),t&&r($),v(_r),v(br),v(Sr),v($r),v(Dr),v(Er),t&&r(gi),t&&r(Se),v(xr),t&&r(_i),t&&r(ut),t&&r(vi),t&&r(D),v(wr),v(Pr),v(Tr),v(Or),v(kr),v(Vr),t&&r(bi),t&&r(De),v(Cr),t&&r(Si),t&&r(_t),t&&r($i),t&&r(Ee),v(Nr),t&&r(Di),t&&r(bt),t&&r(Ei),v(St,t),t&&r(xi),t&&r(q),v(Fr)}}}const v_={local:"schedulers",sections:[{local:"what-is-a-scheduler",sections:[{local:"discrete-versus-continuous-schedulers",title:"Discrete versus continuous schedulers"}],title:"What is a scheduler?"},{local:"designing-reusable-schedulers",title:"Designing Re-usable schedulers"},{local:"api",sections:[{local:"diffusers.SchedulerMixin",title:"SchedulerMixin"},{local:"diffusers.schedulers.scheduling_utils.SchedulerOutput",title:"SchedulerOutput"},{local:"implemented-schedulers",sections:[{local:"diffusers.DDIMScheduler",title:"Denoising diffusion implicit models (DDIM)"},{local:"diffusers.DDPMScheduler",title:"Denoising diffusion probabilistic models (DDPM)"},{local:"diffusers.KarrasVeScheduler",title:"Variance exploding, stochastic sampling from Karras et. al"},{local:"diffusers.LMSDiscreteScheduler",title:"Linear multistep scheduler for discrete beta schedules"},{local:"diffusers.PNDMScheduler",title:"Pseudo numerical methods for diffusion models (PNDM)"},{local:"diffusers.ScoreSdeVeScheduler",title:"variance exploding stochastic differential equation (SDE) scheduler"},{local:"improved-pseudo-numerical-methods-for-diffusion-models-ipndm",title:"improved pseudo numerical methods for diffusion models (iPNDM)"},{local:"diffusers.schedulers.ScoreSdeVpScheduler",title:"variance preserving stochastic differential equation (SDE) scheduler"}],title:"Implemented Schedulers"}],title:"API"}],title:"Schedulers"};function b_(Lo){return h_(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class x_ extends c_{constructor(F){super();u_(this,F,b_,__,f_,{})}}export{x_ as default,v_ as metadata};
