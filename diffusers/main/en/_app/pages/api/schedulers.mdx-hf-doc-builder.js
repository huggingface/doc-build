import{S as Q2,i as X2,s as Z2,e as s,k as l,w as p,t as i,M as e0,c as n,d as r,m as c,a as o,x as h,h as a,b as d,G as e,g as f,y as m,q as g,o as _,B as v,v as t0}from"../../chunks/vendor-hf-doc-builder.js";import{T as r0}from"../../chunks/Tip-hf-doc-builder.js";import{D as b}from"../../chunks/Docstring-hf-doc-builder.js";import{I as U}from"../../chunks/IconCopyLink-hf-doc-builder.js";function s0(va){let R,Ke;return{c(){R=s("p"),Ke=i("Score SDE-VP is under construction.")},l(W){R=n(W,"P",{});var de=o(R);Ke=a(de,"Score SDE-VP is under construction."),de.forEach(r)},m(W,de){f(W,R,de),e(R,Ke)},d(W){W&&r(R)}}}function n0(va){let R,Ke,W,de,Jn,Jt,Tl,jn,kl,ba,Fs,Al,Sa,ve,qe,Qn,jt,Cl,Xn,Ol,$a,Ue,Vl,Zn,Nl,Fl,Da,Be,Is,Il,Qt,eo,Ll,Kl,to,ql,Ul,be,Bl,ro,Hl,Rl,so,Wl,Gl,Ea,Se,He,no,Xt,Yl,oo,zl,xa,P,Jl,io,jl,Ql,Ls,Xl,Zl,Ks,ec,tc,ao,rc,sc,qs,nc,oc,lo,ic,ac,ya,$e,Re,co,Zt,dc,uo,lc,wa,Us,cc,Ma,We,fo,uc,fc,po,pc,Pa,De,Ge,ho,er,hc,mo,mc,Ta,Bs,gc,ka,fe,tr,_c,go,vc,bc,Sc,rr,$c,_o,Dc,Ec,xc,vo,yc,Aa,Ye,wc,Hs,Mc,Pc,Ca,Ee,ze,bo,sr,Tc,So,kc,Oa,xe,nr,Ac,$o,Cc,Va,ye,Je,Do,or,Oc,Eo,Vc,Na,we,ir,Nc,xo,Fc,Fa,Me,je,yo,ar,Ic,wo,Lc,Ia,Pe,Qe,Mo,dr,Kc,Po,qc,La,Rs,Uc,Ka,x,lr,Bc,To,Hc,Rc,T,Ws,Wc,Gc,ko,Yc,zc,Ao,Jc,jc,Co,Qc,Xc,Gs,Zc,eu,Ys,tu,ru,zs,su,nu,ou,Js,iu,cr,au,du,Xe,ur,lu,Oo,cu,uu,Ze,fr,fu,Vo,pu,hu,et,pr,mu,No,gu,qa,Te,tt,Fo,hr,_u,Io,vu,Ua,rt,bu,mr,Su,$u,Ba,y,gr,Du,Lo,Eu,xu,k,js,yu,wu,Ko,Mu,Pu,qo,Tu,ku,Uo,Au,Cu,Qs,Ou,Vu,Xs,Nu,Fu,Zs,Iu,Lu,Ku,en,qu,_r,Uu,Bu,st,vr,Hu,Bo,Ru,Wu,nt,br,Gu,Ho,Yu,zu,ot,Sr,Ju,Ro,ju,Ha,ke,it,Wo,$r,Qu,Go,Xu,Ra,at,Zu,Dr,ef,tf,Wa,S,Er,rf,Yo,sf,nf,dt,of,xr,af,df,yr,lf,cf,A,tn,uf,ff,zo,pf,hf,Jo,mf,gf,jo,_f,vf,rn,bf,Sf,sn,$f,Df,nn,Ef,xf,yf,wr,wf,Mr,Mf,Pf,Tf,pe,Pr,kf,Qo,Af,Cf,Xo,Of,Vf,lt,Tr,Nf,Zo,Ff,If,ct,kr,Lf,ei,Kf,qf,ut,Ar,Uf,ti,Bf,Hf,ft,Cr,Rf,ri,Wf,Ga,Ae,pt,si,Or,Gf,ni,Yf,Ya,ht,zf,Vr,Jf,jf,za,w,Nr,Qf,on,Xf,Fr,Zf,ep,C,an,tp,rp,oi,sp,np,ii,op,ip,ai,ap,dp,dn,lp,cp,ln,up,fp,cn,pp,hp,mp,mt,Ir,gp,di,_p,vp,gt,Lr,bp,Kr,Sp,li,$p,Dp,Ep,_t,qr,xp,ci,yp,wp,vt,Ur,Mp,ui,Pp,Ja,Ce,bt,fi,Br,Tp,pi,kp,ja,St,Ap,Hr,Cp,Op,Qa,$,Rr,Vp,hi,Np,Fp,O,un,Ip,Lp,mi,Kp,qp,gi,Up,Bp,_i,Hp,Rp,fn,Wp,Gp,pn,Yp,zp,hn,Jp,jp,Qp,mn,Xp,Wr,Zp,eh,$t,Gr,th,vi,rh,sh,Dt,Yr,nh,bi,oh,ih,he,zr,ah,Si,dh,lh,ue,ch,$i,uh,fh,Di,ph,hh,Ei,mh,gh,_h,Et,Jr,vh,xi,bh,Sh,xt,jr,$h,yi,Dh,Xa,Oe,yt,wi,Qr,Eh,Mi,xh,Za,wt,yh,Xr,wh,Mh,ed,D,Zr,Ph,Pi,Th,kh,gn,Ah,es,Ch,Oh,V,_n,Vh,Nh,Ti,Fh,Ih,ki,Lh,Kh,Ai,qh,Uh,vn,Bh,Hh,bn,Rh,Wh,Sn,Gh,Yh,zh,Mt,ts,Jh,Ci,jh,Qh,me,rs,Xh,Oi,Zh,em,Ve,tm,Vi,rm,sm,Ni,nm,om,im,Pt,ss,am,Fi,dm,lm,Tt,ns,cm,Ii,um,fm,kt,os,pm,Li,hm,td,Ne,At,Ki,is,mm,qi,gm,rd,Ct,_m,as,vm,bm,sd,M,ds,Sm,$n,$m,ls,Dm,Em,N,Dn,xm,ym,Ui,wm,Mm,Bi,Pm,Tm,Hi,km,Am,En,Cm,Om,xn,Vm,Nm,yn,Fm,Im,Lm,wn,Km,cs,qm,Um,Ot,us,Bm,Ri,Hm,Rm,Vt,fs,Wm,Wi,Gm,Ym,Nt,ps,zm,Gi,Jm,nd,Fe,Ft,Yi,hs,jm,zi,Qm,od,It,Xm,ms,Zm,eg,id,Lt,ad,G,gs,tg,Ji,rg,sg,F,Mn,ng,og,ji,ig,ag,Qi,dg,lg,Xi,cg,ug,Pn,fg,pg,Tn,hg,mg,kn,gg,_g,vg,An,bg,_s,Sg,$g,Zi,Dg,dd,Ie,Kt,ea,vs,Eg,ta,xg,ld,ge,yg,bs,wg,Mg,Ss,Pg,Tg,cd,B,$s,kg,qt,Ag,Ds,Cg,Og,Es,Vg,Ng,I,Cn,Fg,Ig,ra,Lg,Kg,sa,qg,Ug,na,Bg,Hg,On,Rg,Wg,Vn,Gg,Yg,Nn,zg,Jg,jg,Ut,xs,Qg,ys,Xg,oa,Zg,e_,t_,Bt,ws,r_,ia,s_,n_,Ht,Ms,o_,aa,i_,ud,Le,Rt,da,Ps,a_,la,d_,fd,Fn,l_,pd,H,Ts,c_,In,u_,ks,f_,p_,L,Ln,h_,m_,ca,g_,__,ua,v_,b_,fa,S_,$_,Kn,D_,E_,qn,x_,y_,Un,w_,M_,P_,Wt,As,T_,Cs,k_,pa,A_,C_,O_,Gt,Os,V_,ha,N_,F_,Yt,Vs,I_,ma,L_,hd;return Jt=new U({}),jt=new U({}),Xt=new U({}),Zt=new U({}),er=new U({}),sr=new U({}),nr=new b({props:{name:"class diffusers.SchedulerMixin",anchor:"diffusers.SchedulerMixin",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_utils.py#L38"}}),or=new U({}),ir=new b({props:{name:"class diffusers.schedulers.scheduling_utils.SchedulerOutput",anchor:"diffusers.schedulers.scheduling_utils.SchedulerOutput",parameters:[{name:"prev_sample",val:": FloatTensor"}],parametersDescription:[{anchor:"diffusers.schedulers.scheduling_utils.SchedulerOutput.prev_sample",description:`<strong>prev_sample</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code> for images) &#x2014;
Computed sample (x_{t-1}) of previous timestep. <code>prev_sample</code> should be used as next model input in the
denoising loop.`,name:"prev_sample"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_utils.py#L25"}}),ar=new U({}),dr=new U({}),lr=new b({props:{name:"class diffusers.DDIMScheduler",anchor:"diffusers.DDIMScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"},{name:"clip_sample",val:": bool = True"},{name:"set_alpha_to_one",val:": bool = True"},{name:"steps_offset",val:": int = 0"}],parametersDescription:[{anchor:"diffusers.DDIMScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.DDIMScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.DDIMScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.DDIMScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code>, <code>scaled_linear</code>, or <code>squaredcos_cap_v2</code>.`,name:"beta_schedule"},{anchor:"diffusers.DDIMScheduler.trained_betas",description:`<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014;
option to pass an array of betas directly to the constructor to bypass <code>beta_start</code>, <code>beta_end</code> etc.`,name:"trained_betas"},{anchor:"diffusers.DDIMScheduler.clip_sample",description:`<strong>clip_sample</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
option to clip predicted sample between -1 and 1 for numerical stability.`,name:"clip_sample"},{anchor:"diffusers.DDIMScheduler.set_alpha_to_one",description:`<strong>set_alpha_to_one</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
each diffusion step uses the value of alphas product at that step and at the previous one. For the final
step there is no previous alpha. When this option is <code>True</code> the previous alpha product is fixed to <code>1</code>,
otherwise it uses the value of alpha at step 0.`,name:"set_alpha_to_one"},{anchor:"diffusers.DDIMScheduler.steps_offset",description:`<strong>steps_offset</strong> (<code>int</code>, default <code>0</code>) &#x2014;
an offset added to the inference steps. You can use a combination of <code>offset=1</code> and
<code>set_alpha_to_one=False</code>, to make the last step use step 0 for the previous alpha product, as done in
stable diffusion.`,name:"steps_offset"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddim.py#L78"}}),ur=new b({props:{name:"scale_model_input",anchor:"diffusers.DDIMScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"timestep",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"diffusers.DDIMScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"},{anchor:"diffusers.DDIMScheduler.scale_model_input.timestep",description:"<strong>timestep</strong> (<code>int</code>, optional) &#x2014; current timestep",name:"timestep"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddim.py#L163",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),fr=new b({props:{name:"set_timesteps",anchor:"diffusers.DDIMScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.DDIMScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddim.py#L187"}}),pr=new b({props:{name:"step",anchor:"diffusers.DDIMScheduler.step",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": int"},{name:"sample",val:": FloatTensor"},{name:"eta",val:": float = 0.0"},{name:"use_clipped_model_output",val:": bool = False"},{name:"generator",val:" = None"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.DDIMScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.DDIMScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.DDIMScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.DDIMScheduler.step.eta",description:"<strong>eta</strong> (<code>float</code>) &#x2014; weight of noise for added noise in diffusion step.",name:"eta"},{anchor:"diffusers.DDIMScheduler.step.use_clipped_model_output",description:`<strong>use_clipped_model_output</strong> (<code>bool</code>) &#x2014; TODO
generator &#x2014; random number generator.`,name:"use_clipped_model_output"},{anchor:"diffusers.DDIMScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than DDIMSchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddim.py#L203",returnDescription:`
<p><code>~schedulers.scheduling_utils.DDIMSchedulerOutput</code> if <code>return_dict</code> is True, otherwise a <code>tuple</code>. When
returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>~schedulers.scheduling_utils.DDIMSchedulerOutput</code> or <code>tuple</code></p>
`}}),hr=new U({}),gr=new b({props:{name:"class diffusers.DDPMScheduler",anchor:"diffusers.DDPMScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"},{name:"variance_type",val:": str = 'fixed_small'"},{name:"clip_sample",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.DDPMScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.DDPMScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.DDPMScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.DDPMScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code>, <code>scaled_linear</code>, or <code>squaredcos_cap_v2</code>.`,name:"beta_schedule"},{anchor:"diffusers.DDPMScheduler.trained_betas",description:`<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014;
option to pass an array of betas directly to the constructor to bypass <code>beta_start</code>, <code>beta_end</code> etc.`,name:"trained_betas"},{anchor:"diffusers.DDPMScheduler.variance_type",description:`<strong>variance_type</strong> (<code>str</code>) &#x2014;
options to clip the variance used when adding noise to the denoised sample. Choose from <code>fixed_small</code>,
<code>fixed_small_log</code>, <code>fixed_large</code>, <code>fixed_large_log</code>, <code>learned</code> or <code>learned_range</code>.`,name:"variance_type"},{anchor:"diffusers.DDPMScheduler.clip_sample",description:`<strong>clip_sample</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
option to clip predicted sample between -1 and 1 for numerical stability.`,name:"clip_sample"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddpm.py#L76"}}),vr=new b({props:{name:"scale_model_input",anchor:"diffusers.DDPMScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"timestep",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"diffusers.DDPMScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"},{anchor:"diffusers.DDPMScheduler.scale_model_input.timestep",description:"<strong>timestep</strong> (<code>int</code>, optional) &#x2014; current timestep",name:"timestep"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddpm.py#L156",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),br=new b({props:{name:"set_timesteps",anchor:"diffusers.DDPMScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.DDPMScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddpm.py#L170"}}),Sr=new b({props:{name:"step",anchor:"diffusers.DDPMScheduler.step",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": int"},{name:"sample",val:": FloatTensor"},{name:"predict_epsilon",val:" = True"},{name:"generator",val:" = None"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.DDPMScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.DDPMScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.DDPMScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.DDPMScheduler.step.predict_epsilon",description:`<strong>predict_epsilon</strong> (<code>bool</code>) &#x2014;
optional flag to use when model predicts the samples directly instead of the noise, epsilon.
generator &#x2014; random number generator.`,name:"predict_epsilon"},{anchor:"diffusers.DDPMScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than DDPMSchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddpm.py#L218",returnDescription:`
<p><code>~schedulers.scheduling_utils.DDPMSchedulerOutput</code> if <code>return_dict</code> is True, otherwise a <code>tuple</code>. When
returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>~schedulers.scheduling_utils.DDPMSchedulerOutput</code> or <code>tuple</code></p>
`}}),$r=new U({}),Er=new b({props:{name:"class diffusers.KarrasVeScheduler",anchor:"diffusers.KarrasVeScheduler",parameters:[{name:"sigma_min",val:": float = 0.02"},{name:"sigma_max",val:": float = 100"},{name:"s_noise",val:": float = 1.007"},{name:"s_churn",val:": float = 80"},{name:"s_min",val:": float = 0.05"},{name:"s_max",val:": float = 50"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.sigma_min",description:"<strong>sigma_min</strong> (<code>float</code>) &#x2014; minimum noise magnitude",name:"sigma_min"},{anchor:"diffusers.KarrasVeScheduler.sigma_max",description:"<strong>sigma_max</strong> (<code>float</code>) &#x2014; maximum noise magnitude",name:"sigma_max"},{anchor:"diffusers.KarrasVeScheduler.s_noise",description:`<strong>s_noise</strong> (<code>float</code>) &#x2014; the amount of additional noise to counteract loss of detail during sampling.
A reasonable range is [1.000, 1.011].`,name:"s_noise"},{anchor:"diffusers.KarrasVeScheduler.s_churn",description:`<strong>s_churn</strong> (<code>float</code>) &#x2014; the parameter controlling the overall amount of stochasticity.
A reasonable range is [0, 100].`,name:"s_churn"},{anchor:"diffusers.KarrasVeScheduler.s_min",description:`<strong>s_min</strong> (<code>float</code>) &#x2014; the start value of the sigma range where we add noise (enable stochasticity).
A reasonable range is [0, 10].`,name:"s_min"},{anchor:"diffusers.KarrasVeScheduler.s_max",description:`<strong>s_max</strong> (<code>float</code>) &#x2014; the end value of the sigma range where we add noise.
A reasonable range is [0.2, 80].`,name:"s_max"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L48"}}),Pr=new b({props:{name:"add_noise_to_input",anchor:"diffusers.KarrasVeScheduler.add_noise_to_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"sigma",val:": float"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L133"}}),Tr=new b({props:{name:"scale_model_input",anchor:"diffusers.KarrasVeScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"timestep",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"},{anchor:"diffusers.KarrasVeScheduler.scale_model_input.timestep",description:"<strong>timestep</strong> (<code>int</code>, optional) &#x2014; current timestep",name:"timestep"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L98",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),kr=new b({props:{name:"set_timesteps",anchor:"diffusers.KarrasVeScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L112"}}),Ar=new b({props:{name:"step",anchor:"diffusers.KarrasVeScheduler.step",parameters:[{name:"model_output",val:": FloatTensor"},{name:"sigma_hat",val:": float"},{name:"sigma_prev",val:": float"},{name:"sample_hat",val:": FloatTensor"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.KarrasVeScheduler.step.sigma_hat",description:"<strong>sigma_hat</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_hat"},{anchor:"diffusers.KarrasVeScheduler.step.sigma_prev",description:"<strong>sigma_prev</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_prev"},{anchor:"diffusers.KarrasVeScheduler.step.sample_hat",description:"<strong>sample_hat</strong> (<code>torch.FloatTensor</code>) &#x2014; TODO",name:"sample_hat"},{anchor:"diffusers.KarrasVeScheduler.step.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than KarrasVeOutput class</p>
<p>KarrasVeOutput &#x2014; updated sample in the diffusion chain and derivative (TODO double check).`,name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L154",returnDescription:`
<p><code>KarrasVeOutput</code> if <code>return_dict</code> is True, otherwise a <code>tuple</code>. When
returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>KarrasVeOutput</code> or <code>tuple</code></p>
`}}),Cr=new b({props:{name:"step_correct",anchor:"diffusers.KarrasVeScheduler.step_correct",parameters:[{name:"model_output",val:": FloatTensor"},{name:"sigma_hat",val:": float"},{name:"sigma_prev",val:": float"},{name:"sample_hat",val:": FloatTensor"},{name:"sample_prev",val:": FloatTensor"},{name:"derivative",val:": FloatTensor"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.step_correct.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sigma_hat",description:"<strong>sigma_hat</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_hat"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sigma_prev",description:"<strong>sigma_prev</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_prev"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sample_hat",description:"<strong>sample_hat</strong> (<code>torch.FloatTensor</code>) &#x2014; TODO",name:"sample_hat"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sample_prev",description:"<strong>sample_prev</strong> (<code>torch.FloatTensor</code>) &#x2014; TODO",name:"sample_prev"},{anchor:"diffusers.KarrasVeScheduler.step_correct.derivative",description:"<strong>derivative</strong> (<code>torch.FloatTensor</code>) &#x2014; TODO",name:"derivative"},{anchor:"diffusers.KarrasVeScheduler.step_correct.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than KarrasVeOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L192",returnDescription:`
<p>updated sample in the diffusion chain. derivative (TODO): TODO</p>
`,returnType:`
<p>prev_sample (TODO)</p>
`}}),Or=new U({}),Nr=new b({props:{name:"class diffusers.LMSDiscreteScheduler",anchor:"diffusers.LMSDiscreteScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.LMSDiscreteScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.LMSDiscreteScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.LMSDiscreteScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code> or <code>scaled_linear</code>.`,name:"beta_schedule"},{anchor:"diffusers.LMSDiscreteScheduler.trained_betas",description:`<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014;
option to pass an array of betas directly to the constructor to bypass <code>beta_start</code>, <code>beta_end</code> etc.`,name:"trained_betas"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L47"}}),Ir=new b({props:{name:"get_lms_coefficient",anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient",parameters:[{name:"order",val:""},{name:"t",val:""},{name:"current_order",val:""}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient.order",description:"<strong>order</strong> (TODO) &#x2014;",name:"order"},{anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient.t",description:"<strong>t</strong> (TODO) &#x2014;",name:"t"},{anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient.current_order",description:"<strong>current_order</strong> (TODO) &#x2014;",name:"current_order"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L137"}}),Lr=new b({props:{name:"scale_model_input",anchor:"diffusers.LMSDiscreteScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"timestep",val:": typing.Union[float, torch.FloatTensor]"}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"},{anchor:"diffusers.LMSDiscreteScheduler.scale_model_input.timestep",description:"<strong>timestep</strong> (<code>float</code> or <code>torch.FloatTensor</code>) &#x2014; the current timestep in the diffusion chain",name:"timestep"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L116",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),qr=new b({props:{name:"set_timesteps",anchor:"diffusers.LMSDiscreteScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.LMSDiscreteScheduler.set_timesteps.device",description:`<strong>device</strong> (<code>str</code> or <code>torch.device</code>, optional) &#x2014;
the device to which the timesteps should be moved to. If <code>None</code>, the timesteps are not moved.`,name:"device"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L159"}}),Ur=new b({props:{name:"step",anchor:"diffusers.LMSDiscreteScheduler.step",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": typing.Union[float, torch.FloatTensor]"},{name:"sample",val:": FloatTensor"},{name:"order",val:": int = 4"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.LMSDiscreteScheduler.step.timestep",description:"<strong>timestep</strong> (<code>float</code>) &#x2014; current timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.LMSDiscreteScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.
order &#x2014; coefficient for multi-step inference.`,name:"sample"},{anchor:"diffusers.LMSDiscreteScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than LMSDiscreteSchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L180",returnDescription:`
<p><code>~schedulers.scheduling_utils.LMSDiscreteSchedulerOutput</code> if <code>return_dict</code> is True, otherwise a <code>tuple</code>.
When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>~schedulers.scheduling_utils.LMSDiscreteSchedulerOutput</code> or <code>tuple</code></p>
`}}),Br=new U({}),Rr=new b({props:{name:"class diffusers.PNDMScheduler",anchor:"diffusers.PNDMScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"},{name:"skip_prk_steps",val:": bool = False"},{name:"set_alpha_to_one",val:": bool = False"},{name:"steps_offset",val:": int = 0"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.PNDMScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.PNDMScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.PNDMScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code>, <code>scaled_linear</code>, or <code>squaredcos_cap_v2</code>.`,name:"beta_schedule"},{anchor:"diffusers.PNDMScheduler.trained_betas",description:`<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014;
option to pass an array of betas directly to the constructor to bypass <code>beta_start</code>, <code>beta_end</code> etc.`,name:"trained_betas"},{anchor:"diffusers.PNDMScheduler.skip_prk_steps",description:`<strong>skip_prk_steps</strong> (<code>bool</code>) &#x2014;
allows the scheduler to skip the Runge-Kutta steps that are defined in the original paper as being required
before plms steps; defaults to <code>False</code>.`,name:"skip_prk_steps"},{anchor:"diffusers.PNDMScheduler.set_alpha_to_one",description:`<strong>set_alpha_to_one</strong> (<code>bool</code>, default <code>False</code>) &#x2014;
each diffusion step uses the value of alphas product at that step and at the previous one. For the final
step there is no previous alpha. When this option is <code>True</code> the previous alpha product is fixed to <code>1</code>,
otherwise it uses the value of alpha at step 0.`,name:"set_alpha_to_one"},{anchor:"diffusers.PNDMScheduler.steps_offset",description:`<strong>steps_offset</strong> (<code>int</code>, default <code>0</code>) &#x2014;
an offset added to the inference steps. You can use a combination of <code>offset=1</code> and
<code>set_alpha_to_one=False</code>, to make the last step use step 0 for the previous alpha product, as done in
stable diffusion.`,name:"steps_offset"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L56"}}),Gr=new b({props:{name:"scale_model_input",anchor:"diffusers.PNDMScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L344",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),Yr=new b({props:{name:"set_timesteps",anchor:"diffusers.PNDMScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L152"}}),zr=new b({props:{name:"step",anchor:"diffusers.PNDMScheduler.step",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": int"},{name:"sample",val:": FloatTensor"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.PNDMScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.PNDMScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.PNDMScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L191",returnDescription:`
<p><a
  href="/docs/diffusers/main/en/api/schedulers#diffusers.schedulers.scheduling_utils.SchedulerOutput"
>SchedulerOutput</a> if <code>return_dict</code> is True, otherwise a <code>tuple</code>. When
returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><a
  href="/docs/diffusers/main/en/api/schedulers#diffusers.schedulers.scheduling_utils.SchedulerOutput"
>SchedulerOutput</a> or <code>tuple</code></p>
`}}),Jr=new b({props:{name:"step_plms",anchor:"diffusers.PNDMScheduler.step_plms",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": int"},{name:"sample",val:": FloatTensor"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.step_plms.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.PNDMScheduler.step_plms.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.PNDMScheduler.step_plms.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.PNDMScheduler.step_plms.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L277",returnDescription:`
<p><code>~scheduling_utils.SchedulerOutput</code> if <code>return_dict</code> is
True, otherwise a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>~scheduling_utils.SchedulerOutput</code> or <code>tuple</code></p>
`}}),jr=new b({props:{name:"step_prk",anchor:"diffusers.PNDMScheduler.step_prk",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": int"},{name:"sample",val:": FloatTensor"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.step_prk.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.PNDMScheduler.step_prk.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.PNDMScheduler.step_prk.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.PNDMScheduler.step_prk.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L222",returnDescription:`
<p><code>~scheduling_utils.SchedulerOutput</code> if <code>return_dict</code> is
True, otherwise a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>~scheduling_utils.SchedulerOutput</code> or <code>tuple</code></p>
`}}),Qr=new U({}),Zr=new b({props:{name:"class diffusers.ScoreSdeVeScheduler",anchor:"diffusers.ScoreSdeVeScheduler",parameters:[{name:"num_train_timesteps",val:": int = 2000"},{name:"snr",val:": float = 0.15"},{name:"sigma_min",val:": float = 0.01"},{name:"sigma_max",val:": float = 1348.0"},{name:"sampling_eps",val:": float = 1e-05"},{name:"correct_steps",val:": int = 1"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.ScoreSdeVeScheduler.snr",description:`<strong>snr</strong> (<code>float</code>) &#x2014;
coefficient weighting the step from the model_output sample (from the network) to the random noise.`,name:"snr"},{anchor:"diffusers.ScoreSdeVeScheduler.sigma_min",description:`<strong>sigma_min</strong> (<code>float</code>) &#x2014;
initial noise scale for sigma sequence in sampling procedure. The minimum sigma should mirror the
distribution of the data.`,name:"sigma_min"},{anchor:"diffusers.ScoreSdeVeScheduler.sigma_max",description:"<strong>sigma_max</strong> (<code>float</code>) &#x2014; maximum value used for the range of continuous timesteps passed into the model.",name:"sigma_max"},{anchor:"diffusers.ScoreSdeVeScheduler.sampling_eps",description:`<strong>sampling_eps</strong> (<code>float</code>) &#x2014; the end value of sampling, where timesteps decrease progressively from 1 to
epsilon. &#x2014;`,name:"sampling_eps"},{anchor:"diffusers.ScoreSdeVeScheduler.correct_steps",description:"<strong>correct_steps</strong> (<code>int</code>) &#x2014; number of correction steps performed on a produced sample.",name:"correct_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L45"}}),ts=new b({props:{name:"scale_model_input",anchor:"diffusers.ScoreSdeVeScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"timestep",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"},{anchor:"diffusers.ScoreSdeVeScheduler.scale_model_input.timestep",description:"<strong>timestep</strong> (<code>int</code>, optional) &#x2014; current timestep",name:"timestep"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L87",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),rs=new b({props:{name:"set_sigmas",anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas",parameters:[{name:"num_inference_steps",val:": int"},{name:"sigma_min",val:": float = None"},{name:"sigma_max",val:": float = None"},{name:"sampling_eps",val:": float = None"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.sigma_min",description:`<strong>sigma_min</strong> (<code>float</code>, optional) &#x2014;
initial noise scale value (overrides value given at Scheduler instantiation).`,name:"sigma_min"},{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.sigma_max",description:"<strong>sigma_max</strong> (<code>float</code>, optional) &#x2014; final noise scale value (overrides value given at Scheduler instantiation).",name:"sigma_max"},{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.sampling_eps",description:"<strong>sampling_eps</strong> (<code>float</code>, optional) &#x2014; final timestep value (overrides value given at Scheduler instantiation).",name:"sampling_eps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L117"}}),ss=new b({props:{name:"set_timesteps",anchor:"diffusers.ScoreSdeVeScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"sampling_eps",val:": float = None"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.ScoreSdeVeScheduler.set_timesteps.sampling_eps",description:"<strong>sampling_eps</strong> (<code>float</code>, optional) &#x2014; final timestep value (overrides value given at Scheduler instantiation).",name:"sampling_eps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L101"}}),ns=new b({props:{name:"step_correct",anchor:"diffusers.ScoreSdeVeScheduler.step_correct",parameters:[{name:"model_output",val:": FloatTensor"},{name:"sample",val:": FloatTensor"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.step_correct.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.ScoreSdeVeScheduler.step_correct.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.
generator &#x2014; random number generator.`,name:"sample"},{anchor:"diffusers.ScoreSdeVeScheduler.step_correct.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L212",returnDescription:`
<p><code>SdeVeOutput</code> if
<code>return_dict</code> is True, otherwise a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>SdeVeOutput</code> or <code>tuple</code></p>
`}}),os=new b({props:{name:"step_pred",anchor:"diffusers.ScoreSdeVeScheduler.step_pred",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": int"},{name:"sample",val:": FloatTensor"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.
generator &#x2014; random number generator.`,name:"sample"},{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L151",returnDescription:`
<p><code>SdeVeOutput</code> if
<code>return_dict</code> is True, otherwise a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>SdeVeOutput</code> or <code>tuple</code></p>
`}}),is=new U({}),ds=new b({props:{name:"class diffusers.IPNDMScheduler",anchor:"diffusers.IPNDMScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"}],parametersDescription:[{anchor:"diffusers.IPNDMScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ipndm.py#L24"}}),us=new b({props:{name:"scale_model_input",anchor:"diffusers.IPNDMScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.IPNDMScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ipndm.py#L126",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),fs=new b({props:{name:"set_timesteps",anchor:"diffusers.IPNDMScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.IPNDMScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ipndm.py#L56"}}),ps=new b({props:{name:"step",anchor:"diffusers.IPNDMScheduler.step",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": int"},{name:"sample",val:": FloatTensor"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.IPNDMScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.IPNDMScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.IPNDMScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.IPNDMScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ipndm.py#L76",returnDescription:`
<p><code>~scheduling_utils.SchedulerOutput</code> if <code>return_dict</code> is
True, otherwise a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>~scheduling_utils.SchedulerOutput</code> or <code>tuple</code></p>
`}}),hs=new U({}),Lt=new r0({props:{warning:!0,$$slots:{default:[s0]},$$scope:{ctx:va}}}),gs=new b({props:{name:"class diffusers.schedulers.ScoreSdeVpScheduler",anchor:"diffusers.schedulers.ScoreSdeVpScheduler",parameters:[{name:"num_train_timesteps",val:" = 2000"},{name:"beta_min",val:" = 0.1"},{name:"beta_max",val:" = 20"},{name:"sampling_eps",val:" = 0.001"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_vp.py#L26"}}),vs=new U({}),$s=new b({props:{name:"class diffusers.EulerDiscreteScheduler",anchor:"diffusers.EulerDiscreteScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"}],parametersDescription:[{anchor:"diffusers.EulerDiscreteScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.EulerDiscreteScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.EulerDiscreteScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.EulerDiscreteScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code> or <code>scaled_linear</code>.`,name:"beta_schedule"},{anchor:"diffusers.EulerDiscreteScheduler.trained_betas",description:`<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014;
option to pass an array of betas directly to the constructor to bypass <code>beta_start</code>, <code>beta_end</code> etc.`,name:"trained_betas"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_euler_discrete.py#L48"}}),xs=new b({props:{name:"scale_model_input",anchor:"diffusers.EulerDiscreteScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"timestep",val:": typing.Union[float, torch.FloatTensor]"}],parametersDescription:[{anchor:"diffusers.EulerDiscreteScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"},{anchor:"diffusers.EulerDiscreteScheduler.scale_model_input.timestep",description:"<strong>timestep</strong> (<code>float</code> or <code>torch.FloatTensor</code>) &#x2014; the current timestep in the diffusion chain",name:"timestep"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_euler_discrete.py#L116",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),ws=new b({props:{name:"set_timesteps",anchor:"diffusers.EulerDiscreteScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.EulerDiscreteScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.EulerDiscreteScheduler.set_timesteps.device",description:`<strong>device</strong> (<code>str</code> or <code>torch.device</code>, optional) &#x2014;
the device to which the timesteps should be moved to. If <code>None</code>, the timesteps are not moved.`,name:"device"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_euler_discrete.py#L137"}}),Ms=new b({props:{name:"step",anchor:"diffusers.EulerDiscreteScheduler.step",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": typing.Union[float, torch.FloatTensor]"},{name:"sample",val:": FloatTensor"},{name:"s_churn",val:": float = 0.0"},{name:"s_tmin",val:": float = 0.0"},{name:"s_tmax",val:": float = inf"},{name:"s_noise",val:": float = 1.0"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.EulerDiscreteScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.EulerDiscreteScheduler.step.timestep",description:"<strong>timestep</strong> (<code>float</code>) &#x2014; current timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.EulerDiscreteScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.EulerDiscreteScheduler.step.s_churn",description:"<strong>s_churn</strong> (<code>float</code>) &#x2014;",name:"s_churn"},{anchor:"diffusers.EulerDiscreteScheduler.step.s_tmin",description:"<strong>s_tmin</strong>  (<code>float</code>) &#x2014;",name:"s_tmin"},{anchor:"diffusers.EulerDiscreteScheduler.step.s_tmax",description:"<strong>s_tmax</strong>  (<code>float</code>) &#x2014;",name:"s_tmax"},{anchor:"diffusers.EulerDiscreteScheduler.step.s_noise",description:"<strong>s_noise</strong> (<code>float</code>) &#x2014;",name:"s_noise"},{anchor:"diffusers.EulerDiscreteScheduler.step.generator",description:"<strong>generator</strong> (<code>torch.Generator</code>, optional) &#x2014; Random number generator.",name:"generator"},{anchor:"diffusers.EulerDiscreteScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than EulerDiscreteSchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_euler_discrete.py#L156",returnDescription:`
<p><code>~schedulers.scheduling_utils.EulerDiscreteSchedulerOutput</code> if <code>return_dict</code> is True, otherwise a
<code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>~schedulers.scheduling_utils.EulerDiscreteSchedulerOutput</code> or <code>tuple</code></p>
`}}),Ps=new U({}),Ts=new b({props:{name:"class diffusers.EulerAncestralDiscreteScheduler",anchor:"diffusers.EulerAncestralDiscreteScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"}],parametersDescription:[{anchor:"diffusers.EulerAncestralDiscreteScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.EulerAncestralDiscreteScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.EulerAncestralDiscreteScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.EulerAncestralDiscreteScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code> or <code>scaled_linear</code>.`,name:"beta_schedule"},{anchor:"diffusers.EulerAncestralDiscreteScheduler.trained_betas",description:`<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014;
option to pass an array of betas directly to the constructor to bypass <code>beta_start</code>, <code>beta_end</code> etc.`,name:"trained_betas"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_euler_ancestral_discrete.py#L48"}}),As=new b({props:{name:"scale_model_input",anchor:"diffusers.EulerAncestralDiscreteScheduler.scale_model_input",parameters:[{name:"sample",val:": FloatTensor"},{name:"timestep",val:": typing.Union[float, torch.FloatTensor]"}],parametersDescription:[{anchor:"diffusers.EulerAncestralDiscreteScheduler.scale_model_input.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; input sample",name:"sample"},{anchor:"diffusers.EulerAncestralDiscreteScheduler.scale_model_input.timestep",description:"<strong>timestep</strong> (<code>float</code> or <code>torch.FloatTensor</code>) &#x2014; the current timestep in the diffusion chain",name:"timestep"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_euler_ancestral_discrete.py#L115",returnDescription:`
<p>scaled input sample</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),Os=new b({props:{name:"set_timesteps",anchor:"diffusers.EulerAncestralDiscreteScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"device",val:": typing.Union[str, torch.device] = None"}],parametersDescription:[{anchor:"diffusers.EulerAncestralDiscreteScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.EulerAncestralDiscreteScheduler.set_timesteps.device",description:`<strong>device</strong> (<code>str</code> or <code>torch.device</code>, optional) &#x2014;
the device to which the timesteps should be moved to. If <code>None</code>, the timesteps are not moved.`,name:"device"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_euler_ancestral_discrete.py#L136"}}),Vs=new b({props:{name:"step",anchor:"diffusers.EulerAncestralDiscreteScheduler.step",parameters:[{name:"model_output",val:": FloatTensor"},{name:"timestep",val:": typing.Union[float, torch.FloatTensor]"},{name:"sample",val:": FloatTensor"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.EulerAncestralDiscreteScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.EulerAncestralDiscreteScheduler.step.timestep",description:"<strong>timestep</strong> (<code>float</code>) &#x2014; current timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.EulerAncestralDiscreteScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.EulerAncestralDiscreteScheduler.step.generator",description:"<strong>generator</strong> (<code>torch.Generator</code>, optional) &#x2014; Random number generator.",name:"generator"},{anchor:"diffusers.EulerAncestralDiscreteScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than EulerAncestralDiscreteSchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_euler_ancestral_discrete.py#L155",returnDescription:`
<p><code>~schedulers.scheduling_utils.EulerAncestralDiscreteSchedulerOutput</code> if <code>return_dict</code> is True, otherwise
a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>~schedulers.scheduling_utils.EulerAncestralDiscreteSchedulerOutput</code> or <code>tuple</code></p>
`}}),{c(){R=s("meta"),Ke=l(),W=s("h1"),de=s("a"),Jn=s("span"),p(Jt.$$.fragment),Tl=l(),jn=s("span"),kl=i("Schedulers"),ba=l(),Fs=s("p"),Al=i("Diffusers contains multiple pre-built schedule functions for the diffusion process."),Sa=l(),ve=s("h2"),qe=s("a"),Qn=s("span"),p(jt.$$.fragment),Cl=l(),Xn=s("span"),Ol=i("What is a scheduler?"),$a=l(),Ue=s("p"),Vl=i("The schedule functions, denoted "),Zn=s("em"),Nl=i("Schedulers"),Fl=i(" in the library take in the output of a trained model, a sample which the diffusion process is iterating on, and a timestep to return a denoised sample."),Da=l(),Be=s("ul"),Is=s("li"),Il=i("Schedulers define the methodology for iteratively adding noise to an image or for updating a sample based on model outputs."),Qt=s("ul"),eo=s("li"),Ll=i("adding noise in different manners represent the algorithmic processes to train a diffusion model by adding noise to images."),Kl=l(),to=s("li"),ql=i("for inference, the scheduler defines how to update a sample based on an output from a pretrained model."),Ul=l(),be=s("li"),Bl=i("Schedulers are often defined by a "),ro=s("em"),Hl=i("noise schedule"),Rl=i(" and an "),so=s("em"),Wl=i("update rule"),Gl=i(" to solve the differential equation solution."),Ea=l(),Se=s("h3"),He=s("a"),no=s("span"),p(Xt.$$.fragment),Yl=l(),oo=s("span"),zl=i("Discrete versus continuous schedulers"),xa=l(),P=s("p"),Jl=i(`All schedulers take in a timestep to predict the updated version of the sample being diffused.
The timesteps dictate where in the diffusion process the step is, where data is generated by iterating forward in time and inference is executed by propagating backwards through timesteps.
Different algorithms use timesteps that both discrete (accepting `),io=s("code"),jl=i("int"),Ql=i(" inputs), such as the "),Ls=s("a"),Xl=i("DDPMScheduler"),Zl=i(" or "),Ks=s("a"),ec=i("PNDMScheduler"),tc=i(", and continuous (accepting "),ao=s("code"),rc=i("float"),sc=i(" inputs), such as the score-based schedulers "),qs=s("a"),nc=i("ScoreSdeVeScheduler"),oc=i(" or "),lo=s("code"),ic=i("ScoreSdeVpScheduler"),ac=i("."),ya=l(),$e=s("h2"),Re=s("a"),co=s("span"),p(Zt.$$.fragment),dc=l(),uo=s("span"),lc=i("Designing Re-usable schedulers"),wa=l(),Us=s("p"),cc=i(`The core design principle between the schedule functions is to be model, system, and framework independent.
This allows for rapid experimentation and cleaner abstractions in the code, where the model prediction is separated from the sample update.
To this end, the design of schedulers is such that:`),Ma=l(),We=s("ul"),fo=s("li"),uc=i("Schedulers can be used interchangeably between diffusion models in inference to find the preferred trade-off between speed and generation quality."),fc=l(),po=s("li"),pc=i("Schedulers are currently by default in PyTorch, but are designed to be framework independent (partial Jax support currently exists)."),Pa=l(),De=s("h2"),Ge=s("a"),ho=s("span"),p(er.$$.fragment),hc=l(),mo=s("span"),mc=i("API"),Ta=l(),Bs=s("p"),gc=i("The core API for any new scheduler must follow a limited structure."),ka=l(),fe=s("ul"),tr=s("li"),_c=i("Schedulers should provide one or more "),go=s("code"),vc=i("def step(...)"),bc=i(" functions that should be called to update the generated sample iteratively."),Sc=l(),rr=s("li"),$c=i("Schedulers should provide a "),_o=s("code"),Dc=i("set_timesteps(...)"),Ec=i(" method that configures the parameters of a schedule function for a specific inference task."),xc=l(),vo=s("li"),yc=i("Schedulers should be framework-specific."),Aa=l(),Ye=s("p"),wc=i("The base class "),Hs=s("a"),Mc=i("SchedulerMixin"),Pc=i(" implements low level utilities used by multiple schedulers."),Ca=l(),Ee=s("h3"),ze=s("a"),bo=s("span"),p(sr.$$.fragment),Tc=l(),So=s("span"),kc=i("SchedulerMixin"),Oa=l(),xe=s("div"),p(nr.$$.fragment),Ac=l(),$o=s("p"),Cc=i("Mixin containing common functions for the schedulers."),Va=l(),ye=s("h3"),Je=s("a"),Do=s("span"),p(or.$$.fragment),Oc=l(),Eo=s("span"),Vc=i("SchedulerOutput"),Na=i("\n\nThe class `SchedulerOutput` contains the outputs from any schedulers `step(...)` call.\n"),we=s("div"),p(ir.$$.fragment),Nc=l(),xo=s("p"),Fc=i("Base class for the scheduler\u2019s step function output."),Fa=l(),Me=s("h3"),je=s("a"),yo=s("span"),p(ar.$$.fragment),Ic=l(),wo=s("span"),Lc=i("Implemented Schedulers"),Ia=l(),Pe=s("h4"),Qe=s("a"),Mo=s("span"),p(dr.$$.fragment),Kc=l(),Po=s("span"),qc=i("Denoising diffusion implicit models (DDIM)"),La=l(),Rs=s("p"),Uc=i("Original paper can be found here."),Ka=l(),x=s("div"),p(lr.$$.fragment),Bc=l(),To=s("p"),Hc=i(`Denoising diffusion implicit models is a scheduler that extends the denoising procedure introduced in denoising
diffusion probabilistic models (DDPMs) with non-Markovian guidance.`),Rc=l(),T=s("p"),Ws=s("a"),Wc=i("~ConfigMixin"),Gc=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),ko=s("code"),Yc=i("__init__"),zc=i(`
function, such as `),Ao=s("code"),Jc=i("num_train_timesteps"),jc=i(". They can be accessed via "),Co=s("code"),Qc=i("scheduler.config.num_train_timesteps"),Xc=i(`.
`),Gs=s("a"),Zc=i("~ConfigMixin"),eu=i(" also provides general loading and saving functionality via the "),Ys=s("a"),tu=i("save_config()"),ru=i(` and
`),zs=s("a"),su=i("from_config()"),nu=i(" functions."),ou=l(),Js=s("p"),iu=i("For more details, see the original paper: "),cr=s("a"),au=i("https://arxiv.org/abs/2010.02502"),du=l(),Xe=s("div"),p(ur.$$.fragment),lu=l(),Oo=s("p"),cu=i(`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),uu=l(),Ze=s("div"),p(fr.$$.fragment),fu=l(),Vo=s("p"),pu=i("Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),hu=l(),et=s("div"),p(pr.$$.fragment),mu=l(),No=s("p"),gu=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),qa=l(),Te=s("h4"),tt=s("a"),Fo=s("span"),p(hr.$$.fragment),_u=l(),Io=s("span"),vu=i("Denoising diffusion probabilistic models (DDPM)"),Ua=l(),rt=s("p"),bu=i("Original paper can be found "),mr=s("a"),Su=i("here"),$u=i("."),Ba=l(),y=s("div"),p(gr.$$.fragment),Du=l(),Lo=s("p"),Eu=i(`Denoising diffusion probabilistic models (DDPMs) explores the connections between denoising score matching and
Langevin dynamics sampling.`),xu=l(),k=s("p"),js=s("a"),yu=i("~ConfigMixin"),wu=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),Ko=s("code"),Mu=i("__init__"),Pu=i(`
function, such as `),qo=s("code"),Tu=i("num_train_timesteps"),ku=i(". They can be accessed via "),Uo=s("code"),Au=i("scheduler.config.num_train_timesteps"),Cu=i(`.
`),Qs=s("a"),Ou=i("~ConfigMixin"),Vu=i(" also provides general loading and saving functionality via the "),Xs=s("a"),Nu=i("save_config()"),Fu=i(` and
`),Zs=s("a"),Iu=i("from_config()"),Lu=i(" functions."),Ku=l(),en=s("p"),qu=i("For more details, see the original paper: "),_r=s("a"),Uu=i("https://arxiv.org/abs/2006.11239"),Bu=l(),st=s("div"),p(vr.$$.fragment),Hu=l(),Bo=s("p"),Ru=i(`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),Wu=l(),nt=s("div"),p(br.$$.fragment),Gu=l(),Ho=s("p"),Yu=i("Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),zu=l(),ot=s("div"),p(Sr.$$.fragment),Ju=l(),Ro=s("p"),ju=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Ha=l(),ke=s("h4"),it=s("a"),Wo=s("span"),p($r.$$.fragment),Qu=l(),Go=s("span"),Xu=i("Variance exploding, stochastic sampling from Karras et. al"),Ra=l(),at=s("p"),Zu=i("Original paper can be found "),Dr=s("a"),ef=i("here"),tf=i("."),Wa=l(),S=s("div"),p(Er.$$.fragment),rf=l(),Yo=s("p"),sf=i(`Stochastic sampling from Karras et al. [1] tailored to the Variance-Expanding (VE) models [2]. Use Algorithm 2 and
the VE column of Table 1 from [1] for reference.`),nf=l(),dt=s("p"),of=i(`[1] Karras, Tero, et al. \u201CElucidating the Design Space of Diffusion-Based Generative Models.\u201D
`),xr=s("a"),af=i("https://arxiv.org/abs/2206.00364"),df=i(` [2] Song, Yang, et al. \u201CScore-based generative modeling through stochastic
differential equations.\u201D `),yr=s("a"),lf=i("https://arxiv.org/abs/2011.13456"),cf=l(),A=s("p"),tn=s("a"),uf=i("~ConfigMixin"),ff=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),zo=s("code"),pf=i("__init__"),hf=i(`
function, such as `),Jo=s("code"),mf=i("num_train_timesteps"),gf=i(". They can be accessed via "),jo=s("code"),_f=i("scheduler.config.num_train_timesteps"),vf=i(`.
`),rn=s("a"),bf=i("~ConfigMixin"),Sf=i(" also provides general loading and saving functionality via the "),sn=s("a"),$f=i("save_config()"),Df=i(` and
`),nn=s("a"),Ef=i("from_config()"),xf=i(" functions."),yf=l(),wr=s("p"),wf=i(`For more details on the parameters, see the original paper\u2019s Appendix E.: \u201CElucidating the Design Space of
Diffusion-Based Generative Models.\u201D `),Mr=s("a"),Mf=i("https://arxiv.org/abs/2206.00364"),Pf=i(`. The grid search values used to find the
optimal {s_noise, s_churn, s_min, s_max} for a specific model are described in Table 5 of the paper.`),Tf=l(),pe=s("div"),p(Pr.$$.fragment),kf=l(),Qo=s("p"),Af=i(`Explicit Langevin-like \u201Cchurn\u201D step of adding noise to the sample according to a factor gamma_i \u2265 0 to reach a
higher noise level sigma_hat = sigma_i + gamma_i*sigma_i.`),Cf=l(),Xo=s("p"),Of=i("TODO Args:"),Vf=l(),lt=s("div"),p(Tr.$$.fragment),Nf=l(),Zo=s("p"),Ff=i(`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),If=l(),ct=s("div"),p(kr.$$.fragment),Lf=l(),ei=s("p"),Kf=i("Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),qf=l(),ut=s("div"),p(Ar.$$.fragment),Uf=l(),ti=s("p"),Bf=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Hf=l(),ft=s("div"),p(Cr.$$.fragment),Rf=l(),ri=s("p"),Wf=i("Correct the predicted sample based on the output model_output of the network. TODO complete description"),Ga=l(),Ae=s("h4"),pt=s("a"),si=s("span"),p(Or.$$.fragment),Gf=l(),ni=s("span"),Yf=i("Linear multistep scheduler for discrete beta schedules"),Ya=l(),ht=s("p"),zf=i("Original implementation can be found "),Vr=s("a"),Jf=i("here"),jf=i("."),za=l(),w=s("div"),p(Nr.$$.fragment),Qf=l(),on=s("p"),Xf=i(`Linear Multistep Scheduler for discrete beta schedules. Based on the original k-diffusion implementation by
Katherine Crowson:
`),Fr=s("a"),Zf=i("https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),ep=l(),C=s("p"),an=s("a"),tp=i("~ConfigMixin"),rp=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),oi=s("code"),sp=i("__init__"),np=i(`
function, such as `),ii=s("code"),op=i("num_train_timesteps"),ip=i(". They can be accessed via "),ai=s("code"),ap=i("scheduler.config.num_train_timesteps"),dp=i(`.
`),dn=s("a"),lp=i("~ConfigMixin"),cp=i(" also provides general loading and saving functionality via the "),ln=s("a"),up=i("save_config()"),fp=i(` and
`),cn=s("a"),pp=i("from_config()"),hp=i(" functions."),mp=l(),mt=s("div"),p(Ir.$$.fragment),gp=l(),di=s("p"),_p=i("Compute a linear multistep coefficient."),vp=l(),gt=s("div"),p(Lr.$$.fragment),bp=l(),Kr=s("p"),Sp=i("Scales the denoising model input by "),li=s("code"),$p=i("(sigma**2 + 1) ** 0.5"),Dp=i(" to match the K-LMS algorithm."),Ep=l(),_t=s("div"),p(qr.$$.fragment),xp=l(),ci=s("p"),yp=i("Sets the timesteps used for the diffusion chain. Supporting function to be run before inference."),wp=l(),vt=s("div"),p(Ur.$$.fragment),Mp=l(),ui=s("p"),Pp=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Ja=l(),Ce=s("h4"),bt=s("a"),fi=s("span"),p(Br.$$.fragment),Tp=l(),pi=s("span"),kp=i("Pseudo numerical methods for diffusion models (PNDM)"),ja=l(),St=s("p"),Ap=i("Original implementation can be found "),Hr=s("a"),Cp=i("here"),Op=i("."),Qa=l(),$=s("div"),p(Rr.$$.fragment),Vp=l(),hi=s("p"),Np=i(`Pseudo numerical methods for diffusion models (PNDM) proposes using more advanced ODE integration techniques,
namely Runge-Kutta method and a linear multi-step method.`),Fp=l(),O=s("p"),un=s("a"),Ip=i("~ConfigMixin"),Lp=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),mi=s("code"),Kp=i("__init__"),qp=i(`
function, such as `),gi=s("code"),Up=i("num_train_timesteps"),Bp=i(". They can be accessed via "),_i=s("code"),Hp=i("scheduler.config.num_train_timesteps"),Rp=i(`.
`),fn=s("a"),Wp=i("~ConfigMixin"),Gp=i(" also provides general loading and saving functionality via the "),pn=s("a"),Yp=i("save_config()"),zp=i(` and
`),hn=s("a"),Jp=i("from_config()"),jp=i(" functions."),Qp=l(),mn=s("p"),Xp=i("For more details, see the original paper: "),Wr=s("a"),Zp=i("https://arxiv.org/abs/2202.09778"),eh=l(),$t=s("div"),p(Gr.$$.fragment),th=l(),vi=s("p"),rh=i(`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),sh=l(),Dt=s("div"),p(Yr.$$.fragment),nh=l(),bi=s("p"),oh=i("Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),ih=l(),he=s("div"),p(zr.$$.fragment),ah=l(),Si=s("p"),dh=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),lh=l(),ue=s("p"),ch=i("This function calls "),$i=s("code"),uh=i("step_prk()"),fh=i(" or "),Di=s("code"),ph=i("step_plms()"),hh=i(" depending on the internal variable "),Ei=s("code"),mh=i("counter"),gh=i("."),_h=l(),Et=s("div"),p(Jr.$$.fragment),vh=l(),xi=s("p"),bh=i(`Step function propagating the sample with the linear multi-step method. This has one forward pass with multiple
times to approximate the solution.`),Sh=l(),xt=s("div"),p(jr.$$.fragment),$h=l(),yi=s("p"),Dh=i(`Step function propagating the sample with the Runge-Kutta method. RK takes 4 forward passes to approximate the
solution to the differential equation.`),Xa=l(),Oe=s("h4"),yt=s("a"),wi=s("span"),p(Qr.$$.fragment),Eh=l(),Mi=s("span"),xh=i("variance exploding stochastic differential equation (VE-SDE) scheduler"),Za=l(),wt=s("p"),yh=i("Original paper can be found "),Xr=s("a"),wh=i("here"),Mh=i("."),ed=l(),D=s("div"),p(Zr.$$.fragment),Ph=l(),Pi=s("p"),Th=i("The variance exploding stochastic differential equation (SDE) scheduler."),kh=l(),gn=s("p"),Ah=i("For more information, see the original paper: "),es=s("a"),Ch=i("https://arxiv.org/abs/2011.13456"),Oh=l(),V=s("p"),_n=s("a"),Vh=i("~ConfigMixin"),Nh=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),Ti=s("code"),Fh=i("__init__"),Ih=i(`
function, such as `),ki=s("code"),Lh=i("num_train_timesteps"),Kh=i(". They can be accessed via "),Ai=s("code"),qh=i("scheduler.config.num_train_timesteps"),Uh=i(`.
`),vn=s("a"),Bh=i("~ConfigMixin"),Hh=i(" also provides general loading and saving functionality via the "),bn=s("a"),Rh=i("save_config()"),Wh=i(` and
`),Sn=s("a"),Gh=i("from_config()"),Yh=i(" functions."),zh=l(),Mt=s("div"),p(ts.$$.fragment),Jh=l(),Ci=s("p"),jh=i(`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),Qh=l(),me=s("div"),p(rs.$$.fragment),Xh=l(),Oi=s("p"),Zh=i("Sets the noise scales used for the diffusion chain. Supporting function to be run before inference."),em=l(),Ve=s("p"),tm=i("The sigmas control the weight of the "),Vi=s("code"),rm=i("drift"),sm=i(" and "),Ni=s("code"),nm=i("diffusion"),om=i(" components of sample update."),im=l(),Pt=s("div"),p(ss.$$.fragment),am=l(),Fi=s("p"),dm=i("Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),lm=l(),Tt=s("div"),p(ns.$$.fragment),cm=l(),Ii=s("p"),um=i(`Correct the predicted sample based on the output model_output of the network. This is often run repeatedly
after making the prediction for the previous timestep.`),fm=l(),kt=s("div"),p(os.$$.fragment),pm=l(),Li=s("p"),hm=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),td=l(),Ne=s("h4"),At=s("a"),Ki=s("span"),p(is.$$.fragment),mm=l(),qi=s("span"),gm=i("improved pseudo numerical methods for diffusion models (iPNDM)"),rd=l(),Ct=s("p"),_m=i("Original implementation can be found "),as=s("a"),vm=i("here"),bm=i("."),sd=l(),M=s("div"),p(ds.$$.fragment),Sm=l(),$n=s("p"),$m=i(`Improved Pseudo numerical methods for diffusion models (iPNDM) ported from @crowsonkb\u2019s amazing k-diffusion
`),ls=s("a"),Dm=i("library"),Em=l(),N=s("p"),Dn=s("a"),xm=i("~ConfigMixin"),ym=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),Ui=s("code"),wm=i("__init__"),Mm=i(`
function, such as `),Bi=s("code"),Pm=i("num_train_timesteps"),Tm=i(". They can be accessed via "),Hi=s("code"),km=i("scheduler.config.num_train_timesteps"),Am=i(`.
`),En=s("a"),Cm=i("~ConfigMixin"),Om=i(" also provides general loading and saving functionality via the "),xn=s("a"),Vm=i("save_config()"),Nm=i(` and
`),yn=s("a"),Fm=i("from_config()"),Im=i(" functions."),Lm=l(),wn=s("p"),Km=i("For more details, see the original paper: "),cs=s("a"),qm=i("https://arxiv.org/abs/2202.09778"),Um=l(),Ot=s("div"),p(us.$$.fragment),Bm=l(),Ri=s("p"),Hm=i(`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),Rm=l(),Vt=s("div"),p(fs.$$.fragment),Wm=l(),Wi=s("p"),Gm=i("Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),Ym=l(),Nt=s("div"),p(ps.$$.fragment),zm=l(),Gi=s("p"),Jm=i(`Step function propagating the sample with the linear multi-step method. This has one forward pass with multiple
times to approximate the solution.`),nd=l(),Fe=s("h4"),Ft=s("a"),Yi=s("span"),p(hs.$$.fragment),jm=l(),zi=s("span"),Qm=i("variance preserving stochastic differential equation (VP-SDE) scheduler"),od=l(),It=s("p"),Xm=i("Original paper can be found "),ms=s("a"),Zm=i("here"),eg=i("."),id=l(),p(Lt.$$.fragment),ad=l(),G=s("div"),p(gs.$$.fragment),tg=l(),Ji=s("p"),rg=i("The variance preserving stochastic differential equation (SDE) scheduler."),sg=l(),F=s("p"),Mn=s("a"),ng=i("~ConfigMixin"),og=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),ji=s("code"),ig=i("__init__"),ag=i(`
function, such as `),Qi=s("code"),dg=i("num_train_timesteps"),lg=i(". They can be accessed via "),Xi=s("code"),cg=i("scheduler.config.num_train_timesteps"),ug=i(`.
`),Pn=s("a"),fg=i("~ConfigMixin"),pg=i(" also provides general loading and saving functionality via the "),Tn=s("a"),hg=i("save_config()"),mg=i(` and
`),kn=s("a"),gg=i("from_config()"),_g=i(" functions."),vg=l(),An=s("p"),bg=i("For more information, see the original paper: "),_s=s("a"),Sg=i("https://arxiv.org/abs/2011.13456"),$g=l(),Zi=s("p"),Dg=i("UNDER CONSTRUCTION"),dd=l(),Ie=s("h4"),Kt=s("a"),ea=s("span"),p(vs.$$.fragment),Eg=l(),ta=s("span"),xg=i("Euler scheduler"),ld=l(),ge=s("p"),yg=i("Euler scheduler (Algorithm 2) from the paper "),bs=s("a"),wg=i("Elucidating the Design Space of Diffusion-Based Generative Models"),Mg=i(" by Karras et al. (2022). Based on the original "),Ss=s("a"),Pg=i("k-diffusion"),Tg=i(` implementation by Katherine Crowson.
Fast scheduler which often times generates good outputs with 20-30 steps.`),cd=l(),B=s("div"),p($s.$$.fragment),kg=l(),qt=s("p"),Ag=i("Euler scheduler (Algorithm 2) from Karras et al. (2022) "),Ds=s("a"),Cg=i("https://arxiv.org/abs/2206.00364"),Og=i(`. . Based on the original
k-diffusion implementation by Katherine Crowson:
`),Es=s("a"),Vg=i("https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L51"),Ng=l(),I=s("p"),Cn=s("a"),Fg=i("~ConfigMixin"),Ig=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),ra=s("code"),Lg=i("__init__"),Kg=i(`
function, such as `),sa=s("code"),qg=i("num_train_timesteps"),Ug=i(". They can be accessed via "),na=s("code"),Bg=i("scheduler.config.num_train_timesteps"),Hg=i(`.
`),On=s("a"),Rg=i("~ConfigMixin"),Wg=i(" also provides general loading and saving functionality via the "),Vn=s("a"),Gg=i("save_config()"),Yg=i(` and
`),Nn=s("a"),zg=i("from_config()"),Jg=i(" functions."),jg=l(),Ut=s("div"),p(xs.$$.fragment),Qg=l(),ys=s("p"),Xg=i("Scales the denoising model input by "),oa=s("code"),Zg=i("(sigma**2 + 1) ** 0.5"),e_=i(" to match the Euler algorithm."),t_=l(),Bt=s("div"),p(ws.$$.fragment),r_=l(),ia=s("p"),s_=i("Sets the timesteps used for the diffusion chain. Supporting function to be run before inference."),n_=l(),Ht=s("div"),p(Ms.$$.fragment),o_=l(),aa=s("p"),i_=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),ud=l(),Le=s("h4"),Rt=s("a"),da=s("span"),p(Ps.$$.fragment),a_=l(),la=s("span"),d_=i("Euler Ancestral scheduler"),fd=l(),Fn=s("p"),l_=i(`Ancestral sampling with Euler method steps. Based on the original (k-diffusion)[https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L72] implementation by Katherine Crowson.
Fast scheduler which often times generates good outputs with 20-30 steps.`),pd=l(),H=s("div"),p(Ts.$$.fragment),c_=l(),In=s("p"),u_=i(`Ancestral sampling with Euler method steps. Based on the original k-diffusion implementation by Katherine Crowson:
`),ks=s("a"),f_=i("https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L72"),p_=l(),L=s("p"),Ln=s("a"),h_=i("~ConfigMixin"),m_=i(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),ca=s("code"),g_=i("__init__"),__=i(`
function, such as `),ua=s("code"),v_=i("num_train_timesteps"),b_=i(". They can be accessed via "),fa=s("code"),S_=i("scheduler.config.num_train_timesteps"),$_=i(`.
`),Kn=s("a"),D_=i("~ConfigMixin"),E_=i(" also provides general loading and saving functionality via the "),qn=s("a"),x_=i("save_config()"),y_=i(` and
`),Un=s("a"),w_=i("from_config()"),M_=i(" functions."),P_=l(),Wt=s("div"),p(As.$$.fragment),T_=l(),Cs=s("p"),k_=i("Scales the denoising model input by "),pa=s("code"),A_=i("(sigma**2 + 1) ** 0.5"),C_=i(" to match the Euler algorithm."),O_=l(),Gt=s("div"),p(Os.$$.fragment),V_=l(),ha=s("p"),N_=i("Sets the timesteps used for the diffusion chain. Supporting function to be run before inference."),F_=l(),Yt=s("div"),p(Vs.$$.fragment),I_=l(),ma=s("p"),L_=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),this.h()},l(t){const u=e0('[data-svelte="svelte-1phssyn"]',document.head);R=n(u,"META",{name:!0,content:!0}),u.forEach(r),Ke=c(t),W=n(t,"H1",{class:!0});var Ns=o(W);de=n(Ns,"A",{id:!0,class:!0,href:!0});var J_=o(de);Jn=n(J_,"SPAN",{});var j_=o(Jn);h(Jt.$$.fragment,j_),j_.forEach(r),J_.forEach(r),Tl=c(Ns),jn=n(Ns,"SPAN",{});var Q_=o(jn);kl=a(Q_,"Schedulers"),Q_.forEach(r),Ns.forEach(r),ba=c(t),Fs=n(t,"P",{});var X_=o(Fs);Al=a(X_,"Diffusers contains multiple pre-built schedule functions for the diffusion process."),X_.forEach(r),Sa=c(t),ve=n(t,"H2",{class:!0});var md=o(ve);qe=n(md,"A",{id:!0,class:!0,href:!0});var Z_=o(qe);Qn=n(Z_,"SPAN",{});var ev=o(Qn);h(jt.$$.fragment,ev),ev.forEach(r),Z_.forEach(r),Cl=c(md),Xn=n(md,"SPAN",{});var tv=o(Xn);Ol=a(tv,"What is a scheduler?"),tv.forEach(r),md.forEach(r),$a=c(t),Ue=n(t,"P",{});var gd=o(Ue);Vl=a(gd,"The schedule functions, denoted "),Zn=n(gd,"EM",{});var rv=o(Zn);Nl=a(rv,"Schedulers"),rv.forEach(r),Fl=a(gd," in the library take in the output of a trained model, a sample which the diffusion process is iterating on, and a timestep to return a denoised sample."),gd.forEach(r),Da=c(t),Be=n(t,"UL",{});var _d=o(Be);Is=n(_d,"LI",{});var K_=o(Is);Il=a(K_,"Schedulers define the methodology for iteratively adding noise to an image or for updating a sample based on model outputs."),Qt=n(K_,"UL",{});var vd=o(Qt);eo=n(vd,"LI",{});var sv=o(eo);Ll=a(sv,"adding noise in different manners represent the algorithmic processes to train a diffusion model by adding noise to images."),sv.forEach(r),Kl=c(vd),to=n(vd,"LI",{});var nv=o(to);ql=a(nv,"for inference, the scheduler defines how to update a sample based on an output from a pretrained model."),nv.forEach(r),vd.forEach(r),K_.forEach(r),Ul=c(_d),be=n(_d,"LI",{});var Bn=o(be);Bl=a(Bn,"Schedulers are often defined by a "),ro=n(Bn,"EM",{});var ov=o(ro);Hl=a(ov,"noise schedule"),ov.forEach(r),Rl=a(Bn," and an "),so=n(Bn,"EM",{});var iv=o(so);Wl=a(iv,"update rule"),iv.forEach(r),Gl=a(Bn," to solve the differential equation solution."),Bn.forEach(r),_d.forEach(r),Ea=c(t),Se=n(t,"H3",{class:!0});var bd=o(Se);He=n(bd,"A",{id:!0,class:!0,href:!0});var av=o(He);no=n(av,"SPAN",{});var dv=o(no);h(Xt.$$.fragment,dv),dv.forEach(r),av.forEach(r),Yl=c(bd),oo=n(bd,"SPAN",{});var lv=o(oo);zl=a(lv,"Discrete versus continuous schedulers"),lv.forEach(r),bd.forEach(r),xa=c(t),P=n(t,"P",{});var se=o(P);Jl=a(se,`All schedulers take in a timestep to predict the updated version of the sample being diffused.
The timesteps dictate where in the diffusion process the step is, where data is generated by iterating forward in time and inference is executed by propagating backwards through timesteps.
Different algorithms use timesteps that both discrete (accepting `),io=n(se,"CODE",{});var cv=o(io);jl=a(cv,"int"),cv.forEach(r),Ql=a(se," inputs), such as the "),Ls=n(se,"A",{href:!0});var uv=o(Ls);Xl=a(uv,"DDPMScheduler"),uv.forEach(r),Zl=a(se," or "),Ks=n(se,"A",{href:!0});var fv=o(Ks);ec=a(fv,"PNDMScheduler"),fv.forEach(r),tc=a(se,", and continuous (accepting "),ao=n(se,"CODE",{});var pv=o(ao);rc=a(pv,"float"),pv.forEach(r),sc=a(se," inputs), such as the score-based schedulers "),qs=n(se,"A",{href:!0});var hv=o(qs);nc=a(hv,"ScoreSdeVeScheduler"),hv.forEach(r),oc=a(se," or "),lo=n(se,"CODE",{});var mv=o(lo);ic=a(mv,"ScoreSdeVpScheduler"),mv.forEach(r),ac=a(se,"."),se.forEach(r),ya=c(t),$e=n(t,"H2",{class:!0});var Sd=o($e);Re=n(Sd,"A",{id:!0,class:!0,href:!0});var gv=o(Re);co=n(gv,"SPAN",{});var _v=o(co);h(Zt.$$.fragment,_v),_v.forEach(r),gv.forEach(r),dc=c(Sd),uo=n(Sd,"SPAN",{});var vv=o(uo);lc=a(vv,"Designing Re-usable schedulers"),vv.forEach(r),Sd.forEach(r),wa=c(t),Us=n(t,"P",{});var bv=o(Us);cc=a(bv,`The core design principle between the schedule functions is to be model, system, and framework independent.
This allows for rapid experimentation and cleaner abstractions in the code, where the model prediction is separated from the sample update.
To this end, the design of schedulers is such that:`),bv.forEach(r),Ma=c(t),We=n(t,"UL",{});var $d=o(We);fo=n($d,"LI",{});var Sv=o(fo);uc=a(Sv,"Schedulers can be used interchangeably between diffusion models in inference to find the preferred trade-off between speed and generation quality."),Sv.forEach(r),fc=c($d),po=n($d,"LI",{});var $v=o(po);pc=a($v,"Schedulers are currently by default in PyTorch, but are designed to be framework independent (partial Jax support currently exists)."),$v.forEach(r),$d.forEach(r),Pa=c(t),De=n(t,"H2",{class:!0});var Dd=o(De);Ge=n(Dd,"A",{id:!0,class:!0,href:!0});var Dv=o(Ge);ho=n(Dv,"SPAN",{});var Ev=o(ho);h(er.$$.fragment,Ev),Ev.forEach(r),Dv.forEach(r),hc=c(Dd),mo=n(Dd,"SPAN",{});var xv=o(mo);mc=a(xv,"API"),xv.forEach(r),Dd.forEach(r),Ta=c(t),Bs=n(t,"P",{});var yv=o(Bs);gc=a(yv,"The core API for any new scheduler must follow a limited structure."),yv.forEach(r),ka=c(t),fe=n(t,"UL",{});var Hn=o(fe);tr=n(Hn,"LI",{});var Ed=o(tr);_c=a(Ed,"Schedulers should provide one or more "),go=n(Ed,"CODE",{});var wv=o(go);vc=a(wv,"def step(...)"),wv.forEach(r),bc=a(Ed," functions that should be called to update the generated sample iteratively."),Ed.forEach(r),Sc=c(Hn),rr=n(Hn,"LI",{});var xd=o(rr);$c=a(xd,"Schedulers should provide a "),_o=n(xd,"CODE",{});var Mv=o(_o);Dc=a(Mv,"set_timesteps(...)"),Mv.forEach(r),Ec=a(xd," method that configures the parameters of a schedule function for a specific inference task."),xd.forEach(r),xc=c(Hn),vo=n(Hn,"LI",{});var Pv=o(vo);yc=a(Pv,"Schedulers should be framework-specific."),Pv.forEach(r),Hn.forEach(r),Aa=c(t),Ye=n(t,"P",{});var yd=o(Ye);wc=a(yd,"The base class "),Hs=n(yd,"A",{href:!0});var Tv=o(Hs);Mc=a(Tv,"SchedulerMixin"),Tv.forEach(r),Pc=a(yd," implements low level utilities used by multiple schedulers."),yd.forEach(r),Ca=c(t),Ee=n(t,"H3",{class:!0});var wd=o(Ee);ze=n(wd,"A",{id:!0,class:!0,href:!0});var kv=o(ze);bo=n(kv,"SPAN",{});var Av=o(bo);h(sr.$$.fragment,Av),Av.forEach(r),kv.forEach(r),Tc=c(wd),So=n(wd,"SPAN",{});var Cv=o(So);kc=a(Cv,"SchedulerMixin"),Cv.forEach(r),wd.forEach(r),Oa=c(t),xe=n(t,"DIV",{class:!0});var Md=o(xe);h(nr.$$.fragment,Md),Ac=c(Md),$o=n(Md,"P",{});var Ov=o($o);Cc=a(Ov,"Mixin containing common functions for the schedulers."),Ov.forEach(r),Md.forEach(r),Va=c(t),ye=n(t,"H3",{class:!0});var Pd=o(ye);Je=n(Pd,"A",{id:!0,class:!0,href:!0});var Vv=o(Je);Do=n(Vv,"SPAN",{});var Nv=o(Do);h(or.$$.fragment,Nv),Nv.forEach(r),Vv.forEach(r),Oc=c(Pd),Eo=n(Pd,"SPAN",{});var Fv=o(Eo);Vc=a(Fv,"SchedulerOutput"),Fv.forEach(r),Pd.forEach(r),Na=a(t,"\n\nThe class `SchedulerOutput` contains the outputs from any schedulers `step(...)` call.\n"),we=n(t,"DIV",{class:!0});var Td=o(we);h(ir.$$.fragment,Td),Nc=c(Td),xo=n(Td,"P",{});var Iv=o(xo);Fc=a(Iv,"Base class for the scheduler\u2019s step function output."),Iv.forEach(r),Td.forEach(r),Fa=c(t),Me=n(t,"H3",{class:!0});var kd=o(Me);je=n(kd,"A",{id:!0,class:!0,href:!0});var Lv=o(je);yo=n(Lv,"SPAN",{});var Kv=o(yo);h(ar.$$.fragment,Kv),Kv.forEach(r),Lv.forEach(r),Ic=c(kd),wo=n(kd,"SPAN",{});var qv=o(wo);Lc=a(qv,"Implemented Schedulers"),qv.forEach(r),kd.forEach(r),Ia=c(t),Pe=n(t,"H4",{class:!0});var Ad=o(Pe);Qe=n(Ad,"A",{id:!0,class:!0,href:!0});var Uv=o(Qe);Mo=n(Uv,"SPAN",{});var Bv=o(Mo);h(dr.$$.fragment,Bv),Bv.forEach(r),Uv.forEach(r),Kc=c(Ad),Po=n(Ad,"SPAN",{});var Hv=o(Po);qc=a(Hv,"Denoising diffusion implicit models (DDIM)"),Hv.forEach(r),Ad.forEach(r),La=c(t),Rs=n(t,"P",{});var Rv=o(Rs);Uc=a(Rv,"Original paper can be found here."),Rv.forEach(r),Ka=c(t),x=n(t,"DIV",{class:!0});var ne=o(x);h(lr.$$.fragment,ne),Bc=c(ne),To=n(ne,"P",{});var Wv=o(To);Hc=a(Wv,`Denoising diffusion implicit models is a scheduler that extends the denoising procedure introduced in denoising
diffusion probabilistic models (DDPMs) with non-Markovian guidance.`),Wv.forEach(r),Rc=c(ne),T=n(ne,"P",{});var Y=o(T);Ws=n(Y,"A",{href:!0});var Gv=o(Ws);Wc=a(Gv,"~ConfigMixin"),Gv.forEach(r),Gc=a(Y," takes care of storing all config attributes that are passed in the scheduler\u2019s "),ko=n(Y,"CODE",{});var Yv=o(ko);Yc=a(Yv,"__init__"),Yv.forEach(r),zc=a(Y,`
function, such as `),Ao=n(Y,"CODE",{});var zv=o(Ao);Jc=a(zv,"num_train_timesteps"),zv.forEach(r),jc=a(Y,". They can be accessed via "),Co=n(Y,"CODE",{});var Jv=o(Co);Qc=a(Jv,"scheduler.config.num_train_timesteps"),Jv.forEach(r),Xc=a(Y,`.
`),Gs=n(Y,"A",{href:!0});var jv=o(Gs);Zc=a(jv,"~ConfigMixin"),jv.forEach(r),eu=a(Y," also provides general loading and saving functionality via the "),Ys=n(Y,"A",{href:!0});var Qv=o(Ys);tu=a(Qv,"save_config()"),Qv.forEach(r),ru=a(Y,` and
`),zs=n(Y,"A",{href:!0});var Xv=o(zs);su=a(Xv,"from_config()"),Xv.forEach(r),nu=a(Y," functions."),Y.forEach(r),ou=c(ne),Js=n(ne,"P",{});var q_=o(Js);iu=a(q_,"For more details, see the original paper: "),cr=n(q_,"A",{href:!0,rel:!0});var Zv=o(cr);au=a(Zv,"https://arxiv.org/abs/2010.02502"),Zv.forEach(r),q_.forEach(r),du=c(ne),Xe=n(ne,"DIV",{class:!0});var Cd=o(Xe);h(ur.$$.fragment,Cd),lu=c(Cd),Oo=n(Cd,"P",{});var eb=o(Oo);cu=a(eb,`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),eb.forEach(r),Cd.forEach(r),uu=c(ne),Ze=n(ne,"DIV",{class:!0});var Od=o(Ze);h(fr.$$.fragment,Od),fu=c(Od),Vo=n(Od,"P",{});var tb=o(Vo);pu=a(tb,"Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),tb.forEach(r),Od.forEach(r),hu=c(ne),et=n(ne,"DIV",{class:!0});var Vd=o(et);h(pr.$$.fragment,Vd),mu=c(Vd),No=n(Vd,"P",{});var rb=o(No);gu=a(rb,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),rb.forEach(r),Vd.forEach(r),ne.forEach(r),qa=c(t),Te=n(t,"H4",{class:!0});var Nd=o(Te);tt=n(Nd,"A",{id:!0,class:!0,href:!0});var sb=o(tt);Fo=n(sb,"SPAN",{});var nb=o(Fo);h(hr.$$.fragment,nb),nb.forEach(r),sb.forEach(r),_u=c(Nd),Io=n(Nd,"SPAN",{});var ob=o(Io);vu=a(ob,"Denoising diffusion probabilistic models (DDPM)"),ob.forEach(r),Nd.forEach(r),Ua=c(t),rt=n(t,"P",{});var Fd=o(rt);bu=a(Fd,"Original paper can be found "),mr=n(Fd,"A",{href:!0,rel:!0});var ib=o(mr);Su=a(ib,"here"),ib.forEach(r),$u=a(Fd,"."),Fd.forEach(r),Ba=c(t),y=n(t,"DIV",{class:!0});var oe=o(y);h(gr.$$.fragment,oe),Du=c(oe),Lo=n(oe,"P",{});var ab=o(Lo);Eu=a(ab,`Denoising diffusion probabilistic models (DDPMs) explores the connections between denoising score matching and
Langevin dynamics sampling.`),ab.forEach(r),xu=c(oe),k=n(oe,"P",{});var z=o(k);js=n(z,"A",{href:!0});var db=o(js);yu=a(db,"~ConfigMixin"),db.forEach(r),wu=a(z," takes care of storing all config attributes that are passed in the scheduler\u2019s "),Ko=n(z,"CODE",{});var lb=o(Ko);Mu=a(lb,"__init__"),lb.forEach(r),Pu=a(z,`
function, such as `),qo=n(z,"CODE",{});var cb=o(qo);Tu=a(cb,"num_train_timesteps"),cb.forEach(r),ku=a(z,". They can be accessed via "),Uo=n(z,"CODE",{});var ub=o(Uo);Au=a(ub,"scheduler.config.num_train_timesteps"),ub.forEach(r),Cu=a(z,`.
`),Qs=n(z,"A",{href:!0});var fb=o(Qs);Ou=a(fb,"~ConfigMixin"),fb.forEach(r),Vu=a(z," also provides general loading and saving functionality via the "),Xs=n(z,"A",{href:!0});var pb=o(Xs);Nu=a(pb,"save_config()"),pb.forEach(r),Fu=a(z,` and
`),Zs=n(z,"A",{href:!0});var hb=o(Zs);Iu=a(hb,"from_config()"),hb.forEach(r),Lu=a(z," functions."),z.forEach(r),Ku=c(oe),en=n(oe,"P",{});var U_=o(en);qu=a(U_,"For more details, see the original paper: "),_r=n(U_,"A",{href:!0,rel:!0});var mb=o(_r);Uu=a(mb,"https://arxiv.org/abs/2006.11239"),mb.forEach(r),U_.forEach(r),Bu=c(oe),st=n(oe,"DIV",{class:!0});var Id=o(st);h(vr.$$.fragment,Id),Hu=c(Id),Bo=n(Id,"P",{});var gb=o(Bo);Ru=a(gb,`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),gb.forEach(r),Id.forEach(r),Wu=c(oe),nt=n(oe,"DIV",{class:!0});var Ld=o(nt);h(br.$$.fragment,Ld),Gu=c(Ld),Ho=n(Ld,"P",{});var _b=o(Ho);Yu=a(_b,"Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),_b.forEach(r),Ld.forEach(r),zu=c(oe),ot=n(oe,"DIV",{class:!0});var Kd=o(ot);h(Sr.$$.fragment,Kd),Ju=c(Kd),Ro=n(Kd,"P",{});var vb=o(Ro);ju=a(vb,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),vb.forEach(r),Kd.forEach(r),oe.forEach(r),Ha=c(t),ke=n(t,"H4",{class:!0});var qd=o(ke);it=n(qd,"A",{id:!0,class:!0,href:!0});var bb=o(it);Wo=n(bb,"SPAN",{});var Sb=o(Wo);h($r.$$.fragment,Sb),Sb.forEach(r),bb.forEach(r),Qu=c(qd),Go=n(qd,"SPAN",{});var $b=o(Go);Xu=a($b,"Variance exploding, stochastic sampling from Karras et. al"),$b.forEach(r),qd.forEach(r),Ra=c(t),at=n(t,"P",{});var Ud=o(at);Zu=a(Ud,"Original paper can be found "),Dr=n(Ud,"A",{href:!0,rel:!0});var Db=o(Dr);ef=a(Db,"here"),Db.forEach(r),tf=a(Ud,"."),Ud.forEach(r),Wa=c(t),S=n(t,"DIV",{class:!0});var E=o(S);h(Er.$$.fragment,E),rf=c(E),Yo=n(E,"P",{});var Eb=o(Yo);sf=a(Eb,`Stochastic sampling from Karras et al. [1] tailored to the Variance-Expanding (VE) models [2]. Use Algorithm 2 and
the VE column of Table 1 from [1] for reference.`),Eb.forEach(r),nf=c(E),dt=n(E,"P",{});var ga=o(dt);of=a(ga,`[1] Karras, Tero, et al. \u201CElucidating the Design Space of Diffusion-Based Generative Models.\u201D
`),xr=n(ga,"A",{href:!0,rel:!0});var xb=o(xr);af=a(xb,"https://arxiv.org/abs/2206.00364"),xb.forEach(r),df=a(ga,` [2] Song, Yang, et al. \u201CScore-based generative modeling through stochastic
differential equations.\u201D `),yr=n(ga,"A",{href:!0,rel:!0});var yb=o(yr);lf=a(yb,"https://arxiv.org/abs/2011.13456"),yb.forEach(r),ga.forEach(r),cf=c(E),A=n(E,"P",{});var J=o(A);tn=n(J,"A",{href:!0});var wb=o(tn);uf=a(wb,"~ConfigMixin"),wb.forEach(r),ff=a(J," takes care of storing all config attributes that are passed in the scheduler\u2019s "),zo=n(J,"CODE",{});var Mb=o(zo);pf=a(Mb,"__init__"),Mb.forEach(r),hf=a(J,`
function, such as `),Jo=n(J,"CODE",{});var Pb=o(Jo);mf=a(Pb,"num_train_timesteps"),Pb.forEach(r),gf=a(J,". They can be accessed via "),jo=n(J,"CODE",{});var Tb=o(jo);_f=a(Tb,"scheduler.config.num_train_timesteps"),Tb.forEach(r),vf=a(J,`.
`),rn=n(J,"A",{href:!0});var kb=o(rn);bf=a(kb,"~ConfigMixin"),kb.forEach(r),Sf=a(J," also provides general loading and saving functionality via the "),sn=n(J,"A",{href:!0});var Ab=o(sn);$f=a(Ab,"save_config()"),Ab.forEach(r),Df=a(J,` and
`),nn=n(J,"A",{href:!0});var Cb=o(nn);Ef=a(Cb,"from_config()"),Cb.forEach(r),xf=a(J," functions."),J.forEach(r),yf=c(E),wr=n(E,"P",{});var Bd=o(wr);wf=a(Bd,`For more details on the parameters, see the original paper\u2019s Appendix E.: \u201CElucidating the Design Space of
Diffusion-Based Generative Models.\u201D `),Mr=n(Bd,"A",{href:!0,rel:!0});var Ob=o(Mr);Mf=a(Ob,"https://arxiv.org/abs/2206.00364"),Ob.forEach(r),Pf=a(Bd,`. The grid search values used to find the
optimal {s_noise, s_churn, s_min, s_max} for a specific model are described in Table 5 of the paper.`),Bd.forEach(r),Tf=c(E),pe=n(E,"DIV",{class:!0});var Rn=o(pe);h(Pr.$$.fragment,Rn),kf=c(Rn),Qo=n(Rn,"P",{});var Vb=o(Qo);Af=a(Vb,`Explicit Langevin-like \u201Cchurn\u201D step of adding noise to the sample according to a factor gamma_i \u2265 0 to reach a
higher noise level sigma_hat = sigma_i + gamma_i*sigma_i.`),Vb.forEach(r),Cf=c(Rn),Xo=n(Rn,"P",{});var Nb=o(Xo);Of=a(Nb,"TODO Args:"),Nb.forEach(r),Rn.forEach(r),Vf=c(E),lt=n(E,"DIV",{class:!0});var Hd=o(lt);h(Tr.$$.fragment,Hd),Nf=c(Hd),Zo=n(Hd,"P",{});var Fb=o(Zo);Ff=a(Fb,`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),Fb.forEach(r),Hd.forEach(r),If=c(E),ct=n(E,"DIV",{class:!0});var Rd=o(ct);h(kr.$$.fragment,Rd),Lf=c(Rd),ei=n(Rd,"P",{});var Ib=o(ei);Kf=a(Ib,"Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),Ib.forEach(r),Rd.forEach(r),qf=c(E),ut=n(E,"DIV",{class:!0});var Wd=o(ut);h(Ar.$$.fragment,Wd),Uf=c(Wd),ti=n(Wd,"P",{});var Lb=o(ti);Bf=a(Lb,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Lb.forEach(r),Wd.forEach(r),Hf=c(E),ft=n(E,"DIV",{class:!0});var Gd=o(ft);h(Cr.$$.fragment,Gd),Rf=c(Gd),ri=n(Gd,"P",{});var Kb=o(ri);Wf=a(Kb,"Correct the predicted sample based on the output model_output of the network. TODO complete description"),Kb.forEach(r),Gd.forEach(r),E.forEach(r),Ga=c(t),Ae=n(t,"H4",{class:!0});var Yd=o(Ae);pt=n(Yd,"A",{id:!0,class:!0,href:!0});var qb=o(pt);si=n(qb,"SPAN",{});var Ub=o(si);h(Or.$$.fragment,Ub),Ub.forEach(r),qb.forEach(r),Gf=c(Yd),ni=n(Yd,"SPAN",{});var Bb=o(ni);Yf=a(Bb,"Linear multistep scheduler for discrete beta schedules"),Bb.forEach(r),Yd.forEach(r),Ya=c(t),ht=n(t,"P",{});var zd=o(ht);zf=a(zd,"Original implementation can be found "),Vr=n(zd,"A",{href:!0,rel:!0});var Hb=o(Vr);Jf=a(Hb,"here"),Hb.forEach(r),jf=a(zd,"."),zd.forEach(r),za=c(t),w=n(t,"DIV",{class:!0});var ie=o(w);h(Nr.$$.fragment,ie),Qf=c(ie),on=n(ie,"P",{});var B_=o(on);Xf=a(B_,`Linear Multistep Scheduler for discrete beta schedules. Based on the original k-diffusion implementation by
Katherine Crowson:
`),Fr=n(B_,"A",{href:!0,rel:!0});var Rb=o(Fr);Zf=a(Rb,"https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),Rb.forEach(r),B_.forEach(r),ep=c(ie),C=n(ie,"P",{});var j=o(C);an=n(j,"A",{href:!0});var Wb=o(an);tp=a(Wb,"~ConfigMixin"),Wb.forEach(r),rp=a(j," takes care of storing all config attributes that are passed in the scheduler\u2019s "),oi=n(j,"CODE",{});var Gb=o(oi);sp=a(Gb,"__init__"),Gb.forEach(r),np=a(j,`
function, such as `),ii=n(j,"CODE",{});var Yb=o(ii);op=a(Yb,"num_train_timesteps"),Yb.forEach(r),ip=a(j,". They can be accessed via "),ai=n(j,"CODE",{});var zb=o(ai);ap=a(zb,"scheduler.config.num_train_timesteps"),zb.forEach(r),dp=a(j,`.
`),dn=n(j,"A",{href:!0});var Jb=o(dn);lp=a(Jb,"~ConfigMixin"),Jb.forEach(r),cp=a(j," also provides general loading and saving functionality via the "),ln=n(j,"A",{href:!0});var jb=o(ln);up=a(jb,"save_config()"),jb.forEach(r),fp=a(j,` and
`),cn=n(j,"A",{href:!0});var Qb=o(cn);pp=a(Qb,"from_config()"),Qb.forEach(r),hp=a(j," functions."),j.forEach(r),mp=c(ie),mt=n(ie,"DIV",{class:!0});var Jd=o(mt);h(Ir.$$.fragment,Jd),gp=c(Jd),di=n(Jd,"P",{});var Xb=o(di);_p=a(Xb,"Compute a linear multistep coefficient."),Xb.forEach(r),Jd.forEach(r),vp=c(ie),gt=n(ie,"DIV",{class:!0});var jd=o(gt);h(Lr.$$.fragment,jd),bp=c(jd),Kr=n(jd,"P",{});var Qd=o(Kr);Sp=a(Qd,"Scales the denoising model input by "),li=n(Qd,"CODE",{});var Zb=o(li);$p=a(Zb,"(sigma**2 + 1) ** 0.5"),Zb.forEach(r),Dp=a(Qd," to match the K-LMS algorithm."),Qd.forEach(r),jd.forEach(r),Ep=c(ie),_t=n(ie,"DIV",{class:!0});var Xd=o(_t);h(qr.$$.fragment,Xd),xp=c(Xd),ci=n(Xd,"P",{});var e1=o(ci);yp=a(e1,"Sets the timesteps used for the diffusion chain. Supporting function to be run before inference."),e1.forEach(r),Xd.forEach(r),wp=c(ie),vt=n(ie,"DIV",{class:!0});var Zd=o(vt);h(Ur.$$.fragment,Zd),Mp=c(Zd),ui=n(Zd,"P",{});var t1=o(ui);Pp=a(t1,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),t1.forEach(r),Zd.forEach(r),ie.forEach(r),Ja=c(t),Ce=n(t,"H4",{class:!0});var el=o(Ce);bt=n(el,"A",{id:!0,class:!0,href:!0});var r1=o(bt);fi=n(r1,"SPAN",{});var s1=o(fi);h(Br.$$.fragment,s1),s1.forEach(r),r1.forEach(r),Tp=c(el),pi=n(el,"SPAN",{});var n1=o(pi);kp=a(n1,"Pseudo numerical methods for diffusion models (PNDM)"),n1.forEach(r),el.forEach(r),ja=c(t),St=n(t,"P",{});var tl=o(St);Ap=a(tl,"Original implementation can be found "),Hr=n(tl,"A",{href:!0,rel:!0});var o1=o(Hr);Cp=a(o1,"here"),o1.forEach(r),Op=a(tl,"."),tl.forEach(r),Qa=c(t),$=n(t,"DIV",{class:!0});var K=o($);h(Rr.$$.fragment,K),Vp=c(K),hi=n(K,"P",{});var i1=o(hi);Np=a(i1,`Pseudo numerical methods for diffusion models (PNDM) proposes using more advanced ODE integration techniques,
namely Runge-Kutta method and a linear multi-step method.`),i1.forEach(r),Fp=c(K),O=n(K,"P",{});var Q=o(O);un=n(Q,"A",{href:!0});var a1=o(un);Ip=a(a1,"~ConfigMixin"),a1.forEach(r),Lp=a(Q," takes care of storing all config attributes that are passed in the scheduler\u2019s "),mi=n(Q,"CODE",{});var d1=o(mi);Kp=a(d1,"__init__"),d1.forEach(r),qp=a(Q,`
function, such as `),gi=n(Q,"CODE",{});var l1=o(gi);Up=a(l1,"num_train_timesteps"),l1.forEach(r),Bp=a(Q,". They can be accessed via "),_i=n(Q,"CODE",{});var c1=o(_i);Hp=a(c1,"scheduler.config.num_train_timesteps"),c1.forEach(r),Rp=a(Q,`.
`),fn=n(Q,"A",{href:!0});var u1=o(fn);Wp=a(u1,"~ConfigMixin"),u1.forEach(r),Gp=a(Q," also provides general loading and saving functionality via the "),pn=n(Q,"A",{href:!0});var f1=o(pn);Yp=a(f1,"save_config()"),f1.forEach(r),zp=a(Q,` and
`),hn=n(Q,"A",{href:!0});var p1=o(hn);Jp=a(p1,"from_config()"),p1.forEach(r),jp=a(Q," functions."),Q.forEach(r),Qp=c(K),mn=n(K,"P",{});var H_=o(mn);Xp=a(H_,"For more details, see the original paper: "),Wr=n(H_,"A",{href:!0,rel:!0});var h1=o(Wr);Zp=a(h1,"https://arxiv.org/abs/2202.09778"),h1.forEach(r),H_.forEach(r),eh=c(K),$t=n(K,"DIV",{class:!0});var rl=o($t);h(Gr.$$.fragment,rl),th=c(rl),vi=n(rl,"P",{});var m1=o(vi);rh=a(m1,`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),m1.forEach(r),rl.forEach(r),sh=c(K),Dt=n(K,"DIV",{class:!0});var sl=o(Dt);h(Yr.$$.fragment,sl),nh=c(sl),bi=n(sl,"P",{});var g1=o(bi);oh=a(g1,"Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),g1.forEach(r),sl.forEach(r),ih=c(K),he=n(K,"DIV",{class:!0});var Wn=o(he);h(zr.$$.fragment,Wn),ah=c(Wn),Si=n(Wn,"P",{});var _1=o(Si);dh=a(_1,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),_1.forEach(r),lh=c(Wn),ue=n(Wn,"P",{});var zt=o(ue);ch=a(zt,"This function calls "),$i=n(zt,"CODE",{});var v1=o($i);uh=a(v1,"step_prk()"),v1.forEach(r),fh=a(zt," or "),Di=n(zt,"CODE",{});var b1=o(Di);ph=a(b1,"step_plms()"),b1.forEach(r),hh=a(zt," depending on the internal variable "),Ei=n(zt,"CODE",{});var S1=o(Ei);mh=a(S1,"counter"),S1.forEach(r),gh=a(zt,"."),zt.forEach(r),Wn.forEach(r),_h=c(K),Et=n(K,"DIV",{class:!0});var nl=o(Et);h(Jr.$$.fragment,nl),vh=c(nl),xi=n(nl,"P",{});var $1=o(xi);bh=a($1,`Step function propagating the sample with the linear multi-step method. This has one forward pass with multiple
times to approximate the solution.`),$1.forEach(r),nl.forEach(r),Sh=c(K),xt=n(K,"DIV",{class:!0});var ol=o(xt);h(jr.$$.fragment,ol),$h=c(ol),yi=n(ol,"P",{});var D1=o(yi);Dh=a(D1,`Step function propagating the sample with the Runge-Kutta method. RK takes 4 forward passes to approximate the
solution to the differential equation.`),D1.forEach(r),ol.forEach(r),K.forEach(r),Xa=c(t),Oe=n(t,"H4",{class:!0});var il=o(Oe);yt=n(il,"A",{id:!0,class:!0,href:!0});var E1=o(yt);wi=n(E1,"SPAN",{});var x1=o(wi);h(Qr.$$.fragment,x1),x1.forEach(r),E1.forEach(r),Eh=c(il),Mi=n(il,"SPAN",{});var y1=o(Mi);xh=a(y1,"variance exploding stochastic differential equation (VE-SDE) scheduler"),y1.forEach(r),il.forEach(r),Za=c(t),wt=n(t,"P",{});var al=o(wt);yh=a(al,"Original paper can be found "),Xr=n(al,"A",{href:!0,rel:!0});var w1=o(Xr);wh=a(w1,"here"),w1.forEach(r),Mh=a(al,"."),al.forEach(r),ed=c(t),D=n(t,"DIV",{class:!0});var q=o(D);h(Zr.$$.fragment,q),Ph=c(q),Pi=n(q,"P",{});var M1=o(Pi);Th=a(M1,"The variance exploding stochastic differential equation (SDE) scheduler."),M1.forEach(r),kh=c(q),gn=n(q,"P",{});var R_=o(gn);Ah=a(R_,"For more information, see the original paper: "),es=n(R_,"A",{href:!0,rel:!0});var P1=o(es);Ch=a(P1,"https://arxiv.org/abs/2011.13456"),P1.forEach(r),R_.forEach(r),Oh=c(q),V=n(q,"P",{});var X=o(V);_n=n(X,"A",{href:!0});var T1=o(_n);Vh=a(T1,"~ConfigMixin"),T1.forEach(r),Nh=a(X," takes care of storing all config attributes that are passed in the scheduler\u2019s "),Ti=n(X,"CODE",{});var k1=o(Ti);Fh=a(k1,"__init__"),k1.forEach(r),Ih=a(X,`
function, such as `),ki=n(X,"CODE",{});var A1=o(ki);Lh=a(A1,"num_train_timesteps"),A1.forEach(r),Kh=a(X,". They can be accessed via "),Ai=n(X,"CODE",{});var C1=o(Ai);qh=a(C1,"scheduler.config.num_train_timesteps"),C1.forEach(r),Uh=a(X,`.
`),vn=n(X,"A",{href:!0});var O1=o(vn);Bh=a(O1,"~ConfigMixin"),O1.forEach(r),Hh=a(X," also provides general loading and saving functionality via the "),bn=n(X,"A",{href:!0});var V1=o(bn);Rh=a(V1,"save_config()"),V1.forEach(r),Wh=a(X,` and
`),Sn=n(X,"A",{href:!0});var N1=o(Sn);Gh=a(N1,"from_config()"),N1.forEach(r),Yh=a(X," functions."),X.forEach(r),zh=c(q),Mt=n(q,"DIV",{class:!0});var dl=o(Mt);h(ts.$$.fragment,dl),Jh=c(dl),Ci=n(dl,"P",{});var F1=o(Ci);jh=a(F1,`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),F1.forEach(r),dl.forEach(r),Qh=c(q),me=n(q,"DIV",{class:!0});var Gn=o(me);h(rs.$$.fragment,Gn),Xh=c(Gn),Oi=n(Gn,"P",{});var I1=o(Oi);Zh=a(I1,"Sets the noise scales used for the diffusion chain. Supporting function to be run before inference."),I1.forEach(r),em=c(Gn),Ve=n(Gn,"P",{});var Yn=o(Ve);tm=a(Yn,"The sigmas control the weight of the "),Vi=n(Yn,"CODE",{});var L1=o(Vi);rm=a(L1,"drift"),L1.forEach(r),sm=a(Yn," and "),Ni=n(Yn,"CODE",{});var K1=o(Ni);nm=a(K1,"diffusion"),K1.forEach(r),om=a(Yn," components of sample update."),Yn.forEach(r),Gn.forEach(r),im=c(q),Pt=n(q,"DIV",{class:!0});var ll=o(Pt);h(ss.$$.fragment,ll),am=c(ll),Fi=n(ll,"P",{});var q1=o(Fi);dm=a(q1,"Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),q1.forEach(r),ll.forEach(r),lm=c(q),Tt=n(q,"DIV",{class:!0});var cl=o(Tt);h(ns.$$.fragment,cl),cm=c(cl),Ii=n(cl,"P",{});var U1=o(Ii);um=a(U1,`Correct the predicted sample based on the output model_output of the network. This is often run repeatedly
after making the prediction for the previous timestep.`),U1.forEach(r),cl.forEach(r),fm=c(q),kt=n(q,"DIV",{class:!0});var ul=o(kt);h(os.$$.fragment,ul),pm=c(ul),Li=n(ul,"P",{});var B1=o(Li);hm=a(B1,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),B1.forEach(r),ul.forEach(r),q.forEach(r),td=c(t),Ne=n(t,"H4",{class:!0});var fl=o(Ne);At=n(fl,"A",{id:!0,class:!0,href:!0});var H1=o(At);Ki=n(H1,"SPAN",{});var R1=o(Ki);h(is.$$.fragment,R1),R1.forEach(r),H1.forEach(r),mm=c(fl),qi=n(fl,"SPAN",{});var W1=o(qi);gm=a(W1,"improved pseudo numerical methods for diffusion models (iPNDM)"),W1.forEach(r),fl.forEach(r),rd=c(t),Ct=n(t,"P",{});var pl=o(Ct);_m=a(pl,"Original implementation can be found "),as=n(pl,"A",{href:!0,rel:!0});var G1=o(as);vm=a(G1,"here"),G1.forEach(r),bm=a(pl,"."),pl.forEach(r),sd=c(t),M=n(t,"DIV",{class:!0});var ae=o(M);h(ds.$$.fragment,ae),Sm=c(ae),$n=n(ae,"P",{});var W_=o($n);$m=a(W_,`Improved Pseudo numerical methods for diffusion models (iPNDM) ported from @crowsonkb\u2019s amazing k-diffusion
`),ls=n(W_,"A",{href:!0,rel:!0});var Y1=o(ls);Dm=a(Y1,"library"),Y1.forEach(r),W_.forEach(r),Em=c(ae),N=n(ae,"P",{});var Z=o(N);Dn=n(Z,"A",{href:!0});var z1=o(Dn);xm=a(z1,"~ConfigMixin"),z1.forEach(r),ym=a(Z," takes care of storing all config attributes that are passed in the scheduler\u2019s "),Ui=n(Z,"CODE",{});var J1=o(Ui);wm=a(J1,"__init__"),J1.forEach(r),Mm=a(Z,`
function, such as `),Bi=n(Z,"CODE",{});var j1=o(Bi);Pm=a(j1,"num_train_timesteps"),j1.forEach(r),Tm=a(Z,". They can be accessed via "),Hi=n(Z,"CODE",{});var Q1=o(Hi);km=a(Q1,"scheduler.config.num_train_timesteps"),Q1.forEach(r),Am=a(Z,`.
`),En=n(Z,"A",{href:!0});var X1=o(En);Cm=a(X1,"~ConfigMixin"),X1.forEach(r),Om=a(Z," also provides general loading and saving functionality via the "),xn=n(Z,"A",{href:!0});var Z1=o(xn);Vm=a(Z1,"save_config()"),Z1.forEach(r),Nm=a(Z,` and
`),yn=n(Z,"A",{href:!0});var e2=o(yn);Fm=a(e2,"from_config()"),e2.forEach(r),Im=a(Z," functions."),Z.forEach(r),Lm=c(ae),wn=n(ae,"P",{});var G_=o(wn);Km=a(G_,"For more details, see the original paper: "),cs=n(G_,"A",{href:!0,rel:!0});var t2=o(cs);qm=a(t2,"https://arxiv.org/abs/2202.09778"),t2.forEach(r),G_.forEach(r),Um=c(ae),Ot=n(ae,"DIV",{class:!0});var hl=o(Ot);h(us.$$.fragment,hl),Bm=c(hl),Ri=n(hl,"P",{});var r2=o(Ri);Hm=a(r2,`Ensures interchangeability with schedulers that need to scale the denoising model input depending on the
current timestep.`),r2.forEach(r),hl.forEach(r),Rm=c(ae),Vt=n(ae,"DIV",{class:!0});var ml=o(Vt);h(fs.$$.fragment,ml),Wm=c(ml),Wi=n(ml,"P",{});var s2=o(Wi);Gm=a(s2,"Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),s2.forEach(r),ml.forEach(r),Ym=c(ae),Nt=n(ae,"DIV",{class:!0});var gl=o(Nt);h(ps.$$.fragment,gl),zm=c(gl),Gi=n(gl,"P",{});var n2=o(Gi);Jm=a(n2,`Step function propagating the sample with the linear multi-step method. This has one forward pass with multiple
times to approximate the solution.`),n2.forEach(r),gl.forEach(r),ae.forEach(r),nd=c(t),Fe=n(t,"H4",{class:!0});var _l=o(Fe);Ft=n(_l,"A",{id:!0,class:!0,href:!0});var o2=o(Ft);Yi=n(o2,"SPAN",{});var i2=o(Yi);h(hs.$$.fragment,i2),i2.forEach(r),o2.forEach(r),jm=c(_l),zi=n(_l,"SPAN",{});var a2=o(zi);Qm=a(a2,"variance preserving stochastic differential equation (VP-SDE) scheduler"),a2.forEach(r),_l.forEach(r),od=c(t),It=n(t,"P",{});var vl=o(It);Xm=a(vl,"Original paper can be found "),ms=n(vl,"A",{href:!0,rel:!0});var d2=o(ms);Zm=a(d2,"here"),d2.forEach(r),eg=a(vl,"."),vl.forEach(r),id=c(t),h(Lt.$$.fragment,t),ad=c(t),G=n(t,"DIV",{class:!0});var _e=o(G);h(gs.$$.fragment,_e),tg=c(_e),Ji=n(_e,"P",{});var l2=o(Ji);rg=a(l2,"The variance preserving stochastic differential equation (SDE) scheduler."),l2.forEach(r),sg=c(_e),F=n(_e,"P",{});var ee=o(F);Mn=n(ee,"A",{href:!0});var c2=o(Mn);ng=a(c2,"~ConfigMixin"),c2.forEach(r),og=a(ee," takes care of storing all config attributes that are passed in the scheduler\u2019s "),ji=n(ee,"CODE",{});var u2=o(ji);ig=a(u2,"__init__"),u2.forEach(r),ag=a(ee,`
function, such as `),Qi=n(ee,"CODE",{});var f2=o(Qi);dg=a(f2,"num_train_timesteps"),f2.forEach(r),lg=a(ee,". They can be accessed via "),Xi=n(ee,"CODE",{});var p2=o(Xi);cg=a(p2,"scheduler.config.num_train_timesteps"),p2.forEach(r),ug=a(ee,`.
`),Pn=n(ee,"A",{href:!0});var h2=o(Pn);fg=a(h2,"~ConfigMixin"),h2.forEach(r),pg=a(ee," also provides general loading and saving functionality via the "),Tn=n(ee,"A",{href:!0});var m2=o(Tn);hg=a(m2,"save_config()"),m2.forEach(r),mg=a(ee,` and
`),kn=n(ee,"A",{href:!0});var g2=o(kn);gg=a(g2,"from_config()"),g2.forEach(r),_g=a(ee," functions."),ee.forEach(r),vg=c(_e),An=n(_e,"P",{});var Y_=o(An);bg=a(Y_,"For more information, see the original paper: "),_s=n(Y_,"A",{href:!0,rel:!0});var _2=o(_s);Sg=a(_2,"https://arxiv.org/abs/2011.13456"),_2.forEach(r),Y_.forEach(r),$g=c(_e),Zi=n(_e,"P",{});var v2=o(Zi);Dg=a(v2,"UNDER CONSTRUCTION"),v2.forEach(r),_e.forEach(r),dd=c(t),Ie=n(t,"H4",{class:!0});var bl=o(Ie);Kt=n(bl,"A",{id:!0,class:!0,href:!0});var b2=o(Kt);ea=n(b2,"SPAN",{});var S2=o(ea);h(vs.$$.fragment,S2),S2.forEach(r),b2.forEach(r),Eg=c(bl),ta=n(bl,"SPAN",{});var $2=o(ta);xg=a($2,"Euler scheduler"),$2.forEach(r),bl.forEach(r),ld=c(t),ge=n(t,"P",{});var zn=o(ge);yg=a(zn,"Euler scheduler (Algorithm 2) from the paper "),bs=n(zn,"A",{href:!0,rel:!0});var D2=o(bs);wg=a(D2,"Elucidating the Design Space of Diffusion-Based Generative Models"),D2.forEach(r),Mg=a(zn," by Karras et al. (2022). Based on the original "),Ss=n(zn,"A",{href:!0,rel:!0});var E2=o(Ss);Pg=a(E2,"k-diffusion"),E2.forEach(r),Tg=a(zn,` implementation by Katherine Crowson.
Fast scheduler which often times generates good outputs with 20-30 steps.`),zn.forEach(r),cd=c(t),B=n(t,"DIV",{class:!0});var le=o(B);h($s.$$.fragment,le),kg=c(le),qt=n(le,"P",{});var _a=o(qt);Ag=a(_a,"Euler scheduler (Algorithm 2) from Karras et al. (2022) "),Ds=n(_a,"A",{href:!0,rel:!0});var x2=o(Ds);Cg=a(x2,"https://arxiv.org/abs/2206.00364"),x2.forEach(r),Og=a(_a,`. . Based on the original
k-diffusion implementation by Katherine Crowson:
`),Es=n(_a,"A",{href:!0,rel:!0});var y2=o(Es);Vg=a(y2,"https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L51"),y2.forEach(r),_a.forEach(r),Ng=c(le),I=n(le,"P",{});var te=o(I);Cn=n(te,"A",{href:!0});var w2=o(Cn);Fg=a(w2,"~ConfigMixin"),w2.forEach(r),Ig=a(te," takes care of storing all config attributes that are passed in the scheduler\u2019s "),ra=n(te,"CODE",{});var M2=o(ra);Lg=a(M2,"__init__"),M2.forEach(r),Kg=a(te,`
function, such as `),sa=n(te,"CODE",{});var P2=o(sa);qg=a(P2,"num_train_timesteps"),P2.forEach(r),Ug=a(te,". They can be accessed via "),na=n(te,"CODE",{});var T2=o(na);Bg=a(T2,"scheduler.config.num_train_timesteps"),T2.forEach(r),Hg=a(te,`.
`),On=n(te,"A",{href:!0});var k2=o(On);Rg=a(k2,"~ConfigMixin"),k2.forEach(r),Wg=a(te," also provides general loading and saving functionality via the "),Vn=n(te,"A",{href:!0});var A2=o(Vn);Gg=a(A2,"save_config()"),A2.forEach(r),Yg=a(te,` and
`),Nn=n(te,"A",{href:!0});var C2=o(Nn);zg=a(C2,"from_config()"),C2.forEach(r),Jg=a(te," functions."),te.forEach(r),jg=c(le),Ut=n(le,"DIV",{class:!0});var Sl=o(Ut);h(xs.$$.fragment,Sl),Qg=c(Sl),ys=n(Sl,"P",{});var $l=o(ys);Xg=a($l,"Scales the denoising model input by "),oa=n($l,"CODE",{});var O2=o(oa);Zg=a(O2,"(sigma**2 + 1) ** 0.5"),O2.forEach(r),e_=a($l," to match the Euler algorithm."),$l.forEach(r),Sl.forEach(r),t_=c(le),Bt=n(le,"DIV",{class:!0});var Dl=o(Bt);h(ws.$$.fragment,Dl),r_=c(Dl),ia=n(Dl,"P",{});var V2=o(ia);s_=a(V2,"Sets the timesteps used for the diffusion chain. Supporting function to be run before inference."),V2.forEach(r),Dl.forEach(r),n_=c(le),Ht=n(le,"DIV",{class:!0});var El=o(Ht);h(Ms.$$.fragment,El),o_=c(El),aa=n(El,"P",{});var N2=o(aa);i_=a(N2,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),N2.forEach(r),El.forEach(r),le.forEach(r),ud=c(t),Le=n(t,"H4",{class:!0});var xl=o(Le);Rt=n(xl,"A",{id:!0,class:!0,href:!0});var F2=o(Rt);da=n(F2,"SPAN",{});var I2=o(da);h(Ps.$$.fragment,I2),I2.forEach(r),F2.forEach(r),a_=c(xl),la=n(xl,"SPAN",{});var L2=o(la);d_=a(L2,"Euler Ancestral scheduler"),L2.forEach(r),xl.forEach(r),fd=c(t),Fn=n(t,"P",{});var K2=o(Fn);l_=a(K2,`Ancestral sampling with Euler method steps. Based on the original (k-diffusion)[https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L72] implementation by Katherine Crowson.
Fast scheduler which often times generates good outputs with 20-30 steps.`),K2.forEach(r),pd=c(t),H=n(t,"DIV",{class:!0});var ce=o(H);h(Ts.$$.fragment,ce),c_=c(ce),In=n(ce,"P",{});var z_=o(In);u_=a(z_,`Ancestral sampling with Euler method steps. Based on the original k-diffusion implementation by Katherine Crowson:
`),ks=n(z_,"A",{href:!0,rel:!0});var q2=o(ks);f_=a(q2,"https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L72"),q2.forEach(r),z_.forEach(r),p_=c(ce),L=n(ce,"P",{});var re=o(L);Ln=n(re,"A",{href:!0});var U2=o(Ln);h_=a(U2,"~ConfigMixin"),U2.forEach(r),m_=a(re," takes care of storing all config attributes that are passed in the scheduler\u2019s "),ca=n(re,"CODE",{});var B2=o(ca);g_=a(B2,"__init__"),B2.forEach(r),__=a(re,`
function, such as `),ua=n(re,"CODE",{});var H2=o(ua);v_=a(H2,"num_train_timesteps"),H2.forEach(r),b_=a(re,". They can be accessed via "),fa=n(re,"CODE",{});var R2=o(fa);S_=a(R2,"scheduler.config.num_train_timesteps"),R2.forEach(r),$_=a(re,`.
`),Kn=n(re,"A",{href:!0});var W2=o(Kn);D_=a(W2,"~ConfigMixin"),W2.forEach(r),E_=a(re," also provides general loading and saving functionality via the "),qn=n(re,"A",{href:!0});var G2=o(qn);x_=a(G2,"save_config()"),G2.forEach(r),y_=a(re,` and
`),Un=n(re,"A",{href:!0});var Y2=o(Un);w_=a(Y2,"from_config()"),Y2.forEach(r),M_=a(re," functions."),re.forEach(r),P_=c(ce),Wt=n(ce,"DIV",{class:!0});var yl=o(Wt);h(As.$$.fragment,yl),T_=c(yl),Cs=n(yl,"P",{});var wl=o(Cs);k_=a(wl,"Scales the denoising model input by "),pa=n(wl,"CODE",{});var z2=o(pa);A_=a(z2,"(sigma**2 + 1) ** 0.5"),z2.forEach(r),C_=a(wl," to match the Euler algorithm."),wl.forEach(r),yl.forEach(r),O_=c(ce),Gt=n(ce,"DIV",{class:!0});var Ml=o(Gt);h(Os.$$.fragment,Ml),V_=c(Ml),ha=n(Ml,"P",{});var J2=o(ha);N_=a(J2,"Sets the timesteps used for the diffusion chain. Supporting function to be run before inference."),J2.forEach(r),Ml.forEach(r),F_=c(ce),Yt=n(ce,"DIV",{class:!0});var Pl=o(Yt);h(Vs.$$.fragment,Pl),I_=c(Pl),ma=n(Pl,"P",{});var j2=o(ma);L_=a(j2,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),j2.forEach(r),Pl.forEach(r),ce.forEach(r),this.h()},h(){d(R,"name","hf:doc:metadata"),d(R,"content",JSON.stringify(o0)),d(de,"id","schedulers"),d(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(de,"href","#schedulers"),d(W,"class","relative group"),d(qe,"id","what-is-a-scheduler"),d(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qe,"href","#what-is-a-scheduler"),d(ve,"class","relative group"),d(He,"id","discrete-versus-continuous-schedulers"),d(He,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(He,"href","#discrete-versus-continuous-schedulers"),d(Se,"class","relative group"),d(Ls,"href","/docs/diffusers/main/en/api/schedulers#diffusers.DDPMScheduler"),d(Ks,"href","/docs/diffusers/main/en/api/schedulers#diffusers.PNDMScheduler"),d(qs,"href","/docs/diffusers/main/en/api/schedulers#diffusers.ScoreSdeVeScheduler"),d(Re,"id","designing-reusable-schedulers"),d(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Re,"href","#designing-reusable-schedulers"),d($e,"class","relative group"),d(Ge,"id","api"),d(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ge,"href","#api"),d(De,"class","relative group"),d(Hs,"href","/docs/diffusers/main/en/api/schedulers#diffusers.SchedulerMixin"),d(ze,"id","diffusers.SchedulerMixin"),d(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ze,"href","#diffusers.SchedulerMixin"),d(Ee,"class","relative group"),d(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Je,"id","diffusers.schedulers.scheduling_utils.SchedulerOutput"),d(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Je,"href","#diffusers.schedulers.scheduling_utils.SchedulerOutput"),d(ye,"class","relative group"),d(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(je,"id","implemented-schedulers"),d(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(je,"href","#implemented-schedulers"),d(Me,"class","relative group"),d(Qe,"id","diffusers.DDIMScheduler"),d(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qe,"href","#diffusers.DDIMScheduler"),d(Pe,"class","relative group"),d(Ws,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(Gs,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(Ys,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(zs,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(cr,"href","https://arxiv.org/abs/2010.02502"),d(cr,"rel","nofollow"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tt,"id","diffusers.DDPMScheduler"),d(tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tt,"href","#diffusers.DDPMScheduler"),d(Te,"class","relative group"),d(mr,"href","https://arxiv.org/abs/2010.02502"),d(mr,"rel","nofollow"),d(js,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(Qs,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(Xs,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(Zs,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(_r,"href","https://arxiv.org/abs/2006.11239"),d(_r,"rel","nofollow"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(it,"id","diffusers.KarrasVeScheduler"),d(it,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(it,"href","#diffusers.KarrasVeScheduler"),d(ke,"class","relative group"),d(Dr,"href","https://arxiv.org/abs/2006.11239"),d(Dr,"rel","nofollow"),d(xr,"href","https://arxiv.org/abs/2206.00364"),d(xr,"rel","nofollow"),d(yr,"href","https://arxiv.org/abs/2011.13456"),d(yr,"rel","nofollow"),d(tn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(rn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(sn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(nn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(Mr,"href","https://arxiv.org/abs/2206.00364"),d(Mr,"rel","nofollow"),d(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pt,"id","diffusers.LMSDiscreteScheduler"),d(pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pt,"href","#diffusers.LMSDiscreteScheduler"),d(Ae,"class","relative group"),d(Vr,"href","https://arxiv.org/abs/2206.00364"),d(Vr,"rel","nofollow"),d(Fr,"href","https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),d(Fr,"rel","nofollow"),d(an,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(dn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(ln,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(cn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bt,"id","diffusers.PNDMScheduler"),d(bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bt,"href","#diffusers.PNDMScheduler"),d(Ce,"class","relative group"),d(Hr,"href","https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),d(Hr,"rel","nofollow"),d(un,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(fn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(pn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(hn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(Wr,"href","https://arxiv.org/abs/2202.09778"),d(Wr,"rel","nofollow"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yt,"id","diffusers.ScoreSdeVeScheduler"),d(yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yt,"href","#diffusers.ScoreSdeVeScheduler"),d(Oe,"class","relative group"),d(Xr,"href","https://arxiv.org/abs/2011.13456"),d(Xr,"rel","nofollow"),d(es,"href","https://arxiv.org/abs/2011.13456"),d(es,"rel","nofollow"),d(_n,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(vn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(bn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(Sn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(At,"id","diffusers.IPNDMScheduler"),d(At,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(At,"href","#diffusers.IPNDMScheduler"),d(Ne,"class","relative group"),d(as,"href","https://github.com/crowsonkb/v-diffusion-pytorch/blob/987f8985e38208345c1959b0ea767a625831cc9b/diffusion/sampling.py#L296"),d(as,"rel","nofollow"),d(ls,"href","https://github.com/crowsonkb/v-diffusion-pytorch/blob/987f8985e38208345c1959b0ea767a625831cc9b/diffusion/sampling.py#L296"),d(ls,"rel","nofollow"),d(Dn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(En,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(xn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(yn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(cs,"href","https://arxiv.org/abs/2202.09778"),d(cs,"rel","nofollow"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ft,"id","diffusers.schedulers.ScoreSdeVpScheduler"),d(Ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ft,"href","#diffusers.schedulers.ScoreSdeVpScheduler"),d(Fe,"class","relative group"),d(ms,"href","https://arxiv.org/abs/2011.13456"),d(ms,"rel","nofollow"),d(Mn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(Pn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(Tn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(kn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(_s,"href","https://arxiv.org/abs/2011.13456"),d(_s,"rel","nofollow"),d(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kt,"id","diffusers.EulerDiscreteScheduler"),d(Kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kt,"href","#diffusers.EulerDiscreteScheduler"),d(Ie,"class","relative group"),d(bs,"href","https://arxiv.org/abs/2206.00364"),d(bs,"rel","nofollow"),d(Ss,"href","https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L51"),d(Ss,"rel","nofollow"),d(Ds,"href","https://arxiv.org/abs/2206.00364"),d(Ds,"rel","nofollow"),d(Es,"href","https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L51"),d(Es,"rel","nofollow"),d(Cn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(On,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(Vn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(Nn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rt,"id","diffusers.EulerAncestralDiscreteScheduler"),d(Rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rt,"href","#diffusers.EulerAncestralDiscreteScheduler"),d(Le,"class","relative group"),d(ks,"href","https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L72"),d(ks,"rel","nofollow"),d(Ln,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(Kn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),d(qn,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),d(Un,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),d(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,u){e(document.head,R),f(t,Ke,u),f(t,W,u),e(W,de),e(de,Jn),m(Jt,Jn,null),e(W,Tl),e(W,jn),e(jn,kl),f(t,ba,u),f(t,Fs,u),e(Fs,Al),f(t,Sa,u),f(t,ve,u),e(ve,qe),e(qe,Qn),m(jt,Qn,null),e(ve,Cl),e(ve,Xn),e(Xn,Ol),f(t,$a,u),f(t,Ue,u),e(Ue,Vl),e(Ue,Zn),e(Zn,Nl),e(Ue,Fl),f(t,Da,u),f(t,Be,u),e(Be,Is),e(Is,Il),e(Is,Qt),e(Qt,eo),e(eo,Ll),e(Qt,Kl),e(Qt,to),e(to,ql),e(Be,Ul),e(Be,be),e(be,Bl),e(be,ro),e(ro,Hl),e(be,Rl),e(be,so),e(so,Wl),e(be,Gl),f(t,Ea,u),f(t,Se,u),e(Se,He),e(He,no),m(Xt,no,null),e(Se,Yl),e(Se,oo),e(oo,zl),f(t,xa,u),f(t,P,u),e(P,Jl),e(P,io),e(io,jl),e(P,Ql),e(P,Ls),e(Ls,Xl),e(P,Zl),e(P,Ks),e(Ks,ec),e(P,tc),e(P,ao),e(ao,rc),e(P,sc),e(P,qs),e(qs,nc),e(P,oc),e(P,lo),e(lo,ic),e(P,ac),f(t,ya,u),f(t,$e,u),e($e,Re),e(Re,co),m(Zt,co,null),e($e,dc),e($e,uo),e(uo,lc),f(t,wa,u),f(t,Us,u),e(Us,cc),f(t,Ma,u),f(t,We,u),e(We,fo),e(fo,uc),e(We,fc),e(We,po),e(po,pc),f(t,Pa,u),f(t,De,u),e(De,Ge),e(Ge,ho),m(er,ho,null),e(De,hc),e(De,mo),e(mo,mc),f(t,Ta,u),f(t,Bs,u),e(Bs,gc),f(t,ka,u),f(t,fe,u),e(fe,tr),e(tr,_c),e(tr,go),e(go,vc),e(tr,bc),e(fe,Sc),e(fe,rr),e(rr,$c),e(rr,_o),e(_o,Dc),e(rr,Ec),e(fe,xc),e(fe,vo),e(vo,yc),f(t,Aa,u),f(t,Ye,u),e(Ye,wc),e(Ye,Hs),e(Hs,Mc),e(Ye,Pc),f(t,Ca,u),f(t,Ee,u),e(Ee,ze),e(ze,bo),m(sr,bo,null),e(Ee,Tc),e(Ee,So),e(So,kc),f(t,Oa,u),f(t,xe,u),m(nr,xe,null),e(xe,Ac),e(xe,$o),e($o,Cc),f(t,Va,u),f(t,ye,u),e(ye,Je),e(Je,Do),m(or,Do,null),e(ye,Oc),e(ye,Eo),e(Eo,Vc),f(t,Na,u),f(t,we,u),m(ir,we,null),e(we,Nc),e(we,xo),e(xo,Fc),f(t,Fa,u),f(t,Me,u),e(Me,je),e(je,yo),m(ar,yo,null),e(Me,Ic),e(Me,wo),e(wo,Lc),f(t,Ia,u),f(t,Pe,u),e(Pe,Qe),e(Qe,Mo),m(dr,Mo,null),e(Pe,Kc),e(Pe,Po),e(Po,qc),f(t,La,u),f(t,Rs,u),e(Rs,Uc),f(t,Ka,u),f(t,x,u),m(lr,x,null),e(x,Bc),e(x,To),e(To,Hc),e(x,Rc),e(x,T),e(T,Ws),e(Ws,Wc),e(T,Gc),e(T,ko),e(ko,Yc),e(T,zc),e(T,Ao),e(Ao,Jc),e(T,jc),e(T,Co),e(Co,Qc),e(T,Xc),e(T,Gs),e(Gs,Zc),e(T,eu),e(T,Ys),e(Ys,tu),e(T,ru),e(T,zs),e(zs,su),e(T,nu),e(x,ou),e(x,Js),e(Js,iu),e(Js,cr),e(cr,au),e(x,du),e(x,Xe),m(ur,Xe,null),e(Xe,lu),e(Xe,Oo),e(Oo,cu),e(x,uu),e(x,Ze),m(fr,Ze,null),e(Ze,fu),e(Ze,Vo),e(Vo,pu),e(x,hu),e(x,et),m(pr,et,null),e(et,mu),e(et,No),e(No,gu),f(t,qa,u),f(t,Te,u),e(Te,tt),e(tt,Fo),m(hr,Fo,null),e(Te,_u),e(Te,Io),e(Io,vu),f(t,Ua,u),f(t,rt,u),e(rt,bu),e(rt,mr),e(mr,Su),e(rt,$u),f(t,Ba,u),f(t,y,u),m(gr,y,null),e(y,Du),e(y,Lo),e(Lo,Eu),e(y,xu),e(y,k),e(k,js),e(js,yu),e(k,wu),e(k,Ko),e(Ko,Mu),e(k,Pu),e(k,qo),e(qo,Tu),e(k,ku),e(k,Uo),e(Uo,Au),e(k,Cu),e(k,Qs),e(Qs,Ou),e(k,Vu),e(k,Xs),e(Xs,Nu),e(k,Fu),e(k,Zs),e(Zs,Iu),e(k,Lu),e(y,Ku),e(y,en),e(en,qu),e(en,_r),e(_r,Uu),e(y,Bu),e(y,st),m(vr,st,null),e(st,Hu),e(st,Bo),e(Bo,Ru),e(y,Wu),e(y,nt),m(br,nt,null),e(nt,Gu),e(nt,Ho),e(Ho,Yu),e(y,zu),e(y,ot),m(Sr,ot,null),e(ot,Ju),e(ot,Ro),e(Ro,ju),f(t,Ha,u),f(t,ke,u),e(ke,it),e(it,Wo),m($r,Wo,null),e(ke,Qu),e(ke,Go),e(Go,Xu),f(t,Ra,u),f(t,at,u),e(at,Zu),e(at,Dr),e(Dr,ef),e(at,tf),f(t,Wa,u),f(t,S,u),m(Er,S,null),e(S,rf),e(S,Yo),e(Yo,sf),e(S,nf),e(S,dt),e(dt,of),e(dt,xr),e(xr,af),e(dt,df),e(dt,yr),e(yr,lf),e(S,cf),e(S,A),e(A,tn),e(tn,uf),e(A,ff),e(A,zo),e(zo,pf),e(A,hf),e(A,Jo),e(Jo,mf),e(A,gf),e(A,jo),e(jo,_f),e(A,vf),e(A,rn),e(rn,bf),e(A,Sf),e(A,sn),e(sn,$f),e(A,Df),e(A,nn),e(nn,Ef),e(A,xf),e(S,yf),e(S,wr),e(wr,wf),e(wr,Mr),e(Mr,Mf),e(wr,Pf),e(S,Tf),e(S,pe),m(Pr,pe,null),e(pe,kf),e(pe,Qo),e(Qo,Af),e(pe,Cf),e(pe,Xo),e(Xo,Of),e(S,Vf),e(S,lt),m(Tr,lt,null),e(lt,Nf),e(lt,Zo),e(Zo,Ff),e(S,If),e(S,ct),m(kr,ct,null),e(ct,Lf),e(ct,ei),e(ei,Kf),e(S,qf),e(S,ut),m(Ar,ut,null),e(ut,Uf),e(ut,ti),e(ti,Bf),e(S,Hf),e(S,ft),m(Cr,ft,null),e(ft,Rf),e(ft,ri),e(ri,Wf),f(t,Ga,u),f(t,Ae,u),e(Ae,pt),e(pt,si),m(Or,si,null),e(Ae,Gf),e(Ae,ni),e(ni,Yf),f(t,Ya,u),f(t,ht,u),e(ht,zf),e(ht,Vr),e(Vr,Jf),e(ht,jf),f(t,za,u),f(t,w,u),m(Nr,w,null),e(w,Qf),e(w,on),e(on,Xf),e(on,Fr),e(Fr,Zf),e(w,ep),e(w,C),e(C,an),e(an,tp),e(C,rp),e(C,oi),e(oi,sp),e(C,np),e(C,ii),e(ii,op),e(C,ip),e(C,ai),e(ai,ap),e(C,dp),e(C,dn),e(dn,lp),e(C,cp),e(C,ln),e(ln,up),e(C,fp),e(C,cn),e(cn,pp),e(C,hp),e(w,mp),e(w,mt),m(Ir,mt,null),e(mt,gp),e(mt,di),e(di,_p),e(w,vp),e(w,gt),m(Lr,gt,null),e(gt,bp),e(gt,Kr),e(Kr,Sp),e(Kr,li),e(li,$p),e(Kr,Dp),e(w,Ep),e(w,_t),m(qr,_t,null),e(_t,xp),e(_t,ci),e(ci,yp),e(w,wp),e(w,vt),m(Ur,vt,null),e(vt,Mp),e(vt,ui),e(ui,Pp),f(t,Ja,u),f(t,Ce,u),e(Ce,bt),e(bt,fi),m(Br,fi,null),e(Ce,Tp),e(Ce,pi),e(pi,kp),f(t,ja,u),f(t,St,u),e(St,Ap),e(St,Hr),e(Hr,Cp),e(St,Op),f(t,Qa,u),f(t,$,u),m(Rr,$,null),e($,Vp),e($,hi),e(hi,Np),e($,Fp),e($,O),e(O,un),e(un,Ip),e(O,Lp),e(O,mi),e(mi,Kp),e(O,qp),e(O,gi),e(gi,Up),e(O,Bp),e(O,_i),e(_i,Hp),e(O,Rp),e(O,fn),e(fn,Wp),e(O,Gp),e(O,pn),e(pn,Yp),e(O,zp),e(O,hn),e(hn,Jp),e(O,jp),e($,Qp),e($,mn),e(mn,Xp),e(mn,Wr),e(Wr,Zp),e($,eh),e($,$t),m(Gr,$t,null),e($t,th),e($t,vi),e(vi,rh),e($,sh),e($,Dt),m(Yr,Dt,null),e(Dt,nh),e(Dt,bi),e(bi,oh),e($,ih),e($,he),m(zr,he,null),e(he,ah),e(he,Si),e(Si,dh),e(he,lh),e(he,ue),e(ue,ch),e(ue,$i),e($i,uh),e(ue,fh),e(ue,Di),e(Di,ph),e(ue,hh),e(ue,Ei),e(Ei,mh),e(ue,gh),e($,_h),e($,Et),m(Jr,Et,null),e(Et,vh),e(Et,xi),e(xi,bh),e($,Sh),e($,xt),m(jr,xt,null),e(xt,$h),e(xt,yi),e(yi,Dh),f(t,Xa,u),f(t,Oe,u),e(Oe,yt),e(yt,wi),m(Qr,wi,null),e(Oe,Eh),e(Oe,Mi),e(Mi,xh),f(t,Za,u),f(t,wt,u),e(wt,yh),e(wt,Xr),e(Xr,wh),e(wt,Mh),f(t,ed,u),f(t,D,u),m(Zr,D,null),e(D,Ph),e(D,Pi),e(Pi,Th),e(D,kh),e(D,gn),e(gn,Ah),e(gn,es),e(es,Ch),e(D,Oh),e(D,V),e(V,_n),e(_n,Vh),e(V,Nh),e(V,Ti),e(Ti,Fh),e(V,Ih),e(V,ki),e(ki,Lh),e(V,Kh),e(V,Ai),e(Ai,qh),e(V,Uh),e(V,vn),e(vn,Bh),e(V,Hh),e(V,bn),e(bn,Rh),e(V,Wh),e(V,Sn),e(Sn,Gh),e(V,Yh),e(D,zh),e(D,Mt),m(ts,Mt,null),e(Mt,Jh),e(Mt,Ci),e(Ci,jh),e(D,Qh),e(D,me),m(rs,me,null),e(me,Xh),e(me,Oi),e(Oi,Zh),e(me,em),e(me,Ve),e(Ve,tm),e(Ve,Vi),e(Vi,rm),e(Ve,sm),e(Ve,Ni),e(Ni,nm),e(Ve,om),e(D,im),e(D,Pt),m(ss,Pt,null),e(Pt,am),e(Pt,Fi),e(Fi,dm),e(D,lm),e(D,Tt),m(ns,Tt,null),e(Tt,cm),e(Tt,Ii),e(Ii,um),e(D,fm),e(D,kt),m(os,kt,null),e(kt,pm),e(kt,Li),e(Li,hm),f(t,td,u),f(t,Ne,u),e(Ne,At),e(At,Ki),m(is,Ki,null),e(Ne,mm),e(Ne,qi),e(qi,gm),f(t,rd,u),f(t,Ct,u),e(Ct,_m),e(Ct,as),e(as,vm),e(Ct,bm),f(t,sd,u),f(t,M,u),m(ds,M,null),e(M,Sm),e(M,$n),e($n,$m),e($n,ls),e(ls,Dm),e(M,Em),e(M,N),e(N,Dn),e(Dn,xm),e(N,ym),e(N,Ui),e(Ui,wm),e(N,Mm),e(N,Bi),e(Bi,Pm),e(N,Tm),e(N,Hi),e(Hi,km),e(N,Am),e(N,En),e(En,Cm),e(N,Om),e(N,xn),e(xn,Vm),e(N,Nm),e(N,yn),e(yn,Fm),e(N,Im),e(M,Lm),e(M,wn),e(wn,Km),e(wn,cs),e(cs,qm),e(M,Um),e(M,Ot),m(us,Ot,null),e(Ot,Bm),e(Ot,Ri),e(Ri,Hm),e(M,Rm),e(M,Vt),m(fs,Vt,null),e(Vt,Wm),e(Vt,Wi),e(Wi,Gm),e(M,Ym),e(M,Nt),m(ps,Nt,null),e(Nt,zm),e(Nt,Gi),e(Gi,Jm),f(t,nd,u),f(t,Fe,u),e(Fe,Ft),e(Ft,Yi),m(hs,Yi,null),e(Fe,jm),e(Fe,zi),e(zi,Qm),f(t,od,u),f(t,It,u),e(It,Xm),e(It,ms),e(ms,Zm),e(It,eg),f(t,id,u),m(Lt,t,u),f(t,ad,u),f(t,G,u),m(gs,G,null),e(G,tg),e(G,Ji),e(Ji,rg),e(G,sg),e(G,F),e(F,Mn),e(Mn,ng),e(F,og),e(F,ji),e(ji,ig),e(F,ag),e(F,Qi),e(Qi,dg),e(F,lg),e(F,Xi),e(Xi,cg),e(F,ug),e(F,Pn),e(Pn,fg),e(F,pg),e(F,Tn),e(Tn,hg),e(F,mg),e(F,kn),e(kn,gg),e(F,_g),e(G,vg),e(G,An),e(An,bg),e(An,_s),e(_s,Sg),e(G,$g),e(G,Zi),e(Zi,Dg),f(t,dd,u),f(t,Ie,u),e(Ie,Kt),e(Kt,ea),m(vs,ea,null),e(Ie,Eg),e(Ie,ta),e(ta,xg),f(t,ld,u),f(t,ge,u),e(ge,yg),e(ge,bs),e(bs,wg),e(ge,Mg),e(ge,Ss),e(Ss,Pg),e(ge,Tg),f(t,cd,u),f(t,B,u),m($s,B,null),e(B,kg),e(B,qt),e(qt,Ag),e(qt,Ds),e(Ds,Cg),e(qt,Og),e(qt,Es),e(Es,Vg),e(B,Ng),e(B,I),e(I,Cn),e(Cn,Fg),e(I,Ig),e(I,ra),e(ra,Lg),e(I,Kg),e(I,sa),e(sa,qg),e(I,Ug),e(I,na),e(na,Bg),e(I,Hg),e(I,On),e(On,Rg),e(I,Wg),e(I,Vn),e(Vn,Gg),e(I,Yg),e(I,Nn),e(Nn,zg),e(I,Jg),e(B,jg),e(B,Ut),m(xs,Ut,null),e(Ut,Qg),e(Ut,ys),e(ys,Xg),e(ys,oa),e(oa,Zg),e(ys,e_),e(B,t_),e(B,Bt),m(ws,Bt,null),e(Bt,r_),e(Bt,ia),e(ia,s_),e(B,n_),e(B,Ht),m(Ms,Ht,null),e(Ht,o_),e(Ht,aa),e(aa,i_),f(t,ud,u),f(t,Le,u),e(Le,Rt),e(Rt,da),m(Ps,da,null),e(Le,a_),e(Le,la),e(la,d_),f(t,fd,u),f(t,Fn,u),e(Fn,l_),f(t,pd,u),f(t,H,u),m(Ts,H,null),e(H,c_),e(H,In),e(In,u_),e(In,ks),e(ks,f_),e(H,p_),e(H,L),e(L,Ln),e(Ln,h_),e(L,m_),e(L,ca),e(ca,g_),e(L,__),e(L,ua),e(ua,v_),e(L,b_),e(L,fa),e(fa,S_),e(L,$_),e(L,Kn),e(Kn,D_),e(L,E_),e(L,qn),e(qn,x_),e(L,y_),e(L,Un),e(Un,w_),e(L,M_),e(H,P_),e(H,Wt),m(As,Wt,null),e(Wt,T_),e(Wt,Cs),e(Cs,k_),e(Cs,pa),e(pa,A_),e(Cs,C_),e(H,O_),e(H,Gt),m(Os,Gt,null),e(Gt,V_),e(Gt,ha),e(ha,N_),e(H,F_),e(H,Yt),m(Vs,Yt,null),e(Yt,I_),e(Yt,ma),e(ma,L_),hd=!0},p(t,[u]){const Ns={};u&2&&(Ns.$$scope={dirty:u,ctx:t}),Lt.$set(Ns)},i(t){hd||(g(Jt.$$.fragment,t),g(jt.$$.fragment,t),g(Xt.$$.fragment,t),g(Zt.$$.fragment,t),g(er.$$.fragment,t),g(sr.$$.fragment,t),g(nr.$$.fragment,t),g(or.$$.fragment,t),g(ir.$$.fragment,t),g(ar.$$.fragment,t),g(dr.$$.fragment,t),g(lr.$$.fragment,t),g(ur.$$.fragment,t),g(fr.$$.fragment,t),g(pr.$$.fragment,t),g(hr.$$.fragment,t),g(gr.$$.fragment,t),g(vr.$$.fragment,t),g(br.$$.fragment,t),g(Sr.$$.fragment,t),g($r.$$.fragment,t),g(Er.$$.fragment,t),g(Pr.$$.fragment,t),g(Tr.$$.fragment,t),g(kr.$$.fragment,t),g(Ar.$$.fragment,t),g(Cr.$$.fragment,t),g(Or.$$.fragment,t),g(Nr.$$.fragment,t),g(Ir.$$.fragment,t),g(Lr.$$.fragment,t),g(qr.$$.fragment,t),g(Ur.$$.fragment,t),g(Br.$$.fragment,t),g(Rr.$$.fragment,t),g(Gr.$$.fragment,t),g(Yr.$$.fragment,t),g(zr.$$.fragment,t),g(Jr.$$.fragment,t),g(jr.$$.fragment,t),g(Qr.$$.fragment,t),g(Zr.$$.fragment,t),g(ts.$$.fragment,t),g(rs.$$.fragment,t),g(ss.$$.fragment,t),g(ns.$$.fragment,t),g(os.$$.fragment,t),g(is.$$.fragment,t),g(ds.$$.fragment,t),g(us.$$.fragment,t),g(fs.$$.fragment,t),g(ps.$$.fragment,t),g(hs.$$.fragment,t),g(Lt.$$.fragment,t),g(gs.$$.fragment,t),g(vs.$$.fragment,t),g($s.$$.fragment,t),g(xs.$$.fragment,t),g(ws.$$.fragment,t),g(Ms.$$.fragment,t),g(Ps.$$.fragment,t),g(Ts.$$.fragment,t),g(As.$$.fragment,t),g(Os.$$.fragment,t),g(Vs.$$.fragment,t),hd=!0)},o(t){_(Jt.$$.fragment,t),_(jt.$$.fragment,t),_(Xt.$$.fragment,t),_(Zt.$$.fragment,t),_(er.$$.fragment,t),_(sr.$$.fragment,t),_(nr.$$.fragment,t),_(or.$$.fragment,t),_(ir.$$.fragment,t),_(ar.$$.fragment,t),_(dr.$$.fragment,t),_(lr.$$.fragment,t),_(ur.$$.fragment,t),_(fr.$$.fragment,t),_(pr.$$.fragment,t),_(hr.$$.fragment,t),_(gr.$$.fragment,t),_(vr.$$.fragment,t),_(br.$$.fragment,t),_(Sr.$$.fragment,t),_($r.$$.fragment,t),_(Er.$$.fragment,t),_(Pr.$$.fragment,t),_(Tr.$$.fragment,t),_(kr.$$.fragment,t),_(Ar.$$.fragment,t),_(Cr.$$.fragment,t),_(Or.$$.fragment,t),_(Nr.$$.fragment,t),_(Ir.$$.fragment,t),_(Lr.$$.fragment,t),_(qr.$$.fragment,t),_(Ur.$$.fragment,t),_(Br.$$.fragment,t),_(Rr.$$.fragment,t),_(Gr.$$.fragment,t),_(Yr.$$.fragment,t),_(zr.$$.fragment,t),_(Jr.$$.fragment,t),_(jr.$$.fragment,t),_(Qr.$$.fragment,t),_(Zr.$$.fragment,t),_(ts.$$.fragment,t),_(rs.$$.fragment,t),_(ss.$$.fragment,t),_(ns.$$.fragment,t),_(os.$$.fragment,t),_(is.$$.fragment,t),_(ds.$$.fragment,t),_(us.$$.fragment,t),_(fs.$$.fragment,t),_(ps.$$.fragment,t),_(hs.$$.fragment,t),_(Lt.$$.fragment,t),_(gs.$$.fragment,t),_(vs.$$.fragment,t),_($s.$$.fragment,t),_(xs.$$.fragment,t),_(ws.$$.fragment,t),_(Ms.$$.fragment,t),_(Ps.$$.fragment,t),_(Ts.$$.fragment,t),_(As.$$.fragment,t),_(Os.$$.fragment,t),_(Vs.$$.fragment,t),hd=!1},d(t){r(R),t&&r(Ke),t&&r(W),v(Jt),t&&r(ba),t&&r(Fs),t&&r(Sa),t&&r(ve),v(jt),t&&r($a),t&&r(Ue),t&&r(Da),t&&r(Be),t&&r(Ea),t&&r(Se),v(Xt),t&&r(xa),t&&r(P),t&&r(ya),t&&r($e),v(Zt),t&&r(wa),t&&r(Us),t&&r(Ma),t&&r(We),t&&r(Pa),t&&r(De),v(er),t&&r(Ta),t&&r(Bs),t&&r(ka),t&&r(fe),t&&r(Aa),t&&r(Ye),t&&r(Ca),t&&r(Ee),v(sr),t&&r(Oa),t&&r(xe),v(nr),t&&r(Va),t&&r(ye),v(or),t&&r(Na),t&&r(we),v(ir),t&&r(Fa),t&&r(Me),v(ar),t&&r(Ia),t&&r(Pe),v(dr),t&&r(La),t&&r(Rs),t&&r(Ka),t&&r(x),v(lr),v(ur),v(fr),v(pr),t&&r(qa),t&&r(Te),v(hr),t&&r(Ua),t&&r(rt),t&&r(Ba),t&&r(y),v(gr),v(vr),v(br),v(Sr),t&&r(Ha),t&&r(ke),v($r),t&&r(Ra),t&&r(at),t&&r(Wa),t&&r(S),v(Er),v(Pr),v(Tr),v(kr),v(Ar),v(Cr),t&&r(Ga),t&&r(Ae),v(Or),t&&r(Ya),t&&r(ht),t&&r(za),t&&r(w),v(Nr),v(Ir),v(Lr),v(qr),v(Ur),t&&r(Ja),t&&r(Ce),v(Br),t&&r(ja),t&&r(St),t&&r(Qa),t&&r($),v(Rr),v(Gr),v(Yr),v(zr),v(Jr),v(jr),t&&r(Xa),t&&r(Oe),v(Qr),t&&r(Za),t&&r(wt),t&&r(ed),t&&r(D),v(Zr),v(ts),v(rs),v(ss),v(ns),v(os),t&&r(td),t&&r(Ne),v(is),t&&r(rd),t&&r(Ct),t&&r(sd),t&&r(M),v(ds),v(us),v(fs),v(ps),t&&r(nd),t&&r(Fe),v(hs),t&&r(od),t&&r(It),t&&r(id),v(Lt,t),t&&r(ad),t&&r(G),v(gs),t&&r(dd),t&&r(Ie),v(vs),t&&r(ld),t&&r(ge),t&&r(cd),t&&r(B),v($s),v(xs),v(ws),v(Ms),t&&r(ud),t&&r(Le),v(Ps),t&&r(fd),t&&r(Fn),t&&r(pd),t&&r(H),v(Ts),v(As),v(Os),v(Vs)}}}const o0={local:"schedulers",sections:[{local:"what-is-a-scheduler",sections:[{local:"discrete-versus-continuous-schedulers",title:"Discrete versus continuous schedulers"}],title:"What is a scheduler?"},{local:"designing-reusable-schedulers",title:"Designing Re-usable schedulers"},{local:"api",sections:[{local:"diffusers.SchedulerMixin",title:"SchedulerMixin"},{local:"diffusers.schedulers.scheduling_utils.SchedulerOutput",title:"SchedulerOutput"},{local:"implemented-schedulers",sections:[{local:"diffusers.DDIMScheduler",title:"Denoising diffusion implicit models (DDIM)"},{local:"diffusers.DDPMScheduler",title:"Denoising diffusion probabilistic models (DDPM)"},{local:"diffusers.KarrasVeScheduler",title:"Variance exploding, stochastic sampling from Karras et. al"},{local:"diffusers.LMSDiscreteScheduler",title:"Linear multistep scheduler for discrete beta schedules"},{local:"diffusers.PNDMScheduler",title:"Pseudo numerical methods for diffusion models (PNDM)"},{local:"diffusers.ScoreSdeVeScheduler",title:"variance exploding stochastic differential equation (VE-SDE) scheduler"},{local:"diffusers.IPNDMScheduler",title:"improved pseudo numerical methods for diffusion models (iPNDM)"},{local:"diffusers.schedulers.ScoreSdeVpScheduler",title:"variance preserving stochastic differential equation (VP-SDE) scheduler"},{local:"diffusers.EulerDiscreteScheduler",title:"Euler scheduler"},{local:"diffusers.EulerAncestralDiscreteScheduler",title:"Euler Ancestral scheduler"}],title:"Implemented Schedulers"}],title:"API"}],title:"Schedulers"};function i0(va){return t0(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class u0 extends Q2{constructor(R){super();X2(this,R,i0,n0,Z2,{})}}export{u0 as default,o0 as metadata};
