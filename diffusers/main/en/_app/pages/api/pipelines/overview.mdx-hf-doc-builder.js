import{S as Km,i as Xm,s as Zm,e as o,k as f,w as S,t as r,M as eg,c as a,d as t,m as d,a as n,x as $,h as s,b as i,N as eo,G as e,g as p,y as O,L as tg,q as M,o as G,B as j,v as og}from"../../../chunks/vendor-hf-doc-builder.js";import{I as me}from"../../../chunks/IconCopyLink-hf-doc-builder.js";import{C as Kh}from"../../../chunks/CodeBlock-hf-doc-builder.js";function ag(Xh){let ae,Dl,ne,ge,ra,Qe,Tr,sa,kr,Tl,to,Pr,kl,ve,xr,Je,Ar,Sr,Pl,b,ia,oo,$r,Or,fa,ao,Mr,Gr,da,Ke,jr,Cr,Xe,Lr,no,Rr,qr,Nr,Ze,Hr,et,Br,Ur,Yr,tt,zr,lo,Fr,Vr,xl,ro,Wr,Al,D,ha,pa,C,Qr,ca,Jr,Kr,ot,Xr,Zr,at,es,ts,os,ua,so,nt,as,io,ns,ls,rs,ma,fo,lt,ss,ho,is,fs,ds,ga,po,rt,hs,co,ps,cs,Sl,L,va,us,ms,_a,gs,vs,st,_s,bs,$l,le,_e,ba,it,Es,Ea,ys,Ol,uo,ws,Ml,be,ya,R,wa,Is,Ds,Ia,Ts,ks,mo,Ps,xs,go,As,Ss,c,q,Da,vo,$s,Os,Ta,ft,ka,Ms,Gs,_o,js,Cs,Pa,Ls,N,xa,bo,Rs,qs,Aa,dt,Sa,Ns,Hs,Eo,Bs,Us,yo,ht,wo,Zh,Ys,H,$a,Io,zs,Fs,Oa,pt,Ma,Vs,Ws,Do,Qs,Js,Ga,Ks,B,ja,To,Xs,Zs,Ca,ct,La,ei,ti,ko,oi,ai,Ra,ni,U,qa,Po,li,ri,Na,ut,Ha,si,ii,xo,fi,di,Ba,hi,Y,Ua,Ao,pi,ci,Ya,mt,za,ui,mi,So,gi,vi,Fa,_i,z,Va,$o,bi,Ei,Wa,gt,Qa,yi,wi,Oo,Ii,Di,Ja,Ti,F,Ka,Mo,ki,Pi,Xa,vt,Za,xi,Ai,Go,Si,$i,jo,_t,Co,ep,Oi,V,en,Lo,Mi,Gi,tn,bt,on,ji,Ci,Ro,Li,Ri,qo,Et,No,tp,qi,W,an,Ho,Ni,Hi,nn,yt,ln,Bi,Ui,Bo,Yi,zi,Uo,wt,Yo,op,Fi,Q,rn,zo,Vi,Wi,sn,It,fn,Qi,Ji,Fo,Ki,Xi,dn,Zi,J,hn,Vo,ef,tf,pn,Dt,cn,of,af,Wo,nf,lf,un,Gl,Tt,mn,rf,sf,jl,Ee,ff,Qo,df,hf,Cl,re,ye,gn,kt,pf,vn,cf,Ll,Jo,uf,Rl,X,mf,_n,gf,vf,Pt,_f,bf,ql,T,u,xt,bn,Ef,yf,wf,En,If,Df,At,Tf,kf,yn,Pf,xf,wn,Af,Sf,In,$f,Of,St,Mf,Gf,Dn,jf,Cf,Tn,Lf,Rf,kn,qf,Nf,Pn,Hf,Bf,Uf,v,Ko,xn,Yf,zf,An,Ff,Vf,Sn,Wf,Qf,$n,Jf,Kf,On,Xf,Zf,Mn,ed,td,Gn,od,ad,jn,nd,ld,rd,y,Xo,Cn,sd,id,Ln,fd,dd,Rn,hd,pd,qn,cd,ud,se,md,Nn,gd,vd,_d,bd,E,Hn,Ed,yd,Bn,wd,Id,Un,Dd,Td,Yn,kd,Pd,Zo,zn,xd,Ad,$t,Sd,$d,Nl,k,Fn,Od,Md,Vn,Gd,jd,Ot,Wn,Cd,Ld,Mt,Rd,Hl,ie,we,Qn,Gt,qd,Jn,Nd,Bl,w,Hd,Kn,Bd,Ud,Xn,Yd,zd,Zn,Fd,Vd,el,Wd,Qd,Ul,P,Ie,tl,Jd,Kd,jt,ol,Xd,Zd,eh,th,Z,al,oh,ah,nl,nh,lh,ll,rh,sh,ih,ee,rl,fh,dh,Ct,hh,ph,ea,ch,uh,mh,x,sl,gh,vh,il,_h,bh,fl,Eh,yh,dl,wh,Ih,Yl,fe,De,hl,Lt,Dh,pl,Th,zl,de,Te,cl,Rt,kh,ul,Ph,Fl,qt,Vl,he,ke,ml,Nt,xh,gl,Ah,Wl,Pe,Sh,vl,$h,Oh,Ql,Ht,Jl,Bt,Mh,Ut,ta,ap,Kl,pe,xe,_l,Yt,Gh,bl,jh,Xl,te,Ch,zt,Lh,Rh,Ft,oa,np,qh,Zl,ce,Ae,El,Vt,Nh,yl,Hh,er,Se,Bh,wl,Uh,Yh,tr,Wt,or,Qt,zh,Jt,aa,lp,ar;return Qe=new me({}),it=new me({}),kt=new me({}),Gt=new me({}),Lt=new me({}),Rt=new me({}),qt=new Kh({props:{code:`# make sure you're logged in with \`huggingface-cli login\`
from diffusers import StableDiffusionPipeline, LMSDiscreteScheduler

pipe = StableDiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5")
pipe = pipe.to("cuda")

prompt = "a photo of an astronaut riding a horse on mars"
image = pipe(prompt).images[0]

image.save("astronaut_rides_horse.png")`,highlighted:`<span class="hljs-comment"># make sure you&#x27;re logged in with \`huggingface-cli login\`</span>
<span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionPipeline, LMSDiscreteScheduler

pipe = StableDiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span>)
pipe = pipe.to(<span class="hljs-string">&quot;cuda&quot;</span>)

prompt = <span class="hljs-string">&quot;a photo of an astronaut riding a horse on mars&quot;</span>
image = pipe(prompt).images[<span class="hljs-number">0</span>]

image.save(<span class="hljs-string">&quot;astronaut_rides_horse.png&quot;</span>)`}}),Nt=new me({}),Ht=new Kh({props:{code:`import requests
from PIL import Image
from io import BytesIO

from diffusers import StableDiffusionImg2ImgPipeline

# load the pipeline
device = "cuda"
pipe = StableDiffusionImg2ImgPipeline.from_pretrained(
    "runwayml/stable-diffusion-v1-5", revision="fp16", torch_dtype=torch.float16
).to(device)

# let's download an initial image
url = "https://raw.githubusercontent.com/CompVis/stable-diffusion/main/assets/stable-samples/img2img/sketch-mountains-input.jpg"

response = requests.get(url)
init_image = Image.open(BytesIO(response.content)).convert("RGB")
init_image = init_image.resize((768, 512))

prompt = "A fantasy landscape, trending on artstation"

images = pipe(prompt=prompt, init_image=init_image, strength=0.75, guidance_scale=7.5).images

images[0].save("fantasy_landscape.png")`,highlighted:`<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO

<span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionImg2ImgPipeline

<span class="hljs-comment"># load the pipeline</span>
device = <span class="hljs-string">&quot;cuda&quot;</span>
pipe = StableDiffusionImg2ImgPipeline.from_pretrained(
    <span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span>, revision=<span class="hljs-string">&quot;fp16&quot;</span>, torch_dtype=torch.float16
).to(device)

<span class="hljs-comment"># let&#x27;s download an initial image</span>
url = <span class="hljs-string">&quot;https://raw.githubusercontent.com/CompVis/stable-diffusion/main/assets/stable-samples/img2img/sketch-mountains-input.jpg&quot;</span>

response = requests.get(url)
init_image = Image.<span class="hljs-built_in">open</span>(BytesIO(response.content)).convert(<span class="hljs-string">&quot;RGB&quot;</span>)
init_image = init_image.resize((<span class="hljs-number">768</span>, <span class="hljs-number">512</span>))

prompt = <span class="hljs-string">&quot;A fantasy landscape, trending on artstation&quot;</span>

images = pipe(prompt=prompt, init_image=init_image, strength=<span class="hljs-number">0.75</span>, guidance_scale=<span class="hljs-number">7.5</span>).images

images[<span class="hljs-number">0</span>].save(<span class="hljs-string">&quot;fantasy_landscape.png&quot;</span>)`}}),Yt=new me({}),Vt=new me({}),Wt=new Kh({props:{code:`import PIL
import requests
import torch
from io import BytesIO

from diffusers import StableDiffusionInpaintPipeline


def download_image(url):
    response = requests.get(url)
    return PIL.Image.open(BytesIO(response.content)).convert("RGB")


img_url = "https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png"
mask_url = "https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png"

init_image = download_image(img_url).resize((512, 512))
mask_image = download_image(mask_url).resize((512, 512))

pipe = StableDiffusionInpaintPipeline.from_pretrained(
    "runwayml/stable-diffusion-inpainting",
    revision="fp16",
    torch_dtype=torch.float16,
)
pipe = pipe.to("cuda")

prompt = "Face of a yellow cat, high resolution, sitting on a park bench"
image = pipe(prompt=prompt, image=init_image, mask_image=mask_image).images[0]`,highlighted:`<span class="hljs-keyword">import</span> PIL
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO

<span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionInpaintPipeline


<span class="hljs-keyword">def</span> <span class="hljs-title function_">download_image</span>(<span class="hljs-params">url</span>):
    response = requests.get(url)
    <span class="hljs-keyword">return</span> PIL.Image.<span class="hljs-built_in">open</span>(BytesIO(response.content)).convert(<span class="hljs-string">&quot;RGB&quot;</span>)


img_url = <span class="hljs-string">&quot;https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png&quot;</span>
mask_url = <span class="hljs-string">&quot;https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png&quot;</span>

init_image = download_image(img_url).resize((<span class="hljs-number">512</span>, <span class="hljs-number">512</span>))
mask_image = download_image(mask_url).resize((<span class="hljs-number">512</span>, <span class="hljs-number">512</span>))

pipe = StableDiffusionInpaintPipeline.from_pretrained(
    <span class="hljs-string">&quot;runwayml/stable-diffusion-inpainting&quot;</span>,
    revision=<span class="hljs-string">&quot;fp16&quot;</span>,
    torch_dtype=torch.float16,
)
pipe = pipe.to(<span class="hljs-string">&quot;cuda&quot;</span>)

prompt = <span class="hljs-string">&quot;Face of a yellow cat, high resolution, sitting on a park bench&quot;</span>
image = pipe(prompt=prompt, image=init_image, mask_image=mask_image).images[<span class="hljs-number">0</span>]`}}),{c(){ae=o("meta"),Dl=f(),ne=o("h1"),ge=o("a"),ra=o("span"),S(Qe.$$.fragment),Tr=f(),sa=o("span"),kr=r("Pipelines"),Tl=f(),to=o("p"),Pr=r(`Pipelines provide a simple way to run state-of-the-art diffusion models in inference.
Most diffusion systems consist of multiple independently-trained models and highly adaptable scheduler
components - all of which are needed to have a functioning end-to-end diffusion system.`),kl=f(),ve=o("p"),xr=r("As an example, "),Je=o("a"),Ar=r("Stable Diffusion"),Sr=r(" has three independently trained models:"),Pl=f(),b=o("ul"),ia=o("li"),oo=o("a"),$r=r("Autoencoder"),Or=f(),fa=o("li"),ao=o("a"),Mr=r("Conditional Unet"),Gr=f(),da=o("li"),Ke=o("a"),jr=r("CLIP text encoder"),Cr=f(),Xe=o("li"),Lr=r("a scheduler component, "),no=o("a"),Rr=r("scheduler"),qr=r(","),Nr=f(),Ze=o("li"),Hr=r("a "),et=o("a"),Br=r("CLIPFeatureExtractor"),Ur=r(","),Yr=f(),tt=o("li"),zr=r("as well as a "),lo=o("a"),Fr=r("safety checker"),Vr=r(`.
All of these components are necessary to run stable diffusion in inference even though they were trained
or created independently from each other.`),xl=f(),ro=o("p"),Wr=r(`To that end, we strive to offer all open-sourced, state-of-the-art diffusion system under a unified API.
More specifically, we strive to provide pipelines that`),Al=f(),D=o("ul"),ha=o("li"),pa=o("ol"),C=o("li"),Qr=r("can load the officially published weights and yield 1-to-1 the same outputs as the original implementation according to the corresponding paper ("),ca=o("em"),Jr=r("e.g."),Kr=f(),ot=o("a"),Xr=r("LDMTextToImagePipeline"),Zr=r(", uses the officially released weights of "),at=o("a"),es=r("High-Resolution Image Synthesis with Latent Diffusion Models"),ts=r("),"),os=f(),ua=o("li"),so=o("ol"),nt=o("li"),as=r("have a simple user interface to run the model in inference (see the "),io=o("a"),ns=r("Pipelines API"),ls=r(" section),"),rs=f(),ma=o("li"),fo=o("ol"),lt=o("li"),ss=r("are easy to understand with code that is self-explanatory and can be read along-side the official paper (see "),ho=o("a"),is=r("Pipelines summary"),fs=r("),"),ds=f(),ga=o("li"),po=o("ol"),rt=o("li"),hs=r("can easily be contributed by the community (see the "),co=o("a"),ps=r("Contribution"),cs=r(" section)."),Sl=f(),L=o("p"),va=o("strong"),us=r("Note"),ms=r(` that pipelines do not (and should not) offer any training functionality.
If you are looking for `),_a=o("em"),gs=r("official"),vs=r(" training examples, please have a look at "),st=o("a"),_s=r("examples"),bs=r("."),$l=f(),le=o("h2"),_e=o("a"),ba=o("span"),S(it.$$.fragment),Es=f(),Ea=o("span"),ys=r("\u{1F9E8} Diffusers Summary"),Ol=f(),uo=o("p"),ws=r(`The following table summarizes all officially supported pipelines, their corresponding paper, and if
available a colab notebook to directly try them out.`),Ml=f(),be=o("table"),ya=o("thead"),R=o("tr"),wa=o("th"),Is=r("Pipeline"),Ds=f(),Ia=o("th"),Ts=r("Paper"),ks=f(),mo=o("th"),Ps=r("Tasks"),xs=f(),go=o("th"),As=r("Colab"),Ss=f(),c=o("tbody"),q=o("tr"),Da=o("td"),vo=o("a"),$s=r("ddpm"),Os=f(),Ta=o("td"),ft=o("a"),ka=o("strong"),Ms=r("Denoising Diffusion Probabilistic Models"),Gs=f(),_o=o("td"),js=r("Unconditional Image Generation"),Cs=f(),Pa=o("td"),Ls=f(),N=o("tr"),xa=o("td"),bo=o("a"),Rs=r("ddim"),qs=f(),Aa=o("td"),dt=o("a"),Sa=o("strong"),Ns=r("Denoising Diffusion Implicit Models"),Hs=f(),Eo=o("td"),Bs=r("Unconditional Image Generation"),Us=f(),yo=o("td"),ht=o("a"),wo=o("img"),Ys=f(),H=o("tr"),$a=o("td"),Io=o("a"),zs=r("latent_diffusion"),Fs=f(),Oa=o("td"),pt=o("a"),Ma=o("strong"),Vs=r("High-Resolution Image Synthesis with Latent Diffusion Models"),Ws=f(),Do=o("td"),Qs=r("Text-to-Image Generation"),Js=f(),Ga=o("td"),Ks=f(),B=o("tr"),ja=o("td"),To=o("a"),Xs=r("latent_diffusion_uncond"),Zs=f(),Ca=o("td"),ct=o("a"),La=o("strong"),ei=r("High-Resolution Image Synthesis with Latent Diffusion Models"),ti=f(),ko=o("td"),oi=r("Unconditional Image Generation"),ai=f(),Ra=o("td"),ni=f(),U=o("tr"),qa=o("td"),Po=o("a"),li=r("pndm"),ri=f(),Na=o("td"),ut=o("a"),Ha=o("strong"),si=r("Pseudo Numerical Methods for Diffusion Models on Manifolds"),ii=f(),xo=o("td"),fi=r("Unconditional Image Generation"),di=f(),Ba=o("td"),hi=f(),Y=o("tr"),Ua=o("td"),Ao=o("a"),pi=r("score_sde_ve"),ci=f(),Ya=o("td"),mt=o("a"),za=o("strong"),ui=r("Score-Based Generative Modeling through Stochastic Differential Equations"),mi=f(),So=o("td"),gi=r("Unconditional Image Generation"),vi=f(),Fa=o("td"),_i=f(),z=o("tr"),Va=o("td"),$o=o("a"),bi=r("score_sde_vp"),Ei=f(),Wa=o("td"),gt=o("a"),Qa=o("strong"),yi=r("Score-Based Generative Modeling through Stochastic Differential Equations"),wi=f(),Oo=o("td"),Ii=r("Unconditional Image Generation"),Di=f(),Ja=o("td"),Ti=f(),F=o("tr"),Ka=o("td"),Mo=o("a"),ki=r("stable_diffusion"),Pi=f(),Xa=o("td"),vt=o("a"),Za=o("strong"),xi=r("Stable Diffusion"),Ai=f(),Go=o("td"),Si=r("Text-to-Image Generation"),$i=f(),jo=o("td"),_t=o("a"),Co=o("img"),Oi=f(),V=o("tr"),en=o("td"),Lo=o("a"),Mi=r("stable_diffusion"),Gi=f(),tn=o("td"),bt=o("a"),on=o("strong"),ji=r("Stable Diffusion"),Ci=f(),Ro=o("td"),Li=r("Image-to-Image Text-Guided Generation"),Ri=f(),qo=o("td"),Et=o("a"),No=o("img"),qi=f(),W=o("tr"),an=o("td"),Ho=o("a"),Ni=r("stable_diffusion"),Hi=f(),nn=o("td"),yt=o("a"),ln=o("strong"),Bi=r("Stable Diffusion"),Ui=f(),Bo=o("td"),Yi=r("Text-Guided Image Inpainting"),zi=f(),Uo=o("td"),wt=o("a"),Yo=o("img"),Fi=f(),Q=o("tr"),rn=o("td"),zo=o("a"),Vi=r("stochastic_karras_ve"),Wi=f(),sn=o("td"),It=o("a"),fn=o("strong"),Qi=r("Elucidating the Design Space of Diffusion-Based Generative Models"),Ji=f(),Fo=o("td"),Ki=r("Unconditional Image Generation"),Xi=f(),dn=o("td"),Zi=f(),J=o("tr"),hn=o("td"),Vo=o("a"),ef=r("repaint"),tf=f(),pn=o("td"),Dt=o("a"),cn=o("strong"),of=r("RePaint: Inpainting using Denoising Diffusion Probabilistic Models"),af=f(),Wo=o("td"),nf=r("Image Inpainting"),lf=f(),un=o("td"),Gl=f(),Tt=o("p"),mn=o("strong"),rf=r("Note"),sf=r(": Pipelines are simple examples of how to play around with the diffusion systems as described in the corresponding papers."),jl=f(),Ee=o("p"),ff=r("However, most of them can be adapted to use different scheduler components or even different model components. Some pipeline examples are shown in the "),Qo=o("a"),df=r("Examples"),hf=r(" below."),Cl=f(),re=o("h2"),ye=o("a"),gn=o("span"),S(kt.$$.fragment),pf=f(),vn=o("span"),cf=r("Pipelines API"),Ll=f(),Jo=o("p"),uf=r("Diffusion models often consist of multiple independently-trained models or other previously existing components."),Rl=f(),X=o("p"),mf=r(`Each model has been trained independently on a different task and the scheduler can easily be swapped out and replaced with a different one.
During inference, we however want to be able to easily load all components and use them in inference - even if one component, `),_n=o("em"),gf=r("e.g."),vf=r(" CLIP\u2019s text encoder, originates from a different library, such as "),Pt=o("a"),_f=r("Transformers"),bf=r(". To that end, all pipelines provide the following functionality:"),ql=f(),T=o("ul"),u=o("li"),xt=o("a"),bn=o("code"),Ef=r("from_pretrained"),yf=r(" method"),wf=r(" that accepts a Hugging Face Hub repository id, "),En=o("em"),If=r("e.g."),Df=f(),At=o("a"),Tf=r("runwayml/stable-diffusion-v1-5"),kf=r(" or a path to a local directory, "),yn=o("em"),Pf=r("e.g."),xf=r(`
\u201D./stable-diffusion\u201D. To correctly retrieve which models and components should be loaded, one has to provide a `),wn=o("code"),Af=r("model_index.json"),Sf=r(" file, "),In=o("em"),$f=r("e.g."),Of=f(),St=o("a"),Mf=r("runwayml/stable-diffusion-v1-5/model_index.json"),Gf=r(`, which defines all components that should be
loaded into the pipelines. More specifically, for each model/component one needs to define the format `),Dn=o("code"),jf=r('<name>: ["<library>", "<class name>"]'),Cf=r(". "),Tn=o("code"),Lf=r("<name>"),Rf=r(" is the attribute name given to the loaded instance of "),kn=o("code"),qf=r("<class name>"),Nf=r(" which can be found in the library or pipeline folder called "),Pn=o("code"),Hf=r('"<library>"'),Bf=r("."),Uf=f(),v=o("li"),Ko=o("a"),xn=o("code"),Yf=r("save_pretrained"),zf=r(" that accepts a local path, "),An=o("em"),Ff=r("e.g."),Vf=f(),Sn=o("code"),Wf=r("./stable-diffusion"),Qf=r(" under which all models/components of the pipeline will be saved. For each component/model a folder is created inside the local path that is named after the given attribute name, "),$n=o("em"),Jf=r("e.g."),Kf=f(),On=o("code"),Xf=r("./stable_diffusion/unet"),Zf=r(`.
In addition, a `),Mn=o("code"),ed=r("model_index.json"),td=r(" file is created at the root of the local path, "),Gn=o("em"),od=r("e.g."),ad=f(),jn=o("code"),nd=r("./stable_diffusion/model_index.json"),ld=r(` so that the complete pipeline can again be instantiated
from the local path.`),rd=f(),y=o("li"),Xo=o("a"),Cn=o("code"),sd=r("to"),id=r(" which accepts a "),Ln=o("code"),fd=r("string"),dd=r(" or "),Rn=o("code"),hd=r("torch.device"),pd=r(" to move all models that are of type "),qn=o("code"),cd=r("torch.nn.Module"),ud=r(" to the passed device. The behavior is fully analogous to "),se=o("a"),md=r("PyTorch\u2019s "),Nn=o("code"),gd=r("to"),vd=r(" method"),_d=r("."),bd=f(),E=o("li"),Hn=o("code"),Ed=r("__call__"),yd=r(" method to use the pipeline in inference. "),Bn=o("code"),wd=r("__call__"),Id=r(" defines inference logic of the pipeline and should ideally encompass all aspects of it, from pre-processing to forwarding tensors to the different models and schedulers, as well as post-processing. The API of the "),Un=o("code"),Dd=r("__call__"),Td=r(" method can strongly vary from pipeline to pipeline. "),Yn=o("em"),kd=r("E.g."),Pd=r(" a text-to-image pipeline, such as "),Zo=o("a"),zn=o("code"),xd=r("StableDiffusionPipeline"),Ad=r(" should accept among other things the text prompt to generate the image. A pure image generation pipeline, such as "),$t=o("a"),Sd=r("DDPMPipeline"),$d=r(` on the other hand can be run without providing any inputs. To better understand what inputs can be adapted for
each pipeline, one should look directly into the respective pipeline.`),Nl=f(),k=o("p"),Fn=o("strong"),Od=r("Note"),Md=r(": All pipelines have PyTorch\u2019s autograd disabled by decorating the "),Vn=o("code"),Gd=r("__call__"),jd=r(" method with a "),Ot=o("a"),Wn=o("code"),Cd=r("torch.no_grad"),Ld=r(` decorator because pipelines should
not be used for training. If you want to store the gradients during the forward pass, we recommend writing your own pipeline, see also our `),Mt=o("a"),Rd=r("community-examples"),Hl=f(),ie=o("h2"),we=o("a"),Qn=o("span"),S(Gt.$$.fragment),qd=f(),Jn=o("span"),Nd=r("Contribution"),Bl=f(),w=o("p"),Hd=r(`We are more than happy about any contribution to the officially supported pipelines \u{1F917}. We aspire
all of our pipelines to be  `),Kn=o("strong"),Bd=r("self-contained"),Ud=r(", "),Xn=o("strong"),Yd=r("easy-to-tweak"),zd=r(", "),Zn=o("strong"),Fd=r("beginner-friendly"),Vd=r(" and for "),el=o("strong"),Wd=r("one-purpose-only"),Qd=r("."),Ul=f(),P=o("ul"),Ie=o("li"),tl=o("strong"),Jd=r("Self-contained"),Kd=r(": A pipeline shall be as self-contained as possible. More specifically, this means that all functionality should be either directly defined in the pipeline file itself, should be inherited from (and only from) the "),jt=o("a"),ol=o("code"),Xd=r("DiffusionPipeline"),Zd=r(" class"),eh=r(" or be directly attached to the model and scheduler components of the pipeline."),th=f(),Z=o("li"),al=o("strong"),oh=r("Easy-to-use"),ah=r(`: Pipelines should be extremely easy to use - one should be able to load the pipeline and
use it for its designated task, `),nl=o("em"),nh=r("e.g."),lh=r(` text-to-image generation, in just a couple of lines of code. Most
logic including pre-processing, an unrolled diffusion loop, and post-processing should all happen inside the `),ll=o("code"),rh=r("__call__"),sh=r(" method."),ih=f(),ee=o("li"),rl=o("strong"),fh=r("Easy-to-tweak"),dh=r(": Certain pipelines will not be able to handle all use cases and tasks that you might like them to. If you want to use a certain pipeline for a specific use case that is not yet supported, you might have to copy the pipeline file and tweak the code to your needs. We try to make the pipeline code as readable as possible so that each part \u2013from pre-processing to diffusing to post-processing\u2013 can easily be adapted. If you would like the community to benefit from your customized pipeline, we would love to see a contribution to our "),Ct=o("a"),hh=r("community-examples"),ph=r(". If you feel that an important pipeline should be part of the official pipelines but isn\u2019t, a contribution to the "),ea=o("a"),ch=r("official pipelines"),uh=r(" would be even better."),mh=f(),x=o("li"),sl=o("strong"),gh=r("One-purpose-only"),vh=r(": Pipelines should be used for one task and one task only. Even if two tasks are very similar from a modeling point of view, "),il=o("em"),_h=r("e.g."),bh=r(" image2image translation and in-painting, pipelines shall be used for one task only to keep them "),fl=o("em"),Eh=r("easy-to-tweak"),yh=r(" and "),dl=o("em"),wh=r("readable"),Ih=r("."),Yl=f(),fe=o("h2"),De=o("a"),hl=o("span"),S(Lt.$$.fragment),Dh=f(),pl=o("span"),Th=r("Examples"),zl=f(),de=o("h3"),Te=o("a"),cl=o("span"),S(Rt.$$.fragment),kh=f(),ul=o("span"),Ph=r("Text-to-Image generation with Stable Diffusion"),Fl=f(),S(qt.$$.fragment),Vl=f(),he=o("h3"),ke=o("a"),ml=o("span"),S(Nt.$$.fragment),xh=f(),gl=o("span"),Ah=r("Image-to-Image text-guided generation with Stable Diffusion"),Wl=f(),Pe=o("p"),Sh=r("The "),vl=o("code"),$h=r("StableDiffusionImg2ImgPipeline"),Oh=r(" lets you pass a text prompt and an initial image to condition the generation of new images."),Ql=f(),S(Ht.$$.fragment),Jl=f(),Bt=o("p"),Mh=r("You can also run this example on colab "),Ut=o("a"),ta=o("img"),Kl=f(),pe=o("h3"),xe=o("a"),_l=o("span"),S(Yt.$$.fragment),Gh=f(),bl=o("span"),jh=r("Tweak prompts reusing seeds and latents"),Xl=f(),te=o("p"),Ch=r("You can generate your own latents to reproduce results, or tweak your prompt on a specific result you liked. "),zt=o("a"),Lh=r("This notebook"),Rh=r(" shows how to do it step by step. You can also run it in Google Colab "),Ft=o("a"),oa=o("img"),qh=r("."),Zl=f(),ce=o("h3"),Ae=o("a"),El=o("span"),S(Vt.$$.fragment),Nh=f(),yl=o("span"),Hh=r("In-painting using Stable Diffusion"),er=f(),Se=o("p"),Bh=r("The "),wl=o("code"),Uh=r("StableDiffusionInpaintPipeline"),Yh=r(" lets you edit specific parts of an image by providing a mask and text prompt."),tr=f(),S(Wt.$$.fragment),or=f(),Qt=o("p"),zh=r("You can also run this example on colab "),Jt=o("a"),aa=o("img"),this.h()},l(l){const h=eg('[data-svelte="svelte-1phssyn"]',document.head);ae=a(h,"META",{name:!0,content:!0}),h.forEach(t),Dl=d(l),ne=a(l,"H1",{class:!0});var nr=n(ne);ge=a(nr,"A",{id:!0,class:!0,href:!0});var rp=n(ge);ra=a(rp,"SPAN",{});var sp=n(ra);$(Qe.$$.fragment,sp),sp.forEach(t),rp.forEach(t),Tr=d(nr),sa=a(nr,"SPAN",{});var ip=n(sa);kr=s(ip,"Pipelines"),ip.forEach(t),nr.forEach(t),Tl=d(l),to=a(l,"P",{});var fp=n(to);Pr=s(fp,`Pipelines provide a simple way to run state-of-the-art diffusion models in inference.
Most diffusion systems consist of multiple independently-trained models and highly adaptable scheduler
components - all of which are needed to have a functioning end-to-end diffusion system.`),fp.forEach(t),kl=d(l),ve=a(l,"P",{});var lr=n(ve);xr=s(lr,"As an example, "),Je=a(lr,"A",{href:!0,rel:!0});var dp=n(Je);Ar=s(dp,"Stable Diffusion"),dp.forEach(t),Sr=s(lr," has three independently trained models:"),lr.forEach(t),Pl=d(l),b=a(l,"UL",{});var A=n(b);ia=a(A,"LI",{});var hp=n(ia);oo=a(hp,"A",{href:!0});var pp=n(oo);$r=s(pp,"Autoencoder"),pp.forEach(t),hp.forEach(t),Or=d(A),fa=a(A,"LI",{});var cp=n(fa);ao=a(cp,"A",{href:!0});var up=n(ao);Mr=s(up,"Conditional Unet"),up.forEach(t),cp.forEach(t),Gr=d(A),da=a(A,"LI",{});var mp=n(da);Ke=a(mp,"A",{href:!0,rel:!0});var gp=n(Ke);jr=s(gp,"CLIP text encoder"),gp.forEach(t),mp.forEach(t),Cr=d(A),Xe=a(A,"LI",{});var rr=n(Xe);Lr=s(rr,"a scheduler component, "),no=a(rr,"A",{href:!0});var vp=n(no);Rr=s(vp,"scheduler"),vp.forEach(t),qr=s(rr,","),rr.forEach(t),Nr=d(A),Ze=a(A,"LI",{});var sr=n(Ze);Hr=s(sr,"a "),et=a(sr,"A",{href:!0,rel:!0});var _p=n(et);Br=s(_p,"CLIPFeatureExtractor"),_p.forEach(t),Ur=s(sr,","),sr.forEach(t),Yr=d(A),tt=a(A,"LI",{});var ir=n(tt);zr=s(ir,"as well as a "),lo=a(ir,"A",{href:!0});var bp=n(lo);Fr=s(bp,"safety checker"),bp.forEach(t),Vr=s(ir,`.
All of these components are necessary to run stable diffusion in inference even though they were trained
or created independently from each other.`),ir.forEach(t),A.forEach(t),xl=d(l),ro=a(l,"P",{});var Ep=n(ro);Wr=s(Ep,`To that end, we strive to offer all open-sourced, state-of-the-art diffusion system under a unified API.
More specifically, we strive to provide pipelines that`),Ep.forEach(t),Al=d(l),D=a(l,"UL",{});var $e=n(D);ha=a($e,"LI",{});var yp=n(ha);pa=a(yp,"OL",{});var wp=n(pa);C=a(wp,"LI",{});var Oe=n(C);Qr=s(Oe,"can load the officially published weights and yield 1-to-1 the same outputs as the original implementation according to the corresponding paper ("),ca=a(Oe,"EM",{});var Ip=n(ca);Jr=s(Ip,"e.g."),Ip.forEach(t),Kr=d(Oe),ot=a(Oe,"A",{href:!0,rel:!0});var Dp=n(ot);Xr=s(Dp,"LDMTextToImagePipeline"),Dp.forEach(t),Zr=s(Oe,", uses the officially released weights of "),at=a(Oe,"A",{href:!0,rel:!0});var Tp=n(at);es=s(Tp,"High-Resolution Image Synthesis with Latent Diffusion Models"),Tp.forEach(t),ts=s(Oe,"),"),Oe.forEach(t),wp.forEach(t),yp.forEach(t),os=d($e),ua=a($e,"LI",{});var kp=n(ua);so=a(kp,"OL",{start:!0});var Pp=n(so);nt=a(Pp,"LI",{});var fr=n(nt);as=s(fr,"have a simple user interface to run the model in inference (see the "),io=a(fr,"A",{href:!0});var xp=n(io);ns=s(xp,"Pipelines API"),xp.forEach(t),ls=s(fr," section),"),fr.forEach(t),Pp.forEach(t),kp.forEach(t),rs=d($e),ma=a($e,"LI",{});var Ap=n(ma);fo=a(Ap,"OL",{start:!0});var Sp=n(fo);lt=a(Sp,"LI",{});var dr=n(lt);ss=s(dr,"are easy to understand with code that is self-explanatory and can be read along-side the official paper (see "),ho=a(dr,"A",{href:!0});var $p=n(ho);is=s($p,"Pipelines summary"),$p.forEach(t),fs=s(dr,"),"),dr.forEach(t),Sp.forEach(t),Ap.forEach(t),ds=d($e),ga=a($e,"LI",{});var Op=n(ga);po=a(Op,"OL",{start:!0});var Mp=n(po);rt=a(Mp,"LI",{});var hr=n(rt);hs=s(hr,"can easily be contributed by the community (see the "),co=a(hr,"A",{href:!0});var Gp=n(co);ps=s(Gp,"Contribution"),Gp.forEach(t),cs=s(hr," section)."),hr.forEach(t),Mp.forEach(t),Op.forEach(t),$e.forEach(t),Sl=d(l),L=a(l,"P",{});var Kt=n(L);va=a(Kt,"STRONG",{});var jp=n(va);us=s(jp,"Note"),jp.forEach(t),ms=s(Kt,` that pipelines do not (and should not) offer any training functionality.
If you are looking for `),_a=a(Kt,"EM",{});var Cp=n(_a);gs=s(Cp,"official"),Cp.forEach(t),vs=s(Kt," training examples, please have a look at "),st=a(Kt,"A",{href:!0,rel:!0});var Lp=n(st);_s=s(Lp,"examples"),Lp.forEach(t),bs=s(Kt,"."),Kt.forEach(t),$l=d(l),le=a(l,"H2",{class:!0});var pr=n(le);_e=a(pr,"A",{id:!0,class:!0,href:!0});var Rp=n(_e);ba=a(Rp,"SPAN",{});var qp=n(ba);$(it.$$.fragment,qp),qp.forEach(t),Rp.forEach(t),Es=d(pr),Ea=a(pr,"SPAN",{});var Np=n(Ea);ys=s(Np,"\u{1F9E8} Diffusers Summary"),Np.forEach(t),pr.forEach(t),Ol=d(l),uo=a(l,"P",{});var Hp=n(uo);ws=s(Hp,`The following table summarizes all officially supported pipelines, their corresponding paper, and if
available a colab notebook to directly try them out.`),Hp.forEach(t),Ml=d(l),be=a(l,"TABLE",{});var cr=n(be);ya=a(cr,"THEAD",{});var Bp=n(ya);R=a(Bp,"TR",{});var Me=n(R);wa=a(Me,"TH",{});var Up=n(wa);Is=s(Up,"Pipeline"),Up.forEach(t),Ds=d(Me),Ia=a(Me,"TH",{});var Yp=n(Ia);Ts=s(Yp,"Paper"),Yp.forEach(t),ks=d(Me),mo=a(Me,"TH",{align:!0});var zp=n(mo);Ps=s(zp,"Tasks"),zp.forEach(t),xs=d(Me),go=a(Me,"TH",{align:!0});var Fp=n(go);As=s(Fp,"Colab"),Fp.forEach(t),Me.forEach(t),Bp.forEach(t),Ss=d(cr),c=a(cr,"TBODY",{});var m=n(c);q=a(m,"TR",{});var Ge=n(q);Da=a(Ge,"TD",{});var Vp=n(Da);vo=a(Vp,"A",{href:!0});var Wp=n(vo);$s=s(Wp,"ddpm"),Wp.forEach(t),Vp.forEach(t),Os=d(Ge),Ta=a(Ge,"TD",{});var Qp=n(Ta);ft=a(Qp,"A",{href:!0,rel:!0});var Jp=n(ft);ka=a(Jp,"STRONG",{});var Kp=n(ka);Ms=s(Kp,"Denoising Diffusion Probabilistic Models"),Kp.forEach(t),Jp.forEach(t),Qp.forEach(t),Gs=d(Ge),_o=a(Ge,"TD",{align:!0});var Xp=n(_o);js=s(Xp,"Unconditional Image Generation"),Xp.forEach(t),Cs=d(Ge),Pa=a(Ge,"TD",{align:!0}),n(Pa).forEach(t),Ge.forEach(t),Ls=d(m),N=a(m,"TR",{});var je=n(N);xa=a(je,"TD",{});var Zp=n(xa);bo=a(Zp,"A",{href:!0});var ec=n(bo);Rs=s(ec,"ddim"),ec.forEach(t),Zp.forEach(t),qs=d(je),Aa=a(je,"TD",{});var tc=n(Aa);dt=a(tc,"A",{href:!0,rel:!0});var oc=n(dt);Sa=a(oc,"STRONG",{});var ac=n(Sa);Ns=s(ac,"Denoising Diffusion Implicit Models"),ac.forEach(t),oc.forEach(t),tc.forEach(t),Hs=d(je),Eo=a(je,"TD",{align:!0});var nc=n(Eo);Bs=s(nc,"Unconditional Image Generation"),nc.forEach(t),Us=d(je),yo=a(je,"TD",{align:!0});var lc=n(yo);ht=a(lc,"A",{href:!0,rel:!0});var rc=n(ht);wo=a(rc,"IMG",{src:!0,alt:!0}),rc.forEach(t),lc.forEach(t),je.forEach(t),Ys=d(m),H=a(m,"TR",{});var Ce=n(H);$a=a(Ce,"TD",{});var sc=n($a);Io=a(sc,"A",{href:!0});var ic=n(Io);zs=s(ic,"latent_diffusion"),ic.forEach(t),sc.forEach(t),Fs=d(Ce),Oa=a(Ce,"TD",{});var fc=n(Oa);pt=a(fc,"A",{href:!0,rel:!0});var dc=n(pt);Ma=a(dc,"STRONG",{});var hc=n(Ma);Vs=s(hc,"High-Resolution Image Synthesis with Latent Diffusion Models"),hc.forEach(t),dc.forEach(t),fc.forEach(t),Ws=d(Ce),Do=a(Ce,"TD",{align:!0});var pc=n(Do);Qs=s(pc,"Text-to-Image Generation"),pc.forEach(t),Js=d(Ce),Ga=a(Ce,"TD",{align:!0}),n(Ga).forEach(t),Ce.forEach(t),Ks=d(m),B=a(m,"TR",{});var Le=n(B);ja=a(Le,"TD",{});var cc=n(ja);To=a(cc,"A",{href:!0});var uc=n(To);Xs=s(uc,"latent_diffusion_uncond"),uc.forEach(t),cc.forEach(t),Zs=d(Le),Ca=a(Le,"TD",{});var mc=n(Ca);ct=a(mc,"A",{href:!0,rel:!0});var gc=n(ct);La=a(gc,"STRONG",{});var vc=n(La);ei=s(vc,"High-Resolution Image Synthesis with Latent Diffusion Models"),vc.forEach(t),gc.forEach(t),mc.forEach(t),ti=d(Le),ko=a(Le,"TD",{align:!0});var _c=n(ko);oi=s(_c,"Unconditional Image Generation"),_c.forEach(t),ai=d(Le),Ra=a(Le,"TD",{align:!0}),n(Ra).forEach(t),Le.forEach(t),ni=d(m),U=a(m,"TR",{});var Re=n(U);qa=a(Re,"TD",{});var bc=n(qa);Po=a(bc,"A",{href:!0});var Ec=n(Po);li=s(Ec,"pndm"),Ec.forEach(t),bc.forEach(t),ri=d(Re),Na=a(Re,"TD",{});var yc=n(Na);ut=a(yc,"A",{href:!0,rel:!0});var wc=n(ut);Ha=a(wc,"STRONG",{});var Ic=n(Ha);si=s(Ic,"Pseudo Numerical Methods for Diffusion Models on Manifolds"),Ic.forEach(t),wc.forEach(t),yc.forEach(t),ii=d(Re),xo=a(Re,"TD",{align:!0});var Dc=n(xo);fi=s(Dc,"Unconditional Image Generation"),Dc.forEach(t),di=d(Re),Ba=a(Re,"TD",{align:!0}),n(Ba).forEach(t),Re.forEach(t),hi=d(m),Y=a(m,"TR",{});var qe=n(Y);Ua=a(qe,"TD",{});var Tc=n(Ua);Ao=a(Tc,"A",{href:!0});var kc=n(Ao);pi=s(kc,"score_sde_ve"),kc.forEach(t),Tc.forEach(t),ci=d(qe),Ya=a(qe,"TD",{});var Pc=n(Ya);mt=a(Pc,"A",{href:!0,rel:!0});var xc=n(mt);za=a(xc,"STRONG",{});var Ac=n(za);ui=s(Ac,"Score-Based Generative Modeling through Stochastic Differential Equations"),Ac.forEach(t),xc.forEach(t),Pc.forEach(t),mi=d(qe),So=a(qe,"TD",{align:!0});var Sc=n(So);gi=s(Sc,"Unconditional Image Generation"),Sc.forEach(t),vi=d(qe),Fa=a(qe,"TD",{align:!0}),n(Fa).forEach(t),qe.forEach(t),_i=d(m),z=a(m,"TR",{});var Ne=n(z);Va=a(Ne,"TD",{});var $c=n(Va);$o=a($c,"A",{href:!0});var Oc=n($o);bi=s(Oc,"score_sde_vp"),Oc.forEach(t),$c.forEach(t),Ei=d(Ne),Wa=a(Ne,"TD",{});var Mc=n(Wa);gt=a(Mc,"A",{href:!0,rel:!0});var Gc=n(gt);Qa=a(Gc,"STRONG",{});var jc=n(Qa);yi=s(jc,"Score-Based Generative Modeling through Stochastic Differential Equations"),jc.forEach(t),Gc.forEach(t),Mc.forEach(t),wi=d(Ne),Oo=a(Ne,"TD",{align:!0});var Cc=n(Oo);Ii=s(Cc,"Unconditional Image Generation"),Cc.forEach(t),Di=d(Ne),Ja=a(Ne,"TD",{align:!0}),n(Ja).forEach(t),Ne.forEach(t),Ti=d(m),F=a(m,"TR",{});var He=n(F);Ka=a(He,"TD",{});var Lc=n(Ka);Mo=a(Lc,"A",{href:!0});var Rc=n(Mo);ki=s(Rc,"stable_diffusion"),Rc.forEach(t),Lc.forEach(t),Pi=d(He),Xa=a(He,"TD",{});var qc=n(Xa);vt=a(qc,"A",{href:!0,rel:!0});var Nc=n(vt);Za=a(Nc,"STRONG",{});var Hc=n(Za);xi=s(Hc,"Stable Diffusion"),Hc.forEach(t),Nc.forEach(t),qc.forEach(t),Ai=d(He),Go=a(He,"TD",{align:!0});var Bc=n(Go);Si=s(Bc,"Text-to-Image Generation"),Bc.forEach(t),$i=d(He),jo=a(He,"TD",{align:!0});var Uc=n(jo);_t=a(Uc,"A",{href:!0,rel:!0});var Yc=n(_t);Co=a(Yc,"IMG",{src:!0,alt:!0}),Yc.forEach(t),Uc.forEach(t),He.forEach(t),Oi=d(m),V=a(m,"TR",{});var Be=n(V);en=a(Be,"TD",{});var zc=n(en);Lo=a(zc,"A",{href:!0});var Fc=n(Lo);Mi=s(Fc,"stable_diffusion"),Fc.forEach(t),zc.forEach(t),Gi=d(Be),tn=a(Be,"TD",{});var Vc=n(tn);bt=a(Vc,"A",{href:!0,rel:!0});var Wc=n(bt);on=a(Wc,"STRONG",{});var Qc=n(on);ji=s(Qc,"Stable Diffusion"),Qc.forEach(t),Wc.forEach(t),Vc.forEach(t),Ci=d(Be),Ro=a(Be,"TD",{align:!0});var Jc=n(Ro);Li=s(Jc,"Image-to-Image Text-Guided Generation"),Jc.forEach(t),Ri=d(Be),qo=a(Be,"TD",{align:!0});var Kc=n(qo);Et=a(Kc,"A",{href:!0,rel:!0});var Xc=n(Et);No=a(Xc,"IMG",{src:!0,alt:!0}),Xc.forEach(t),Kc.forEach(t),Be.forEach(t),qi=d(m),W=a(m,"TR",{});var Ue=n(W);an=a(Ue,"TD",{});var Zc=n(an);Ho=a(Zc,"A",{href:!0});var eu=n(Ho);Ni=s(eu,"stable_diffusion"),eu.forEach(t),Zc.forEach(t),Hi=d(Ue),nn=a(Ue,"TD",{});var tu=n(nn);yt=a(tu,"A",{href:!0,rel:!0});var ou=n(yt);ln=a(ou,"STRONG",{});var au=n(ln);Bi=s(au,"Stable Diffusion"),au.forEach(t),ou.forEach(t),tu.forEach(t),Ui=d(Ue),Bo=a(Ue,"TD",{align:!0});var nu=n(Bo);Yi=s(nu,"Text-Guided Image Inpainting"),nu.forEach(t),zi=d(Ue),Uo=a(Ue,"TD",{align:!0});var lu=n(Uo);wt=a(lu,"A",{href:!0,rel:!0});var ru=n(wt);Yo=a(ru,"IMG",{src:!0,alt:!0}),ru.forEach(t),lu.forEach(t),Ue.forEach(t),Fi=d(m),Q=a(m,"TR",{});var Ye=n(Q);rn=a(Ye,"TD",{});var su=n(rn);zo=a(su,"A",{href:!0});var iu=n(zo);Vi=s(iu,"stochastic_karras_ve"),iu.forEach(t),su.forEach(t),Wi=d(Ye),sn=a(Ye,"TD",{});var fu=n(sn);It=a(fu,"A",{href:!0,rel:!0});var du=n(It);fn=a(du,"STRONG",{});var hu=n(fn);Qi=s(hu,"Elucidating the Design Space of Diffusion-Based Generative Models"),hu.forEach(t),du.forEach(t),fu.forEach(t),Ji=d(Ye),Fo=a(Ye,"TD",{align:!0});var pu=n(Fo);Ki=s(pu,"Unconditional Image Generation"),pu.forEach(t),Xi=d(Ye),dn=a(Ye,"TD",{align:!0}),n(dn).forEach(t),Ye.forEach(t),Zi=d(m),J=a(m,"TR",{});var ze=n(J);hn=a(ze,"TD",{});var cu=n(hn);Vo=a(cu,"A",{href:!0});var uu=n(Vo);ef=s(uu,"repaint"),uu.forEach(t),cu.forEach(t),tf=d(ze),pn=a(ze,"TD",{});var mu=n(pn);Dt=a(mu,"A",{href:!0,rel:!0});var gu=n(Dt);cn=a(gu,"STRONG",{});var vu=n(cn);of=s(vu,"RePaint: Inpainting using Denoising Diffusion Probabilistic Models"),vu.forEach(t),gu.forEach(t),mu.forEach(t),af=d(ze),Wo=a(ze,"TD",{align:!0});var _u=n(Wo);nf=s(_u,"Image Inpainting"),_u.forEach(t),lf=d(ze),un=a(ze,"TD",{align:!0}),n(un).forEach(t),ze.forEach(t),m.forEach(t),cr.forEach(t),Gl=d(l),Tt=a(l,"P",{});var Fh=n(Tt);mn=a(Fh,"STRONG",{});var bu=n(mn);rf=s(bu,"Note"),bu.forEach(t),sf=s(Fh,": Pipelines are simple examples of how to play around with the diffusion systems as described in the corresponding papers."),Fh.forEach(t),jl=d(l),Ee=a(l,"P",{});var ur=n(Ee);ff=s(ur,"However, most of them can be adapted to use different scheduler components or even different model components. Some pipeline examples are shown in the "),Qo=a(ur,"A",{href:!0});var Eu=n(Qo);df=s(Eu,"Examples"),Eu.forEach(t),hf=s(ur," below."),ur.forEach(t),Cl=d(l),re=a(l,"H2",{class:!0});var mr=n(re);ye=a(mr,"A",{id:!0,class:!0,href:!0});var yu=n(ye);gn=a(yu,"SPAN",{});var wu=n(gn);$(kt.$$.fragment,wu),wu.forEach(t),yu.forEach(t),pf=d(mr),vn=a(mr,"SPAN",{});var Iu=n(vn);cf=s(Iu,"Pipelines API"),Iu.forEach(t),mr.forEach(t),Ll=d(l),Jo=a(l,"P",{});var Du=n(Jo);uf=s(Du,"Diffusion models often consist of multiple independently-trained models or other previously existing components."),Du.forEach(t),Rl=d(l),X=a(l,"P",{});var na=n(X);mf=s(na,`Each model has been trained independently on a different task and the scheduler can easily be swapped out and replaced with a different one.
During inference, we however want to be able to easily load all components and use them in inference - even if one component, `),_n=a(na,"EM",{});var Tu=n(_n);gf=s(Tu,"e.g."),Tu.forEach(t),vf=s(na," CLIP\u2019s text encoder, originates from a different library, such as "),Pt=a(na,"A",{href:!0,rel:!0});var ku=n(Pt);_f=s(ku,"Transformers"),ku.forEach(t),bf=s(na,". To that end, all pipelines provide the following functionality:"),na.forEach(t),ql=d(l),T=a(l,"UL",{});var Fe=n(T);u=a(Fe,"LI",{});var g=n(u);xt=a(g,"A",{href:!0});var Vh=n(xt);bn=a(Vh,"CODE",{});var Pu=n(bn);Ef=s(Pu,"from_pretrained"),Pu.forEach(t),yf=s(Vh," method"),Vh.forEach(t),wf=s(g," that accepts a Hugging Face Hub repository id, "),En=a(g,"EM",{});var xu=n(En);If=s(xu,"e.g."),xu.forEach(t),Df=d(g),At=a(g,"A",{href:!0,rel:!0});var Au=n(At);Tf=s(Au,"runwayml/stable-diffusion-v1-5"),Au.forEach(t),kf=s(g," or a path to a local directory, "),yn=a(g,"EM",{});var Su=n(yn);Pf=s(Su,"e.g."),Su.forEach(t),xf=s(g,`
\u201D./stable-diffusion\u201D. To correctly retrieve which models and components should be loaded, one has to provide a `),wn=a(g,"CODE",{});var $u=n(wn);Af=s($u,"model_index.json"),$u.forEach(t),Sf=s(g," file, "),In=a(g,"EM",{});var Ou=n(In);$f=s(Ou,"e.g."),Ou.forEach(t),Of=d(g),St=a(g,"A",{href:!0,rel:!0});var Mu=n(St);Mf=s(Mu,"runwayml/stable-diffusion-v1-5/model_index.json"),Mu.forEach(t),Gf=s(g,`, which defines all components that should be
loaded into the pipelines. More specifically, for each model/component one needs to define the format `),Dn=a(g,"CODE",{});var Gu=n(Dn);jf=s(Gu,'<name>: ["<library>", "<class name>"]'),Gu.forEach(t),Cf=s(g,". "),Tn=a(g,"CODE",{});var ju=n(Tn);Lf=s(ju,"<name>"),ju.forEach(t),Rf=s(g," is the attribute name given to the loaded instance of "),kn=a(g,"CODE",{});var Cu=n(kn);qf=s(Cu,"<class name>"),Cu.forEach(t),Nf=s(g," which can be found in the library or pipeline folder called "),Pn=a(g,"CODE",{});var Lu=n(Pn);Hf=s(Lu,'"<library>"'),Lu.forEach(t),Bf=s(g,"."),g.forEach(t),Uf=d(Fe),v=a(Fe,"LI",{});var _=n(v);Ko=a(_,"A",{href:!0});var Ru=n(Ko);xn=a(Ru,"CODE",{});var qu=n(xn);Yf=s(qu,"save_pretrained"),qu.forEach(t),Ru.forEach(t),zf=s(_," that accepts a local path, "),An=a(_,"EM",{});var Nu=n(An);Ff=s(Nu,"e.g."),Nu.forEach(t),Vf=d(_),Sn=a(_,"CODE",{});var Hu=n(Sn);Wf=s(Hu,"./stable-diffusion"),Hu.forEach(t),Qf=s(_," under which all models/components of the pipeline will be saved. For each component/model a folder is created inside the local path that is named after the given attribute name, "),$n=a(_,"EM",{});var Bu=n($n);Jf=s(Bu,"e.g."),Bu.forEach(t),Kf=d(_),On=a(_,"CODE",{});var Uu=n(On);Xf=s(Uu,"./stable_diffusion/unet"),Uu.forEach(t),Zf=s(_,`.
In addition, a `),Mn=a(_,"CODE",{});var Yu=n(Mn);ed=s(Yu,"model_index.json"),Yu.forEach(t),td=s(_," file is created at the root of the local path, "),Gn=a(_,"EM",{});var zu=n(Gn);od=s(zu,"e.g."),zu.forEach(t),ad=d(_),jn=a(_,"CODE",{});var Fu=n(jn);nd=s(Fu,"./stable_diffusion/model_index.json"),Fu.forEach(t),ld=s(_,` so that the complete pipeline can again be instantiated
from the local path.`),_.forEach(t),rd=d(Fe),y=a(Fe,"LI",{});var K=n(y);Xo=a(K,"A",{href:!0});var Vu=n(Xo);Cn=a(Vu,"CODE",{});var Wu=n(Cn);sd=s(Wu,"to"),Wu.forEach(t),Vu.forEach(t),id=s(K," which accepts a "),Ln=a(K,"CODE",{});var Qu=n(Ln);fd=s(Qu,"string"),Qu.forEach(t),dd=s(K," or "),Rn=a(K,"CODE",{});var Ju=n(Rn);hd=s(Ju,"torch.device"),Ju.forEach(t),pd=s(K," to move all models that are of type "),qn=a(K,"CODE",{});var Ku=n(qn);cd=s(Ku,"torch.nn.Module"),Ku.forEach(t),ud=s(K," to the passed device. The behavior is fully analogous to "),se=a(K,"A",{href:!0,rel:!0});var gr=n(se);md=s(gr,"PyTorch\u2019s "),Nn=a(gr,"CODE",{});var Xu=n(Nn);gd=s(Xu,"to"),Xu.forEach(t),vd=s(gr," method"),gr.forEach(t),_d=s(K,"."),K.forEach(t),bd=d(Fe),E=a(Fe,"LI",{});var I=n(E);Hn=a(I,"CODE",{});var Zu=n(Hn);Ed=s(Zu,"__call__"),Zu.forEach(t),yd=s(I," method to use the pipeline in inference. "),Bn=a(I,"CODE",{});var em=n(Bn);wd=s(em,"__call__"),em.forEach(t),Id=s(I," defines inference logic of the pipeline and should ideally encompass all aspects of it, from pre-processing to forwarding tensors to the different models and schedulers, as well as post-processing. The API of the "),Un=a(I,"CODE",{});var tm=n(Un);Dd=s(tm,"__call__"),tm.forEach(t),Td=s(I," method can strongly vary from pipeline to pipeline. "),Yn=a(I,"EM",{});var om=n(Yn);kd=s(om,"E.g."),om.forEach(t),Pd=s(I," a text-to-image pipeline, such as "),Zo=a(I,"A",{href:!0});var am=n(Zo);zn=a(am,"CODE",{});var nm=n(zn);xd=s(nm,"StableDiffusionPipeline"),nm.forEach(t),am.forEach(t),Ad=s(I," should accept among other things the text prompt to generate the image. A pure image generation pipeline, such as "),$t=a(I,"A",{href:!0,rel:!0});var lm=n($t);Sd=s(lm,"DDPMPipeline"),lm.forEach(t),$d=s(I,` on the other hand can be run without providing any inputs. To better understand what inputs can be adapted for
each pipeline, one should look directly into the respective pipeline.`),I.forEach(t),Fe.forEach(t),Nl=d(l),k=a(l,"P",{});var Ve=n(k);Fn=a(Ve,"STRONG",{});var rm=n(Fn);Od=s(rm,"Note"),rm.forEach(t),Md=s(Ve,": All pipelines have PyTorch\u2019s autograd disabled by decorating the "),Vn=a(Ve,"CODE",{});var sm=n(Vn);Gd=s(sm,"__call__"),sm.forEach(t),jd=s(Ve," method with a "),Ot=a(Ve,"A",{href:!0,rel:!0});var im=n(Ot);Wn=a(im,"CODE",{});var fm=n(Wn);Cd=s(fm,"torch.no_grad"),fm.forEach(t),im.forEach(t),Ld=s(Ve,` decorator because pipelines should
not be used for training. If you want to store the gradients during the forward pass, we recommend writing your own pipeline, see also our `),Mt=a(Ve,"A",{href:!0,rel:!0});var dm=n(Mt);Rd=s(dm,"community-examples"),dm.forEach(t),Ve.forEach(t),Hl=d(l),ie=a(l,"H2",{class:!0});var vr=n(ie);we=a(vr,"A",{id:!0,class:!0,href:!0});var hm=n(we);Qn=a(hm,"SPAN",{});var pm=n(Qn);$(Gt.$$.fragment,pm),pm.forEach(t),hm.forEach(t),qd=d(vr),Jn=a(vr,"SPAN",{});var cm=n(Jn);Nd=s(cm,"Contribution"),cm.forEach(t),vr.forEach(t),Bl=d(l),w=a(l,"P",{});var oe=n(w);Hd=s(oe,`We are more than happy about any contribution to the officially supported pipelines \u{1F917}. We aspire
all of our pipelines to be  `),Kn=a(oe,"STRONG",{});var um=n(Kn);Bd=s(um,"self-contained"),um.forEach(t),Ud=s(oe,", "),Xn=a(oe,"STRONG",{});var mm=n(Xn);Yd=s(mm,"easy-to-tweak"),mm.forEach(t),zd=s(oe,", "),Zn=a(oe,"STRONG",{});var gm=n(Zn);Fd=s(gm,"beginner-friendly"),gm.forEach(t),Vd=s(oe," and for "),el=a(oe,"STRONG",{});var vm=n(el);Wd=s(vm,"one-purpose-only"),vm.forEach(t),Qd=s(oe,"."),oe.forEach(t),Ul=d(l),P=a(l,"UL",{});var We=n(P);Ie=a(We,"LI",{});var Il=n(Ie);tl=a(Il,"STRONG",{});var _m=n(tl);Jd=s(_m,"Self-contained"),_m.forEach(t),Kd=s(Il,": A pipeline shall be as self-contained as possible. More specifically, this means that all functionality should be either directly defined in the pipeline file itself, should be inherited from (and only from) the "),jt=a(Il,"A",{href:!0});var Wh=n(jt);ol=a(Wh,"CODE",{});var bm=n(ol);Xd=s(bm,"DiffusionPipeline"),bm.forEach(t),Zd=s(Wh," class"),Wh.forEach(t),eh=s(Il," or be directly attached to the model and scheduler components of the pipeline."),Il.forEach(t),th=d(We),Z=a(We,"LI",{});var Xt=n(Z);al=a(Xt,"STRONG",{});var Em=n(al);oh=s(Em,"Easy-to-use"),Em.forEach(t),ah=s(Xt,`: Pipelines should be extremely easy to use - one should be able to load the pipeline and
use it for its designated task, `),nl=a(Xt,"EM",{});var ym=n(nl);nh=s(ym,"e.g."),ym.forEach(t),lh=s(Xt,` text-to-image generation, in just a couple of lines of code. Most
logic including pre-processing, an unrolled diffusion loop, and post-processing should all happen inside the `),ll=a(Xt,"CODE",{});var wm=n(ll);rh=s(wm,"__call__"),wm.forEach(t),sh=s(Xt," method."),Xt.forEach(t),ih=d(We),ee=a(We,"LI",{});var Zt=n(ee);rl=a(Zt,"STRONG",{});var Im=n(rl);fh=s(Im,"Easy-to-tweak"),Im.forEach(t),dh=s(Zt,": Certain pipelines will not be able to handle all use cases and tasks that you might like them to. If you want to use a certain pipeline for a specific use case that is not yet supported, you might have to copy the pipeline file and tweak the code to your needs. We try to make the pipeline code as readable as possible so that each part \u2013from pre-processing to diffusing to post-processing\u2013 can easily be adapted. If you would like the community to benefit from your customized pipeline, we would love to see a contribution to our "),Ct=a(Zt,"A",{href:!0,rel:!0});var Dm=n(Ct);hh=s(Dm,"community-examples"),Dm.forEach(t),ph=s(Zt,". If you feel that an important pipeline should be part of the official pipelines but isn\u2019t, a contribution to the "),ea=a(Zt,"A",{href:!0});var Tm=n(ea);ch=s(Tm,"official pipelines"),Tm.forEach(t),uh=s(Zt," would be even better."),Zt.forEach(t),mh=d(We),x=a(We,"LI",{});var ue=n(x);sl=a(ue,"STRONG",{});var km=n(sl);gh=s(km,"One-purpose-only"),km.forEach(t),vh=s(ue,": Pipelines should be used for one task and one task only. Even if two tasks are very similar from a modeling point of view, "),il=a(ue,"EM",{});var Pm=n(il);_h=s(Pm,"e.g."),Pm.forEach(t),bh=s(ue," image2image translation and in-painting, pipelines shall be used for one task only to keep them "),fl=a(ue,"EM",{});var xm=n(fl);Eh=s(xm,"easy-to-tweak"),xm.forEach(t),yh=s(ue," and "),dl=a(ue,"EM",{});var Am=n(dl);wh=s(Am,"readable"),Am.forEach(t),Ih=s(ue,"."),ue.forEach(t),We.forEach(t),Yl=d(l),fe=a(l,"H2",{class:!0});var _r=n(fe);De=a(_r,"A",{id:!0,class:!0,href:!0});var Sm=n(De);hl=a(Sm,"SPAN",{});var $m=n(hl);$(Lt.$$.fragment,$m),$m.forEach(t),Sm.forEach(t),Dh=d(_r),pl=a(_r,"SPAN",{});var Om=n(pl);Th=s(Om,"Examples"),Om.forEach(t),_r.forEach(t),zl=d(l),de=a(l,"H3",{class:!0});var br=n(de);Te=a(br,"A",{id:!0,class:!0,href:!0});var Mm=n(Te);cl=a(Mm,"SPAN",{});var Gm=n(cl);$(Rt.$$.fragment,Gm),Gm.forEach(t),Mm.forEach(t),kh=d(br),ul=a(br,"SPAN",{});var jm=n(ul);Ph=s(jm,"Text-to-Image generation with Stable Diffusion"),jm.forEach(t),br.forEach(t),Fl=d(l),$(qt.$$.fragment,l),Vl=d(l),he=a(l,"H3",{class:!0});var Er=n(he);ke=a(Er,"A",{id:!0,class:!0,href:!0});var Cm=n(ke);ml=a(Cm,"SPAN",{});var Lm=n(ml);$(Nt.$$.fragment,Lm),Lm.forEach(t),Cm.forEach(t),xh=d(Er),gl=a(Er,"SPAN",{});var Rm=n(gl);Ah=s(Rm,"Image-to-Image text-guided generation with Stable Diffusion"),Rm.forEach(t),Er.forEach(t),Wl=d(l),Pe=a(l,"P",{});var yr=n(Pe);Sh=s(yr,"The "),vl=a(yr,"CODE",{});var qm=n(vl);$h=s(qm,"StableDiffusionImg2ImgPipeline"),qm.forEach(t),Oh=s(yr," lets you pass a text prompt and an initial image to condition the generation of new images."),yr.forEach(t),Ql=d(l),$(Ht.$$.fragment,l),Jl=d(l),Bt=a(l,"P",{});var Qh=n(Bt);Mh=s(Qh,"You can also run this example on colab "),Ut=a(Qh,"A",{href:!0,rel:!0});var Nm=n(Ut);ta=a(Nm,"IMG",{src:!0,alt:!0}),Nm.forEach(t),Qh.forEach(t),Kl=d(l),pe=a(l,"H3",{class:!0});var wr=n(pe);xe=a(wr,"A",{id:!0,class:!0,href:!0});var Hm=n(xe);_l=a(Hm,"SPAN",{});var Bm=n(_l);$(Yt.$$.fragment,Bm),Bm.forEach(t),Hm.forEach(t),Gh=d(wr),bl=a(wr,"SPAN",{});var Um=n(bl);jh=s(Um,"Tweak prompts reusing seeds and latents"),Um.forEach(t),wr.forEach(t),Xl=d(l),te=a(l,"P",{});var la=n(te);Ch=s(la,"You can generate your own latents to reproduce results, or tweak your prompt on a specific result you liked. "),zt=a(la,"A",{href:!0,rel:!0});var Ym=n(zt);Lh=s(Ym,"This notebook"),Ym.forEach(t),Rh=s(la," shows how to do it step by step. You can also run it in Google Colab "),Ft=a(la,"A",{href:!0,rel:!0});var zm=n(Ft);oa=a(zm,"IMG",{src:!0,alt:!0}),zm.forEach(t),qh=s(la,"."),la.forEach(t),Zl=d(l),ce=a(l,"H3",{class:!0});var Ir=n(ce);Ae=a(Ir,"A",{id:!0,class:!0,href:!0});var Fm=n(Ae);El=a(Fm,"SPAN",{});var Vm=n(El);$(Vt.$$.fragment,Vm),Vm.forEach(t),Fm.forEach(t),Nh=d(Ir),yl=a(Ir,"SPAN",{});var Wm=n(yl);Hh=s(Wm,"In-painting using Stable Diffusion"),Wm.forEach(t),Ir.forEach(t),er=d(l),Se=a(l,"P",{});var Dr=n(Se);Bh=s(Dr,"The "),wl=a(Dr,"CODE",{});var Qm=n(wl);Uh=s(Qm,"StableDiffusionInpaintPipeline"),Qm.forEach(t),Yh=s(Dr," lets you edit specific parts of an image by providing a mask and text prompt."),Dr.forEach(t),tr=d(l),$(Wt.$$.fragment,l),or=d(l),Qt=a(l,"P",{});var Jh=n(Qt);zh=s(Jh,"You can also run this example on colab "),Jt=a(Jh,"A",{href:!0,rel:!0});var Jm=n(Jt);aa=a(Jm,"IMG",{src:!0,alt:!0}),Jm.forEach(t),Jh.forEach(t),this.h()},h(){i(ae,"name","hf:doc:metadata"),i(ae,"content",JSON.stringify(ng)),i(ge,"id","pipelines"),i(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ge,"href","#pipelines"),i(ne,"class","relative group"),i(Je,"href","https://huggingface.co/blog/stable_diffusion"),i(Je,"rel","nofollow"),i(oo,"href","./api/models#vae"),i(ao,"href","./api/models#UNet2DConditionModel"),i(Ke,"href","https://huggingface.co/docs/transformers/v4.21.2/en/model_doc/clip#transformers.CLIPTextModel"),i(Ke,"rel","nofollow"),i(no,"href","./api/scheduler#pndm"),i(et,"href","https://huggingface.co/docs/transformers/v4.21.2/en/model_doc/clip#transformers.CLIPFeatureExtractor"),i(et,"rel","nofollow"),i(lo,"href","./stable_diffusion#safety_checker"),i(ot,"href","https://github.com/huggingface/diffusers/tree/main/src/diffusers/pipelines/latent_diffusion"),i(ot,"rel","nofollow"),i(at,"href","https://arxiv.org/abs/2112.10752"),i(at,"rel","nofollow"),i(io,"href","#pipelines-api"),i(so,"start","2"),i(ho,"href","#pipelines-summary"),i(fo,"start","3"),i(co,"href","#contribution"),i(po,"start","4"),i(st,"href","https://github.com/huggingface/diffusers/tree/main/examples"),i(st,"rel","nofollow"),i(_e,"id","diffusers-summary"),i(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(_e,"href","#diffusers-summary"),i(le,"class","relative group"),i(mo,"align","center"),i(go,"align","center"),i(vo,"href","./ddpm"),i(ft,"href","https://arxiv.org/abs/2006.11239"),i(ft,"rel","nofollow"),i(_o,"align","center"),i(Pa,"align","center"),i(bo,"href","./ddim"),i(dt,"href","https://arxiv.org/abs/2010.02502"),i(dt,"rel","nofollow"),i(Eo,"align","center"),eo(wo.src,Zh="https://colab.research.google.com/assets/colab-badge.svg")||i(wo,"src",Zh),i(wo,"alt","Open In Colab"),i(ht,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/training_example.ipynb"),i(ht,"rel","nofollow"),i(yo,"align","center"),i(Io,"href","./latent_diffusion"),i(pt,"href","https://arxiv.org/abs/2112.10752"),i(pt,"rel","nofollow"),i(Do,"align","center"),i(Ga,"align","center"),i(To,"href","./latent_diffusion_uncond"),i(ct,"href","https://arxiv.org/abs/2112.10752"),i(ct,"rel","nofollow"),i(ko,"align","center"),i(Ra,"align","center"),i(Po,"href","./pndm"),i(ut,"href","https://arxiv.org/abs/2202.09778"),i(ut,"rel","nofollow"),i(xo,"align","center"),i(Ba,"align","center"),i(Ao,"href","./score_sde_ve"),i(mt,"href","https://openreview.net/forum?id=PxTIG12RRHS"),i(mt,"rel","nofollow"),i(So,"align","center"),i(Fa,"align","center"),i($o,"href","./score_sde_vp"),i(gt,"href","https://openreview.net/forum?id=PxTIG12RRHS"),i(gt,"rel","nofollow"),i(Oo,"align","center"),i(Ja,"align","center"),i(Mo,"href","./stable_diffusion"),i(vt,"href","https://stability.ai/blog/stable-diffusion-public-release"),i(vt,"rel","nofollow"),i(Go,"align","center"),eo(Co.src,ep="https://colab.research.google.com/assets/colab-badge.svg")||i(Co,"src",ep),i(Co,"alt","Open In Colab"),i(_t,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/training_example.ipynb"),i(_t,"rel","nofollow"),i(jo,"align","center"),i(Lo,"href","./stable_diffusion"),i(bt,"href","https://stability.ai/blog/stable-diffusion-public-release"),i(bt,"rel","nofollow"),i(Ro,"align","center"),eo(No.src,tp="https://colab.research.google.com/assets/colab-badge.svg")||i(No,"src",tp),i(No,"alt","Open In Colab"),i(Et,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/image_2_image_using_diffusers.ipynb"),i(Et,"rel","nofollow"),i(qo,"align","center"),i(Ho,"href","./stable_diffusion"),i(yt,"href","https://stability.ai/blog/stable-diffusion-public-release"),i(yt,"rel","nofollow"),i(Bo,"align","center"),eo(Yo.src,op="https://colab.research.google.com/assets/colab-badge.svg")||i(Yo,"src",op),i(Yo,"alt","Open In Colab"),i(wt,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/in_painting_with_stable_diffusion_using_diffusers.ipynb"),i(wt,"rel","nofollow"),i(Uo,"align","center"),i(zo,"href","./stochastic_karras_ve"),i(It,"href","https://arxiv.org/abs/2206.00364"),i(It,"rel","nofollow"),i(Fo,"align","center"),i(dn,"align","center"),i(Vo,"href","./repaint"),i(Dt,"href","https://arxiv.org/abs/2201.09865"),i(Dt,"rel","nofollow"),i(Wo,"align","center"),i(un,"align","center"),i(Qo,"href","#examples"),i(ye,"id","pipelines-api"),i(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ye,"href","#pipelines-api"),i(re,"class","relative group"),i(Pt,"href","https://github.com/huggingface/transformers"),i(Pt,"rel","nofollow"),i(xt,"href","../diffusion_pipeline"),i(At,"href","https://huggingface.co/runwayml/stable-diffusion-v1-5"),i(At,"rel","nofollow"),i(St,"href","https://huggingface.co/runwayml/stable-diffusion-v1-5/blob/main/model_index.json"),i(St,"rel","nofollow"),i(Ko,"href","../diffusion_pipeline"),i(Xo,"href","../diffusion_pipeline"),i(se,"href","https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.to"),i(se,"rel","nofollow"),i(Zo,"href","./stable_diffusion"),i($t,"href","https://github.com/huggingface/diffusers/tree/main/src/diffusers/pipelines/ddpm"),i($t,"rel","nofollow"),i(Ot,"href","https://pytorch.org/docs/stable/generated/torch.no_grad.html"),i(Ot,"rel","nofollow"),i(Mt,"href","https://github.com/huggingface/diffusers/tree/main/examples/community"),i(Mt,"rel","nofollow"),i(we,"id","contribution"),i(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(we,"href","#contribution"),i(ie,"class","relative group"),i(jt,"href",".../diffusion_pipeline"),i(Ct,"href","https://github.com/huggingface/diffusers/tree/main/examples/community"),i(Ct,"rel","nofollow"),i(ea,"href","./overview"),i(De,"id","examples"),i(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(De,"href","#examples"),i(fe,"class","relative group"),i(Te,"id","texttoimage-generation-with-stable-diffusion"),i(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Te,"href","#texttoimage-generation-with-stable-diffusion"),i(de,"class","relative group"),i(ke,"id","imagetoimage-textguided-generation-with-stable-diffusion"),i(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ke,"href","#imagetoimage-textguided-generation-with-stable-diffusion"),i(he,"class","relative group"),eo(ta.src,ap="https://colab.research.google.com/assets/colab-badge.svg")||i(ta,"src",ap),i(ta,"alt","Open In Colab"),i(Ut,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/image_2_image_using_diffusers.ipynb"),i(Ut,"rel","nofollow"),i(xe,"id","tweak-prompts-reusing-seeds-and-latents"),i(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(xe,"href","#tweak-prompts-reusing-seeds-and-latents"),i(pe,"class","relative group"),i(zt,"href","https://github.com/pcuenca/diffusers-examples/blob/main/notebooks/stable-diffusion-seeds.ipynb"),i(zt,"rel","nofollow"),eo(oa.src,np="https://colab.research.google.com/assets/colab-badge.svg")||i(oa,"src",np),i(oa,"alt","Open In Colab"),i(Ft,"href","https://colab.research.google.com/github/pcuenca/diffusers-examples/blob/main/notebooks/stable-diffusion-seeds.ipynb"),i(Ft,"rel","nofollow"),i(Ae,"id","inpainting-using-stable-diffusion"),i(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ae,"href","#inpainting-using-stable-diffusion"),i(ce,"class","relative group"),eo(aa.src,lp="https://colab.research.google.com/assets/colab-badge.svg")||i(aa,"src",lp),i(aa,"alt","Open In Colab"),i(Jt,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/in_painting_with_stable_diffusion_using_diffusers.ipynb"),i(Jt,"rel","nofollow")},m(l,h){e(document.head,ae),p(l,Dl,h),p(l,ne,h),e(ne,ge),e(ge,ra),O(Qe,ra,null),e(ne,Tr),e(ne,sa),e(sa,kr),p(l,Tl,h),p(l,to,h),e(to,Pr),p(l,kl,h),p(l,ve,h),e(ve,xr),e(ve,Je),e(Je,Ar),e(ve,Sr),p(l,Pl,h),p(l,b,h),e(b,ia),e(ia,oo),e(oo,$r),e(b,Or),e(b,fa),e(fa,ao),e(ao,Mr),e(b,Gr),e(b,da),e(da,Ke),e(Ke,jr),e(b,Cr),e(b,Xe),e(Xe,Lr),e(Xe,no),e(no,Rr),e(Xe,qr),e(b,Nr),e(b,Ze),e(Ze,Hr),e(Ze,et),e(et,Br),e(Ze,Ur),e(b,Yr),e(b,tt),e(tt,zr),e(tt,lo),e(lo,Fr),e(tt,Vr),p(l,xl,h),p(l,ro,h),e(ro,Wr),p(l,Al,h),p(l,D,h),e(D,ha),e(ha,pa),e(pa,C),e(C,Qr),e(C,ca),e(ca,Jr),e(C,Kr),e(C,ot),e(ot,Xr),e(C,Zr),e(C,at),e(at,es),e(C,ts),e(D,os),e(D,ua),e(ua,so),e(so,nt),e(nt,as),e(nt,io),e(io,ns),e(nt,ls),e(D,rs),e(D,ma),e(ma,fo),e(fo,lt),e(lt,ss),e(lt,ho),e(ho,is),e(lt,fs),e(D,ds),e(D,ga),e(ga,po),e(po,rt),e(rt,hs),e(rt,co),e(co,ps),e(rt,cs),p(l,Sl,h),p(l,L,h),e(L,va),e(va,us),e(L,ms),e(L,_a),e(_a,gs),e(L,vs),e(L,st),e(st,_s),e(L,bs),p(l,$l,h),p(l,le,h),e(le,_e),e(_e,ba),O(it,ba,null),e(le,Es),e(le,Ea),e(Ea,ys),p(l,Ol,h),p(l,uo,h),e(uo,ws),p(l,Ml,h),p(l,be,h),e(be,ya),e(ya,R),e(R,wa),e(wa,Is),e(R,Ds),e(R,Ia),e(Ia,Ts),e(R,ks),e(R,mo),e(mo,Ps),e(R,xs),e(R,go),e(go,As),e(be,Ss),e(be,c),e(c,q),e(q,Da),e(Da,vo),e(vo,$s),e(q,Os),e(q,Ta),e(Ta,ft),e(ft,ka),e(ka,Ms),e(q,Gs),e(q,_o),e(_o,js),e(q,Cs),e(q,Pa),e(c,Ls),e(c,N),e(N,xa),e(xa,bo),e(bo,Rs),e(N,qs),e(N,Aa),e(Aa,dt),e(dt,Sa),e(Sa,Ns),e(N,Hs),e(N,Eo),e(Eo,Bs),e(N,Us),e(N,yo),e(yo,ht),e(ht,wo),e(c,Ys),e(c,H),e(H,$a),e($a,Io),e(Io,zs),e(H,Fs),e(H,Oa),e(Oa,pt),e(pt,Ma),e(Ma,Vs),e(H,Ws),e(H,Do),e(Do,Qs),e(H,Js),e(H,Ga),e(c,Ks),e(c,B),e(B,ja),e(ja,To),e(To,Xs),e(B,Zs),e(B,Ca),e(Ca,ct),e(ct,La),e(La,ei),e(B,ti),e(B,ko),e(ko,oi),e(B,ai),e(B,Ra),e(c,ni),e(c,U),e(U,qa),e(qa,Po),e(Po,li),e(U,ri),e(U,Na),e(Na,ut),e(ut,Ha),e(Ha,si),e(U,ii),e(U,xo),e(xo,fi),e(U,di),e(U,Ba),e(c,hi),e(c,Y),e(Y,Ua),e(Ua,Ao),e(Ao,pi),e(Y,ci),e(Y,Ya),e(Ya,mt),e(mt,za),e(za,ui),e(Y,mi),e(Y,So),e(So,gi),e(Y,vi),e(Y,Fa),e(c,_i),e(c,z),e(z,Va),e(Va,$o),e($o,bi),e(z,Ei),e(z,Wa),e(Wa,gt),e(gt,Qa),e(Qa,yi),e(z,wi),e(z,Oo),e(Oo,Ii),e(z,Di),e(z,Ja),e(c,Ti),e(c,F),e(F,Ka),e(Ka,Mo),e(Mo,ki),e(F,Pi),e(F,Xa),e(Xa,vt),e(vt,Za),e(Za,xi),e(F,Ai),e(F,Go),e(Go,Si),e(F,$i),e(F,jo),e(jo,_t),e(_t,Co),e(c,Oi),e(c,V),e(V,en),e(en,Lo),e(Lo,Mi),e(V,Gi),e(V,tn),e(tn,bt),e(bt,on),e(on,ji),e(V,Ci),e(V,Ro),e(Ro,Li),e(V,Ri),e(V,qo),e(qo,Et),e(Et,No),e(c,qi),e(c,W),e(W,an),e(an,Ho),e(Ho,Ni),e(W,Hi),e(W,nn),e(nn,yt),e(yt,ln),e(ln,Bi),e(W,Ui),e(W,Bo),e(Bo,Yi),e(W,zi),e(W,Uo),e(Uo,wt),e(wt,Yo),e(c,Fi),e(c,Q),e(Q,rn),e(rn,zo),e(zo,Vi),e(Q,Wi),e(Q,sn),e(sn,It),e(It,fn),e(fn,Qi),e(Q,Ji),e(Q,Fo),e(Fo,Ki),e(Q,Xi),e(Q,dn),e(c,Zi),e(c,J),e(J,hn),e(hn,Vo),e(Vo,ef),e(J,tf),e(J,pn),e(pn,Dt),e(Dt,cn),e(cn,of),e(J,af),e(J,Wo),e(Wo,nf),e(J,lf),e(J,un),p(l,Gl,h),p(l,Tt,h),e(Tt,mn),e(mn,rf),e(Tt,sf),p(l,jl,h),p(l,Ee,h),e(Ee,ff),e(Ee,Qo),e(Qo,df),e(Ee,hf),p(l,Cl,h),p(l,re,h),e(re,ye),e(ye,gn),O(kt,gn,null),e(re,pf),e(re,vn),e(vn,cf),p(l,Ll,h),p(l,Jo,h),e(Jo,uf),p(l,Rl,h),p(l,X,h),e(X,mf),e(X,_n),e(_n,gf),e(X,vf),e(X,Pt),e(Pt,_f),e(X,bf),p(l,ql,h),p(l,T,h),e(T,u),e(u,xt),e(xt,bn),e(bn,Ef),e(xt,yf),e(u,wf),e(u,En),e(En,If),e(u,Df),e(u,At),e(At,Tf),e(u,kf),e(u,yn),e(yn,Pf),e(u,xf),e(u,wn),e(wn,Af),e(u,Sf),e(u,In),e(In,$f),e(u,Of),e(u,St),e(St,Mf),e(u,Gf),e(u,Dn),e(Dn,jf),e(u,Cf),e(u,Tn),e(Tn,Lf),e(u,Rf),e(u,kn),e(kn,qf),e(u,Nf),e(u,Pn),e(Pn,Hf),e(u,Bf),e(T,Uf),e(T,v),e(v,Ko),e(Ko,xn),e(xn,Yf),e(v,zf),e(v,An),e(An,Ff),e(v,Vf),e(v,Sn),e(Sn,Wf),e(v,Qf),e(v,$n),e($n,Jf),e(v,Kf),e(v,On),e(On,Xf),e(v,Zf),e(v,Mn),e(Mn,ed),e(v,td),e(v,Gn),e(Gn,od),e(v,ad),e(v,jn),e(jn,nd),e(v,ld),e(T,rd),e(T,y),e(y,Xo),e(Xo,Cn),e(Cn,sd),e(y,id),e(y,Ln),e(Ln,fd),e(y,dd),e(y,Rn),e(Rn,hd),e(y,pd),e(y,qn),e(qn,cd),e(y,ud),e(y,se),e(se,md),e(se,Nn),e(Nn,gd),e(se,vd),e(y,_d),e(T,bd),e(T,E),e(E,Hn),e(Hn,Ed),e(E,yd),e(E,Bn),e(Bn,wd),e(E,Id),e(E,Un),e(Un,Dd),e(E,Td),e(E,Yn),e(Yn,kd),e(E,Pd),e(E,Zo),e(Zo,zn),e(zn,xd),e(E,Ad),e(E,$t),e($t,Sd),e(E,$d),p(l,Nl,h),p(l,k,h),e(k,Fn),e(Fn,Od),e(k,Md),e(k,Vn),e(Vn,Gd),e(k,jd),e(k,Ot),e(Ot,Wn),e(Wn,Cd),e(k,Ld),e(k,Mt),e(Mt,Rd),p(l,Hl,h),p(l,ie,h),e(ie,we),e(we,Qn),O(Gt,Qn,null),e(ie,qd),e(ie,Jn),e(Jn,Nd),p(l,Bl,h),p(l,w,h),e(w,Hd),e(w,Kn),e(Kn,Bd),e(w,Ud),e(w,Xn),e(Xn,Yd),e(w,zd),e(w,Zn),e(Zn,Fd),e(w,Vd),e(w,el),e(el,Wd),e(w,Qd),p(l,Ul,h),p(l,P,h),e(P,Ie),e(Ie,tl),e(tl,Jd),e(Ie,Kd),e(Ie,jt),e(jt,ol),e(ol,Xd),e(jt,Zd),e(Ie,eh),e(P,th),e(P,Z),e(Z,al),e(al,oh),e(Z,ah),e(Z,nl),e(nl,nh),e(Z,lh),e(Z,ll),e(ll,rh),e(Z,sh),e(P,ih),e(P,ee),e(ee,rl),e(rl,fh),e(ee,dh),e(ee,Ct),e(Ct,hh),e(ee,ph),e(ee,ea),e(ea,ch),e(ee,uh),e(P,mh),e(P,x),e(x,sl),e(sl,gh),e(x,vh),e(x,il),e(il,_h),e(x,bh),e(x,fl),e(fl,Eh),e(x,yh),e(x,dl),e(dl,wh),e(x,Ih),p(l,Yl,h),p(l,fe,h),e(fe,De),e(De,hl),O(Lt,hl,null),e(fe,Dh),e(fe,pl),e(pl,Th),p(l,zl,h),p(l,de,h),e(de,Te),e(Te,cl),O(Rt,cl,null),e(de,kh),e(de,ul),e(ul,Ph),p(l,Fl,h),O(qt,l,h),p(l,Vl,h),p(l,he,h),e(he,ke),e(ke,ml),O(Nt,ml,null),e(he,xh),e(he,gl),e(gl,Ah),p(l,Wl,h),p(l,Pe,h),e(Pe,Sh),e(Pe,vl),e(vl,$h),e(Pe,Oh),p(l,Ql,h),O(Ht,l,h),p(l,Jl,h),p(l,Bt,h),e(Bt,Mh),e(Bt,Ut),e(Ut,ta),p(l,Kl,h),p(l,pe,h),e(pe,xe),e(xe,_l),O(Yt,_l,null),e(pe,Gh),e(pe,bl),e(bl,jh),p(l,Xl,h),p(l,te,h),e(te,Ch),e(te,zt),e(zt,Lh),e(te,Rh),e(te,Ft),e(Ft,oa),e(te,qh),p(l,Zl,h),p(l,ce,h),e(ce,Ae),e(Ae,El),O(Vt,El,null),e(ce,Nh),e(ce,yl),e(yl,Hh),p(l,er,h),p(l,Se,h),e(Se,Bh),e(Se,wl),e(wl,Uh),e(Se,Yh),p(l,tr,h),O(Wt,l,h),p(l,or,h),p(l,Qt,h),e(Qt,zh),e(Qt,Jt),e(Jt,aa),ar=!0},p:tg,i(l){ar||(M(Qe.$$.fragment,l),M(it.$$.fragment,l),M(kt.$$.fragment,l),M(Gt.$$.fragment,l),M(Lt.$$.fragment,l),M(Rt.$$.fragment,l),M(qt.$$.fragment,l),M(Nt.$$.fragment,l),M(Ht.$$.fragment,l),M(Yt.$$.fragment,l),M(Vt.$$.fragment,l),M(Wt.$$.fragment,l),ar=!0)},o(l){G(Qe.$$.fragment,l),G(it.$$.fragment,l),G(kt.$$.fragment,l),G(Gt.$$.fragment,l),G(Lt.$$.fragment,l),G(Rt.$$.fragment,l),G(qt.$$.fragment,l),G(Nt.$$.fragment,l),G(Ht.$$.fragment,l),G(Yt.$$.fragment,l),G(Vt.$$.fragment,l),G(Wt.$$.fragment,l),ar=!1},d(l){t(ae),l&&t(Dl),l&&t(ne),j(Qe),l&&t(Tl),l&&t(to),l&&t(kl),l&&t(ve),l&&t(Pl),l&&t(b),l&&t(xl),l&&t(ro),l&&t(Al),l&&t(D),l&&t(Sl),l&&t(L),l&&t($l),l&&t(le),j(it),l&&t(Ol),l&&t(uo),l&&t(Ml),l&&t(be),l&&t(Gl),l&&t(Tt),l&&t(jl),l&&t(Ee),l&&t(Cl),l&&t(re),j(kt),l&&t(Ll),l&&t(Jo),l&&t(Rl),l&&t(X),l&&t(ql),l&&t(T),l&&t(Nl),l&&t(k),l&&t(Hl),l&&t(ie),j(Gt),l&&t(Bl),l&&t(w),l&&t(Ul),l&&t(P),l&&t(Yl),l&&t(fe),j(Lt),l&&t(zl),l&&t(de),j(Rt),l&&t(Fl),j(qt,l),l&&t(Vl),l&&t(he),j(Nt),l&&t(Wl),l&&t(Pe),l&&t(Ql),j(Ht,l),l&&t(Jl),l&&t(Bt),l&&t(Kl),l&&t(pe),j(Yt),l&&t(Xl),l&&t(te),l&&t(Zl),l&&t(ce),j(Vt),l&&t(er),l&&t(Se),l&&t(tr),j(Wt,l),l&&t(or),l&&t(Qt)}}}const ng={local:"pipelines",sections:[{local:"diffusers-summary",title:"\u{1F9E8} Diffusers Summary"},{local:"pipelines-api",title:"Pipelines API"},{local:"contribution",title:"Contribution"},{local:"examples",sections:[{local:"texttoimage-generation-with-stable-diffusion",title:"Text-to-Image generation with Stable Diffusion"},{local:"imagetoimage-textguided-generation-with-stable-diffusion",title:"Image-to-Image text-guided generation with Stable Diffusion"},{local:"tweak-prompts-reusing-seeds-and-latents",title:"Tweak prompts reusing seeds and latents"},{local:"inpainting-using-stable-diffusion",title:"In-painting using Stable Diffusion"}],title:"Examples"}],title:"Pipelines"};function lg(Xh){return og(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class fg extends Km{constructor(ae){super();Xm(this,ae,lg,ag,Zm,{})}}export{fg as default,ng as metadata};
