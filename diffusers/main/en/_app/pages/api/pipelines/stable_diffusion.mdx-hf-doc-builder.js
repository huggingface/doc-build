import{S as Hl,i as jl,s as Wl,e as n,k as f,w as h,t as a,M as Bl,c as o,d as i,m as d,a as s,x as m,h as r,b as l,N as jn,G as e,g as p,y as g,L as Rl,q as _,o as b,B as v,v as Kl}from"../../../chunks/vendor-hf-doc-builder.js";import{D as S}from"../../../chunks/Docstring-hf-doc-builder.js";import{C as Vl}from"../../../chunks/CodeBlock-hf-doc-builder.js";import{I as _e}from"../../../chunks/IconCopyLink-hf-doc-builder.js";function Yl(Ya){let U,ji,G,J,Bt,be,Wn,Rt,Bn,Wi,I,Rn,Kt,Kn,Yn,ve,Jn,Qn,De,Xn,Zn,we,eo,to,ye,io,no,Bi,A,oo,Pe,so,ao,gt,ro,lo,Ri,O,fo,Ie,co,po,Se,uo,ho,Ki,xe,Yt,mo,go,Yi,_t,bt,_o,ke,vt,Ja,Ji,Ee,Jt,bo,vo,Qi,Q,Qt,T,Xt,Do,wo,Zt,yo,Po,Dt,Io,So,wt,xo,ko,F,L,ei,$e,Eo,$o,ti,ii,To,Lo,yt,Te,Pt,Qa,Co,It,Le,Mo,Ao,C,ni,Ce,Oo,No,oi,si,zo,qo,St,Me,xt,Xa,Uo,kt,Ae,Go,Fo,M,ai,Oe,Vo,Ho,Ne,ri,jo,Wo,li,Bo,Ro,Et,ze,$t,Za,Ko,Tt,Yo,Xi,V,X,fi,qe,Jo,di,Qo,Zi,H,Z,ci,Ue,Xo,pi,Zo,en,u,es,Lt,ts,is,ui,ns,os,Ct,ss,as,Mt,rs,ls,At,fs,ds,Ot,cs,ps,hi,us,hs,mi,ms,gs,Nt,_s,bs,tn,Ge,nn,j,ee,gi,Fe,vs,_i,Ds,on,te,ws,bi,ys,Ps,sn,ie,Ve,Is,He,Ss,xs,ks,je,Es,vi,$s,Ts,an,We,rn,W,ne,Di,Be,Ls,wi,Cs,ln,B,Re,Ms,yi,As,fn,R,oe,Pi,Ke,Os,Ii,Ns,dn,w,Ye,zs,Si,qs,Us,Je,Gs,zt,Fs,Vs,Hs,se,Qe,js,xi,Ws,Bs,N,Xe,Rs,ki,Ks,Ys,Ei,Js,Qs,ae,Ze,Xs,et,Zs,$i,ea,ta,cn,K,re,Ti,tt,ia,Li,na,pn,y,it,oa,Ci,sa,aa,nt,ra,qt,la,fa,da,le,ot,ca,Mi,pa,ua,z,st,ha,Ai,ma,ga,Oi,_a,ba,fe,at,va,rt,Da,Ni,wa,ya,un,Y,de,zi,lt,Pa,qi,Ia,hn,P,ft,Sa,dt,xa,Ui,ka,Ea,$a,ct,Ta,Ut,La,Ca,Ma,ce,pt,Aa,Gi,Oa,Na,q,ut,za,Fi,qa,Ua,Vi,Ga,Fa,pe,ht,Va,mt,Ha,Hi,ja,Wa,mn;return be=new _e({}),qe=new _e({}),Ue=new _e({}),Ge=new Vl({props:{code:`from diffusers import StableDiffusionPipeline, EulerDiscreteScheduler

euler_scheduler = EulerDiscreteScheduler.from_config("CompVis/stable-diffusion-v1-4", subfolder="scheduler")
pipeline = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4", scheduler=euler_scheduler)`,highlighted:`<span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionPipeline, EulerDiscreteScheduler

euler_scheduler = EulerDiscreteScheduler.from_config(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>, subfolder=<span class="hljs-string">&quot;scheduler&quot;</span>)
pipeline = StableDiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>, scheduler=euler_scheduler)`}}),Fe=new _e({}),We=new Vl({props:{code:`from diffusers import (
    StableDiffusionPipeline,
    StableDiffusionImg2ImgPipeline,
    StableDiffusionInpaintPipeline,
)

img2text = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4")
img2img = StableDiffusionImg2ImgPipeline(**img2text.components)
inpaint = StableDiffusionInpaintPipeline(**img2text.components)

# now you can use img2text(...), img2img(...), inpaint(...) just like the call methods of each respective pipeline`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> (
<span class="hljs-meta">... </span>    StableDiffusionPipeline,
<span class="hljs-meta">... </span>    StableDiffusionImg2ImgPipeline,
<span class="hljs-meta">... </span>    StableDiffusionInpaintPipeline,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>img2text = StableDiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>img2img = StableDiffusionImg2ImgPipeline(**img2text.components)
<span class="hljs-meta">&gt;&gt;&gt; </span>inpaint = StableDiffusionInpaintPipeline(**img2text.components)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># now you can use img2text(...), img2img(...), inpaint(...) just like the call methods of each respective pipeline</span>`}}),Be=new _e({}),Re=new S({props:{name:"class diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput",anchor:"diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput",parameters:[{name:"images",val:": typing.Union[typing.List[PIL.Image.Image], numpy.ndarray]"},{name:"nsfw_content_detected",val:": typing.Optional[typing.List[bool]]"}],parametersDescription:[{anchor:"diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput.images",description:`<strong>images</strong> (<code>List[PIL.Image.Image]</code> or <code>np.ndarray</code>) &#x2014;
List of denoised PIL images of length <code>batch_size</code> or numpy array of shape <code>(batch_size, height, width, num_channels)</code>. PIL images or numpy array present the denoised images of the diffusion pipeline.`,name:"images"},{anchor:"diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput.nsfw_content_detected",description:`<strong>nsfw_content_detected</strong> (<code>List[bool]</code>) &#x2014;
List of flags denoting whether the corresponding generated image likely represents &#x201C;not-safe-for-work&#x201D;
(nsfw) content, or <code>None</code> if safety checking could not be performed.`,name:"nsfw_content_detected"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/__init__.py#L13"}}),Ke=new _e({}),Ye=new S({props:{name:"class diffusers.StableDiffusionPipeline",anchor:"diffusers.StableDiffusionPipeline",parameters:[{name:"vae",val:": AutoencoderKL"},{name:"text_encoder",val:": CLIPTextModel"},{name:"tokenizer",val:": CLIPTokenizer"},{name:"unet",val:": UNet2DConditionModel"},{name:"scheduler",val:": typing.Union[diffusers.schedulers.scheduling_ddim.DDIMScheduler, diffusers.schedulers.scheduling_pndm.PNDMScheduler, diffusers.schedulers.scheduling_lms_discrete.LMSDiscreteScheduler, diffusers.schedulers.scheduling_euler_discrete.EulerDiscreteScheduler, diffusers.schedulers.scheduling_euler_ancestral_discrete.EulerAncestralDiscreteScheduler]"},{name:"safety_checker",val:": StableDiffusionSafetyChecker"},{name:"feature_extractor",val:": CLIPImageProcessor"}],parametersDescription:[{anchor:"diffusers.StableDiffusionPipeline.vae",description:`<strong>vae</strong> (<a href="/docs/diffusers/main/en/api/models#diffusers.AutoencoderKL">AutoencoderKL</a>) &#x2014;
Variational Auto-Encoder (VAE) Model to encode and decode images to and from latent representations.`,name:"vae"},{anchor:"diffusers.StableDiffusionPipeline.text_encoder",description:`<strong>text_encoder</strong> (<code>CLIPTextModel</code>) &#x2014;
Frozen text-encoder. Stable Diffusion uses the text portion of
<a href="https://huggingface.co/docs/transformers/model_doc/clip#transformers.CLIPTextModel" rel="nofollow">CLIP</a>, specifically
the <a href="https://huggingface.co/openai/clip-vit-large-patch14" rel="nofollow">clip-vit-large-patch14</a> variant.`,name:"text_encoder"},{anchor:"diffusers.StableDiffusionPipeline.tokenizer",description:`<strong>tokenizer</strong> (<code>CLIPTokenizer</code>) &#x2014;
Tokenizer of class
<a href="https://huggingface.co/docs/transformers/v4.21.0/en/model_doc/clip#transformers.CLIPTokenizer" rel="nofollow">CLIPTokenizer</a>.`,name:"tokenizer"},{anchor:"diffusers.StableDiffusionPipeline.unet",description:'<strong>unet</strong> (<a href="/docs/diffusers/main/en/api/models#diffusers.UNet2DConditionModel">UNet2DConditionModel</a>) &#x2014; Conditional U-Net architecture to denoise the encoded image latents.',name:"unet"},{anchor:"diffusers.StableDiffusionPipeline.scheduler",description:`<strong>scheduler</strong> (<a href="/docs/diffusers/main/en/api/schedulers#diffusers.SchedulerMixin">SchedulerMixin</a>) &#x2014;
A scheduler to be used in combination with <code>unet</code> to denoise the encoded image latens. Can be one of
<a href="/docs/diffusers/main/en/api/schedulers#diffusers.DDIMScheduler">DDIMScheduler</a>, <a href="/docs/diffusers/main/en/api/schedulers#diffusers.LMSDiscreteScheduler">LMSDiscreteScheduler</a>, or <a href="/docs/diffusers/main/en/api/schedulers#diffusers.PNDMScheduler">PNDMScheduler</a>.`,name:"scheduler"},{anchor:"diffusers.StableDiffusionPipeline.safety_checker",description:`<strong>safety_checker</strong> (<code>StableDiffusionSafetyChecker</code>) &#x2014;
Classification module that estimates whether generated images could be considered offensive or harmful.
Please, refer to the <a href="https://huggingface.co/runwayml/stable-diffusion-v1-5" rel="nofollow">model card</a> for details.`,name:"safety_checker"},{anchor:"diffusers.StableDiffusionPipeline.feature_extractor",description:`<strong>feature_extractor</strong> (<code>CLIPFeatureExtractor</code>) &#x2014;
Model that extracts features from generated images to be used as inputs for the <code>safety_checker</code>.`,name:"feature_extractor"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion.py#L27"}}),Qe=new S({props:{name:"__call__",anchor:"diffusers.StableDiffusionPipeline.__call__",parameters:[{name:"prompt",val:": typing.Union[str, typing.List[str]]"},{name:"height",val:": int = 512"},{name:"width",val:": int = 512"},{name:"num_inference_steps",val:": int = 50"},{name:"guidance_scale",val:": float = 7.5"},{name:"negative_prompt",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"num_images_per_prompt",val:": typing.Optional[int] = 1"},{name:"eta",val:": float = 0.0"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"latents",val:": typing.Optional[torch.FloatTensor] = None"},{name:"output_type",val:": typing.Optional[str] = 'pil'"},{name:"return_dict",val:": bool = True"},{name:"callback",val:": typing.Union[typing.Callable[[int, int, torch.FloatTensor], NoneType], NoneType] = None"},{name:"callback_steps",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.StableDiffusionPipeline.__call__.prompt",description:`<strong>prompt</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
The prompt or prompts to guide the image generation.`,name:"prompt"},{anchor:"diffusers.StableDiffusionPipeline.__call__.height",description:`<strong>height</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
The height in pixels of the generated image.`,name:"height"},{anchor:"diffusers.StableDiffusionPipeline.__call__.width",description:`<strong>width</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
The width in pixels of the generated image.`,name:"width"},{anchor:"diffusers.StableDiffusionPipeline.__call__.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 50) &#x2014;
The number of denoising steps. More denoising steps usually lead to a higher quality image at the
expense of slower inference.`,name:"num_inference_steps"},{anchor:"diffusers.StableDiffusionPipeline.__call__.guidance_scale",description:`<strong>guidance_scale</strong> (<code>float</code>, <em>optional</em>, defaults to 7.5) &#x2014;
Guidance scale as defined in <a href="https://arxiv.org/abs/2207.12598" rel="nofollow">Classifier-Free Diffusion Guidance</a>.
<code>guidance_scale</code> is defined as <code>w</code> of equation 2. of <a href="https://arxiv.org/pdf/2205.11487.pdf" rel="nofollow">Imagen
Paper</a>. Guidance scale is enabled by setting <code>guidance_scale &gt; 1</code>. Higher guidance scale encourages to generate images that are closely linked to the text <code>prompt</code>,
usually at the expense of lower image quality.`,name:"guidance_scale"},{anchor:"diffusers.StableDiffusionPipeline.__call__.negative_prompt",description:`<strong>negative_prompt</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
The prompt or prompts not to guide the image generation. Ignored when not using guidance (i.e., ignored
if <code>guidance_scale</code> is less than <code>1</code>).`,name:"negative_prompt"},{anchor:"diffusers.StableDiffusionPipeline.__call__.num_images_per_prompt",description:`<strong>num_images_per_prompt</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of images to generate per prompt.`,name:"num_images_per_prompt"},{anchor:"diffusers.StableDiffusionPipeline.__call__.eta",description:`<strong>eta</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Corresponds to parameter eta (&#x3B7;) in the DDIM paper: <a href="https://arxiv.org/abs/2010.02502" rel="nofollow">https://arxiv.org/abs/2010.02502</a>. Only applies to
<a href="/docs/diffusers/main/en/api/schedulers#diffusers.DDIMScheduler">schedulers.DDIMScheduler</a>, will be ignored for others.`,name:"eta"},{anchor:"diffusers.StableDiffusionPipeline.__call__.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A <a href="https://pytorch.org/docs/stable/generated/torch.Generator.html" rel="nofollow">torch generator</a> to make generation
deterministic.`,name:"generator"},{anchor:"diffusers.StableDiffusionPipeline.__call__.latents",description:`<strong>latents</strong> (<code>torch.FloatTensor</code>, <em>optional</em>) &#x2014;
Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image
generation. Can be used to tweak the same generation with different prompts. If not provided, a latents
tensor will ge generated by sampling using the supplied random <code>generator</code>.`,name:"latents"},{anchor:"diffusers.StableDiffusionPipeline.__call__.output_type",description:`<strong>output_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;pil&quot;</code>) &#x2014;
The output format of the generate image. Choose between
<a href="https://pillow.readthedocs.io/en/stable/" rel="nofollow">PIL</a>: <code>PIL.Image.Image</code> or <code>np.array</code>.`,name:"output_type"},{anchor:"diffusers.StableDiffusionPipeline.__call__.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to return a <a href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput">StableDiffusionPipelineOutput</a> instead of a
plain tuple.`,name:"return_dict"},{anchor:"diffusers.StableDiffusionPipeline.__call__.callback",description:`<strong>callback</strong> (<code>Callable</code>, <em>optional</em>) &#x2014;
A function that will be called every <code>callback_steps</code> steps during inference. The function will be
called with the following arguments: <code>callback(step: int, timestep: int, latents: torch.FloatTensor)</code>.`,name:"callback"},{anchor:"diffusers.StableDiffusionPipeline.__call__.callback_steps",description:`<strong>callback_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The frequency at which the <code>callback</code> function will be called. If not specified, the callback will be
called at every step.`,name:"callback_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion.py#L178",returnDescription:`
<p><a
  href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"
>StableDiffusionPipelineOutput</a> if <code>return_dict</code> is True, otherwise a <code>tuple. When returning a tuple, the first element is a list with the generated images, and the second element is a list of </code>bool<code>s denoting whether the corresponding generated image likely represents "not-safe-for-work" (nsfw) content, according to the </code>safety_checker\`.</p>
`,returnType:`
<p><a
  href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"
>StableDiffusionPipelineOutput</a> or <code>tuple</code></p>
`}}),Xe=new S({props:{name:"enable_attention_slicing",anchor:"diffusers.StableDiffusionPipeline.enable_attention_slicing",parameters:[{name:"slice_size",val:": typing.Union[str, int, NoneType] = 'auto'"}],parametersDescription:[{anchor:"diffusers.StableDiffusionPipeline.enable_attention_slicing.slice_size",description:`<strong>slice_size</strong> (<code>str</code> or <code>int</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
When <code>&quot;auto&quot;</code>, halves the input to the attention heads, so attention will be computed in two steps. If
a number is provided, uses as many slices as <code>attention_head_dim // slice_size</code>. In this case,
<code>attention_head_dim</code> must be a multiple of <code>slice_size</code>.`,name:"slice_size"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion.py#L134"}}),Ze=new S({props:{name:"disable_attention_slicing",anchor:"diffusers.StableDiffusionPipeline.disable_attention_slicing",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion.py#L153"}}),tt=new _e({}),it=new S({props:{name:"class diffusers.StableDiffusionImg2ImgPipeline",anchor:"diffusers.StableDiffusionImg2ImgPipeline",parameters:[{name:"vae",val:": AutoencoderKL"},{name:"text_encoder",val:": CLIPTextModel"},{name:"tokenizer",val:": CLIPTokenizer"},{name:"unet",val:": UNet2DConditionModel"},{name:"scheduler",val:": typing.Union[diffusers.schedulers.scheduling_ddim.DDIMScheduler, diffusers.schedulers.scheduling_pndm.PNDMScheduler, diffusers.schedulers.scheduling_lms_discrete.LMSDiscreteScheduler, diffusers.schedulers.scheduling_euler_discrete.EulerDiscreteScheduler, diffusers.schedulers.scheduling_euler_ancestral_discrete.EulerAncestralDiscreteScheduler]"},{name:"safety_checker",val:": StableDiffusionSafetyChecker"},{name:"feature_extractor",val:": CLIPImageProcessor"}],parametersDescription:[{anchor:"diffusers.StableDiffusionImg2ImgPipeline.vae",description:`<strong>vae</strong> (<a href="/docs/diffusers/main/en/api/models#diffusers.AutoencoderKL">AutoencoderKL</a>) &#x2014;
Variational Auto-Encoder (VAE) Model to encode and decode images to and from latent representations.`,name:"vae"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.text_encoder",description:`<strong>text_encoder</strong> (<code>CLIPTextModel</code>) &#x2014;
Frozen text-encoder. Stable Diffusion uses the text portion of
<a href="https://huggingface.co/docs/transformers/model_doc/clip#transformers.CLIPTextModel" rel="nofollow">CLIP</a>, specifically
the <a href="https://huggingface.co/openai/clip-vit-large-patch14" rel="nofollow">clip-vit-large-patch14</a> variant.`,name:"text_encoder"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.tokenizer",description:`<strong>tokenizer</strong> (<code>CLIPTokenizer</code>) &#x2014;
Tokenizer of class
<a href="https://huggingface.co/docs/transformers/v4.21.0/en/model_doc/clip#transformers.CLIPTokenizer" rel="nofollow">CLIPTokenizer</a>.`,name:"tokenizer"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.unet",description:'<strong>unet</strong> (<a href="/docs/diffusers/main/en/api/models#diffusers.UNet2DConditionModel">UNet2DConditionModel</a>) &#x2014; Conditional U-Net architecture to denoise the encoded image latents.',name:"unet"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.scheduler",description:`<strong>scheduler</strong> (<a href="/docs/diffusers/main/en/api/schedulers#diffusers.SchedulerMixin">SchedulerMixin</a>) &#x2014;
A scheduler to be used in combination with <code>unet</code> to denoise the encoded image latens. Can be one of
<a href="/docs/diffusers/main/en/api/schedulers#diffusers.DDIMScheduler">DDIMScheduler</a>, <a href="/docs/diffusers/main/en/api/schedulers#diffusers.LMSDiscreteScheduler">LMSDiscreteScheduler</a>, or <a href="/docs/diffusers/main/en/api/schedulers#diffusers.PNDMScheduler">PNDMScheduler</a>.`,name:"scheduler"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.safety_checker",description:`<strong>safety_checker</strong> (<code>StableDiffusionSafetyChecker</code>) &#x2014;
Classification module that estimates whether generated images could be considered offensive or harmful.
Please, refer to the <a href="https://huggingface.co/runwayml/stable-diffusion-v1-5" rel="nofollow">model card</a> for details.`,name:"safety_checker"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.feature_extractor",description:`<strong>feature_extractor</strong> (<code>CLIPFeatureExtractor</code>) &#x2014;
Model that extracts features from generated images to be used as inputs for the <code>safety_checker</code>.`,name:"feature_extractor"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_img2img.py#L38"}}),ot=new S({props:{name:"__call__",anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__",parameters:[{name:"prompt",val:": typing.Union[str, typing.List[str]]"},{name:"init_image",val:": typing.Union[torch.FloatTensor, PIL.Image.Image]"},{name:"strength",val:": float = 0.8"},{name:"num_inference_steps",val:": typing.Optional[int] = 50"},{name:"guidance_scale",val:": typing.Optional[float] = 7.5"},{name:"negative_prompt",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"num_images_per_prompt",val:": typing.Optional[int] = 1"},{name:"eta",val:": typing.Optional[float] = 0.0"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"output_type",val:": typing.Optional[str] = 'pil'"},{name:"return_dict",val:": bool = True"},{name:"callback",val:": typing.Union[typing.Callable[[int, int, torch.FloatTensor], NoneType], NoneType] = None"},{name:"callback_steps",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.prompt",description:`<strong>prompt</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
The prompt or prompts to guide the image generation.`,name:"prompt"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.init_image",description:`<strong>init_image</strong> (<code>torch.FloatTensor</code> or <code>PIL.Image.Image</code>) &#x2014;
<code>Image</code>, or tensor representing an image batch, that will be used as the starting point for the
process.`,name:"init_image"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.strength",description:`<strong>strength</strong> (<code>float</code>, <em>optional</em>, defaults to 0.8) &#x2014;
Conceptually, indicates how much to transform the reference <code>init_image</code>. Must be between 0 and 1.
<code>init_image</code> will be used as a starting point, adding more noise to it the larger the <code>strength</code>. The
number of denoising steps depends on the amount of noise initially added. When <code>strength</code> is 1, added
noise will be maximum and the denoising process will run for the full number of iterations specified in
<code>num_inference_steps</code>. A value of 1, therefore, essentially ignores <code>init_image</code>.`,name:"strength"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 50) &#x2014;
The number of denoising steps. More denoising steps usually lead to a higher quality image at the
expense of slower inference. This parameter will be modulated by <code>strength</code>.`,name:"num_inference_steps"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.guidance_scale",description:`<strong>guidance_scale</strong> (<code>float</code>, <em>optional</em>, defaults to 7.5) &#x2014;
Guidance scale as defined in <a href="https://arxiv.org/abs/2207.12598" rel="nofollow">Classifier-Free Diffusion Guidance</a>.
<code>guidance_scale</code> is defined as <code>w</code> of equation 2. of <a href="https://arxiv.org/pdf/2205.11487.pdf" rel="nofollow">Imagen
Paper</a>. Guidance scale is enabled by setting <code>guidance_scale &gt; 1</code>. Higher guidance scale encourages to generate images that are closely linked to the text <code>prompt</code>,
usually at the expense of lower image quality.`,name:"guidance_scale"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.negative_prompt",description:`<strong>negative_prompt</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
The prompt or prompts not to guide the image generation. Ignored when not using guidance (i.e., ignored
if <code>guidance_scale</code> is less than <code>1</code>).`,name:"negative_prompt"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.num_images_per_prompt",description:`<strong>num_images_per_prompt</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of images to generate per prompt.`,name:"num_images_per_prompt"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.eta",description:`<strong>eta</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Corresponds to parameter eta (&#x3B7;) in the DDIM paper: <a href="https://arxiv.org/abs/2010.02502" rel="nofollow">https://arxiv.org/abs/2010.02502</a>. Only applies to
<a href="/docs/diffusers/main/en/api/schedulers#diffusers.DDIMScheduler">schedulers.DDIMScheduler</a>, will be ignored for others.`,name:"eta"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A <a href="https://pytorch.org/docs/stable/generated/torch.Generator.html" rel="nofollow">torch generator</a> to make generation
deterministic.`,name:"generator"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.output_type",description:`<strong>output_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;pil&quot;</code>) &#x2014;
The output format of the generate image. Choose between
<a href="https://pillow.readthedocs.io/en/stable/" rel="nofollow">PIL</a>: <code>PIL.Image.Image</code> or <code>np.array</code>.`,name:"output_type"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to return a <a href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput">StableDiffusionPipelineOutput</a> instead of a
plain tuple.`,name:"return_dict"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.callback",description:`<strong>callback</strong> (<code>Callable</code>, <em>optional</em>) &#x2014;
A function that will be called every <code>callback_steps</code> steps during inference. The function will be
called with the following arguments: <code>callback(step: int, timestep: int, latents: torch.FloatTensor)</code>.`,name:"callback"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.callback_steps",description:`<strong>callback_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The frequency at which the <code>callback</code> function will be called. If not specified, the callback will be
called at every step.`,name:"callback_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_img2img.py#L172",returnDescription:`
<p><a
  href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"
>StableDiffusionPipelineOutput</a> if <code>return_dict</code> is True, otherwise a <code>tuple. When returning a tuple, the first element is a list with the generated images, and the second element is a list of </code>bool<code>s denoting whether the corresponding generated image likely represents "not-safe-for-work" (nsfw) content, according to the </code>safety_checker\`.</p>
`,returnType:`
<p><a
  href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"
>StableDiffusionPipelineOutput</a> or <code>tuple</code></p>
`}}),st=new S({props:{name:"enable_attention_slicing",anchor:"diffusers.StableDiffusionImg2ImgPipeline.enable_attention_slicing",parameters:[{name:"slice_size",val:": typing.Union[str, int, NoneType] = 'auto'"}],parametersDescription:[{anchor:"diffusers.StableDiffusionImg2ImgPipeline.enable_attention_slicing.slice_size",description:`<strong>slice_size</strong> (<code>str</code> or <code>int</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
When <code>&quot;auto&quot;</code>, halves the input to the attention heads, so attention will be computed in two steps. If
a number is provided, uses as many slices as <code>attention_head_dim // slice_size</code>. In this case,
<code>attention_head_dim</code> must be a multiple of <code>slice_size</code>.`,name:"slice_size"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_img2img.py#L127"}}),at=new S({props:{name:"disable_attention_slicing",anchor:"diffusers.StableDiffusionImg2ImgPipeline.disable_attention_slicing",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_img2img.py#L146"}}),lt=new _e({}),ft=new S({props:{name:"class diffusers.StableDiffusionInpaintPipeline",anchor:"diffusers.StableDiffusionInpaintPipeline",parameters:[{name:"vae",val:": AutoencoderKL"},{name:"text_encoder",val:": CLIPTextModel"},{name:"tokenizer",val:": CLIPTokenizer"},{name:"unet",val:": UNet2DConditionModel"},{name:"scheduler",val:": typing.Union[diffusers.schedulers.scheduling_ddim.DDIMScheduler, diffusers.schedulers.scheduling_pndm.PNDMScheduler, diffusers.schedulers.scheduling_lms_discrete.LMSDiscreteScheduler]"},{name:"safety_checker",val:": StableDiffusionSafetyChecker"},{name:"feature_extractor",val:": CLIPImageProcessor"}],parametersDescription:[{anchor:"diffusers.StableDiffusionInpaintPipeline.vae",description:`<strong>vae</strong> (<a href="/docs/diffusers/main/en/api/models#diffusers.AutoencoderKL">AutoencoderKL</a>) &#x2014;
Variational Auto-Encoder (VAE) Model to encode and decode images to and from latent representations.`,name:"vae"},{anchor:"diffusers.StableDiffusionInpaintPipeline.text_encoder",description:`<strong>text_encoder</strong> (<code>CLIPTextModel</code>) &#x2014;
Frozen text-encoder. Stable Diffusion uses the text portion of
<a href="https://huggingface.co/docs/transformers/model_doc/clip#transformers.CLIPTextModel" rel="nofollow">CLIP</a>, specifically
the <a href="https://huggingface.co/openai/clip-vit-large-patch14" rel="nofollow">clip-vit-large-patch14</a> variant.`,name:"text_encoder"},{anchor:"diffusers.StableDiffusionInpaintPipeline.tokenizer",description:`<strong>tokenizer</strong> (<code>CLIPTokenizer</code>) &#x2014;
Tokenizer of class
<a href="https://huggingface.co/docs/transformers/v4.21.0/en/model_doc/clip#transformers.CLIPTokenizer" rel="nofollow">CLIPTokenizer</a>.`,name:"tokenizer"},{anchor:"diffusers.StableDiffusionInpaintPipeline.unet",description:'<strong>unet</strong> (<a href="/docs/diffusers/main/en/api/models#diffusers.UNet2DConditionModel">UNet2DConditionModel</a>) &#x2014; Conditional U-Net architecture to denoise the encoded image latents.',name:"unet"},{anchor:"diffusers.StableDiffusionInpaintPipeline.scheduler",description:`<strong>scheduler</strong> (<a href="/docs/diffusers/main/en/api/schedulers#diffusers.SchedulerMixin">SchedulerMixin</a>) &#x2014;
A scheduler to be used in combination with <code>unet</code> to denoise the encoded image latens. Can be one of
<a href="/docs/diffusers/main/en/api/schedulers#diffusers.DDIMScheduler">DDIMScheduler</a>, <a href="/docs/diffusers/main/en/api/schedulers#diffusers.LMSDiscreteScheduler">LMSDiscreteScheduler</a>, or <a href="/docs/diffusers/main/en/api/schedulers#diffusers.PNDMScheduler">PNDMScheduler</a>.`,name:"scheduler"},{anchor:"diffusers.StableDiffusionInpaintPipeline.safety_checker",description:`<strong>safety_checker</strong> (<code>StableDiffusionSafetyChecker</code>) &#x2014;
Classification module that estimates whether generated images could be considered offensive or harmful.
Please, refer to the <a href="https://huggingface.co/runwayml/stable-diffusion-v1-5" rel="nofollow">model card</a> for details.`,name:"safety_checker"},{anchor:"diffusers.StableDiffusionInpaintPipeline.feature_extractor",description:`<strong>feature_extractor</strong> (<code>CLIPFeatureExtractor</code>) &#x2014;
Model that extracts features from generated images to be used as inputs for the <code>safety_checker</code>.`,name:"feature_extractor"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_inpaint.py#L39"}}),pt=new S({props:{name:"__call__",anchor:"diffusers.StableDiffusionInpaintPipeline.__call__",parameters:[{name:"prompt",val:": typing.Union[str, typing.List[str]]"},{name:"image",val:": typing.Union[torch.FloatTensor, PIL.Image.Image]"},{name:"mask_image",val:": typing.Union[torch.FloatTensor, PIL.Image.Image]"},{name:"height",val:": int = 512"},{name:"width",val:": int = 512"},{name:"num_inference_steps",val:": int = 50"},{name:"guidance_scale",val:": float = 7.5"},{name:"negative_prompt",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"num_images_per_prompt",val:": typing.Optional[int] = 1"},{name:"eta",val:": float = 0.0"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"latents",val:": typing.Optional[torch.FloatTensor] = None"},{name:"output_type",val:": typing.Optional[str] = 'pil'"},{name:"return_dict",val:": bool = True"},{name:"callback",val:": typing.Union[typing.Callable[[int, int, torch.FloatTensor], NoneType], NoneType] = None"},{name:"callback_steps",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.prompt",description:`<strong>prompt</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
The prompt or prompts to guide the image generation.`,name:"prompt"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code>) &#x2014;
<code>Image</code>, or tensor representing an image batch which will be inpainted, <em>i.e.</em> parts of the image will
be masked out with <code>mask_image</code> and repainted according to <code>prompt</code>.`,name:"image"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.mask_image",description:`<strong>mask_image</strong> (<code>PIL.Image.Image</code>) &#x2014;
<code>Image</code>, or tensor representing an image batch, to mask <code>image</code>. White pixels in the mask will be
repainted, while black pixels will be preserved. If <code>mask_image</code> is a PIL image, it will be converted
to a single channel (luminance) before use. If it&#x2019;s a tensor, it should contain one color channel (L)
instead of 3, so the expected shape would be <code>(B, H, W, 1)</code>.`,name:"mask_image"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.height",description:`<strong>height</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
The height in pixels of the generated image.`,name:"height"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.width",description:`<strong>width</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
The width in pixels of the generated image.`,name:"width"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 50) &#x2014;
The number of denoising steps. More denoising steps usually lead to a higher quality image at the
expense of slower inference.`,name:"num_inference_steps"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.guidance_scale",description:`<strong>guidance_scale</strong> (<code>float</code>, <em>optional</em>, defaults to 7.5) &#x2014;
Guidance scale as defined in <a href="https://arxiv.org/abs/2207.12598" rel="nofollow">Classifier-Free Diffusion Guidance</a>.
<code>guidance_scale</code> is defined as <code>w</code> of equation 2. of <a href="https://arxiv.org/pdf/2205.11487.pdf" rel="nofollow">Imagen
Paper</a>. Guidance scale is enabled by setting <code>guidance_scale &gt; 1</code>. Higher guidance scale encourages to generate images that are closely linked to the text <code>prompt</code>,
usually at the expense of lower image quality.`,name:"guidance_scale"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.negative_prompt",description:`<strong>negative_prompt</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
The prompt or prompts not to guide the image generation. Ignored when not using guidance (i.e., ignored
if <code>guidance_scale</code> is less than <code>1</code>).`,name:"negative_prompt"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.num_images_per_prompt",description:`<strong>num_images_per_prompt</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of images to generate per prompt.`,name:"num_images_per_prompt"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.eta",description:`<strong>eta</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Corresponds to parameter eta (&#x3B7;) in the DDIM paper: <a href="https://arxiv.org/abs/2010.02502" rel="nofollow">https://arxiv.org/abs/2010.02502</a>. Only applies to
<a href="/docs/diffusers/main/en/api/schedulers#diffusers.DDIMScheduler">schedulers.DDIMScheduler</a>, will be ignored for others.`,name:"eta"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A <a href="https://pytorch.org/docs/stable/generated/torch.Generator.html" rel="nofollow">torch generator</a> to make generation
deterministic.`,name:"generator"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.latents",description:`<strong>latents</strong> (<code>torch.FloatTensor</code>, <em>optional</em>) &#x2014;
Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image
generation. Can be used to tweak the same generation with different prompts. If not provided, a latents
tensor will ge generated by sampling using the supplied random <code>generator</code>.`,name:"latents"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.output_type",description:`<strong>output_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;pil&quot;</code>) &#x2014;
The output format of the generate image. Choose between
<a href="https://pillow.readthedocs.io/en/stable/" rel="nofollow">PIL</a>: <code>PIL.Image.Image</code> or <code>np.array</code>.`,name:"output_type"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to return a <a href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput">StableDiffusionPipelineOutput</a> instead of a
plain tuple.`,name:"return_dict"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.callback",description:`<strong>callback</strong> (<code>Callable</code>, <em>optional</em>) &#x2014;
A function that will be called every <code>callback_steps</code> steps during inference. The function will be
called with the following arguments: <code>callback(step: int, timestep: int, latents: torch.FloatTensor)</code>.`,name:"callback"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.callback_steps",description:`<strong>callback_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The frequency at which the <code>callback</code> function will be called. If not specified, the callback will be
called at every step.`,name:"callback_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_inpaint.py#L172",returnDescription:`
<p><a
  href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"
>StableDiffusionPipelineOutput</a> if <code>return_dict</code> is True, otherwise a <code>tuple. When returning a tuple, the first element is a list with the generated images, and the second element is a list of </code>bool<code>s denoting whether the corresponding generated image likely represents "not-safe-for-work" (nsfw) content, according to the </code>safety_checker\`.</p>
`,returnType:`
<p><a
  href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"
>StableDiffusionPipelineOutput</a> or <code>tuple</code></p>
`}}),ut=new S({props:{name:"enable_attention_slicing",anchor:"diffusers.StableDiffusionInpaintPipeline.enable_attention_slicing",parameters:[{name:"slice_size",val:": typing.Union[str, int, NoneType] = 'auto'"}],parametersDescription:[{anchor:"diffusers.StableDiffusionInpaintPipeline.enable_attention_slicing.slice_size",description:`<strong>slice_size</strong> (<code>str</code> or <code>int</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
When <code>&quot;auto&quot;</code>, halves the input to the attention heads, so attention will be computed in two steps. If
a number is provided, uses as many slices as <code>attention_head_dim // slice_size</code>. In this case,
<code>attention_head_dim</code> must be a multiple of <code>slice_size</code>.`,name:"slice_size"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_inpaint.py#L127"}}),ht=new S({props:{name:"disable_attention_slicing",anchor:"diffusers.StableDiffusionInpaintPipeline.disable_attention_slicing",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_inpaint.py#L146"}}),{c(){U=n("meta"),ji=f(),G=n("h1"),J=n("a"),Bt=n("span"),h(be.$$.fragment),Wn=f(),Rt=n("span"),Bn=a("Stable diffusion pipelines"),Wi=f(),I=n("p"),Rn=a("Stable Diffusion is a text-to-image "),Kt=n("em"),Kn=a("latent diffusion"),Yn=a(" model created by the researchers and engineers from "),ve=n("a"),Jn=a("CompVis"),Qn=a(", "),De=n("a"),Xn=a("Stability AI"),Zn=a(" and "),we=n("a"),eo=a("LAION"),to=a(". It\u2019s trained on 512x512 images from a subset of the "),ye=n("a"),io=a("LAION-5B"),no=a(" dataset. This model uses a frozen CLIP ViT-L/14 text encoder to condition the model on text prompts. With its 860M UNet and 123M text encoder, the model is relatively lightweight and can run on consumer GPUs."),Bi=f(),A=n("p"),oo=a("Latent diffusion is the research on top of which Stable Diffusion was built. It was proposed in "),Pe=n("a"),so=a("High-Resolution Image Synthesis with Latent Diffusion Models"),ao=a(" by Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, Bj\xF6rn Ommer. You can learn more details about it in the "),gt=n("a"),ro=a("specific pipeline for latent diffusion"),lo=a(" that is part of \u{1F917} Diffusers."),Ri=f(),O=n("p"),fo=a("For more details about how Stable Diffusion works and how it differs from the base latent diffusion model, please refer to the official "),Ie=n("a"),co=a("launch announcement post"),po=a(" and "),Se=n("a"),uo=a("this section of our own blog post"),ho=a("."),Ki=f(),xe=n("p"),Yt=n("em"),mo=a("Tips"),go=a(":"),Yi=f(),_t=n("ul"),bt=n("li"),_o=a("To tweak your prompts on a specific result you liked, you can generate your own latents, as demonstrated in the following notebook: "),ke=n("a"),vt=n("img"),Ji=f(),Ee=n("p"),Jt=n("em"),bo=a("Overview"),vo=a(":"),Qi=f(),Q=n("table"),Qt=n("thead"),T=n("tr"),Xt=n("th"),Do=a("Pipeline"),wo=f(),Zt=n("th"),yo=a("Tasks"),Po=f(),Dt=n("th"),Io=a("Colab"),So=f(),wt=n("th"),xo=a("Demo"),ko=f(),F=n("tbody"),L=n("tr"),ei=n("td"),$e=n("a"),Eo=a("pipeline_stable_diffusion.py"),$o=f(),ti=n("td"),ii=n("em"),To=a("Text-to-Image Generation"),Lo=f(),yt=n("td"),Te=n("a"),Pt=n("img"),Co=f(),It=n("td"),Le=n("a"),Mo=a("\u{1F917} Stable Diffusion"),Ao=f(),C=n("tr"),ni=n("td"),Ce=n("a"),Oo=a("pipeline_stable_diffusion_img2img.py"),No=f(),oi=n("td"),si=n("em"),zo=a("Image-to-Image Text-Guided Generation"),qo=f(),St=n("td"),Me=n("a"),xt=n("img"),Uo=f(),kt=n("td"),Ae=n("a"),Go=a("\u{1F917} Diffuse the Rest"),Fo=f(),M=n("tr"),ai=n("td"),Oe=n("a"),Vo=a("pipeline_stable_diffusion_inpaint.py"),Ho=f(),Ne=n("td"),ri=n("strong"),jo=a("Experimental"),Wo=a(" \u2013 "),li=n("em"),Bo=a("Text-Guided Image Inpainting"),Ro=f(),Et=n("td"),ze=n("a"),$t=n("img"),Ko=f(),Tt=n("td"),Yo=a("Coming soon"),Xi=f(),V=n("h2"),X=n("a"),fi=n("span"),h(qe.$$.fragment),Jo=f(),di=n("span"),Qo=a("Tips"),Zi=f(),H=n("h3"),Z=n("a"),ci=n("span"),h(Ue.$$.fragment),Xo=f(),pi=n("span"),Zo=a("How to load and use different schedulers."),en=f(),u=n("p"),es=a("The stable diffusion pipeline uses "),Lt=n("a"),ts=a("PNDMScheduler"),is=a(" scheduler by default. But "),ui=n("code"),ns=a("diffusers"),os=a(" provides many other schedulers that can be used with the stable diffusion pipeline such as "),Ct=n("a"),ss=a("DDIMScheduler"),as=a(", "),Mt=n("a"),rs=a("LMSDiscreteScheduler"),ls=a(", "),At=n("a"),fs=a("EulerDiscreteScheduler"),ds=a(", "),Ot=n("a"),cs=a("EulerAncestralDiscreteScheduler"),ps=a(` etc.
To use a different scheduler, you can pass the `),hi=n("code"),us=a("scheduler"),hs=a(" argument to "),mi=n("code"),ms=a("from_pretrained"),gs=a(" method of the pipeline. For example, to use the "),Nt=n("a"),_s=a("EulerDiscreteScheduler"),bs=a(", you can do the following:"),tn=f(),h(Ge.$$.fragment),nn=f(),j=n("h3"),ee=n("a"),gi=n("span"),h(Fe.$$.fragment),vs=f(),_i=n("span"),Ds=a("How to conver all use cases with multiple or single pipeline"),on=f(),te=n("p"),ws=a("If you want to use all possible use cases in a single "),bi=n("code"),ys=a("DiffusionPipeline"),Ps=a(" you can either:"),sn=f(),ie=n("ul"),Ve=n("li"),Is=a("Make use of the "),He=n("a"),Ss=a("Stable Diffusion Mega Pipeline"),xs=a(" or"),ks=f(),je=n("li"),Es=a("Make use of the "),vi=n("code"),$s=a("components"),Ts=a(" functionality to instantiate all components in the most memory-efficient way:"),an=f(),h(We.$$.fragment),rn=f(),W=n("h2"),ne=n("a"),Di=n("span"),h(Be.$$.fragment),Ls=f(),wi=n("span"),Cs=a("StableDiffusionPipelineOutput"),ln=f(),B=n("div"),h(Re.$$.fragment),Ms=f(),yi=n("p"),As=a("Output class for Stable Diffusion pipelines."),fn=f(),R=n("h2"),oe=n("a"),Pi=n("span"),h(Ke.$$.fragment),Os=f(),Ii=n("span"),Ns=a("StableDiffusionPipeline"),dn=f(),w=n("div"),h(Ye.$$.fragment),zs=f(),Si=n("p"),qs=a("Pipeline for text-to-image generation using Stable Diffusion."),Us=f(),Je=n("p"),Gs=a("This model inherits from "),zt=n("a"),Fs=a("DiffusionPipeline"),Vs=a(`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),Hs=f(),se=n("div"),h(Qe.$$.fragment),js=f(),xi=n("p"),Ws=a("Function invoked when calling the pipeline for generation."),Bs=f(),N=n("div"),h(Xe.$$.fragment),Rs=f(),ki=n("p"),Ks=a("Enable sliced attention computation."),Ys=f(),Ei=n("p"),Js=a(`When this option is enabled, the attention module will split the input tensor in slices, to compute attention
in several steps. This is useful to save some memory in exchange for a small speed decrease.`),Qs=f(),ae=n("div"),h(Ze.$$.fragment),Xs=f(),et=n("p"),Zs=a("Disable sliced attention computation. If "),$i=n("code"),ea=a("enable_attention_slicing"),ta=a(` was previously invoked, this method will go
back to computing attention in one step.`),cn=f(),K=n("h2"),re=n("a"),Ti=n("span"),h(tt.$$.fragment),ia=f(),Li=n("span"),na=a("StableDiffusionImg2ImgPipeline"),pn=f(),y=n("div"),h(it.$$.fragment),oa=f(),Ci=n("p"),sa=a("Pipeline for text-guided image to image generation using Stable Diffusion."),aa=f(),nt=n("p"),ra=a("This model inherits from "),qt=n("a"),la=a("DiffusionPipeline"),fa=a(`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),da=f(),le=n("div"),h(ot.$$.fragment),ca=f(),Mi=n("p"),pa=a("Function invoked when calling the pipeline for generation."),ua=f(),z=n("div"),h(st.$$.fragment),ha=f(),Ai=n("p"),ma=a("Enable sliced attention computation."),ga=f(),Oi=n("p"),_a=a(`When this option is enabled, the attention module will split the input tensor in slices, to compute attention
in several steps. This is useful to save some memory in exchange for a small speed decrease.`),ba=f(),fe=n("div"),h(at.$$.fragment),va=f(),rt=n("p"),Da=a("Disable sliced attention computation. If "),Ni=n("code"),wa=a("enable_attention_slicing"),ya=a(` was previously invoked, this method will go
back to computing attention in one step.`),un=f(),Y=n("h2"),de=n("a"),zi=n("span"),h(lt.$$.fragment),Pa=f(),qi=n("span"),Ia=a("StableDiffusionInpaintPipeline"),hn=f(),P=n("div"),h(ft.$$.fragment),Sa=f(),dt=n("p"),xa=a("Pipeline for text-guided image inpainting using Stable Diffusion. "),Ui=n("em"),ka=a("This is an experimental feature"),Ea=a("."),$a=f(),ct=n("p"),Ta=a("This model inherits from "),Ut=n("a"),La=a("DiffusionPipeline"),Ca=a(`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),Ma=f(),ce=n("div"),h(pt.$$.fragment),Aa=f(),Gi=n("p"),Oa=a("Function invoked when calling the pipeline for generation."),Na=f(),q=n("div"),h(ut.$$.fragment),za=f(),Fi=n("p"),qa=a("Enable sliced attention computation."),Ua=f(),Vi=n("p"),Ga=a(`When this option is enabled, the attention module will split the input tensor in slices, to compute attention
in several steps. This is useful to save some memory in exchange for a small speed decrease.`),Fa=f(),pe=n("div"),h(ht.$$.fragment),Va=f(),mt=n("p"),Ha=a("Disable sliced attention computation. If "),Hi=n("code"),ja=a("enable_attention_slicing"),Wa=a(` was previously invoked, this method will go
back to computing attention in one step.`),this.h()},l(t){const c=Bl('[data-svelte="svelte-1phssyn"]',document.head);U=o(c,"META",{name:!0,content:!0}),c.forEach(i),ji=d(t),G=o(t,"H1",{class:!0});var gn=s(G);J=o(gn,"A",{id:!0,class:!0,href:!0});var er=s(J);Bt=o(er,"SPAN",{});var tr=s(Bt);m(be.$$.fragment,tr),tr.forEach(i),er.forEach(i),Wn=d(gn),Rt=o(gn,"SPAN",{});var ir=s(Rt);Bn=r(ir,"Stable diffusion pipelines"),ir.forEach(i),gn.forEach(i),Wi=d(t),I=o(t,"P",{});var x=s(I);Rn=r(x,"Stable Diffusion is a text-to-image "),Kt=o(x,"EM",{});var nr=s(Kt);Kn=r(nr,"latent diffusion"),nr.forEach(i),Yn=r(x," model created by the researchers and engineers from "),ve=o(x,"A",{href:!0,rel:!0});var or=s(ve);Jn=r(or,"CompVis"),or.forEach(i),Qn=r(x,", "),De=o(x,"A",{href:!0,rel:!0});var sr=s(De);Xn=r(sr,"Stability AI"),sr.forEach(i),Zn=r(x," and "),we=o(x,"A",{href:!0,rel:!0});var ar=s(we);eo=r(ar,"LAION"),ar.forEach(i),to=r(x,". It\u2019s trained on 512x512 images from a subset of the "),ye=o(x,"A",{href:!0,rel:!0});var rr=s(ye);io=r(rr,"LAION-5B"),rr.forEach(i),no=r(x," dataset. This model uses a frozen CLIP ViT-L/14 text encoder to condition the model on text prompts. With its 860M UNet and 123M text encoder, the model is relatively lightweight and can run on consumer GPUs."),x.forEach(i),Bi=d(t),A=o(t,"P",{});var Gt=s(A);oo=r(Gt,"Latent diffusion is the research on top of which Stable Diffusion was built. It was proposed in "),Pe=o(Gt,"A",{href:!0,rel:!0});var lr=s(Pe);so=r(lr,"High-Resolution Image Synthesis with Latent Diffusion Models"),lr.forEach(i),ao=r(Gt," by Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, Bj\xF6rn Ommer. You can learn more details about it in the "),gt=o(Gt,"A",{href:!0});var fr=s(gt);ro=r(fr,"specific pipeline for latent diffusion"),fr.forEach(i),lo=r(Gt," that is part of \u{1F917} Diffusers."),Gt.forEach(i),Ri=d(t),O=o(t,"P",{});var Ft=s(O);fo=r(Ft,"For more details about how Stable Diffusion works and how it differs from the base latent diffusion model, please refer to the official "),Ie=o(Ft,"A",{href:!0,rel:!0});var dr=s(Ie);co=r(dr,"launch announcement post"),dr.forEach(i),po=r(Ft," and "),Se=o(Ft,"A",{href:!0,rel:!0});var cr=s(Se);uo=r(cr,"this section of our own blog post"),cr.forEach(i),ho=r(Ft,"."),Ft.forEach(i),Ki=d(t),xe=o(t,"P",{});var Ba=s(xe);Yt=o(Ba,"EM",{});var pr=s(Yt);mo=r(pr,"Tips"),pr.forEach(i),go=r(Ba,":"),Ba.forEach(i),Yi=d(t),_t=o(t,"UL",{});var ur=s(_t);bt=o(ur,"LI",{});var Ra=s(bt);_o=r(Ra,"To tweak your prompts on a specific result you liked, you can generate your own latents, as demonstrated in the following notebook: "),ke=o(Ra,"A",{href:!0,rel:!0});var hr=s(ke);vt=o(hr,"IMG",{src:!0,alt:!0}),hr.forEach(i),Ra.forEach(i),ur.forEach(i),Ji=d(t),Ee=o(t,"P",{});var Ka=s(Ee);Jt=o(Ka,"EM",{});var mr=s(Jt);bo=r(mr,"Overview"),mr.forEach(i),vo=r(Ka,":"),Ka.forEach(i),Qi=d(t),Q=o(t,"TABLE",{});var _n=s(Q);Qt=o(_n,"THEAD",{});var gr=s(Qt);T=o(gr,"TR",{});var ue=s(T);Xt=o(ue,"TH",{});var _r=s(Xt);Do=r(_r,"Pipeline"),_r.forEach(i),wo=d(ue),Zt=o(ue,"TH",{});var br=s(Zt);yo=r(br,"Tasks"),br.forEach(i),Po=d(ue),Dt=o(ue,"TH",{align:!0});var vr=s(Dt);Io=r(vr,"Colab"),vr.forEach(i),So=d(ue),wt=o(ue,"TH",{align:!0});var Dr=s(wt);xo=r(Dr,"Demo"),Dr.forEach(i),ue.forEach(i),gr.forEach(i),ko=d(_n),F=o(_n,"TBODY",{});var Vt=s(F);L=o(Vt,"TR",{});var he=s(L);ei=o(he,"TD",{});var wr=s(ei);$e=o(wr,"A",{href:!0,rel:!0});var yr=s($e);Eo=r(yr,"pipeline_stable_diffusion.py"),yr.forEach(i),wr.forEach(i),$o=d(he),ti=o(he,"TD",{});var Pr=s(ti);ii=o(Pr,"EM",{});var Ir=s(ii);To=r(Ir,"Text-to-Image Generation"),Ir.forEach(i),Pr.forEach(i),Lo=d(he),yt=o(he,"TD",{align:!0});var Sr=s(yt);Te=o(Sr,"A",{href:!0,rel:!0});var xr=s(Te);Pt=o(xr,"IMG",{src:!0,alt:!0}),xr.forEach(i),Sr.forEach(i),Co=d(he),It=o(he,"TD",{align:!0});var kr=s(It);Le=o(kr,"A",{href:!0,rel:!0});var Er=s(Le);Mo=r(Er,"\u{1F917} Stable Diffusion"),Er.forEach(i),kr.forEach(i),he.forEach(i),Ao=d(Vt),C=o(Vt,"TR",{});var me=s(C);ni=o(me,"TD",{});var $r=s(ni);Ce=o($r,"A",{href:!0,rel:!0});var Tr=s(Ce);Oo=r(Tr,"pipeline_stable_diffusion_img2img.py"),Tr.forEach(i),$r.forEach(i),No=d(me),oi=o(me,"TD",{});var Lr=s(oi);si=o(Lr,"EM",{});var Cr=s(si);zo=r(Cr,"Image-to-Image Text-Guided Generation"),Cr.forEach(i),Lr.forEach(i),qo=d(me),St=o(me,"TD",{align:!0});var Mr=s(St);Me=o(Mr,"A",{href:!0,rel:!0});var Ar=s(Me);xt=o(Ar,"IMG",{src:!0,alt:!0}),Ar.forEach(i),Mr.forEach(i),Uo=d(me),kt=o(me,"TD",{align:!0});var Or=s(kt);Ae=o(Or,"A",{href:!0,rel:!0});var Nr=s(Ae);Go=r(Nr,"\u{1F917} Diffuse the Rest"),Nr.forEach(i),Or.forEach(i),me.forEach(i),Fo=d(Vt),M=o(Vt,"TR",{});var ge=s(M);ai=o(ge,"TD",{});var zr=s(ai);Oe=o(zr,"A",{href:!0,rel:!0});var qr=s(Oe);Vo=r(qr,"pipeline_stable_diffusion_inpaint.py"),qr.forEach(i),zr.forEach(i),Ho=d(ge),Ne=o(ge,"TD",{});var bn=s(Ne);ri=o(bn,"STRONG",{});var Ur=s(ri);jo=r(Ur,"Experimental"),Ur.forEach(i),Wo=r(bn," \u2013 "),li=o(bn,"EM",{});var Gr=s(li);Bo=r(Gr,"Text-Guided Image Inpainting"),Gr.forEach(i),bn.forEach(i),Ro=d(ge),Et=o(ge,"TD",{align:!0});var Fr=s(Et);ze=o(Fr,"A",{href:!0,rel:!0});var Vr=s(ze);$t=o(Vr,"IMG",{src:!0,alt:!0}),Vr.forEach(i),Fr.forEach(i),Ko=d(ge),Tt=o(ge,"TD",{align:!0});var Hr=s(Tt);Yo=r(Hr,"Coming soon"),Hr.forEach(i),ge.forEach(i),Vt.forEach(i),_n.forEach(i),Xi=d(t),V=o(t,"H2",{class:!0});var vn=s(V);X=o(vn,"A",{id:!0,class:!0,href:!0});var jr=s(X);fi=o(jr,"SPAN",{});var Wr=s(fi);m(qe.$$.fragment,Wr),Wr.forEach(i),jr.forEach(i),Jo=d(vn),di=o(vn,"SPAN",{});var Br=s(di);Qo=r(Br,"Tips"),Br.forEach(i),vn.forEach(i),Zi=d(t),H=o(t,"H3",{class:!0});var Dn=s(H);Z=o(Dn,"A",{id:!0,class:!0,href:!0});var Rr=s(Z);ci=o(Rr,"SPAN",{});var Kr=s(ci);m(Ue.$$.fragment,Kr),Kr.forEach(i),Rr.forEach(i),Xo=d(Dn),pi=o(Dn,"SPAN",{});var Yr=s(pi);Zo=r(Yr,"How to load and use different schedulers."),Yr.forEach(i),Dn.forEach(i),en=d(t),u=o(t,"P",{});var D=s(u);es=r(D,"The stable diffusion pipeline uses "),Lt=o(D,"A",{href:!0});var Jr=s(Lt);ts=r(Jr,"PNDMScheduler"),Jr.forEach(i),is=r(D," scheduler by default. But "),ui=o(D,"CODE",{});var Qr=s(ui);ns=r(Qr,"diffusers"),Qr.forEach(i),os=r(D," provides many other schedulers that can be used with the stable diffusion pipeline such as "),Ct=o(D,"A",{href:!0});var Xr=s(Ct);ss=r(Xr,"DDIMScheduler"),Xr.forEach(i),as=r(D,", "),Mt=o(D,"A",{href:!0});var Zr=s(Mt);rs=r(Zr,"LMSDiscreteScheduler"),Zr.forEach(i),ls=r(D,", "),At=o(D,"A",{href:!0});var el=s(At);fs=r(el,"EulerDiscreteScheduler"),el.forEach(i),ds=r(D,", "),Ot=o(D,"A",{href:!0});var tl=s(Ot);cs=r(tl,"EulerAncestralDiscreteScheduler"),tl.forEach(i),ps=r(D,` etc.
To use a different scheduler, you can pass the `),hi=o(D,"CODE",{});var il=s(hi);us=r(il,"scheduler"),il.forEach(i),hs=r(D," argument to "),mi=o(D,"CODE",{});var nl=s(mi);ms=r(nl,"from_pretrained"),nl.forEach(i),gs=r(D," method of the pipeline. For example, to use the "),Nt=o(D,"A",{href:!0});var ol=s(Nt);_s=r(ol,"EulerDiscreteScheduler"),ol.forEach(i),bs=r(D,", you can do the following:"),D.forEach(i),tn=d(t),m(Ge.$$.fragment,t),nn=d(t),j=o(t,"H3",{class:!0});var wn=s(j);ee=o(wn,"A",{id:!0,class:!0,href:!0});var sl=s(ee);gi=o(sl,"SPAN",{});var al=s(gi);m(Fe.$$.fragment,al),al.forEach(i),sl.forEach(i),vs=d(wn),_i=o(wn,"SPAN",{});var rl=s(_i);Ds=r(rl,"How to conver all use cases with multiple or single pipeline"),rl.forEach(i),wn.forEach(i),on=d(t),te=o(t,"P",{});var yn=s(te);ws=r(yn,"If you want to use all possible use cases in a single "),bi=o(yn,"CODE",{});var ll=s(bi);ys=r(ll,"DiffusionPipeline"),ll.forEach(i),Ps=r(yn," you can either:"),yn.forEach(i),sn=d(t),ie=o(t,"UL",{});var Pn=s(ie);Ve=o(Pn,"LI",{});var In=s(Ve);Is=r(In,"Make use of the "),He=o(In,"A",{href:!0,rel:!0});var fl=s(He);Ss=r(fl,"Stable Diffusion Mega Pipeline"),fl.forEach(i),xs=r(In," or"),In.forEach(i),ks=d(Pn),je=o(Pn,"LI",{});var Sn=s(je);Es=r(Sn,"Make use of the "),vi=o(Sn,"CODE",{});var dl=s(vi);$s=r(dl,"components"),dl.forEach(i),Ts=r(Sn," functionality to instantiate all components in the most memory-efficient way:"),Sn.forEach(i),Pn.forEach(i),an=d(t),m(We.$$.fragment,t),rn=d(t),W=o(t,"H2",{class:!0});var xn=s(W);ne=o(xn,"A",{id:!0,class:!0,href:!0});var cl=s(ne);Di=o(cl,"SPAN",{});var pl=s(Di);m(Be.$$.fragment,pl),pl.forEach(i),cl.forEach(i),Ls=d(xn),wi=o(xn,"SPAN",{});var ul=s(wi);Cs=r(ul,"StableDiffusionPipelineOutput"),ul.forEach(i),xn.forEach(i),ln=d(t),B=o(t,"DIV",{class:!0});var kn=s(B);m(Re.$$.fragment,kn),Ms=d(kn),yi=o(kn,"P",{});var hl=s(yi);As=r(hl,"Output class for Stable Diffusion pipelines."),hl.forEach(i),kn.forEach(i),fn=d(t),R=o(t,"H2",{class:!0});var En=s(R);oe=o(En,"A",{id:!0,class:!0,href:!0});var ml=s(oe);Pi=o(ml,"SPAN",{});var gl=s(Pi);m(Ke.$$.fragment,gl),gl.forEach(i),ml.forEach(i),Os=d(En),Ii=o(En,"SPAN",{});var _l=s(Ii);Ns=r(_l,"StableDiffusionPipeline"),_l.forEach(i),En.forEach(i),dn=d(t),w=o(t,"DIV",{class:!0});var k=s(w);m(Ye.$$.fragment,k),zs=d(k),Si=o(k,"P",{});var bl=s(Si);qs=r(bl,"Pipeline for text-to-image generation using Stable Diffusion."),bl.forEach(i),Us=d(k),Je=o(k,"P",{});var $n=s(Je);Gs=r($n,"This model inherits from "),zt=o($n,"A",{href:!0});var vl=s(zt);Fs=r(vl,"DiffusionPipeline"),vl.forEach(i),Vs=r($n,`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),$n.forEach(i),Hs=d(k),se=o(k,"DIV",{class:!0});var Tn=s(se);m(Qe.$$.fragment,Tn),js=d(Tn),xi=o(Tn,"P",{});var Dl=s(xi);Ws=r(Dl,"Function invoked when calling the pipeline for generation."),Dl.forEach(i),Tn.forEach(i),Bs=d(k),N=o(k,"DIV",{class:!0});var Ht=s(N);m(Xe.$$.fragment,Ht),Rs=d(Ht),ki=o(Ht,"P",{});var wl=s(ki);Ks=r(wl,"Enable sliced attention computation."),wl.forEach(i),Ys=d(Ht),Ei=o(Ht,"P",{});var yl=s(Ei);Js=r(yl,`When this option is enabled, the attention module will split the input tensor in slices, to compute attention
in several steps. This is useful to save some memory in exchange for a small speed decrease.`),yl.forEach(i),Ht.forEach(i),Qs=d(k),ae=o(k,"DIV",{class:!0});var Ln=s(ae);m(Ze.$$.fragment,Ln),Xs=d(Ln),et=o(Ln,"P",{});var Cn=s(et);Zs=r(Cn,"Disable sliced attention computation. If "),$i=o(Cn,"CODE",{});var Pl=s($i);ea=r(Pl,"enable_attention_slicing"),Pl.forEach(i),ta=r(Cn,` was previously invoked, this method will go
back to computing attention in one step.`),Cn.forEach(i),Ln.forEach(i),k.forEach(i),cn=d(t),K=o(t,"H2",{class:!0});var Mn=s(K);re=o(Mn,"A",{id:!0,class:!0,href:!0});var Il=s(re);Ti=o(Il,"SPAN",{});var Sl=s(Ti);m(tt.$$.fragment,Sl),Sl.forEach(i),Il.forEach(i),ia=d(Mn),Li=o(Mn,"SPAN",{});var xl=s(Li);na=r(xl,"StableDiffusionImg2ImgPipeline"),xl.forEach(i),Mn.forEach(i),pn=d(t),y=o(t,"DIV",{class:!0});var E=s(y);m(it.$$.fragment,E),oa=d(E),Ci=o(E,"P",{});var kl=s(Ci);sa=r(kl,"Pipeline for text-guided image to image generation using Stable Diffusion."),kl.forEach(i),aa=d(E),nt=o(E,"P",{});var An=s(nt);ra=r(An,"This model inherits from "),qt=o(An,"A",{href:!0});var El=s(qt);la=r(El,"DiffusionPipeline"),El.forEach(i),fa=r(An,`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),An.forEach(i),da=d(E),le=o(E,"DIV",{class:!0});var On=s(le);m(ot.$$.fragment,On),ca=d(On),Mi=o(On,"P",{});var $l=s(Mi);pa=r($l,"Function invoked when calling the pipeline for generation."),$l.forEach(i),On.forEach(i),ua=d(E),z=o(E,"DIV",{class:!0});var jt=s(z);m(st.$$.fragment,jt),ha=d(jt),Ai=o(jt,"P",{});var Tl=s(Ai);ma=r(Tl,"Enable sliced attention computation."),Tl.forEach(i),ga=d(jt),Oi=o(jt,"P",{});var Ll=s(Oi);_a=r(Ll,`When this option is enabled, the attention module will split the input tensor in slices, to compute attention
in several steps. This is useful to save some memory in exchange for a small speed decrease.`),Ll.forEach(i),jt.forEach(i),ba=d(E),fe=o(E,"DIV",{class:!0});var Nn=s(fe);m(at.$$.fragment,Nn),va=d(Nn),rt=o(Nn,"P",{});var zn=s(rt);Da=r(zn,"Disable sliced attention computation. If "),Ni=o(zn,"CODE",{});var Cl=s(Ni);wa=r(Cl,"enable_attention_slicing"),Cl.forEach(i),ya=r(zn,` was previously invoked, this method will go
back to computing attention in one step.`),zn.forEach(i),Nn.forEach(i),E.forEach(i),un=d(t),Y=o(t,"H2",{class:!0});var qn=s(Y);de=o(qn,"A",{id:!0,class:!0,href:!0});var Ml=s(de);zi=o(Ml,"SPAN",{});var Al=s(zi);m(lt.$$.fragment,Al),Al.forEach(i),Ml.forEach(i),Pa=d(qn),qi=o(qn,"SPAN",{});var Ol=s(qi);Ia=r(Ol,"StableDiffusionInpaintPipeline"),Ol.forEach(i),qn.forEach(i),hn=d(t),P=o(t,"DIV",{class:!0});var $=s(P);m(ft.$$.fragment,$),Sa=d($),dt=o($,"P",{});var Un=s(dt);xa=r(Un,"Pipeline for text-guided image inpainting using Stable Diffusion. "),Ui=o(Un,"EM",{});var Nl=s(Ui);ka=r(Nl,"This is an experimental feature"),Nl.forEach(i),Ea=r(Un,"."),Un.forEach(i),$a=d($),ct=o($,"P",{});var Gn=s(ct);Ta=r(Gn,"This model inherits from "),Ut=o(Gn,"A",{href:!0});var zl=s(Ut);La=r(zl,"DiffusionPipeline"),zl.forEach(i),Ca=r(Gn,`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),Gn.forEach(i),Ma=d($),ce=o($,"DIV",{class:!0});var Fn=s(ce);m(pt.$$.fragment,Fn),Aa=d(Fn),Gi=o(Fn,"P",{});var ql=s(Gi);Oa=r(ql,"Function invoked when calling the pipeline for generation."),ql.forEach(i),Fn.forEach(i),Na=d($),q=o($,"DIV",{class:!0});var Wt=s(q);m(ut.$$.fragment,Wt),za=d(Wt),Fi=o(Wt,"P",{});var Ul=s(Fi);qa=r(Ul,"Enable sliced attention computation."),Ul.forEach(i),Ua=d(Wt),Vi=o(Wt,"P",{});var Gl=s(Vi);Ga=r(Gl,`When this option is enabled, the attention module will split the input tensor in slices, to compute attention
in several steps. This is useful to save some memory in exchange for a small speed decrease.`),Gl.forEach(i),Wt.forEach(i),Fa=d($),pe=o($,"DIV",{class:!0});var Vn=s(pe);m(ht.$$.fragment,Vn),Va=d(Vn),mt=o(Vn,"P",{});var Hn=s(mt);Ha=r(Hn,"Disable sliced attention computation. If "),Hi=o(Hn,"CODE",{});var Fl=s(Hi);ja=r(Fl,"enable_attention_slicing"),Fl.forEach(i),Wa=r(Hn,` was previously invoked, this method will go
back to computing attention in one step.`),Hn.forEach(i),Vn.forEach(i),$.forEach(i),this.h()},h(){l(U,"name","hf:doc:metadata"),l(U,"content",JSON.stringify(Jl)),l(J,"id","stable-diffusion-pipelines"),l(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(J,"href","#stable-diffusion-pipelines"),l(G,"class","relative group"),l(ve,"href","https://github.com/CompVis"),l(ve,"rel","nofollow"),l(De,"href","https://stability.ai/"),l(De,"rel","nofollow"),l(we,"href","https://laion.ai/"),l(we,"rel","nofollow"),l(ye,"href","https://laion.ai/blog/laion-5b/"),l(ye,"rel","nofollow"),l(Pe,"href","https://arxiv.org/abs/2112.10752"),l(Pe,"rel","nofollow"),l(gt,"href","pipelines/latent_diffusion"),l(Ie,"href","https://stability.ai/blog/stable-diffusion-announcement"),l(Ie,"rel","nofollow"),l(Se,"href","https://huggingface.co/blog/stable_diffusion#how-does-stable-diffusion-work"),l(Se,"rel","nofollow"),jn(vt.src,Ja="https://colab.research.google.com/assets/colab-badge.svg")||l(vt,"src",Ja),l(vt,"alt","Open In Colab"),l(ke,"href","https://colab.research.google.com/github/pcuenca/diffusers-examples/blob/main/notebooks/stable-diffusion-seeds.ipynb"),l(ke,"rel","nofollow"),l(Dt,"align","center"),l(wt,"align","center"),l($e,"href","https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion.py"),l($e,"rel","nofollow"),jn(Pt.src,Qa="https://colab.research.google.com/assets/colab-badge.svg")||l(Pt,"src",Qa),l(Pt,"alt","Open In Colab"),l(Te,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/stable_diffusion.ipynb"),l(Te,"rel","nofollow"),l(yt,"align","center"),l(Le,"href","https://huggingface.co/spaces/stabilityai/stable-diffusion"),l(Le,"rel","nofollow"),l(It,"align","center"),l(Ce,"href","https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_img2img.py"),l(Ce,"rel","nofollow"),jn(xt.src,Xa="https://colab.research.google.com/assets/colab-badge.svg")||l(xt,"src",Xa),l(xt,"alt","Open In Colab"),l(Me,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/image_2_image_using_diffusers.ipynb"),l(Me,"rel","nofollow"),l(St,"align","center"),l(Ae,"href","https://huggingface.co/spaces/huggingface/diffuse-the-rest"),l(Ae,"rel","nofollow"),l(kt,"align","center"),l(Oe,"href","https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_inpaint.py"),l(Oe,"rel","nofollow"),jn($t.src,Za="https://colab.research.google.com/assets/colab-badge.svg")||l($t,"src",Za),l($t,"alt","Open In Colab"),l(ze,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/in_painting_with_stable_diffusion_using_diffusers.ipynb"),l(ze,"rel","nofollow"),l(Et,"align","center"),l(Tt,"align","center"),l(X,"id","tips"),l(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(X,"href","#tips"),l(V,"class","relative group"),l(Z,"id","how-to-load-and-use-different-schedulers"),l(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Z,"href","#how-to-load-and-use-different-schedulers"),l(H,"class","relative group"),l(Lt,"href","/docs/diffusers/main/en/api/schedulers#diffusers.PNDMScheduler"),l(Ct,"href","/docs/diffusers/main/en/api/schedulers#diffusers.DDIMScheduler"),l(Mt,"href","/docs/diffusers/main/en/api/schedulers#diffusers.LMSDiscreteScheduler"),l(At,"href","/docs/diffusers/main/en/api/schedulers#diffusers.EulerDiscreteScheduler"),l(Ot,"href","/docs/diffusers/main/en/api/schedulers#diffusers.EulerAncestralDiscreteScheduler"),l(Nt,"href","/docs/diffusers/main/en/api/schedulers#diffusers.EulerDiscreteScheduler"),l(ee,"id","how-to-conver-all-use-cases-with-multiple-or-single-pipeline"),l(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ee,"href","#how-to-conver-all-use-cases-with-multiple-or-single-pipeline"),l(j,"class","relative group"),l(He,"href","https://github.com/huggingface/diffusers/tree/main/examples/community#stable-diffusion-mega"),l(He,"rel","nofollow"),l(ne,"id","diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"),l(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ne,"href","#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"),l(W,"class","relative group"),l(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(oe,"id","diffusers.StableDiffusionPipeline"),l(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(oe,"href","#diffusers.StableDiffusionPipeline"),l(R,"class","relative group"),l(zt,"href","/docs/diffusers/main/en/using-diffusers/loading#diffusers.DiffusionPipeline"),l(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(w,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(re,"id","diffusers.StableDiffusionImg2ImgPipeline"),l(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(re,"href","#diffusers.StableDiffusionImg2ImgPipeline"),l(K,"class","relative group"),l(qt,"href","/docs/diffusers/main/en/using-diffusers/loading#diffusers.DiffusionPipeline"),l(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(de,"id","diffusers.StableDiffusionInpaintPipeline"),l(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(de,"href","#diffusers.StableDiffusionInpaintPipeline"),l(Y,"class","relative group"),l(Ut,"href","/docs/diffusers/main/en/using-diffusers/loading#diffusers.DiffusionPipeline"),l(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,c){e(document.head,U),p(t,ji,c),p(t,G,c),e(G,J),e(J,Bt),g(be,Bt,null),e(G,Wn),e(G,Rt),e(Rt,Bn),p(t,Wi,c),p(t,I,c),e(I,Rn),e(I,Kt),e(Kt,Kn),e(I,Yn),e(I,ve),e(ve,Jn),e(I,Qn),e(I,De),e(De,Xn),e(I,Zn),e(I,we),e(we,eo),e(I,to),e(I,ye),e(ye,io),e(I,no),p(t,Bi,c),p(t,A,c),e(A,oo),e(A,Pe),e(Pe,so),e(A,ao),e(A,gt),e(gt,ro),e(A,lo),p(t,Ri,c),p(t,O,c),e(O,fo),e(O,Ie),e(Ie,co),e(O,po),e(O,Se),e(Se,uo),e(O,ho),p(t,Ki,c),p(t,xe,c),e(xe,Yt),e(Yt,mo),e(xe,go),p(t,Yi,c),p(t,_t,c),e(_t,bt),e(bt,_o),e(bt,ke),e(ke,vt),p(t,Ji,c),p(t,Ee,c),e(Ee,Jt),e(Jt,bo),e(Ee,vo),p(t,Qi,c),p(t,Q,c),e(Q,Qt),e(Qt,T),e(T,Xt),e(Xt,Do),e(T,wo),e(T,Zt),e(Zt,yo),e(T,Po),e(T,Dt),e(Dt,Io),e(T,So),e(T,wt),e(wt,xo),e(Q,ko),e(Q,F),e(F,L),e(L,ei),e(ei,$e),e($e,Eo),e(L,$o),e(L,ti),e(ti,ii),e(ii,To),e(L,Lo),e(L,yt),e(yt,Te),e(Te,Pt),e(L,Co),e(L,It),e(It,Le),e(Le,Mo),e(F,Ao),e(F,C),e(C,ni),e(ni,Ce),e(Ce,Oo),e(C,No),e(C,oi),e(oi,si),e(si,zo),e(C,qo),e(C,St),e(St,Me),e(Me,xt),e(C,Uo),e(C,kt),e(kt,Ae),e(Ae,Go),e(F,Fo),e(F,M),e(M,ai),e(ai,Oe),e(Oe,Vo),e(M,Ho),e(M,Ne),e(Ne,ri),e(ri,jo),e(Ne,Wo),e(Ne,li),e(li,Bo),e(M,Ro),e(M,Et),e(Et,ze),e(ze,$t),e(M,Ko),e(M,Tt),e(Tt,Yo),p(t,Xi,c),p(t,V,c),e(V,X),e(X,fi),g(qe,fi,null),e(V,Jo),e(V,di),e(di,Qo),p(t,Zi,c),p(t,H,c),e(H,Z),e(Z,ci),g(Ue,ci,null),e(H,Xo),e(H,pi),e(pi,Zo),p(t,en,c),p(t,u,c),e(u,es),e(u,Lt),e(Lt,ts),e(u,is),e(u,ui),e(ui,ns),e(u,os),e(u,Ct),e(Ct,ss),e(u,as),e(u,Mt),e(Mt,rs),e(u,ls),e(u,At),e(At,fs),e(u,ds),e(u,Ot),e(Ot,cs),e(u,ps),e(u,hi),e(hi,us),e(u,hs),e(u,mi),e(mi,ms),e(u,gs),e(u,Nt),e(Nt,_s),e(u,bs),p(t,tn,c),g(Ge,t,c),p(t,nn,c),p(t,j,c),e(j,ee),e(ee,gi),g(Fe,gi,null),e(j,vs),e(j,_i),e(_i,Ds),p(t,on,c),p(t,te,c),e(te,ws),e(te,bi),e(bi,ys),e(te,Ps),p(t,sn,c),p(t,ie,c),e(ie,Ve),e(Ve,Is),e(Ve,He),e(He,Ss),e(Ve,xs),e(ie,ks),e(ie,je),e(je,Es),e(je,vi),e(vi,$s),e(je,Ts),p(t,an,c),g(We,t,c),p(t,rn,c),p(t,W,c),e(W,ne),e(ne,Di),g(Be,Di,null),e(W,Ls),e(W,wi),e(wi,Cs),p(t,ln,c),p(t,B,c),g(Re,B,null),e(B,Ms),e(B,yi),e(yi,As),p(t,fn,c),p(t,R,c),e(R,oe),e(oe,Pi),g(Ke,Pi,null),e(R,Os),e(R,Ii),e(Ii,Ns),p(t,dn,c),p(t,w,c),g(Ye,w,null),e(w,zs),e(w,Si),e(Si,qs),e(w,Us),e(w,Je),e(Je,Gs),e(Je,zt),e(zt,Fs),e(Je,Vs),e(w,Hs),e(w,se),g(Qe,se,null),e(se,js),e(se,xi),e(xi,Ws),e(w,Bs),e(w,N),g(Xe,N,null),e(N,Rs),e(N,ki),e(ki,Ks),e(N,Ys),e(N,Ei),e(Ei,Js),e(w,Qs),e(w,ae),g(Ze,ae,null),e(ae,Xs),e(ae,et),e(et,Zs),e(et,$i),e($i,ea),e(et,ta),p(t,cn,c),p(t,K,c),e(K,re),e(re,Ti),g(tt,Ti,null),e(K,ia),e(K,Li),e(Li,na),p(t,pn,c),p(t,y,c),g(it,y,null),e(y,oa),e(y,Ci),e(Ci,sa),e(y,aa),e(y,nt),e(nt,ra),e(nt,qt),e(qt,la),e(nt,fa),e(y,da),e(y,le),g(ot,le,null),e(le,ca),e(le,Mi),e(Mi,pa),e(y,ua),e(y,z),g(st,z,null),e(z,ha),e(z,Ai),e(Ai,ma),e(z,ga),e(z,Oi),e(Oi,_a),e(y,ba),e(y,fe),g(at,fe,null),e(fe,va),e(fe,rt),e(rt,Da),e(rt,Ni),e(Ni,wa),e(rt,ya),p(t,un,c),p(t,Y,c),e(Y,de),e(de,zi),g(lt,zi,null),e(Y,Pa),e(Y,qi),e(qi,Ia),p(t,hn,c),p(t,P,c),g(ft,P,null),e(P,Sa),e(P,dt),e(dt,xa),e(dt,Ui),e(Ui,ka),e(dt,Ea),e(P,$a),e(P,ct),e(ct,Ta),e(ct,Ut),e(Ut,La),e(ct,Ca),e(P,Ma),e(P,ce),g(pt,ce,null),e(ce,Aa),e(ce,Gi),e(Gi,Oa),e(P,Na),e(P,q),g(ut,q,null),e(q,za),e(q,Fi),e(Fi,qa),e(q,Ua),e(q,Vi),e(Vi,Ga),e(P,Fa),e(P,pe),g(ht,pe,null),e(pe,Va),e(pe,mt),e(mt,Ha),e(mt,Hi),e(Hi,ja),e(mt,Wa),mn=!0},p:Rl,i(t){mn||(_(be.$$.fragment,t),_(qe.$$.fragment,t),_(Ue.$$.fragment,t),_(Ge.$$.fragment,t),_(Fe.$$.fragment,t),_(We.$$.fragment,t),_(Be.$$.fragment,t),_(Re.$$.fragment,t),_(Ke.$$.fragment,t),_(Ye.$$.fragment,t),_(Qe.$$.fragment,t),_(Xe.$$.fragment,t),_(Ze.$$.fragment,t),_(tt.$$.fragment,t),_(it.$$.fragment,t),_(ot.$$.fragment,t),_(st.$$.fragment,t),_(at.$$.fragment,t),_(lt.$$.fragment,t),_(ft.$$.fragment,t),_(pt.$$.fragment,t),_(ut.$$.fragment,t),_(ht.$$.fragment,t),mn=!0)},o(t){b(be.$$.fragment,t),b(qe.$$.fragment,t),b(Ue.$$.fragment,t),b(Ge.$$.fragment,t),b(Fe.$$.fragment,t),b(We.$$.fragment,t),b(Be.$$.fragment,t),b(Re.$$.fragment,t),b(Ke.$$.fragment,t),b(Ye.$$.fragment,t),b(Qe.$$.fragment,t),b(Xe.$$.fragment,t),b(Ze.$$.fragment,t),b(tt.$$.fragment,t),b(it.$$.fragment,t),b(ot.$$.fragment,t),b(st.$$.fragment,t),b(at.$$.fragment,t),b(lt.$$.fragment,t),b(ft.$$.fragment,t),b(pt.$$.fragment,t),b(ut.$$.fragment,t),b(ht.$$.fragment,t),mn=!1},d(t){i(U),t&&i(ji),t&&i(G),v(be),t&&i(Wi),t&&i(I),t&&i(Bi),t&&i(A),t&&i(Ri),t&&i(O),t&&i(Ki),t&&i(xe),t&&i(Yi),t&&i(_t),t&&i(Ji),t&&i(Ee),t&&i(Qi),t&&i(Q),t&&i(Xi),t&&i(V),v(qe),t&&i(Zi),t&&i(H),v(Ue),t&&i(en),t&&i(u),t&&i(tn),v(Ge,t),t&&i(nn),t&&i(j),v(Fe),t&&i(on),t&&i(te),t&&i(sn),t&&i(ie),t&&i(an),v(We,t),t&&i(rn),t&&i(W),v(Be),t&&i(ln),t&&i(B),v(Re),t&&i(fn),t&&i(R),v(Ke),t&&i(dn),t&&i(w),v(Ye),v(Qe),v(Xe),v(Ze),t&&i(cn),t&&i(K),v(tt),t&&i(pn),t&&i(y),v(it),v(ot),v(st),v(at),t&&i(un),t&&i(Y),v(lt),t&&i(hn),t&&i(P),v(ft),v(pt),v(ut),v(ht)}}}const Jl={local:"stable-diffusion-pipelines",sections:[{local:"tips",sections:[{local:"how-to-load-and-use-different-schedulers",title:"How to load and use different schedulers."},{local:"how-to-conver-all-use-cases-with-multiple-or-single-pipeline",title:"How to conver all use cases with multiple or single pipeline"}],title:"Tips"},{local:"diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput",title:"StableDiffusionPipelineOutput"},{local:"diffusers.StableDiffusionPipeline",title:"StableDiffusionPipeline"},{local:"diffusers.StableDiffusionImg2ImgPipeline",title:"StableDiffusionImg2ImgPipeline"},{local:"diffusers.StableDiffusionInpaintPipeline",title:"StableDiffusionInpaintPipeline"}],title:"Stable diffusion pipelines"};function Ql(Ya){return Kl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class nf extends Hl{constructor(U){super();jl(this,U,Ql,Yl,Wl,{})}}export{nf as default,Jl as metadata};
