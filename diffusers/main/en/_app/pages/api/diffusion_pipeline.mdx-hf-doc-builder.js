import{S as yn,i as wn,s as Pn,e as n,k as p,w as D,t as r,M as Dn,c as o,d as i,m as f,a as s,x as E,h as a,b as h,G as e,g as b,y as k,q as x,o as I,B as j,v as En,L as bn}from"../../chunks/vendor-hf-doc-builder.js";import{T as Xi}from"../../chunks/Tip-hf-doc-builder.js";import{D as $e}from"../../chunks/Docstring-hf-doc-builder.js";import{C as $n}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Mi}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as vn}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function kn(C){let d;return{c(){d=r("One should not use the Diffusion Pipeline class for training or fine-tuning a diffusion model. Individual \n	components of diffusion pipelines are usually trained individually, so we suggest to directly work \n	with `UNetModel` and `UNetConditionModel`.")},l(v){d=a(v,"One should not use the Diffusion Pipeline class for training or fine-tuning a diffusion model. Individual \n	components of diffusion pipelines are usually trained individually, so we suggest to directly work \n	with `UNetModel` and `UNetConditionModel`.")},m(v,c){b(v,d,c)},d(v){v&&i(d)}}}function xn(C){let d,v,c,m,$,l,g,q,N,B,T,V,O;return{c(){d=n("p"),v=r("It is required to be logged in ("),c=n("code"),m=r("huggingface-cli login"),$=r(") when you want to use private or "),l=n("a"),g=r(`gated
models`),q=r(", "),N=n("em"),B=r("e.g."),T=p(),V=n("code"),O=r('"runwayml/stable-diffusion-v1-5"'),this.h()},l(Y){d=o(Y,"P",{});var A=s(d);v=a(A,"It is required to be logged in ("),c=o(A,"CODE",{});var X=s(c);m=a(X,"huggingface-cli login"),X.forEach(i),$=a(A,") when you want to use private or "),l=o(A,"A",{href:!0,rel:!0});var ye=s(l);g=a(ye,`gated
models`),ye.forEach(i),q=a(A,", "),N=o(A,"EM",{});var we=s(N);B=a(we,"e.g."),we.forEach(i),T=f(A),V=o(A,"CODE",{});var ne=s(V);O=a(ne,'"runwayml/stable-diffusion-v1-5"'),ne.forEach(i),A.forEach(i),this.h()},h(){h(l,"href","https://huggingface.co/docs/hub/models-gated#gated-models"),h(l,"rel","nofollow")},m(Y,A){b(Y,d,A),e(d,v),e(d,c),e(c,m),e(d,$),e(d,l),e(l,g),e(d,q),e(d,N),e(N,B),e(d,T),e(d,V),e(V,O)},d(Y){Y&&i(d)}}}function In(C){let d,v,c,m,$;return{c(){d=n("p"),v=r("Activate the special "),c=n("a"),m=r("\u201Coffline-mode\u201D"),$=r(` to use
this method in a firewalled environment.`),this.h()},l(l){d=o(l,"P",{});var g=s(d);v=a(g,"Activate the special "),c=o(g,"A",{href:!0,rel:!0});var q=s(c);m=a(q,"\u201Coffline-mode\u201D"),q.forEach(i),$=a(g,` to use
this method in a firewalled environment.`),g.forEach(i),this.h()},h(){h(c,"href","https://huggingface.co/diffusers/installation.html#offline-mode"),h(c,"rel","nofollow")},m(l,g){b(l,d,g),e(d,v),e(d,c),e(c,m),e(d,$)},d(l){l&&i(d)}}}function jn(C){let d,v,c,m,$;return m=new $n({props:{code:`from diffusers import DiffusionPipeline

# Download pipeline from huggingface.co and cache.
pipeline = DiffusionPipeline.from_pretrained("CompVis/ldm-text2im-large-256")

# Download pipeline that requires an authorization token
# For more information on access tokens, please refer to this section
# of the documentation](https://huggingface.co/docs/hub/security-tokens)
pipeline = DiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5")

# Download pipeline, but overwrite scheduler
from diffusers import LMSDiscreteScheduler

scheduler = LMSDiscreteScheduler(beta_start=0.00085, beta_end=0.012, beta_schedule="scaled_linear")
pipeline = DiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5", scheduler=scheduler)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> DiffusionPipeline

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download pipeline from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pipeline = DiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;CompVis/ldm-text2im-large-256&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download pipeline that requires an authorization token</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># For more information on access tokens, please refer to this section</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># of the documentation](https://huggingface.co/docs/hub/security-tokens)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pipeline = DiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download pipeline, but overwrite scheduler</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> LMSDiscreteScheduler

<span class="hljs-meta">&gt;&gt;&gt; </span>scheduler = LMSDiscreteScheduler(beta_start=<span class="hljs-number">0.00085</span>, beta_end=<span class="hljs-number">0.012</span>, beta_schedule=<span class="hljs-string">&quot;scaled_linear&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pipeline = DiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span>, scheduler=scheduler)`}}),{c(){d=n("p"),v=r("Examples:"),c=p(),D(m.$$.fragment)},l(l){d=o(l,"P",{});var g=s(d);v=a(g,"Examples:"),g.forEach(i),c=f(l),E(m.$$.fragment,l)},m(l,g){b(l,d,g),e(d,v),b(l,c,g),k(m,l,g),$=!0},p:bn,i(l){$||(x(m.$$.fragment,l),$=!0)},o(l){I(m.$$.fragment,l),$=!1},d(l){l&&i(d),l&&i(c),j(m,l)}}}function Sn(C){let d,v,c,m,$;return m=new $n({props:{code:`from diffusers import (
    StableDiffusionPipeline,
    StableDiffusionImg2ImgPipeline,
    StableDiffusionInpaintPipeline,
)

img2text = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4")
img2img = StableDiffusionImg2ImgPipeline(**img2text.components)
inpaint = StableDiffusionInpaintPipeline(**img2text.components)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> (
<span class="hljs-meta">... </span>    StableDiffusionPipeline,
<span class="hljs-meta">... </span>    StableDiffusionImg2ImgPipeline,
<span class="hljs-meta">... </span>    StableDiffusionInpaintPipeline,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>img2text = StableDiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>img2img = StableDiffusionImg2ImgPipeline(**img2text.components)
<span class="hljs-meta">&gt;&gt;&gt; </span>inpaint = StableDiffusionInpaintPipeline(**img2text.components)`}}),{c(){d=n("p"),v=r("Examples:"),c=p(),D(m.$$.fragment)},l(l){d=o(l,"P",{});var g=s(d);v=a(g,"Examples:"),g.forEach(i),c=f(l),E(m.$$.fragment,l)},m(l,g){b(l,d,g),e(d,v),b(l,c,g),k(m,l,g),$=!0},p:bn,i(l){$||(x(m.$$.fragment,l),$=!0)},o(l){I(m.$$.fragment,l),$=!1},d(l){l&&i(d),l&&i(c),j(m,l)}}}function An(C){let d,v,c,m,$,l,g,q,N,B,T,V,O,Y,A,X,ye,we,ne,F,nt,P,yt,Pe,wt,Pt,Ae,Dt,Et,De,kt,xt,Te,It,jt,Le,St,At,Ce,Tt,Lt,ot,G,Ct,Ee,qt,Ot,st,U,R,qe,oe,Xt,Oe,Mt,rt,_,se,Nt,Xe,Vt,Yt,ke,xe,Ut,zt,Wt,re,Me,Ht,Bt,Ne,Ft,Gt,Ve,Rt,Jt,Ye,J,Ue,Kt,Qt,ze,Zt,ei,ti,w,ae,ii,We,ni,oi,le,si,He,ri,ai,li,de,di,Be,pi,fi,ci,pe,mi,Fe,ui,hi,gi,K,_i,Q,vi,Z,bi,ee,fe,$i,ce,yi,Ge,wi,Pi,Di,Ie,me,Ei,je,ue,ki,M,he,xi,ge,Ii,Re,ji,Si,Ai,te,at,z,ie,Je,_e,Ti,Ke,Li,lt,W,ve,Ci,Qe,qi,dt;return l=new Mi({}),F=new Xi({props:{$$slots:{default:[kn]},$$scope:{ctx:C}}}),oe=new Mi({}),se=new $e({props:{name:"class diffusers.DiffusionPipeline",anchor:"diffusers.DiffusionPipeline",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipeline_utils.py#L96"}}),ae=new $e({props:{name:"from_pretrained",anchor:"diffusers.DiffusionPipeline.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike, NoneType]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.DiffusionPipeline.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>repo id</em> of a pretrained pipeline hosted inside a model repo on
<a href="https://huggingface.co/" rel="nofollow">https://huggingface.co/</a> Valid repo ids have to be located under a user or organization name, like
<code>CompVis/ldm-text2im-large-256</code>.</li>
<li>A path to a <em>directory</em> containing pipeline weights saved using
<a href="/docs/diffusers/main/en/api/diffusion_pipeline#diffusers.DiffusionPipeline.save_pretrained">save_pretrained()</a>, e.g., <code>./my_pipeline_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Override the default <code>torch.dtype</code> and load the model under this dtype. If <code>&quot;auto&quot;</code> is passed the dtype
will be automatically derived from the model&#x2019;s weights.`,name:"torch_dtype"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.custom_pipeline",description:`<strong>custom_pipeline</strong> (<code>str</code>, <em>optional</em>) &#x2014;</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>This is an experimental feature and is likely to change in the future.</p>

					</div>
<p>Can be either:</p>
<ul>
<li>
<p>A string, the <em>repo id</em> of a custom pipeline hosted inside a model repo on
<a href="https://huggingface.co/" rel="nofollow">https://huggingface.co/</a>. Valid repo ids have to be located under a user or organization name,
like <code>hf-internal-testing/diffusers-dummy-pipeline</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>It is required that the model repo has a file, called <code>pipeline.py</code> that defines the custom
pipeline.</p>

					</div>
</li>
<li>
<p>A string, the <em>file name</em> of a community pipeline hosted on GitHub under
<a href="https://github.com/huggingface/diffusers/tree/main/examples/community" rel="nofollow">https://github.com/huggingface/diffusers/tree/main/examples/community</a>. Valid file names have to
match exactly the file name without <code>.py</code> located under the above link, <em>e.g.</em>
<code>clip_guided_stable_diffusion</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>Community pipelines are always loaded from the current <code>main</code> branch of GitHub.</p>

					</div>
</li>
<li>
<p>A path to a <em>directory</em> containing a custom pipeline, e.g., <code>./my_pipeline_directory/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>It is required that the directory has a file, called <code>pipeline.py</code> that defines the custom
pipeline.</p>

					</div>
</li>
</ul>
<p>For more information on how to load and create custom pipelines, please have a look at <a href="https://huggingface.co/docs/diffusers/main/en/using-diffusers/custom_pipelines" rel="nofollow">Loading and
Creating Custom
Pipelines</a>`,name:"custom_pipeline"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.torch_dtype",description:"<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;",name:"torch_dtype"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.mirror",description:`<strong>mirror</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Mirror source to accelerate downloads in China. If you are from China and have an accessibility
problem, you can set this option to resolve it. Note that we do not guarantee the timeliness or safety.
Please refer to the mirror site for more information. specify the folder name here.`,name:"mirror"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to overwrite load - and saveable variables - <em>i.e.</em> the pipeline components - of the
specific pipeline class. The overwritten components are then directly passed to the pipelines
<code>__init__</code> method. See example below for more information.`,name:"kwargs"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipeline_utils.py#L215"}}),K=new Xi({props:{$$slots:{default:[xn]},$$scope:{ctx:C}}}),Q=new Xi({props:{$$slots:{default:[In]},$$scope:{ctx:C}}}),Z=new vn({props:{anchor:"diffusers.DiffusionPipeline.from_pretrained.example",$$slots:{default:[jn]},$$scope:{ctx:C}}}),fe=new $e({props:{name:"save_pretrained",anchor:"diffusers.DiffusionPipeline.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"}],parametersDescription:[{anchor:"diffusers.DiffusionPipeline.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipeline_utils.py#L146"}}),me=new $e({props:{name:"to",anchor:"diffusers.DiffusionPipeline.to",parameters:[{name:"torch_device",val:": typing.Union[str, torch.device, NoneType] = None"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipeline_utils.py#L183"}}),ue=new $e({props:{name:"device",anchor:"diffusers.DiffusionPipeline.device",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipeline_utils.py#L202",returnDescription:`
<p>The torch device on which the pipeline is located.</p>
`,returnType:`
<p><code>torch.device</code></p>
`}}),he=new $e({props:{name:"components",anchor:"diffusers.DiffusionPipeline.components",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipeline_utils.py#L569",returnDescription:`
<p>A dictionaly containing all the modules needed to initialize the pipleline.</p>
`}}),te=new vn({props:{anchor:"diffusers.DiffusionPipeline.components.example",$$slots:{default:[Sn]},$$scope:{ctx:C}}}),_e=new Mi({}),ve=new $e({props:{name:"class diffusers.pipeline_utils.ImagePipelineOutput",anchor:"diffusers.pipeline_utils.ImagePipelineOutput",parameters:[{name:"images",val:": typing.Union[typing.List[PIL.Image.Image], numpy.ndarray]"}],parametersDescription:[{anchor:"diffusers.pipeline_utils.ImagePipelineOutput.images",description:`<strong>images</strong> (<code>List[PIL.Image.Image]</code> or <code>np.ndarray</code>) &#x2014;
List of denoised PIL images of length <code>batch_size</code> or numpy array of shape <code>(batch_size, height, width, num_channels)</code>. PIL images or numpy array present the denoised images of the diffusion pipeline.`,name:"images"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipeline_utils.py#L83"}}),{c(){d=n("meta"),v=p(),c=n("h1"),m=n("a"),$=n("span"),D(l.$$.fragment),g=p(),q=n("span"),N=r("Pipelines"),B=p(),T=n("p"),V=r("The "),O=n("a"),Y=r("DiffusionPipeline"),A=r(" is the easiest way to load any pretrained diffusion pipeline from the "),X=n("a"),ye=r("Hub"),we=r(" and to use it in inference."),ne=p(),D(F.$$.fragment),nt=p(),P=n("p"),yt=r("Any diffusion pipeline that is loaded with "),Pe=n("a"),wt=r("from_pretrained()"),Pt=r(` will automatically
detect the pipeline type, `),Ae=n("em"),Dt=r("e.g."),Et=p(),De=n("a"),kt=r("StableDiffusionPipeline"),xt=r(` and consequently load each component of the
pipeline and pass them into the `),Te=n("code"),It=r("__init__"),jt=r(" function of the pipeline, "),Le=n("em"),St=r("e.g."),At=p(),Ce=n("code"),Tt=r("__init__()"),Lt=r("."),ot=p(),G=n("p"),Ct=r("Any pipeline object can be saved locally with "),Ee=n("a"),qt=r("save_pretrained()"),Ot=r("."),st=p(),U=n("h2"),R=n("a"),qe=n("span"),D(oe.$$.fragment),Xt=p(),Oe=n("span"),Mt=r("DiffusionPipeline"),rt=p(),_=n("div"),D(se.$$.fragment),Nt=p(),Xe=n("p"),Vt=r("Base class for all models."),Yt=p(),ke=n("p"),xe=n("a"),Ut=r("DiffusionPipeline"),zt=r(` takes care of storing all components (models, schedulers, processors) for diffusion pipelines
and handles methods for loading, downloading and saving models as well as a few methods common to all pipelines to:`),Wt=p(),re=n("ul"),Me=n("li"),Ht=r("move all PyTorch modules to the device of your choice"),Bt=p(),Ne=n("li"),Ft=r("enabling/disabling the progress bar for the denoising iteration"),Gt=p(),Ve=n("p"),Rt=r("Class attributes:"),Jt=p(),Ye=n("ul"),J=n("li"),Ue=n("strong"),Kt=r("config_name"),Qt=r(" ("),ze=n("code"),Zt=r("str"),ei=r(`) \u2014 name of the config file that will store the class and module names of all
components of the diffusion pipeline.`),ti=p(),w=n("div"),D(ae.$$.fragment),ii=p(),We=n("p"),ni=r("Instantiate a PyTorch diffusion pipeline from pre-trained pipeline weights."),oi=p(),le=n("p"),si=r("The pipeline is set in evaluation mode by default using "),He=n("code"),ri=r("model.eval()"),ai=r(" (Dropout modules are deactivated)."),li=p(),de=n("p"),di=r("The warning "),Be=n("em"),pi=r("Weights from XXX not initialized from pretrained model"),fi=r(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),ci=p(),pe=n("p"),mi=r("The warning "),Fe=n("em"),ui=r("Weights from XXX not used in YYY"),hi=r(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),gi=p(),D(K.$$.fragment),_i=p(),D(Q.$$.fragment),vi=p(),D(Z.$$.fragment),bi=p(),ee=n("div"),D(fe.$$.fragment),$i=p(),ce=n("p"),yi=r(`Save all variables of the pipeline that can be saved and loaded as well as the pipelines configuration file to
a directory. A pipeline variable can be saved and loaded if its class implements both a save and loading
method. The pipeline can easily be re-loaded using the `),Ge=n("code"),wi=r("[from_pretrained()](/docs/diffusers/main/en/api/diffusion_pipeline#diffusers.DiffusionPipeline.from_pretrained)"),Pi=r(" class method."),Di=p(),Ie=n("div"),D(me.$$.fragment),Ei=p(),je=n("div"),D(ue.$$.fragment),ki=p(),M=n("div"),D(he.$$.fragment),xi=p(),ge=n("p"),Ii=r("The "),Re=n("code"),ji=r("self.compenents"),Si=r(` property can be useful to run different pipelines with the same weights and
configurations to not have to re-allocate memory.`),Ai=p(),D(te.$$.fragment),at=p(),z=n("h2"),ie=n("a"),Je=n("span"),D(_e.$$.fragment),Ti=p(),Ke=n("span"),Li=r("ImagePipelineOutput"),lt=r(`

By default diffusion pipelines return an object of class
`),W=n("div"),D(ve.$$.fragment),Ci=p(),Qe=n("p"),qi=r("Output class for image pipelines."),this.h()},l(t){const u=Dn('[data-svelte="svelte-1phssyn"]',document.head);d=o(u,"META",{name:!0,content:!0}),u.forEach(i),v=f(t),c=o(t,"H1",{class:!0});var be=s(c);m=o(be,"A",{id:!0,class:!0,href:!0});var Ze=s(m);$=o(Ze,"SPAN",{});var et=s($);E(l.$$.fragment,et),et.forEach(i),Ze.forEach(i),g=f(be),q=o(be,"SPAN",{});var tt=s(q);N=a(tt,"Pipelines"),tt.forEach(i),be.forEach(i),B=f(t),T=o(t,"P",{});var H=s(T);V=a(H,"The "),O=o(H,"A",{href:!0});var Ni=s(O);Y=a(Ni,"DiffusionPipeline"),Ni.forEach(i),A=a(H," is the easiest way to load any pretrained diffusion pipeline from the "),X=o(H,"A",{href:!0,rel:!0});var Vi=s(X);ye=a(Vi,"Hub"),Vi.forEach(i),we=a(H," and to use it in inference."),H.forEach(i),ne=f(t),E(F.$$.fragment,t),nt=f(t),P=o(t,"P",{});var L=s(P);yt=a(L,"Any diffusion pipeline that is loaded with "),Pe=o(L,"A",{href:!0});var Yi=s(Pe);wt=a(Yi,"from_pretrained()"),Yi.forEach(i),Pt=a(L,` will automatically
detect the pipeline type, `),Ae=o(L,"EM",{});var Ui=s(Ae);Dt=a(Ui,"e.g."),Ui.forEach(i),Et=f(L),De=o(L,"A",{href:!0});var zi=s(De);kt=a(zi,"StableDiffusionPipeline"),zi.forEach(i),xt=a(L,` and consequently load each component of the
pipeline and pass them into the `),Te=o(L,"CODE",{});var Wi=s(Te);It=a(Wi,"__init__"),Wi.forEach(i),jt=a(L," function of the pipeline, "),Le=o(L,"EM",{});var Hi=s(Le);St=a(Hi,"e.g."),Hi.forEach(i),At=f(L),Ce=o(L,"CODE",{});var Bi=s(Ce);Tt=a(Bi,"__init__()"),Bi.forEach(i),Lt=a(L,"."),L.forEach(i),ot=f(t),G=o(t,"P",{});var pt=s(G);Ct=a(pt,"Any pipeline object can be saved locally with "),Ee=o(pt,"A",{href:!0});var Fi=s(Ee);qt=a(Fi,"save_pretrained()"),Fi.forEach(i),Ot=a(pt,"."),pt.forEach(i),st=f(t),U=o(t,"H2",{class:!0});var ft=s(U);R=o(ft,"A",{id:!0,class:!0,href:!0});var Gi=s(R);qe=o(Gi,"SPAN",{});var Ri=s(qe);E(oe.$$.fragment,Ri),Ri.forEach(i),Gi.forEach(i),Xt=f(ft),Oe=o(ft,"SPAN",{});var Ji=s(Oe);Mt=a(Ji,"DiffusionPipeline"),Ji.forEach(i),ft.forEach(i),rt=f(t),_=o(t,"DIV",{class:!0});var y=s(_);E(se.$$.fragment,y),Nt=f(y),Xe=o(y,"P",{});var Ki=s(Xe);Vt=a(Ki,"Base class for all models."),Ki.forEach(i),Yt=f(y),ke=o(y,"P",{});var Oi=s(ke);xe=o(Oi,"A",{href:!0});var Qi=s(xe);Ut=a(Qi,"DiffusionPipeline"),Qi.forEach(i),zt=a(Oi,` takes care of storing all components (models, schedulers, processors) for diffusion pipelines
and handles methods for loading, downloading and saving models as well as a few methods common to all pipelines to:`),Oi.forEach(i),Wt=f(y),re=o(y,"UL",{});var ct=s(re);Me=o(ct,"LI",{});var Zi=s(Me);Ht=a(Zi,"move all PyTorch modules to the device of your choice"),Zi.forEach(i),Bt=f(ct),Ne=o(ct,"LI",{});var en=s(Ne);Ft=a(en,"enabling/disabling the progress bar for the denoising iteration"),en.forEach(i),ct.forEach(i),Gt=f(y),Ve=o(y,"P",{});var tn=s(Ve);Rt=a(tn,"Class attributes:"),tn.forEach(i),Jt=f(y),Ye=o(y,"UL",{});var nn=s(Ye);J=o(nn,"LI",{});var it=s(J);Ue=o(it,"STRONG",{});var on=s(Ue);Kt=a(on,"config_name"),on.forEach(i),Qt=a(it," ("),ze=o(it,"CODE",{});var sn=s(ze);Zt=a(sn,"str"),sn.forEach(i),ei=a(it,`) \u2014 name of the config file that will store the class and module names of all
components of the diffusion pipeline.`),it.forEach(i),nn.forEach(i),ti=f(y),w=o(y,"DIV",{class:!0});var S=s(w);E(ae.$$.fragment,S),ii=f(S),We=o(S,"P",{});var rn=s(We);ni=a(rn,"Instantiate a PyTorch diffusion pipeline from pre-trained pipeline weights."),rn.forEach(i),oi=f(S),le=o(S,"P",{});var mt=s(le);si=a(mt,"The pipeline is set in evaluation mode by default using "),He=o(mt,"CODE",{});var an=s(He);ri=a(an,"model.eval()"),an.forEach(i),ai=a(mt," (Dropout modules are deactivated)."),mt.forEach(i),li=f(S),de=o(S,"P",{});var ut=s(de);di=a(ut,"The warning "),Be=o(ut,"EM",{});var ln=s(Be);pi=a(ln,"Weights from XXX not initialized from pretrained model"),ln.forEach(i),fi=a(ut,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),ut.forEach(i),ci=f(S),pe=o(S,"P",{});var ht=s(pe);mi=a(ht,"The warning "),Fe=o(ht,"EM",{});var dn=s(Fe);ui=a(dn,"Weights from XXX not used in YYY"),dn.forEach(i),hi=a(ht,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),ht.forEach(i),gi=f(S),E(K.$$.fragment,S),_i=f(S),E(Q.$$.fragment,S),vi=f(S),E(Z.$$.fragment,S),S.forEach(i),bi=f(y),ee=o(y,"DIV",{class:!0});var gt=s(ee);E(fe.$$.fragment,gt),$i=f(gt),ce=o(gt,"P",{});var _t=s(ce);yi=a(_t,`Save all variables of the pipeline that can be saved and loaded as well as the pipelines configuration file to
a directory. A pipeline variable can be saved and loaded if its class implements both a save and loading
method. The pipeline can easily be re-loaded using the `),Ge=o(_t,"CODE",{});var pn=s(Ge);wi=a(pn,"[from_pretrained()](/docs/diffusers/main/en/api/diffusion_pipeline#diffusers.DiffusionPipeline.from_pretrained)"),pn.forEach(i),Pi=a(_t," class method."),_t.forEach(i),gt.forEach(i),Di=f(y),Ie=o(y,"DIV",{class:!0});var fn=s(Ie);E(me.$$.fragment,fn),fn.forEach(i),Ei=f(y),je=o(y,"DIV",{class:!0});var cn=s(je);E(ue.$$.fragment,cn),cn.forEach(i),ki=f(y),M=o(y,"DIV",{class:!0});var Se=s(M);E(he.$$.fragment,Se),xi=f(Se),ge=o(Se,"P",{});var vt=s(ge);Ii=a(vt,"The "),Re=o(vt,"CODE",{});var mn=s(Re);ji=a(mn,"self.compenents"),mn.forEach(i),Si=a(vt,` property can be useful to run different pipelines with the same weights and
configurations to not have to re-allocate memory.`),vt.forEach(i),Ai=f(Se),E(te.$$.fragment,Se),Se.forEach(i),y.forEach(i),at=f(t),z=o(t,"H2",{class:!0});var bt=s(z);ie=o(bt,"A",{id:!0,class:!0,href:!0});var un=s(ie);Je=o(un,"SPAN",{});var hn=s(Je);E(_e.$$.fragment,hn),hn.forEach(i),un.forEach(i),Ti=f(bt),Ke=o(bt,"SPAN",{});var gn=s(Ke);Li=a(gn,"ImagePipelineOutput"),gn.forEach(i),bt.forEach(i),lt=a(t,`

By default diffusion pipelines return an object of class
`),W=o(t,"DIV",{class:!0});var $t=s(W);E(ve.$$.fragment,$t),Ci=f($t),Qe=o($t,"P",{});var _n=s(Qe);qi=a(_n,"Output class for image pipelines."),_n.forEach(i),$t.forEach(i),this.h()},h(){h(d,"name","hf:doc:metadata"),h(d,"content",JSON.stringify(Tn)),h(m,"id","pipelines"),h(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(m,"href","#pipelines"),h(c,"class","relative group"),h(O,"href","/docs/diffusers/main/en/api/diffusion_pipeline#diffusers.DiffusionPipeline"),h(X,"href","https://huggingface.co/models?library=diffusers"),h(X,"rel","nofollow"),h(Pe,"href","/docs/diffusers/main/en/api/diffusion_pipeline#diffusers.DiffusionPipeline.from_pretrained"),h(De,"href","/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.StableDiffusionPipeline"),h(Ee,"href","/docs/diffusers/main/en/api/diffusion_pipeline#diffusers.DiffusionPipeline.save_pretrained"),h(R,"id","diffusers.DiffusionPipeline"),h(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(R,"href","#diffusers.DiffusionPipeline"),h(U,"class","relative group"),h(xe,"href","/docs/diffusers/main/en/api/diffusion_pipeline#diffusers.DiffusionPipeline"),h(w,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),h(ie,"id","diffusers.pipeline_utils.ImagePipelineOutput"),h(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ie,"href","#diffusers.pipeline_utils.ImagePipelineOutput"),h(z,"class","relative group"),h(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,u){e(document.head,d),b(t,v,u),b(t,c,u),e(c,m),e(m,$),k(l,$,null),e(c,g),e(c,q),e(q,N),b(t,B,u),b(t,T,u),e(T,V),e(T,O),e(O,Y),e(T,A),e(T,X),e(X,ye),e(T,we),b(t,ne,u),k(F,t,u),b(t,nt,u),b(t,P,u),e(P,yt),e(P,Pe),e(Pe,wt),e(P,Pt),e(P,Ae),e(Ae,Dt),e(P,Et),e(P,De),e(De,kt),e(P,xt),e(P,Te),e(Te,It),e(P,jt),e(P,Le),e(Le,St),e(P,At),e(P,Ce),e(Ce,Tt),e(P,Lt),b(t,ot,u),b(t,G,u),e(G,Ct),e(G,Ee),e(Ee,qt),e(G,Ot),b(t,st,u),b(t,U,u),e(U,R),e(R,qe),k(oe,qe,null),e(U,Xt),e(U,Oe),e(Oe,Mt),b(t,rt,u),b(t,_,u),k(se,_,null),e(_,Nt),e(_,Xe),e(Xe,Vt),e(_,Yt),e(_,ke),e(ke,xe),e(xe,Ut),e(ke,zt),e(_,Wt),e(_,re),e(re,Me),e(Me,Ht),e(re,Bt),e(re,Ne),e(Ne,Ft),e(_,Gt),e(_,Ve),e(Ve,Rt),e(_,Jt),e(_,Ye),e(Ye,J),e(J,Ue),e(Ue,Kt),e(J,Qt),e(J,ze),e(ze,Zt),e(J,ei),e(_,ti),e(_,w),k(ae,w,null),e(w,ii),e(w,We),e(We,ni),e(w,oi),e(w,le),e(le,si),e(le,He),e(He,ri),e(le,ai),e(w,li),e(w,de),e(de,di),e(de,Be),e(Be,pi),e(de,fi),e(w,ci),e(w,pe),e(pe,mi),e(pe,Fe),e(Fe,ui),e(pe,hi),e(w,gi),k(K,w,null),e(w,_i),k(Q,w,null),e(w,vi),k(Z,w,null),e(_,bi),e(_,ee),k(fe,ee,null),e(ee,$i),e(ee,ce),e(ce,yi),e(ce,Ge),e(Ge,wi),e(ce,Pi),e(_,Di),e(_,Ie),k(me,Ie,null),e(_,Ei),e(_,je),k(ue,je,null),e(_,ki),e(_,M),k(he,M,null),e(M,xi),e(M,ge),e(ge,Ii),e(ge,Re),e(Re,ji),e(ge,Si),e(M,Ai),k(te,M,null),b(t,at,u),b(t,z,u),e(z,ie),e(ie,Je),k(_e,Je,null),e(z,Ti),e(z,Ke),e(Ke,Li),b(t,lt,u),b(t,W,u),k(ve,W,null),e(W,Ci),e(W,Qe),e(Qe,qi),dt=!0},p(t,[u]){const be={};u&2&&(be.$$scope={dirty:u,ctx:t}),F.$set(be);const Ze={};u&2&&(Ze.$$scope={dirty:u,ctx:t}),K.$set(Ze);const et={};u&2&&(et.$$scope={dirty:u,ctx:t}),Q.$set(et);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:t}),Z.$set(tt);const H={};u&2&&(H.$$scope={dirty:u,ctx:t}),te.$set(H)},i(t){dt||(x(l.$$.fragment,t),x(F.$$.fragment,t),x(oe.$$.fragment,t),x(se.$$.fragment,t),x(ae.$$.fragment,t),x(K.$$.fragment,t),x(Q.$$.fragment,t),x(Z.$$.fragment,t),x(fe.$$.fragment,t),x(me.$$.fragment,t),x(ue.$$.fragment,t),x(he.$$.fragment,t),x(te.$$.fragment,t),x(_e.$$.fragment,t),x(ve.$$.fragment,t),dt=!0)},o(t){I(l.$$.fragment,t),I(F.$$.fragment,t),I(oe.$$.fragment,t),I(se.$$.fragment,t),I(ae.$$.fragment,t),I(K.$$.fragment,t),I(Q.$$.fragment,t),I(Z.$$.fragment,t),I(fe.$$.fragment,t),I(me.$$.fragment,t),I(ue.$$.fragment,t),I(he.$$.fragment,t),I(te.$$.fragment,t),I(_e.$$.fragment,t),I(ve.$$.fragment,t),dt=!1},d(t){i(d),t&&i(v),t&&i(c),j(l),t&&i(B),t&&i(T),t&&i(ne),j(F,t),t&&i(nt),t&&i(P),t&&i(ot),t&&i(G),t&&i(st),t&&i(U),j(oe),t&&i(rt),t&&i(_),j(se),j(ae),j(K),j(Q),j(Z),j(fe),j(me),j(ue),j(he),j(te),t&&i(at),t&&i(z),j(_e),t&&i(lt),t&&i(W),j(ve)}}}const Tn={local:"pipelines",sections:[{local:"diffusers.DiffusionPipeline",title:"DiffusionPipeline"},{local:"diffusers.pipeline_utils.ImagePipelineOutput",title:"ImagePipelineOutput"}],title:"Pipelines"};function Ln(C){return En(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Vn extends yn{constructor(d){super();wn(this,d,Ln,An,Pn,{})}}export{Vn as default,Tn as metadata};
