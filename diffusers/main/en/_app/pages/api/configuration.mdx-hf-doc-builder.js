import{S as bt,i as $t,s as yt,e as n,k as g,w as P,t as r,M as wt,c as s,d as o,m as u,a as i,x as S,h as a,b as f,G as e,g as E,y as I,q as A,o as L,B as N,v as xt,L as Mt}from"../../chunks/vendor-hf-doc-builder.js";import{T as _t}from"../../chunks/Tip-hf-doc-builder.js";import{D as Be}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Et}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as vt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Dt}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Ct(W){let c,$,d,h,_,l,m,x;return{c(){c=n("p"),$=r("It is required to be logged in ("),d=n("code"),h=r("huggingface-cli login"),_=r(") when you want to use private or "),l=n("a"),m=r(`gated
models`),x=r("."),this.h()},l(j){c=s(j,"P",{});var w=i(c);$=a(w,"It is required to be logged in ("),d=s(w,"CODE",{});var b=i(d);h=a(b,"huggingface-cli login"),b.forEach(o),_=a(w,") when you want to use private or "),l=s(w,"A",{href:!0,rel:!0});var ne=i(l);m=a(ne,`gated
models`),ne.forEach(o),x=a(w,"."),w.forEach(o),this.h()},h(){f(l,"href","https://huggingface.co/docs/hub/models-gated#gated-models"),f(l,"rel","nofollow")},m(j,w){E(j,c,w),e(c,$),e(c,d),e(d,h),e(c,_),e(c,l),e(l,m),e(c,x)},d(j){j&&o(c)}}}function kt(W){let c,$,d,h,_;return{c(){c=n("p"),$=r("Activate the special "),d=n("a"),h=r("\u201Coffline-mode\u201D"),_=r(` to
use this method in a firewalled environment.`),this.h()},l(l){c=s(l,"P",{});var m=i(c);$=a(m,"Activate the special "),d=s(m,"A",{href:!0,rel:!0});var x=i(d);h=a(x,"\u201Coffline-mode\u201D"),x.forEach(o),_=a(m,` to
use this method in a firewalled environment.`),m.forEach(o),this.h()},h(){f(d,"href","https://huggingface.co/transformers/installation.html#offline-mode"),f(d,"rel","nofollow")},m(l,m){E(l,c,m),e(c,$),e(c,d),e(d,h),e(c,_)},d(l){l&&o(c)}}}function Pt(W){let c,$,d,h,_;return h=new Et({props:{code:`from diffusers import DDPMScheduler, DDIMScheduler, PNDMScheduler

# Download scheduler from huggingface.co and cache.
scheduler = DDPMScheduler.from_pretrained("google/ddpm-cifar10-32")

# Instantiate DDIM scheduler class with same config as DDPM
scheduler = DDIMScheduler.from_config(scheduler.config)

# Instantiate PNDM scheduler class with same config as DDPM
scheduler = PNDMScheduler.from_config(scheduler.config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> DDPMScheduler, DDIMScheduler, PNDMScheduler

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download scheduler from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scheduler = DDPMScheduler.from_pretrained(<span class="hljs-string">&quot;google/ddpm-cifar10-32&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Instantiate DDIM scheduler class with same config as DDPM</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scheduler = DDIMScheduler.from_config(scheduler.config)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Instantiate PNDM scheduler class with same config as DDPM</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scheduler = PNDMScheduler.from_config(scheduler.config)`}}),{c(){c=n("p"),$=r("Examples:"),d=g(),P(h.$$.fragment)},l(l){c=s(l,"P",{});var m=i(c);$=a(m,"Examples:"),m.forEach(o),d=u(l),S(h.$$.fragment,l)},m(l,m){E(l,c,m),e(c,$),E(l,d,m),I(h,l,m),_=!0},p:Mt,i(l){_||(A(h.$$.fragment,l),_=!0)},o(l){L(h.$$.fragment,l),_=!1},d(l){l&&o(c),l&&o(d),N(h,l)}}}function St(W){let c,$,d,h,_,l,m,x,j,w,b,ne,se,Ve,Ge,re,Je,Re,ae,ze,He,pe,Ke,Qe,Oe,O,U,_e,K,Xe,ve,Ye,qe,p,Q,Ze,q,eo,be,oo,to,ie,no,so,ro,X,$e,le,ao,io,ye,ce,lo,co,we,fo,ho,T,D,xe,go,uo,Me,mo,po,de,_o,vo,bo,B,Ee,$o,yo,De,wo,xo,Mo,V,Ce,Eo,Do,ke,Co,ko,Po,M,Y,So,Pe,Io,Ao,G,Lo,J,No,C,Z,jo,Se,Oo,qo,R,To,z,ee,Fo,F,Wo,Ie,Uo,Bo,fe,Vo,Go,Te;return l=new vt({}),K=new vt({}),Q=new Be({props:{name:"class diffusers.ConfigMixin",anchor:"diffusers.ConfigMixin",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/configuration_utils.py#L72"}}),Y=new Be({props:{name:"load_config",anchor:"diffusers.ConfigMixin.load_config",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"return_unused_kwargs",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.ConfigMixin.load_config.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a model repo on huggingface.co. Valid model ids should have an
organization name, like <code>google/ddpm-celebahq-256</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using <a href="/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config">save_config()</a>, e.g.,
<code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"diffusers.ConfigMixin.load_config.cache_dir",description:`<strong>cache_dir</strong> (<code>Union[str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"diffusers.ConfigMixin.load_config.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"diffusers.ConfigMixin.load_config.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"diffusers.ConfigMixin.load_config.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"diffusers.ConfigMixin.load_config.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"diffusers.ConfigMixin.load_config.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"diffusers.ConfigMixin.load_config.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"diffusers.ConfigMixin.load_config.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"diffusers.ConfigMixin.load_config.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo (either remote in
huggingface.co or downloaded locally), you can specify the folder name here.`,name:"subfolder"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/configuration_utils.py#L224"}}),G=new _t({props:{$$slots:{default:[Ct]},$$scope:{ctx:W}}}),J=new _t({props:{$$slots:{default:[kt]},$$scope:{ctx:W}}}),Z=new Be({props:{name:"from_config",anchor:"diffusers.ConfigMixin.from_config",parameters:[{name:"config",val:": typing.Union[diffusers.configuration_utils.FrozenDict, typing.Dict[str, typing.Any]] = None"},{name:"return_unused_kwargs",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.ConfigMixin.from_config.config",description:`<strong>config</strong> (<code>Dict[str, Any]</code>) &#x2014;
A config dictionary from which the Python class will be instantiated. Make sure to only load
configuration files of compatible classes.`,name:"config"},{anchor:"diffusers.ConfigMixin.from_config.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether kwargs that are not consumed by the Python class should be returned or not.`,name:"return_unused_kwargs"},{anchor:"diffusers.ConfigMixin.from_config.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the Python class.
<code>**kwargs</code> will be directly passed to the underlying scheduler/model&#x2019;s <code>__init__</code> method and eventually
overwrite same named arguments of <code>config</code>.`,name:"kwargs"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/configuration_utils.py#L137"}}),R=new Dt({props:{anchor:"diffusers.ConfigMixin.from_config.example",$$slots:{default:[Pt]},$$scope:{ctx:W}}}),ee=new Be({props:{name:"save_config",anchor:"diffusers.ConfigMixin.save_config",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"push_to_hub",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.ConfigMixin.save_config.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory where the configuration JSON file will be saved (will be created if it does not exist).`,name:"save_directory"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/configuration_utils.py#L117"}}),{c(){c=n("meta"),$=g(),d=n("h1"),h=n("a"),_=n("span"),P(l.$$.fragment),m=g(),x=n("span"),j=r("Configuration"),w=g(),b=n("p"),ne=r("In Diffusers, schedulers of type "),se=n("a"),Ve=r("schedulers.scheduling_utils.SchedulerMixin"),Ge=r(", and models of type "),re=n("a"),Je=r("ModelMixin"),Re=r(" inherit from "),ae=n("a"),ze=r("ConfigMixin"),He=r(` which conveniently takes care of storing all parameters that are
passed to the respective `),pe=n("code"),Ke=r("__init__"),Qe=r(" methods in a JSON-configuration file."),Oe=g(),O=n("h2"),U=n("a"),_e=n("span"),P(K.$$.fragment),Xe=g(),ve=n("span"),Ye=r("ConfigMixin"),qe=g(),p=n("div"),P(Q.$$.fragment),Ze=g(),q=n("p"),eo=r("Base class for all configuration classes. Stores all configuration parameters under "),be=n("code"),oo=r("self.config"),to=r(` Also handles all
methods for loading/downloading/saving classes inheriting from `),ie=n("a"),no=r("ConfigMixin"),so=r(" with"),ro=g(),X=n("ul"),$e=n("li"),le=n("a"),ao=r("from_config()"),io=g(),ye=n("li"),ce=n("a"),lo=r("save_config()"),co=g(),we=n("p"),fo=r("Class attributes:"),ho=g(),T=n("ul"),D=n("li"),xe=n("strong"),go=r("config_name"),uo=r(" ("),Me=n("code"),mo=r("str"),po=r(`) \u2014 A filename under which the config should stored when calling
`),de=n("a"),_o=r("save_config()"),vo=r(" (should be overridden by parent class)."),bo=g(),B=n("li"),Ee=n("strong"),$o=r("ignore_for_config"),yo=r(" ("),De=n("code"),wo=r("List[str]"),xo=r(`) \u2014 A list of attributes that should not be saved in the config (should be
overridden by parent class).`),Mo=g(),V=n("li"),Ce=n("strong"),Eo=r("has_compatibles"),Do=r(" ("),ke=n("code"),Co=r("bool"),ko=r(`) \u2014 Whether the class has compatible classes (should be overridden by parent
class).`),Po=g(),M=n("div"),P(Y.$$.fragment),So=g(),Pe=n("p"),Io=r("Instantiate a Python class from a config dictionary"),Ao=g(),P(G.$$.fragment),Lo=g(),P(J.$$.fragment),No=g(),C=n("div"),P(Z.$$.fragment),jo=g(),Se=n("p"),Oo=r("Instantiate a Python class from a config dictionary"),qo=g(),P(R.$$.fragment),To=g(),z=n("div"),P(ee.$$.fragment),Fo=g(),F=n("p"),Wo=r("Save a configuration object to the directory "),Ie=n("code"),Uo=r("save_directory"),Bo=r(`, so that it can be re-loaded using the
`),fe=n("a"),Vo=r("from_config()"),Go=r(" class method."),this.h()},l(t){const v=wt('[data-svelte="svelte-1phssyn"]',document.head);c=s(v,"META",{name:!0,content:!0}),v.forEach(o),$=u(t),d=s(t,"H1",{class:!0});var oe=i(d);h=s(oe,"A",{id:!0,class:!0,href:!0});var Ae=i(h);_=s(Ae,"SPAN",{});var Le=i(_);S(l.$$.fragment,Le),Le.forEach(o),Ae.forEach(o),m=u(oe),x=s(oe,"SPAN",{});var Jo=i(x);j=a(Jo,"Configuration"),Jo.forEach(o),oe.forEach(o),w=u(t),b=s(t,"P",{});var k=i(b);ne=a(k,"In Diffusers, schedulers of type "),se=s(k,"A",{href:!0});var Ro=i(se);Ve=a(Ro,"schedulers.scheduling_utils.SchedulerMixin"),Ro.forEach(o),Ge=a(k,", and models of type "),re=s(k,"A",{href:!0});var zo=i(re);Je=a(zo,"ModelMixin"),zo.forEach(o),Re=a(k," inherit from "),ae=s(k,"A",{href:!0});var Ho=i(ae);ze=a(Ho,"ConfigMixin"),Ho.forEach(o),He=a(k,` which conveniently takes care of storing all parameters that are
passed to the respective `),pe=s(k,"CODE",{});var Ko=i(pe);Ke=a(Ko,"__init__"),Ko.forEach(o),Qe=a(k," methods in a JSON-configuration file."),k.forEach(o),Oe=u(t),O=s(t,"H2",{class:!0});var Fe=i(O);U=s(Fe,"A",{id:!0,class:!0,href:!0});var Qo=i(U);_e=s(Qo,"SPAN",{});var Xo=i(_e);S(K.$$.fragment,Xo),Xo.forEach(o),Qo.forEach(o),Xe=u(Fe),ve=s(Fe,"SPAN",{});var Yo=i(ve);Ye=a(Yo,"ConfigMixin"),Yo.forEach(o),Fe.forEach(o),qe=u(t),p=s(t,"DIV",{class:!0});var y=i(p);S(Q.$$.fragment,y),Ze=u(y),q=s(y,"P",{});var he=i(q);eo=a(he,"Base class for all configuration classes. Stores all configuration parameters under "),be=s(he,"CODE",{});var Zo=i(be);oo=a(Zo,"self.config"),Zo.forEach(o),to=a(he,` Also handles all
methods for loading/downloading/saving classes inheriting from `),ie=s(he,"A",{href:!0});var et=i(ie);no=a(et,"ConfigMixin"),et.forEach(o),so=a(he," with"),he.forEach(o),ro=u(y),X=s(y,"UL",{});var We=i(X);$e=s(We,"LI",{});var ot=i($e);le=s(ot,"A",{href:!0});var tt=i(le);ao=a(tt,"from_config()"),tt.forEach(o),ot.forEach(o),io=u(We),ye=s(We,"LI",{});var nt=i(ye);ce=s(nt,"A",{href:!0});var st=i(ce);lo=a(st,"save_config()"),st.forEach(o),nt.forEach(o),We.forEach(o),co=u(y),we=s(y,"P",{});var rt=i(we);fo=a(rt,"Class attributes:"),rt.forEach(o),ho=u(y),T=s(y,"UL",{});var ge=i(T);D=s(ge,"LI",{});var te=i(D);xe=s(te,"STRONG",{});var at=i(xe);go=a(at,"config_name"),at.forEach(o),uo=a(te," ("),Me=s(te,"CODE",{});var it=i(Me);mo=a(it,"str"),it.forEach(o),po=a(te,`) \u2014 A filename under which the config should stored when calling
`),de=s(te,"A",{href:!0});var lt=i(de);_o=a(lt,"save_config()"),lt.forEach(o),vo=a(te," (should be overridden by parent class)."),te.forEach(o),bo=u(ge),B=s(ge,"LI",{});var Ne=i(B);Ee=s(Ne,"STRONG",{});var ct=i(Ee);$o=a(ct,"ignore_for_config"),ct.forEach(o),yo=a(Ne," ("),De=s(Ne,"CODE",{});var dt=i(De);wo=a(dt,"List[str]"),dt.forEach(o),xo=a(Ne,`) \u2014 A list of attributes that should not be saved in the config (should be
overridden by parent class).`),Ne.forEach(o),Mo=u(ge),V=s(ge,"LI",{});var je=i(V);Ce=s(je,"STRONG",{});var ft=i(Ce);Eo=a(ft,"has_compatibles"),ft.forEach(o),Do=a(je," ("),ke=s(je,"CODE",{});var ht=i(ke);Co=a(ht,"bool"),ht.forEach(o),ko=a(je,`) \u2014 Whether the class has compatible classes (should be overridden by parent
class).`),je.forEach(o),ge.forEach(o),Po=u(y),M=s(y,"DIV",{class:!0});var H=i(M);S(Y.$$.fragment,H),So=u(H),Pe=s(H,"P",{});var gt=i(Pe);Io=a(gt,"Instantiate a Python class from a config dictionary"),gt.forEach(o),Ao=u(H),S(G.$$.fragment,H),Lo=u(H),S(J.$$.fragment,H),H.forEach(o),No=u(y),C=s(y,"DIV",{class:!0});var ue=i(C);S(Z.$$.fragment,ue),jo=u(ue),Se=s(ue,"P",{});var ut=i(Se);Oo=a(ut,"Instantiate a Python class from a config dictionary"),ut.forEach(o),qo=u(ue),S(R.$$.fragment,ue),ue.forEach(o),To=u(y),z=s(y,"DIV",{class:!0});var Ue=i(z);S(ee.$$.fragment,Ue),Fo=u(Ue),F=s(Ue,"P",{});var me=i(F);Wo=a(me,"Save a configuration object to the directory "),Ie=s(me,"CODE",{});var mt=i(Ie);Uo=a(mt,"save_directory"),mt.forEach(o),Bo=a(me,`, so that it can be re-loaded using the
`),fe=s(me,"A",{href:!0});var pt=i(fe);Vo=a(pt,"from_config()"),pt.forEach(o),Go=a(me," class method."),me.forEach(o),Ue.forEach(o),y.forEach(o),this.h()},h(){f(c,"name","hf:doc:metadata"),f(c,"content",JSON.stringify(It)),f(h,"id","configuration"),f(h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(h,"href","#configuration"),f(d,"class","relative group"),f(se,"href","/docs/diffusers/main/en/api/schedulers#diffusers.SchedulerMixin"),f(re,"href","/docs/diffusers/main/en/using-diffusers/loading#diffusers.ModelMixin"),f(ae,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),f(U,"id","diffusers.ConfigMixin"),f(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(U,"href","#diffusers.ConfigMixin"),f(O,"class","relative group"),f(ie,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),f(le,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),f(ce,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),f(de,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),f(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(fe,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),f(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(p,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,v){e(document.head,c),E(t,$,v),E(t,d,v),e(d,h),e(h,_),I(l,_,null),e(d,m),e(d,x),e(x,j),E(t,w,v),E(t,b,v),e(b,ne),e(b,se),e(se,Ve),e(b,Ge),e(b,re),e(re,Je),e(b,Re),e(b,ae),e(ae,ze),e(b,He),e(b,pe),e(pe,Ke),e(b,Qe),E(t,Oe,v),E(t,O,v),e(O,U),e(U,_e),I(K,_e,null),e(O,Xe),e(O,ve),e(ve,Ye),E(t,qe,v),E(t,p,v),I(Q,p,null),e(p,Ze),e(p,q),e(q,eo),e(q,be),e(be,oo),e(q,to),e(q,ie),e(ie,no),e(q,so),e(p,ro),e(p,X),e(X,$e),e($e,le),e(le,ao),e(X,io),e(X,ye),e(ye,ce),e(ce,lo),e(p,co),e(p,we),e(we,fo),e(p,ho),e(p,T),e(T,D),e(D,xe),e(xe,go),e(D,uo),e(D,Me),e(Me,mo),e(D,po),e(D,de),e(de,_o),e(D,vo),e(T,bo),e(T,B),e(B,Ee),e(Ee,$o),e(B,yo),e(B,De),e(De,wo),e(B,xo),e(T,Mo),e(T,V),e(V,Ce),e(Ce,Eo),e(V,Do),e(V,ke),e(ke,Co),e(V,ko),e(p,Po),e(p,M),I(Y,M,null),e(M,So),e(M,Pe),e(Pe,Io),e(M,Ao),I(G,M,null),e(M,Lo),I(J,M,null),e(p,No),e(p,C),I(Z,C,null),e(C,jo),e(C,Se),e(Se,Oo),e(C,qo),I(R,C,null),e(p,To),e(p,z),I(ee,z,null),e(z,Fo),e(z,F),e(F,Wo),e(F,Ie),e(Ie,Uo),e(F,Bo),e(F,fe),e(fe,Vo),e(F,Go),Te=!0},p(t,[v]){const oe={};v&2&&(oe.$$scope={dirty:v,ctx:t}),G.$set(oe);const Ae={};v&2&&(Ae.$$scope={dirty:v,ctx:t}),J.$set(Ae);const Le={};v&2&&(Le.$$scope={dirty:v,ctx:t}),R.$set(Le)},i(t){Te||(A(l.$$.fragment,t),A(K.$$.fragment,t),A(Q.$$.fragment,t),A(Y.$$.fragment,t),A(G.$$.fragment,t),A(J.$$.fragment,t),A(Z.$$.fragment,t),A(R.$$.fragment,t),A(ee.$$.fragment,t),Te=!0)},o(t){L(l.$$.fragment,t),L(K.$$.fragment,t),L(Q.$$.fragment,t),L(Y.$$.fragment,t),L(G.$$.fragment,t),L(J.$$.fragment,t),L(Z.$$.fragment,t),L(R.$$.fragment,t),L(ee.$$.fragment,t),Te=!1},d(t){o(c),t&&o($),t&&o(d),N(l),t&&o(w),t&&o(b),t&&o(Oe),t&&o(O),N(K),t&&o(qe),t&&o(p),N(Q),N(Y),N(G),N(J),N(Z),N(R),N(ee)}}}const It={local:"configuration",sections:[{local:"diffusers.ConfigMixin",title:"ConfigMixin"}],title:"Configuration"};function At(W){return xt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ft extends bt{constructor(c){super();$t(this,c,At,St,yt,{})}}export{Ft as default,It as metadata};
