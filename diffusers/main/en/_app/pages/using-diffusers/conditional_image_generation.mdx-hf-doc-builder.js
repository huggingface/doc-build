import{S as Ke,i as Qe,s as We,e as o,k as c,w as U,t as s,M as Xe,c as r,d as t,m as h,a as l,x as B,h as a,b as u,G as i,g as f,y as M,L as Ze,q as V,o as z,B as O,v as et}from"../../chunks/vendor-hf-doc-builder.js";import{I as tt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as le}from"../../chunks/CodeBlock-hf-doc-builder.js";function it(Se){let d,H,g,y,L,v,fe,Y,ue,J,_,pe,A,me,ce,R,p,he,C,de,ge,I,ye,_e,D,we,$e,T,Pe,ve,b,De,be,F,k,K,w,ke,G,Ee,je,Q,E,W,$,qe,N,xe,Ae,X,j,Z,P,Ce,q,Ie,Te,ee,S,Ge,te,x,ie;return v=new tt({}),k=new le({props:{code:`from diffusers import DiffusionPipeline

generator = DiffusionPipeline.from_pretrained("CompVis/ldm-text2im-large-256")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> DiffusionPipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>generator = DiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;CompVis/ldm-text2im-large-256&quot;</span>)`}}),E=new le({props:{code:'generator.to("cuda")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>generator.to(<span class="hljs-string">&quot;cuda&quot;</span>)'}}),j=new le({props:{code:'image = generator("An image of a squirrel in Picasso style").images[0]',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>image = generator(<span class="hljs-string">&quot;An image of a squirrel in Picasso style&quot;</span>).images[<span class="hljs-number">0</span>]'}}),x=new le({props:{code:'image.save("image_of_squirrel_painting.png")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>image.save(<span class="hljs-string">&quot;image_of_squirrel_painting.png&quot;</span>)'}}),{c(){d=o("meta"),H=c(),g=o("h1"),y=o("a"),L=o("span"),U(v.$$.fragment),fe=c(),Y=o("span"),ue=s("Conditional Image Generation"),J=c(),_=o("p"),pe=s("The "),A=o("a"),me=s("DiffusionPipeline"),ce=s(" is the easiest way to use a pre-trained diffusion system for inference"),R=c(),p=o("p"),he=s("Start by creating an instance of "),C=o("a"),de=s("DiffusionPipeline"),ge=s(` and specify which pipeline checkpoint you would like to download.
You can use the `),I=o("a"),ye=s("DiffusionPipeline"),_e=s(" for any "),D=o("a"),we=s("Diffusers\u2019 checkpoint"),$e=s(`.
In this guide though, you\u2019ll use `),T=o("a"),Pe=s("DiffusionPipeline"),ve=s(" for text-to-image generation with "),b=o("a"),De=s("Latent Diffusion"),be=s(":"),F=c(),U(k.$$.fragment),K=c(),w=o("p"),ke=s("The "),G=o("a"),Ee=s("DiffusionPipeline"),je=s(` downloads and caches all modeling, tokenization, and scheduling components.
Because the model consists of roughly 1.4 billion parameters, we strongly recommend running it on GPU.
You can move the generator object to GPU, just like you would in PyTorch.`),Q=c(),U(E.$$.fragment),W=c(),$=o("p"),qe=s("Now you can use the "),N=o("code"),xe=s("generator"),Ae=s(" on your text prompt:"),X=c(),U(j.$$.fragment),Z=c(),P=o("p"),Ce=s("The output is by default wrapped into a "),q=o("a"),Ie=s("PIL Image object"),Te=s("."),ee=c(),S=o("p"),Ge=s("You can save the image by simply calling:"),te=c(),U(x.$$.fragment),this.h()},l(e){const n=Xe('[data-svelte="svelte-1phssyn"]',document.head);d=r(n,"META",{name:!0,content:!0}),n.forEach(t),H=h(e),g=r(e,"H1",{class:!0});var ne=l(g);y=r(ne,"A",{id:!0,class:!0,href:!0});var Le=l(y);L=r(Le,"SPAN",{});var Ye=l(L);B(v.$$.fragment,Ye),Ye.forEach(t),Le.forEach(t),fe=h(ne),Y=r(ne,"SPAN",{});var Ne=l(Y);ue=a(Ne,"Conditional Image Generation"),Ne.forEach(t),ne.forEach(t),J=h(e),_=r(e,"P",{});var se=l(_);pe=a(se,"The "),A=r(se,"A",{href:!0});var Ue=l(A);me=a(Ue,"DiffusionPipeline"),Ue.forEach(t),ce=a(se," is the easiest way to use a pre-trained diffusion system for inference"),se.forEach(t),R=h(e),p=r(e,"P",{});var m=l(p);he=a(m,"Start by creating an instance of "),C=r(m,"A",{href:!0});var Be=l(C);de=a(Be,"DiffusionPipeline"),Be.forEach(t),ge=a(m,` and specify which pipeline checkpoint you would like to download.
You can use the `),I=r(m,"A",{href:!0});var Me=l(I);ye=a(Me,"DiffusionPipeline"),Me.forEach(t),_e=a(m," for any "),D=r(m,"A",{href:!0,rel:!0});var Ve=l(D);we=a(Ve,"Diffusers\u2019 checkpoint"),Ve.forEach(t),$e=a(m,`.
In this guide though, you\u2019ll use `),T=r(m,"A",{href:!0});var ze=l(T);Pe=a(ze,"DiffusionPipeline"),ze.forEach(t),ve=a(m," for text-to-image generation with "),b=r(m,"A",{href:!0,rel:!0});var Oe=l(b);De=a(Oe,"Latent Diffusion"),Oe.forEach(t),be=a(m,":"),m.forEach(t),F=h(e),B(k.$$.fragment,e),K=h(e),w=r(e,"P",{});var ae=l(w);ke=a(ae,"The "),G=r(ae,"A",{href:!0});var He=l(G);Ee=a(He,"DiffusionPipeline"),He.forEach(t),je=a(ae,` downloads and caches all modeling, tokenization, and scheduling components.
Because the model consists of roughly 1.4 billion parameters, we strongly recommend running it on GPU.
You can move the generator object to GPU, just like you would in PyTorch.`),ae.forEach(t),Q=h(e),B(E.$$.fragment,e),W=h(e),$=r(e,"P",{});var oe=l($);qe=a(oe,"Now you can use the "),N=r(oe,"CODE",{});var Je=l(N);xe=a(Je,"generator"),Je.forEach(t),Ae=a(oe," on your text prompt:"),oe.forEach(t),X=h(e),B(j.$$.fragment,e),Z=h(e),P=r(e,"P",{});var re=l(P);Ce=a(re,"The output is by default wrapped into a "),q=r(re,"A",{href:!0,rel:!0});var Re=l(q);Ie=a(Re,"PIL Image object"),Re.forEach(t),Te=a(re,"."),re.forEach(t),ee=h(e),S=r(e,"P",{});var Fe=l(S);Ge=a(Fe,"You can save the image by simply calling:"),Fe.forEach(t),te=h(e),B(x.$$.fragment,e),this.h()},h(){u(d,"name","hf:doc:metadata"),u(d,"content",JSON.stringify(nt)),u(y,"id","conditional-image-generation"),u(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(y,"href","#conditional-image-generation"),u(g,"class","relative group"),u(A,"href","/docs/diffusers/main/en/using-diffusers/loading#diffusers.DiffusionPipeline"),u(C,"href","/docs/diffusers/main/en/using-diffusers/loading#diffusers.DiffusionPipeline"),u(I,"href","/docs/diffusers/main/en/using-diffusers/loading#diffusers.DiffusionPipeline"),u(D,"href","https://huggingface.co/models?library=diffusers&sort=downloads"),u(D,"rel","nofollow"),u(T,"href","/docs/diffusers/main/en/using-diffusers/loading#diffusers.DiffusionPipeline"),u(b,"href","https://huggingface.co/CompVis/ldm-text2im-large-256"),u(b,"rel","nofollow"),u(G,"href","/docs/diffusers/main/en/using-diffusers/loading#diffusers.DiffusionPipeline"),u(q,"href","https://pillow.readthedocs.io/en/stable/reference/Image.html?highlight=image#the-image-class"),u(q,"rel","nofollow")},m(e,n){i(document.head,d),f(e,H,n),f(e,g,n),i(g,y),i(y,L),M(v,L,null),i(g,fe),i(g,Y),i(Y,ue),f(e,J,n),f(e,_,n),i(_,pe),i(_,A),i(A,me),i(_,ce),f(e,R,n),f(e,p,n),i(p,he),i(p,C),i(C,de),i(p,ge),i(p,I),i(I,ye),i(p,_e),i(p,D),i(D,we),i(p,$e),i(p,T),i(T,Pe),i(p,ve),i(p,b),i(b,De),i(p,be),f(e,F,n),M(k,e,n),f(e,K,n),f(e,w,n),i(w,ke),i(w,G),i(G,Ee),i(w,je),f(e,Q,n),M(E,e,n),f(e,W,n),f(e,$,n),i($,qe),i($,N),i(N,xe),i($,Ae),f(e,X,n),M(j,e,n),f(e,Z,n),f(e,P,n),i(P,Ce),i(P,q),i(q,Ie),i(P,Te),f(e,ee,n),f(e,S,n),i(S,Ge),f(e,te,n),M(x,e,n),ie=!0},p:Ze,i(e){ie||(V(v.$$.fragment,e),V(k.$$.fragment,e),V(E.$$.fragment,e),V(j.$$.fragment,e),V(x.$$.fragment,e),ie=!0)},o(e){z(v.$$.fragment,e),z(k.$$.fragment,e),z(E.$$.fragment,e),z(j.$$.fragment,e),z(x.$$.fragment,e),ie=!1},d(e){t(d),e&&t(H),e&&t(g),O(v),e&&t(J),e&&t(_),e&&t(R),e&&t(p),e&&t(F),O(k,e),e&&t(K),e&&t(w),e&&t(Q),O(E,e),e&&t(W),e&&t($),e&&t(X),O(j,e),e&&t(Z),e&&t(P),e&&t(ee),e&&t(S),e&&t(te),O(x,e)}}}const nt={local:"conditional-image-generation",title:"Conditional Image Generation"};function st(Se){return et(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lt extends Ke{constructor(d){super();Qe(this,d,st,it,We,{})}}export{lt as default,nt as metadata};
