import{S as vt,i as bt,s as $t,e as n,k as f,w as M,t as a,M as wt,c as s,d as o,m as g,a as r,x as C,h as i,b as m,G as e,g as D,y as P,q as k,o as S,B as I,v as yt,L as xt}from"../../chunks/vendor-hf-doc-builder.js";import{T as _t}from"../../chunks/Tip-hf-doc-builder.js";import{D as me}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Dt}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Et}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Mt}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Ct(q){let c,$,d,u,v;return u=new Dt({props:{code:`from diffusers import DDPMScheduler, DDIMScheduler, PNDMScheduler

# Download scheduler from huggingface.co and cache.
scheduler = DDPMScheduler.from_pretrained("google/ddpm-cifar10-32")

# Instantiate DDIM scheduler class with same config as DDPM
scheduler = DDIMScheduler.from_config(scheduler.config)

# Instantiate PNDM scheduler class with same config as DDPM
scheduler = PNDMScheduler.from_config(scheduler.config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> DDPMScheduler, DDIMScheduler, PNDMScheduler

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download scheduler from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scheduler = DDPMScheduler.from_pretrained(<span class="hljs-string">&quot;google/ddpm-cifar10-32&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Instantiate DDIM scheduler class with same config as DDPM</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scheduler = DDIMScheduler.from_config(scheduler.config)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Instantiate PNDM scheduler class with same config as DDPM</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scheduler = PNDMScheduler.from_config(scheduler.config)`}}),{c(){c=n("p"),$=a("Examples:"),d=f(),M(u.$$.fragment)},l(l){c=s(l,"P",{});var p=r(c);$=i(p,"Examples:"),p.forEach(o),d=g(l),C(u.$$.fragment,l)},m(l,p){D(l,c,p),e(c,$),D(l,d,p),P(u,l,p),v=!0},p:xt,i(l){v||(k(u.$$.fragment,l),v=!0)},o(l){S(u.$$.fragment,l),v=!1},d(l){l&&o(c),l&&o(d),I(u,l)}}}function Pt(q){let c,$,d,u,v,l,p,y;return{c(){c=n("p"),$=a("It is required to be logged in ("),d=n("code"),u=a("huggingface-cli login"),v=a(") when you want to use private or "),l=n("a"),p=a(`gated
models`),y=a("."),this.h()},l(L){c=s(L,"P",{});var w=r(c);$=i(w,"It is required to be logged in ("),d=s(w,"CODE",{});var E=r(d);u=i(E,"huggingface-cli login"),E.forEach(o),v=i(w,") when you want to use private or "),l=s(w,"A",{href:!0,rel:!0});var re=r(l);p=i(re,`gated
models`),re.forEach(o),y=i(w,"."),w.forEach(o),this.h()},h(){m(l,"href","https://huggingface.co/docs/hub/models-gated#gated-models"),m(l,"rel","nofollow")},m(L,w){D(L,c,w),e(c,$),e(c,d),e(d,u),e(c,v),e(c,l),e(l,p),e(c,y)},d(L){L&&o(c)}}}function kt(q){let c,$,d,u,v;return{c(){c=n("p"),$=a("Activate the special "),d=n("a"),u=a("\u201Coffline-mode\u201D"),v=a(` to
use this method in a firewalled environment.`),this.h()},l(l){c=s(l,"P",{});var p=r(c);$=i(p,"Activate the special "),d=s(p,"A",{href:!0,rel:!0});var y=r(d);u=i(y,"\u201Coffline-mode\u201D"),y.forEach(o),v=i(p,` to
use this method in a firewalled environment.`),p.forEach(o),this.h()},h(){m(d,"href","https://huggingface.co/transformers/installation.html#offline-mode"),m(d,"rel","nofollow")},m(l,p){D(l,c,p),e(c,$),e(c,d),e(d,u),e(c,v)},d(l){l&&o(c)}}}function St(q){let c,$,d,u,v,l,p,y,L,w,E,re,pe,ze,Be,Oe,h,K,Ge,N,He,_e,Ke,Qe,ae,Xe,Ye,Ze,Q,ve,ie,eo,oo,be,le,to,no,$e,so,ro,O,A,we,ao,io,ye,lo,co,ce,fo,go,ho,U,xe,uo,mo,De,po,_o,vo,F,Ee,bo,$o,Me,wo,yo,xo,j,X,Do,Ce,Eo,Mo,J,Co,x,Y,Po,Pe,ko,So,W,Io,V,Ao,R,Z,jo,T,Lo,ke,No,Oo,de,To,qo,Uo,z,ee,Fo,Se,Jo,Wo,B,oe,Vo,Ie,Ro,Te,G,zo,te,Bo,Go,qe;return l=new Et({}),K=new me({props:{name:"class diffusers.ConfigMixin",anchor:"diffusers.ConfigMixin",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/configuration_utils.py#L72"}}),X=new me({props:{name:"from_config",anchor:"diffusers.ConfigMixin.from_config",parameters:[{name:"config",val:": typing.Union[diffusers.configuration_utils.FrozenDict, typing.Dict[str, typing.Any]] = None"},{name:"return_unused_kwargs",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.ConfigMixin.from_config.config",description:`<strong>config</strong> (<code>Dict[str, Any]</code>) &#x2014;
A config dictionary from which the Python class will be instantiated. Make sure to only load
configuration files of compatible classes.`,name:"config"},{anchor:"diffusers.ConfigMixin.from_config.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether kwargs that are not consumed by the Python class should be returned or not.`,name:"return_unused_kwargs"},{anchor:"diffusers.ConfigMixin.from_config.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the Python class.
<code>**kwargs</code> will be directly passed to the underlying scheduler/model&#x2019;s <code>__init__</code> method and eventually
overwrite same named arguments of <code>config</code>.`,name:"kwargs"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/configuration_utils.py#L137"}}),J=new Mt({props:{anchor:"diffusers.ConfigMixin.from_config.example",$$slots:{default:[Ct]},$$scope:{ctx:q}}}),Y=new me({props:{name:"load_config",anchor:"diffusers.ConfigMixin.load_config",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"return_unused_kwargs",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.ConfigMixin.load_config.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a model repo on huggingface.co. Valid model ids should have an
organization name, like <code>google/ddpm-celebahq-256</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using <a href="/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config">save_config()</a>, e.g.,
<code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"diffusers.ConfigMixin.load_config.cache_dir",description:`<strong>cache_dir</strong> (<code>Union[str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"diffusers.ConfigMixin.load_config.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"diffusers.ConfigMixin.load_config.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"diffusers.ConfigMixin.load_config.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"diffusers.ConfigMixin.load_config.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"diffusers.ConfigMixin.load_config.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"diffusers.ConfigMixin.load_config.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"diffusers.ConfigMixin.load_config.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"diffusers.ConfigMixin.load_config.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo (either remote in
huggingface.co or downloaded locally), you can specify the folder name here.`,name:"subfolder"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/configuration_utils.py#L224"}}),W=new _t({props:{$$slots:{default:[Pt]},$$scope:{ctx:q}}}),V=new _t({props:{$$slots:{default:[kt]},$$scope:{ctx:q}}}),Z=new me({props:{name:"save_config",anchor:"diffusers.ConfigMixin.save_config",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"push_to_hub",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.ConfigMixin.save_config.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory where the configuration JSON file will be saved (will be created if it does not exist).`,name:"save_directory"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/configuration_utils.py#L117"}}),ee=new me({props:{name:"to_json_file",anchor:"diffusers.ConfigMixin.to_json_file",parameters:[{name:"json_file_path",val:": typing.Union[str, os.PathLike]"}],parametersDescription:[{anchor:"diffusers.ConfigMixin.to_json_file.json_file_path",description:`<strong>json_file_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Path to the JSON file in which this configuration instance&#x2019;s parameters will be saved.`,name:"json_file_path"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/configuration_utils.py#L498"}}),oe=new me({props:{name:"to_json_string",anchor:"diffusers.ConfigMixin.to_json_string",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/configuration_utils.py#L488",returnDescription:`
<p>String containing all the attributes that make up this configuration instance in JSON format.</p>
`,returnType:`
<p><code>str</code></p>
`}}),{c(){c=n("meta"),$=f(),d=n("h1"),u=n("a"),v=n("span"),M(l.$$.fragment),p=f(),y=n("span"),L=a("Configuration"),w=f(),E=n("p"),re=a("The handling of configurations in Diffusers is with the "),pe=n("code"),ze=a("ConfigMixin"),Be=a(" class."),Oe=f(),h=n("div"),M(K.$$.fragment),Ge=f(),N=n("p"),He=a("Base class for all configuration classes. Stores all configuration parameters under "),_e=n("code"),Ke=a("self.config"),Qe=a(` Also handles all
methods for loading/downloading/saving classes inheriting from `),ae=n("a"),Xe=a("ConfigMixin"),Ye=a(" with"),Ze=f(),Q=n("ul"),ve=n("li"),ie=n("a"),eo=a("from_config()"),oo=f(),be=n("li"),le=n("a"),to=a("save_config()"),no=f(),$e=n("p"),so=a("Class attributes:"),ro=f(),O=n("ul"),A=n("li"),we=n("strong"),ao=a("config_name"),io=a(" ("),ye=n("code"),lo=a("str"),co=a(`) \u2014 A filename under which the config should stored when calling
`),ce=n("a"),fo=a("save_config()"),go=a(" (should be overridden by parent class)."),ho=f(),U=n("li"),xe=n("strong"),uo=a("ignore_for_config"),mo=a(" ("),De=n("code"),po=a("List[str]"),_o=a(`) \u2014 A list of attributes that should not be saved in the config (should be
overridden by parent class).`),vo=f(),F=n("li"),Ee=n("strong"),bo=a("has_compatibles"),$o=a(" ("),Me=n("code"),wo=a("bool"),yo=a(`) \u2014 Whether the class has compatible classes (should be overridden by parent
class).`),xo=f(),j=n("div"),M(X.$$.fragment),Do=f(),Ce=n("p"),Eo=a("Instantiate a Python class from a config dictionary"),Mo=f(),M(J.$$.fragment),Co=f(),x=n("div"),M(Y.$$.fragment),Po=f(),Pe=n("p"),ko=a("Instantiate a Python class from a config dictionary"),So=f(),M(W.$$.fragment),Io=f(),M(V.$$.fragment),Ao=f(),R=n("div"),M(Z.$$.fragment),jo=f(),T=n("p"),Lo=a("Save a configuration object to the directory "),ke=n("code"),No=a("save_directory"),Oo=a(`, so that it can be re-loaded using the
`),de=n("a"),To=a("from_config()"),qo=a(" class method."),Uo=f(),z=n("div"),M(ee.$$.fragment),Fo=f(),Se=n("p"),Jo=a("Save this instance to a JSON file."),Wo=f(),B=n("div"),M(oe.$$.fragment),Vo=f(),Ie=n("p"),Ro=a("Serializes this instance to a JSON string."),Te=f(),G=n("p"),zo=a("Under further construction \u{1F6A7}, open a "),te=n("a"),Bo=a("PR"),Go=a(" if you want to contribute!"),this.h()},l(t){const b=wt('[data-svelte="svelte-1phssyn"]',document.head);c=s(b,"META",{name:!0,content:!0}),b.forEach(o),$=g(t),d=s(t,"H1",{class:!0});var ne=r(d);u=s(ne,"A",{id:!0,class:!0,href:!0});var Ae=r(u);v=s(Ae,"SPAN",{});var je=r(v);C(l.$$.fragment,je),je.forEach(o),Ae.forEach(o),p=g(ne),y=s(ne,"SPAN",{});var Ho=r(y);L=i(Ho,"Configuration"),Ho.forEach(o),ne.forEach(o),w=g(t),E=s(t,"P",{});var Ue=r(E);re=i(Ue,"The handling of configurations in Diffusers is with the "),pe=s(Ue,"CODE",{});var Ko=r(pe);ze=i(Ko,"ConfigMixin"),Ko.forEach(o),Be=i(Ue," class."),Ue.forEach(o),Oe=g(t),h=s(t,"DIV",{class:!0});var _=r(h);C(K.$$.fragment,_),Ge=g(_),N=s(_,"P",{});var fe=r(N);He=i(fe,"Base class for all configuration classes. Stores all configuration parameters under "),_e=s(fe,"CODE",{});var Qo=r(_e);Ke=i(Qo,"self.config"),Qo.forEach(o),Qe=i(fe,` Also handles all
methods for loading/downloading/saving classes inheriting from `),ae=s(fe,"A",{href:!0});var Xo=r(ae);Xe=i(Xo,"ConfigMixin"),Xo.forEach(o),Ye=i(fe," with"),fe.forEach(o),Ze=g(_),Q=s(_,"UL",{});var Fe=r(Q);ve=s(Fe,"LI",{});var Yo=r(ve);ie=s(Yo,"A",{href:!0});var Zo=r(ie);eo=i(Zo,"from_config()"),Zo.forEach(o),Yo.forEach(o),oo=g(Fe),be=s(Fe,"LI",{});var et=r(be);le=s(et,"A",{href:!0});var ot=r(le);to=i(ot,"save_config()"),ot.forEach(o),et.forEach(o),Fe.forEach(o),no=g(_),$e=s(_,"P",{});var tt=r($e);so=i(tt,"Class attributes:"),tt.forEach(o),ro=g(_),O=s(_,"UL",{});var ge=r(O);A=s(ge,"LI",{});var se=r(A);we=s(se,"STRONG",{});var nt=r(we);ao=i(nt,"config_name"),nt.forEach(o),io=i(se," ("),ye=s(se,"CODE",{});var st=r(ye);lo=i(st,"str"),st.forEach(o),co=i(se,`) \u2014 A filename under which the config should stored when calling
`),ce=s(se,"A",{href:!0});var rt=r(ce);fo=i(rt,"save_config()"),rt.forEach(o),go=i(se," (should be overridden by parent class)."),se.forEach(o),ho=g(ge),U=s(ge,"LI",{});var Le=r(U);xe=s(Le,"STRONG",{});var at=r(xe);uo=i(at,"ignore_for_config"),at.forEach(o),mo=i(Le," ("),De=s(Le,"CODE",{});var it=r(De);po=i(it,"List[str]"),it.forEach(o),_o=i(Le,`) \u2014 A list of attributes that should not be saved in the config (should be
overridden by parent class).`),Le.forEach(o),vo=g(ge),F=s(ge,"LI",{});var Ne=r(F);Ee=s(Ne,"STRONG",{});var lt=r(Ee);bo=i(lt,"has_compatibles"),lt.forEach(o),$o=i(Ne," ("),Me=s(Ne,"CODE",{});var ct=r(Me);wo=i(ct,"bool"),ct.forEach(o),yo=i(Ne,`) \u2014 Whether the class has compatible classes (should be overridden by parent
class).`),Ne.forEach(o),ge.forEach(o),xo=g(_),j=s(_,"DIV",{class:!0});var he=r(j);C(X.$$.fragment,he),Do=g(he),Ce=s(he,"P",{});var dt=r(Ce);Eo=i(dt,"Instantiate a Python class from a config dictionary"),dt.forEach(o),Mo=g(he),C(J.$$.fragment,he),he.forEach(o),Co=g(_),x=s(_,"DIV",{class:!0});var H=r(x);C(Y.$$.fragment,H),Po=g(H),Pe=s(H,"P",{});var ft=r(Pe);ko=i(ft,"Instantiate a Python class from a config dictionary"),ft.forEach(o),So=g(H),C(W.$$.fragment,H),Io=g(H),C(V.$$.fragment,H),H.forEach(o),Ao=g(_),R=s(_,"DIV",{class:!0});var Je=r(R);C(Z.$$.fragment,Je),jo=g(Je),T=s(Je,"P",{});var ue=r(T);Lo=i(ue,"Save a configuration object to the directory "),ke=s(ue,"CODE",{});var gt=r(ke);No=i(gt,"save_directory"),gt.forEach(o),Oo=i(ue,`, so that it can be re-loaded using the
`),de=s(ue,"A",{href:!0});var ht=r(de);To=i(ht,"from_config()"),ht.forEach(o),qo=i(ue," class method."),ue.forEach(o),Je.forEach(o),Uo=g(_),z=s(_,"DIV",{class:!0});var We=r(z);C(ee.$$.fragment,We),Fo=g(We),Se=s(We,"P",{});var ut=r(Se);Jo=i(ut,"Save this instance to a JSON file."),ut.forEach(o),We.forEach(o),Wo=g(_),B=s(_,"DIV",{class:!0});var Ve=r(B);C(oe.$$.fragment,Ve),Vo=g(Ve),Ie=s(Ve,"P",{});var mt=r(Ie);Ro=i(mt,"Serializes this instance to a JSON string."),mt.forEach(o),Ve.forEach(o),_.forEach(o),Te=g(t),G=s(t,"P",{});var Re=r(G);zo=i(Re,"Under further construction \u{1F6A7}, open a "),te=s(Re,"A",{href:!0,rel:!0});var pt=r(te);Bo=i(pt,"PR"),pt.forEach(o),Go=i(Re," if you want to contribute!"),Re.forEach(o),this.h()},h(){m(c,"name","hf:doc:metadata"),m(c,"content",JSON.stringify(It)),m(u,"id","diffusers.ConfigMixin"),m(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(u,"href","#diffusers.ConfigMixin"),m(d,"class","relative group"),m(ae,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin"),m(ie,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),m(le,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),m(ce,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.save_config"),m(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(x,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(de,"href","/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config"),m(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(te,"href","https://github.com/huggingface/diffusers/compare"),m(te,"rel","nofollow")},m(t,b){e(document.head,c),D(t,$,b),D(t,d,b),e(d,u),e(u,v),P(l,v,null),e(d,p),e(d,y),e(y,L),D(t,w,b),D(t,E,b),e(E,re),e(E,pe),e(pe,ze),e(E,Be),D(t,Oe,b),D(t,h,b),P(K,h,null),e(h,Ge),e(h,N),e(N,He),e(N,_e),e(_e,Ke),e(N,Qe),e(N,ae),e(ae,Xe),e(N,Ye),e(h,Ze),e(h,Q),e(Q,ve),e(ve,ie),e(ie,eo),e(Q,oo),e(Q,be),e(be,le),e(le,to),e(h,no),e(h,$e),e($e,so),e(h,ro),e(h,O),e(O,A),e(A,we),e(we,ao),e(A,io),e(A,ye),e(ye,lo),e(A,co),e(A,ce),e(ce,fo),e(A,go),e(O,ho),e(O,U),e(U,xe),e(xe,uo),e(U,mo),e(U,De),e(De,po),e(U,_o),e(O,vo),e(O,F),e(F,Ee),e(Ee,bo),e(F,$o),e(F,Me),e(Me,wo),e(F,yo),e(h,xo),e(h,j),P(X,j,null),e(j,Do),e(j,Ce),e(Ce,Eo),e(j,Mo),P(J,j,null),e(h,Co),e(h,x),P(Y,x,null),e(x,Po),e(x,Pe),e(Pe,ko),e(x,So),P(W,x,null),e(x,Io),P(V,x,null),e(h,Ao),e(h,R),P(Z,R,null),e(R,jo),e(R,T),e(T,Lo),e(T,ke),e(ke,No),e(T,Oo),e(T,de),e(de,To),e(T,qo),e(h,Uo),e(h,z),P(ee,z,null),e(z,Fo),e(z,Se),e(Se,Jo),e(h,Wo),e(h,B),P(oe,B,null),e(B,Vo),e(B,Ie),e(Ie,Ro),D(t,Te,b),D(t,G,b),e(G,zo),e(G,te),e(te,Bo),e(G,Go),qe=!0},p(t,[b]){const ne={};b&2&&(ne.$$scope={dirty:b,ctx:t}),J.$set(ne);const Ae={};b&2&&(Ae.$$scope={dirty:b,ctx:t}),W.$set(Ae);const je={};b&2&&(je.$$scope={dirty:b,ctx:t}),V.$set(je)},i(t){qe||(k(l.$$.fragment,t),k(K.$$.fragment,t),k(X.$$.fragment,t),k(J.$$.fragment,t),k(Y.$$.fragment,t),k(W.$$.fragment,t),k(V.$$.fragment,t),k(Z.$$.fragment,t),k(ee.$$.fragment,t),k(oe.$$.fragment,t),qe=!0)},o(t){S(l.$$.fragment,t),S(K.$$.fragment,t),S(X.$$.fragment,t),S(J.$$.fragment,t),S(Y.$$.fragment,t),S(W.$$.fragment,t),S(V.$$.fragment,t),S(Z.$$.fragment,t),S(ee.$$.fragment,t),S(oe.$$.fragment,t),qe=!1},d(t){o(c),t&&o($),t&&o(d),I(l),t&&o(w),t&&o(E),t&&o(Oe),t&&o(h),I(K),I(X),I(J),I(Y),I(W),I(V),I(Z),I(ee),I(oe),t&&o(Te),t&&o(G)}}}const It={local:"diffusers.ConfigMixin",title:"Configuration"};function At(q){return yt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ut extends vt{constructor(c){super();bt(this,c,At,St,$t,{})}}export{Ut as default,It as metadata};
