import{S as Ja,i as Ka,s as Qa,e as i,k as c,w as x,t,M as Za,c as a,d as o,m as p,a as r,x as $,h as n,b as _,G as e,g as y,y as k,q as D,o as P,B as E,v as er,L as ia}from"../../chunks/vendor-hf-doc-builder.js";import{T as ro}from"../../chunks/Tip-hf-doc-builder.js";import{D as J}from"../../chunks/Docstring-hf-doc-builder.js";import{C as aa}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as or}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as na}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function tr(I){let l,g,f,h,u,d,m,w;return{c(){l=i("p"),g=t("It is required to be logged in ("),f=i("code"),h=t("huggingface-cli login"),u=t(") when you want to use private or "),d=i("a"),m=t(`gated
models`),w=t("."),this.h()},l(X){l=a(X,"P",{});var F=r(l);g=n(F,"It is required to be logged in ("),f=a(F,"CODE",{});var q=r(f);h=n(q,"huggingface-cli login"),q.forEach(o),u=n(F,") when you want to use private or "),d=a(F,"A",{href:!0,rel:!0});var Y=r(d);m=n(Y,`gated
models`),Y.forEach(o),w=n(F,"."),F.forEach(o),this.h()},h(){_(d,"href","https://huggingface.co/docs/hub/models-gated#gated-models"),_(d,"rel","nofollow")},m(X,F){y(X,l,F),e(l,g),e(l,f),e(f,h),e(l,u),e(l,d),e(d,m),e(l,w)},d(X){X&&o(l)}}}function nr(I){let l,g,f,h,u;return{c(){l=i("p"),g=t("Activate the special "),f=i("a"),h=t("\u201Coffline-mode\u201D"),u=t(` to use
this method in a firewalled environment.`),this.h()},l(d){l=a(d,"P",{});var m=r(l);g=n(m,"Activate the special "),f=a(m,"A",{href:!0,rel:!0});var w=r(f);h=n(w,"\u201Coffline-mode\u201D"),w.forEach(o),u=n(m,` to use
this method in a firewalled environment.`),m.forEach(o),this.h()},h(){_(f,"href","https://huggingface.co/diffusers/installation.html#offline-mode"),_(f,"rel","nofollow")},m(d,m){y(d,l,m),e(l,g),e(l,f),e(f,h),e(l,u)},d(d){d&&o(l)}}}function ir(I){let l,g,f,h,u,d,m,w,X,F,q,Y,G;return{c(){l=i("p"),g=t("It is required to be logged in ("),f=i("code"),h=t("huggingface-cli login"),u=t(") when you want to use private or "),d=i("a"),m=t(`gated
models`),w=t(", "),X=i("em"),F=t("e.g."),q=c(),Y=i("code"),G=t('"runwayml/stable-diffusion-v1-5"'),this.h()},l(O){l=a(O,"P",{});var b=r(l);g=n(b,"It is required to be logged in ("),f=a(b,"CODE",{});var K=r(f);h=n(K,"huggingface-cli login"),K.forEach(o),u=n(b,") when you want to use private or "),d=a(b,"A",{href:!0,rel:!0});var M=r(d);m=n(M,`gated
models`),M.forEach(o),w=n(b,", "),X=a(b,"EM",{});var R=r(X);F=n(R,"e.g."),R.forEach(o),q=p(b),Y=a(b,"CODE",{});var oe=r(Y);G=n(oe,'"runwayml/stable-diffusion-v1-5"'),oe.forEach(o),b.forEach(o),this.h()},h(){_(d,"href","https://huggingface.co/docs/hub/models-gated#gated-models"),_(d,"rel","nofollow")},m(O,b){y(O,l,b),e(l,g),e(l,f),e(f,h),e(l,u),e(l,d),e(d,m),e(l,w),e(l,X),e(X,F),e(l,q),e(l,Y),e(Y,G)},d(O){O&&o(l)}}}function ar(I){let l,g,f,h,u;return{c(){l=i("p"),g=t("Activate the special "),f=i("a"),h=t("\u201Coffline-mode\u201D"),u=t(` to use
this method in a firewalled environment.`),this.h()},l(d){l=a(d,"P",{});var m=r(l);g=n(m,"Activate the special "),f=a(m,"A",{href:!0,rel:!0});var w=r(f);h=n(w,"\u201Coffline-mode\u201D"),w.forEach(o),u=n(m,` to use
this method in a firewalled environment.`),m.forEach(o),this.h()},h(){_(f,"href","https://huggingface.co/diffusers/installation.html#offline-mode"),_(f,"rel","nofollow")},m(d,m){y(d,l,m),e(l,g),e(l,f),e(f,h),e(l,u)},d(d){d&&o(l)}}}function rr(I){let l,g,f,h,u;return h=new aa({props:{code:`from diffusers import DiffusionPipeline

# Download pipeline from huggingface.co and cache.
pipeline = DiffusionPipeline.from_pretrained("CompVis/ldm-text2im-large-256")

# Download pipeline that requires an authorization token
# For more information on access tokens, please refer to this section
# of the documentation](https://huggingface.co/docs/hub/security-tokens)
pipeline = DiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5")

# Download pipeline, but overwrite scheduler
from diffusers import LMSDiscreteScheduler

scheduler = LMSDiscreteScheduler(beta_start=0.00085, beta_end=0.012, beta_schedule="scaled_linear")
pipeline = DiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5", scheduler=scheduler)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> DiffusionPipeline

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download pipeline from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pipeline = DiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;CompVis/ldm-text2im-large-256&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download pipeline that requires an authorization token</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># For more information on access tokens, please refer to this section</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># of the documentation](https://huggingface.co/docs/hub/security-tokens)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pipeline = DiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download pipeline, but overwrite scheduler</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> LMSDiscreteScheduler

<span class="hljs-meta">&gt;&gt;&gt; </span>scheduler = LMSDiscreteScheduler(beta_start=<span class="hljs-number">0.00085</span>, beta_end=<span class="hljs-number">0.012</span>, beta_schedule=<span class="hljs-string">&quot;scaled_linear&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pipeline = DiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span>, scheduler=scheduler)`}}),{c(){l=i("p"),g=t("Examples:"),f=c(),x(h.$$.fragment)},l(d){l=a(d,"P",{});var m=r(l);g=n(m,"Examples:"),m.forEach(o),f=p(d),$(h.$$.fragment,d)},m(d,m){y(d,l,m),e(l,g),y(d,f,m),k(h,d,m),u=!0},p:ia,i(d){u||(D(h.$$.fragment,d),u=!0)},o(d){P(h.$$.fragment,d),u=!1},d(d){d&&o(l),d&&o(f),E(h,d)}}}function sr(I){let l,g,f,h,u;return h=new aa({props:{code:`from diffusers import FlaxUNet2DConditionModel

# Download model and configuration from huggingface.co and cache.
model, params = FlaxUNet2DConditionModel.from_pretrained("runwayml/stable-diffusion-v1-5")
# Model was saved using *save_pretrained('./test/saved_model/')* (for example purposes, not runnable).
model, params = FlaxUNet2DConditionModel.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> FlaxUNet2DConditionModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model, params = FlaxUNet2DConditionModel.from_pretrained(<span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model, params = FlaxUNet2DConditionModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){l=i("p"),g=t("Examples:"),f=c(),x(h.$$.fragment)},l(d){l=a(d,"P",{});var m=r(l);g=n(m,"Examples:"),m.forEach(o),f=p(d),$(h.$$.fragment,d)},m(d,m){y(d,l,m),e(l,g),y(d,f,m),k(h,d,m),u=!0},p:ia,i(d){u||(D(h.$$.fragment,d),u=!0)},o(d){P(h.$$.fragment,d),u=!1},d(d){d&&o(l),d&&o(f),E(h,d)}}}function dr(I){let l,g,f,h,u,d,m,w,X,F,q,Y,G;return{c(){l=i("p"),g=t("It is required to be logged in ("),f=i("code"),h=t("huggingface-cli login"),u=t(") when you want to use private or "),d=i("a"),m=t(`gated
models`),w=t(", "),X=i("em"),F=t("e.g."),q=c(),Y=i("code"),G=t('"runwayml/stable-diffusion-v1-5"'),this.h()},l(O){l=a(O,"P",{});var b=r(l);g=n(b,"It is required to be logged in ("),f=a(b,"CODE",{});var K=r(f);h=n(K,"huggingface-cli login"),K.forEach(o),u=n(b,") when you want to use private or "),d=a(b,"A",{href:!0,rel:!0});var M=r(d);m=n(M,`gated
models`),M.forEach(o),w=n(b,", "),X=a(b,"EM",{});var R=r(X);F=n(R,"e.g."),R.forEach(o),q=p(b),Y=a(b,"CODE",{});var oe=r(Y);G=n(oe,'"runwayml/stable-diffusion-v1-5"'),oe.forEach(o),b.forEach(o),this.h()},h(){_(d,"href","https://huggingface.co/docs/hub/models-gated#gated-models"),_(d,"rel","nofollow")},m(O,b){y(O,l,b),e(l,g),e(l,f),e(f,h),e(l,u),e(l,d),e(d,m),e(l,w),e(l,X),e(X,F),e(l,q),e(l,Y),e(Y,G)},d(O){O&&o(l)}}}function lr(I){let l,g,f,h,u;return{c(){l=i("p"),g=t("Activate the special "),f=i("a"),h=t("\u201Coffline-mode\u201D"),u=t(` to use
this method in a firewalled environment.`),this.h()},l(d){l=a(d,"P",{});var m=r(l);g=n(m,"Activate the special "),f=a(m,"A",{href:!0,rel:!0});var w=r(f);h=n(w,"\u201Coffline-mode\u201D"),w.forEach(o),u=n(m,` to use
this method in a firewalled environment.`),m.forEach(o),this.h()},h(){_(f,"href","https://huggingface.co/diffusers/installation.html#offline-mode"),_(f,"rel","nofollow")},m(d,m){y(d,l,m),e(l,g),e(l,f),e(f,h),e(l,u)},d(d){d&&o(l)}}}function fr(I){let l,g,f,h,u;return h=new aa({props:{code:`from diffusers import FlaxDiffusionPipeline

# Download pipeline from huggingface.co and cache.
pipeline = FlaxDiffusionPipeline.from_pretrained("CompVis/ldm-text2im-large-256")

# Download pipeline that requires an authorization token
# For more information on access tokens, please refer to this section
# of the documentation](https://huggingface.co/docs/hub/security-tokens)
pipeline = FlaxDiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5")

# Download pipeline, but overwrite scheduler
from diffusers import LMSDiscreteScheduler

scheduler = LMSDiscreteScheduler(beta_start=0.00085, beta_end=0.012, beta_schedule="scaled_linear")
pipeline = FlaxDiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5", scheduler=scheduler)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> FlaxDiffusionPipeline

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download pipeline from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pipeline = FlaxDiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;CompVis/ldm-text2im-large-256&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download pipeline that requires an authorization token</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># For more information on access tokens, please refer to this section</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># of the documentation](https://huggingface.co/docs/hub/security-tokens)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pipeline = FlaxDiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download pipeline, but overwrite scheduler</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> LMSDiscreteScheduler

<span class="hljs-meta">&gt;&gt;&gt; </span>scheduler = LMSDiscreteScheduler(beta_start=<span class="hljs-number">0.00085</span>, beta_end=<span class="hljs-number">0.012</span>, beta_schedule=<span class="hljs-string">&quot;scaled_linear&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>pipeline = FlaxDiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span>, scheduler=scheduler)`}}),{c(){l=i("p"),g=t("Examples:"),f=c(),x(h.$$.fragment)},l(d){l=a(d,"P",{});var m=r(l);g=n(m,"Examples:"),m.forEach(o),f=p(d),$(h.$$.fragment,d)},m(d,m){y(d,l,m),e(l,g),y(d,f,m),k(h,d,m),u=!0},p:ia,i(d){u||(D(h.$$.fragment,d),u=!0)},o(d){P(h.$$.fragment,d),u=!1},d(d){d&&o(l),d&&o(f),E(h,d)}}}function cr(I){let l,g,f,h,u,d,m,w,X,F,q,Y,G,O,b,K,M,R,oe,so,Dt,Pt,Re,Je,Et,Mt,Xt,lo,Q,fo,Ft,Tt,co,jt,It,Ke,Ct,Lt,qt,A,be,Yt,po,At,Wt,te,Ut,mo,St,zt,ho,Ot,Vt,Nt,we,Bt,uo,Ht,Gt,Rt,ye,Jt,go,Kt,Qt,Zt,ne,en,ie,on,ae,xe,tn,$e,nn,_o,an,rn,et,T,ke,sn,vo,dn,ln,Qe,Ze,fn,cn,pn,De,bo,mn,hn,wo,un,gn,yo,_n,vn,xo,re,$o,bn,wn,ko,yn,xn,$n,C,Pe,kn,Do,Dn,Pn,Ee,En,Po,Mn,Xn,Fn,Me,Tn,Eo,jn,In,Cn,Xe,Ln,Mo,qn,Yn,An,se,Wn,de,Un,le,Sn,fe,Fe,zn,Te,On,Xo,Vn,Nn,ot,V,je,Bn,Fo,Hn,Gn,eo,oo,Rn,Jn,Kn,B,Ie,Qn,To,Zn,ei,Ce,oi,jo,ti,ni,ii,Le,ai,Io,ri,si,di,ce,li,pe,qe,fi,Ye,ci,Co,pi,mi,tt,j,Ae,hi,Lo,ui,gi,to,no,_i,vi,bi,qo,Yo,wi,yi,Ao,xi,$i,Wo,me,Uo,ki,Di,So,Pi,Ei,Mi,L,We,Xi,zo,Fi,Ti,Ue,ji,Oo,Ii,Ci,Li,Se,qi,Vo,Yi,Ai,Wi,ze,Ui,No,Si,zi,Oi,he,Vi,ue,Ni,ge,Bi,_e,Oe,Hi,Ve,Gi,Bo,Ri,Ji,nt,ve,Ki,Ne,Qi,Zi,it;return d=new or({}),R=new J({props:{name:"class diffusers.ModelMixin",anchor:"diffusers.ModelMixin",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_utils.py#L115"}}),be=new J({props:{name:"from_pretrained",anchor:"diffusers.ModelMixin.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike, NoneType]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.ModelMixin.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids should have an organization name, like <code>google/ddpm-celebahq-256</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using <code>~ModelMixin.save_config</code>, e.g.,
<code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"diffusers.ModelMixin.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>Union[str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"diffusers.ModelMixin.from_pretrained.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Override the default <code>torch.dtype</code> and load the model under this dtype. If <code>&quot;auto&quot;</code> is passed the dtype
will be automatically derived from the model&#x2019;s weights.`,name:"torch_dtype"},{anchor:"diffusers.ModelMixin.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"diffusers.ModelMixin.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"diffusers.ModelMixin.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"diffusers.ModelMixin.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"diffusers.ModelMixin.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"diffusers.ModelMixin.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>diffusers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"diffusers.ModelMixin.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"diffusers.ModelMixin.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo (either remote in
huggingface.co or downloaded locally), you can specify the folder name here.`,name:"subfolder"},{anchor:"diffusers.ModelMixin.from_pretrained.mirror",description:`<strong>mirror</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Mirror source to accelerate downloads in China. If you are from China and have an accessibility
problem, you can set this option to resolve it. Note that we do not guarantee the timeliness or safety.
Please refer to the mirror site for more information.`,name:"mirror"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_utils.py#L213"}}),ne=new ro({props:{$$slots:{default:[tr]},$$scope:{ctx:I}}}),ie=new ro({props:{$$slots:{default:[nr]},$$scope:{ctx:I}}}),xe=new J({props:{name:"save_pretrained",anchor:"diffusers.ModelMixin.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"is_main_process",val:": bool = True"},{name:"save_function",val:": typing.Callable = <function save at 0x7f0f4832a4c0>"}],parametersDescription:[{anchor:"diffusers.ModelMixin.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"diffusers.ModelMixin.save_pretrained.is_main_process",description:`<strong>is_main_process</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the process calling this is the main process or not. Useful when in distributed training like
TPUs and need to call this function on all processes. In this case, set <code>is_main_process=True</code> only on
the main process to avoid race conditions.`,name:"is_main_process"},{anchor:"diffusers.ModelMixin.save_pretrained.save_function",description:`<strong>save_function</strong> (<code>Callable</code>) &#x2014;
The function to use to save the state dictionary. Useful on distributed training like TPUs when one
need to replace <code>torch.save</code> by another method.`,name:"save_function"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_utils.py#L163"}}),ke=new J({props:{name:"class diffusers.DiffusionPipeline",anchor:"diffusers.DiffusionPipeline",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipeline_utils.py#L110"}}),Pe=new J({props:{name:"from_pretrained",anchor:"diffusers.DiffusionPipeline.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike, NoneType]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.DiffusionPipeline.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>repo id</em> of a pretrained pipeline hosted inside a model repo on
<a href="https://huggingface.co/" rel="nofollow">https://huggingface.co/</a> Valid repo ids have to be located under a user or organization name, like
<code>CompVis/ldm-text2im-large-256</code>.</li>
<li>A path to a <em>directory</em> containing pipeline weights saved using
<a href="/docs/diffusers/main/en/using-diffusers/loading#diffusers.DiffusionPipeline.save_pretrained">save_pretrained()</a>, e.g., <code>./my_pipeline_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Override the default <code>torch.dtype</code> and load the model under this dtype. If <code>&quot;auto&quot;</code> is passed the dtype
will be automatically derived from the model&#x2019;s weights.`,name:"torch_dtype"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.custom_pipeline",description:`<strong>custom_pipeline</strong> (<code>str</code>, <em>optional</em>) &#x2014;</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>This is an experimental feature and is likely to change in the future.</p>

					</div>
<p>Can be either:</p>
<ul>
<li>
<p>A string, the <em>repo id</em> of a custom pipeline hosted inside a model repo on
<a href="https://huggingface.co/" rel="nofollow">https://huggingface.co/</a>. Valid repo ids have to be located under a user or organization name,
like <code>hf-internal-testing/diffusers-dummy-pipeline</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>It is required that the model repo has a file, called <code>pipeline.py</code> that defines the custom
pipeline.</p>

					</div>
</li>
<li>
<p>A string, the <em>file name</em> of a community pipeline hosted on GitHub under
<a href="https://github.com/huggingface/diffusers/tree/main/examples/community" rel="nofollow">https://github.com/huggingface/diffusers/tree/main/examples/community</a>. Valid file names have to
match exactly the file name without <code>.py</code> located under the above link, <em>e.g.</em>
<code>clip_guided_stable_diffusion</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>Community pipelines are always loaded from the current <code>main</code> branch of GitHub.</p>

					</div>
</li>
<li>
<p>A path to a <em>directory</em> containing a custom pipeline, e.g., <code>./my_pipeline_directory/</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>It is required that the directory has a file, called <code>pipeline.py</code> that defines the custom
pipeline.</p>

					</div>
</li>
</ul>
<p>For more information on how to load and create custom pipelines, please have a look at <a href="https://huggingface.co/docs/diffusers/main/en/using-diffusers/custom_pipelines" rel="nofollow">Loading and
Creating Custom
Pipelines</a>`,name:"custom_pipeline"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.torch_dtype",description:"<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;",name:"torch_dtype"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.mirror",description:`<strong>mirror</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Mirror source to accelerate downloads in China. If you are from China and have an accessibility
problem, you can set this option to resolve it. Note that we do not guarantee the timeliness or safety.
Please refer to the mirror site for more information. specify the folder name here.`,name:"mirror"},{anchor:"diffusers.DiffusionPipeline.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to overwrite load - and saveable variables - <em>i.e.</em> the pipeline components - of the
specific pipeline class. The overwritten components are then directly passed to the pipelines
<code>__init__</code> method. See example below for more information.`,name:"kwargs"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipeline_utils.py#L231"}}),se=new ro({props:{$$slots:{default:[ir]},$$scope:{ctx:I}}}),de=new ro({props:{$$slots:{default:[ar]},$$scope:{ctx:I}}}),le=new na({props:{anchor:"diffusers.DiffusionPipeline.from_pretrained.example",$$slots:{default:[rr]},$$scope:{ctx:I}}}),Fe=new J({props:{name:"save_pretrained",anchor:"diffusers.DiffusionPipeline.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"}],parametersDescription:[{anchor:"diffusers.DiffusionPipeline.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipeline_utils.py#L160"}}),je=new J({props:{name:"class diffusers.FlaxModelMixin",anchor:"diffusers.FlaxModelMixin",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_flax_utils.py#L45"}}),Ie=new J({props:{name:"from_pretrained",anchor:"diffusers.FlaxModelMixin.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"dtype",val:": dtype = <class 'jax.numpy.float32'>"},{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.FlaxModelMixin.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids are namespaced under a user or organization name, like
<code>runwayml/stable-diffusion-v1-5</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using <a href="/docs/diffusers/main/en/using-diffusers/loading#diffusers.ModelMixin.save_pretrained">save_pretrained()</a>,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.dtype",description:`<strong>dtype</strong> (<code>jax.numpy.dtype</code>, <em>optional</em>, defaults to <code>jax.numpy.float32</code>) &#x2014;
The data type of the computation. Can be one of <code>jax.numpy.float32</code>, <code>jax.numpy.float16</code> (on GPUs) and
<code>jax.numpy.bfloat16</code> (on TPUs).</p>
<p>This can be used to enable mixed-precision training or half-precision inference on GPUs or TPUs. If
specified all the computation will be performed with the given <code>dtype</code>.</p>
<p><strong>Note that this only specifies the dtype of the computation and does not influence the dtype of model
parameters.</strong></p>
<p>If you wish to change the dtype of the model parameters, see <code>~ModelMixin.to_fp16</code> and
<code>~ModelMixin.to_bf16</code>.`,name:"dtype"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>Union[str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file.`,name:"from_pt"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/diffusers/main/en/using-diffusers/configuration#diffusers.ConfigMixin.from_config">from_config()</a>). Each key of <code>kwargs</code> that corresponds to
a configuration attribute will be used to override said attribute with the supplied <code>kwargs</code>
value. Remaining keys that do not correspond to any configuration attribute will be passed to the
underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_flax_utils.py#L195"}}),ce=new na({props:{anchor:"diffusers.FlaxModelMixin.from_pretrained.example",$$slots:{default:[sr]},$$scope:{ctx:I}}}),qe=new J({props:{name:"save_pretrained",anchor:"diffusers.FlaxModelMixin.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"is_main_process",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.FlaxModelMixin.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"diffusers.FlaxModelMixin.save_pretrained.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"diffusers.FlaxModelMixin.save_pretrained.is_main_process",description:`<strong>is_main_process</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the process calling this is the main process or not. Useful when in distributed training like
TPUs and need to call this function on all processes. In this case, set <code>is_main_process=True</code> only on
the main process to avoid race conditions.`,name:"is_main_process"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_flax_utils.py#L487"}}),Ae=new J({props:{name:"class diffusers.FlaxDiffusionPipeline",anchor:"diffusers.FlaxDiffusionPipeline",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipeline_flax_utils.py#L92"}}),We=new J({props:{name:"from_pretrained",anchor:"diffusers.FlaxDiffusionPipeline.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike, NoneType]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.FlaxDiffusionPipeline.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>repo id</em> of a pretrained pipeline hosted inside a model repo on
<a href="https://huggingface.co/" rel="nofollow">https://huggingface.co/</a> Valid repo ids have to be located under a user or organization name, like
<code>CompVis/ldm-text2im-large-256</code>.</li>
<li>A path to a <em>directory</em> containing pipeline weights saved using
<a href="/docs/diffusers/main/en/using-diffusers/loading#diffusers.FlaxDiffusionPipeline.save_pretrained">save_pretrained()</a>, e.g., <code>./my_pipeline_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"diffusers.FlaxDiffusionPipeline.from_pretrained.dtype",description:`<strong>dtype</strong> (<code>str</code> or <code>jnp.dtype</code>, <em>optional</em>) &#x2014;
Override the default <code>jnp.dtype</code> and load the model under this dtype. If <code>&quot;auto&quot;</code> is passed the dtype
will be automatically derived from the model&#x2019;s weights.`,name:"dtype"},{anchor:"diffusers.FlaxDiffusionPipeline.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"diffusers.FlaxDiffusionPipeline.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"diffusers.FlaxDiffusionPipeline.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"diffusers.FlaxDiffusionPipeline.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"diffusers.FlaxDiffusionPipeline.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"diffusers.FlaxDiffusionPipeline.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"diffusers.FlaxDiffusionPipeline.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"diffusers.FlaxDiffusionPipeline.from_pretrained.mirror",description:`<strong>mirror</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Mirror source to accelerate downloads in China. If you are from China and have an accessibility
problem, you can set this option to resolve it. Note that we do not guarantee the timeliness or safety.
Please refer to the mirror site for more information. specify the folder name here.`,name:"mirror"},{anchor:"diffusers.FlaxDiffusionPipeline.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to overwrite load - and saveable variables - <em>i.e.</em> the pipeline components - of the
specific pipeline class. The overwritten components are then directly passed to the pipelines
<code>__init__</code> method. See example below for more information.`,name:"kwargs"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipeline_flax_utils.py#L188"}}),he=new ro({props:{$$slots:{default:[dr]},$$scope:{ctx:I}}}),ue=new ro({props:{$$slots:{default:[lr]},$$scope:{ctx:I}}}),ge=new na({props:{anchor:"diffusers.FlaxDiffusionPipeline.from_pretrained.example",$$slots:{default:[fr]},$$scope:{ctx:I}}}),Oe=new J({props:{name:"save_pretrained",anchor:"diffusers.FlaxDiffusionPipeline.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"}],parametersDescription:[{anchor:"diffusers.FlaxDiffusionPipeline.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipeline_flax_utils.py#L142"}}),{c(){l=i("meta"),g=c(),f=i("h1"),h=i("a"),u=i("span"),x(d.$$.fragment),m=c(),w=i("span"),X=t("Loading"),F=c(),q=i("p"),Y=t("The core functionality for saving and loading systems in "),G=i("code"),O=t("Diffusers"),b=t(" is the HuggingFace Hub."),K=c(),M=i("div"),x(R.$$.fragment),oe=c(),so=i("p"),Dt=t("Base class for all models."),Pt=c(),Re=i("p"),Je=i("a"),Et=t("ModelMixin"),Mt=t(` takes care of storing the configuration of the models and handles methods for loading, downloading
and saving models.`),Xt=c(),lo=i("ul"),Q=i("li"),fo=i("strong"),Ft=t("config_name"),Tt=t(" ("),co=i("code"),jt=t("str"),It=t(`) \u2014 A filename under which the model should be stored when calling
`),Ke=i("a"),Ct=t("save_pretrained()"),Lt=t("."),qt=c(),A=i("div"),x(be.$$.fragment),Yt=c(),po=i("p"),At=t("Instantiate a pretrained pytorch model from a pre-trained model configuration."),Wt=c(),te=i("p"),Ut=t("The model is set in evaluation mode by default using "),mo=i("code"),St=t("model.eval()"),zt=t(` (Dropout modules are deactivated). To train
the model, you should first set it back in training mode with `),ho=i("code"),Ot=t("model.train()"),Vt=t("."),Nt=c(),we=i("p"),Bt=t("The warning "),uo=i("em"),Ht=t("Weights from XXX not initialized from pretrained model"),Gt=t(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Rt=c(),ye=i("p"),Jt=t("The warning "),go=i("em"),Kt=t("Weights from XXX not used in YYY"),Qt=t(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),Zt=c(),x(ne.$$.fragment),en=c(),x(ie.$$.fragment),on=c(),ae=i("div"),x(xe.$$.fragment),tn=c(),$e=i("p"),nn=t(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),_o=i("code"),an=t("[from_pretrained()](/docs/diffusers/main/en/using-diffusers/loading#diffusers.ModelMixin.from_pretrained)"),rn=t(" class method."),et=c(),T=i("div"),x(ke.$$.fragment),sn=c(),vo=i("p"),dn=t("Base class for all models."),ln=c(),Qe=i("p"),Ze=i("a"),fn=t("DiffusionPipeline"),cn=t(` takes care of storing all components (models, schedulers, processors) for diffusion pipelines
and handles methods for loading, downloading and saving models as well as a few methods common to all pipelines to:`),pn=c(),De=i("ul"),bo=i("li"),mn=t("move all PyTorch modules to the device of your choice"),hn=c(),wo=i("li"),un=t("enabling/disabling the progress bar for the denoising iteration"),gn=c(),yo=i("p"),_n=t("Class attributes:"),vn=c(),xo=i("ul"),re=i("li"),$o=i("strong"),bn=t("config_name"),wn=t(" ("),ko=i("code"),yn=t("str"),xn=t(`) \u2014 name of the config file that will store the class and module names of all
components of the diffusion pipeline.`),$n=c(),C=i("div"),x(Pe.$$.fragment),kn=c(),Do=i("p"),Dn=t("Instantiate a PyTorch diffusion pipeline from pre-trained pipeline weights."),Pn=c(),Ee=i("p"),En=t("The pipeline is set in evaluation mode by default using "),Po=i("code"),Mn=t("model.eval()"),Xn=t(" (Dropout modules are deactivated)."),Fn=c(),Me=i("p"),Tn=t("The warning "),Eo=i("em"),jn=t("Weights from XXX not initialized from pretrained model"),In=t(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Cn=c(),Xe=i("p"),Ln=t("The warning "),Mo=i("em"),qn=t("Weights from XXX not used in YYY"),Yn=t(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),An=c(),x(se.$$.fragment),Wn=c(),x(de.$$.fragment),Un=c(),x(le.$$.fragment),Sn=c(),fe=i("div"),x(Fe.$$.fragment),zn=c(),Te=i("p"),On=t(`Save all variables of the pipeline that can be saved and loaded as well as the pipelines configuration file to
a directory. A pipeline variable can be saved and loaded if its class implements both a save and loading
method. The pipeline can easily be re-loaded using the `),Xo=i("code"),Vn=t("[from_pretrained()](/docs/diffusers/main/en/using-diffusers/loading#diffusers.DiffusionPipeline.from_pretrained)"),Nn=t(" class method."),ot=c(),V=i("div"),x(je.$$.fragment),Bn=c(),Fo=i("p"),Hn=t("Base class for all flax models."),Gn=c(),eo=i("p"),oo=i("a"),Rn=t("FlaxModelMixin"),Jn=t(` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models.`),Kn=c(),B=i("div"),x(Ie.$$.fragment),Qn=c(),To=i("p"),Zn=t("Instantiate a pretrained flax model from a pre-trained model configuration."),ei=c(),Ce=i("p"),oi=t("The warning "),jo=i("em"),ti=t("Weights from XXX not initialized from pretrained model"),ni=t(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),ii=c(),Le=i("p"),ai=t("The warning "),Io=i("em"),ri=t("Weights from XXX not used in YYY"),si=t(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),di=c(),x(ce.$$.fragment),li=c(),pe=i("div"),x(qe.$$.fragment),fi=c(),Ye=i("p"),ci=t(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Co=i("code"),pi=t("[from_pretrained()](/docs/diffusers/main/en/using-diffusers/loading#diffusers.FlaxModelMixin.from_pretrained)"),mi=t(" class method"),tt=c(),j=i("div"),x(Ae.$$.fragment),hi=c(),Lo=i("p"),ui=t("Base class for all models."),gi=c(),to=i("p"),no=i("a"),_i=t("FlaxDiffusionPipeline"),vi=t(` takes care of storing all components (models, schedulers, processors) for diffusion
pipelines and handles methods for loading, downloading and saving models as well as a few methods common to all
pipelines to:`),bi=c(),qo=i("ul"),Yo=i("li"),wi=t("enabling/disabling the progress bar for the denoising iteration"),yi=c(),Ao=i("p"),xi=t("Class attributes:"),$i=c(),Wo=i("ul"),me=i("li"),Uo=i("strong"),ki=t("config_name"),Di=t(" ("),So=i("code"),Pi=t("str"),Ei=t(`) \u2014 name of the config file that will store the class and module names of all
components of the diffusion pipeline.`),Mi=c(),L=i("div"),x(We.$$.fragment),Xi=c(),zo=i("p"),Fi=t("Instantiate a Flax diffusion pipeline from pre-trained pipeline weights."),Ti=c(),Ue=i("p"),ji=t("The pipeline is set in evaluation mode by default using "),Oo=i("code"),Ii=t("model.eval()"),Ci=t(" (Dropout modules are deactivated)."),Li=c(),Se=i("p"),qi=t("The warning "),Vo=i("em"),Yi=t("Weights from XXX not initialized from pretrained model"),Ai=t(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Wi=c(),ze=i("p"),Ui=t("The warning "),No=i("em"),Si=t("Weights from XXX not used in YYY"),zi=t(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),Oi=c(),x(he.$$.fragment),Vi=c(),x(ue.$$.fragment),Ni=c(),x(ge.$$.fragment),Bi=c(),_e=i("div"),x(Oe.$$.fragment),Hi=c(),Ve=i("p"),Gi=t(`Save all variables of the pipeline that can be saved and loaded as well as the pipelines configuration file to
a directory. A pipeline variable can be saved and loaded if its class implements both a save and loading
method. The pipeline can easily be re-loaded using the `),Bo=i("code"),Ri=t("[from_pretrained()](/docs/diffusers/main/en/using-diffusers/loading#diffusers.FlaxDiffusionPipeline.from_pretrained)"),Ji=t(` class
method.`),nt=c(),ve=i("p"),Ki=t("Under further construction \u{1F6A7}, open a "),Ne=i("a"),Qi=t("PR"),Zi=t(" if you want to contribute!"),this.h()},l(s){const v=Za('[data-svelte="svelte-1phssyn"]',document.head);l=a(v,"META",{name:!0,content:!0}),v.forEach(o),g=p(s),f=a(s,"H1",{class:!0});var Be=r(f);h=a(Be,"A",{id:!0,class:!0,href:!0});var Ho=r(h);u=a(Ho,"SPAN",{});var Go=r(u);$(d.$$.fragment,Go),Go.forEach(o),Ho.forEach(o),m=p(Be),w=a(Be,"SPAN",{});var Ro=r(w);X=n(Ro,"Loading"),Ro.forEach(o),Be.forEach(o),F=p(s),q=a(s,"P",{});var He=r(q);Y=n(He,"The core functionality for saving and loading systems in "),G=a(He,"CODE",{});var Jo=r(G);O=n(Jo,"Diffusers"),Jo.forEach(o),b=n(He," is the HuggingFace Hub."),He.forEach(o),K=p(s),M=a(s,"DIV",{class:!0});var N=r(M);$(R.$$.fragment,N),oe=p(N),so=a(N,"P",{});var Ko=r(so);Dt=n(Ko,"Base class for all models."),Ko.forEach(o),Pt=p(N),Re=a(N,"P",{});var io=r(Re);Je=a(io,"A",{href:!0});var ra=r(Je);Et=n(ra,"ModelMixin"),ra.forEach(o),Mt=n(io,` takes care of storing the configuration of the models and handles methods for loading, downloading
and saving models.`),io.forEach(o),Xt=p(N),lo=a(N,"UL",{});var sa=r(lo);Q=a(sa,"LI",{});var Ge=r(Q);fo=a(Ge,"STRONG",{});var da=r(fo);Ft=n(da,"config_name"),da.forEach(o),Tt=n(Ge," ("),co=a(Ge,"CODE",{});var la=r(co);jt=n(la,"str"),la.forEach(o),It=n(Ge,`) \u2014 A filename under which the model should be stored when calling
`),Ke=a(Ge,"A",{href:!0});var fa=r(Ke);Ct=n(fa,"save_pretrained()"),fa.forEach(o),Lt=n(Ge,"."),Ge.forEach(o),sa.forEach(o),qt=p(N),A=a(N,"DIV",{class:!0});var H=r(A);$(be.$$.fragment,H),Yt=p(H),po=a(H,"P",{});var ca=r(po);At=n(ca,"Instantiate a pretrained pytorch model from a pre-trained model configuration."),ca.forEach(o),Wt=p(H),te=a(H,"P",{});var ao=r(te);Ut=n(ao,"The model is set in evaluation mode by default using "),mo=a(ao,"CODE",{});var pa=r(mo);St=n(pa,"model.eval()"),pa.forEach(o),zt=n(ao,` (Dropout modules are deactivated). To train
the model, you should first set it back in training mode with `),ho=a(ao,"CODE",{});var ma=r(ho);Ot=n(ma,"model.train()"),ma.forEach(o),Vt=n(ao,"."),ao.forEach(o),Nt=p(H),we=a(H,"P",{});var at=r(we);Bt=n(at,"The warning "),uo=a(at,"EM",{});var ha=r(uo);Ht=n(ha,"Weights from XXX not initialized from pretrained model"),ha.forEach(o),Gt=n(at,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),at.forEach(o),Rt=p(H),ye=a(H,"P",{});var rt=r(ye);Jt=n(rt,"The warning "),go=a(rt,"EM",{});var ua=r(go);Kt=n(ua,"Weights from XXX not used in YYY"),ua.forEach(o),Qt=n(rt,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),rt.forEach(o),Zt=p(H),$(ne.$$.fragment,H),en=p(H),$(ie.$$.fragment,H),H.forEach(o),on=p(N),ae=a(N,"DIV",{class:!0});var st=r(ae);$(xe.$$.fragment,st),tn=p(st),$e=a(st,"P",{});var dt=r($e);nn=n(dt,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),_o=a(dt,"CODE",{});var ga=r(_o);an=n(ga,"[from_pretrained()](/docs/diffusers/main/en/using-diffusers/loading#diffusers.ModelMixin.from_pretrained)"),ga.forEach(o),rn=n(dt," class method."),dt.forEach(o),st.forEach(o),N.forEach(o),et=p(s),T=a(s,"DIV",{class:!0});var W=r(T);$(ke.$$.fragment,W),sn=p(W),vo=a(W,"P",{});var _a=r(vo);dn=n(_a,"Base class for all models."),_a.forEach(o),ln=p(W),Qe=a(W,"P",{});var ea=r(Qe);Ze=a(ea,"A",{href:!0});var va=r(Ze);fn=n(va,"DiffusionPipeline"),va.forEach(o),cn=n(ea,` takes care of storing all components (models, schedulers, processors) for diffusion pipelines
and handles methods for loading, downloading and saving models as well as a few methods common to all pipelines to:`),ea.forEach(o),pn=p(W),De=a(W,"UL",{});var lt=r(De);bo=a(lt,"LI",{});var ba=r(bo);mn=n(ba,"move all PyTorch modules to the device of your choice"),ba.forEach(o),hn=p(lt),wo=a(lt,"LI",{});var wa=r(wo);un=n(wa,"enabling/disabling the progress bar for the denoising iteration"),wa.forEach(o),lt.forEach(o),gn=p(W),yo=a(W,"P",{});var ya=r(yo);_n=n(ya,"Class attributes:"),ya.forEach(o),vn=p(W),xo=a(W,"UL",{});var xa=r(xo);re=a(xa,"LI",{});var Qo=r(re);$o=a(Qo,"STRONG",{});var $a=r($o);bn=n($a,"config_name"),$a.forEach(o),wn=n(Qo," ("),ko=a(Qo,"CODE",{});var ka=r(ko);yn=n(ka,"str"),ka.forEach(o),xn=n(Qo,`) \u2014 name of the config file that will store the class and module names of all
components of the diffusion pipeline.`),Qo.forEach(o),xa.forEach(o),$n=p(W),C=a(W,"DIV",{class:!0});var U=r(C);$(Pe.$$.fragment,U),kn=p(U),Do=a(U,"P",{});var Da=r(Do);Dn=n(Da,"Instantiate a PyTorch diffusion pipeline from pre-trained pipeline weights."),Da.forEach(o),Pn=p(U),Ee=a(U,"P",{});var ft=r(Ee);En=n(ft,"The pipeline is set in evaluation mode by default using "),Po=a(ft,"CODE",{});var Pa=r(Po);Mn=n(Pa,"model.eval()"),Pa.forEach(o),Xn=n(ft," (Dropout modules are deactivated)."),ft.forEach(o),Fn=p(U),Me=a(U,"P",{});var ct=r(Me);Tn=n(ct,"The warning "),Eo=a(ct,"EM",{});var Ea=r(Eo);jn=n(Ea,"Weights from XXX not initialized from pretrained model"),Ea.forEach(o),In=n(ct,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),ct.forEach(o),Cn=p(U),Xe=a(U,"P",{});var pt=r(Xe);Ln=n(pt,"The warning "),Mo=a(pt,"EM",{});var Ma=r(Mo);qn=n(Ma,"Weights from XXX not used in YYY"),Ma.forEach(o),Yn=n(pt,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),pt.forEach(o),An=p(U),$(se.$$.fragment,U),Wn=p(U),$(de.$$.fragment,U),Un=p(U),$(le.$$.fragment,U),U.forEach(o),Sn=p(W),fe=a(W,"DIV",{class:!0});var mt=r(fe);$(Fe.$$.fragment,mt),zn=p(mt),Te=a(mt,"P",{});var ht=r(Te);On=n(ht,`Save all variables of the pipeline that can be saved and loaded as well as the pipelines configuration file to
a directory. A pipeline variable can be saved and loaded if its class implements both a save and loading
method. The pipeline can easily be re-loaded using the `),Xo=a(ht,"CODE",{});var Xa=r(Xo);Vn=n(Xa,"[from_pretrained()](/docs/diffusers/main/en/using-diffusers/loading#diffusers.DiffusionPipeline.from_pretrained)"),Xa.forEach(o),Nn=n(ht," class method."),ht.forEach(o),mt.forEach(o),W.forEach(o),ot=p(s),V=a(s,"DIV",{class:!0});var Z=r(V);$(je.$$.fragment,Z),Bn=p(Z),Fo=a(Z,"P",{});var Fa=r(Fo);Hn=n(Fa,"Base class for all flax models."),Fa.forEach(o),Gn=p(Z),eo=a(Z,"P",{});var oa=r(eo);oo=a(oa,"A",{href:!0});var Ta=r(oo);Rn=n(Ta,"FlaxModelMixin"),Ta.forEach(o),Jn=n(oa,` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models.`),oa.forEach(o),Kn=p(Z),B=a(Z,"DIV",{class:!0});var ee=r(B);$(Ie.$$.fragment,ee),Qn=p(ee),To=a(ee,"P",{});var ja=r(To);Zn=n(ja,"Instantiate a pretrained flax model from a pre-trained model configuration."),ja.forEach(o),ei=p(ee),Ce=a(ee,"P",{});var ut=r(Ce);oi=n(ut,"The warning "),jo=a(ut,"EM",{});var Ia=r(jo);ti=n(Ia,"Weights from XXX not initialized from pretrained model"),Ia.forEach(o),ni=n(ut,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),ut.forEach(o),ii=p(ee),Le=a(ee,"P",{});var gt=r(Le);ai=n(gt,"The warning "),Io=a(gt,"EM",{});var Ca=r(Io);ri=n(Ca,"Weights from XXX not used in YYY"),Ca.forEach(o),si=n(gt,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),gt.forEach(o),di=p(ee),$(ce.$$.fragment,ee),ee.forEach(o),li=p(Z),pe=a(Z,"DIV",{class:!0});var _t=r(pe);$(qe.$$.fragment,_t),fi=p(_t),Ye=a(_t,"P",{});var vt=r(Ye);ci=n(vt,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Co=a(vt,"CODE",{});var La=r(Co);pi=n(La,"[from_pretrained()](/docs/diffusers/main/en/using-diffusers/loading#diffusers.FlaxModelMixin.from_pretrained)"),La.forEach(o),mi=n(vt," class method"),vt.forEach(o),_t.forEach(o),Z.forEach(o),tt=p(s),j=a(s,"DIV",{class:!0});var S=r(j);$(Ae.$$.fragment,S),hi=p(S),Lo=a(S,"P",{});var qa=r(Lo);ui=n(qa,"Base class for all models."),qa.forEach(o),gi=p(S),to=a(S,"P",{});var ta=r(to);no=a(ta,"A",{href:!0});var Ya=r(no);_i=n(Ya,"FlaxDiffusionPipeline"),Ya.forEach(o),vi=n(ta,` takes care of storing all components (models, schedulers, processors) for diffusion
pipelines and handles methods for loading, downloading and saving models as well as a few methods common to all
pipelines to:`),ta.forEach(o),bi=p(S),qo=a(S,"UL",{});var Aa=r(qo);Yo=a(Aa,"LI",{});var Wa=r(Yo);wi=n(Wa,"enabling/disabling the progress bar for the denoising iteration"),Wa.forEach(o),Aa.forEach(o),yi=p(S),Ao=a(S,"P",{});var Ua=r(Ao);xi=n(Ua,"Class attributes:"),Ua.forEach(o),$i=p(S),Wo=a(S,"UL",{});var Sa=r(Wo);me=a(Sa,"LI",{});var Zo=r(me);Uo=a(Zo,"STRONG",{});var za=r(Uo);ki=n(za,"config_name"),za.forEach(o),Di=n(Zo," ("),So=a(Zo,"CODE",{});var Oa=r(So);Pi=n(Oa,"str"),Oa.forEach(o),Ei=n(Zo,`) \u2014 name of the config file that will store the class and module names of all
components of the diffusion pipeline.`),Zo.forEach(o),Sa.forEach(o),Mi=p(S),L=a(S,"DIV",{class:!0});var z=r(L);$(We.$$.fragment,z),Xi=p(z),zo=a(z,"P",{});var Va=r(zo);Fi=n(Va,"Instantiate a Flax diffusion pipeline from pre-trained pipeline weights."),Va.forEach(o),Ti=p(z),Ue=a(z,"P",{});var bt=r(Ue);ji=n(bt,"The pipeline is set in evaluation mode by default using "),Oo=a(bt,"CODE",{});var Na=r(Oo);Ii=n(Na,"model.eval()"),Na.forEach(o),Ci=n(bt," (Dropout modules are deactivated)."),bt.forEach(o),Li=p(z),Se=a(z,"P",{});var wt=r(Se);qi=n(wt,"The warning "),Vo=a(wt,"EM",{});var Ba=r(Vo);Yi=n(Ba,"Weights from XXX not initialized from pretrained model"),Ba.forEach(o),Ai=n(wt,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),wt.forEach(o),Wi=p(z),ze=a(z,"P",{});var yt=r(ze);Ui=n(yt,"The warning "),No=a(yt,"EM",{});var Ha=r(No);Si=n(Ha,"Weights from XXX not used in YYY"),Ha.forEach(o),zi=n(yt,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),yt.forEach(o),Oi=p(z),$(he.$$.fragment,z),Vi=p(z),$(ue.$$.fragment,z),Ni=p(z),$(ge.$$.fragment,z),z.forEach(o),Bi=p(S),_e=a(S,"DIV",{class:!0});var xt=r(_e);$(Oe.$$.fragment,xt),Hi=p(xt),Ve=a(xt,"P",{});var $t=r(Ve);Gi=n($t,`Save all variables of the pipeline that can be saved and loaded as well as the pipelines configuration file to
a directory. A pipeline variable can be saved and loaded if its class implements both a save and loading
method. The pipeline can easily be re-loaded using the `),Bo=a($t,"CODE",{});var Ga=r(Bo);Ri=n(Ga,"[from_pretrained()](/docs/diffusers/main/en/using-diffusers/loading#diffusers.FlaxDiffusionPipeline.from_pretrained)"),Ga.forEach(o),Ji=n($t,` class
method.`),$t.forEach(o),xt.forEach(o),S.forEach(o),nt=p(s),ve=a(s,"P",{});var kt=r(ve);Ki=n(kt,"Under further construction \u{1F6A7}, open a "),Ne=a(kt,"A",{href:!0,rel:!0});var Ra=r(Ne);Qi=n(Ra,"PR"),Ra.forEach(o),Zi=n(kt," if you want to contribute!"),kt.forEach(o),this.h()},h(){_(l,"name","hf:doc:metadata"),_(l,"content",JSON.stringify(pr)),_(h,"id","diffusers.ModelMixin"),_(h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(h,"href","#diffusers.ModelMixin"),_(f,"class","relative group"),_(Je,"href","/docs/diffusers/main/en/using-diffusers/loading#diffusers.ModelMixin"),_(Ke,"href","/docs/diffusers/main/en/using-diffusers/loading#diffusers.ModelMixin.save_pretrained"),_(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(Ze,"href","/docs/diffusers/main/en/using-diffusers/loading#diffusers.DiffusionPipeline"),_(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(oo,"href","/docs/diffusers/main/en/using-diffusers/loading#diffusers.FlaxModelMixin"),_(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(no,"href","/docs/diffusers/main/en/using-diffusers/loading#diffusers.FlaxDiffusionPipeline"),_(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),_(Ne,"href","https://github.com/huggingface/diffusers/compare"),_(Ne,"rel","nofollow")},m(s,v){e(document.head,l),y(s,g,v),y(s,f,v),e(f,h),e(h,u),k(d,u,null),e(f,m),e(f,w),e(w,X),y(s,F,v),y(s,q,v),e(q,Y),e(q,G),e(G,O),e(q,b),y(s,K,v),y(s,M,v),k(R,M,null),e(M,oe),e(M,so),e(so,Dt),e(M,Pt),e(M,Re),e(Re,Je),e(Je,Et),e(Re,Mt),e(M,Xt),e(M,lo),e(lo,Q),e(Q,fo),e(fo,Ft),e(Q,Tt),e(Q,co),e(co,jt),e(Q,It),e(Q,Ke),e(Ke,Ct),e(Q,Lt),e(M,qt),e(M,A),k(be,A,null),e(A,Yt),e(A,po),e(po,At),e(A,Wt),e(A,te),e(te,Ut),e(te,mo),e(mo,St),e(te,zt),e(te,ho),e(ho,Ot),e(te,Vt),e(A,Nt),e(A,we),e(we,Bt),e(we,uo),e(uo,Ht),e(we,Gt),e(A,Rt),e(A,ye),e(ye,Jt),e(ye,go),e(go,Kt),e(ye,Qt),e(A,Zt),k(ne,A,null),e(A,en),k(ie,A,null),e(M,on),e(M,ae),k(xe,ae,null),e(ae,tn),e(ae,$e),e($e,nn),e($e,_o),e(_o,an),e($e,rn),y(s,et,v),y(s,T,v),k(ke,T,null),e(T,sn),e(T,vo),e(vo,dn),e(T,ln),e(T,Qe),e(Qe,Ze),e(Ze,fn),e(Qe,cn),e(T,pn),e(T,De),e(De,bo),e(bo,mn),e(De,hn),e(De,wo),e(wo,un),e(T,gn),e(T,yo),e(yo,_n),e(T,vn),e(T,xo),e(xo,re),e(re,$o),e($o,bn),e(re,wn),e(re,ko),e(ko,yn),e(re,xn),e(T,$n),e(T,C),k(Pe,C,null),e(C,kn),e(C,Do),e(Do,Dn),e(C,Pn),e(C,Ee),e(Ee,En),e(Ee,Po),e(Po,Mn),e(Ee,Xn),e(C,Fn),e(C,Me),e(Me,Tn),e(Me,Eo),e(Eo,jn),e(Me,In),e(C,Cn),e(C,Xe),e(Xe,Ln),e(Xe,Mo),e(Mo,qn),e(Xe,Yn),e(C,An),k(se,C,null),e(C,Wn),k(de,C,null),e(C,Un),k(le,C,null),e(T,Sn),e(T,fe),k(Fe,fe,null),e(fe,zn),e(fe,Te),e(Te,On),e(Te,Xo),e(Xo,Vn),e(Te,Nn),y(s,ot,v),y(s,V,v),k(je,V,null),e(V,Bn),e(V,Fo),e(Fo,Hn),e(V,Gn),e(V,eo),e(eo,oo),e(oo,Rn),e(eo,Jn),e(V,Kn),e(V,B),k(Ie,B,null),e(B,Qn),e(B,To),e(To,Zn),e(B,ei),e(B,Ce),e(Ce,oi),e(Ce,jo),e(jo,ti),e(Ce,ni),e(B,ii),e(B,Le),e(Le,ai),e(Le,Io),e(Io,ri),e(Le,si),e(B,di),k(ce,B,null),e(V,li),e(V,pe),k(qe,pe,null),e(pe,fi),e(pe,Ye),e(Ye,ci),e(Ye,Co),e(Co,pi),e(Ye,mi),y(s,tt,v),y(s,j,v),k(Ae,j,null),e(j,hi),e(j,Lo),e(Lo,ui),e(j,gi),e(j,to),e(to,no),e(no,_i),e(to,vi),e(j,bi),e(j,qo),e(qo,Yo),e(Yo,wi),e(j,yi),e(j,Ao),e(Ao,xi),e(j,$i),e(j,Wo),e(Wo,me),e(me,Uo),e(Uo,ki),e(me,Di),e(me,So),e(So,Pi),e(me,Ei),e(j,Mi),e(j,L),k(We,L,null),e(L,Xi),e(L,zo),e(zo,Fi),e(L,Ti),e(L,Ue),e(Ue,ji),e(Ue,Oo),e(Oo,Ii),e(Ue,Ci),e(L,Li),e(L,Se),e(Se,qi),e(Se,Vo),e(Vo,Yi),e(Se,Ai),e(L,Wi),e(L,ze),e(ze,Ui),e(ze,No),e(No,Si),e(ze,zi),e(L,Oi),k(he,L,null),e(L,Vi),k(ue,L,null),e(L,Ni),k(ge,L,null),e(j,Bi),e(j,_e),k(Oe,_e,null),e(_e,Hi),e(_e,Ve),e(Ve,Gi),e(Ve,Bo),e(Bo,Ri),e(Ve,Ji),y(s,nt,v),y(s,ve,v),e(ve,Ki),e(ve,Ne),e(Ne,Qi),e(ve,Zi),it=!0},p(s,[v]){const Be={};v&2&&(Be.$$scope={dirty:v,ctx:s}),ne.$set(Be);const Ho={};v&2&&(Ho.$$scope={dirty:v,ctx:s}),ie.$set(Ho);const Go={};v&2&&(Go.$$scope={dirty:v,ctx:s}),se.$set(Go);const Ro={};v&2&&(Ro.$$scope={dirty:v,ctx:s}),de.$set(Ro);const He={};v&2&&(He.$$scope={dirty:v,ctx:s}),le.$set(He);const Jo={};v&2&&(Jo.$$scope={dirty:v,ctx:s}),ce.$set(Jo);const N={};v&2&&(N.$$scope={dirty:v,ctx:s}),he.$set(N);const Ko={};v&2&&(Ko.$$scope={dirty:v,ctx:s}),ue.$set(Ko);const io={};v&2&&(io.$$scope={dirty:v,ctx:s}),ge.$set(io)},i(s){it||(D(d.$$.fragment,s),D(R.$$.fragment,s),D(be.$$.fragment,s),D(ne.$$.fragment,s),D(ie.$$.fragment,s),D(xe.$$.fragment,s),D(ke.$$.fragment,s),D(Pe.$$.fragment,s),D(se.$$.fragment,s),D(de.$$.fragment,s),D(le.$$.fragment,s),D(Fe.$$.fragment,s),D(je.$$.fragment,s),D(Ie.$$.fragment,s),D(ce.$$.fragment,s),D(qe.$$.fragment,s),D(Ae.$$.fragment,s),D(We.$$.fragment,s),D(he.$$.fragment,s),D(ue.$$.fragment,s),D(ge.$$.fragment,s),D(Oe.$$.fragment,s),it=!0)},o(s){P(d.$$.fragment,s),P(R.$$.fragment,s),P(be.$$.fragment,s),P(ne.$$.fragment,s),P(ie.$$.fragment,s),P(xe.$$.fragment,s),P(ke.$$.fragment,s),P(Pe.$$.fragment,s),P(se.$$.fragment,s),P(de.$$.fragment,s),P(le.$$.fragment,s),P(Fe.$$.fragment,s),P(je.$$.fragment,s),P(Ie.$$.fragment,s),P(ce.$$.fragment,s),P(qe.$$.fragment,s),P(Ae.$$.fragment,s),P(We.$$.fragment,s),P(he.$$.fragment,s),P(ue.$$.fragment,s),P(ge.$$.fragment,s),P(Oe.$$.fragment,s),it=!1},d(s){o(l),s&&o(g),s&&o(f),E(d),s&&o(F),s&&o(q),s&&o(K),s&&o(M),E(R),E(be),E(ne),E(ie),E(xe),s&&o(et),s&&o(T),E(ke),E(Pe),E(se),E(de),E(le),E(Fe),s&&o(ot),s&&o(V),E(je),E(Ie),E(ce),E(qe),s&&o(tt),s&&o(j),E(Ae),E(We),E(he),E(ue),E(ge),E(Oe),s&&o(nt),s&&o(ve)}}}const pr={local:"diffusers.ModelMixin",title:"Loading"};function mr(I){return er(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class wr extends Ja{constructor(l){super();Ka(this,l,mr,cr,Qa,{})}}export{wr as default,pr as metadata};
