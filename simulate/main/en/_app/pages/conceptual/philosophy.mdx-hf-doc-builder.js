import{S as Qe,i as We,s as Xe,e as o,k as d,w as ie,t as h,M as Ye,c as i,d as t,m as u,a,x as ae,h as f,b as r,G as n,g as l,y as se,L as Ze,q as re,o as le,B as he,v as et}from"../../chunks/vendor-hf-doc-builder.js";import{I as fe}from"../../chunks/IconCopyLink-hf-doc-builder.js";function tt(Ie){let c,O,m,w,U,k,de,C,ue,j,g,b,F,P,pe,H,ce,z,I,me,K,v,_,R,E,ge,q,ve,V,S,ye,J,N,we,Q,B,be,W,G,_e,X,y,$,M,A,$e,D,ke,Y,p,Pe,x,Ee,Ae,T,xe,Te,Z;return k=new fe({}),P=new fe({}),E=new fe({}),A=new fe({}),{c(){c=o("meta"),O=d(),m=o("h1"),w=o("a"),U=o("span"),ie(k.$$.fragment),de=d(),C=o("span"),ue=h("Philosophy"),j=d(),g=o("h2"),b=o("a"),F=o("span"),ie(P.$$.fragment),pe=d(),H=o("span"),ce=h("Today\u2019s landscape for simulation environments"),z=h(`

In our investigations, we found that the current landscape for simulation environments and synthetic data creation has a couple of limitations:
- Very fragmented - each set of simulation environments is usually isolated and separated from the others by being tied to a specific engine (Unity, Gibson, Habitat, etc)
- Building environments often requires knowledge and skills that are not in the toolbox of the typical AI/ML researchers (knowledge of C++/C#)
- Frameworks tend to focus on one domain/application, e.g. focusing on RL, synthetic data generation, NLP, self-driving cars but the field is increasingly cross applications/modalities
- It's often not easy to share a new environment or a modification of an environment without having to modify a library
- Environment visualization/debugging tools can be difficult to find
`),I=o("p"),me=h("\u{1F917} Simulate is a proof of concept to investigate whether this situation could be improved."),K=d(),v=o("h2"),_=o("a"),R=o("span"),ie(E.$$.fragment),ge=d(),q=o("span"),ve=h("Design philosophy for simulate"),V=d(),S=o("p"),ye=h("The simulate library is an exploration on how one could use python to easily build & share complex and diverse simulation environments for embodied learning or synthetic data research."),J=d(),N=o("p"),we=h("The basic idea is to decouple the creation of the simulation environment (\u201Cbuilding\u201D) from the simulation engine used to run it (Unity, Blender, custom engine, etc) by relying on an engine-agnostic sharing format (the open standard glTF format in this case)."),Q=d(),B=o("p"),be=h("The created environments are stored in a language/framework agnostic format and can be loaded and run on a diversity of engines with concise integrations handling more or less of the glTF extensions we use (we provide PoC plugins for Unity, Godot and Blender in the alpha release)."),W=d(),G=o("p"),_e=h("Interfacing with the git-versioning and hosting on the Hugging Face hub allow to download/upload share/reuse assets (objects) as well as full scenes (environments)."),X=d(),y=o("h2"),$=o("a"),M=o("span"),ie(A.$$.fragment),$e=d(),D=o("span"),ke=h("Building on the shoulders of giants"),Y=d(),p=o("p"),Pe=h("The python API was inspired by the awesome kubric library created by Klaus Greff and Andrea Tagliasacchi and the Google team ("),x=o("a"),Ee=h("https://github.com/google-research/kubric"),Ae=h(") while the Unity engine was inspired in part by the impressive work of the PRIOR team at AllenAI ("),T=o("a"),xe=h("https://prior.allenai.org/"),Te=h(")."),this.h()},l(e){const s=Ye('[data-svelte="svelte-1phssyn"]',document.head);c=i(s,"META",{name:!0,content:!0}),s.forEach(t),O=u(e),m=i(e,"H1",{class:!0});var ee=a(m);w=i(ee,"A",{id:!0,class:!0,href:!0});var Se=a(w);U=i(Se,"SPAN",{});var Ne=a(U);ae(k.$$.fragment,Ne),Ne.forEach(t),Se.forEach(t),de=u(ee),C=i(ee,"SPAN",{});var Be=a(C);ue=f(Be,"Philosophy"),Be.forEach(t),ee.forEach(t),j=u(e),g=i(e,"H2",{class:!0});var te=a(g);b=i(te,"A",{id:!0,class:!0,href:!0});var Ge=a(b);F=i(Ge,"SPAN",{});var Le=a(F);ae(P.$$.fragment,Le),Le.forEach(t),Ge.forEach(t),pe=u(te),H=i(te,"SPAN",{});var Ue=a(H);ce=f(Ue,"Today\u2019s landscape for simulation environments"),Ue.forEach(t),te.forEach(t),z=f(e,`

In our investigations, we found that the current landscape for simulation environments and synthetic data creation has a couple of limitations:
- Very fragmented - each set of simulation environments is usually isolated and separated from the others by being tied to a specific engine (Unity, Gibson, Habitat, etc)
- Building environments often requires knowledge and skills that are not in the toolbox of the typical AI/ML researchers (knowledge of C++/C#)
- Frameworks tend to focus on one domain/application, e.g. focusing on RL, synthetic data generation, NLP, self-driving cars but the field is increasingly cross applications/modalities
- It's often not easy to share a new environment or a modification of an environment without having to modify a library
- Environment visualization/debugging tools can be difficult to find
`),I=i(e,"P",{});var Ce=a(I);me=f(Ce,"\u{1F917} Simulate is a proof of concept to investigate whether this situation could be improved."),Ce.forEach(t),K=u(e),v=i(e,"H2",{class:!0});var ne=a(v);_=i(ne,"A",{id:!0,class:!0,href:!0});var Fe=a(_);R=i(Fe,"SPAN",{});var He=a(R);ae(E.$$.fragment,He),He.forEach(t),Fe.forEach(t),ge=u(ne),q=i(ne,"SPAN",{});var Re=a(q);ve=f(Re,"Design philosophy for simulate"),Re.forEach(t),ne.forEach(t),V=u(e),S=i(e,"P",{});var qe=a(S);ye=f(qe,"The simulate library is an exploration on how one could use python to easily build & share complex and diverse simulation environments for embodied learning or synthetic data research."),qe.forEach(t),J=u(e),N=i(e,"P",{});var Me=a(N);we=f(Me,"The basic idea is to decouple the creation of the simulation environment (\u201Cbuilding\u201D) from the simulation engine used to run it (Unity, Blender, custom engine, etc) by relying on an engine-agnostic sharing format (the open standard glTF format in this case)."),Me.forEach(t),Q=u(e),B=i(e,"P",{});var De=a(B);be=f(De,"The created environments are stored in a language/framework agnostic format and can be loaded and run on a diversity of engines with concise integrations handling more or less of the glTF extensions we use (we provide PoC plugins for Unity, Godot and Blender in the alpha release)."),De.forEach(t),W=u(e),G=i(e,"P",{});var Oe=a(G);_e=f(Oe,"Interfacing with the git-versioning and hosting on the Hugging Face hub allow to download/upload share/reuse assets (objects) as well as full scenes (environments)."),Oe.forEach(t),X=u(e),y=i(e,"H2",{class:!0});var oe=a(y);$=i(oe,"A",{id:!0,class:!0,href:!0});var je=a($);M=i(je,"SPAN",{});var ze=a(M);ae(A.$$.fragment,ze),ze.forEach(t),je.forEach(t),$e=u(oe),D=i(oe,"SPAN",{});var Ke=a(D);ke=f(Ke,"Building on the shoulders of giants"),Ke.forEach(t),oe.forEach(t),Y=u(e),p=i(e,"P",{});var L=a(p);Pe=f(L,"The python API was inspired by the awesome kubric library created by Klaus Greff and Andrea Tagliasacchi and the Google team ("),x=i(L,"A",{href:!0,rel:!0});var Ve=a(x);Ee=f(Ve,"https://github.com/google-research/kubric"),Ve.forEach(t),Ae=f(L,") while the Unity engine was inspired in part by the impressive work of the PRIOR team at AllenAI ("),T=i(L,"A",{href:!0,rel:!0});var Je=a(T);xe=f(Je,"https://prior.allenai.org/"),Je.forEach(t),Te=f(L,")."),L.forEach(t),this.h()},h(){r(c,"name","hf:doc:metadata"),r(c,"content",JSON.stringify(nt)),r(w,"id","philosophy"),r(w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(w,"href","#philosophy"),r(m,"class","relative group"),r(b,"id","todays-landscape-for-simulation-environments"),r(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(b,"href","#todays-landscape-for-simulation-environments"),r(g,"class","relative group"),r(_,"id","design-philosophy-for-simulate"),r(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(_,"href","#design-philosophy-for-simulate"),r(v,"class","relative group"),r($,"id","building-on-the-shoulders-of-giants"),r($,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r($,"href","#building-on-the-shoulders-of-giants"),r(y,"class","relative group"),r(x,"href","https://github.com/google-research/kubric"),r(x,"rel","nofollow"),r(T,"href","https://prior.allenai.org/"),r(T,"rel","nofollow")},m(e,s){n(document.head,c),l(e,O,s),l(e,m,s),n(m,w),n(w,U),se(k,U,null),n(m,de),n(m,C),n(C,ue),l(e,j,s),l(e,g,s),n(g,b),n(b,F),se(P,F,null),n(g,pe),n(g,H),n(H,ce),l(e,z,s),l(e,I,s),n(I,me),l(e,K,s),l(e,v,s),n(v,_),n(_,R),se(E,R,null),n(v,ge),n(v,q),n(q,ve),l(e,V,s),l(e,S,s),n(S,ye),l(e,J,s),l(e,N,s),n(N,we),l(e,Q,s),l(e,B,s),n(B,be),l(e,W,s),l(e,G,s),n(G,_e),l(e,X,s),l(e,y,s),n(y,$),n($,M),se(A,M,null),n(y,$e),n(y,D),n(D,ke),l(e,Y,s),l(e,p,s),n(p,Pe),n(p,x),n(x,Ee),n(p,Ae),n(p,T),n(T,xe),n(p,Te),Z=!0},p:Ze,i(e){Z||(re(k.$$.fragment,e),re(P.$$.fragment,e),re(E.$$.fragment,e),re(A.$$.fragment,e),Z=!0)},o(e){le(k.$$.fragment,e),le(P.$$.fragment,e),le(E.$$.fragment,e),le(A.$$.fragment,e),Z=!1},d(e){t(c),e&&t(O),e&&t(m),he(k),e&&t(j),e&&t(g),he(P),e&&t(z),e&&t(I),e&&t(K),e&&t(v),he(E),e&&t(V),e&&t(S),e&&t(J),e&&t(N),e&&t(Q),e&&t(B),e&&t(W),e&&t(G),e&&t(X),e&&t(y),he(A),e&&t(Y),e&&t(p)}}}const nt={local:"philosophy",sections:[{local:"todays-landscape-for-simulation-environments",title:"Today\u2019s landscape for simulation environments"},{local:"design-philosophy-for-simulate",title:"Design philosophy for simulate"},{local:"building-on-the-shoulders-of-giants",title:"Building on the shoulders of giants"}],title:"Philosophy"};function ot(Ie){return et(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class st extends Qe{constructor(c){super();We(this,c,ot,tt,Xe,{})}}export{st as default,nt as metadata};
