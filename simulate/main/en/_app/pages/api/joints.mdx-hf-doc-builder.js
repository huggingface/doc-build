import{S as yt,i as xt,s as bt,e as n,k as _,w as ft,t as l,M as At,c as i,d as o,m as g,a,x as ut,h as s,b as x,G as e,g as c,y as ht,L as wt,q as _t,o as gt,B as vt,v as Ct}from"../../chunks/vendor-hf-doc-builder.js";import{D as Bt}from"../../chunks/Docstring-hf-doc-builder.js";import{I as jt}from"../../chunks/IconCopyLink-hf-doc-builder.js";function Tt(nt){let d,O,m,u,C,v,q,B,U,P,b,G,D,h,A,j,J,X,H,w,T,V,z,S,p,E,K,Q,N,W,Y,k,f,y,Z,$,tt,I;return v=new jt({}),y=new Bt({props:{name:"class simulate.ArticulationBodyComponent",anchor:"simulate.ArticulationBodyComponent",parameters:[{name:"joint_type",val:": str"},{name:"anchor_rotation",val:": typing.List[float] = None"},{name:"anchor_position",val:": typing.Optional[typing.List[float]] = None"},{name:"immovable",val:": typing.Optional[bool] = None"},{name:"linear_damping",val:": float = 0.0"},{name:"angular_damping",val:": float = 0.0"},{name:"joint_friction",val:": float = 0.0"},{name:"drive_stiffness",val:": float = 0.0"},{name:"drive_damping",val:": float = 0.0"},{name:"drive_force_limit",val:": float = 0.0"},{name:"drive_target",val:": float = 0.0"},{name:"drive_target_velocity",val:": float = 0.0"},{name:"upper_limit",val:": typing.Optional[float] = None"},{name:"lower_limit",val:": typing.Optional[float] = None"},{name:"is_limited",val:": typing.Optional[bool] = False"},{name:"mass",val:": typing.Optional[float] = None"},{name:"center_of_mass",val:": typing.Optional[typing.List[float]] = None"},{name:"inertia_tensor",val:": typing.Optional[typing.List[float]] = None"},{name:"use_gravity",val:": typing.Optional[bool] = None"},{name:"collision_detections",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"simulate.ArticulationBodyComponent.joint_type",description:`<strong>joint_type</strong> (<code>str</code>) &#x2014;
The type of articulation (aka joint) to use.<ul>
<li>&#x201C;fixed&#x201D;: no movement allowed</li>
<li>&#x201C;prismatic&#x201D;: only translation along 1 axis allowed</li>
<li>&#x201C;revolute&#x201D;: only rotation along 1 axis allowed</li>
</ul>`,name:"joint_type"},{anchor:"simulate.ArticulationBodyComponent.anchor_rotation",description:`<strong>anchor_rotation</strong> (<code>List[float]</code>, <em>optional</em>, defaults to <code>[0.0, 0.0, 0.0, 1.0]</code>) &#x2014;
The rotation axis along which the asset is allowed to move relative to its parent (translation or rotation).`,name:"anchor_rotation"},{anchor:"simulate.ArticulationBodyComponent.anchor_position",description:`<strong>anchor_position</strong> (<code>List[float]</code>, <em>optional</em>, defaults to <code>[0.0, 0.0, 0.0]</code>) &#x2014;
Position of the anchor point of the joint.`,name:"anchor_position"},{anchor:"simulate.ArticulationBodyComponent.immovable",description:`<strong>immovable</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, the asset will not be affected by physics.`,name:"immovable"},{anchor:"simulate.ArticulationBodyComponent.linear_damping",description:`<strong>linear_damping</strong> (<code>float</code>, <em>optional</em>, defaults to <code>0.0</code>) &#x2014;
The linear damping of the joint.`,name:"linear_damping"},{anchor:"simulate.ArticulationBodyComponent.angular_damping",description:`<strong>angular_damping</strong> (<code>float</code>, <em>optional</em>, defaults to <code>0.0</code>) &#x2014;
The angular damping of the joint.`,name:"angular_damping"},{anchor:"simulate.ArticulationBodyComponent.joint_friction",description:`<strong>joint_friction</strong> (<code>float</code>, <em>optional</em>, defaults to <code>0.0</code>) &#x2014;
The friction of the joint.`,name:"joint_friction"},{anchor:"simulate.ArticulationBodyComponent.drive_stiffness",description:`<strong>drive_stiffness</strong> (<code>float</code>, <em>optional</em>, defaults to <code>0.0</code>) &#x2014;
The stiffness of the joint drive.`,name:"drive_stiffness"},{anchor:"simulate.ArticulationBodyComponent.drive_damping",description:`<strong>drive_damping</strong> (<code>float</code>, <em>optional</em>, defaults to <code>0.0</code>) &#x2014;
The damping of the joint drive.`,name:"drive_damping"},{anchor:"simulate.ArticulationBodyComponent.drive_force_limit",description:`<strong>drive_force_limit</strong> (<code>float</code>, <em>optional</em>, defaults to <code>0.0</code>) &#x2014;
The force limit of the joint drive.`,name:"drive_force_limit"},{anchor:"simulate.ArticulationBodyComponent.drive_target",description:`<strong>drive_target</strong> (<code>float</code>, <em>optional</em>, defaults to <code>0.0</code>) &#x2014;
The target of the joint drive.`,name:"drive_target"},{anchor:"simulate.ArticulationBodyComponent.drive_target_velocity",description:`<strong>drive_target_velocity</strong> (<code>float</code>, <em>optional</em>, defaults to <code>0.0</code>) &#x2014;
The target velocity of the joint drive.`,name:"drive_target_velocity"},{anchor:"simulate.ArticulationBodyComponent.upper_limit",description:`<strong>upper_limit</strong> (<code>float</code>, <em>optional</em>, defaults to None) &#x2014;
The upper limit of the joint.`,name:"upper_limit"},{anchor:"simulate.ArticulationBodyComponent.lower_limit",description:`<strong>lower_limit</strong> (<code>float</code>, <em>optional</em>, defaults to None) &#x2014;
The lower limit of the joint.`,name:"lower_limit"},{anchor:"simulate.ArticulationBodyComponent.mass",description:`<strong>mass</strong> (<code>float</code>, <em>optional</em>, defaults to <code>1.0</code>) &#x2014;
The mass of the body.`,name:"mass"},{anchor:"simulate.ArticulationBodyComponent.center_of_mass",description:`<strong>center_of_mass</strong> (<code>List[float]</code>, <em>optional</em>, defaults to <code>[0.0, 0.0, 0.0]</code>) &#x2014;
The center of mass of the body.`,name:"center_of_mass"},{anchor:"simulate.ArticulationBodyComponent.inertia_tensor",description:`<strong>inertia_tensor</strong> (<code>List[float]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The inertia tensor of the body.`,name:"inertia_tensor"},{anchor:"simulate.ArticulationBodyComponent.use_gravity",description:`<strong>use_gravity</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
If <code>True</code>, the body will be affected by gravity.`,name:"use_gravity"},{anchor:"simulate.ArticulationBodyComponent.collision_detections",description:`<strong>collision_detections</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The collision detection mode to use.`,name:"collision_detections"}],source:"https://github.com/huggingface/simulate/blob/main/src/simulate/assets/articulation_body.py#L31"}}),{c(){d=n("meta"),O=_(),m=n("h1"),u=n("a"),C=n("span"),ft(v.$$.fragment),q=_(),B=n("span"),U=l("Articulation Bodies"),P=_(),b=n("p"),G=l("There are two primary types of articulation supported by Simulate:"),D=_(),h=n("ol"),A=n("li"),j=n("code"),J=l("Prismatic"),X=l(" joints: slide along a specified axis,"),H=_(),w=n("li"),T=n("code"),V=l("Revolute"),z=l(" joints: rotate about a specified axis."),S=_(),p=n("p"),E=n("em"),K=l("Note"),Q=l(" that these are currently only implemented in "),N=n("strong"),W=l("Unity"),Y=l("."),k=_(),f=n("div"),ft(y.$$.fragment),Z=_(),$=n("p"),tt=l(`An articulation body will model the physics of an articulation body connecting together an asset
with its parent in the hierarchy. For prismatic joints, the direction of travel in the backend is X, so we use anchor_rotation to set the position in space.`),this.h()},l(t){const r=At('[data-svelte="svelte-1phssyn"]',document.head);d=i(r,"META",{name:!0,content:!0}),r.forEach(o),O=g(t),m=i(t,"H1",{class:!0});var F=a(m);u=i(F,"A",{id:!0,class:!0,href:!0});var it=a(u);C=i(it,"SPAN",{});var at=a(C);ut(v.$$.fragment,at),at.forEach(o),it.forEach(o),q=g(F),B=i(F,"SPAN",{});var rt=a(B);U=s(rt,"Articulation Bodies"),rt.forEach(o),F.forEach(o),P=g(t),b=i(t,"P",{});var lt=a(b);G=s(lt,"There are two primary types of articulation supported by Simulate:"),lt.forEach(o),D=g(t),h=i(t,"OL",{});var M=a(h);A=i(M,"LI",{});var ot=a(A);j=i(ot,"CODE",{});var st=a(j);J=s(st,"Prismatic"),st.forEach(o),X=s(ot," joints: slide along a specified axis,"),ot.forEach(o),H=g(M),w=i(M,"LI",{});var et=a(w);T=i(et,"CODE",{});var ct=a(T);V=s(ct,"Revolute"),ct.forEach(o),z=s(et," joints: rotate about a specified axis."),et.forEach(o),M.forEach(o),S=g(t),p=i(t,"P",{});var L=a(p);E=i(L,"EM",{});var dt=a(E);K=s(dt,"Note"),dt.forEach(o),Q=s(L," that these are currently only implemented in "),N=i(L,"STRONG",{});var mt=a(N);W=s(mt,"Unity"),mt.forEach(o),Y=s(L,"."),L.forEach(o),k=g(t),f=i(t,"DIV",{class:!0});var R=a(f);ut(y.$$.fragment,R),Z=g(R),$=i(R,"P",{});var pt=a($);tt=s(pt,`An articulation body will model the physics of an articulation body connecting together an asset
with its parent in the hierarchy. For prismatic joints, the direction of travel in the backend is X, so we use anchor_rotation to set the position in space.`),pt.forEach(o),R.forEach(o),this.h()},h(){x(d,"name","hf:doc:metadata"),x(d,"content",JSON.stringify(Et)),x(u,"id","simulate.ArticulationBodyComponent"),x(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),x(u,"href","#simulate.ArticulationBodyComponent"),x(m,"class","relative group"),x(f,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,r){e(document.head,d),c(t,O,r),c(t,m,r),e(m,u),e(u,C),ht(v,C,null),e(m,q),e(m,B),e(B,U),c(t,P,r),c(t,b,r),e(b,G),c(t,D,r),c(t,h,r),e(h,A),e(A,j),e(j,J),e(A,X),e(h,H),e(h,w),e(w,T),e(T,V),e(w,z),c(t,S,r),c(t,p,r),e(p,E),e(E,K),e(p,Q),e(p,N),e(N,W),e(p,Y),c(t,k,r),c(t,f,r),ht(y,f,null),e(f,Z),e(f,$),e($,tt),I=!0},p:wt,i(t){I||(_t(v.$$.fragment,t),_t(y.$$.fragment,t),I=!0)},o(t){gt(v.$$.fragment,t),gt(y.$$.fragment,t),I=!1},d(t){o(d),t&&o(O),t&&o(m),vt(v),t&&o(P),t&&o(b),t&&o(D),t&&o(h),t&&o(S),t&&o(p),t&&o(k),t&&o(f),vt(y)}}}const Et={local:"simulate.ArticulationBodyComponent",title:"Articulation Bodies"};function Nt(nt){return Ct(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Pt extends yt{constructor(d){super();xt(this,d,Nt,Tt,bt,{})}}export{Pt as default,Et as metadata};
