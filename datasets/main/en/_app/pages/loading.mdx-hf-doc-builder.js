import{S as L_,i as H_,s as F_,e as l,k as d,w as u,t as r,M as R_,c as o,d as a,m as f,a as n,x as m,h as i,b as c,G as s,g as p,y as _,q as g,o as v,B as $,v as M_}from"../chunks/vendor-hf-doc-builder.js";import{T as Ia}from"../chunks/Tip-hf-doc-builder.js";import{I as A}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as E}from"../chunks/CodeBlock-hf-doc-builder.js";import{C as Xo}from"../chunks/CodeBlockFw-hf-doc-builder.js";import"../chunks/IconTensorflow-hf-doc-builder.js";function V_(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("Refer to the "),y=l("a"),b=r("Upload a dataset to the Hub"),q=r(" tutorial for more details on how to create a dataset repository on the Hub, and how to upload your data files."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"Refer to the "),y=o(j,"A",{href:!0});var P=n(y);b=i(P,"Upload a dataset to the Hub"),P.forEach(a),q=i(j," tutorial for more details on how to create a dataset repository on the Hub, and how to upload your data files."),j.forEach(a),this.h()},h(){c(y,"href","./upload_dataset")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function z_(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("If you don\u2019t specify which data files to use, "),y=l("a"),b=r("load_dataset()"),q=r(" will return all the data files. This can take a long time if you load a large dataset like C4, which is approximately 13TB of data."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"If you don\u2019t specify which data files to use, "),y=o(j,"A",{href:!0});var P=n(y);b=i(P,"load_dataset()"),P.forEach(a),q=i(j," will return all the data files. This can take a long time if you load a large dataset like C4, which is approximately 13TB of data."),j.forEach(a),this.h()},h(){c(y,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function U_(D){let h,k,y,b,q,w,j,P;return{c(){h=l("p"),k=r("You can specify "),y=l("a"),b=r("con"),q=r(" as a "),w=l("a"),j=r("URI string"),P=r(" for the \u{1F917} Datasets caching to work across sessions."),this.h()},l(C){h=o(C,"P",{});var T=n(h);k=i(T,"You can specify "),y=o(T,"A",{href:!0});var F=n(y);b=i(F,"con"),F.forEach(a),q=i(T," as a "),w=o(T,"A",{href:!0,rel:!0});var R=n(w);j=i(R,"URI string"),R.forEach(a),P=i(T," for the \u{1F917} Datasets caching to work across sessions."),T.forEach(a),this.h()},h(){c(y,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.from_sql.con"),c(w,"href","https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls"),c(w,"rel","nofollow")},m(C,T){p(C,h,T),s(h,k),s(h,y),s(y,b),s(h,q),s(h,w),s(w,j),s(h,P)},d(C){C&&a(h)}}}function Y_(D){let h,k,y,b,q,w,j,P,C,T,F,R,St,Q,G,Dt,S,J,Ca,Oa,W,La,Ha,M,Fa,Ra;return{c(){h=l("p"),k=r("An object data type in "),y=l("a"),b=r("pandas.Series"),q=r(" doesn\u2019t always carry enough information for Arrow to automatically infer a data type. For example, if a DataFrame is of length "),w=l("code"),j=r("0"),P=r(" or the Series only contains "),C=l("code"),T=r("None/NaN"),F=r(" objects, the type is set to "),R=l("code"),St=r("null"),Q=r(". Avoid potential errors by constructing an explicit schema with "),G=l("a"),Dt=r("Features"),S=r(" using the "),J=l("code"),Ca=r("from_dict"),Oa=r(" or "),W=l("code"),La=r("from_pandas"),Ha=r(" methods. See the "),M=l("a"),Fa=r("troubleshoot"),Ra=r(" section for more details on how to explicitly specify your own features."),this.h()},l(B){h=o(B,"P",{});var x=n(h);k=i(x,"An object data type in "),y=o(x,"A",{href:!0,rel:!0});var re=n(y);b=i(re,"pandas.Series"),re.forEach(a),q=i(x," doesn\u2019t always carry enough information for Arrow to automatically infer a data type. For example, if a DataFrame is of length "),w=o(x,"CODE",{});var Tt=n(w);j=i(Tt,"0"),Tt.forEach(a),P=i(x," or the Series only contains "),C=o(x,"CODE",{});var ie=n(C);T=i(ie,"None/NaN"),ie.forEach(a),F=i(x," objects, the type is set to "),R=o(x,"CODE",{});var pe=n(R);St=i(pe,"null"),pe.forEach(a),Q=i(x,". Avoid potential errors by constructing an explicit schema with "),G=o(x,"A",{href:!0});var Nt=n(G);Dt=i(Nt,"Features"),Nt.forEach(a),S=i(x," using the "),J=o(x,"CODE",{});var de=n(J);Ca=i(de,"from_dict"),de.forEach(a),Oa=i(x," or "),W=o(x,"CODE",{});var Ma=n(W);La=i(Ma,"from_pandas"),Ma.forEach(a),Ha=i(x," methods. See the "),M=o(x,"A",{href:!0});var O=n(M);Fa=i(O,"troubleshoot"),O.forEach(a),Ra=i(x," section for more details on how to explicitly specify your own features."),x.forEach(a),this.h()},h(){c(y,"href","https://pandas.pydata.org/docs/reference/api/pandas.Series.html"),c(y,"rel","nofollow"),c(G,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Features"),c(M,"href","./loading#specify-features")},m(B,x){p(B,h,x),s(h,k),s(h,y),s(y,b),s(h,q),s(h,w),s(w,j),s(h,P),s(h,C),s(C,T),s(h,F),s(h,R),s(R,St),s(h,Q),s(h,G),s(G,Dt),s(h,S),s(h,J),s(J,Ca),s(h,Oa),s(h,W),s(W,La),s(h,Ha),s(h,M),s(M,Fa),s(h,Ra)},d(B){B&&a(h)}}}function J_(D){let h,k,y,b;return{c(){h=l("p"),k=l("code"),y=r("pct1_dropremainder"),b=r(" rounding may truncate the last examples in a dataset if the number of examples in your dataset don\u2019t divide evenly by 100.")},l(q){h=o(q,"P",{});var w=n(h);k=o(w,"CODE",{});var j=n(k);y=i(j,"pct1_dropremainder"),j.forEach(a),b=i(w," rounding may truncate the last examples in a dataset if the number of examples in your dataset don\u2019t divide evenly by 100."),w.forEach(a)},m(q,w){p(q,h,w),s(h,k),s(k,y),s(h,b)},d(q){q&&a(h)}}}function W_(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),y=l("a"),b=r("Evaluate"),q=r("! In addition to metrics, you can find more tools for evaluating models and datasets."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),y=o(j,"A",{href:!0,rel:!0});var P=n(y);b=i(P,"Evaluate"),P.forEach(a),q=i(j,"! In addition to metrics, you can find more tools for evaluating models and datasets."),j.forEach(a),this.h()},h(){c(y,"href","https://huggingface.co/docs/evaluate/index"),c(y,"rel","nofollow")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function B_(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("See the "),y=l("a"),b=r("Metrics"),q=r(" guide for more details on how to write your own metric loading script."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"See the "),y=o(j,"A",{href:!0});var P=n(y);b=i(P,"Metrics"),P.forEach(a),q=i(j," guide for more details on how to write your own metric loading script."),j.forEach(a),this.h()},h(){c(y,"href","./how_to_metrics#custom-metric-loading-script")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function Q_(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("Once you\u2019ve loaded a metric for distributed usage, you can compute the metric as usual. Behind the scenes, "),y=l("a"),b=r("Metric.compute()"),q=r(" gathers all the predictions and references from the nodes, and computes the final metric."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"Once you\u2019ve loaded a metric for distributed usage, you can compute the metric as usual. Behind the scenes, "),y=o(j,"A",{href:!0});var P=n(y);b=i(P,"Metric.compute()"),P.forEach(a),q=i(j," gathers all the predictions and references from the nodes, and computes the final metric."),j.forEach(a),this.h()},h(){c(y,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Metric.compute")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function G_(D){let h,k,y,b,q,w,j,P,C,T,F,R,St,Q,G,Dt,S,J,Ca,Oa,W,La,Ha,M,Fa,Ra,B,x,re,Tt,ie,pe,Nt,de,Ma,O,gp,Va,vp,$p,za,yp,wp,Ua,jp,bp,Zo,fe,tn,nt,It,ml,Ya,qp,_l,kp,an,K,Ep,ce,Pp,xp,he,Ap,Sp,sn,Ct,Dp,Ja,Tp,Np,en,Wa,ln,Ot,Ip,gl,Cp,Op,on,Ba,nn,Lt,rn,N,Lp,vl,Hp,Fp,$l,Rp,Mp,yl,Vp,zp,wl,Up,Yp,jl,Jp,Wp,pn,Qa,dn,Ht,fn,X,Bp,bl,Qp,Gp,ql,Kp,Xp,cn,Ga,hn,Ft,Zp,kl,td,ad,un,Ka,mn,rt,Rt,El,Xa,sd,Pl,ed,_n,Mt,ld,ue,od,nd,gn,Vt,xl,rd,id,Al,pd,vn,Za,$n,it,zt,Sl,ts,dd,Dl,fd,yn,me,cd,wn,as,jn,Ut,hd,_e,ud,md,bn,ss,qn,pt,Yt,Tl,es,_d,Nl,gd,kn,I,vd,Il,$d,yd,Cl,wd,jd,Ol,bd,qd,Ll,kd,Ed,ge,Pd,xd,En,dt,Jt,Hl,ls,Ad,Fl,Sd,Pn,ve,Dd,xn,os,An,$e,Td,Sn,ns,Dn,ye,Nd,Tn,rs,Nn,we,Id,In,is,Cn,je,Cd,On,ps,Ln,ft,Wt,Rl,ds,Od,Ml,Ld,Hn,Bt,Hd,be,Fd,Rd,Fn,fs,Rn,qe,Md,Mn,cs,Vn,Qt,Vd,Vl,zd,Ud,zn,hs,Un,ke,Yd,Yn,us,Jn,Ee,Jd,Wn,ct,Gt,zl,ms,Wd,Ul,Bd,Bn,Pe,Qd,Qn,xe,Gd,Gn,_s,Kn,Ae,Kd,Xn,gs,Zn,ht,Kt,Yl,vs,Xd,Jl,Zd,tr,Xt,tf,Se,af,sf,ar,De,ef,sr,$s,er,Te,lf,lr,ys,or,Zt,nr,ut,ta,Wl,ws,of,Bl,nf,rr,Ne,rf,ir,aa,pf,Ql,df,ff,pr,js,dr,mt,sa,Gl,bs,cf,Kl,hf,fr,ea,uf,Ie,mf,_f,cr,_t,la,Xl,qs,gf,Zl,vf,hr,oa,$f,Ce,yf,wf,ur,ks,mr,gt,na,to,Es,jf,ao,bf,_r,ra,qf,so,kf,Ef,gr,Ps,vr,vt,ia,eo,xs,Pf,lo,xf,$r,pa,Af,Oe,Sf,Df,yr,As,wr,Le,Tf,jr,$t,da,oo,Ss,Nf,no,If,br,fa,Cf,He,Of,Lf,qr,Ds,kr,ca,Er,yt,ha,ro,Ts,Hf,io,Ff,Pr,Fe,Rf,xr,Z,Mf,po,Vf,zf,fo,Uf,Yf,Ar,wt,ua,co,Ns,Jf,ho,Wf,Sr,tt,Bf,Re,Qf,Gf,Me,Kf,Xf,Dr,at,Zf,uo,tc,ac,mo,sc,ec,Tr,Is,Nr,ma,lc,_o,oc,nc,Ir,Cs,Cr,Ve,rc,Or,Os,Lr,ze,ic,Hr,Ls,Fr,Ue,pc,Rr,Hs,Mr,jt,_a,go,Fs,dc,vo,fc,Vr,Ye,cc,zr,Rs,Ur,ga,hc,$o,uc,mc,Yr,Ms,Jr,va,Wr,Je,Br,bt,$a,yo,Vs,_c,wo,gc,Qr,We,vc,Gr,qt,ya,jo,zs,$c,bo,yc,Kr,V,wc,Be,jc,bc,qo,qc,kc,ko,Ec,Pc,Xr,wa,xc,Us,Ac,Sc,Zr,Ys,ti,H,Dc,Eo,Tc,Nc,Po,Ic,Cc,xo,Oc,Lc,Qe,Hc,Fc,ai,kt,ja,Ao,Js,Rc,So,Mc,si,z,Vc,Ge,zc,Uc,Ws,Yc,Jc,Ke,Wc,Bc,ei,ba,Qc,Xe,Gc,Kc,li,Bs,oi,st,Xc,Do,Zc,th,Ze,ah,sh,ni,Qs,ri,tl,eh,ii,Gs,pi,Et,qa,To,Ks,lh,No,oh,di,ka,fi,al,nh,ci,Xs,hi,Ea,ui,Pt,Pa,Io,Zs,rh,Co,ih,mi,et,ph,Oo,dh,fh,sl,ch,hh,_i,te,gi,xt,xa,Lo,ae,uh,Ho,mh,vi,el,_h,$i,ll,gh,yi,lt,Fo,se,vh,Ro,$h,yh,wh,Mo,At,jh,Vo,bh,qh,zo,kh,Eh,Ph,Uo,ee,xh,ol,Ah,Sh,wi,le,ji,Aa,bi,Sa,Dh,Yo,Th,Nh,qi,oe,ki;return w=new A({}),Ya=new A({}),Wa=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("lhoestq/demo1")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;lhoestq/demo1&quot;</span>)`}}),Ba=new E({props:{code:`dataset = load_dataset(
  "lhoestq/custom_squad",
  revision="main"  # tag name, or branch name, or commit hash
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(
<span class="hljs-meta">... </span>  <span class="hljs-string">&quot;lhoestq/custom_squad&quot;</span>,
<span class="hljs-meta">... </span>  revision=<span class="hljs-string">&quot;main&quot;</span>  <span class="hljs-comment"># tag name, or branch name, or commit hash</span>
<span class="hljs-meta">... </span>)`}}),Lt=new Ia({props:{$$slots:{default:[V_]},$$scope:{ctx:D}}}),Qa=new E({props:{code:`data_files = {"train": "train.csv", "test": "test.csv"}
dataset = load_dataset("namespace/your_dataset_name", data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;train.csv&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;test.csv&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;namespace/your_dataset_name&quot;</span>, data_files=data_files)`}}),Ht=new Ia({props:{warning:!0,$$slots:{default:[z_]},$$scope:{ctx:D}}}),Ga=new E({props:{code:`from datasets import load_dataset

c4_subset = load_dataset("allenai/c4", data_files="en/c4-train.0000*-of-01024.json.gz")

c4_subset = load_dataset("allenai/c4", data_dir="en")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-comment"># load files that match the grep pattern</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_subset = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=<span class="hljs-string">&quot;en/c4-train.0000*-of-01024.json.gz&quot;</span>)

<span class="hljs-comment"># load dataset from the en directory on the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_subset = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_dir=<span class="hljs-string">&quot;en&quot;</span>)`}}),Ka=new E({props:{code:`data_files = {"validation": "en/c4-validation.*.json.gz"}
c4_validation = load_dataset("allenai/c4", data_files=data_files, split="validation")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;validation&quot;</span>: <span class="hljs-string">&quot;en/c4-validation.*.json.gz&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_validation = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;validation&quot;</span>)`}}),Xa=new A({}),Za=new E({props:{code:`dataset = load_dataset("path/to/local/loading_script/loading_script.py", split="train")
dataset = load_dataset("path/to/local/loading_script", split="train")  # equivalent because the file has the same name as the directory`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/local/loading_script/loading_script.py&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/local/loading_script&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)  <span class="hljs-comment"># equivalent because the file has the same name as the directory</span>`}}),ts=new A({}),as=new E({props:{code:"git clone https://huggingface.co/datasets/eli5",highlighted:'git <span class="hljs-built_in">clone</span> https://huggingface.co/datasets/eli5'}}),ss=new E({props:{code:`from datasets import load_dataset
eli5 = load_dataset("path/to/local/eli5")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>eli5 = load_dataset(<span class="hljs-string">&quot;path/to/local/eli5&quot;</span>)`}}),es=new A({}),ls=new A({}),os=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("csv", data_files="my_file.csv")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.csv&quot;</span>)`}}),ns=new E({props:{code:'dataset = load_dataset("csv", data_files=["my_file_1.csv", "my_file_2.csv", "my_file_3.csv"])',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=[<span class="hljs-string">&quot;my_file_1.csv&quot;</span>, <span class="hljs-string">&quot;my_file_2.csv&quot;</span>, <span class="hljs-string">&quot;my_file_3.csv&quot;</span>])'}}),rs=new E({props:{code:'dataset = load_dataset("csv", data_files={"train": ["my_train_file_1.csv", "my_train_file_2.csv"], "test": "my_test_file.csv"})',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: [<span class="hljs-string">&quot;my_train_file_1.csv&quot;</span>, <span class="hljs-string">&quot;my_train_file_2.csv&quot;</span>], <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;my_test_file.csv&quot;</span>})'}}),is=new E({props:{code:`base_url = "https://huggingface.co/datasets/lhoestq/demo1/resolve/main/data/"
dataset = load_dataset('csv', data_files={'train': base_url + 'train.csv', 'test': base_url + 'test.csv'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://huggingface.co/datasets/lhoestq/demo1/resolve/main/data/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files={<span class="hljs-string">&#x27;train&#x27;</span>: base_url + <span class="hljs-string">&#x27;train.csv&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: base_url + <span class="hljs-string">&#x27;test.csv&#x27;</span>})`}}),ps=new E({props:{code:`url = "https://domain.org/train_data.zip"
data_files = {"train": url}
dataset = load_dataset("csv", data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;https://domain.org/train_data.zip&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: url}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=data_files)`}}),ds=new A({}),fs=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("json", data_files="my_file.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.json&quot;</span>)`}}),cs=new E({props:{code:`{"a": 1, "b": 2.0, "c": "foo", "d": false}
{"a": 4, "b": -5.5, "c": null, "d": true}`,highlighted:`<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2.0</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;foo&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-5.5</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">}</span>`}}),hs=new E({props:{code:`
from datasets import load_dataset
dataset = load_dataset("json", data_files="my_file.json", field="data")`,highlighted:`{<span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>,
 <span class="hljs-string">&quot;data&quot;</span>: [{<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2.0</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>: false},
          {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&quot;b&quot;</span>: -<span class="hljs-number">5.5</span>, <span class="hljs-string">&quot;c&quot;</span>: null, <span class="hljs-string">&quot;d&quot;</span>: true}]
}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.json&quot;</span>, field=<span class="hljs-string">&quot;data&quot;</span>)`}}),us=new E({props:{code:`base_url = "https://rajpurkar.github.io/SQuAD-explorer/dataset/"
dataset = load_dataset("json", data_files={"train": base_url + "train-v1.1.json", "validation": base_url + "dev-v1.1.json"}, field="data")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/dataset/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: base_url + <span class="hljs-string">&quot;train-v1.1.json&quot;</span>, <span class="hljs-string">&quot;validation&quot;</span>: base_url + <span class="hljs-string">&quot;dev-v1.1.json&quot;</span>}, field=<span class="hljs-string">&quot;data&quot;</span>)`}}),ms=new A({}),_s=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("parquet", data_files={'train': 'train.parquet', 'test': 'test.parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;parquet&quot;</span>, data_files={<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;train.parquet&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-string">&#x27;test.parquet&#x27;</span>})`}}),gs=new E({props:{code:`base_url = "https://storage.googleapis.com/huggingface-nlp/cache/datasets/wikipedia/20200501.en/1.0.0/"
data_files = {"train": base_url + "wikipedia-train.parquet"}
wiki = load_dataset("parquet", data_files=data_files, split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://storage.googleapis.com/huggingface-nlp/cache/datasets/wikipedia/20200501.en/1.0.0/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: base_url + <span class="hljs-string">&quot;wikipedia-train.parquet&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = load_dataset(<span class="hljs-string">&quot;parquet&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),vs=new A({}),$s=new E({props:{code:`from datasets import Dataset
dataset = Dataset.from_sql("data_table", "sqlite:///sqlite_file.db")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_sql(<span class="hljs-string">&quot;data_table&quot;</span>, <span class="hljs-string">&quot;sqlite:///sqlite_file.db&quot;</span>)`}}),ys=new E({props:{code:`from sqlite3 import connect
con = connect(":memory")
# db writes ...
from datasets import Dataset
dataset = Dataset.from_sql("SELECT text FROM table WHERE length(text) > 100 LIMIT 10", con)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> sqlite3 <span class="hljs-keyword">import</span> connect
<span class="hljs-meta">&gt;&gt;&gt; </span>con = connect(<span class="hljs-string">&quot;:memory&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># db writes ...</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_sql(<span class="hljs-string">&quot;SELECT text FROM table WHERE length(text) &gt; 100 LIMIT 10&quot;</span>, con)`}}),Zt=new Ia({props:{$$slots:{default:[U_]},$$scope:{ctx:D}}}),ws=new A({}),js=new E({props:{code:`from datasets import load_dataset

oscar_afrikaans = load_dataset("oscar-corpus/OSCAR-2201", "af", num_proc=8)
imagenet = load_dataset("imagenet-1k", num_proc=8)
ml_librispeech_spanish = load_dataset("facebook/multilingual_librispeech", "spanish", num_proc=8)`,highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

oscar_afrikaans = load_dataset(<span class="hljs-string">&quot;oscar-corpus/OSCAR-2201&quot;</span>, <span class="hljs-string">&quot;af&quot;</span>, num_proc=<span class="hljs-number">8</span>)
imagenet = load_dataset(<span class="hljs-string">&quot;imagenet-1k&quot;</span>, num_proc=<span class="hljs-number">8</span>)
ml_librispeech_spanish = load_dataset(<span class="hljs-string">&quot;facebook/multilingual_librispeech&quot;</span>, <span class="hljs-string">&quot;spanish&quot;</span>, num_proc=<span class="hljs-number">8</span>)`}}),bs=new A({}),qs=new A({}),ks=new E({props:{code:`from datasets import Dataset
my_dict = {"a": [1, 2, 3]}
dataset = Dataset.from_dict(my_dict)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>my_dict = {<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict(my_dict)`}}),Es=new A({}),Ps=new E({props:{code:`from datasets import Dataset
my_list = [{"a": 1}, {"a": 2}, {"a": 3}]
dataset = Dataset.from_list(my_list)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>my_list = [{<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>}, {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">2</span>}, {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">3</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_list(my_list)`}}),xs=new A({}),As=new E({props:{code:`from datasets import Dataset
def my_gen():
    for i in range(1, 4):
        yield {"a": i}
dataset = Dataset.from_generator(my_gen)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_gen</span>():
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>):
<span class="hljs-meta">... </span>        <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;a&quot;</span>: i}
...
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_generator(my_gen)`}}),Ss=new A({}),Ds=new E({props:{code:`from datasets import Dataset
import pandas as pd
df = pd.DataFrame({"a": [1, 2, 3]})
dataset = Dataset.from_pandas(df)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd
<span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_pandas(df)`}}),ca=new Ia({props:{warning:!0,$$slots:{default:[Y_]},$$scope:{ctx:D}}}),Ts=new A({}),Ns=new A({}),Is=new Xo({props:{group1:{id:"stringapi",code:'train_test_ds = datasets.load_dataset("bookcorpus", split="train+test")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_test_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train+test&quot;</span>)'},group2:{id:"readinstruction",code:`ri = datasets.ReadInstruction("train") + datasets.ReadInstruction("test")
train_test_ds = datasets.load_dataset("bookcorpus", split=ri)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ri = datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;test&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_test_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=ri)`}}}),Cs=new Xo({props:{group1:{id:"stringapi",code:'train_10_20_ds = datasets.load_dataset("bookcorpus", split="train[10:20]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[10:20]&quot;</span>)'},group2:{id:"readinstruction",code:`train_10_20_ds = datasets.load_dataset("bookcorpu"', split=datasets.ReadInstruction("train", from_=10, to=20, unit="abs"))`,highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpu&quot;</span><span class="hljs-string">&#x27;, split=datasets.ReadInstruction(&quot;train&quot;, from_=10, to=20, unit=&quot;abs&quot;))</span>'}}}),Os=new Xo({props:{group1:{id:"stringapi",code:'train_10pct_ds = datasets.load_dataset("bookcorpus", split="train[:10%]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[:10%]&quot;</span>)'},group2:{id:"readinstruction",code:'train_10_20_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train", to=10, unit="%"))',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>))'}}}),Ls=new Xo({props:{group1:{id:"stringapi",code:'train_10_80pct_ds = datasets.load_dataset("bookcorpus", split="train[:10%]+train[-80%:]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_80pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[:10%]+train[-80%:]&quot;</span>)'},group2:{id:"readinstruction",code:`ri = (datasets.ReadInstruction("train", to=10, unit="%") + datasets.ReadInstruction("train", from_=-80, unit="%"))
train_10_80pct_ds = datasets.load_dataset("bookcorpus", split=ri)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ri = (datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=-<span class="hljs-number">80</span>, unit=<span class="hljs-string">&quot;%&quot;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_80pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=ri)`}}}),Hs=new Xo({props:{group1:{id:"stringapi",code:`val_ds = datasets.load_dataset("bookcorpus", split=[f"train[{k}%:{k+10}%]" for k in range(0, 100, 10)])
train_ds = datasets.load_dataset("bookcorpus", split=[f"train[:{k}%]+train[{k+10}%:]" for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>val_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=[<span class="hljs-string">f&quot;train[<span class="hljs-subst">{k}</span>%:<span class="hljs-subst">{k+<span class="hljs-number">10</span>}</span>%]&quot;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>train_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=[<span class="hljs-string">f&quot;train[:<span class="hljs-subst">{k}</span>%]+train[<span class="hljs-subst">{k+<span class="hljs-number">10</span>}</span>%:]&quot;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`},group2:{id:"readinstruction",code:`val_ds = datasets.load_dataset("bookcorpus", [datasets.ReadInstruction("train", from_=k, to=k+10, unit="%") for k in range(0, 100, 10)])
train_ds = datasets.load_dataset("bookcorpus", [(datasets.ReadInstruction("train", to=k, unit="%") + datasets.ReadInstruction("train", from_=k+10, unit="%")) for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>val_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, [datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=k, to=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>train_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, [(datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=k, unit=<span class="hljs-string">&quot;%&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>)) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`}}}),Fs=new A({}),Rs=new E({props:{code:`train_50_52_ds = datasets.load_dataset("bookcorpus", split="train[50%:52%]")
train_52_54_ds = datasets.load_dataset("bookcorpus", split="train[52%:54%]")`,highlighted:`<span class="hljs-comment"># 19 records, from 500 (included) to 519 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[50%:52%]&quot;</span>)
<span class="hljs-comment"># 20 records, from 519 (included) to 539 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[52%:54%]&quot;</span>)`}}),Ms=new E({props:{code:`train_50_52pct1_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train", from_=50, to=52, unit="%", rounding="pct1_dropremainder"))
train_52_54pct1_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train",from_=52, to=54, unit="%", rounding="pct1_dropremainder"))
train_50_52pct1_ds = datasets.load_dataset("bookcorpus", split="train[50%:52%](pct1_dropremainder)")
train_52_54pct1_ds = datasets.load_dataset("bookcorpus", split="train[52%:54%](pct1_dropremainder)")`,highlighted:`<span class="hljs-comment"># 18 records, from 450 (included) to 468 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=<span class="hljs-number">50</span>, to=<span class="hljs-number">52</span>, unit=<span class="hljs-string">&quot;%&quot;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))
<span class="hljs-comment"># 18 records, from 468 (included) to 486 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>,from_=<span class="hljs-number">52</span>, to=<span class="hljs-number">54</span>, unit=<span class="hljs-string">&quot;%&quot;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))
<span class="hljs-comment"># Or equivalently:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[50%:52%](pct1_dropremainder)&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[52%:54%](pct1_dropremainder)&quot;</span>)`}}),va=new Ia({props:{warning:!0,$$slots:{default:[J_]},$$scope:{ctx:D}}}),Vs=new A({}),zs=new A({}),Ys=new E({props:{code:'dataset = load_dataset("matinf", "summarization")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;matinf&quot;</span>, <span class="hljs-string">&quot;summarization&quot;</span>)
Downloading <span class="hljs-keyword">and</span> preparing dataset matinf/summarization (download: Unknown size, generated: <span class="hljs-number">246.89</span> MiB, post-processed: Unknown size, total: <span class="hljs-number">246.89</span> MiB) to /root/.cache/huggingface/datasets/matinf/summarization/<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>/82eee5e71c3ceaf20d909bca36ff237452b4e4ab195d3be7ee1c78b53e6f540e...
AssertionError: The dataset matinf <span class="hljs-keyword">with</span> config summarization requires manual data. 
Please follow the manual download instructions: To use MATINF you have to download it manually. Please fill this google form (https://forms.gle/nkH4LVE4iNQeDzsc9). You will receive a download link <span class="hljs-keyword">and</span> a password once you complete the form. Please extract <span class="hljs-built_in">all</span> files <span class="hljs-keyword">in</span> one folder <span class="hljs-keyword">and</span> load the dataset <span class="hljs-keyword">with</span>: *datasets.load_dataset(<span class="hljs-string">&#x27;matinf&#x27;</span>, data_dir=<span class="hljs-string">&#x27;path/to/folder/folder_name&#x27;</span>)*. 
Manual data can be loaded <span class="hljs-keyword">with</span> \`datasets.load_dataset(matinf, data_dir=<span class="hljs-string">&#x27;&lt;path/to/manual/data&gt;&#x27;</span>) `}}),Js=new A({}),Bs=new E({props:{code:`class_names = ["sadness", "joy", "love", "anger", "fear", "surprise"]
emotion_features = Features({'text': Value('string'), 'label': ClassLabel(names=class_names)})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>class_names = [<span class="hljs-string">&quot;sadness&quot;</span>, <span class="hljs-string">&quot;joy&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;anger&quot;</span>, <span class="hljs-string">&quot;fear&quot;</span>, <span class="hljs-string">&quot;surprise&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>emotion_features = Features({<span class="hljs-string">&#x27;text&#x27;</span>: Value(<span class="hljs-string">&#x27;string&#x27;</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=class_names)})`}}),Qs=new E({props:{code:"dataset = load_dataset('csv', data_files=file_dict, delimiter=';', column_names=['text', 'label'], features=emotion_features)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files=file_dict, delimiter=<span class="hljs-string">&#x27;;&#x27;</span>, column_names=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>], features=emotion_features)'}}),Gs=new E({props:{code:"dataset['train'].features",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&#x27;train&#x27;</span>].features
{<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">6</span>, names=[<span class="hljs-string">&#x27;sadness&#x27;</span>, <span class="hljs-string">&#x27;joy&#x27;</span>, <span class="hljs-string">&#x27;love&#x27;</span>, <span class="hljs-string">&#x27;anger&#x27;</span>, <span class="hljs-string">&#x27;fear&#x27;</span>, <span class="hljs-string">&#x27;surprise&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Ks=new A({}),ka=new Ia({props:{warning:!0,$$slots:{default:[W_]},$$scope:{ctx:D}}}),Xs=new E({props:{code:`from datasets import load_metric
metric = load_metric('PATH/TO/MY/METRIC/SCRIPT')

# Example of typical usage
for batch in dataset:
    inputs, references = batch
    predictions = model(inputs)
    metric.add_batch(predictions=predictions, references=references)
score = metric.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;PATH/TO/MY/METRIC/SCRIPT&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Example of typical usage</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> dataset:
<span class="hljs-meta">... </span>    inputs, references = batch
<span class="hljs-meta">... </span>    predictions = model(inputs)
<span class="hljs-meta">... </span>    metric.add_batch(predictions=predictions, references=references)
<span class="hljs-meta">&gt;&gt;&gt; </span>score = metric.compute()`}}),Ea=new Ia({props:{$$slots:{default:[B_]},$$scope:{ctx:D}}}),Zs=new A({}),te=new E({props:{code:`from datasets import load_metric
metric = load_metric('bleurt', name='bleurt-base-128')
metric = load_metric('bleurt', name='bleurt-base-512')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">metric = load_metric(<span class="hljs-string">&#x27;bleurt&#x27;</span>, name=<span class="hljs-string">&#x27;bleurt-base-128&#x27;</span>)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">metric = load_metric(<span class="hljs-string">&#x27;bleurt&#x27;</span>, name=<span class="hljs-string">&#x27;bleurt-base-512&#x27;</span>)</span>`}}),ae=new A({}),le=new E({props:{code:`from datasets import load_metric
metric = load_metric('glue', 'mrpc', num_process=num_process, process_id=rank)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, num_process=num_process, process_id=rank)`}}),Aa=new Ia({props:{$$slots:{default:[Q_]},$$scope:{ctx:D}}}),oe=new E({props:{code:`from datasets import load_metric
metric = load_metric('glue', 'mrpc', num_process=num_process, process_id=process_id, experiment_id="My_experiment_10")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, num_process=num_process, process_id=process_id, experiment_id=<span class="hljs-string">&quot;My_experiment_10&quot;</span>)`}}),{c(){h=l("meta"),k=d(),y=l("h1"),b=l("a"),q=l("span"),u(w.$$.fragment),j=d(),P=l("span"),C=r("Load"),T=d(),F=l("p"),R=r("Your data can be stored in various places; they can be on your local machine\u2019s disk, in a Github repository, and in in-memory data structures like Python dictionaries and Pandas DataFrames. Wherever a dataset is stored, \u{1F917} Datasets can help you load it."),St=d(),Q=l("p"),G=r("This guide will show you how to load a dataset from:"),Dt=d(),S=l("ul"),J=l("li"),Ca=r("The Hub without a dataset loading script"),Oa=d(),W=l("li"),La=r("Local loading script"),Ha=d(),M=l("li"),Fa=r("Local files"),Ra=d(),B=l("li"),x=r("In-memory data"),re=d(),Tt=l("li"),ie=r("Offline"),pe=d(),Nt=l("li"),de=r("A specific slice of a split"),Ma=d(),O=l("p"),gp=r("For more details specific to loading other dataset modalities, take a look at the "),Va=l("a"),vp=r("load audio dataset guide"),$p=r(", the "),za=l("a"),yp=r("load image dataset guide"),wp=r(", or the "),Ua=l("a"),jp=r("load text dataset guide"),bp=r("."),Zo=d(),fe=l("a"),tn=d(),nt=l("h2"),It=l("a"),ml=l("span"),u(Ya.$$.fragment),qp=d(),_l=l("span"),kp=r("Hugging Face Hub"),an=d(),K=l("p"),Ep=r("Datasets are loaded from a dataset loading script that downloads and generates the dataset. However, you can also load a dataset from any dataset repository on the Hub without a loading script! Begin by "),ce=l("a"),Pp=r("creating a dataset repository"),xp=r(" and upload your data files. Now you can use the "),he=l("a"),Ap=r("load_dataset()"),Sp=r(" function to load the dataset."),sn=d(),Ct=l("p"),Dp=r("For example, try loading the files from this "),Ja=l("a"),Tp=r("demo repository"),Np=r(" by providing the repository namespace and dataset name. This dataset repository contains CSV files, and the code below loads the dataset from the CSV files:"),en=d(),u(Wa.$$.fragment),ln=d(),Ot=l("p"),Ip=r("Some datasets may have more than one version based on Git tags, branches, or commits. Use the "),gl=l("code"),Cp=r("revision"),Op=r(" parameter to specify the dataset version you want to load:"),on=d(),u(Ba.$$.fragment),nn=d(),u(Lt.$$.fragment),rn=d(),N=l("p"),Lp=r("A dataset without a loading script by default loads all the data into the "),vl=l("code"),Hp=r("train"),Fp=r(" split. Use the "),$l=l("code"),Rp=r("data_files"),Mp=r(" parameter to map data files to splits like "),yl=l("code"),Vp=r("train"),zp=r(", "),wl=l("code"),Up=r("validation"),Yp=r(" and "),jl=l("code"),Jp=r("test"),Wp=r(":"),pn=d(),u(Qa.$$.fragment),dn=d(),u(Ht.$$.fragment),fn=d(),X=l("p"),Bp=r("You can also load a specific subset of the files with the "),bl=l("code"),Qp=r("data_files"),Gp=r(" or "),ql=l("code"),Kp=r("data_dir"),Xp=r(" parameter. These parameters can accept a relative path which resolves to the base path corresponding to where the dataset is loaded from."),cn=d(),u(Ga.$$.fragment),hn=d(),Ft=l("p"),Zp=r("The "),kl=l("code"),td=r("split"),ad=r(" parameter can also map a data file to a specific split:"),un=d(),u(Ka.$$.fragment),mn=d(),rt=l("h2"),Rt=l("a"),El=l("span"),u(Xa.$$.fragment),sd=d(),Pl=l("span"),ed=r("Local loading script"),_n=d(),Mt=l("p"),ld=r("You may have a \u{1F917} Datasets loading script locally on your computer. In this case, load the dataset by passing one of the following paths to "),ue=l("a"),od=r("load_dataset()"),nd=r(":"),gn=d(),Vt=l("ul"),xl=l("li"),rd=r("The local path to the loading script file."),id=d(),Al=l("li"),pd=r("The local path to the directory containing the loading script file (only if the script file has the same name as the directory)."),vn=d(),u(Za.$$.fragment),$n=d(),it=l("h3"),zt=l("a"),Sl=l("span"),u(ts.$$.fragment),dd=d(),Dl=l("span"),fd=r("Edit loading script"),yn=d(),me=l("p"),cd=r("You can also edit a loading script from the Hub to add your own modifications. Download the dataset repository locally so any data files referenced by a relative path in the loading script can be loaded:"),wn=d(),u(as.$$.fragment),jn=d(),Ut=l("p"),hd=r("Make your edits to the loading script and then load it by passing its local path to "),_e=l("a"),ud=r("load_dataset()"),md=r(":"),bn=d(),u(ss.$$.fragment),qn=d(),pt=l("h2"),Yt=l("a"),Tl=l("span"),u(es.$$.fragment),_d=d(),Nl=l("span"),gd=r("Local and remote files"),kn=d(),I=l("p"),vd=r("Datasets can be loaded from local files stored on your computer and from remote files. The datasets are most likely stored as a "),Il=l("code"),$d=r("csv"),yd=r(", "),Cl=l("code"),wd=r("json"),jd=r(", "),Ol=l("code"),bd=r("txt"),qd=r(" or "),Ll=l("code"),kd=r("parquet"),Ed=r(" file. The "),ge=l("a"),Pd=r("load_dataset()"),xd=r(" function can load each of these file types."),En=d(),dt=l("h3"),Jt=l("a"),Hl=l("span"),u(ls.$$.fragment),Ad=d(),Fl=l("span"),Sd=r("CSV"),Pn=d(),ve=l("p"),Dd=r("\u{1F917} Datasets can read a dataset made up of one or several CSV files:"),xn=d(),u(os.$$.fragment),An=d(),$e=l("p"),Td=r("If you have more than one CSV file:"),Sn=d(),u(ns.$$.fragment),Dn=d(),ye=l("p"),Nd=r("You can also map the training and test splits to specific CSV files:"),Tn=d(),u(rs.$$.fragment),Nn=d(),we=l("p"),Id=r("To load remote CSV files via HTTP, pass the URLs instead:"),In=d(),u(is.$$.fragment),Cn=d(),je=l("p"),Cd=r("To load zipped CSV files:"),On=d(),u(ps.$$.fragment),Ln=d(),ft=l("h3"),Wt=l("a"),Rl=l("span"),u(ds.$$.fragment),Od=d(),Ml=l("span"),Ld=r("JSON"),Hn=d(),Bt=l("p"),Hd=r("JSON files are loaded directly with "),be=l("a"),Fd=r("load_dataset()"),Rd=r(" as shown below:"),Fn=d(),u(fs.$$.fragment),Rn=d(),qe=l("p"),Md=r("JSON files have diverse formats, but we think the most efficient format is to have multiple JSON objects; each line represents an individual row of data. For example:"),Mn=d(),u(cs.$$.fragment),Vn=d(),Qt=l("p"),Vd=r("Another JSON format you may encounter is a nested field, in which case you\u2019ll need to specify the "),Vl=l("code"),zd=r("field"),Ud=r(" argument as shown in the following:"),zn=d(),u(hs.$$.fragment),Un=d(),ke=l("p"),Yd=r("To load remote JSON files via HTTP, pass the URLs instead:"),Yn=d(),u(us.$$.fragment),Jn=d(),Ee=l("p"),Jd=r("While these are the most common JSON formats, you\u2019ll see other datasets that are formatted differently. \u{1F917} Datasets recognizes these other formats and will fallback accordingly on the Python JSON loading methods to handle them."),Wn=d(),ct=l("h3"),Gt=l("a"),zl=l("span"),u(ms.$$.fragment),Wd=d(),Ul=l("span"),Bd=r("Parquet"),Bn=d(),Pe=l("p"),Qd=r("Parquet files are stored in a columnar format, unlike row-based files like a CSV. Large datasets may be stored in a Parquet file because it is more efficient and faster at returning your query."),Qn=d(),xe=l("p"),Gd=r("To load a Parquet file:"),Gn=d(),u(_s.$$.fragment),Kn=d(),Ae=l("p"),Kd=r("To load remote Parquet files via HTTP, pass the URLs instead:"),Xn=d(),u(gs.$$.fragment),Zn=d(),ht=l("h3"),Kt=l("a"),Yl=l("span"),u(vs.$$.fragment),Xd=d(),Jl=l("span"),Zd=r("SQL"),tr=d(),Xt=l("p"),tf=r("Read database contents with "),Se=l("a"),af=r("Dataset.from_sql()"),sf=r(". Both table names and queries are supported."),ar=d(),De=l("p"),ef=r("For example, a table from a SQLite file can be loaded with:"),sr=d(),u($s.$$.fragment),er=d(),Te=l("p"),lf=r("Use a query for a more precise read:"),lr=d(),u(ys.$$.fragment),or=d(),u(Zt.$$.fragment),nr=d(),ut=l("h2"),ta=l("a"),Wl=l("span"),u(ws.$$.fragment),of=d(),Bl=l("span"),nf=r("Multiprocessing"),rr=d(),Ne=l("p"),rf=r("When a dataset is made of several files (that we call \u201Cshards\u201D), it is possible to significantly speed up the dataset downloading and preparation step."),ir=d(),aa=l("p"),pf=r("You can choose how many processes you\u2019d like to use to prepare a dataset in parallel using "),Ql=l("code"),df=r("num_proc"),ff=r(`.
In this case, each process is given a subset of shards to prepare:`),pr=d(),u(js.$$.fragment),dr=d(),mt=l("h2"),sa=l("a"),Gl=l("span"),u(bs.$$.fragment),cf=d(),Kl=l("span"),hf=r("In-memory data"),fr=d(),ea=l("p"),uf=r("\u{1F917} Datasets will also allow you to create a "),Ie=l("a"),mf=r("Dataset"),_f=r(" directly from in-memory data structures like Python dictionaries and Pandas DataFrames."),cr=d(),_t=l("h3"),la=l("a"),Xl=l("span"),u(qs.$$.fragment),gf=d(),Zl=l("span"),vf=r("Python dictionary"),hr=d(),oa=l("p"),$f=r("Load Python dictionaries with "),Ce=l("a"),yf=r("from_dict()"),wf=r(":"),ur=d(),u(ks.$$.fragment),mr=d(),gt=l("h3"),na=l("a"),to=l("span"),u(Es.$$.fragment),jf=d(),ao=l("span"),bf=r("Python list of dictionaries"),_r=d(),ra=l("p"),qf=r("Load a list of Python dictionaries with "),so=l("code"),kf=r("from_list()"),Ef=r(":"),gr=d(),u(Ps.$$.fragment),vr=d(),vt=l("h3"),ia=l("a"),eo=l("span"),u(xs.$$.fragment),Pf=d(),lo=l("span"),xf=r("Python generator"),$r=d(),pa=l("p"),Af=r("Create a dataset from a Python generator with "),Oe=l("a"),Sf=r("from_generator()"),Df=r(":"),yr=d(),u(As.$$.fragment),wr=d(),Le=l("p"),Tf=r("This approach supports loading data larger than available memory."),jr=d(),$t=l("h3"),da=l("a"),oo=l("span"),u(Ss.$$.fragment),Nf=d(),no=l("span"),If=r("Pandas DataFrame"),br=d(),fa=l("p"),Cf=r("Load Pandas DataFrames with "),He=l("a"),Of=r("from_pandas()"),Lf=r(":"),qr=d(),u(Ds.$$.fragment),kr=d(),u(ca.$$.fragment),Er=d(),yt=l("h2"),ha=l("a"),ro=l("span"),u(Ts.$$.fragment),Hf=d(),io=l("span"),Ff=r("Offline"),Pr=d(),Fe=l("p"),Rf=r("Even if you don\u2019t have an internet connection, it is still possible to load a dataset. As long as you\u2019ve downloaded a dataset from the Hub repository before, it should be cached. This means you can reload the dataset from the cache and use it offline."),xr=d(),Z=l("p"),Mf=r("If you know you won\u2019t have internet access, you can run \u{1F917} Datasets in full offline mode. This saves time because instead of waiting for the Dataset builder download to time out, \u{1F917} Datasets will look directly in the cache. Set the environment variable "),po=l("code"),Vf=r("HF_DATASETS_OFFLINE"),zf=r(" to "),fo=l("code"),Uf=r("1"),Yf=r(" to enable full offline mode."),Ar=d(),wt=l("h2"),ua=l("a"),co=l("span"),u(Ns.$$.fragment),Jf=d(),ho=l("span"),Wf=r("Slice splits"),Sr=d(),tt=l("p"),Bf=r("You can also choose only to load specific slices of a split. There are two options for slicing a split: using strings or the "),Re=l("a"),Qf=r("ReadInstruction"),Gf=r(" API. Strings are more compact and readable for simple cases, while "),Me=l("a"),Kf=r("ReadInstruction"),Xf=r(" is easier to use with variable slicing parameters."),Dr=d(),at=l("p"),Zf=r("Concatenate a "),uo=l("code"),tc=r("train"),ac=r(" and "),mo=l("code"),sc=r("test"),ec=r(" split by:"),Tr=d(),u(Is.$$.fragment),Nr=d(),ma=l("p"),lc=r("Select specific rows of the "),_o=l("code"),oc=r("train"),nc=r(" split:"),Ir=d(),u(Cs.$$.fragment),Cr=d(),Ve=l("p"),rc=r("Or select a percentage of a split with:"),Or=d(),u(Os.$$.fragment),Lr=d(),ze=l("p"),ic=r("Select a combination of percentages from each split:"),Hr=d(),u(Ls.$$.fragment),Fr=d(),Ue=l("p"),pc=r("Finally, you can even create cross-validated splits. The example below creates 10-fold cross-validated splits. Each validation dataset is a 10% chunk, and the training dataset makes up the remaining complementary 90% chunk:"),Rr=d(),u(Hs.$$.fragment),Mr=d(),jt=l("h3"),_a=l("a"),go=l("span"),u(Fs.$$.fragment),dc=d(),vo=l("span"),fc=r("Percent slicing and rounding"),Vr=d(),Ye=l("p"),cc=r("The default behavior is to round the boundaries to the nearest integer for datasets where the requested slice boundaries do not divide evenly by 100. As shown below, some slices may contain more examples than others. For instance, if the following train split includes 999 records, then:"),zr=d(),u(Rs.$$.fragment),Ur=d(),ga=l("p"),hc=r("If you want equal sized splits, use "),$o=l("code"),uc=r("pct1_dropremainder"),mc=r(" rounding instead. This treats the specified percentage boundaries as multiples of 1%."),Yr=d(),u(Ms.$$.fragment),Jr=d(),u(va.$$.fragment),Wr=d(),Je=l("a"),Br=d(),bt=l("h2"),$a=l("a"),yo=l("span"),u(Vs.$$.fragment),_c=d(),wo=l("span"),gc=r("Troubleshooting"),Qr=d(),We=l("p"),vc=r("Sometimes, you may get unexpected results when you load a dataset. Two of the most common issues you may encounter are manually downloading a dataset and specifying features of a dataset."),Gr=d(),qt=l("h3"),ya=l("a"),jo=l("span"),u(zs.$$.fragment),$c=d(),bo=l("span"),yc=r("Manual download"),Kr=d(),V=l("p"),wc=r("Certain datasets require you to manually download the dataset files due to licensing incompatibility or if the files are hidden behind a login page. This causes "),Be=l("a"),jc=r("load_dataset()"),bc=r(" to throw an "),qo=l("code"),qc=r("AssertionError"),kc=r(". But \u{1F917} Datasets provides detailed instructions for downloading the missing files. After you\u2019ve downloaded the files, use the "),ko=l("code"),Ec=r("data_dir"),Pc=r(" argument to specify the path to the files you just downloaded."),Xr=d(),wa=l("p"),xc=r("For example, if you try to download a configuration from the "),Us=l("a"),Ac=r("MATINF"),Sc=r(" dataset:"),Zr=d(),u(Ys.$$.fragment),ti=d(),H=l("p"),Dc=r("If you\u2019ve already downloaded a dataset from the "),Eo=l("em"),Tc=r("Hub with a loading script"),Nc=r(" to your computer, then you need to pass an absolute path to the "),Po=l("code"),Ic=r("data_dir"),Cc=r(" or "),xo=l("code"),Oc=r("data_files"),Lc=r(" parameter to load that dataset. Otherwise, if you pass a relative path, "),Qe=l("a"),Hc=r("load_dataset()"),Fc=r(" will load the directory from the repository on the Hub instead of the local directory."),ai=d(),kt=l("h3"),ja=l("a"),Ao=l("span"),u(Js.$$.fragment),Rc=d(),So=l("span"),Mc=r("Specify features"),si=d(),z=l("p"),Vc=r("When you create a dataset from local files, the "),Ge=l("a"),zc=r("Features"),Uc=r(" are automatically inferred by "),Ws=l("a"),Yc=r("Apache Arrow"),Jc=r(". However, the dataset\u2019s features may not always align with your expectations, or you may want to define the features yourself. The following example shows how you can add custom labels with the "),Ke=l("a"),Wc=r("ClassLabel"),Bc=r(" feature."),ei=d(),ba=l("p"),Qc=r("Start by defining your own labels with the "),Xe=l("a"),Gc=r("Features"),Kc=r(" class:"),li=d(),u(Bs.$$.fragment),oi=d(),st=l("p"),Xc=r("Next, specify the "),Do=l("code"),Zc=r("features"),th=r(" parameter in "),Ze=l("a"),ah=r("load_dataset()"),sh=r(" with the features you just created:"),ni=d(),u(Qs.$$.fragment),ri=d(),tl=l("p"),eh=r("Now when you look at your dataset features, you can see it uses the custom labels you defined:"),ii=d(),u(Gs.$$.fragment),pi=d(),Et=l("h2"),qa=l("a"),To=l("span"),u(Ks.$$.fragment),lh=d(),No=l("span"),oh=r("Metrics"),di=d(),u(ka.$$.fragment),fi=d(),al=l("p"),nh=r("When the metric you want to use is not supported by \u{1F917} Datasets, you can write and use your own metric script. Load your metric by providing the path to your local metric loading script:"),ci=d(),u(Xs.$$.fragment),hi=d(),u(Ea.$$.fragment),ui=d(),Pt=l("h3"),Pa=l("a"),Io=l("span"),u(Zs.$$.fragment),rh=d(),Co=l("span"),ih=r("Load configurations"),mi=d(),et=l("p"),ph=r("It is possible for a metric to have different configurations. The configurations are stored in the "),Oo=l("code"),dh=r("config_name"),fh=r(" parameter in "),sl=l("a"),ch=r("MetricInfo"),hh=r(" attribute. When you load a metric, provide the configuration name as shown in the following:"),_i=d(),u(te.$$.fragment),gi=d(),xt=l("h3"),xa=l("a"),Lo=l("span"),u(ae.$$.fragment),uh=d(),Ho=l("span"),mh=r("Distributed setup"),vi=d(),el=l("p"),_h=r("When working in a distributed or parallel processing environment, loading and computing a metric can be tricky because these processes are executed in parallel on separate subsets of the data. \u{1F917} Datasets supports distributed usage with a few additional arguments when you load a metric."),$i=d(),ll=l("p"),gh=r("For example, imagine you are training and evaluating on eight parallel processes. Here\u2019s how you would load a metric in this distributed setting:"),yi=d(),lt=l("ol"),Fo=l("li"),se=l("p"),vh=r("Define the total number of processes with the "),Ro=l("code"),$h=r("num_process"),yh=r(" argument."),wh=d(),Mo=l("li"),At=l("p"),jh=r("Set the process "),Vo=l("code"),bh=r("rank"),qh=r(" as an integer between zero and "),zo=l("code"),kh=r("num_process - 1"),Eh=r("."),Ph=d(),Uo=l("li"),ee=l("p"),xh=r("Load your metric with "),ol=l("a"),Ah=r("load_metric()"),Sh=r(" with these arguments:"),wi=d(),u(le.$$.fragment),ji=d(),u(Aa.$$.fragment),bi=d(),Sa=l("p"),Dh=r("In some instances, you may be simultaneously running multiple independent distributed evaluations on the same server and files. To avoid any conflicts, it is important to provide an "),Yo=l("code"),Th=r("experiment_id"),Nh=r(" to distinguish the separate evaluations:"),qi=d(),u(oe.$$.fragment),this.h()},l(t){const e=R_('[data-svelte="svelte-1phssyn"]',document.head);h=o(e,"META",{name:!0,content:!0}),e.forEach(a),k=f(t),y=o(t,"H1",{class:!0});var ne=n(y);b=o(ne,"A",{id:!0,class:!0,href:!0});var Jo=n(b);q=o(Jo,"SPAN",{});var Wo=n(q);m(w.$$.fragment,Wo),Wo.forEach(a),Jo.forEach(a),j=f(ne),P=o(ne,"SPAN",{});var Bo=n(P);C=i(Bo,"Load"),Bo.forEach(a),ne.forEach(a),T=f(t),F=o(t,"P",{});var Qo=n(F);R=i(Qo,"Your data can be stored in various places; they can be on your local machine\u2019s disk, in a Github repository, and in in-memory data structures like Python dictionaries and Pandas DataFrames. Wherever a dataset is stored, \u{1F917} Datasets can help you load it."),Qo.forEach(a),St=f(t),Q=o(t,"P",{});var Go=n(Q);G=i(Go,"This guide will show you how to load a dataset from:"),Go.forEach(a),Dt=f(t),S=o(t,"UL",{});var L=n(S);J=o(L,"LI",{});var Ko=n(J);Ca=i(Ko,"The Hub without a dataset loading script"),Ko.forEach(a),Oa=f(L),W=o(L,"LI",{});var Ih=n(W);La=i(Ih,"Local loading script"),Ih.forEach(a),Ha=f(L),M=o(L,"LI",{});var Ch=n(M);Fa=i(Ch,"Local files"),Ch.forEach(a),Ra=f(L),B=o(L,"LI",{});var Oh=n(B);x=i(Oh,"In-memory data"),Oh.forEach(a),re=f(L),Tt=o(L,"LI",{});var Lh=n(Tt);ie=i(Lh,"Offline"),Lh.forEach(a),pe=f(L),Nt=o(L,"LI",{});var Hh=n(Nt);de=i(Hh,"A specific slice of a split"),Hh.forEach(a),L.forEach(a),Ma=f(t),O=o(t,"P",{});var Da=n(O);gp=i(Da,"For more details specific to loading other dataset modalities, take a look at the "),Va=o(Da,"A",{class:!0,href:!0});var Fh=n(Va);vp=i(Fh,"load audio dataset guide"),Fh.forEach(a),$p=i(Da,", the "),za=o(Da,"A",{class:!0,href:!0});var Rh=n(za);yp=i(Rh,"load image dataset guide"),Rh.forEach(a),wp=i(Da,", or the "),Ua=o(Da,"A",{class:!0,href:!0});var Mh=n(Ua);jp=i(Mh,"load text dataset guide"),Mh.forEach(a),bp=i(Da,"."),Da.forEach(a),Zo=f(t),fe=o(t,"A",{id:!0}),n(fe).forEach(a),tn=f(t),nt=o(t,"H2",{class:!0});var Ei=n(nt);It=o(Ei,"A",{id:!0,class:!0,href:!0});var Vh=n(It);ml=o(Vh,"SPAN",{});var zh=n(ml);m(Ya.$$.fragment,zh),zh.forEach(a),Vh.forEach(a),qp=f(Ei),_l=o(Ei,"SPAN",{});var Uh=n(_l);kp=i(Uh,"Hugging Face Hub"),Uh.forEach(a),Ei.forEach(a),an=f(t),K=o(t,"P",{});var nl=n(K);Ep=i(nl,"Datasets are loaded from a dataset loading script that downloads and generates the dataset. However, you can also load a dataset from any dataset repository on the Hub without a loading script! Begin by "),ce=o(nl,"A",{href:!0});var Yh=n(ce);Pp=i(Yh,"creating a dataset repository"),Yh.forEach(a),xp=i(nl," and upload your data files. Now you can use the "),he=o(nl,"A",{href:!0});var Jh=n(he);Ap=i(Jh,"load_dataset()"),Jh.forEach(a),Sp=i(nl," function to load the dataset."),nl.forEach(a),sn=f(t),Ct=o(t,"P",{});var Pi=n(Ct);Dp=i(Pi,"For example, try loading the files from this "),Ja=o(Pi,"A",{href:!0,rel:!0});var Wh=n(Ja);Tp=i(Wh,"demo repository"),Wh.forEach(a),Np=i(Pi," by providing the repository namespace and dataset name. This dataset repository contains CSV files, and the code below loads the dataset from the CSV files:"),Pi.forEach(a),en=f(t),m(Wa.$$.fragment,t),ln=f(t),Ot=o(t,"P",{});var xi=n(Ot);Ip=i(xi,"Some datasets may have more than one version based on Git tags, branches, or commits. Use the "),gl=o(xi,"CODE",{});var Bh=n(gl);Cp=i(Bh,"revision"),Bh.forEach(a),Op=i(xi," parameter to specify the dataset version you want to load:"),xi.forEach(a),on=f(t),m(Ba.$$.fragment,t),nn=f(t),m(Lt.$$.fragment,t),rn=f(t),N=o(t,"P",{});var U=n(N);Lp=i(U,"A dataset without a loading script by default loads all the data into the "),vl=o(U,"CODE",{});var Qh=n(vl);Hp=i(Qh,"train"),Qh.forEach(a),Fp=i(U," split. Use the "),$l=o(U,"CODE",{});var Gh=n($l);Rp=i(Gh,"data_files"),Gh.forEach(a),Mp=i(U," parameter to map data files to splits like "),yl=o(U,"CODE",{});var Kh=n(yl);Vp=i(Kh,"train"),Kh.forEach(a),zp=i(U,", "),wl=o(U,"CODE",{});var Xh=n(wl);Up=i(Xh,"validation"),Xh.forEach(a),Yp=i(U," and "),jl=o(U,"CODE",{});var Zh=n(jl);Jp=i(Zh,"test"),Zh.forEach(a),Wp=i(U,":"),U.forEach(a),pn=f(t),m(Qa.$$.fragment,t),dn=f(t),m(Ht.$$.fragment,t),fn=f(t),X=o(t,"P",{});var rl=n(X);Bp=i(rl,"You can also load a specific subset of the files with the "),bl=o(rl,"CODE",{});var tu=n(bl);Qp=i(tu,"data_files"),tu.forEach(a),Gp=i(rl," or "),ql=o(rl,"CODE",{});var au=n(ql);Kp=i(au,"data_dir"),au.forEach(a),Xp=i(rl," parameter. These parameters can accept a relative path which resolves to the base path corresponding to where the dataset is loaded from."),rl.forEach(a),cn=f(t),m(Ga.$$.fragment,t),hn=f(t),Ft=o(t,"P",{});var Ai=n(Ft);Zp=i(Ai,"The "),kl=o(Ai,"CODE",{});var su=n(kl);td=i(su,"split"),su.forEach(a),ad=i(Ai," parameter can also map a data file to a specific split:"),Ai.forEach(a),un=f(t),m(Ka.$$.fragment,t),mn=f(t),rt=o(t,"H2",{class:!0});var Si=n(rt);Rt=o(Si,"A",{id:!0,class:!0,href:!0});var eu=n(Rt);El=o(eu,"SPAN",{});var lu=n(El);m(Xa.$$.fragment,lu),lu.forEach(a),eu.forEach(a),sd=f(Si),Pl=o(Si,"SPAN",{});var ou=n(Pl);ed=i(ou,"Local loading script"),ou.forEach(a),Si.forEach(a),_n=f(t),Mt=o(t,"P",{});var Di=n(Mt);ld=i(Di,"You may have a \u{1F917} Datasets loading script locally on your computer. In this case, load the dataset by passing one of the following paths to "),ue=o(Di,"A",{href:!0});var nu=n(ue);od=i(nu,"load_dataset()"),nu.forEach(a),nd=i(Di,":"),Di.forEach(a),gn=f(t),Vt=o(t,"UL",{});var Ti=n(Vt);xl=o(Ti,"LI",{});var ru=n(xl);rd=i(ru,"The local path to the loading script file."),ru.forEach(a),id=f(Ti),Al=o(Ti,"LI",{});var iu=n(Al);pd=i(iu,"The local path to the directory containing the loading script file (only if the script file has the same name as the directory)."),iu.forEach(a),Ti.forEach(a),vn=f(t),m(Za.$$.fragment,t),$n=f(t),it=o(t,"H3",{class:!0});var Ni=n(it);zt=o(Ni,"A",{id:!0,class:!0,href:!0});var pu=n(zt);Sl=o(pu,"SPAN",{});var du=n(Sl);m(ts.$$.fragment,du),du.forEach(a),pu.forEach(a),dd=f(Ni),Dl=o(Ni,"SPAN",{});var fu=n(Dl);fd=i(fu,"Edit loading script"),fu.forEach(a),Ni.forEach(a),yn=f(t),me=o(t,"P",{});var cu=n(me);cd=i(cu,"You can also edit a loading script from the Hub to add your own modifications. Download the dataset repository locally so any data files referenced by a relative path in the loading script can be loaded:"),cu.forEach(a),wn=f(t),m(as.$$.fragment,t),jn=f(t),Ut=o(t,"P",{});var Ii=n(Ut);hd=i(Ii,"Make your edits to the loading script and then load it by passing its local path to "),_e=o(Ii,"A",{href:!0});var hu=n(_e);ud=i(hu,"load_dataset()"),hu.forEach(a),md=i(Ii,":"),Ii.forEach(a),bn=f(t),m(ss.$$.fragment,t),qn=f(t),pt=o(t,"H2",{class:!0});var Ci=n(pt);Yt=o(Ci,"A",{id:!0,class:!0,href:!0});var uu=n(Yt);Tl=o(uu,"SPAN",{});var mu=n(Tl);m(es.$$.fragment,mu),mu.forEach(a),uu.forEach(a),_d=f(Ci),Nl=o(Ci,"SPAN",{});var _u=n(Nl);gd=i(_u,"Local and remote files"),_u.forEach(a),Ci.forEach(a),kn=f(t),I=o(t,"P",{});var Y=n(I);vd=i(Y,"Datasets can be loaded from local files stored on your computer and from remote files. The datasets are most likely stored as a "),Il=o(Y,"CODE",{});var gu=n(Il);$d=i(gu,"csv"),gu.forEach(a),yd=i(Y,", "),Cl=o(Y,"CODE",{});var vu=n(Cl);wd=i(vu,"json"),vu.forEach(a),jd=i(Y,", "),Ol=o(Y,"CODE",{});var $u=n(Ol);bd=i($u,"txt"),$u.forEach(a),qd=i(Y," or "),Ll=o(Y,"CODE",{});var yu=n(Ll);kd=i(yu,"parquet"),yu.forEach(a),Ed=i(Y," file. The "),ge=o(Y,"A",{href:!0});var wu=n(ge);Pd=i(wu,"load_dataset()"),wu.forEach(a),xd=i(Y," function can load each of these file types."),Y.forEach(a),En=f(t),dt=o(t,"H3",{class:!0});var Oi=n(dt);Jt=o(Oi,"A",{id:!0,class:!0,href:!0});var ju=n(Jt);Hl=o(ju,"SPAN",{});var bu=n(Hl);m(ls.$$.fragment,bu),bu.forEach(a),ju.forEach(a),Ad=f(Oi),Fl=o(Oi,"SPAN",{});var qu=n(Fl);Sd=i(qu,"CSV"),qu.forEach(a),Oi.forEach(a),Pn=f(t),ve=o(t,"P",{});var ku=n(ve);Dd=i(ku,"\u{1F917} Datasets can read a dataset made up of one or several CSV files:"),ku.forEach(a),xn=f(t),m(os.$$.fragment,t),An=f(t),$e=o(t,"P",{});var Eu=n($e);Td=i(Eu,"If you have more than one CSV file:"),Eu.forEach(a),Sn=f(t),m(ns.$$.fragment,t),Dn=f(t),ye=o(t,"P",{});var Pu=n(ye);Nd=i(Pu,"You can also map the training and test splits to specific CSV files:"),Pu.forEach(a),Tn=f(t),m(rs.$$.fragment,t),Nn=f(t),we=o(t,"P",{});var xu=n(we);Id=i(xu,"To load remote CSV files via HTTP, pass the URLs instead:"),xu.forEach(a),In=f(t),m(is.$$.fragment,t),Cn=f(t),je=o(t,"P",{});var Au=n(je);Cd=i(Au,"To load zipped CSV files:"),Au.forEach(a),On=f(t),m(ps.$$.fragment,t),Ln=f(t),ft=o(t,"H3",{class:!0});var Li=n(ft);Wt=o(Li,"A",{id:!0,class:!0,href:!0});var Su=n(Wt);Rl=o(Su,"SPAN",{});var Du=n(Rl);m(ds.$$.fragment,Du),Du.forEach(a),Su.forEach(a),Od=f(Li),Ml=o(Li,"SPAN",{});var Tu=n(Ml);Ld=i(Tu,"JSON"),Tu.forEach(a),Li.forEach(a),Hn=f(t),Bt=o(t,"P",{});var Hi=n(Bt);Hd=i(Hi,"JSON files are loaded directly with "),be=o(Hi,"A",{href:!0});var Nu=n(be);Fd=i(Nu,"load_dataset()"),Nu.forEach(a),Rd=i(Hi," as shown below:"),Hi.forEach(a),Fn=f(t),m(fs.$$.fragment,t),Rn=f(t),qe=o(t,"P",{});var Iu=n(qe);Md=i(Iu,"JSON files have diverse formats, but we think the most efficient format is to have multiple JSON objects; each line represents an individual row of data. For example:"),Iu.forEach(a),Mn=f(t),m(cs.$$.fragment,t),Vn=f(t),Qt=o(t,"P",{});var Fi=n(Qt);Vd=i(Fi,"Another JSON format you may encounter is a nested field, in which case you\u2019ll need to specify the "),Vl=o(Fi,"CODE",{});var Cu=n(Vl);zd=i(Cu,"field"),Cu.forEach(a),Ud=i(Fi," argument as shown in the following:"),Fi.forEach(a),zn=f(t),m(hs.$$.fragment,t),Un=f(t),ke=o(t,"P",{});var Ou=n(ke);Yd=i(Ou,"To load remote JSON files via HTTP, pass the URLs instead:"),Ou.forEach(a),Yn=f(t),m(us.$$.fragment,t),Jn=f(t),Ee=o(t,"P",{});var Lu=n(Ee);Jd=i(Lu,"While these are the most common JSON formats, you\u2019ll see other datasets that are formatted differently. \u{1F917} Datasets recognizes these other formats and will fallback accordingly on the Python JSON loading methods to handle them."),Lu.forEach(a),Wn=f(t),ct=o(t,"H3",{class:!0});var Ri=n(ct);Gt=o(Ri,"A",{id:!0,class:!0,href:!0});var Hu=n(Gt);zl=o(Hu,"SPAN",{});var Fu=n(zl);m(ms.$$.fragment,Fu),Fu.forEach(a),Hu.forEach(a),Wd=f(Ri),Ul=o(Ri,"SPAN",{});var Ru=n(Ul);Bd=i(Ru,"Parquet"),Ru.forEach(a),Ri.forEach(a),Bn=f(t),Pe=o(t,"P",{});var Mu=n(Pe);Qd=i(Mu,"Parquet files are stored in a columnar format, unlike row-based files like a CSV. Large datasets may be stored in a Parquet file because it is more efficient and faster at returning your query."),Mu.forEach(a),Qn=f(t),xe=o(t,"P",{});var Vu=n(xe);Gd=i(Vu,"To load a Parquet file:"),Vu.forEach(a),Gn=f(t),m(_s.$$.fragment,t),Kn=f(t),Ae=o(t,"P",{});var zu=n(Ae);Kd=i(zu,"To load remote Parquet files via HTTP, pass the URLs instead:"),zu.forEach(a),Xn=f(t),m(gs.$$.fragment,t),Zn=f(t),ht=o(t,"H3",{class:!0});var Mi=n(ht);Kt=o(Mi,"A",{id:!0,class:!0,href:!0});var Uu=n(Kt);Yl=o(Uu,"SPAN",{});var Yu=n(Yl);m(vs.$$.fragment,Yu),Yu.forEach(a),Uu.forEach(a),Xd=f(Mi),Jl=o(Mi,"SPAN",{});var Ju=n(Jl);Zd=i(Ju,"SQL"),Ju.forEach(a),Mi.forEach(a),tr=f(t),Xt=o(t,"P",{});var Vi=n(Xt);tf=i(Vi,"Read database contents with "),Se=o(Vi,"A",{href:!0});var Wu=n(Se);af=i(Wu,"Dataset.from_sql()"),Wu.forEach(a),sf=i(Vi,". Both table names and queries are supported."),Vi.forEach(a),ar=f(t),De=o(t,"P",{});var Bu=n(De);ef=i(Bu,"For example, a table from a SQLite file can be loaded with:"),Bu.forEach(a),sr=f(t),m($s.$$.fragment,t),er=f(t),Te=o(t,"P",{});var Qu=n(Te);lf=i(Qu,"Use a query for a more precise read:"),Qu.forEach(a),lr=f(t),m(ys.$$.fragment,t),or=f(t),m(Zt.$$.fragment,t),nr=f(t),ut=o(t,"H2",{class:!0});var zi=n(ut);ta=o(zi,"A",{id:!0,class:!0,href:!0});var Gu=n(ta);Wl=o(Gu,"SPAN",{});var Ku=n(Wl);m(ws.$$.fragment,Ku),Ku.forEach(a),Gu.forEach(a),of=f(zi),Bl=o(zi,"SPAN",{});var Xu=n(Bl);nf=i(Xu,"Multiprocessing"),Xu.forEach(a),zi.forEach(a),rr=f(t),Ne=o(t,"P",{});var Zu=n(Ne);rf=i(Zu,"When a dataset is made of several files (that we call \u201Cshards\u201D), it is possible to significantly speed up the dataset downloading and preparation step."),Zu.forEach(a),ir=f(t),aa=o(t,"P",{});var Ui=n(aa);pf=i(Ui,"You can choose how many processes you\u2019d like to use to prepare a dataset in parallel using "),Ql=o(Ui,"CODE",{});var tm=n(Ql);df=i(tm,"num_proc"),tm.forEach(a),ff=i(Ui,`.
In this case, each process is given a subset of shards to prepare:`),Ui.forEach(a),pr=f(t),m(js.$$.fragment,t),dr=f(t),mt=o(t,"H2",{class:!0});var Yi=n(mt);sa=o(Yi,"A",{id:!0,class:!0,href:!0});var am=n(sa);Gl=o(am,"SPAN",{});var sm=n(Gl);m(bs.$$.fragment,sm),sm.forEach(a),am.forEach(a),cf=f(Yi),Kl=o(Yi,"SPAN",{});var em=n(Kl);hf=i(em,"In-memory data"),em.forEach(a),Yi.forEach(a),fr=f(t),ea=o(t,"P",{});var Ji=n(ea);uf=i(Ji,"\u{1F917} Datasets will also allow you to create a "),Ie=o(Ji,"A",{href:!0});var lm=n(Ie);mf=i(lm,"Dataset"),lm.forEach(a),_f=i(Ji," directly from in-memory data structures like Python dictionaries and Pandas DataFrames."),Ji.forEach(a),cr=f(t),_t=o(t,"H3",{class:!0});var Wi=n(_t);la=o(Wi,"A",{id:!0,class:!0,href:!0});var om=n(la);Xl=o(om,"SPAN",{});var nm=n(Xl);m(qs.$$.fragment,nm),nm.forEach(a),om.forEach(a),gf=f(Wi),Zl=o(Wi,"SPAN",{});var rm=n(Zl);vf=i(rm,"Python dictionary"),rm.forEach(a),Wi.forEach(a),hr=f(t),oa=o(t,"P",{});var Bi=n(oa);$f=i(Bi,"Load Python dictionaries with "),Ce=o(Bi,"A",{href:!0});var im=n(Ce);yf=i(im,"from_dict()"),im.forEach(a),wf=i(Bi,":"),Bi.forEach(a),ur=f(t),m(ks.$$.fragment,t),mr=f(t),gt=o(t,"H3",{class:!0});var Qi=n(gt);na=o(Qi,"A",{id:!0,class:!0,href:!0});var pm=n(na);to=o(pm,"SPAN",{});var dm=n(to);m(Es.$$.fragment,dm),dm.forEach(a),pm.forEach(a),jf=f(Qi),ao=o(Qi,"SPAN",{});var fm=n(ao);bf=i(fm,"Python list of dictionaries"),fm.forEach(a),Qi.forEach(a),_r=f(t),ra=o(t,"P",{});var Gi=n(ra);qf=i(Gi,"Load a list of Python dictionaries with "),so=o(Gi,"CODE",{});var cm=n(so);kf=i(cm,"from_list()"),cm.forEach(a),Ef=i(Gi,":"),Gi.forEach(a),gr=f(t),m(Ps.$$.fragment,t),vr=f(t),vt=o(t,"H3",{class:!0});var Ki=n(vt);ia=o(Ki,"A",{id:!0,class:!0,href:!0});var hm=n(ia);eo=o(hm,"SPAN",{});var um=n(eo);m(xs.$$.fragment,um),um.forEach(a),hm.forEach(a),Pf=f(Ki),lo=o(Ki,"SPAN",{});var mm=n(lo);xf=i(mm,"Python generator"),mm.forEach(a),Ki.forEach(a),$r=f(t),pa=o(t,"P",{});var Xi=n(pa);Af=i(Xi,"Create a dataset from a Python generator with "),Oe=o(Xi,"A",{href:!0});var _m=n(Oe);Sf=i(_m,"from_generator()"),_m.forEach(a),Df=i(Xi,":"),Xi.forEach(a),yr=f(t),m(As.$$.fragment,t),wr=f(t),Le=o(t,"P",{});var gm=n(Le);Tf=i(gm,"This approach supports loading data larger than available memory."),gm.forEach(a),jr=f(t),$t=o(t,"H3",{class:!0});var Zi=n($t);da=o(Zi,"A",{id:!0,class:!0,href:!0});var vm=n(da);oo=o(vm,"SPAN",{});var $m=n(oo);m(Ss.$$.fragment,$m),$m.forEach(a),vm.forEach(a),Nf=f(Zi),no=o(Zi,"SPAN",{});var ym=n(no);If=i(ym,"Pandas DataFrame"),ym.forEach(a),Zi.forEach(a),br=f(t),fa=o(t,"P",{});var tp=n(fa);Cf=i(tp,"Load Pandas DataFrames with "),He=o(tp,"A",{href:!0});var wm=n(He);Of=i(wm,"from_pandas()"),wm.forEach(a),Lf=i(tp,":"),tp.forEach(a),qr=f(t),m(Ds.$$.fragment,t),kr=f(t),m(ca.$$.fragment,t),Er=f(t),yt=o(t,"H2",{class:!0});var ap=n(yt);ha=o(ap,"A",{id:!0,class:!0,href:!0});var jm=n(ha);ro=o(jm,"SPAN",{});var bm=n(ro);m(Ts.$$.fragment,bm),bm.forEach(a),jm.forEach(a),Hf=f(ap),io=o(ap,"SPAN",{});var qm=n(io);Ff=i(qm,"Offline"),qm.forEach(a),ap.forEach(a),Pr=f(t),Fe=o(t,"P",{});var km=n(Fe);Rf=i(km,"Even if you don\u2019t have an internet connection, it is still possible to load a dataset. As long as you\u2019ve downloaded a dataset from the Hub repository before, it should be cached. This means you can reload the dataset from the cache and use it offline."),km.forEach(a),xr=f(t),Z=o(t,"P",{});var il=n(Z);Mf=i(il,"If you know you won\u2019t have internet access, you can run \u{1F917} Datasets in full offline mode. This saves time because instead of waiting for the Dataset builder download to time out, \u{1F917} Datasets will look directly in the cache. Set the environment variable "),po=o(il,"CODE",{});var Em=n(po);Vf=i(Em,"HF_DATASETS_OFFLINE"),Em.forEach(a),zf=i(il," to "),fo=o(il,"CODE",{});var Pm=n(fo);Uf=i(Pm,"1"),Pm.forEach(a),Yf=i(il," to enable full offline mode."),il.forEach(a),Ar=f(t),wt=o(t,"H2",{class:!0});var sp=n(wt);ua=o(sp,"A",{id:!0,class:!0,href:!0});var xm=n(ua);co=o(xm,"SPAN",{});var Am=n(co);m(Ns.$$.fragment,Am),Am.forEach(a),xm.forEach(a),Jf=f(sp),ho=o(sp,"SPAN",{});var Sm=n(ho);Wf=i(Sm,"Slice splits"),Sm.forEach(a),sp.forEach(a),Sr=f(t),tt=o(t,"P",{});var pl=n(tt);Bf=i(pl,"You can also choose only to load specific slices of a split. There are two options for slicing a split: using strings or the "),Re=o(pl,"A",{href:!0});var Dm=n(Re);Qf=i(Dm,"ReadInstruction"),Dm.forEach(a),Gf=i(pl," API. Strings are more compact and readable for simple cases, while "),Me=o(pl,"A",{href:!0});var Tm=n(Me);Kf=i(Tm,"ReadInstruction"),Tm.forEach(a),Xf=i(pl," is easier to use with variable slicing parameters."),pl.forEach(a),Dr=f(t),at=o(t,"P",{});var dl=n(at);Zf=i(dl,"Concatenate a "),uo=o(dl,"CODE",{});var Nm=n(uo);tc=i(Nm,"train"),Nm.forEach(a),ac=i(dl," and "),mo=o(dl,"CODE",{});var Im=n(mo);sc=i(Im,"test"),Im.forEach(a),ec=i(dl," split by:"),dl.forEach(a),Tr=f(t),m(Is.$$.fragment,t),Nr=f(t),ma=o(t,"P",{});var ep=n(ma);lc=i(ep,"Select specific rows of the "),_o=o(ep,"CODE",{});var Cm=n(_o);oc=i(Cm,"train"),Cm.forEach(a),nc=i(ep," split:"),ep.forEach(a),Ir=f(t),m(Cs.$$.fragment,t),Cr=f(t),Ve=o(t,"P",{});var Om=n(Ve);rc=i(Om,"Or select a percentage of a split with:"),Om.forEach(a),Or=f(t),m(Os.$$.fragment,t),Lr=f(t),ze=o(t,"P",{});var Lm=n(ze);ic=i(Lm,"Select a combination of percentages from each split:"),Lm.forEach(a),Hr=f(t),m(Ls.$$.fragment,t),Fr=f(t),Ue=o(t,"P",{});var Hm=n(Ue);pc=i(Hm,"Finally, you can even create cross-validated splits. The example below creates 10-fold cross-validated splits. Each validation dataset is a 10% chunk, and the training dataset makes up the remaining complementary 90% chunk:"),Hm.forEach(a),Rr=f(t),m(Hs.$$.fragment,t),Mr=f(t),jt=o(t,"H3",{class:!0});var lp=n(jt);_a=o(lp,"A",{id:!0,class:!0,href:!0});var Fm=n(_a);go=o(Fm,"SPAN",{});var Rm=n(go);m(Fs.$$.fragment,Rm),Rm.forEach(a),Fm.forEach(a),dc=f(lp),vo=o(lp,"SPAN",{});var Mm=n(vo);fc=i(Mm,"Percent slicing and rounding"),Mm.forEach(a),lp.forEach(a),Vr=f(t),Ye=o(t,"P",{});var Vm=n(Ye);cc=i(Vm,"The default behavior is to round the boundaries to the nearest integer for datasets where the requested slice boundaries do not divide evenly by 100. As shown below, some slices may contain more examples than others. For instance, if the following train split includes 999 records, then:"),Vm.forEach(a),zr=f(t),m(Rs.$$.fragment,t),Ur=f(t),ga=o(t,"P",{});var op=n(ga);hc=i(op,"If you want equal sized splits, use "),$o=o(op,"CODE",{});var zm=n($o);uc=i(zm,"pct1_dropremainder"),zm.forEach(a),mc=i(op," rounding instead. This treats the specified percentage boundaries as multiples of 1%."),op.forEach(a),Yr=f(t),m(Ms.$$.fragment,t),Jr=f(t),m(va.$$.fragment,t),Wr=f(t),Je=o(t,"A",{id:!0}),n(Je).forEach(a),Br=f(t),bt=o(t,"H2",{class:!0});var np=n(bt);$a=o(np,"A",{id:!0,class:!0,href:!0});var Um=n($a);yo=o(Um,"SPAN",{});var Ym=n(yo);m(Vs.$$.fragment,Ym),Ym.forEach(a),Um.forEach(a),_c=f(np),wo=o(np,"SPAN",{});var Jm=n(wo);gc=i(Jm,"Troubleshooting"),Jm.forEach(a),np.forEach(a),Qr=f(t),We=o(t,"P",{});var Wm=n(We);vc=i(Wm,"Sometimes, you may get unexpected results when you load a dataset. Two of the most common issues you may encounter are manually downloading a dataset and specifying features of a dataset."),Wm.forEach(a),Gr=f(t),qt=o(t,"H3",{class:!0});var rp=n(qt);ya=o(rp,"A",{id:!0,class:!0,href:!0});var Bm=n(ya);jo=o(Bm,"SPAN",{});var Qm=n(jo);m(zs.$$.fragment,Qm),Qm.forEach(a),Bm.forEach(a),$c=f(rp),bo=o(rp,"SPAN",{});var Gm=n(bo);yc=i(Gm,"Manual download"),Gm.forEach(a),rp.forEach(a),Kr=f(t),V=o(t,"P",{});var Ta=n(V);wc=i(Ta,"Certain datasets require you to manually download the dataset files due to licensing incompatibility or if the files are hidden behind a login page. This causes "),Be=o(Ta,"A",{href:!0});var Km=n(Be);jc=i(Km,"load_dataset()"),Km.forEach(a),bc=i(Ta," to throw an "),qo=o(Ta,"CODE",{});var Xm=n(qo);qc=i(Xm,"AssertionError"),Xm.forEach(a),kc=i(Ta,". But \u{1F917} Datasets provides detailed instructions for downloading the missing files. After you\u2019ve downloaded the files, use the "),ko=o(Ta,"CODE",{});var Zm=n(ko);Ec=i(Zm,"data_dir"),Zm.forEach(a),Pc=i(Ta," argument to specify the path to the files you just downloaded."),Ta.forEach(a),Xr=f(t),wa=o(t,"P",{});var ip=n(wa);xc=i(ip,"For example, if you try to download a configuration from the "),Us=o(ip,"A",{href:!0,rel:!0});var t_=n(Us);Ac=i(t_,"MATINF"),t_.forEach(a),Sc=i(ip," dataset:"),ip.forEach(a),Zr=f(t),m(Ys.$$.fragment,t),ti=f(t),H=o(t,"P",{});var ot=n(H);Dc=i(ot,"If you\u2019ve already downloaded a dataset from the "),Eo=o(ot,"EM",{});var a_=n(Eo);Tc=i(a_,"Hub with a loading script"),a_.forEach(a),Nc=i(ot," to your computer, then you need to pass an absolute path to the "),Po=o(ot,"CODE",{});var s_=n(Po);Ic=i(s_,"data_dir"),s_.forEach(a),Cc=i(ot," or "),xo=o(ot,"CODE",{});var e_=n(xo);Oc=i(e_,"data_files"),e_.forEach(a),Lc=i(ot," parameter to load that dataset. Otherwise, if you pass a relative path, "),Qe=o(ot,"A",{href:!0});var l_=n(Qe);Hc=i(l_,"load_dataset()"),l_.forEach(a),Fc=i(ot," will load the directory from the repository on the Hub instead of the local directory."),ot.forEach(a),ai=f(t),kt=o(t,"H3",{class:!0});var pp=n(kt);ja=o(pp,"A",{id:!0,class:!0,href:!0});var o_=n(ja);Ao=o(o_,"SPAN",{});var n_=n(Ao);m(Js.$$.fragment,n_),n_.forEach(a),o_.forEach(a),Rc=f(pp),So=o(pp,"SPAN",{});var r_=n(So);Mc=i(r_,"Specify features"),r_.forEach(a),pp.forEach(a),si=f(t),z=o(t,"P",{});var Na=n(z);Vc=i(Na,"When you create a dataset from local files, the "),Ge=o(Na,"A",{href:!0});var i_=n(Ge);zc=i(i_,"Features"),i_.forEach(a),Uc=i(Na," are automatically inferred by "),Ws=o(Na,"A",{href:!0,rel:!0});var p_=n(Ws);Yc=i(p_,"Apache Arrow"),p_.forEach(a),Jc=i(Na,". However, the dataset\u2019s features may not always align with your expectations, or you may want to define the features yourself. The following example shows how you can add custom labels with the "),Ke=o(Na,"A",{href:!0});var d_=n(Ke);Wc=i(d_,"ClassLabel"),d_.forEach(a),Bc=i(Na," feature."),Na.forEach(a),ei=f(t),ba=o(t,"P",{});var dp=n(ba);Qc=i(dp,"Start by defining your own labels with the "),Xe=o(dp,"A",{href:!0});var f_=n(Xe);Gc=i(f_,"Features"),f_.forEach(a),Kc=i(dp," class:"),dp.forEach(a),li=f(t),m(Bs.$$.fragment,t),oi=f(t),st=o(t,"P",{});var fl=n(st);Xc=i(fl,"Next, specify the "),Do=o(fl,"CODE",{});var c_=n(Do);Zc=i(c_,"features"),c_.forEach(a),th=i(fl," parameter in "),Ze=o(fl,"A",{href:!0});var h_=n(Ze);ah=i(h_,"load_dataset()"),h_.forEach(a),sh=i(fl," with the features you just created:"),fl.forEach(a),ni=f(t),m(Qs.$$.fragment,t),ri=f(t),tl=o(t,"P",{});var u_=n(tl);eh=i(u_,"Now when you look at your dataset features, you can see it uses the custom labels you defined:"),u_.forEach(a),ii=f(t),m(Gs.$$.fragment,t),pi=f(t),Et=o(t,"H2",{class:!0});var fp=n(Et);qa=o(fp,"A",{id:!0,class:!0,href:!0});var m_=n(qa);To=o(m_,"SPAN",{});var __=n(To);m(Ks.$$.fragment,__),__.forEach(a),m_.forEach(a),lh=f(fp),No=o(fp,"SPAN",{});var g_=n(No);oh=i(g_,"Metrics"),g_.forEach(a),fp.forEach(a),di=f(t),m(ka.$$.fragment,t),fi=f(t),al=o(t,"P",{});var v_=n(al);nh=i(v_,"When the metric you want to use is not supported by \u{1F917} Datasets, you can write and use your own metric script. Load your metric by providing the path to your local metric loading script:"),v_.forEach(a),ci=f(t),m(Xs.$$.fragment,t),hi=f(t),m(Ea.$$.fragment,t),ui=f(t),Pt=o(t,"H3",{class:!0});var cp=n(Pt);Pa=o(cp,"A",{id:!0,class:!0,href:!0});var $_=n(Pa);Io=o($_,"SPAN",{});var y_=n(Io);m(Zs.$$.fragment,y_),y_.forEach(a),$_.forEach(a),rh=f(cp),Co=o(cp,"SPAN",{});var w_=n(Co);ih=i(w_,"Load configurations"),w_.forEach(a),cp.forEach(a),mi=f(t),et=o(t,"P",{});var cl=n(et);ph=i(cl,"It is possible for a metric to have different configurations. The configurations are stored in the "),Oo=o(cl,"CODE",{});var j_=n(Oo);dh=i(j_,"config_name"),j_.forEach(a),fh=i(cl," parameter in "),sl=o(cl,"A",{href:!0});var b_=n(sl);ch=i(b_,"MetricInfo"),b_.forEach(a),hh=i(cl," attribute. When you load a metric, provide the configuration name as shown in the following:"),cl.forEach(a),_i=f(t),m(te.$$.fragment,t),gi=f(t),xt=o(t,"H3",{class:!0});var hp=n(xt);xa=o(hp,"A",{id:!0,class:!0,href:!0});var q_=n(xa);Lo=o(q_,"SPAN",{});var k_=n(Lo);m(ae.$$.fragment,k_),k_.forEach(a),q_.forEach(a),uh=f(hp),Ho=o(hp,"SPAN",{});var E_=n(Ho);mh=i(E_,"Distributed setup"),E_.forEach(a),hp.forEach(a),vi=f(t),el=o(t,"P",{});var P_=n(el);_h=i(P_,"When working in a distributed or parallel processing environment, loading and computing a metric can be tricky because these processes are executed in parallel on separate subsets of the data. \u{1F917} Datasets supports distributed usage with a few additional arguments when you load a metric."),P_.forEach(a),$i=f(t),ll=o(t,"P",{});var x_=n(ll);gh=i(x_,"For example, imagine you are training and evaluating on eight parallel processes. Here\u2019s how you would load a metric in this distributed setting:"),x_.forEach(a),yi=f(t),lt=o(t,"OL",{});var hl=n(lt);Fo=o(hl,"LI",{});var A_=n(Fo);se=o(A_,"P",{});var up=n(se);vh=i(up,"Define the total number of processes with the "),Ro=o(up,"CODE",{});var S_=n(Ro);$h=i(S_,"num_process"),S_.forEach(a),yh=i(up," argument."),up.forEach(a),A_.forEach(a),wh=f(hl),Mo=o(hl,"LI",{});var D_=n(Mo);At=o(D_,"P",{});var ul=n(At);jh=i(ul,"Set the process "),Vo=o(ul,"CODE",{});var T_=n(Vo);bh=i(T_,"rank"),T_.forEach(a),qh=i(ul," as an integer between zero and "),zo=o(ul,"CODE",{});var N_=n(zo);kh=i(N_,"num_process - 1"),N_.forEach(a),Eh=i(ul,"."),ul.forEach(a),D_.forEach(a),Ph=f(hl),Uo=o(hl,"LI",{});var I_=n(Uo);ee=o(I_,"P",{});var mp=n(ee);xh=i(mp,"Load your metric with "),ol=o(mp,"A",{href:!0});var C_=n(ol);Ah=i(C_,"load_metric()"),C_.forEach(a),Sh=i(mp," with these arguments:"),mp.forEach(a),I_.forEach(a),hl.forEach(a),wi=f(t),m(le.$$.fragment,t),ji=f(t),m(Aa.$$.fragment,t),bi=f(t),Sa=o(t,"P",{});var _p=n(Sa);Dh=i(_p,"In some instances, you may be simultaneously running multiple independent distributed evaluations on the same server and files. To avoid any conflicts, it is important to provide an "),Yo=o(_p,"CODE",{});var O_=n(Yo);Th=i(O_,"experiment_id"),O_.forEach(a),Nh=i(_p," to distinguish the separate evaluations:"),_p.forEach(a),qi=f(t),m(oe.$$.fragment,t),this.h()},h(){c(h,"name","hf:doc:metadata"),c(h,"content",JSON.stringify(K_)),c(b,"id","load"),c(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b,"href","#load"),c(y,"class","relative group"),c(Va,"class","underline decoration-pink-400 decoration-2 font-semibold"),c(Va,"href","./audio_load"),c(za,"class","underline decoration-yellow-400 decoration-2 font-semibold"),c(za,"href","./image_load"),c(Ua,"class","underline decoration-green-400 decoration-2 font-semibold"),c(Ua,"href","./nlp_load"),c(fe,"id","load-from-the-hub"),c(It,"id","hugging-face-hub"),c(It,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(It,"href","#hugging-face-hub"),c(nt,"class","relative group"),c(ce,"href","share#create-the-repository"),c(he,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(Ja,"href","https://huggingface.co/datasets/lhoestq/demo1"),c(Ja,"rel","nofollow"),c(Rt,"id","local-loading-script"),c(Rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rt,"href","#local-loading-script"),c(rt,"class","relative group"),c(ue,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(zt,"id","edit-loading-script"),c(zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zt,"href","#edit-loading-script"),c(it,"class","relative group"),c(_e,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(Yt,"id","local-and-remote-files"),c(Yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yt,"href","#local-and-remote-files"),c(pt,"class","relative group"),c(ge,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(Jt,"id","csv"),c(Jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jt,"href","#csv"),c(dt,"class","relative group"),c(Wt,"id","json"),c(Wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wt,"href","#json"),c(ft,"class","relative group"),c(be,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(Gt,"id","parquet"),c(Gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gt,"href","#parquet"),c(ct,"class","relative group"),c(Kt,"id","sql"),c(Kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kt,"href","#sql"),c(ht,"class","relative group"),c(Se,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.from_sql"),c(ta,"id","multiprocessing"),c(ta,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ta,"href","#multiprocessing"),c(ut,"class","relative group"),c(sa,"id","inmemory-data"),c(sa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sa,"href","#inmemory-data"),c(mt,"class","relative group"),c(Ie,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),c(la,"id","python-dictionary"),c(la,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(la,"href","#python-dictionary"),c(_t,"class","relative group"),c(Ce,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.from_dict"),c(na,"id","python-list-of-dictionaries"),c(na,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(na,"href","#python-list-of-dictionaries"),c(gt,"class","relative group"),c(ia,"id","python-generator"),c(ia,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ia,"href","#python-generator"),c(vt,"class","relative group"),c(Oe,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.from_generator"),c(da,"id","pandas-dataframe"),c(da,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(da,"href","#pandas-dataframe"),c($t,"class","relative group"),c(He,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.from_pandas"),c(ha,"id","offline"),c(ha,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ha,"href","#offline"),c(yt,"class","relative group"),c(ua,"id","slice-splits"),c(ua,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ua,"href","#slice-splits"),c(wt,"class","relative group"),c(Re,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.ReadInstruction"),c(Me,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.ReadInstruction"),c(_a,"id","percent-slicing-and-rounding"),c(_a,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_a,"href","#percent-slicing-and-rounding"),c(jt,"class","relative group"),c(Je,"id","troubleshoot"),c($a,"id","troubleshooting"),c($a,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($a,"href","#troubleshooting"),c(bt,"class","relative group"),c(ya,"id","manual-download"),c(ya,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ya,"href","#manual-download"),c(qt,"class","relative group"),c(Be,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(Us,"href","https://huggingface.co/datasets/matinf"),c(Us,"rel","nofollow"),c(Qe,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(ja,"id","specify-features"),c(ja,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ja,"href","#specify-features"),c(kt,"class","relative group"),c(Ge,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Features"),c(Ws,"href","https://arrow.apache.org/docs/"),c(Ws,"rel","nofollow"),c(Ke,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.ClassLabel"),c(Xe,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Features"),c(Ze,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(qa,"id","metrics"),c(qa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qa,"href","#metrics"),c(Et,"class","relative group"),c(Pa,"id","load-configurations"),c(Pa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pa,"href","#load-configurations"),c(Pt,"class","relative group"),c(sl,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.MetricInfo"),c(xa,"id","distributed-setup"),c(xa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xa,"href","#distributed-setup"),c(xt,"class","relative group"),c(ol,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_metric")},m(t,e){s(document.head,h),p(t,k,e),p(t,y,e),s(y,b),s(b,q),_(w,q,null),s(y,j),s(y,P),s(P,C),p(t,T,e),p(t,F,e),s(F,R),p(t,St,e),p(t,Q,e),s(Q,G),p(t,Dt,e),p(t,S,e),s(S,J),s(J,Ca),s(S,Oa),s(S,W),s(W,La),s(S,Ha),s(S,M),s(M,Fa),s(S,Ra),s(S,B),s(B,x),s(S,re),s(S,Tt),s(Tt,ie),s(S,pe),s(S,Nt),s(Nt,de),p(t,Ma,e),p(t,O,e),s(O,gp),s(O,Va),s(Va,vp),s(O,$p),s(O,za),s(za,yp),s(O,wp),s(O,Ua),s(Ua,jp),s(O,bp),p(t,Zo,e),p(t,fe,e),p(t,tn,e),p(t,nt,e),s(nt,It),s(It,ml),_(Ya,ml,null),s(nt,qp),s(nt,_l),s(_l,kp),p(t,an,e),p(t,K,e),s(K,Ep),s(K,ce),s(ce,Pp),s(K,xp),s(K,he),s(he,Ap),s(K,Sp),p(t,sn,e),p(t,Ct,e),s(Ct,Dp),s(Ct,Ja),s(Ja,Tp),s(Ct,Np),p(t,en,e),_(Wa,t,e),p(t,ln,e),p(t,Ot,e),s(Ot,Ip),s(Ot,gl),s(gl,Cp),s(Ot,Op),p(t,on,e),_(Ba,t,e),p(t,nn,e),_(Lt,t,e),p(t,rn,e),p(t,N,e),s(N,Lp),s(N,vl),s(vl,Hp),s(N,Fp),s(N,$l),s($l,Rp),s(N,Mp),s(N,yl),s(yl,Vp),s(N,zp),s(N,wl),s(wl,Up),s(N,Yp),s(N,jl),s(jl,Jp),s(N,Wp),p(t,pn,e),_(Qa,t,e),p(t,dn,e),_(Ht,t,e),p(t,fn,e),p(t,X,e),s(X,Bp),s(X,bl),s(bl,Qp),s(X,Gp),s(X,ql),s(ql,Kp),s(X,Xp),p(t,cn,e),_(Ga,t,e),p(t,hn,e),p(t,Ft,e),s(Ft,Zp),s(Ft,kl),s(kl,td),s(Ft,ad),p(t,un,e),_(Ka,t,e),p(t,mn,e),p(t,rt,e),s(rt,Rt),s(Rt,El),_(Xa,El,null),s(rt,sd),s(rt,Pl),s(Pl,ed),p(t,_n,e),p(t,Mt,e),s(Mt,ld),s(Mt,ue),s(ue,od),s(Mt,nd),p(t,gn,e),p(t,Vt,e),s(Vt,xl),s(xl,rd),s(Vt,id),s(Vt,Al),s(Al,pd),p(t,vn,e),_(Za,t,e),p(t,$n,e),p(t,it,e),s(it,zt),s(zt,Sl),_(ts,Sl,null),s(it,dd),s(it,Dl),s(Dl,fd),p(t,yn,e),p(t,me,e),s(me,cd),p(t,wn,e),_(as,t,e),p(t,jn,e),p(t,Ut,e),s(Ut,hd),s(Ut,_e),s(_e,ud),s(Ut,md),p(t,bn,e),_(ss,t,e),p(t,qn,e),p(t,pt,e),s(pt,Yt),s(Yt,Tl),_(es,Tl,null),s(pt,_d),s(pt,Nl),s(Nl,gd),p(t,kn,e),p(t,I,e),s(I,vd),s(I,Il),s(Il,$d),s(I,yd),s(I,Cl),s(Cl,wd),s(I,jd),s(I,Ol),s(Ol,bd),s(I,qd),s(I,Ll),s(Ll,kd),s(I,Ed),s(I,ge),s(ge,Pd),s(I,xd),p(t,En,e),p(t,dt,e),s(dt,Jt),s(Jt,Hl),_(ls,Hl,null),s(dt,Ad),s(dt,Fl),s(Fl,Sd),p(t,Pn,e),p(t,ve,e),s(ve,Dd),p(t,xn,e),_(os,t,e),p(t,An,e),p(t,$e,e),s($e,Td),p(t,Sn,e),_(ns,t,e),p(t,Dn,e),p(t,ye,e),s(ye,Nd),p(t,Tn,e),_(rs,t,e),p(t,Nn,e),p(t,we,e),s(we,Id),p(t,In,e),_(is,t,e),p(t,Cn,e),p(t,je,e),s(je,Cd),p(t,On,e),_(ps,t,e),p(t,Ln,e),p(t,ft,e),s(ft,Wt),s(Wt,Rl),_(ds,Rl,null),s(ft,Od),s(ft,Ml),s(Ml,Ld),p(t,Hn,e),p(t,Bt,e),s(Bt,Hd),s(Bt,be),s(be,Fd),s(Bt,Rd),p(t,Fn,e),_(fs,t,e),p(t,Rn,e),p(t,qe,e),s(qe,Md),p(t,Mn,e),_(cs,t,e),p(t,Vn,e),p(t,Qt,e),s(Qt,Vd),s(Qt,Vl),s(Vl,zd),s(Qt,Ud),p(t,zn,e),_(hs,t,e),p(t,Un,e),p(t,ke,e),s(ke,Yd),p(t,Yn,e),_(us,t,e),p(t,Jn,e),p(t,Ee,e),s(Ee,Jd),p(t,Wn,e),p(t,ct,e),s(ct,Gt),s(Gt,zl),_(ms,zl,null),s(ct,Wd),s(ct,Ul),s(Ul,Bd),p(t,Bn,e),p(t,Pe,e),s(Pe,Qd),p(t,Qn,e),p(t,xe,e),s(xe,Gd),p(t,Gn,e),_(_s,t,e),p(t,Kn,e),p(t,Ae,e),s(Ae,Kd),p(t,Xn,e),_(gs,t,e),p(t,Zn,e),p(t,ht,e),s(ht,Kt),s(Kt,Yl),_(vs,Yl,null),s(ht,Xd),s(ht,Jl),s(Jl,Zd),p(t,tr,e),p(t,Xt,e),s(Xt,tf),s(Xt,Se),s(Se,af),s(Xt,sf),p(t,ar,e),p(t,De,e),s(De,ef),p(t,sr,e),_($s,t,e),p(t,er,e),p(t,Te,e),s(Te,lf),p(t,lr,e),_(ys,t,e),p(t,or,e),_(Zt,t,e),p(t,nr,e),p(t,ut,e),s(ut,ta),s(ta,Wl),_(ws,Wl,null),s(ut,of),s(ut,Bl),s(Bl,nf),p(t,rr,e),p(t,Ne,e),s(Ne,rf),p(t,ir,e),p(t,aa,e),s(aa,pf),s(aa,Ql),s(Ql,df),s(aa,ff),p(t,pr,e),_(js,t,e),p(t,dr,e),p(t,mt,e),s(mt,sa),s(sa,Gl),_(bs,Gl,null),s(mt,cf),s(mt,Kl),s(Kl,hf),p(t,fr,e),p(t,ea,e),s(ea,uf),s(ea,Ie),s(Ie,mf),s(ea,_f),p(t,cr,e),p(t,_t,e),s(_t,la),s(la,Xl),_(qs,Xl,null),s(_t,gf),s(_t,Zl),s(Zl,vf),p(t,hr,e),p(t,oa,e),s(oa,$f),s(oa,Ce),s(Ce,yf),s(oa,wf),p(t,ur,e),_(ks,t,e),p(t,mr,e),p(t,gt,e),s(gt,na),s(na,to),_(Es,to,null),s(gt,jf),s(gt,ao),s(ao,bf),p(t,_r,e),p(t,ra,e),s(ra,qf),s(ra,so),s(so,kf),s(ra,Ef),p(t,gr,e),_(Ps,t,e),p(t,vr,e),p(t,vt,e),s(vt,ia),s(ia,eo),_(xs,eo,null),s(vt,Pf),s(vt,lo),s(lo,xf),p(t,$r,e),p(t,pa,e),s(pa,Af),s(pa,Oe),s(Oe,Sf),s(pa,Df),p(t,yr,e),_(As,t,e),p(t,wr,e),p(t,Le,e),s(Le,Tf),p(t,jr,e),p(t,$t,e),s($t,da),s(da,oo),_(Ss,oo,null),s($t,Nf),s($t,no),s(no,If),p(t,br,e),p(t,fa,e),s(fa,Cf),s(fa,He),s(He,Of),s(fa,Lf),p(t,qr,e),_(Ds,t,e),p(t,kr,e),_(ca,t,e),p(t,Er,e),p(t,yt,e),s(yt,ha),s(ha,ro),_(Ts,ro,null),s(yt,Hf),s(yt,io),s(io,Ff),p(t,Pr,e),p(t,Fe,e),s(Fe,Rf),p(t,xr,e),p(t,Z,e),s(Z,Mf),s(Z,po),s(po,Vf),s(Z,zf),s(Z,fo),s(fo,Uf),s(Z,Yf),p(t,Ar,e),p(t,wt,e),s(wt,ua),s(ua,co),_(Ns,co,null),s(wt,Jf),s(wt,ho),s(ho,Wf),p(t,Sr,e),p(t,tt,e),s(tt,Bf),s(tt,Re),s(Re,Qf),s(tt,Gf),s(tt,Me),s(Me,Kf),s(tt,Xf),p(t,Dr,e),p(t,at,e),s(at,Zf),s(at,uo),s(uo,tc),s(at,ac),s(at,mo),s(mo,sc),s(at,ec),p(t,Tr,e),_(Is,t,e),p(t,Nr,e),p(t,ma,e),s(ma,lc),s(ma,_o),s(_o,oc),s(ma,nc),p(t,Ir,e),_(Cs,t,e),p(t,Cr,e),p(t,Ve,e),s(Ve,rc),p(t,Or,e),_(Os,t,e),p(t,Lr,e),p(t,ze,e),s(ze,ic),p(t,Hr,e),_(Ls,t,e),p(t,Fr,e),p(t,Ue,e),s(Ue,pc),p(t,Rr,e),_(Hs,t,e),p(t,Mr,e),p(t,jt,e),s(jt,_a),s(_a,go),_(Fs,go,null),s(jt,dc),s(jt,vo),s(vo,fc),p(t,Vr,e),p(t,Ye,e),s(Ye,cc),p(t,zr,e),_(Rs,t,e),p(t,Ur,e),p(t,ga,e),s(ga,hc),s(ga,$o),s($o,uc),s(ga,mc),p(t,Yr,e),_(Ms,t,e),p(t,Jr,e),_(va,t,e),p(t,Wr,e),p(t,Je,e),p(t,Br,e),p(t,bt,e),s(bt,$a),s($a,yo),_(Vs,yo,null),s(bt,_c),s(bt,wo),s(wo,gc),p(t,Qr,e),p(t,We,e),s(We,vc),p(t,Gr,e),p(t,qt,e),s(qt,ya),s(ya,jo),_(zs,jo,null),s(qt,$c),s(qt,bo),s(bo,yc),p(t,Kr,e),p(t,V,e),s(V,wc),s(V,Be),s(Be,jc),s(V,bc),s(V,qo),s(qo,qc),s(V,kc),s(V,ko),s(ko,Ec),s(V,Pc),p(t,Xr,e),p(t,wa,e),s(wa,xc),s(wa,Us),s(Us,Ac),s(wa,Sc),p(t,Zr,e),_(Ys,t,e),p(t,ti,e),p(t,H,e),s(H,Dc),s(H,Eo),s(Eo,Tc),s(H,Nc),s(H,Po),s(Po,Ic),s(H,Cc),s(H,xo),s(xo,Oc),s(H,Lc),s(H,Qe),s(Qe,Hc),s(H,Fc),p(t,ai,e),p(t,kt,e),s(kt,ja),s(ja,Ao),_(Js,Ao,null),s(kt,Rc),s(kt,So),s(So,Mc),p(t,si,e),p(t,z,e),s(z,Vc),s(z,Ge),s(Ge,zc),s(z,Uc),s(z,Ws),s(Ws,Yc),s(z,Jc),s(z,Ke),s(Ke,Wc),s(z,Bc),p(t,ei,e),p(t,ba,e),s(ba,Qc),s(ba,Xe),s(Xe,Gc),s(ba,Kc),p(t,li,e),_(Bs,t,e),p(t,oi,e),p(t,st,e),s(st,Xc),s(st,Do),s(Do,Zc),s(st,th),s(st,Ze),s(Ze,ah),s(st,sh),p(t,ni,e),_(Qs,t,e),p(t,ri,e),p(t,tl,e),s(tl,eh),p(t,ii,e),_(Gs,t,e),p(t,pi,e),p(t,Et,e),s(Et,qa),s(qa,To),_(Ks,To,null),s(Et,lh),s(Et,No),s(No,oh),p(t,di,e),_(ka,t,e),p(t,fi,e),p(t,al,e),s(al,nh),p(t,ci,e),_(Xs,t,e),p(t,hi,e),_(Ea,t,e),p(t,ui,e),p(t,Pt,e),s(Pt,Pa),s(Pa,Io),_(Zs,Io,null),s(Pt,rh),s(Pt,Co),s(Co,ih),p(t,mi,e),p(t,et,e),s(et,ph),s(et,Oo),s(Oo,dh),s(et,fh),s(et,sl),s(sl,ch),s(et,hh),p(t,_i,e),_(te,t,e),p(t,gi,e),p(t,xt,e),s(xt,xa),s(xa,Lo),_(ae,Lo,null),s(xt,uh),s(xt,Ho),s(Ho,mh),p(t,vi,e),p(t,el,e),s(el,_h),p(t,$i,e),p(t,ll,e),s(ll,gh),p(t,yi,e),p(t,lt,e),s(lt,Fo),s(Fo,se),s(se,vh),s(se,Ro),s(Ro,$h),s(se,yh),s(lt,wh),s(lt,Mo),s(Mo,At),s(At,jh),s(At,Vo),s(Vo,bh),s(At,qh),s(At,zo),s(zo,kh),s(At,Eh),s(lt,Ph),s(lt,Uo),s(Uo,ee),s(ee,xh),s(ee,ol),s(ol,Ah),s(ee,Sh),p(t,wi,e),_(le,t,e),p(t,ji,e),_(Aa,t,e),p(t,bi,e),p(t,Sa,e),s(Sa,Dh),s(Sa,Yo),s(Yo,Th),s(Sa,Nh),p(t,qi,e),_(oe,t,e),ki=!0},p(t,[e]){const ne={};e&2&&(ne.$$scope={dirty:e,ctx:t}),Lt.$set(ne);const Jo={};e&2&&(Jo.$$scope={dirty:e,ctx:t}),Ht.$set(Jo);const Wo={};e&2&&(Wo.$$scope={dirty:e,ctx:t}),Zt.$set(Wo);const Bo={};e&2&&(Bo.$$scope={dirty:e,ctx:t}),ca.$set(Bo);const Qo={};e&2&&(Qo.$$scope={dirty:e,ctx:t}),va.$set(Qo);const Go={};e&2&&(Go.$$scope={dirty:e,ctx:t}),ka.$set(Go);const L={};e&2&&(L.$$scope={dirty:e,ctx:t}),Ea.$set(L);const Ko={};e&2&&(Ko.$$scope={dirty:e,ctx:t}),Aa.$set(Ko)},i(t){ki||(g(w.$$.fragment,t),g(Ya.$$.fragment,t),g(Wa.$$.fragment,t),g(Ba.$$.fragment,t),g(Lt.$$.fragment,t),g(Qa.$$.fragment,t),g(Ht.$$.fragment,t),g(Ga.$$.fragment,t),g(Ka.$$.fragment,t),g(Xa.$$.fragment,t),g(Za.$$.fragment,t),g(ts.$$.fragment,t),g(as.$$.fragment,t),g(ss.$$.fragment,t),g(es.$$.fragment,t),g(ls.$$.fragment,t),g(os.$$.fragment,t),g(ns.$$.fragment,t),g(rs.$$.fragment,t),g(is.$$.fragment,t),g(ps.$$.fragment,t),g(ds.$$.fragment,t),g(fs.$$.fragment,t),g(cs.$$.fragment,t),g(hs.$$.fragment,t),g(us.$$.fragment,t),g(ms.$$.fragment,t),g(_s.$$.fragment,t),g(gs.$$.fragment,t),g(vs.$$.fragment,t),g($s.$$.fragment,t),g(ys.$$.fragment,t),g(Zt.$$.fragment,t),g(ws.$$.fragment,t),g(js.$$.fragment,t),g(bs.$$.fragment,t),g(qs.$$.fragment,t),g(ks.$$.fragment,t),g(Es.$$.fragment,t),g(Ps.$$.fragment,t),g(xs.$$.fragment,t),g(As.$$.fragment,t),g(Ss.$$.fragment,t),g(Ds.$$.fragment,t),g(ca.$$.fragment,t),g(Ts.$$.fragment,t),g(Ns.$$.fragment,t),g(Is.$$.fragment,t),g(Cs.$$.fragment,t),g(Os.$$.fragment,t),g(Ls.$$.fragment,t),g(Hs.$$.fragment,t),g(Fs.$$.fragment,t),g(Rs.$$.fragment,t),g(Ms.$$.fragment,t),g(va.$$.fragment,t),g(Vs.$$.fragment,t),g(zs.$$.fragment,t),g(Ys.$$.fragment,t),g(Js.$$.fragment,t),g(Bs.$$.fragment,t),g(Qs.$$.fragment,t),g(Gs.$$.fragment,t),g(Ks.$$.fragment,t),g(ka.$$.fragment,t),g(Xs.$$.fragment,t),g(Ea.$$.fragment,t),g(Zs.$$.fragment,t),g(te.$$.fragment,t),g(ae.$$.fragment,t),g(le.$$.fragment,t),g(Aa.$$.fragment,t),g(oe.$$.fragment,t),ki=!0)},o(t){v(w.$$.fragment,t),v(Ya.$$.fragment,t),v(Wa.$$.fragment,t),v(Ba.$$.fragment,t),v(Lt.$$.fragment,t),v(Qa.$$.fragment,t),v(Ht.$$.fragment,t),v(Ga.$$.fragment,t),v(Ka.$$.fragment,t),v(Xa.$$.fragment,t),v(Za.$$.fragment,t),v(ts.$$.fragment,t),v(as.$$.fragment,t),v(ss.$$.fragment,t),v(es.$$.fragment,t),v(ls.$$.fragment,t),v(os.$$.fragment,t),v(ns.$$.fragment,t),v(rs.$$.fragment,t),v(is.$$.fragment,t),v(ps.$$.fragment,t),v(ds.$$.fragment,t),v(fs.$$.fragment,t),v(cs.$$.fragment,t),v(hs.$$.fragment,t),v(us.$$.fragment,t),v(ms.$$.fragment,t),v(_s.$$.fragment,t),v(gs.$$.fragment,t),v(vs.$$.fragment,t),v($s.$$.fragment,t),v(ys.$$.fragment,t),v(Zt.$$.fragment,t),v(ws.$$.fragment,t),v(js.$$.fragment,t),v(bs.$$.fragment,t),v(qs.$$.fragment,t),v(ks.$$.fragment,t),v(Es.$$.fragment,t),v(Ps.$$.fragment,t),v(xs.$$.fragment,t),v(As.$$.fragment,t),v(Ss.$$.fragment,t),v(Ds.$$.fragment,t),v(ca.$$.fragment,t),v(Ts.$$.fragment,t),v(Ns.$$.fragment,t),v(Is.$$.fragment,t),v(Cs.$$.fragment,t),v(Os.$$.fragment,t),v(Ls.$$.fragment,t),v(Hs.$$.fragment,t),v(Fs.$$.fragment,t),v(Rs.$$.fragment,t),v(Ms.$$.fragment,t),v(va.$$.fragment,t),v(Vs.$$.fragment,t),v(zs.$$.fragment,t),v(Ys.$$.fragment,t),v(Js.$$.fragment,t),v(Bs.$$.fragment,t),v(Qs.$$.fragment,t),v(Gs.$$.fragment,t),v(Ks.$$.fragment,t),v(ka.$$.fragment,t),v(Xs.$$.fragment,t),v(Ea.$$.fragment,t),v(Zs.$$.fragment,t),v(te.$$.fragment,t),v(ae.$$.fragment,t),v(le.$$.fragment,t),v(Aa.$$.fragment,t),v(oe.$$.fragment,t),ki=!1},d(t){a(h),t&&a(k),t&&a(y),$(w),t&&a(T),t&&a(F),t&&a(St),t&&a(Q),t&&a(Dt),t&&a(S),t&&a(Ma),t&&a(O),t&&a(Zo),t&&a(fe),t&&a(tn),t&&a(nt),$(Ya),t&&a(an),t&&a(K),t&&a(sn),t&&a(Ct),t&&a(en),$(Wa,t),t&&a(ln),t&&a(Ot),t&&a(on),$(Ba,t),t&&a(nn),$(Lt,t),t&&a(rn),t&&a(N),t&&a(pn),$(Qa,t),t&&a(dn),$(Ht,t),t&&a(fn),t&&a(X),t&&a(cn),$(Ga,t),t&&a(hn),t&&a(Ft),t&&a(un),$(Ka,t),t&&a(mn),t&&a(rt),$(Xa),t&&a(_n),t&&a(Mt),t&&a(gn),t&&a(Vt),t&&a(vn),$(Za,t),t&&a($n),t&&a(it),$(ts),t&&a(yn),t&&a(me),t&&a(wn),$(as,t),t&&a(jn),t&&a(Ut),t&&a(bn),$(ss,t),t&&a(qn),t&&a(pt),$(es),t&&a(kn),t&&a(I),t&&a(En),t&&a(dt),$(ls),t&&a(Pn),t&&a(ve),t&&a(xn),$(os,t),t&&a(An),t&&a($e),t&&a(Sn),$(ns,t),t&&a(Dn),t&&a(ye),t&&a(Tn),$(rs,t),t&&a(Nn),t&&a(we),t&&a(In),$(is,t),t&&a(Cn),t&&a(je),t&&a(On),$(ps,t),t&&a(Ln),t&&a(ft),$(ds),t&&a(Hn),t&&a(Bt),t&&a(Fn),$(fs,t),t&&a(Rn),t&&a(qe),t&&a(Mn),$(cs,t),t&&a(Vn),t&&a(Qt),t&&a(zn),$(hs,t),t&&a(Un),t&&a(ke),t&&a(Yn),$(us,t),t&&a(Jn),t&&a(Ee),t&&a(Wn),t&&a(ct),$(ms),t&&a(Bn),t&&a(Pe),t&&a(Qn),t&&a(xe),t&&a(Gn),$(_s,t),t&&a(Kn),t&&a(Ae),t&&a(Xn),$(gs,t),t&&a(Zn),t&&a(ht),$(vs),t&&a(tr),t&&a(Xt),t&&a(ar),t&&a(De),t&&a(sr),$($s,t),t&&a(er),t&&a(Te),t&&a(lr),$(ys,t),t&&a(or),$(Zt,t),t&&a(nr),t&&a(ut),$(ws),t&&a(rr),t&&a(Ne),t&&a(ir),t&&a(aa),t&&a(pr),$(js,t),t&&a(dr),t&&a(mt),$(bs),t&&a(fr),t&&a(ea),t&&a(cr),t&&a(_t),$(qs),t&&a(hr),t&&a(oa),t&&a(ur),$(ks,t),t&&a(mr),t&&a(gt),$(Es),t&&a(_r),t&&a(ra),t&&a(gr),$(Ps,t),t&&a(vr),t&&a(vt),$(xs),t&&a($r),t&&a(pa),t&&a(yr),$(As,t),t&&a(wr),t&&a(Le),t&&a(jr),t&&a($t),$(Ss),t&&a(br),t&&a(fa),t&&a(qr),$(Ds,t),t&&a(kr),$(ca,t),t&&a(Er),t&&a(yt),$(Ts),t&&a(Pr),t&&a(Fe),t&&a(xr),t&&a(Z),t&&a(Ar),t&&a(wt),$(Ns),t&&a(Sr),t&&a(tt),t&&a(Dr),t&&a(at),t&&a(Tr),$(Is,t),t&&a(Nr),t&&a(ma),t&&a(Ir),$(Cs,t),t&&a(Cr),t&&a(Ve),t&&a(Or),$(Os,t),t&&a(Lr),t&&a(ze),t&&a(Hr),$(Ls,t),t&&a(Fr),t&&a(Ue),t&&a(Rr),$(Hs,t),t&&a(Mr),t&&a(jt),$(Fs),t&&a(Vr),t&&a(Ye),t&&a(zr),$(Rs,t),t&&a(Ur),t&&a(ga),t&&a(Yr),$(Ms,t),t&&a(Jr),$(va,t),t&&a(Wr),t&&a(Je),t&&a(Br),t&&a(bt),$(Vs),t&&a(Qr),t&&a(We),t&&a(Gr),t&&a(qt),$(zs),t&&a(Kr),t&&a(V),t&&a(Xr),t&&a(wa),t&&a(Zr),$(Ys,t),t&&a(ti),t&&a(H),t&&a(ai),t&&a(kt),$(Js),t&&a(si),t&&a(z),t&&a(ei),t&&a(ba),t&&a(li),$(Bs,t),t&&a(oi),t&&a(st),t&&a(ni),$(Qs,t),t&&a(ri),t&&a(tl),t&&a(ii),$(Gs,t),t&&a(pi),t&&a(Et),$(Ks),t&&a(di),$(ka,t),t&&a(fi),t&&a(al),t&&a(ci),$(Xs,t),t&&a(hi),$(Ea,t),t&&a(ui),t&&a(Pt),$(Zs),t&&a(mi),t&&a(et),t&&a(_i),$(te,t),t&&a(gi),t&&a(xt),$(ae),t&&a(vi),t&&a(el),t&&a($i),t&&a(ll),t&&a(yi),t&&a(lt),t&&a(wi),$(le,t),t&&a(ji),$(Aa,t),t&&a(bi),t&&a(Sa),t&&a(qi),$(oe,t)}}}const K_={local:"load",sections:[{local:"hugging-face-hub",title:"Hugging Face Hub"},{local:"local-loading-script",sections:[{local:"edit-loading-script",title:"Edit loading script"}],title:"Local loading script"},{local:"local-and-remote-files",sections:[{local:"csv",title:"CSV"},{local:"json",title:"JSON"},{local:"parquet",title:"Parquet"},{local:"sql",title:"SQL"}],title:"Local and remote files"},{local:"multiprocessing",title:"Multiprocessing"},{local:"inmemory-data",sections:[{local:"python-dictionary",title:"Python dictionary"},{local:"python-list-of-dictionaries",title:"Python list of dictionaries"},{local:"python-generator",title:"Python generator"},{local:"pandas-dataframe",title:"Pandas DataFrame"}],title:"In-memory data"},{local:"offline",title:"Offline"},{local:"slice-splits",sections:[{local:"percent-slicing-and-rounding",title:"Percent slicing and rounding"}],title:"Slice splits"},{local:"troubleshooting",sections:[{local:"manual-download",title:"Manual download"},{local:"specify-features",title:"Specify features"}],title:"Troubleshooting"},{local:"metrics",sections:[{local:"load-configurations",title:"Load configurations"},{local:"distributed-setup",title:"Distributed setup"}],title:"Metrics"}],title:"Load"};function X_(D){return M_(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class og extends L_{constructor(h){super();H_(this,h,X_,G_,F_,{})}}export{og as default,K_ as metadata};
