import{S as Xh,i as Kh,s as Qh,e as l,k as p,w as g,t as s,M as Zh,c as n,d as a,m as f,a as r,x as _,h as o,b as h,G as t,g as d,y as v,q as $,o as y,B as b,v as ec}from"../chunks/vendor-hf-doc-builder.js";import{T as Ta}from"../chunks/Tip-hf-doc-builder.js";import{I as B}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as I}from"../chunks/CodeBlock-hf-doc-builder.js";function tc(O){let c,q,u,E,j;return{c(){c=l("p"),q=s("You can control access to your dataset by requiring users to share their contact information first. Check out the "),u=l("a"),E=s("Gated datasets"),j=s(" guide for more information about how to enable this feature on the Hub."),this.h()},l(m){c=n(m,"P",{});var w=r(c);q=o(w,"You can control access to your dataset by requiring users to share their contact information first. Check out the "),u=n(w,"A",{href:!0,rel:!0});var k=r(u);E=o(k,"Gated datasets"),k.forEach(a),j=o(w," guide for more information about how to enable this feature on the Hub."),w.forEach(a),this.h()},h(){h(u,"href","https://huggingface.co/docs/hub/datasets-gated"),h(u,"rel","nofollow")},m(m,w){d(m,c,w),t(c,q),t(c,u),t(u,E),t(c,j)},d(m){m&&a(c)}}}function ac(O){let c,q,u,E,j,m,w,k;return{c(){c=l("p"),q=s("If metadata files are present, the inferred labels based on the directory name are dropped by default. To include those labels, set "),u=l("code"),E=s("drop_labels=False"),j=s(" in "),m=l("code"),w=s("load_dataset"),k=s(".")},l(P){c=n(P,"P",{});var A=r(c);q=o(A,"If metadata files are present, the inferred labels based on the directory name are dropped by default. To include those labels, set "),u=n(A,"CODE",{});var G=r(u);E=o(G,"drop_labels=False"),G.forEach(a),j=o(A," in "),m=n(A,"CODE",{});var Z=r(m);w=o(Z,"load_dataset"),Z.forEach(a),k=o(A,"."),A.forEach(a)},m(P,A){d(P,c,A),t(c,q),t(c,u),t(u,E),t(c,j),t(c,m),t(m,w),t(c,k)},d(P){P&&a(c)}}}function sc(O){let c,q,u,E,j;return{c(){c=l("p"),q=s("To help you get started, we created a loading script "),u=l("a"),E=s("template"),j=s(" you can copy and use as a starting point!"),this.h()},l(m){c=n(m,"P",{});var w=r(c);q=o(w,"To help you get started, we created a loading script "),u=n(w,"A",{href:!0,rel:!0});var k=r(u);E=o(k,"template"),k.forEach(a),j=o(w," you can copy and use as a starting point!"),w.forEach(a),this.h()},h(){h(u,"href","https://github.com/huggingface/datasets/blob/main/templates/new_dataset_script.py"),h(u,"rel","nofollow")},m(m,w){d(m,c,w),t(c,q),t(c,u),t(u,E),t(c,j)},d(m){m&&a(c)}}}function oc(O){let c,q,u,E,j;return{c(){c=l("p"),q=s("You\u2019ll notice a lot of the dataset information is defined earlier in the loading script which makes it easier to read. There are also other "),u=l("code"),E=s("~Datasets.Features"),j=s(" you can input, so be sure to check out the full list for more details.")},l(m){c=n(m,"P",{});var w=r(c);q=o(w,"You\u2019ll notice a lot of the dataset information is defined earlier in the loading script which makes it easier to read. There are also other "),u=n(w,"CODE",{});var k=r(u);E=o(k,"~Datasets.Features"),k.forEach(a),j=o(w," you can input, so be sure to check out the full list for more details."),w.forEach(a)},m(m,w){d(m,c,w),t(c,q),t(c,u),t(u,E),t(c,j)},d(m){m&&a(c)}}}function lc(O){let c,q,u,E,j,m,w,k;return{c(){c=l("p"),q=s("To stream a TAR archive file, you need to use "),u=l("a"),E=s("DownloadManager.iter_archive()"),j=s("! The "),m=l("a"),w=s("DownloadManager.download_and_extract()"),k=s(" function does not support TAR archives in streaming mode."),this.h()},l(P){c=n(P,"P",{});var A=r(c);q=o(A,"To stream a TAR archive file, you need to use "),u=n(A,"A",{href:!0});var G=r(u);E=o(G,"DownloadManager.iter_archive()"),G.forEach(a),j=o(A,"! The "),m=n(A,"A",{href:!0});var Z=r(m);w=o(Z,"DownloadManager.download_and_extract()"),Z.forEach(a),k=o(A," function does not support TAR archives in streaming mode."),A.forEach(a),this.h()},h(){h(u,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive"),h(m,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadManager.download_and_extract")},m(P,A){d(P,c,A),t(c,q),t(c,u),t(u,E),t(c,j),t(c,m),t(m,w),t(c,k)},d(P){P&&a(c)}}}function nc(O){let c,q,u,E,j;return{c(){c=l("p"),q=s("To stream a TAR archive file, the "),u=l("code"),E=s("metadata_path"),j=s(" needs to be opened and read first. TAR files are accessed and yielded sequentially. This means you need to have the metadata information in hand first so you can yield it with its corresponding image.")},l(m){c=n(m,"P",{});var w=r(c);q=o(w,"To stream a TAR archive file, the "),u=n(w,"CODE",{});var k=r(u);E=o(k,"metadata_path"),k.forEach(a),j=o(w," needs to be opened and read first. TAR files are accessed and yielded sequentially. This means you need to have the metadata information in hand first so you can yield it with its corresponding image."),w.forEach(a)},m(m,w){d(m,c,w),t(c,q),t(c,u),t(u,E),t(c,j)},d(m){m&&a(c)}}}function rc(O){let c,q,u,E,j,m,w,k,P,A,G,Z,co,me,et,gn,Da,_n,vn,$n,Pa,yn,uo,ge,mo,ee,_e,Oa,tt,bn,Sa,wn,go,Y,En,La,jn,qn,Fa,kn,An,_o,at,vo,R,In,Na,xn,Cn,Yt,Tn,Dn,Ba,Pn,On,$o,st,yo,ve,Sn,Ga,Ln,Fn,bo,ot,wo,$e,Nn,Ra,Bn,Gn,Eo,lt,jo,z,Rn,Ua,Un,Hn,Ha,Mn,Yn,qo,nt,ko,ye,Ao,te,be,Ma,rt,zn,Ya,Vn,Io,we,Wn,za,Jn,Xn,xo,it,Co,V,Kn,Va,Qn,Zn,Wa,er,tr,To,dt,Do,ae,Ee,Ja,pt,ar,Xa,sr,Po,je,or,Ka,lr,nr,Oo,ft,So,W,rr,Qa,ir,dr,Za,pr,fr,Lo,ht,Fo,se,qe,es,ct,hr,ts,cr,No,U,ur,zt,mr,gr,ut,_r,vr,Vt,$r,yr,Bo,ke,br,Wt,wr,Er,Go,mt,Ro,oe,Ae,as,gt,jr,ss,qr,Uo,Jt,kr,Ho,_t,Mo,Xt,Ar,Yo,vt,zo,Ie,Ir,$t,xr,Cr,Vo,x,os,Tr,Dr,ls,Pr,Or,ns,Sr,Lr,rs,Fr,Nr,is,Br,Gr,ds,Rr,Ur,ps,Hr,Wo,xe,Mr,yt,Yr,zr,Jo,Ce,Xo,le,Te,fs,bt,Vr,hs,Wr,Ko,wt,Kt,Jr,Xr,Qo,J,Qt,cs,Kr,Qr,Zr,Zt,us,ei,ti,ai,ea,ms,si,oi,Zo,De,li,ta,ni,ri,el,Et,tl,ne,Pe,gs,jt,ii,_s,di,al,Oe,pi,qt,fi,hi,sl,H,ci,aa,ui,mi,vs,gi,_i,$s,vi,$i,ol,kt,ll,Se,yi,sa,bi,wi,nl,Le,re,Ei,ys,ji,qi,bs,ki,Ai,Ii,ws,xi,rl,At,il,Fe,Ci,Es,Ti,Di,dl,It,pl,ie,Ne,js,xt,Pi,qs,Oi,fl,X,Si,oa,Li,Fi,ks,Ni,Bi,hl,Ct,cl,la,Gi,ul,D,na,As,Ri,Ui,Hi,Be,Is,Mi,Yi,ra,zi,Vi,Wi,ia,xs,Ji,Xi,Ki,da,Cs,Qi,Zi,ed,pa,Ts,td,ad,sd,fa,Ds,od,ld,ml,Ge,gl,Tt,_l,de,Re,Ps,Dt,nd,Os,rd,vl,ha,id,$l,Ue,pe,Pt,dd,ca,pd,fd,hd,fe,Ot,cd,Ss,ud,md,gd,Ls,_d,vd,Fs,$d,yd,Ns,bd,wd,St,N,Ed,ua,jd,qd,Bs,kd,Ad,Gs,Id,xd,Rs,Cd,Td,Dd,T,Pd,Us,Od,Sd,Hs,Ld,Fd,ma,Nd,Bd,Ms,Gd,Rd,Ys,Ud,Hd,zs,Md,Yd,yl,He,bl,Lt,wl,he,Me,Vs,Ft,zd,Ws,Vd,El,C,Wd,ga,Jd,Xd,Js,Kd,Qd,Xs,Zd,ep,Ks,tp,ap,Qs,sp,op,Zs,lp,np,jl,Ye,ql,_a,rp,kl,Nt,Al,ce,ze,eo,Bt,ip,to,dp,Il,Ve,pp,ao,fp,hp,xl,We,cp,so,up,mp,Cl,Gt,Tl,Je,gp,oo,_p,vp,Dl,ue,Xe,lo,Rt,$p,no,yp,Pl,K,bp,va,wp,Ep,$a,jp,qp,Ol,ya,kp,Sl,Ut,Ll;return m=new B({}),ge=new Ta({props:{$$slots:{default:[tc]},$$scope:{ctx:O}}}),tt=new B({}),at=new I({props:{code:`folder/train/dog/golden_retriever.png
folder/train/dog/german_shepherd.png
folder/train/dog/chihuahua.png

folder/train/cat/maine_coon.png
folder/train/cat/bengal.png
folder/train/cat/birman.png`,highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/train/</span>dog/chihuahua.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png
folder<span class="hljs-regexp">/train/</span>cat/birman.png`}}),st=new I({props:{code:`from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)`}}),ot=new I({props:{code:`folder/train/dog/golden_retriever.png
folder/train/cat/maine_coon.png
folder/test/dog/german_shepherd.png
folder/test/cat/bengal.png`,highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/test/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/test/</span>cat/bengal.png`}}),lt=new I({props:{code:`folder/train/metadata.jsonl
folder/train/0001.png
folder/train/0002.png
folder/train/0003.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0001</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0002</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0003</span>.png`}}),nt=new I({props:{code:`{"file_name": "0001.png", "additional_feature": "This is a first value of a text feature you added to your images"}
{"file_name": "0002.png", "additional_feature": "This is a second value of a text feature you added to your images"}
{"file_name": "0003.png", "additional_feature": "This is a third value of a text feature you added to your images"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a first value of a text feature you added to your images&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a second value of a text feature you added to your images&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a third value of a text feature you added to your images&quot;</span>}`}}),ye=new Ta({props:{$$slots:{default:[ac]},$$scope:{ctx:O}}}),rt=new B({}),it=new I({props:{code:`{"file_name": "0001.png", "text": "This is a golden retriever playing with a ball"}
{"file_name": "0002.png", "text": "A german shepherd"}
{"file_name": "0003.png", "text": "One chihuahua"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a golden retriever playing with a ball&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;A german shepherd&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;One chihuahua&quot;</span>}`}}),dt=new I({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["text"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-string">&quot;This is a golden retriever playing with a ball&quot;</span>`}}),pt=new B({}),ft=new I({props:{code:`{"file_name": "0001.png", "objects": {"bbox": [[302.0, 109.0, 73.0, 52.0]], "categories": [0]}}
{"file_name": "0002.png", "objects": {"bbox": [[810.0, 100.0, 57.0, 28.0]], "categories": [1]}}
{"file_name": "0003.png", "objects": {"bbox": [[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]], "categories": [2, 2]}}`,highlighted:`{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0001.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[302.0, 109.0, 73.0, 52.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0002.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[810.0, 100.0, 57.0, 28.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">1</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0003.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]}}`}}),ht=new I({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["objects"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;objects&quot;</span>]
{<span class="hljs-string">&quot;bbox&quot;</span>: [[<span class="hljs-number">302.0</span>, <span class="hljs-number">109.0</span>, <span class="hljs-number">73.0</span>, <span class="hljs-number">52.0</span>]], <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}`}}),ct=new B({}),mt=new I({props:{code:`from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset.push_to_hub("stevhliu/my-image-captioning-dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;stevhliu/my-image-captioning-dataset&quot;</span>)`}}),gt=new B({}),_t=new I({props:{code:`my_dataset/
\u251C\u2500\u2500 README.md
\u251C\u2500\u2500 my_dataset.py
\u2514\u2500\u2500 data/  # optional, may contain your images or TAR archives`,highlighted:`my_dataset/
\u251C\u2500\u2500 README.md
\u251C\u2500\u2500 my_dataset.py
\u2514\u2500\u2500 <span class="hljs-title">data</span>/  <span class="hljs-comment"># optional, may contain your images or TAR archives</span>`}}),vt=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset("path/to/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/my_dataset&quot;</span>)`}}),Ce=new Ta({props:{$$slots:{default:[sc]},$$scope:{ctx:O}}}),bt=new B({}),Et=new I({props:{code:`class Food101(datasets.GeneratorBasedBuilder):
    """Food-101 Images dataset"""

    def _info(self):

    def _split_generators(self, dl_manager):

    def _generate_examples(self, images, metadata_path):`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">Food101</span>(datasets.GeneratorBasedBuilder):
    <span class="hljs-string">&quot;&quot;&quot;Food-101 Images dataset&quot;&quot;&quot;</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_info</span>(<span class="hljs-params">self</span>):

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_split_generators</span>(<span class="hljs-params">self, dl_manager</span>):

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_examples</span>(<span class="hljs-params">self, images, metadata_path</span>):`}}),jt=new B({}),kt=new I({props:{code:`class Food101Config(datasets.BuilderConfig):
    """Builder Config for Food-101"""
 
    def __init__(self, data_url, metadata_urls, **kwargs):
        """BuilderConfig for Food-101.
        Args:
          data_url: \`string\`, url to download the zip file from.
          metadata_urls: dictionary with keys 'train' and 'validation' containing the archive metadata URLs
          **kwargs: keyword arguments forwarded to super.
        """
        super(Food101Config, self).__init__(version=datasets.Version("1.0.0"), **kwargs)
        self.data_url = data_url
        self.metadata_urls = metadata_urls`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">Food101Config</span>(datasets.BuilderConfig):
    <span class="hljs-string">&quot;&quot;&quot;Builder Config for Food-101&quot;&quot;&quot;</span>
 
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data_url, metadata_urls, **kwargs</span>):
        <span class="hljs-string">&quot;&quot;&quot;BuilderConfig for Food-101.
        Args:
          data_url: \`string\`, url to download the zip file from.
          metadata_urls: dictionary with keys &#x27;train&#x27; and &#x27;validation&#x27; containing the archive metadata URLs
          **kwargs: keyword arguments forwarded to super.
        &quot;&quot;&quot;</span>
        <span class="hljs-built_in">super</span>(Food101Config, self).__init__(version=datasets.Version(<span class="hljs-string">&quot;1.0.0&quot;</span>), **kwargs)
        self.data_url = data_url
        self.metadata_urls = metadata_urls`}}),At=new I({props:{code:`class Food101(datasets.GeneratorBasedBuilder):
    """Food-101 Images dataset"""
 
    BUILDER_CONFIGS = [
        Food101Config(
            name="breakfast",
            description="Food types commonly eaten during breakfast.",
            data_url="https://link-to-breakfast-foods.zip",
            metadata_urls={
                "train": "https://link-to-breakfast-foods-train.txt", 
                "validation": "https://link-to-breakfast-foods-validation.txt"
            },
        ,
        Food101Config(
            name="dinner",
            description="Food types commonly eaten during dinner.",
            data_url="https://link-to-dinner-foods.zip",
            metadata_urls={
                "train": "https://link-to-dinner-foods-train.txt", 
                "validation": "https://link-to-dinner-foods-validation.txt"
            },
        )...
    ]`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">Food101</span>(datasets.GeneratorBasedBuilder):
    <span class="hljs-string">&quot;&quot;&quot;Food-101 Images dataset&quot;&quot;&quot;</span>
 
    BUILDER_CONFIGS = [
        Food101Config(
            name=<span class="hljs-string">&quot;breakfast&quot;</span>,
            description=<span class="hljs-string">&quot;Food types commonly eaten during breakfast.&quot;</span>,
            data_url=<span class="hljs-string">&quot;https://link-to-breakfast-foods.zip&quot;</span>,
            metadata_urls={
                <span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;https://link-to-breakfast-foods-train.txt&quot;</span>, 
                <span class="hljs-string">&quot;validation&quot;</span>: <span class="hljs-string">&quot;https://link-to-breakfast-foods-validation.txt&quot;</span>
            },
        ,
        Food101Config(
            name=<span class="hljs-string">&quot;dinner&quot;</span>,
            description=<span class="hljs-string">&quot;Food types commonly eaten during dinner.&quot;</span>,
            data_url=<span class="hljs-string">&quot;https://link-to-dinner-foods.zip&quot;</span>,
            metadata_urls={
                <span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;https://link-to-dinner-foods-train.txt&quot;</span>, 
                <span class="hljs-string">&quot;validation&quot;</span>: <span class="hljs-string">&quot;https://link-to-dinner-foods-validation.txt&quot;</span>
            },
        )...
    ]`}}),It=new I({props:{code:`from datasets import load_dataset
ds = load_dataset("food101", "breakfast", split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, <span class="hljs-string">&quot;breakfast&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),xt=new B({}),Ct=new I({props:{code:`from datasets import load_dataset_builder
ds_builder = load_dataset_builder("food101")
ds_builder.info`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder = load_dataset_builder(<span class="hljs-string">&quot;food101&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder.info`}}),Ge=new Ta({props:{$$slots:{default:[oc]},$$scope:{ctx:O}}}),Tt=new I({props:{code:`def _info(self):
    return datasets.DatasetInfo(
        description=_DESCRIPTION,
        features=datasets.Features(
            {
                "image": datasets.Image(),
                "label": datasets.ClassLabel(names=_NAMES),
            }
        ),
        supervised_keys=("image", "label"),
        homepage=_HOMEPAGE,
        citation=_CITATION,
        license=_LICENSE,
        task_templates=[ImageClassification(image_column="image", label_column="label")],
    )`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_info</span>(<span class="hljs-params">self</span>):
    <span class="hljs-keyword">return</span> datasets.DatasetInfo(
        description=_DESCRIPTION,
        features=datasets.Features(
            {
                <span class="hljs-string">&quot;image&quot;</span>: datasets.Image(),
                <span class="hljs-string">&quot;label&quot;</span>: datasets.ClassLabel(names=_NAMES),
            }
        ),
        supervised_keys=(<span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>),
        homepage=_HOMEPAGE,
        citation=_CITATION,
        license=_LICENSE,
        task_templates=[ImageClassification(image_column=<span class="hljs-string">&quot;image&quot;</span>, label_column=<span class="hljs-string">&quot;label&quot;</span>)],
    )`}}),Dt=new B({}),He=new Ta({props:{warning:!0,$$slots:{default:[lc]},$$scope:{ctx:O}}}),Lt=new I({props:{code:`def _split_generators(self, dl_manager):
    archive_path = dl_manager.download(_BASE_URL)
    split_metadata_paths = dl_manager.download(_METADATA_URLS)
    return [
        datasets.SplitGenerator(
            name=datasets.Split.TRAIN,
            gen_kwargs={
                "images": dl_manager.iter_archive(archive_path),
                "metadata_path": split_metadata_paths["train"],
            },
        ),
        datasets.SplitGenerator(
            name=datasets.Split.VALIDATION,
            gen_kwargs={
                "images": dl_manager.iter_archive(archive_path),
                "metadata_path": split_metadata_paths["test"],
            },
        ),
    ]`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_split_generators</span>(<span class="hljs-params">self, dl_manager</span>):
    archive_path = dl_manager.download(_BASE_URL)
    split_metadata_paths = dl_manager.download(_METADATA_URLS)
    <span class="hljs-keyword">return</span> [
        datasets.SplitGenerator(
            name=datasets.Split.TRAIN,
            gen_kwargs={
                <span class="hljs-string">&quot;images&quot;</span>: dl_manager.iter_archive(archive_path),
                <span class="hljs-string">&quot;metadata_path&quot;</span>: split_metadata_paths[<span class="hljs-string">&quot;train&quot;</span>],
            },
        ),
        datasets.SplitGenerator(
            name=datasets.Split.VALIDATION,
            gen_kwargs={
                <span class="hljs-string">&quot;images&quot;</span>: dl_manager.iter_archive(archive_path),
                <span class="hljs-string">&quot;metadata_path&quot;</span>: split_metadata_paths[<span class="hljs-string">&quot;test&quot;</span>],
            },
        ),
    ]`}}),Ft=new B({}),Ye=new Ta({props:{warning:!0,$$slots:{default:[nc]},$$scope:{ctx:O}}}),Nt=new I({props:{code:`def _generate_examples(self, images, metadata_path):
    """Generate images and labels for splits."""
    with open(metadata_path, encoding="utf-8") as f:
        files_to_keep = set(f.read().split("\\n"))
    for file_path, file_obj in images:
        if file_path.startswith(_IMAGES_DIR):
            if file_path[len(_IMAGES_DIR) : -len(".jpg")] in files_to_keep:
                label = file_path.split("/")[2]
                yield file_path, {
                    "image": {"path": file_path, "bytes": file_obj.read()},
                    "label": label,
                }`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_examples</span>(<span class="hljs-params">self, images, metadata_path</span>):
    <span class="hljs-string">&quot;&quot;&quot;Generate images and labels for splits.&quot;&quot;&quot;</span>
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(metadata_path, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:
        files_to_keep = <span class="hljs-built_in">set</span>(f.read().split(<span class="hljs-string">&quot;\\n&quot;</span>))
    <span class="hljs-keyword">for</span> file_path, file_obj <span class="hljs-keyword">in</span> images:
        <span class="hljs-keyword">if</span> file_path.startswith(_IMAGES_DIR):
            <span class="hljs-keyword">if</span> file_path[<span class="hljs-built_in">len</span>(_IMAGES_DIR) : -<span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;.jpg&quot;</span>)] <span class="hljs-keyword">in</span> files_to_keep:
                label = file_path.split(<span class="hljs-string">&quot;/&quot;</span>)[<span class="hljs-number">2</span>]
                <span class="hljs-keyword">yield</span> file_path, {
                    <span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;path&quot;</span>: file_path, <span class="hljs-string">&quot;bytes&quot;</span>: file_obj.read()},
                    <span class="hljs-string">&quot;label&quot;</span>: label,
                }`}}),Bt=new B({}),Gt=new I({props:{code:"datasets-cli test path/to/<your-dataset-loading-script> --save_info --all_configs",highlighted:'datasets-cli <span class="hljs-built_in">test</span> path/to/&lt;your-dataset-loading-script&gt; --save_info --all_configs'}}),Rt=new B({}),Ut=new I({props:{code:`from datasets import load_dataset
load_dataset("<username>/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>load_dataset(<span class="hljs-string">&quot;&lt;username&gt;/my_dataset&quot;</span>)`}}),{c(){c=l("meta"),q=p(),u=l("h1"),E=l("a"),j=l("span"),g(m.$$.fragment),w=p(),k=l("span"),P=s("Create an image dataset"),A=p(),G=l("p"),Z=s("There are two methods for creating and sharing an image dataset. This guide will show you how to:"),co=p(),me=l("ul"),et=l("li"),gn=s("Create an image dataset with "),Da=l("code"),_n=s("ImageFolder"),vn=s(" and some metadata. This is a no-code solution for quickly creating an image dataset."),$n=p(),Pa=l("li"),yn=s("Create an image dataset by writing a loading script. This method is a bit more involved, but you have greater flexibility over how a dataset is defined, downloaded, and generated."),uo=p(),g(ge.$$.fragment),mo=p(),ee=l("h2"),_e=l("a"),Oa=l("span"),g(tt.$$.fragment),bn=p(),Sa=l("span"),wn=s("ImageFolder"),go=p(),Y=l("p"),En=s("The "),La=l("code"),jn=s("ImageFolder"),qn=s(" is a dataset builder designed to quickly load an image dataset without requiring you to write any code. "),Fa=l("code"),kn=s("ImageFolder"),An=s(" automatically infers the class labels of your dataset based on the directory name. Just store your dataset in a directory structure like:"),_o=p(),g(at.$$.fragment),vo=p(),R=l("p"),In=s("Then users can load your dataset by specifying "),Na=l("code"),xn=s("imagefolder"),Cn=s(" in "),Yt=l("a"),Tn=s("load_dataset()"),Dn=s(" and the directory in "),Ba=l("code"),Pn=s("data_dir"),On=s(":"),$o=p(),g(st.$$.fragment),yo=p(),ve=l("p"),Sn=s("You can also use "),Ga=l("code"),Ln=s("imagefolder"),Fn=s(" to load datasets involving multiple splits. To do so, your dataset directory should have the following structure:"),bo=p(),g(ot.$$.fragment),wo=p(),$e=l("p"),Nn=s("If there is additional information you\u2019d like to include about your dataset, like text captions or bounding boxes, add it as a "),Ra=l("code"),Bn=s("metadata.jsonl"),Gn=s(" file in your folder. This lets you quickly create datasets for different computer vision tasks like text captioning or object detection."),Eo=p(),g(lt.$$.fragment),jo=p(),z=l("p"),Rn=s("Your "),Ua=l("code"),Un=s("metadata.jsonl"),Hn=s(" file must have a "),Ha=l("code"),Mn=s("file_name"),Yn=s(" column which links image files with their metadata:"),qo=p(),g(nt.$$.fragment),ko=p(),g(ye.$$.fragment),Ao=p(),te=l("h3"),be=l("a"),Ma=l("span"),g(rt.$$.fragment),zn=p(),Ya=l("span"),Vn=s("Image captioning"),Io=p(),we=l("p"),Wn=s("Image captioning datasets have text describing an image. An example "),za=l("code"),Jn=s("metadata.jsonl"),Xn=s(" may look like:"),xo=p(),g(it.$$.fragment),Co=p(),V=l("p"),Kn=s("Load the dataset with "),Va=l("code"),Qn=s("ImageFolder"),Zn=s(", and it will create a "),Wa=l("code"),er=s("text"),tr=s(" column for the image captions:"),To=p(),g(dt.$$.fragment),Do=p(),ae=l("h3"),Ee=l("a"),Ja=l("span"),g(pt.$$.fragment),ar=p(),Xa=l("span"),sr=s("Object detection"),Po=p(),je=l("p"),or=s("Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),Ka=l("code"),lr=s("metadata.jsonl"),nr=s(" may look like:"),Oo=p(),g(ft.$$.fragment),So=p(),W=l("p"),rr=s("Load the dataset with "),Qa=l("code"),ir=s("ImageFolder"),dr=s(", and it will create a "),Za=l("code"),pr=s("objects"),fr=s(" column with the bounding boxes and the categories:"),Lo=p(),g(ht.$$.fragment),Fo=p(),se=l("h3"),qe=l("a"),es=l("span"),g(ct.$$.fragment),hr=p(),ts=l("span"),cr=s("Upload dataset to the Hub"),No=p(),U=l("p"),ur=s("Once you\u2019ve created a dataset, you can share it to the Hub with the "),zt=l("a"),mr=s("push_to_hub()"),gr=s(" method. Make sure you have the "),ut=l("a"),_r=s("huggingface_hub"),vr=s(" library installed and you\u2019re logged in to your Hugging Face account (see the "),Vt=l("a"),$r=s("Upload with Python tutorial"),yr=s(" for more details)."),Bo=p(),ke=l("p"),br=s("Upload your dataset with "),Wt=l("a"),wr=s("push_to_hub()"),Er=s(":"),Go=p(),g(mt.$$.fragment),Ro=p(),oe=l("h2"),Ae=l("a"),as=l("span"),g(gt.$$.fragment),jr=p(),ss=l("span"),qr=s("Loading script"),Uo=p(),Jt=l("p"),kr=s("Write a dataset loading script to share a dataset. It defines a dataset\u2019s splits and configurations, and handles downloading and generating a dataset. The script is located in the same folder or repository as the dataset."),Ho=p(),g(_t.$$.fragment),Mo=p(),Xt=l("p"),Ar=s("This structure allows your dataset to be loaded in one line:"),Yo=p(),g(vt.$$.fragment),zo=p(),Ie=l("p"),Ir=s("This guide will show you how to create a dataset loading script for image datasets, which is a bit different from "),$t=l("a"),xr=s("creating a loading script for text datasets"),Cr=s(". You\u2019ll learn how to:"),Vo=p(),x=l("ul"),os=l("li"),Tr=s("Create a dataset builder class."),Dr=p(),ls=l("li"),Pr=s("Create dataset configurations."),Or=p(),ns=l("li"),Sr=s("Add dataset metadata."),Lr=p(),rs=l("li"),Fr=s("Download and define the dataset splits."),Nr=p(),is=l("li"),Br=s("Generate the dataset."),Gr=p(),ds=l("li"),Rr=s("Generate the dataset metadata (optional)."),Ur=p(),ps=l("li"),Hr=s("Upload the dataset to the Hub."),Wo=p(),xe=l("p"),Mr=s("The best way to learn is to open up an existing image dataset loading script, like "),yt=l("a"),Yr=s("Food-101"),zr=s(", and follow along!"),Jo=p(),g(Ce.$$.fragment),Xo=p(),le=l("h3"),Te=l("a"),fs=l("span"),g(bt.$$.fragment),Vr=p(),hs=l("span"),Wr=s("Create a dataset builder class"),Ko=p(),wt=l("p"),Kt=l("a"),Jr=s("GeneratorBasedBuilder"),Xr=s(" is the base class for datasets generated from a dictionary generator. Within this class, there are three methods to help create your dataset:"),Qo=p(),J=l("ul"),Qt=l("li"),cs=l("code"),Kr=s("info"),Qr=s(" stores information about your dataset like its description, license, and features."),Zr=p(),Zt=l("li"),us=l("code"),ei=s("split_generators"),ti=s(" downloads the dataset and defines its splits."),ai=p(),ea=l("li"),ms=l("code"),si=s("generate_examples"),oi=s(" generates the images and labels for each split."),Zo=p(),De=l("p"),li=s("Start by creating your dataset class as a subclass of "),ta=l("a"),ni=s("GeneratorBasedBuilder"),ri=s(" and add the three methods. Don\u2019t worry about filling in each of these methods yet, you\u2019ll develop those over the next few sections:"),el=p(),g(Et.$$.fragment),tl=p(),ne=l("h4"),Pe=l("a"),gs=l("span"),g(jt.$$.fragment),ii=p(),_s=l("span"),di=s("Multiple configurations"),al=p(),Oe=l("p"),pi=s("In some cases, a dataset may have more than one configuration. For example, if you check out the "),qt=l("a"),fi=s("Imagenette dataset"),hi=s(", you\u2019ll notice there are three subsets."),sl=p(),H=l("p"),ci=s("To create different configurations, use the "),aa=l("a"),ui=s("BuilderConfig"),mi=s(" class to create a subclass for your dataset. Provide the links to download the images and labels in "),vs=l("code"),gi=s("data_url"),_i=s(" and "),$s=l("code"),vi=s("metadata_urls"),$i=s(":"),ol=p(),g(kt.$$.fragment),ll=p(),Se=l("p"),yi=s("Now you can define your subsets at the top of "),sa=l("a"),bi=s("GeneratorBasedBuilder"),wi=s(". Imagine you want to create two subsets in the Food-101 dataset based on whether it is a breakfast or dinner food."),nl=p(),Le=l("ol"),re=l("li"),Ei=s("Define your subsets with "),ys=l("code"),ji=s("Food101Config"),qi=s(" in a list in "),bs=l("code"),ki=s("BUILDER_CONFIGS"),Ai=s("."),Ii=p(),ws=l("li"),xi=s("For each configuration, provide a name, description, and where to download the images and labels from."),rl=p(),g(At.$$.fragment),il=p(),Fe=l("p"),Ci=s("Now if users want to load the "),Es=l("code"),Ti=s("breakfast"),Di=s(" configuration, they can use the configuration name:"),dl=p(),g(It.$$.fragment),pl=p(),ie=l("h3"),Ne=l("a"),js=l("span"),g(xt.$$.fragment),Pi=p(),qs=l("span"),Oi=s("Add dataset metadata"),fl=p(),X=l("p"),Si=s("Adding information about your dataset is useful for users to learn more about it. This information is stored in the "),oa=l("a"),Li=s("DatasetInfo"),Fi=s(" class which is returned by the "),ks=l("code"),Ni=s("info"),Bi=s(" method. Users can access this information by:"),hl=p(),g(Ct.$$.fragment),cl=p(),la=l("p"),Gi=s("There is a lot of information you can specify about your dataset, but some important ones to include are:"),ul=p(),D=l("ol"),na=l("li"),As=l("code"),Ri=s("description"),Ui=s(" provides a concise description of the dataset."),Hi=p(),Be=l("li"),Is=l("code"),Mi=s("features"),Yi=s(" specify the dataset column types. Since you\u2019re creating an image loading script, you\u2019ll need to include the "),ra=l("a"),zi=s("Image"),Vi=s(" feature."),Wi=p(),ia=l("li"),xs=l("code"),Ji=s("supervised_keys"),Xi=s(" specify the input feature and label."),Ki=p(),da=l("li"),Cs=l("code"),Qi=s("homepage"),Zi=s(" provides a link to the dataset homepage."),ed=p(),pa=l("li"),Ts=l("code"),td=s("citation"),ad=s(" is a BibTeX citation of the dataset."),sd=p(),fa=l("li"),Ds=l("code"),od=s("license"),ld=s(" states the dataset\u2019s license."),ml=p(),g(Ge.$$.fragment),gl=p(),g(Tt.$$.fragment),_l=p(),de=l("h3"),Re=l("a"),Ps=l("span"),g(Dt.$$.fragment),nd=p(),Os=l("span"),rd=s("Download and define the dataset splits"),vl=p(),ha=l("p"),id=s("Now that you\u2019ve added some information about your dataset, the next step is to download the dataset and generate the splits."),$l=p(),Ue=l("ol"),pe=l("li"),Pt=l("p"),dd=s("Use the "),ca=l("a"),pd=s("DownloadManager.download()"),fd=s(" method to download the dataset and any other metadata you\u2019d like to associate with it. This method accepts:"),hd=p(),fe=l("ul"),Ot=l("li"),cd=s("a name to a file inside a Hub dataset repository (in other words, the "),Ss=l("code"),ud=s("data/"),md=s(" folder)"),gd=p(),Ls=l("li"),_d=s("a URL to a file hosted somewhere else"),vd=p(),Fs=l("li"),$d=s("a list or dictionary of file names or URLs"),yd=p(),Ns=l("p"),bd=s("In the Food-101 loading script, you\u2019ll notice again the URLs are defined earlier in the script."),wd=p(),St=l("li"),N=l("p"),Ed=s("After you\u2019ve downloaded the dataset, use the "),ua=l("a"),jd=s("SplitGenerator"),qd=s(" to organize the images and labels in each split. Name each split with a standard name like: "),Bs=l("code"),kd=s("Split.TRAIN"),Ad=s(", "),Gs=l("code"),Id=s("Split.TEST"),xd=s(", and "),Rs=l("code"),Cd=s("SPLIT.Validation"),Td=s("."),Dd=p(),T=l("p"),Pd=s("In the "),Us=l("code"),Od=s("gen_kwargs"),Sd=s(" parameter, specify the file paths to the "),Hs=l("code"),Ld=s("images"),Fd=s(" to iterate over and load. If necessary, you can use "),ma=l("a"),Nd=s("DownloadManager.iter_archive()"),Bd=s(" to iterate over images in TAR archives. You can also specify the associated labels in the "),Ms=l("code"),Gd=s("metadata_path"),Rd=s(". The "),Ys=l("code"),Ud=s("images"),Hd=s(" and "),zs=l("code"),Md=s("metadata_path"),Yd=s(" are actually passed onto the next step where you\u2019ll actually generate the dataset."),yl=p(),g(He.$$.fragment),bl=p(),g(Lt.$$.fragment),wl=p(),he=l("h3"),Me=l("a"),Vs=l("span"),g(Ft.$$.fragment),zd=p(),Ws=l("span"),Vd=s("Generate the dataset"),El=p(),C=l("p"),Wd=s("The last method in the "),ga=l("a"),Jd=s("GeneratorBasedBuilder"),Xd=s(" class actually generates the images and labels in the dataset. It yields a dataset according to the stucture specified in "),Js=l("code"),Kd=s("features"),Qd=s(" from the "),Xs=l("code"),Zd=s("info"),ep=s(" method. As you can see, "),Ks=l("code"),tp=s("generate_examples"),ap=s(" accepts the "),Qs=l("code"),sp=s("images"),op=s(" and "),Zs=l("code"),lp=s("metadata_path"),np=s(" from the previous method as arguments."),jl=p(),g(Ye.$$.fragment),ql=p(),_a=l("p"),rp=s("Now you can write a function for opening and loading examples from the dataset:"),kl=p(),g(Nt.$$.fragment),Al=p(),ce=l("h3"),ze=l("a"),eo=l("span"),g(Bt.$$.fragment),ip=p(),to=l("span"),dp=s("Generate the dataset metadata (optional)"),Il=p(),Ve=l("p"),pp=s("The dataset metadata you added earlier now needs to be generated and stored in a file called "),ao=l("code"),fp=s("datasets_infos.json"),hp=s(". In addition to information about a datasets features and description, this file also contains data file checksums to ensure integrity."),xl=p(),We=l("p"),cp=s("Run the following command to generate your dataset metadata in "),so=l("code"),up=s("dataset_infos.json"),mp=s(" and make sure your new loading script works correctly:"),Cl=p(),g(Gt.$$.fragment),Tl=p(),Je=l("p"),gp=s("If your loading script passed the test, you should now have a "),oo=l("code"),_p=s("dataset_infos.json"),vp=s(" file in your dataset folder."),Dl=p(),ue=l("h3"),Xe=l("a"),lo=l("span"),g(Rt.$$.fragment),$p=p(),no=l("span"),yp=s("Upload the dataset to the Hub"),Pl=p(),K=l("p"),bp=s("Once your script is ready, "),va=l("a"),wp=s("create a dataset card"),Ep=s(" and "),$a=l("a"),jp=s("upload it to the Hub"),qp=s("."),Ol=p(),ya=l("p"),kp=s("Congratulations, you can now load your dataset from the Hub! \u{1F973}"),Sl=p(),g(Ut.$$.fragment),this.h()},l(e){const i=Zh('[data-svelte="svelte-1phssyn"]',document.head);c=n(i,"META",{name:!0,content:!0}),i.forEach(a),q=f(e),u=n(e,"H1",{class:!0});var Ht=r(u);E=n(Ht,"A",{id:!0,class:!0,href:!0});var ro=r(E);j=n(ro,"SPAN",{});var io=r(j);_(m.$$.fragment,io),io.forEach(a),ro.forEach(a),w=f(Ht),k=n(Ht,"SPAN",{});var po=r(k);P=o(po,"Create an image dataset"),po.forEach(a),Ht.forEach(a),A=f(e),G=n(e,"P",{});var fo=r(G);Z=o(fo,"There are two methods for creating and sharing an image dataset. This guide will show you how to:"),fo.forEach(a),co=f(e),me=n(e,"UL",{});var Mt=r(me);et=n(Mt,"LI",{});var Fl=r(et);gn=o(Fl,"Create an image dataset with "),Da=n(Fl,"CODE",{});var Lp=r(Da);_n=o(Lp,"ImageFolder"),Lp.forEach(a),vn=o(Fl," and some metadata. This is a no-code solution for quickly creating an image dataset."),Fl.forEach(a),$n=f(Mt),Pa=n(Mt,"LI",{});var Fp=r(Pa);yn=o(Fp,"Create an image dataset by writing a loading script. This method is a bit more involved, but you have greater flexibility over how a dataset is defined, downloaded, and generated."),Fp.forEach(a),Mt.forEach(a),uo=f(e),_(ge.$$.fragment,e),mo=f(e),ee=n(e,"H2",{class:!0});var Nl=r(ee);_e=n(Nl,"A",{id:!0,class:!0,href:!0});var Np=r(_e);Oa=n(Np,"SPAN",{});var Bp=r(Oa);_(tt.$$.fragment,Bp),Bp.forEach(a),Np.forEach(a),bn=f(Nl),Sa=n(Nl,"SPAN",{});var Gp=r(Sa);wn=o(Gp,"ImageFolder"),Gp.forEach(a),Nl.forEach(a),go=f(e),Y=n(e,"P",{});var ba=r(Y);En=o(ba,"The "),La=n(ba,"CODE",{});var Rp=r(La);jn=o(Rp,"ImageFolder"),Rp.forEach(a),qn=o(ba," is a dataset builder designed to quickly load an image dataset without requiring you to write any code. "),Fa=n(ba,"CODE",{});var Up=r(Fa);kn=o(Up,"ImageFolder"),Up.forEach(a),An=o(ba," automatically infers the class labels of your dataset based on the directory name. Just store your dataset in a directory structure like:"),ba.forEach(a),_o=f(e),_(at.$$.fragment,e),vo=f(e),R=n(e,"P",{});var Ke=r(R);In=o(Ke,"Then users can load your dataset by specifying "),Na=n(Ke,"CODE",{});var Hp=r(Na);xn=o(Hp,"imagefolder"),Hp.forEach(a),Cn=o(Ke," in "),Yt=n(Ke,"A",{href:!0});var Mp=r(Yt);Tn=o(Mp,"load_dataset()"),Mp.forEach(a),Dn=o(Ke," and the directory in "),Ba=n(Ke,"CODE",{});var Yp=r(Ba);Pn=o(Yp,"data_dir"),Yp.forEach(a),On=o(Ke,":"),Ke.forEach(a),$o=f(e),_(st.$$.fragment,e),yo=f(e),ve=n(e,"P",{});var Bl=r(ve);Sn=o(Bl,"You can also use "),Ga=n(Bl,"CODE",{});var zp=r(Ga);Ln=o(zp,"imagefolder"),zp.forEach(a),Fn=o(Bl," to load datasets involving multiple splits. To do so, your dataset directory should have the following structure:"),Bl.forEach(a),bo=f(e),_(ot.$$.fragment,e),wo=f(e),$e=n(e,"P",{});var Gl=r($e);Nn=o(Gl,"If there is additional information you\u2019d like to include about your dataset, like text captions or bounding boxes, add it as a "),Ra=n(Gl,"CODE",{});var Vp=r(Ra);Bn=o(Vp,"metadata.jsonl"),Vp.forEach(a),Gn=o(Gl," file in your folder. This lets you quickly create datasets for different computer vision tasks like text captioning or object detection."),Gl.forEach(a),Eo=f(e),_(lt.$$.fragment,e),jo=f(e),z=n(e,"P",{});var wa=r(z);Rn=o(wa,"Your "),Ua=n(wa,"CODE",{});var Wp=r(Ua);Un=o(Wp,"metadata.jsonl"),Wp.forEach(a),Hn=o(wa," file must have a "),Ha=n(wa,"CODE",{});var Jp=r(Ha);Mn=o(Jp,"file_name"),Jp.forEach(a),Yn=o(wa," column which links image files with their metadata:"),wa.forEach(a),qo=f(e),_(nt.$$.fragment,e),ko=f(e),_(ye.$$.fragment,e),Ao=f(e),te=n(e,"H3",{class:!0});var Rl=r(te);be=n(Rl,"A",{id:!0,class:!0,href:!0});var Xp=r(be);Ma=n(Xp,"SPAN",{});var Kp=r(Ma);_(rt.$$.fragment,Kp),Kp.forEach(a),Xp.forEach(a),zn=f(Rl),Ya=n(Rl,"SPAN",{});var Qp=r(Ya);Vn=o(Qp,"Image captioning"),Qp.forEach(a),Rl.forEach(a),Io=f(e),we=n(e,"P",{});var Ul=r(we);Wn=o(Ul,"Image captioning datasets have text describing an image. An example "),za=n(Ul,"CODE",{});var Zp=r(za);Jn=o(Zp,"metadata.jsonl"),Zp.forEach(a),Xn=o(Ul," may look like:"),Ul.forEach(a),xo=f(e),_(it.$$.fragment,e),Co=f(e),V=n(e,"P",{});var Ea=r(V);Kn=o(Ea,"Load the dataset with "),Va=n(Ea,"CODE",{});var ef=r(Va);Qn=o(ef,"ImageFolder"),ef.forEach(a),Zn=o(Ea,", and it will create a "),Wa=n(Ea,"CODE",{});var tf=r(Wa);er=o(tf,"text"),tf.forEach(a),tr=o(Ea," column for the image captions:"),Ea.forEach(a),To=f(e),_(dt.$$.fragment,e),Do=f(e),ae=n(e,"H3",{class:!0});var Hl=r(ae);Ee=n(Hl,"A",{id:!0,class:!0,href:!0});var af=r(Ee);Ja=n(af,"SPAN",{});var sf=r(Ja);_(pt.$$.fragment,sf),sf.forEach(a),af.forEach(a),ar=f(Hl),Xa=n(Hl,"SPAN",{});var of=r(Xa);sr=o(of,"Object detection"),of.forEach(a),Hl.forEach(a),Po=f(e),je=n(e,"P",{});var Ml=r(je);or=o(Ml,"Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),Ka=n(Ml,"CODE",{});var lf=r(Ka);lr=o(lf,"metadata.jsonl"),lf.forEach(a),nr=o(Ml," may look like:"),Ml.forEach(a),Oo=f(e),_(ft.$$.fragment,e),So=f(e),W=n(e,"P",{});var ja=r(W);rr=o(ja,"Load the dataset with "),Qa=n(ja,"CODE",{});var nf=r(Qa);ir=o(nf,"ImageFolder"),nf.forEach(a),dr=o(ja,", and it will create a "),Za=n(ja,"CODE",{});var rf=r(Za);pr=o(rf,"objects"),rf.forEach(a),fr=o(ja," column with the bounding boxes and the categories:"),ja.forEach(a),Lo=f(e),_(ht.$$.fragment,e),Fo=f(e),se=n(e,"H3",{class:!0});var Yl=r(se);qe=n(Yl,"A",{id:!0,class:!0,href:!0});var df=r(qe);es=n(df,"SPAN",{});var pf=r(es);_(ct.$$.fragment,pf),pf.forEach(a),df.forEach(a),hr=f(Yl),ts=n(Yl,"SPAN",{});var ff=r(ts);cr=o(ff,"Upload dataset to the Hub"),ff.forEach(a),Yl.forEach(a),No=f(e),U=n(e,"P",{});var Qe=r(U);ur=o(Qe,"Once you\u2019ve created a dataset, you can share it to the Hub with the "),zt=n(Qe,"A",{href:!0});var hf=r(zt);mr=o(hf,"push_to_hub()"),hf.forEach(a),gr=o(Qe," method. Make sure you have the "),ut=n(Qe,"A",{href:!0,rel:!0});var cf=r(ut);_r=o(cf,"huggingface_hub"),cf.forEach(a),vr=o(Qe," library installed and you\u2019re logged in to your Hugging Face account (see the "),Vt=n(Qe,"A",{href:!0});var uf=r(Vt);$r=o(uf,"Upload with Python tutorial"),uf.forEach(a),yr=o(Qe," for more details)."),Qe.forEach(a),Bo=f(e),ke=n(e,"P",{});var zl=r(ke);br=o(zl,"Upload your dataset with "),Wt=n(zl,"A",{href:!0});var mf=r(Wt);wr=o(mf,"push_to_hub()"),mf.forEach(a),Er=o(zl,":"),zl.forEach(a),Go=f(e),_(mt.$$.fragment,e),Ro=f(e),oe=n(e,"H2",{class:!0});var Vl=r(oe);Ae=n(Vl,"A",{id:!0,class:!0,href:!0});var gf=r(Ae);as=n(gf,"SPAN",{});var _f=r(as);_(gt.$$.fragment,_f),_f.forEach(a),gf.forEach(a),jr=f(Vl),ss=n(Vl,"SPAN",{});var vf=r(ss);qr=o(vf,"Loading script"),vf.forEach(a),Vl.forEach(a),Uo=f(e),Jt=n(e,"P",{});var $f=r(Jt);kr=o($f,"Write a dataset loading script to share a dataset. It defines a dataset\u2019s splits and configurations, and handles downloading and generating a dataset. The script is located in the same folder or repository as the dataset."),$f.forEach(a),Ho=f(e),_(_t.$$.fragment,e),Mo=f(e),Xt=n(e,"P",{});var yf=r(Xt);Ar=o(yf,"This structure allows your dataset to be loaded in one line:"),yf.forEach(a),Yo=f(e),_(vt.$$.fragment,e),zo=f(e),Ie=n(e,"P",{});var Wl=r(Ie);Ir=o(Wl,"This guide will show you how to create a dataset loading script for image datasets, which is a bit different from "),$t=n(Wl,"A",{class:!0,href:!0});var bf=r($t);xr=o(bf,"creating a loading script for text datasets"),bf.forEach(a),Cr=o(Wl,". You\u2019ll learn how to:"),Wl.forEach(a),Vo=f(e),x=n(e,"UL",{});var S=r(x);os=n(S,"LI",{});var wf=r(os);Tr=o(wf,"Create a dataset builder class."),wf.forEach(a),Dr=f(S),ls=n(S,"LI",{});var Ef=r(ls);Pr=o(Ef,"Create dataset configurations."),Ef.forEach(a),Or=f(S),ns=n(S,"LI",{});var jf=r(ns);Sr=o(jf,"Add dataset metadata."),jf.forEach(a),Lr=f(S),rs=n(S,"LI",{});var qf=r(rs);Fr=o(qf,"Download and define the dataset splits."),qf.forEach(a),Nr=f(S),is=n(S,"LI",{});var kf=r(is);Br=o(kf,"Generate the dataset."),kf.forEach(a),Gr=f(S),ds=n(S,"LI",{});var Af=r(ds);Rr=o(Af,"Generate the dataset metadata (optional)."),Af.forEach(a),Ur=f(S),ps=n(S,"LI",{});var If=r(ps);Hr=o(If,"Upload the dataset to the Hub."),If.forEach(a),S.forEach(a),Wo=f(e),xe=n(e,"P",{});var Jl=r(xe);Mr=o(Jl,"The best way to learn is to open up an existing image dataset loading script, like "),yt=n(Jl,"A",{href:!0,rel:!0});var xf=r(yt);Yr=o(xf,"Food-101"),xf.forEach(a),zr=o(Jl,", and follow along!"),Jl.forEach(a),Jo=f(e),_(Ce.$$.fragment,e),Xo=f(e),le=n(e,"H3",{class:!0});var Xl=r(le);Te=n(Xl,"A",{id:!0,class:!0,href:!0});var Cf=r(Te);fs=n(Cf,"SPAN",{});var Tf=r(fs);_(bt.$$.fragment,Tf),Tf.forEach(a),Cf.forEach(a),Vr=f(Xl),hs=n(Xl,"SPAN",{});var Df=r(hs);Wr=o(Df,"Create a dataset builder class"),Df.forEach(a),Xl.forEach(a),Ko=f(e),wt=n(e,"P",{});var Ap=r(wt);Kt=n(Ap,"A",{href:!0});var Pf=r(Kt);Jr=o(Pf,"GeneratorBasedBuilder"),Pf.forEach(a),Xr=o(Ap," is the base class for datasets generated from a dictionary generator. Within this class, there are three methods to help create your dataset:"),Ap.forEach(a),Qo=f(e),J=n(e,"UL",{});var qa=r(J);Qt=n(qa,"LI",{});var Ip=r(Qt);cs=n(Ip,"CODE",{});var Of=r(cs);Kr=o(Of,"info"),Of.forEach(a),Qr=o(Ip," stores information about your dataset like its description, license, and features."),Ip.forEach(a),Zr=f(qa),Zt=n(qa,"LI",{});var xp=r(Zt);us=n(xp,"CODE",{});var Sf=r(us);ei=o(Sf,"split_generators"),Sf.forEach(a),ti=o(xp," downloads the dataset and defines its splits."),xp.forEach(a),ai=f(qa),ea=n(qa,"LI",{});var Cp=r(ea);ms=n(Cp,"CODE",{});var Lf=r(ms);si=o(Lf,"generate_examples"),Lf.forEach(a),oi=o(Cp," generates the images and labels for each split."),Cp.forEach(a),qa.forEach(a),Zo=f(e),De=n(e,"P",{});var Kl=r(De);li=o(Kl,"Start by creating your dataset class as a subclass of "),ta=n(Kl,"A",{href:!0});var Ff=r(ta);ni=o(Ff,"GeneratorBasedBuilder"),Ff.forEach(a),ri=o(Kl," and add the three methods. Don\u2019t worry about filling in each of these methods yet, you\u2019ll develop those over the next few sections:"),Kl.forEach(a),el=f(e),_(Et.$$.fragment,e),tl=f(e),ne=n(e,"H4",{class:!0});var Ql=r(ne);Pe=n(Ql,"A",{id:!0,class:!0,href:!0});var Nf=r(Pe);gs=n(Nf,"SPAN",{});var Bf=r(gs);_(jt.$$.fragment,Bf),Bf.forEach(a),Nf.forEach(a),ii=f(Ql),_s=n(Ql,"SPAN",{});var Gf=r(_s);di=o(Gf,"Multiple configurations"),Gf.forEach(a),Ql.forEach(a),al=f(e),Oe=n(e,"P",{});var Zl=r(Oe);pi=o(Zl,"In some cases, a dataset may have more than one configuration. For example, if you check out the "),qt=n(Zl,"A",{href:!0,rel:!0});var Rf=r(qt);fi=o(Rf,"Imagenette dataset"),Rf.forEach(a),hi=o(Zl,", you\u2019ll notice there are three subsets."),Zl.forEach(a),sl=f(e),H=n(e,"P",{});var Ze=r(H);ci=o(Ze,"To create different configurations, use the "),aa=n(Ze,"A",{href:!0});var Uf=r(aa);ui=o(Uf,"BuilderConfig"),Uf.forEach(a),mi=o(Ze," class to create a subclass for your dataset. Provide the links to download the images and labels in "),vs=n(Ze,"CODE",{});var Hf=r(vs);gi=o(Hf,"data_url"),Hf.forEach(a),_i=o(Ze," and "),$s=n(Ze,"CODE",{});var Mf=r($s);vi=o(Mf,"metadata_urls"),Mf.forEach(a),$i=o(Ze,":"),Ze.forEach(a),ol=f(e),_(kt.$$.fragment,e),ll=f(e),Se=n(e,"P",{});var en=r(Se);yi=o(en,"Now you can define your subsets at the top of "),sa=n(en,"A",{href:!0});var Yf=r(sa);bi=o(Yf,"GeneratorBasedBuilder"),Yf.forEach(a),wi=o(en,". Imagine you want to create two subsets in the Food-101 dataset based on whether it is a breakfast or dinner food."),en.forEach(a),nl=f(e),Le=n(e,"OL",{});var tn=r(Le);re=n(tn,"LI",{});var ka=r(re);Ei=o(ka,"Define your subsets with "),ys=n(ka,"CODE",{});var zf=r(ys);ji=o(zf,"Food101Config"),zf.forEach(a),qi=o(ka," in a list in "),bs=n(ka,"CODE",{});var Vf=r(bs);ki=o(Vf,"BUILDER_CONFIGS"),Vf.forEach(a),Ai=o(ka,"."),ka.forEach(a),Ii=f(tn),ws=n(tn,"LI",{});var Wf=r(ws);xi=o(Wf,"For each configuration, provide a name, description, and where to download the images and labels from."),Wf.forEach(a),tn.forEach(a),rl=f(e),_(At.$$.fragment,e),il=f(e),Fe=n(e,"P",{});var an=r(Fe);Ci=o(an,"Now if users want to load the "),Es=n(an,"CODE",{});var Jf=r(Es);Ti=o(Jf,"breakfast"),Jf.forEach(a),Di=o(an," configuration, they can use the configuration name:"),an.forEach(a),dl=f(e),_(It.$$.fragment,e),pl=f(e),ie=n(e,"H3",{class:!0});var sn=r(ie);Ne=n(sn,"A",{id:!0,class:!0,href:!0});var Xf=r(Ne);js=n(Xf,"SPAN",{});var Kf=r(js);_(xt.$$.fragment,Kf),Kf.forEach(a),Xf.forEach(a),Pi=f(sn),qs=n(sn,"SPAN",{});var Qf=r(qs);Oi=o(Qf,"Add dataset metadata"),Qf.forEach(a),sn.forEach(a),fl=f(e),X=n(e,"P",{});var Aa=r(X);Si=o(Aa,"Adding information about your dataset is useful for users to learn more about it. This information is stored in the "),oa=n(Aa,"A",{href:!0});var Zf=r(oa);Li=o(Zf,"DatasetInfo"),Zf.forEach(a),Fi=o(Aa," class which is returned by the "),ks=n(Aa,"CODE",{});var eh=r(ks);Ni=o(eh,"info"),eh.forEach(a),Bi=o(Aa," method. Users can access this information by:"),Aa.forEach(a),hl=f(e),_(Ct.$$.fragment,e),cl=f(e),la=n(e,"P",{});var th=r(la);Gi=o(th,"There is a lot of information you can specify about your dataset, but some important ones to include are:"),th.forEach(a),ul=f(e),D=n(e,"OL",{});var M=r(D);na=n(M,"LI",{});var Tp=r(na);As=n(Tp,"CODE",{});var ah=r(As);Ri=o(ah,"description"),ah.forEach(a),Ui=o(Tp," provides a concise description of the dataset."),Tp.forEach(a),Hi=f(M),Be=n(M,"LI",{});var ho=r(Be);Is=n(ho,"CODE",{});var sh=r(Is);Mi=o(sh,"features"),sh.forEach(a),Yi=o(ho," specify the dataset column types. Since you\u2019re creating an image loading script, you\u2019ll need to include the "),ra=n(ho,"A",{href:!0});var oh=r(ra);zi=o(oh,"Image"),oh.forEach(a),Vi=o(ho," feature."),ho.forEach(a),Wi=f(M),ia=n(M,"LI",{});var Dp=r(ia);xs=n(Dp,"CODE",{});var lh=r(xs);Ji=o(lh,"supervised_keys"),lh.forEach(a),Xi=o(Dp," specify the input feature and label."),Dp.forEach(a),Ki=f(M),da=n(M,"LI",{});var Pp=r(da);Cs=n(Pp,"CODE",{});var nh=r(Cs);Qi=o(nh,"homepage"),nh.forEach(a),Zi=o(Pp," provides a link to the dataset homepage."),Pp.forEach(a),ed=f(M),pa=n(M,"LI",{});var Op=r(pa);Ts=n(Op,"CODE",{});var rh=r(Ts);td=o(rh,"citation"),rh.forEach(a),ad=o(Op," is a BibTeX citation of the dataset."),Op.forEach(a),sd=f(M),fa=n(M,"LI",{});var Sp=r(fa);Ds=n(Sp,"CODE",{});var ih=r(Ds);od=o(ih,"license"),ih.forEach(a),ld=o(Sp," states the dataset\u2019s license."),Sp.forEach(a),M.forEach(a),ml=f(e),_(Ge.$$.fragment,e),gl=f(e),_(Tt.$$.fragment,e),_l=f(e),de=n(e,"H3",{class:!0});var on=r(de);Re=n(on,"A",{id:!0,class:!0,href:!0});var dh=r(Re);Ps=n(dh,"SPAN",{});var ph=r(Ps);_(Dt.$$.fragment,ph),ph.forEach(a),dh.forEach(a),nd=f(on),Os=n(on,"SPAN",{});var fh=r(Os);rd=o(fh,"Download and define the dataset splits"),fh.forEach(a),on.forEach(a),vl=f(e),ha=n(e,"P",{});var hh=r(ha);id=o(hh,"Now that you\u2019ve added some information about your dataset, the next step is to download the dataset and generate the splits."),hh.forEach(a),$l=f(e),Ue=n(e,"OL",{});var ln=r(Ue);pe=n(ln,"LI",{});var Ia=r(pe);Pt=n(Ia,"P",{});var nn=r(Pt);dd=o(nn,"Use the "),ca=n(nn,"A",{href:!0});var ch=r(ca);pd=o(ch,"DownloadManager.download()"),ch.forEach(a),fd=o(nn," method to download the dataset and any other metadata you\u2019d like to associate with it. This method accepts:"),nn.forEach(a),hd=f(Ia),fe=n(Ia,"UL",{});var xa=r(fe);Ot=n(xa,"LI",{});var rn=r(Ot);cd=o(rn,"a name to a file inside a Hub dataset repository (in other words, the "),Ss=n(rn,"CODE",{});var uh=r(Ss);ud=o(uh,"data/"),uh.forEach(a),md=o(rn," folder)"),rn.forEach(a),gd=f(xa),Ls=n(xa,"LI",{});var mh=r(Ls);_d=o(mh,"a URL to a file hosted somewhere else"),mh.forEach(a),vd=f(xa),Fs=n(xa,"LI",{});var gh=r(Fs);$d=o(gh,"a list or dictionary of file names or URLs"),gh.forEach(a),xa.forEach(a),yd=f(Ia),Ns=n(Ia,"P",{});var _h=r(Ns);bd=o(_h,"In the Food-101 loading script, you\u2019ll notice again the URLs are defined earlier in the script."),_h.forEach(a),Ia.forEach(a),wd=f(ln),St=n(ln,"LI",{});var dn=r(St);N=n(dn,"P",{});var Q=r(N);Ed=o(Q,"After you\u2019ve downloaded the dataset, use the "),ua=n(Q,"A",{href:!0});var vh=r(ua);jd=o(vh,"SplitGenerator"),vh.forEach(a),qd=o(Q," to organize the images and labels in each split. Name each split with a standard name like: "),Bs=n(Q,"CODE",{});var $h=r(Bs);kd=o($h,"Split.TRAIN"),$h.forEach(a),Ad=o(Q,", "),Gs=n(Q,"CODE",{});var yh=r(Gs);Id=o(yh,"Split.TEST"),yh.forEach(a),xd=o(Q,", and "),Rs=n(Q,"CODE",{});var bh=r(Rs);Cd=o(bh,"SPLIT.Validation"),bh.forEach(a),Td=o(Q,"."),Q.forEach(a),Dd=f(dn),T=n(dn,"P",{});var L=r(T);Pd=o(L,"In the "),Us=n(L,"CODE",{});var wh=r(Us);Od=o(wh,"gen_kwargs"),wh.forEach(a),Sd=o(L," parameter, specify the file paths to the "),Hs=n(L,"CODE",{});var Eh=r(Hs);Ld=o(Eh,"images"),Eh.forEach(a),Fd=o(L," to iterate over and load. If necessary, you can use "),ma=n(L,"A",{href:!0});var jh=r(ma);Nd=o(jh,"DownloadManager.iter_archive()"),jh.forEach(a),Bd=o(L," to iterate over images in TAR archives. You can also specify the associated labels in the "),Ms=n(L,"CODE",{});var qh=r(Ms);Gd=o(qh,"metadata_path"),qh.forEach(a),Rd=o(L,". The "),Ys=n(L,"CODE",{});var kh=r(Ys);Ud=o(kh,"images"),kh.forEach(a),Hd=o(L," and "),zs=n(L,"CODE",{});var Ah=r(zs);Md=o(Ah,"metadata_path"),Ah.forEach(a),Yd=o(L," are actually passed onto the next step where you\u2019ll actually generate the dataset."),L.forEach(a),dn.forEach(a),ln.forEach(a),yl=f(e),_(He.$$.fragment,e),bl=f(e),_(Lt.$$.fragment,e),wl=f(e),he=n(e,"H3",{class:!0});var pn=r(he);Me=n(pn,"A",{id:!0,class:!0,href:!0});var Ih=r(Me);Vs=n(Ih,"SPAN",{});var xh=r(Vs);_(Ft.$$.fragment,xh),xh.forEach(a),Ih.forEach(a),zd=f(pn),Ws=n(pn,"SPAN",{});var Ch=r(Ws);Vd=o(Ch,"Generate the dataset"),Ch.forEach(a),pn.forEach(a),El=f(e),C=n(e,"P",{});var F=r(C);Wd=o(F,"The last method in the "),ga=n(F,"A",{href:!0});var Th=r(ga);Jd=o(Th,"GeneratorBasedBuilder"),Th.forEach(a),Xd=o(F," class actually generates the images and labels in the dataset. It yields a dataset according to the stucture specified in "),Js=n(F,"CODE",{});var Dh=r(Js);Kd=o(Dh,"features"),Dh.forEach(a),Qd=o(F," from the "),Xs=n(F,"CODE",{});var Ph=r(Xs);Zd=o(Ph,"info"),Ph.forEach(a),ep=o(F," method. As you can see, "),Ks=n(F,"CODE",{});var Oh=r(Ks);tp=o(Oh,"generate_examples"),Oh.forEach(a),ap=o(F," accepts the "),Qs=n(F,"CODE",{});var Sh=r(Qs);sp=o(Sh,"images"),Sh.forEach(a),op=o(F," and "),Zs=n(F,"CODE",{});var Lh=r(Zs);lp=o(Lh,"metadata_path"),Lh.forEach(a),np=o(F," from the previous method as arguments."),F.forEach(a),jl=f(e),_(Ye.$$.fragment,e),ql=f(e),_a=n(e,"P",{});var Fh=r(_a);rp=o(Fh,"Now you can write a function for opening and loading examples from the dataset:"),Fh.forEach(a),kl=f(e),_(Nt.$$.fragment,e),Al=f(e),ce=n(e,"H3",{class:!0});var fn=r(ce);ze=n(fn,"A",{id:!0,class:!0,href:!0});var Nh=r(ze);eo=n(Nh,"SPAN",{});var Bh=r(eo);_(Bt.$$.fragment,Bh),Bh.forEach(a),Nh.forEach(a),ip=f(fn),to=n(fn,"SPAN",{});var Gh=r(to);dp=o(Gh,"Generate the dataset metadata (optional)"),Gh.forEach(a),fn.forEach(a),Il=f(e),Ve=n(e,"P",{});var hn=r(Ve);pp=o(hn,"The dataset metadata you added earlier now needs to be generated and stored in a file called "),ao=n(hn,"CODE",{});var Rh=r(ao);fp=o(Rh,"datasets_infos.json"),Rh.forEach(a),hp=o(hn,". In addition to information about a datasets features and description, this file also contains data file checksums to ensure integrity."),hn.forEach(a),xl=f(e),We=n(e,"P",{});var cn=r(We);cp=o(cn,"Run the following command to generate your dataset metadata in "),so=n(cn,"CODE",{});var Uh=r(so);up=o(Uh,"dataset_infos.json"),Uh.forEach(a),mp=o(cn," and make sure your new loading script works correctly:"),cn.forEach(a),Cl=f(e),_(Gt.$$.fragment,e),Tl=f(e),Je=n(e,"P",{});var un=r(Je);gp=o(un,"If your loading script passed the test, you should now have a "),oo=n(un,"CODE",{});var Hh=r(oo);_p=o(Hh,"dataset_infos.json"),Hh.forEach(a),vp=o(un," file in your dataset folder."),un.forEach(a),Dl=f(e),ue=n(e,"H3",{class:!0});var mn=r(ue);Xe=n(mn,"A",{id:!0,class:!0,href:!0});var Mh=r(Xe);lo=n(Mh,"SPAN",{});var Yh=r(lo);_(Rt.$$.fragment,Yh),Yh.forEach(a),Mh.forEach(a),$p=f(mn),no=n(mn,"SPAN",{});var zh=r(no);yp=o(zh,"Upload the dataset to the Hub"),zh.forEach(a),mn.forEach(a),Pl=f(e),K=n(e,"P",{});var Ca=r(K);bp=o(Ca,"Once your script is ready, "),va=n(Ca,"A",{href:!0});var Vh=r(va);wp=o(Vh,"create a dataset card"),Vh.forEach(a),Ep=o(Ca," and "),$a=n(Ca,"A",{href:!0});var Wh=r($a);jp=o(Wh,"upload it to the Hub"),Wh.forEach(a),qp=o(Ca,"."),Ca.forEach(a),Ol=f(e),ya=n(e,"P",{});var Jh=r(ya);kp=o(Jh,"Congratulations, you can now load your dataset from the Hub! \u{1F973}"),Jh.forEach(a),Sl=f(e),_(Ut.$$.fragment,e),this.h()},h(){h(c,"name","hf:doc:metadata"),h(c,"content",JSON.stringify(ic)),h(E,"id","create-an-image-dataset"),h(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(E,"href","#create-an-image-dataset"),h(u,"class","relative group"),h(_e,"id","imagefolder"),h(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(_e,"href","#imagefolder"),h(ee,"class","relative group"),h(Yt,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),h(be,"id","image-captioning"),h(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(be,"href","#image-captioning"),h(te,"class","relative group"),h(Ee,"id","object-detection"),h(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ee,"href","#object-detection"),h(ae,"class","relative group"),h(qe,"id","upload-dataset-to-the-hub"),h(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(qe,"href","#upload-dataset-to-the-hub"),h(se,"class","relative group"),h(zt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict.push_to_hub"),h(ut,"href","https://huggingface.co/docs/huggingface_hub/index"),h(ut,"rel","nofollow"),h(Vt,"href","upload_dataset#upload-with-python"),h(Wt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict.push_to_hub"),h(Ae,"id","loading-script"),h(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ae,"href","#loading-script"),h(oe,"class","relative group"),h($t,"class","underline decoration-green-400 decoration-2 font-semibold"),h($t,"href","./dataset_script"),h(yt,"href","https://huggingface.co/datasets/food101/blob/main/food101.py"),h(yt,"rel","nofollow"),h(Te,"id","create-a-dataset-builder-class"),h(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Te,"href","#create-a-dataset-builder-class"),h(le,"class","relative group"),h(Kt,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),h(ta,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),h(Pe,"id","multiple-configurations"),h(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Pe,"href","#multiple-configurations"),h(ne,"class","relative group"),h(qt,"href","https://huggingface.co/datasets/frgfm/imagenette"),h(qt,"rel","nofollow"),h(aa,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.BuilderConfig"),h(sa,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),h(Ne,"id","add-dataset-metadata"),h(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ne,"href","#add-dataset-metadata"),h(ie,"class","relative group"),h(oa,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetInfo"),h(ra,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Image"),h(Re,"id","download-and-define-the-dataset-splits"),h(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Re,"href","#download-and-define-the-dataset-splits"),h(de,"class","relative group"),h(ca,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadManager.download"),h(ua,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.SplitGenerator"),h(ma,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive"),h(Me,"id","generate-the-dataset"),h(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Me,"href","#generate-the-dataset"),h(he,"class","relative group"),h(ga,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),h(ze,"id","generate-the-dataset-metadata-optional"),h(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ze,"href","#generate-the-dataset-metadata-optional"),h(ce,"class","relative group"),h(Xe,"id","upload-the-dataset-to-the-hub"),h(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Xe,"href","#upload-the-dataset-to-the-hub"),h(ue,"class","relative group"),h(va,"href","./dataset_card"),h($a,"href","./share")},m(e,i){t(document.head,c),d(e,q,i),d(e,u,i),t(u,E),t(E,j),v(m,j,null),t(u,w),t(u,k),t(k,P),d(e,A,i),d(e,G,i),t(G,Z),d(e,co,i),d(e,me,i),t(me,et),t(et,gn),t(et,Da),t(Da,_n),t(et,vn),t(me,$n),t(me,Pa),t(Pa,yn),d(e,uo,i),v(ge,e,i),d(e,mo,i),d(e,ee,i),t(ee,_e),t(_e,Oa),v(tt,Oa,null),t(ee,bn),t(ee,Sa),t(Sa,wn),d(e,go,i),d(e,Y,i),t(Y,En),t(Y,La),t(La,jn),t(Y,qn),t(Y,Fa),t(Fa,kn),t(Y,An),d(e,_o,i),v(at,e,i),d(e,vo,i),d(e,R,i),t(R,In),t(R,Na),t(Na,xn),t(R,Cn),t(R,Yt),t(Yt,Tn),t(R,Dn),t(R,Ba),t(Ba,Pn),t(R,On),d(e,$o,i),v(st,e,i),d(e,yo,i),d(e,ve,i),t(ve,Sn),t(ve,Ga),t(Ga,Ln),t(ve,Fn),d(e,bo,i),v(ot,e,i),d(e,wo,i),d(e,$e,i),t($e,Nn),t($e,Ra),t(Ra,Bn),t($e,Gn),d(e,Eo,i),v(lt,e,i),d(e,jo,i),d(e,z,i),t(z,Rn),t(z,Ua),t(Ua,Un),t(z,Hn),t(z,Ha),t(Ha,Mn),t(z,Yn),d(e,qo,i),v(nt,e,i),d(e,ko,i),v(ye,e,i),d(e,Ao,i),d(e,te,i),t(te,be),t(be,Ma),v(rt,Ma,null),t(te,zn),t(te,Ya),t(Ya,Vn),d(e,Io,i),d(e,we,i),t(we,Wn),t(we,za),t(za,Jn),t(we,Xn),d(e,xo,i),v(it,e,i),d(e,Co,i),d(e,V,i),t(V,Kn),t(V,Va),t(Va,Qn),t(V,Zn),t(V,Wa),t(Wa,er),t(V,tr),d(e,To,i),v(dt,e,i),d(e,Do,i),d(e,ae,i),t(ae,Ee),t(Ee,Ja),v(pt,Ja,null),t(ae,ar),t(ae,Xa),t(Xa,sr),d(e,Po,i),d(e,je,i),t(je,or),t(je,Ka),t(Ka,lr),t(je,nr),d(e,Oo,i),v(ft,e,i),d(e,So,i),d(e,W,i),t(W,rr),t(W,Qa),t(Qa,ir),t(W,dr),t(W,Za),t(Za,pr),t(W,fr),d(e,Lo,i),v(ht,e,i),d(e,Fo,i),d(e,se,i),t(se,qe),t(qe,es),v(ct,es,null),t(se,hr),t(se,ts),t(ts,cr),d(e,No,i),d(e,U,i),t(U,ur),t(U,zt),t(zt,mr),t(U,gr),t(U,ut),t(ut,_r),t(U,vr),t(U,Vt),t(Vt,$r),t(U,yr),d(e,Bo,i),d(e,ke,i),t(ke,br),t(ke,Wt),t(Wt,wr),t(ke,Er),d(e,Go,i),v(mt,e,i),d(e,Ro,i),d(e,oe,i),t(oe,Ae),t(Ae,as),v(gt,as,null),t(oe,jr),t(oe,ss),t(ss,qr),d(e,Uo,i),d(e,Jt,i),t(Jt,kr),d(e,Ho,i),v(_t,e,i),d(e,Mo,i),d(e,Xt,i),t(Xt,Ar),d(e,Yo,i),v(vt,e,i),d(e,zo,i),d(e,Ie,i),t(Ie,Ir),t(Ie,$t),t($t,xr),t(Ie,Cr),d(e,Vo,i),d(e,x,i),t(x,os),t(os,Tr),t(x,Dr),t(x,ls),t(ls,Pr),t(x,Or),t(x,ns),t(ns,Sr),t(x,Lr),t(x,rs),t(rs,Fr),t(x,Nr),t(x,is),t(is,Br),t(x,Gr),t(x,ds),t(ds,Rr),t(x,Ur),t(x,ps),t(ps,Hr),d(e,Wo,i),d(e,xe,i),t(xe,Mr),t(xe,yt),t(yt,Yr),t(xe,zr),d(e,Jo,i),v(Ce,e,i),d(e,Xo,i),d(e,le,i),t(le,Te),t(Te,fs),v(bt,fs,null),t(le,Vr),t(le,hs),t(hs,Wr),d(e,Ko,i),d(e,wt,i),t(wt,Kt),t(Kt,Jr),t(wt,Xr),d(e,Qo,i),d(e,J,i),t(J,Qt),t(Qt,cs),t(cs,Kr),t(Qt,Qr),t(J,Zr),t(J,Zt),t(Zt,us),t(us,ei),t(Zt,ti),t(J,ai),t(J,ea),t(ea,ms),t(ms,si),t(ea,oi),d(e,Zo,i),d(e,De,i),t(De,li),t(De,ta),t(ta,ni),t(De,ri),d(e,el,i),v(Et,e,i),d(e,tl,i),d(e,ne,i),t(ne,Pe),t(Pe,gs),v(jt,gs,null),t(ne,ii),t(ne,_s),t(_s,di),d(e,al,i),d(e,Oe,i),t(Oe,pi),t(Oe,qt),t(qt,fi),t(Oe,hi),d(e,sl,i),d(e,H,i),t(H,ci),t(H,aa),t(aa,ui),t(H,mi),t(H,vs),t(vs,gi),t(H,_i),t(H,$s),t($s,vi),t(H,$i),d(e,ol,i),v(kt,e,i),d(e,ll,i),d(e,Se,i),t(Se,yi),t(Se,sa),t(sa,bi),t(Se,wi),d(e,nl,i),d(e,Le,i),t(Le,re),t(re,Ei),t(re,ys),t(ys,ji),t(re,qi),t(re,bs),t(bs,ki),t(re,Ai),t(Le,Ii),t(Le,ws),t(ws,xi),d(e,rl,i),v(At,e,i),d(e,il,i),d(e,Fe,i),t(Fe,Ci),t(Fe,Es),t(Es,Ti),t(Fe,Di),d(e,dl,i),v(It,e,i),d(e,pl,i),d(e,ie,i),t(ie,Ne),t(Ne,js),v(xt,js,null),t(ie,Pi),t(ie,qs),t(qs,Oi),d(e,fl,i),d(e,X,i),t(X,Si),t(X,oa),t(oa,Li),t(X,Fi),t(X,ks),t(ks,Ni),t(X,Bi),d(e,hl,i),v(Ct,e,i),d(e,cl,i),d(e,la,i),t(la,Gi),d(e,ul,i),d(e,D,i),t(D,na),t(na,As),t(As,Ri),t(na,Ui),t(D,Hi),t(D,Be),t(Be,Is),t(Is,Mi),t(Be,Yi),t(Be,ra),t(ra,zi),t(Be,Vi),t(D,Wi),t(D,ia),t(ia,xs),t(xs,Ji),t(ia,Xi),t(D,Ki),t(D,da),t(da,Cs),t(Cs,Qi),t(da,Zi),t(D,ed),t(D,pa),t(pa,Ts),t(Ts,td),t(pa,ad),t(D,sd),t(D,fa),t(fa,Ds),t(Ds,od),t(fa,ld),d(e,ml,i),v(Ge,e,i),d(e,gl,i),v(Tt,e,i),d(e,_l,i),d(e,de,i),t(de,Re),t(Re,Ps),v(Dt,Ps,null),t(de,nd),t(de,Os),t(Os,rd),d(e,vl,i),d(e,ha,i),t(ha,id),d(e,$l,i),d(e,Ue,i),t(Ue,pe),t(pe,Pt),t(Pt,dd),t(Pt,ca),t(ca,pd),t(Pt,fd),t(pe,hd),t(pe,fe),t(fe,Ot),t(Ot,cd),t(Ot,Ss),t(Ss,ud),t(Ot,md),t(fe,gd),t(fe,Ls),t(Ls,_d),t(fe,vd),t(fe,Fs),t(Fs,$d),t(pe,yd),t(pe,Ns),t(Ns,bd),t(Ue,wd),t(Ue,St),t(St,N),t(N,Ed),t(N,ua),t(ua,jd),t(N,qd),t(N,Bs),t(Bs,kd),t(N,Ad),t(N,Gs),t(Gs,Id),t(N,xd),t(N,Rs),t(Rs,Cd),t(N,Td),t(St,Dd),t(St,T),t(T,Pd),t(T,Us),t(Us,Od),t(T,Sd),t(T,Hs),t(Hs,Ld),t(T,Fd),t(T,ma),t(ma,Nd),t(T,Bd),t(T,Ms),t(Ms,Gd),t(T,Rd),t(T,Ys),t(Ys,Ud),t(T,Hd),t(T,zs),t(zs,Md),t(T,Yd),d(e,yl,i),v(He,e,i),d(e,bl,i),v(Lt,e,i),d(e,wl,i),d(e,he,i),t(he,Me),t(Me,Vs),v(Ft,Vs,null),t(he,zd),t(he,Ws),t(Ws,Vd),d(e,El,i),d(e,C,i),t(C,Wd),t(C,ga),t(ga,Jd),t(C,Xd),t(C,Js),t(Js,Kd),t(C,Qd),t(C,Xs),t(Xs,Zd),t(C,ep),t(C,Ks),t(Ks,tp),t(C,ap),t(C,Qs),t(Qs,sp),t(C,op),t(C,Zs),t(Zs,lp),t(C,np),d(e,jl,i),v(Ye,e,i),d(e,ql,i),d(e,_a,i),t(_a,rp),d(e,kl,i),v(Nt,e,i),d(e,Al,i),d(e,ce,i),t(ce,ze),t(ze,eo),v(Bt,eo,null),t(ce,ip),t(ce,to),t(to,dp),d(e,Il,i),d(e,Ve,i),t(Ve,pp),t(Ve,ao),t(ao,fp),t(Ve,hp),d(e,xl,i),d(e,We,i),t(We,cp),t(We,so),t(so,up),t(We,mp),d(e,Cl,i),v(Gt,e,i),d(e,Tl,i),d(e,Je,i),t(Je,gp),t(Je,oo),t(oo,_p),t(Je,vp),d(e,Dl,i),d(e,ue,i),t(ue,Xe),t(Xe,lo),v(Rt,lo,null),t(ue,$p),t(ue,no),t(no,yp),d(e,Pl,i),d(e,K,i),t(K,bp),t(K,va),t(va,wp),t(K,Ep),t(K,$a),t($a,jp),t(K,qp),d(e,Ol,i),d(e,ya,i),t(ya,kp),d(e,Sl,i),v(Ut,e,i),Ll=!0},p(e,[i]){const Ht={};i&2&&(Ht.$$scope={dirty:i,ctx:e}),ge.$set(Ht);const ro={};i&2&&(ro.$$scope={dirty:i,ctx:e}),ye.$set(ro);const io={};i&2&&(io.$$scope={dirty:i,ctx:e}),Ce.$set(io);const po={};i&2&&(po.$$scope={dirty:i,ctx:e}),Ge.$set(po);const fo={};i&2&&(fo.$$scope={dirty:i,ctx:e}),He.$set(fo);const Mt={};i&2&&(Mt.$$scope={dirty:i,ctx:e}),Ye.$set(Mt)},i(e){Ll||($(m.$$.fragment,e),$(ge.$$.fragment,e),$(tt.$$.fragment,e),$(at.$$.fragment,e),$(st.$$.fragment,e),$(ot.$$.fragment,e),$(lt.$$.fragment,e),$(nt.$$.fragment,e),$(ye.$$.fragment,e),$(rt.$$.fragment,e),$(it.$$.fragment,e),$(dt.$$.fragment,e),$(pt.$$.fragment,e),$(ft.$$.fragment,e),$(ht.$$.fragment,e),$(ct.$$.fragment,e),$(mt.$$.fragment,e),$(gt.$$.fragment,e),$(_t.$$.fragment,e),$(vt.$$.fragment,e),$(Ce.$$.fragment,e),$(bt.$$.fragment,e),$(Et.$$.fragment,e),$(jt.$$.fragment,e),$(kt.$$.fragment,e),$(At.$$.fragment,e),$(It.$$.fragment,e),$(xt.$$.fragment,e),$(Ct.$$.fragment,e),$(Ge.$$.fragment,e),$(Tt.$$.fragment,e),$(Dt.$$.fragment,e),$(He.$$.fragment,e),$(Lt.$$.fragment,e),$(Ft.$$.fragment,e),$(Ye.$$.fragment,e),$(Nt.$$.fragment,e),$(Bt.$$.fragment,e),$(Gt.$$.fragment,e),$(Rt.$$.fragment,e),$(Ut.$$.fragment,e),Ll=!0)},o(e){y(m.$$.fragment,e),y(ge.$$.fragment,e),y(tt.$$.fragment,e),y(at.$$.fragment,e),y(st.$$.fragment,e),y(ot.$$.fragment,e),y(lt.$$.fragment,e),y(nt.$$.fragment,e),y(ye.$$.fragment,e),y(rt.$$.fragment,e),y(it.$$.fragment,e),y(dt.$$.fragment,e),y(pt.$$.fragment,e),y(ft.$$.fragment,e),y(ht.$$.fragment,e),y(ct.$$.fragment,e),y(mt.$$.fragment,e),y(gt.$$.fragment,e),y(_t.$$.fragment,e),y(vt.$$.fragment,e),y(Ce.$$.fragment,e),y(bt.$$.fragment,e),y(Et.$$.fragment,e),y(jt.$$.fragment,e),y(kt.$$.fragment,e),y(At.$$.fragment,e),y(It.$$.fragment,e),y(xt.$$.fragment,e),y(Ct.$$.fragment,e),y(Ge.$$.fragment,e),y(Tt.$$.fragment,e),y(Dt.$$.fragment,e),y(He.$$.fragment,e),y(Lt.$$.fragment,e),y(Ft.$$.fragment,e),y(Ye.$$.fragment,e),y(Nt.$$.fragment,e),y(Bt.$$.fragment,e),y(Gt.$$.fragment,e),y(Rt.$$.fragment,e),y(Ut.$$.fragment,e),Ll=!1},d(e){a(c),e&&a(q),e&&a(u),b(m),e&&a(A),e&&a(G),e&&a(co),e&&a(me),e&&a(uo),b(ge,e),e&&a(mo),e&&a(ee),b(tt),e&&a(go),e&&a(Y),e&&a(_o),b(at,e),e&&a(vo),e&&a(R),e&&a($o),b(st,e),e&&a(yo),e&&a(ve),e&&a(bo),b(ot,e),e&&a(wo),e&&a($e),e&&a(Eo),b(lt,e),e&&a(jo),e&&a(z),e&&a(qo),b(nt,e),e&&a(ko),b(ye,e),e&&a(Ao),e&&a(te),b(rt),e&&a(Io),e&&a(we),e&&a(xo),b(it,e),e&&a(Co),e&&a(V),e&&a(To),b(dt,e),e&&a(Do),e&&a(ae),b(pt),e&&a(Po),e&&a(je),e&&a(Oo),b(ft,e),e&&a(So),e&&a(W),e&&a(Lo),b(ht,e),e&&a(Fo),e&&a(se),b(ct),e&&a(No),e&&a(U),e&&a(Bo),e&&a(ke),e&&a(Go),b(mt,e),e&&a(Ro),e&&a(oe),b(gt),e&&a(Uo),e&&a(Jt),e&&a(Ho),b(_t,e),e&&a(Mo),e&&a(Xt),e&&a(Yo),b(vt,e),e&&a(zo),e&&a(Ie),e&&a(Vo),e&&a(x),e&&a(Wo),e&&a(xe),e&&a(Jo),b(Ce,e),e&&a(Xo),e&&a(le),b(bt),e&&a(Ko),e&&a(wt),e&&a(Qo),e&&a(J),e&&a(Zo),e&&a(De),e&&a(el),b(Et,e),e&&a(tl),e&&a(ne),b(jt),e&&a(al),e&&a(Oe),e&&a(sl),e&&a(H),e&&a(ol),b(kt,e),e&&a(ll),e&&a(Se),e&&a(nl),e&&a(Le),e&&a(rl),b(At,e),e&&a(il),e&&a(Fe),e&&a(dl),b(It,e),e&&a(pl),e&&a(ie),b(xt),e&&a(fl),e&&a(X),e&&a(hl),b(Ct,e),e&&a(cl),e&&a(la),e&&a(ul),e&&a(D),e&&a(ml),b(Ge,e),e&&a(gl),b(Tt,e),e&&a(_l),e&&a(de),b(Dt),e&&a(vl),e&&a(ha),e&&a($l),e&&a(Ue),e&&a(yl),b(He,e),e&&a(bl),b(Lt,e),e&&a(wl),e&&a(he),b(Ft),e&&a(El),e&&a(C),e&&a(jl),b(Ye,e),e&&a(ql),e&&a(_a),e&&a(kl),b(Nt,e),e&&a(Al),e&&a(ce),b(Bt),e&&a(Il),e&&a(Ve),e&&a(xl),e&&a(We),e&&a(Cl),b(Gt,e),e&&a(Tl),e&&a(Je),e&&a(Dl),e&&a(ue),b(Rt),e&&a(Pl),e&&a(K),e&&a(Ol),e&&a(ya),e&&a(Sl),b(Ut,e)}}}const ic={local:"create-an-image-dataset",sections:[{local:"imagefolder",sections:[{local:"image-captioning",title:"Image captioning"},{local:"object-detection",title:"Object detection"},{local:"upload-dataset-to-the-hub",title:"Upload dataset to the Hub"}],title:"ImageFolder"},{local:"loading-script",sections:[{local:"create-a-dataset-builder-class",sections:[{local:"multiple-configurations",title:"Multiple configurations"}],title:"Create a dataset builder class"},{local:"add-dataset-metadata",title:"Add dataset metadata"},{local:"download-and-define-the-dataset-splits",title:"Download and define the dataset splits"},{local:"generate-the-dataset",title:"Generate the dataset"},{local:"generate-the-dataset-metadata-optional",title:"Generate the dataset metadata (optional)"},{local:"upload-the-dataset-to-the-hub",title:"Upload the dataset to the Hub"}],title:"Loading script"}],title:"Create an image dataset"};function dc(O){return ec(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class uc extends Xh{constructor(c){super();Kh(this,c,dc,rc,Qh,{})}}export{uc as default,ic as metadata};
