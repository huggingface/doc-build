import{S as ec,i as tc,s as ac,e as l,k as p,w as g,t as s,M as sc,c as r,d as a,m as f,a as n,x as _,h as o,b as h,G as t,g as d,y as v,q as $,o as y,B as b,v as oc}from"../chunks/vendor-hf-doc-builder.js";import{T as Ta}from"../chunks/Tip-hf-doc-builder.js";import{I as B}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as I}from"../chunks/CodeBlock-hf-doc-builder.js";function lc(O){let c,q,u,E,j;return{c(){c=l("p"),q=s("You can control access to your dataset by requiring users to share their contact information first. Check out the "),u=l("a"),E=s("Gated datasets"),j=s(" guide for more information about how to enable this feature on the Hub."),this.h()},l(m){c=r(m,"P",{});var w=n(c);q=o(w,"You can control access to your dataset by requiring users to share their contact information first. Check out the "),u=r(w,"A",{href:!0,rel:!0});var k=n(u);E=o(k,"Gated datasets"),k.forEach(a),j=o(w," guide for more information about how to enable this feature on the Hub."),w.forEach(a),this.h()},h(){h(u,"href","https://huggingface.co/docs/hub/datasets-gated"),h(u,"rel","nofollow")},m(m,w){d(m,c,w),t(c,q),t(c,u),t(u,E),t(c,j)},d(m){m&&a(c)}}}function rc(O){let c,q,u,E,j,m,w,k;return{c(){c=l("p"),q=s("If metadata files are present, the inferred labels based on the directory name are dropped by default. To include those labels, set "),u=l("code"),E=s("drop_labels=False"),j=s(" in "),m=l("code"),w=s("load_dataset"),k=s(".")},l(P){c=r(P,"P",{});var A=n(c);q=o(A,"If metadata files are present, the inferred labels based on the directory name are dropped by default. To include those labels, set "),u=r(A,"CODE",{});var R=n(u);E=o(R,"drop_labels=False"),R.forEach(a),j=o(A," in "),m=r(A,"CODE",{});var ee=n(m);w=o(ee,"load_dataset"),ee.forEach(a),k=o(A,"."),A.forEach(a)},m(P,A){d(P,c,A),t(c,q),t(c,u),t(u,E),t(c,j),t(c,m),t(m,w),t(c,k)},d(P){P&&a(c)}}}function nc(O){let c,q,u,E,j;return{c(){c=l("p"),q=s("To help you get started, we created a loading script "),u=l("a"),E=s("template"),j=s(" you can copy and use as a starting point!"),this.h()},l(m){c=r(m,"P",{});var w=n(c);q=o(w,"To help you get started, we created a loading script "),u=r(w,"A",{href:!0,rel:!0});var k=n(u);E=o(k,"template"),k.forEach(a),j=o(w," you can copy and use as a starting point!"),w.forEach(a),this.h()},h(){h(u,"href","https://github.com/huggingface/datasets/blob/main/templates/new_dataset_script.py"),h(u,"rel","nofollow")},m(m,w){d(m,c,w),t(c,q),t(c,u),t(u,E),t(c,j)},d(m){m&&a(c)}}}function ic(O){let c,q,u,E,j;return{c(){c=l("p"),q=s("You\u2019ll notice a lot of the dataset information is defined earlier in the loading script which makes it easier to read. There are also other "),u=l("code"),E=s("~Datasets.Features"),j=s(" you can input, so be sure to check out the full list for more details.")},l(m){c=r(m,"P",{});var w=n(c);q=o(w,"You\u2019ll notice a lot of the dataset information is defined earlier in the loading script which makes it easier to read. There are also other "),u=r(w,"CODE",{});var k=n(u);E=o(k,"~Datasets.Features"),k.forEach(a),j=o(w," you can input, so be sure to check out the full list for more details."),w.forEach(a)},m(m,w){d(m,c,w),t(c,q),t(c,u),t(u,E),t(c,j)},d(m){m&&a(c)}}}function dc(O){let c,q,u,E,j,m,w,k;return{c(){c=l("p"),q=s("To stream a TAR archive file, you need to use "),u=l("a"),E=s("DownloadManager.iter_archive()"),j=s("! The "),m=l("a"),w=s("DownloadManager.download_and_extract()"),k=s(" function does not support TAR archives in streaming mode."),this.h()},l(P){c=r(P,"P",{});var A=n(c);q=o(A,"To stream a TAR archive file, you need to use "),u=r(A,"A",{href:!0});var R=n(u);E=o(R,"DownloadManager.iter_archive()"),R.forEach(a),j=o(A,"! The "),m=r(A,"A",{href:!0});var ee=n(m);w=o(ee,"DownloadManager.download_and_extract()"),ee.forEach(a),k=o(A," function does not support TAR archives in streaming mode."),A.forEach(a),this.h()},h(){h(u,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive"),h(m,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadManager.download_and_extract")},m(P,A){d(P,c,A),t(c,q),t(c,u),t(u,E),t(c,j),t(c,m),t(m,w),t(c,k)},d(P){P&&a(c)}}}function pc(O){let c,q,u,E,j;return{c(){c=l("p"),q=s("To stream a TAR archive file, the "),u=l("code"),E=s("metadata_path"),j=s(" needs to be opened and read first. TAR files are accessed and yielded sequentially. This means you need to have the metadata information in hand first so you can yield it with its corresponding image.")},l(m){c=r(m,"P",{});var w=n(c);q=o(w,"To stream a TAR archive file, the "),u=r(w,"CODE",{});var k=n(u);E=o(k,"metadata_path"),k.forEach(a),j=o(w," needs to be opened and read first. TAR files are accessed and yielded sequentially. This means you need to have the metadata information in hand first so you can yield it with its corresponding image."),w.forEach(a)},m(m,w){d(m,c,w),t(c,q),t(c,u),t(u,E),t(c,j)},d(m){m&&a(c)}}}function fc(O){let c,q,u,E,j,m,w,k,P,A,R,ee,mo,ge,et,gr,Pa,_r,vr,$r,Oa,yr,go,_e,_o,te,ve,Sa,tt,br,La,wr,vo,Y,Er,Fa,jr,qr,Na,kr,Ar,$o,at,yo,G,Ir,Ba,xr,Cr,Yt,Dr,Tr,Ra,Pr,Or,bo,st,wo,$e,Sr,Ga,Lr,Fr,Eo,ot,jo,ye,Nr,Ma,Br,Rr,qo,lt,ko,z,Gr,Ua,Mr,Ur,Ha,Hr,Yr,Ao,rt,Io,be,xo,ae,we,Ya,nt,zr,za,Vr,Co,Ee,Wr,Va,Jr,Xr,Do,it,To,V,Kr,Wa,Qr,Zr,Ja,en,tn,Po,dt,Oo,se,je,Xa,pt,an,Ka,sn,So,qe,on,Qa,ln,rn,Lo,ft,Fo,W,nn,Za,dn,pn,es,fn,hn,No,ht,Bo,oe,ke,ts,ct,cn,as,un,Ro,M,mn,zt,gn,_n,ut,vn,$n,Vt,yn,bn,Go,Ae,wn,Wt,En,jn,Mo,mt,Uo,le,Ie,ss,gt,qn,os,kn,Ho,Jt,An,Yo,_t,zo,Xt,In,Vo,vt,Wo,xe,xn,$t,Cn,Dn,Jo,x,ls,Tn,Pn,rs,On,Sn,ns,Ln,Fn,is,Nn,Bn,ds,Rn,Gn,ps,Mn,Un,fs,Hn,Xo,Ce,Yn,yt,zn,Vn,Ko,De,Qo,re,Te,hs,bt,Wn,cs,Jn,Zo,wt,Kt,Xn,Kn,el,J,Qt,us,Qn,Zn,ei,Zt,ms,ti,ai,si,ea,gs,oi,li,tl,Pe,ri,ta,ni,ii,al,Et,sl,ne,Oe,_s,jt,di,vs,pi,ol,Se,fi,qt,hi,ci,ll,U,ui,aa,mi,gi,$s,_i,vi,ys,$i,yi,rl,kt,nl,Le,bi,sa,wi,Ei,il,Fe,ie,ji,bs,qi,ki,ws,Ai,Ii,xi,Es,Ci,dl,At,pl,Ne,Di,js,Ti,Pi,fl,It,hl,de,Be,qs,xt,Oi,ks,Si,cl,X,Li,oa,Fi,Ni,As,Bi,Ri,ul,Ct,ml,la,Gi,gl,T,ra,Is,Mi,Ui,Hi,Re,xs,Yi,zi,na,Vi,Wi,Ji,ia,Cs,Xi,Ki,Qi,da,Ds,Zi,ed,td,pa,Ts,ad,sd,od,fa,Ps,ld,rd,_l,Ge,vl,Dt,$l,pe,Me,Os,Tt,nd,Ss,id,yl,ha,dd,bl,Ue,fe,Pt,pd,ca,fd,hd,cd,he,Ot,ud,Ls,md,gd,_d,Fs,vd,$d,Ns,yd,bd,Bs,wd,Ed,St,N,jd,ua,qd,kd,Rs,Ad,Id,Gs,xd,Cd,Ms,Dd,Td,Pd,D,Od,Us,Sd,Ld,Hs,Fd,Nd,ma,Bd,Rd,Ys,Gd,Md,zs,Ud,Hd,Vs,Yd,zd,wl,He,El,Lt,jl,ce,Ye,Ws,Ft,Vd,Js,Wd,ql,C,Jd,ga,Xd,Kd,Xs,Qd,Zd,Ks,ep,tp,Qs,ap,sp,Zs,op,lp,eo,rp,np,kl,ze,Al,_a,ip,Il,Nt,xl,ue,Ve,to,Bt,dp,ao,pp,Cl,We,fp,so,hp,cp,Dl,Je,up,oo,mp,gp,Tl,Rt,Pl,K,_p,lo,vp,$p,ro,yp,bp,Ol,me,Xe,no,Gt,wp,io,Ep,Sl,Q,jp,va,qp,kp,$a,Ap,Ip,Ll,ya,xp,Fl,Mt,Nl;return m=new B({}),_e=new Ta({props:{$$slots:{default:[lc]},$$scope:{ctx:O}}}),tt=new B({}),at=new I({props:{code:`folder/train/dog/golden_retriever.png
folder/train/dog/german_shepherd.png
folder/train/dog/chihuahua.png

folder/train/cat/maine_coon.png
folder/train/cat/bengal.png
folder/train/cat/birman.png`,highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/train/</span>dog/chihuahua.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png
folder<span class="hljs-regexp">/train/</span>cat/birman.png`}}),st=new I({props:{code:`from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)`}}),ot=new I({props:{code:`folder/train/dog/golden_retriever.png
folder/train/cat/maine_coon.png
folder/test/dog/german_shepherd.png
folder/test/cat/bengal.png`,highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/test/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/test/</span>cat/bengal.png`}}),lt=new I({props:{code:`folder/train/metadata.jsonl
folder/train/0001.png
folder/train/0002.png
folder/train/0003.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0001</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0002</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0003</span>.png`}}),rt=new I({props:{code:`{"file_name": "0001.png", "additional_feature": "This is a first value of a text feature you added to your images"}
{"file_name": "0002.png", "additional_feature": "This is a second value of a text feature you added to your images"}
{"file_name": "0003.png", "additional_feature": "This is a third value of a text feature you added to your images"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a first value of a text feature you added to your images&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a second value of a text feature you added to your images&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;additional_feature&quot;</span>: <span class="hljs-comment">&quot;This is a third value of a text feature you added to your images&quot;</span>}`}}),be=new Ta({props:{$$slots:{default:[rc]},$$scope:{ctx:O}}}),nt=new B({}),it=new I({props:{code:`{"file_name": "0001.png", "text": "This is a golden retriever playing with a ball"}
{"file_name": "0002.png", "text": "A german shepherd"}
{"file_name": "0003.png", "text": "One chihuahua"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a golden retriever playing with a ball&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;A german shepherd&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;One chihuahua&quot;</span>}`}}),dt=new I({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["text"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-string">&quot;This is a golden retriever playing with a ball&quot;</span>`}}),pt=new B({}),ft=new I({props:{code:`{"file_name": "0001.png", "objects": {"bbox": [[302.0, 109.0, 73.0, 52.0]], "categories": [0]}}
{"file_name": "0002.png", "objects": {"bbox": [[810.0, 100.0, 57.0, 28.0]], "categories": [1]}}
{"file_name": "0003.png", "objects": {"bbox": [[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]], "categories": [2, 2]}}`,highlighted:`{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0001.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[302.0, 109.0, 73.0, 52.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0002.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[810.0, 100.0, 57.0, 28.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">1</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0003.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]}}`}}),ht=new I({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["objects"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;objects&quot;</span>]
{<span class="hljs-string">&quot;bbox&quot;</span>: [[<span class="hljs-number">302.0</span>, <span class="hljs-number">109.0</span>, <span class="hljs-number">73.0</span>, <span class="hljs-number">52.0</span>]], <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}`}}),ct=new B({}),mt=new I({props:{code:`from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset.push_to_hub("stevhliu/my-image-captioning-dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;stevhliu/my-image-captioning-dataset&quot;</span>)`}}),gt=new B({}),_t=new I({props:{code:`my_dataset/
\u251C\u2500\u2500 README.md
\u251C\u2500\u2500 my_dataset.py
\u2514\u2500\u2500 data/  # optional, may contain your images or TAR archives`,highlighted:`my_dataset/
\u251C\u2500\u2500 README.md
\u251C\u2500\u2500 my_dataset.py
\u2514\u2500\u2500 <span class="hljs-title">data</span>/  <span class="hljs-comment"># optional, may contain your images or TAR archives</span>`}}),vt=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset("path/to/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/my_dataset&quot;</span>)`}}),De=new Ta({props:{$$slots:{default:[nc]},$$scope:{ctx:O}}}),bt=new B({}),Et=new I({props:{code:`class Food101(datasets.GeneratorBasedBuilder):
    """Food-101 Images dataset"""

    def _info(self):

    def _split_generators(self, dl_manager):

    def _generate_examples(self, images, metadata_path):`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">Food101</span>(datasets.GeneratorBasedBuilder):
    <span class="hljs-string">&quot;&quot;&quot;Food-101 Images dataset&quot;&quot;&quot;</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_info</span>(<span class="hljs-params">self</span>):

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_split_generators</span>(<span class="hljs-params">self, dl_manager</span>):

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_examples</span>(<span class="hljs-params">self, images, metadata_path</span>):`}}),jt=new B({}),kt=new I({props:{code:`class Food101Config(datasets.BuilderConfig):
    """Builder Config for Food-101"""
 
    def __init__(self, data_url, metadata_urls, **kwargs):
        """BuilderConfig for Food-101.
        Args:
          data_url: \`string\`, url to download the zip file from.
          metadata_urls: dictionary with keys 'train' and 'validation' containing the archive metadata URLs
          **kwargs: keyword arguments forwarded to super.
        """
        super(Food101Config, self).__init__(version=datasets.Version("1.0.0"), **kwargs)
        self.data_url = data_url
        self.metadata_urls = metadata_urls`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">Food101Config</span>(datasets.BuilderConfig):
    <span class="hljs-string">&quot;&quot;&quot;Builder Config for Food-101&quot;&quot;&quot;</span>
 
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, data_url, metadata_urls, **kwargs</span>):
        <span class="hljs-string">&quot;&quot;&quot;BuilderConfig for Food-101.
        Args:
          data_url: \`string\`, url to download the zip file from.
          metadata_urls: dictionary with keys &#x27;train&#x27; and &#x27;validation&#x27; containing the archive metadata URLs
          **kwargs: keyword arguments forwarded to super.
        &quot;&quot;&quot;</span>
        <span class="hljs-built_in">super</span>(Food101Config, self).__init__(version=datasets.Version(<span class="hljs-string">&quot;1.0.0&quot;</span>), **kwargs)
        self.data_url = data_url
        self.metadata_urls = metadata_urls`}}),At=new I({props:{code:`class Food101(datasets.GeneratorBasedBuilder):
    """Food-101 Images dataset"""
 
    BUILDER_CONFIGS = [
        Food101Config(
            name="breakfast",
            description="Food types commonly eaten during breakfast.",
            data_url="https://link-to-breakfast-foods.zip",
            metadata_urls={
                "train": "https://link-to-breakfast-foods-train.txt", 
                "validation": "https://link-to-breakfast-foods-validation.txt"
            },
        ,
        Food101Config(
            name="dinner",
            description="Food types commonly eaten during dinner.",
            data_url="https://link-to-dinner-foods.zip",
            metadata_urls={
                "train": "https://link-to-dinner-foods-train.txt", 
                "validation": "https://link-to-dinner-foods-validation.txt"
            },
        )...
    ]`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">Food101</span>(datasets.GeneratorBasedBuilder):
    <span class="hljs-string">&quot;&quot;&quot;Food-101 Images dataset&quot;&quot;&quot;</span>
 
    BUILDER_CONFIGS = [
        Food101Config(
            name=<span class="hljs-string">&quot;breakfast&quot;</span>,
            description=<span class="hljs-string">&quot;Food types commonly eaten during breakfast.&quot;</span>,
            data_url=<span class="hljs-string">&quot;https://link-to-breakfast-foods.zip&quot;</span>,
            metadata_urls={
                <span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;https://link-to-breakfast-foods-train.txt&quot;</span>, 
                <span class="hljs-string">&quot;validation&quot;</span>: <span class="hljs-string">&quot;https://link-to-breakfast-foods-validation.txt&quot;</span>
            },
        ,
        Food101Config(
            name=<span class="hljs-string">&quot;dinner&quot;</span>,
            description=<span class="hljs-string">&quot;Food types commonly eaten during dinner.&quot;</span>,
            data_url=<span class="hljs-string">&quot;https://link-to-dinner-foods.zip&quot;</span>,
            metadata_urls={
                <span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;https://link-to-dinner-foods-train.txt&quot;</span>, 
                <span class="hljs-string">&quot;validation&quot;</span>: <span class="hljs-string">&quot;https://link-to-dinner-foods-validation.txt&quot;</span>
            },
        )...
    ]`}}),It=new I({props:{code:`from datasets import load_dataset
ds = load_dataset("food101", "breakfast", split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, <span class="hljs-string">&quot;breakfast&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),xt=new B({}),Ct=new I({props:{code:`from datasets import load_dataset_builder
ds_builder = load_dataset_builder("food101")
ds_builder.info`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder = load_dataset_builder(<span class="hljs-string">&quot;food101&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder.info`}}),Ge=new Ta({props:{$$slots:{default:[ic]},$$scope:{ctx:O}}}),Dt=new I({props:{code:`def _info(self):
    return datasets.DatasetInfo(
        description=_DESCRIPTION,
        features=datasets.Features(
            {
                "image": datasets.Image(),
                "label": datasets.ClassLabel(names=_NAMES),
            }
        ),
        supervised_keys=("image", "label"),
        homepage=_HOMEPAGE,
        citation=_CITATION,
        license=_LICENSE,
        task_templates=[ImageClassification(image_column="image", label_column="label")],
    )`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_info</span>(<span class="hljs-params">self</span>):
    <span class="hljs-keyword">return</span> datasets.DatasetInfo(
        description=_DESCRIPTION,
        features=datasets.Features(
            {
                <span class="hljs-string">&quot;image&quot;</span>: datasets.Image(),
                <span class="hljs-string">&quot;label&quot;</span>: datasets.ClassLabel(names=_NAMES),
            }
        ),
        supervised_keys=(<span class="hljs-string">&quot;image&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>),
        homepage=_HOMEPAGE,
        citation=_CITATION,
        license=_LICENSE,
        task_templates=[ImageClassification(image_column=<span class="hljs-string">&quot;image&quot;</span>, label_column=<span class="hljs-string">&quot;label&quot;</span>)],
    )`}}),Tt=new B({}),He=new Ta({props:{warning:!0,$$slots:{default:[dc]},$$scope:{ctx:O}}}),Lt=new I({props:{code:`def _split_generators(self, dl_manager):
    archive_path = dl_manager.download(_BASE_URL)
    split_metadata_paths = dl_manager.download(_METADATA_URLS)
    return [
        datasets.SplitGenerator(
            name=datasets.Split.TRAIN,
            gen_kwargs={
                "images": dl_manager.iter_archive(archive_path),
                "metadata_path": split_metadata_paths["train"],
            },
        ),
        datasets.SplitGenerator(
            name=datasets.Split.VALIDATION,
            gen_kwargs={
                "images": dl_manager.iter_archive(archive_path),
                "metadata_path": split_metadata_paths["test"],
            },
        ),
    ]`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_split_generators</span>(<span class="hljs-params">self, dl_manager</span>):
    archive_path = dl_manager.download(_BASE_URL)
    split_metadata_paths = dl_manager.download(_METADATA_URLS)
    <span class="hljs-keyword">return</span> [
        datasets.SplitGenerator(
            name=datasets.Split.TRAIN,
            gen_kwargs={
                <span class="hljs-string">&quot;images&quot;</span>: dl_manager.iter_archive(archive_path),
                <span class="hljs-string">&quot;metadata_path&quot;</span>: split_metadata_paths[<span class="hljs-string">&quot;train&quot;</span>],
            },
        ),
        datasets.SplitGenerator(
            name=datasets.Split.VALIDATION,
            gen_kwargs={
                <span class="hljs-string">&quot;images&quot;</span>: dl_manager.iter_archive(archive_path),
                <span class="hljs-string">&quot;metadata_path&quot;</span>: split_metadata_paths[<span class="hljs-string">&quot;test&quot;</span>],
            },
        ),
    ]`}}),Ft=new B({}),ze=new Ta({props:{warning:!0,$$slots:{default:[pc]},$$scope:{ctx:O}}}),Nt=new I({props:{code:`def _generate_examples(self, images, metadata_path):
    """Generate images and labels for splits."""
    with open(metadata_path, encoding="utf-8") as f:
        files_to_keep = set(f.read().split("\\n"))
    for file_path, file_obj in images:
        if file_path.startswith(_IMAGES_DIR):
            if file_path[len(_IMAGES_DIR) : -len(".jpg")] in files_to_keep:
                label = file_path.split("/")[2]
                yield file_path, {
                    "image": {"path": file_path, "bytes": file_obj.read()},
                    "label": label,
                }`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">_generate_examples</span>(<span class="hljs-params">self, images, metadata_path</span>):
    <span class="hljs-string">&quot;&quot;&quot;Generate images and labels for splits.&quot;&quot;&quot;</span>
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(metadata_path, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:
        files_to_keep = <span class="hljs-built_in">set</span>(f.read().split(<span class="hljs-string">&quot;\\n&quot;</span>))
    <span class="hljs-keyword">for</span> file_path, file_obj <span class="hljs-keyword">in</span> images:
        <span class="hljs-keyword">if</span> file_path.startswith(_IMAGES_DIR):
            <span class="hljs-keyword">if</span> file_path[<span class="hljs-built_in">len</span>(_IMAGES_DIR) : -<span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;.jpg&quot;</span>)] <span class="hljs-keyword">in</span> files_to_keep:
                label = file_path.split(<span class="hljs-string">&quot;/&quot;</span>)[<span class="hljs-number">2</span>]
                <span class="hljs-keyword">yield</span> file_path, {
                    <span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;path&quot;</span>: file_path, <span class="hljs-string">&quot;bytes&quot;</span>: file_obj.read()},
                    <span class="hljs-string">&quot;label&quot;</span>: label,
                }`}}),Bt=new B({}),Rt=new I({props:{code:"datasets-cli test path/to/<your-dataset-loading-script> --save_info --all_configs",highlighted:'datasets-cli <span class="hljs-built_in">test</span> path/to/&lt;your-dataset-loading-script&gt; --save_info --all_configs'}}),Gt=new B({}),Mt=new I({props:{code:`from datasets import load_dataset
load_dataset("<username>/my_dataset")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>load_dataset(<span class="hljs-string">&quot;&lt;username&gt;/my_dataset&quot;</span>)`}}),{c(){c=l("meta"),q=p(),u=l("h1"),E=l("a"),j=l("span"),g(m.$$.fragment),w=p(),k=l("span"),P=s("Create an image dataset"),A=p(),R=l("p"),ee=s("There are two methods for creating and sharing an image dataset. This guide will show you how to:"),mo=p(),ge=l("ul"),et=l("li"),gr=s("Create an image dataset with "),Pa=l("code"),_r=s("ImageFolder"),vr=s(" and some metadata. This is a no-code solution for quickly creating an image dataset."),$r=p(),Oa=l("li"),yr=s("Create an image dataset by writing a loading script. This method is a bit more involved, but you have greater flexibility over how a dataset is defined, downloaded, and generated."),go=p(),g(_e.$$.fragment),_o=p(),te=l("h2"),ve=l("a"),Sa=l("span"),g(tt.$$.fragment),br=p(),La=l("span"),wr=s("ImageFolder"),vo=p(),Y=l("p"),Er=s("The "),Fa=l("code"),jr=s("ImageFolder"),qr=s(" is a dataset builder designed to quickly load an image dataset without requiring you to write any code. "),Na=l("code"),kr=s("ImageFolder"),Ar=s(" automatically infers the class labels of your dataset based on the directory name. Just store your dataset in a directory structure like:"),$o=p(),g(at.$$.fragment),yo=p(),G=l("p"),Ir=s("Then users can load your dataset by specifying "),Ba=l("code"),xr=s("imagefolder"),Cr=s(" in "),Yt=l("a"),Dr=s("load_dataset()"),Tr=s(" and the directory in "),Ra=l("code"),Pr=s("data_dir"),Or=s(":"),bo=p(),g(st.$$.fragment),wo=p(),$e=l("p"),Sr=s("You can also use "),Ga=l("code"),Lr=s("imagefolder"),Fr=s(" to load datasets involving multiple splits. To do so, your dataset directory should have the following structure:"),Eo=p(),g(ot.$$.fragment),jo=p(),ye=l("p"),Nr=s("If there is additional information you\u2019d like to include about your dataset, like text captions or bounding boxes, add it as a "),Ma=l("code"),Br=s("metadata.jsonl"),Rr=s(" file in your folder. This lets you quickly create datasets for different computer vision tasks like text captioning or object detection."),qo=p(),g(lt.$$.fragment),ko=p(),z=l("p"),Gr=s("Your "),Ua=l("code"),Mr=s("metadata.jsonl"),Ur=s(" file must have a "),Ha=l("code"),Hr=s("file_name"),Yr=s(" column which links image files with their metadata:"),Ao=p(),g(rt.$$.fragment),Io=p(),g(be.$$.fragment),xo=p(),ae=l("h3"),we=l("a"),Ya=l("span"),g(nt.$$.fragment),zr=p(),za=l("span"),Vr=s("Image captioning"),Co=p(),Ee=l("p"),Wr=s("Image captioning datasets have text describing an image. An example "),Va=l("code"),Jr=s("metadata.jsonl"),Xr=s(" may look like:"),Do=p(),g(it.$$.fragment),To=p(),V=l("p"),Kr=s("Load the dataset with "),Wa=l("code"),Qr=s("ImageFolder"),Zr=s(", and it will create a "),Ja=l("code"),en=s("text"),tn=s(" column for the image captions:"),Po=p(),g(dt.$$.fragment),Oo=p(),se=l("h3"),je=l("a"),Xa=l("span"),g(pt.$$.fragment),an=p(),Ka=l("span"),sn=s("Object detection"),So=p(),qe=l("p"),on=s("Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),Qa=l("code"),ln=s("metadata.jsonl"),rn=s(" may look like:"),Lo=p(),g(ft.$$.fragment),Fo=p(),W=l("p"),nn=s("Load the dataset with "),Za=l("code"),dn=s("ImageFolder"),pn=s(", and it will create a "),es=l("code"),fn=s("objects"),hn=s(" column with the bounding boxes and the categories:"),No=p(),g(ht.$$.fragment),Bo=p(),oe=l("h3"),ke=l("a"),ts=l("span"),g(ct.$$.fragment),cn=p(),as=l("span"),un=s("Upload dataset to the Hub"),Ro=p(),M=l("p"),mn=s("Once you\u2019ve created a dataset, you can share it to the Hub with the "),zt=l("a"),gn=s("push_to_hub()"),_n=s(" method. Make sure you have the "),ut=l("a"),vn=s("huggingface_hub"),$n=s(" library installed and you\u2019re logged in to your Hugging Face account (see the "),Vt=l("a"),yn=s("Upload with Python tutorial"),bn=s(" for more details)."),Go=p(),Ae=l("p"),wn=s("Upload your dataset with "),Wt=l("a"),En=s("push_to_hub()"),jn=s(":"),Mo=p(),g(mt.$$.fragment),Uo=p(),le=l("h2"),Ie=l("a"),ss=l("span"),g(gt.$$.fragment),qn=p(),os=l("span"),kn=s("Loading script"),Ho=p(),Jt=l("p"),An=s("Write a dataset loading script to share a dataset. It defines a dataset\u2019s splits and configurations, and handles downloading and generating a dataset. The script is located in the same folder or repository as the dataset."),Yo=p(),g(_t.$$.fragment),zo=p(),Xt=l("p"),In=s("This structure allows your dataset to be loaded in one line:"),Vo=p(),g(vt.$$.fragment),Wo=p(),xe=l("p"),xn=s("This guide will show you how to create a dataset loading script for image datasets, which is a bit different from "),$t=l("a"),Cn=s("creating a loading script for text datasets"),Dn=s(". You\u2019ll learn how to:"),Jo=p(),x=l("ul"),ls=l("li"),Tn=s("Create a dataset builder class."),Pn=p(),rs=l("li"),On=s("Create dataset configurations."),Sn=p(),ns=l("li"),Ln=s("Add dataset metadata."),Fn=p(),is=l("li"),Nn=s("Download and define the dataset splits."),Bn=p(),ds=l("li"),Rn=s("Generate the dataset."),Gn=p(),ps=l("li"),Mn=s("Generate the dataset metadata (optional)."),Un=p(),fs=l("li"),Hn=s("Upload the dataset to the Hub."),Xo=p(),Ce=l("p"),Yn=s("The best way to learn is to open up an existing image dataset loading script, like "),yt=l("a"),zn=s("Food-101"),Vn=s(", and follow along!"),Ko=p(),g(De.$$.fragment),Qo=p(),re=l("h3"),Te=l("a"),hs=l("span"),g(bt.$$.fragment),Wn=p(),cs=l("span"),Jn=s("Create a dataset builder class"),Zo=p(),wt=l("p"),Kt=l("a"),Xn=s("GeneratorBasedBuilder"),Kn=s(" is the base class for datasets generated from a dictionary generator. Within this class, there are three methods to help create your dataset:"),el=p(),J=l("ul"),Qt=l("li"),us=l("code"),Qn=s("info"),Zn=s(" stores information about your dataset like its description, license, and features."),ei=p(),Zt=l("li"),ms=l("code"),ti=s("split_generators"),ai=s(" downloads the dataset and defines its splits."),si=p(),ea=l("li"),gs=l("code"),oi=s("generate_examples"),li=s(" generates the images and labels for each split."),tl=p(),Pe=l("p"),ri=s("Start by creating your dataset class as a subclass of "),ta=l("a"),ni=s("GeneratorBasedBuilder"),ii=s(" and add the three methods. Don\u2019t worry about filling in each of these methods yet, you\u2019ll develop those over the next few sections:"),al=p(),g(Et.$$.fragment),sl=p(),ne=l("h4"),Oe=l("a"),_s=l("span"),g(jt.$$.fragment),di=p(),vs=l("span"),pi=s("Multiple configurations"),ol=p(),Se=l("p"),fi=s("In some cases, a dataset may have more than one configuration. For example, if you check out the "),qt=l("a"),hi=s("Imagenette dataset"),ci=s(", you\u2019ll notice there are three subsets."),ll=p(),U=l("p"),ui=s("To create different configurations, use the "),aa=l("a"),mi=s("BuilderConfig"),gi=s(" class to create a subclass for your dataset. Provide the links to download the images and labels in "),$s=l("code"),_i=s("data_url"),vi=s(" and "),ys=l("code"),$i=s("metadata_urls"),yi=s(":"),rl=p(),g(kt.$$.fragment),nl=p(),Le=l("p"),bi=s("Now you can define your subsets at the top of "),sa=l("a"),wi=s("GeneratorBasedBuilder"),Ei=s(". Imagine you want to create two subsets in the Food-101 dataset based on whether it is a breakfast or dinner food."),il=p(),Fe=l("ol"),ie=l("li"),ji=s("Define your subsets with "),bs=l("code"),qi=s("Food101Config"),ki=s(" in a list in "),ws=l("code"),Ai=s("BUILDER_CONFIGS"),Ii=s("."),xi=p(),Es=l("li"),Ci=s("For each configuration, provide a name, description, and where to download the images and labels from."),dl=p(),g(At.$$.fragment),pl=p(),Ne=l("p"),Di=s("Now if users want to load the "),js=l("code"),Ti=s("breakfast"),Pi=s(" configuration, they can use the configuration name:"),fl=p(),g(It.$$.fragment),hl=p(),de=l("h3"),Be=l("a"),qs=l("span"),g(xt.$$.fragment),Oi=p(),ks=l("span"),Si=s("Add dataset metadata"),cl=p(),X=l("p"),Li=s("Adding information about your dataset is useful for users to learn more about it. This information is stored in the "),oa=l("a"),Fi=s("DatasetInfo"),Ni=s(" class which is returned by the "),As=l("code"),Bi=s("info"),Ri=s(" method. Users can access this information by:"),ul=p(),g(Ct.$$.fragment),ml=p(),la=l("p"),Gi=s("There is a lot of information you can specify about your dataset, but some important ones to include are:"),gl=p(),T=l("ol"),ra=l("li"),Is=l("code"),Mi=s("description"),Ui=s(" provides a concise description of the dataset."),Hi=p(),Re=l("li"),xs=l("code"),Yi=s("features"),zi=s(" specify the dataset column types. Since you\u2019re creating an image loading script, you\u2019ll need to include the "),na=l("a"),Vi=s("Image"),Wi=s(" feature."),Ji=p(),ia=l("li"),Cs=l("code"),Xi=s("supervised_keys"),Ki=s(" specify the input feature and label."),Qi=p(),da=l("li"),Ds=l("code"),Zi=s("homepage"),ed=s(" provides a link to the dataset homepage."),td=p(),pa=l("li"),Ts=l("code"),ad=s("citation"),sd=s(" is a BibTeX citation of the dataset."),od=p(),fa=l("li"),Ps=l("code"),ld=s("license"),rd=s(" states the dataset\u2019s license."),_l=p(),g(Ge.$$.fragment),vl=p(),g(Dt.$$.fragment),$l=p(),pe=l("h3"),Me=l("a"),Os=l("span"),g(Tt.$$.fragment),nd=p(),Ss=l("span"),id=s("Download and define the dataset splits"),yl=p(),ha=l("p"),dd=s("Now that you\u2019ve added some information about your dataset, the next step is to download the dataset and generate the splits."),bl=p(),Ue=l("ol"),fe=l("li"),Pt=l("p"),pd=s("Use the "),ca=l("a"),fd=s("DownloadManager.download()"),hd=s(" method to download the dataset and any other metadata you\u2019d like to associate with it. This method accepts:"),cd=p(),he=l("ul"),Ot=l("li"),ud=s("a name to a file inside a Hub dataset repository (in other words, the "),Ls=l("code"),md=s("data/"),gd=s(" folder)"),_d=p(),Fs=l("li"),vd=s("a URL to a file hosted somewhere else"),$d=p(),Ns=l("li"),yd=s("a list or dictionary of file names or URLs"),bd=p(),Bs=l("p"),wd=s("In the Food-101 loading script, you\u2019ll notice again the URLs are defined earlier in the script."),Ed=p(),St=l("li"),N=l("p"),jd=s("After you\u2019ve downloaded the dataset, use the "),ua=l("a"),qd=s("SplitGenerator"),kd=s(" to organize the images and labels in each split. Name each split with a standard name like: "),Rs=l("code"),Ad=s("Split.TRAIN"),Id=s(", "),Gs=l("code"),xd=s("Split.TEST"),Cd=s(", and "),Ms=l("code"),Dd=s("SPLIT.Validation"),Td=s("."),Pd=p(),D=l("p"),Od=s("In the "),Us=l("code"),Sd=s("gen_kwargs"),Ld=s(" parameter, specify the file paths to the "),Hs=l("code"),Fd=s("images"),Nd=s(" to iterate over and load. If necessary, you can use "),ma=l("a"),Bd=s("DownloadManager.iter_archive()"),Rd=s(" to iterate over images in TAR archives. You can also specify the associated labels in the "),Ys=l("code"),Gd=s("metadata_path"),Md=s(". The "),zs=l("code"),Ud=s("images"),Hd=s(" and "),Vs=l("code"),Yd=s("metadata_path"),zd=s(" are actually passed onto the next step where you\u2019ll actually generate the dataset."),wl=p(),g(He.$$.fragment),El=p(),g(Lt.$$.fragment),jl=p(),ce=l("h3"),Ye=l("a"),Ws=l("span"),g(Ft.$$.fragment),Vd=p(),Js=l("span"),Wd=s("Generate the dataset"),ql=p(),C=l("p"),Jd=s("The last method in the "),ga=l("a"),Xd=s("GeneratorBasedBuilder"),Kd=s(" class actually generates the images and labels in the dataset. It yields a dataset according to the stucture specified in "),Xs=l("code"),Qd=s("features"),Zd=s(" from the "),Ks=l("code"),ep=s("info"),tp=s(" method. As you can see, "),Qs=l("code"),ap=s("generate_examples"),sp=s(" accepts the "),Zs=l("code"),op=s("images"),lp=s(" and "),eo=l("code"),rp=s("metadata_path"),np=s(" from the previous method as arguments."),kl=p(),g(ze.$$.fragment),Al=p(),_a=l("p"),ip=s("Now you can write a function for opening and loading examples from the dataset:"),Il=p(),g(Nt.$$.fragment),xl=p(),ue=l("h3"),Ve=l("a"),to=l("span"),g(Bt.$$.fragment),dp=p(),ao=l("span"),pp=s("Generate the dataset metadata (optional)"),Cl=p(),We=l("p"),fp=s("The dataset metadata can be generated and stored in the dataset card ("),so=l("code"),hp=s("README.md"),cp=s(" file)."),Dl=p(),Je=l("p"),up=s("Run the following command to generate your dataset metadata in "),oo=l("code"),mp=s("README.md"),gp=s(" and make sure your new loading script works correctly:"),Tl=p(),g(Rt.$$.fragment),Pl=p(),K=l("p"),_p=s("If your loading script passed the test, you should now have the "),lo=l("code"),vp=s("dataset_info"),$p=s(" YAML fields in the header of the "),ro=l("code"),yp=s("README.md"),bp=s(" file in your dataset folder."),Ol=p(),me=l("h3"),Xe=l("a"),no=l("span"),g(Gt.$$.fragment),wp=p(),io=l("span"),Ep=s("Upload the dataset to the Hub"),Sl=p(),Q=l("p"),jp=s("Once your script is ready, "),va=l("a"),qp=s("create a dataset card"),kp=s(" and "),$a=l("a"),Ap=s("upload it to the Hub"),Ip=s("."),Ll=p(),ya=l("p"),xp=s("Congratulations, you can now load your dataset from the Hub! \u{1F973}"),Fl=p(),g(Mt.$$.fragment),this.h()},l(e){const i=sc('[data-svelte="svelte-1phssyn"]',document.head);c=r(i,"META",{name:!0,content:!0}),i.forEach(a),q=f(e),u=r(e,"H1",{class:!0});var Ut=n(u);E=r(Ut,"A",{id:!0,class:!0,href:!0});var po=n(E);j=r(po,"SPAN",{});var fo=n(j);_(m.$$.fragment,fo),fo.forEach(a),po.forEach(a),w=f(Ut),k=r(Ut,"SPAN",{});var ho=n(k);P=o(ho,"Create an image dataset"),ho.forEach(a),Ut.forEach(a),A=f(e),R=r(e,"P",{});var co=n(R);ee=o(co,"There are two methods for creating and sharing an image dataset. This guide will show you how to:"),co.forEach(a),mo=f(e),ge=r(e,"UL",{});var Ht=n(ge);et=r(Ht,"LI",{});var Bl=n(et);gr=o(Bl,"Create an image dataset with "),Pa=r(Bl,"CODE",{});var Bp=n(Pa);_r=o(Bp,"ImageFolder"),Bp.forEach(a),vr=o(Bl," and some metadata. This is a no-code solution for quickly creating an image dataset."),Bl.forEach(a),$r=f(Ht),Oa=r(Ht,"LI",{});var Rp=n(Oa);yr=o(Rp,"Create an image dataset by writing a loading script. This method is a bit more involved, but you have greater flexibility over how a dataset is defined, downloaded, and generated."),Rp.forEach(a),Ht.forEach(a),go=f(e),_(_e.$$.fragment,e),_o=f(e),te=r(e,"H2",{class:!0});var Rl=n(te);ve=r(Rl,"A",{id:!0,class:!0,href:!0});var Gp=n(ve);Sa=r(Gp,"SPAN",{});var Mp=n(Sa);_(tt.$$.fragment,Mp),Mp.forEach(a),Gp.forEach(a),br=f(Rl),La=r(Rl,"SPAN",{});var Up=n(La);wr=o(Up,"ImageFolder"),Up.forEach(a),Rl.forEach(a),vo=f(e),Y=r(e,"P",{});var ba=n(Y);Er=o(ba,"The "),Fa=r(ba,"CODE",{});var Hp=n(Fa);jr=o(Hp,"ImageFolder"),Hp.forEach(a),qr=o(ba," is a dataset builder designed to quickly load an image dataset without requiring you to write any code. "),Na=r(ba,"CODE",{});var Yp=n(Na);kr=o(Yp,"ImageFolder"),Yp.forEach(a),Ar=o(ba," automatically infers the class labels of your dataset based on the directory name. Just store your dataset in a directory structure like:"),ba.forEach(a),$o=f(e),_(at.$$.fragment,e),yo=f(e),G=r(e,"P",{});var Ke=n(G);Ir=o(Ke,"Then users can load your dataset by specifying "),Ba=r(Ke,"CODE",{});var zp=n(Ba);xr=o(zp,"imagefolder"),zp.forEach(a),Cr=o(Ke," in "),Yt=r(Ke,"A",{href:!0});var Vp=n(Yt);Dr=o(Vp,"load_dataset()"),Vp.forEach(a),Tr=o(Ke," and the directory in "),Ra=r(Ke,"CODE",{});var Wp=n(Ra);Pr=o(Wp,"data_dir"),Wp.forEach(a),Or=o(Ke,":"),Ke.forEach(a),bo=f(e),_(st.$$.fragment,e),wo=f(e),$e=r(e,"P",{});var Gl=n($e);Sr=o(Gl,"You can also use "),Ga=r(Gl,"CODE",{});var Jp=n(Ga);Lr=o(Jp,"imagefolder"),Jp.forEach(a),Fr=o(Gl," to load datasets involving multiple splits. To do so, your dataset directory should have the following structure:"),Gl.forEach(a),Eo=f(e),_(ot.$$.fragment,e),jo=f(e),ye=r(e,"P",{});var Ml=n(ye);Nr=o(Ml,"If there is additional information you\u2019d like to include about your dataset, like text captions or bounding boxes, add it as a "),Ma=r(Ml,"CODE",{});var Xp=n(Ma);Br=o(Xp,"metadata.jsonl"),Xp.forEach(a),Rr=o(Ml," file in your folder. This lets you quickly create datasets for different computer vision tasks like text captioning or object detection."),Ml.forEach(a),qo=f(e),_(lt.$$.fragment,e),ko=f(e),z=r(e,"P",{});var wa=n(z);Gr=o(wa,"Your "),Ua=r(wa,"CODE",{});var Kp=n(Ua);Mr=o(Kp,"metadata.jsonl"),Kp.forEach(a),Ur=o(wa," file must have a "),Ha=r(wa,"CODE",{});var Qp=n(Ha);Hr=o(Qp,"file_name"),Qp.forEach(a),Yr=o(wa," column which links image files with their metadata:"),wa.forEach(a),Ao=f(e),_(rt.$$.fragment,e),Io=f(e),_(be.$$.fragment,e),xo=f(e),ae=r(e,"H3",{class:!0});var Ul=n(ae);we=r(Ul,"A",{id:!0,class:!0,href:!0});var Zp=n(we);Ya=r(Zp,"SPAN",{});var ef=n(Ya);_(nt.$$.fragment,ef),ef.forEach(a),Zp.forEach(a),zr=f(Ul),za=r(Ul,"SPAN",{});var tf=n(za);Vr=o(tf,"Image captioning"),tf.forEach(a),Ul.forEach(a),Co=f(e),Ee=r(e,"P",{});var Hl=n(Ee);Wr=o(Hl,"Image captioning datasets have text describing an image. An example "),Va=r(Hl,"CODE",{});var af=n(Va);Jr=o(af,"metadata.jsonl"),af.forEach(a),Xr=o(Hl," may look like:"),Hl.forEach(a),Do=f(e),_(it.$$.fragment,e),To=f(e),V=r(e,"P",{});var Ea=n(V);Kr=o(Ea,"Load the dataset with "),Wa=r(Ea,"CODE",{});var sf=n(Wa);Qr=o(sf,"ImageFolder"),sf.forEach(a),Zr=o(Ea,", and it will create a "),Ja=r(Ea,"CODE",{});var of=n(Ja);en=o(of,"text"),of.forEach(a),tn=o(Ea," column for the image captions:"),Ea.forEach(a),Po=f(e),_(dt.$$.fragment,e),Oo=f(e),se=r(e,"H3",{class:!0});var Yl=n(se);je=r(Yl,"A",{id:!0,class:!0,href:!0});var lf=n(je);Xa=r(lf,"SPAN",{});var rf=n(Xa);_(pt.$$.fragment,rf),rf.forEach(a),lf.forEach(a),an=f(Yl),Ka=r(Yl,"SPAN",{});var nf=n(Ka);sn=o(nf,"Object detection"),nf.forEach(a),Yl.forEach(a),So=f(e),qe=r(e,"P",{});var zl=n(qe);on=o(zl,"Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),Qa=r(zl,"CODE",{});var df=n(Qa);ln=o(df,"metadata.jsonl"),df.forEach(a),rn=o(zl," may look like:"),zl.forEach(a),Lo=f(e),_(ft.$$.fragment,e),Fo=f(e),W=r(e,"P",{});var ja=n(W);nn=o(ja,"Load the dataset with "),Za=r(ja,"CODE",{});var pf=n(Za);dn=o(pf,"ImageFolder"),pf.forEach(a),pn=o(ja,", and it will create a "),es=r(ja,"CODE",{});var ff=n(es);fn=o(ff,"objects"),ff.forEach(a),hn=o(ja," column with the bounding boxes and the categories:"),ja.forEach(a),No=f(e),_(ht.$$.fragment,e),Bo=f(e),oe=r(e,"H3",{class:!0});var Vl=n(oe);ke=r(Vl,"A",{id:!0,class:!0,href:!0});var hf=n(ke);ts=r(hf,"SPAN",{});var cf=n(ts);_(ct.$$.fragment,cf),cf.forEach(a),hf.forEach(a),cn=f(Vl),as=r(Vl,"SPAN",{});var uf=n(as);un=o(uf,"Upload dataset to the Hub"),uf.forEach(a),Vl.forEach(a),Ro=f(e),M=r(e,"P",{});var Qe=n(M);mn=o(Qe,"Once you\u2019ve created a dataset, you can share it to the Hub with the "),zt=r(Qe,"A",{href:!0});var mf=n(zt);gn=o(mf,"push_to_hub()"),mf.forEach(a),_n=o(Qe," method. Make sure you have the "),ut=r(Qe,"A",{href:!0,rel:!0});var gf=n(ut);vn=o(gf,"huggingface_hub"),gf.forEach(a),$n=o(Qe," library installed and you\u2019re logged in to your Hugging Face account (see the "),Vt=r(Qe,"A",{href:!0});var _f=n(Vt);yn=o(_f,"Upload with Python tutorial"),_f.forEach(a),bn=o(Qe," for more details)."),Qe.forEach(a),Go=f(e),Ae=r(e,"P",{});var Wl=n(Ae);wn=o(Wl,"Upload your dataset with "),Wt=r(Wl,"A",{href:!0});var vf=n(Wt);En=o(vf,"push_to_hub()"),vf.forEach(a),jn=o(Wl,":"),Wl.forEach(a),Mo=f(e),_(mt.$$.fragment,e),Uo=f(e),le=r(e,"H2",{class:!0});var Jl=n(le);Ie=r(Jl,"A",{id:!0,class:!0,href:!0});var $f=n(Ie);ss=r($f,"SPAN",{});var yf=n(ss);_(gt.$$.fragment,yf),yf.forEach(a),$f.forEach(a),qn=f(Jl),os=r(Jl,"SPAN",{});var bf=n(os);kn=o(bf,"Loading script"),bf.forEach(a),Jl.forEach(a),Ho=f(e),Jt=r(e,"P",{});var wf=n(Jt);An=o(wf,"Write a dataset loading script to share a dataset. It defines a dataset\u2019s splits and configurations, and handles downloading and generating a dataset. The script is located in the same folder or repository as the dataset."),wf.forEach(a),Yo=f(e),_(_t.$$.fragment,e),zo=f(e),Xt=r(e,"P",{});var Ef=n(Xt);In=o(Ef,"This structure allows your dataset to be loaded in one line:"),Ef.forEach(a),Vo=f(e),_(vt.$$.fragment,e),Wo=f(e),xe=r(e,"P",{});var Xl=n(xe);xn=o(Xl,"This guide will show you how to create a dataset loading script for image datasets, which is a bit different from "),$t=r(Xl,"A",{class:!0,href:!0});var jf=n($t);Cn=o(jf,"creating a loading script for text datasets"),jf.forEach(a),Dn=o(Xl,". You\u2019ll learn how to:"),Xl.forEach(a),Jo=f(e),x=r(e,"UL",{});var S=n(x);ls=r(S,"LI",{});var qf=n(ls);Tn=o(qf,"Create a dataset builder class."),qf.forEach(a),Pn=f(S),rs=r(S,"LI",{});var kf=n(rs);On=o(kf,"Create dataset configurations."),kf.forEach(a),Sn=f(S),ns=r(S,"LI",{});var Af=n(ns);Ln=o(Af,"Add dataset metadata."),Af.forEach(a),Fn=f(S),is=r(S,"LI",{});var If=n(is);Nn=o(If,"Download and define the dataset splits."),If.forEach(a),Bn=f(S),ds=r(S,"LI",{});var xf=n(ds);Rn=o(xf,"Generate the dataset."),xf.forEach(a),Gn=f(S),ps=r(S,"LI",{});var Cf=n(ps);Mn=o(Cf,"Generate the dataset metadata (optional)."),Cf.forEach(a),Un=f(S),fs=r(S,"LI",{});var Df=n(fs);Hn=o(Df,"Upload the dataset to the Hub."),Df.forEach(a),S.forEach(a),Xo=f(e),Ce=r(e,"P",{});var Kl=n(Ce);Yn=o(Kl,"The best way to learn is to open up an existing image dataset loading script, like "),yt=r(Kl,"A",{href:!0,rel:!0});var Tf=n(yt);zn=o(Tf,"Food-101"),Tf.forEach(a),Vn=o(Kl,", and follow along!"),Kl.forEach(a),Ko=f(e),_(De.$$.fragment,e),Qo=f(e),re=r(e,"H3",{class:!0});var Ql=n(re);Te=r(Ql,"A",{id:!0,class:!0,href:!0});var Pf=n(Te);hs=r(Pf,"SPAN",{});var Of=n(hs);_(bt.$$.fragment,Of),Of.forEach(a),Pf.forEach(a),Wn=f(Ql),cs=r(Ql,"SPAN",{});var Sf=n(cs);Jn=o(Sf,"Create a dataset builder class"),Sf.forEach(a),Ql.forEach(a),Zo=f(e),wt=r(e,"P",{});var Cp=n(wt);Kt=r(Cp,"A",{href:!0});var Lf=n(Kt);Xn=o(Lf,"GeneratorBasedBuilder"),Lf.forEach(a),Kn=o(Cp," is the base class for datasets generated from a dictionary generator. Within this class, there are three methods to help create your dataset:"),Cp.forEach(a),el=f(e),J=r(e,"UL",{});var qa=n(J);Qt=r(qa,"LI",{});var Dp=n(Qt);us=r(Dp,"CODE",{});var Ff=n(us);Qn=o(Ff,"info"),Ff.forEach(a),Zn=o(Dp," stores information about your dataset like its description, license, and features."),Dp.forEach(a),ei=f(qa),Zt=r(qa,"LI",{});var Tp=n(Zt);ms=r(Tp,"CODE",{});var Nf=n(ms);ti=o(Nf,"split_generators"),Nf.forEach(a),ai=o(Tp," downloads the dataset and defines its splits."),Tp.forEach(a),si=f(qa),ea=r(qa,"LI",{});var Pp=n(ea);gs=r(Pp,"CODE",{});var Bf=n(gs);oi=o(Bf,"generate_examples"),Bf.forEach(a),li=o(Pp," generates the images and labels for each split."),Pp.forEach(a),qa.forEach(a),tl=f(e),Pe=r(e,"P",{});var Zl=n(Pe);ri=o(Zl,"Start by creating your dataset class as a subclass of "),ta=r(Zl,"A",{href:!0});var Rf=n(ta);ni=o(Rf,"GeneratorBasedBuilder"),Rf.forEach(a),ii=o(Zl," and add the three methods. Don\u2019t worry about filling in each of these methods yet, you\u2019ll develop those over the next few sections:"),Zl.forEach(a),al=f(e),_(Et.$$.fragment,e),sl=f(e),ne=r(e,"H4",{class:!0});var er=n(ne);Oe=r(er,"A",{id:!0,class:!0,href:!0});var Gf=n(Oe);_s=r(Gf,"SPAN",{});var Mf=n(_s);_(jt.$$.fragment,Mf),Mf.forEach(a),Gf.forEach(a),di=f(er),vs=r(er,"SPAN",{});var Uf=n(vs);pi=o(Uf,"Multiple configurations"),Uf.forEach(a),er.forEach(a),ol=f(e),Se=r(e,"P",{});var tr=n(Se);fi=o(tr,"In some cases, a dataset may have more than one configuration. For example, if you check out the "),qt=r(tr,"A",{href:!0,rel:!0});var Hf=n(qt);hi=o(Hf,"Imagenette dataset"),Hf.forEach(a),ci=o(tr,", you\u2019ll notice there are three subsets."),tr.forEach(a),ll=f(e),U=r(e,"P",{});var Ze=n(U);ui=o(Ze,"To create different configurations, use the "),aa=r(Ze,"A",{href:!0});var Yf=n(aa);mi=o(Yf,"BuilderConfig"),Yf.forEach(a),gi=o(Ze," class to create a subclass for your dataset. Provide the links to download the images and labels in "),$s=r(Ze,"CODE",{});var zf=n($s);_i=o(zf,"data_url"),zf.forEach(a),vi=o(Ze," and "),ys=r(Ze,"CODE",{});var Vf=n(ys);$i=o(Vf,"metadata_urls"),Vf.forEach(a),yi=o(Ze,":"),Ze.forEach(a),rl=f(e),_(kt.$$.fragment,e),nl=f(e),Le=r(e,"P",{});var ar=n(Le);bi=o(ar,"Now you can define your subsets at the top of "),sa=r(ar,"A",{href:!0});var Wf=n(sa);wi=o(Wf,"GeneratorBasedBuilder"),Wf.forEach(a),Ei=o(ar,". Imagine you want to create two subsets in the Food-101 dataset based on whether it is a breakfast or dinner food."),ar.forEach(a),il=f(e),Fe=r(e,"OL",{});var sr=n(Fe);ie=r(sr,"LI",{});var ka=n(ie);ji=o(ka,"Define your subsets with "),bs=r(ka,"CODE",{});var Jf=n(bs);qi=o(Jf,"Food101Config"),Jf.forEach(a),ki=o(ka," in a list in "),ws=r(ka,"CODE",{});var Xf=n(ws);Ai=o(Xf,"BUILDER_CONFIGS"),Xf.forEach(a),Ii=o(ka,"."),ka.forEach(a),xi=f(sr),Es=r(sr,"LI",{});var Kf=n(Es);Ci=o(Kf,"For each configuration, provide a name, description, and where to download the images and labels from."),Kf.forEach(a),sr.forEach(a),dl=f(e),_(At.$$.fragment,e),pl=f(e),Ne=r(e,"P",{});var or=n(Ne);Di=o(or,"Now if users want to load the "),js=r(or,"CODE",{});var Qf=n(js);Ti=o(Qf,"breakfast"),Qf.forEach(a),Pi=o(or," configuration, they can use the configuration name:"),or.forEach(a),fl=f(e),_(It.$$.fragment,e),hl=f(e),de=r(e,"H3",{class:!0});var lr=n(de);Be=r(lr,"A",{id:!0,class:!0,href:!0});var Zf=n(Be);qs=r(Zf,"SPAN",{});var eh=n(qs);_(xt.$$.fragment,eh),eh.forEach(a),Zf.forEach(a),Oi=f(lr),ks=r(lr,"SPAN",{});var th=n(ks);Si=o(th,"Add dataset metadata"),th.forEach(a),lr.forEach(a),cl=f(e),X=r(e,"P",{});var Aa=n(X);Li=o(Aa,"Adding information about your dataset is useful for users to learn more about it. This information is stored in the "),oa=r(Aa,"A",{href:!0});var ah=n(oa);Fi=o(ah,"DatasetInfo"),ah.forEach(a),Ni=o(Aa," class which is returned by the "),As=r(Aa,"CODE",{});var sh=n(As);Bi=o(sh,"info"),sh.forEach(a),Ri=o(Aa," method. Users can access this information by:"),Aa.forEach(a),ul=f(e),_(Ct.$$.fragment,e),ml=f(e),la=r(e,"P",{});var oh=n(la);Gi=o(oh,"There is a lot of information you can specify about your dataset, but some important ones to include are:"),oh.forEach(a),gl=f(e),T=r(e,"OL",{});var H=n(T);ra=r(H,"LI",{});var Op=n(ra);Is=r(Op,"CODE",{});var lh=n(Is);Mi=o(lh,"description"),lh.forEach(a),Ui=o(Op," provides a concise description of the dataset."),Op.forEach(a),Hi=f(H),Re=r(H,"LI",{});var uo=n(Re);xs=r(uo,"CODE",{});var rh=n(xs);Yi=o(rh,"features"),rh.forEach(a),zi=o(uo," specify the dataset column types. Since you\u2019re creating an image loading script, you\u2019ll need to include the "),na=r(uo,"A",{href:!0});var nh=n(na);Vi=o(nh,"Image"),nh.forEach(a),Wi=o(uo," feature."),uo.forEach(a),Ji=f(H),ia=r(H,"LI",{});var Sp=n(ia);Cs=r(Sp,"CODE",{});var ih=n(Cs);Xi=o(ih,"supervised_keys"),ih.forEach(a),Ki=o(Sp," specify the input feature and label."),Sp.forEach(a),Qi=f(H),da=r(H,"LI",{});var Lp=n(da);Ds=r(Lp,"CODE",{});var dh=n(Ds);Zi=o(dh,"homepage"),dh.forEach(a),ed=o(Lp," provides a link to the dataset homepage."),Lp.forEach(a),td=f(H),pa=r(H,"LI",{});var Fp=n(pa);Ts=r(Fp,"CODE",{});var ph=n(Ts);ad=o(ph,"citation"),ph.forEach(a),sd=o(Fp," is a BibTeX citation of the dataset."),Fp.forEach(a),od=f(H),fa=r(H,"LI",{});var Np=n(fa);Ps=r(Np,"CODE",{});var fh=n(Ps);ld=o(fh,"license"),fh.forEach(a),rd=o(Np," states the dataset\u2019s license."),Np.forEach(a),H.forEach(a),_l=f(e),_(Ge.$$.fragment,e),vl=f(e),_(Dt.$$.fragment,e),$l=f(e),pe=r(e,"H3",{class:!0});var rr=n(pe);Me=r(rr,"A",{id:!0,class:!0,href:!0});var hh=n(Me);Os=r(hh,"SPAN",{});var ch=n(Os);_(Tt.$$.fragment,ch),ch.forEach(a),hh.forEach(a),nd=f(rr),Ss=r(rr,"SPAN",{});var uh=n(Ss);id=o(uh,"Download and define the dataset splits"),uh.forEach(a),rr.forEach(a),yl=f(e),ha=r(e,"P",{});var mh=n(ha);dd=o(mh,"Now that you\u2019ve added some information about your dataset, the next step is to download the dataset and generate the splits."),mh.forEach(a),bl=f(e),Ue=r(e,"OL",{});var nr=n(Ue);fe=r(nr,"LI",{});var Ia=n(fe);Pt=r(Ia,"P",{});var ir=n(Pt);pd=o(ir,"Use the "),ca=r(ir,"A",{href:!0});var gh=n(ca);fd=o(gh,"DownloadManager.download()"),gh.forEach(a),hd=o(ir," method to download the dataset and any other metadata you\u2019d like to associate with it. This method accepts:"),ir.forEach(a),cd=f(Ia),he=r(Ia,"UL",{});var xa=n(he);Ot=r(xa,"LI",{});var dr=n(Ot);ud=o(dr,"a name to a file inside a Hub dataset repository (in other words, the "),Ls=r(dr,"CODE",{});var _h=n(Ls);md=o(_h,"data/"),_h.forEach(a),gd=o(dr," folder)"),dr.forEach(a),_d=f(xa),Fs=r(xa,"LI",{});var vh=n(Fs);vd=o(vh,"a URL to a file hosted somewhere else"),vh.forEach(a),$d=f(xa),Ns=r(xa,"LI",{});var $h=n(Ns);yd=o($h,"a list or dictionary of file names or URLs"),$h.forEach(a),xa.forEach(a),bd=f(Ia),Bs=r(Ia,"P",{});var yh=n(Bs);wd=o(yh,"In the Food-101 loading script, you\u2019ll notice again the URLs are defined earlier in the script."),yh.forEach(a),Ia.forEach(a),Ed=f(nr),St=r(nr,"LI",{});var pr=n(St);N=r(pr,"P",{});var Z=n(N);jd=o(Z,"After you\u2019ve downloaded the dataset, use the "),ua=r(Z,"A",{href:!0});var bh=n(ua);qd=o(bh,"SplitGenerator"),bh.forEach(a),kd=o(Z," to organize the images and labels in each split. Name each split with a standard name like: "),Rs=r(Z,"CODE",{});var wh=n(Rs);Ad=o(wh,"Split.TRAIN"),wh.forEach(a),Id=o(Z,", "),Gs=r(Z,"CODE",{});var Eh=n(Gs);xd=o(Eh,"Split.TEST"),Eh.forEach(a),Cd=o(Z,", and "),Ms=r(Z,"CODE",{});var jh=n(Ms);Dd=o(jh,"SPLIT.Validation"),jh.forEach(a),Td=o(Z,"."),Z.forEach(a),Pd=f(pr),D=r(pr,"P",{});var L=n(D);Od=o(L,"In the "),Us=r(L,"CODE",{});var qh=n(Us);Sd=o(qh,"gen_kwargs"),qh.forEach(a),Ld=o(L," parameter, specify the file paths to the "),Hs=r(L,"CODE",{});var kh=n(Hs);Fd=o(kh,"images"),kh.forEach(a),Nd=o(L," to iterate over and load. If necessary, you can use "),ma=r(L,"A",{href:!0});var Ah=n(ma);Bd=o(Ah,"DownloadManager.iter_archive()"),Ah.forEach(a),Rd=o(L," to iterate over images in TAR archives. You can also specify the associated labels in the "),Ys=r(L,"CODE",{});var Ih=n(Ys);Gd=o(Ih,"metadata_path"),Ih.forEach(a),Md=o(L,". The "),zs=r(L,"CODE",{});var xh=n(zs);Ud=o(xh,"images"),xh.forEach(a),Hd=o(L," and "),Vs=r(L,"CODE",{});var Ch=n(Vs);Yd=o(Ch,"metadata_path"),Ch.forEach(a),zd=o(L," are actually passed onto the next step where you\u2019ll actually generate the dataset."),L.forEach(a),pr.forEach(a),nr.forEach(a),wl=f(e),_(He.$$.fragment,e),El=f(e),_(Lt.$$.fragment,e),jl=f(e),ce=r(e,"H3",{class:!0});var fr=n(ce);Ye=r(fr,"A",{id:!0,class:!0,href:!0});var Dh=n(Ye);Ws=r(Dh,"SPAN",{});var Th=n(Ws);_(Ft.$$.fragment,Th),Th.forEach(a),Dh.forEach(a),Vd=f(fr),Js=r(fr,"SPAN",{});var Ph=n(Js);Wd=o(Ph,"Generate the dataset"),Ph.forEach(a),fr.forEach(a),ql=f(e),C=r(e,"P",{});var F=n(C);Jd=o(F,"The last method in the "),ga=r(F,"A",{href:!0});var Oh=n(ga);Xd=o(Oh,"GeneratorBasedBuilder"),Oh.forEach(a),Kd=o(F," class actually generates the images and labels in the dataset. It yields a dataset according to the stucture specified in "),Xs=r(F,"CODE",{});var Sh=n(Xs);Qd=o(Sh,"features"),Sh.forEach(a),Zd=o(F," from the "),Ks=r(F,"CODE",{});var Lh=n(Ks);ep=o(Lh,"info"),Lh.forEach(a),tp=o(F," method. As you can see, "),Qs=r(F,"CODE",{});var Fh=n(Qs);ap=o(Fh,"generate_examples"),Fh.forEach(a),sp=o(F," accepts the "),Zs=r(F,"CODE",{});var Nh=n(Zs);op=o(Nh,"images"),Nh.forEach(a),lp=o(F," and "),eo=r(F,"CODE",{});var Bh=n(eo);rp=o(Bh,"metadata_path"),Bh.forEach(a),np=o(F," from the previous method as arguments."),F.forEach(a),kl=f(e),_(ze.$$.fragment,e),Al=f(e),_a=r(e,"P",{});var Rh=n(_a);ip=o(Rh,"Now you can write a function for opening and loading examples from the dataset:"),Rh.forEach(a),Il=f(e),_(Nt.$$.fragment,e),xl=f(e),ue=r(e,"H3",{class:!0});var hr=n(ue);Ve=r(hr,"A",{id:!0,class:!0,href:!0});var Gh=n(Ve);to=r(Gh,"SPAN",{});var Mh=n(to);_(Bt.$$.fragment,Mh),Mh.forEach(a),Gh.forEach(a),dp=f(hr),ao=r(hr,"SPAN",{});var Uh=n(ao);pp=o(Uh,"Generate the dataset metadata (optional)"),Uh.forEach(a),hr.forEach(a),Cl=f(e),We=r(e,"P",{});var cr=n(We);fp=o(cr,"The dataset metadata can be generated and stored in the dataset card ("),so=r(cr,"CODE",{});var Hh=n(so);hp=o(Hh,"README.md"),Hh.forEach(a),cp=o(cr," file)."),cr.forEach(a),Dl=f(e),Je=r(e,"P",{});var ur=n(Je);up=o(ur,"Run the following command to generate your dataset metadata in "),oo=r(ur,"CODE",{});var Yh=n(oo);mp=o(Yh,"README.md"),Yh.forEach(a),gp=o(ur," and make sure your new loading script works correctly:"),ur.forEach(a),Tl=f(e),_(Rt.$$.fragment,e),Pl=f(e),K=r(e,"P",{});var Ca=n(K);_p=o(Ca,"If your loading script passed the test, you should now have the "),lo=r(Ca,"CODE",{});var zh=n(lo);vp=o(zh,"dataset_info"),zh.forEach(a),$p=o(Ca," YAML fields in the header of the "),ro=r(Ca,"CODE",{});var Vh=n(ro);yp=o(Vh,"README.md"),Vh.forEach(a),bp=o(Ca," file in your dataset folder."),Ca.forEach(a),Ol=f(e),me=r(e,"H3",{class:!0});var mr=n(me);Xe=r(mr,"A",{id:!0,class:!0,href:!0});var Wh=n(Xe);no=r(Wh,"SPAN",{});var Jh=n(no);_(Gt.$$.fragment,Jh),Jh.forEach(a),Wh.forEach(a),wp=f(mr),io=r(mr,"SPAN",{});var Xh=n(io);Ep=o(Xh,"Upload the dataset to the Hub"),Xh.forEach(a),mr.forEach(a),Sl=f(e),Q=r(e,"P",{});var Da=n(Q);jp=o(Da,"Once your script is ready, "),va=r(Da,"A",{href:!0});var Kh=n(va);qp=o(Kh,"create a dataset card"),Kh.forEach(a),kp=o(Da," and "),$a=r(Da,"A",{href:!0});var Qh=n($a);Ap=o(Qh,"upload it to the Hub"),Qh.forEach(a),Ip=o(Da,"."),Da.forEach(a),Ll=f(e),ya=r(e,"P",{});var Zh=n(ya);xp=o(Zh,"Congratulations, you can now load your dataset from the Hub! \u{1F973}"),Zh.forEach(a),Fl=f(e),_(Mt.$$.fragment,e),this.h()},h(){h(c,"name","hf:doc:metadata"),h(c,"content",JSON.stringify(hc)),h(E,"id","create-an-image-dataset"),h(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(E,"href","#create-an-image-dataset"),h(u,"class","relative group"),h(ve,"id","imagefolder"),h(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ve,"href","#imagefolder"),h(te,"class","relative group"),h(Yt,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),h(we,"id","image-captioning"),h(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(we,"href","#image-captioning"),h(ae,"class","relative group"),h(je,"id","object-detection"),h(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(je,"href","#object-detection"),h(se,"class","relative group"),h(ke,"id","upload-dataset-to-the-hub"),h(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ke,"href","#upload-dataset-to-the-hub"),h(oe,"class","relative group"),h(zt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict.push_to_hub"),h(ut,"href","https://huggingface.co/docs/huggingface_hub/index"),h(ut,"rel","nofollow"),h(Vt,"href","upload_dataset#upload-with-python"),h(Wt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict.push_to_hub"),h(Ie,"id","loading-script"),h(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ie,"href","#loading-script"),h(le,"class","relative group"),h($t,"class","underline decoration-green-400 decoration-2 font-semibold"),h($t,"href","./dataset_script"),h(yt,"href","https://huggingface.co/datasets/food101/blob/main/food101.py"),h(yt,"rel","nofollow"),h(Te,"id","create-a-dataset-builder-class"),h(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Te,"href","#create-a-dataset-builder-class"),h(re,"class","relative group"),h(Kt,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),h(ta,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),h(Oe,"id","multiple-configurations"),h(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Oe,"href","#multiple-configurations"),h(ne,"class","relative group"),h(qt,"href","https://huggingface.co/datasets/frgfm/imagenette"),h(qt,"rel","nofollow"),h(aa,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.BuilderConfig"),h(sa,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),h(Be,"id","add-dataset-metadata"),h(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Be,"href","#add-dataset-metadata"),h(de,"class","relative group"),h(oa,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetInfo"),h(na,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Image"),h(Me,"id","download-and-define-the-dataset-splits"),h(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Me,"href","#download-and-define-the-dataset-splits"),h(pe,"class","relative group"),h(ca,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadManager.download"),h(ua,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.SplitGenerator"),h(ma,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive"),h(Ye,"id","generate-the-dataset"),h(Ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ye,"href","#generate-the-dataset"),h(ce,"class","relative group"),h(ga,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder"),h(Ve,"id","generate-the-dataset-metadata-optional"),h(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ve,"href","#generate-the-dataset-metadata-optional"),h(ue,"class","relative group"),h(Xe,"id","upload-the-dataset-to-the-hub"),h(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Xe,"href","#upload-the-dataset-to-the-hub"),h(me,"class","relative group"),h(va,"href","./dataset_card"),h($a,"href","./share")},m(e,i){t(document.head,c),d(e,q,i),d(e,u,i),t(u,E),t(E,j),v(m,j,null),t(u,w),t(u,k),t(k,P),d(e,A,i),d(e,R,i),t(R,ee),d(e,mo,i),d(e,ge,i),t(ge,et),t(et,gr),t(et,Pa),t(Pa,_r),t(et,vr),t(ge,$r),t(ge,Oa),t(Oa,yr),d(e,go,i),v(_e,e,i),d(e,_o,i),d(e,te,i),t(te,ve),t(ve,Sa),v(tt,Sa,null),t(te,br),t(te,La),t(La,wr),d(e,vo,i),d(e,Y,i),t(Y,Er),t(Y,Fa),t(Fa,jr),t(Y,qr),t(Y,Na),t(Na,kr),t(Y,Ar),d(e,$o,i),v(at,e,i),d(e,yo,i),d(e,G,i),t(G,Ir),t(G,Ba),t(Ba,xr),t(G,Cr),t(G,Yt),t(Yt,Dr),t(G,Tr),t(G,Ra),t(Ra,Pr),t(G,Or),d(e,bo,i),v(st,e,i),d(e,wo,i),d(e,$e,i),t($e,Sr),t($e,Ga),t(Ga,Lr),t($e,Fr),d(e,Eo,i),v(ot,e,i),d(e,jo,i),d(e,ye,i),t(ye,Nr),t(ye,Ma),t(Ma,Br),t(ye,Rr),d(e,qo,i),v(lt,e,i),d(e,ko,i),d(e,z,i),t(z,Gr),t(z,Ua),t(Ua,Mr),t(z,Ur),t(z,Ha),t(Ha,Hr),t(z,Yr),d(e,Ao,i),v(rt,e,i),d(e,Io,i),v(be,e,i),d(e,xo,i),d(e,ae,i),t(ae,we),t(we,Ya),v(nt,Ya,null),t(ae,zr),t(ae,za),t(za,Vr),d(e,Co,i),d(e,Ee,i),t(Ee,Wr),t(Ee,Va),t(Va,Jr),t(Ee,Xr),d(e,Do,i),v(it,e,i),d(e,To,i),d(e,V,i),t(V,Kr),t(V,Wa),t(Wa,Qr),t(V,Zr),t(V,Ja),t(Ja,en),t(V,tn),d(e,Po,i),v(dt,e,i),d(e,Oo,i),d(e,se,i),t(se,je),t(je,Xa),v(pt,Xa,null),t(se,an),t(se,Ka),t(Ka,sn),d(e,So,i),d(e,qe,i),t(qe,on),t(qe,Qa),t(Qa,ln),t(qe,rn),d(e,Lo,i),v(ft,e,i),d(e,Fo,i),d(e,W,i),t(W,nn),t(W,Za),t(Za,dn),t(W,pn),t(W,es),t(es,fn),t(W,hn),d(e,No,i),v(ht,e,i),d(e,Bo,i),d(e,oe,i),t(oe,ke),t(ke,ts),v(ct,ts,null),t(oe,cn),t(oe,as),t(as,un),d(e,Ro,i),d(e,M,i),t(M,mn),t(M,zt),t(zt,gn),t(M,_n),t(M,ut),t(ut,vn),t(M,$n),t(M,Vt),t(Vt,yn),t(M,bn),d(e,Go,i),d(e,Ae,i),t(Ae,wn),t(Ae,Wt),t(Wt,En),t(Ae,jn),d(e,Mo,i),v(mt,e,i),d(e,Uo,i),d(e,le,i),t(le,Ie),t(Ie,ss),v(gt,ss,null),t(le,qn),t(le,os),t(os,kn),d(e,Ho,i),d(e,Jt,i),t(Jt,An),d(e,Yo,i),v(_t,e,i),d(e,zo,i),d(e,Xt,i),t(Xt,In),d(e,Vo,i),v(vt,e,i),d(e,Wo,i),d(e,xe,i),t(xe,xn),t(xe,$t),t($t,Cn),t(xe,Dn),d(e,Jo,i),d(e,x,i),t(x,ls),t(ls,Tn),t(x,Pn),t(x,rs),t(rs,On),t(x,Sn),t(x,ns),t(ns,Ln),t(x,Fn),t(x,is),t(is,Nn),t(x,Bn),t(x,ds),t(ds,Rn),t(x,Gn),t(x,ps),t(ps,Mn),t(x,Un),t(x,fs),t(fs,Hn),d(e,Xo,i),d(e,Ce,i),t(Ce,Yn),t(Ce,yt),t(yt,zn),t(Ce,Vn),d(e,Ko,i),v(De,e,i),d(e,Qo,i),d(e,re,i),t(re,Te),t(Te,hs),v(bt,hs,null),t(re,Wn),t(re,cs),t(cs,Jn),d(e,Zo,i),d(e,wt,i),t(wt,Kt),t(Kt,Xn),t(wt,Kn),d(e,el,i),d(e,J,i),t(J,Qt),t(Qt,us),t(us,Qn),t(Qt,Zn),t(J,ei),t(J,Zt),t(Zt,ms),t(ms,ti),t(Zt,ai),t(J,si),t(J,ea),t(ea,gs),t(gs,oi),t(ea,li),d(e,tl,i),d(e,Pe,i),t(Pe,ri),t(Pe,ta),t(ta,ni),t(Pe,ii),d(e,al,i),v(Et,e,i),d(e,sl,i),d(e,ne,i),t(ne,Oe),t(Oe,_s),v(jt,_s,null),t(ne,di),t(ne,vs),t(vs,pi),d(e,ol,i),d(e,Se,i),t(Se,fi),t(Se,qt),t(qt,hi),t(Se,ci),d(e,ll,i),d(e,U,i),t(U,ui),t(U,aa),t(aa,mi),t(U,gi),t(U,$s),t($s,_i),t(U,vi),t(U,ys),t(ys,$i),t(U,yi),d(e,rl,i),v(kt,e,i),d(e,nl,i),d(e,Le,i),t(Le,bi),t(Le,sa),t(sa,wi),t(Le,Ei),d(e,il,i),d(e,Fe,i),t(Fe,ie),t(ie,ji),t(ie,bs),t(bs,qi),t(ie,ki),t(ie,ws),t(ws,Ai),t(ie,Ii),t(Fe,xi),t(Fe,Es),t(Es,Ci),d(e,dl,i),v(At,e,i),d(e,pl,i),d(e,Ne,i),t(Ne,Di),t(Ne,js),t(js,Ti),t(Ne,Pi),d(e,fl,i),v(It,e,i),d(e,hl,i),d(e,de,i),t(de,Be),t(Be,qs),v(xt,qs,null),t(de,Oi),t(de,ks),t(ks,Si),d(e,cl,i),d(e,X,i),t(X,Li),t(X,oa),t(oa,Fi),t(X,Ni),t(X,As),t(As,Bi),t(X,Ri),d(e,ul,i),v(Ct,e,i),d(e,ml,i),d(e,la,i),t(la,Gi),d(e,gl,i),d(e,T,i),t(T,ra),t(ra,Is),t(Is,Mi),t(ra,Ui),t(T,Hi),t(T,Re),t(Re,xs),t(xs,Yi),t(Re,zi),t(Re,na),t(na,Vi),t(Re,Wi),t(T,Ji),t(T,ia),t(ia,Cs),t(Cs,Xi),t(ia,Ki),t(T,Qi),t(T,da),t(da,Ds),t(Ds,Zi),t(da,ed),t(T,td),t(T,pa),t(pa,Ts),t(Ts,ad),t(pa,sd),t(T,od),t(T,fa),t(fa,Ps),t(Ps,ld),t(fa,rd),d(e,_l,i),v(Ge,e,i),d(e,vl,i),v(Dt,e,i),d(e,$l,i),d(e,pe,i),t(pe,Me),t(Me,Os),v(Tt,Os,null),t(pe,nd),t(pe,Ss),t(Ss,id),d(e,yl,i),d(e,ha,i),t(ha,dd),d(e,bl,i),d(e,Ue,i),t(Ue,fe),t(fe,Pt),t(Pt,pd),t(Pt,ca),t(ca,fd),t(Pt,hd),t(fe,cd),t(fe,he),t(he,Ot),t(Ot,ud),t(Ot,Ls),t(Ls,md),t(Ot,gd),t(he,_d),t(he,Fs),t(Fs,vd),t(he,$d),t(he,Ns),t(Ns,yd),t(fe,bd),t(fe,Bs),t(Bs,wd),t(Ue,Ed),t(Ue,St),t(St,N),t(N,jd),t(N,ua),t(ua,qd),t(N,kd),t(N,Rs),t(Rs,Ad),t(N,Id),t(N,Gs),t(Gs,xd),t(N,Cd),t(N,Ms),t(Ms,Dd),t(N,Td),t(St,Pd),t(St,D),t(D,Od),t(D,Us),t(Us,Sd),t(D,Ld),t(D,Hs),t(Hs,Fd),t(D,Nd),t(D,ma),t(ma,Bd),t(D,Rd),t(D,Ys),t(Ys,Gd),t(D,Md),t(D,zs),t(zs,Ud),t(D,Hd),t(D,Vs),t(Vs,Yd),t(D,zd),d(e,wl,i),v(He,e,i),d(e,El,i),v(Lt,e,i),d(e,jl,i),d(e,ce,i),t(ce,Ye),t(Ye,Ws),v(Ft,Ws,null),t(ce,Vd),t(ce,Js),t(Js,Wd),d(e,ql,i),d(e,C,i),t(C,Jd),t(C,ga),t(ga,Xd),t(C,Kd),t(C,Xs),t(Xs,Qd),t(C,Zd),t(C,Ks),t(Ks,ep),t(C,tp),t(C,Qs),t(Qs,ap),t(C,sp),t(C,Zs),t(Zs,op),t(C,lp),t(C,eo),t(eo,rp),t(C,np),d(e,kl,i),v(ze,e,i),d(e,Al,i),d(e,_a,i),t(_a,ip),d(e,Il,i),v(Nt,e,i),d(e,xl,i),d(e,ue,i),t(ue,Ve),t(Ve,to),v(Bt,to,null),t(ue,dp),t(ue,ao),t(ao,pp),d(e,Cl,i),d(e,We,i),t(We,fp),t(We,so),t(so,hp),t(We,cp),d(e,Dl,i),d(e,Je,i),t(Je,up),t(Je,oo),t(oo,mp),t(Je,gp),d(e,Tl,i),v(Rt,e,i),d(e,Pl,i),d(e,K,i),t(K,_p),t(K,lo),t(lo,vp),t(K,$p),t(K,ro),t(ro,yp),t(K,bp),d(e,Ol,i),d(e,me,i),t(me,Xe),t(Xe,no),v(Gt,no,null),t(me,wp),t(me,io),t(io,Ep),d(e,Sl,i),d(e,Q,i),t(Q,jp),t(Q,va),t(va,qp),t(Q,kp),t(Q,$a),t($a,Ap),t(Q,Ip),d(e,Ll,i),d(e,ya,i),t(ya,xp),d(e,Fl,i),v(Mt,e,i),Nl=!0},p(e,[i]){const Ut={};i&2&&(Ut.$$scope={dirty:i,ctx:e}),_e.$set(Ut);const po={};i&2&&(po.$$scope={dirty:i,ctx:e}),be.$set(po);const fo={};i&2&&(fo.$$scope={dirty:i,ctx:e}),De.$set(fo);const ho={};i&2&&(ho.$$scope={dirty:i,ctx:e}),Ge.$set(ho);const co={};i&2&&(co.$$scope={dirty:i,ctx:e}),He.$set(co);const Ht={};i&2&&(Ht.$$scope={dirty:i,ctx:e}),ze.$set(Ht)},i(e){Nl||($(m.$$.fragment,e),$(_e.$$.fragment,e),$(tt.$$.fragment,e),$(at.$$.fragment,e),$(st.$$.fragment,e),$(ot.$$.fragment,e),$(lt.$$.fragment,e),$(rt.$$.fragment,e),$(be.$$.fragment,e),$(nt.$$.fragment,e),$(it.$$.fragment,e),$(dt.$$.fragment,e),$(pt.$$.fragment,e),$(ft.$$.fragment,e),$(ht.$$.fragment,e),$(ct.$$.fragment,e),$(mt.$$.fragment,e),$(gt.$$.fragment,e),$(_t.$$.fragment,e),$(vt.$$.fragment,e),$(De.$$.fragment,e),$(bt.$$.fragment,e),$(Et.$$.fragment,e),$(jt.$$.fragment,e),$(kt.$$.fragment,e),$(At.$$.fragment,e),$(It.$$.fragment,e),$(xt.$$.fragment,e),$(Ct.$$.fragment,e),$(Ge.$$.fragment,e),$(Dt.$$.fragment,e),$(Tt.$$.fragment,e),$(He.$$.fragment,e),$(Lt.$$.fragment,e),$(Ft.$$.fragment,e),$(ze.$$.fragment,e),$(Nt.$$.fragment,e),$(Bt.$$.fragment,e),$(Rt.$$.fragment,e),$(Gt.$$.fragment,e),$(Mt.$$.fragment,e),Nl=!0)},o(e){y(m.$$.fragment,e),y(_e.$$.fragment,e),y(tt.$$.fragment,e),y(at.$$.fragment,e),y(st.$$.fragment,e),y(ot.$$.fragment,e),y(lt.$$.fragment,e),y(rt.$$.fragment,e),y(be.$$.fragment,e),y(nt.$$.fragment,e),y(it.$$.fragment,e),y(dt.$$.fragment,e),y(pt.$$.fragment,e),y(ft.$$.fragment,e),y(ht.$$.fragment,e),y(ct.$$.fragment,e),y(mt.$$.fragment,e),y(gt.$$.fragment,e),y(_t.$$.fragment,e),y(vt.$$.fragment,e),y(De.$$.fragment,e),y(bt.$$.fragment,e),y(Et.$$.fragment,e),y(jt.$$.fragment,e),y(kt.$$.fragment,e),y(At.$$.fragment,e),y(It.$$.fragment,e),y(xt.$$.fragment,e),y(Ct.$$.fragment,e),y(Ge.$$.fragment,e),y(Dt.$$.fragment,e),y(Tt.$$.fragment,e),y(He.$$.fragment,e),y(Lt.$$.fragment,e),y(Ft.$$.fragment,e),y(ze.$$.fragment,e),y(Nt.$$.fragment,e),y(Bt.$$.fragment,e),y(Rt.$$.fragment,e),y(Gt.$$.fragment,e),y(Mt.$$.fragment,e),Nl=!1},d(e){a(c),e&&a(q),e&&a(u),b(m),e&&a(A),e&&a(R),e&&a(mo),e&&a(ge),e&&a(go),b(_e,e),e&&a(_o),e&&a(te),b(tt),e&&a(vo),e&&a(Y),e&&a($o),b(at,e),e&&a(yo),e&&a(G),e&&a(bo),b(st,e),e&&a(wo),e&&a($e),e&&a(Eo),b(ot,e),e&&a(jo),e&&a(ye),e&&a(qo),b(lt,e),e&&a(ko),e&&a(z),e&&a(Ao),b(rt,e),e&&a(Io),b(be,e),e&&a(xo),e&&a(ae),b(nt),e&&a(Co),e&&a(Ee),e&&a(Do),b(it,e),e&&a(To),e&&a(V),e&&a(Po),b(dt,e),e&&a(Oo),e&&a(se),b(pt),e&&a(So),e&&a(qe),e&&a(Lo),b(ft,e),e&&a(Fo),e&&a(W),e&&a(No),b(ht,e),e&&a(Bo),e&&a(oe),b(ct),e&&a(Ro),e&&a(M),e&&a(Go),e&&a(Ae),e&&a(Mo),b(mt,e),e&&a(Uo),e&&a(le),b(gt),e&&a(Ho),e&&a(Jt),e&&a(Yo),b(_t,e),e&&a(zo),e&&a(Xt),e&&a(Vo),b(vt,e),e&&a(Wo),e&&a(xe),e&&a(Jo),e&&a(x),e&&a(Xo),e&&a(Ce),e&&a(Ko),b(De,e),e&&a(Qo),e&&a(re),b(bt),e&&a(Zo),e&&a(wt),e&&a(el),e&&a(J),e&&a(tl),e&&a(Pe),e&&a(al),b(Et,e),e&&a(sl),e&&a(ne),b(jt),e&&a(ol),e&&a(Se),e&&a(ll),e&&a(U),e&&a(rl),b(kt,e),e&&a(nl),e&&a(Le),e&&a(il),e&&a(Fe),e&&a(dl),b(At,e),e&&a(pl),e&&a(Ne),e&&a(fl),b(It,e),e&&a(hl),e&&a(de),b(xt),e&&a(cl),e&&a(X),e&&a(ul),b(Ct,e),e&&a(ml),e&&a(la),e&&a(gl),e&&a(T),e&&a(_l),b(Ge,e),e&&a(vl),b(Dt,e),e&&a($l),e&&a(pe),b(Tt),e&&a(yl),e&&a(ha),e&&a(bl),e&&a(Ue),e&&a(wl),b(He,e),e&&a(El),b(Lt,e),e&&a(jl),e&&a(ce),b(Ft),e&&a(ql),e&&a(C),e&&a(kl),b(ze,e),e&&a(Al),e&&a(_a),e&&a(Il),b(Nt,e),e&&a(xl),e&&a(ue),b(Bt),e&&a(Cl),e&&a(We),e&&a(Dl),e&&a(Je),e&&a(Tl),b(Rt,e),e&&a(Pl),e&&a(K),e&&a(Ol),e&&a(me),b(Gt),e&&a(Sl),e&&a(Q),e&&a(Ll),e&&a(ya),e&&a(Fl),b(Mt,e)}}}const hc={local:"create-an-image-dataset",sections:[{local:"imagefolder",sections:[{local:"image-captioning",title:"Image captioning"},{local:"object-detection",title:"Object detection"},{local:"upload-dataset-to-the-hub",title:"Upload dataset to the Hub"}],title:"ImageFolder"},{local:"loading-script",sections:[{local:"create-a-dataset-builder-class",sections:[{local:"multiple-configurations",title:"Multiple configurations"}],title:"Create a dataset builder class"},{local:"add-dataset-metadata",title:"Add dataset metadata"},{local:"download-and-define-the-dataset-splits",title:"Download and define the dataset splits"},{local:"generate-the-dataset",title:"Generate the dataset"},{local:"generate-the-dataset-metadata-optional",title:"Generate the dataset metadata (optional)"},{local:"upload-the-dataset-to-the-hub",title:"Upload the dataset to the Hub"}],title:"Loading script"}],title:"Create an image dataset"};function cc(O){return oc(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class vc extends ec{constructor(c){super();tc(this,c,cc,fc,ac,{})}}export{vc as default,hc as metadata};
