import{S as Gl,i as Xl,s as Ql,e as o,k as m,w as y,t as d,M as Wl,c as n,d as a,m as f,a as r,x as b,h as c,b as v,G as t,g as u,y as w,q as x,o as k,B as E,v as Kl,L as V}from"../../chunks/vendor-hf-doc-builder.js";import{T as Di}from"../../chunks/Tip-hf-doc-builder.js";import{D as T}from"../../chunks/Docstring-hf-doc-builder.js";import{C as L}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Q}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as U}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";import{D as Ni}from"../../chunks/Deprecated-hf-doc-builder.js";function Zl(j){let i,$,h,p,_;return p=new L({props:{code:`from datasets import list_datasets
list_datasets()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> list_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>list_datasets()
[<span class="hljs-string">&#x27;acronym_identification&#x27;</span>,
 <span class="hljs-string">&#x27;ade_corpus_v2&#x27;</span>,
 <span class="hljs-string">&#x27;adversarial_qa&#x27;</span>,
 <span class="hljs-string">&#x27;aeslc&#x27;</span>,
 <span class="hljs-string">&#x27;afrikaans_ner_corpus&#x27;</span>,
 <span class="hljs-string">&#x27;ag_news&#x27;</span>,
 ...
]`}}),{c(){i=o("p"),$=d("Example:"),h=m(),y(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),h=f(s),b(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,h,l),w(p,s,l),_=!0},p:V,i(s){_||(x(p.$$.fragment,s),_=!0)},o(s){k(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(h),E(p,s)}}}function ed(j){let i,$,h,p,_;return{c(){i=o("p"),$=d("Passing "),h=o("em"),p=d("use_auth_token=True"),_=d(" is required when you want to access a private dataset.")},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Passing "),h=n(l,"EM",{});var N=r(h);p=c(N,"use_auth_token=True"),N.forEach(a),_=c(l," is required when you want to access a private dataset."),l.forEach(a)},m(s,l){u(s,i,l),t(i,$),t(i,h),t(h,p),t(i,_)},d(s){s&&a(i)}}}function td(j){let i,$,h,p,_;return p=new L({props:{code:`from datasets import load_dataset
ds = load_dataset('rotten_tomatoes', split='train')

data_files = {'train': 'train.csv', 'test': 'test.csv'}
ds = load_dataset('namespace/your_dataset_name', data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)

<span class="hljs-comment"># Map data files to splits</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;train.csv&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-string">&#x27;test.csv&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;namespace/your_dataset_name&#x27;</span>, data_files=data_files)`}}),{c(){i=o("p"),$=d("Load a dataset from the Hugging Face Hub:"),h=m(),y(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Load a dataset from the Hugging Face Hub:"),l.forEach(a),h=f(s),b(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,h,l),w(p,s,l),_=!0},p:V,i(s){_||(x(p.$$.fragment,s),_=!0)},o(s){k(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(h),E(p,s)}}}function ad(j){let i,$,h,p,_;return p=new L({props:{code:`from datasets import load_dataset
ds = load_dataset('csv', data_files='path/to/local/my_dataset.csv')

from datasets import load_dataset
ds = load_dataset('json', data_files='path/to/local/my_dataset.json')

from datasets import load_dataset
ds = load_dataset('path/to/local/loading_script/loading_script.py', split='train')`,highlighted:`<span class="hljs-comment"># Load a CSV file</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files=<span class="hljs-string">&#x27;path/to/local/my_dataset.csv&#x27;</span>)

<span class="hljs-comment"># Load a JSON file</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;json&#x27;</span>, data_files=<span class="hljs-string">&#x27;path/to/local/my_dataset.json&#x27;</span>)

<span class="hljs-comment"># Load from a local loading script</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;path/to/local/loading_script/loading_script.py&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)`}}),{c(){i=o("p"),$=d("Load a local dataset:"),h=m(),y(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Load a local dataset:"),l.forEach(a),h=f(s),b(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,h,l),w(p,s,l),_=!0},p:V,i(s){_||(x(p.$$.fragment,s),_=!0)},o(s){k(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(h),E(p,s)}}}function sd(j){let i,$,h,p,_,s,l,N;return l=new L({props:{code:`from datasets import load_dataset
ds = load_dataset('rotten_tomatoes', split='train', streaming=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)`}}),{c(){i=o("p"),$=d("Load an ["),h=o("em"),p=d("~datasets.IterableDataset"),_=d("]:"),s=m(),y(l.$$.fragment)},l(D){i=n(D,"P",{});var O=r(i);$=c(O,"Load an ["),h=n(O,"EM",{});var q=r(h);p=c(q,"~datasets.IterableDataset"),q.forEach(a),_=c(O,"]:"),O.forEach(a),s=f(D),b(l.$$.fragment,D)},m(D,O){u(D,i,O),t(i,$),t(i,h),t(h,p),t(i,_),u(D,s,O),w(l,D,O),N=!0},p:V,i(D){N||(x(l.$$.fragment,D),N=!0)},o(D){k(l.$$.fragment,D),N=!1},d(D){D&&a(i),D&&a(s),E(l,D)}}}function od(j){let i,$,h,p,_,s,l,N;return l=new L({props:{code:`from datasets import load_dataset
ds = load_dataset('imagefolder', data_dir='/path/to/images', split='train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;imagefolder&#x27;</span>, data_dir=<span class="hljs-string">&#x27;/path/to/images&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)`}}),{c(){i=o("p"),$=d("Load an image dataset with the "),h=o("em"),p=d("ImageFolder"),_=d(" dataset builder:"),s=m(),y(l.$$.fragment)},l(D){i=n(D,"P",{});var O=r(i);$=c(O,"Load an image dataset with the "),h=n(O,"EM",{});var q=r(h);p=c(q,"ImageFolder"),q.forEach(a),_=c(O," dataset builder:"),O.forEach(a),s=f(D),b(l.$$.fragment,D)},m(D,O){u(D,i,O),t(i,$),t(i,h),t(h,p),t(i,_),u(D,s,O),w(l,D,O),N=!0},p:V,i(D){N||(x(l.$$.fragment,D),N=!0)},o(D){k(l.$$.fragment,D),N=!1},d(D){D&&a(i),D&&a(s),E(l,D)}}}function nd(j){let i,$,h,p,_;return p=new L({props:{code:`from datasets import load_from_disk
ds = load_from_disk('path/to/dataset/directory')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&#x27;path/to/dataset/directory&#x27;</span>)`}}),{c(){i=o("p"),$=d("Example:"),h=m(),y(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),h=f(s),b(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,h,l),w(p,s,l),_=!0},p:V,i(s){_||(x(p.$$.fragment,s),_=!0)},o(s){k(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(h),E(p,s)}}}function rd(j){let i,$,h,p,_;return{c(){i=o("p"),$=d("Passing "),h=o("em"),p=d("use_auth_token=True"),_=d(" is required when you want to access a private dataset.")},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Passing "),h=n(l,"EM",{});var N=r(h);p=c(N,"use_auth_token=True"),N.forEach(a),_=c(l," is required when you want to access a private dataset."),l.forEach(a)},m(s,l){u(s,i,l),t(i,$),t(i,h),t(h,p),t(i,_)},d(s){s&&a(i)}}}function id(j){let i,$,h,p,_;return p=new L({props:{code:`from datasets import load_dataset_builder
ds_builder = load_dataset_builder('rotten_tomatoes')
ds_builder.info.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder.info.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=o("p"),$=d("Example:"),h=m(),y(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),h=f(s),b(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,h,l),w(p,s,l),_=!0},p:V,i(s){_||(x(p.$$.fragment,s),_=!0)},o(s){k(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(h),E(p,s)}}}function ld(j){let i,$,h,p,_;return p=new L({props:{code:`from datasets import get_dataset_config_names
get_dataset_config_names("glue")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> get_dataset_config_names
<span class="hljs-meta">&gt;&gt;&gt; </span>get_dataset_config_names(<span class="hljs-string">&quot;glue&quot;</span>)
[<span class="hljs-string">&#x27;cola&#x27;</span>,
 <span class="hljs-string">&#x27;sst2&#x27;</span>,
 <span class="hljs-string">&#x27;mrpc&#x27;</span>,
 <span class="hljs-string">&#x27;qqp&#x27;</span>,
 <span class="hljs-string">&#x27;stsb&#x27;</span>,
 <span class="hljs-string">&#x27;mnli&#x27;</span>,
 <span class="hljs-string">&#x27;mnli_mismatched&#x27;</span>,
 <span class="hljs-string">&#x27;mnli_matched&#x27;</span>,
 <span class="hljs-string">&#x27;qnli&#x27;</span>,
 <span class="hljs-string">&#x27;rte&#x27;</span>,
 <span class="hljs-string">&#x27;wnli&#x27;</span>,
 <span class="hljs-string">&#x27;ax&#x27;</span>]`}}),{c(){i=o("p"),$=d("Example:"),h=m(),y(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),h=f(s),b(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,h,l),w(p,s,l),_=!0},p:V,i(s){_||(x(p.$$.fragment,s),_=!0)},o(s){k(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(h),E(p,s)}}}function dd(j){let i,$,h,p,_;return p=new L({props:{code:`from datasets import get_dataset_infos
get_dataset_infos('rotten_tomatoes')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> get_dataset_infos
<span class="hljs-meta">&gt;&gt;&gt; </span>get_dataset_infos(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
{<span class="hljs-string">&#x27;default&#x27;</span>: DatasetInfo(description=<span class="hljs-string">&quot;Movie Review Dataset.
 is a dataset of containing 5,331 positive and 5,331 negative processed
ences from Rotten Tomatoes movie reviews...), ...}</span>`}}),{c(){i=o("p"),$=d("Example:"),h=m(),y(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),h=f(s),b(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,h,l),w(p,s,l),_=!0},p:V,i(s){_||(x(p.$$.fragment,s),_=!0)},o(s){k(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(h),E(p,s)}}}function cd(j){let i,$,h,p,_;return p=new L({props:{code:`from datasets import get_dataset_split_names
get_dataset_split_names('rotten_tomatoes')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> get_dataset_split_names
<span class="hljs-meta">&gt;&gt;&gt; </span>get_dataset_split_names(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
[<span class="hljs-string">&#x27;train&#x27;</span>, <span class="hljs-string">&#x27;validation&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>]`}}),{c(){i=o("p"),$=d("Example:"),h=m(),y(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),h=f(s),b(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,h,l),w(p,s,l),_=!0},p:V,i(s){_||(x(p.$$.fragment,s),_=!0)},o(s){k(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(h),E(p,s)}}}function pd(j){let i,$,h,p,_;return{c(){i=o("p"),$=d("Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),h=o("a"),p=d("Evaluate"),_=d("! In addition to metrics, you can find more tools for evaluating models and datasets."),this.h()},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),h=n(l,"A",{href:!0,rel:!0});var N=r(h);p=c(N,"Evaluate"),N.forEach(a),_=c(l,"! In addition to metrics, you can find more tools for evaluating models and datasets."),l.forEach(a),this.h()},h(){v(h,"href","https://huggingface.co/docs/evaluate/index"),v(h,"rel","nofollow")},m(s,l){u(s,i,l),t(i,$),t(i,h),t(h,p),t(i,_)},d(s){s&&a(i)}}}function md(j){let i,$,h,p,_,s,l;return{c(){i=o("p"),$=d("Use "),h=o("em"),p=d("evaluate.list_evaluation_modules"),_=d(" instead, from the new library \u{1F917} Evaluate: "),s=o("a"),l=d("https://huggingface.co/docs/evaluate"),this.h()},l(N){i=n(N,"P",{});var D=r(i);$=c(D,"Use "),h=n(D,"EM",{});var O=r(h);p=c(O,"evaluate.list_evaluation_modules"),O.forEach(a),_=c(D," instead, from the new library \u{1F917} Evaluate: "),s=n(D,"A",{href:!0,rel:!0});var q=r(s);l=c(q,"https://huggingface.co/docs/evaluate"),q.forEach(a),D.forEach(a),this.h()},h(){v(s,"href","https://huggingface.co/docs/evaluate"),v(s,"rel","nofollow")},m(N,D){u(N,i,D),t(i,$),t(i,h),t(h,p),t(i,_),t(i,s),t(s,l)},d(N){N&&a(i)}}}function fd(j){let i,$,h,p,_;return p=new L({props:{code:`from datasets import list_metrics
list_metrics()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> list_metrics
<span class="hljs-meta">&gt;&gt;&gt; </span>list_metrics()
[<span class="hljs-string">&#x27;accuracy&#x27;</span>,
 <span class="hljs-string">&#x27;bertscore&#x27;</span>,
 <span class="hljs-string">&#x27;bleu&#x27;</span>,
 <span class="hljs-string">&#x27;bleurt&#x27;</span>,
 <span class="hljs-string">&#x27;cer&#x27;</span>,
 <span class="hljs-string">&#x27;chrf&#x27;</span>,
 ...
]`}}),{c(){i=o("p"),$=d("Example:"),h=m(),y(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),h=f(s),b(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,h,l),w(p,s,l),_=!0},p:V,i(s){_||(x(p.$$.fragment,s),_=!0)},o(s){k(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(h),E(p,s)}}}function gd(j){let i,$,h,p,_,s,l;return{c(){i=o("p"),$=d("Use "),h=o("em"),p=d("evaluate.load"),_=d(" instead, from the new library \u{1F917} Evaluate: "),s=o("a"),l=d("https://huggingface.co/docs/evaluate"),this.h()},l(N){i=n(N,"P",{});var D=r(i);$=c(D,"Use "),h=n(D,"EM",{});var O=r(h);p=c(O,"evaluate.load"),O.forEach(a),_=c(D," instead, from the new library \u{1F917} Evaluate: "),s=n(D,"A",{href:!0,rel:!0});var q=r(s);l=c(q,"https://huggingface.co/docs/evaluate"),q.forEach(a),D.forEach(a),this.h()},h(){v(s,"href","https://huggingface.co/docs/evaluate"),v(s,"rel","nofollow")},m(N,D){u(N,i,D),t(i,$),t(i,h),t(h,p),t(i,_),t(i,s),t(s,l)},d(N){N&&a(i)}}}function hd(j){let i,$,h,p,_;return p=new L({props:{code:`from datasets import load_metric
accuracy = load_metric('accuracy')
accuracy.compute(references=[1, 0], predictions=[1, 1])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = load_metric(<span class="hljs-string">&#x27;accuracy&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy.compute(references=[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], predictions=[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])
{<span class="hljs-string">&#x27;accuracy&#x27;</span>: <span class="hljs-number">0.5</span>}`}}),{c(){i=o("p"),$=d("Example:"),h=m(),y(p.$$.fragment)},l(s){i=n(s,"P",{});var l=r(i);$=c(l,"Example:"),l.forEach(a),h=f(s),b(p.$$.fragment,s)},m(s,l){u(s,i,l),t(i,$),u(s,h,l),w(p,s,l),_=!0},p:V,i(s){_||(x(p.$$.fragment,s),_=!0)},o(s){k(p.$$.fragment,s),_=!1},d(s){s&&a(i),s&&a(h),E(p,s)}}}function ud(j){let i,$,h,p,_,s,l;return{c(){i=o("p"),$=d("Use "),h=o("em"),p=d("evaluate.inspect_evaluation_module"),_=d(" instead, from the new library \u{1F917} Evaluate instead: "),s=o("a"),l=d("https://huggingface.co/docs/evaluate"),this.h()},l(N){i=n(N,"P",{});var D=r(i);$=c(D,"Use "),h=n(D,"EM",{});var O=r(h);p=c(O,"evaluate.inspect_evaluation_module"),O.forEach(a),_=c(D," instead, from the new library \u{1F917} Evaluate instead: "),s=n(D,"A",{href:!0,rel:!0});var q=r(s);l=c(q,"https://huggingface.co/docs/evaluate"),q.forEach(a),D.forEach(a),this.h()},h(){v(s,"href","https://huggingface.co/docs/evaluate"),v(s,"rel","nofollow")},m(N,D){u(N,i,D),t(i,$),t(i,h),t(h,p),t(i,_),t(i,s),t(s,l)},d(N){N&&a(i)}}}function _d(j){let i,$,h,p,_,s,l,N,D,O,q,qo,Ds,W,ye,sa,et,Po,oa,To,Ns,M,tt,Fo,na,Io,Ao,be,js,C,at,Lo,ra,Ho,Uo,K,Vo,st,Mo,Bo,ia,Ro,Jo,zo,la,Yo,Go,ot,da,Xo,Qo,ca,Wo,Ko,pa,Zo,en,ma,tn,an,Z,B,nt,sn,fa,on,nn,rn,ga,ln,dn,ha,cn,pn,Bt,mn,rt,fn,gn,it,ua,hn,un,lt,_a,va,_n,vn,dt,$a,$n,yn,ya,bn,wn,ba,ct,xn,wa,kn,En,Dn,xa,Nn,jn,we,Cn,ka,Sn,On,xe,qn,ke,Pn,Ee,Tn,De,Cs,R,pt,Fn,J,In,Rt,An,Ln,Jt,Hn,Un,Ea,Vn,Mn,Bn,Ne,Ss,P,mt,Rn,Da,Jn,zn,ee,Yn,ft,Gn,Xn,Na,Qn,Wn,Kn,ja,Zn,er,gt,Ca,tr,ar,Sa,sr,or,Oa,nr,rr,je,ir,Ce,Os,z,ht,lr,qa,dr,cr,Se,qs,Y,ut,pr,Pa,mr,fr,Oe,Ps,G,_t,gr,Ta,hr,ur,qe,Ts,te,vt,_r,Fa,vr,Fs,ae,Pe,Ia,$t,$r,Aa,yr,Is,Te,As,I,yt,br,La,wr,xr,Fe,kr,Ie,Ls,A,bt,Er,wt,Dr,Ha,Nr,jr,Cr,Ae,Sr,Le,Hs,X,xt,Or,Ua,qr,Pr,He,Us,se,Ue,Va,kt,Tr,Ma,Fr,Vs,zt,Ir,Ms,Ve,Yt,Ar,Ba,Lr,Hr,Gt,Ur,Ra,Vr,Bs,H,Mr,Ja,Br,Rr,za,Jr,zr,Xt,Yr,Gr,Rs,Et,Js,oe,Me,Ya,Dt,Xr,Ga,Qr,zs,ne,Nt,Wr,Xa,Kr,Ys,re,Be,Qa,jt,Zr,Wa,ei,Gs,ie,Ct,ti,Ka,ai,Xs,le,Re,Za,St,si,es,oi,Qs,de,Ot,ni,ts,ri,Ws,ce,Je,as,qt,ii,ss,li,Ks,pe,Pt,di,os,ci,Zs,me,ze,ns,Tt,pi,rs,mi,eo,fe,Ft,fi,is,gi,to,ge,Ye,ls,It,hi,ds,ui,ao,he,At,_i,cs,vi,so,ue,Ge,ps,Lt,$i,ms,yi,oo,_e,Ht,bi,fs,wi,no;return s=new Q({}),et=new Q({}),tt=new T({props:{name:"datasets.list_datasets",anchor:"datasets.list_datasets",parameters:[{name:"with_community_datasets",val:" = True"},{name:"with_details",val:" = False"}],parametersDescription:[{anchor:"datasets.list_datasets.with_community_datasets",description:"<strong>with_community_datasets</strong> (<code>bool</code>, optional, default <code>True</code>) &#x2014; Include the community provided datasets.",name:"with_community_datasets"},{anchor:"datasets.list_datasets.with_details",description:"<strong>with_details</strong> (<code>bool</code>, optional, default <code>False</code>) &#x2014; Return the full details on the datasets instead of only the short name.",name:"with_details"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/inspect.py#L44"}}),be=new U({props:{anchor:"datasets.list_datasets.example",$$slots:{default:[Zl]},$$scope:{ctx:j}}}),at=new T({props:{name:"datasets.load_dataset",anchor:"datasets.load_dataset",parameters:[{name:"path",val:": str"},{name:"name",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, typing.Sequence[str], typing.Mapping[str, typing.Union[str, typing.Sequence[str]]], NoneType] = None"},{name:"split",val:": typing.Union[str, datasets.splits.Split, NoneType] = None"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"ignore_verifications",val:": bool = False"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"},{name:"save_infos",val:": bool = False"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate, NoneType] = None"},{name:"streaming",val:": bool = False"},{name:"num_proc",val:": int = None"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.load_dataset.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; Path or name of the dataset.
Depending on <code>path</code>, the dataset builder that is used comes from a generic dataset script (JSON, CSV, Parquet, text etc.) or from the dataset script (a python file) inside the dataset directory.</p>
<p>For local datasets:</p>
<ul>
<li>if <code>path</code> is a local directory (containing data files only)
-&gt; load a generic dataset builder (csv, json, text etc.) based on the content of the directory
e.g. <code>&apos;./path/to/directory/with/my/csv/data&apos;</code>.</li>
<li>if <code>path</code> is a local dataset script or a directory containing a local dataset script (if the script has the same name as the directory):
-&gt; load the dataset builder from the dataset script
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code>.</li>
</ul>
<p>For datasets on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)</p>
<ul>
<li>if <code>path</code> is a dataset repository on the HF hub (containing data files only)
-&gt; load a generic dataset builder (csv, text etc.) based on the content of the repository
e.g. <code>&apos;username/dataset_name&apos;</code>, a dataset repository on the HF hub containing your data files.</li>
<li>if <code>path</code> is a dataset repository on the HF hub with a dataset script (if the script has the same name as the directory)
-&gt; load the dataset builder from the dataset script in the dataset repository
e.g. <code>glue</code>, <code>squad</code>, <code>&apos;username/dataset_name&apos;</code>, a dataset repository on the HF hub containing a dataset script <em>&#x2018;dataset_name.py&#x2019;</em>.</li>
</ul>`,name:"path"},{anchor:"datasets.load_dataset.name",description:"<strong>name</strong> (<code>str</code>, optional) &#x2014; Defining the name of the dataset configuration.",name:"name"},{anchor:"datasets.load_dataset.data_dir",description:`<strong>data_dir</strong> (<code>str</code>, optional) &#x2014; Defining the data_dir of the dataset configuration. If specified for the generic builders (csv, text etc.) or the Hub datasets and <em>data_files</em> is None,
the behavior is equal to passing <em>os.path.join(data_dir, **)</em> as <em>data_files</em> to reference all the files in a directory.`,name:"data_dir"},{anchor:"datasets.load_dataset.data_files",description:"<strong>data_files</strong> (<code>str</code> or <code>Sequence</code> or <code>Mapping</code>, optional) &#x2014; Path(s) to source data file(s).",name:"data_files"},{anchor:"datasets.load_dataset.split",description:`<strong>split</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.Split">Split</a> or <code>str</code>) &#x2014; Which split of the data to load.
If None, will return a <em>dict</em> with all splits (typically <em>datasets.Split.TRAIN</em> and <em>datasets.Split.TEST</em>).
If given, will return a single Dataset.
Splits can be combined and specified like in tensorflow-datasets.`,name:"split"},{anchor:"datasets.load_dataset.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional) &#x2014; Directory to read/write data. Defaults to &#x201D;~/.cache/huggingface/datasets&#x201D;.",name:"cache_dir"},{anchor:"datasets.load_dataset.features",description:'<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Set the features type to use for this dataset.',name:"features"},{anchor:"datasets.load_dataset.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.load_dataset.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.load_dataset.ignore_verifications",description:"<strong>ignore_verifications</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Ignore the verifications of the downloaded/processed dataset information (checksums/size/splits/&#x2026;).",name:"ignore_verifications"},{anchor:"datasets.load_dataset.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the dataset
will not be copied in-memory unless explicitly enabled by setting <em>datasets.config.IN_MEMORY_MAX_SIZE</em> to
nonzero. See more details in the <a href="/docs/datasets/main/en/package_reference/loading_methods#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"},{anchor:"datasets.load_dataset.save_infos",description:"<strong>save_infos</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Save the dataset information (checksums/size/splits/&#x2026;).",name:"save_infos"},{anchor:"datasets.load_dataset.revision",description:`<strong>revision</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.Version">Version</a> or <code>str</code>, optional) &#x2014; Version of the dataset script to load.
As datasets have their own git repository on the Datasets Hub, the default version &#x201C;main&#x201D; corresponds to their &#x201C;main&#x201D; branch.
You can specify a different version than the default &#x201C;main&#x201D; by using a commit SHA or a git tag of the dataset repository.`,name:"revision"},{anchor:"datasets.load_dataset.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from <em>&#x201D;~/.huggingface&#x201D;</em>.`,name:"use_auth_token"},{anchor:"datasets.load_dataset.task",description:'<strong>task</strong> (<code>str</code>) &#x2014; The task to prepare the dataset for during training and evaluation. Casts the dataset&#x2019;s <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.',name:"task"},{anchor:"datasets.load_dataset.streaming",description:`<strong>streaming</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If set to True, don&#x2019;t download the data files. Instead, it streams the data progressively while
iterating on the dataset. An IterableDataset or IterableDatasetDict is returned instead in this case.</p>
<p>Note that streaming works for datasets that use data formats that support being iterated over like txt, csv, jsonl for example.
Json files may be downloaded completely. Also streaming from remote zip or gzip files is supported but other compressed formats
like rar and xz are not yet supported. The tgz format doesn&#x2019;t allow streaming.`,name:"streaming"},{anchor:"datasets.load_dataset.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes when downloading and generating the dataset locally.
Multiprocessing is disabled by default.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.7.0</p>
						
					</div>`,name:"num_proc"},{anchor:"datasets.load_dataset.*config_kwargs",description:`*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>
and used in the <a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/load.py#L1529",returnDescription:`
<ul>
<li>if <em>split</em> is not None: the dataset requested,</li>
<li>if <em>split</em> is None, a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
<p>or <a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a> or <a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a>: if streaming=True</p>
<ul>
<li>if <em>split</em> is not None: the dataset requested,</li>
<li>if <em>split</em> is None, a <code>datasets.streaming.IterableDatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),we=new Di({props:{$$slots:{default:[ed]},$$scope:{ctx:j}}}),xe=new U({props:{anchor:"datasets.load_dataset.example",$$slots:{default:[td]},$$scope:{ctx:j}}}),ke=new U({props:{anchor:"datasets.load_dataset.example-2",$$slots:{default:[ad]},$$scope:{ctx:j}}}),Ee=new U({props:{anchor:"datasets.load_dataset.example-3",$$slots:{default:[sd]},$$scope:{ctx:j}}}),De=new U({props:{anchor:"datasets.load_dataset.example-4",$$slots:{default:[od]},$$scope:{ctx:j}}}),pt=new T({props:{name:"datasets.load_from_disk",anchor:"datasets.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3://my-bucket/dataset/train&#x201D;</em>) of the Dataset or DatasetDict directory where the dataset will be
loaded from.`,name:"dataset_path"},{anchor:"datasets.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the dataset
will not be copied in-memory unless explicitly enabled by setting <em>datasets.config.IN_MEMORY_MAX_SIZE</em> to
nonzero. See more details in the <a href="/docs/datasets/main/en/package_reference/loading_methods#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/load.py#L1764",returnDescription:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset directory: the dataset requested.</li>
<li>If <em>dataset_path</em> is a path of a dataset dict directory: a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Ne=new U({props:{anchor:"datasets.load_from_disk.example",$$slots:{default:[nd]},$$scope:{ctx:j}}}),mt=new T({props:{name:"datasets.load_dataset_builder",anchor:"datasets.load_dataset_builder",parameters:[{name:"path",val:": str"},{name:"name",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, typing.Sequence[str], typing.Mapping[str, typing.Union[str, typing.Sequence[str]]], NoneType] = None"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.load_dataset_builder.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; Path or name of the dataset.
Depending on <code>path</code>, the dataset builder that is used comes from a generic dataset script (JSON, CSV, Parquet, text etc.) or from the dataset script (a python file) inside the dataset directory.</p>
<p>For local datasets:</p>
<ul>
<li>if <code>path</code> is a local directory (containing data files only)
-&gt; load a generic dataset builder (csv, json, text etc.) based on the content of the directory
e.g. <code>&apos;./path/to/directory/with/my/csv/data&apos;</code>.</li>
<li>if <code>path</code> is a local dataset script or a directory containing a local dataset script (if the script has the same name as the directory):
-&gt; load the dataset builder from the dataset script
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code>.</li>
</ul>
<p>For datasets on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)</p>
<ul>
<li>if <code>path</code> is a dataset repository on the HF hub (containing data files only)
-&gt; load a generic dataset builder (csv, text etc.) based on the content of the repository
e.g. <code>&apos;username/dataset_name&apos;</code>, a dataset repository on the HF hub containing your data files.</li>
<li>if <code>path</code> is a dataset repository on the HF hub with a dataset script (if the script has the same name as the directory)
-&gt; load the dataset builder from the dataset script in the dataset repository
e.g. <code>glue</code>, <code>squad</code>, <code>&apos;username/dataset_name&apos;</code>, a dataset repository on the HF hub containing a dataset script <em>&#x2018;dataset_name.py&#x2019;</em>.</li>
</ul>`,name:"path"},{anchor:"datasets.load_dataset_builder.name",description:"<strong>name</strong> (<code>str</code>, optional) &#x2014; Defining the name of the dataset configuration.",name:"name"},{anchor:"datasets.load_dataset_builder.data_dir",description:`<strong>data_dir</strong> (<code>str</code>, optional) &#x2014; Defining the data_dir of the dataset configuration. If specified for the generic builders (csv, text etc.) or the Hub datasets and <em>data_files</em> is None,
the behavior is equal to passing <em>os.path.join(data_dir, **)</em> as <em>data_files</em> to reference all the files in a directory.`,name:"data_dir"},{anchor:"datasets.load_dataset_builder.data_files",description:"<strong>data_files</strong> (<code>str</code> or <code>Sequence</code> or <code>Mapping</code>, optional) &#x2014; Path(s) to source data file(s).",name:"data_files"},{anchor:"datasets.load_dataset_builder.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional) &#x2014; Directory to read/write data. Defaults to &#x201D;~/.cache/huggingface/datasets&#x201D;.",name:"cache_dir"},{anchor:"datasets.load_dataset_builder.features",description:'<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Set the features type to use for this dataset.',name:"features"},{anchor:"datasets.load_dataset_builder.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.load_dataset_builder.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.load_dataset_builder.revision",description:`<strong>revision</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.Version">Version</a> or <code>str</code>, optional) &#x2014; Version of the dataset script to load.
As datasets have their own git repository on the Datasets Hub, the default version &#x201C;main&#x201D; corresponds to their &#x201C;main&#x201D; branch.
You can specify a different version than the default &#x201C;main&#x201D; by using a commit SHA or a git tag of the dataset repository.`,name:"revision"},{anchor:"datasets.load_dataset_builder.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from <em>&#x201D;~/.huggingface&#x201D;</em>.`,name:"use_auth_token"},{anchor:"datasets.load_dataset_builder.*config_kwargs",description:`*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>
and used in the <a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/load.py#L1400",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DatasetBuilder"
>DatasetBuilder</a></p>
`}}),je=new Di({props:{$$slots:{default:[rd]},$$scope:{ctx:j}}}),Ce=new U({props:{anchor:"datasets.load_dataset_builder.example",$$slots:{default:[id]},$$scope:{ctx:j}}}),ht=new T({props:{name:"datasets.get_dataset_config_names",anchor:"datasets.get_dataset_config_names",parameters:[{name:"path",val:": str"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"dynamic_modules_path",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, typing.List, typing.Dict, NoneType] = None"},{name:"**download_kwargs",val:""}],parametersDescription:[{anchor:"datasets.get_dataset_config_names.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code></li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.get_dataset_config_names.revision",description:`<strong>revision</strong> (Optional <code>Union[str, datasets.Version]</code>) &#x2014;
If specified, the dataset module will be loaded from the datasets repository at this version.
By default:</p>
<ul>
<li>it is set to the local version of the lib.</li>
<li>it will also try to load it from the main branch if it&#x2019;s not available at the local version of the lib.
Specifying a version that is different from your local version of the lib might cause compatibility issues.</li>
</ul>`,name:"revision"},{anchor:"datasets.get_dataset_config_names.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.get_dataset_config_names.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.get_dataset_config_names.dynamic_modules_path",description:`<strong>dynamic_modules_path</strong> (Optional str, defaults to HF_MODULES_CACHE / &#x201C;datasets_modules&#x201D;, i.e. ~/.cache/huggingface/modules/datasets_modules) &#x2014;
Optional path to the directory in which the dynamic modules are saved. It must have been initialized with <code>init_dynamic_modules</code>.
By default the datasets and metrics are stored inside the <em>datasets_modules</em> module.`,name:"dynamic_modules_path"},{anchor:"datasets.get_dataset_config_names.data_files",description:"<strong>data_files</strong> (<code>Union[Dict, List, str]</code>, optional) &#x2014; Defining the data_files of the dataset configuration.",name:"data_files"},{anchor:"datasets.get_dataset_config_names.*download_kwargs",description:`*<strong>*download_kwargs</strong> (additional keyword arguments) &#x2014; optional attributes for DownloadConfig() which will override the attributes in download_config if supplied,
for example <code>use_auth_token</code>`,name:"*download_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/inspect.py#L256"}}),Se=new U({props:{anchor:"datasets.get_dataset_config_names.example",$$slots:{default:[ld]},$$scope:{ctx:j}}}),ut=new T({props:{name:"datasets.get_dataset_infos",anchor:"datasets.get_dataset_infos",parameters:[{name:"path",val:": str"},{name:"data_files",val:": typing.Union[str, typing.List, typing.Dict, NoneType] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.get_dataset_infos.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code></li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.get_dataset_infos.revision",description:`<strong>revision</strong> (Optional <code>Union[str, datasets.Version]</code>) &#x2014;
If specified, the dataset module will be loaded from the datasets repository at this version.
By default:</p>
<ul>
<li>it is set to the local version of the lib.</li>
<li>it will also try to load it from the main branch if it&#x2019;s not available at the local version of the lib.
Specifying a version that is different from your local version of the lib might cause compatibility issues.</li>
</ul>`,name:"revision"},{anchor:"datasets.get_dataset_infos.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.get_dataset_infos.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.get_dataset_infos.data_files",description:"<strong>data_files</strong> (<code>Union[Dict, List, str]</code>, optional) &#x2014; Defining the data_files of the dataset configuration.",name:"data_files"},{anchor:"datasets.get_dataset_infos.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from <em>&#x201D;~/.huggingface&#x201D;</em>.`,name:"use_auth_token"},{anchor:"datasets.get_dataset_infos.*config_kwargs",description:"*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; optional attributes for builder class which will override the attributes if supplied.",name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/inspect.py#L195"}}),Oe=new U({props:{anchor:"datasets.get_dataset_infos.example",$$slots:{default:[dd]},$$scope:{ctx:j}}}),_t=new T({props:{name:"datasets.get_dataset_split_names",anchor:"datasets.get_dataset_split_names",parameters:[{name:"path",val:": str"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, typing.Sequence[str], typing.Mapping[str, typing.Union[str, typing.Sequence[str]]], NoneType] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.get_dataset_split_names.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code></li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.get_dataset_split_names.config_name",description:"<strong>config_name</strong> (<code>str</code>, optional) &#x2014; Defining the name of the dataset configuration.",name:"config_name"},{anchor:"datasets.get_dataset_split_names.data_files",description:"<strong>data_files</strong> (<code>str</code> or <code>Sequence</code> or <code>Mapping</code>, optional) &#x2014; Path(s) to source data file(s).",name:"data_files"},{anchor:"datasets.get_dataset_split_names.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.get_dataset_split_names.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.get_dataset_split_names.revision",description:`<strong>revision</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.Version">Version</a> or <code>str</code>, optional) &#x2014; Version of the dataset script to load.
As datasets have their own git repository on the Datasets Hub, the default version &#x201C;main&#x201D; corresponds to their &#x201C;main&#x201D; branch.
You can specify a different version than the default &#x201C;main&#x201D; by using a commit SHA or a git tag of the dataset repository.`,name:"revision"},{anchor:"datasets.get_dataset_split_names.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from <em>&#x201D;~/.huggingface&#x201D;</em>.`,name:"use_auth_token"},{anchor:"datasets.get_dataset_split_names.*config_kwargs",description:"*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; optional attributes for builder class which will override the attributes if supplied.",name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/inspect.py#L382"}}),qe=new U({props:{anchor:"datasets.get_dataset_split_names.example",$$slots:{default:[cd]},$$scope:{ctx:j}}}),vt=new T({props:{name:"datasets.inspect_dataset",anchor:"datasets.inspect_dataset",parameters:[{name:"path",val:": str"},{name:"local_path",val:": str"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"**download_kwargs",val:""}],parametersDescription:[{anchor:"datasets.inspect_dataset.path",description:`<strong>path</strong> (<em>str</em>) &#x2014; Path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name
as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code>.</li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with [<em>list_datasets</em>])
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code>.</li>
</ul>`,name:"path"},{anchor:"datasets.inspect_dataset.local_path",description:"<strong>local_path</strong> (<em>str</em>) &#x2014; Path to the local folder to copy the dataset script to.",name:"local_path"},{anchor:"datasets.inspect_dataset.download_config",description:"<strong>download_config</strong> ([<em>DownloadConfig</em>], <em>optional</em>) &#x2014; Specific download configuration parameters.",name:"download_config"},{anchor:"datasets.inspect_dataset.*download_kwargs",description:`*<strong>*download_kwargs</strong> (additional keyword arguments) &#x2014; Optional arguments for [<em>DownloadConfig</em>] which will override
the attributes of <em>download_config</em> if supplied.`,name:"*download_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/inspect.py#L113"}}),$t=new Q({}),Te=new Di({props:{warning:!0,$$slots:{default:[pd]},$$scope:{ctx:j}}}),yt=new T({props:{name:"datasets.list_metrics",anchor:"datasets.list_metrics",parameters:[{name:"with_community_metrics",val:" = True"},{name:"with_details",val:" = False"}],parametersDescription:[{anchor:"datasets.list_metrics.with_community_metrics",description:"<strong>with_community_metrics</strong> (<code>bool</code>, optional, default <code>True</code>) &#x2014; Include the community provided metrics.",name:"with_community_metrics"},{anchor:"datasets.list_metrics.with_details",description:"<strong>with_details</strong> (<code>bool</code>, optional, default <code>False</code>) &#x2014; Return the full details on the metrics instead of only the short name.",name:"with_details"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/inspect.py#L74"}}),Fe=new Ni({props:{version:"2.5.0",$$slots:{default:[md]},$$scope:{ctx:j}}}),Ie=new U({props:{anchor:"datasets.list_metrics.example",$$slots:{default:[fd]},$$scope:{ctx:j}}}),bt=new T({props:{name:"datasets.load_metric",anchor:"datasets.load_metric",parameters:[{name:"path",val:": str"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"process_id",val:": int = 0"},{name:"num_process",val:": int = 1"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"revision",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"**metric_init_kwargs",val:""}],parametersDescription:[{anchor:"datasets.load_metric.path",description:`<strong>path</strong> (<code>str</code>) &#x2014;
path to the metric processing script with the metric builder. Can be either:<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./metrics/rouge&apos;</code> or <code>&apos;./metrics/rogue/rouge.py&apos;</code></li>
<li>a metric identifier on the HuggingFace datasets repo (list all available metrics with <code>datasets.list_metrics()</code>)
e.g. <code>&apos;rouge&apos;</code> or <code>&apos;bleu&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.load_metric.config_name",description:"<strong>config_name</strong> (<code>str</code>, optional) &#x2014; selecting a configuration for the metric (e.g. the GLUE metric has a configuration for each subset)",name:"config_name"},{anchor:"datasets.load_metric.process_id",description:"<strong>process_id</strong> (<code>int</code>, optional) &#x2014; for distributed evaluation: id of the process",name:"process_id"},{anchor:"datasets.load_metric.num_process",description:"<strong>num_process</strong> (<code>int</code>, optional) &#x2014; for distributed evaluation: total number of processes",name:"num_process"},{anchor:"datasets.load_metric.cache_dir",description:"<strong>cache_dir</strong> (Optional str) &#x2014; path to store the temporary predictions and references (default to <em>~/.cache/huggingface/metrics/</em>)",name:"cache_dir"},{anchor:"datasets.load_metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.load_metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool) &#x2014; Whether to store the temporary results in memory (defaults to False)",name:"keep_in_memory"},{anchor:"datasets.load_metric.download_config",description:"<strong>download_config</strong> (Optional <code>datasets.DownloadConfig</code> &#x2014; specific download configuration parameters.",name:"download_config"},{anchor:"datasets.load_metric.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, default <code>REUSE_DATASET_IF_EXISTS</code>) &#x2014; Download/generate mode.',name:"download_mode"},{anchor:"datasets.load_metric.revision",description:`<strong>revision</strong> (Optional <code>Union[str, datasets.Version]</code>) &#x2014; if specified, the module will be loaded from the datasets repository
at this version. By default, it is set to the local version of the lib. Specifying a version that is different from
your local version of the lib might cause compatibility issues.`,name:"revision"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/load.py#L1320",returnDescription:`
<p><em>datasets.Metric</em></p>
`}}),Ae=new Ni({props:{version:"2.5.0",$$slots:{default:[gd]},$$scope:{ctx:j}}}),Le=new U({props:{anchor:"datasets.load_metric.example",$$slots:{default:[hd]},$$scope:{ctx:j}}}),xt=new T({props:{name:"datasets.inspect_metric",anchor:"datasets.inspect_metric",parameters:[{name:"path",val:": str"},{name:"local_path",val:": str"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"**download_kwargs",val:""}],parametersDescription:[{anchor:"datasets.inspect_metric.path",description:`<strong>path</strong> (<code>str</code>) &#x2014; path to the dataset processing script with the dataset builder. Can be either:</p>
<ul>
<li>a local path to processing script or the directory containing the script (if the script has the same name as the directory),
e.g. <code>&apos;./dataset/squad&apos;</code> or <code>&apos;./dataset/squad/squad.py&apos;</code></li>
<li>a dataset identifier on the Hugging Face Hub (list all available datasets and ids with <code>datasets.list_datasets()</code>)
e.g. <code>&apos;squad&apos;</code>, <code>&apos;glue&apos;</code> or <code>&apos;openai/webtext&apos;</code></li>
</ul>`,name:"path"},{anchor:"datasets.inspect_metric.local_path",description:"<strong>local_path</strong> (<code>str</code>) &#x2014; path to the local folder to copy the datset script to.",name:"local_path"},{anchor:"datasets.inspect_metric.download_config",description:"<strong>download_config</strong> (Optional <code>datasets.DownloadConfig</code>) &#x2014; specific download configuration parameters.",name:"download_config"},{anchor:"datasets.inspect_metric.*download_kwargs",description:"*<strong>*download_kwargs</strong> (additional keyword arguments) &#x2014; optional attributes for DownloadConfig() which will override the attributes in download_config if supplied.",name:"*download_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/inspect.py#L151"}}),He=new Ni({props:{version:"2.5.0",$$slots:{default:[ud]},$$scope:{ctx:j}}}),kt=new Q({}),Et=new L({props:{code:'load_dataset("csv", data_dir="path/to/data/dir", sep="\\t")',highlighted:'load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_dir=<span class="hljs-string">&quot;path/to/data/dir&quot;</span>, sep=<span class="hljs-string">&quot;\\t&quot;</span>)'}}),Dt=new Q({}),Nt=new T({props:{name:"class datasets.packaged_modules.text.TextConfig",anchor:"datasets.packaged_modules.text.TextConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"encoding",val:": str = 'utf-8'"},{name:"errors",val:": typing.Optional[str] = None"},{name:"chunksize",val:": int = 10485760"},{name:"keep_linebreaks",val:": bool = False"},{name:"sample_by",val:": str = 'line'"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/packaged_modules/text/text.py#L17"}}),jt=new Q({}),Ct=new T({props:{name:"class datasets.packaged_modules.csv.CsvConfig",anchor:"datasets.packaged_modules.csv.CsvConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"},{name:"sep",val:": str = ','"},{name:"delimiter",val:": typing.Optional[str] = None"},{name:"header",val:": typing.Union[int, typing.List[int], str, NoneType] = 'infer'"},{name:"names",val:": typing.Optional[typing.List[str]] = None"},{name:"column_names",val:": typing.Optional[typing.List[str]] = None"},{name:"index_col",val:": typing.Union[int, str, typing.List[int], typing.List[str], NoneType] = None"},{name:"usecols",val:": typing.Union[typing.List[int], typing.List[str], NoneType] = None"},{name:"prefix",val:": typing.Optional[str] = None"},{name:"mangle_dupe_cols",val:": bool = True"},{name:"engine",val:": typing.Optional[str] = None"},{name:"converters",val:": typing.Dict[typing.Union[int, str], typing.Callable[[typing.Any], typing.Any]] = None"},{name:"true_values",val:": typing.Optional[list] = None"},{name:"false_values",val:": typing.Optional[list] = None"},{name:"skipinitialspace",val:": bool = False"},{name:"skiprows",val:": typing.Union[int, typing.List[int], NoneType] = None"},{name:"nrows",val:": typing.Optional[int] = None"},{name:"na_values",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_default_na",val:": bool = True"},{name:"na_filter",val:": bool = True"},{name:"verbose",val:": bool = False"},{name:"skip_blank_lines",val:": bool = True"},{name:"thousands",val:": typing.Optional[str] = None"},{name:"decimal",val:": str = '.'"},{name:"lineterminator",val:": typing.Optional[str] = None"},{name:"quotechar",val:`: str = '"'`},{name:"quoting",val:": int = 0"},{name:"escapechar",val:": typing.Optional[str] = None"},{name:"comment",val:": typing.Optional[str] = None"},{name:"encoding",val:": typing.Optional[str] = None"},{name:"dialect",val:": typing.Optional[str] = None"},{name:"error_bad_lines",val:": bool = True"},{name:"warn_bad_lines",val:": bool = True"},{name:"skipfooter",val:": int = 0"},{name:"doublequote",val:": bool = True"},{name:"memory_map",val:": bool = False"},{name:"float_precision",val:": typing.Optional[str] = None"},{name:"chunksize",val:": int = 10000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"encoding_errors",val:": typing.Optional[str] = 'strict'"},{name:"on_bad_lines",val:": typing.Literal['error', 'warn', 'skip'] = 'error'"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/packaged_modules/csv/csv.py#L23"}}),St=new Q({}),Ot=new T({props:{name:"class datasets.packaged_modules.json.JsonConfig",anchor:"datasets.packaged_modules.json.JsonConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"field",val:": typing.Optional[str] = None"},{name:"use_threads",val:": bool = True"},{name:"block_size",val:": typing.Optional[int] = None"},{name:"chunksize",val:": int = 10485760"},{name:"newlines_in_values",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/packaged_modules/json/json.py#L38"}}),qt=new Q({}),Pt=new T({props:{name:"class datasets.packaged_modules.parquet.ParquetConfig",anchor:"datasets.packaged_modules.parquet.ParquetConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"},{name:"batch_size",val:": int = 10000"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/packaged_modules/parquet/parquet.py#L16"}}),Tt=new Q({}),Ft=new T({props:{name:"class datasets.packaged_modules.sql.SqlConfig",anchor:"datasets.packaged_modules.sql.SqlConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"},{name:"sql",val:": typing.Union[str, ForwardRef('sqlalchemy.sql.Selectable')] = None"},{name:"con",val:": typing.Union[str, ForwardRef('sqlalchemy.engine.Connection'), ForwardRef('sqlalchemy.engine.Engine'), ForwardRef('sqlite3.Connection')] = None"},{name:"index_col",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"coerce_float",val:": bool = True"},{name:"params",val:": typing.Union[typing.List, typing.Tuple, typing.Dict, NoneType] = None"},{name:"parse_dates",val:": typing.Union[typing.List, typing.Dict, NoneType] = None"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"chunksize",val:": typing.Optional[int] = 10000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/packaged_modules/sql/sql.py#L24"}}),It=new Q({}),At=new T({props:{name:"class datasets.packaged_modules.imagefolder.ImageFolderConfig",anchor:"datasets.packaged_modules.imagefolder.ImageFolderConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"drop_labels",val:": bool = None"},{name:"drop_metadata",val:": bool = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/packaged_modules/imagefolder/imagefolder.py#L12"}}),Lt=new Q({}),Ht=new T({props:{name:"class datasets.packaged_modules.audiofolder.AudioFolderConfig",anchor:"datasets.packaged_modules.audiofolder.AudioFolderConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"drop_labels",val:": bool = None"},{name:"drop_metadata",val:": bool = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/packaged_modules/audiofolder/audiofolder.py#L12"}}),{c(){i=o("meta"),$=m(),h=o("h1"),p=o("a"),_=o("span"),y(s.$$.fragment),l=m(),N=o("span"),D=d("Loading methods"),O=m(),q=o("p"),qo=d("Methods for listing and loading datasets and metrics:"),Ds=m(),W=o("h2"),ye=o("a"),sa=o("span"),y(et.$$.fragment),Po=m(),oa=o("span"),To=d("Datasets"),Ns=m(),M=o("div"),y(tt.$$.fragment),Fo=m(),na=o("p"),Io=d("List all the datasets scripts available on the Hugging Face Hub."),Ao=m(),y(be.$$.fragment),js=m(),C=o("div"),y(at.$$.fragment),Lo=m(),ra=o("p"),Ho=d("Load a dataset from the Hugging Face Hub, or a local dataset."),Uo=m(),K=o("p"),Vo=d("You can find the list of datasets on the Hub at "),st=o("a"),Mo=d("https://huggingface.co/datasets"),Bo=d(" or with "),ia=o("code"),Ro=d("datasets.list_datasets()"),Jo=d("."),zo=m(),la=o("p"),Yo=d("A dataset is a directory that contains:"),Go=m(),ot=o("ul"),da=o("li"),Xo=d("some data files in generic formats (JSON, CSV, Parquet, text, etc.)"),Qo=m(),ca=o("li"),Wo=d("and optionally a dataset script, if it requires some code to read the data files. This is used to load any kind of formats or structures."),Ko=m(),pa=o("p"),Zo=d("Note that dataset scripts can also download and read data files from anywhere - in case your data files already exist online."),en=m(),ma=o("p"),tn=d("This function does the following under the hood:"),an=m(),Z=o("ol"),B=o("li"),nt=o("p"),sn=d("Download and import in the library the dataset script from "),fa=o("code"),on=d("path"),nn=d(" if it\u2019s not already cached inside the library."),rn=m(),ga=o("p"),ln=d("If the dataset has no dataset script, then a generic dataset script is imported instead (JSON, CSV, Parquet, text, etc.)"),dn=m(),ha=o("p"),cn=d(`Dataset scripts are small python scripts that define dataset builders. They define the citation, info and format of the dataset,
contain the path or URL to the original data files and the code to load examples from the original data files.`),pn=m(),Bt=o("p"),mn=d("You can find the complete list of datasets in the Datasets Hub at "),rt=o("a"),fn=d("https://huggingface.co/datasets"),gn=m(),it=o("li"),ua=o("p"),hn=d("Run the dataset script which will:"),un=m(),lt=o("ul"),_a=o("li"),va=o("p"),_n=d("Download the dataset file from the original URL (see the script) if it\u2019s not already available locally or cached."),vn=m(),dt=o("li"),$a=o("p"),$n=d("Process and cache the dataset in typed Arrow tables for caching."),yn=m(),ya=o("p"),bn=d(`Arrow table are arbitrarily long, typed tables which can store nested objects and be mapped to numpy/pandas/python generic types.
They can be directly accessed from disk, loaded in RAM or even streamed over the web.`),wn=m(),ba=o("li"),ct=o("p"),xn=d("Return a dataset built from the requested splits in "),wa=o("code"),kn=d("split"),En=d(" (default: all)."),Dn=m(),xa=o("p"),Nn=d(`It also allows to load a dataset from a local directory or a dataset repository on the Hugging Face Hub without dataset script.
In this case, it automatically loads all the data files from the directory or the dataset repository.`),jn=m(),y(we.$$.fragment),Cn=m(),ka=o("p"),Sn=d("Example:"),On=m(),y(xe.$$.fragment),qn=m(),y(ke.$$.fragment),Pn=m(),y(Ee.$$.fragment),Tn=m(),y(De.$$.fragment),Cs=m(),R=o("div"),y(pt.$$.fragment),Fn=m(),J=o("p"),In=d("Loads a dataset that was previously saved using "),Rt=o("a"),An=d("Dataset.save_to_disk()"),Ln=d(` from a dataset directory, or
from a filesystem using either `),Jt=o("a"),Hn=d("datasets.filesystems.S3FileSystem"),Un=d(` or any implementation of
`),Ea=o("code"),Vn=d("fsspec.spec.AbstractFileSystem"),Mn=d("."),Bn=m(),y(Ne.$$.fragment),Ss=m(),P=o("div"),y(mt.$$.fragment),Rn=m(),Da=o("p"),Jn=d(`Load a dataset builder from the Hugging Face Hub, or a local dataset. A dataset builder can be used to inspect general information that is required to build a dataset (cache directory, config, dataset info, etc.)
without downloading the dataset itself.`),zn=m(),ee=o("p"),Yn=d("You can find the list of datasets on the Hub at "),ft=o("a"),Gn=d("https://huggingface.co/datasets"),Xn=d(" or with "),Na=o("code"),Qn=d("datasets.list_datasets()"),Wn=d("."),Kn=m(),ja=o("p"),Zn=d("A dataset is a directory that contains:"),er=m(),gt=o("ul"),Ca=o("li"),tr=d("some data files in generic formats (JSON, CSV, Parquet, text, etc.)"),ar=m(),Sa=o("li"),sr=d("and optionally a dataset script, if it requires some code to read the data files. This is used to load any kind of formats or structures."),or=m(),Oa=o("p"),nr=d("Note that dataset scripts can also download and read data files from anywhere - in case your data files already exist online."),rr=m(),y(je.$$.fragment),ir=m(),y(Ce.$$.fragment),Os=m(),z=o("div"),y(ht.$$.fragment),lr=m(),qa=o("p"),dr=d("Get the list of available config names for a particular dataset."),cr=m(),y(Se.$$.fragment),qs=m(),Y=o("div"),y(ut.$$.fragment),pr=m(),Pa=o("p"),mr=d("Get the meta information about a dataset, returned as a dict mapping config name to DatasetInfoDict."),fr=m(),y(Oe.$$.fragment),Ps=m(),G=o("div"),y(_t.$$.fragment),gr=m(),Ta=o("p"),hr=d("Get the list of available splits for a particular config and dataset."),ur=m(),y(qe.$$.fragment),Ts=m(),te=o("div"),y(vt.$$.fragment),_r=m(),Fa=o("p"),vr=d("Allow inspection/modification of a dataset script by copying on local drive at local_path."),Fs=m(),ae=o("h2"),Pe=o("a"),Ia=o("span"),y($t.$$.fragment),$r=m(),Aa=o("span"),yr=d("Metrics"),Is=m(),y(Te.$$.fragment),As=m(),I=o("div"),y(yt.$$.fragment),br=m(),La=o("p"),wr=d("List all the metrics script available on the Hugging Face Hub."),xr=m(),y(Fe.$$.fragment),kr=m(),y(Ie.$$.fragment),Ls=m(),A=o("div"),y(bt.$$.fragment),Er=m(),wt=o("p"),Dr=d("Load a "),Ha=o("em"),Nr=d("datasets.Metric"),jr=d("."),Cr=m(),y(Ae.$$.fragment),Sr=m(),y(Le.$$.fragment),Hs=m(),X=o("div"),y(xt.$$.fragment),Or=m(),Ua=o("p"),qr=d("Allow inspection/modification of a metric script by copying it on local drive at local_path."),Pr=m(),y(He.$$.fragment),Us=m(),se=o("h2"),Ue=o("a"),Va=o("span"),y(kt.$$.fragment),Tr=m(),Ma=o("span"),Fr=d("From files"),Vs=m(),zt=o("p"),Ir=d(`Configurations used to load data files.
They are used when loading local files or a dataset repository:`),Ms=m(),Ve=o("ul"),Yt=o("li"),Ar=d("local files: "),Ba=o("code"),Lr=d('load_dataset("parquet", data_dir="path/to/data/dir")'),Hr=m(),Gt=o("li"),Ur=d("dataset repository: "),Ra=o("code"),Vr=d('load_dataset("allenai/c4")'),Bs=m(),H=o("p"),Mr=d("You can pass arguments to "),Ja=o("code"),Br=d("load_dataset"),Rr=d(` to configure data loading.
For example you can specify the `),za=o("code"),Jr=d("sep"),zr=d(" parameter to define the "),Xt=o("a"),Yr=d("CsvConfig"),Gr=d(" that is used to load the data:"),Rs=m(),y(Et.$$.fragment),Js=m(),oe=o("h3"),Me=o("a"),Ya=o("span"),y(Dt.$$.fragment),Xr=m(),Ga=o("span"),Qr=d("Text"),zs=m(),ne=o("div"),y(Nt.$$.fragment),Wr=m(),Xa=o("p"),Kr=d("BuilderConfig for text files."),Ys=m(),re=o("h3"),Be=o("a"),Qa=o("span"),y(jt.$$.fragment),Zr=m(),Wa=o("span"),ei=d("CSV"),Gs=m(),ie=o("div"),y(Ct.$$.fragment),ti=m(),Ka=o("p"),ai=d("BuilderConfig for CSV."),Xs=m(),le=o("h3"),Re=o("a"),Za=o("span"),y(St.$$.fragment),si=m(),es=o("span"),oi=d("JSON"),Qs=m(),de=o("div"),y(Ot.$$.fragment),ni=m(),ts=o("p"),ri=d("BuilderConfig for JSON."),Ws=m(),ce=o("h3"),Je=o("a"),as=o("span"),y(qt.$$.fragment),ii=m(),ss=o("span"),li=d("Parquet"),Ks=m(),pe=o("div"),y(Pt.$$.fragment),di=m(),os=o("p"),ci=d("BuilderConfig for Parquet."),Zs=m(),me=o("h3"),ze=o("a"),ns=o("span"),y(Tt.$$.fragment),pi=m(),rs=o("span"),mi=d("SQL"),eo=m(),fe=o("div"),y(Ft.$$.fragment),fi=m(),is=o("p"),gi=d("BuilderConfig for SQL."),to=m(),ge=o("h3"),Ye=o("a"),ls=o("span"),y(It.$$.fragment),hi=m(),ds=o("span"),ui=d("Images"),ao=m(),he=o("div"),y(At.$$.fragment),_i=m(),cs=o("p"),vi=d("BuilderConfig for ImageFolder."),so=m(),ue=o("h3"),Ge=o("a"),ps=o("span"),y(Lt.$$.fragment),$i=m(),ms=o("span"),yi=d("Audio"),oo=m(),_e=o("div"),y(Ht.$$.fragment),bi=m(),fs=o("p"),wi=d("Builder Config for AudioFolder."),this.h()},l(e){const g=Wl('[data-svelte="svelte-1phssyn"]',document.head);i=n(g,"META",{name:!0,content:!0}),g.forEach(a),$=f(e),h=n(e,"H1",{class:!0});var Ut=r(h);p=n(Ut,"A",{id:!0,class:!0,href:!0});var gs=r(p);_=n(gs,"SPAN",{});var hs=r(_);b(s.$$.fragment,hs),hs.forEach(a),gs.forEach(a),l=f(Ut),N=n(Ut,"SPAN",{});var us=r(N);D=c(us,"Loading methods"),us.forEach(a),Ut.forEach(a),O=f(e),q=n(e,"P",{});var _s=r(q);qo=c(_s,"Methods for listing and loading datasets and metrics:"),_s.forEach(a),Ds=f(e),W=n(e,"H2",{class:!0});var Vt=r(W);ye=n(Vt,"A",{id:!0,class:!0,href:!0});var vs=r(ye);sa=n(vs,"SPAN",{});var $s=r(sa);b(et.$$.fragment,$s),$s.forEach(a),vs.forEach(a),Po=f(Vt),oa=n(Vt,"SPAN",{});var ys=r(oa);To=c(ys,"Datasets"),ys.forEach(a),Vt.forEach(a),Ns=f(e),M=n(e,"DIV",{class:!0});var ve=r(M);b(tt.$$.fragment,ve),Fo=f(ve),na=n(ve,"P",{});var bs=r(na);Io=c(bs,"List all the datasets scripts available on the Hugging Face Hub."),bs.forEach(a),Ao=f(ve),b(be.$$.fragment,ve),ve.forEach(a),js=f(e),C=n(e,"DIV",{class:!0});var S=r(C);b(at.$$.fragment,S),Lo=f(S),ra=n(S,"P",{});var ws=r(ra);Ho=c(ws,"Load a dataset from the Hugging Face Hub, or a local dataset."),ws.forEach(a),Uo=f(S),K=n(S,"P",{});var $e=r(K);Vo=c($e,"You can find the list of datasets on the Hub at "),st=n($e,"A",{href:!0,rel:!0});var xs=r(st);Mo=c(xs,"https://huggingface.co/datasets"),xs.forEach(a),Bo=c($e," or with "),ia=n($e,"CODE",{});var ks=r(ia);Ro=c(ks,"datasets.list_datasets()"),ks.forEach(a),Jo=c($e,"."),$e.forEach(a),zo=f(S),la=n(S,"P",{});var Es=r(la);Yo=c(Es,"A dataset is a directory that contains:"),Es.forEach(a),Go=f(S),ot=n(S,"UL",{});var Mt=r(ot);da=n(Mt,"LI",{});var ji=r(da);Xo=c(ji,"some data files in generic formats (JSON, CSV, Parquet, text, etc.)"),ji.forEach(a),Qo=f(Mt),ca=n(Mt,"LI",{});var Ci=r(ca);Wo=c(Ci,"and optionally a dataset script, if it requires some code to read the data files. This is used to load any kind of formats or structures."),Ci.forEach(a),Mt.forEach(a),Ko=f(S),pa=n(S,"P",{});var Si=r(pa);Zo=c(Si,"Note that dataset scripts can also download and read data files from anywhere - in case your data files already exist online."),Si.forEach(a),en=f(S),ma=n(S,"P",{});var Oi=r(ma);tn=c(Oi,"This function does the following under the hood:"),Oi.forEach(a),an=f(S),Z=n(S,"OL",{});var Qt=r(Z);B=n(Qt,"LI",{});var Xe=r(B);nt=n(Xe,"P",{});var ro=r(nt);sn=c(ro,"Download and import in the library the dataset script from "),fa=n(ro,"CODE",{});var qi=r(fa);on=c(qi,"path"),qi.forEach(a),nn=c(ro," if it\u2019s not already cached inside the library."),ro.forEach(a),rn=f(Xe),ga=n(Xe,"P",{});var Pi=r(ga);ln=c(Pi,"If the dataset has no dataset script, then a generic dataset script is imported instead (JSON, CSV, Parquet, text, etc.)"),Pi.forEach(a),dn=f(Xe),ha=n(Xe,"P",{});var Ti=r(ha);cn=c(Ti,`Dataset scripts are small python scripts that define dataset builders. They define the citation, info and format of the dataset,
contain the path or URL to the original data files and the code to load examples from the original data files.`),Ti.forEach(a),pn=f(Xe),Bt=n(Xe,"P",{});var xi=r(Bt);mn=c(xi,"You can find the complete list of datasets in the Datasets Hub at "),rt=n(xi,"A",{href:!0,rel:!0});var Fi=r(rt);fn=c(Fi,"https://huggingface.co/datasets"),Fi.forEach(a),xi.forEach(a),Xe.forEach(a),gn=f(Qt),it=n(Qt,"LI",{});var io=r(it);ua=n(io,"P",{});var Ii=r(ua);hn=c(Ii,"Run the dataset script which will:"),Ii.forEach(a),un=f(io),lt=n(io,"UL",{});var lo=r(lt);_a=n(lo,"LI",{});var Ai=r(_a);va=n(Ai,"P",{});var Li=r(va);_n=c(Li,"Download the dataset file from the original URL (see the script) if it\u2019s not already available locally or cached."),Li.forEach(a),Ai.forEach(a),vn=f(lo),dt=n(lo,"LI",{});var co=r(dt);$a=n(co,"P",{});var Hi=r($a);$n=c(Hi,"Process and cache the dataset in typed Arrow tables for caching."),Hi.forEach(a),yn=f(co),ya=n(co,"P",{});var Ui=r(ya);bn=c(Ui,`Arrow table are arbitrarily long, typed tables which can store nested objects and be mapped to numpy/pandas/python generic types.
They can be directly accessed from disk, loaded in RAM or even streamed over the web.`),Ui.forEach(a),co.forEach(a),lo.forEach(a),io.forEach(a),wn=f(Qt),ba=n(Qt,"LI",{});var Vi=r(ba);ct=n(Vi,"P",{});var po=r(ct);xn=c(po,"Return a dataset built from the requested splits in "),wa=n(po,"CODE",{});var Mi=r(wa);kn=c(Mi,"split"),Mi.forEach(a),En=c(po," (default: all)."),po.forEach(a),Vi.forEach(a),Qt.forEach(a),Dn=f(S),xa=n(S,"P",{});var Bi=r(xa);Nn=c(Bi,`It also allows to load a dataset from a local directory or a dataset repository on the Hugging Face Hub without dataset script.
In this case, it automatically loads all the data files from the directory or the dataset repository.`),Bi.forEach(a),jn=f(S),b(we.$$.fragment,S),Cn=f(S),ka=n(S,"P",{});var Ri=r(ka);Sn=c(Ri,"Example:"),Ri.forEach(a),On=f(S),b(xe.$$.fragment,S),qn=f(S),b(ke.$$.fragment,S),Pn=f(S),b(Ee.$$.fragment,S),Tn=f(S),b(De.$$.fragment,S),S.forEach(a),Cs=f(e),R=n(e,"DIV",{class:!0});var Wt=r(R);b(pt.$$.fragment,Wt),Fn=f(Wt),J=n(Wt,"P",{});var Qe=r(J);In=c(Qe,"Loads a dataset that was previously saved using "),Rt=n(Qe,"A",{href:!0});var Ji=r(Rt);An=c(Ji,"Dataset.save_to_disk()"),Ji.forEach(a),Ln=c(Qe,` from a dataset directory, or
from a filesystem using either `),Jt=n(Qe,"A",{href:!0});var zi=r(Jt);Hn=c(zi,"datasets.filesystems.S3FileSystem"),zi.forEach(a),Un=c(Qe,` or any implementation of
`),Ea=n(Qe,"CODE",{});var Yi=r(Ea);Vn=c(Yi,"fsspec.spec.AbstractFileSystem"),Yi.forEach(a),Mn=c(Qe,"."),Qe.forEach(a),Bn=f(Wt),b(Ne.$$.fragment,Wt),Wt.forEach(a),Ss=f(e),P=n(e,"DIV",{class:!0});var F=r(P);b(mt.$$.fragment,F),Rn=f(F),Da=n(F,"P",{});var Gi=r(Da);Jn=c(Gi,`Load a dataset builder from the Hugging Face Hub, or a local dataset. A dataset builder can be used to inspect general information that is required to build a dataset (cache directory, config, dataset info, etc.)
without downloading the dataset itself.`),Gi.forEach(a),zn=f(F),ee=n(F,"P",{});var Kt=r(ee);Yn=c(Kt,"You can find the list of datasets on the Hub at "),ft=n(Kt,"A",{href:!0,rel:!0});var Xi=r(ft);Gn=c(Xi,"https://huggingface.co/datasets"),Xi.forEach(a),Xn=c(Kt," or with "),Na=n(Kt,"CODE",{});var Qi=r(Na);Qn=c(Qi,"datasets.list_datasets()"),Qi.forEach(a),Wn=c(Kt,"."),Kt.forEach(a),Kn=f(F),ja=n(F,"P",{});var Wi=r(ja);Zn=c(Wi,"A dataset is a directory that contains:"),Wi.forEach(a),er=f(F),gt=n(F,"UL",{});var mo=r(gt);Ca=n(mo,"LI",{});var Ki=r(Ca);tr=c(Ki,"some data files in generic formats (JSON, CSV, Parquet, text, etc.)"),Ki.forEach(a),ar=f(mo),Sa=n(mo,"LI",{});var Zi=r(Sa);sr=c(Zi,"and optionally a dataset script, if it requires some code to read the data files. This is used to load any kind of formats or structures."),Zi.forEach(a),mo.forEach(a),or=f(F),Oa=n(F,"P",{});var el=r(Oa);nr=c(el,"Note that dataset scripts can also download and read data files from anywhere - in case your data files already exist online."),el.forEach(a),rr=f(F),b(je.$$.fragment,F),ir=f(F),b(Ce.$$.fragment,F),F.forEach(a),Os=f(e),z=n(e,"DIV",{class:!0});var Zt=r(z);b(ht.$$.fragment,Zt),lr=f(Zt),qa=n(Zt,"P",{});var tl=r(qa);dr=c(tl,"Get the list of available config names for a particular dataset."),tl.forEach(a),cr=f(Zt),b(Se.$$.fragment,Zt),Zt.forEach(a),qs=f(e),Y=n(e,"DIV",{class:!0});var ea=r(Y);b(ut.$$.fragment,ea),pr=f(ea),Pa=n(ea,"P",{});var al=r(Pa);mr=c(al,"Get the meta information about a dataset, returned as a dict mapping config name to DatasetInfoDict."),al.forEach(a),fr=f(ea),b(Oe.$$.fragment,ea),ea.forEach(a),Ps=f(e),G=n(e,"DIV",{class:!0});var ta=r(G);b(_t.$$.fragment,ta),gr=f(ta),Ta=n(ta,"P",{});var sl=r(Ta);hr=c(sl,"Get the list of available splits for a particular config and dataset."),sl.forEach(a),ur=f(ta),b(qe.$$.fragment,ta),ta.forEach(a),Ts=f(e),te=n(e,"DIV",{class:!0});var fo=r(te);b(vt.$$.fragment,fo),_r=f(fo),Fa=n(fo,"P",{});var ol=r(Fa);vr=c(ol,"Allow inspection/modification of a dataset script by copying on local drive at local_path."),ol.forEach(a),fo.forEach(a),Fs=f(e),ae=n(e,"H2",{class:!0});var go=r(ae);Pe=n(go,"A",{id:!0,class:!0,href:!0});var nl=r(Pe);Ia=n(nl,"SPAN",{});var rl=r(Ia);b($t.$$.fragment,rl),rl.forEach(a),nl.forEach(a),$r=f(go),Aa=n(go,"SPAN",{});var il=r(Aa);yr=c(il,"Metrics"),il.forEach(a),go.forEach(a),Is=f(e),b(Te.$$.fragment,e),As=f(e),I=n(e,"DIV",{class:!0});var We=r(I);b(yt.$$.fragment,We),br=f(We),La=n(We,"P",{});var ll=r(La);wr=c(ll,"List all the metrics script available on the Hugging Face Hub."),ll.forEach(a),xr=f(We),b(Fe.$$.fragment,We),kr=f(We),b(Ie.$$.fragment,We),We.forEach(a),Ls=f(e),A=n(e,"DIV",{class:!0});var Ke=r(A);b(bt.$$.fragment,Ke),Er=f(Ke),wt=n(Ke,"P",{});var ho=r(wt);Dr=c(ho,"Load a "),Ha=n(ho,"EM",{});var dl=r(Ha);Nr=c(dl,"datasets.Metric"),dl.forEach(a),jr=c(ho,"."),ho.forEach(a),Cr=f(Ke),b(Ae.$$.fragment,Ke),Sr=f(Ke),b(Le.$$.fragment,Ke),Ke.forEach(a),Hs=f(e),X=n(e,"DIV",{class:!0});var aa=r(X);b(xt.$$.fragment,aa),Or=f(aa),Ua=n(aa,"P",{});var cl=r(Ua);qr=c(cl,"Allow inspection/modification of a metric script by copying it on local drive at local_path."),cl.forEach(a),Pr=f(aa),b(He.$$.fragment,aa),aa.forEach(a),Us=f(e),se=n(e,"H2",{class:!0});var uo=r(se);Ue=n(uo,"A",{id:!0,class:!0,href:!0});var pl=r(Ue);Va=n(pl,"SPAN",{});var ml=r(Va);b(kt.$$.fragment,ml),ml.forEach(a),pl.forEach(a),Tr=f(uo),Ma=n(uo,"SPAN",{});var fl=r(Ma);Fr=c(fl,"From files"),fl.forEach(a),uo.forEach(a),Vs=f(e),zt=n(e,"P",{});var gl=r(zt);Ir=c(gl,`Configurations used to load data files.
They are used when loading local files or a dataset repository:`),gl.forEach(a),Ms=f(e),Ve=n(e,"UL",{});var _o=r(Ve);Yt=n(_o,"LI",{});var ki=r(Yt);Ar=c(ki,"local files: "),Ba=n(ki,"CODE",{});var hl=r(Ba);Lr=c(hl,'load_dataset("parquet", data_dir="path/to/data/dir")'),hl.forEach(a),ki.forEach(a),Hr=f(_o),Gt=n(_o,"LI",{});var Ei=r(Gt);Ur=c(Ei,"dataset repository: "),Ra=n(Ei,"CODE",{});var ul=r(Ra);Vr=c(ul,'load_dataset("allenai/c4")'),ul.forEach(a),Ei.forEach(a),_o.forEach(a),Bs=f(e),H=n(e,"P",{});var Ze=r(H);Mr=c(Ze,"You can pass arguments to "),Ja=n(Ze,"CODE",{});var _l=r(Ja);Br=c(_l,"load_dataset"),_l.forEach(a),Rr=c(Ze,` to configure data loading.
For example you can specify the `),za=n(Ze,"CODE",{});var vl=r(za);Jr=c(vl,"sep"),vl.forEach(a),zr=c(Ze," parameter to define the "),Xt=n(Ze,"A",{href:!0});var $l=r(Xt);Yr=c($l,"CsvConfig"),$l.forEach(a),Gr=c(Ze," that is used to load the data:"),Ze.forEach(a),Rs=f(e),b(Et.$$.fragment,e),Js=f(e),oe=n(e,"H3",{class:!0});var vo=r(oe);Me=n(vo,"A",{id:!0,class:!0,href:!0});var yl=r(Me);Ya=n(yl,"SPAN",{});var bl=r(Ya);b(Dt.$$.fragment,bl),bl.forEach(a),yl.forEach(a),Xr=f(vo),Ga=n(vo,"SPAN",{});var wl=r(Ga);Qr=c(wl,"Text"),wl.forEach(a),vo.forEach(a),zs=f(e),ne=n(e,"DIV",{class:!0});var $o=r(ne);b(Nt.$$.fragment,$o),Wr=f($o),Xa=n($o,"P",{});var xl=r(Xa);Kr=c(xl,"BuilderConfig for text files."),xl.forEach(a),$o.forEach(a),Ys=f(e),re=n(e,"H3",{class:!0});var yo=r(re);Be=n(yo,"A",{id:!0,class:!0,href:!0});var kl=r(Be);Qa=n(kl,"SPAN",{});var El=r(Qa);b(jt.$$.fragment,El),El.forEach(a),kl.forEach(a),Zr=f(yo),Wa=n(yo,"SPAN",{});var Dl=r(Wa);ei=c(Dl,"CSV"),Dl.forEach(a),yo.forEach(a),Gs=f(e),ie=n(e,"DIV",{class:!0});var bo=r(ie);b(Ct.$$.fragment,bo),ti=f(bo),Ka=n(bo,"P",{});var Nl=r(Ka);ai=c(Nl,"BuilderConfig for CSV."),Nl.forEach(a),bo.forEach(a),Xs=f(e),le=n(e,"H3",{class:!0});var wo=r(le);Re=n(wo,"A",{id:!0,class:!0,href:!0});var jl=r(Re);Za=n(jl,"SPAN",{});var Cl=r(Za);b(St.$$.fragment,Cl),Cl.forEach(a),jl.forEach(a),si=f(wo),es=n(wo,"SPAN",{});var Sl=r(es);oi=c(Sl,"JSON"),Sl.forEach(a),wo.forEach(a),Qs=f(e),de=n(e,"DIV",{class:!0});var xo=r(de);b(Ot.$$.fragment,xo),ni=f(xo),ts=n(xo,"P",{});var Ol=r(ts);ri=c(Ol,"BuilderConfig for JSON."),Ol.forEach(a),xo.forEach(a),Ws=f(e),ce=n(e,"H3",{class:!0});var ko=r(ce);Je=n(ko,"A",{id:!0,class:!0,href:!0});var ql=r(Je);as=n(ql,"SPAN",{});var Pl=r(as);b(qt.$$.fragment,Pl),Pl.forEach(a),ql.forEach(a),ii=f(ko),ss=n(ko,"SPAN",{});var Tl=r(ss);li=c(Tl,"Parquet"),Tl.forEach(a),ko.forEach(a),Ks=f(e),pe=n(e,"DIV",{class:!0});var Eo=r(pe);b(Pt.$$.fragment,Eo),di=f(Eo),os=n(Eo,"P",{});var Fl=r(os);ci=c(Fl,"BuilderConfig for Parquet."),Fl.forEach(a),Eo.forEach(a),Zs=f(e),me=n(e,"H3",{class:!0});var Do=r(me);ze=n(Do,"A",{id:!0,class:!0,href:!0});var Il=r(ze);ns=n(Il,"SPAN",{});var Al=r(ns);b(Tt.$$.fragment,Al),Al.forEach(a),Il.forEach(a),pi=f(Do),rs=n(Do,"SPAN",{});var Ll=r(rs);mi=c(Ll,"SQL"),Ll.forEach(a),Do.forEach(a),eo=f(e),fe=n(e,"DIV",{class:!0});var No=r(fe);b(Ft.$$.fragment,No),fi=f(No),is=n(No,"P",{});var Hl=r(is);gi=c(Hl,"BuilderConfig for SQL."),Hl.forEach(a),No.forEach(a),to=f(e),ge=n(e,"H3",{class:!0});var jo=r(ge);Ye=n(jo,"A",{id:!0,class:!0,href:!0});var Ul=r(Ye);ls=n(Ul,"SPAN",{});var Vl=r(ls);b(It.$$.fragment,Vl),Vl.forEach(a),Ul.forEach(a),hi=f(jo),ds=n(jo,"SPAN",{});var Ml=r(ds);ui=c(Ml,"Images"),Ml.forEach(a),jo.forEach(a),ao=f(e),he=n(e,"DIV",{class:!0});var Co=r(he);b(At.$$.fragment,Co),_i=f(Co),cs=n(Co,"P",{});var Bl=r(cs);vi=c(Bl,"BuilderConfig for ImageFolder."),Bl.forEach(a),Co.forEach(a),so=f(e),ue=n(e,"H3",{class:!0});var So=r(ue);Ge=n(So,"A",{id:!0,class:!0,href:!0});var Rl=r(Ge);ps=n(Rl,"SPAN",{});var Jl=r(ps);b(Lt.$$.fragment,Jl),Jl.forEach(a),Rl.forEach(a),$i=f(So),ms=n(So,"SPAN",{});var zl=r(ms);yi=c(zl,"Audio"),zl.forEach(a),So.forEach(a),oo=f(e),_e=n(e,"DIV",{class:!0});var Oo=r(_e);b(Ht.$$.fragment,Oo),bi=f(Oo),fs=n(Oo,"P",{});var Yl=r(fs);wi=c(Yl,"Builder Config for AudioFolder."),Yl.forEach(a),Oo.forEach(a),this.h()},h(){v(i,"name","hf:doc:metadata"),v(i,"content",JSON.stringify(vd)),v(p,"id","loading-methods"),v(p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(p,"href","#loading-methods"),v(h,"class","relative group"),v(ye,"id","datasets.list_datasets"),v(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(ye,"href","#datasets.list_datasets"),v(W,"class","relative group"),v(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(st,"href","https://huggingface.co/datasets"),v(st,"rel","nofollow"),v(rt,"href","https://huggingface.co/datasets"),v(rt,"rel","nofollow"),v(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Rt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),v(Jt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),v(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(ft,"href","https://huggingface.co/datasets"),v(ft,"rel","nofollow"),v(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Pe,"id","datasets.list_metrics"),v(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Pe,"href","#datasets.list_metrics"),v(ae,"class","relative group"),v(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ue,"id","from-files"),v(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ue,"href","#from-files"),v(se,"class","relative group"),v(Xt,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.packaged_modules.csv.CsvConfig"),v(Me,"id","datasets.packaged_modules.text.TextConfig"),v(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Me,"href","#datasets.packaged_modules.text.TextConfig"),v(oe,"class","relative group"),v(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Be,"id","datasets.packaged_modules.csv.CsvConfig"),v(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Be,"href","#datasets.packaged_modules.csv.CsvConfig"),v(re,"class","relative group"),v(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Re,"id","datasets.packaged_modules.json.JsonConfig"),v(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Re,"href","#datasets.packaged_modules.json.JsonConfig"),v(le,"class","relative group"),v(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Je,"id","datasets.packaged_modules.parquet.ParquetConfig"),v(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Je,"href","#datasets.packaged_modules.parquet.ParquetConfig"),v(ce,"class","relative group"),v(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(ze,"id","datasets.packaged_modules.sql.SqlConfig"),v(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(ze,"href","#datasets.packaged_modules.sql.SqlConfig"),v(me,"class","relative group"),v(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ye,"id","datasets.packaged_modules.imagefolder.ImageFolderConfig"),v(Ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ye,"href","#datasets.packaged_modules.imagefolder.ImageFolderConfig"),v(ge,"class","relative group"),v(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),v(Ge,"id","datasets.packaged_modules.audiofolder.AudioFolderConfig"),v(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(Ge,"href","#datasets.packaged_modules.audiofolder.AudioFolderConfig"),v(ue,"class","relative group"),v(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,g){t(document.head,i),u(e,$,g),u(e,h,g),t(h,p),t(p,_),w(s,_,null),t(h,l),t(h,N),t(N,D),u(e,O,g),u(e,q,g),t(q,qo),u(e,Ds,g),u(e,W,g),t(W,ye),t(ye,sa),w(et,sa,null),t(W,Po),t(W,oa),t(oa,To),u(e,Ns,g),u(e,M,g),w(tt,M,null),t(M,Fo),t(M,na),t(na,Io),t(M,Ao),w(be,M,null),u(e,js,g),u(e,C,g),w(at,C,null),t(C,Lo),t(C,ra),t(ra,Ho),t(C,Uo),t(C,K),t(K,Vo),t(K,st),t(st,Mo),t(K,Bo),t(K,ia),t(ia,Ro),t(K,Jo),t(C,zo),t(C,la),t(la,Yo),t(C,Go),t(C,ot),t(ot,da),t(da,Xo),t(ot,Qo),t(ot,ca),t(ca,Wo),t(C,Ko),t(C,pa),t(pa,Zo),t(C,en),t(C,ma),t(ma,tn),t(C,an),t(C,Z),t(Z,B),t(B,nt),t(nt,sn),t(nt,fa),t(fa,on),t(nt,nn),t(B,rn),t(B,ga),t(ga,ln),t(B,dn),t(B,ha),t(ha,cn),t(B,pn),t(B,Bt),t(Bt,mn),t(Bt,rt),t(rt,fn),t(Z,gn),t(Z,it),t(it,ua),t(ua,hn),t(it,un),t(it,lt),t(lt,_a),t(_a,va),t(va,_n),t(lt,vn),t(lt,dt),t(dt,$a),t($a,$n),t(dt,yn),t(dt,ya),t(ya,bn),t(Z,wn),t(Z,ba),t(ba,ct),t(ct,xn),t(ct,wa),t(wa,kn),t(ct,En),t(C,Dn),t(C,xa),t(xa,Nn),t(C,jn),w(we,C,null),t(C,Cn),t(C,ka),t(ka,Sn),t(C,On),w(xe,C,null),t(C,qn),w(ke,C,null),t(C,Pn),w(Ee,C,null),t(C,Tn),w(De,C,null),u(e,Cs,g),u(e,R,g),w(pt,R,null),t(R,Fn),t(R,J),t(J,In),t(J,Rt),t(Rt,An),t(J,Ln),t(J,Jt),t(Jt,Hn),t(J,Un),t(J,Ea),t(Ea,Vn),t(J,Mn),t(R,Bn),w(Ne,R,null),u(e,Ss,g),u(e,P,g),w(mt,P,null),t(P,Rn),t(P,Da),t(Da,Jn),t(P,zn),t(P,ee),t(ee,Yn),t(ee,ft),t(ft,Gn),t(ee,Xn),t(ee,Na),t(Na,Qn),t(ee,Wn),t(P,Kn),t(P,ja),t(ja,Zn),t(P,er),t(P,gt),t(gt,Ca),t(Ca,tr),t(gt,ar),t(gt,Sa),t(Sa,sr),t(P,or),t(P,Oa),t(Oa,nr),t(P,rr),w(je,P,null),t(P,ir),w(Ce,P,null),u(e,Os,g),u(e,z,g),w(ht,z,null),t(z,lr),t(z,qa),t(qa,dr),t(z,cr),w(Se,z,null),u(e,qs,g),u(e,Y,g),w(ut,Y,null),t(Y,pr),t(Y,Pa),t(Pa,mr),t(Y,fr),w(Oe,Y,null),u(e,Ps,g),u(e,G,g),w(_t,G,null),t(G,gr),t(G,Ta),t(Ta,hr),t(G,ur),w(qe,G,null),u(e,Ts,g),u(e,te,g),w(vt,te,null),t(te,_r),t(te,Fa),t(Fa,vr),u(e,Fs,g),u(e,ae,g),t(ae,Pe),t(Pe,Ia),w($t,Ia,null),t(ae,$r),t(ae,Aa),t(Aa,yr),u(e,Is,g),w(Te,e,g),u(e,As,g),u(e,I,g),w(yt,I,null),t(I,br),t(I,La),t(La,wr),t(I,xr),w(Fe,I,null),t(I,kr),w(Ie,I,null),u(e,Ls,g),u(e,A,g),w(bt,A,null),t(A,Er),t(A,wt),t(wt,Dr),t(wt,Ha),t(Ha,Nr),t(wt,jr),t(A,Cr),w(Ae,A,null),t(A,Sr),w(Le,A,null),u(e,Hs,g),u(e,X,g),w(xt,X,null),t(X,Or),t(X,Ua),t(Ua,qr),t(X,Pr),w(He,X,null),u(e,Us,g),u(e,se,g),t(se,Ue),t(Ue,Va),w(kt,Va,null),t(se,Tr),t(se,Ma),t(Ma,Fr),u(e,Vs,g),u(e,zt,g),t(zt,Ir),u(e,Ms,g),u(e,Ve,g),t(Ve,Yt),t(Yt,Ar),t(Yt,Ba),t(Ba,Lr),t(Ve,Hr),t(Ve,Gt),t(Gt,Ur),t(Gt,Ra),t(Ra,Vr),u(e,Bs,g),u(e,H,g),t(H,Mr),t(H,Ja),t(Ja,Br),t(H,Rr),t(H,za),t(za,Jr),t(H,zr),t(H,Xt),t(Xt,Yr),t(H,Gr),u(e,Rs,g),w(Et,e,g),u(e,Js,g),u(e,oe,g),t(oe,Me),t(Me,Ya),w(Dt,Ya,null),t(oe,Xr),t(oe,Ga),t(Ga,Qr),u(e,zs,g),u(e,ne,g),w(Nt,ne,null),t(ne,Wr),t(ne,Xa),t(Xa,Kr),u(e,Ys,g),u(e,re,g),t(re,Be),t(Be,Qa),w(jt,Qa,null),t(re,Zr),t(re,Wa),t(Wa,ei),u(e,Gs,g),u(e,ie,g),w(Ct,ie,null),t(ie,ti),t(ie,Ka),t(Ka,ai),u(e,Xs,g),u(e,le,g),t(le,Re),t(Re,Za),w(St,Za,null),t(le,si),t(le,es),t(es,oi),u(e,Qs,g),u(e,de,g),w(Ot,de,null),t(de,ni),t(de,ts),t(ts,ri),u(e,Ws,g),u(e,ce,g),t(ce,Je),t(Je,as),w(qt,as,null),t(ce,ii),t(ce,ss),t(ss,li),u(e,Ks,g),u(e,pe,g),w(Pt,pe,null),t(pe,di),t(pe,os),t(os,ci),u(e,Zs,g),u(e,me,g),t(me,ze),t(ze,ns),w(Tt,ns,null),t(me,pi),t(me,rs),t(rs,mi),u(e,eo,g),u(e,fe,g),w(Ft,fe,null),t(fe,fi),t(fe,is),t(is,gi),u(e,to,g),u(e,ge,g),t(ge,Ye),t(Ye,ls),w(It,ls,null),t(ge,hi),t(ge,ds),t(ds,ui),u(e,ao,g),u(e,he,g),w(At,he,null),t(he,_i),t(he,cs),t(cs,vi),u(e,so,g),u(e,ue,g),t(ue,Ge),t(Ge,ps),w(Lt,ps,null),t(ue,$i),t(ue,ms),t(ms,yi),u(e,oo,g),u(e,_e,g),w(Ht,_e,null),t(_e,bi),t(_e,fs),t(fs,wi),no=!0},p(e,[g]){const Ut={};g&2&&(Ut.$$scope={dirty:g,ctx:e}),be.$set(Ut);const gs={};g&2&&(gs.$$scope={dirty:g,ctx:e}),we.$set(gs);const hs={};g&2&&(hs.$$scope={dirty:g,ctx:e}),xe.$set(hs);const us={};g&2&&(us.$$scope={dirty:g,ctx:e}),ke.$set(us);const _s={};g&2&&(_s.$$scope={dirty:g,ctx:e}),Ee.$set(_s);const Vt={};g&2&&(Vt.$$scope={dirty:g,ctx:e}),De.$set(Vt);const vs={};g&2&&(vs.$$scope={dirty:g,ctx:e}),Ne.$set(vs);const $s={};g&2&&($s.$$scope={dirty:g,ctx:e}),je.$set($s);const ys={};g&2&&(ys.$$scope={dirty:g,ctx:e}),Ce.$set(ys);const ve={};g&2&&(ve.$$scope={dirty:g,ctx:e}),Se.$set(ve);const bs={};g&2&&(bs.$$scope={dirty:g,ctx:e}),Oe.$set(bs);const S={};g&2&&(S.$$scope={dirty:g,ctx:e}),qe.$set(S);const ws={};g&2&&(ws.$$scope={dirty:g,ctx:e}),Te.$set(ws);const $e={};g&2&&($e.$$scope={dirty:g,ctx:e}),Fe.$set($e);const xs={};g&2&&(xs.$$scope={dirty:g,ctx:e}),Ie.$set(xs);const ks={};g&2&&(ks.$$scope={dirty:g,ctx:e}),Ae.$set(ks);const Es={};g&2&&(Es.$$scope={dirty:g,ctx:e}),Le.$set(Es);const Mt={};g&2&&(Mt.$$scope={dirty:g,ctx:e}),He.$set(Mt)},i(e){no||(x(s.$$.fragment,e),x(et.$$.fragment,e),x(tt.$$.fragment,e),x(be.$$.fragment,e),x(at.$$.fragment,e),x(we.$$.fragment,e),x(xe.$$.fragment,e),x(ke.$$.fragment,e),x(Ee.$$.fragment,e),x(De.$$.fragment,e),x(pt.$$.fragment,e),x(Ne.$$.fragment,e),x(mt.$$.fragment,e),x(je.$$.fragment,e),x(Ce.$$.fragment,e),x(ht.$$.fragment,e),x(Se.$$.fragment,e),x(ut.$$.fragment,e),x(Oe.$$.fragment,e),x(_t.$$.fragment,e),x(qe.$$.fragment,e),x(vt.$$.fragment,e),x($t.$$.fragment,e),x(Te.$$.fragment,e),x(yt.$$.fragment,e),x(Fe.$$.fragment,e),x(Ie.$$.fragment,e),x(bt.$$.fragment,e),x(Ae.$$.fragment,e),x(Le.$$.fragment,e),x(xt.$$.fragment,e),x(He.$$.fragment,e),x(kt.$$.fragment,e),x(Et.$$.fragment,e),x(Dt.$$.fragment,e),x(Nt.$$.fragment,e),x(jt.$$.fragment,e),x(Ct.$$.fragment,e),x(St.$$.fragment,e),x(Ot.$$.fragment,e),x(qt.$$.fragment,e),x(Pt.$$.fragment,e),x(Tt.$$.fragment,e),x(Ft.$$.fragment,e),x(It.$$.fragment,e),x(At.$$.fragment,e),x(Lt.$$.fragment,e),x(Ht.$$.fragment,e),no=!0)},o(e){k(s.$$.fragment,e),k(et.$$.fragment,e),k(tt.$$.fragment,e),k(be.$$.fragment,e),k(at.$$.fragment,e),k(we.$$.fragment,e),k(xe.$$.fragment,e),k(ke.$$.fragment,e),k(Ee.$$.fragment,e),k(De.$$.fragment,e),k(pt.$$.fragment,e),k(Ne.$$.fragment,e),k(mt.$$.fragment,e),k(je.$$.fragment,e),k(Ce.$$.fragment,e),k(ht.$$.fragment,e),k(Se.$$.fragment,e),k(ut.$$.fragment,e),k(Oe.$$.fragment,e),k(_t.$$.fragment,e),k(qe.$$.fragment,e),k(vt.$$.fragment,e),k($t.$$.fragment,e),k(Te.$$.fragment,e),k(yt.$$.fragment,e),k(Fe.$$.fragment,e),k(Ie.$$.fragment,e),k(bt.$$.fragment,e),k(Ae.$$.fragment,e),k(Le.$$.fragment,e),k(xt.$$.fragment,e),k(He.$$.fragment,e),k(kt.$$.fragment,e),k(Et.$$.fragment,e),k(Dt.$$.fragment,e),k(Nt.$$.fragment,e),k(jt.$$.fragment,e),k(Ct.$$.fragment,e),k(St.$$.fragment,e),k(Ot.$$.fragment,e),k(qt.$$.fragment,e),k(Pt.$$.fragment,e),k(Tt.$$.fragment,e),k(Ft.$$.fragment,e),k(It.$$.fragment,e),k(At.$$.fragment,e),k(Lt.$$.fragment,e),k(Ht.$$.fragment,e),no=!1},d(e){a(i),e&&a($),e&&a(h),E(s),e&&a(O),e&&a(q),e&&a(Ds),e&&a(W),E(et),e&&a(Ns),e&&a(M),E(tt),E(be),e&&a(js),e&&a(C),E(at),E(we),E(xe),E(ke),E(Ee),E(De),e&&a(Cs),e&&a(R),E(pt),E(Ne),e&&a(Ss),e&&a(P),E(mt),E(je),E(Ce),e&&a(Os),e&&a(z),E(ht),E(Se),e&&a(qs),e&&a(Y),E(ut),E(Oe),e&&a(Ps),e&&a(G),E(_t),E(qe),e&&a(Ts),e&&a(te),E(vt),e&&a(Fs),e&&a(ae),E($t),e&&a(Is),E(Te,e),e&&a(As),e&&a(I),E(yt),E(Fe),E(Ie),e&&a(Ls),e&&a(A),E(bt),E(Ae),E(Le),e&&a(Hs),e&&a(X),E(xt),E(He),e&&a(Us),e&&a(se),E(kt),e&&a(Vs),e&&a(zt),e&&a(Ms),e&&a(Ve),e&&a(Bs),e&&a(H),e&&a(Rs),E(Et,e),e&&a(Js),e&&a(oe),E(Dt),e&&a(zs),e&&a(ne),E(Nt),e&&a(Ys),e&&a(re),E(jt),e&&a(Gs),e&&a(ie),E(Ct),e&&a(Xs),e&&a(le),E(St),e&&a(Qs),e&&a(de),E(Ot),e&&a(Ws),e&&a(ce),E(qt),e&&a(Ks),e&&a(pe),E(Pt),e&&a(Zs),e&&a(me),E(Tt),e&&a(eo),e&&a(fe),E(Ft),e&&a(to),e&&a(ge),E(It),e&&a(ao),e&&a(he),E(At),e&&a(so),e&&a(ue),E(Lt),e&&a(oo),e&&a(_e),E(Ht)}}}const vd={local:"loading-methods",sections:[{local:"datasets.list_datasets",title:"Datasets"},{local:"datasets.list_metrics",title:"Metrics"},{local:"from-files",sections:[{local:"datasets.packaged_modules.text.TextConfig",title:"Text"},{local:"datasets.packaged_modules.csv.CsvConfig",title:"CSV"},{local:"datasets.packaged_modules.json.JsonConfig",title:"JSON"},{local:"datasets.packaged_modules.parquet.ParquetConfig",title:"Parquet"},{local:"datasets.packaged_modules.sql.SqlConfig",title:"SQL"},{local:"datasets.packaged_modules.imagefolder.ImageFolderConfig",title:"Images"},{local:"datasets.packaged_modules.audiofolder.AudioFolderConfig",title:"Audio"}],title:"From files"}],title:"Loading methods"};function $d(j){return Kl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Nd extends Gl{constructor(i){super();Xl(this,i,$d,_d,Ql,{})}}export{Nd as default,vd as metadata};
