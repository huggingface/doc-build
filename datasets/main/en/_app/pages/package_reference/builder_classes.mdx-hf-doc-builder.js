import{S as Bm,i as Nm,s as Pm,e as r,k as i,w as $,t as c,M as Rm,c as n,d as a,m as p,a as o,x as b,h as m,b as D,G as e,g as y,y as v,q as w,o as x,B as E,v as Cm,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{D as j}from"../../chunks/Docstring-hf-doc-builder.js";import{C as B}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as dn}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as T}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function qm(k){let d,h,f,l,u;return l=new B({props:{code:`from datasets import load_dataset_builder
builder = load_dataset_builder('rotten_tomatoes')
ds = builder.download_and_prepare()
ds = builder.as_dataset(split='train')
ds`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = builder.download_and_prepare()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = builder.as_dataset(split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">8530</span>
})`}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function Am(k){let d,h;return d=new B({props:{code:`from datasets import load_dataset_builder
builder = load_dataset_builder("rotten_tomatoes")
ds = builder.download_and_prepare()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>builder = load_dataset_builder(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = builder.download_and_prepare()`}}),{c(){$(d.$$.fragment)},l(f){b(d.$$.fragment,f)},m(f,l){v(d,f,l),h=!0},p:I,i(f){h||(w(d.$$.fragment,f),h=!0)},o(f){x(d.$$.fragment,f),h=!1},d(f){E(d,f)}}}function Lm(k){let d,h;return d=new B({props:{code:`from datasets import load_dataset_builder
builder = load_dataset_builder("rotten_tomatoes")
ds = builder.download_and_prepare("./output_dir", file_format="parquet")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>builder = load_dataset_builder(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = builder.download_and_prepare(<span class="hljs-string">&quot;./output_dir&quot;</span>, file_format=<span class="hljs-string">&quot;parquet&quot;</span>)`}}),{c(){$(d.$$.fragment)},l(f){b(d.$$.fragment,f)},m(f,l){v(d,f,l),h=!0},p:I,i(f){h||(w(d.$$.fragment,f),h=!0)},o(f){x(d.$$.fragment,f),h=!1},d(f){E(d,f)}}}function Om(k){let d,h;return d=new B({props:{code:`from datasets import load_dataset_builder
storage_options = {"key": aws_access_key_id, "secret": aws_secret_access_key}
builder = load_dataset_builder("rotten_tomatoes")
ds = builder.download_and_prepare("s3://my-bucket/my_rotten_tomatoes", storage_options=storage_options, file_format="parquet")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>storage_options = {<span class="hljs-string">&quot;key&quot;</span>: aws_access_key_id, <span class="hljs-string">&quot;secret&quot;</span>: aws_secret_access_key}
<span class="hljs-meta">&gt;&gt;&gt; </span>builder = load_dataset_builder(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = builder.download_and_prepare(<span class="hljs-string">&quot;s3://my-bucket/my_rotten_tomatoes&quot;</span>, storage_options=storage_options, file_format=<span class="hljs-string">&quot;parquet&quot;</span>)`}}),{c(){$(d.$$.fragment)},l(f){b(d.$$.fragment,f)},m(f,l){v(d,f,l),h=!0},p:I,i(f){h||(w(d.$$.fragment,f),h=!0)},o(f){x(d.$$.fragment,f),h=!1},d(f){E(d,f)}}}function Mm(k){let d,h,f,l,u;return l=new B({props:{code:`from datasets import load_dataset_builder
ds_builder = load_dataset_builder('rotten_tomatoes')
ds_builder.get_all_exported_dataset_infos()
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder.get_all_exported_dataset_infos()
{<span class="hljs-string">&#x27;default&#x27;</span>: DatasetInfo(description=<span class="hljs-string">&quot;Movie Review Dataset.
a dataset of containing 5,331 positive and 5,331 negative processed
s from Rotten Tomatoes movie reviews. This data was first used in Bo
 Lillian Lee, \`\`Seeing stars: Exploiting class relationships for
t categorization with respect to rating scales.&#x27;&#x27;, Proceedings of the
5.
ion=&#x27;@InProceedings{Pang+Lee:05a,
 =       {Bo Pang and Lillian Lee},
=        {Seeing stars: Exploiting class relationships for sentiment
          categorization with respect to rating scales},
tle =    {Proceedings of the ACL},
         2005

age=&#x27;http://www.cs.cornell.edu/people/pabo/movie-review-data/&#x27;, license=&#x27;&#x27;, features={&#x27;text&#x27;: Value(dtype=&#x27;string&#x27;, id=None), &#x27;label&#x27;: ClassLabel(num_classes=2, names=[&#x27;neg&#x27;, &#x27;pos&#x27;], id=None)}, post_processed=None, supervised_keys=SupervisedKeysData(input=&#x27;&#x27;, output=&#x27;&#x27;), task_templates=[TextClassification(task=&#x27;text-classification&#x27;, text_column=&#x27;text&#x27;, label_column=&#x27;label&#x27;)], builder_name=&#x27;rotten_tomatoes_movie_review&#x27;, config_name=&#x27;default&#x27;, version=1.0.0, splits={&#x27;train&#x27;: SplitInfo(name=&#x27;train&#x27;, num_bytes=1074810, num_examples=8530, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;validation&#x27;: SplitInfo(name=&#x27;validation&#x27;, num_bytes=134679, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;test&#x27;: SplitInfo(name=&#x27;test&#x27;, num_bytes=135972, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;)}, download_checksums={&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;: {&#x27;num_bytes&#x27;: 487770, &#x27;checksum&#x27;: &#x27;a05befe52aafda71d458d188a1c54506a998b1308613ba76bbda2e5029409ce9&#x27;}}, download_size=487770, post_processing_size=None, dataset_size=1345461, size_in_bytes=1833231)}</span>`}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function Vm(k){let d,h,f,l,u;return l=new B({props:{code:`from datasets import load_dataset_builder
ds_builder = load_dataset_builder('rotten_tomatoes')
ds_builder.get_exported_dataset_info()
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder.get_exported_dataset_info()
DatasetInfo(description=<span class="hljs-string">&quot;Movie Review Dataset.
a dataset of containing 5,331 positive and 5,331 negative processed
s from Rotten Tomatoes movie reviews. This data was first used in Bo
 Lillian Lee, \`\`Seeing stars: Exploiting class relationships for
t categorization with respect to rating scales.&#x27;&#x27;, Proceedings of the
5.
ion=&#x27;@InProceedings{Pang+Lee:05a,
 =       {Bo Pang and Lillian Lee},
=        {Seeing stars: Exploiting class relationships for sentiment
          categorization with respect to rating scales},
tle =    {Proceedings of the ACL},
         2005

age=&#x27;http://www.cs.cornell.edu/people/pabo/movie-review-data/&#x27;, license=&#x27;&#x27;, features={&#x27;text&#x27;: Value(dtype=&#x27;string&#x27;, id=None), &#x27;label&#x27;: ClassLabel(num_classes=2, names=[&#x27;neg&#x27;, &#x27;pos&#x27;], id=None)}, post_processed=None, supervised_keys=SupervisedKeysData(input=&#x27;&#x27;, output=&#x27;&#x27;), task_templates=[TextClassification(task=&#x27;text-classification&#x27;, text_column=&#x27;text&#x27;, label_column=&#x27;label&#x27;)], builder_name=&#x27;rotten_tomatoes_movie_review&#x27;, config_name=&#x27;default&#x27;, version=1.0.0, splits={&#x27;train&#x27;: SplitInfo(name=&#x27;train&#x27;, num_bytes=1074810, num_examples=8530, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;validation&#x27;: SplitInfo(name=&#x27;validation&#x27;, num_bytes=134679, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;test&#x27;: SplitInfo(name=&#x27;test&#x27;, num_bytes=135972, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;)}, download_checksums={&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;: {&#x27;num_bytes&#x27;: 487770, &#x27;checksum&#x27;: &#x27;a05befe52aafda71d458d188a1c54506a998b1308613ba76bbda2e5029409ce9&#x27;}}, download_size=487770, post_processing_size=None, dataset_size=1345461, size_in_bytes=1833231)</span>`}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function Fm(k){let d,h,f,l,u;return l=new B({props:{code:"downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)'}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function Um(k){let d,h,f,l,u;return l=new B({props:{code:"extracted_paths = dl_manager.extract(dl_manager.download(url_or_urls))",highlighted:'<span class="hljs-attr">extracted_paths</span> = dl_manager.extract(dl_manager.download(url_or_urls))'}}),{c(){d=r("p"),h=c("Is roughly equivalent to:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Is roughly equivalent to:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function zm(k){let d,h,f,l,u;return l=new B({props:{code:"downloaded_files = dl_manager.download_custom('s3://my-bucket/data.zip', custom_download_for_my_private_bucket)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download_custom(<span class="hljs-string">&#x27;s3://my-bucket/data.zip&#x27;</span>, custom_download_for_my_private_bucket)'}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function Gm(k){let d,h,f,l,u;return l=new B({props:{code:`downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
extracted_files = dl_manager.extract(downloaded_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>extracted_files = dl_manager.extract(downloaded_files)`}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function Hm(k){let d,h,f,l,u;return l=new B({props:{code:`archive = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
files = dl_manager.iter_archive(archive)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>archive = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_archive(archive)`}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function Wm(k){let d,h,f,l,u;return l=new B({props:{code:`files = dl_manager.download_and_extract('https://huggingface.co/datasets/beans/resolve/main/data/train.zip')
files = dl_manager.iter_files(files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.download_and_extract(<span class="hljs-string">&#x27;https://huggingface.co/datasets/beans/resolve/main/data/train.zip&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_files(files)`}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function Xm(k){let d,h,f,l,u;return l=new B({props:{code:"downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)'}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function Km(k){let d,h,f,l,u;return l=new B({props:{code:"extracted_paths = dl_manager.extract(dl_manager.download(url_or_urls))",highlighted:'<span class="hljs-attr">extracted_paths</span> = dl_manager.extract(dl_manager.download(url_or_urls))'}}),{c(){d=r("p"),h=c("Is roughly equivalent to:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Is roughly equivalent to:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function Jm(k){let d,h,f,l,u;return l=new B({props:{code:`downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
extracted_files = dl_manager.extract(downloaded_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>extracted_files = dl_manager.extract(downloaded_files)`}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function Ym(k){let d,h,f,l,u;return l=new B({props:{code:`archive = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
files = dl_manager.iter_archive(archive)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>archive = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_archive(archive)`}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function Qm(k){let d,h,f,l,u;return l=new B({props:{code:`files = dl_manager.download_and_extract('https://huggingface.co/datasets/beans/resolve/main/data/train.zip')
files = dl_manager.iter_files(files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.download_and_extract(<span class="hljs-string">&#x27;https://huggingface.co/datasets/beans/resolve/main/data/train.zip&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_files(files)`}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function Zm(k){let d,h,f,l,u;return l=new B({props:{code:`datasets.SplitGenerator(
    name=datasets.Split.TRAIN,
    gen_kwargs={"split_key": "train", "files": dl_manager.download_and_extract(url)},
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.TRAIN,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;train&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and_extract(url)},
<span class="hljs-meta">... </span>)`}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function eg(k){let d,h,f,l,u;return l=new B({props:{code:`datasets.SplitGenerator(
    name=datasets.Split.TRAIN,
    gen_kwargs={"split_key": "train", "files": dl_manager.download_and extract(url)},
),
datasets.SplitGenerator(
    name=datasets.Split.VALIDATION,
    gen_kwargs={"split_key": "validation", "files": dl_manager.download_and extract(url)},
),
datasets.SplitGenerator(
    name=datasets.Split.TEST,
    gen_kwargs={"split_key": "test", "files": dl_manager.download_and extract(url)},
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.TRAIN,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;train&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and extract(url)},
<span class="hljs-meta">... </span>),
<span class="hljs-meta">... </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.VALIDATION,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;validation&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and extract(url)},
<span class="hljs-meta">... </span>),
<span class="hljs-meta">... </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.TEST,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and extract(url)},
<span class="hljs-meta">... </span>)`}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function tg(k){let d,h,f,l,u;return l=new B({props:{code:`Each descriptor can be composed with other using addition or slice. Ex
split = datasets.Split.TRAIN.subsplit(datasets.percent[0:25]) + datasets.Split.TEST

The resulting split will correspond to 25% of the train split merged with
100% of the test split.`,highlighted:`Each descriptor can be composed <span class="hljs-keyword">with</span> other using addition <span class="hljs-keyword">or</span> <span class="hljs-built_in">slice</span>. Ex
split = datasets.Split.TRAIN.subsplit(datasets.percent[<span class="hljs-number">0</span>:<span class="hljs-number">25</span>]) + datasets.Split.TEST

The resulting split will correspond to <span class="hljs-number">25</span>% of the train split merged <span class="hljs-keyword">with</span>
<span class="hljs-number">100</span>% of the test split.`}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function ag(k){let d,h,f,l,u;return l=new B({props:{code:`split = (
        datasets.Split.TRAIN.subsplit(datasets.percent[:25]) +
        datasets.Split.TRAIN.subsplit(datasets.percent[75:])
)  # Error
split = datasets.Split.TEST + datasets.Split.ALL  # Error`,highlighted:`split = (
        datasets.Split.TRAIN.subsplit(datasets.percent[:<span class="hljs-number">25</span>]) +
        datasets.Split.TRAIN.subsplit(datasets.percent[<span class="hljs-number">75</span>:])
)  <span class="hljs-comment"># Error</span>
split = datasets.Split.TEST + datasets.Split.ALL  <span class="hljs-comment"># Error</span>`}}),{c(){d=r("p"),h=c("A split cannot be added twice, so the following will fail:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"A split cannot be added twice, so the following will fail:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function sg(k){let d,h,f,l,u;return l=new B({props:{code:`split = (
datasets.Split.TRAIN.subsplit(datasets.percent[:25]) +
datasets.Split.TEST.subsplit(datasets.percent[:50])
)
split = (datasets.Split.TRAIN + datasets.Split.TEST).subsplit(datasets.percent[:50])`,highlighted:`split = (
datasets.Split.TRAIN.subsplit(datasets.percent[:<span class="hljs-number">25</span>]) +
datasets.Split.TEST.subsplit(datasets.percent[:<span class="hljs-number">50</span>])
)
split = (datasets.Split.TRAIN + datasets.Split.TEST).subsplit(datasets.percent[:<span class="hljs-number">50</span>])`}}),{c(){d=r("p"),h=c("The slices can be applied only one time. So the following are valid:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"The slices can be applied only one time. So the following are valid:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function rg(k){let d,h,f,l,u;return l=new B({props:{code:`train = datasets.Split.TRAIN
test = datasets.Split.TEST
split = train.subsplit(datasets.percent[:25]).subsplit(datasets.percent[:25])
split = (train.subsplit(datasets.percent[:25]) + test).subsplit(datasets.percent[:50])`,highlighted:`train = datasets.Split.TRAIN
test = datasets.Split.TEST
split = train.subsplit(datasets.percent[:<span class="hljs-number">25</span>]).subsplit(datasets.percent[:<span class="hljs-number">25</span>])
split = (train.subsplit(datasets.percent[:<span class="hljs-number">25</span>]) + test).subsplit(datasets.percent[:<span class="hljs-number">50</span>])`}}),{c(){d=r("p"),h=c("But not:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"But not:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function ng(k){let d,h,f,l,u;return l=new B({props:{code:`# The following lines are equivalent:
ds = datasets.load_dataset('mnist', split='test[:33%]')
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction.from_spec('test[:33%]'))
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction('test', to=33, unit='%'))
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction(
'test', from_=0, to=33, unit='%'))

# The following lines are equivalent:
ds = datasets.load_dataset('mnist', split='test[:33%]+train[1:-1]')
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction.from_spec(
'test[:33%]+train[1:-1]'))
ds = datasets.load_dataset('mnist', split=(
datasets.ReadInstruction('test', to=33, unit='%') +
datasets.ReadInstruction('train', from_=1, to=-1, unit='abs')))

# The following lines are equivalent:
ds = datasets.load_dataset('mnist', split='test[:33%](pct1_dropremainder)')
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction.from_spec(
'test[:33%](pct1_dropremainder)'))
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction(
'test', from_=0, to=33, unit='%', rounding="pct1_dropremainder"))

# 10-fold validation:
tests = datasets.load_dataset(
'mnist',
[datasets.ReadInstruction('train', from_=k, to=k+10, unit='%')
for k in range(0, 100, 10)])
trains = datasets.load_dataset(
'mnist',
[datasets.ReadInstruction('train', to=k, unit='%') + datasets.ReadInstruction('train', from_=k+10, unit='%')
for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-comment"># The following lines are equivalent:</span>
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=<span class="hljs-string">&#x27;test[:33%]&#x27;</span>)
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction.from_spec(<span class="hljs-string">&#x27;test[:33%]&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&#x27;test&#x27;</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction(
<span class="hljs-string">&#x27;test&#x27;</span>, from_=<span class="hljs-number">0</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>))

<span class="hljs-comment"># The following lines are equivalent:</span>
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=<span class="hljs-string">&#x27;test[:33%]+train[1:-1]&#x27;</span>)
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction.from_spec(
<span class="hljs-string">&#x27;test[:33%]+train[1:-1]&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=(
datasets.ReadInstruction(<span class="hljs-string">&#x27;test&#x27;</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>) +
datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, from_=<span class="hljs-number">1</span>, to=-<span class="hljs-number">1</span>, unit=<span class="hljs-string">&#x27;abs&#x27;</span>)))

<span class="hljs-comment"># The following lines are equivalent:</span>
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=<span class="hljs-string">&#x27;test[:33%](pct1_dropremainder)&#x27;</span>)
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction.from_spec(
<span class="hljs-string">&#x27;test[:33%](pct1_dropremainder)&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction(
<span class="hljs-string">&#x27;test&#x27;</span>, from_=<span class="hljs-number">0</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))

<span class="hljs-comment"># 10-fold validation:</span>
tests = datasets.load_dataset(
<span class="hljs-string">&#x27;mnist&#x27;</span>,
[datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, from_=k, to=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>)
<span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
trains = datasets.load_dataset(
<span class="hljs-string">&#x27;mnist&#x27;</span>,
[datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, to=k, unit=<span class="hljs-string">&#x27;%&#x27;</span>) + datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, from_=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>)
<span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`}}),{c(){d=r("p"),h=c("Examples:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Examples:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function og(k){let d,h,f,l,u;return l=new B({props:{code:'VERSION = datasets.Version("1.0.0")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>VERSION = datasets.Version(<span class="hljs-string">&quot;1.0.0&quot;</span>)'}}),{c(){d=r("p"),h=c("Example:"),f=i(),$(l.$$.fragment)},l(t){d=n(t,"P",{});var g=o(d);h=m(g,"Example:"),g.forEach(a),f=p(t),b(l.$$.fragment,t)},m(t,g){y(t,d,g),e(d,h),y(t,f,g),v(l,t,g),u=!0},p:I,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){x(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),E(l,t)}}}function lg(k){let d,h,f,l,u,t,g,ls,Xn,pn,ve,Ve,ds,Et,Kn,is,Jn,cn,ee,Yn,wa,Qn,Zn,xa,eo,to,mn,S,yt,ao,ps,so,ro,Ea,cs,no,oo,lo,we,Dt,io,ms,po,co,mo,kt,go,gs,fo,uo,ho,xe,_o,fs,$o,bo,us,vo,wo,xo,X,hs,Eo,yo,_s,Do,ko,$s,jo,So,bs,To,Io,Bo,te,jt,No,vs,Po,Ro,Fe,Co,P,St,qo,ws,Ao,Lo,xs,Oo,Mo,ya,Vo,Es,Fo,Uo,Ue,zo,ys,Go,Ho,ze,Wo,Ds,Xo,Ko,Ge,Jo,ae,Tt,Yo,ks,Qo,Zo,He,el,se,It,tl,js,al,sl,We,rl,Xe,Bt,nl,Ss,ol,gn,Y,Nt,ll,Ts,dl,il,re,Is,pl,cl,Bs,ml,gl,Ns,fl,ul,fn,Ee,Pt,hl,Ps,_l,un,ye,Rt,$l,Rs,bl,hn,G,Ct,vl,qt,wl,Da,xl,El,yl,At,Dl,ka,kl,jl,Sl,ne,Lt,Tl,Cs,Il,Bl,De,qs,Nl,Pl,As,Rl,Cl,Ls,ql,_n,ke,Ke,Os,Ot,Al,Ms,Ll,$n,R,Mt,Ol,K,Vt,Ml,Vs,Vl,Fl,je,Ul,Fs,zl,Gl,Us,Hl,Wl,Xl,Je,Kl,oe,Ft,Jl,zs,Yl,Ql,Ye,Zl,le,Ut,ed,zt,td,Gs,ad,sd,rd,Qe,nd,de,Gt,od,Hs,ld,dd,Ze,id,ie,Ht,pd,Ws,cd,md,et,gd,pe,Wt,fd,Xs,ud,hd,tt,_d,at,Xt,$d,Ks,bd,bn,q,Kt,vd,H,wd,Js,xd,Ed,Ys,yd,Dd,Qs,kd,jd,Zs,Sd,Td,Id,ce,Jt,Bd,er,Nd,Pd,st,Rd,me,Yt,Cd,tr,qd,Ad,rt,Ld,ge,Qt,Od,ar,Md,Vd,nt,Fd,fe,Zt,Ud,sr,zd,Gd,ot,Hd,ue,ea,Wd,rr,Xd,Kd,lt,vn,Se,ta,Jd,nr,Yd,wn,V,aa,Qd,ja,or,Zd,ei,ti,sa,ai,lr,si,ri,ni,dr,oi,li,ra,ir,Te,xn,di,pr,ii,pi,cr,ci,mi,Ie,Be,Sa,mr,gi,fi,ui,gr,hi,_i,fr,$i,bi,Ne,ur,hr,vi,wi,_r,xi,Ei,$r,yi,Di,Pe,br,vr,ki,ji,wr,Si,Ti,xr,Ii,En,Re,dt,Er,na,Bi,yr,Ni,yn,W,oa,Pi,Dr,Ri,Ci,Ce,qi,kr,Ai,Li,jr,Oi,Mi,Vi,it,Dn,A,la,Fi,Ta,Sr,Ui,zi,Gi,Tr,Hi,Wi,Q,Ia,Ir,Xi,Ki,Ji,Ba,Br,Yi,Qi,Zi,Na,Nr,ep,tp,ap,Pa,Pr,sp,rp,np,Ra,op,Rr,lp,dp,da,ip,Cr,pp,cp,mp,pt,kn,C,ia,gp,qr,fp,up,ct,hp,Ar,_p,$p,mt,bp,Lr,vp,wp,gt,xp,ft,jn,qe,pa,Ep,Or,yp,Sn,F,ca,Dp,Mr,kp,jp,ut,Sp,ht,ma,Tp,Vr,Ip,Bp,he,ga,Np,Fr,Pp,Rp,Ur,Cp,Tn,Ae,_t,zr,fa,qp,Gr,Ap,In,Z,ua,Lp,Hr,Op,Mp,$t,Bn;return t=new dn({}),Et=new dn({}),yt=new j({props:{name:"class datasets.DatasetBuilder",anchor:"datasets.DatasetBuilder",parameters:[{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"hash",val:": typing.Optional[str] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"repo_id",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, list, dict, datasets.data_files.DataFilesDict, NoneType] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"name",val:" = 'deprecated'"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetBuilder.cache_dir",description:"<strong>cache_dir</strong> (<em>str</em>, <em>optional</em>) &#x2014; Directory to cache data. Defaults to <code>&quot;~/.cache/huggingface/datasets&quot;</code>.",name:"cache_dir"},{anchor:"datasets.DatasetBuilder.config_name",description:`<strong>config_name</strong> (<em>str</em>, <em>optional</em>) &#x2014; Name of the dataset configuration.
It affects the data generated on disk: different configurations will have their own subdirectories and
versions.
If not provided, the default configuration is used (if it exists).</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.3.0</p>
						
<p>Parameter <em>name</em> was renamed to <em>config_name</em>.</p>

					</div>`,name:"config_name"},{anchor:"datasets.DatasetBuilder.hash",description:`<strong>hash</strong> (<em>str</em>, <em>optional</em>) &#x2014; Hash specific to the dataset code. Used to update the caching directory when the
dataset loading script code is updated (to avoid reusing old data).
The typical caching directory (defined in <code>self._relative_data_dir</code>) is: <code>name/version/hash/</code>.`,name:"hash"},{anchor:"datasets.DatasetBuilder.base_path",description:`<strong>base_path</strong> (<em>str</em>, <em>optional</em>) &#x2014; Base path for relative paths that are used to download files.
This can be a remote URL.`,name:"base_path"},{anchor:"datasets.DatasetBuilder.features",description:`<strong>features</strong> ([<em>Features</em>], <em>optional</em>) &#x2014; Features types to use with this dataset.
It can be used to change the Features types of a dataset, for example.`,name:"features"},{anchor:"datasets.DatasetBuilder.use_auth_token",description:`<strong>use_auth_token</strong> (<em>str</em> or <em>bool</em>, <em>optional</em>) &#x2014; String or boolean to use as Bearer token for remote files on the
Datasets Hub. If <em>True</em>, will get token from <code>&quot;~/.huggingface&quot;</code>.`,name:"use_auth_token"},{anchor:"datasets.DatasetBuilder.repo_id",description:`<strong>repo_id</strong> (<em>str</em>, <em>optional</em>) &#x2014; ID of the dataset repository.
Used to distinguish builders with the same name but not coming from the same namespace, for example &#x201C;squad&#x201D;
and &#x201C;lhoestq/squad&#x201D; repo IDs. In the latter, the builder name would be &#x201C;lhoestq___squad&#x201D;.`,name:"repo_id"},{anchor:"datasets.DatasetBuilder.data_files",description:`<strong>data_files</strong> (<em>str</em> or <em>Sequence</em> or <em>Mapping</em>, <em>optional</em>) &#x2014; Path(s) to source data file(s).
For builders like &#x201C;csv&#x201D; or &#x201C;json&#x201D; that need the user to specify data files. They can be either
local or remote files. For convenience, you can use a DataFilesDict.`,name:"data_files"},{anchor:"datasets.DatasetBuilder.data_dir",description:`<strong>data_dir</strong> (<em>str</em>, <em>optional</em>) &#x2014; Path to directory containing source data file(s).
Use only if <em>data_files</em> is not passed, in which case it is equivalent to passing
<code>os.path.join(data_dir, &quot;**&quot;)</code> as <em>data_files</em>.
For builders that require manual download, it must be the path to the local directory containing the
manually downloaded data.`,name:"data_dir"},{anchor:"datasets.DatasetBuilder.name",description:`<strong>name</strong> (<em>str</em>) &#x2014; Configuration name for the dataset.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						<p class="font-medium">Deprecated in 2.3.0</p>
						
<p>Use <em>config_name</em> instead.</p>

					</div>`,name:"name"},{anchor:"datasets.DatasetBuilder.*config_kwargs",description:`*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to the corresponding builder
configuration class, set on the class attribute [<em>DatasetBuilder.BUILDER_CONFIG_CLASS</em>]. The builder
configuration class is [<em>BuilderConfig</em>] or a subclass of it.`,name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L195"}}),jt=new j({props:{name:"as_dataset",anchor:"datasets.DatasetBuilder.as_dataset",parameters:[{name:"split",val:": typing.Optional[datasets.splits.Split] = None"},{name:"run_post_process",val:" = True"},{name:"ignore_verifications",val:" = False"},{name:"in_memory",val:" = False"}],parametersDescription:[{anchor:"datasets.DatasetBuilder.as_dataset.split",description:"<strong>split</strong> (<code>datasets.Split</code>) &#x2014; Which subset of the data to return.",name:"split"},{anchor:"datasets.DatasetBuilder.as_dataset.run_post_process",description:`<strong>run_post_process</strong> (bool, default=True) &#x2014; Whether to run post-processing dataset transforms and/or add
indexes.`,name:"run_post_process"},{anchor:"datasets.DatasetBuilder.as_dataset.ignore_verifications",description:`<strong>ignore_verifications</strong> (bool, default=False) &#x2014; Whether to ignore the verifications of the
downloaded/processed dataset information (checksums/size/splits/&#x2026;).`,name:"ignore_verifications"},{anchor:"datasets.DatasetBuilder.as_dataset.in_memory",description:"<strong>in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L975",returnDescription:`
<p>datasets.Dataset</p>
`}}),Fe=new T({props:{anchor:"datasets.DatasetBuilder.as_dataset.example",$$slots:{default:[qm]},$$scope:{ctx:k}}}),St=new j({props:{name:"download_and_prepare",anchor:"datasets.DatasetBuilder.download_and_prepare",parameters:[{name:"output_dir",val:": typing.Optional[str] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"ignore_verifications",val:": bool = False"},{name:"try_from_hf_gcs",val:": bool = True"},{name:"dl_manager",val:": typing.Optional[datasets.download.download_manager.DownloadManager] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"file_format",val:": str = 'arrow'"},{name:"max_shard_size",val:": typing.Union[int, str, NoneType] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"storage_options",val:": typing.Optional[dict] = None"},{name:"**download_and_prepare_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetBuilder.download_and_prepare.output_dir",description:`<strong>output_dir</strong> (<code>str</code>, optional) &#x2014; output directory for the dataset.
Default to this builder&#x2019;s <code>cache_dir</code>, which is inside ~/.cache/huggingface/datasets by default.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.5.0</p>
						
					</div>`,name:"output_dir"},{anchor:"datasets.DatasetBuilder.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; specific download configuration parameters.',name:"download_config"},{anchor:"datasets.DatasetBuilder.download_and_prepare.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, optional) &#x2014; select the download/generate mode - Default to <code>REUSE_DATASET_IF_EXISTS</code>',name:"download_mode"},{anchor:"datasets.DatasetBuilder.download_and_prepare.ignore_verifications",description:"<strong>ignore_verifications</strong> (<code>bool</code>) &#x2014; Ignore the verifications of the downloaded/processed dataset information (checksums/size/splits/&#x2026;)",name:"ignore_verifications"},{anchor:"datasets.DatasetBuilder.download_and_prepare.try_from_hf_gcs",description:"<strong>try_from_hf_gcs</strong> (<code>bool</code>) &#x2014; If True, it will try to download the already prepared dataset from the Hf google cloud storage",name:"try_from_hf_gcs"},{anchor:"datasets.DatasetBuilder.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; specific Download Manger to use',name:"dl_manager"},{anchor:"datasets.DatasetBuilder.download_and_prepare.base_path",description:`<strong>base_path</strong> (<code>str</code>, optional) &#x2014; base path for relative paths that are used to download files. This can be a remote url.
If not specified, the value of the <em>base_path</em> attribute (<em>self.base_path</em>) will be used instead.`,name:"base_path"},{anchor:"datasets.DatasetBuilder.download_and_prepare.use_auth_token",description:`<strong>use_auth_token</strong> (<code>Union[str, bool]</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from ~/.huggingface.`,name:"use_auth_token"},{anchor:"datasets.DatasetBuilder.download_and_prepare.file_format",description:`<strong>file_format</strong> (<code>str</code>, optional) &#x2014; format of the data files in which the dataset will be written.
Supported formats: &#x201C;arrow&#x201D;, &#x201C;parquet&#x201D;. Default to &#x201C;arrow&#x201D; format.
If the format is &#x201C;parquet&#x201D;, then image and audio data are embedded into the Parquet files instead of pointing to local files.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.5.0</p>
						
					</div>`,name:"file_format"},{anchor:"datasets.DatasetBuilder.download_and_prepare.max_shard_size",description:`<strong>max_shard_size</strong> (<code>Union[str, int]</code>, optional) &#x2014; Maximum number of bytes written per shard.
Only available for the &#x201C;parquet&#x201D; format with a default of &#x201C;500MB&#x201D;. The size is based on uncompressed data size,
so in practice your shard files may be smaller than <em>max_shard_size</em> thanks to Parquet compression.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.5.0</p>
						
					</div>`,name:"max_shard_size"},{anchor:"datasets.DatasetBuilder.download_and_prepare.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes when downloading and generating the dataset locally.
Multiprocessing is disabled by default.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.7.0</p>
						
					</div>`,name:"num_proc"},{anchor:"datasets.DatasetBuilder.download_and_prepare.storage_options",description:`<strong>storage_options</strong> (<code>dict</code>, <em>optional</em>) &#x2014; Key/value pairs to be passed on to the caching file-system backend, if any.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.5.0</p>
						
					</div>`,name:"storage_options"},{anchor:"datasets.DatasetBuilder.download_and_prepare.*download_and_prepare_kwargs",description:"*<strong>*download_and_prepare_kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments.",name:"*download_and_prepare_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L604"}}),Ue=new T({props:{anchor:"datasets.DatasetBuilder.download_and_prepare.example",$$slots:{default:[Am]},$$scope:{ctx:k}}}),ze=new T({props:{anchor:"datasets.DatasetBuilder.download_and_prepare.example-2",$$slots:{default:[Lm]},$$scope:{ctx:k}}}),Ge=new T({props:{anchor:"datasets.DatasetBuilder.download_and_prepare.example-3",$$slots:{default:[Om]},$$scope:{ctx:k}}}),Tt=new j({props:{name:"get_all_exported_dataset_infos",anchor:"datasets.DatasetBuilder.get_all_exported_dataset_infos",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L393"}}),He=new T({props:{anchor:"datasets.DatasetBuilder.get_all_exported_dataset_infos.example",$$slots:{default:[Mm]},$$scope:{ctx:k}}}),It=new j({props:{name:"get_exported_dataset_info",anchor:"datasets.DatasetBuilder.get_exported_dataset_info",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L408"}}),We=new T({props:{anchor:"datasets.DatasetBuilder.get_exported_dataset_info.example",$$slots:{default:[Vm]},$$scope:{ctx:k}}}),Bt=new j({props:{name:"get_imported_module_dir",anchor:"datasets.DatasetBuilder.get_imported_module_dir",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L591"}}),Nt=new j({props:{name:"class datasets.GeneratorBasedBuilder",anchor:"datasets.GeneratorBasedBuilder",parameters:[{name:"*args",val:""},{name:"writer_batch_size",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L1286"}}),Pt=new j({props:{name:"class datasets.BeamBasedBuilder",anchor:"datasets.BeamBasedBuilder",parameters:[{name:"*args",val:""},{name:"beam_runner",val:" = None"},{name:"beam_options",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L1809"}}),Rt=new j({props:{name:"class datasets.ArrowBasedBuilder",anchor:"datasets.ArrowBasedBuilder",parameters:[{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"hash",val:": typing.Optional[str] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"use_auth_token",val:": typing.Union[str, bool, NoneType] = None"},{name:"repo_id",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, list, dict, datasets.data_files.DataFilesDict, NoneType] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"name",val:" = 'deprecated'"},{name:"**config_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L1563"}}),Ct=new j({props:{name:"class datasets.BuilderConfig",anchor:"datasets.BuilderConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.BuilderConfig.name",description:"<strong>name</strong> (<code>str</code>, default <code>&quot;default&quot;</code>) &#x2014;",name:"name"},{anchor:"datasets.BuilderConfig.version",description:'<strong>version</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.Version">Version</a> or <code>str</code>, optional) &#x2014;',name:"version"},{anchor:"datasets.BuilderConfig.data_dir",description:"<strong>data_dir</strong> (<code>str</code>, optional) &#x2014;",name:"data_dir"},{anchor:"datasets.BuilderConfig.data_files",description:"<strong>data_files</strong> (<code>str</code> or <code>Sequence</code> or <code>Mapping</code>, optional) &#x2014; Path(s) to source data file(s).",name:"data_files"},{anchor:"datasets.BuilderConfig.description",description:"<strong>description</strong> (<code>str</code>, optional) &#x2014;",name:"description"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L100"}}),Lt=new j({props:{name:"create_config_id",anchor:"datasets.BuilderConfig.create_config_id",parameters:[{name:"config_kwargs",val:": dict"},{name:"custom_features",val:": typing.Optional[datasets.features.features.Features] = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L138"}}),Ot=new dn({}),Mt=new j({props:{name:"class datasets.DownloadManager",anchor:"datasets.DownloadManager",parameters:[{name:"dataset_name",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"record_checksums",val:" = True"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L149"}}),Vt=new j({props:{name:"download",anchor:"datasets.DownloadManager.download",parameters:[{name:"url_or_urls",val:""}],parametersDescription:[{anchor:"datasets.DownloadManager.download.url_or_urls",description:"<strong>url_or_urls</strong> (<code>str</code> or <code>list</code> or <code>dict</code>) &#x2014; URL or list/dict of URLs to download. Each URL is a <code>str</code>.",name:"url_or_urls"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L281",returnDescription:`
<p>The downloaded paths matching the given input <code>url_or_urls</code>.</p>
`,returnType:`
<p><code>str</code> or <code>list</code> or <code>dict</code></p>
`}}),Je=new T({props:{anchor:"datasets.DownloadManager.download.example",$$slots:{default:[Fm]},$$scope:{ctx:k}}}),Ft=new j({props:{name:"download_and_extract",anchor:"datasets.DownloadManager.download_and_extract",parameters:[{name:"url_or_urls",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L431",returnDescription:`
<p><code>str</code>, extracted paths of given URL(s).</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),Ye=new T({props:{anchor:"datasets.DownloadManager.download_and_extract.example",$$slots:{default:[Um]},$$scope:{ctx:k}}}),Ut=new j({props:{name:"download_custom",anchor:"datasets.DownloadManager.download_custom",parameters:[{name:"url_or_urls",val:""},{name:"custom_download",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L234",returnDescription:`
<p><code>str</code>, The downloaded paths matching the given input
url_or_urls.</p>
`,returnType:`
<p>downloaded_path(s)</p>
`}}),Qe=new T({props:{anchor:"datasets.DownloadManager.download_custom.example",$$slots:{default:[zm]},$$scope:{ctx:k}}}),Gt=new j({props:{name:"extract",anchor:"datasets.DownloadManager.extract",parameters:[{name:"path_or_paths",val:""},{name:"num_proc",val:" = 'deprecated'"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L381",returnDescription:`
<p><code>str</code>, The extracted paths matching the given input
path_or_paths.</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),Ze=new T({props:{anchor:"datasets.DownloadManager.extract.example",$$slots:{default:[Gm]},$$scope:{ctx:k}}}),Ht=new j({props:{name:"iter_archive",anchor:"datasets.DownloadManager.iter_archive",parameters:[{name:"path_or_buf",val:": typing.Union[str, _io.BufferedReader]"}],parametersDescription:[{anchor:"datasets.DownloadManager.iter_archive.path_or_buf",description:"<strong>path_or_buf</strong> (<code>str</code> or <code>io.BufferedReader</code>) &#x2014; Archive path or archive binary file object.",name:"path_or_buf"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L340",returnType:"\n<p><code>tuple</code>[<code>str`, `io.BufferedReader</code>]</p>\n",isYield:!0}}),et=new T({props:{anchor:"datasets.DownloadManager.iter_archive.example",$$slots:{default:[Hm]},$$scope:{ctx:k}}}),Wt=new j({props:{name:"iter_files",anchor:"datasets.DownloadManager.iter_files",parameters:[{name:"paths",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.DownloadManager.iter_files.paths",description:"<strong>paths</strong> (<code>str</code> or <code>list</code> of <code>str</code>) &#x2014; Root paths.",name:"paths"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L363",returnType:`
<p>str</p>
`,isYield:!0}}),tt=new T({props:{anchor:"datasets.DownloadManager.iter_files.example",$$slots:{default:[Wm]},$$scope:{ctx:k}}}),Xt=new j({props:{name:"ship_files_with_pipeline",anchor:"datasets.DownloadManager.ship_files_with_pipeline",parameters:[{name:"downloaded_path_or_paths",val:""},{name:"pipeline",val:""}],parametersDescription:[{anchor:"datasets.DownloadManager.ship_files_with_pipeline.downloaded_path_or_paths",description:`<strong>downloaded_path_or_paths</strong> (<code>str</code> or <code>list[str]</code> or <code>dict[str, str]</code>) &#x2014; Nested structure containing the
downloaded path(s).`,name:"downloaded_path_or_paths"},{anchor:"datasets.DownloadManager.ship_files_with_pipeline.pipeline",description:"<strong>pipeline</strong> (<code>utils.beam_utils.BeamPipeline</code>) &#x2014; Apache Beam Pipeline.",name:"pipeline"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L191",returnDescription:`
<p><code>str</code> or <code>list[str]</code> or <code>dict[str, str]</code></p>
`}}),Kt=new j({props:{name:"class datasets.StreamingDownloadManager",anchor:"datasets.StreamingDownloadManager",parameters:[{name:"dataset_name",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"base_path",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/streaming_download_manager.py#L853"}}),Jt=new j({props:{name:"download",anchor:"datasets.StreamingDownloadManager.download",parameters:[{name:"url_or_urls",val:""}],parametersDescription:[{anchor:"datasets.StreamingDownloadManager.download.url_or_urls",description:"<strong>url_or_urls</strong> (<code>str</code> or <code>list</code> or <code>dict</code>) &#x2014; URL or URLs to download and extract. Each url is a <code>str</code>.",name:"url_or_urls"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/streaming_download_manager.py#L879",returnDescription:`
<p>Downloaded paths matching the given input url_or_urls.</p>
`,returnType:`
<p><code>str</code></p>
`}}),st=new T({props:{anchor:"datasets.StreamingDownloadManager.download.example",$$slots:{default:[Xm]},$$scope:{ctx:k}}}),Yt=new j({props:{name:"download_and_extract",anchor:"datasets.StreamingDownloadManager.download_and_extract",parameters:[{name:"url_or_urls",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/streaming_download_manager.py#L941",returnDescription:`
<p><code>str</code>, extracted paths of given URL(s).</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),rt=new T({props:{anchor:"datasets.StreamingDownloadManager.download_and_extract.example",$$slots:{default:[Km]},$$scope:{ctx:k}}}),Qt=new j({props:{name:"extract",anchor:"datasets.StreamingDownloadManager.extract",parameters:[{name:"path_or_paths",val:""}],parametersDescription:[{anchor:"datasets.StreamingDownloadManager.extract.path_or_paths",description:"<strong>path_or_paths</strong> (<code>str</code> or <code>list</code> or <code>dict</code>) &#x2014; Path or paths of file to extract. Each path is a <code>str</code>.",name:"path_or_paths"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/streaming_download_manager.py#L904",returnDescription:`
<p>Extracted paths matching the given input path_or_paths.</p>
`,returnType:`
<p><code>str</code></p>
`}}),nt=new T({props:{anchor:"datasets.StreamingDownloadManager.extract.example",$$slots:{default:[Jm]},$$scope:{ctx:k}}}),Zt=new j({props:{name:"iter_archive",anchor:"datasets.StreamingDownloadManager.iter_archive",parameters:[{name:"urlpath_or_buf",val:": typing.Union[str, _io.BufferedReader]"}],parametersDescription:[{anchor:"datasets.StreamingDownloadManager.iter_archive.urlpath_or_buf",description:"<strong>urlpath_or_buf</strong> (<code>str</code> or <code>io.BufferedReader</code>) &#x2014; Archive path or archive binary file object.",name:"urlpath_or_buf"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/streaming_download_manager.py#L959",returnType:"\n<p><code>tuple</code>[<code>str`, `io.BufferedReader</code>]</p>\n",isYield:!0}}),ot=new T({props:{anchor:"datasets.StreamingDownloadManager.iter_archive.example",$$slots:{default:[Ym]},$$scope:{ctx:k}}}),ea=new j({props:{name:"iter_files",anchor:"datasets.StreamingDownloadManager.iter_files",parameters:[{name:"urlpaths",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.StreamingDownloadManager.iter_files.urlpaths",description:"<strong>urlpaths</strong> (<code>str</code> or <code>list</code> of <code>str</code>) &#x2014; Root paths.",name:"urlpaths"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/streaming_download_manager.py#L982",returnType:`
<p>str</p>
`,isYield:!0}}),lt=new T({props:{anchor:"datasets.StreamingDownloadManager.iter_files.example",$$slots:{default:[Qm]},$$scope:{ctx:k}}}),ta=new j({props:{name:"class datasets.DownloadConfig",anchor:"datasets.DownloadConfig",parameters:[{name:"cache_dir",val:": typing.Union[str, pathlib.Path, NoneType] = None"},{name:"force_download",val:": bool = False"},{name:"resume_download",val:": bool = False"},{name:"local_files_only",val:": bool = False"},{name:"proxies",val:": typing.Optional[typing.Dict] = None"},{name:"user_agent",val:": typing.Optional[str] = None"},{name:"extract_compressed_file",val:": bool = False"},{name:"force_extract",val:": bool = False"},{name:"delete_extracted",val:": bool = False"},{name:"use_etag",val:": bool = True"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"max_retries",val:": int = 1"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"ignore_url_params",val:": bool = False"},{name:"download_desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DownloadConfig.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>Path</code>, optional) &#x2014; Specify a cache directory to save the file to (overwrite the
default cache dir).`,name:"cache_dir"},{anchor:"datasets.DownloadConfig.force_download",description:`<strong>force_download</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True, re-dowload the file even if it&#x2019;s already cached in
the cache dir.`,name:"force_download"},{anchor:"datasets.DownloadConfig.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True, resume the download if incompletly recieved file is
found.`,name:"resume_download"},{anchor:"datasets.DownloadConfig.proxies",description:"<strong>proxies</strong> (<code>dict</code>, optional) &#x2014;",name:"proxies"},{anchor:"datasets.DownloadConfig.user_agent",description:`<strong>user_agent</strong> (<code>str</code>, optional) &#x2014; Optional string or dict that will be appended to the user-agent on remote
requests.`,name:"user_agent"},{anchor:"datasets.DownloadConfig.extract_compressed_file",description:`<strong>extract_compressed_file</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True and the path point to a zip or tar file,
extract the compressed file in a folder along the archive.`,name:"extract_compressed_file"},{anchor:"datasets.DownloadConfig.force_extract",description:`<strong>force_extract</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True when extract_compressed_file is True and the archive
was already extracted, re-extract the archive and override the folder where it was extracted.`,name:"force_extract"},{anchor:"datasets.DownloadConfig.delete_extracted",description:"<strong>delete_extracted</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to delete (or keep) the extracted files.",name:"delete_extracted"},{anchor:"datasets.DownloadConfig.use_etag",description:"<strong>use_etag</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to use the ETag HTTP response header to validate the cached files.",name:"use_etag"},{anchor:"datasets.DownloadConfig.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; The number of processes to launch to download the files in parallel.",name:"num_proc"},{anchor:"datasets.DownloadConfig.max_retries",description:"<strong>max_retries</strong> (<code>int</code>, default <code>1</code>) &#x2014; The number of times to retry an HTTP request if it fails.",name:"max_retries"},{anchor:"datasets.DownloadConfig.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token
for remote files on the Datasets Hub. If True, will get token from ~/.huggingface.`,name:"use_auth_token"},{anchor:"datasets.DownloadConfig.ignore_url_params",description:`<strong>ignore_url_params</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to strip all query parameters and #fragments from
the download URL before using it for caching the file.`,name:"ignore_url_params"},{anchor:"datasets.DownloadConfig.download_desc",description:"<strong>download_desc</strong> (<code>str</code>, optional) &#x2014; A description to be displayed alongside with the progress bar while downloading the files.",name:"download_desc"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_config.py#L8"}}),aa=new j({props:{name:"class datasets.DownloadMode",anchor:"datasets.DownloadMode",parameters:[{name:"value",val:""},{name:"names",val:" = None"},{name:"module",val:" = None"},{name:"qualname",val:" = None"},{name:"type",val:" = None"},{name:"start",val:" = 1"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L40"}}),na=new dn({}),oa=new j({props:{name:"class datasets.SplitGenerator",anchor:"datasets.SplitGenerator",parameters:[{name:"name",val:": str"},{name:"gen_kwargs",val:": typing.Dict = <factory>"}],parametersDescription:[{anchor:"datasets.SplitGenerator.name",description:`<strong>name</strong> (str) &#x2014; Name of the Split for which the generator will
create the examples.
**gen_kwargs &#x2014; Keyword arguments to forward to the <code>DatasetBuilder._generate_examples</code> method
of the builder.`,name:"name"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/splits.py#L597"}}),it=new T({props:{anchor:"datasets.SplitGenerator.example",$$slots:{default:[Zm]},$$scope:{ctx:k}}}),la=new j({props:{name:"class datasets.Split",anchor:"datasets.Split",parameters:[{name:"name",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/splits.py#L400"}}),pt=new T({props:{anchor:"datasets.Split.example",$$slots:{default:[eg]},$$scope:{ctx:k}}}),ia=new j({props:{name:"class datasets.NamedSplit",anchor:"datasets.NamedSplit",parameters:[{name:"name",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/splits.py#L313"}}),ct=new T({props:{anchor:"datasets.NamedSplit.example",$$slots:{default:[tg]},$$scope:{ctx:k}}}),mt=new T({props:{anchor:"datasets.NamedSplit.example-2",$$slots:{default:[ag]},$$scope:{ctx:k}}}),gt=new T({props:{anchor:"datasets.NamedSplit.example-3",$$slots:{default:[sg]},$$scope:{ctx:k}}}),ft=new T({props:{anchor:"datasets.NamedSplit.example-4",$$slots:{default:[rg]},$$scope:{ctx:k}}}),pa=new j({props:{name:"class datasets.NamedSplitAll",anchor:"datasets.NamedSplitAll",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/splits.py#L385"}}),ca=new j({props:{name:"class datasets.ReadInstruction",anchor:"datasets.ReadInstruction",parameters:[{name:"split_name",val:""},{name:"rounding",val:" = None"},{name:"from_",val:" = None"},{name:"to",val:" = None"},{name:"unit",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_reader.py#L482"}}),ut=new T({props:{anchor:"datasets.ReadInstruction.example",$$slots:{default:[ng]},$$scope:{ctx:k}}}),ma=new j({props:{name:"from_spec",anchor:"datasets.ReadInstruction.from_spec",parameters:[{name:"spec",val:""}],parametersDescription:[{anchor:"datasets.ReadInstruction.from_spec.spec",description:`<strong>spec</strong> (str) &#x2014; split(s) + optional slice(s) to read + optional rounding
if percents are used as the slicing unit. A slice can be specified,
using absolute numbers (int) or percentages (int). E.g.
<code>test</code>: test split.
<code>test + validation</code>: test split + validation split.
<code>test[10:]</code>: test split, minus its first 10 records.
<code>test[:10%]</code>: first 10% records of test split.
<code>test[:20%](pct1_dropremainder)</code>: first 10% records, rounded with
the <code>pct1_dropremainder</code> rounding.
<code>test[:-5%]+train[40%:60%]</code>: first 95% of test + middle 20% of
train.`,name:"spec"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_reader.py#L562",returnDescription:`
<p>ReadInstruction instance.</p>
`}}),ga=new j({props:{name:"to_absolute",anchor:"datasets.ReadInstruction.to_absolute",parameters:[{name:"name2len",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_reader.py#L630",returnDescription:`
<p>list of _AbsoluteInstruction instances (corresponds to the + in spec).</p>
`}}),fa=new dn({}),ua=new j({props:{name:"class datasets.Version",anchor:"datasets.Version",parameters:[{name:"version_str",val:": str"},{name:"description",val:": typing.Optional[str] = None"},{name:"major",val:": typing.Union[str, int, NoneType] = None"},{name:"minor",val:": typing.Union[str, int, NoneType] = None"},{name:"patch",val:": typing.Union[str, int, NoneType] = None"}],parametersDescription:[{anchor:"datasets.Version.version_str",description:"<strong>version_str</strong> (<code>str</code>) &#x2014; Eg: &#x201C;1.2.3&#x201D;.",name:"version_str"},{anchor:"datasets.Version.description",description:"<strong>description</strong> (<code>str</code>) &#x2014; A description of what is new in this version.",name:"description"},{anchor:"datasets.Version.version_str",description:"<strong>version_str</strong> (<code>str</code>) &#x2014; Eg: &#x201C;1.2.3&#x201D;.",name:"version_str"},{anchor:"datasets.Version.description",description:"<strong>description</strong> (<code>str</code>) &#x2014; A description of what is new in this version.",name:"description"},{anchor:"datasets.Version.major",description:"<strong>major</strong> (<code>str</code>) &#x2014;",name:"major"},{anchor:"datasets.Version.minor",description:"<strong>minor</strong> (<code>str</code>) &#x2014;",name:"minor"},{anchor:"datasets.Version.patch",description:"<strong>patch</strong> (<code>str</code>) &#x2014;",name:"patch"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/utils/version.py#L30"}}),$t=new T({props:{anchor:"datasets.Version.example",$$slots:{default:[og]},$$scope:{ctx:k}}}),{c(){d=r("meta"),h=i(),f=r("h1"),l=r("a"),u=r("span"),$(t.$$.fragment),g=i(),ls=r("span"),Xn=c("Builder classes"),pn=i(),ve=r("h2"),Ve=r("a"),ds=r("span"),$(Et.$$.fragment),Kn=i(),is=r("span"),Jn=c("Builders"),cn=i(),ee=r("p"),Yn=c("\u{1F917} Datasets relies on two main classes during the dataset building process: "),wa=r("a"),Qn=c("DatasetBuilder"),Zn=c(" and "),xa=r("a"),eo=c("BuilderConfig"),to=c("."),mn=i(),S=r("div"),$(yt.$$.fragment),ao=i(),ps=r("p"),so=c("Abstract base class for all datasets."),ro=i(),Ea=r("p"),cs=r("em"),no=c("DatasetBuilder"),oo=c(" has 3 key methods:"),lo=i(),we=r("ul"),Dt=r("li"),io=c("["),ms=r("em"),po=c("DatasetBuilder.info"),co=c(`]: Documents the dataset, including feature
names, types, and shapes, version, splits, citation, etc.`),mo=i(),kt=r("li"),go=c("["),gs=r("em"),fo=c("DatasetBuilder.download_and_prepare"),uo=c(`]: Downloads the source data
and writes it to disk.`),ho=i(),xe=r("li"),_o=c("["),fs=r("em"),$o=c("DatasetBuilder.as_dataset"),bo=c("]: Generates a ["),us=r("em"),vo=c("Dataset"),wo=c("]."),xo=i(),X=r("p"),hs=r("strong"),Eo=c("Configuration"),yo=c(": Some "),_s=r("em"),Do=c("DatasetBuilder"),ko=c(`s expose multiple variants of the
dataset by defining a [`),$s=r("em"),jo=c("BuilderConfig"),So=c(`] subclass and accepting a
config object (or name) on construction. Configurable datasets expose a
pre-defined set of configurations in [`),bs=r("em"),To=c("DatasetBuilder.builder_configs"),Io=c("]."),Bo=i(),te=r("div"),$(jt.$$.fragment),No=i(),vs=r("p"),Po=c("Return a Dataset for the specified split."),Ro=i(),$(Fe.$$.fragment),Co=i(),P=r("div"),$(St.$$.fragment),qo=i(),ws=r("p"),Ao=c("Downloads and prepares dataset for reading."),Lo=i(),xs=r("p"),Oo=c("Example:"),Mo=i(),ya=r("p"),Vo=c("Downdload and prepare the dataset as Arrow files that can be loaded as a Dataset using "),Es=r("em"),Fo=c("builder.as_dataset()"),Uo=i(),$(Ue.$$.fragment),zo=i(),ys=r("p"),Go=c("Downdload and prepare the dataset as sharded Parquet files locally"),Ho=i(),$(ze.$$.fragment),Wo=i(),Ds=r("p"),Xo=c("Downdload and prepare the dataset as sharded Parquet files in a cloud storage"),Ko=i(),$(Ge.$$.fragment),Jo=i(),ae=r("div"),$(Tt.$$.fragment),Yo=i(),ks=r("p"),Qo=c("Empty dict if doesn\u2019t exist"),Zo=i(),$(He.$$.fragment),el=i(),se=r("div"),$(It.$$.fragment),tl=i(),js=r("p"),al=c("Empty DatasetInfo if doesn\u2019t exist"),sl=i(),$(We.$$.fragment),rl=i(),Xe=r("div"),$(Bt.$$.fragment),nl=i(),Ss=r("p"),ol=c("Return the path of the module of this class or subclass."),gn=i(),Y=r("div"),$(Nt.$$.fragment),ll=i(),Ts=r("p"),dl=c("Base class for datasets with data generation based on dict generators."),il=i(),re=r("p"),Is=r("code"),pl=c("GeneratorBasedBuilder"),cl=c(` is a convenience class that abstracts away much
of the data writing and reading of `),Bs=r("code"),ml=c("DatasetBuilder"),gl=c(`. It expects subclasses to
implement generators of feature dictionaries across the dataset splits
(`),Ns=r("code"),fl=c("_split_generators"),ul=c("). See the method docstrings for details."),fn=i(),Ee=r("div"),$(Pt.$$.fragment),hl=i(),Ps=r("p"),_l=c("Beam based Builder."),un=i(),ye=r("div"),$(Rt.$$.fragment),$l=i(),Rs=r("p"),bl=c("Base class for datasets with data generation based on Arrow loading functions (CSV/JSON/Parquet)."),hn=i(),G=r("div"),$(Ct.$$.fragment),vl=i(),qt=r("p"),wl=c("Base class for "),Da=r("a"),xl=c("DatasetBuilder"),El=c(" data configuration."),yl=i(),At=r("p"),Dl=c(`DatasetBuilder subclasses with data configuration options should subclass
`),ka=r("a"),kl=c("BuilderConfig"),jl=c(" and add their own properties."),Sl=i(),ne=r("div"),$(Lt.$$.fragment),Tl=i(),Cs=r("p"),Il=c(`The config id is used to build the cache directory.
By default it is equal to the config name.
However the name of a config is not sufficient to have a unique identifier for the dataset being generated
since it doesn\u2019t take into account:`),Bl=i(),De=r("ul"),qs=r("li"),Nl=c("the config kwargs that can be used to overwrite attributes"),Pl=i(),As=r("li"),Rl=c("the custom features used to write the dataset"),Cl=i(),Ls=r("li"),ql=c(`the data_files for json/text/csv/pandas datasets
Therefore the config id is just the config name with an optional suffix based on these.`),_n=i(),ke=r("h2"),Ke=r("a"),Os=r("span"),$(Ot.$$.fragment),Al=i(),Ms=r("span"),Ll=c("Download"),$n=i(),R=r("div"),$(Mt.$$.fragment),Ol=i(),K=r("div"),$(Vt.$$.fragment),Ml=i(),Vs=r("p"),Vl=c("Download given URL(s)."),Fl=i(),je=r("p"),Ul=c("By default, if there is more than one URL to download, multiprocessing is used with maximum "),Fs=r("code"),zl=c("num_proc = 16"),Gl=c(`.
Pass customized `),Us=r("code"),Hl=c("download_config.num_proc"),Wl=c(" to change this behavior."),Xl=i(),$(Je.$$.fragment),Kl=i(),oe=r("div"),$(Ft.$$.fragment),Jl=i(),zs=r("p"),Yl=c("Download and extract given url_or_urls."),Ql=i(),$(Ye.$$.fragment),Zl=i(),le=r("div"),$(Ut.$$.fragment),ed=i(),zt=r("p"),td=c("Download given urls(s) by calling "),Gs=r("code"),ad=c("custom_download"),sd=c("."),rd=i(),$(Qe.$$.fragment),nd=i(),de=r("div"),$(Gt.$$.fragment),od=i(),Hs=r("p"),ld=c("Extract given path(s)."),dd=i(),$(Ze.$$.fragment),id=i(),ie=r("div"),$(Ht.$$.fragment),pd=i(),Ws=r("p"),cd=c("Iterate over files within an archive."),md=i(),$(et.$$.fragment),gd=i(),pe=r("div"),$(Wt.$$.fragment),fd=i(),Xs=r("p"),ud=c("Iterate over file paths."),hd=i(),$(tt.$$.fragment),_d=i(),at=r("div"),$(Xt.$$.fragment),$d=i(),Ks=r("p"),bd=c("Ship the files using Beam FileSystems to the pipeline temp dir."),bn=i(),q=r("div"),$(Kt.$$.fragment),vd=i(),H=r("p"),wd=c(`Download manager that uses the \u201D::\u201D separator to navigate through (possibly remote) compressed archives.
Contrary to the regular DownloadManager, the `),Js=r("code"),xd=c("download"),Ed=c(" and "),Ys=r("code"),yd=c("extract"),Dd=c(` methods don\u2019t actually download nor extract
data, but they rather return the path or url that could be opened using the `),Qs=r("code"),kd=c("xopen"),jd=c(` function which extends the
builtin `),Zs=r("code"),Sd=c("open"),Td=c(" function to stream data from remote files."),Id=i(),ce=r("div"),$(Jt.$$.fragment),Bd=i(),er=r("p"),Nd=c("Download given url(s)."),Pd=i(),$(st.$$.fragment),Rd=i(),me=r("div"),$(Yt.$$.fragment),Cd=i(),tr=r("p"),qd=c("Download and extract given url_or_urls."),Ad=i(),$(rt.$$.fragment),Ld=i(),ge=r("div"),$(Qt.$$.fragment),Od=i(),ar=r("p"),Md=c("Extract given path(s)."),Vd=i(),$(nt.$$.fragment),Fd=i(),fe=r("div"),$(Zt.$$.fragment),Ud=i(),sr=r("p"),zd=c("Iterate over files within an archive."),Gd=i(),$(ot.$$.fragment),Hd=i(),ue=r("div"),$(ea.$$.fragment),Wd=i(),rr=r("p"),Xd=c("Iterate over files."),Kd=i(),$(lt.$$.fragment),vn=i(),Se=r("div"),$(ta.$$.fragment),Jd=i(),nr=r("p"),Yd=c("Configuration for our cached path manager."),wn=i(),V=r("div"),$(aa.$$.fragment),Qd=i(),ja=r("p"),or=r("code"),Zd=c("Enum"),ei=c(" for how to treat pre-existing downloads and data."),ti=i(),sa=r("p"),ai=c("The default mode is "),lr=r("code"),si=c("REUSE_DATASET_IF_EXISTS"),ri=c(`, which will reuse both
raw downloads and the prepared dataset if they exist.`),ni=i(),dr=r("p"),oi=c("The generations modes:"),li=i(),ra=r("table"),ir=r("thead"),Te=r("tr"),xn=r("th"),di=i(),pr=r("th"),ii=c("Downloads"),pi=i(),cr=r("th"),ci=c("Dataset"),mi=i(),Ie=r("tbody"),Be=r("tr"),Sa=r("td"),mr=r("code"),gi=c("REUSE_DATASET_IF_EXISTS"),fi=c(" (default)"),ui=i(),gr=r("td"),hi=c("Reuse"),_i=i(),fr=r("td"),$i=c("Reuse"),bi=i(),Ne=r("tr"),ur=r("td"),hr=r("code"),vi=c("REUSE_CACHE_IF_EXISTS"),wi=i(),_r=r("td"),xi=c("Reuse"),Ei=i(),$r=r("td"),yi=c("Fresh"),Di=i(),Pe=r("tr"),br=r("td"),vr=r("code"),ki=c("FORCE_REDOWNLOAD"),ji=i(),wr=r("td"),Si=c("Fresh"),Ti=i(),xr=r("td"),Ii=c("Fresh"),En=i(),Re=r("h2"),dt=r("a"),Er=r("span"),$(na.$$.fragment),Bi=i(),yr=r("span"),Ni=c("Splits"),yn=i(),W=r("div"),$(oa.$$.fragment),Pi=i(),Dr=r("p"),Ri=c("Defines the split information for the generator."),Ci=i(),Ce=r("p"),qi=c(`This should be used as returned value of
`),kr=r("code"),Ai=c("GeneratorBasedBuilder._split_generators()"),Li=c(`.
See `),jr=r("code"),Oi=c("GeneratorBasedBuilder._split_generators()"),Mi=c(` for more info and example
of usage.`),Vi=i(),$(it.$$.fragment),Dn=i(),A=r("div"),$(la.$$.fragment),Fi=i(),Ta=r("p"),Sr=r("code"),Ui=c("Enum"),zi=c(" for dataset splits."),Gi=i(),Tr=r("p"),Hi=c(`Datasets are typically split into different subsets to be used at various
stages of training and evaluation.`),Wi=i(),Q=r("ul"),Ia=r("li"),Ir=r("code"),Xi=c("TRAIN"),Ki=c(": the training data."),Ji=i(),Ba=r("li"),Br=r("code"),Yi=c("VALIDATION"),Qi=c(`: the validation data. If present, this is typically used as
evaluation data while iterating on a model (e.g. changing hyperparameters,
model architecture, etc.).`),Zi=i(),Na=r("li"),Nr=r("code"),ep=c("TEST"),tp=c(`: the testing data. This is the data to report metrics on. Typically
you do not want to use this during model iteration as you may overfit to it.`),ap=i(),Pa=r("li"),Pr=r("code"),sp=c("ALL"),rp=c(": the union of all defined dataset splits."),np=i(),Ra=r("p"),op=c("Note: All splits, including compositions inherit from "),Rr=r("code"),lp=c("datasets.SplitBase"),dp=i(),da=r("p"),ip=c("See the :doc:"),Cr=r("code"),pp=c("guide on splits </loading>"),cp=c(" for more information."),mp=i(),$(pt.$$.fragment),kn=i(),C=r("div"),$(ia.$$.fragment),gp=i(),qr=r("p"),fp=c("Descriptor corresponding to a named split (train, test, \u2026)."),up=i(),$(ct.$$.fragment),hp=i(),Ar=r("p"),_p=c("Warning:"),$p=i(),$(mt.$$.fragment),bp=i(),Lr=r("p"),vp=c("Warning:"),wp=i(),$(gt.$$.fragment),xp=i(),$(ft.$$.fragment),jn=i(),qe=r("div"),$(pa.$$.fragment),Ep=i(),Or=r("p"),yp=c("Split corresponding to the union of all defined dataset splits."),Sn=i(),F=r("div"),$(ca.$$.fragment),Dp=i(),Mr=r("p"),kp=c("Reading instruction for a dataset."),jp=i(),$(ut.$$.fragment),Sp=i(),ht=r("div"),$(ma.$$.fragment),Tp=i(),Vr=r("p"),Ip=c("Creates a ReadInstruction instance out of a string spec."),Bp=i(),he=r("div"),$(ga.$$.fragment),Np=i(),Fr=r("p"),Pp=c("Translate instruction into a list of absolute instructions."),Rp=i(),Ur=r("p"),Cp=c("Those absolute instructions are then to be added together."),Tn=i(),Ae=r("h2"),_t=r("a"),zr=r("span"),$(fa.$$.fragment),qp=i(),Gr=r("span"),Ap=c("Version"),In=i(),Z=r("div"),$(ua.$$.fragment),Lp=i(),Hr=r("p"),Op=c("Dataset version MAJOR.MINOR.PATCH."),Mp=i(),$($t.$$.fragment),this.h()},l(s){const _=Rm('[data-svelte="svelte-1phssyn"]',document.head);d=n(_,"META",{name:!0,content:!0}),_.forEach(a),h=p(s),f=n(s,"H1",{class:!0});var ha=o(f);l=n(ha,"A",{id:!0,class:!0,href:!0});var Wr=o(l);u=n(Wr,"SPAN",{});var Xr=o(u);b(t.$$.fragment,Xr),Xr.forEach(a),Wr.forEach(a),g=p(ha),ls=n(ha,"SPAN",{});var Kr=o(ls);Xn=m(Kr,"Builder classes"),Kr.forEach(a),ha.forEach(a),pn=p(s),ve=n(s,"H2",{class:!0});var _a=o(ve);Ve=n(_a,"A",{id:!0,class:!0,href:!0});var Jr=o(Ve);ds=n(Jr,"SPAN",{});var Yr=o(ds);b(Et.$$.fragment,Yr),Yr.forEach(a),Jr.forEach(a),Kn=p(_a),is=n(_a,"SPAN",{});var Qr=o(is);Jn=m(Qr,"Builders"),Qr.forEach(a),_a.forEach(a),cn=p(s),ee=n(s,"P",{});var Le=o(ee);Yn=m(Le,"\u{1F917} Datasets relies on two main classes during the dataset building process: "),wa=n(Le,"A",{href:!0});var Zr=o(wa);Qn=m(Zr,"DatasetBuilder"),Zr.forEach(a),Zn=m(Le," and "),xa=n(Le,"A",{href:!0});var en=o(xa);eo=m(en,"BuilderConfig"),en.forEach(a),to=m(Le,"."),Le.forEach(a),mn=p(s),S=n(s,"DIV",{class:!0});var N=o(S);b(yt.$$.fragment,N),ao=p(N),ps=n(N,"P",{});var tn=o(ps);so=m(tn,"Abstract base class for all datasets."),tn.forEach(a),ro=p(N),Ea=n(N,"P",{});var Ca=o(Ea);cs=n(Ca,"EM",{});var an=o(cs);no=m(an,"DatasetBuilder"),an.forEach(a),oo=m(Ca," has 3 key methods:"),Ca.forEach(a),lo=p(N),we=n(N,"UL",{});var Oe=o(we);Dt=n(Oe,"LI",{});var $a=o(Dt);io=m($a,"["),ms=n($a,"EM",{});var sn=o(ms);po=m(sn,"DatasetBuilder.info"),sn.forEach(a),co=m($a,`]: Documents the dataset, including feature
names, types, and shapes, version, splits, citation, etc.`),$a.forEach(a),mo=p(Oe),kt=n(Oe,"LI",{});var ba=o(kt);go=m(ba,"["),gs=n(ba,"EM",{});var rn=o(gs);fo=m(rn,"DatasetBuilder.download_and_prepare"),rn.forEach(a),uo=m(ba,`]: Downloads the source data
and writes it to disk.`),ba.forEach(a),ho=p(Oe),xe=n(Oe,"LI",{});var Me=o(xe);_o=m(Me,"["),fs=n(Me,"EM",{});var nn=o(fs);$o=m(nn,"DatasetBuilder.as_dataset"),nn.forEach(a),bo=m(Me,"]: Generates a ["),us=n(Me,"EM",{});var on=o(us);vo=m(on,"Dataset"),on.forEach(a),wo=m(Me,"]."),Me.forEach(a),Oe.forEach(a),xo=p(N),X=n(N,"P",{});var J=o(X);hs=n(J,"STRONG",{});var ln=o(hs);Eo=m(ln,"Configuration"),ln.forEach(a),yo=m(J,": Some "),_s=n(J,"EM",{});var Jp=o(_s);Do=m(Jp,"DatasetBuilder"),Jp.forEach(a),ko=m(J,`s expose multiple variants of the
dataset by defining a [`),$s=n(J,"EM",{});var Yp=o($s);jo=m(Yp,"BuilderConfig"),Yp.forEach(a),So=m(J,`] subclass and accepting a
config object (or name) on construction. Configurable datasets expose a
pre-defined set of configurations in [`),bs=n(J,"EM",{});var Qp=o(bs);To=m(Qp,"DatasetBuilder.builder_configs"),Qp.forEach(a),Io=m(J,"]."),J.forEach(a),Bo=p(N),te=n(N,"DIV",{class:!0});var qa=o(te);b(jt.$$.fragment,qa),No=p(qa),vs=n(qa,"P",{});var Zp=o(vs);Po=m(Zp,"Return a Dataset for the specified split."),Zp.forEach(a),Ro=p(qa),b(Fe.$$.fragment,qa),qa.forEach(a),Co=p(N),P=n(N,"DIV",{class:!0});var L=o(P);b(St.$$.fragment,L),qo=p(L),ws=n(L,"P",{});var ec=o(ws);Ao=m(ec,"Downloads and prepares dataset for reading."),ec.forEach(a),Lo=p(L),xs=n(L,"P",{});var tc=o(xs);Oo=m(tc,"Example:"),tc.forEach(a),Mo=p(L),ya=n(L,"P",{});var Vp=o(ya);Vo=m(Vp,"Downdload and prepare the dataset as Arrow files that can be loaded as a Dataset using "),Es=n(Vp,"EM",{});var ac=o(Es);Fo=m(ac,"builder.as_dataset()"),ac.forEach(a),Vp.forEach(a),Uo=p(L),b(Ue.$$.fragment,L),zo=p(L),ys=n(L,"P",{});var sc=o(ys);Go=m(sc,"Downdload and prepare the dataset as sharded Parquet files locally"),sc.forEach(a),Ho=p(L),b(ze.$$.fragment,L),Wo=p(L),Ds=n(L,"P",{});var rc=o(Ds);Xo=m(rc,"Downdload and prepare the dataset as sharded Parquet files in a cloud storage"),rc.forEach(a),Ko=p(L),b(Ge.$$.fragment,L),L.forEach(a),Jo=p(N),ae=n(N,"DIV",{class:!0});var Aa=o(ae);b(Tt.$$.fragment,Aa),Yo=p(Aa),ks=n(Aa,"P",{});var nc=o(ks);Qo=m(nc,"Empty dict if doesn\u2019t exist"),nc.forEach(a),Zo=p(Aa),b(He.$$.fragment,Aa),Aa.forEach(a),el=p(N),se=n(N,"DIV",{class:!0});var La=o(se);b(It.$$.fragment,La),tl=p(La),js=n(La,"P",{});var oc=o(js);al=m(oc,"Empty DatasetInfo if doesn\u2019t exist"),oc.forEach(a),sl=p(La),b(We.$$.fragment,La),La.forEach(a),rl=p(N),Xe=n(N,"DIV",{class:!0});var Nn=o(Xe);b(Bt.$$.fragment,Nn),nl=p(Nn),Ss=n(Nn,"P",{});var lc=o(Ss);ol=m(lc,"Return the path of the module of this class or subclass."),lc.forEach(a),Nn.forEach(a),N.forEach(a),gn=p(s),Y=n(s,"DIV",{class:!0});var Oa=o(Y);b(Nt.$$.fragment,Oa),ll=p(Oa),Ts=n(Oa,"P",{});var dc=o(Ts);dl=m(dc,"Base class for datasets with data generation based on dict generators."),dc.forEach(a),il=p(Oa),re=n(Oa,"P",{});var va=o(re);Is=n(va,"CODE",{});var ic=o(Is);pl=m(ic,"GeneratorBasedBuilder"),ic.forEach(a),cl=m(va,` is a convenience class that abstracts away much
of the data writing and reading of `),Bs=n(va,"CODE",{});var pc=o(Bs);ml=m(pc,"DatasetBuilder"),pc.forEach(a),gl=m(va,`. It expects subclasses to
implement generators of feature dictionaries across the dataset splits
(`),Ns=n(va,"CODE",{});var cc=o(Ns);fl=m(cc,"_split_generators"),cc.forEach(a),ul=m(va,"). See the method docstrings for details."),va.forEach(a),Oa.forEach(a),fn=p(s),Ee=n(s,"DIV",{class:!0});var Pn=o(Ee);b(Pt.$$.fragment,Pn),hl=p(Pn),Ps=n(Pn,"P",{});var mc=o(Ps);_l=m(mc,"Beam based Builder."),mc.forEach(a),Pn.forEach(a),un=p(s),ye=n(s,"DIV",{class:!0});var Rn=o(ye);b(Rt.$$.fragment,Rn),$l=p(Rn),Rs=n(Rn,"P",{});var gc=o(Rs);bl=m(gc,"Base class for datasets with data generation based on Arrow loading functions (CSV/JSON/Parquet)."),gc.forEach(a),Rn.forEach(a),hn=p(s),G=n(s,"DIV",{class:!0});var bt=o(G);b(Ct.$$.fragment,bt),vl=p(bt),qt=n(bt,"P",{});var Cn=o(qt);wl=m(Cn,"Base class for "),Da=n(Cn,"A",{href:!0});var fc=o(Da);xl=m(fc,"DatasetBuilder"),fc.forEach(a),El=m(Cn," data configuration."),Cn.forEach(a),yl=p(bt),At=n(bt,"P",{});var qn=o(At);Dl=m(qn,`DatasetBuilder subclasses with data configuration options should subclass
`),ka=n(qn,"A",{href:!0});var uc=o(ka);kl=m(uc,"BuilderConfig"),uc.forEach(a),jl=m(qn," and add their own properties."),qn.forEach(a),Sl=p(bt),ne=n(bt,"DIV",{class:!0});var Ma=o(ne);b(Lt.$$.fragment,Ma),Tl=p(Ma),Cs=n(Ma,"P",{});var hc=o(Cs);Il=m(hc,`The config id is used to build the cache directory.
By default it is equal to the config name.
However the name of a config is not sufficient to have a unique identifier for the dataset being generated
since it doesn\u2019t take into account:`),hc.forEach(a),Bl=p(Ma),De=n(Ma,"UL",{});var Va=o(De);qs=n(Va,"LI",{});var _c=o(qs);Nl=m(_c,"the config kwargs that can be used to overwrite attributes"),_c.forEach(a),Pl=p(Va),As=n(Va,"LI",{});var $c=o(As);Rl=m($c,"the custom features used to write the dataset"),$c.forEach(a),Cl=p(Va),Ls=n(Va,"LI",{});var bc=o(Ls);ql=m(bc,`the data_files for json/text/csv/pandas datasets
Therefore the config id is just the config name with an optional suffix based on these.`),bc.forEach(a),Va.forEach(a),Ma.forEach(a),bt.forEach(a),_n=p(s),ke=n(s,"H2",{class:!0});var An=o(ke);Ke=n(An,"A",{id:!0,class:!0,href:!0});var vc=o(Ke);Os=n(vc,"SPAN",{});var wc=o(Os);b(Ot.$$.fragment,wc),wc.forEach(a),vc.forEach(a),Al=p(An),Ms=n(An,"SPAN",{});var xc=o(Ms);Ll=m(xc,"Download"),xc.forEach(a),An.forEach(a),$n=p(s),R=n(s,"DIV",{class:!0});var O=o(R);b(Mt.$$.fragment,O),Ol=p(O),K=n(O,"DIV",{class:!0});var vt=o(K);b(Vt.$$.fragment,vt),Ml=p(vt),Vs=n(vt,"P",{});var Ec=o(Vs);Vl=m(Ec,"Download given URL(s)."),Ec.forEach(a),Fl=p(vt),je=n(vt,"P",{});var Fa=o(je);Ul=m(Fa,"By default, if there is more than one URL to download, multiprocessing is used with maximum "),Fs=n(Fa,"CODE",{});var yc=o(Fs);zl=m(yc,"num_proc = 16"),yc.forEach(a),Gl=m(Fa,`.
Pass customized `),Us=n(Fa,"CODE",{});var Dc=o(Us);Hl=m(Dc,"download_config.num_proc"),Dc.forEach(a),Wl=m(Fa," to change this behavior."),Fa.forEach(a),Xl=p(vt),b(Je.$$.fragment,vt),vt.forEach(a),Kl=p(O),oe=n(O,"DIV",{class:!0});var Ua=o(oe);b(Ft.$$.fragment,Ua),Jl=p(Ua),zs=n(Ua,"P",{});var kc=o(zs);Yl=m(kc,"Download and extract given url_or_urls."),kc.forEach(a),Ql=p(Ua),b(Ye.$$.fragment,Ua),Ua.forEach(a),Zl=p(O),le=n(O,"DIV",{class:!0});var za=o(le);b(Ut.$$.fragment,za),ed=p(za),zt=n(za,"P",{});var Ln=o(zt);td=m(Ln,"Download given urls(s) by calling "),Gs=n(Ln,"CODE",{});var jc=o(Gs);ad=m(jc,"custom_download"),jc.forEach(a),sd=m(Ln,"."),Ln.forEach(a),rd=p(za),b(Qe.$$.fragment,za),za.forEach(a),nd=p(O),de=n(O,"DIV",{class:!0});var Ga=o(de);b(Gt.$$.fragment,Ga),od=p(Ga),Hs=n(Ga,"P",{});var Sc=o(Hs);ld=m(Sc,"Extract given path(s)."),Sc.forEach(a),dd=p(Ga),b(Ze.$$.fragment,Ga),Ga.forEach(a),id=p(O),ie=n(O,"DIV",{class:!0});var Ha=o(ie);b(Ht.$$.fragment,Ha),pd=p(Ha),Ws=n(Ha,"P",{});var Tc=o(Ws);cd=m(Tc,"Iterate over files within an archive."),Tc.forEach(a),md=p(Ha),b(et.$$.fragment,Ha),Ha.forEach(a),gd=p(O),pe=n(O,"DIV",{class:!0});var Wa=o(pe);b(Wt.$$.fragment,Wa),fd=p(Wa),Xs=n(Wa,"P",{});var Ic=o(Xs);ud=m(Ic,"Iterate over file paths."),Ic.forEach(a),hd=p(Wa),b(tt.$$.fragment,Wa),Wa.forEach(a),_d=p(O),at=n(O,"DIV",{class:!0});var On=o(at);b(Xt.$$.fragment,On),$d=p(On),Ks=n(On,"P",{});var Bc=o(Ks);bd=m(Bc,"Ship the files using Beam FileSystems to the pipeline temp dir."),Bc.forEach(a),On.forEach(a),O.forEach(a),bn=p(s),q=n(s,"DIV",{class:!0});var U=o(q);b(Kt.$$.fragment,U),vd=p(U),H=n(U,"P",{});var _e=o(H);wd=m(_e,`Download manager that uses the \u201D::\u201D separator to navigate through (possibly remote) compressed archives.
Contrary to the regular DownloadManager, the `),Js=n(_e,"CODE",{});var Nc=o(Js);xd=m(Nc,"download"),Nc.forEach(a),Ed=m(_e," and "),Ys=n(_e,"CODE",{});var Pc=o(Ys);yd=m(Pc,"extract"),Pc.forEach(a),Dd=m(_e,` methods don\u2019t actually download nor extract
data, but they rather return the path or url that could be opened using the `),Qs=n(_e,"CODE",{});var Rc=o(Qs);kd=m(Rc,"xopen"),Rc.forEach(a),jd=m(_e,` function which extends the
builtin `),Zs=n(_e,"CODE",{});var Cc=o(Zs);Sd=m(Cc,"open"),Cc.forEach(a),Td=m(_e," function to stream data from remote files."),_e.forEach(a),Id=p(U),ce=n(U,"DIV",{class:!0});var Xa=o(ce);b(Jt.$$.fragment,Xa),Bd=p(Xa),er=n(Xa,"P",{});var qc=o(er);Nd=m(qc,"Download given url(s)."),qc.forEach(a),Pd=p(Xa),b(st.$$.fragment,Xa),Xa.forEach(a),Rd=p(U),me=n(U,"DIV",{class:!0});var Ka=o(me);b(Yt.$$.fragment,Ka),Cd=p(Ka),tr=n(Ka,"P",{});var Ac=o(tr);qd=m(Ac,"Download and extract given url_or_urls."),Ac.forEach(a),Ad=p(Ka),b(rt.$$.fragment,Ka),Ka.forEach(a),Ld=p(U),ge=n(U,"DIV",{class:!0});var Ja=o(ge);b(Qt.$$.fragment,Ja),Od=p(Ja),ar=n(Ja,"P",{});var Lc=o(ar);Md=m(Lc,"Extract given path(s)."),Lc.forEach(a),Vd=p(Ja),b(nt.$$.fragment,Ja),Ja.forEach(a),Fd=p(U),fe=n(U,"DIV",{class:!0});var Ya=o(fe);b(Zt.$$.fragment,Ya),Ud=p(Ya),sr=n(Ya,"P",{});var Oc=o(sr);zd=m(Oc,"Iterate over files within an archive."),Oc.forEach(a),Gd=p(Ya),b(ot.$$.fragment,Ya),Ya.forEach(a),Hd=p(U),ue=n(U,"DIV",{class:!0});var Qa=o(ue);b(ea.$$.fragment,Qa),Wd=p(Qa),rr=n(Qa,"P",{});var Mc=o(rr);Xd=m(Mc,"Iterate over files."),Mc.forEach(a),Kd=p(Qa),b(lt.$$.fragment,Qa),Qa.forEach(a),U.forEach(a),vn=p(s),Se=n(s,"DIV",{class:!0});var Mn=o(Se);b(ta.$$.fragment,Mn),Jd=p(Mn),nr=n(Mn,"P",{});var Vc=o(nr);Yd=m(Vc,"Configuration for our cached path manager."),Vc.forEach(a),Mn.forEach(a),wn=p(s),V=n(s,"DIV",{class:!0});var $e=o(V);b(aa.$$.fragment,$e),Qd=p($e),ja=n($e,"P",{});var Fp=o(ja);or=n(Fp,"CODE",{});var Fc=o(or);Zd=m(Fc,"Enum"),Fc.forEach(a),ei=m(Fp," for how to treat pre-existing downloads and data."),Fp.forEach(a),ti=p($e),sa=n($e,"P",{});var Vn=o(sa);ai=m(Vn,"The default mode is "),lr=n(Vn,"CODE",{});var Uc=o(lr);si=m(Uc,"REUSE_DATASET_IF_EXISTS"),Uc.forEach(a),ri=m(Vn,`, which will reuse both
raw downloads and the prepared dataset if they exist.`),Vn.forEach(a),ni=p($e),dr=n($e,"P",{});var zc=o(dr);oi=m(zc,"The generations modes:"),zc.forEach(a),li=p($e),ra=n($e,"TABLE",{});var Fn=o(ra);ir=n(Fn,"THEAD",{});var Gc=o(ir);Te=n(Gc,"TR",{});var Za=o(Te);xn=n(Za,"TH",{}),o(xn).forEach(a),di=p(Za),pr=n(Za,"TH",{});var Hc=o(pr);ii=m(Hc,"Downloads"),Hc.forEach(a),pi=p(Za),cr=n(Za,"TH",{});var Wc=o(cr);ci=m(Wc,"Dataset"),Wc.forEach(a),Za.forEach(a),Gc.forEach(a),mi=p(Fn),Ie=n(Fn,"TBODY",{});var es=o(Ie);Be=n(es,"TR",{});var ts=o(Be);Sa=n(ts,"TD",{});var Up=o(Sa);mr=n(Up,"CODE",{});var Xc=o(mr);gi=m(Xc,"REUSE_DATASET_IF_EXISTS"),Xc.forEach(a),fi=m(Up," (default)"),Up.forEach(a),ui=p(ts),gr=n(ts,"TD",{});var Kc=o(gr);hi=m(Kc,"Reuse"),Kc.forEach(a),_i=p(ts),fr=n(ts,"TD",{});var Jc=o(fr);$i=m(Jc,"Reuse"),Jc.forEach(a),ts.forEach(a),bi=p(es),Ne=n(es,"TR",{});var as=o(Ne);ur=n(as,"TD",{});var Yc=o(ur);hr=n(Yc,"CODE",{});var Qc=o(hr);vi=m(Qc,"REUSE_CACHE_IF_EXISTS"),Qc.forEach(a),Yc.forEach(a),wi=p(as),_r=n(as,"TD",{});var Zc=o(_r);xi=m(Zc,"Reuse"),Zc.forEach(a),Ei=p(as),$r=n(as,"TD",{});var em=o($r);yi=m(em,"Fresh"),em.forEach(a),as.forEach(a),Di=p(es),Pe=n(es,"TR",{});var ss=o(Pe);br=n(ss,"TD",{});var tm=o(br);vr=n(tm,"CODE",{});var am=o(vr);ki=m(am,"FORCE_REDOWNLOAD"),am.forEach(a),tm.forEach(a),ji=p(ss),wr=n(ss,"TD",{});var sm=o(wr);Si=m(sm,"Fresh"),sm.forEach(a),Ti=p(ss),xr=n(ss,"TD",{});var rm=o(xr);Ii=m(rm,"Fresh"),rm.forEach(a),ss.forEach(a),es.forEach(a),Fn.forEach(a),$e.forEach(a),En=p(s),Re=n(s,"H2",{class:!0});var Un=o(Re);dt=n(Un,"A",{id:!0,class:!0,href:!0});var nm=o(dt);Er=n(nm,"SPAN",{});var om=o(Er);b(na.$$.fragment,om),om.forEach(a),nm.forEach(a),Bi=p(Un),yr=n(Un,"SPAN",{});var lm=o(yr);Ni=m(lm,"Splits"),lm.forEach(a),Un.forEach(a),yn=p(s),W=n(s,"DIV",{class:!0});var wt=o(W);b(oa.$$.fragment,wt),Pi=p(wt),Dr=n(wt,"P",{});var dm=o(Dr);Ri=m(dm,"Defines the split information for the generator."),dm.forEach(a),Ci=p(wt),Ce=n(wt,"P",{});var rs=o(Ce);qi=m(rs,`This should be used as returned value of
`),kr=n(rs,"CODE",{});var im=o(kr);Ai=m(im,"GeneratorBasedBuilder._split_generators()"),im.forEach(a),Li=m(rs,`.
See `),jr=n(rs,"CODE",{});var pm=o(jr);Oi=m(pm,"GeneratorBasedBuilder._split_generators()"),pm.forEach(a),Mi=m(rs,` for more info and example
of usage.`),rs.forEach(a),Vi=p(wt),b(it.$$.fragment,wt),wt.forEach(a),Dn=p(s),A=n(s,"DIV",{class:!0});var z=o(A);b(la.$$.fragment,z),Fi=p(z),Ta=n(z,"P",{});var zp=o(Ta);Sr=n(zp,"CODE",{});var cm=o(Sr);Ui=m(cm,"Enum"),cm.forEach(a),zi=m(zp," for dataset splits."),zp.forEach(a),Gi=p(z),Tr=n(z,"P",{});var mm=o(Tr);Hi=m(mm,`Datasets are typically split into different subsets to be used at various
stages of training and evaluation.`),mm.forEach(a),Wi=p(z),Q=n(z,"UL",{});var xt=o(Q);Ia=n(xt,"LI",{});var Gp=o(Ia);Ir=n(Gp,"CODE",{});var gm=o(Ir);Xi=m(gm,"TRAIN"),gm.forEach(a),Ki=m(Gp,": the training data."),Gp.forEach(a),Ji=p(xt),Ba=n(xt,"LI",{});var Hp=o(Ba);Br=n(Hp,"CODE",{});var fm=o(Br);Yi=m(fm,"VALIDATION"),fm.forEach(a),Qi=m(Hp,`: the validation data. If present, this is typically used as
evaluation data while iterating on a model (e.g. changing hyperparameters,
model architecture, etc.).`),Hp.forEach(a),Zi=p(xt),Na=n(xt,"LI",{});var Wp=o(Na);Nr=n(Wp,"CODE",{});var um=o(Nr);ep=m(um,"TEST"),um.forEach(a),tp=m(Wp,`: the testing data. This is the data to report metrics on. Typically
you do not want to use this during model iteration as you may overfit to it.`),Wp.forEach(a),ap=p(xt),Pa=n(xt,"LI",{});var Xp=o(Pa);Pr=n(Xp,"CODE",{});var hm=o(Pr);sp=m(hm,"ALL"),hm.forEach(a),rp=m(Xp,": the union of all defined dataset splits."),Xp.forEach(a),xt.forEach(a),np=p(z),Ra=n(z,"P",{});var Kp=o(Ra);op=m(Kp,"Note: All splits, including compositions inherit from "),Rr=n(Kp,"CODE",{});var _m=o(Rr);lp=m(_m,"datasets.SplitBase"),_m.forEach(a),Kp.forEach(a),dp=p(z),da=n(z,"P",{});var zn=o(da);ip=m(zn,"See the :doc:"),Cr=n(zn,"CODE",{});var $m=o(Cr);pp=m($m,"guide on splits </loading>"),$m.forEach(a),cp=m(zn," for more information."),zn.forEach(a),mp=p(z),b(pt.$$.fragment,z),z.forEach(a),kn=p(s),C=n(s,"DIV",{class:!0});var M=o(C);b(ia.$$.fragment,M),gp=p(M),qr=n(M,"P",{});var bm=o(qr);fp=m(bm,"Descriptor corresponding to a named split (train, test, \u2026)."),bm.forEach(a),up=p(M),b(ct.$$.fragment,M),hp=p(M),Ar=n(M,"P",{});var vm=o(Ar);_p=m(vm,"Warning:"),vm.forEach(a),$p=p(M),b(mt.$$.fragment,M),bp=p(M),Lr=n(M,"P",{});var wm=o(Lr);vp=m(wm,"Warning:"),wm.forEach(a),wp=p(M),b(gt.$$.fragment,M),xp=p(M),b(ft.$$.fragment,M),M.forEach(a),jn=p(s),qe=n(s,"DIV",{class:!0});var Gn=o(qe);b(pa.$$.fragment,Gn),Ep=p(Gn),Or=n(Gn,"P",{});var xm=o(Or);yp=m(xm,"Split corresponding to the union of all defined dataset splits."),xm.forEach(a),Gn.forEach(a),Sn=p(s),F=n(s,"DIV",{class:!0});var be=o(F);b(ca.$$.fragment,be),Dp=p(be),Mr=n(be,"P",{});var Em=o(Mr);kp=m(Em,"Reading instruction for a dataset."),Em.forEach(a),jp=p(be),b(ut.$$.fragment,be),Sp=p(be),ht=n(be,"DIV",{class:!0});var Hn=o(ht);b(ma.$$.fragment,Hn),Tp=p(Hn),Vr=n(Hn,"P",{});var ym=o(Vr);Ip=m(ym,"Creates a ReadInstruction instance out of a string spec."),ym.forEach(a),Hn.forEach(a),Bp=p(be),he=n(be,"DIV",{class:!0});var ns=o(he);b(ga.$$.fragment,ns),Np=p(ns),Fr=n(ns,"P",{});var Dm=o(Fr);Pp=m(Dm,"Translate instruction into a list of absolute instructions."),Dm.forEach(a),Rp=p(ns),Ur=n(ns,"P",{});var km=o(Ur);Cp=m(km,"Those absolute instructions are then to be added together."),km.forEach(a),ns.forEach(a),be.forEach(a),Tn=p(s),Ae=n(s,"H2",{class:!0});var Wn=o(Ae);_t=n(Wn,"A",{id:!0,class:!0,href:!0});var jm=o(_t);zr=n(jm,"SPAN",{});var Sm=o(zr);b(fa.$$.fragment,Sm),Sm.forEach(a),jm.forEach(a),qp=p(Wn),Gr=n(Wn,"SPAN",{});var Tm=o(Gr);Ap=m(Tm,"Version"),Tm.forEach(a),Wn.forEach(a),In=p(s),Z=n(s,"DIV",{class:!0});var os=o(Z);b(ua.$$.fragment,os),Lp=p(os),Hr=n(os,"P",{});var Im=o(Hr);Op=m(Im,"Dataset version MAJOR.MINOR.PATCH."),Im.forEach(a),Mp=p(os),b($t.$$.fragment,os),os.forEach(a),this.h()},h(){D(d,"name","hf:doc:metadata"),D(d,"content",JSON.stringify(dg)),D(l,"id","builder-classes"),D(l,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),D(l,"href","#builder-classes"),D(f,"class","relative group"),D(Ve,"id","datasets.DatasetBuilder"),D(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),D(Ve,"href","#datasets.DatasetBuilder"),D(ve,"class","relative group"),D(wa,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.DatasetBuilder"),D(xa,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.BuilderConfig"),D(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(Da,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.DatasetBuilder"),D(ka,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.BuilderConfig"),D(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(Ke,"id","datasets.DownloadManager"),D(Ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),D(Ke,"href","#datasets.DownloadManager"),D(ke,"class","relative group"),D(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(dt,"id","datasets.SplitGenerator"),D(dt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),D(dt,"href","#datasets.SplitGenerator"),D(Re,"class","relative group"),D(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),D(_t,"id","datasets.Version"),D(_t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),D(_t,"href","#datasets.Version"),D(Ae,"class","relative group"),D(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(s,_){e(document.head,d),y(s,h,_),y(s,f,_),e(f,l),e(l,u),v(t,u,null),e(f,g),e(f,ls),e(ls,Xn),y(s,pn,_),y(s,ve,_),e(ve,Ve),e(Ve,ds),v(Et,ds,null),e(ve,Kn),e(ve,is),e(is,Jn),y(s,cn,_),y(s,ee,_),e(ee,Yn),e(ee,wa),e(wa,Qn),e(ee,Zn),e(ee,xa),e(xa,eo),e(ee,to),y(s,mn,_),y(s,S,_),v(yt,S,null),e(S,ao),e(S,ps),e(ps,so),e(S,ro),e(S,Ea),e(Ea,cs),e(cs,no),e(Ea,oo),e(S,lo),e(S,we),e(we,Dt),e(Dt,io),e(Dt,ms),e(ms,po),e(Dt,co),e(we,mo),e(we,kt),e(kt,go),e(kt,gs),e(gs,fo),e(kt,uo),e(we,ho),e(we,xe),e(xe,_o),e(xe,fs),e(fs,$o),e(xe,bo),e(xe,us),e(us,vo),e(xe,wo),e(S,xo),e(S,X),e(X,hs),e(hs,Eo),e(X,yo),e(X,_s),e(_s,Do),e(X,ko),e(X,$s),e($s,jo),e(X,So),e(X,bs),e(bs,To),e(X,Io),e(S,Bo),e(S,te),v(jt,te,null),e(te,No),e(te,vs),e(vs,Po),e(te,Ro),v(Fe,te,null),e(S,Co),e(S,P),v(St,P,null),e(P,qo),e(P,ws),e(ws,Ao),e(P,Lo),e(P,xs),e(xs,Oo),e(P,Mo),e(P,ya),e(ya,Vo),e(ya,Es),e(Es,Fo),e(P,Uo),v(Ue,P,null),e(P,zo),e(P,ys),e(ys,Go),e(P,Ho),v(ze,P,null),e(P,Wo),e(P,Ds),e(Ds,Xo),e(P,Ko),v(Ge,P,null),e(S,Jo),e(S,ae),v(Tt,ae,null),e(ae,Yo),e(ae,ks),e(ks,Qo),e(ae,Zo),v(He,ae,null),e(S,el),e(S,se),v(It,se,null),e(se,tl),e(se,js),e(js,al),e(se,sl),v(We,se,null),e(S,rl),e(S,Xe),v(Bt,Xe,null),e(Xe,nl),e(Xe,Ss),e(Ss,ol),y(s,gn,_),y(s,Y,_),v(Nt,Y,null),e(Y,ll),e(Y,Ts),e(Ts,dl),e(Y,il),e(Y,re),e(re,Is),e(Is,pl),e(re,cl),e(re,Bs),e(Bs,ml),e(re,gl),e(re,Ns),e(Ns,fl),e(re,ul),y(s,fn,_),y(s,Ee,_),v(Pt,Ee,null),e(Ee,hl),e(Ee,Ps),e(Ps,_l),y(s,un,_),y(s,ye,_),v(Rt,ye,null),e(ye,$l),e(ye,Rs),e(Rs,bl),y(s,hn,_),y(s,G,_),v(Ct,G,null),e(G,vl),e(G,qt),e(qt,wl),e(qt,Da),e(Da,xl),e(qt,El),e(G,yl),e(G,At),e(At,Dl),e(At,ka),e(ka,kl),e(At,jl),e(G,Sl),e(G,ne),v(Lt,ne,null),e(ne,Tl),e(ne,Cs),e(Cs,Il),e(ne,Bl),e(ne,De),e(De,qs),e(qs,Nl),e(De,Pl),e(De,As),e(As,Rl),e(De,Cl),e(De,Ls),e(Ls,ql),y(s,_n,_),y(s,ke,_),e(ke,Ke),e(Ke,Os),v(Ot,Os,null),e(ke,Al),e(ke,Ms),e(Ms,Ll),y(s,$n,_),y(s,R,_),v(Mt,R,null),e(R,Ol),e(R,K),v(Vt,K,null),e(K,Ml),e(K,Vs),e(Vs,Vl),e(K,Fl),e(K,je),e(je,Ul),e(je,Fs),e(Fs,zl),e(je,Gl),e(je,Us),e(Us,Hl),e(je,Wl),e(K,Xl),v(Je,K,null),e(R,Kl),e(R,oe),v(Ft,oe,null),e(oe,Jl),e(oe,zs),e(zs,Yl),e(oe,Ql),v(Ye,oe,null),e(R,Zl),e(R,le),v(Ut,le,null),e(le,ed),e(le,zt),e(zt,td),e(zt,Gs),e(Gs,ad),e(zt,sd),e(le,rd),v(Qe,le,null),e(R,nd),e(R,de),v(Gt,de,null),e(de,od),e(de,Hs),e(Hs,ld),e(de,dd),v(Ze,de,null),e(R,id),e(R,ie),v(Ht,ie,null),e(ie,pd),e(ie,Ws),e(Ws,cd),e(ie,md),v(et,ie,null),e(R,gd),e(R,pe),v(Wt,pe,null),e(pe,fd),e(pe,Xs),e(Xs,ud),e(pe,hd),v(tt,pe,null),e(R,_d),e(R,at),v(Xt,at,null),e(at,$d),e(at,Ks),e(Ks,bd),y(s,bn,_),y(s,q,_),v(Kt,q,null),e(q,vd),e(q,H),e(H,wd),e(H,Js),e(Js,xd),e(H,Ed),e(H,Ys),e(Ys,yd),e(H,Dd),e(H,Qs),e(Qs,kd),e(H,jd),e(H,Zs),e(Zs,Sd),e(H,Td),e(q,Id),e(q,ce),v(Jt,ce,null),e(ce,Bd),e(ce,er),e(er,Nd),e(ce,Pd),v(st,ce,null),e(q,Rd),e(q,me),v(Yt,me,null),e(me,Cd),e(me,tr),e(tr,qd),e(me,Ad),v(rt,me,null),e(q,Ld),e(q,ge),v(Qt,ge,null),e(ge,Od),e(ge,ar),e(ar,Md),e(ge,Vd),v(nt,ge,null),e(q,Fd),e(q,fe),v(Zt,fe,null),e(fe,Ud),e(fe,sr),e(sr,zd),e(fe,Gd),v(ot,fe,null),e(q,Hd),e(q,ue),v(ea,ue,null),e(ue,Wd),e(ue,rr),e(rr,Xd),e(ue,Kd),v(lt,ue,null),y(s,vn,_),y(s,Se,_),v(ta,Se,null),e(Se,Jd),e(Se,nr),e(nr,Yd),y(s,wn,_),y(s,V,_),v(aa,V,null),e(V,Qd),e(V,ja),e(ja,or),e(or,Zd),e(ja,ei),e(V,ti),e(V,sa),e(sa,ai),e(sa,lr),e(lr,si),e(sa,ri),e(V,ni),e(V,dr),e(dr,oi),e(V,li),e(V,ra),e(ra,ir),e(ir,Te),e(Te,xn),e(Te,di),e(Te,pr),e(pr,ii),e(Te,pi),e(Te,cr),e(cr,ci),e(ra,mi),e(ra,Ie),e(Ie,Be),e(Be,Sa),e(Sa,mr),e(mr,gi),e(Sa,fi),e(Be,ui),e(Be,gr),e(gr,hi),e(Be,_i),e(Be,fr),e(fr,$i),e(Ie,bi),e(Ie,Ne),e(Ne,ur),e(ur,hr),e(hr,vi),e(Ne,wi),e(Ne,_r),e(_r,xi),e(Ne,Ei),e(Ne,$r),e($r,yi),e(Ie,Di),e(Ie,Pe),e(Pe,br),e(br,vr),e(vr,ki),e(Pe,ji),e(Pe,wr),e(wr,Si),e(Pe,Ti),e(Pe,xr),e(xr,Ii),y(s,En,_),y(s,Re,_),e(Re,dt),e(dt,Er),v(na,Er,null),e(Re,Bi),e(Re,yr),e(yr,Ni),y(s,yn,_),y(s,W,_),v(oa,W,null),e(W,Pi),e(W,Dr),e(Dr,Ri),e(W,Ci),e(W,Ce),e(Ce,qi),e(Ce,kr),e(kr,Ai),e(Ce,Li),e(Ce,jr),e(jr,Oi),e(Ce,Mi),e(W,Vi),v(it,W,null),y(s,Dn,_),y(s,A,_),v(la,A,null),e(A,Fi),e(A,Ta),e(Ta,Sr),e(Sr,Ui),e(Ta,zi),e(A,Gi),e(A,Tr),e(Tr,Hi),e(A,Wi),e(A,Q),e(Q,Ia),e(Ia,Ir),e(Ir,Xi),e(Ia,Ki),e(Q,Ji),e(Q,Ba),e(Ba,Br),e(Br,Yi),e(Ba,Qi),e(Q,Zi),e(Q,Na),e(Na,Nr),e(Nr,ep),e(Na,tp),e(Q,ap),e(Q,Pa),e(Pa,Pr),e(Pr,sp),e(Pa,rp),e(A,np),e(A,Ra),e(Ra,op),e(Ra,Rr),e(Rr,lp),e(A,dp),e(A,da),e(da,ip),e(da,Cr),e(Cr,pp),e(da,cp),e(A,mp),v(pt,A,null),y(s,kn,_),y(s,C,_),v(ia,C,null),e(C,gp),e(C,qr),e(qr,fp),e(C,up),v(ct,C,null),e(C,hp),e(C,Ar),e(Ar,_p),e(C,$p),v(mt,C,null),e(C,bp),e(C,Lr),e(Lr,vp),e(C,wp),v(gt,C,null),e(C,xp),v(ft,C,null),y(s,jn,_),y(s,qe,_),v(pa,qe,null),e(qe,Ep),e(qe,Or),e(Or,yp),y(s,Sn,_),y(s,F,_),v(ca,F,null),e(F,Dp),e(F,Mr),e(Mr,kp),e(F,jp),v(ut,F,null),e(F,Sp),e(F,ht),v(ma,ht,null),e(ht,Tp),e(ht,Vr),e(Vr,Ip),e(F,Bp),e(F,he),v(ga,he,null),e(he,Np),e(he,Fr),e(Fr,Pp),e(he,Rp),e(he,Ur),e(Ur,Cp),y(s,Tn,_),y(s,Ae,_),e(Ae,_t),e(_t,zr),v(fa,zr,null),e(Ae,qp),e(Ae,Gr),e(Gr,Ap),y(s,In,_),y(s,Z,_),v(ua,Z,null),e(Z,Lp),e(Z,Hr),e(Hr,Op),e(Z,Mp),v($t,Z,null),Bn=!0},p(s,[_]){const ha={};_&2&&(ha.$$scope={dirty:_,ctx:s}),Fe.$set(ha);const Wr={};_&2&&(Wr.$$scope={dirty:_,ctx:s}),Ue.$set(Wr);const Xr={};_&2&&(Xr.$$scope={dirty:_,ctx:s}),ze.$set(Xr);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:s}),Ge.$set(Kr);const _a={};_&2&&(_a.$$scope={dirty:_,ctx:s}),He.$set(_a);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:s}),We.$set(Jr);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:s}),Je.$set(Yr);const Qr={};_&2&&(Qr.$$scope={dirty:_,ctx:s}),Ye.$set(Qr);const Le={};_&2&&(Le.$$scope={dirty:_,ctx:s}),Qe.$set(Le);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:s}),Ze.$set(Zr);const en={};_&2&&(en.$$scope={dirty:_,ctx:s}),et.$set(en);const N={};_&2&&(N.$$scope={dirty:_,ctx:s}),tt.$set(N);const tn={};_&2&&(tn.$$scope={dirty:_,ctx:s}),st.$set(tn);const Ca={};_&2&&(Ca.$$scope={dirty:_,ctx:s}),rt.$set(Ca);const an={};_&2&&(an.$$scope={dirty:_,ctx:s}),nt.$set(an);const Oe={};_&2&&(Oe.$$scope={dirty:_,ctx:s}),ot.$set(Oe);const $a={};_&2&&($a.$$scope={dirty:_,ctx:s}),lt.$set($a);const sn={};_&2&&(sn.$$scope={dirty:_,ctx:s}),it.$set(sn);const ba={};_&2&&(ba.$$scope={dirty:_,ctx:s}),pt.$set(ba);const rn={};_&2&&(rn.$$scope={dirty:_,ctx:s}),ct.$set(rn);const Me={};_&2&&(Me.$$scope={dirty:_,ctx:s}),mt.$set(Me);const nn={};_&2&&(nn.$$scope={dirty:_,ctx:s}),gt.$set(nn);const on={};_&2&&(on.$$scope={dirty:_,ctx:s}),ft.$set(on);const J={};_&2&&(J.$$scope={dirty:_,ctx:s}),ut.$set(J);const ln={};_&2&&(ln.$$scope={dirty:_,ctx:s}),$t.$set(ln)},i(s){Bn||(w(t.$$.fragment,s),w(Et.$$.fragment,s),w(yt.$$.fragment,s),w(jt.$$.fragment,s),w(Fe.$$.fragment,s),w(St.$$.fragment,s),w(Ue.$$.fragment,s),w(ze.$$.fragment,s),w(Ge.$$.fragment,s),w(Tt.$$.fragment,s),w(He.$$.fragment,s),w(It.$$.fragment,s),w(We.$$.fragment,s),w(Bt.$$.fragment,s),w(Nt.$$.fragment,s),w(Pt.$$.fragment,s),w(Rt.$$.fragment,s),w(Ct.$$.fragment,s),w(Lt.$$.fragment,s),w(Ot.$$.fragment,s),w(Mt.$$.fragment,s),w(Vt.$$.fragment,s),w(Je.$$.fragment,s),w(Ft.$$.fragment,s),w(Ye.$$.fragment,s),w(Ut.$$.fragment,s),w(Qe.$$.fragment,s),w(Gt.$$.fragment,s),w(Ze.$$.fragment,s),w(Ht.$$.fragment,s),w(et.$$.fragment,s),w(Wt.$$.fragment,s),w(tt.$$.fragment,s),w(Xt.$$.fragment,s),w(Kt.$$.fragment,s),w(Jt.$$.fragment,s),w(st.$$.fragment,s),w(Yt.$$.fragment,s),w(rt.$$.fragment,s),w(Qt.$$.fragment,s),w(nt.$$.fragment,s),w(Zt.$$.fragment,s),w(ot.$$.fragment,s),w(ea.$$.fragment,s),w(lt.$$.fragment,s),w(ta.$$.fragment,s),w(aa.$$.fragment,s),w(na.$$.fragment,s),w(oa.$$.fragment,s),w(it.$$.fragment,s),w(la.$$.fragment,s),w(pt.$$.fragment,s),w(ia.$$.fragment,s),w(ct.$$.fragment,s),w(mt.$$.fragment,s),w(gt.$$.fragment,s),w(ft.$$.fragment,s),w(pa.$$.fragment,s),w(ca.$$.fragment,s),w(ut.$$.fragment,s),w(ma.$$.fragment,s),w(ga.$$.fragment,s),w(fa.$$.fragment,s),w(ua.$$.fragment,s),w($t.$$.fragment,s),Bn=!0)},o(s){x(t.$$.fragment,s),x(Et.$$.fragment,s),x(yt.$$.fragment,s),x(jt.$$.fragment,s),x(Fe.$$.fragment,s),x(St.$$.fragment,s),x(Ue.$$.fragment,s),x(ze.$$.fragment,s),x(Ge.$$.fragment,s),x(Tt.$$.fragment,s),x(He.$$.fragment,s),x(It.$$.fragment,s),x(We.$$.fragment,s),x(Bt.$$.fragment,s),x(Nt.$$.fragment,s),x(Pt.$$.fragment,s),x(Rt.$$.fragment,s),x(Ct.$$.fragment,s),x(Lt.$$.fragment,s),x(Ot.$$.fragment,s),x(Mt.$$.fragment,s),x(Vt.$$.fragment,s),x(Je.$$.fragment,s),x(Ft.$$.fragment,s),x(Ye.$$.fragment,s),x(Ut.$$.fragment,s),x(Qe.$$.fragment,s),x(Gt.$$.fragment,s),x(Ze.$$.fragment,s),x(Ht.$$.fragment,s),x(et.$$.fragment,s),x(Wt.$$.fragment,s),x(tt.$$.fragment,s),x(Xt.$$.fragment,s),x(Kt.$$.fragment,s),x(Jt.$$.fragment,s),x(st.$$.fragment,s),x(Yt.$$.fragment,s),x(rt.$$.fragment,s),x(Qt.$$.fragment,s),x(nt.$$.fragment,s),x(Zt.$$.fragment,s),x(ot.$$.fragment,s),x(ea.$$.fragment,s),x(lt.$$.fragment,s),x(ta.$$.fragment,s),x(aa.$$.fragment,s),x(na.$$.fragment,s),x(oa.$$.fragment,s),x(it.$$.fragment,s),x(la.$$.fragment,s),x(pt.$$.fragment,s),x(ia.$$.fragment,s),x(ct.$$.fragment,s),x(mt.$$.fragment,s),x(gt.$$.fragment,s),x(ft.$$.fragment,s),x(pa.$$.fragment,s),x(ca.$$.fragment,s),x(ut.$$.fragment,s),x(ma.$$.fragment,s),x(ga.$$.fragment,s),x(fa.$$.fragment,s),x(ua.$$.fragment,s),x($t.$$.fragment,s),Bn=!1},d(s){a(d),s&&a(h),s&&a(f),E(t),s&&a(pn),s&&a(ve),E(Et),s&&a(cn),s&&a(ee),s&&a(mn),s&&a(S),E(yt),E(jt),E(Fe),E(St),E(Ue),E(ze),E(Ge),E(Tt),E(He),E(It),E(We),E(Bt),s&&a(gn),s&&a(Y),E(Nt),s&&a(fn),s&&a(Ee),E(Pt),s&&a(un),s&&a(ye),E(Rt),s&&a(hn),s&&a(G),E(Ct),E(Lt),s&&a(_n),s&&a(ke),E(Ot),s&&a($n),s&&a(R),E(Mt),E(Vt),E(Je),E(Ft),E(Ye),E(Ut),E(Qe),E(Gt),E(Ze),E(Ht),E(et),E(Wt),E(tt),E(Xt),s&&a(bn),s&&a(q),E(Kt),E(Jt),E(st),E(Yt),E(rt),E(Qt),E(nt),E(Zt),E(ot),E(ea),E(lt),s&&a(vn),s&&a(Se),E(ta),s&&a(wn),s&&a(V),E(aa),s&&a(En),s&&a(Re),E(na),s&&a(yn),s&&a(W),E(oa),E(it),s&&a(Dn),s&&a(A),E(la),E(pt),s&&a(kn),s&&a(C),E(ia),E(ct),E(mt),E(gt),E(ft),s&&a(jn),s&&a(qe),E(pa),s&&a(Sn),s&&a(F),E(ca),E(ut),E(ma),E(ga),s&&a(Tn),s&&a(Ae),E(fa),s&&a(In),s&&a(Z),E(ua),E($t)}}}const dg={local:"builder-classes",sections:[{local:"datasets.DatasetBuilder",title:"Builders"},{local:"datasets.DownloadManager",title:"Download"},{local:"datasets.SplitGenerator",title:"Splits"},{local:"datasets.Version",title:"Version"}],title:"Builder classes"};function ig(k){return Cm(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ug extends Bm{constructor(d){super();Nm(this,d,ig,lg,Pm,{})}}export{ug as default,dg as metadata};
