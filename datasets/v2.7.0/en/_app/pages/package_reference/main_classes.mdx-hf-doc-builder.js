import{S as dne,i as mne,s as hne,e as r,k as m,w as _,t as p,M as fne,c as o,d as s,m as h,a as l,x as b,h as c,b as w,G as e,g as D,y as $,q as x,o as v,B as y,v as une,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as cne}from"../../chunks/Tip-hf-doc-builder.js";import{D as E}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as bs}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as T}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";import{D as gne}from"../../chunks/Deprecated-hf-doc-builder.js";function _ne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetInfo
ds_info = DatasetInfo.from_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetInfo
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_info = DatasetInfo.from_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function bne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.info.write_to_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.info.write_to_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function $ne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
more_text = ds["text"]
ds.add_column(name="text_2", column=more_text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>more_text = ds[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_column(name=<span class="hljs-string">&quot;text_2&quot;</span>, column=more_text)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;text_2&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function xne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
new_review = {'label': 0, 'text': 'this movie is the absolute worst thing I have ever seen'}
ds = ds.add_item(new_review)
ds[-1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>new_review = {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.add_item(new_review)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[-<span class="hljs-number">1</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function vne(k){let i,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_pandas(df)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_pandas(df)'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function yne(k){let i,g,f,n,u;return n=new P({props:{code:`def gen():
    yield {"text": "Good", "label": 0}
    yield {"text": "Bad", "label": 1}
ds = Dataset.from_generator(gen)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>():
<span class="hljs-meta">... </span>    <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Good&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">0</span>}
<span class="hljs-meta">... </span>    <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Bad&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">1</span>}
...
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_generator(gen)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function jne(k){let i,g;return i=new P({props:{code:`def gen(shards):
    for shard in shards:
        with open(shard) as f:
            for line in f:
                yield {"line": line}
shards = [f"data{i}.txt" for i in range(32)]
ds = Dataset.from_generator(gen, gen_kwargs={"shards": shards})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">shards</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> shard <span class="hljs-keyword">in</span> shards:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(shard) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:
<span class="hljs-meta">... </span>                <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;line&quot;</span>: line}
...
<span class="hljs-meta">&gt;&gt;&gt; </span>shards = [<span class="hljs-string">f&quot;data<span class="hljs-subst">{i}</span>.txt&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_generator(gen, gen_kwargs={<span class="hljs-string">&quot;shards&quot;</span>: shards})`}}),{c(){_(i.$$.fragment)},l(f){b(i.$$.fragment,f)},m(f,n){$(i,f,n),g=!0},p:N,i(f){g||(x(i.$$.fragment,f),g=!0)},o(f){v(i.$$.fragment,f),g=!1},d(f){y(i,f)}}}function wne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data
MemoryMappedTable
text: string
label: int64
----
text: [[<span class="hljs-string">&quot;compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&quot;</span>,<span class="hljs-string">&quot;the soundtrack alone is worth the price of admission .&quot;</span>,<span class="hljs-string">&quot;rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&quot;</span>,<span class="hljs-string">&quot;beneath the film&#x27;s obvious determination to shock at any cost lies considerable skill and determination , backed by sheer nerve .&quot;</span>,<span class="hljs-string">&quot;bielinsky is a filmmaker of impressive talent .&quot;</span>,<span class="hljs-string">&quot;so beautifully acted and directed , it&#x27;s clear that washington most certainly has a new career ahead of him if he so chooses .&quot;</span>,<span class="hljs-string">&quot;a visual spectacle full of stunning images and effects .&quot;</span>,<span class="hljs-string">&quot;a gentle and engrossing character study .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s enough to watch huppert scheming , with her small , intelligent eyes as steady as any noir villain , and to enjoy the perfectly pitched web of tension that chabrol spins .&quot;</span>,<span class="hljs-string">&quot;an engrossing portrait of uncompromising artists trying to create something original against the backdrop of a corporate music industry that only seems to care about the bottom line .&quot;</span>,...,<span class="hljs-string">&quot;ultimately , jane learns her place as a girl , softens up and loses some of the intensity that made her an interesting character to begin with .&quot;</span>,<span class="hljs-string">&quot;ah-nuld&#x27;s action hero days might be over .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s clear why deuces wild , which was shot two years ago , has been gathering dust on mgm&#x27;s shelf .&quot;</span>,<span class="hljs-string">&quot;feels like nothing quite so much as a middle-aged moviemaker&#x27;s attempt to surround himself with beautiful , half-naked women .&quot;</span>,<span class="hljs-string">&quot;when the precise nature of matthew&#x27;s predicament finally comes into sharp focus , the revelation fails to justify the build-up .&quot;</span>,<span class="hljs-string">&quot;this picture is murder by numbers , and as easy to be bored by as your abc&#x27;s , despite a few whopping shootouts .&quot;</span>,<span class="hljs-string">&quot;hilarious musical comedy though stymied by accents thick as mud .&quot;</span>,<span class="hljs-string">&quot;if you are into splatter movies , then you will probably have a reasonably good time with the salton sea .&quot;</span>,<span class="hljs-string">&quot;a dull , simple-minded and stereotypical tale of drugs , death and mind-numbing indifference on the inner-city streets .&quot;</span>,<span class="hljs-string">&quot;the feature-length stretch . . . strains the show&#x27;s concept .&quot;</span>]]
label: [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,...,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Dne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
[{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function kne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
<span class="hljs-number">2</span>`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Ene(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
<span class="hljs-number">1066</span>`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function qne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Ine(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
(<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Tne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.unique('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&#x27;label&#x27;</span>)
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Nne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad", split="train")
ds.features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
    num_rows: <span class="hljs-number">87599</span>
})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Pne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, ClassLabel, Value
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
new_features = ds.features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Fne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Lne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.remove_columns('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&#x27;label&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Ane(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_column('label', 'label_new')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Sne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
Dataset({
    features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Cne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq", split="validation")
ds.features
ds = ds.class_encode_column('answer')
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&#x27;answer&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function One(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.__len__`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.__len__
&lt;bound method Dataset.__len__ of Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})&gt;`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function zne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['text', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Vne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')
def encode(batch):
    return tokenizer(batch['text'], padding=True, truncation=True, return_tensors='pt')
ds.set_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&#x27;text&#x27;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">29353</span>,  <span class="hljs-number">2135</span>, <span class="hljs-number">15102</span>,  <span class="hljs-number">1996</span>,  <span class="hljs-number">9428</span>, <span class="hljs-number">20868</span>,  <span class="hljs-number">2890</span>,  <span class="hljs-number">8663</span>,  <span class="hljs-number">6895</span>,
         <span class="hljs-number">20470</span>,  <span class="hljs-number">2571</span>,  <span class="hljs-number">3663</span>,  <span class="hljs-number">2090</span>,  <span class="hljs-number">4603</span>,  <span class="hljs-number">3017</span>,  <span class="hljs-number">3008</span>,  <span class="hljs-number">1998</span>,  <span class="hljs-number">2037</span>, <span class="hljs-number">24211</span>,
         <span class="hljs-number">5637</span>,  <span class="hljs-number">1998</span>, <span class="hljs-number">11690</span>,  <span class="hljs-number">2336</span>,  <span class="hljs-number">1012</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Une(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format
ds.reset_format()
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Mne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Rne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example["text"], padding=True, truncation=True, return_tensors='pt')
ds = ds.with_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">18027</span>, <span class="hljs-number">16310</span>, <span class="hljs-number">16001</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">9321</span>,   <span class="hljs-number">178</span>, <span class="hljs-number">11604</span>,  <span class="hljs-number">7235</span>,  <span class="hljs-number">6617</span>,
         <span class="hljs-number">1742</span>,  <span class="hljs-number">2165</span>,  <span class="hljs-number">2820</span>,  <span class="hljs-number">1206</span>,  <span class="hljs-number">6588</span>, <span class="hljs-number">22572</span>, <span class="hljs-number">12937</span>,  <span class="hljs-number">1811</span>,  <span class="hljs-number">2153</span>,  <span class="hljs-number">1105</span>,
         <span class="hljs-number">1147</span>, <span class="hljs-number">12890</span>, <span class="hljs-number">19587</span>,  <span class="hljs-number">6463</span>,  <span class="hljs-number">1105</span>, <span class="hljs-number">15026</span>,  <span class="hljs-number">1482</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Bne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
<span class="hljs-number">10</span>`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Gne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds[0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the soundtrack alone is worth the price of admission .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Hne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Wne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.select(range(4))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.select(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>))
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">4</span>
})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Yne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]
sorted_ds = ds.sort('label')
sorted_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&#x27;label&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Jne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Kne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds = ds.train_test_split(test_size=0.2, shuffle=True)

ds = ds.train_test_split(test_size=0.2, seed=42)

ds = load_dataset("imdb",split="train")
ds = ds.train_test_split(test_size=0.2, stratify_by_column="label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, shuffle=<span class="hljs-literal">True</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">852</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">214</span>
    })
})

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, seed=<span class="hljs-number">42</span>)

<span class="hljs-comment"># stratified split</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>,split=<span class="hljs-string">&quot;train&quot;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">25000</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, stratify_by_column=<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">20000</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">5000</span>
    })
})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Qne(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds
ds.shard(num_shards=2, index=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shard(num_shards=<span class="hljs-number">2</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Zne(k){let i,g,f,n,u;return n=new P({props:{code:`ds_train = ds["train"].to_tf_dataset(
   columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'],
   shuffle=True,
   batch_size=16,
   collate_fn=data_collator,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds_train = ds[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>   columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
<span class="hljs-meta">... </span>   shuffle=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>   batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>   collate_fn=data_collator,
<span class="hljs-meta">... </span>)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Xne(k){let i,g,f,n,u;return n=new P({props:{code:'dataset.push_to_hub("<organization>/<dataset_id>", split="evaluation")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, split=<span class="hljs-string">&quot;evaluation&quot;</span>)'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function ere(k){let i,g,f,n,u;return n=new P({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){i=r("p"),g=p("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function tre(k){let i,g;return i=new P({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(i.$$.fragment)},l(f){b(i.$$.fragment,f)},m(f,n){$(i,f,n),g=!0},p:N,i(f){g||(x(i.$$.fragment,f),g=!0)},o(f){v(i.$$.fragment,f),g=!1},d(f){y(i,f)}}}function sre(k){let i,g,f,n,u;return n=new P({props:{code:'saved_ds = ds.save_to_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>saved_ds = ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function are(k){let i,g,f,n,u;return n=new P({props:{code:'ds = load_from_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function nre(k){let i,g,f,n,u;return n=new P({props:{code:'ds.to_csv("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_csv(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function rre(k){let i,g,f,n,u;return n=new P({props:{code:"ds.to_pandas()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_pandas()'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function ore(k){let i,g,f,n,u;return n=new P({props:{code:"ds.to_dict()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_dict()'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function lre(k){let i,g,f,n,u;return n=new P({props:{code:'ds.to_json("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_json(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function ire(k){let i,g,f,n,u;return n=new P({props:{code:'ds.to_parquet("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_parquet(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function pre(k){let i,g,f,n,u;return n=new P({props:{code:`# con provided as a connection URI string
ds.to_sql("data", "sqlite:///my_own_db.sql")
# con provided as a sqlite3 connection object
import sqlite3
con = sqlite3.connect("my_own_db.sql")
with con:
    ds.to_sql("data", con)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># con provided as a connection URI string</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_sql(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;sqlite:///my_own_db.sql&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># con provided as a sqlite3 connection object</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> sqlite3
<span class="hljs-meta">&gt;&gt;&gt; </span>con = sqlite3.connect(<span class="hljs-string">&quot;my_own_db.sql&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> con:
<span class="hljs-meta">... </span>    ds.to_sql(<span class="hljs-string">&quot;data&quot;</span>, con)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function cre(k){let i,g,f,n,u;return n=new P({props:{code:`ds = datasets.load_dataset('crime_and_punish', split='train')
ds_with_embeddings = ds.map(lambda example: {'embeddings': embed(example['line']}))
ds_with_embeddings.add_faiss_index(column='embeddings')
# query
scores, retrieved_examples = ds_with_embeddings.get_nearest_examples('embeddings', embed('my new query'), k=10)
# save index
ds_with_embeddings.save_faiss_index('embeddings', 'my_index.faiss')

ds = datasets.load_dataset('crime_and_punish', split='train')
# load index
ds.load_faiss_index('embeddings', 'my_index.faiss')
# query
scores, retrieved_examples = ds.get_nearest_examples('embeddings', embed('my new query'), k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;embeddings&#x27;</span>: embed(example[<span class="hljs-string">&#x27;line&#x27;</span>]}))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.add_faiss_index(column=<span class="hljs-string">&#x27;embeddings&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># save index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.save_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.load_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function dre(k){let i,g,f,n,u;return n=new P({props:{code:`es_client = elasticsearch.Elasticsearch()
ds = datasets.load_dataset('crime_and_punish', split='train')
ds.add_elasticsearch_index(column='line', es_client=es_client, es_index_name="my_es_index")
scores, retrieved_examples = ds.get_nearest_examples('line', 'my new query', k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>es_client = elasticsearch.Elasticsearch()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_elasticsearch_index(column=<span class="hljs-string">&#x27;line&#x27;</span>, es_client=es_client, es_index_name=<span class="hljs-string">&quot;my_es_index&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;my new query&#x27;</span>, k=<span class="hljs-number">10</span>)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function mre(k){let i,g,f,n,u;return n=new P({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),{c(){i=r("p"),g=p("Default config is:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Default config is:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function hre(k){let i,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_csv('path/to/dataset.csv')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_csv(<span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>)'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function fre(k){let i,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_json('path/to/dataset.json')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_json(<span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>)'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function ure(k){let i,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_parquet('path/to/dataset.parquet')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_parquet(<span class="hljs-string">&#x27;path/to/dataset.parquet&#x27;</span>)'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function gre(k){let i,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_text('path/to/dataset.txt')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_text(<span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>)'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function _re(k){let i,g,f,n,u;return n=new P({props:{code:`# Fetch a database table
ds = Dataset.from_sql("test_data", "postgres:///db_name")
# Execute a SQL query on the table
ds = Dataset.from_sql("SELECT sentence FROM test_data", "postgres:///db_name")
# Use a Selectable object to specify the query
from sqlalchemy import select, text
stmt = select([text("sentence")]).select_from(text("test_data"))
ds = Dataset.from_sql(stmt, "postgres:///db_name")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Fetch a database table</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_sql(<span class="hljs-string">&quot;test_data&quot;</span>, <span class="hljs-string">&quot;postgres:///db_name&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Execute a SQL query on the table</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_sql(<span class="hljs-string">&quot;SELECT sentence FROM test_data&quot;</span>, <span class="hljs-string">&quot;postgres:///db_name&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Use a Selectable object to specify the query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> select, text
<span class="hljs-meta">&gt;&gt;&gt; </span>stmt = select([text(<span class="hljs-string">&quot;sentence&quot;</span>)]).select_from(text(<span class="hljs-string">&quot;test_data&quot;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_sql(stmt, <span class="hljs-string">&quot;postgres:///db_name&quot;</span>)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function bre(k){let i;return{c(){i=p("The returned dataset can only be cached if *con* is specified as URI string.")},l(g){i=c(g,"The returned dataset can only be cached if *con* is specified as URI string.")},m(g,f){D(g,i,f)},d(g){g&&s(i)}}}function $re(k){let i,g,f,n,u;return n=new P({props:{code:`# dataset with mapping {'entailment': 0, 'neutral': 1, 'contradiction': 2}
ds = load_dataset("glue", "mnli", split="train")
# mapping to align with
label2id = {'CONTRADICTION': 0, 'NEUTRAL': 1, 'ENTAILMENT': 2}
ds_aligned = ds.align_labels_with_mapping(label2id, "label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># dataset with mapping {&#x27;entailment&#x27;: 0, &#x27;neutral&#x27;: 1, &#x27;contradiction&#x27;: 2}</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mnli&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mapping to align with</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>label2id = {<span class="hljs-string">&#x27;CONTRADICTION&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NEUTRAL&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ENTAILMENT&#x27;</span>: <span class="hljs-number">2</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_aligned = ds.align_labels_with_mapping(label2id, <span class="hljs-string">&quot;label&quot;</span>)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function xre(k){let i,g,f,n,u;return n=new P({props:{code:"ds3 = concatenate_datasets([ds1, ds2])",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds3 = concatenate_datasets([ds1, ds2])'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function vre(k){let i,g,f,n,u;return n=new P({props:{code:`

from datasets import Dataset, interleave_datasets
d1 = Dataset.from_dict({"a": [0, 1, 2]})
d2 = Dataset.from_dict({"a": [10, 11, 12]})
d3 = Dataset.from_dict({"a": [20, 21, 22]})
dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42, stopping_strategy="all_exhausted")
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
dataset["a"]
dataset = interleave_datasets([d1, d2, d3])
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], stopping_strategy="all_exhausted")
dataset["a"]
d1 = Dataset.from_dict({"a": [0, 1, 2]})
d2 = Dataset.from_dict({"a": [10, 11, 12, 13]})
d3 = Dataset.from_dict({"a": [20, 21, 22, 23, 24]})
dataset = interleave_datasets([d1, d2, d3])
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], stopping_strategy="all_exhausted")
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42, stopping_strategy="all_exhausted")
dataset["a"]

from datasets import load_dataset, interleave_datasets
d1 = load_dataset("oscar", "unshuffled_deduplicated_en", split="train", streaming=True)
d2 = load_dataset("oscar", "unshuffled_deduplicated_fr", split="train", streaming=True)
dataset = interleave_datasets([d1, d2])
iterator = iter(dataset)
next(iterator)
next(iterator)`,highlighted:`For regular datasets (<span class="hljs-built_in">map</span>-style):


<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>, stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">23</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>, stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, ..., <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>]
For datasets <span class="hljs-keyword">in</span> streaming mode (iterable):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2])
<span class="hljs-meta">&gt;&gt;&gt; </span>iterator = <span class="hljs-built_in">iter</span>(dataset)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...
&gt;&gt;&gt; next(iterator)
{&#x27;</span>text<span class="hljs-string">&#x27;: &quot;M\xE9dia de d\xE9bat d&#x27;</span><span class="hljs-built_in">id</span>\xE9es, de culture...`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function yre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function jre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
{<span class="hljs-string">&#x27;test&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-test.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;train&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-train.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function wre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">2</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Dre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">1066</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">8530</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">1066</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function kre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Ere(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
{<span class="hljs-string">&#x27;test&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;train&#x27;</span>: (<span class="hljs-number">8530</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;validation&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function qre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.unique("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&quot;label&quot;</span>)
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Ire(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">0</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Tre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds["train"][0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Nre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">4265</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Pre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]
sorted_ds = ds.sort("label")
sorted_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Fre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Lre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Are(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format
ds.reset_format()
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Sre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds["train"].format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Cre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example['text'], truncation=True, padding=True, return_tensors="pt")
ds = ds.with_transform(encode)
ds["train"][0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">2067</span>,  <span class="hljs-number">1110</span>, <span class="hljs-number">17348</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1129</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">6880</span>,  <span class="hljs-number">1432</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1207</span>,   <span class="hljs-number">107</span>, <span class="hljs-number">14255</span>,  <span class="hljs-number">1389</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1105</span>,  <span class="hljs-number">1115</span>,  <span class="hljs-number">1119</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1280</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1294</span>,   <span class="hljs-number">170</span>, <span class="hljs-number">24194</span>,  <span class="hljs-number">1256</span>,  <span class="hljs-number">3407</span>,  <span class="hljs-number">1190</span>,
        <span class="hljs-number">170</span>, <span class="hljs-number">11791</span>,  <span class="hljs-number">5253</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1732</span>,  <span class="hljs-number">7200</span>, <span class="hljs-number">10947</span>, <span class="hljs-number">12606</span>,  <span class="hljs-number">2895</span>,   <span class="hljs-number">117</span>,
        <span class="hljs-number">179</span>,  <span class="hljs-number">7766</span>,   <span class="hljs-number">118</span>,   <span class="hljs-number">172</span>, <span class="hljs-number">15554</span>,  <span class="hljs-number">1181</span>,  <span class="hljs-number">3498</span>,  <span class="hljs-number">6961</span>,  <span class="hljs-number">3263</span>,  <span class="hljs-number">1137</span>,
        <span class="hljs-number">188</span>,  <span class="hljs-number">1566</span>,  <span class="hljs-number">7912</span>, <span class="hljs-number">14516</span>,  <span class="hljs-number">6997</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Ore(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad")
ds["train"].features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">87599</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">10570</span>
    })
})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function zre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Vre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Ure(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.remove_columns("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Mre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_column("label", "label_new")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;label&quot;</span>, <span class="hljs-string">&quot;label_new&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Rre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Bre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq")
ds["train"].features
ds = ds.class_encode_column("answer")
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&quot;answer&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Gre(k){let i,g,f,n,u;return n=new P({props:{code:'dataset_dict.push_to_hub("<organization>/<dataset_id>")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Hre(k){let i,g,f,n,u;return n=new P({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){i=r("p"),g=p("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Wre(k){let i,g;return i=new P({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(i.$$.fragment)},l(f){b(i.$$.fragment,f)},m(f,n){$(i,f,n),g=!0},p:N,i(f){g||(x(i.$$.fragment,f),g=!0)},o(f){v(i.$$.fragment,f),g=!1},d(f){y(i,f)}}}function Yre(k){let i,g,f,n,u;return n=new P({props:{code:"ds = load_from_disk('path/to/dataset/directory')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&#x27;path/to/dataset/directory&#x27;</span>)'}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Jre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_csv({'train': 'path/to/dataset.csv'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_csv({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Kre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_json({'train': 'path/to/dataset.json'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_json({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Qre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_parquet({'train': 'path/to/dataset/parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_parquet({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset/parquet&#x27;</span>})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Zre(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_text({'train': 'path/to/dataset.txt'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_text({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Xre(k){let i,g,f,n,u;return n=new P({props:{code:`def gen():
    yield {"text": "Good", "label": 0}
    yield {"text": "Bad", "label": 1}
ds = IterableDataset.from_generator(gen)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>():
<span class="hljs-meta">... </span>    <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Good&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">0</span>}
<span class="hljs-meta">... </span>    <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Bad&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">1</span>}
...
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = IterableDataset.from_generator(gen)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function eoe(k){let i,g;return i=new P({props:{code:`def gen(shards):
    for shard in shards:
        with open(shard) as f:
            for line in f:
                yield {"line": line}
shards = [f"data{i}.txt" for i in range(32)]
ds = IterableDataset.from_generator(gen, gen_kwargs={"shards": shards})
ds = ds.shuffle(seed=42, buffer_size=10_000)  # shuffles the shards order + uses a shuffle buffer
from torch.utils.data import DataLoader
dataloader = DataLoader(ds.with_format("torch"), num_workers=4)  # give each worker a subset of 32/4=8 shards`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">shards</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> shard <span class="hljs-keyword">in</span> shards:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(shard) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:
<span class="hljs-meta">... </span>                <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;line&quot;</span>: line}
...
<span class="hljs-meta">&gt;&gt;&gt; </span>shards = [<span class="hljs-string">f&quot;data<span class="hljs-subst">{i}</span>.txt&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = IterableDataset.from_generator(gen, gen_kwargs={<span class="hljs-string">&quot;shards&quot;</span>: shards})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.shuffle(seed=<span class="hljs-number">42</span>, buffer_size=<span class="hljs-number">10_000</span>)  <span class="hljs-comment"># shuffles the shards order + uses a shuffle buffer</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader = DataLoader(ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>), num_workers=<span class="hljs-number">4</span>)  <span class="hljs-comment"># give each worker a subset of 32/4=8 shards</span>`}}),{c(){_(i.$$.fragment)},l(f){b(i.$$.fragment,f)},m(f,n){$(i,f,n),g=!0},p:N,i(f){g||(x(i.$$.fragment,f),g=!0)},o(f){v(i.$$.fragment,f),g=!1},d(f){y(i,f)}}}function toe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds = ds.remove_columns("label")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function soe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Audio
ds = load_dataset("PolyAI/minds14", name="en-US", split="train", streaming=True)
ds.features
ds = ds.cast_column("audio", Audio(sampling_rate=16000))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">8000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function aoe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds.features
new_features = ds.features.copy()
new_features["label"] = ClassLabel(names=["bad", "good"])
new_features["text"] = Value("large_string")
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&quot;bad&quot;</span>, <span class="hljs-string">&quot;good&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;text&quot;</span>] = Value(<span class="hljs-string">&quot;large_string&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function noe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>}]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function roe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds.rename_column("text", "movie_review")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function ooe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&quot;it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function loe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
shuffled_ds = ds.shuffle(seed=42)
list(shuffled_ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(shuffled_ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function ioe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
ds = ds.skip(1)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.skip(<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;if you sometimes like to go to the movies to have fun , wasabi is a good place to start .&#x27;</span>}]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function poe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
small_ds = ds.take(2)
list(small_ds)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>small_ds = ds.take(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(small_ds)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>}]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function coe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function doe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;Review: it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function moe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
list(ds["train"].take(3))
ds = ds.shuffle(seed=42)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function hoe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")
def encode(example):
    return tokenizer(examples["text"], truncation=True, padding="max_length")
ds = ds.map(encode, batched=True, remove_columns=["text"])
ds = ds.with_format("torch")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-string">&quot;max_length&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(encode, batched=<span class="hljs-literal">True</span>, remove_columns=[<span class="hljs-string">&quot;text&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function foe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function uoe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function goe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.remove_columns("label")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function _oe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_column("text", "movie_review")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function boe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_columns({"text": "movie_review", "label": "rating"})
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_columns({<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;movie_review&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;rating&quot;</span>})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;rating&#x27;</span>: <span class="hljs-number">1</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function $oe(k){let i,g,f,n,u,t,d,gn,$s,zr,Ce;return{c(){i=r("p"),g=p("A "),f=r("a"),n=p("datasets.Sequence"),u=p(` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=r("code"),d=p("list"),gn=p(` instead of the
`),$s=r("a"),zr=p("datasets.Sequence"),Ce=p("."),this.h()},l(be){i=o(be,"P",{});var ne=l(i);g=c(ne,"A "),f=o(ne,"A",{href:!0});var xs=l(f);n=c(xs,"datasets.Sequence"),xs.forEach(s),u=c(ne,` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=o(ne,"CODE",{});var xu=l(t);d=c(xu,"list"),xu.forEach(s),gn=c(ne,` instead of the
`),$s=o(ne,"A",{href:!0});var Vr=l($s);zr=c(Vr,"datasets.Sequence"),Vr.forEach(s),Ce=c(ne,"."),ne.forEach(s),this.h()},h(){w(f,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Sequence"),w($s,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Sequence")},m(be,ne){D(be,i,ne),e(i,g),e(i,f),e(f,n),e(i,u),e(i,t),e(t,d),e(i,gn),e(i,$s),e($s,zr),e(i,Ce)},d(be){be&&s(i)}}}function xoe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
copy_of_features = ds.features.copy()
copy_of_features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>copy_of_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>copy_of_features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function voe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad", split="train")
ds.features.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features.flatten()
{<span class="hljs-string">&#x27;answers.answer_start&#x27;</span>: <span class="hljs-type">Sequence</span>(feature=Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;answers.text&#x27;</span>: <span class="hljs-type">Sequence</span>(feature=Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function yoe(k){let i,g,f,n,u;return n=new P({props:{code:"Features.from_dict({'_type': {'dtype': 'string', 'id': None, '_type': 'Value'}})",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>Features.from_dict({<span class="hljs-string">&#x27;_type&#x27;</span>: {<span class="hljs-string">&#x27;dtype&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;_type&#x27;</span>: <span class="hljs-string">&#x27;Value&#x27;</span>}})
{<span class="hljs-string">&#x27;_type&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function joe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import Features, Sequence, Value
# let's say we have to features with a different order of nested fields (for a and b for example)
f1 = Features({"root": Sequence({"a": Value("string"), "b": Value("string")})})
f2 = Features({"root": {"b": Sequence(Value("string")), "a": Sequence(Value("string"))}})
assert f1.type != f2.type
# re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match
f1.reorder_fields_as(f2)
assert f1.reorder_fields_as(f2).type == f2.type`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># let&#x27;s say we have to features with a different order of nested fields (for a and b for example)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1 = Features({<span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-type">Sequence</span>({<span class="hljs-string">&quot;a&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;b&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>)})})
<span class="hljs-meta">&gt;&gt;&gt; </span>f2 = Features({<span class="hljs-string">&quot;root&quot;</span>: {<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>)), <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>))}})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.<span class="hljs-built_in">type</span> != f2.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1.reorder_fields_as(f2)
{<span class="hljs-string">&#x27;root&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;b&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;a&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.reorder_fields_as(f2).<span class="hljs-built_in">type</span> == f2.<span class="hljs-built_in">type</span>`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function woe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import Features, Sequence, Value, ClassLabel
features = Features({'post': Sequence(feature={'text': Value(dtype='string'), 'upvotes': Value(dtype='int32'), 'label': ClassLabel(num_classes=2, names=['hot', 'cold'])})})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value, ClassLabel
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;post&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>), <span class="hljs-string">&#x27;upvotes&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;hot&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>])})})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;post&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;upvotes&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;hot&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Doe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'label': ClassLabel(num_classes=3, names=['bad', 'ok', 'good'])})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">3</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">3</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function koe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
ds.features["label"].int2str(0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;label&quot;</span>].int2str(<span class="hljs-number">0</span>)
<span class="hljs-string">&#x27;neg&#x27;</span>`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Eoe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
ds.features["label"].str2int('neg')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;label&quot;</span>].str2int(<span class="hljs-string">&#x27;neg&#x27;</span>)
<span class="hljs-number">0</span>`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function qoe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'stars': Value(dtype='int32')})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;stars&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;stars&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Ioe(k){let i,g,f,n,u;return n=new P({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': 'le chat',
        'de': 'die katze'
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;le chat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Toe(k){let i,g,f,n,u;return n=new P({props:{code:`# At construction time:
datasets.features.TranslationVariableLanguages(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': ['le chat', 'la chatte,']
        'de': 'die katze'
}
# Tensor returned :
{
        'language': ['en', 'de', 'fr', 'fr'],
        'translation': ['the cat', 'die katze', 'la chatte', 'le chat'],
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.TranslationVariableLanguages(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: [<span class="hljs-string">&#x27;le chat&#x27;</span>, <span class="hljs-string">&#x27;la chatte,&#x27;</span>]
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Tensor returned :</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>{
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;language&#x27;</span>: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;translation&#x27;</span>: [<span class="hljs-string">&#x27;the cat&#x27;</span>, <span class="hljs-string">&#x27;die katze&#x27;</span>, <span class="hljs-string">&#x27;la chatte&#x27;</span>, <span class="hljs-string">&#x27;le chat&#x27;</span>],
<span class="hljs-meta">... </span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Noe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array2D(shape=(1, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array2D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Poe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array3D(shape=(1, 2, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array3D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Foe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array4D(shape=(1, 2, 2, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array4D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Loe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array5D(shape=(1, 2, 2, 3, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array5D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Aoe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Audio
ds = load_dataset("PolyAI/minds14", name="en-US", split="train")
ds = ds.cast_column("audio", Audio(sampling_rate=16000))
ds[0]["audio"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([ <span class="hljs-number">2.3443763e-05</span>,  <span class="hljs-number">2.1729663e-04</span>,  <span class="hljs-number">2.2145823e-04</span>, ...,
     <span class="hljs-number">3.8356509e-05</span>, -<span class="hljs-number">7.3497440e-06</span>, -<span class="hljs-number">2.1754686e-05</span>], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/f14948e0e84be638dd7943ac36518a4cf3324e8b7aa331c5ab11541518e9368c/en-US~JOINT_ACCOUNT/602ba55abb1e6d0fbce92065.wav&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">16000</span>}`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Soe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Image
ds = load_dataset("beans", split="train")
ds.features["image"]
ds[0]["image"]
ds = ds.cast_column('image', Image(decode=False))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;image&quot;</span>]
Image(decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x500 at <span class="hljs-number">0x15E52E7F0</span>&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;image&#x27;</span>, Image(decode=<span class="hljs-literal">False</span>))
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/healthy/healthy_train.85.jpg&#x27;</span>}`}}),{c(){i=r("p"),g=p("Examples:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Examples:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Coe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import MetricInfo
metric_info = MetricInfo.from_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> MetricInfo
<span class="hljs-meta">&gt;&gt;&gt; </span>metric_info = MetricInfo.from_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Ooe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.info.write_to_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.info.write_to_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function zoe(k){let i,g,f,n;return{c(){i=r("p"),g=p("Use the new library \u{1F917} Evaluate instead: "),f=r("a"),n=p("https://huggingface.co/docs/evaluate"),this.h()},l(u){i=o(u,"P",{});var t=l(i);g=c(t,"Use the new library \u{1F917} Evaluate instead: "),f=o(t,"A",{href:!0,rel:!0});var d=l(f);n=c(d,"https://huggingface.co/docs/evaluate"),d.forEach(s),t.forEach(s),this.h()},h(){w(f,"href","https://huggingface.co/docs/evaluate"),w(f,"rel","nofollow")},m(u,t){D(u,i,t),e(i,g),e(i,f),e(f,n)},d(u){u&&s(i)}}}function Voe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.add(predictions=model_predictions, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.add(predictions=model_predictions, references=labels)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Uoe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.add_batch(predictions=model_prediction, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.add_batch(predictions=model_prediction, references=labels)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Moe(k){let i,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
accuracy = metric.compute(predictions=model_prediction, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = metric.compute(predictions=model_prediction, references=labels)`}}),{c(){i=r("p"),g=p("Example:"),f=m(),_(n.$$.fragment)},l(t){i=o(t,"P",{});var d=l(i);g=c(d,"Example:"),d.forEach(s),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,i,d),e(i,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&s(i),t&&s(f),y(n,t)}}}function Roe(k){let i,g;return i=new P({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(anon=True)
s3.ls('public-datasets/imdb/train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(anon=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;public-datasets/imdb/train&#x27;</span>)
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(i.$$.fragment)},l(f){b(i.$$.fragment,f)},m(f,n){$(i,f,n),g=!0},p:N,i(f){g||(x(i.$$.fragment,f),g=!0)},o(f){v(i.$$.fragment,f),g=!1},d(f){y(i,f)}}}function Boe(k){let i,g;return i=new P({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
s3.ls('my-private-datasets/imdb/train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;my-private-datasets/imdb/train&#x27;</span>)
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(i.$$.fragment)},l(f){b(i.$$.fragment,f)},m(f,n){$(i,f,n),g=!0},p:N,i(f){g||(x(i.$$.fragment,f),g=!0)},o(f){v(i.$$.fragment,f),g=!1},d(f){y(i,f)}}}function Goe(k){let i,g;return i=new P({props:{code:`import botocore
from datasets.filesystems import S3Filesystem

s3_session = botocore.session.Session(profile_name='my_profile_name')
s3 = S3FileSystem(session=s3_session)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> botocore
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>s3_session = botocore.session.Session(profile_name=<span class="hljs-string">&#x27;my_profile_name&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(session=s3_session)`}}),{c(){_(i.$$.fragment)},l(f){b(i.$$.fragment,f)},m(f,n){$(i,f,n),g=!0},p:N,i(f){g||(x(i.$$.fragment,f),g=!0)},o(f){v(i.$$.fragment,f),g=!1},d(f){y(i,f)}}}function Hoe(k){let i,g;return i=new P({props:{code:`from datasets import load_from_disk
from datasets.filesystems import S3Filesystem

s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
dataset = load_from_disk('s3://my-private-datasets/imdb/train', fs=s3)
print(len(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_from_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>, fs=s3)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dataset))
<span class="hljs-number">25000</span>`}}),{c(){_(i.$$.fragment)},l(f){b(i.$$.fragment,f)},m(f,n){$(i,f,n),g=!0},p:N,i(f){g||(x(i.$$.fragment,f),g=!0)},o(f){v(i.$$.fragment,f),g=!1},d(f){y(i,f)}}}function Woe(k){let i,g;return i=new P({props:{code:`from datasets import load_dataset
from datasets.filesystems import S3Filesystem

dataset = load_dataset("imdb")
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
dataset.save_to_disk('s3://my-private-datasets/imdb/train', fs=s3)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.save_to_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>, fs=s3)`}}),{c(){_(i.$$.fragment)},l(f){b(i.$$.fragment,f)},m(f,n){$(i,f,n),g=!0},p:N,i(f){g||(x(i.$$.fragment,f),g=!0)},o(f){v(i.$$.fragment,f),g=!1},d(f){y(i,f)}}}function Yoe(k){let i,g,f,n,u,t,d,gn,$s,zr,Ce,be,ne,xs,xu,Vr,v4,Q7,X,Zp,y4,L2,j4,w4,vu,A2,D4,k4,E4,S2,q4,I4,$e,Xp,T4,ec,N4,C2,P4,F4,L4,O2,A4,S4,z2,C4,O4,Ur,z4,vs,tc,V4,_n,U4,V2,M4,R4,U2,B4,G4,H4,Mr,Z7,bn,Rr,M2,sc,W4,R2,Y4,X7,Br,J4,yu,K4,Q4,eD,q,ac,Z4,B2,X4,e3,st,nc,t3,G2,s3,a3,H2,W2,n3,r3,Gr,o3,at,rc,l3,Y2,i3,p3,J2,K2,c3,d3,Hr,m3,Wr,oc,h3,Q2,f3,u3,Yr,lc,g3,Z2,_3,b3,xe,ic,$3,Ct,x3,X2,v3,y3,e$,j3,w3,ju,D3,k3,E3,pc,q3,t$,I3,T3,N3,cc,P3,s$,F3,L3,A3,Jr,S3,Kr,dc,C3,Ot,O3,a$,z3,V3,n$,U3,M3,wu,R3,B3,G3,nt,mc,H3,r$,W3,Y3,Qr,J3,Zr,K3,ys,hc,Q3,o$,Z3,X3,Xr,eE,js,fc,tE,l$,sE,aE,eo,nE,ws,uc,rE,i$,oE,lE,to,iE,Ds,gc,pE,_c,cE,so,dE,p$,mE,hE,fE,uE,ao,gE,ks,bc,_E,c$,bE,$E,no,xE,Es,$c,vE,d$,yE,jE,ro,wE,rt,xc,DE,m$,kE,EE,h$,qE,IE,oo,TE,qs,vc,NE,f$,PE,FE,lo,LE,Is,yc,AE,u$,SE,CE,io,OE,Ts,jc,zE,g$,VE,UE,po,ME,ot,wc,RE,_$,BE,GE,$n,HE,Du,WE,YE,b$,JE,KE,QE,co,ZE,Ns,Dc,XE,$$,e5,t5,mo,s5,Ps,kc,a5,x$,n5,r5,ho,o5,Fs,Ec,l5,qc,i5,v$,p5,c5,d5,fo,m5,Ls,Ic,h5,y$,f5,u5,uo,g5,As,Tc,_5,j$,b5,$5,Nc,x5,ku,v5,y5,j5,go,Pc,w5,xn,D5,w$,k5,E5,D$,q5,I5,T5,ve,Fc,N5,Oe,P5,k$,F5,L5,E$,A5,S5,q$,C5,O5,Eu,z5,V5,U5,ze,M5,I$,R5,B5,T$,G5,H5,N$,W5,Y5,P$,J5,K5,Q5,F$,Z5,X5,_o,e6,Ss,Lc,t6,lt,s6,L$,a6,n6,A$,r6,o6,qu,l6,i6,Iu,p6,c6,bo,d6,it,Ac,m6,Sc,h6,S$,f6,u6,g6,Tu,_6,C$,b6,$6,$o,x6,ye,Cc,v6,zt,y6,O$,j6,w6,z$,D6,k6,V$,E6,q6,I6,Oc,T6,Nu,N6,P6,F6,vn,L6,Pu,A6,S6,U$,C6,O6,z6,xo,V6,je,zc,U6,yn,M6,M$,R6,B6,R$,G6,H6,W6,jn,Y6,Fu,J6,K6,Lu,Q6,Z6,X6,wn,e8,Au,t8,s8,B$,a8,n8,r8,vo,o8,yo,Vc,l8,G$,i8,p8,pt,Uc,c8,H$,d8,m8,W$,h8,f8,jo,u8,we,Mc,g8,Y$,_8,b8,Rc,$8,J$,x8,v8,y8,Dn,K$,j8,w8,Q$,D8,k8,de,E8,Z$,q8,I8,X$,T8,N8,e1,P8,F8,t1,L8,A8,s1,S8,C8,O8,wo,z8,Cs,Bc,V8,a1,U8,M8,Do,R8,Os,Gc,B8,n1,G8,H8,ko,W8,ct,Hc,Y8,r1,J8,K8,o1,Q8,Z8,Eo,X8,dt,Wc,eq,l1,tq,sq,i1,aq,nq,qo,rq,mt,Yc,oq,Y,lq,p1,iq,pq,c1,cq,dq,d1,mq,hq,m1,fq,uq,h1,gq,_q,f1,bq,$q,u1,xq,vq,yq,Jc,jq,g1,wq,Dq,kq,Io,Eq,re,Kc,qq,kn,Iq,_1,Tq,Nq,b1,Pq,Fq,Lq,$1,Aq,Sq,Qc,Cq,x1,Oq,zq,Vq,v1,Uq,Mq,To,Rq,zs,Zc,Bq,y1,Gq,Hq,No,Wq,ht,Xc,Yq,j1,Jq,Kq,Vt,Qq,Su,Zq,Xq,Cu,e9,t9,w1,s9,a9,n9,Po,r9,Q,ed,o9,En,l9,Ou,i9,p9,D1,c9,d9,m9,qn,h9,zu,f9,u9,Vu,g9,_9,b9,td,$9,k1,x9,v9,y9,Fo,j9,Lo,w9,Ao,D9,Vs,sd,k9,Ut,E9,E1,q9,I9,Uu,T9,N9,q1,P9,F9,L9,So,A9,Co,ad,S9,I1,C9,O9,Us,nd,z9,T1,V9,U9,Oo,M9,Ms,rd,R9,od,B9,N1,G9,H9,W9,zo,Y9,Rs,ld,J9,P1,K9,Q9,Vo,Z9,Bs,id,X9,F1,eI,tI,Uo,sI,Gs,pd,aI,L1,nI,rI,Mo,oI,Hs,cd,lI,A1,iI,pI,Ro,cI,ft,dd,dI,In,mI,S1,hI,fI,C1,uI,gI,_I,O1,Mu,bI,md,$I,xI,Bo,vI,Ws,hd,yI,Mt,jI,z1,wI,DI,V1,kI,EI,U1,qI,II,TI,M1,Ru,NI,fd,PI,FI,Go,ud,LI,R1,AI,SI,Ys,gd,CI,B1,OI,zI,_d,VI,G1,UI,MI,RI,Js,bd,BI,H1,GI,HI,Ho,WI,Ks,$d,YI,W1,JI,KI,Wo,QI,Yo,xd,ZI,Y1,XI,eT,Jo,vd,tT,J1,sT,aT,Ko,yd,nT,K1,rT,oT,Qo,jd,lT,Q1,iT,pT,Zo,wd,cT,Z1,dT,mT,Xo,Dd,hT,X1,fT,uT,el,kd,gT,ex,_T,bT,tl,Ed,$T,Bu,Gu,xT,vT,yT,sl,qd,jT,Hu,Wu,wT,DT,kT,Yu,Id,ET,Ju,Td,qT,Ku,Nd,IT,Qu,Pd,TT,Zu,Fd,NT,Xu,Ld,PT,eg,Ad,FT,tg,Sd,LT,sg,Cd,AT,ag,Od,ST,ng,zd,CT,rg,Vd,OT,og,Ud,zT,Qs,Md,VT,tx,UT,MT,al,RT,Zs,Rd,BT,sx,GT,HT,nl,WT,Xs,Bd,YT,ax,JT,KT,rl,QT,ea,Gd,ZT,nx,XT,eN,ol,tN,ut,Hd,sN,rx,aN,nN,ll,rN,il,oN,ta,Wd,lN,Tn,iN,lg,pN,cN,ig,ox,dN,mN,hN,Nn,fN,lx,uN,gN,ix,_N,bN,$N,sa,Yd,xN,Jd,vN,px,yN,jN,wN,pl,tD,Rt,Kd,DN,Pn,kN,pg,EN,qN,cg,IN,TN,NN,cl,sD,ee,Qd,PN,cx,FN,LN,Fn,AN,dg,SN,CN,mg,ON,zN,VN,Ve,UN,dx,MN,RN,mx,BN,GN,hx,HN,WN,fx,YN,JN,KN,Ln,QN,ux,ZN,XN,gx,eP,tP,sP,dl,aD,me,Zd,aP,_x,nP,rP,bx,oP,lP,$x,iP,pP,Ue,xx,cP,dP,vx,mP,hP,yx,fP,uP,Xd,gP,hg,_P,bP,$P,Bt,xP,fg,vP,yP,jx,jP,wP,ug,DP,kP,nD,he,em,EP,wx,qP,IP,Dx,TP,NP,kx,PP,FP,Me,Ex,LP,AP,qx,SP,CP,Ix,OP,zP,tm,VP,gg,UP,MP,RP,Gt,BP,_g,GP,HP,Tx,WP,YP,bg,JP,KP,rD,fe,sm,QP,Nx,ZP,XP,Px,eF,tF,Fx,sF,aF,Re,Lx,nF,rF,Ax,oF,lF,Sx,iF,pF,am,cF,$g,dF,mF,hF,Ht,fF,xg,uF,gF,Cx,_F,bF,vg,$F,xF,oD,An,ml,Ox,nm,vF,zx,yF,lD,hl,jF,Vx,wF,DF,iD,F,rm,kF,Ux,EF,qF,aa,om,IF,Mx,TF,NF,fl,PF,na,lm,FF,Rx,LF,AF,ul,SF,ra,im,CF,Bx,OF,zF,gl,VF,oa,pm,UF,cm,MF,_l,RF,Gx,BF,GF,HF,WF,bl,YF,la,dm,JF,Hx,KF,QF,$l,ZF,ia,mm,XF,Wx,eL,tL,xl,sL,gt,hm,aL,Yx,nL,rL,Jx,oL,lL,vl,iL,pa,fm,pL,Kx,cL,dL,yl,mL,ca,um,hL,Qx,fL,uL,jl,gL,da,gm,_L,Zx,bL,$L,wl,xL,_t,_m,vL,Xx,yL,jL,ev,wL,DL,Dl,kL,De,bm,EL,tv,qL,IL,sv,TL,NL,av,PL,FL,kl,LL,ke,$m,AL,xm,SL,nv,CL,OL,zL,Be,VL,rv,UL,ML,ov,RL,BL,lv,GL,HL,iv,WL,YL,JL,pv,KL,QL,El,ZL,bt,vm,XL,ym,eA,cv,tA,sA,aA,yg,nA,dv,rA,oA,ql,lA,Il,jm,iA,Sn,pA,mv,cA,dA,hv,mA,hA,fA,Ee,wm,uA,Wt,gA,fv,_A,bA,uv,$A,xA,gv,vA,yA,jA,Dm,wA,jg,DA,kA,EA,Cn,qA,wg,IA,TA,_v,NA,PA,FA,Tl,LA,qe,km,AA,On,SA,bv,CA,OA,$v,zA,VA,UA,zn,MA,Dg,RA,BA,kg,GA,HA,WA,Vn,YA,xv,JA,KA,vv,QA,ZA,XA,Nl,eS,ma,Em,tS,yv,sS,aS,Pl,nS,$t,qm,rS,jv,oS,lS,Yt,iS,Eg,pS,cS,wv,dS,mS,Dv,hS,fS,uS,Fl,gS,ha,Im,_S,kv,bS,$S,Ll,xS,Ie,Tm,vS,Ev,yS,jS,qv,wS,DS,Un,kS,qg,ES,qS,Iv,IS,TS,NS,Al,PS,Te,Nm,FS,Tv,LS,AS,Mn,SS,Ig,CS,OS,Nv,zS,VS,US,Pm,Pv,MS,RS,Fv,BS,GS,Sl,HS,fa,Fm,WS,Lv,YS,JS,Cl,KS,ua,Lm,QS,Am,ZS,Av,XS,eC,tC,Ol,sC,Ne,Sm,aC,Rn,nC,Sv,rC,oC,Cv,lC,iC,pC,Ov,cC,dC,Jt,mC,Tg,hC,fC,Ng,uC,gC,zv,_C,bC,$C,zl,xC,oe,Cm,vC,Bn,yC,Pg,jC,wC,Vv,DC,kC,EC,Gn,qC,Fg,IC,TC,Lg,NC,PC,FC,Om,LC,Uv,AC,SC,CC,Vl,OC,Ul,zC,ga,zm,VC,Kt,UC,Mv,MC,RC,Ag,BC,GC,Rv,HC,WC,YC,Ml,JC,_a,Vm,KC,Bv,QC,ZC,Rl,XC,ba,Um,eO,Gv,tO,sO,Bl,aO,$a,Mm,nO,Hv,rO,oO,Gl,lO,xa,Rm,iO,Wv,pO,cO,Hl,dO,va,Bm,mO,Hn,hO,Sg,fO,uO,Cg,Yv,gO,_O,bO,Wn,$O,Jv,xO,vO,Kv,yO,jO,pD,Og,cD,Yn,Wl,Qv,Gm,wO,Zv,DO,dD,Yl,kO,zg,EO,qO,mD,A,Hm,IO,Xv,TO,NO,xt,Wm,PO,ey,FO,LO,Jl,AO,Kl,SO,ya,Ym,CO,ty,OO,zO,Ql,VO,ja,Jm,UO,sy,MO,RO,Zl,BO,wa,Km,GO,ay,HO,WO,Xl,YO,Vg,Qm,JO,Pe,Zm,KO,ny,QO,ZO,Xm,XO,ry,ez,tz,sz,Jn,oy,az,nz,ly,rz,oz,ue,lz,iy,iz,pz,py,cz,dz,cy,mz,hz,dy,fz,uz,my,gz,_z,bz,ei,$z,Da,eh,xz,hy,vz,yz,ti,jz,ka,th,wz,fy,Dz,kz,si,Ez,le,sh,qz,uy,Iz,Tz,gy,Nz,Pz,ah,Fz,_y,Lz,Az,Sz,Kn,Cz,Ug,Oz,zz,Mg,Vz,Uz,Mz,ai,Rz,Ea,nh,Bz,rh,Gz,by,Hz,Wz,Yz,ni,Jz,qa,oh,Kz,lh,Qz,$y,Zz,Xz,eV,ri,tV,oi,ih,sV,Rg,Bg,aV,nV,rV,li,ph,oV,Gg,Hg,lV,iV,pV,Wg,ch,cV,Yg,dh,dV,Jg,mh,mV,Kg,hh,hV,Qg,fh,fV,Zg,uh,uV,Xg,gh,gV,e_,_h,_V,t_,bh,bV,s_,$h,$V,a_,xh,xV,n_,vh,vV,r_,yh,hD,Qn,ii,xy,jh,yV,vy,jV,fD,pi,wV,yy,DV,kV,uD,U,wh,EV,Fe,Dh,qV,jy,IV,TV,kh,NV,wy,PV,FV,LV,Zn,Dy,AV,SV,ky,CV,OV,ge,zV,Ey,VV,UV,qy,MV,RV,Iy,BV,GV,Ty,HV,WV,Ny,YV,JV,KV,ci,QV,Ia,Eh,ZV,Py,XV,eU,di,tU,ie,qh,sU,Fy,aU,nU,Ly,rU,oU,Ih,lU,Ay,iU,pU,cU,Xn,dU,o_,mU,hU,l_,fU,uU,gU,mi,_U,Ta,Th,bU,Sy,$U,xU,hi,vU,Na,Nh,yU,Cy,jU,wU,fi,DU,Pa,Ph,kU,Oy,EU,qU,ui,IU,Fa,Fh,TU,zy,NU,PU,gi,FU,La,Lh,LU,Vy,AU,SU,_i,CU,Aa,Ah,OU,Uy,zU,VU,bi,gD,er,$i,My,Sh,UU,Ry,MU,_D,C,Ch,RU,By,BU,GU,Oh,HU,Gy,WU,YU,JU,i_,Hy,KU,QU,ZU,J,Wy,Sa,XU,p_,eM,tM,Yy,sM,aM,Jy,nM,rM,Ky,zh,oM,c_,lM,iM,pM,Qy,Vh,cM,Zy,dM,mM,hM,Uh,Ge,fM,Xy,uM,gM,d_,_M,bM,ej,$M,xM,m_,vM,yM,jM,xi,wM,tj,He,DM,h_,kM,EM,f_,qM,IM,u_,TM,NM,g_,PM,FM,LM,sj,Mh,AM,__,SM,CM,OM,aj,Qt,zM,b_,VM,UM,nj,MM,RM,rj,BM,GM,HM,oj,vi,$_,WM,YM,x_,JM,KM,QM,Ca,Rh,ZM,lj,XM,eR,yi,tR,ji,Bh,sR,ij,aR,nR,wi,Gh,rR,pj,oR,lR,Di,Hh,iR,cj,pR,cR,ki,Wh,dR,dj,mR,hR,Ei,Yh,fR,mj,uR,gR,vt,Jh,_R,hj,bR,$R,fj,xR,vR,qi,yR,Ii,Kh,jR,uj,wR,DR,Le,Qh,kR,gj,ER,qR,_j,IR,TR,Zt,NR,v_,PR,FR,y_,LR,AR,j_,SR,CR,OR,Ti,zR,yt,Zh,VR,bj,UR,MR,$j,RR,BR,Ni,bD,Xt,Xh,GR,xj,HR,WR,Pi,$D,B,ef,YR,vj,JR,KR,tf,QR,yj,ZR,XR,eB,tr,w_,jj,tB,sB,aB,D_,wj,nB,rB,oB,k_,Dj,lB,iB,pB,kj,cB,dB,Fi,mB,Oa,sf,hB,Ej,fB,uB,af,qj,gB,_B,Ij,bB,$B,jt,nf,xB,Tj,vB,yB,Nj,jB,wB,Li,DB,za,rf,kB,Pj,EB,qB,Ai,xD,We,of,IB,Fj,TB,NB,Lj,PB,FB,Si,vD,te,lf,LB,E_,Aj,AB,SB,CB,Sj,OB,zB,pf,VB,Cj,UB,MB,RB,Ci,BB,Oi,cf,GB,Oj,HB,yD,se,df,WB,q_,zj,YB,JB,KB,Vj,QB,ZB,Uj,XB,eG,zi,tG,Vi,mf,sG,Mj,aG,jD,es,hf,nG,Rj,rG,oG,Ui,wD,ts,ff,lG,Bj,iG,pG,Mi,DD,ss,uf,cG,Gj,dG,mG,Ri,kD,as,gf,hG,Hj,fG,uG,Bi,ED,M,_f,gG,Wj,_G,bG,Yj,$G,xG,sr,Jj,bf,vG,Kj,yG,jG,wG,ar,$f,DG,Qj,kG,EG,qG,xf,Zj,IG,TG,Xj,NG,PG,e0,FG,LG,nr,vf,AG,t0,SG,CG,OG,rr,s0,zG,VG,a0,UG,MG,n0,RG,BG,r0,GG,HG,Gi,WG,Va,yf,YG,o0,JG,KG,ns,l0,QG,ZG,i0,XG,eH,p0,tH,sH,c0,aH,nH,Hi,jf,rH,d0,oH,lH,Wi,wf,iH,m0,pH,cH,Yi,Df,dH,h0,mH,hH,Ji,kf,fH,f0,uH,qD,R,Ef,gH,u0,_H,bH,g0,$H,xH,rs,_0,qf,vH,b0,yH,jH,wH,or,If,DH,$0,kH,EH,qH,Tf,x0,IH,TH,v0,NH,PH,y0,FH,LH,j0,Nf,AH,w0,SH,CH,OH,D0,Pf,zH,k0,VH,UH,MH,Ki,RH,Ua,Ff,BH,E0,GH,HH,Ye,q0,WH,YH,I0,JH,KH,T0,QH,ZH,N0,XH,eW,P0,tW,sW,Qi,Lf,aW,F0,nW,rW,Zi,Af,oW,L0,lW,iW,Xi,Sf,pW,A0,cW,dW,ep,Cf,mW,S0,hW,ID,lr,tp,C0,Of,fW,O0,uW,TD,ae,zf,gW,z0,_W,bW,I_,V0,$W,xW,vW,U0,yW,jW,Ma,Vf,wW,Uf,DW,M0,kW,EW,qW,sp,IW,Ra,Mf,TW,os,NW,R0,PW,FW,B0,LW,AW,G0,SW,CW,OW,ap,ND,ir,np,H0,Rf,zW,W0,VW,PD,Ba,UW,Y0,MW,RW,T_,BW,GW,FD,K,Bf,HW,J0,WW,YW,rp,JW,Ga,Gf,KW,K0,QW,ZW,op,XW,Ha,Hf,eY,Q0,tY,sY,lp,aY,wt,Wf,nY,Z0,rY,oY,X0,lY,iY,ip,pY,pp,Yf,cY,ew,dY,LD,pr,cp,tw,Jf,mY,sw,hY,AD,O,Kf,fY,dp,aw,uY,gY,Qf,nw,_Y,bY,$Y,ls,xY,rw,vY,yY,ow,jY,wY,lw,DY,kY,EY,iw,qY,IY,pw,TY,NY,mp,PY,cr,FY,cw,LY,AY,dw,SY,CY,OY,hp,zY,is,VY,mw,UY,MY,hw,RY,BY,fw,GY,HY,WY,fp,YY,dr,JY,uw,KY,QY,N_,ZY,XY,eJ,up,tJ,mr,sJ,gw,aJ,nJ,P_,rJ,oJ,lJ,gp,SD,hr,Zf,iJ,fr,pJ,_w,cJ,dJ,bw,mJ,hJ,CD,ur,Xf,fJ,$w,uJ,OD,gr,_p,xw,eu,gJ,vw,_J,zD,_r,tu,bJ,yw,$J,VD;return t=new bs({}),xs=new bs({}),Zp=new E({props:{name:"class datasets.DatasetInfo",anchor:"datasets.DatasetInfo",parameters:[{name:"description",val:": str = <factory>"},{name:"citation",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"post_processed",val:": typing.Optional[datasets.info.PostProcessedInfo] = None"},{name:"supervised_keys",val:": typing.Optional[datasets.info.SupervisedKeysData] = None"},{name:"task_templates",val:": typing.Optional[typing.List[datasets.tasks.base.TaskTemplate]] = None"},{name:"builder_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"splits",val:": typing.Optional[dict] = None"},{name:"download_checksums",val:": typing.Optional[dict] = None"},{name:"download_size",val:": typing.Optional[int] = None"},{name:"post_processing_size",val:": typing.Optional[int] = None"},{name:"dataset_size",val:": typing.Optional[int] = None"},{name:"size_in_bytes",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.description",description:"<strong>description</strong> (str) &#x2014; A description of the dataset.",name:"description"},{anchor:"datasets.DatasetInfo.citation",description:"<strong>citation</strong> (str) &#x2014; A BibTeX citation of the dataset.",name:"citation"},{anchor:"datasets.DatasetInfo.homepage",description:"<strong>homepage</strong> (str) &#x2014; A URL to the official homepage for the dataset.",name:"homepage"},{anchor:"datasets.DatasetInfo.license",description:"<strong>license</strong> (str) &#x2014; The dataset&#x2019;s license. It can be the name of the license or a paragraph containing the terms of the license.",name:"license"},{anchor:"datasets.DatasetInfo.features",description:"<strong>features</strong> (Features, optional) &#x2014; The features used to specify the dataset&#x2019;s column types.",name:"features"},{anchor:"datasets.DatasetInfo.post_processed",description:"<strong>post_processed</strong> (PostProcessedInfo, optional) &#x2014; Information regarding the resources of a possible post-processing of a dataset. For example, it can contain the information of an index.",name:"post_processed"},{anchor:"datasets.DatasetInfo.supervised_keys",description:"<strong>supervised_keys</strong> (SupervisedKeysData, optional) &#x2014; Specifies the input feature and the label for supervised learning if applicable for the dataset (legacy from TFDS).",name:"supervised_keys"},{anchor:"datasets.DatasetInfo.builder_name",description:'<strong>builder_name</strong> (str, optional) &#x2014; The name of the <a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder">GeneratorBasedBuilder</a> subclass used to create the dataset. Usually matched to the corresponding script name. It is also the snake_case version of the dataset builder class name.',name:"builder_name"},{anchor:"datasets.DatasetInfo.config_name",description:'<strong>config_name</strong> (str, optional) &#x2014; The name of the configuration derived from <a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>',name:"config_name"},{anchor:"datasets.DatasetInfo.version",description:"<strong>version</strong> (str or Version, optional) &#x2014; The version of the dataset.",name:"version"},{anchor:"datasets.DatasetInfo.splits",description:"<strong>splits</strong> (dict, optional) &#x2014; The mapping between split name and metadata.",name:"splits"},{anchor:"datasets.DatasetInfo.download_checksums",description:"<strong>download_checksums</strong> (dict, optional) &#x2014; The mapping between the URL to download the dataset&#x2019;s checksums and corresponding metadata.",name:"download_checksums"},{anchor:"datasets.DatasetInfo.download_size",description:"<strong>download_size</strong> (int, optional) &#x2014; The size of the files to download to generate the dataset, in bytes.",name:"download_size"},{anchor:"datasets.DatasetInfo.post_processing_size",description:"<strong>post_processing_size</strong> (int, optional) &#x2014; Size of the dataset in bytes after post-processing, if any.",name:"post_processing_size"},{anchor:"datasets.DatasetInfo.dataset_size",description:"<strong>dataset_size</strong> (int, optional) &#x2014; The combined size in bytes of the Arrow tables for all splits.",name:"dataset_size"},{anchor:"datasets.DatasetInfo.size_in_bytes",description:"<strong>size_in_bytes</strong> (int, optional) &#x2014; The combined size in bytes of all files associated with the dataset (downloaded files + Arrow files).",name:"size_in_bytes"},{anchor:"datasets.DatasetInfo.task_templates",description:'<strong>task_templates</strong> (List[TaskTemplate], optional) &#x2014; The task templates to prepare the dataset for during training and evaluation. Each template casts the dataset&#x2019;s <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.',name:"task_templates"},{anchor:"datasets.DatasetInfo.*config_kwargs",description:'*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.',name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/info.py#L93"}}),Xp=new E({props:{name:"from_directory",anchor:"datasets.DatasetInfo.from_directory",parameters:[{name:"dataset_info_dir",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.from_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<em>str</em>) &#x2014; The directory containing the metadata file. This
should be the root directory of a specific dataset version.`,name:"dataset_info_dir"},{anchor:"datasets.DatasetInfo.from_directory.fs",description:`<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.5.0</p>
						
					</div>`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/info.py#L260"}}),Ur=new T({props:{anchor:"datasets.DatasetInfo.from_directory.example",$$slots:{default:[_ne]},$$scope:{ctx:k}}}),tc=new E({props:{name:"write_to_directory",anchor:"datasets.DatasetInfo.write_to_directory",parameters:[{name:"dataset_info_dir",val:""},{name:"pretty_print",val:" = False"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.write_to_directory.dataset_info_dir",description:"<strong>dataset_info_dir</strong> (str) &#x2014; Destination directory.",name:"dataset_info_dir"},{anchor:"datasets.DatasetInfo.write_to_directory.pretty_print",description:"<strong>pretty_print</strong> (bool, default <code>False</code>) &#x2014; If True, the JSON will be pretty-printed with the indent level of 4.",name:"pretty_print"},{anchor:"datasets.DatasetInfo.write_to_directory.fs",description:`<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.5.0</p>
						
					</div>`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/info.py#L193"}}),Mr=new T({props:{anchor:"datasets.DatasetInfo.write_to_directory.example",$$slots:{default:[bne]},$$scope:{ctx:k}}}),sc=new bs({}),ac=new E({props:{name:"class datasets.Dataset",anchor:"datasets.Dataset",parameters:[{name:"arrow_table",val:": Table"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_table",val:": typing.Optional[datasets.table.Table] = None"},{name:"fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L648"}}),nc=new E({props:{name:"add_column",anchor:"datasets.Dataset.add_column",parameters:[{name:"name",val:": str"},{name:"column",val:": typing.Union[list, <built-in function array>]"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_column.name",description:"<strong>name</strong> (str) &#x2014; Column name.",name:"name"},{anchor:"datasets.Dataset.add_column.column",description:"<strong>column</strong> (list or np.array) &#x2014; Column data to be added.",name:"column"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L4652",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Gr=new T({props:{anchor:"datasets.Dataset.add_column.example",$$slots:{default:[$ne]},$$scope:{ctx:k}}}),rc=new E({props:{name:"add_item",anchor:"datasets.Dataset.add_item",parameters:[{name:"item",val:": dict"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_item.item",description:"<strong>item</strong> (dict) &#x2014; Item data to be added.",name:"item"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L4893",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Hr=new T({props:{anchor:"datasets.Dataset.add_item.example",$$slots:{default:[xne]},$$scope:{ctx:k}}}),oc=new E({props:{name:"from_file",anchor:"datasets.Dataset.from_file",parameters:[{name:"filename",val:": str"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_filename",val:": typing.Optional[str] = None"},{name:"in_memory",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.from_file.filename",description:"<strong>filename</strong> (<code>str</code>) &#x2014; File name of the dataset.",name:"filename"},{anchor:"datasets.Dataset.from_file.info",description:'<strong>info</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_file.split",description:'<strong>split</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_file.indices_filename",description:"<strong>indices_filename</strong> (<code>str</code>, optional) &#x2014; File names of the indices.",name:"indices_filename"},{anchor:"datasets.Dataset.from_file.in_memory",description:"<strong>in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L719",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),lc=new E({props:{name:"from_buffer",anchor:"datasets.Dataset.from_buffer",parameters:[{name:"buffer",val:": Buffer"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_buffer",val:": typing.Optional[pyarrow.lib.Buffer] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_buffer.buffer",description:"<strong>buffer</strong> (<code>pyarrow.Buffer</code>) &#x2014; Arrow buffer.",name:"buffer"},{anchor:"datasets.Dataset.from_buffer.info",description:'<strong>info</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_buffer.split",description:'<strong>split</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_buffer.indices_buffer",description:"<strong>indices_buffer</strong> (<code>pyarrow.Buffer</code>, optional) &#x2014; Indices Arrow buffer.",name:"indices_buffer"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L754",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ic=new E({props:{name:"from_pandas",anchor:"datasets.Dataset.from_pandas",parameters:[{name:"df",val:": DataFrame"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"preserve_index",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014; Dataframe that contains the dataset.",name:"df"},{anchor:"datasets.Dataset.from_pandas.features",description:'<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_pandas.info",description:'<strong>info</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_pandas.split",description:'<strong>split</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014; Whether to store the index as an additional column in the resulting Dataset.
The default of None will store the index as a column, except for RangeIndex which is stored as metadata only.
Use preserve_index=True to force it to be stored as a column.`,name:"preserve_index"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L782",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Jr=new T({props:{anchor:"datasets.Dataset.from_pandas.example",$$slots:{default:[vne]},$$scope:{ctx:k}}}),dc=new E({props:{name:"from_dict",anchor:"datasets.Dataset.from_dict",parameters:[{name:"mapping",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_dict.mapping",description:"<strong>mapping</strong> (<code>Mapping</code>) &#x2014; Mapping of strings to Arrays or Python lists.",name:"mapping"},{anchor:"datasets.Dataset.from_dict.features",description:'<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_dict.info",description:'<strong>info</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_dict.split",description:'<strong>split</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L839",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),mc=new E({props:{name:"from_generator",anchor:"datasets.Dataset.from_generator",parameters:[{name:"generator",val:": typing.Callable"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"gen_kwargs",val:": typing.Optional[dict] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_generator.generator",description:"<strong>generator</strong> (<code>Callable</code>) &#x2014; A generator function that <em>yields</em> examples.",name:"generator"},{anchor:"datasets.Dataset.from_generator.features",description:'<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_generator.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_generator.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_generator.gen_kwargs(dict,",description:`<strong>gen_kwargs(<code>dict</code>,</strong> optional) &#x2014; Keyword arguments to be passed to the <em>generator</em> callable.
You can define a sharded dataset by passing the list of shards in <em>gen_kwargs</em>.`,name:"gen_kwargs(dict,"},{anchor:"datasets.Dataset.from_generator.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>GeneratorConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L940",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Qr=new T({props:{anchor:"datasets.Dataset.from_generator.example",$$slots:{default:[yne]},$$scope:{ctx:k}}}),Zr=new T({props:{anchor:"datasets.Dataset.from_generator.example-2",$$slots:{default:[jne]},$$scope:{ctx:k}}}),hc=new E({props:{name:"data",anchor:"datasets.Dataset.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1381"}}),Xr=new T({props:{anchor:"datasets.Dataset.data.example",$$slots:{default:[wne]},$$scope:{ctx:k}}}),fc=new E({props:{name:"cache_files",anchor:"datasets.Dataset.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1401"}}),eo=new T({props:{anchor:"datasets.Dataset.cache_files.example",$$slots:{default:[Dne]},$$scope:{ctx:k}}}),uc=new E({props:{name:"num_columns",anchor:"datasets.Dataset.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1419"}}),to=new T({props:{anchor:"datasets.Dataset.num_columns.example",$$slots:{default:[kne]},$$scope:{ctx:k}}}),gc=new E({props:{name:"num_rows",anchor:"datasets.Dataset.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1434"}}),ao=new T({props:{anchor:"datasets.Dataset.num_rows.example",$$slots:{default:[Ene]},$$scope:{ctx:k}}}),bc=new E({props:{name:"column_names",anchor:"datasets.Dataset.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1451"}}),no=new T({props:{anchor:"datasets.Dataset.column_names.example",$$slots:{default:[qne]},$$scope:{ctx:k}}}),$c=new E({props:{name:"shape",anchor:"datasets.Dataset.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1466"}}),ro=new T({props:{anchor:"datasets.Dataset.shape.example",$$slots:{default:[Ine]},$$scope:{ctx:k}}}),xc=new E({props:{name:"unique",anchor:"datasets.Dataset.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.unique.column",description:'<strong>column</strong> (<code>str</code>) &#x2014; Column name (list all the column names with <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names</a>).',name:"column"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1483",returnDescription:`
<p>List of unique elements in the given column.</p>
`,returnType:`
<p><code>list</code></p>
`}}),oo=new T({props:{anchor:"datasets.Dataset.unique.example",$$slots:{default:[Tne]},$$scope:{ctx:k}}}),vc=new E({props:{name:"flatten",anchor:"datasets.Dataset.flatten",parameters:[{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"max_depth",val:" = 16"}],parametersDescription:[{anchor:"datasets.Dataset.flatten.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1587",returnDescription:`
<p>A copy of the dataset with flattened columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),lo=new T({props:{anchor:"datasets.Dataset.flatten.example",$$slots:{default:[Nne]},$$scope:{ctx:k}}}),yc=new E({props:{name:"cast",anchor:"datasets.Dataset.cast",parameters:[{name:"features",val:": Features"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"num_proc",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"},{anchor:"datasets.Dataset.cast.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to cast.
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to cast.`,name:"batch_size"},{anchor:"datasets.Dataset.cast.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.cast.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.cast.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.cast.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.cast.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1630",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),io=new T({props:{anchor:"datasets.Dataset.cast.example",$$slots:{default:[Pne]},$$scope:{ctx:k}}}),jc=new E({props:{name:"cast_column",anchor:"datasets.Dataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.Dataset.cast_column.feature",description:"<strong>feature</strong> (<code>FeatureType</code>) &#x2014; Target feature.",name:"feature"},{anchor:"datasets.Dataset.cast_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1706",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),po=new T({props:{anchor:"datasets.Dataset.cast_column.example",$$slots:{default:[Fne]},$$scope:{ctx:k}}}),wc=new E({props:{name:"remove_columns",anchor:"datasets.Dataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"},{anchor:"datasets.Dataset.remove_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1745",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),co=new T({props:{anchor:"datasets.Dataset.remove_columns.example",$$slots:{default:[Lne]},$$scope:{ctx:k}}}),Dc=new E({props:{name:"rename_column",anchor:"datasets.Dataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.Dataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"},{anchor:"datasets.Dataset.rename_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1794",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),mo=new T({props:{anchor:"datasets.Dataset.rename_column.example",$$slots:{default:[Ane]},$$scope:{ctx:k}}}),kc=new E({props:{name:"rename_columns",anchor:"datasets.Dataset.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"},{anchor:"datasets.Dataset.rename_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1858",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ho=new T({props:{anchor:"datasets.Dataset.rename_columns.example",$$slots:{default:[Sne]},$$scope:{ctx:k}}}),Ec=new E({props:{name:"class_encode_column",anchor:"datasets.Dataset.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.class_encode_column.column",description:'<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast (list all the column names with <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names</a>)',name:"column"},{anchor:"datasets.Dataset.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1513"}}),fo=new T({props:{anchor:"datasets.Dataset.class_encode_column.example",$$slots:{default:[Cne]},$$scope:{ctx:k}}}),Ic=new E({props:{name:"__len__",anchor:"datasets.Dataset.__len__",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1924"}}),uo=new T({props:{anchor:"datasets.Dataset.__len__.example",$$slots:{default:[One]},$$scope:{ctx:k}}}),Tc=new E({props:{name:"__iter__",anchor:"datasets.Dataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1998"}}),Pc=new E({props:{name:"formatted_as",anchor:"datasets.Dataset.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;pandas&apos;, &apos;arrow&apos;]</code>
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.formatted_as.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.Dataset.formatted_as.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L2018"}}),Fc=new E({props:{name:"set_format",anchor:"datasets.Dataset.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <strong>getitem</strong> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.set_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.Dataset.set_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L2046"}}),_o=new T({props:{anchor:"datasets.Dataset.set_format.example",$$slots:{default:[zne]},$$scope:{ctx:k}}}),Lc=new E({props:{name:"set_transform",anchor:"datasets.Dataset.set_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.set_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.set_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.set_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L2147"}}),bo=new T({props:{anchor:"datasets.Dataset.set_transform.example",$$slots:{default:[Vne]},$$scope:{ctx:k}}}),Ac=new E({props:{name:"reset_format",anchor:"datasets.Dataset.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L2118"}}),$o=new T({props:{anchor:"datasets.Dataset.reset_format.example",$$slots:{default:[Une]},$$scope:{ctx:k}}}),Cc=new E({props:{name:"with_format",anchor:"datasets.Dataset.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <strong>getitem</strong> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.with_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.Dataset.with_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L2187"}}),xo=new T({props:{anchor:"datasets.Dataset.with_format.example",$$slots:{default:[Mne]},$$scope:{ctx:k}}}),zc=new E({props:{name:"with_transform",anchor:"datasets.Dataset.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L2235"}}),vo=new T({props:{anchor:"datasets.Dataset.with_transform.example",$$slots:{default:[Rne]},$$scope:{ctx:k}}}),Vc=new E({props:{name:"__getitem__",anchor:"datasets.Dataset.__getitem__",parameters:[{name:"key",val:""}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L2354"}}),Uc=new E({props:{name:"cleanup_cache_files",anchor:"datasets.Dataset.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L2360",returnDescription:`
<p>Number of removed files.</p>
`,returnType:`
<p><code>int</code></p>
`}}),jo=new T({props:{anchor:"datasets.Dataset.cleanup_cache_files.example",$$slots:{default:[Bne]},$$scope:{ctx:k}}}),Mc=new E({props:{name:"map",anchor:"datasets.Dataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.map.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Function with one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(example: Dict[str, Any], </em>extra_args) -&gt; Dict[str, Any]<em> if </em>batched=False<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(batch: Dict[str, List], </em>extra_args) -&gt; Dict[str, List]<em> if </em>batched=True<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.Dataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.`,name:"with_indices"},{anchor:"datasets.Dataset.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.Dataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.Dataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>.`,name:"batch_size"},{anchor:"datasets.Dataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.Dataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.Dataset.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.map.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.map.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"},{anchor:"datasets.Dataset.map.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Max number of processes when generating cache. Already cached shards are loaded sequentially",name:"num_proc"},{anchor:"datasets.Dataset.map.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If cache<em>file_name is specified, then this suffix
will be added at the end of the base name of each: defaults to &#x201D;</em>{rank:05d}<em>of</em>{num_proc:05d}&#x201C;. For example, if cache_file_name is &#x201C;processed.arrow&#x201D;, then for
rank=1 and num_proc=4, the resulting file would be &#x201C;processed_00001_of_00004.arrow&#x201D; for the default suffix.`,name:"suffix_template"},{anchor:"datasets.Dataset.map.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L2407"}}),wo=new T({props:{anchor:"datasets.Dataset.map.example",$$slots:{default:[Gne]},$$scope:{ctx:k}}}),Bc=new E({props:{name:"filter",anchor:"datasets.Dataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.Dataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.Dataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.Dataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if
<code>batched = True</code>. If <code>batched = False</code>, one example per batch is passed to <code>function</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>: provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.Dataset.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.filter.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>dict</code>, optional) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.Dataset.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.Dataset.filter.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <em>cache_file_name</em> is specified, then this suffix will be added at the end of the base name of each.
For example, if <em>cache_file_name</em> is <em>&#x201C;processed.arrow&#x201D;</em>, then for <code>rank = 1</code> and <code>num_proc = 4</code>,
the resulting file would be <em>&#x201C;processed_00001_of_00004.arrow&#x201D;</em> for the default suffix (default
<em><em>{rank:05d}_of</em>{num_proc:05d}</em>)`,name:"suffix_template"},{anchor:"datasets.Dataset.filter.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L3031"}}),Do=new T({props:{anchor:"datasets.Dataset.filter.example",$$slots:{default:[Hne]},$$scope:{ctx:k}}}),Gc=new E({props:{name:"select",anchor:"datasets.Dataset.select",parameters:[{name:"indices",val:": typing.Iterable"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.select.indices",description:`<strong>indices</strong> (range, list, iterable, ndarray or Series) &#x2014; Range, list or 1D-array of integer indices for indexing.
If the indices correspond to a contiguous range, the Arrow table is simply sliced.
However passing a list of indices that are not contiguous creates indices mapping, which is much less efficient,
but still faster than recreating an Arrow table made of the requested rows.`,name:"indices"},{anchor:"datasets.Dataset.select.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the indices mapping in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.select.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.select.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.select.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L3208"}}),ko=new T({props:{anchor:"datasets.Dataset.select.example",$$slots:{default:[Wne]},$$scope:{ctx:k}}}),Hc=new E({props:{name:"sort",anchor:"datasets.Dataset.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.Dataset.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.Dataset.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.Dataset.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.Dataset.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.sort.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
sorted indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.sort.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L3449"}}),Eo=new T({props:{anchor:"datasets.Dataset.sort.example",$$slots:{default:[Yne]},$$scope:{ctx:k}}}),Wc=new E({props:{name:"shuffle",anchor:"datasets.Dataset.shuffle",parameters:[{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the shuffled indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the shuffled indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shuffle.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
shuffled indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.shuffle.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L3543"}}),qo=new T({props:{anchor:"datasets.Dataset.shuffle.example",$$slots:{default:[Jne]},$$scope:{ctx:k}}}),Yc=new E({props:{name:"train_test_split",anchor:"datasets.Dataset.train_test_split",parameters:[{name:"test_size",val:": typing.Union[float, int, NoneType] = None"},{name:"train_size",val:": typing.Union[float, int, NoneType] = None"},{name:"shuffle",val:": bool = True"},{name:"stratify_by_column",val:": typing.Optional[str] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"train_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"test_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"train_new_fingerprint",val:": typing.Optional[str] = None"},{name:"test_new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.train_test_split.test_size",description:`<strong>test_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the test split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split.
If int, represents the absolute number of test samples.
If None, the value is set to the complement of the train size.
If train_size is also None, it will be set to 0.25.`,name:"test_size"},{anchor:"datasets.Dataset.train_test_split.train_size",description:`<strong>train_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the train split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split.
If int, represents the absolute number of train samples.
If None, the value is automatically set to the complement of the test size.`,name:"train_size"},{anchor:"datasets.Dataset.train_test_split.shuffle",description:"<strong>shuffle</strong> (<code>bool</code>, optional, default <em>True</em>) &#x2014; Whether or not to shuffle the data before splitting.",name:"shuffle"},{anchor:"datasets.Dataset.train_test_split.stratify_by_column",description:"<strong>stratify_by_column</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The column name of labels to be used to perform stratified split of data.",name:"stratify_by_column"},{anchor:"datasets.Dataset.train_test_split.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.train_test_split.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.train_test_split.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the splits indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.train_test_split.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the splits indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.train_test_split.train_cache_file_name",description:`<strong>train_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
train split indices instead of the automatically generated cache file name.`,name:"train_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.test_cache_file_name",description:`<strong>test_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
test split indices instead of the automatically generated cache file name.`,name:"test_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.train_test_split.train_new_fingerprint",description:`<strong>train_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the train set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"train_new_fingerprint"},{anchor:"datasets.Dataset.train_test_split.test_new_fingerprint",description:`<strong>test_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the test set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"test_new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L3638"}}),Io=new T({props:{anchor:"datasets.Dataset.train_test_split.example",$$slots:{default:[Kne]},$$scope:{ctx:k}}}),Kc=new E({props:{name:"shard",anchor:"datasets.Dataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = False"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.Dataset.shard.num_shards",description:"<strong>num_shards</strong> (<code>int</code>) &#x2014; How many shards to split the dataset into.",name:"num_shards"},{anchor:"datasets.Dataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014; Which shard to select and return.
contiguous &#x2014; (<code>bool</code>, default <em>False</em>): Whether to select contiguous blocks of indices for shards.`,name:"index"},{anchor:"datasets.Dataset.shard.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shard.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shard.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices of each shard instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shard.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L3906"}}),To=new T({props:{anchor:"datasets.Dataset.shard.example",$$slots:{default:[Qne]},$$scope:{ctx:k}}}),Zc=new E({props:{name:"to_tf_dataset",anchor:"datasets.Dataset.to_tf_dataset",parameters:[{name:"batch_size",val:": int"},{name:"columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"shuffle",val:": bool = False"},{name:"collate_fn",val:": typing.Optional[typing.Callable] = None"},{name:"drop_remainder",val:": bool = False"},{name:"collate_fn_args",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"label_cols",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"prefetch",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.to_tf_dataset.batch_size",description:"<strong>batch_size</strong> (<code>int</code>) &#x2014; Size of batches to load from the dataset.",name:"batch_size"},{anchor:"datasets.Dataset.to_tf_dataset.columns",description:`<strong>columns</strong> (<code>List[str]</code> or <code>str</code>, optional) &#x2014; Dataset column(s) to load in the tf.data.Dataset. Column
names that are created by the <em>collate_fn</em> and that do not exist in the original dataset can be used.`,name:"columns"},{anchor:"datasets.Dataset.to_tf_dataset.shuffle(bool,",description:`<strong>shuffle(<code>bool</code>,</strong> default to <em>False</em>) &#x2014; Shuffle the dataset order when loading. Recommended True for training, False for
validation/evaluation.`,name:"shuffle(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.drop_remainder(bool,",description:`<strong>drop_remainder(<code>bool</code>,</strong> default <code>False</code>) &#x2014; Drop the last incomplete batch when loading. Ensures
that all batches yielded by the dataset will have the same length on the batch dimension.`,name:"drop_remainder(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn(Callable,",description:`<strong>collate_fn(<code>Callable</code>,</strong> optional) &#x2014; A function or callable object (such as a <em>DataCollator</em>) that will collate
lists of samples into a batch.`,name:"collate_fn(Callable,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict</code>, optional) &#x2014; An optional <em>dict</em> of keyword arguments to be passed to the
<em>collate_fn</em>.`,name:"collate_fn_args"},{anchor:"datasets.Dataset.to_tf_dataset.label_cols",description:`<strong>label_cols</strong> (<code>List[str]</code> or <code>str</code>, default <code>None</code>) &#x2014; Dataset column(s) to load as
labels. Note that many models compute loss internally rather than letting Keras do it, in which case
passing the labels here is optional, as long as they&#x2019;re in the input <em>columns</em>.`,name:"label_cols"},{anchor:"datasets.Dataset.to_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to run the dataloader in a separate thread and maintain
a small buffer of batches for training. Improves performance by allowing data to be loaded in the
background while the model is training.`,name:"prefetch"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L336",returnDescription:`
<p><code>tf.data.Dataset</code></p>
`}}),No=new T({props:{anchor:"datasets.Dataset.to_tf_dataset.example",$$slots:{default:[Zne]},$$scope:{ctx:k}}}),Xc=new E({props:{name:"push_to_hub",anchor:"datasets.Dataset.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"split",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": typing.Optional[str] = None"},{name:"max_shard_size",val:": typing.Union[int, str, NoneType] = None"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.Dataset.push_to_hub.split",description:`<strong>split</strong> (Optional, <code>str</code>) &#x2014;
The name of the split that will be given to that dataset. Defaults to <em>self.split</em>.`,name:"split"},{anchor:"datasets.Dataset.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.Dataset.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.Dataset.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset. This defaults to the default branch as specified
in your repository, which defaults to <em>&#x201C;main&#x201D;</em>.`,name:"branch"},{anchor:"datasets.Dataset.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;5MB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.Dataset.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.Dataset.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L4496"}}),Po=new T({props:{anchor:"datasets.Dataset.push_to_hub.example",$$slots:{default:[Xne]},$$scope:{ctx:k}}}),ed=new E({props:{name:"save_to_disk",anchor:"datasets.Dataset.save_to_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.Dataset.save_to_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI (e.g. <em>s3://my-bucket/dataset/train</em>)
of the dataset directory where the dataset will be saved to.`,name:"dataset_path"},{anchor:"datasets.Dataset.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1182"}}),Fo=new T({props:{anchor:"datasets.Dataset.save_to_disk.example",$$slots:{default:[ere]},$$scope:{ctx:k}}}),Lo=new T({props:{anchor:"datasets.Dataset.save_to_disk.example-2",$$slots:{default:[tre]},$$scope:{ctx:k}}}),Ao=new T({props:{anchor:"datasets.Dataset.save_to_disk.example-3",$$slots:{default:[sre]},$$scope:{ctx:k}}}),sd=new E({props:{name:"load_from_disk",anchor:"datasets.Dataset.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3//my-bucket/dataset/train&#x201D;</em>) of the dataset directory where the dataset will be loaded from.`,name:"dataset_path"},{anchor:"datasets.Dataset.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.Dataset.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1304",returnDescription:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset directory: the dataset requested.</li>
<li>If <em>dataset_path</em> is a path of a dataset dict directory: a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),So=new T({props:{anchor:"datasets.Dataset.load_from_disk.example",$$slots:{default:[are]},$$scope:{ctx:k}}}),ad=new E({props:{name:"flatten_indices",anchor:"datasets.Dataset.flatten_indices",parameters:[{name:"keep_in_memory",val:": bool = False"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.flatten_indices.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.flatten_indices.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.flatten_indices.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.flatten_indices.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.flatten_indices.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Allow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.flatten_indices.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L3139"}}),nd=new E({props:{name:"to_csv",anchor:"datasets.Dataset.to_csv",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_csv_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_csv.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_csv.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_csv.*to_csv_kwargs",description:"*<strong>*to_csv_kwargs</strong> (additional keyword arguments) &#x2014; Parameters to pass to pandas&#x2019;s <code>pandas.DataFrame.to_csv</code>",name:"*to_csv_kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L4067",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),Oo=new T({props:{anchor:"datasets.Dataset.to_csv.example",$$slots:{default:[nre]},$$scope:{ctx:k}}}),rd=new E({props:{name:"to_pandas",anchor:"datasets.Dataset.to_pandas",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_pandas.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasets once)`,name:"batched"},{anchor:"datasets.Dataset.to_pandas.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L4180",returnDescription:`
<p><em>pandas.DataFrame</em> or <em>Iterator[pandas.DataFrame]</em></p>
`}}),zo=new T({props:{anchor:"datasets.Dataset.to_pandas.example",$$slots:{default:[rre]},$$scope:{ctx:k}}}),ld=new E({props:{name:"to_dict",anchor:"datasets.Dataset.to_dict",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_dict.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasets once)`,name:"batched"},{anchor:"datasets.Dataset.to_dict.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L4100",returnDescription:`
<p><em>dict</em> or <em>Iterator[dict]</em></p>
`}}),Vo=new T({props:{anchor:"datasets.Dataset.to_dict.example",$$slots:{default:[ore]},$$scope:{ctx:k}}}),id=new E({props:{name:"to_json",anchor:"datasets.Dataset.to_json",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_json_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_json.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_json.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_json.lines",description:`<strong>lines</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether output JSON lines format.
Only possible if \`<code>orient=&quot;records&quot;</code>. It will throw ValueError with <code>orient</code> different from <code>&quot;records&quot;</code>, since the others are not list-like. - <strong>orient</strong> (<code>str</code>, default <code>&quot;records&quot;</code>) &#x2014; Format of the JSON:</p>
<ul>
<li><code>&quot;records&quot;</code>: list like <code>[{column -&gt; value}, &#x2026; , {column -&gt; value}]</code></li>
<li><code>&quot;split&quot;</code>: dict like <code>{&quot;index&quot; -&gt; [index], &quot;columns&quot; -&gt; [columns], &quot;data&quot; -&gt; [values]}</code></li>
<li><code>&quot;index&quot;</code>: dict like <code>{index -&gt; {column -&gt; value}&#x200C;}</code></li>
<li><code>&quot;columns&quot;</code>: dict like <code>{column -&gt; {index -&gt; value}&#x200C;}</code></li>
<li><code>&quot;values&quot;</code>: just the values array</li>
<li><code>&quot;table&quot;</code>: dict like <code>{&quot;schema&quot;: {schema}, &quot;data&quot;: {data}&#x200C;}</code></li>
</ul>`,name:"lines"},{anchor:"datasets.Dataset.to_json.*to_json_kwargs",description:'*<strong>*to_json_kwargs</strong> (additional keyword arguments) &#x2014; Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow">pandas.DataFrame.to_json</a>.',name:"*to_json_kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L4135",returnDescription:`
<p>The number of characters or bytes written.</p>
`,returnType:`
<p>int</p>
`}}),Uo=new T({props:{anchor:"datasets.Dataset.to_json.example",$$slots:{default:[lre]},$$scope:{ctx:k}}}),pd=new E({props:{name:"to_parquet",anchor:"datasets.Dataset.to_parquet",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**parquet_writer_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_parquet.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_parquet.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_parquet.*parquet_writer_kwargs",description:"*<strong>*parquet_writer_kwargs</strong> (additional keyword arguments) &#x2014; Parameters to pass to PyArrow&#x2019;s <code>pyarrow.parquet.ParquetWriter</code>",name:"*parquet_writer_kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L4217",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),Mo=new T({props:{anchor:"datasets.Dataset.to_parquet.example",$$slots:{default:[ire]},$$scope:{ctx:k}}}),cd=new E({props:{name:"to_sql",anchor:"datasets.Dataset.to_sql",parameters:[{name:"name",val:": str"},{name:"con",val:": typing.Union[str, ForwardRef('sqlalchemy.engine.Connection'), ForwardRef('sqlalchemy.engine.Engine'), ForwardRef('sqlite3.Connection')]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**sql_writer_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_sql.name",description:"<strong>name</strong> (<em>str</em>) &#x2014; Name of SQL table.",name:"name"},{anchor:"datasets.Dataset.to_sql.con",description:`<strong>con</strong> (<em>str</em> or <code>sqlite3.Connection</code> or <code>sqlalchemy.engine.Connection</code> or <code>sqlalchemy.engine.Connection</code>) &#x2014;
A <a href="https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls" rel="nofollow">URI string</a> or a SQLite3/SQLAlchemy connection object used to write to a database.`,name:"con"},{anchor:"datasets.Dataset.to_sql.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_sql.*sql_writer_kwargs",description:"*<strong>*sql_writer_kwargs</strong> (additional keyword arguments) &#x2014; Parameters to pass to pandas&#x2019;s :function:<em>Dataframe.to_sql</em>",name:"*sql_writer_kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L4245",returnDescription:`
<p>The number of records written.</p>
`,returnType:`
<p>int</p>
`}}),Ro=new T({props:{anchor:"datasets.Dataset.to_sql.example",$$slots:{default:[pre]},$$scope:{ctx:k}}}),dd=new E({props:{name:"add_faiss_index",anchor:"datasets.Dataset.add_faiss_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"batch_size",val:": int = 1000"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the vectors to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_faiss_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.
By default it corresponds to <em>column</em>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index.batch_size",description:`<strong>batch_size</strong> (Optional <code>int</code>) &#x2014; Size of the batch to use while adding vectors to the FaissIndex. Default value is 1000.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"batch_size"},{anchor:"datasets.Dataset.add_faiss_index.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index.dtype",description:`<strong>dtype</strong> (data-type) &#x2014; The dtype of the numpy arrays that are indexed.
Default is <code>np.float32</code>.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L4690"}}),Bo=new T({props:{anchor:"datasets.Dataset.add_faiss_index.example",$$slots:{default:[cre]},$$scope:{ctx:k}}}),hd=new E({props:{name:"add_faiss_index_from_external_arrays",anchor:"datasets.Dataset.add_faiss_index_from_external_arrays",parameters:[{name:"external_arrays",val:": array"},{name:"index_name",val:": str"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"batch_size",val:": int = 1000"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.external_arrays",description:`<strong>external_arrays</strong> (<code>np.array</code>) &#x2014;
If you want to use arrays from outside the lib for the index, you can set <code>external_arrays</code>.
It will use <code>external_arrays</code> to create the Faiss index instead of the arrays in the given <code>column</code>.`,name:"external_arrays"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.batch_size",description:`<strong>batch_size</strong> (Optional <code>int</code>) &#x2014; Size of the batch to use while adding vectors to the FaissIndex. Default value is 1000.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"batch_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.dtype",description:"<strong>dtype</strong> (<code>numpy.dtype</code>) &#x2014; The dtype of the numpy arrays that are indexed. Default is np.float32.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L4767"}}),ud=new E({props:{name:"save_faiss_index",anchor:"datasets.Dataset.save_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"}],parametersDescription:[{anchor:"datasets.Dataset.save_faiss_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.save_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/search.py#L523"}}),gd=new E({props:{name:"load_faiss_index",anchor:"datasets.Dataset.load_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"device",val:": typing.Union[int, typing.List[int], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to
call <em>.get_nearest</em> or <em>.search</em>.`,name:"index_name"},{anchor:"datasets.Dataset.load_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"},{anchor:"datasets.Dataset.load_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/search.py#L536"}}),bd=new E({props:{name:"add_elasticsearch_index",anchor:"datasets.Dataset.add_elasticsearch_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('elasticsearch.Elasticsearch')] = None"},{name:"es_index_name",val:": typing.Optional[str] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.add_elasticsearch_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the documents to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_elasticsearch_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index name that is used to call <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.search">Dataset.search()</a>.
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.add_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (Optional <code>str</code>) &#x2014;
The elasticsearch index name used to create the index.`,name:"es_index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.
Default config is:`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L4823"}}),Ho=new T({props:{anchor:"datasets.Dataset.add_elasticsearch_index.example",$$slots:{default:[dre]},$$scope:{ctx:k}}}),$d=new E({props:{name:"load_elasticsearch_index",anchor:"datasets.Dataset.load_elasticsearch_index",parameters:[{name:"index_name",val:": str"},{name:"es_index_name",val:": str"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('Elasticsearch')] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_elasticsearch_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_name",description:"<strong>es_index_name</strong> (<code>str</code>) &#x2014; The name of elasticsearch index to load.",name:"es_index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.load_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/search.py#L614"}}),Wo=new T({props:{anchor:"datasets.Dataset.load_elasticsearch_index.example",$$slots:{default:[mre]},$$scope:{ctx:k}}}),xd=new E({props:{name:"list_indexes",anchor:"datasets.Dataset.list_indexes",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/search.py#L426"}}),vd=new E({props:{name:"get_index",anchor:"datasets.Dataset.get_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.get_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; Index name.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/search.py#L430",returnType:`
<p><code>BaseIndex</code></p>
`}}),yd=new E({props:{name:"drop_index",anchor:"datasets.Dataset.drop_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.drop_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/search.py#L658"}}),jd=new E({props:{name:"search",anchor:"datasets.Dataset.search",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.search.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/search.py#L666",returnDescription:`
<p>The retrieval scores of the retrieved examples.
indices (<code>List[List[int]]</code>): The indices of the retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[List[float]</code>)</p>
`}}),wd=new E({props:{name:"search_batch",anchor:"datasets.Dataset.search_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.search_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/search.py#L681",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_indices (<code>List[List[int]]</code>): The indices of the retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<code>List[List[float]</code>)</p>
`}}),Dd=new E({props:{name:"get_nearest_examples",anchor:"datasets.Dataset.get_nearest_examples",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.get_nearest_examples.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/search.py#L696",returnDescription:`
<p>The retrieval scores of the retrieved examples.
examples (<code>dict</code>): The retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[float]</code>)</p>
`}}),kd=new E({props:{name:"get_nearest_examples_batch",anchor:"datasets.Dataset.get_nearest_examples_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.get_nearest_examples_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/search.py#L715",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_examples (<em>List[dict]</em>): The retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<em>List[List[float]</em>)</p>
`}}),Ed=new E({props:{name:"info",anchor:"datasets.Dataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L168"}}),qd=new E({props:{name:"split",anchor:"datasets.Dataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L173"}}),Id=new E({props:{name:"builder_name",anchor:"datasets.Dataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L178"}}),Td=new E({props:{name:"citation",anchor:"datasets.Dataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L182"}}),Nd=new E({props:{name:"config_name",anchor:"datasets.Dataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L186"}}),Pd=new E({props:{name:"dataset_size",anchor:"datasets.Dataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L190"}}),Fd=new E({props:{name:"description",anchor:"datasets.Dataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L194"}}),Ld=new E({props:{name:"download_checksums",anchor:"datasets.Dataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L198"}}),Ad=new E({props:{name:"download_size",anchor:"datasets.Dataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L202"}}),Sd=new E({props:{name:"features",anchor:"datasets.Dataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L206"}}),Cd=new E({props:{name:"homepage",anchor:"datasets.Dataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L210"}}),Od=new E({props:{name:"license",anchor:"datasets.Dataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L214"}}),zd=new E({props:{name:"size_in_bytes",anchor:"datasets.Dataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L218"}}),Vd=new E({props:{name:"supervised_keys",anchor:"datasets.Dataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L222"}}),Ud=new E({props:{name:"version",anchor:"datasets.Dataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L230"}}),Md=new E({props:{name:"from_csv",anchor:"datasets.Dataset.from_csv",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_csv.split",description:'<strong>split</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_csv.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_csv.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_csv.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L905",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),al=new T({props:{anchor:"datasets.Dataset.from_csv.example",$$slots:{default:[hre]},$$scope:{ctx:k}}}),Rd=new E({props:{name:"from_json",anchor:"datasets.Dataset.from_json",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"field",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON or JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_json.split",description:'<strong>split</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_json.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_json.field",description:"<strong>field</strong> (<code>str</code>, optional) &#x2014; Field name of the JSON file where the dataset is contained in.",name:"field"},{anchor:"datasets.Dataset.from_json.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L995",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),nl=new T({props:{anchor:"datasets.Dataset.from_json.example",$$slots:{default:[fre]},$$scope:{ctx:k}}}),Bd=new E({props:{name:"from_parquet",anchor:"datasets.Dataset.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the Parquet file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_parquet.split",description:'<strong>split</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.`,name:"columns"},{anchor:"datasets.Dataset.from_parquet.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1038",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),rl=new T({props:{anchor:"datasets.Dataset.from_parquet.example",$$slots:{default:[ure]},$$scope:{ctx:k}}}),Gd=new E({props:{name:"from_text",anchor:"datasets.Dataset.from_text",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_text.split",description:'<strong>split</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_text.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_text.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_text.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1083",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ol=new T({props:{anchor:"datasets.Dataset.from_text.example",$$slots:{default:[gre]},$$scope:{ctx:k}}}),Hd=new E({props:{name:"from_sql",anchor:"datasets.Dataset.from_sql",parameters:[{name:"sql",val:": typing.Union[str, ForwardRef('sqlalchemy.sql.Selectable')]"},{name:"con",val:": typing.Union[str, ForwardRef('sqlalchemy.engine.Connection'), ForwardRef('sqlalchemy.engine.Engine'), ForwardRef('sqlite3.Connection')]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_sql.sql",description:"<strong>sql</strong> (<em>str</em> or <code>sqlalchemy.sql.Selectable</code>) &#x2014; SQL query to be executed or a table name.",name:"sql"},{anchor:"datasets.Dataset.from_sql.con",description:`<strong>con</strong> (<em>str</em> or <code>sqlite3.Connection</code> or <code>sqlalchemy.engine.Connection</code> or <code>sqlalchemy.engine.Connection</code>) &#x2014;
A <a href="https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls" rel="nofollow">URI string</a> used to instantiate a database connection or a SQLite3/SQLAlchemy connection object.`,name:"con"},{anchor:"datasets.Dataset.from_sql.features",description:'<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_sql.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_sql.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_sql.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>SqlConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L1118",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ll=new T({props:{anchor:"datasets.Dataset.from_sql.example",$$slots:{default:[_re]},$$scope:{ctx:k}}}),il=new cne({props:{"&amp;lcub;warning":"true}",$$slots:{default:[bre]},$$scope:{ctx:k}}}),Wd=new E({props:{name:"prepare_for_task",anchor:"datasets.Dataset.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.Dataset.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="./package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.Dataset.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L2280"}}),Yd=new E({props:{name:"align_labels_with_mapping",anchor:"datasets.Dataset.align_labels_with_mapping",parameters:[{name:"label2id",val:": typing.Dict"},{name:"label_column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.align_labels_with_mapping.label2id",description:`<strong>label2id</strong> (<code>dict</code>) &#x2014;
The label name to ID mapping to align the dataset with.`,name:"label2id"},{anchor:"datasets.Dataset.align_labels_with_mapping.label_column",description:`<strong>label_column</strong> (<code>str</code>) &#x2014;
The column name of labels to align on.`,name:"label_column"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L4944"}}),pl=new T({props:{anchor:"datasets.Dataset.align_labels_with_mapping.example",$$slots:{default:[$re]},$$scope:{ctx:k}}}),Kd=new E({props:{name:"datasets.concatenate_datasets",anchor:"datasets.concatenate_datasets",parameters:[{name:"dsets",val:": typing.List[datasets.arrow_dataset.Dataset]"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"axis",val:": int = 0"}],parametersDescription:[{anchor:"datasets.concatenate_datasets.dsets",description:"<strong>dsets</strong> (<code>List[datasets.Dataset]</code>) &#x2014; List of Datasets to concatenate.",name:"dsets"},{anchor:"datasets.concatenate_datasets.info",description:'<strong>info</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.concatenate_datasets.split",description:'<strong>split</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.concatenate_datasets.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, default <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/combine.py#L133"}}),cl=new T({props:{anchor:"datasets.concatenate_datasets.example",$$slots:{default:[xre]},$$scope:{ctx:k}}}),Qd=new E({props:{name:"datasets.interleave_datasets",anchor:"datasets.interleave_datasets",parameters:[{name:"datasets",val:": typing.List[~DatasetType]"},{name:"probabilities",val:": typing.Optional[typing.List[float]] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"stopping_strategy",val:": typing.Optional[str] = 'first_exhausted'"}],parametersDescription:[{anchor:"datasets.interleave_datasets.datasets",description:"<strong>datasets</strong> (<code>List[Dataset]</code> or <code>List[IterableDataset]</code>) &#x2014; list of datasets to interleave",name:"datasets"},{anchor:"datasets.interleave_datasets.probabilities",description:`<strong>probabilities</strong> (<code>List[float]</code>, optional, default None) &#x2014; If specified, the new dataset is constructed by sampling
examples from one source at a time according to these probabilities.`,name:"probabilities"},{anchor:"datasets.interleave_datasets.seed",description:"<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; The random seed used to choose a source for each example.",name:"seed"},{anchor:"datasets.interleave_datasets.info",description:`<strong>info</strong> ([<em>DatasetInfo</em>], <em>optional</em>) &#x2014; Dataset information, like description, citation, etc.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"info"},{anchor:"datasets.interleave_datasets.split",description:`<strong>split</strong> ([<em>NamedSplit</em>], <em>optional</em>) &#x2014; Name of the dataset split.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"split"},{anchor:"datasets.interleave_datasets.stopping_strategy",description:`<strong>stopping_strategy</strong> (Optional <code>str</code>, defaults to <em>first_exhausted</em>) &#x2014;
Two strategies are proposed right now, <em>first_exhausted</em> and <em>all_exhausted</em>.
By default, <em>first_exhausted</em> is an undersampling strategy, i.e the dataset construction is stopped as soon as one dataset has ran out of samples.
If the strategy is <em>all_exhausted</em>,  we use an oversampling strategy, i.e the dataset construction is stopped as soon as every samples of every dataset has been added at least once.
Note that if the strategy is <em>all_exhausted</em>, the interleaved dataset size can get enormous:<ul>
<li>with no probabilities, the resulting dataset will have max_length_datasets*nb_dataset samples.</li>
<li>with given probabilities, the resulting dataset will have more samples if some datasets have really low probability of visiting.</li>
</ul>`,name:"stopping_strategy"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/combine.py#L16",returnDescription:`
<p>Return type depends on the input <em>datasets</em>
parameter. <em>Dataset</em> if the input is a list of <em>Dataset</em>, <em>IterableDataset</em> if the input is a list of
<em>IterableDataset</em>.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),dl=new T({props:{anchor:"datasets.interleave_datasets.example",$$slots:{default:[vre]},$$scope:{ctx:k}}}),Zd=new E({props:{name:"datasets.enable_caching",anchor:"datasets.enable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/fingerprint.py#L96"}}),em=new E({props:{name:"datasets.disable_caching",anchor:"datasets.disable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/fingerprint.py#L117"}}),sm=new E({props:{name:"datasets.is_caching_enabled",anchor:"datasets.is_caching_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/fingerprint.py#L162"}}),nm=new bs({}),rm=new E({props:{name:"class datasets.DatasetDict",anchor:"datasets.DatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L39"}}),om=new E({props:{name:"data",anchor:"datasets.DatasetDict.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L69"}}),fl=new T({props:{anchor:"datasets.DatasetDict.data.example",$$slots:{default:[yre]},$$scope:{ctx:k}}}),lm=new E({props:{name:"cache_files",anchor:"datasets.DatasetDict.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L84"}}),ul=new T({props:{anchor:"datasets.DatasetDict.cache_files.example",$$slots:{default:[jre]},$$scope:{ctx:k}}}),im=new E({props:{name:"num_columns",anchor:"datasets.DatasetDict.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L102"}}),gl=new T({props:{anchor:"datasets.DatasetDict.num_columns.example",$$slots:{default:[wre]},$$scope:{ctx:k}}}),pm=new E({props:{name:"num_rows",anchor:"datasets.DatasetDict.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L118"}}),bl=new T({props:{anchor:"datasets.DatasetDict.num_rows.example",$$slots:{default:[Dre]},$$scope:{ctx:k}}}),dm=new E({props:{name:"column_names",anchor:"datasets.DatasetDict.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L134"}}),$l=new T({props:{anchor:"datasets.DatasetDict.column_names.example",$$slots:{default:[kre]},$$scope:{ctx:k}}}),mm=new E({props:{name:"shape",anchor:"datasets.DatasetDict.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L152"}}),xl=new T({props:{anchor:"datasets.DatasetDict.shape.example",$$slots:{default:[Ere]},$$scope:{ctx:k}}}),hm=new E({props:{name:"unique",anchor:"datasets.DatasetDict.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
column name (list all the column names with <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names</a>)`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L200",returnDescription:`
<p>Dictionary of unique elements in the given column.</p>
`,returnType:`
<p>Dict[<code>str</code>, <code>list</code>]</p>
`}}),vl=new T({props:{anchor:"datasets.DatasetDict.unique.example",$$slots:{default:[qre]},$$scope:{ctx:k}}}),fm=new E({props:{name:"cleanup_cache_files",anchor:"datasets.DatasetDict.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L224",returnDescription:`
<p>Dict with the number of removed files for each split</p>
`}}),yl=new T({props:{anchor:"datasets.DatasetDict.cleanup_cache_files.example",$$slots:{default:[Ire]},$$scope:{ctx:k}}}),um=new E({props:{name:"map",anchor:"datasets.DatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.map.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], indices: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.`,name:"function"},{anchor:"datasets.DatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.map.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.DatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.map.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, defaults to <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.DatasetDict.map.disable_nullable",description:"<strong>disable_nullable</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.DatasetDict.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L689"}}),jl=new T({props:{anchor:"datasets.DatasetDict.map.example",$$slots:{default:[Tre]},$$scope:{ctx:k}}}),gm=new E({props:{name:"filter",anchor:"datasets.DatasetDict.filter",parameters:[{name:"function",val:""},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.filter.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.filter.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.filter.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L801"}}),wl=new T({props:{anchor:"datasets.DatasetDict.filter.example",$$slots:{default:[Nre]},$$scope:{ctx:k}}}),_m=new E({props:{name:"sort",anchor:"datasets.DatasetDict.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.DatasetDict.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.DatasetDict.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.DatasetDict.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.DatasetDict.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.sort.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L891"}}),Dl=new T({props:{anchor:"datasets.DatasetDict.sort.example",$$slots:{default:[Pre]},$$scope:{ctx:k}}}),bm=new E({props:{name:"shuffle",anchor:"datasets.DatasetDict.shuffle",parameters:[{name:"seeds",val:": typing.Union[int, typing.Dict[str, typing.Optional[int]], NoneType] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generators",val:": typing.Union[typing.Dict[str, numpy.random._generator.Generator], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.shuffle.seeds",description:`<strong>seeds</strong> (<em>Dict[str, int]</em> or <em>int</em>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.
You can provide one <code>seed</code> per dataset in the dataset dictionary.`,name:"seeds"},{anchor:"datasets.DatasetDict.shuffle.seed",description:"<strong>seed</strong> (Optional <em>int</em>) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>. Alias for seeds (a <em>ValueError</em> is raised if both are provided).",name:"seed"},{anchor:"datasets.DatasetDict.shuffle.generators",description:`<strong>generators</strong> (Optional <em>Dict[str, np.random.Generator]</em>) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).
You have to provide one <code>generator</code> per dataset in the dataset dictionary.`,name:"generators"},{anchor:"datasets.DatasetDict.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.shuffle.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Dict[str, str]</em>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mappings instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L959"}}),kl=new T({props:{anchor:"datasets.DatasetDict.shuffle.example",$$slots:{default:[Fre]},$$scope:{ctx:k}}}),$m=new E({props:{name:"set_format",anchor:"datasets.DatasetDict.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.set_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.DatasetDict.set_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L491"}}),El=new T({props:{anchor:"datasets.DatasetDict.set_format.example",$$slots:{default:[Lre]},$$scope:{ctx:k}}}),vm=new E({props:{name:"reset_format",anchor:"datasets.DatasetDict.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L533"}}),ql=new T({props:{anchor:"datasets.DatasetDict.reset_format.example",$$slots:{default:[Are]},$$scope:{ctx:k}}}),jm=new E({props:{name:"formatted_as",anchor:"datasets.DatasetDict.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.formatted_as.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.DatasetDict.formatted_as.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L458"}}),wm=new E({props:{name:"with_format",anchor:"datasets.DatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.with_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.DatasetDict.with_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L589"}}),Tl=new T({props:{anchor:"datasets.DatasetDict.with_format.example",$$slots:{default:[Sre]},$$scope:{ctx:k}}}),km=new E({props:{name:"with_transform",anchor:"datasets.DatasetDict.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.DatasetDict.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.DatasetDict.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L638"}}),Nl=new T({props:{anchor:"datasets.DatasetDict.with_transform.example",$$slots:{default:[Cre]},$$scope:{ctx:k}}}),Em=new E({props:{name:"flatten",anchor:"datasets.DatasetDict.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L168"}}),Pl=new T({props:{anchor:"datasets.DatasetDict.flatten.example",$$slots:{default:[Ore]},$$scope:{ctx:k}}}),qm=new E({props:{name:"cast",anchor:"datasets.DatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.DatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name and order of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L248"}}),Fl=new T({props:{anchor:"datasets.DatasetDict.cast.example",$$slots:{default:[zre]},$$scope:{ctx:k}}}),Im=new E({props:{name:"cast_column",anchor:"datasets.DatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.DatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L282",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Ll=new T({props:{anchor:"datasets.DatasetDict.cast_column.example",$$slots:{default:[Vre]},$$scope:{ctx:k}}}),Tm=new E({props:{name:"remove_columns",anchor:"datasets.DatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.DatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L309"}}),Al=new T({props:{anchor:"datasets.DatasetDict.remove_columns.example",$$slots:{default:[Ure]},$$scope:{ctx:k}}}),Nm=new E({props:{name:"rename_column",anchor:"datasets.DatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.DatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L347"}}),Sl=new T({props:{anchor:"datasets.DatasetDict.rename_column.example",$$slots:{default:[Mre]},$$scope:{ctx:k}}}),Fm=new E({props:{name:"rename_columns",anchor:"datasets.DatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L390",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Cl=new T({props:{anchor:"datasets.DatasetDict.rename_columns.example",$$slots:{default:[Rre]},$$scope:{ctx:k}}}),Lm=new E({props:{name:"class_encode_column",anchor:"datasets.DatasetDict.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.class_encode_column.column",description:"<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast",name:"column"},{anchor:"datasets.DatasetDict.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L427"}}),Ol=new T({props:{anchor:"datasets.DatasetDict.class_encode_column.example",$$slots:{default:[Bre]},$$scope:{ctx:k}}}),Sm=new E({props:{name:"push_to_hub",anchor:"datasets.DatasetDict.push_to_hub",parameters:[{name:"repo_id",val:""},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": NoneType = None"},{name:"max_shard_size",val:": typing.Union[int, str, NoneType] = None"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.DatasetDict.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <code>&lt;user&gt;/&lt;dataset_name&gt;</code> or
<code>&lt;org&gt;/&lt;dataset_name&gt;</code>. Also accepts <code>&lt;dataset_name&gt;</code>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.DatasetDict.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.DatasetDict.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.DatasetDict.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset.`,name:"branch"},{anchor:"datasets.DatasetDict.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;500MB&#x201D;</em> or <em>&#x201C;1GB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1290"}}),zl=new T({props:{anchor:"datasets.DatasetDict.push_to_hub.example",$$slots:{default:[Gre]},$$scope:{ctx:k}}}),Cm=new E({props:{name:"save_to_disk",anchor:"datasets.DatasetDict.save_to_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.save_to_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI
(e.g. <em>s3://my-bucket/dataset/train</em>) of the dataset dict directory where the dataset dict will be
saved to.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1035"}}),Vl=new T({props:{anchor:"datasets.DatasetDict.save_to_disk.example",$$slots:{default:[Hre]},$$scope:{ctx:k}}}),Ul=new T({props:{anchor:"datasets.DatasetDict.save_to_disk.example-2",$$slots:{default:[Wre]},$$scope:{ctx:k}}}),zm=new E({props:{name:"load_from_disk",anchor:"datasets.DatasetDict.load_from_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.load_from_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g.
<code>&quot;s3//my-bucket/dataset/train&quot;</code>) of the dataset dict directory where the dataset dict will be loaded
from.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.DatasetDict.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1083",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Ml=new T({props:{anchor:"datasets.DatasetDict.load_from_disk.example",$$slots:{default:[Yre]},$$scope:{ctx:k}}}),Vm=new E({props:{name:"from_csv",anchor:"datasets.DatasetDict.from_csv",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_csv.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_csv.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_csv.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1130",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Rl=new T({props:{anchor:"datasets.DatasetDict.from_csv.example",$$slots:{default:[Jre]},$$scope:{ctx:k}}}),Um=new E({props:{name:"from_json",anchor:"datasets.DatasetDict.from_json",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_json.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_json.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1164",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Bl=new T({props:{anchor:"datasets.DatasetDict.from_json.example",$$slots:{default:[Kre]},$$scope:{ctx:k}}}),Mm=new E({props:{name:"from_parquet",anchor:"datasets.DatasetDict.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.`,name:"columns"},{anchor:"datasets.DatasetDict.from_parquet.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1198",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Gl=new T({props:{anchor:"datasets.DatasetDict.from_parquet.example",$$slots:{default:[Qre]},$$scope:{ctx:k}}}),Rm=new E({props:{name:"from_text",anchor:"datasets.DatasetDict.from_text",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_text.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_text.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_text.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1241",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Hl=new T({props:{anchor:"datasets.DatasetDict.from_text.example",$$slots:{default:[Zre]},$$scope:{ctx:k}}}),Bm=new E({props:{name:"prepare_for_task",anchor:"datasets.DatasetDict.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.DatasetDict.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="./package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.DatasetDict.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1275"}}),Gm=new bs({}),Hm=new E({props:{name:"class datasets.IterableDataset",anchor:"datasets.IterableDataset",parameters:[{name:"ex_iterable",val:": _BaseExamplesIterable"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"format_type",val:": typing.Optional[str] = None"},{name:"shuffling",val:": typing.Optional[datasets.iterable_dataset.ShufflingConfig] = None"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/iterable_dataset.py#L693"}}),Wm=new E({props:{name:"from_generator",anchor:"datasets.IterableDataset.from_generator",parameters:[{name:"generator",val:": typing.Callable"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"gen_kwargs",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.IterableDataset.from_generator.generator",description:"<strong>generator</strong> (<code>Callable</code>) &#x2014; A generator function that <em>yields</em> examples.",name:"generator"},{anchor:"datasets.IterableDataset.from_generator.features",description:'<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.IterableDataset.from_generator.gen_kwargs(dict,",description:`<strong>gen_kwargs(<code>dict</code>,</strong> optional) &#x2014; Keyword arguments to be passed to the <em>generator</em> callable.
You can define a sharded iterable dataset by passing the list of shards in <em>gen_kwargs</em>.
This can be used to improve shuffling and when iterating over the dataset with multiple workers.`,name:"gen_kwargs(dict,"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/iterable_dataset.py#L755",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Jl=new T({props:{anchor:"datasets.IterableDataset.from_generator.example",$$slots:{default:[Xre]},$$scope:{ctx:k}}}),Kl=new T({props:{anchor:"datasets.IterableDataset.from_generator.example-2",$$slots:{default:[eoe]},$$scope:{ctx:k}}}),Ym=new E({props:{name:"remove_columns",anchor:"datasets.IterableDataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/iterable_dataset.py#L1217",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Ql=new T({props:{anchor:"datasets.IterableDataset.remove_columns.example",$$slots:{default:[toe]},$$scope:{ctx:k}}}),Jm=new E({props:{name:"cast_column",anchor:"datasets.IterableDataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDataset.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/iterable_dataset.py#L1243",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Zl=new T({props:{anchor:"datasets.IterableDataset.cast_column.example",$$slots:{default:[soe]},$$scope:{ctx:k}}}),Km=new E({props:{name:"cast",anchor:"datasets.IterableDataset.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/iterable_dataset.py#L1291",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Xl=new T({props:{anchor:"datasets.IterableDataset.cast.example",$$slots:{default:[aoe]},$$scope:{ctx:k}}}),Qm=new E({props:{name:"__iter__",anchor:"datasets.IterableDataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/iterable_dataset.py#L746"}}),Zm=new E({props:{name:"map",anchor:"datasets.IterableDataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.IterableDataset.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDataset.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDataset.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.IterableDataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/iterable_dataset.py#L832"}}),ei=new T({props:{anchor:"datasets.IterableDataset.map.example",$$slots:{default:[noe]},$$scope:{ctx:k}}}),eh=new E({props:{name:"rename_column",anchor:"datasets.IterableDataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/iterable_dataset.py#L1149",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),ti=new T({props:{anchor:"datasets.IterableDataset.rename_column.example",$$slots:{default:[roe]},$$scope:{ctx:k}}}),th=new E({props:{name:"filter",anchor:"datasets.IterableDataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDataset.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/iterable_dataset.py#L931"}}),si=new T({props:{anchor:"datasets.IterableDataset.filter.example",$$slots:{default:[ooe]},$$scope:{ctx:k}}}),sh=new E({props:{name:"shuffle",anchor:"datasets.IterableDataset.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDataset.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/iterable_dataset.py#L998"}}),ai=new T({props:{anchor:"datasets.IterableDataset.shuffle.example",$$slots:{default:[loe]},$$scope:{ctx:k}}}),nh=new E({props:{name:"skip",anchor:"datasets.IterableDataset.skip",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.skip.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to skip.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/iterable_dataset.py#L1064"}}),ni=new T({props:{anchor:"datasets.IterableDataset.skip.example",$$slots:{default:[ioe]},$$scope:{ctx:k}}}),oh=new E({props:{name:"take",anchor:"datasets.IterableDataset.take",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.take.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to take.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/iterable_dataset.py#L1101"}}),ri=new T({props:{anchor:"datasets.IterableDataset.take.example",$$slots:{default:[poe]},$$scope:{ctx:k}}}),ih=new E({props:{name:"info",anchor:"datasets.IterableDataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L168"}}),ph=new E({props:{name:"split",anchor:"datasets.IterableDataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L173"}}),ch=new E({props:{name:"builder_name",anchor:"datasets.IterableDataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L178"}}),dh=new E({props:{name:"citation",anchor:"datasets.IterableDataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L182"}}),mh=new E({props:{name:"config_name",anchor:"datasets.IterableDataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L186"}}),hh=new E({props:{name:"dataset_size",anchor:"datasets.IterableDataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L190"}}),fh=new E({props:{name:"description",anchor:"datasets.IterableDataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L194"}}),uh=new E({props:{name:"download_checksums",anchor:"datasets.IterableDataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L198"}}),gh=new E({props:{name:"download_size",anchor:"datasets.IterableDataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L202"}}),_h=new E({props:{name:"features",anchor:"datasets.IterableDataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L206"}}),bh=new E({props:{name:"homepage",anchor:"datasets.IterableDataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L210"}}),$h=new E({props:{name:"license",anchor:"datasets.IterableDataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L214"}}),xh=new E({props:{name:"size_in_bytes",anchor:"datasets.IterableDataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L218"}}),vh=new E({props:{name:"supervised_keys",anchor:"datasets.IterableDataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L222"}}),yh=new E({props:{name:"version",anchor:"datasets.IterableDataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/arrow_dataset.py#L230"}}),jh=new bs({}),wh=new E({props:{name:"class datasets.IterableDatasetDict",anchor:"datasets.IterableDatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1421"}}),Dh=new E({props:{name:"map",anchor:"datasets.IterableDatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDatasetDict.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1451"}}),ci=new T({props:{anchor:"datasets.IterableDatasetDict.map.example",$$slots:{default:[coe]},$$scope:{ctx:k}}}),Eh=new E({props:{name:"filter",anchor:"datasets.IterableDatasetDict.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDatasetDict.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1529"}}),di=new T({props:{anchor:"datasets.IterableDatasetDict.filter.example",$$slots:{default:[doe]},$$scope:{ctx:k}}}),qh=new E({props:{name:"shuffle",anchor:"datasets.IterableDatasetDict.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDatasetDict.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDatasetDict.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1583"}}),mi=new T({props:{anchor:"datasets.IterableDatasetDict.shuffle.example",$$slots:{default:[moe]},$$scope:{ctx:k}}}),Th=new E({props:{name:"with_format",anchor:"datasets.IterableDatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional, default None) &#x2014; if set to &#x201C;torch&#x201D;, the returned dataset
will be a subclass of torch.utils.data.IterableDataset to be used in a DataLoader`,name:"type"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1422"}}),hi=new T({props:{anchor:"datasets.IterableDatasetDict.with_format.example",$$slots:{default:[hoe]},$$scope:{ctx:k}}}),Nh=new E({props:{name:"cast",anchor:"datasets.IterableDatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1750",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),fi=new T({props:{anchor:"datasets.IterableDatasetDict.cast.example",$$slots:{default:[foe]},$$scope:{ctx:k}}}),Ph=new E({props:{name:"cast_column",anchor:"datasets.IterableDatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1721",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),ui=new T({props:{anchor:"datasets.IterableDatasetDict.cast_column.example",$$slots:{default:[uoe]},$$scope:{ctx:k}}}),Fh=new E({props:{name:"remove_columns",anchor:"datasets.IterableDatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1696",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),gi=new T({props:{anchor:"datasets.IterableDatasetDict.remove_columns.example",$$slots:{default:[goe]},$$scope:{ctx:k}}}),Lh=new E({props:{name:"rename_column",anchor:"datasets.IterableDatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1638",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),_i=new T({props:{anchor:"datasets.IterableDatasetDict.rename_column.example",$$slots:{default:[_oe]},$$scope:{ctx:k}}}),Ah=new E({props:{name:"rename_columns",anchor:"datasets.IterableDatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/dataset_dict.py#L1669",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),bi=new T({props:{anchor:"datasets.IterableDatasetDict.rename_columns.example",$$slots:{default:[boe]},$$scope:{ctx:k}}}),Sh=new bs({}),Ch=new E({props:{name:"class datasets.Features",anchor:"datasets.Features",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L1483"}}),xi=new cne({props:{$$slots:{default:[$oe]},$$scope:{ctx:k}}}),Rh=new E({props:{name:"copy",anchor:"datasets.Features.copy",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L1834",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),yi=new T({props:{anchor:"datasets.Features.copy.example",$$slots:{default:[xoe]},$$scope:{ctx:k}}}),Bh=new E({props:{name:"decode_batch",anchor:"datasets.Features.decode_batch",parameters:[{name:"batch",val:": dict"}],parametersDescription:[{anchor:"datasets.Features.decode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Dataset batch data.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L1816",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),Gh=new E({props:{name:"decode_column",anchor:"datasets.Features.decode_column",parameters:[{name:"column",val:": list"},{name:"column_name",val:": str"}],parametersDescription:[{anchor:"datasets.Features.decode_column.column",description:"<strong>column</strong> (<code>list[Any]</code>) &#x2014; Dataset column data.",name:"column"},{anchor:"datasets.Features.decode_column.column_name",description:"<strong>column_name</strong> (<code>str</code>) &#x2014; Dataset column name.",name:"column_name"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L1800",returnDescription:`
<p><code>list[Any]</code></p>
`}}),Hh=new E({props:{name:"decode_example",anchor:"datasets.Features.decode_example",parameters:[{name:"example",val:": dict"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Features.decode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Dataset row data.",name:"example"},{anchor:"datasets.Features.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
audio or image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L1778",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),Wh=new E({props:{name:"encode_batch",anchor:"datasets.Features.encode_batch",parameters:[{name:"batch",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Data in a Dataset batch.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L1760",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),Yh=new E({props:{name:"encode_example",anchor:"datasets.Features.encode_example",parameters:[{name:"example",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Data in a Dataset row.",name:"example"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L1747",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),Jh=new E({props:{name:"flatten",anchor:"datasets.Features.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L1920",returnDescription:`
<p>the flattened features</p>
`,returnType:`
<p>Features</p>
`}}),qi=new T({props:{anchor:"datasets.Features.flatten.example",$$slots:{default:[voe]},$$scope:{ctx:k}}}),Kh=new E({props:{name:"from_arrow_schema",anchor:"datasets.Features.from_arrow_schema",parameters:[{name:"pa_schema",val:": Schema"}],parametersDescription:[{anchor:"datasets.Features.from_arrow_schema.pa_schema",description:"<strong>pa_schema</strong> (<code>pyarrow.Schema</code>) &#x2014; Arrow Schema.",name:"pa_schema"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L1554",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Qh=new E({props:{name:"from_dict",anchor:"datasets.Features.from_dict",parameters:[{name:"dic",val:""}],parametersDescription:[{anchor:"datasets.Features.from_dict.dic",description:"<strong>dic</strong> (<code>dict[str, Any]</code>) &#x2014; Python dictionary.",name:"dic"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L1574",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Ti=new T({props:{anchor:"datasets.Features.from_dict.example",$$slots:{default:[yoe]},$$scope:{ctx:k}}}),Zh=new E({props:{name:"reorder_fields_as",anchor:"datasets.Features.reorder_fields_as",parameters:[{name:"other",val:": Features"}],parametersDescription:[{anchor:"datasets.Features.reorder_fields_as.other",description:'<strong>other</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014; The other Features to align with.',name:"other"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L1854",returnType:`
<p><a
  href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Ni=new T({props:{anchor:"datasets.Features.reorder_fields_as.example",$$slots:{default:[joe]},$$scope:{ctx:k}}}),Xh=new E({props:{name:"class datasets.Sequence",anchor:"datasets.Sequence",parameters:[{name:"feature",val:": typing.Any"},{name:"length",val:": int = -1"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Sequence.length",description:"<strong>length</strong> (<code>int</code>) &#x2014; Length of the sequence.",name:"length"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L1055"}}),Pi=new T({props:{anchor:"datasets.Sequence.example",$$slots:{default:[woe]},$$scope:{ctx:k}}}),ef=new E({props:{name:"class datasets.ClassLabel",anchor:"datasets.ClassLabel",parameters:[{name:"num_classes",val:": dataclasses.InitVar[typing.Optional[int]] = None"},{name:"names",val:": typing.List[str] = None"},{name:"names_file",val:": dataclasses.InitVar[typing.Optional[str]] = None"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.ClassLabel.num_classes",description:"<strong>num_classes</strong> (<code>int</code>, optional) &#x2014; Number of classes. All labels must be &lt; <em>num_classes</em>.",name:"num_classes"},{anchor:"datasets.ClassLabel.names",description:`<strong>names</strong> (<code>list</code> of <code>str</code>, optional) &#x2014; String names for the integer classes.
The order in which the names are provided is kept.`,name:"names"},{anchor:"datasets.ClassLabel.names_file",description:"<strong>names_file</strong> (<code>str</code>, optional) &#x2014; Path to a file with names for the integer classes, one per line.",name:"names_file"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L863"}}),Fi=new T({props:{anchor:"datasets.ClassLabel.example",$$slots:{default:[Doe]},$$scope:{ctx:k}}}),sf=new E({props:{name:"cast_storage",anchor:"datasets.ClassLabel.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.IntegerArray]"}],parametersDescription:[{anchor:"datasets.ClassLabel.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.IntegerArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L1023",returnDescription:`
<p>Array in the ClassLabel arrow storage type</p>
`,returnType:`
<p>pa.Int64Array</p>
`}}),nf=new E({props:{name:"int2str",anchor:"datasets.ClassLabel.int2str",parameters:[{name:"values",val:": typing.Union[int, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L977"}}),Li=new T({props:{anchor:"datasets.ClassLabel.int2str.example",$$slots:{default:[koe]},$$scope:{ctx:k}}}),rf=new E({props:{name:"str2int",anchor:"datasets.ClassLabel.str2int",parameters:[{name:"values",val:": typing.Union[str, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L932"}}),Ai=new T({props:{anchor:"datasets.ClassLabel.str2int.example",$$slots:{default:[Eoe]},$$scope:{ctx:k}}}),of=new E({props:{name:"class datasets.Value",anchor:"datasets.Value",parameters:[{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L419"}}),Si=new T({props:{anchor:"datasets.Value.example",$$slots:{default:[qoe]},$$scope:{ctx:k}}}),lf=new E({props:{name:"class datasets.Translation",anchor:"datasets.Translation",parameters:[{name:"languages",val:": typing.List[str]"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/translation.py#L12"}}),Ci=new T({props:{anchor:"datasets.Translation.example",$$slots:{default:[Ioe]},$$scope:{ctx:k}}}),cf=new E({props:{name:"flatten",anchor:"datasets.Translation.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/translation.py#L46"}}),df=new E({props:{name:"class datasets.TranslationVariableLanguages",anchor:"datasets.TranslationVariableLanguages",parameters:[{name:"languages",val:": typing.Optional[typing.List] = None"},{name:"num_languages",val:": typing.Optional[int] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/translation.py#L54"}}),zi=new T({props:{anchor:"datasets.TranslationVariableLanguages.example",$$slots:{default:[Toe]},$$scope:{ctx:k}}}),mf=new E({props:{name:"flatten",anchor:"datasets.TranslationVariableLanguages.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/translation.py#L123"}}),hf=new E({props:{name:"class datasets.Array2D",anchor:"datasets.Array2D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array2D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array2D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L504"}}),Ui=new T({props:{anchor:"datasets.Array2D.example",$$slots:{default:[Noe]},$$scope:{ctx:k}}}),ff=new E({props:{name:"class datasets.Array3D",anchor:"datasets.Array3D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array3D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array3D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L527"}}),Mi=new T({props:{anchor:"datasets.Array3D.example",$$slots:{default:[Poe]},$$scope:{ctx:k}}}),uf=new E({props:{name:"class datasets.Array4D",anchor:"datasets.Array4D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array4D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array4D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L550"}}),Ri=new T({props:{anchor:"datasets.Array4D.example",$$slots:{default:[Foe]},$$scope:{ctx:k}}}),gf=new E({props:{name:"class datasets.Array5D",anchor:"datasets.Array5D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array5D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array5D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/features.py#L573"}}),Bi=new T({props:{anchor:"datasets.Array5D.example",$$slots:{default:[Loe]},$$scope:{ctx:k}}}),_f=new E({props:{name:"class datasets.Audio",anchor:"datasets.Audio",parameters:[{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"mono",val:": bool = True"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Audio.sampling_rate",description:"<strong>sampling_rate</strong> (<code>int</code>, optional) &#x2014; Target sampling rate. If <em>None</em>, the native sampling rate is used.",name:"sampling_rate"},{anchor:"datasets.Audio.mono",description:`<strong>mono</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to convert the audio signal to mono by averaging samples across
channels.`,name:"mono"},{anchor:"datasets.Audio.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the audio data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: audio_path, &#x201C;bytes&#x201D;: audio_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/audio.py#L25"}}),Gi=new T({props:{anchor:"datasets.Audio.example",$$slots:{default:[Aoe]},$$scope:{ctx:k}}}),yf=new E({props:{name:"cast_storage",anchor:"datasets.Audio.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray]"}],parametersDescription:[{anchor:"datasets.Audio.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/audio.py#L174",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),jf=new E({props:{name:"decode_example",anchor:"datasets.Audio.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Audio.decode_example.value",description:`<strong>value</strong> (<code>dict</code>) &#x2014; a dictionary with keys:</p>
<ul>
<li>path: String with relative audio file path.</li>
<li>bytes: Bytes of the audio file.</li>
</ul>`,name:"value"},{anchor:"datasets.Audio.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
audio files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/audio.py#L124",returnDescription:`
<p>dict</p>
`}}),wf=new E({props:{name:"embed_storage",anchor:"datasets.Audio.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Audio.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Audio.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/audio.py#L207",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Df=new E({props:{name:"encode_example",anchor:"datasets.Audio.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict]"}],parametersDescription:[{anchor:"datasets.Audio.encode_example.value",description:"<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014; Data passed as input to Audio feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/audio.py#L78",returnType:`
<p><code>dict</code></p>
`}}),kf=new E({props:{name:"flatten",anchor:"datasets.Audio.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/audio.py#L163"}}),Ef=new E({props:{name:"class datasets.Image",anchor:"datasets.Image",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Image.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the image data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: image_path, &#x201C;bytes&#x201D;: image_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/image.py#L26"}}),Ki=new T({props:{anchor:"datasets.Image.example",$$slots:{default:[Soe]},$$scope:{ctx:k}}}),Ff=new E({props:{name:"cast_storage",anchor:"datasets.Image.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],parametersDescription:[{anchor:"datasets.Image.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray, pa.ListArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/image.py#L169",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Lf=new E({props:{name:"decode_example",anchor:"datasets.Image.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Image.decode_example.value",description:`<strong>value</strong> (obj &#x2014;<em>str</em> or <code>dict</code>): a string with the absolute image file path, a dictionary with
keys:</p>
<ul>
<li>path: String with absolute or relative image file path.</li>
<li>bytes: The bytes of the image file.</li>
</ul>`,name:"value"},{anchor:"datasets.Image.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/image.py#L107",returnDescription:`
<p><code>PIL.Image.Image</code></p>
`}}),Af=new E({props:{name:"embed_storage",anchor:"datasets.Image.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Image.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Image.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/image.py#L218",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Sf=new E({props:{name:"encode_example",anchor:"datasets.Image.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict, numpy.ndarray, ForwardRef('PIL.Image.Image')]"}],parametersDescription:[{anchor:"datasets.Image.encode_example.value",description:"<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>PIL.Image.Image</code> or <code>dict</code>) &#x2014; Data passed as input to Image feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/image.py#L70",returnDescription:`
<p><code>dict</code> with \u201Cpath\u201D and \u201Cbytes\u201D fields</p>
`}}),Cf=new E({props:{name:"flatten",anchor:"datasets.Image.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/features/image.py#L156"}}),Of=new bs({}),zf=new E({props:{name:"class datasets.MetricInfo",anchor:"datasets.MetricInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": Features"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"metric_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/info.py#L424"}}),Vf=new E({props:{name:"from_directory",anchor:"datasets.MetricInfo.from_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/info.py#L479"}}),sp=new T({props:{anchor:"datasets.MetricInfo.from_directory.example",$$slots:{default:[Coe]},$$scope:{ctx:k}}}),Mf=new E({props:{name:"write_to_directory",anchor:"datasets.MetricInfo.write_to_directory",parameters:[{name:"metric_info_dir",val:""},{name:"pretty_print",val:" = False"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/info.py#L459"}}),ap=new T({props:{anchor:"datasets.MetricInfo.write_to_directory.example",$$slots:{default:[Ooe]},$$scope:{ctx:k}}}),Rf=new bs({}),Bf=new E({props:{name:"class datasets.Metric",anchor:"datasets.Metric",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a metrics computation script and prevents the metric&#x2019;s data
to be overridden when the metric loading script is modified.`,name:"config_name"},{anchor:"datasets.Metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"datasets.Metric.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"datasets.Metric.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"num_process"},{anchor:"datasets.Metric.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"datasets.Metric.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Metric.compute">datasets.Metric.compute()</a> is run.',name:"seed"},{anchor:"datasets.Metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.Metric.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent metrics cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"datasets.Metric.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/metric.py#L146"}}),rp=new gne({props:{version:"2.5.0",$$slots:{default:[zoe]},$$scope:{ctx:k}}}),Gf=new E({props:{name:"add",anchor:"datasets.Metric.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"datasets.Metric.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/metric.py#L521"}}),op=new T({props:{anchor:"datasets.Metric.add.example",$$slots:{default:[Voe]},$$scope:{ctx:k}}}),Hf=new E({props:{name:"add_batch",anchor:"datasets.Metric.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/metric.py#L474"}}),lp=new T({props:{anchor:"datasets.Metric.add_batch.example",$$slots:{default:[Uoe]},$$scope:{ctx:k}}}),Wf=new E({props:{name:"compute",anchor:"datasets.Metric.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"datasets.Metric.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the metrics <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/metric.py#L403",returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the metrics if this metric is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the metric is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),ip=new T({props:{anchor:"datasets.Metric.compute.example",$$slots:{default:[Moe]},$$scope:{ctx:k}}}),Yf=new E({props:{name:"download_and_prepare",anchor:"datasets.Metric.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"dl_manager",val:": typing.Optional[datasets.download.download_manager.DownloadManager] = None"}],parametersDescription:[{anchor:"datasets.Metric.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.Metric.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; Specific download manager to use.',name:"dl_manager"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/metric.py#L604"}}),Jf=new bs({}),Kf=new E({props:{name:"class datasets.filesystems.S3FileSystem",anchor:"datasets.filesystems.S3FileSystem",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.filesystems.S3FileSystem.anon",description:`<strong>anon</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to use anonymous connection (public buckets only). If False, uses the key/secret given,
or boto&#x2019;s credential resolver (client_kwargs, environment, variables, config files, EC2 IAM server, in that order).`,name:"anon"},{anchor:"datasets.filesystems.S3FileSystem.key",description:"<strong>key</strong> (<code>str</code>) &#x2014; If not anonymous, use this access key ID, if specified.",name:"key"},{anchor:"datasets.filesystems.S3FileSystem.secret",description:"<strong>secret</strong> (<code>str</code>) &#x2014; If not anonymous, use this secret access key, if specified.",name:"secret"},{anchor:"datasets.filesystems.S3FileSystem.token",description:"<strong>token</strong> (<code>str</code>) &#x2014; If not anonymous, use this security token, if specified.",name:"token"},{anchor:"datasets.filesystems.S3FileSystem.use_ssl",description:`<strong>use_ssl</strong> (<code>bool</code>, default to <code>True</code>) &#x2014; Whether to use SSL in connections to S3; may be faster without, but insecure. If <code>use_ssl</code> is
also set in <code>client_kwargs</code>, the value set in <code>client_kwargs</code> will take priority.`,name:"use_ssl"},{anchor:"datasets.filesystems.S3FileSystem.s3_additional_kwargs",description:`<strong>s3_additional_kwargs</strong> (<code>dict</code>) &#x2014; Parameters that are used when calling S3 API methods. Typically used for things
like ServerSideEncryption.`,name:"s3_additional_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.client_kwargs",description:"<strong>client_kwargs</strong> (<code>dict</code>) &#x2014; Parameters for the botocore client.",name:"client_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.requester_pays",description:"<strong>requester_pays</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether RequesterPays buckets are supported.",name:"requester_pays"},{anchor:"datasets.filesystems.S3FileSystem.default_block_size",description:`<strong>default_block_size</strong> (<code>int</code>) &#x2014; If given, the default block size value used for <code>open()</code>, if no specific value is given at all time.
The built-in default is 5MB.`,name:"default_block_size"},{anchor:"datasets.filesystems.S3FileSystem.default_fill_cache",description:"<strong>default_fill_cache</strong> (<code>bool</code>, default to <code>True</code>) &#x2014; Whether to use cache filling with open by default. Refer to <code>S3File.open</code>.",name:"default_fill_cache"},{anchor:"datasets.filesystems.S3FileSystem.default_cache_type",description:`<strong>default_cache_type</strong> (<code>str</code>, default to <code>bytes</code>) &#x2014; If given, the default cache_type value used for <code>open()</code>. Set to <code>none</code> if no
caching is desired. See fsspec&#x2019;s documentation for other available cache_type values.`,name:"default_cache_type"},{anchor:"datasets.filesystems.S3FileSystem.version_aware",description:`<strong>version_aware</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to support bucket versioning. If enable this will require the user to have
the necessary IAM permissions for dealing with versioned objects.`,name:"version_aware"},{anchor:"datasets.filesystems.S3FileSystem.cache_regions",description:`<strong>cache_regions</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to cache bucket regions. Whenever a new bucket is used, it will
first find out which region it belongs to and then use the client for that region.`,name:"cache_regions"},{anchor:"datasets.filesystems.S3FileSystem.asynchronous",description:"<strong>asynchronous</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether this instance is to be used from inside coroutines.",name:"asynchronous"},{anchor:"datasets.filesystems.S3FileSystem.config_kwargs",description:`<strong>config_kwargs</strong> (<code>dict</code>) &#x2014; Parameters passed to <code>botocore.client.Config</code>.
kwargs &#x2014; Other parameters for core session.`,name:"config_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.session",description:`<strong>session</strong> (<code>aiobotocore.session.AioSession</code>) &#x2014; Session to be used for all connections. This session will be used inplace of creating
a new session inside S3FileSystem. For example: <code>aiobotocore.session.AioSession(profile=&apos;test_user&apos;)</code>.`,name:"session"},{anchor:"datasets.filesystems.S3FileSystem.skip_instance_cache",description:"<strong>skip_instance_cache</strong> (<code>bool</code>) &#x2014; Control reuse of instances. Passed on to <code>fsspec</code>.",name:"skip_instance_cache"},{anchor:"datasets.filesystems.S3FileSystem.use_listings_cache",description:"<strong>use_listings_cache</strong> (<code>bool</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"use_listings_cache"},{anchor:"datasets.filesystems.S3FileSystem.listings_expiry_time",description:"<strong>listings_expiry_time</strong> (<code>int</code> or <code>float</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"listings_expiry_time"},{anchor:"datasets.filesystems.S3FileSystem.max_paths",description:"<strong>max_paths</strong> (<code>int</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"max_paths"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/filesystems/s3filesystem.py#L4"}}),mp=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example",$$slots:{default:[Roe]},$$scope:{ctx:k}}}),hp=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-2",$$slots:{default:[Boe]},$$scope:{ctx:k}}}),fp=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-3",$$slots:{default:[Goe]},$$scope:{ctx:k}}}),up=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-4",$$slots:{default:[Hoe]},$$scope:{ctx:k}}}),gp=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-5",$$slots:{default:[Woe]},$$scope:{ctx:k}}}),Zf=new E({props:{name:"datasets.filesystems.extract_path_from_uri",anchor:"datasets.filesystems.extract_path_from_uri",parameters:[{name:"dataset_path",val:": str"}],parametersDescription:[{anchor:"datasets.filesystems.extract_path_from_uri.dataset_path",description:"<strong>dataset_path</strong> (<code>str</code>) &#x2014; path (e.g. <code>dataset/train</code>) or remote uri (e.g. <code>s3://my-bucket/dataset/train</code>) of the dataset directory",name:"dataset_path"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/filesystems/__init__.py#L28"}}),Xf=new E({props:{name:"datasets.filesystems.is_remote_filesystem",anchor:"datasets.filesystems.is_remote_filesystem",parameters:[{name:"fs",val:": AbstractFileSystem"}],parametersDescription:[{anchor:"datasets.filesystems.is_remote_filesystem.fs",description:'<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>) &#x2014; An abstract super-class for pythonic file-systems, e.g. :code:<em>fsspec.filesystem(&#x2018;file&#x2019;)</em> or <a href="/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">datasets.filesystems.S3FileSystem</a>',name:"fs"}],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/filesystems/__init__.py#L40"}}),eu=new bs({}),tu=new E({props:{name:"class datasets.fingerprint.Hasher",anchor:"datasets.fingerprint.Hasher",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.7.0/src/datasets/fingerprint.py#L212"}}),{c(){i=r("meta"),g=m(),f=r("h1"),n=r("a"),u=r("span"),_(t.$$.fragment),d=m(),gn=r("span"),$s=p("Main classes"),zr=m(),Ce=r("h2"),be=r("a"),ne=r("span"),_(xs.$$.fragment),xu=m(),Vr=r("span"),v4=p("DatasetInfo"),Q7=m(),X=r("div"),_(Zp.$$.fragment),y4=m(),L2=r("p"),j4=p("Information about a dataset."),w4=m(),vu=r("p"),A2=r("em"),D4=p("DatasetInfo"),k4=p(` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),E4=m(),S2=r("p"),q4=p("Note: Not all fields are known on construction and may be updated later."),I4=m(),$e=r("div"),_(Xp.$$.fragment),T4=m(),ec=r("p"),N4=p("Create DatasetInfo from the JSON file in "),C2=r("em"),P4=p("dataset_info_dir"),F4=p("."),L4=m(),O2=r("p"),A4=p(`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),S4=m(),z2=r("p"),C4=p("This will overwrite all previous metadata."),O4=m(),_(Ur.$$.fragment),z4=m(),vs=r("div"),_(tc.$$.fragment),V4=m(),_n=r("p"),U4=p("Write "),V2=r("em"),M4=p("DatasetInfo"),R4=p(" and license (if present) as JSON files to "),U2=r("em"),B4=p("dataset_info_dir"),G4=p("."),H4=m(),_(Mr.$$.fragment),Z7=m(),bn=r("h2"),Rr=r("a"),M2=r("span"),_(sc.$$.fragment),W4=m(),R2=r("span"),Y4=p("Dataset"),X7=m(),Br=r("p"),J4=p("The base class "),yu=r("a"),K4=p("Dataset"),Q4=p(" implements a Dataset backed by an Apache Arrow table."),eD=m(),q=r("div"),_(ac.$$.fragment),Z4=m(),B2=r("p"),X4=p("A Dataset backed by an Arrow table."),e3=m(),st=r("div"),_(nc.$$.fragment),t3=m(),G2=r("p"),s3=p("Add column to Dataset."),a3=m(),H2=r("p"),W2=r("em"),n3=p("New in version 1.7."),r3=m(),_(Gr.$$.fragment),o3=m(),at=r("div"),_(rc.$$.fragment),l3=m(),Y2=r("p"),i3=p("Add item to Dataset."),p3=m(),J2=r("p"),K2=r("em"),c3=p("New in version 1.7."),d3=m(),_(Hr.$$.fragment),m3=m(),Wr=r("div"),_(oc.$$.fragment),h3=m(),Q2=r("p"),f3=p("Instantiate a Dataset backed by an Arrow table at filename."),u3=m(),Yr=r("div"),_(lc.$$.fragment),g3=m(),Z2=r("p"),_3=p("Instantiate a Dataset backed by an Arrow buffer."),b3=m(),xe=r("div"),_(ic.$$.fragment),$3=m(),Ct=r("p"),x3=p("Convert "),X2=r("code"),v3=p("pandas.DataFrame"),y3=p(" to a "),e$=r("code"),j3=p("pyarrow.Table"),w3=p(" to create a "),ju=r("a"),D3=p("Dataset"),k3=p("."),E3=m(),pc=r("p"),q3=p(`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),t$=r("em"),I3=p("object"),T3=p(", we need to guess the datatype by looking at the Python objects in this Series."),N3=m(),cc=r("p"),P3=p("Be aware that Series of the "),s$=r("em"),F3=p("object"),L3=p(` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),A3=m(),_(Jr.$$.fragment),S3=m(),Kr=r("div"),_(dc.$$.fragment),C3=m(),Ot=r("p"),O3=p("Convert "),a$=r("code"),z3=p("dict"),V3=p(" to a "),n$=r("code"),U3=p("pyarrow.Table"),M3=p(" to create a "),wu=r("a"),R3=p("Dataset"),B3=p("."),G3=m(),nt=r("div"),_(mc.$$.fragment),H3=m(),r$=r("p"),W3=p("Create a Dataset from a generator."),Y3=m(),_(Qr.$$.fragment),J3=m(),_(Zr.$$.fragment),K3=m(),ys=r("div"),_(hc.$$.fragment),Q3=m(),o$=r("p"),Z3=p("The Apache Arrow table backing the dataset."),X3=m(),_(Xr.$$.fragment),eE=m(),js=r("div"),_(fc.$$.fragment),tE=m(),l$=r("p"),sE=p("The cache files containing the Apache Arrow table backing the dataset."),aE=m(),_(eo.$$.fragment),nE=m(),ws=r("div"),_(uc.$$.fragment),rE=m(),i$=r("p"),oE=p("Number of columns in the dataset."),lE=m(),_(to.$$.fragment),iE=m(),Ds=r("div"),_(gc.$$.fragment),pE=m(),_c=r("p"),cE=p("Number of rows in the dataset (same as "),so=r("a"),dE=p("Dataset."),p$=r("strong"),mE=p("len"),hE=p("()"),fE=p(")."),uE=m(),_(ao.$$.fragment),gE=m(),ks=r("div"),_(bc.$$.fragment),_E=m(),c$=r("p"),bE=p("Names of the columns in the dataset."),$E=m(),_(no.$$.fragment),xE=m(),Es=r("div"),_($c.$$.fragment),vE=m(),d$=r("p"),yE=p("Shape of the dataset (number of columns, number of rows)."),jE=m(),_(ro.$$.fragment),wE=m(),rt=r("div"),_(xc.$$.fragment),DE=m(),m$=r("p"),kE=p("Return a list of the unique elements in a column."),EE=m(),h$=r("p"),qE=p("This is implemented in the low-level backend and as such, very fast."),IE=m(),_(oo.$$.fragment),TE=m(),qs=r("div"),_(vc.$$.fragment),NE=m(),f$=r("p"),PE=p(`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),FE=m(),_(lo.$$.fragment),LE=m(),Is=r("div"),_(yc.$$.fragment),AE=m(),u$=r("p"),SE=p("Cast the dataset to a new set of features."),CE=m(),_(io.$$.fragment),OE=m(),Ts=r("div"),_(jc.$$.fragment),zE=m(),g$=r("p"),VE=p("Cast column to feature for decoding."),UE=m(),_(po.$$.fragment),ME=m(),ot=r("div"),_(wc.$$.fragment),RE=m(),_$=r("p"),BE=p("Remove one or several column(s) in the dataset and the features associated to them."),GE=m(),$n=r("p"),HE=p("You can also remove a column using "),Du=r("a"),WE=p("Dataset.map()"),YE=p(" with "),b$=r("em"),JE=p("remove_columns"),KE=p(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),QE=m(),_(co.$$.fragment),ZE=m(),Ns=r("div"),_(Dc.$$.fragment),XE=m(),$$=r("p"),e5=p(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),t5=m(),_(mo.$$.fragment),s5=m(),Ps=r("div"),_(kc.$$.fragment),a5=m(),x$=r("p"),n5=p(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),r5=m(),_(ho.$$.fragment),o5=m(),Fs=r("div"),_(Ec.$$.fragment),l5=m(),qc=r("p"),i5=p("Casts the given column as :obj:"),v$=r("code"),p5=p("datasets.features.ClassLabel"),c5=p(" and updates the table."),d5=m(),_(fo.$$.fragment),m5=m(),Ls=r("div"),_(Ic.$$.fragment),h5=m(),y$=r("p"),f5=p("Number of rows in the dataset."),u5=m(),_(uo.$$.fragment),g5=m(),As=r("div"),_(Tc.$$.fragment),_5=m(),j$=r("p"),b5=p("Iterate through the examples."),$5=m(),Nc=r("p"),x5=p("If a formatting is set with "),ku=r("a"),v5=p("Dataset.set_format()"),y5=p(` rows will be returned with the
selected format.`),j5=m(),go=r("div"),_(Pc.$$.fragment),w5=m(),xn=r("p"),D5=p("To be used in a "),w$=r("code"),k5=p("with"),E5=p(" statement. Set "),D$=r("code"),q5=p("__getitem__"),I5=p(" return format (type and columns)."),T5=m(),ve=r("div"),_(Fc.$$.fragment),N5=m(),Oe=r("p"),P5=p("Set "),k$=r("strong"),F5=p("getitem"),L5=p(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),E$=r("code"),A5=p("type"),S5=p(" (for example \u201Cnumpy\u201D) is used to format batches when using "),q$=r("strong"),C5=p("getitem"),O5=p(`.
It\u2019s also possible to use custom transforms for formatting using `),Eu=r("a"),z5=p("datasets.Dataset.set_transform()"),V5=p("."),U5=m(),ze=r("p"),M5=p("It is possible to call "),I$=r("code"),R5=p("map"),B5=p(" after calling "),T$=r("code"),G5=p("set_format"),H5=p(". Since "),N$=r("code"),W5=p("map"),Y5=p(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),P$=r("code"),J5=p("map"),K5=p(" on a dataset to add a new column, then this column will be formatted:"),Q5=m(),F$=r("p"),Z5=p("new formatted columns = (all columns - previously unformatted columns)"),X5=m(),_(_o.$$.fragment),e6=m(),Ss=r("div"),_(Lc.$$.fragment),t6=m(),lt=r("p"),s6=p("Set "),L$=r("strong"),a6=p("getitem"),n6=p(" return format using this transform. The transform is applied on-the-fly on batches when "),A$=r("strong"),r6=p("getitem"),o6=p(` is called.
As `),qu=r("a"),l6=p("datasets.Dataset.set_format()"),i6=p(", this can be reset using "),Iu=r("a"),p6=p("datasets.Dataset.reset_format()"),c6=m(),_(bo.$$.fragment),d6=m(),it=r("div"),_(Ac.$$.fragment),m6=m(),Sc=r("p"),h6=p("Reset "),S$=r("strong"),f6=p("getitem"),u6=p(" return format to python objects and all columns."),g6=m(),Tu=r("p"),_6=p("Same as "),C$=r("code"),b6=p("self.set_format()"),$6=m(),_($o.$$.fragment),x6=m(),ye=r("div"),_(Cc.$$.fragment),v6=m(),zt=r("p"),y6=p("Set "),O$=r("strong"),j6=p("getitem"),w6=p(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),z$=r("code"),D6=p("type"),k6=p(" (for example \u201Cnumpy\u201D) is used to format batches when using "),V$=r("strong"),E6=p("getitem"),q6=p("."),I6=m(),Oc=r("p"),T6=p("It\u2019s also possible to use custom transforms for formatting using "),Nu=r("a"),N6=p("datasets.Dataset.with_transform()"),P6=p("."),F6=m(),vn=r("p"),L6=p("Contrary to "),Pu=r("a"),A6=p("datasets.Dataset.set_format()"),S6=p(", "),U$=r("code"),C6=p("with_format"),O6=p(" returns a new Dataset object."),z6=m(),_(xo.$$.fragment),V6=m(),je=r("div"),_(zc.$$.fragment),U6=m(),yn=r("p"),M6=p("Set "),M$=r("strong"),R6=p("getitem"),B6=p(" return format using this transform. The transform is applied on-the-fly on batches when "),R$=r("strong"),G6=p("getitem"),H6=p(" is called."),W6=m(),jn=r("p"),Y6=p("As "),Fu=r("a"),J6=p("datasets.Dataset.set_format()"),K6=p(", this can be reset using "),Lu=r("a"),Q6=p("datasets.Dataset.reset_format()"),Z6=p("."),X6=m(),wn=r("p"),e8=p("Contrary to "),Au=r("a"),t8=p("datasets.Dataset.set_transform()"),s8=p(", "),B$=r("code"),a8=p("with_transform"),n8=p(" returns a new Dataset object."),r8=m(),_(vo.$$.fragment),o8=m(),yo=r("div"),_(Vc.$$.fragment),l8=m(),G$=r("p"),i8=p("Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),p8=m(),pt=r("div"),_(Uc.$$.fragment),c8=m(),H$=r("p"),d8=p(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),m8=m(),W$=r("p"),h8=p("Be careful when running this command that no other process is currently using other cache files."),f8=m(),_(jo.$$.fragment),u8=m(),we=r("div"),_(Mc.$$.fragment),g8=m(),Y$=r("p"),_8=p(`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),b8=m(),Rc=r("p"),$8=p("You can specify whether the function should be batched or not with the "),J$=r("code"),x8=p("batched"),v8=p(" parameter:"),y8=m(),Dn=r("ul"),K$=r("li"),j8=p(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),w8=m(),Q$=r("li"),D8=p(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),k8=m(),de=r("li"),E8=p("If batched is True and batch_size is "),Z$=r("code"),q8=p("n"),I8=p(" > 1, then the function takes a batch of "),X$=r("code"),T8=p("n"),N8=p(" examples as input and can return a batch with "),e1=r("code"),P8=p("n"),F8=p(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),t1=r("code"),L8=p("n"),A8=p(` examples.
A batch is a dictionary, e.g. a batch of `),s1=r("code"),S8=p("n"),C8=p(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),O8=m(),_(wo.$$.fragment),z8=m(),Cs=r("div"),_(Bc.$$.fragment),V8=m(),a1=r("p"),U8=p(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),M8=m(),_(Do.$$.fragment),R8=m(),Os=r("div"),_(Gc.$$.fragment),B8=m(),n1=r("p"),G8=p("Create a new dataset with rows selected following the list/array of indices."),H8=m(),_(ko.$$.fragment),W8=m(),ct=r("div"),_(Hc.$$.fragment),Y8=m(),r1=r("p"),J8=p("Create a new dataset sorted according to a column."),K8=m(),o1=r("p"),Q8=p(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),Z8=m(),_(Eo.$$.fragment),X8=m(),dt=r("div"),_(Wc.$$.fragment),eq=m(),l1=r("p"),tq=p("Create a new Dataset where the rows are shuffled."),sq=m(),i1=r("p"),aq=p(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),nq=m(),_(qo.$$.fragment),rq=m(),mt=r("div"),_(Yc.$$.fragment),oq=m(),Y=r("p"),lq=p("Return a dictionary ("),p1=r("code"),iq=p("datasets.DatasetDict"),pq=p(") with two random train and test subsets ("),c1=r("em"),cq=p("train"),dq=p(" and "),d1=r("em"),mq=p("test"),hq=m(),m1=r("code"),fq=p("Dataset"),uq=p(` splits).
Splits are created from the dataset according to `),h1=r("em"),gq=p("test_size"),_q=p(", "),f1=r("em"),bq=p("train_size"),$q=p(" and "),u1=r("em"),xq=p("shuffle"),vq=p("."),yq=m(),Jc=r("p"),jq=p("This method is similar to scikit-learn "),g1=r("em"),wq=p("train_test_split"),Dq=p("."),kq=m(),_(Io.$$.fragment),Eq=m(),re=r("div"),_(Kc.$$.fragment),qq=m(),kn=r("p"),Iq=p("Return the "),_1=r("em"),Tq=p("index"),Nq=p("-nth shard from dataset split into "),b1=r("em"),Pq=p("num_shards"),Fq=p(" pieces."),Lq=m(),$1=r("p"),Aq=p(`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),Sq=m(),Qc=r("p"),Cq=p(`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),x1=r("em"),Oq=p("datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),zq=p(` will return
a dataset with the same order as the original.`),Vq=m(),v1=r("p"),Uq=p(`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),Mq=m(),_(To.$$.fragment),Rq=m(),zs=r("div"),_(Zc.$$.fragment),Bq=m(),y1=r("p"),Gq=p(`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict(). The dataset will yield
dicts for both inputs and labels unless the dict would contain only a single key, in which case a raw
tf.Tensor is yielded instead.`),Hq=m(),_(No.$$.fragment),Wq=m(),ht=r("div"),_(Xc.$$.fragment),Yq=m(),j1=r("p"),Jq=p(`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),Kq=m(),Vt=r("p"),Qq=p("The resulting Parquet files are self-contained by default: if your dataset contains "),Su=r("a"),Zq=p("Image"),Xq=p(" or "),Cu=r("a"),e9=p("Audio"),t9=p(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),w1=r("em"),s9=p("embed_external_files"),a9=p(" to False."),n9=m(),_(Po.$$.fragment),r9=m(),Q=r("div"),_(ed.$$.fragment),o9=m(),En=r("p"),l9=p("Saves a dataset to a dataset directory, or in a filesystem using either "),Ou=r("a"),i9=p("S3FileSystem"),p9=p(` or
any implementation of `),D1=r("code"),c9=p("fsspec.spec.AbstractFileSystem"),d9=p("."),m9=m(),qn=r("p"),h9=p("For "),zu=r("a"),f9=p("Image"),u9=p(" and "),Vu=r("a"),g9=p("Audio"),_9=p(" data:"),b9=m(),td=r("p"),$9=p(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),k1=r("em"),x9=p("read()"),v9=p(" those files first."),y9=m(),_(Fo.$$.fragment),j9=m(),_(Lo.$$.fragment),w9=m(),_(Ao.$$.fragment),D9=m(),Vs=r("div"),_(sd.$$.fragment),k9=m(),Ut=r("p"),E9=p("Loads a dataset that was previously saved using "),E1=r("code"),q9=p("save_to_disk"),I9=p(` from a dataset directory, or from a
filesystem using either `),Uu=r("a"),T9=p("S3FileSystem"),N9=p(` or any implementation of
`),q1=r("code"),P9=p("fsspec.spec.AbstractFileSystem"),F9=p("."),L9=m(),_(So.$$.fragment),A9=m(),Co=r("div"),_(ad.$$.fragment),S9=m(),I1=r("p"),C9=p("Create and cache a new Dataset by flattening the indices mapping."),O9=m(),Us=r("div"),_(nd.$$.fragment),z9=m(),T1=r("p"),V9=p("Exports the dataset to csv"),U9=m(),_(Oo.$$.fragment),M9=m(),Ms=r("div"),_(rd.$$.fragment),R9=m(),od=r("p"),B9=p("Returns the dataset as a "),N1=r("code"),G9=p("pandas.DataFrame"),H9=p(". Can also return a generator for large datasets."),W9=m(),_(zo.$$.fragment),Y9=m(),Rs=r("div"),_(ld.$$.fragment),J9=m(),P1=r("p"),K9=p("Returns the dataset as a Python dict. Can also return a generator for large datasets."),Q9=m(),_(Vo.$$.fragment),Z9=m(),Bs=r("div"),_(id.$$.fragment),X9=m(),F1=r("p"),eI=p("Export the dataset to JSON Lines or JSON."),tI=m(),_(Uo.$$.fragment),sI=m(),Gs=r("div"),_(pd.$$.fragment),aI=m(),L1=r("p"),nI=p("Exports the dataset to parquet"),rI=m(),_(Mo.$$.fragment),oI=m(),Hs=r("div"),_(cd.$$.fragment),lI=m(),A1=r("p"),iI=p("Exports the dataset to a SQL database."),pI=m(),_(Ro.$$.fragment),cI=m(),ft=r("div"),_(dd.$$.fragment),dI=m(),In=r("p"),mI=p(`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),S1=r("code"),hI=p("device"),fI=p(" if you want to run it on GPU ("),C1=r("code"),uI=p("device"),gI=p(` must be the GPU index).
You can find more information about Faiss here:`),_I=m(),O1=r("ul"),Mu=r("li"),bI=p("For "),md=r("a"),$I=p("string factory"),xI=m(),_(Bo.$$.fragment),vI=m(),Ws=r("div"),_(hd.$$.fragment),yI=m(),Mt=r("p"),jI=p(`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),z1=r("em"),wI=p("external_arrays"),DI=p(`.
You can specify `),V1=r("em"),kI=p("device"),EI=p(" if you want to run it on GPU ("),U1=r("em"),qI=p("device"),II=p(` must be the GPU index).
You can find more information about Faiss here:`),TI=m(),M1=r("ul"),Ru=r("li"),NI=p("For "),fd=r("a"),PI=p("string factory"),FI=m(),Go=r("div"),_(ud.$$.fragment),LI=m(),R1=r("p"),AI=p("Save a FaissIndex on disk."),SI=m(),Ys=r("div"),_(gd.$$.fragment),CI=m(),B1=r("p"),OI=p("Load a FaissIndex from disk."),zI=m(),_d=r("p"),VI=p(`If you want to do additional configurations, you can have access to the faiss index object by doing
`),G1=r("em"),UI=p(".get_index(index_name).faiss_index"),MI=p(" to make it fit your needs."),RI=m(),Js=r("div"),_(bd.$$.fragment),BI=m(),H1=r("p"),GI=p("Add a text index using ElasticSearch for fast retrieval. This is done in-place."),HI=m(),_(Ho.$$.fragment),WI=m(),Ks=r("div"),_($d.$$.fragment),YI=m(),W1=r("p"),JI=p("Load an existing text index using ElasticSearch for fast retrieval."),KI=m(),_(Wo.$$.fragment),QI=m(),Yo=r("div"),_(xd.$$.fragment),ZI=m(),Y1=r("p"),XI=p("List the colindex_nameumns/identifiers of all the attached indexes."),eT=m(),Jo=r("div"),_(vd.$$.fragment),tT=m(),J1=r("p"),sT=p("List the index_name/identifiers of all the attached indexes."),aT=m(),Ko=r("div"),_(yd.$$.fragment),nT=m(),K1=r("p"),rT=p("Drop the index with the specified column."),oT=m(),Qo=r("div"),_(jd.$$.fragment),lT=m(),Q1=r("p"),iT=p("Find the nearest examples indices in the dataset to the query."),pT=m(),Zo=r("div"),_(wd.$$.fragment),cT=m(),Z1=r("p"),dT=p("Find the nearest examples indices in the dataset to the query."),mT=m(),Xo=r("div"),_(Dd.$$.fragment),hT=m(),X1=r("p"),fT=p("Find the nearest examples in the dataset to the query."),uT=m(),el=r("div"),_(kd.$$.fragment),gT=m(),ex=r("p"),_T=p("Find the nearest examples in the dataset to the query."),bT=m(),tl=r("div"),_(Ed.$$.fragment),$T=m(),Bu=r("p"),Gu=r("a"),xT=p("datasets.DatasetInfo"),vT=p(" object containing all the metadata in the dataset."),yT=m(),sl=r("div"),_(qd.$$.fragment),jT=m(),Hu=r("p"),Wu=r("a"),wT=p("datasets.NamedSplit"),DT=p(" object corresponding to a named dataset split."),kT=m(),Yu=r("div"),_(Id.$$.fragment),ET=m(),Ju=r("div"),_(Td.$$.fragment),qT=m(),Ku=r("div"),_(Nd.$$.fragment),IT=m(),Qu=r("div"),_(Pd.$$.fragment),TT=m(),Zu=r("div"),_(Fd.$$.fragment),NT=m(),Xu=r("div"),_(Ld.$$.fragment),PT=m(),eg=r("div"),_(Ad.$$.fragment),FT=m(),tg=r("div"),_(Sd.$$.fragment),LT=m(),sg=r("div"),_(Cd.$$.fragment),AT=m(),ag=r("div"),_(Od.$$.fragment),ST=m(),ng=r("div"),_(zd.$$.fragment),CT=m(),rg=r("div"),_(Vd.$$.fragment),OT=m(),og=r("div"),_(Ud.$$.fragment),zT=m(),Qs=r("div"),_(Md.$$.fragment),VT=m(),tx=r("p"),UT=p("Create Dataset from CSV file(s)."),MT=m(),_(al.$$.fragment),RT=m(),Zs=r("div"),_(Rd.$$.fragment),BT=m(),sx=r("p"),GT=p("Create Dataset from JSON or JSON Lines file(s)."),HT=m(),_(nl.$$.fragment),WT=m(),Xs=r("div"),_(Bd.$$.fragment),YT=m(),ax=r("p"),JT=p("Create Dataset from Parquet file(s)."),KT=m(),_(rl.$$.fragment),QT=m(),ea=r("div"),_(Gd.$$.fragment),ZT=m(),nx=r("p"),XT=p("Create Dataset from text file(s)."),eN=m(),_(ol.$$.fragment),tN=m(),ut=r("div"),_(Hd.$$.fragment),sN=m(),rx=r("p"),aN=p("Create Dataset from SQL query or database table."),nN=m(),_(ll.$$.fragment),rN=m(),_(il.$$.fragment),oN=m(),ta=r("div"),_(Wd.$$.fragment),lN=m(),Tn=r("p"),iN=p("Prepare a dataset for the given task by casting the dataset\u2019s "),lg=r("a"),pN=p("Features"),cN=p(" to standardized column names and types as detailed in "),ig=r("a"),ox=r("code"),dN=p("datasets.tasks"),mN=p("."),hN=m(),Nn=r("p"),fN=p("Casts "),lx=r("code"),uN=p("datasets.DatasetInfo.features"),gN=p(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),ix=r("code"),_N=p("datasets.DatasetInfo.task_templates"),bN=p(" after casting."),$N=m(),sa=r("div"),_(Yd.$$.fragment),xN=m(),Jd=r("p"),vN=p("Align the dataset\u2019s label ID and label name mapping to match an input "),px=r("code"),yN=p("label2id"),jN=p(` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),wN=m(),_(pl.$$.fragment),tD=m(),Rt=r("div"),_(Kd.$$.fragment),DN=m(),Pn=r("p"),kN=p("Converts a list of "),pg=r("a"),EN=p("Dataset"),qN=p(" with the same schema into a single "),cg=r("a"),IN=p("Dataset"),TN=p("."),NN=m(),_(cl.$$.fragment),sD=m(),ee=r("div"),_(Qd.$$.fragment),PN=m(),cx=r("p"),FN=p(`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),LN=m(),Fn=r("p"),AN=p("You can use this function on a list of "),dg=r("a"),SN=p("Dataset"),CN=p(" objects, or on a list of "),mg=r("a"),ON=p("IterableDataset"),zN=p(" objects."),VN=m(),Ve=r("p"),UN=p("If "),dx=r("code"),MN=p("probabilities"),RN=p(" is "),mx=r("code"),BN=p("None"),GN=p(` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),hx=r("code"),HN=p("probabilities"),WN=p(" is not "),fx=r("code"),YN=p("None"),JN=p(", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),KN=m(),Ln=r("p"),QN=p("The resulting dataset ends when one of the source datasets runs out of examples except when "),ux=r("code"),ZN=p("oversampling"),XN=p(" is "),gx=r("code"),eP=p("True"),tP=p(`,
in which case, the resulting dataset ends when all datasets have ran out of examples at least one time.`),sP=m(),_(dl.$$.fragment),aD=m(),me=r("div"),_(Zd.$$.fragment),aP=m(),_x=r("p"),nP=p(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),rP=m(),bx=r("p"),oP=p(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),lP=m(),$x=r("p"),iP=p(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),pP=m(),Ue=r("ul"),xx=r("li"),cP=p("cache files are always recreated"),dP=m(),vx=r("li"),mP=p("cache files are written to a temporary directory that is deleted when session closes"),hP=m(),yx=r("li"),fP=p("cache files are named using a random hash instead of the dataset fingerprint"),uP=m(),Xd=r("li"),gP=p("use "),hg=r("a"),_P=p("datasets.Dataset.save_to_disk()"),bP=p(" to save a transformed dataset or it will be deleted when session closes"),$P=m(),Bt=r("li"),xP=p("caching doesn\u2019t affect "),fg=r("a"),vP=p("datasets.load_dataset()"),yP=p(`. If you want to regenerate a dataset from scratch you should use
the `),jx=r("code"),jP=p("download_mode"),wP=p(" parameter in "),ug=r("a"),DP=p("datasets.load_dataset()"),kP=p("."),nD=m(),he=r("div"),_(em.$$.fragment),EP=m(),wx=r("p"),qP=p(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),IP=m(),Dx=r("p"),TP=p(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),NP=m(),kx=r("p"),PP=p(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),FP=m(),Me=r("ul"),Ex=r("li"),LP=p("cache files are always recreated"),AP=m(),qx=r("li"),SP=p("cache files are written to a temporary directory that is deleted when session closes"),CP=m(),Ix=r("li"),OP=p("cache files are named using a random hash instead of the dataset fingerprint"),zP=m(),tm=r("li"),VP=p("use "),gg=r("a"),UP=p("datasets.Dataset.save_to_disk()"),MP=p(" to save a transformed dataset or it will be deleted when session closes"),RP=m(),Gt=r("li"),BP=p("caching doesn\u2019t affect "),_g=r("a"),GP=p("datasets.load_dataset()"),HP=p(`. If you want to regenerate a dataset from scratch you should use
the `),Tx=r("code"),WP=p("download_mode"),YP=p(" parameter in "),bg=r("a"),JP=p("datasets.load_dataset()"),KP=p("."),rD=m(),fe=r("div"),_(sm.$$.fragment),QP=m(),Nx=r("p"),ZP=p(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),XP=m(),Px=r("p"),eF=p(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),tF=m(),Fx=r("p"),sF=p(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),aF=m(),Re=r("ul"),Lx=r("li"),nF=p("cache files are always recreated"),rF=m(),Ax=r("li"),oF=p("cache files are written to a temporary directory that is deleted when session closes"),lF=m(),Sx=r("li"),iF=p("cache files are named using a random hash instead of the dataset fingerprint"),pF=m(),am=r("li"),cF=p("use "),$g=r("a"),dF=p("datasets.Dataset.save_to_disk()"),mF=p(" to save a transformed dataset or it will be deleted when session closes"),hF=m(),Ht=r("li"),fF=p("caching doesn\u2019t affect "),xg=r("a"),uF=p("datasets.load_dataset()"),gF=p(`. If you want to regenerate a dataset from scratch you should use
the `),Cx=r("code"),_F=p("download_mode"),bF=p(" parameter in "),vg=r("a"),$F=p("datasets.load_dataset()"),xF=p("."),oD=m(),An=r("h2"),ml=r("a"),Ox=r("span"),_(nm.$$.fragment),vF=m(),zx=r("span"),yF=p("DatasetDict"),lD=m(),hl=r("p"),jF=p("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Vx=r("code"),wF=p("Dataset"),DF=p(` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),iD=m(),F=r("div"),_(rm.$$.fragment),kF=m(),Ux=r("p"),EF=p("A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),qF=m(),aa=r("div"),_(om.$$.fragment),IF=m(),Mx=r("p"),TF=p("The Apache Arrow tables backing each split."),NF=m(),_(fl.$$.fragment),PF=m(),na=r("div"),_(lm.$$.fragment),FF=m(),Rx=r("p"),LF=p("The cache files containing the Apache Arrow table backing each split."),AF=m(),_(ul.$$.fragment),SF=m(),ra=r("div"),_(im.$$.fragment),CF=m(),Bx=r("p"),OF=p("Number of columns in each split of the dataset."),zF=m(),_(gl.$$.fragment),VF=m(),oa=r("div"),_(pm.$$.fragment),UF=m(),cm=r("p"),MF=p("Number of rows in each split of the dataset (same as "),_l=r("a"),RF=p("datasets.Dataset."),Gx=r("strong"),BF=p("len"),GF=p("()"),HF=p(")."),WF=m(),_(bl.$$.fragment),YF=m(),la=r("div"),_(dm.$$.fragment),JF=m(),Hx=r("p"),KF=p("Names of the columns in each split of the dataset."),QF=m(),_($l.$$.fragment),ZF=m(),ia=r("div"),_(mm.$$.fragment),XF=m(),Wx=r("p"),eL=p("Shape of each split of the dataset (number of columns, number of rows)."),tL=m(),_(xl.$$.fragment),sL=m(),gt=r("div"),_(hm.$$.fragment),aL=m(),Yx=r("p"),nL=p("Return a list of the unique elements in a column for each split."),rL=m(),Jx=r("p"),oL=p("This is implemented in the low-level backend and as such, very fast."),lL=m(),_(vl.$$.fragment),iL=m(),pa=r("div"),_(fm.$$.fragment),pL=m(),Kx=r("p"),cL=p(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),dL=m(),_(yl.$$.fragment),mL=m(),ca=r("div"),_(um.$$.fragment),hL=m(),Qx=r("p"),fL=p(`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),uL=m(),_(jl.$$.fragment),gL=m(),da=r("div"),_(gm.$$.fragment),_L=m(),Zx=r("p"),bL=p(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),$L=m(),_(wl.$$.fragment),xL=m(),_t=r("div"),_(_m.$$.fragment),vL=m(),Xx=r("p"),yL=p(`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),jL=m(),ev=r("p"),wL=p(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),DL=m(),_(Dl.$$.fragment),kL=m(),De=r("div"),_(bm.$$.fragment),EL=m(),tv=r("p"),qL=p("Create a new Dataset where the rows are shuffled."),IL=m(),sv=r("p"),TL=p("The transformation is applied to all the datasets of the dataset dictionary."),NL=m(),av=r("p"),PL=p(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),FL=m(),_(kl.$$.fragment),LL=m(),ke=r("div"),_($m.$$.fragment),AL=m(),xm=r("p"),SL=p("Set "),nv=r("code"),CL=p("__getitem__"),OL=p(` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),zL=m(),Be=r("p"),VL=p("It is possible to call "),rv=r("code"),UL=p("map"),ML=p(" after calling "),ov=r("code"),RL=p("set_format"),BL=p(". Since "),lv=r("code"),GL=p("map"),HL=p(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),iv=r("code"),WL=p("map"),YL=p(" on a dataset to add a new column, then this column will be formatted:"),JL=m(),pv=r("p"),KL=p("new formatted columns = (all columns - previously unformatted columns)"),QL=m(),_(El.$$.fragment),ZL=m(),bt=r("div"),_(vm.$$.fragment),XL=m(),ym=r("p"),eA=p("Reset "),cv=r("code"),tA=p("__getitem__"),sA=p(` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),aA=m(),yg=r("p"),nA=p("Same as "),dv=r("code"),rA=p("self.set_format()"),oA=m(),_(ql.$$.fragment),lA=m(),Il=r("div"),_(jm.$$.fragment),iA=m(),Sn=r("p"),pA=p("To be used in a "),mv=r("em"),cA=p("with"),dA=p(" statement. Set "),hv=r("code"),mA=p("__getitem__"),hA=p(` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),fA=m(),Ee=r("div"),_(wm.$$.fragment),uA=m(),Wt=r("p"),gA=p("Set "),fv=r("code"),_A=p("__getitem__"),bA=p(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),uv=r("code"),$A=p("type"),xA=p(" (for example \u201Cnumpy\u201D) is used to format batches when using "),gv=r("code"),vA=p("__getitem__"),yA=p(`.
The format is set for every dataset in the dataset dictionary`),jA=m(),Dm=r("p"),wA=p("It\u2019s also possible to use custom transforms for formatting using "),jg=r("a"),DA=p("datasets.Dataset.with_transform()"),kA=p("."),EA=m(),Cn=r("p"),qA=p("Contrary to "),wg=r("a"),IA=p("datasets.DatasetDict.set_format()"),TA=p(", "),_v=r("code"),NA=p("with_format"),PA=p(" returns a new DatasetDict object with new Dataset objects."),FA=m(),_(Tl.$$.fragment),LA=m(),qe=r("div"),_(km.$$.fragment),AA=m(),On=r("p"),SA=p("Set "),bv=r("code"),CA=p("__getitem__"),OA=p(" return format using this transform. The transform is applied on-the-fly on batches when "),$v=r("code"),zA=p("__getitem__"),VA=p(` is called.
The transform is set for every dataset in the dataset dictionary`),UA=m(),zn=r("p"),MA=p("As "),Dg=r("a"),RA=p("datasets.Dataset.set_format()"),BA=p(", this can be reset using "),kg=r("a"),GA=p("datasets.Dataset.reset_format()"),HA=p("."),WA=m(),Vn=r("p"),YA=p("Contrary to "),xv=r("code"),JA=p("datasets.DatasetDict.set_transform()"),KA=p(", "),vv=r("code"),QA=p("with_transform"),ZA=p(" returns a new DatasetDict object with new Dataset objects."),XA=m(),_(Nl.$$.fragment),eS=m(),ma=r("div"),_(Em.$$.fragment),tS=m(),yv=r("p"),sS=p(`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),aS=m(),_(Pl.$$.fragment),nS=m(),$t=r("div"),_(qm.$$.fragment),rS=m(),jv=r("p"),oS=p(`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),lS=m(),Yt=r("p"),iS=p("You can also remove a column using "),Eg=r("a"),pS=p("Dataset.map()"),cS=p(" with "),wv=r("em"),dS=p("feature"),mS=p(" but "),Dv=r("code"),hS=p("cast_"),fS=p(`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),uS=m(),_(Fl.$$.fragment),gS=m(),ha=r("div"),_(Im.$$.fragment),_S=m(),kv=r("p"),bS=p("Cast column to feature for decoding."),$S=m(),_(Ll.$$.fragment),xS=m(),Ie=r("div"),_(Tm.$$.fragment),vS=m(),Ev=r("p"),yS=p(`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),jS=m(),qv=r("p"),wS=p("The transformation is applied to all the splits of the dataset dictionary."),DS=m(),Un=r("p"),kS=p("You can also remove a column using "),qg=r("a"),ES=p("Dataset.map()"),qS=p(" with "),Iv=r("em"),IS=p("remove_columns"),TS=p(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),NS=m(),_(Al.$$.fragment),PS=m(),Te=r("div"),_(Nm.$$.fragment),FS=m(),Tv=r("p"),LS=p(`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),AS=m(),Mn=r("p"),SS=p("You can also rename a column using "),Ig=r("a"),CS=p("Dataset.map()"),OS=p(" with "),Nv=r("em"),zS=p("remove_columns"),VS=p(" but the present method:"),US=m(),Pm=r("ul"),Pv=r("li"),MS=p("takes care of moving the original features under the new column name."),RS=m(),Fv=r("li"),BS=p("doesn\u2019t copy the data to a new dataset and is thus much faster."),GS=m(),_(Sl.$$.fragment),HS=m(),fa=r("div"),_(Fm.$$.fragment),WS=m(),Lv=r("p"),YS=p(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),JS=m(),_(Cl.$$.fragment),KS=m(),ua=r("div"),_(Lm.$$.fragment),QS=m(),Am=r("p"),ZS=p("Casts the given column as :obj:"),Av=r("code"),XS=p("datasets.features.ClassLabel"),eC=p(" and updates the tables."),tC=m(),_(Ol.$$.fragment),sC=m(),Ne=r("div"),_(Sm.$$.fragment),aC=m(),Rn=r("p"),nC=p("Pushes the "),Sv=r("code"),rC=p("DatasetDict"),oC=p(` to the hub as a Parquet dataset.
The `),Cv=r("code"),lC=p("DatasetDict"),iC=p(" is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),pC=m(),Ov=r("p"),cC=p("Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),dC=m(),Jt=r("p"),mC=p("The resulting Parquet files are self-contained by default: if your dataset contains "),Tg=r("a"),hC=p("Image"),fC=p(" or "),Ng=r("a"),uC=p("Audio"),gC=p(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),zv=r("em"),_C=p("embed_external_files"),bC=p(" to False."),$C=m(),_(zl.$$.fragment),xC=m(),oe=r("div"),_(Cm.$$.fragment),vC=m(),Bn=r("p"),yC=p("Saves a dataset dict to a filesystem using either "),Pg=r("a"),jC=p("S3FileSystem"),wC=p(` or
`),Vv=r("code"),DC=p("fsspec.spec.AbstractFileSystem"),kC=p("."),EC=m(),Gn=r("p"),qC=p("For "),Fg=r("a"),IC=p("Image"),TC=p(" and "),Lg=r("a"),NC=p("Audio"),PC=p(" data:"),FC=m(),Om=r("p"),LC=p(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),Uv=r("em"),AC=p("read()"),SC=p(" those files first."),CC=m(),_(Vl.$$.fragment),OC=m(),_(Ul.$$.fragment),zC=m(),ga=r("div"),_(zm.$$.fragment),VC=m(),Kt=r("p"),UC=p("Load a dataset that was previously saved using "),Mv=r("code"),MC=p("save_to_disk"),RC=p(` from a filesystem using either
`),Ag=r("a"),BC=p("S3FileSystem"),GC=p(" or "),Rv=r("code"),HC=p("fsspec.spec.AbstractFileSystem"),WC=p("."),YC=m(),_(Ml.$$.fragment),JC=m(),_a=r("div"),_(Vm.$$.fragment),KC=m(),Bv=r("p"),QC=p("Create DatasetDict from CSV file(s)."),ZC=m(),_(Rl.$$.fragment),XC=m(),ba=r("div"),_(Um.$$.fragment),eO=m(),Gv=r("p"),tO=p("Create DatasetDict from JSON Lines file(s)."),sO=m(),_(Bl.$$.fragment),aO=m(),$a=r("div"),_(Mm.$$.fragment),nO=m(),Hv=r("p"),rO=p("Create DatasetDict from Parquet file(s)."),oO=m(),_(Gl.$$.fragment),lO=m(),xa=r("div"),_(Rm.$$.fragment),iO=m(),Wv=r("p"),pO=p("Create DatasetDict from text file(s)."),cO=m(),_(Hl.$$.fragment),dO=m(),va=r("div"),_(Bm.$$.fragment),mO=m(),Hn=r("p"),hO=p("Prepare a dataset for the given task by casting the dataset\u2019s "),Sg=r("a"),fO=p("Features"),uO=p(" to standardized column names and types as detailed in "),Cg=r("a"),Yv=r("code"),gO=p("datasets.tasks"),_O=p("."),bO=m(),Wn=r("p"),$O=p("Casts "),Jv=r("code"),xO=p("datasets.DatasetInfo.features"),vO=p(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Kv=r("code"),yO=p("datasets.DatasetInfo.task_templates"),jO=p(" after casting."),pD=m(),Og=r("a"),cD=m(),Yn=r("h2"),Wl=r("a"),Qv=r("span"),_(Gm.$$.fragment),wO=m(),Zv=r("span"),DO=p("IterableDataset"),dD=m(),Yl=r("p"),kO=p("The base class "),zg=r("a"),EO=p("IterableDataset"),qO=p(" implements an iterable Dataset backed by python generators."),mD=m(),A=r("div"),_(Hm.$$.fragment),IO=m(),Xv=r("p"),TO=p("A Dataset backed by an iterable."),NO=m(),xt=r("div"),_(Wm.$$.fragment),PO=m(),ey=r("p"),FO=p("Create an Iterable Dataset from a generator."),LO=m(),_(Jl.$$.fragment),AO=m(),_(Kl.$$.fragment),SO=m(),ya=r("div"),_(Ym.$$.fragment),CO=m(),ty=r("p"),OO=p(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),zO=m(),_(Ql.$$.fragment),VO=m(),ja=r("div"),_(Jm.$$.fragment),UO=m(),sy=r("p"),MO=p("Cast column to feature for decoding."),RO=m(),_(Zl.$$.fragment),BO=m(),wa=r("div"),_(Km.$$.fragment),GO=m(),ay=r("p"),HO=p("Cast the dataset to a new set of features."),WO=m(),_(Xl.$$.fragment),YO=m(),Vg=r("div"),_(Qm.$$.fragment),JO=m(),Pe=r("div"),_(Zm.$$.fragment),KO=m(),ny=r("p"),QO=p(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),ZO=m(),Xm=r("p"),XO=p("You can specify whether the function should be batched or not with the "),ry=r("code"),ez=p("batched"),tz=p(" parameter:"),sz=m(),Jn=r("ul"),oy=r("li"),az=p(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),nz=m(),ly=r("li"),rz=p(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),oz=m(),ue=r("li"),lz=p("If batched is True and batch_size is "),iy=r("code"),iz=p("n"),pz=p(" > 1, then the function takes a batch of "),py=r("code"),cz=p("n"),dz=p(" examples as input and can return a batch with "),cy=r("code"),mz=p("n"),hz=p(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),dy=r("code"),fz=p("n"),uz=p(` examples.
A batch is a dictionary, e.g. a batch of `),my=r("code"),gz=p("n"),_z=p(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),bz=m(),_(ei.$$.fragment),$z=m(),Da=r("div"),_(eh.$$.fragment),xz=m(),hy=r("p"),vz=p(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),yz=m(),_(ti.$$.fragment),jz=m(),ka=r("div"),_(th.$$.fragment),wz=m(),fy=r("p"),Dz=p(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),kz=m(),_(si.$$.fragment),Ez=m(),le=r("div"),_(sh.$$.fragment),qz=m(),uy=r("p"),Iz=p("Randomly shuffles the elements of this dataset."),Tz=m(),gy=r("p"),Nz=p(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),Pz=m(),ah=r("p"),Fz=p("For instance, if your dataset contains 10,000 elements but "),_y=r("code"),Lz=p("buffer_size"),Az=p(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),Sz=m(),Kn=r("p"),Cz=p(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Ug=r("a"),Oz=p("datasets.IterableDataset.skip()"),zz=p(" or "),Mg=r("a"),Vz=p("datasets.IterableDataset.take()"),Uz=p(`
then the order of the shards is kept unchanged.`),Mz=m(),_(ai.$$.fragment),Rz=m(),Ea=r("div"),_(nh.$$.fragment),Bz=m(),rh=r("p"),Gz=p("Create a new IterableDataset that skips the first "),by=r("code"),Hz=p("n"),Wz=p(" elements."),Yz=m(),_(ni.$$.fragment),Jz=m(),qa=r("div"),_(oh.$$.fragment),Kz=m(),lh=r("p"),Qz=p("Create a new IterableDataset with only the first "),$y=r("code"),Zz=p("n"),Xz=p(" elements."),eV=m(),_(ri.$$.fragment),tV=m(),oi=r("div"),_(ih.$$.fragment),sV=m(),Rg=r("p"),Bg=r("a"),aV=p("datasets.DatasetInfo"),nV=p(" object containing all the metadata in the dataset."),rV=m(),li=r("div"),_(ph.$$.fragment),oV=m(),Gg=r("p"),Hg=r("a"),lV=p("datasets.NamedSplit"),iV=p(" object corresponding to a named dataset split."),pV=m(),Wg=r("div"),_(ch.$$.fragment),cV=m(),Yg=r("div"),_(dh.$$.fragment),dV=m(),Jg=r("div"),_(mh.$$.fragment),mV=m(),Kg=r("div"),_(hh.$$.fragment),hV=m(),Qg=r("div"),_(fh.$$.fragment),fV=m(),Zg=r("div"),_(uh.$$.fragment),uV=m(),Xg=r("div"),_(gh.$$.fragment),gV=m(),e_=r("div"),_(_h.$$.fragment),_V=m(),t_=r("div"),_(bh.$$.fragment),bV=m(),s_=r("div"),_($h.$$.fragment),$V=m(),a_=r("div"),_(xh.$$.fragment),xV=m(),n_=r("div"),_(vh.$$.fragment),vV=m(),r_=r("div"),_(yh.$$.fragment),hD=m(),Qn=r("h2"),ii=r("a"),xy=r("span"),_(jh.$$.fragment),yV=m(),vy=r("span"),jV=p("IterableDatasetDict"),fD=m(),pi=r("p"),wV=p("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),yy=r("code"),DV=p("IterableDataset"),kV=p(" objects as values."),uD=m(),U=r("div"),_(wh.$$.fragment),EV=m(),Fe=r("div"),_(Dh.$$.fragment),qV=m(),jy=r("p"),IV=p(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),TV=m(),kh=r("p"),NV=p("You can specify whether the function should be batched or not with the "),wy=r("code"),PV=p("batched"),FV=p(" parameter:"),LV=m(),Zn=r("ul"),Dy=r("li"),AV=p(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),SV=m(),ky=r("li"),CV=p(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),OV=m(),ge=r("li"),zV=p("If batched is True and batch_size is "),Ey=r("code"),VV=p("n"),UV=p(" > 1, then the function takes a batch of "),qy=r("code"),MV=p("n"),RV=p(" examples as input and can return a batch with "),Iy=r("code"),BV=p("n"),GV=p(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Ty=r("code"),HV=p("n"),WV=p(` examples.
A batch is a dictionary, e.g. a batch of `),Ny=r("code"),YV=p("n"),JV=p(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),KV=m(),_(ci.$$.fragment),QV=m(),Ia=r("div"),_(Eh.$$.fragment),ZV=m(),Py=r("p"),XV=p(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),eU=m(),_(di.$$.fragment),tU=m(),ie=r("div"),_(qh.$$.fragment),sU=m(),Fy=r("p"),aU=p(`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),nU=m(),Ly=r("p"),rU=p(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),oU=m(),Ih=r("p"),lU=p("For instance, if your dataset contains 10,000 elements but "),Ay=r("code"),iU=p("buffer_size"),pU=p(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),cU=m(),Xn=r("p"),dU=p(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),o_=r("a"),mU=p("datasets.IterableDataset.skip()"),hU=p(" or "),l_=r("a"),fU=p("datasets.IterableDataset.take()"),uU=p(`
then the order of the shards is kept unchanged.`),gU=m(),_(mi.$$.fragment),_U=m(),Ta=r("div"),_(Th.$$.fragment),bU=m(),Sy=r("p"),$U=p(`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),xU=m(),_(hi.$$.fragment),vU=m(),Na=r("div"),_(Nh.$$.fragment),yU=m(),Cy=r("p"),jU=p(`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),wU=m(),_(fi.$$.fragment),DU=m(),Pa=r("div"),_(Ph.$$.fragment),kU=m(),Oy=r("p"),EU=p(`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),qU=m(),_(ui.$$.fragment),IU=m(),Fa=r("div"),_(Fh.$$.fragment),TU=m(),zy=r("p"),NU=p(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),PU=m(),_(gi.$$.fragment),FU=m(),La=r("div"),_(Lh.$$.fragment),LU=m(),Vy=r("p"),AU=p(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),SU=m(),_(_i.$$.fragment),CU=m(),Aa=r("div"),_(Ah.$$.fragment),OU=m(),Uy=r("p"),zU=p(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),VU=m(),_(bi.$$.fragment),gD=m(),er=r("h2"),$i=r("a"),My=r("span"),_(Sh.$$.fragment),UU=m(),Ry=r("span"),MU=p("Features"),_D=m(),C=r("div"),_(Ch.$$.fragment),RU=m(),By=r("p"),BU=p("A special dictionary that defines the internal structure of a dataset."),GU=m(),Oh=r("p"),HU=p("Instantiated with a dictionary of type "),Gy=r("code"),WU=p("dict[str, FieldType]"),YU=p(`, where keys are the desired column names,
and values are the type of that column.`),JU=m(),i_=r("p"),Hy=r("code"),KU=p("FieldType"),QU=p(" can be one of the following:"),ZU=m(),J=r("ul"),Wy=r("li"),Sa=r("p"),XU=p("a "),p_=r("a"),eM=p("datasets.Value"),tM=p(" feature specifies a single typed value, e.g. "),Yy=r("code"),sM=p("int64"),aM=p(" or "),Jy=r("code"),nM=p("string"),rM=m(),Ky=r("li"),zh=r("p"),oM=p("a "),c_=r("a"),lM=p("datasets.ClassLabel"),iM=p(` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),pM=m(),Qy=r("li"),Vh=r("p"),cM=p("a python "),Zy=r("code"),dM=p("dict"),mM=p(` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),hM=m(),Uh=r("li"),Ge=r("p"),fM=p("a python "),Xy=r("code"),uM=p("list"),gM=p(" or a "),d_=r("a"),_M=p("datasets.Sequence"),bM=p(` specifies that the field contains a list of objects. The python
`),ej=r("code"),$M=p("list"),xM=p(" or "),m_=r("a"),vM=p("datasets.Sequence"),yM=p(` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),jM=m(),_(xi.$$.fragment),wM=m(),tj=r("li"),He=r("p"),DM=p("a "),h_=r("a"),kM=p("Array2D"),EM=p(", "),f_=r("a"),qM=p("Array3D"),IM=p(", "),u_=r("a"),TM=p("Array4D"),NM=p(" or "),g_=r("a"),PM=p("Array5D"),FM=p(" feature for multidimensional arrays"),LM=m(),sj=r("li"),Mh=r("p"),AM=p("an "),__=r("a"),SM=p("Audio"),CM=p(` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),OM=m(),aj=r("li"),Qt=r("p"),zM=p("an "),b_=r("a"),VM=p("Image"),UM=p(" feature to store the absolute path to an image file, an "),nj=r("code"),MM=p("np.ndarray"),RM=p(" object, a "),rj=r("code"),BM=p("PIL.Image.Image"),GM=p(` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),HM=m(),oj=r("li"),vi=r("p"),$_=r("a"),WM=p("datasets.Translation"),YM=p(" and "),x_=r("a"),JM=p("datasets.TranslationVariableLanguages"),KM=p(", the two features specific to Machine Translation"),QM=m(),Ca=r("div"),_(Rh.$$.fragment),ZM=m(),lj=r("p"),XM=p("Make a deep copy of Features."),eR=m(),_(yi.$$.fragment),tR=m(),ji=r("div"),_(Bh.$$.fragment),sR=m(),ij=r("p"),aR=p("Decode batch with custom feature decoding."),nR=m(),wi=r("div"),_(Gh.$$.fragment),rR=m(),pj=r("p"),oR=p("Decode column with custom feature decoding."),lR=m(),Di=r("div"),_(Hh.$$.fragment),iR=m(),cj=r("p"),pR=p("Decode example with custom feature decoding."),cR=m(),ki=r("div"),_(Wh.$$.fragment),dR=m(),dj=r("p"),mR=p("Encode batch into a format for Arrow."),hR=m(),Ei=r("div"),_(Yh.$$.fragment),fR=m(),mj=r("p"),uR=p("Encode example into a format for Arrow."),gR=m(),vt=r("div"),_(Jh.$$.fragment),_R=m(),hj=r("p"),bR=p(`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),$R=m(),fj=r("p"),xR=p(`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),vR=m(),_(qi.$$.fragment),yR=m(),Ii=r("div"),_(Kh.$$.fragment),jR=m(),uj=r("p"),wR=p(`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),DR=m(),Le=r("div"),_(Qh.$$.fragment),kR=m(),gj=r("p"),ER=p("Construct Features from dict."),qR=m(),_j=r("p"),IR=p(`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),TR=m(),Zt=r("p"),NR=p(`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),v_=r("a"),PR=p("DatasetInfo"),FR=p(` that was dumped to a JSON object. This acts as an analogue to
`),y_=r("a"),LR=p("Features.from_arrow_schema()"),AR=p(` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),j_=r("a"),SR=p("Value"),CR=p(" automatically performs."),OR=m(),_(Ti.$$.fragment),zR=m(),yt=r("div"),_(Zh.$$.fragment),VR=m(),bj=r("p"),UR=p("Reorder Features fields to match the field order of other Features."),MR=m(),$j=r("p"),RR=p(`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),BR=m(),_(Ni.$$.fragment),bD=m(),Xt=r("div"),_(Xh.$$.fragment),GR=m(),xj=r("p"),HR=p(`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),WR=m(),_(Pi.$$.fragment),$D=m(),B=r("div"),_(ef.$$.fragment),YR=m(),vj=r("p"),JR=p("Feature type for integer class labels."),KR=m(),tf=r("p"),QR=p("There are 3 ways to define a "),yj=r("em"),ZR=p("ClassLabel"),XR=p(", which correspond to the 3 arguments:"),eB=m(),tr=r("ul"),w_=r("li"),jj=r("em"),tB=p("num_classes"),sB=p(": Create 0 to (num_classes-1) labels."),aB=m(),D_=r("li"),wj=r("em"),nB=p("names"),rB=p(": List of label strings."),oB=m(),k_=r("li"),Dj=r("em"),lB=p("names_file"),iB=p(": File containing the list of labels."),pB=m(),kj=r("p"),cB=p(`Under the hood the labels are stored as integers.
You can use negative integers to represent unknown/missing labels.`),dB=m(),_(Fi.$$.fragment),mB=m(),Oa=r("div"),_(sf.$$.fragment),hB=m(),Ej=r("p"),fB=p(`Cast an Arrow array to the ClassLabel arrow storage type.
The Arrow types that can be converted to the ClassLabel pyarrow storage type are:`),uB=m(),af=r("ul"),qj=r("li"),gB=p("pa.string()"),_B=m(),Ij=r("li"),bB=p("pa.int()"),$B=m(),jt=r("div"),_(nf.$$.fragment),xB=m(),Tj=r("p"),vB=p("Conversion integer => class name string."),yB=m(),Nj=r("p"),jB=p("Regarding unknown/missing labels: passing negative integers raises ValueError."),wB=m(),_(Li.$$.fragment),DB=m(),za=r("div"),_(rf.$$.fragment),kB=m(),Pj=r("p"),EB=p("Conversion class name string => integer."),qB=m(),_(Ai.$$.fragment),xD=m(),We=r("div"),_(of.$$.fragment),IB=m(),Fj=r("p"),TB=p("The Value dtypes are as follows:"),NB=m(),Lj=r("p"),PB=p(`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),FB=m(),_(Si.$$.fragment),vD=m(),te=r("div"),_(lf.$$.fragment),LB=m(),E_=r("p"),Aj=r("code"),AB=p("FeatureConnector"),SB=p(` for translations with fixed languages per example.
Here for compatiblity with tfds.`),CB=m(),Sj=r("p"),OB=p(`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),zB=m(),pf=r("p"),VB=p("Output: A dictionary mapping string language codes to translations as "),Cj=r("code"),UB=p("Text"),MB=p(`
features.`),RB=m(),_(Ci.$$.fragment),BB=m(),Oi=r("div"),_(cf.$$.fragment),GB=m(),Oj=r("p"),HB=p("Flatten the Translation feature into a dictionary."),yD=m(),se=r("div"),_(df.$$.fragment),WB=m(),q_=r("p"),zj=r("code"),YB=p("FeatureConnector"),JB=p(` for translations with variable languages per example.
Here for compatiblity with tfds.`),KB=m(),Vj=r("p"),QB=p(`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),ZB=m(),Uj=r("p"),XB=p(`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),eG=m(),_(zi.$$.fragment),tG=m(),Vi=r("div"),_(mf.$$.fragment),sG=m(),Mj=r("p"),aG=p("Flatten the TranslationVariableLanguages feature into a dictionary."),jD=m(),es=r("div"),_(hf.$$.fragment),nG=m(),Rj=r("p"),rG=p("Create a two-dimensional array."),oG=m(),_(Ui.$$.fragment),wD=m(),ts=r("div"),_(ff.$$.fragment),lG=m(),Bj=r("p"),iG=p("Create a three-dimensional array."),pG=m(),_(Mi.$$.fragment),DD=m(),ss=r("div"),_(uf.$$.fragment),cG=m(),Gj=r("p"),dG=p("Create a four-dimensional array."),mG=m(),_(Ri.$$.fragment),kD=m(),as=r("div"),_(gf.$$.fragment),hG=m(),Hj=r("p"),fG=p("Create a five-dimensional array."),uG=m(),_(Bi.$$.fragment),ED=m(),M=r("div"),_(_f.$$.fragment),gG=m(),Wj=r("p"),_G=p("Audio Feature to extract audio data from an audio file."),bG=m(),Yj=r("p"),$G=p("Input: The Audio feature accepts as input:"),xG=m(),sr=r("ul"),Jj=r("li"),bf=r("p"),vG=p("A "),Kj=r("code"),yG=p("str"),jG=p(": Absolute path to the audio file (i.e. random access is allowed)."),wG=m(),ar=r("li"),$f=r("p"),DG=p("A "),Qj=r("code"),kG=p("dict"),EG=p(" with the keys:"),qG=m(),xf=r("ul"),Zj=r("li"),IG=p("path: String with relative path of the audio file to the archive file."),TG=m(),Xj=r("li"),NG=p("bytes: Bytes content of the audio file."),PG=m(),e0=r("p"),FG=p("This is useful for archived files with sequential access."),LG=m(),nr=r("li"),vf=r("p"),AG=p("A "),t0=r("code"),SG=p("dict"),CG=p(" with the keys:"),OG=m(),rr=r("ul"),s0=r("li"),zG=p("path: String with relative path of the audio file to the archive file."),VG=m(),a0=r("li"),UG=p("array: Array containing the audio sample"),MG=m(),n0=r("li"),RG=p("sampling_rate: Integer corresponding to the sampling rate of the audio sample."),BG=m(),r0=r("p"),GG=p("This is useful for archived files with sequential access."),HG=m(),_(Gi.$$.fragment),WG=m(),Va=r("div"),_(yf.$$.fragment),YG=m(),o0=r("p"),JG=p(`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),KG=m(),ns=r("ul"),l0=r("li"),QG=p("pa.string() - it must contain the \u201Cpath\u201D data"),ZG=m(),i0=r("li"),XG=p("pa.struct({\u201Cbytes\u201D: pa.binary()})"),eH=m(),p0=r("li"),tH=p("pa.struct({\u201Cpath\u201D: pa.string()})"),sH=m(),c0=r("li"),aH=p("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),nH=m(),Hi=r("div"),_(jf.$$.fragment),rH=m(),d0=r("p"),oH=p("Decode example audio file into audio data."),lH=m(),Wi=r("div"),_(wf.$$.fragment),iH=m(),m0=r("p"),pH=p("Embed audio files into the Arrow array."),cH=m(),Yi=r("div"),_(Df.$$.fragment),dH=m(),h0=r("p"),mH=p("Encode example into a format for Arrow."),hH=m(),Ji=r("div"),_(kf.$$.fragment),fH=m(),f0=r("p"),uH=p("If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),qD=m(),R=r("div"),_(Ef.$$.fragment),gH=m(),u0=r("p"),_H=p("Image feature to read image data from an image file."),bH=m(),g0=r("p"),$H=p("Input: The Image feature accepts as input:"),xH=m(),rs=r("ul"),_0=r("li"),qf=r("p"),vH=p("A "),b0=r("code"),yH=p("str"),jH=p(": Absolute path to the image file (i.e. random access is allowed)."),wH=m(),or=r("li"),If=r("p"),DH=p("A "),$0=r("code"),kH=p("dict"),EH=p(" with the keys:"),qH=m(),Tf=r("ul"),x0=r("li"),IH=p("path: String with relative path of the image file to the archive file."),TH=m(),v0=r("li"),NH=p("bytes: Bytes of the image file."),PH=m(),y0=r("p"),FH=p("This is useful for archived files with sequential access."),LH=m(),j0=r("li"),Nf=r("p"),AH=p("An "),w0=r("code"),SH=p("np.ndarray"),CH=p(": NumPy array representing an image."),OH=m(),D0=r("li"),Pf=r("p"),zH=p("A "),k0=r("code"),VH=p("PIL.Image.Image"),UH=p(": PIL image object."),MH=m(),_(Ki.$$.fragment),RH=m(),Ua=r("div"),_(Ff.$$.fragment),BH=m(),E0=r("p"),GH=p(`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),HH=m(),Ye=r("ul"),q0=r("li"),WH=p("pa.string() - it must contain the \u201Cpath\u201D data"),YH=m(),I0=r("li"),JH=p("pa.struct({\u201Cbytes\u201D: pa.binary()})"),KH=m(),T0=r("li"),QH=p("pa.struct({\u201Cpath\u201D: pa.string()})"),ZH=m(),N0=r("li"),XH=p("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),eW=m(),P0=r("li"),tW=p("pa.list(*) - it must contain the image array data"),sW=m(),Qi=r("div"),_(Lf.$$.fragment),aW=m(),F0=r("p"),nW=p("Decode example image file into image data."),rW=m(),Zi=r("div"),_(Af.$$.fragment),oW=m(),L0=r("p"),lW=p("Embed image files into the Arrow array."),iW=m(),Xi=r("div"),_(Sf.$$.fragment),pW=m(),A0=r("p"),cW=p("Encode example into a format for Arrow."),dW=m(),ep=r("div"),_(Cf.$$.fragment),mW=m(),S0=r("p"),hW=p("If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),ID=m(),lr=r("h2"),tp=r("a"),C0=r("span"),_(Of.$$.fragment),fW=m(),O0=r("span"),uW=p("MetricInfo"),TD=m(),ae=r("div"),_(zf.$$.fragment),gW=m(),z0=r("p"),_W=p("Information about a metric."),bW=m(),I_=r("p"),V0=r("code"),$W=p("MetricInfo"),xW=p(` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),vW=m(),U0=r("p"),yW=p("Note: Not all fields are known on construction and may be updated later."),jW=m(),Ma=r("div"),_(Vf.$$.fragment),wW=m(),Uf=r("p"),DW=p("Create MetricInfo from the JSON file in "),M0=r("code"),kW=p("metric_info_dir"),EW=p("."),qW=m(),_(sp.$$.fragment),IW=m(),Ra=r("div"),_(Mf.$$.fragment),TW=m(),os=r("p"),NW=p("Write "),R0=r("code"),PW=p("MetricInfo"),FW=p(" as JSON to "),B0=r("code"),LW=p("metric_info_dir"),AW=p(`.
Also save the license separately in LICENCE.
If `),G0=r("code"),SW=p("pretty_print"),CW=p(" is True, the JSON will be pretty-printed with the indent level of 4."),OW=m(),_(ap.$$.fragment),ND=m(),ir=r("h2"),np=r("a"),H0=r("span"),_(Rf.$$.fragment),zW=m(),W0=r("span"),VW=p("Metric"),PD=m(),Ba=r("p"),UW=p("The base class "),Y0=r("code"),MW=p("Metric"),RW=p(" implements a Metric backed by one or several "),T_=r("a"),BW=p("Dataset"),GW=p("."),FD=m(),K=r("div"),_(Bf.$$.fragment),HW=m(),J0=r("p"),WW=p("A Metric is the base class and common API for all metrics."),YW=m(),_(rp.$$.fragment),JW=m(),Ga=r("div"),_(Gf.$$.fragment),KW=m(),K0=r("p"),QW=p("Add one prediction and reference for the metric\u2019s stack."),ZW=m(),_(op.$$.fragment),XW=m(),Ha=r("div"),_(Hf.$$.fragment),eY=m(),Q0=r("p"),tY=p("Add a batch of predictions and references for the metric\u2019s stack."),sY=m(),_(lp.$$.fragment),aY=m(),wt=r("div"),_(Wf.$$.fragment),nY=m(),Z0=r("p"),rY=p("Compute the metrics."),oY=m(),X0=r("p"),lY=p("Usage of positional arguments is not allowed to prevent mistakes."),iY=m(),_(ip.$$.fragment),pY=m(),pp=r("div"),_(Yf.$$.fragment),cY=m(),ew=r("p"),dY=p("Downloads and prepares dataset for reading."),LD=m(),pr=r("h2"),cp=r("a"),tw=r("span"),_(Jf.$$.fragment),mY=m(),sw=r("span"),hY=p("Filesystems"),AD=m(),O=r("div"),_(Kf.$$.fragment),fY=m(),dp=r("p"),aw=r("code"),uY=p("datasets.filesystems.S3FileSystem"),gY=p(" is a subclass of "),Qf=r("a"),nw=r("code"),_Y=p("s3fs.S3FileSystem"),bY=p("."),$Y=m(),ls=r("p"),xY=p("Users can use this class to access S3 as if it were a file system. It exposes a filesystem-like API (ls, cp, open, etc.) on top of S3 storage. Provide credentials either explicitly ("),rw=r("code"),vY=p("key="),yY=p(", "),ow=r("code"),jY=p("secret="),wY=p(") or with boto\u2019s credential methods. See botocore documentation for more information. If no credentials are available, use "),lw=r("code"),DY=p("anon=True"),kY=p("."),EY=m(),iw=r("p"),qY=p("Examples:"),IY=m(),pw=r("p"),TY=p("Listing files from public S3 bucket."),NY=m(),_(mp.$$.fragment),PY=m(),cr=r("p"),FY=p("Listing files from private S3 bucket using "),cw=r("code"),LY=p("aws_access_key_id"),AY=p(" and "),dw=r("code"),SY=p("aws_secret_access_key"),CY=p("."),OY=m(),_(hp.$$.fragment),zY=m(),is=r("p"),VY=p("Using "),mw=r("code"),UY=p("S3Filesystem"),MY=p(" with "),hw=r("code"),RY=p("botocore.session.Session"),BY=p(" and custom "),fw=r("code"),GY=p("aws_profile"),HY=p("."),WY=m(),_(fp.$$.fragment),YY=m(),dr=r("p"),JY=p("Loading dataset from S3 using "),uw=r("code"),KY=p("S3Filesystem"),QY=p(" and "),N_=r("a"),ZY=p("load_from_disk()"),XY=p("."),eJ=m(),_(up.$$.fragment),tJ=m(),mr=r("p"),sJ=p("Saving dataset to S3 using "),gw=r("code"),aJ=p("S3Filesystem"),nJ=p(" and "),P_=r("a"),rJ=p("Dataset.save_to_disk()"),oJ=p("."),lJ=m(),_(gp.$$.fragment),SD=m(),hr=r("div"),_(Zf.$$.fragment),iJ=m(),fr=r("p"),pJ=p("preprocesses "),_w=r("em"),cJ=p("dataset_path"),dJ=p(" and removes remote filesystem (e.g. removing "),bw=r("code"),mJ=p("s3://"),hJ=p(")"),CD=m(),ur=r("div"),_(Xf.$$.fragment),fJ=m(),$w=r("p"),uJ=p("Validates if filesystem has remote protocol."),OD=m(),gr=r("h2"),_p=r("a"),xw=r("span"),_(eu.$$.fragment),gJ=m(),vw=r("span"),_J=p("Fingerprint"),zD=m(),_r=r("div"),_(tu.$$.fragment),bJ=m(),yw=r("p"),$J=p("Hasher that accepts python objects as inputs."),this.h()},l(a){const j=fne('[data-svelte="svelte-1phssyn"]',document.head);i=o(j,"META",{name:!0,content:!0}),j.forEach(s),g=h(a),f=o(a,"H1",{class:!0});var su=l(f);n=o(su,"A",{id:!0,class:!0,href:!0});var jw=l(n);u=o(jw,"SPAN",{});var ww=l(u);b(t.$$.fragment,ww),ww.forEach(s),jw.forEach(s),d=h(su),gn=o(su,"SPAN",{});var Dw=l(gn);$s=c(Dw,"Main classes"),Dw.forEach(s),su.forEach(s),zr=h(a),Ce=o(a,"H2",{class:!0});var au=l(Ce);be=o(au,"A",{id:!0,class:!0,href:!0});var kw=l(be);ne=o(kw,"SPAN",{});var Ew=l(ne);b(xs.$$.fragment,Ew),Ew.forEach(s),kw.forEach(s),xu=h(au),Vr=o(au,"SPAN",{});var qw=l(Vr);v4=c(qw,"DatasetInfo"),qw.forEach(s),au.forEach(s),Q7=h(a),X=o(a,"DIV",{class:!0});var _e=l(X);b(Zp.$$.fragment,_e),y4=h(_e),L2=o(_e,"P",{});var Iw=l(L2);j4=c(Iw,"Information about a dataset."),Iw.forEach(s),w4=h(_e),vu=o(_e,"P",{});var F_=l(vu);A2=o(F_,"EM",{});var Tw=l(A2);D4=c(Tw,"DatasetInfo"),Tw.forEach(s),k4=c(F_,` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),F_.forEach(s),E4=h(_e),S2=o(_e,"P",{});var Nw=l(S2);q4=c(Nw,"Note: Not all fields are known on construction and may be updated later."),Nw.forEach(s),I4=h(_e),$e=o(_e,"DIV",{class:!0});var Je=l($e);b(Xp.$$.fragment,Je),T4=h(Je),ec=o(Je,"P",{});var nu=l(ec);N4=c(nu,"Create DatasetInfo from the JSON file in "),C2=o(nu,"EM",{});var Pw=l(C2);P4=c(Pw,"dataset_info_dir"),Pw.forEach(s),F4=c(nu,"."),nu.forEach(s),L4=h(Je),O2=o(Je,"P",{});var Fw=l(O2);A4=c(Fw,`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),Fw.forEach(s),S4=h(Je),z2=o(Je,"P",{});var Lw=l(z2);C4=c(Lw,"This will overwrite all previous metadata."),Lw.forEach(s),O4=h(Je),b(Ur.$$.fragment,Je),Je.forEach(s),z4=h(_e),vs=o(_e,"DIV",{class:!0});var br=l(vs);b(tc.$$.fragment,br),V4=h(br),_n=o(br,"P",{});var $r=l(_n);U4=c($r,"Write "),V2=o($r,"EM",{});var Aw=l(V2);M4=c(Aw,"DatasetInfo"),Aw.forEach(s),R4=c($r," and license (if present) as JSON files to "),U2=o($r,"EM",{});var Sw=l(U2);B4=c(Sw,"dataset_info_dir"),Sw.forEach(s),G4=c($r,"."),$r.forEach(s),H4=h(br),b(Mr.$$.fragment,br),br.forEach(s),_e.forEach(s),Z7=h(a),bn=o(a,"H2",{class:!0});var ru=l(bn);Rr=o(ru,"A",{id:!0,class:!0,href:!0});var Cw=l(Rr);M2=o(Cw,"SPAN",{});var Ow=l(M2);b(sc.$$.fragment,Ow),Ow.forEach(s),Cw.forEach(s),W4=h(ru),R2=o(ru,"SPAN",{});var zw=l(R2);Y4=c(zw,"Dataset"),zw.forEach(s),ru.forEach(s),X7=h(a),Br=o(a,"P",{});var ou=l(Br);J4=c(ou,"The base class "),yu=o(ou,"A",{href:!0});var Vw=l(yu);K4=c(Vw,"Dataset"),Vw.forEach(s),Q4=c(ou," implements a Dataset backed by an Apache Arrow table."),ou.forEach(s),eD=h(a),q=o(a,"DIV",{class:!0});var I=l(q);b(ac.$$.fragment,I),Z4=h(I),B2=o(I,"P",{});var Uw=l(B2);X4=c(Uw,"A Dataset backed by an Arrow table."),Uw.forEach(s),e3=h(I),st=o(I,"DIV",{class:!0});var ps=l(st);b(nc.$$.fragment,ps),t3=h(ps),G2=o(ps,"P",{});var Mw=l(G2);s3=c(Mw,"Add column to Dataset."),Mw.forEach(s),a3=h(ps),H2=o(ps,"P",{});var Rw=l(H2);W2=o(Rw,"EM",{});var Bw=l(W2);n3=c(Bw,"New in version 1.7."),Bw.forEach(s),Rw.forEach(s),r3=h(ps),b(Gr.$$.fragment,ps),ps.forEach(s),o3=h(I),at=o(I,"DIV",{class:!0});var cs=l(at);b(rc.$$.fragment,cs),l3=h(cs),Y2=o(cs,"P",{});var Gw=l(Y2);i3=c(Gw,"Add item to Dataset."),Gw.forEach(s),p3=h(cs),J2=o(cs,"P",{});var Hw=l(J2);K2=o(Hw,"EM",{});var Ww=l(K2);c3=c(Ww,"New in version 1.7."),Ww.forEach(s),Hw.forEach(s),d3=h(cs),b(Hr.$$.fragment,cs),cs.forEach(s),m3=h(I),Wr=o(I,"DIV",{class:!0});var lu=l(Wr);b(oc.$$.fragment,lu),h3=h(lu),Q2=o(lu,"P",{});var Yw=l(Q2);f3=c(Yw,"Instantiate a Dataset backed by an Arrow table at filename."),Yw.forEach(s),lu.forEach(s),u3=h(I),Yr=o(I,"DIV",{class:!0});var iu=l(Yr);b(lc.$$.fragment,iu),g3=h(iu),Z2=o(iu,"P",{});var Jw=l(Z2);_3=c(Jw,"Instantiate a Dataset backed by an Arrow buffer."),Jw.forEach(s),iu.forEach(s),b3=h(I),xe=o(I,"DIV",{class:!0});var Ke=l(xe);b(ic.$$.fragment,Ke),$3=h(Ke),Ct=o(Ke,"P",{});var ds=l(Ct);x3=c(ds,"Convert "),X2=o(ds,"CODE",{});var Kw=l(X2);v3=c(Kw,"pandas.DataFrame"),Kw.forEach(s),y3=c(ds," to a "),e$=o(ds,"CODE",{});var Qw=l(e$);j3=c(Qw,"pyarrow.Table"),Qw.forEach(s),w3=c(ds," to create a "),ju=o(ds,"A",{href:!0});var Zw=l(ju);D3=c(Zw,"Dataset"),Zw.forEach(s),k3=c(ds,"."),ds.forEach(s),E3=h(Ke),pc=o(Ke,"P",{});var pu=l(pc);q3=c(pu,`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),t$=o(pu,"EM",{});var Xw=l(t$);I3=c(Xw,"object"),Xw.forEach(s),T3=c(pu,", we need to guess the datatype by looking at the Python objects in this Series."),pu.forEach(s),N3=h(Ke),cc=o(Ke,"P",{});var cu=l(cc);P3=c(cu,"Be aware that Series of the "),s$=o(cu,"EM",{});var e7=l(s$);F3=c(e7,"object"),e7.forEach(s),L3=c(cu,` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),cu.forEach(s),A3=h(Ke),b(Jr.$$.fragment,Ke),Ke.forEach(s),S3=h(I),Kr=o(I,"DIV",{class:!0});var du=l(Kr);b(dc.$$.fragment,du),C3=h(du),Ot=o(du,"P",{});var ms=l(Ot);O3=c(ms,"Convert "),a$=o(ms,"CODE",{});var t7=l(a$);z3=c(t7,"dict"),t7.forEach(s),V3=c(ms," to a "),n$=o(ms,"CODE",{});var s7=l(n$);U3=c(s7,"pyarrow.Table"),s7.forEach(s),M3=c(ms," to create a "),wu=o(ms,"A",{href:!0});var a7=l(wu);R3=c(a7,"Dataset"),a7.forEach(s),B3=c(ms,"."),ms.forEach(s),du.forEach(s),G3=h(I),nt=o(I,"DIV",{class:!0});var hs=l(nt);b(mc.$$.fragment,hs),H3=h(hs),r$=o(hs,"P",{});var n7=l(r$);W3=c(n7,"Create a Dataset from a generator."),n7.forEach(s),Y3=h(hs),b(Qr.$$.fragment,hs),J3=h(hs),b(Zr.$$.fragment,hs),hs.forEach(s),K3=h(I),ys=o(I,"DIV",{class:!0});var xr=l(ys);b(hc.$$.fragment,xr),Q3=h(xr),o$=o(xr,"P",{});var r7=l(o$);Z3=c(r7,"The Apache Arrow table backing the dataset."),r7.forEach(s),X3=h(xr),b(Xr.$$.fragment,xr),xr.forEach(s),eE=h(I),js=o(I,"DIV",{class:!0});var vr=l(js);b(fc.$$.fragment,vr),tE=h(vr),l$=o(vr,"P",{});var o7=l(l$);sE=c(o7,"The cache files containing the Apache Arrow table backing the dataset."),o7.forEach(s),aE=h(vr),b(eo.$$.fragment,vr),vr.forEach(s),nE=h(I),ws=o(I,"DIV",{class:!0});var yr=l(ws);b(uc.$$.fragment,yr),rE=h(yr),i$=o(yr,"P",{});var l7=l(i$);oE=c(l7,"Number of columns in the dataset."),l7.forEach(s),lE=h(yr),b(to.$$.fragment,yr),yr.forEach(s),iE=h(I),Ds=o(I,"DIV",{class:!0});var jr=l(Ds);b(gc.$$.fragment,jr),pE=h(jr),_c=o(jr,"P",{});var mu=l(_c);cE=c(mu,"Number of rows in the dataset (same as "),so=o(mu,"A",{href:!0});var hu=l(so);dE=c(hu,"Dataset."),p$=o(hu,"STRONG",{});var i7=l(p$);mE=c(i7,"len"),i7.forEach(s),hE=c(hu,"()"),hu.forEach(s),fE=c(mu,")."),mu.forEach(s),uE=h(jr),b(ao.$$.fragment,jr),jr.forEach(s),gE=h(I),ks=o(I,"DIV",{class:!0});var wr=l(ks);b(bc.$$.fragment,wr),_E=h(wr),c$=o(wr,"P",{});var p7=l(c$);bE=c(p7,"Names of the columns in the dataset."),p7.forEach(s),$E=h(wr),b(no.$$.fragment,wr),wr.forEach(s),xE=h(I),Es=o(I,"DIV",{class:!0});var Dr=l(Es);b($c.$$.fragment,Dr),vE=h(Dr),d$=o(Dr,"P",{});var c7=l(d$);yE=c(c7,"Shape of the dataset (number of columns, number of rows)."),c7.forEach(s),jE=h(Dr),b(ro.$$.fragment,Dr),Dr.forEach(s),wE=h(I),rt=o(I,"DIV",{class:!0});var fs=l(rt);b(xc.$$.fragment,fs),DE=h(fs),m$=o(fs,"P",{});var d7=l(m$);kE=c(d7,"Return a list of the unique elements in a column."),d7.forEach(s),EE=h(fs),h$=o(fs,"P",{});var m7=l(h$);qE=c(m7,"This is implemented in the low-level backend and as such, very fast."),m7.forEach(s),IE=h(fs),b(oo.$$.fragment,fs),fs.forEach(s),TE=h(I),qs=o(I,"DIV",{class:!0});var kr=l(qs);b(vc.$$.fragment,kr),NE=h(kr),f$=o(kr,"P",{});var h7=l(f$);PE=c(h7,`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),h7.forEach(s),FE=h(kr),b(lo.$$.fragment,kr),kr.forEach(s),LE=h(I),Is=o(I,"DIV",{class:!0});var Er=l(Is);b(yc.$$.fragment,Er),AE=h(Er),u$=o(Er,"P",{});var f7=l(u$);SE=c(f7,"Cast the dataset to a new set of features."),f7.forEach(s),CE=h(Er),b(io.$$.fragment,Er),Er.forEach(s),OE=h(I),Ts=o(I,"DIV",{class:!0});var qr=l(Ts);b(jc.$$.fragment,qr),zE=h(qr),g$=o(qr,"P",{});var u7=l(g$);VE=c(u7,"Cast column to feature for decoding."),u7.forEach(s),UE=h(qr),b(po.$$.fragment,qr),qr.forEach(s),ME=h(I),ot=o(I,"DIV",{class:!0});var us=l(ot);b(wc.$$.fragment,us),RE=h(us),_$=o(us,"P",{});var g7=l(_$);BE=c(g7,"Remove one or several column(s) in the dataset and the features associated to them."),g7.forEach(s),GE=h(us),$n=o(us,"P",{});var Ir=l($n);HE=c(Ir,"You can also remove a column using "),Du=o(Ir,"A",{href:!0});var _7=l(Du);WE=c(_7,"Dataset.map()"),_7.forEach(s),YE=c(Ir," with "),b$=o(Ir,"EM",{});var b7=l(b$);JE=c(b7,"remove_columns"),b7.forEach(s),KE=c(Ir,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),Ir.forEach(s),QE=h(us),b(co.$$.fragment,us),us.forEach(s),ZE=h(I),Ns=o(I,"DIV",{class:!0});var Tr=l(Ns);b(Dc.$$.fragment,Tr),XE=h(Tr),$$=o(Tr,"P",{});var $7=l($$);e5=c($7,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),$7.forEach(s),t5=h(Tr),b(mo.$$.fragment,Tr),Tr.forEach(s),s5=h(I),Ps=o(I,"DIV",{class:!0});var Nr=l(Ps);b(kc.$$.fragment,Nr),a5=h(Nr),x$=o(Nr,"P",{});var x7=l(x$);n5=c(x7,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),x7.forEach(s),r5=h(Nr),b(ho.$$.fragment,Nr),Nr.forEach(s),o5=h(I),Fs=o(I,"DIV",{class:!0});var Pr=l(Fs);b(Ec.$$.fragment,Pr),l5=h(Pr),qc=o(Pr,"P",{});var fu=l(qc);i5=c(fu,"Casts the given column as :obj:"),v$=o(fu,"CODE",{});var v7=l(v$);p5=c(v7,"datasets.features.ClassLabel"),v7.forEach(s),c5=c(fu," and updates the table."),fu.forEach(s),d5=h(Pr),b(fo.$$.fragment,Pr),Pr.forEach(s),m5=h(I),Ls=o(I,"DIV",{class:!0});var Fr=l(Ls);b(Ic.$$.fragment,Fr),h5=h(Fr),y$=o(Fr,"P",{});var y7=l(y$);f5=c(y7,"Number of rows in the dataset."),y7.forEach(s),u5=h(Fr),b(uo.$$.fragment,Fr),Fr.forEach(s),g5=h(I),As=o(I,"DIV",{class:!0});var Lr=l(As);b(Tc.$$.fragment,Lr),_5=h(Lr),j$=o(Lr,"P",{});var j7=l(j$);b5=c(j7,"Iterate through the examples."),j7.forEach(s),$5=h(Lr),Nc=o(Lr,"P",{});var uu=l(Nc);x5=c(uu,"If a formatting is set with "),ku=o(uu,"A",{href:!0});var w7=l(ku);v5=c(w7,"Dataset.set_format()"),w7.forEach(s),y5=c(uu,` rows will be returned with the
selected format.`),uu.forEach(s),Lr.forEach(s),j5=h(I),go=o(I,"DIV",{class:!0});var gu=l(go);b(Pc.$$.fragment,gu),w5=h(gu),xn=o(gu,"P",{});var Ar=l(xn);D5=c(Ar,"To be used in a "),w$=o(Ar,"CODE",{});var D7=l(w$);k5=c(D7,"with"),D7.forEach(s),E5=c(Ar," statement. Set "),D$=o(Ar,"CODE",{});var k7=l(D$);q5=c(k7,"__getitem__"),k7.forEach(s),I5=c(Ar," return format (type and columns)."),Ar.forEach(s),gu.forEach(s),T5=h(I),ve=o(I,"DIV",{class:!0});var Qe=l(ve);b(Fc.$$.fragment,Qe),N5=h(Qe),Oe=o(Qe,"P",{});var Ze=l(Oe);P5=c(Ze,"Set "),k$=o(Ze,"STRONG",{});var E7=l(k$);F5=c(E7,"getitem"),E7.forEach(s),L5=c(Ze,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),E$=o(Ze,"CODE",{});var q7=l(E$);A5=c(q7,"type"),q7.forEach(s),S5=c(Ze," (for example \u201Cnumpy\u201D) is used to format batches when using "),q$=o(Ze,"STRONG",{});var I7=l(q$);C5=c(I7,"getitem"),I7.forEach(s),O5=c(Ze,`.
It\u2019s also possible to use custom transforms for formatting using `),Eu=o(Ze,"A",{href:!0});var T7=l(Eu);z5=c(T7,"datasets.Dataset.set_transform()"),T7.forEach(s),V5=c(Ze,"."),Ze.forEach(s),U5=h(Qe),ze=o(Qe,"P",{});var Xe=l(ze);M5=c(Xe,"It is possible to call "),I$=o(Xe,"CODE",{});var N7=l(I$);R5=c(N7,"map"),N7.forEach(s),B5=c(Xe," after calling "),T$=o(Xe,"CODE",{});var P7=l(T$);G5=c(P7,"set_format"),P7.forEach(s),H5=c(Xe,". Since "),N$=o(Xe,"CODE",{});var F7=l(N$);W5=c(F7,"map"),F7.forEach(s),Y5=c(Xe,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),P$=o(Xe,"CODE",{});var L7=l(P$);J5=c(L7,"map"),L7.forEach(s),K5=c(Xe," on a dataset to add a new column, then this column will be formatted:"),Xe.forEach(s),Q5=h(Qe),F$=o(Qe,"P",{});var A7=l(F$);Z5=c(A7,"new formatted columns = (all columns - previously unformatted columns)"),A7.forEach(s),X5=h(Qe),b(_o.$$.fragment,Qe),Qe.forEach(s),e6=h(I),Ss=o(I,"DIV",{class:!0});var Sr=l(Ss);b(Lc.$$.fragment,Sr),t6=h(Sr),lt=o(Sr,"P",{});var Dt=l(lt);s6=c(Dt,"Set "),L$=o(Dt,"STRONG",{});var S7=l(L$);a6=c(S7,"getitem"),S7.forEach(s),n6=c(Dt," return format using this transform. The transform is applied on-the-fly on batches when "),A$=o(Dt,"STRONG",{});var C7=l(A$);r6=c(C7,"getitem"),C7.forEach(s),o6=c(Dt,` is called.
As `),qu=o(Dt,"A",{href:!0});var O7=l(qu);l6=c(O7,"datasets.Dataset.set_format()"),O7.forEach(s),i6=c(Dt,", this can be reset using "),Iu=o(Dt,"A",{href:!0});var z7=l(Iu);p6=c(z7,"datasets.Dataset.reset_format()"),z7.forEach(s),Dt.forEach(s),c6=h(Sr),b(bo.$$.fragment,Sr),Sr.forEach(s),d6=h(I),it=o(I,"DIV",{class:!0});var gs=l(it);b(Ac.$$.fragment,gs),m6=h(gs),Sc=o(gs,"P",{});var _u=l(Sc);h6=c(_u,"Reset "),S$=o(_u,"STRONG",{});var V7=l(S$);f6=c(V7,"getitem"),V7.forEach(s),u6=c(_u," return format to python objects and all columns."),_u.forEach(s),g6=h(gs),Tu=o(gs,"P",{});var L_=l(Tu);_6=c(L_,"Same as "),C$=o(L_,"CODE",{});var U7=l(C$);b6=c(U7,"self.set_format()"),U7.forEach(s),L_.forEach(s),$6=h(gs),b($o.$$.fragment,gs),gs.forEach(s),x6=h(I),ye=o(I,"DIV",{class:!0});var et=l(ye);b(Cc.$$.fragment,et),v6=h(et),zt=o(et,"P",{});var _s=l(zt);y6=c(_s,"Set "),O$=o(_s,"STRONG",{});var M7=l(O$);j6=c(M7,"getitem"),M7.forEach(s),w6=c(_s,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),z$=o(_s,"CODE",{});var R7=l(z$);D6=c(R7,"type"),R7.forEach(s),k6=c(_s," (for example \u201Cnumpy\u201D) is used to format batches when using "),V$=o(_s,"STRONG",{});var B7=l(V$);E6=c(B7,"getitem"),B7.forEach(s),q6=c(_s,"."),_s.forEach(s),I6=h(et),Oc=o(et,"P",{});var bu=l(Oc);T6=c(bu,"It\u2019s also possible to use custom transforms for formatting using "),Nu=o(bu,"A",{href:!0});var G7=l(Nu);N6=c(G7,"datasets.Dataset.with_transform()"),G7.forEach(s),P6=c(bu,"."),bu.forEach(s),F6=h(et),vn=o(et,"P",{});var Cr=l(vn);L6=c(Cr,"Contrary to "),Pu=o(Cr,"A",{href:!0});var H7=l(Pu);A6=c(H7,"datasets.Dataset.set_format()"),H7.forEach(s),S6=c(Cr,", "),U$=o(Cr,"CODE",{});var W7=l(U$);C6=c(W7,"with_format"),W7.forEach(s),O6=c(Cr," returns a new Dataset object."),Cr.forEach(s),z6=h(et),b(xo.$$.fragment,et),et.forEach(s),V6=h(I),je=o(I,"DIV",{class:!0});var tt=l(je);b(zc.$$.fragment,tt),U6=h(tt),yn=o(tt,"P",{});var Or=l(yn);M6=c(Or,"Set "),M$=o(Or,"STRONG",{});var Y7=l(M$);R6=c(Y7,"getitem"),Y7.forEach(s),B6=c(Or," return format using this transform. The transform is applied on-the-fly on batches when "),R$=o(Or,"STRONG",{});var LJ=l(R$);G6=c(LJ,"getitem"),LJ.forEach(s),H6=c(Or," is called."),Or.forEach(s),W6=h(tt),jn=o(tt,"P",{});var A_=l(jn);Y6=c(A_,"As "),Fu=o(A_,"A",{href:!0});var AJ=l(Fu);J6=c(AJ,"datasets.Dataset.set_format()"),AJ.forEach(s),K6=c(A_,", this can be reset using "),Lu=o(A_,"A",{href:!0});var SJ=l(Lu);Q6=c(SJ,"datasets.Dataset.reset_format()"),SJ.forEach(s),Z6=c(A_,"."),A_.forEach(s),X6=h(tt),wn=o(tt,"P",{});var S_=l(wn);e8=c(S_,"Contrary to "),Au=o(S_,"A",{href:!0});var CJ=l(Au);t8=c(CJ,"datasets.Dataset.set_transform()"),CJ.forEach(s),s8=c(S_,", "),B$=o(S_,"CODE",{});var OJ=l(B$);a8=c(OJ,"with_transform"),OJ.forEach(s),n8=c(S_," returns a new Dataset object."),S_.forEach(s),r8=h(tt),b(vo.$$.fragment,tt),tt.forEach(s),o8=h(I),yo=o(I,"DIV",{class:!0});var UD=l(yo);b(Vc.$$.fragment,UD),l8=h(UD),G$=o(UD,"P",{});var zJ=l(G$);i8=c(zJ,"Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),zJ.forEach(s),UD.forEach(s),p8=h(I),pt=o(I,"DIV",{class:!0});var bp=l(pt);b(Uc.$$.fragment,bp),c8=h(bp),H$=o(bp,"P",{});var VJ=l(H$);d8=c(VJ,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),VJ.forEach(s),m8=h(bp),W$=o(bp,"P",{});var UJ=l(W$);h8=c(UJ,"Be careful when running this command that no other process is currently using other cache files."),UJ.forEach(s),f8=h(bp),b(jo.$$.fragment,bp),bp.forEach(s),u8=h(I),we=o(I,"DIV",{class:!0});var Wa=l(we);b(Mc.$$.fragment,Wa),g8=h(Wa),Y$=o(Wa,"P",{});var MJ=l(Y$);_8=c(MJ,`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),MJ.forEach(s),b8=h(Wa),Rc=o(Wa,"P",{});var MD=l(Rc);$8=c(MD,"You can specify whether the function should be batched or not with the "),J$=o(MD,"CODE",{});var RJ=l(J$);x8=c(RJ,"batched"),RJ.forEach(s),v8=c(MD," parameter:"),MD.forEach(s),y8=h(Wa),Dn=o(Wa,"UL",{});var C_=l(Dn);K$=o(C_,"LI",{});var BJ=l(K$);j8=c(BJ,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),BJ.forEach(s),w8=h(C_),Q$=o(C_,"LI",{});var GJ=l(Q$);D8=c(GJ,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),GJ.forEach(s),k8=h(C_),de=o(C_,"LI",{});var kt=l(de);E8=c(kt,"If batched is True and batch_size is "),Z$=o(kt,"CODE",{});var HJ=l(Z$);q8=c(HJ,"n"),HJ.forEach(s),I8=c(kt," > 1, then the function takes a batch of "),X$=o(kt,"CODE",{});var WJ=l(X$);T8=c(WJ,"n"),WJ.forEach(s),N8=c(kt," examples as input and can return a batch with "),e1=o(kt,"CODE",{});var YJ=l(e1);P8=c(YJ,"n"),YJ.forEach(s),F8=c(kt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),t1=o(kt,"CODE",{});var JJ=l(t1);L8=c(JJ,"n"),JJ.forEach(s),A8=c(kt,` examples.
A batch is a dictionary, e.g. a batch of `),s1=o(kt,"CODE",{});var KJ=l(s1);S8=c(KJ,"n"),KJ.forEach(s),C8=c(kt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),kt.forEach(s),C_.forEach(s),O8=h(Wa),b(wo.$$.fragment,Wa),Wa.forEach(s),z8=h(I),Cs=o(I,"DIV",{class:!0});var O_=l(Cs);b(Bc.$$.fragment,O_),V8=h(O_),a1=o(O_,"P",{});var QJ=l(a1);U8=c(QJ,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),QJ.forEach(s),M8=h(O_),b(Do.$$.fragment,O_),O_.forEach(s),R8=h(I),Os=o(I,"DIV",{class:!0});var z_=l(Os);b(Gc.$$.fragment,z_),B8=h(z_),n1=o(z_,"P",{});var ZJ=l(n1);G8=c(ZJ,"Create a new dataset with rows selected following the list/array of indices."),ZJ.forEach(s),H8=h(z_),b(ko.$$.fragment,z_),z_.forEach(s),W8=h(I),ct=o(I,"DIV",{class:!0});var $p=l(ct);b(Hc.$$.fragment,$p),Y8=h($p),r1=o($p,"P",{});var XJ=l(r1);J8=c(XJ,"Create a new dataset sorted according to a column."),XJ.forEach(s),K8=h($p),o1=o($p,"P",{});var eK=l(o1);Q8=c(eK,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),eK.forEach(s),Z8=h($p),b(Eo.$$.fragment,$p),$p.forEach(s),X8=h(I),dt=o(I,"DIV",{class:!0});var xp=l(dt);b(Wc.$$.fragment,xp),eq=h(xp),l1=o(xp,"P",{});var tK=l(l1);tq=c(tK,"Create a new Dataset where the rows are shuffled."),tK.forEach(s),sq=h(xp),i1=o(xp,"P",{});var sK=l(i1);aq=c(sK,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),sK.forEach(s),nq=h(xp),b(qo.$$.fragment,xp),xp.forEach(s),rq=h(I),mt=o(I,"DIV",{class:!0});var vp=l(mt);b(Yc.$$.fragment,vp),oq=h(vp),Y=o(vp,"P",{});var pe=l(Y);lq=c(pe,"Return a dictionary ("),p1=o(pe,"CODE",{});var aK=l(p1);iq=c(aK,"datasets.DatasetDict"),aK.forEach(s),pq=c(pe,") with two random train and test subsets ("),c1=o(pe,"EM",{});var nK=l(c1);cq=c(nK,"train"),nK.forEach(s),dq=c(pe," and "),d1=o(pe,"EM",{});var rK=l(d1);mq=c(rK,"test"),rK.forEach(s),hq=h(pe),m1=o(pe,"CODE",{});var oK=l(m1);fq=c(oK,"Dataset"),oK.forEach(s),uq=c(pe,` splits).
Splits are created from the dataset according to `),h1=o(pe,"EM",{});var lK=l(h1);gq=c(lK,"test_size"),lK.forEach(s),_q=c(pe,", "),f1=o(pe,"EM",{});var iK=l(f1);bq=c(iK,"train_size"),iK.forEach(s),$q=c(pe," and "),u1=o(pe,"EM",{});var pK=l(u1);xq=c(pK,"shuffle"),pK.forEach(s),vq=c(pe,"."),pe.forEach(s),yq=h(vp),Jc=o(vp,"P",{});var RD=l(Jc);jq=c(RD,"This method is similar to scikit-learn "),g1=o(RD,"EM",{});var cK=l(g1);wq=c(cK,"train_test_split"),cK.forEach(s),Dq=c(RD,"."),RD.forEach(s),kq=h(vp),b(Io.$$.fragment,vp),vp.forEach(s),Eq=h(I),re=o(I,"DIV",{class:!0});var Et=l(re);b(Kc.$$.fragment,Et),qq=h(Et),kn=o(Et,"P",{});var V_=l(kn);Iq=c(V_,"Return the "),_1=o(V_,"EM",{});var dK=l(_1);Tq=c(dK,"index"),dK.forEach(s),Nq=c(V_,"-nth shard from dataset split into "),b1=o(V_,"EM",{});var mK=l(b1);Pq=c(mK,"num_shards"),mK.forEach(s),Fq=c(V_," pieces."),V_.forEach(s),Lq=h(Et),$1=o(Et,"P",{});var hK=l($1);Aq=c(hK,`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),hK.forEach(s),Sq=h(Et),Qc=o(Et,"P",{});var BD=l(Qc);Cq=c(BD,`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),x1=o(BD,"EM",{});var fK=l(x1);Oq=c(fK,"datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),fK.forEach(s),zq=c(BD,` will return
a dataset with the same order as the original.`),BD.forEach(s),Vq=h(Et),v1=o(Et,"P",{});var uK=l(v1);Uq=c(uK,`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),uK.forEach(s),Mq=h(Et),b(To.$$.fragment,Et),Et.forEach(s),Rq=h(I),zs=o(I,"DIV",{class:!0});var U_=l(zs);b(Zc.$$.fragment,U_),Bq=h(U_),y1=o(U_,"P",{});var gK=l(y1);Gq=c(gK,`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict(). The dataset will yield
dicts for both inputs and labels unless the dict would contain only a single key, in which case a raw
tf.Tensor is yielded instead.`),gK.forEach(s),Hq=h(U_),b(No.$$.fragment,U_),U_.forEach(s),Wq=h(I),ht=o(I,"DIV",{class:!0});var yp=l(ht);b(Xc.$$.fragment,yp),Yq=h(yp),j1=o(yp,"P",{});var _K=l(j1);Jq=c(_K,`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),_K.forEach(s),Kq=h(yp),Vt=o(yp,"P",{});var jp=l(Vt);Qq=c(jp,"The resulting Parquet files are self-contained by default: if your dataset contains "),Su=o(jp,"A",{href:!0});var bK=l(Su);Zq=c(bK,"Image"),bK.forEach(s),Xq=c(jp," or "),Cu=o(jp,"A",{href:!0});var $K=l(Cu);e9=c($K,"Audio"),$K.forEach(s),t9=c(jp,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),w1=o(jp,"EM",{});var xK=l(w1);s9=c(xK,"embed_external_files"),xK.forEach(s),a9=c(jp," to False."),jp.forEach(s),n9=h(yp),b(Po.$$.fragment,yp),yp.forEach(s),r9=h(I),Q=o(I,"DIV",{class:!0});var Ae=l(Q);b(ed.$$.fragment,Ae),o9=h(Ae),En=o(Ae,"P",{});var M_=l(En);l9=c(M_,"Saves a dataset to a dataset directory, or in a filesystem using either "),Ou=o(M_,"A",{href:!0});var vK=l(Ou);i9=c(vK,"S3FileSystem"),vK.forEach(s),p9=c(M_,` or
any implementation of `),D1=o(M_,"CODE",{});var yK=l(D1);c9=c(yK,"fsspec.spec.AbstractFileSystem"),yK.forEach(s),d9=c(M_,"."),M_.forEach(s),m9=h(Ae),qn=o(Ae,"P",{});var R_=l(qn);h9=c(R_,"For "),zu=o(R_,"A",{href:!0});var jK=l(zu);f9=c(jK,"Image"),jK.forEach(s),u9=c(R_," and "),Vu=o(R_,"A",{href:!0});var wK=l(Vu);g9=c(wK,"Audio"),wK.forEach(s),_9=c(R_," data:"),R_.forEach(s),b9=h(Ae),td=o(Ae,"P",{});var GD=l(td);$9=c(GD,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),k1=o(GD,"EM",{});var DK=l(k1);x9=c(DK,"read()"),DK.forEach(s),v9=c(GD," those files first."),GD.forEach(s),y9=h(Ae),b(Fo.$$.fragment,Ae),j9=h(Ae),b(Lo.$$.fragment,Ae),w9=h(Ae),b(Ao.$$.fragment,Ae),Ae.forEach(s),D9=h(I),Vs=o(I,"DIV",{class:!0});var B_=l(Vs);b(sd.$$.fragment,B_),k9=h(B_),Ut=o(B_,"P",{});var wp=l(Ut);E9=c(wp,"Loads a dataset that was previously saved using "),E1=o(wp,"CODE",{});var kK=l(E1);q9=c(kK,"save_to_disk"),kK.forEach(s),I9=c(wp,` from a dataset directory, or from a
filesystem using either `),Uu=o(wp,"A",{href:!0});var EK=l(Uu);T9=c(EK,"S3FileSystem"),EK.forEach(s),N9=c(wp,` or any implementation of
`),q1=o(wp,"CODE",{});var qK=l(q1);P9=c(qK,"fsspec.spec.AbstractFileSystem"),qK.forEach(s),F9=c(wp,"."),wp.forEach(s),L9=h(B_),b(So.$$.fragment,B_),B_.forEach(s),A9=h(I),Co=o(I,"DIV",{class:!0});var HD=l(Co);b(ad.$$.fragment,HD),S9=h(HD),I1=o(HD,"P",{});var IK=l(I1);C9=c(IK,"Create and cache a new Dataset by flattening the indices mapping."),IK.forEach(s),HD.forEach(s),O9=h(I),Us=o(I,"DIV",{class:!0});var G_=l(Us);b(nd.$$.fragment,G_),z9=h(G_),T1=o(G_,"P",{});var TK=l(T1);V9=c(TK,"Exports the dataset to csv"),TK.forEach(s),U9=h(G_),b(Oo.$$.fragment,G_),G_.forEach(s),M9=h(I),Ms=o(I,"DIV",{class:!0});var H_=l(Ms);b(rd.$$.fragment,H_),R9=h(H_),od=o(H_,"P",{});var WD=l(od);B9=c(WD,"Returns the dataset as a "),N1=o(WD,"CODE",{});var NK=l(N1);G9=c(NK,"pandas.DataFrame"),NK.forEach(s),H9=c(WD,". Can also return a generator for large datasets."),WD.forEach(s),W9=h(H_),b(zo.$$.fragment,H_),H_.forEach(s),Y9=h(I),Rs=o(I,"DIV",{class:!0});var W_=l(Rs);b(ld.$$.fragment,W_),J9=h(W_),P1=o(W_,"P",{});var PK=l(P1);K9=c(PK,"Returns the dataset as a Python dict. Can also return a generator for large datasets."),PK.forEach(s),Q9=h(W_),b(Vo.$$.fragment,W_),W_.forEach(s),Z9=h(I),Bs=o(I,"DIV",{class:!0});var Y_=l(Bs);b(id.$$.fragment,Y_),X9=h(Y_),F1=o(Y_,"P",{});var FK=l(F1);eI=c(FK,"Export the dataset to JSON Lines or JSON."),FK.forEach(s),tI=h(Y_),b(Uo.$$.fragment,Y_),Y_.forEach(s),sI=h(I),Gs=o(I,"DIV",{class:!0});var J_=l(Gs);b(pd.$$.fragment,J_),aI=h(J_),L1=o(J_,"P",{});var LK=l(L1);nI=c(LK,"Exports the dataset to parquet"),LK.forEach(s),rI=h(J_),b(Mo.$$.fragment,J_),J_.forEach(s),oI=h(I),Hs=o(I,"DIV",{class:!0});var K_=l(Hs);b(cd.$$.fragment,K_),lI=h(K_),A1=o(K_,"P",{});var AK=l(A1);iI=c(AK,"Exports the dataset to a SQL database."),AK.forEach(s),pI=h(K_),b(Ro.$$.fragment,K_),K_.forEach(s),cI=h(I),ft=o(I,"DIV",{class:!0});var Dp=l(ft);b(dd.$$.fragment,Dp),dI=h(Dp),In=o(Dp,"P",{});var Q_=l(In);mI=c(Q_,`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),S1=o(Q_,"CODE",{});var SK=l(S1);hI=c(SK,"device"),SK.forEach(s),fI=c(Q_," if you want to run it on GPU ("),C1=o(Q_,"CODE",{});var CK=l(C1);uI=c(CK,"device"),CK.forEach(s),gI=c(Q_,` must be the GPU index).
You can find more information about Faiss here:`),Q_.forEach(s),_I=h(Dp),O1=o(Dp,"UL",{});var OK=l(O1);Mu=o(OK,"LI",{});var xJ=l(Mu);bI=c(xJ,"For "),md=o(xJ,"A",{href:!0,rel:!0});var zK=l(md);$I=c(zK,"string factory"),zK.forEach(s),xJ.forEach(s),OK.forEach(s),xI=h(Dp),b(Bo.$$.fragment,Dp),Dp.forEach(s),vI=h(I),Ws=o(I,"DIV",{class:!0});var Z_=l(Ws);b(hd.$$.fragment,Z_),yI=h(Z_),Mt=o(Z_,"P",{});var kp=l(Mt);jI=c(kp,`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),z1=o(kp,"EM",{});var VK=l(z1);wI=c(VK,"external_arrays"),VK.forEach(s),DI=c(kp,`.
You can specify `),V1=o(kp,"EM",{});var UK=l(V1);kI=c(UK,"device"),UK.forEach(s),EI=c(kp," if you want to run it on GPU ("),U1=o(kp,"EM",{});var MK=l(U1);qI=c(MK,"device"),MK.forEach(s),II=c(kp,` must be the GPU index).
You can find more information about Faiss here:`),kp.forEach(s),TI=h(Z_),M1=o(Z_,"UL",{});var RK=l(M1);Ru=o(RK,"LI",{});var vJ=l(Ru);NI=c(vJ,"For "),fd=o(vJ,"A",{href:!0,rel:!0});var BK=l(fd);PI=c(BK,"string factory"),BK.forEach(s),vJ.forEach(s),RK.forEach(s),Z_.forEach(s),FI=h(I),Go=o(I,"DIV",{class:!0});var YD=l(Go);b(ud.$$.fragment,YD),LI=h(YD),R1=o(YD,"P",{});var GK=l(R1);AI=c(GK,"Save a FaissIndex on disk."),GK.forEach(s),YD.forEach(s),SI=h(I),Ys=o(I,"DIV",{class:!0});var X_=l(Ys);b(gd.$$.fragment,X_),CI=h(X_),B1=o(X_,"P",{});var HK=l(B1);OI=c(HK,"Load a FaissIndex from disk."),HK.forEach(s),zI=h(X_),_d=o(X_,"P",{});var JD=l(_d);VI=c(JD,`If you want to do additional configurations, you can have access to the faiss index object by doing
`),G1=o(JD,"EM",{});var WK=l(G1);UI=c(WK,".get_index(index_name).faiss_index"),WK.forEach(s),MI=c(JD," to make it fit your needs."),JD.forEach(s),X_.forEach(s),RI=h(I),Js=o(I,"DIV",{class:!0});var eb=l(Js);b(bd.$$.fragment,eb),BI=h(eb),H1=o(eb,"P",{});var YK=l(H1);GI=c(YK,"Add a text index using ElasticSearch for fast retrieval. This is done in-place."),YK.forEach(s),HI=h(eb),b(Ho.$$.fragment,eb),eb.forEach(s),WI=h(I),Ks=o(I,"DIV",{class:!0});var tb=l(Ks);b($d.$$.fragment,tb),YI=h(tb),W1=o(tb,"P",{});var JK=l(W1);JI=c(JK,"Load an existing text index using ElasticSearch for fast retrieval."),JK.forEach(s),KI=h(tb),b(Wo.$$.fragment,tb),tb.forEach(s),QI=h(I),Yo=o(I,"DIV",{class:!0});var KD=l(Yo);b(xd.$$.fragment,KD),ZI=h(KD),Y1=o(KD,"P",{});var KK=l(Y1);XI=c(KK,"List the colindex_nameumns/identifiers of all the attached indexes."),KK.forEach(s),KD.forEach(s),eT=h(I),Jo=o(I,"DIV",{class:!0});var QD=l(Jo);b(vd.$$.fragment,QD),tT=h(QD),J1=o(QD,"P",{});var QK=l(J1);sT=c(QK,"List the index_name/identifiers of all the attached indexes."),QK.forEach(s),QD.forEach(s),aT=h(I),Ko=o(I,"DIV",{class:!0});var ZD=l(Ko);b(yd.$$.fragment,ZD),nT=h(ZD),K1=o(ZD,"P",{});var ZK=l(K1);rT=c(ZK,"Drop the index with the specified column."),ZK.forEach(s),ZD.forEach(s),oT=h(I),Qo=o(I,"DIV",{class:!0});var XD=l(Qo);b(jd.$$.fragment,XD),lT=h(XD),Q1=o(XD,"P",{});var XK=l(Q1);iT=c(XK,"Find the nearest examples indices in the dataset to the query."),XK.forEach(s),XD.forEach(s),pT=h(I),Zo=o(I,"DIV",{class:!0});var ek=l(Zo);b(wd.$$.fragment,ek),cT=h(ek),Z1=o(ek,"P",{});var eQ=l(Z1);dT=c(eQ,"Find the nearest examples indices in the dataset to the query."),eQ.forEach(s),ek.forEach(s),mT=h(I),Xo=o(I,"DIV",{class:!0});var tk=l(Xo);b(Dd.$$.fragment,tk),hT=h(tk),X1=o(tk,"P",{});var tQ=l(X1);fT=c(tQ,"Find the nearest examples in the dataset to the query."),tQ.forEach(s),tk.forEach(s),uT=h(I),el=o(I,"DIV",{class:!0});var sk=l(el);b(kd.$$.fragment,sk),gT=h(sk),ex=o(sk,"P",{});var sQ=l(ex);_T=c(sQ,"Find the nearest examples in the dataset to the query."),sQ.forEach(s),sk.forEach(s),bT=h(I),tl=o(I,"DIV",{class:!0});var ak=l(tl);b(Ed.$$.fragment,ak),$T=h(ak),Bu=o(ak,"P",{});var yJ=l(Bu);Gu=o(yJ,"A",{href:!0});var aQ=l(Gu);xT=c(aQ,"datasets.DatasetInfo"),aQ.forEach(s),vT=c(yJ," object containing all the metadata in the dataset."),yJ.forEach(s),ak.forEach(s),yT=h(I),sl=o(I,"DIV",{class:!0});var nk=l(sl);b(qd.$$.fragment,nk),jT=h(nk),Hu=o(nk,"P",{});var jJ=l(Hu);Wu=o(jJ,"A",{href:!0});var nQ=l(Wu);wT=c(nQ,"datasets.NamedSplit"),nQ.forEach(s),DT=c(jJ," object corresponding to a named dataset split."),jJ.forEach(s),nk.forEach(s),kT=h(I),Yu=o(I,"DIV",{class:!0});var rQ=l(Yu);b(Id.$$.fragment,rQ),rQ.forEach(s),ET=h(I),Ju=o(I,"DIV",{class:!0});var oQ=l(Ju);b(Td.$$.fragment,oQ),oQ.forEach(s),qT=h(I),Ku=o(I,"DIV",{class:!0});var lQ=l(Ku);b(Nd.$$.fragment,lQ),lQ.forEach(s),IT=h(I),Qu=o(I,"DIV",{class:!0});var iQ=l(Qu);b(Pd.$$.fragment,iQ),iQ.forEach(s),TT=h(I),Zu=o(I,"DIV",{class:!0});var pQ=l(Zu);b(Fd.$$.fragment,pQ),pQ.forEach(s),NT=h(I),Xu=o(I,"DIV",{class:!0});var cQ=l(Xu);b(Ld.$$.fragment,cQ),cQ.forEach(s),PT=h(I),eg=o(I,"DIV",{class:!0});var dQ=l(eg);b(Ad.$$.fragment,dQ),dQ.forEach(s),FT=h(I),tg=o(I,"DIV",{class:!0});var mQ=l(tg);b(Sd.$$.fragment,mQ),mQ.forEach(s),LT=h(I),sg=o(I,"DIV",{class:!0});var hQ=l(sg);b(Cd.$$.fragment,hQ),hQ.forEach(s),AT=h(I),ag=o(I,"DIV",{class:!0});var fQ=l(ag);b(Od.$$.fragment,fQ),fQ.forEach(s),ST=h(I),ng=o(I,"DIV",{class:!0});var uQ=l(ng);b(zd.$$.fragment,uQ),uQ.forEach(s),CT=h(I),rg=o(I,"DIV",{class:!0});var gQ=l(rg);b(Vd.$$.fragment,gQ),gQ.forEach(s),OT=h(I),og=o(I,"DIV",{class:!0});var _Q=l(og);b(Ud.$$.fragment,_Q),_Q.forEach(s),zT=h(I),Qs=o(I,"DIV",{class:!0});var sb=l(Qs);b(Md.$$.fragment,sb),VT=h(sb),tx=o(sb,"P",{});var bQ=l(tx);UT=c(bQ,"Create Dataset from CSV file(s)."),bQ.forEach(s),MT=h(sb),b(al.$$.fragment,sb),sb.forEach(s),RT=h(I),Zs=o(I,"DIV",{class:!0});var ab=l(Zs);b(Rd.$$.fragment,ab),BT=h(ab),sx=o(ab,"P",{});var $Q=l(sx);GT=c($Q,"Create Dataset from JSON or JSON Lines file(s)."),$Q.forEach(s),HT=h(ab),b(nl.$$.fragment,ab),ab.forEach(s),WT=h(I),Xs=o(I,"DIV",{class:!0});var nb=l(Xs);b(Bd.$$.fragment,nb),YT=h(nb),ax=o(nb,"P",{});var xQ=l(ax);JT=c(xQ,"Create Dataset from Parquet file(s)."),xQ.forEach(s),KT=h(nb),b(rl.$$.fragment,nb),nb.forEach(s),QT=h(I),ea=o(I,"DIV",{class:!0});var rb=l(ea);b(Gd.$$.fragment,rb),ZT=h(rb),nx=o(rb,"P",{});var vQ=l(nx);XT=c(vQ,"Create Dataset from text file(s)."),vQ.forEach(s),eN=h(rb),b(ol.$$.fragment,rb),rb.forEach(s),tN=h(I),ut=o(I,"DIV",{class:!0});var Ep=l(ut);b(Hd.$$.fragment,Ep),sN=h(Ep),rx=o(Ep,"P",{});var yQ=l(rx);aN=c(yQ,"Create Dataset from SQL query or database table."),yQ.forEach(s),nN=h(Ep),b(ll.$$.fragment,Ep),rN=h(Ep),b(il.$$.fragment,Ep),Ep.forEach(s),oN=h(I),ta=o(I,"DIV",{class:!0});var ob=l(ta);b(Wd.$$.fragment,ob),lN=h(ob),Tn=o(ob,"P",{});var lb=l(Tn);iN=c(lb,"Prepare a dataset for the given task by casting the dataset\u2019s "),lg=o(lb,"A",{href:!0});var jQ=l(lg);pN=c(jQ,"Features"),jQ.forEach(s),cN=c(lb," to standardized column names and types as detailed in "),ig=o(lb,"A",{href:!0});var wQ=l(ig);ox=o(wQ,"CODE",{});var DQ=l(ox);dN=c(DQ,"datasets.tasks"),DQ.forEach(s),wQ.forEach(s),mN=c(lb,"."),lb.forEach(s),hN=h(ob),Nn=o(ob,"P",{});var ib=l(Nn);fN=c(ib,"Casts "),lx=o(ib,"CODE",{});var kQ=l(lx);uN=c(kQ,"datasets.DatasetInfo.features"),kQ.forEach(s),gN=c(ib," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),ix=o(ib,"CODE",{});var EQ=l(ix);_N=c(EQ,"datasets.DatasetInfo.task_templates"),EQ.forEach(s),bN=c(ib," after casting."),ib.forEach(s),ob.forEach(s),$N=h(I),sa=o(I,"DIV",{class:!0});var pb=l(sa);b(Yd.$$.fragment,pb),xN=h(pb),Jd=o(pb,"P",{});var rk=l(Jd);vN=c(rk,"Align the dataset\u2019s label ID and label name mapping to match an input "),px=o(rk,"CODE",{});var qQ=l(px);yN=c(qQ,"label2id"),qQ.forEach(s),jN=c(rk,` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),rk.forEach(s),wN=h(pb),b(pl.$$.fragment,pb),pb.forEach(s),I.forEach(s),tD=h(a),Rt=o(a,"DIV",{class:!0});var cb=l(Rt);b(Kd.$$.fragment,cb),DN=h(cb),Pn=o(cb,"P",{});var db=l(Pn);kN=c(db,"Converts a list of "),pg=o(db,"A",{href:!0});var IQ=l(pg);EN=c(IQ,"Dataset"),IQ.forEach(s),qN=c(db," with the same schema into a single "),cg=o(db,"A",{href:!0});var TQ=l(cg);IN=c(TQ,"Dataset"),TQ.forEach(s),TN=c(db,"."),db.forEach(s),NN=h(cb),b(cl.$$.fragment,cb),cb.forEach(s),sD=h(a),ee=o(a,"DIV",{class:!0});var qt=l(ee);b(Qd.$$.fragment,qt),PN=h(qt),cx=o(qt,"P",{});var NQ=l(cx);FN=c(NQ,`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),NQ.forEach(s),LN=h(qt),Fn=o(qt,"P",{});var mb=l(Fn);AN=c(mb,"You can use this function on a list of "),dg=o(mb,"A",{href:!0});var PQ=l(dg);SN=c(PQ,"Dataset"),PQ.forEach(s),CN=c(mb," objects, or on a list of "),mg=o(mb,"A",{href:!0});var FQ=l(mg);ON=c(FQ,"IterableDataset"),FQ.forEach(s),zN=c(mb," objects."),mb.forEach(s),VN=h(qt),Ve=o(qt,"P",{});var Ya=l(Ve);UN=c(Ya,"If "),dx=o(Ya,"CODE",{});var LQ=l(dx);MN=c(LQ,"probabilities"),LQ.forEach(s),RN=c(Ya," is "),mx=o(Ya,"CODE",{});var AQ=l(mx);BN=c(AQ,"None"),AQ.forEach(s),GN=c(Ya,` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),hx=o(Ya,"CODE",{});var SQ=l(hx);HN=c(SQ,"probabilities"),SQ.forEach(s),WN=c(Ya," is not "),fx=o(Ya,"CODE",{});var CQ=l(fx);YN=c(CQ,"None"),CQ.forEach(s),JN=c(Ya,", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),Ya.forEach(s),KN=h(qt),Ln=o(qt,"P",{});var hb=l(Ln);QN=c(hb,"The resulting dataset ends when one of the source datasets runs out of examples except when "),ux=o(hb,"CODE",{});var OQ=l(ux);ZN=c(OQ,"oversampling"),OQ.forEach(s),XN=c(hb," is "),gx=o(hb,"CODE",{});var zQ=l(gx);eP=c(zQ,"True"),zQ.forEach(s),tP=c(hb,`,
in which case, the resulting dataset ends when all datasets have ran out of examples at least one time.`),hb.forEach(s),sP=h(qt),b(dl.$$.fragment,qt),qt.forEach(s),aD=h(a),me=o(a,"DIV",{class:!0});var Ja=l(me);b(Zd.$$.fragment,Ja),aP=h(Ja),_x=o(Ja,"P",{});var VQ=l(_x);nP=c(VQ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),VQ.forEach(s),rP=h(Ja),bx=o(Ja,"P",{});var UQ=l(bx);oP=c(UQ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),UQ.forEach(s),lP=h(Ja),$x=o(Ja,"P",{});var MQ=l($x);iP=c(MQ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),MQ.forEach(s),pP=h(Ja),Ue=o(Ja,"UL",{});var Ka=l(Ue);xx=o(Ka,"LI",{});var RQ=l(xx);cP=c(RQ,"cache files are always recreated"),RQ.forEach(s),dP=h(Ka),vx=o(Ka,"LI",{});var BQ=l(vx);mP=c(BQ,"cache files are written to a temporary directory that is deleted when session closes"),BQ.forEach(s),hP=h(Ka),yx=o(Ka,"LI",{});var GQ=l(yx);fP=c(GQ,"cache files are named using a random hash instead of the dataset fingerprint"),GQ.forEach(s),uP=h(Ka),Xd=o(Ka,"LI",{});var ok=l(Xd);gP=c(ok,"use "),hg=o(ok,"A",{href:!0});var HQ=l(hg);_P=c(HQ,"datasets.Dataset.save_to_disk()"),HQ.forEach(s),bP=c(ok," to save a transformed dataset or it will be deleted when session closes"),ok.forEach(s),$P=h(Ka),Bt=o(Ka,"LI",{});var qp=l(Bt);xP=c(qp,"caching doesn\u2019t affect "),fg=o(qp,"A",{href:!0});var WQ=l(fg);vP=c(WQ,"datasets.load_dataset()"),WQ.forEach(s),yP=c(qp,`. If you want to regenerate a dataset from scratch you should use
the `),jx=o(qp,"CODE",{});var YQ=l(jx);jP=c(YQ,"download_mode"),YQ.forEach(s),wP=c(qp," parameter in "),ug=o(qp,"A",{href:!0});var JQ=l(ug);DP=c(JQ,"datasets.load_dataset()"),JQ.forEach(s),kP=c(qp,"."),qp.forEach(s),Ka.forEach(s),Ja.forEach(s),nD=h(a),he=o(a,"DIV",{class:!0});var Qa=l(he);b(em.$$.fragment,Qa),EP=h(Qa),wx=o(Qa,"P",{});var KQ=l(wx);qP=c(KQ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),KQ.forEach(s),IP=h(Qa),Dx=o(Qa,"P",{});var QQ=l(Dx);TP=c(QQ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),QQ.forEach(s),NP=h(Qa),kx=o(Qa,"P",{});var ZQ=l(kx);PP=c(ZQ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),ZQ.forEach(s),FP=h(Qa),Me=o(Qa,"UL",{});var Za=l(Me);Ex=o(Za,"LI",{});var XQ=l(Ex);LP=c(XQ,"cache files are always recreated"),XQ.forEach(s),AP=h(Za),qx=o(Za,"LI",{});var eZ=l(qx);SP=c(eZ,"cache files are written to a temporary directory that is deleted when session closes"),eZ.forEach(s),CP=h(Za),Ix=o(Za,"LI",{});var tZ=l(Ix);OP=c(tZ,"cache files are named using a random hash instead of the dataset fingerprint"),tZ.forEach(s),zP=h(Za),tm=o(Za,"LI",{});var lk=l(tm);VP=c(lk,"use "),gg=o(lk,"A",{href:!0});var sZ=l(gg);UP=c(sZ,"datasets.Dataset.save_to_disk()"),sZ.forEach(s),MP=c(lk," to save a transformed dataset or it will be deleted when session closes"),lk.forEach(s),RP=h(Za),Gt=o(Za,"LI",{});var Ip=l(Gt);BP=c(Ip,"caching doesn\u2019t affect "),_g=o(Ip,"A",{href:!0});var aZ=l(_g);GP=c(aZ,"datasets.load_dataset()"),aZ.forEach(s),HP=c(Ip,`. If you want to regenerate a dataset from scratch you should use
the `),Tx=o(Ip,"CODE",{});var nZ=l(Tx);WP=c(nZ,"download_mode"),nZ.forEach(s),YP=c(Ip," parameter in "),bg=o(Ip,"A",{href:!0});var rZ=l(bg);JP=c(rZ,"datasets.load_dataset()"),rZ.forEach(s),KP=c(Ip,"."),Ip.forEach(s),Za.forEach(s),Qa.forEach(s),rD=h(a),fe=o(a,"DIV",{class:!0});var Xa=l(fe);b(sm.$$.fragment,Xa),QP=h(Xa),Nx=o(Xa,"P",{});var oZ=l(Nx);ZP=c(oZ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),oZ.forEach(s),XP=h(Xa),Px=o(Xa,"P",{});var lZ=l(Px);eF=c(lZ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),lZ.forEach(s),tF=h(Xa),Fx=o(Xa,"P",{});var iZ=l(Fx);sF=c(iZ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),iZ.forEach(s),aF=h(Xa),Re=o(Xa,"UL",{});var en=l(Re);Lx=o(en,"LI",{});var pZ=l(Lx);nF=c(pZ,"cache files are always recreated"),pZ.forEach(s),rF=h(en),Ax=o(en,"LI",{});var cZ=l(Ax);oF=c(cZ,"cache files are written to a temporary directory that is deleted when session closes"),cZ.forEach(s),lF=h(en),Sx=o(en,"LI",{});var dZ=l(Sx);iF=c(dZ,"cache files are named using a random hash instead of the dataset fingerprint"),dZ.forEach(s),pF=h(en),am=o(en,"LI",{});var ik=l(am);cF=c(ik,"use "),$g=o(ik,"A",{href:!0});var mZ=l($g);dF=c(mZ,"datasets.Dataset.save_to_disk()"),mZ.forEach(s),mF=c(ik," to save a transformed dataset or it will be deleted when session closes"),ik.forEach(s),hF=h(en),Ht=o(en,"LI",{});var Tp=l(Ht);fF=c(Tp,"caching doesn\u2019t affect "),xg=o(Tp,"A",{href:!0});var hZ=l(xg);uF=c(hZ,"datasets.load_dataset()"),hZ.forEach(s),gF=c(Tp,`. If you want to regenerate a dataset from scratch you should use
the `),Cx=o(Tp,"CODE",{});var fZ=l(Cx);_F=c(fZ,"download_mode"),fZ.forEach(s),bF=c(Tp," parameter in "),vg=o(Tp,"A",{href:!0});var uZ=l(vg);$F=c(uZ,"datasets.load_dataset()"),uZ.forEach(s),xF=c(Tp,"."),Tp.forEach(s),en.forEach(s),Xa.forEach(s),oD=h(a),An=o(a,"H2",{class:!0});var pk=l(An);ml=o(pk,"A",{id:!0,class:!0,href:!0});var gZ=l(ml);Ox=o(gZ,"SPAN",{});var _Z=l(Ox);b(nm.$$.fragment,_Z),_Z.forEach(s),gZ.forEach(s),vF=h(pk),zx=o(pk,"SPAN",{});var bZ=l(zx);yF=c(bZ,"DatasetDict"),bZ.forEach(s),pk.forEach(s),lD=h(a),hl=o(a,"P",{});var ck=l(hl);jF=c(ck,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Vx=o(ck,"CODE",{});var $Z=l(Vx);wF=c($Z,"Dataset"),$Z.forEach(s),DF=c(ck,` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),ck.forEach(s),iD=h(a),F=o(a,"DIV",{class:!0});var L=l(F);b(rm.$$.fragment,L),kF=h(L),Ux=o(L,"P",{});var xZ=l(Ux);EF=c(xZ,"A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),xZ.forEach(s),qF=h(L),aa=o(L,"DIV",{class:!0});var fb=l(aa);b(om.$$.fragment,fb),IF=h(fb),Mx=o(fb,"P",{});var vZ=l(Mx);TF=c(vZ,"The Apache Arrow tables backing each split."),vZ.forEach(s),NF=h(fb),b(fl.$$.fragment,fb),fb.forEach(s),PF=h(L),na=o(L,"DIV",{class:!0});var ub=l(na);b(lm.$$.fragment,ub),FF=h(ub),Rx=o(ub,"P",{});var yZ=l(Rx);LF=c(yZ,"The cache files containing the Apache Arrow table backing each split."),yZ.forEach(s),AF=h(ub),b(ul.$$.fragment,ub),ub.forEach(s),SF=h(L),ra=o(L,"DIV",{class:!0});var gb=l(ra);b(im.$$.fragment,gb),CF=h(gb),Bx=o(gb,"P",{});var jZ=l(Bx);OF=c(jZ,"Number of columns in each split of the dataset."),jZ.forEach(s),zF=h(gb),b(gl.$$.fragment,gb),gb.forEach(s),VF=h(L),oa=o(L,"DIV",{class:!0});var _b=l(oa);b(pm.$$.fragment,_b),UF=h(_b),cm=o(_b,"P",{});var dk=l(cm);MF=c(dk,"Number of rows in each split of the dataset (same as "),_l=o(dk,"A",{href:!0});var mk=l(_l);RF=c(mk,"datasets.Dataset."),Gx=o(mk,"STRONG",{});var wZ=l(Gx);BF=c(wZ,"len"),wZ.forEach(s),GF=c(mk,"()"),mk.forEach(s),HF=c(dk,")."),dk.forEach(s),WF=h(_b),b(bl.$$.fragment,_b),_b.forEach(s),YF=h(L),la=o(L,"DIV",{class:!0});var bb=l(la);b(dm.$$.fragment,bb),JF=h(bb),Hx=o(bb,"P",{});var DZ=l(Hx);KF=c(DZ,"Names of the columns in each split of the dataset."),DZ.forEach(s),QF=h(bb),b($l.$$.fragment,bb),bb.forEach(s),ZF=h(L),ia=o(L,"DIV",{class:!0});var $b=l(ia);b(mm.$$.fragment,$b),XF=h($b),Wx=o($b,"P",{});var kZ=l(Wx);eL=c(kZ,"Shape of each split of the dataset (number of columns, number of rows)."),kZ.forEach(s),tL=h($b),b(xl.$$.fragment,$b),$b.forEach(s),sL=h(L),gt=o(L,"DIV",{class:!0});var Np=l(gt);b(hm.$$.fragment,Np),aL=h(Np),Yx=o(Np,"P",{});var EZ=l(Yx);nL=c(EZ,"Return a list of the unique elements in a column for each split."),EZ.forEach(s),rL=h(Np),Jx=o(Np,"P",{});var qZ=l(Jx);oL=c(qZ,"This is implemented in the low-level backend and as such, very fast."),qZ.forEach(s),lL=h(Np),b(vl.$$.fragment,Np),Np.forEach(s),iL=h(L),pa=o(L,"DIV",{class:!0});var xb=l(pa);b(fm.$$.fragment,xb),pL=h(xb),Kx=o(xb,"P",{});var IZ=l(Kx);cL=c(IZ,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),IZ.forEach(s),dL=h(xb),b(yl.$$.fragment,xb),xb.forEach(s),mL=h(L),ca=o(L,"DIV",{class:!0});var vb=l(ca);b(um.$$.fragment,vb),hL=h(vb),Qx=o(vb,"P",{});var TZ=l(Qx);fL=c(TZ,`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),TZ.forEach(s),uL=h(vb),b(jl.$$.fragment,vb),vb.forEach(s),gL=h(L),da=o(L,"DIV",{class:!0});var yb=l(da);b(gm.$$.fragment,yb),_L=h(yb),Zx=o(yb,"P",{});var NZ=l(Zx);bL=c(NZ,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),NZ.forEach(s),$L=h(yb),b(wl.$$.fragment,yb),yb.forEach(s),xL=h(L),_t=o(L,"DIV",{class:!0});var Pp=l(_t);b(_m.$$.fragment,Pp),vL=h(Pp),Xx=o(Pp,"P",{});var PZ=l(Xx);yL=c(PZ,`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),PZ.forEach(s),jL=h(Pp),ev=o(Pp,"P",{});var FZ=l(ev);wL=c(FZ,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),FZ.forEach(s),DL=h(Pp),b(Dl.$$.fragment,Pp),Pp.forEach(s),kL=h(L),De=o(L,"DIV",{class:!0});var tn=l(De);b(bm.$$.fragment,tn),EL=h(tn),tv=o(tn,"P",{});var LZ=l(tv);qL=c(LZ,"Create a new Dataset where the rows are shuffled."),LZ.forEach(s),IL=h(tn),sv=o(tn,"P",{});var AZ=l(sv);TL=c(AZ,"The transformation is applied to all the datasets of the dataset dictionary."),AZ.forEach(s),NL=h(tn),av=o(tn,"P",{});var SZ=l(av);PL=c(SZ,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),SZ.forEach(s),FL=h(tn),b(kl.$$.fragment,tn),tn.forEach(s),LL=h(L),ke=o(L,"DIV",{class:!0});var sn=l(ke);b($m.$$.fragment,sn),AL=h(sn),xm=o(sn,"P",{});var hk=l(xm);SL=c(hk,"Set "),nv=o(hk,"CODE",{});var CZ=l(nv);CL=c(CZ,"__getitem__"),CZ.forEach(s),OL=c(hk,` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),hk.forEach(s),zL=h(sn),Be=o(sn,"P",{});var an=l(Be);VL=c(an,"It is possible to call "),rv=o(an,"CODE",{});var OZ=l(rv);UL=c(OZ,"map"),OZ.forEach(s),ML=c(an," after calling "),ov=o(an,"CODE",{});var zZ=l(ov);RL=c(zZ,"set_format"),zZ.forEach(s),BL=c(an,". Since "),lv=o(an,"CODE",{});var VZ=l(lv);GL=c(VZ,"map"),VZ.forEach(s),HL=c(an,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),iv=o(an,"CODE",{});var UZ=l(iv);WL=c(UZ,"map"),UZ.forEach(s),YL=c(an," on a dataset to add a new column, then this column will be formatted:"),an.forEach(s),JL=h(sn),pv=o(sn,"P",{});var MZ=l(pv);KL=c(MZ,"new formatted columns = (all columns - previously unformatted columns)"),MZ.forEach(s),QL=h(sn),b(El.$$.fragment,sn),sn.forEach(s),ZL=h(L),bt=o(L,"DIV",{class:!0});var Fp=l(bt);b(vm.$$.fragment,Fp),XL=h(Fp),ym=o(Fp,"P",{});var fk=l(ym);eA=c(fk,"Reset "),cv=o(fk,"CODE",{});var RZ=l(cv);tA=c(RZ,"__getitem__"),RZ.forEach(s),sA=c(fk,` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),fk.forEach(s),aA=h(Fp),yg=o(Fp,"P",{});var wJ=l(yg);nA=c(wJ,"Same as "),dv=o(wJ,"CODE",{});var BZ=l(dv);rA=c(BZ,"self.set_format()"),BZ.forEach(s),wJ.forEach(s),oA=h(Fp),b(ql.$$.fragment,Fp),Fp.forEach(s),lA=h(L),Il=o(L,"DIV",{class:!0});var uk=l(Il);b(jm.$$.fragment,uk),iA=h(uk),Sn=o(uk,"P",{});var jb=l(Sn);pA=c(jb,"To be used in a "),mv=o(jb,"EM",{});var GZ=l(mv);cA=c(GZ,"with"),GZ.forEach(s),dA=c(jb," statement. Set "),hv=o(jb,"CODE",{});var HZ=l(hv);mA=c(HZ,"__getitem__"),HZ.forEach(s),hA=c(jb,` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),jb.forEach(s),uk.forEach(s),fA=h(L),Ee=o(L,"DIV",{class:!0});var nn=l(Ee);b(wm.$$.fragment,nn),uA=h(nn),Wt=o(nn,"P",{});var Lp=l(Wt);gA=c(Lp,"Set "),fv=o(Lp,"CODE",{});var WZ=l(fv);_A=c(WZ,"__getitem__"),WZ.forEach(s),bA=c(Lp,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),uv=o(Lp,"CODE",{});var YZ=l(uv);$A=c(YZ,"type"),YZ.forEach(s),xA=c(Lp," (for example \u201Cnumpy\u201D) is used to format batches when using "),gv=o(Lp,"CODE",{});var JZ=l(gv);vA=c(JZ,"__getitem__"),JZ.forEach(s),yA=c(Lp,`.
The format is set for every dataset in the dataset dictionary`),Lp.forEach(s),jA=h(nn),Dm=o(nn,"P",{});var gk=l(Dm);wA=c(gk,"It\u2019s also possible to use custom transforms for formatting using "),jg=o(gk,"A",{href:!0});var KZ=l(jg);DA=c(KZ,"datasets.Dataset.with_transform()"),KZ.forEach(s),kA=c(gk,"."),gk.forEach(s),EA=h(nn),Cn=o(nn,"P",{});var wb=l(Cn);qA=c(wb,"Contrary to "),wg=o(wb,"A",{href:!0});var QZ=l(wg);IA=c(QZ,"datasets.DatasetDict.set_format()"),QZ.forEach(s),TA=c(wb,", "),_v=o(wb,"CODE",{});var ZZ=l(_v);NA=c(ZZ,"with_format"),ZZ.forEach(s),PA=c(wb," returns a new DatasetDict object with new Dataset objects."),wb.forEach(s),FA=h(nn),b(Tl.$$.fragment,nn),nn.forEach(s),LA=h(L),qe=o(L,"DIV",{class:!0});var rn=l(qe);b(km.$$.fragment,rn),AA=h(rn),On=o(rn,"P",{});var Db=l(On);SA=c(Db,"Set "),bv=o(Db,"CODE",{});var XZ=l(bv);CA=c(XZ,"__getitem__"),XZ.forEach(s),OA=c(Db," return format using this transform. The transform is applied on-the-fly on batches when "),$v=o(Db,"CODE",{});var eX=l($v);zA=c(eX,"__getitem__"),eX.forEach(s),VA=c(Db,` is called.
The transform is set for every dataset in the dataset dictionary`),Db.forEach(s),UA=h(rn),zn=o(rn,"P",{});var kb=l(zn);MA=c(kb,"As "),Dg=o(kb,"A",{href:!0});var tX=l(Dg);RA=c(tX,"datasets.Dataset.set_format()"),tX.forEach(s),BA=c(kb,", this can be reset using "),kg=o(kb,"A",{href:!0});var sX=l(kg);GA=c(sX,"datasets.Dataset.reset_format()"),sX.forEach(s),HA=c(kb,"."),kb.forEach(s),WA=h(rn),Vn=o(rn,"P",{});var Eb=l(Vn);YA=c(Eb,"Contrary to "),xv=o(Eb,"CODE",{});var aX=l(xv);JA=c(aX,"datasets.DatasetDict.set_transform()"),aX.forEach(s),KA=c(Eb,", "),vv=o(Eb,"CODE",{});var nX=l(vv);QA=c(nX,"with_transform"),nX.forEach(s),ZA=c(Eb," returns a new DatasetDict object with new Dataset objects."),Eb.forEach(s),XA=h(rn),b(Nl.$$.fragment,rn),rn.forEach(s),eS=h(L),ma=o(L,"DIV",{class:!0});var qb=l(ma);b(Em.$$.fragment,qb),tS=h(qb),yv=o(qb,"P",{});var rX=l(yv);sS=c(rX,`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),rX.forEach(s),aS=h(qb),b(Pl.$$.fragment,qb),qb.forEach(s),nS=h(L),$t=o(L,"DIV",{class:!0});var Ap=l($t);b(qm.$$.fragment,Ap),rS=h(Ap),jv=o(Ap,"P",{});var oX=l(jv);oS=c(oX,`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),oX.forEach(s),lS=h(Ap),Yt=o(Ap,"P",{});var Sp=l(Yt);iS=c(Sp,"You can also remove a column using "),Eg=o(Sp,"A",{href:!0});var lX=l(Eg);pS=c(lX,"Dataset.map()"),lX.forEach(s),cS=c(Sp," with "),wv=o(Sp,"EM",{});var iX=l(wv);dS=c(iX,"feature"),iX.forEach(s),mS=c(Sp," but "),Dv=o(Sp,"CODE",{});var pX=l(Dv);hS=c(pX,"cast_"),pX.forEach(s),fS=c(Sp,`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),Sp.forEach(s),uS=h(Ap),b(Fl.$$.fragment,Ap),Ap.forEach(s),gS=h(L),ha=o(L,"DIV",{class:!0});var Ib=l(ha);b(Im.$$.fragment,Ib),_S=h(Ib),kv=o(Ib,"P",{});var cX=l(kv);bS=c(cX,"Cast column to feature for decoding."),cX.forEach(s),$S=h(Ib),b(Ll.$$.fragment,Ib),Ib.forEach(s),xS=h(L),Ie=o(L,"DIV",{class:!0});var on=l(Ie);b(Tm.$$.fragment,on),vS=h(on),Ev=o(on,"P",{});var dX=l(Ev);yS=c(dX,`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),dX.forEach(s),jS=h(on),qv=o(on,"P",{});var mX=l(qv);wS=c(mX,"The transformation is applied to all the splits of the dataset dictionary."),mX.forEach(s),DS=h(on),Un=o(on,"P",{});var Tb=l(Un);kS=c(Tb,"You can also remove a column using "),qg=o(Tb,"A",{href:!0});var hX=l(qg);ES=c(hX,"Dataset.map()"),hX.forEach(s),qS=c(Tb," with "),Iv=o(Tb,"EM",{});var fX=l(Iv);IS=c(fX,"remove_columns"),fX.forEach(s),TS=c(Tb,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),Tb.forEach(s),NS=h(on),b(Al.$$.fragment,on),on.forEach(s),PS=h(L),Te=o(L,"DIV",{class:!0});var ln=l(Te);b(Nm.$$.fragment,ln),FS=h(ln),Tv=o(ln,"P",{});var uX=l(Tv);LS=c(uX,`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),uX.forEach(s),AS=h(ln),Mn=o(ln,"P",{});var Nb=l(Mn);SS=c(Nb,"You can also rename a column using "),Ig=o(Nb,"A",{href:!0});var gX=l(Ig);CS=c(gX,"Dataset.map()"),gX.forEach(s),OS=c(Nb," with "),Nv=o(Nb,"EM",{});var _X=l(Nv);zS=c(_X,"remove_columns"),_X.forEach(s),VS=c(Nb," but the present method:"),Nb.forEach(s),US=h(ln),Pm=o(ln,"UL",{});var _k=l(Pm);Pv=o(_k,"LI",{});var bX=l(Pv);MS=c(bX,"takes care of moving the original features under the new column name."),bX.forEach(s),RS=h(_k),Fv=o(_k,"LI",{});var $X=l(Fv);BS=c($X,"doesn\u2019t copy the data to a new dataset and is thus much faster."),$X.forEach(s),_k.forEach(s),GS=h(ln),b(Sl.$$.fragment,ln),ln.forEach(s),HS=h(L),fa=o(L,"DIV",{class:!0});var Pb=l(fa);b(Fm.$$.fragment,Pb),WS=h(Pb),Lv=o(Pb,"P",{});var xX=l(Lv);YS=c(xX,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),xX.forEach(s),JS=h(Pb),b(Cl.$$.fragment,Pb),Pb.forEach(s),KS=h(L),ua=o(L,"DIV",{class:!0});var Fb=l(ua);b(Lm.$$.fragment,Fb),QS=h(Fb),Am=o(Fb,"P",{});var bk=l(Am);ZS=c(bk,"Casts the given column as :obj:"),Av=o(bk,"CODE",{});var vX=l(Av);XS=c(vX,"datasets.features.ClassLabel"),vX.forEach(s),eC=c(bk," and updates the tables."),bk.forEach(s),tC=h(Fb),b(Ol.$$.fragment,Fb),Fb.forEach(s),sC=h(L),Ne=o(L,"DIV",{class:!0});var pn=l(Ne);b(Sm.$$.fragment,pn),aC=h(pn),Rn=o(pn,"P",{});var Lb=l(Rn);nC=c(Lb,"Pushes the "),Sv=o(Lb,"CODE",{});var yX=l(Sv);rC=c(yX,"DatasetDict"),yX.forEach(s),oC=c(Lb,` to the hub as a Parquet dataset.
The `),Cv=o(Lb,"CODE",{});var jX=l(Cv);lC=c(jX,"DatasetDict"),jX.forEach(s),iC=c(Lb," is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),Lb.forEach(s),pC=h(pn),Ov=o(pn,"P",{});var wX=l(Ov);cC=c(wX,"Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),wX.forEach(s),dC=h(pn),Jt=o(pn,"P",{});var Cp=l(Jt);mC=c(Cp,"The resulting Parquet files are self-contained by default: if your dataset contains "),Tg=o(Cp,"A",{href:!0});var DX=l(Tg);hC=c(DX,"Image"),DX.forEach(s),fC=c(Cp," or "),Ng=o(Cp,"A",{href:!0});var kX=l(Ng);uC=c(kX,"Audio"),kX.forEach(s),gC=c(Cp,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),zv=o(Cp,"EM",{});var EX=l(zv);_C=c(EX,"embed_external_files"),EX.forEach(s),bC=c(Cp," to False."),Cp.forEach(s),$C=h(pn),b(zl.$$.fragment,pn),pn.forEach(s),xC=h(L),oe=o(L,"DIV",{class:!0});var It=l(oe);b(Cm.$$.fragment,It),vC=h(It),Bn=o(It,"P",{});var Ab=l(Bn);yC=c(Ab,"Saves a dataset dict to a filesystem using either "),Pg=o(Ab,"A",{href:!0});var qX=l(Pg);jC=c(qX,"S3FileSystem"),qX.forEach(s),wC=c(Ab,` or
`),Vv=o(Ab,"CODE",{});var IX=l(Vv);DC=c(IX,"fsspec.spec.AbstractFileSystem"),IX.forEach(s),kC=c(Ab,"."),Ab.forEach(s),EC=h(It),Gn=o(It,"P",{});var Sb=l(Gn);qC=c(Sb,"For "),Fg=o(Sb,"A",{href:!0});var TX=l(Fg);IC=c(TX,"Image"),TX.forEach(s),TC=c(Sb," and "),Lg=o(Sb,"A",{href:!0});var NX=l(Lg);NC=c(NX,"Audio"),NX.forEach(s),PC=c(Sb," data:"),Sb.forEach(s),FC=h(It),Om=o(It,"P",{});var $k=l(Om);LC=c($k,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),Uv=o($k,"EM",{});var PX=l(Uv);AC=c(PX,"read()"),PX.forEach(s),SC=c($k," those files first."),$k.forEach(s),CC=h(It),b(Vl.$$.fragment,It),OC=h(It),b(Ul.$$.fragment,It),It.forEach(s),zC=h(L),ga=o(L,"DIV",{class:!0});var Cb=l(ga);b(zm.$$.fragment,Cb),VC=h(Cb),Kt=o(Cb,"P",{});var Op=l(Kt);UC=c(Op,"Load a dataset that was previously saved using "),Mv=o(Op,"CODE",{});var FX=l(Mv);MC=c(FX,"save_to_disk"),FX.forEach(s),RC=c(Op,` from a filesystem using either
`),Ag=o(Op,"A",{href:!0});var LX=l(Ag);BC=c(LX,"S3FileSystem"),LX.forEach(s),GC=c(Op," or "),Rv=o(Op,"CODE",{});var AX=l(Rv);HC=c(AX,"fsspec.spec.AbstractFileSystem"),AX.forEach(s),WC=c(Op,"."),Op.forEach(s),YC=h(Cb),b(Ml.$$.fragment,Cb),Cb.forEach(s),JC=h(L),_a=o(L,"DIV",{class:!0});var Ob=l(_a);b(Vm.$$.fragment,Ob),KC=h(Ob),Bv=o(Ob,"P",{});var SX=l(Bv);QC=c(SX,"Create DatasetDict from CSV file(s)."),SX.forEach(s),ZC=h(Ob),b(Rl.$$.fragment,Ob),Ob.forEach(s),XC=h(L),ba=o(L,"DIV",{class:!0});var zb=l(ba);b(Um.$$.fragment,zb),eO=h(zb),Gv=o(zb,"P",{});var CX=l(Gv);tO=c(CX,"Create DatasetDict from JSON Lines file(s)."),CX.forEach(s),sO=h(zb),b(Bl.$$.fragment,zb),zb.forEach(s),aO=h(L),$a=o(L,"DIV",{class:!0});var Vb=l($a);b(Mm.$$.fragment,Vb),nO=h(Vb),Hv=o(Vb,"P",{});var OX=l(Hv);rO=c(OX,"Create DatasetDict from Parquet file(s)."),OX.forEach(s),oO=h(Vb),b(Gl.$$.fragment,Vb),Vb.forEach(s),lO=h(L),xa=o(L,"DIV",{class:!0});var Ub=l(xa);b(Rm.$$.fragment,Ub),iO=h(Ub),Wv=o(Ub,"P",{});var zX=l(Wv);pO=c(zX,"Create DatasetDict from text file(s)."),zX.forEach(s),cO=h(Ub),b(Hl.$$.fragment,Ub),Ub.forEach(s),dO=h(L),va=o(L,"DIV",{class:!0});var Mb=l(va);b(Bm.$$.fragment,Mb),mO=h(Mb),Hn=o(Mb,"P",{});var Rb=l(Hn);hO=c(Rb,"Prepare a dataset for the given task by casting the dataset\u2019s "),Sg=o(Rb,"A",{href:!0});var VX=l(Sg);fO=c(VX,"Features"),VX.forEach(s),uO=c(Rb," to standardized column names and types as detailed in "),Cg=o(Rb,"A",{href:!0});var UX=l(Cg);Yv=o(UX,"CODE",{});var MX=l(Yv);gO=c(MX,"datasets.tasks"),MX.forEach(s),UX.forEach(s),_O=c(Rb,"."),Rb.forEach(s),bO=h(Mb),Wn=o(Mb,"P",{});var Bb=l(Wn);$O=c(Bb,"Casts "),Jv=o(Bb,"CODE",{});var RX=l(Jv);xO=c(RX,"datasets.DatasetInfo.features"),RX.forEach(s),vO=c(Bb," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Kv=o(Bb,"CODE",{});var BX=l(Kv);yO=c(BX,"datasets.DatasetInfo.task_templates"),BX.forEach(s),jO=c(Bb," after casting."),Bb.forEach(s),Mb.forEach(s),L.forEach(s),pD=h(a),Og=o(a,"A",{id:!0}),l(Og).forEach(s),cD=h(a),Yn=o(a,"H2",{class:!0});var xk=l(Yn);Wl=o(xk,"A",{id:!0,class:!0,href:!0});var GX=l(Wl);Qv=o(GX,"SPAN",{});var HX=l(Qv);b(Gm.$$.fragment,HX),HX.forEach(s),GX.forEach(s),wO=h(xk),Zv=o(xk,"SPAN",{});var WX=l(Zv);DO=c(WX,"IterableDataset"),WX.forEach(s),xk.forEach(s),dD=h(a),Yl=o(a,"P",{});var vk=l(Yl);kO=c(vk,"The base class "),zg=o(vk,"A",{href:!0});var YX=l(zg);EO=c(YX,"IterableDataset"),YX.forEach(s),qO=c(vk," implements an iterable Dataset backed by python generators."),vk.forEach(s),mD=h(a),A=o(a,"DIV",{class:!0});var S=l(A);b(Hm.$$.fragment,S),IO=h(S),Xv=o(S,"P",{});var JX=l(Xv);TO=c(JX,"A Dataset backed by an iterable."),JX.forEach(s),NO=h(S),xt=o(S,"DIV",{class:!0});var zp=l(xt);b(Wm.$$.fragment,zp),PO=h(zp),ey=o(zp,"P",{});var KX=l(ey);FO=c(KX,"Create an Iterable Dataset from a generator."),KX.forEach(s),LO=h(zp),b(Jl.$$.fragment,zp),AO=h(zp),b(Kl.$$.fragment,zp),zp.forEach(s),SO=h(S),ya=o(S,"DIV",{class:!0});var Gb=l(ya);b(Ym.$$.fragment,Gb),CO=h(Gb),ty=o(Gb,"P",{});var QX=l(ty);OO=c(QX,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),QX.forEach(s),zO=h(Gb),b(Ql.$$.fragment,Gb),Gb.forEach(s),VO=h(S),ja=o(S,"DIV",{class:!0});var Hb=l(ja);b(Jm.$$.fragment,Hb),UO=h(Hb),sy=o(Hb,"P",{});var ZX=l(sy);MO=c(ZX,"Cast column to feature for decoding."),ZX.forEach(s),RO=h(Hb),b(Zl.$$.fragment,Hb),Hb.forEach(s),BO=h(S),wa=o(S,"DIV",{class:!0});var Wb=l(wa);b(Km.$$.fragment,Wb),GO=h(Wb),ay=o(Wb,"P",{});var XX=l(ay);HO=c(XX,"Cast the dataset to a new set of features."),XX.forEach(s),WO=h(Wb),b(Xl.$$.fragment,Wb),Wb.forEach(s),YO=h(S),Vg=o(S,"DIV",{class:!0});var eee=l(Vg);b(Qm.$$.fragment,eee),eee.forEach(s),JO=h(S),Pe=o(S,"DIV",{class:!0});var cn=l(Pe);b(Zm.$$.fragment,cn),KO=h(cn),ny=o(cn,"P",{});var tee=l(ny);QO=c(tee,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),tee.forEach(s),ZO=h(cn),Xm=o(cn,"P",{});var yk=l(Xm);XO=c(yk,"You can specify whether the function should be batched or not with the "),ry=o(yk,"CODE",{});var see=l(ry);ez=c(see,"batched"),see.forEach(s),tz=c(yk," parameter:"),yk.forEach(s),sz=h(cn),Jn=o(cn,"UL",{});var Yb=l(Jn);oy=o(Yb,"LI",{});var aee=l(oy);az=c(aee,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),aee.forEach(s),nz=h(Yb),ly=o(Yb,"LI",{});var nee=l(ly);rz=c(nee,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),nee.forEach(s),oz=h(Yb),ue=o(Yb,"LI",{});var Tt=l(ue);lz=c(Tt,"If batched is True and batch_size is "),iy=o(Tt,"CODE",{});var ree=l(iy);iz=c(ree,"n"),ree.forEach(s),pz=c(Tt," > 1, then the function takes a batch of "),py=o(Tt,"CODE",{});var oee=l(py);cz=c(oee,"n"),oee.forEach(s),dz=c(Tt," examples as input and can return a batch with "),cy=o(Tt,"CODE",{});var lee=l(cy);mz=c(lee,"n"),lee.forEach(s),hz=c(Tt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),dy=o(Tt,"CODE",{});var iee=l(dy);fz=c(iee,"n"),iee.forEach(s),uz=c(Tt,` examples.
A batch is a dictionary, e.g. a batch of `),my=o(Tt,"CODE",{});var pee=l(my);gz=c(pee,"n"),pee.forEach(s),_z=c(Tt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Tt.forEach(s),Yb.forEach(s),bz=h(cn),b(ei.$$.fragment,cn),cn.forEach(s),$z=h(S),Da=o(S,"DIV",{class:!0});var Jb=l(Da);b(eh.$$.fragment,Jb),xz=h(Jb),hy=o(Jb,"P",{});var cee=l(hy);vz=c(cee,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),cee.forEach(s),yz=h(Jb),b(ti.$$.fragment,Jb),Jb.forEach(s),jz=h(S),ka=o(S,"DIV",{class:!0});var Kb=l(ka);b(th.$$.fragment,Kb),wz=h(Kb),fy=o(Kb,"P",{});var dee=l(fy);Dz=c(dee,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),dee.forEach(s),kz=h(Kb),b(si.$$.fragment,Kb),Kb.forEach(s),Ez=h(S),le=o(S,"DIV",{class:!0});var Nt=l(le);b(sh.$$.fragment,Nt),qz=h(Nt),uy=o(Nt,"P",{});var mee=l(uy);Iz=c(mee,"Randomly shuffles the elements of this dataset."),mee.forEach(s),Tz=h(Nt),gy=o(Nt,"P",{});var hee=l(gy);Nz=c(hee,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),hee.forEach(s),Pz=h(Nt),ah=o(Nt,"P",{});var jk=l(ah);Fz=c(jk,"For instance, if your dataset contains 10,000 elements but "),_y=o(jk,"CODE",{});var fee=l(_y);Lz=c(fee,"buffer_size"),fee.forEach(s),Az=c(jk,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),jk.forEach(s),Sz=h(Nt),Kn=o(Nt,"P",{});var Qb=l(Kn);Cz=c(Qb,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Ug=o(Qb,"A",{href:!0});var uee=l(Ug);Oz=c(uee,"datasets.IterableDataset.skip()"),uee.forEach(s),zz=c(Qb," or "),Mg=o(Qb,"A",{href:!0});var gee=l(Mg);Vz=c(gee,"datasets.IterableDataset.take()"),gee.forEach(s),Uz=c(Qb,`
then the order of the shards is kept unchanged.`),Qb.forEach(s),Mz=h(Nt),b(ai.$$.fragment,Nt),Nt.forEach(s),Rz=h(S),Ea=o(S,"DIV",{class:!0});var Zb=l(Ea);b(nh.$$.fragment,Zb),Bz=h(Zb),rh=o(Zb,"P",{});var wk=l(rh);Gz=c(wk,"Create a new IterableDataset that skips the first "),by=o(wk,"CODE",{});var _ee=l(by);Hz=c(_ee,"n"),_ee.forEach(s),Wz=c(wk," elements."),wk.forEach(s),Yz=h(Zb),b(ni.$$.fragment,Zb),Zb.forEach(s),Jz=h(S),qa=o(S,"DIV",{class:!0});var Xb=l(qa);b(oh.$$.fragment,Xb),Kz=h(Xb),lh=o(Xb,"P",{});var Dk=l(lh);Qz=c(Dk,"Create a new IterableDataset with only the first "),$y=o(Dk,"CODE",{});var bee=l($y);Zz=c(bee,"n"),bee.forEach(s),Xz=c(Dk," elements."),Dk.forEach(s),eV=h(Xb),b(ri.$$.fragment,Xb),Xb.forEach(s),tV=h(S),oi=o(S,"DIV",{class:!0});var kk=l(oi);b(ih.$$.fragment,kk),sV=h(kk),Rg=o(kk,"P",{});var DJ=l(Rg);Bg=o(DJ,"A",{href:!0});var $ee=l(Bg);aV=c($ee,"datasets.DatasetInfo"),$ee.forEach(s),nV=c(DJ," object containing all the metadata in the dataset."),DJ.forEach(s),kk.forEach(s),rV=h(S),li=o(S,"DIV",{class:!0});var Ek=l(li);b(ph.$$.fragment,Ek),oV=h(Ek),Gg=o(Ek,"P",{});var kJ=l(Gg);Hg=o(kJ,"A",{href:!0});var xee=l(Hg);lV=c(xee,"datasets.NamedSplit"),xee.forEach(s),iV=c(kJ," object corresponding to a named dataset split."),kJ.forEach(s),Ek.forEach(s),pV=h(S),Wg=o(S,"DIV",{class:!0});var vee=l(Wg);b(ch.$$.fragment,vee),vee.forEach(s),cV=h(S),Yg=o(S,"DIV",{class:!0});var yee=l(Yg);b(dh.$$.fragment,yee),yee.forEach(s),dV=h(S),Jg=o(S,"DIV",{class:!0});var jee=l(Jg);b(mh.$$.fragment,jee),jee.forEach(s),mV=h(S),Kg=o(S,"DIV",{class:!0});var wee=l(Kg);b(hh.$$.fragment,wee),wee.forEach(s),hV=h(S),Qg=o(S,"DIV",{class:!0});var Dee=l(Qg);b(fh.$$.fragment,Dee),Dee.forEach(s),fV=h(S),Zg=o(S,"DIV",{class:!0});var kee=l(Zg);b(uh.$$.fragment,kee),kee.forEach(s),uV=h(S),Xg=o(S,"DIV",{class:!0});var Eee=l(Xg);b(gh.$$.fragment,Eee),Eee.forEach(s),gV=h(S),e_=o(S,"DIV",{class:!0});var qee=l(e_);b(_h.$$.fragment,qee),qee.forEach(s),_V=h(S),t_=o(S,"DIV",{class:!0});var Iee=l(t_);b(bh.$$.fragment,Iee),Iee.forEach(s),bV=h(S),s_=o(S,"DIV",{class:!0});var Tee=l(s_);b($h.$$.fragment,Tee),Tee.forEach(s),$V=h(S),a_=o(S,"DIV",{class:!0});var Nee=l(a_);b(xh.$$.fragment,Nee),Nee.forEach(s),xV=h(S),n_=o(S,"DIV",{class:!0});var Pee=l(n_);b(vh.$$.fragment,Pee),Pee.forEach(s),vV=h(S),r_=o(S,"DIV",{class:!0});var Fee=l(r_);b(yh.$$.fragment,Fee),Fee.forEach(s),S.forEach(s),hD=h(a),Qn=o(a,"H2",{class:!0});var qk=l(Qn);ii=o(qk,"A",{id:!0,class:!0,href:!0});var Lee=l(ii);xy=o(Lee,"SPAN",{});var Aee=l(xy);b(jh.$$.fragment,Aee),Aee.forEach(s),Lee.forEach(s),yV=h(qk),vy=o(qk,"SPAN",{});var See=l(vy);jV=c(See,"IterableDatasetDict"),See.forEach(s),qk.forEach(s),fD=h(a),pi=o(a,"P",{});var Ik=l(pi);wV=c(Ik,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),yy=o(Ik,"CODE",{});var Cee=l(yy);DV=c(Cee,"IterableDataset"),Cee.forEach(s),kV=c(Ik," objects as values."),Ik.forEach(s),uD=h(a),U=o(a,"DIV",{class:!0});var G=l(U);b(wh.$$.fragment,G),EV=h(G),Fe=o(G,"DIV",{class:!0});var dn=l(Fe);b(Dh.$$.fragment,dn),qV=h(dn),jy=o(dn,"P",{});var Oee=l(jy);IV=c(Oee,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),Oee.forEach(s),TV=h(dn),kh=o(dn,"P",{});var Tk=l(kh);NV=c(Tk,"You can specify whether the function should be batched or not with the "),wy=o(Tk,"CODE",{});var zee=l(wy);PV=c(zee,"batched"),zee.forEach(s),FV=c(Tk," parameter:"),Tk.forEach(s),LV=h(dn),Zn=o(dn,"UL",{});var e2=l(Zn);Dy=o(e2,"LI",{});var Vee=l(Dy);AV=c(Vee,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),Vee.forEach(s),SV=h(e2),ky=o(e2,"LI",{});var Uee=l(ky);CV=c(Uee,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),Uee.forEach(s),OV=h(e2),ge=o(e2,"LI",{});var Pt=l(ge);zV=c(Pt,"If batched is True and batch_size is "),Ey=o(Pt,"CODE",{});var Mee=l(Ey);VV=c(Mee,"n"),Mee.forEach(s),UV=c(Pt," > 1, then the function takes a batch of "),qy=o(Pt,"CODE",{});var Ree=l(qy);MV=c(Ree,"n"),Ree.forEach(s),RV=c(Pt," examples as input and can return a batch with "),Iy=o(Pt,"CODE",{});var Bee=l(Iy);BV=c(Bee,"n"),Bee.forEach(s),GV=c(Pt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Ty=o(Pt,"CODE",{});var Gee=l(Ty);HV=c(Gee,"n"),Gee.forEach(s),WV=c(Pt,` examples.
A batch is a dictionary, e.g. a batch of `),Ny=o(Pt,"CODE",{});var Hee=l(Ny);YV=c(Hee,"n"),Hee.forEach(s),JV=c(Pt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Pt.forEach(s),e2.forEach(s),KV=h(dn),b(ci.$$.fragment,dn),dn.forEach(s),QV=h(G),Ia=o(G,"DIV",{class:!0});var t2=l(Ia);b(Eh.$$.fragment,t2),ZV=h(t2),Py=o(t2,"P",{});var Wee=l(Py);XV=c(Wee,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),Wee.forEach(s),eU=h(t2),b(di.$$.fragment,t2),t2.forEach(s),tU=h(G),ie=o(G,"DIV",{class:!0});var Ft=l(ie);b(qh.$$.fragment,Ft),sU=h(Ft),Fy=o(Ft,"P",{});var Yee=l(Fy);aU=c(Yee,`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),Yee.forEach(s),nU=h(Ft),Ly=o(Ft,"P",{});var Jee=l(Ly);rU=c(Jee,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),Jee.forEach(s),oU=h(Ft),Ih=o(Ft,"P",{});var Nk=l(Ih);lU=c(Nk,"For instance, if your dataset contains 10,000 elements but "),Ay=o(Nk,"CODE",{});var Kee=l(Ay);iU=c(Kee,"buffer_size"),Kee.forEach(s),pU=c(Nk,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),Nk.forEach(s),cU=h(Ft),Xn=o(Ft,"P",{});var s2=l(Xn);dU=c(s2,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),o_=o(s2,"A",{href:!0});var Qee=l(o_);mU=c(Qee,"datasets.IterableDataset.skip()"),Qee.forEach(s),hU=c(s2," or "),l_=o(s2,"A",{href:!0});var Zee=l(l_);fU=c(Zee,"datasets.IterableDataset.take()"),Zee.forEach(s),uU=c(s2,`
then the order of the shards is kept unchanged.`),s2.forEach(s),gU=h(Ft),b(mi.$$.fragment,Ft),Ft.forEach(s),_U=h(G),Ta=o(G,"DIV",{class:!0});var a2=l(Ta);b(Th.$$.fragment,a2),bU=h(a2),Sy=o(a2,"P",{});var Xee=l(Sy);$U=c(Xee,`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),Xee.forEach(s),xU=h(a2),b(hi.$$.fragment,a2),a2.forEach(s),vU=h(G),Na=o(G,"DIV",{class:!0});var n2=l(Na);b(Nh.$$.fragment,n2),yU=h(n2),Cy=o(n2,"P",{});var ete=l(Cy);jU=c(ete,`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),ete.forEach(s),wU=h(n2),b(fi.$$.fragment,n2),n2.forEach(s),DU=h(G),Pa=o(G,"DIV",{class:!0});var r2=l(Pa);b(Ph.$$.fragment,r2),kU=h(r2),Oy=o(r2,"P",{});var tte=l(Oy);EU=c(tte,`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),tte.forEach(s),qU=h(r2),b(ui.$$.fragment,r2),r2.forEach(s),IU=h(G),Fa=o(G,"DIV",{class:!0});var o2=l(Fa);b(Fh.$$.fragment,o2),TU=h(o2),zy=o(o2,"P",{});var ste=l(zy);NU=c(ste,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),ste.forEach(s),PU=h(o2),b(gi.$$.fragment,o2),o2.forEach(s),FU=h(G),La=o(G,"DIV",{class:!0});var l2=l(La);b(Lh.$$.fragment,l2),LU=h(l2),Vy=o(l2,"P",{});var ate=l(Vy);AU=c(ate,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),ate.forEach(s),SU=h(l2),b(_i.$$.fragment,l2),l2.forEach(s),CU=h(G),Aa=o(G,"DIV",{class:!0});var i2=l(Aa);b(Ah.$$.fragment,i2),OU=h(i2),Uy=o(i2,"P",{});var nte=l(Uy);zU=c(nte,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),nte.forEach(s),VU=h(i2),b(bi.$$.fragment,i2),i2.forEach(s),G.forEach(s),gD=h(a),er=o(a,"H2",{class:!0});var Pk=l(er);$i=o(Pk,"A",{id:!0,class:!0,href:!0});var rte=l($i);My=o(rte,"SPAN",{});var ote=l(My);b(Sh.$$.fragment,ote),ote.forEach(s),rte.forEach(s),UU=h(Pk),Ry=o(Pk,"SPAN",{});var lte=l(Ry);MU=c(lte,"Features"),lte.forEach(s),Pk.forEach(s),_D=h(a),C=o(a,"DIV",{class:!0});var z=l(C);b(Ch.$$.fragment,z),RU=h(z),By=o(z,"P",{});var ite=l(By);BU=c(ite,"A special dictionary that defines the internal structure of a dataset."),ite.forEach(s),GU=h(z),Oh=o(z,"P",{});var Fk=l(Oh);HU=c(Fk,"Instantiated with a dictionary of type "),Gy=o(Fk,"CODE",{});var pte=l(Gy);WU=c(pte,"dict[str, FieldType]"),pte.forEach(s),YU=c(Fk,`, where keys are the desired column names,
and values are the type of that column.`),Fk.forEach(s),JU=h(z),i_=o(z,"P",{});var EJ=l(i_);Hy=o(EJ,"CODE",{});var cte=l(Hy);KU=c(cte,"FieldType"),cte.forEach(s),QU=c(EJ," can be one of the following:"),EJ.forEach(s),ZU=h(z),J=o(z,"UL",{});var ce=l(J);Wy=o(ce,"LI",{});var dte=l(Wy);Sa=o(dte,"P",{});var $u=l(Sa);XU=c($u,"a "),p_=o($u,"A",{href:!0});var mte=l(p_);eM=c(mte,"datasets.Value"),mte.forEach(s),tM=c($u," feature specifies a single typed value, e.g. "),Yy=o($u,"CODE",{});var hte=l(Yy);sM=c(hte,"int64"),hte.forEach(s),aM=c($u," or "),Jy=o($u,"CODE",{});var fte=l(Jy);nM=c(fte,"string"),fte.forEach(s),$u.forEach(s),dte.forEach(s),rM=h(ce),Ky=o(ce,"LI",{});var ute=l(Ky);zh=o(ute,"P",{});var Lk=l(zh);oM=c(Lk,"a "),c_=o(Lk,"A",{href:!0});var gte=l(c_);lM=c(gte,"datasets.ClassLabel"),gte.forEach(s),iM=c(Lk,` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),Lk.forEach(s),ute.forEach(s),pM=h(ce),Qy=o(ce,"LI",{});var _te=l(Qy);Vh=o(_te,"P",{});var Ak=l(Vh);cM=c(Ak,"a python "),Zy=o(Ak,"CODE",{});var bte=l(Zy);dM=c(bte,"dict"),bte.forEach(s),mM=c(Ak,` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),Ak.forEach(s),_te.forEach(s),hM=h(ce),Uh=o(ce,"LI",{});var Sk=l(Uh);Ge=o(Sk,"P",{});var mn=l(Ge);fM=c(mn,"a python "),Xy=o(mn,"CODE",{});var $te=l(Xy);uM=c($te,"list"),$te.forEach(s),gM=c(mn," or a "),d_=o(mn,"A",{href:!0});var xte=l(d_);_M=c(xte,"datasets.Sequence"),xte.forEach(s),bM=c(mn,` specifies that the field contains a list of objects. The python
`),ej=o(mn,"CODE",{});var vte=l(ej);$M=c(vte,"list"),vte.forEach(s),xM=c(mn," or "),m_=o(mn,"A",{href:!0});var yte=l(m_);vM=c(yte,"datasets.Sequence"),yte.forEach(s),yM=c(mn,` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),mn.forEach(s),jM=h(Sk),b(xi.$$.fragment,Sk),Sk.forEach(s),wM=h(ce),tj=o(ce,"LI",{});var jte=l(tj);He=o(jte,"P",{});var hn=l(He);DM=c(hn,"a "),h_=o(hn,"A",{href:!0});var wte=l(h_);kM=c(wte,"Array2D"),wte.forEach(s),EM=c(hn,", "),f_=o(hn,"A",{href:!0});var Dte=l(f_);qM=c(Dte,"Array3D"),Dte.forEach(s),IM=c(hn,", "),u_=o(hn,"A",{href:!0});var kte=l(u_);TM=c(kte,"Array4D"),kte.forEach(s),NM=c(hn," or "),g_=o(hn,"A",{href:!0});var Ete=l(g_);PM=c(Ete,"Array5D"),Ete.forEach(s),FM=c(hn," feature for multidimensional arrays"),hn.forEach(s),jte.forEach(s),LM=h(ce),sj=o(ce,"LI",{});var qte=l(sj);Mh=o(qte,"P",{});var Ck=l(Mh);AM=c(Ck,"an "),__=o(Ck,"A",{href:!0});var Ite=l(__);SM=c(Ite,"Audio"),Ite.forEach(s),CM=c(Ck,` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),Ck.forEach(s),qte.forEach(s),OM=h(ce),aj=o(ce,"LI",{});var Tte=l(aj);Qt=o(Tte,"P",{});var Vp=l(Qt);zM=c(Vp,"an "),b_=o(Vp,"A",{href:!0});var Nte=l(b_);VM=c(Nte,"Image"),Nte.forEach(s),UM=c(Vp," feature to store the absolute path to an image file, an "),nj=o(Vp,"CODE",{});var Pte=l(nj);MM=c(Pte,"np.ndarray"),Pte.forEach(s),RM=c(Vp," object, a "),rj=o(Vp,"CODE",{});var Fte=l(rj);BM=c(Fte,"PIL.Image.Image"),Fte.forEach(s),GM=c(Vp,` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),Vp.forEach(s),Tte.forEach(s),HM=h(ce),oj=o(ce,"LI",{});var Lte=l(oj);vi=o(Lte,"P",{});var J7=l(vi);$_=o(J7,"A",{href:!0});var Ate=l($_);WM=c(Ate,"datasets.Translation"),Ate.forEach(s),YM=c(J7," and "),x_=o(J7,"A",{href:!0});var Ste=l(x_);JM=c(Ste,"datasets.TranslationVariableLanguages"),Ste.forEach(s),KM=c(J7,", the two features specific to Machine Translation"),J7.forEach(s),Lte.forEach(s),ce.forEach(s),QM=h(z),Ca=o(z,"DIV",{class:!0});var p2=l(Ca);b(Rh.$$.fragment,p2),ZM=h(p2),lj=o(p2,"P",{});var Cte=l(lj);XM=c(Cte,"Make a deep copy of Features."),Cte.forEach(s),eR=h(p2),b(yi.$$.fragment,p2),p2.forEach(s),tR=h(z),ji=o(z,"DIV",{class:!0});var Ok=l(ji);b(Bh.$$.fragment,Ok),sR=h(Ok),ij=o(Ok,"P",{});var Ote=l(ij);aR=c(Ote,"Decode batch with custom feature decoding."),Ote.forEach(s),Ok.forEach(s),nR=h(z),wi=o(z,"DIV",{class:!0});var zk=l(wi);b(Gh.$$.fragment,zk),rR=h(zk),pj=o(zk,"P",{});var zte=l(pj);oR=c(zte,"Decode column with custom feature decoding."),zte.forEach(s),zk.forEach(s),lR=h(z),Di=o(z,"DIV",{class:!0});var Vk=l(Di);b(Hh.$$.fragment,Vk),iR=h(Vk),cj=o(Vk,"P",{});var Vte=l(cj);pR=c(Vte,"Decode example with custom feature decoding."),Vte.forEach(s),Vk.forEach(s),cR=h(z),ki=o(z,"DIV",{class:!0});var Uk=l(ki);b(Wh.$$.fragment,Uk),dR=h(Uk),dj=o(Uk,"P",{});var Ute=l(dj);mR=c(Ute,"Encode batch into a format for Arrow."),Ute.forEach(s),Uk.forEach(s),hR=h(z),Ei=o(z,"DIV",{class:!0});var Mk=l(Ei);b(Yh.$$.fragment,Mk),fR=h(Mk),mj=o(Mk,"P",{});var Mte=l(mj);uR=c(Mte,"Encode example into a format for Arrow."),Mte.forEach(s),Mk.forEach(s),gR=h(z),vt=o(z,"DIV",{class:!0});var Up=l(vt);b(Jh.$$.fragment,Up),_R=h(Up),hj=o(Up,"P",{});var Rte=l(hj);bR=c(Rte,`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),Rte.forEach(s),$R=h(Up),fj=o(Up,"P",{});var Bte=l(fj);xR=c(Bte,`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),Bte.forEach(s),vR=h(Up),b(qi.$$.fragment,Up),Up.forEach(s),yR=h(z),Ii=o(z,"DIV",{class:!0});var Rk=l(Ii);b(Kh.$$.fragment,Rk),jR=h(Rk),uj=o(Rk,"P",{});var Gte=l(uj);wR=c(Gte,`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),Gte.forEach(s),Rk.forEach(s),DR=h(z),Le=o(z,"DIV",{class:!0});var fn=l(Le);b(Qh.$$.fragment,fn),kR=h(fn),gj=o(fn,"P",{});var Hte=l(gj);ER=c(Hte,"Construct Features from dict."),Hte.forEach(s),qR=h(fn),_j=o(fn,"P",{});var Wte=l(_j);IR=c(Wte,`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),Wte.forEach(s),TR=h(fn),Zt=o(fn,"P",{});var Mp=l(Zt);NR=c(Mp,`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),v_=o(Mp,"A",{href:!0});var Yte=l(v_);PR=c(Yte,"DatasetInfo"),Yte.forEach(s),FR=c(Mp,` that was dumped to a JSON object. This acts as an analogue to
`),y_=o(Mp,"A",{href:!0});var Jte=l(y_);LR=c(Jte,"Features.from_arrow_schema()"),Jte.forEach(s),AR=c(Mp,` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),j_=o(Mp,"A",{href:!0});var Kte=l(j_);SR=c(Kte,"Value"),Kte.forEach(s),CR=c(Mp," automatically performs."),Mp.forEach(s),OR=h(fn),b(Ti.$$.fragment,fn),fn.forEach(s),zR=h(z),yt=o(z,"DIV",{class:!0});var Rp=l(yt);b(Zh.$$.fragment,Rp),VR=h(Rp),bj=o(Rp,"P",{});var Qte=l(bj);UR=c(Qte,"Reorder Features fields to match the field order of other Features."),Qte.forEach(s),MR=h(Rp),$j=o(Rp,"P",{});var Zte=l($j);RR=c(Zte,`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),Zte.forEach(s),BR=h(Rp),b(Ni.$$.fragment,Rp),Rp.forEach(s),z.forEach(s),bD=h(a),Xt=o(a,"DIV",{class:!0});var c2=l(Xt);b(Xh.$$.fragment,c2),GR=h(c2),xj=o(c2,"P",{});var Xte=l(xj);HR=c(Xte,`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),Xte.forEach(s),WR=h(c2),b(Pi.$$.fragment,c2),c2.forEach(s),$D=h(a),B=o(a,"DIV",{class:!0});var Z=l(B);b(ef.$$.fragment,Z),YR=h(Z),vj=o(Z,"P",{});var ese=l(vj);JR=c(ese,"Feature type for integer class labels."),ese.forEach(s),KR=h(Z),tf=o(Z,"P",{});var Bk=l(tf);QR=c(Bk,"There are 3 ways to define a "),yj=o(Bk,"EM",{});var tse=l(yj);ZR=c(tse,"ClassLabel"),tse.forEach(s),XR=c(Bk,", which correspond to the 3 arguments:"),Bk.forEach(s),eB=h(Z),tr=o(Z,"UL",{});var d2=l(tr);w_=o(d2,"LI",{});var qJ=l(w_);jj=o(qJ,"EM",{});var sse=l(jj);tB=c(sse,"num_classes"),sse.forEach(s),sB=c(qJ,": Create 0 to (num_classes-1) labels."),qJ.forEach(s),aB=h(d2),D_=o(d2,"LI",{});var IJ=l(D_);wj=o(IJ,"EM",{});var ase=l(wj);nB=c(ase,"names"),ase.forEach(s),rB=c(IJ,": List of label strings."),IJ.forEach(s),oB=h(d2),k_=o(d2,"LI",{});var TJ=l(k_);Dj=o(TJ,"EM",{});var nse=l(Dj);lB=c(nse,"names_file"),nse.forEach(s),iB=c(TJ,": File containing the list of labels."),TJ.forEach(s),d2.forEach(s),pB=h(Z),kj=o(Z,"P",{});var rse=l(kj);cB=c(rse,`Under the hood the labels are stored as integers.
You can use negative integers to represent unknown/missing labels.`),rse.forEach(s),dB=h(Z),b(Fi.$$.fragment,Z),mB=h(Z),Oa=o(Z,"DIV",{class:!0});var m2=l(Oa);b(sf.$$.fragment,m2),hB=h(m2),Ej=o(m2,"P",{});var ose=l(Ej);fB=c(ose,`Cast an Arrow array to the ClassLabel arrow storage type.
The Arrow types that can be converted to the ClassLabel pyarrow storage type are:`),ose.forEach(s),uB=h(m2),af=o(m2,"UL",{});var Gk=l(af);qj=o(Gk,"LI",{});var lse=l(qj);gB=c(lse,"pa.string()"),lse.forEach(s),_B=h(Gk),Ij=o(Gk,"LI",{});var ise=l(Ij);bB=c(ise,"pa.int()"),ise.forEach(s),Gk.forEach(s),m2.forEach(s),$B=h(Z),jt=o(Z,"DIV",{class:!0});var Bp=l(jt);b(nf.$$.fragment,Bp),xB=h(Bp),Tj=o(Bp,"P",{});var pse=l(Tj);vB=c(pse,"Conversion integer => class name string."),pse.forEach(s),yB=h(Bp),Nj=o(Bp,"P",{});var cse=l(Nj);jB=c(cse,"Regarding unknown/missing labels: passing negative integers raises ValueError."),cse.forEach(s),wB=h(Bp),b(Li.$$.fragment,Bp),Bp.forEach(s),DB=h(Z),za=o(Z,"DIV",{class:!0});var h2=l(za);b(rf.$$.fragment,h2),kB=h(h2),Pj=o(h2,"P",{});var dse=l(Pj);EB=c(dse,"Conversion class name string => integer."),dse.forEach(s),qB=h(h2),b(Ai.$$.fragment,h2),h2.forEach(s),Z.forEach(s),xD=h(a),We=o(a,"DIV",{class:!0});var Gp=l(We);b(of.$$.fragment,Gp),IB=h(Gp),Fj=o(Gp,"P",{});var mse=l(Fj);TB=c(mse,"The Value dtypes are as follows:"),mse.forEach(s),NB=h(Gp),Lj=o(Gp,"P",{});var hse=l(Lj);PB=c(hse,`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),hse.forEach(s),FB=h(Gp),b(Si.$$.fragment,Gp),Gp.forEach(s),vD=h(a),te=o(a,"DIV",{class:!0});var Lt=l(te);b(lf.$$.fragment,Lt),LB=h(Lt),E_=o(Lt,"P",{});var NJ=l(E_);Aj=o(NJ,"CODE",{});var fse=l(Aj);AB=c(fse,"FeatureConnector"),fse.forEach(s),SB=c(NJ,` for translations with fixed languages per example.
Here for compatiblity with tfds.`),NJ.forEach(s),CB=h(Lt),Sj=o(Lt,"P",{});var use=l(Sj);OB=c(use,`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),use.forEach(s),zB=h(Lt),pf=o(Lt,"P",{});var Hk=l(pf);VB=c(Hk,"Output: A dictionary mapping string language codes to translations as "),Cj=o(Hk,"CODE",{});var gse=l(Cj);UB=c(gse,"Text"),gse.forEach(s),MB=c(Hk,`
features.`),Hk.forEach(s),RB=h(Lt),b(Ci.$$.fragment,Lt),BB=h(Lt),Oi=o(Lt,"DIV",{class:!0});var Wk=l(Oi);b(cf.$$.fragment,Wk),GB=h(Wk),Oj=o(Wk,"P",{});var _se=l(Oj);HB=c(_se,"Flatten the Translation feature into a dictionary."),_se.forEach(s),Wk.forEach(s),Lt.forEach(s),yD=h(a),se=o(a,"DIV",{class:!0});var At=l(se);b(df.$$.fragment,At),WB=h(At),q_=o(At,"P",{});var PJ=l(q_);zj=o(PJ,"CODE",{});var bse=l(zj);YB=c(bse,"FeatureConnector"),bse.forEach(s),JB=c(PJ,` for translations with variable languages per example.
Here for compatiblity with tfds.`),PJ.forEach(s),KB=h(At),Vj=o(At,"P",{});var $se=l(Vj);QB=c($se,`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),$se.forEach(s),ZB=h(At),Uj=o(At,"P",{});var xse=l(Uj);XB=c(xse,`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),xse.forEach(s),eG=h(At),b(zi.$$.fragment,At),tG=h(At),Vi=o(At,"DIV",{class:!0});var Yk=l(Vi);b(mf.$$.fragment,Yk),sG=h(Yk),Mj=o(Yk,"P",{});var vse=l(Mj);aG=c(vse,"Flatten the TranslationVariableLanguages feature into a dictionary."),vse.forEach(s),Yk.forEach(s),At.forEach(s),jD=h(a),es=o(a,"DIV",{class:!0});var f2=l(es);b(hf.$$.fragment,f2),nG=h(f2),Rj=o(f2,"P",{});var yse=l(Rj);rG=c(yse,"Create a two-dimensional array."),yse.forEach(s),oG=h(f2),b(Ui.$$.fragment,f2),f2.forEach(s),wD=h(a),ts=o(a,"DIV",{class:!0});var u2=l(ts);b(ff.$$.fragment,u2),lG=h(u2),Bj=o(u2,"P",{});var jse=l(Bj);iG=c(jse,"Create a three-dimensional array."),jse.forEach(s),pG=h(u2),b(Mi.$$.fragment,u2),u2.forEach(s),DD=h(a),ss=o(a,"DIV",{class:!0});var g2=l(ss);b(uf.$$.fragment,g2),cG=h(g2),Gj=o(g2,"P",{});var wse=l(Gj);dG=c(wse,"Create a four-dimensional array."),wse.forEach(s),mG=h(g2),b(Ri.$$.fragment,g2),g2.forEach(s),kD=h(a),as=o(a,"DIV",{class:!0});var _2=l(as);b(gf.$$.fragment,_2),hG=h(_2),Hj=o(_2,"P",{});var Dse=l(Hj);fG=c(Dse,"Create a five-dimensional array."),Dse.forEach(s),uG=h(_2),b(Bi.$$.fragment,_2),_2.forEach(s),ED=h(a),M=o(a,"DIV",{class:!0});var H=l(M);b(_f.$$.fragment,H),gG=h(H),Wj=o(H,"P",{});var kse=l(Wj);_G=c(kse,"Audio Feature to extract audio data from an audio file."),kse.forEach(s),bG=h(H),Yj=o(H,"P",{});var Ese=l(Yj);$G=c(Ese,"Input: The Audio feature accepts as input:"),Ese.forEach(s),xG=h(H),sr=o(H,"UL",{});var b2=l(sr);Jj=o(b2,"LI",{});var qse=l(Jj);bf=o(qse,"P",{});var Jk=l(bf);vG=c(Jk,"A "),Kj=o(Jk,"CODE",{});var Ise=l(Kj);yG=c(Ise,"str"),Ise.forEach(s),jG=c(Jk,": Absolute path to the audio file (i.e. random access is allowed)."),Jk.forEach(s),qse.forEach(s),wG=h(b2),ar=o(b2,"LI",{});var $2=l(ar);$f=o($2,"P",{});var Kk=l($f);DG=c(Kk,"A "),Qj=o(Kk,"CODE",{});var Tse=l(Qj);kG=c(Tse,"dict"),Tse.forEach(s),EG=c(Kk," with the keys:"),Kk.forEach(s),qG=h($2),xf=o($2,"UL",{});var Qk=l(xf);Zj=o(Qk,"LI",{});var Nse=l(Zj);IG=c(Nse,"path: String with relative path of the audio file to the archive file."),Nse.forEach(s),TG=h(Qk),Xj=o(Qk,"LI",{});var Pse=l(Xj);NG=c(Pse,"bytes: Bytes content of the audio file."),Pse.forEach(s),Qk.forEach(s),PG=h($2),e0=o($2,"P",{});var Fse=l(e0);FG=c(Fse,"This is useful for archived files with sequential access."),Fse.forEach(s),$2.forEach(s),LG=h(b2),nr=o(b2,"LI",{});var x2=l(nr);vf=o(x2,"P",{});var Zk=l(vf);AG=c(Zk,"A "),t0=o(Zk,"CODE",{});var Lse=l(t0);SG=c(Lse,"dict"),Lse.forEach(s),CG=c(Zk," with the keys:"),Zk.forEach(s),OG=h(x2),rr=o(x2,"UL",{});var v2=l(rr);s0=o(v2,"LI",{});var Ase=l(s0);zG=c(Ase,"path: String with relative path of the audio file to the archive file."),Ase.forEach(s),VG=h(v2),a0=o(v2,"LI",{});var Sse=l(a0);UG=c(Sse,"array: Array containing the audio sample"),Sse.forEach(s),MG=h(v2),n0=o(v2,"LI",{});var Cse=l(n0);RG=c(Cse,"sampling_rate: Integer corresponding to the sampling rate of the audio sample."),Cse.forEach(s),v2.forEach(s),BG=h(x2),r0=o(x2,"P",{});var Ose=l(r0);GG=c(Ose,"This is useful for archived files with sequential access."),Ose.forEach(s),x2.forEach(s),b2.forEach(s),HG=h(H),b(Gi.$$.fragment,H),WG=h(H),Va=o(H,"DIV",{class:!0});var y2=l(Va);b(yf.$$.fragment,y2),YG=h(y2),o0=o(y2,"P",{});var zse=l(o0);JG=c(zse,`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),zse.forEach(s),KG=h(y2),ns=o(y2,"UL",{});var Hp=l(ns);l0=o(Hp,"LI",{});var Vse=l(l0);QG=c(Vse,"pa.string() - it must contain the \u201Cpath\u201D data"),Vse.forEach(s),ZG=h(Hp),i0=o(Hp,"LI",{});var Use=l(i0);XG=c(Use,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),Use.forEach(s),eH=h(Hp),p0=o(Hp,"LI",{});var Mse=l(p0);tH=c(Mse,"pa.struct({\u201Cpath\u201D: pa.string()})"),Mse.forEach(s),sH=h(Hp),c0=o(Hp,"LI",{});var Rse=l(c0);aH=c(Rse,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),Rse.forEach(s),Hp.forEach(s),y2.forEach(s),nH=h(H),Hi=o(H,"DIV",{class:!0});var Xk=l(Hi);b(jf.$$.fragment,Xk),rH=h(Xk),d0=o(Xk,"P",{});var Bse=l(d0);oH=c(Bse,"Decode example audio file into audio data."),Bse.forEach(s),Xk.forEach(s),lH=h(H),Wi=o(H,"DIV",{class:!0});var e4=l(Wi);b(wf.$$.fragment,e4),iH=h(e4),m0=o(e4,"P",{});var Gse=l(m0);pH=c(Gse,"Embed audio files into the Arrow array."),Gse.forEach(s),e4.forEach(s),cH=h(H),Yi=o(H,"DIV",{class:!0});var t4=l(Yi);b(Df.$$.fragment,t4),dH=h(t4),h0=o(t4,"P",{});var Hse=l(h0);mH=c(Hse,"Encode example into a format for Arrow."),Hse.forEach(s),t4.forEach(s),hH=h(H),Ji=o(H,"DIV",{class:!0});var s4=l(Ji);b(kf.$$.fragment,s4),fH=h(s4),f0=o(s4,"P",{});var Wse=l(f0);uH=c(Wse,"If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),Wse.forEach(s),s4.forEach(s),H.forEach(s),qD=h(a),R=o(a,"DIV",{class:!0});var W=l(R);b(Ef.$$.fragment,W),gH=h(W),u0=o(W,"P",{});var Yse=l(u0);_H=c(Yse,"Image feature to read image data from an image file."),Yse.forEach(s),bH=h(W),g0=o(W,"P",{});var Jse=l(g0);$H=c(Jse,"Input: The Image feature accepts as input:"),Jse.forEach(s),xH=h(W),rs=o(W,"UL",{});var Wp=l(rs);_0=o(Wp,"LI",{});var Kse=l(_0);qf=o(Kse,"P",{});var a4=l(qf);vH=c(a4,"A "),b0=o(a4,"CODE",{});var Qse=l(b0);yH=c(Qse,"str"),Qse.forEach(s),jH=c(a4,": Absolute path to the image file (i.e. random access is allowed)."),a4.forEach(s),Kse.forEach(s),wH=h(Wp),or=o(Wp,"LI",{});var j2=l(or);If=o(j2,"P",{});var n4=l(If);DH=c(n4,"A "),$0=o(n4,"CODE",{});var Zse=l($0);kH=c(Zse,"dict"),Zse.forEach(s),EH=c(n4," with the keys:"),n4.forEach(s),qH=h(j2),Tf=o(j2,"UL",{});var r4=l(Tf);x0=o(r4,"LI",{});var Xse=l(x0);IH=c(Xse,"path: String with relative path of the image file to the archive file."),Xse.forEach(s),TH=h(r4),v0=o(r4,"LI",{});var eae=l(v0);NH=c(eae,"bytes: Bytes of the image file."),eae.forEach(s),r4.forEach(s),PH=h(j2),y0=o(j2,"P",{});var tae=l(y0);FH=c(tae,"This is useful for archived files with sequential access."),tae.forEach(s),j2.forEach(s),LH=h(Wp),j0=o(Wp,"LI",{});var sae=l(j0);Nf=o(sae,"P",{});var o4=l(Nf);AH=c(o4,"An "),w0=o(o4,"CODE",{});var aae=l(w0);SH=c(aae,"np.ndarray"),aae.forEach(s),CH=c(o4,": NumPy array representing an image."),o4.forEach(s),sae.forEach(s),OH=h(Wp),D0=o(Wp,"LI",{});var nae=l(D0);Pf=o(nae,"P",{});var l4=l(Pf);zH=c(l4,"A "),k0=o(l4,"CODE",{});var rae=l(k0);VH=c(rae,"PIL.Image.Image"),rae.forEach(s),UH=c(l4,": PIL image object."),l4.forEach(s),nae.forEach(s),Wp.forEach(s),MH=h(W),b(Ki.$$.fragment,W),RH=h(W),Ua=o(W,"DIV",{class:!0});var w2=l(Ua);b(Ff.$$.fragment,w2),BH=h(w2),E0=o(w2,"P",{});var oae=l(E0);GH=c(oae,`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),oae.forEach(s),HH=h(w2),Ye=o(w2,"UL",{});var un=l(Ye);q0=o(un,"LI",{});var lae=l(q0);WH=c(lae,"pa.string() - it must contain the \u201Cpath\u201D data"),lae.forEach(s),YH=h(un),I0=o(un,"LI",{});var iae=l(I0);JH=c(iae,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),iae.forEach(s),KH=h(un),T0=o(un,"LI",{});var pae=l(T0);QH=c(pae,"pa.struct({\u201Cpath\u201D: pa.string()})"),pae.forEach(s),ZH=h(un),N0=o(un,"LI",{});var cae=l(N0);XH=c(cae,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),cae.forEach(s),eW=h(un),P0=o(un,"LI",{});var dae=l(P0);tW=c(dae,"pa.list(*) - it must contain the image array data"),dae.forEach(s),un.forEach(s),w2.forEach(s),sW=h(W),Qi=o(W,"DIV",{class:!0});var i4=l(Qi);b(Lf.$$.fragment,i4),aW=h(i4),F0=o(i4,"P",{});var mae=l(F0);nW=c(mae,"Decode example image file into image data."),mae.forEach(s),i4.forEach(s),rW=h(W),Zi=o(W,"DIV",{class:!0});var p4=l(Zi);b(Af.$$.fragment,p4),oW=h(p4),L0=o(p4,"P",{});var hae=l(L0);lW=c(hae,"Embed image files into the Arrow array."),hae.forEach(s),p4.forEach(s),iW=h(W),Xi=o(W,"DIV",{class:!0});var c4=l(Xi);b(Sf.$$.fragment,c4),pW=h(c4),A0=o(c4,"P",{});var fae=l(A0);cW=c(fae,"Encode example into a format for Arrow."),fae.forEach(s),c4.forEach(s),dW=h(W),ep=o(W,"DIV",{class:!0});var d4=l(ep);b(Cf.$$.fragment,d4),mW=h(d4),S0=o(d4,"P",{});var uae=l(S0);hW=c(uae,"If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),uae.forEach(s),d4.forEach(s),W.forEach(s),ID=h(a),lr=o(a,"H2",{class:!0});var m4=l(lr);tp=o(m4,"A",{id:!0,class:!0,href:!0});var gae=l(tp);C0=o(gae,"SPAN",{});var _ae=l(C0);b(Of.$$.fragment,_ae),_ae.forEach(s),gae.forEach(s),fW=h(m4),O0=o(m4,"SPAN",{});var bae=l(O0);uW=c(bae,"MetricInfo"),bae.forEach(s),m4.forEach(s),TD=h(a),ae=o(a,"DIV",{class:!0});var St=l(ae);b(zf.$$.fragment,St),gW=h(St),z0=o(St,"P",{});var $ae=l(z0);_W=c($ae,"Information about a metric."),$ae.forEach(s),bW=h(St),I_=o(St,"P",{});var FJ=l(I_);V0=o(FJ,"CODE",{});var xae=l(V0);$W=c(xae,"MetricInfo"),xae.forEach(s),xW=c(FJ,` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),FJ.forEach(s),vW=h(St),U0=o(St,"P",{});var vae=l(U0);yW=c(vae,"Note: Not all fields are known on construction and may be updated later."),vae.forEach(s),jW=h(St),Ma=o(St,"DIV",{class:!0});var D2=l(Ma);b(Vf.$$.fragment,D2),wW=h(D2),Uf=o(D2,"P",{});var h4=l(Uf);DW=c(h4,"Create MetricInfo from the JSON file in "),M0=o(h4,"CODE",{});var yae=l(M0);kW=c(yae,"metric_info_dir"),yae.forEach(s),EW=c(h4,"."),h4.forEach(s),qW=h(D2),b(sp.$$.fragment,D2),D2.forEach(s),IW=h(St),Ra=o(St,"DIV",{class:!0});var k2=l(Ra);b(Mf.$$.fragment,k2),TW=h(k2),os=o(k2,"P",{});var Yp=l(os);NW=c(Yp,"Write "),R0=o(Yp,"CODE",{});var jae=l(R0);PW=c(jae,"MetricInfo"),jae.forEach(s),FW=c(Yp," as JSON to "),B0=o(Yp,"CODE",{});var wae=l(B0);LW=c(wae,"metric_info_dir"),wae.forEach(s),AW=c(Yp,`.
Also save the license separately in LICENCE.
If `),G0=o(Yp,"CODE",{});var Dae=l(G0);SW=c(Dae,"pretty_print"),Dae.forEach(s),CW=c(Yp," is True, the JSON will be pretty-printed with the indent level of 4."),Yp.forEach(s),OW=h(k2),b(ap.$$.fragment,k2),k2.forEach(s),St.forEach(s),ND=h(a),ir=o(a,"H2",{class:!0});var f4=l(ir);np=o(f4,"A",{id:!0,class:!0,href:!0});var kae=l(np);H0=o(kae,"SPAN",{});var Eae=l(H0);b(Rf.$$.fragment,Eae),Eae.forEach(s),kae.forEach(s),zW=h(f4),W0=o(f4,"SPAN",{});var qae=l(W0);VW=c(qae,"Metric"),qae.forEach(s),f4.forEach(s),PD=h(a),Ba=o(a,"P",{});var E2=l(Ba);UW=c(E2,"The base class "),Y0=o(E2,"CODE",{});var Iae=l(Y0);MW=c(Iae,"Metric"),Iae.forEach(s),RW=c(E2," implements a Metric backed by one or several "),T_=o(E2,"A",{href:!0});var Tae=l(T_);BW=c(Tae,"Dataset"),Tae.forEach(s),GW=c(E2,"."),E2.forEach(s),FD=h(a),K=o(a,"DIV",{class:!0});var Se=l(K);b(Bf.$$.fragment,Se),HW=h(Se),J0=o(Se,"P",{});var Nae=l(J0);WW=c(Nae,"A Metric is the base class and common API for all metrics."),Nae.forEach(s),YW=h(Se),b(rp.$$.fragment,Se),JW=h(Se),Ga=o(Se,"DIV",{class:!0});var q2=l(Ga);b(Gf.$$.fragment,q2),KW=h(q2),K0=o(q2,"P",{});var Pae=l(K0);QW=c(Pae,"Add one prediction and reference for the metric\u2019s stack."),Pae.forEach(s),ZW=h(q2),b(op.$$.fragment,q2),q2.forEach(s),XW=h(Se),Ha=o(Se,"DIV",{class:!0});var I2=l(Ha);b(Hf.$$.fragment,I2),eY=h(I2),Q0=o(I2,"P",{});var Fae=l(Q0);tY=c(Fae,"Add a batch of predictions and references for the metric\u2019s stack."),Fae.forEach(s),sY=h(I2),b(lp.$$.fragment,I2),I2.forEach(s),aY=h(Se),wt=o(Se,"DIV",{class:!0});var Jp=l(wt);b(Wf.$$.fragment,Jp),nY=h(Jp),Z0=o(Jp,"P",{});var Lae=l(Z0);rY=c(Lae,"Compute the metrics."),Lae.forEach(s),oY=h(Jp),X0=o(Jp,"P",{});var Aae=l(X0);lY=c(Aae,"Usage of positional arguments is not allowed to prevent mistakes."),Aae.forEach(s),iY=h(Jp),b(ip.$$.fragment,Jp),Jp.forEach(s),pY=h(Se),pp=o(Se,"DIV",{class:!0});var u4=l(pp);b(Yf.$$.fragment,u4),cY=h(u4),ew=o(u4,"P",{});var Sae=l(ew);dY=c(Sae,"Downloads and prepares dataset for reading."),Sae.forEach(s),u4.forEach(s),Se.forEach(s),LD=h(a),pr=o(a,"H2",{class:!0});var g4=l(pr);cp=o(g4,"A",{id:!0,class:!0,href:!0});var Cae=l(cp);tw=o(Cae,"SPAN",{});var Oae=l(tw);b(Jf.$$.fragment,Oae),Oae.forEach(s),Cae.forEach(s),mY=h(g4),sw=o(g4,"SPAN",{});var zae=l(sw);hY=c(zae,"Filesystems"),zae.forEach(s),g4.forEach(s),AD=h(a),O=o(a,"DIV",{class:!0});var V=l(O);b(Kf.$$.fragment,V),fY=h(V),dp=o(V,"P",{});var K7=l(dp);aw=o(K7,"CODE",{});var Vae=l(aw);uY=c(Vae,"datasets.filesystems.S3FileSystem"),Vae.forEach(s),gY=c(K7," is a subclass of "),Qf=o(K7,"A",{href:!0,rel:!0});var Uae=l(Qf);nw=o(Uae,"CODE",{});var Mae=l(nw);_Y=c(Mae,"s3fs.S3FileSystem"),Mae.forEach(s),Uae.forEach(s),bY=c(K7,"."),K7.forEach(s),$Y=h(V),ls=o(V,"P",{});var Kp=l(ls);xY=c(Kp,"Users can use this class to access S3 as if it were a file system. It exposes a filesystem-like API (ls, cp, open, etc.) on top of S3 storage. Provide credentials either explicitly ("),rw=o(Kp,"CODE",{});var Rae=l(rw);vY=c(Rae,"key="),Rae.forEach(s),yY=c(Kp,", "),ow=o(Kp,"CODE",{});var Bae=l(ow);jY=c(Bae,"secret="),Bae.forEach(s),wY=c(Kp,") or with boto\u2019s credential methods. See botocore documentation for more information. If no credentials are available, use "),lw=o(Kp,"CODE",{});var Gae=l(lw);DY=c(Gae,"anon=True"),Gae.forEach(s),kY=c(Kp,"."),Kp.forEach(s),EY=h(V),iw=o(V,"P",{});var Hae=l(iw);qY=c(Hae,"Examples:"),Hae.forEach(s),IY=h(V),pw=o(V,"P",{});var Wae=l(pw);TY=c(Wae,"Listing files from public S3 bucket."),Wae.forEach(s),NY=h(V),b(mp.$$.fragment,V),PY=h(V),cr=o(V,"P",{});var T2=l(cr);FY=c(T2,"Listing files from private S3 bucket using "),cw=o(T2,"CODE",{});var Yae=l(cw);LY=c(Yae,"aws_access_key_id"),Yae.forEach(s),AY=c(T2," and "),dw=o(T2,"CODE",{});var Jae=l(dw);SY=c(Jae,"aws_secret_access_key"),Jae.forEach(s),CY=c(T2,"."),T2.forEach(s),OY=h(V),b(hp.$$.fragment,V),zY=h(V),is=o(V,"P",{});var Qp=l(is);VY=c(Qp,"Using "),mw=o(Qp,"CODE",{});var Kae=l(mw);UY=c(Kae,"S3Filesystem"),Kae.forEach(s),MY=c(Qp," with "),hw=o(Qp,"CODE",{});var Qae=l(hw);RY=c(Qae,"botocore.session.Session"),Qae.forEach(s),BY=c(Qp," and custom "),fw=o(Qp,"CODE",{});var Zae=l(fw);GY=c(Zae,"aws_profile"),Zae.forEach(s),HY=c(Qp,"."),Qp.forEach(s),WY=h(V),b(fp.$$.fragment,V),YY=h(V),dr=o(V,"P",{});var N2=l(dr);JY=c(N2,"Loading dataset from S3 using "),uw=o(N2,"CODE",{});var Xae=l(uw);KY=c(Xae,"S3Filesystem"),Xae.forEach(s),QY=c(N2," and "),N_=o(N2,"A",{href:!0});var ene=l(N_);ZY=c(ene,"load_from_disk()"),ene.forEach(s),XY=c(N2,"."),N2.forEach(s),eJ=h(V),b(up.$$.fragment,V),tJ=h(V),mr=o(V,"P",{});var P2=l(mr);sJ=c(P2,"Saving dataset to S3 using "),gw=o(P2,"CODE",{});var tne=l(gw);aJ=c(tne,"S3Filesystem"),tne.forEach(s),nJ=c(P2," and "),P_=o(P2,"A",{href:!0});var sne=l(P_);rJ=c(sne,"Dataset.save_to_disk()"),sne.forEach(s),oJ=c(P2,"."),P2.forEach(s),lJ=h(V),b(gp.$$.fragment,V),V.forEach(s),SD=h(a),hr=o(a,"DIV",{class:!0});var _4=l(hr);b(Zf.$$.fragment,_4),iJ=h(_4),fr=o(_4,"P",{});var F2=l(fr);pJ=c(F2,"preprocesses "),_w=o(F2,"EM",{});var ane=l(_w);cJ=c(ane,"dataset_path"),ane.forEach(s),dJ=c(F2," and removes remote filesystem (e.g. removing "),bw=o(F2,"CODE",{});var nne=l(bw);mJ=c(nne,"s3://"),nne.forEach(s),hJ=c(F2,")"),F2.forEach(s),_4.forEach(s),CD=h(a),ur=o(a,"DIV",{class:!0});var b4=l(ur);b(Xf.$$.fragment,b4),fJ=h(b4),$w=o(b4,"P",{});var rne=l($w);uJ=c(rne,"Validates if filesystem has remote protocol."),rne.forEach(s),b4.forEach(s),OD=h(a),gr=o(a,"H2",{class:!0});var $4=l(gr);_p=o($4,"A",{id:!0,class:!0,href:!0});var one=l(_p);xw=o(one,"SPAN",{});var lne=l(xw);b(eu.$$.fragment,lne),lne.forEach(s),one.forEach(s),gJ=h($4),vw=o($4,"SPAN",{});var ine=l(vw);_J=c(ine,"Fingerprint"),ine.forEach(s),$4.forEach(s),zD=h(a),_r=o(a,"DIV",{class:!0});var x4=l(_r);b(tu.$$.fragment,x4),bJ=h(x4),yw=o(x4,"P",{});var pne=l(yw);$J=c(pne,"Hasher that accepts python objects as inputs."),pne.forEach(s),x4.forEach(s),this.h()},h(){w(i,"name","hf:doc:metadata"),w(i,"content",JSON.stringify(Joe)),w(n,"id","main-classes"),w(n,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(n,"href","#main-classes"),w(f,"class","relative group"),w(be,"id","datasets.DatasetInfo"),w(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(be,"href","#datasets.DatasetInfo"),w(Ce,"class","relative group"),w($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Rr,"id","datasets.Dataset"),w(Rr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Rr,"href","#datasets.Dataset"),w(bn,"class","relative group"),w(yu,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"),w(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ju,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"),w(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wu,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"),w(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(so,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.__len__"),w(Ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ts,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Du,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.map"),w(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ns,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ps,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ls,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ku,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.set_format"),w(As,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Eu,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.set_transform"),w(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qu,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.set_format"),w(Iu,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.reset_format"),w(Ss,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Nu,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.with_transform"),w(Pu,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.set_format"),w(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fu,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.set_format"),w(Lu,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.reset_format"),w(Au,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.set_transform"),w(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Cs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Os,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Su,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Image"),w(Cu,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Audio"),w(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ou,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(zu,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Image"),w(Vu,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Audio"),w(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Uu,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(Vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ms,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Rs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Hs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(md,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),w(md,"rel","nofollow"),w(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(fd,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),w(fd,"rel","nofollow"),w(Ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(el,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Gu,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetInfo"),w(tl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Wu,"href","/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.NamedSplit"),w(sl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Yu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ju,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ku,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(tg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(sg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(rg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(og,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(lg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features"),w(ig,"href","./package_reference/task_templates"),w(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"),w(cg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"),w(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(dg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"),w(mg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDataset"),w(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(hg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(fg,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),w(ug,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),w(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(gg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(_g,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),w(bg,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),w(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($g,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(xg,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),w(vg,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),w(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ml,"id","datasets.DatasetDict"),w(ml,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(ml,"href","#datasets.DatasetDict"),w(An,"class","relative group"),w(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_l,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.__len__"),w(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Il,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(jg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.with_transform"),w(wg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetDict.set_format"),w(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Dg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.set_format"),w(kg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.reset_format"),w(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Eg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.map"),w($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.map"),w(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ig,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.map"),w(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Tg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Image"),w(Ng,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Audio"),w(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(Fg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Image"),w(Lg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Audio"),w(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ag,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Sg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features"),w(Cg,"href","./package_reference/task_templates"),w(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Og,"id","package_reference_features"),w(Wl,"id","datasets.IterableDataset"),w(Wl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Wl,"href","#datasets.IterableDataset"),w(Yn,"class","relative group"),w(zg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDataset"),w(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ug,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDataset.skip"),w(Mg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDataset.take"),w(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Bg,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetInfo"),w(oi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Hg,"href","/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.NamedSplit"),w(li,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(e_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(t_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(s_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(a_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(n_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(r_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ii,"id","datasets.IterableDatasetDict"),w(ii,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(ii,"href","#datasets.IterableDatasetDict"),w(Qn,"class","relative group"),w(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(o_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDataset.skip"),w(l_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.IterableDataset.take"),w(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(La,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($i,"id","datasets.Features"),w($i,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w($i,"href","#datasets.Features"),w(er,"class","relative group"),w(p_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Value"),w(c_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.ClassLabel"),w(d_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Sequence"),w(m_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Sequence"),w(h_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Array2D"),w(f_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Array3D"),w(u_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Array4D"),w(g_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Array5D"),w(__,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Audio"),w(b_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Image"),w($_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Translation"),w(x_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.TranslationVariableLanguages"),w(Ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ji,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Di,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ki,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ei,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ii,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(v_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.DatasetInfo"),w(y_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features.from_arrow_schema"),w(j_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Value"),w(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Oi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ts,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ss,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(as,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Hi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Wi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Yi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ji,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ep,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(tp,"id","datasets.MetricInfo"),w(tp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(tp,"href","#datasets.MetricInfo"),w(lr,"class","relative group"),w(Ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(np,"id","datasets.Metric"),w(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(np,"href","#datasets.Metric"),w(ir,"class","relative group"),w(T_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"),w(Ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(cp,"id","datasets.filesystems.S3FileSystem"),w(cp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(cp,"href","#datasets.filesystems.S3FileSystem"),w(pr,"class","relative group"),w(Qf,"href","https://s3fs.readthedocs.io/en/latest/api.html"),w(Qf,"rel","nofollow"),w(N_,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_from_disk"),w(P_,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_p,"id","datasets.fingerprint.Hasher"),w(_p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(_p,"href","#datasets.fingerprint.Hasher"),w(gr,"class","relative group"),w(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(a,j){e(document.head,i),D(a,g,j),D(a,f,j),e(f,n),e(n,u),$(t,u,null),e(f,d),e(f,gn),e(gn,$s),D(a,zr,j),D(a,Ce,j),e(Ce,be),e(be,ne),$(xs,ne,null),e(Ce,xu),e(Ce,Vr),e(Vr,v4),D(a,Q7,j),D(a,X,j),$(Zp,X,null),e(X,y4),e(X,L2),e(L2,j4),e(X,w4),e(X,vu),e(vu,A2),e(A2,D4),e(vu,k4),e(X,E4),e(X,S2),e(S2,q4),e(X,I4),e(X,$e),$(Xp,$e,null),e($e,T4),e($e,ec),e(ec,N4),e(ec,C2),e(C2,P4),e(ec,F4),e($e,L4),e($e,O2),e(O2,A4),e($e,S4),e($e,z2),e(z2,C4),e($e,O4),$(Ur,$e,null),e(X,z4),e(X,vs),$(tc,vs,null),e(vs,V4),e(vs,_n),e(_n,U4),e(_n,V2),e(V2,M4),e(_n,R4),e(_n,U2),e(U2,B4),e(_n,G4),e(vs,H4),$(Mr,vs,null),D(a,Z7,j),D(a,bn,j),e(bn,Rr),e(Rr,M2),$(sc,M2,null),e(bn,W4),e(bn,R2),e(R2,Y4),D(a,X7,j),D(a,Br,j),e(Br,J4),e(Br,yu),e(yu,K4),e(Br,Q4),D(a,eD,j),D(a,q,j),$(ac,q,null),e(q,Z4),e(q,B2),e(B2,X4),e(q,e3),e(q,st),$(nc,st,null),e(st,t3),e(st,G2),e(G2,s3),e(st,a3),e(st,H2),e(H2,W2),e(W2,n3),e(st,r3),$(Gr,st,null),e(q,o3),e(q,at),$(rc,at,null),e(at,l3),e(at,Y2),e(Y2,i3),e(at,p3),e(at,J2),e(J2,K2),e(K2,c3),e(at,d3),$(Hr,at,null),e(q,m3),e(q,Wr),$(oc,Wr,null),e(Wr,h3),e(Wr,Q2),e(Q2,f3),e(q,u3),e(q,Yr),$(lc,Yr,null),e(Yr,g3),e(Yr,Z2),e(Z2,_3),e(q,b3),e(q,xe),$(ic,xe,null),e(xe,$3),e(xe,Ct),e(Ct,x3),e(Ct,X2),e(X2,v3),e(Ct,y3),e(Ct,e$),e(e$,j3),e(Ct,w3),e(Ct,ju),e(ju,D3),e(Ct,k3),e(xe,E3),e(xe,pc),e(pc,q3),e(pc,t$),e(t$,I3),e(pc,T3),e(xe,N3),e(xe,cc),e(cc,P3),e(cc,s$),e(s$,F3),e(cc,L3),e(xe,A3),$(Jr,xe,null),e(q,S3),e(q,Kr),$(dc,Kr,null),e(Kr,C3),e(Kr,Ot),e(Ot,O3),e(Ot,a$),e(a$,z3),e(Ot,V3),e(Ot,n$),e(n$,U3),e(Ot,M3),e(Ot,wu),e(wu,R3),e(Ot,B3),e(q,G3),e(q,nt),$(mc,nt,null),e(nt,H3),e(nt,r$),e(r$,W3),e(nt,Y3),$(Qr,nt,null),e(nt,J3),$(Zr,nt,null),e(q,K3),e(q,ys),$(hc,ys,null),e(ys,Q3),e(ys,o$),e(o$,Z3),e(ys,X3),$(Xr,ys,null),e(q,eE),e(q,js),$(fc,js,null),e(js,tE),e(js,l$),e(l$,sE),e(js,aE),$(eo,js,null),e(q,nE),e(q,ws),$(uc,ws,null),e(ws,rE),e(ws,i$),e(i$,oE),e(ws,lE),$(to,ws,null),e(q,iE),e(q,Ds),$(gc,Ds,null),e(Ds,pE),e(Ds,_c),e(_c,cE),e(_c,so),e(so,dE),e(so,p$),e(p$,mE),e(so,hE),e(_c,fE),e(Ds,uE),$(ao,Ds,null),e(q,gE),e(q,ks),$(bc,ks,null),e(ks,_E),e(ks,c$),e(c$,bE),e(ks,$E),$(no,ks,null),e(q,xE),e(q,Es),$($c,Es,null),e(Es,vE),e(Es,d$),e(d$,yE),e(Es,jE),$(ro,Es,null),e(q,wE),e(q,rt),$(xc,rt,null),e(rt,DE),e(rt,m$),e(m$,kE),e(rt,EE),e(rt,h$),e(h$,qE),e(rt,IE),$(oo,rt,null),e(q,TE),e(q,qs),$(vc,qs,null),e(qs,NE),e(qs,f$),e(f$,PE),e(qs,FE),$(lo,qs,null),e(q,LE),e(q,Is),$(yc,Is,null),e(Is,AE),e(Is,u$),e(u$,SE),e(Is,CE),$(io,Is,null),e(q,OE),e(q,Ts),$(jc,Ts,null),e(Ts,zE),e(Ts,g$),e(g$,VE),e(Ts,UE),$(po,Ts,null),e(q,ME),e(q,ot),$(wc,ot,null),e(ot,RE),e(ot,_$),e(_$,BE),e(ot,GE),e(ot,$n),e($n,HE),e($n,Du),e(Du,WE),e($n,YE),e($n,b$),e(b$,JE),e($n,KE),e(ot,QE),$(co,ot,null),e(q,ZE),e(q,Ns),$(Dc,Ns,null),e(Ns,XE),e(Ns,$$),e($$,e5),e(Ns,t5),$(mo,Ns,null),e(q,s5),e(q,Ps),$(kc,Ps,null),e(Ps,a5),e(Ps,x$),e(x$,n5),e(Ps,r5),$(ho,Ps,null),e(q,o5),e(q,Fs),$(Ec,Fs,null),e(Fs,l5),e(Fs,qc),e(qc,i5),e(qc,v$),e(v$,p5),e(qc,c5),e(Fs,d5),$(fo,Fs,null),e(q,m5),e(q,Ls),$(Ic,Ls,null),e(Ls,h5),e(Ls,y$),e(y$,f5),e(Ls,u5),$(uo,Ls,null),e(q,g5),e(q,As),$(Tc,As,null),e(As,_5),e(As,j$),e(j$,b5),e(As,$5),e(As,Nc),e(Nc,x5),e(Nc,ku),e(ku,v5),e(Nc,y5),e(q,j5),e(q,go),$(Pc,go,null),e(go,w5),e(go,xn),e(xn,D5),e(xn,w$),e(w$,k5),e(xn,E5),e(xn,D$),e(D$,q5),e(xn,I5),e(q,T5),e(q,ve),$(Fc,ve,null),e(ve,N5),e(ve,Oe),e(Oe,P5),e(Oe,k$),e(k$,F5),e(Oe,L5),e(Oe,E$),e(E$,A5),e(Oe,S5),e(Oe,q$),e(q$,C5),e(Oe,O5),e(Oe,Eu),e(Eu,z5),e(Oe,V5),e(ve,U5),e(ve,ze),e(ze,M5),e(ze,I$),e(I$,R5),e(ze,B5),e(ze,T$),e(T$,G5),e(ze,H5),e(ze,N$),e(N$,W5),e(ze,Y5),e(ze,P$),e(P$,J5),e(ze,K5),e(ve,Q5),e(ve,F$),e(F$,Z5),e(ve,X5),$(_o,ve,null),e(q,e6),e(q,Ss),$(Lc,Ss,null),e(Ss,t6),e(Ss,lt),e(lt,s6),e(lt,L$),e(L$,a6),e(lt,n6),e(lt,A$),e(A$,r6),e(lt,o6),e(lt,qu),e(qu,l6),e(lt,i6),e(lt,Iu),e(Iu,p6),e(Ss,c6),$(bo,Ss,null),e(q,d6),e(q,it),$(Ac,it,null),e(it,m6),e(it,Sc),e(Sc,h6),e(Sc,S$),e(S$,f6),e(Sc,u6),e(it,g6),e(it,Tu),e(Tu,_6),e(Tu,C$),e(C$,b6),e(it,$6),$($o,it,null),e(q,x6),e(q,ye),$(Cc,ye,null),e(ye,v6),e(ye,zt),e(zt,y6),e(zt,O$),e(O$,j6),e(zt,w6),e(zt,z$),e(z$,D6),e(zt,k6),e(zt,V$),e(V$,E6),e(zt,q6),e(ye,I6),e(ye,Oc),e(Oc,T6),e(Oc,Nu),e(Nu,N6),e(Oc,P6),e(ye,F6),e(ye,vn),e(vn,L6),e(vn,Pu),e(Pu,A6),e(vn,S6),e(vn,U$),e(U$,C6),e(vn,O6),e(ye,z6),$(xo,ye,null),e(q,V6),e(q,je),$(zc,je,null),e(je,U6),e(je,yn),e(yn,M6),e(yn,M$),e(M$,R6),e(yn,B6),e(yn,R$),e(R$,G6),e(yn,H6),e(je,W6),e(je,jn),e(jn,Y6),e(jn,Fu),e(Fu,J6),e(jn,K6),e(jn,Lu),e(Lu,Q6),e(jn,Z6),e(je,X6),e(je,wn),e(wn,e8),e(wn,Au),e(Au,t8),e(wn,s8),e(wn,B$),e(B$,a8),e(wn,n8),e(je,r8),$(vo,je,null),e(q,o8),e(q,yo),$(Vc,yo,null),e(yo,l8),e(yo,G$),e(G$,i8),e(q,p8),e(q,pt),$(Uc,pt,null),e(pt,c8),e(pt,H$),e(H$,d8),e(pt,m8),e(pt,W$),e(W$,h8),e(pt,f8),$(jo,pt,null),e(q,u8),e(q,we),$(Mc,we,null),e(we,g8),e(we,Y$),e(Y$,_8),e(we,b8),e(we,Rc),e(Rc,$8),e(Rc,J$),e(J$,x8),e(Rc,v8),e(we,y8),e(we,Dn),e(Dn,K$),e(K$,j8),e(Dn,w8),e(Dn,Q$),e(Q$,D8),e(Dn,k8),e(Dn,de),e(de,E8),e(de,Z$),e(Z$,q8),e(de,I8),e(de,X$),e(X$,T8),e(de,N8),e(de,e1),e(e1,P8),e(de,F8),e(de,t1),e(t1,L8),e(de,A8),e(de,s1),e(s1,S8),e(de,C8),e(we,O8),$(wo,we,null),e(q,z8),e(q,Cs),$(Bc,Cs,null),e(Cs,V8),e(Cs,a1),e(a1,U8),e(Cs,M8),$(Do,Cs,null),e(q,R8),e(q,Os),$(Gc,Os,null),e(Os,B8),e(Os,n1),e(n1,G8),e(Os,H8),$(ko,Os,null),e(q,W8),e(q,ct),$(Hc,ct,null),e(ct,Y8),e(ct,r1),e(r1,J8),e(ct,K8),e(ct,o1),e(o1,Q8),e(ct,Z8),$(Eo,ct,null),e(q,X8),e(q,dt),$(Wc,dt,null),e(dt,eq),e(dt,l1),e(l1,tq),e(dt,sq),e(dt,i1),e(i1,aq),e(dt,nq),$(qo,dt,null),e(q,rq),e(q,mt),$(Yc,mt,null),e(mt,oq),e(mt,Y),e(Y,lq),e(Y,p1),e(p1,iq),e(Y,pq),e(Y,c1),e(c1,cq),e(Y,dq),e(Y,d1),e(d1,mq),e(Y,hq),e(Y,m1),e(m1,fq),e(Y,uq),e(Y,h1),e(h1,gq),e(Y,_q),e(Y,f1),e(f1,bq),e(Y,$q),e(Y,u1),e(u1,xq),e(Y,vq),e(mt,yq),e(mt,Jc),e(Jc,jq),e(Jc,g1),e(g1,wq),e(Jc,Dq),e(mt,kq),$(Io,mt,null),e(q,Eq),e(q,re),$(Kc,re,null),e(re,qq),e(re,kn),e(kn,Iq),e(kn,_1),e(_1,Tq),e(kn,Nq),e(kn,b1),e(b1,Pq),e(kn,Fq),e(re,Lq),e(re,$1),e($1,Aq),e(re,Sq),e(re,Qc),e(Qc,Cq),e(Qc,x1),e(x1,Oq),e(Qc,zq),e(re,Vq),e(re,v1),e(v1,Uq),e(re,Mq),$(To,re,null),e(q,Rq),e(q,zs),$(Zc,zs,null),e(zs,Bq),e(zs,y1),e(y1,Gq),e(zs,Hq),$(No,zs,null),e(q,Wq),e(q,ht),$(Xc,ht,null),e(ht,Yq),e(ht,j1),e(j1,Jq),e(ht,Kq),e(ht,Vt),e(Vt,Qq),e(Vt,Su),e(Su,Zq),e(Vt,Xq),e(Vt,Cu),e(Cu,e9),e(Vt,t9),e(Vt,w1),e(w1,s9),e(Vt,a9),e(ht,n9),$(Po,ht,null),e(q,r9),e(q,Q),$(ed,Q,null),e(Q,o9),e(Q,En),e(En,l9),e(En,Ou),e(Ou,i9),e(En,p9),e(En,D1),e(D1,c9),e(En,d9),e(Q,m9),e(Q,qn),e(qn,h9),e(qn,zu),e(zu,f9),e(qn,u9),e(qn,Vu),e(Vu,g9),e(qn,_9),e(Q,b9),e(Q,td),e(td,$9),e(td,k1),e(k1,x9),e(td,v9),e(Q,y9),$(Fo,Q,null),e(Q,j9),$(Lo,Q,null),e(Q,w9),$(Ao,Q,null),e(q,D9),e(q,Vs),$(sd,Vs,null),e(Vs,k9),e(Vs,Ut),e(Ut,E9),e(Ut,E1),e(E1,q9),e(Ut,I9),e(Ut,Uu),e(Uu,T9),e(Ut,N9),e(Ut,q1),e(q1,P9),e(Ut,F9),e(Vs,L9),$(So,Vs,null),e(q,A9),e(q,Co),$(ad,Co,null),e(Co,S9),e(Co,I1),e(I1,C9),e(q,O9),e(q,Us),$(nd,Us,null),e(Us,z9),e(Us,T1),e(T1,V9),e(Us,U9),$(Oo,Us,null),e(q,M9),e(q,Ms),$(rd,Ms,null),e(Ms,R9),e(Ms,od),e(od,B9),e(od,N1),e(N1,G9),e(od,H9),e(Ms,W9),$(zo,Ms,null),e(q,Y9),e(q,Rs),$(ld,Rs,null),e(Rs,J9),e(Rs,P1),e(P1,K9),e(Rs,Q9),$(Vo,Rs,null),e(q,Z9),e(q,Bs),$(id,Bs,null),e(Bs,X9),e(Bs,F1),e(F1,eI),e(Bs,tI),$(Uo,Bs,null),e(q,sI),e(q,Gs),$(pd,Gs,null),e(Gs,aI),e(Gs,L1),e(L1,nI),e(Gs,rI),$(Mo,Gs,null),e(q,oI),e(q,Hs),$(cd,Hs,null),e(Hs,lI),e(Hs,A1),e(A1,iI),e(Hs,pI),$(Ro,Hs,null),e(q,cI),e(q,ft),$(dd,ft,null),e(ft,dI),e(ft,In),e(In,mI),e(In,S1),e(S1,hI),e(In,fI),e(In,C1),e(C1,uI),e(In,gI),e(ft,_I),e(ft,O1),e(O1,Mu),e(Mu,bI),e(Mu,md),e(md,$I),e(ft,xI),$(Bo,ft,null),e(q,vI),e(q,Ws),$(hd,Ws,null),e(Ws,yI),e(Ws,Mt),e(Mt,jI),e(Mt,z1),e(z1,wI),e(Mt,DI),e(Mt,V1),e(V1,kI),e(Mt,EI),e(Mt,U1),e(U1,qI),e(Mt,II),e(Ws,TI),e(Ws,M1),e(M1,Ru),e(Ru,NI),e(Ru,fd),e(fd,PI),e(q,FI),e(q,Go),$(ud,Go,null),e(Go,LI),e(Go,R1),e(R1,AI),e(q,SI),e(q,Ys),$(gd,Ys,null),e(Ys,CI),e(Ys,B1),e(B1,OI),e(Ys,zI),e(Ys,_d),e(_d,VI),e(_d,G1),e(G1,UI),e(_d,MI),e(q,RI),e(q,Js),$(bd,Js,null),e(Js,BI),e(Js,H1),e(H1,GI),e(Js,HI),$(Ho,Js,null),e(q,WI),e(q,Ks),$($d,Ks,null),e(Ks,YI),e(Ks,W1),e(W1,JI),e(Ks,KI),$(Wo,Ks,null),e(q,QI),e(q,Yo),$(xd,Yo,null),e(Yo,ZI),e(Yo,Y1),e(Y1,XI),e(q,eT),e(q,Jo),$(vd,Jo,null),e(Jo,tT),e(Jo,J1),e(J1,sT),e(q,aT),e(q,Ko),$(yd,Ko,null),e(Ko,nT),e(Ko,K1),e(K1,rT),e(q,oT),e(q,Qo),$(jd,Qo,null),e(Qo,lT),e(Qo,Q1),e(Q1,iT),e(q,pT),e(q,Zo),$(wd,Zo,null),e(Zo,cT),e(Zo,Z1),e(Z1,dT),e(q,mT),e(q,Xo),$(Dd,Xo,null),e(Xo,hT),e(Xo,X1),e(X1,fT),e(q,uT),e(q,el),$(kd,el,null),e(el,gT),e(el,ex),e(ex,_T),e(q,bT),e(q,tl),$(Ed,tl,null),e(tl,$T),e(tl,Bu),e(Bu,Gu),e(Gu,xT),e(Bu,vT),e(q,yT),e(q,sl),$(qd,sl,null),e(sl,jT),e(sl,Hu),e(Hu,Wu),e(Wu,wT),e(Hu,DT),e(q,kT),e(q,Yu),$(Id,Yu,null),e(q,ET),e(q,Ju),$(Td,Ju,null),e(q,qT),e(q,Ku),$(Nd,Ku,null),e(q,IT),e(q,Qu),$(Pd,Qu,null),e(q,TT),e(q,Zu),$(Fd,Zu,null),e(q,NT),e(q,Xu),$(Ld,Xu,null),e(q,PT),e(q,eg),$(Ad,eg,null),e(q,FT),e(q,tg),$(Sd,tg,null),e(q,LT),e(q,sg),$(Cd,sg,null),e(q,AT),e(q,ag),$(Od,ag,null),e(q,ST),e(q,ng),$(zd,ng,null),e(q,CT),e(q,rg),$(Vd,rg,null),e(q,OT),e(q,og),$(Ud,og,null),e(q,zT),e(q,Qs),$(Md,Qs,null),e(Qs,VT),e(Qs,tx),e(tx,UT),e(Qs,MT),$(al,Qs,null),e(q,RT),e(q,Zs),$(Rd,Zs,null),e(Zs,BT),e(Zs,sx),e(sx,GT),e(Zs,HT),$(nl,Zs,null),e(q,WT),e(q,Xs),$(Bd,Xs,null),e(Xs,YT),e(Xs,ax),e(ax,JT),e(Xs,KT),$(rl,Xs,null),e(q,QT),e(q,ea),$(Gd,ea,null),e(ea,ZT),e(ea,nx),e(nx,XT),e(ea,eN),$(ol,ea,null),e(q,tN),e(q,ut),$(Hd,ut,null),e(ut,sN),e(ut,rx),e(rx,aN),e(ut,nN),$(ll,ut,null),e(ut,rN),$(il,ut,null),e(q,oN),e(q,ta),$(Wd,ta,null),e(ta,lN),e(ta,Tn),e(Tn,iN),e(Tn,lg),e(lg,pN),e(Tn,cN),e(Tn,ig),e(ig,ox),e(ox,dN),e(Tn,mN),e(ta,hN),e(ta,Nn),e(Nn,fN),e(Nn,lx),e(lx,uN),e(Nn,gN),e(Nn,ix),e(ix,_N),e(Nn,bN),e(q,$N),e(q,sa),$(Yd,sa,null),e(sa,xN),e(sa,Jd),e(Jd,vN),e(Jd,px),e(px,yN),e(Jd,jN),e(sa,wN),$(pl,sa,null),D(a,tD,j),D(a,Rt,j),$(Kd,Rt,null),e(Rt,DN),e(Rt,Pn),e(Pn,kN),e(Pn,pg),e(pg,EN),e(Pn,qN),e(Pn,cg),e(cg,IN),e(Pn,TN),e(Rt,NN),$(cl,Rt,null),D(a,sD,j),D(a,ee,j),$(Qd,ee,null),e(ee,PN),e(ee,cx),e(cx,FN),e(ee,LN),e(ee,Fn),e(Fn,AN),e(Fn,dg),e(dg,SN),e(Fn,CN),e(Fn,mg),e(mg,ON),e(Fn,zN),e(ee,VN),e(ee,Ve),e(Ve,UN),e(Ve,dx),e(dx,MN),e(Ve,RN),e(Ve,mx),e(mx,BN),e(Ve,GN),e(Ve,hx),e(hx,HN),e(Ve,WN),e(Ve,fx),e(fx,YN),e(Ve,JN),e(ee,KN),e(ee,Ln),e(Ln,QN),e(Ln,ux),e(ux,ZN),e(Ln,XN),e(Ln,gx),e(gx,eP),e(Ln,tP),e(ee,sP),$(dl,ee,null),D(a,aD,j),D(a,me,j),$(Zd,me,null),e(me,aP),e(me,_x),e(_x,nP),e(me,rP),e(me,bx),e(bx,oP),e(me,lP),e(me,$x),e($x,iP),e(me,pP),e(me,Ue),e(Ue,xx),e(xx,cP),e(Ue,dP),e(Ue,vx),e(vx,mP),e(Ue,hP),e(Ue,yx),e(yx,fP),e(Ue,uP),e(Ue,Xd),e(Xd,gP),e(Xd,hg),e(hg,_P),e(Xd,bP),e(Ue,$P),e(Ue,Bt),e(Bt,xP),e(Bt,fg),e(fg,vP),e(Bt,yP),e(Bt,jx),e(jx,jP),e(Bt,wP),e(Bt,ug),e(ug,DP),e(Bt,kP),D(a,nD,j),D(a,he,j),$(em,he,null),e(he,EP),e(he,wx),e(wx,qP),e(he,IP),e(he,Dx),e(Dx,TP),e(he,NP),e(he,kx),e(kx,PP),e(he,FP),e(he,Me),e(Me,Ex),e(Ex,LP),e(Me,AP),e(Me,qx),e(qx,SP),e(Me,CP),e(Me,Ix),e(Ix,OP),e(Me,zP),e(Me,tm),e(tm,VP),e(tm,gg),e(gg,UP),e(tm,MP),e(Me,RP),e(Me,Gt),e(Gt,BP),e(Gt,_g),e(_g,GP),e(Gt,HP),e(Gt,Tx),e(Tx,WP),e(Gt,YP),e(Gt,bg),e(bg,JP),e(Gt,KP),D(a,rD,j),D(a,fe,j),$(sm,fe,null),e(fe,QP),e(fe,Nx),e(Nx,ZP),e(fe,XP),e(fe,Px),e(Px,eF),e(fe,tF),e(fe,Fx),e(Fx,sF),e(fe,aF),e(fe,Re),e(Re,Lx),e(Lx,nF),e(Re,rF),e(Re,Ax),e(Ax,oF),e(Re,lF),e(Re,Sx),e(Sx,iF),e(Re,pF),e(Re,am),e(am,cF),e(am,$g),e($g,dF),e(am,mF),e(Re,hF),e(Re,Ht),e(Ht,fF),e(Ht,xg),e(xg,uF),e(Ht,gF),e(Ht,Cx),e(Cx,_F),e(Ht,bF),e(Ht,vg),e(vg,$F),e(Ht,xF),D(a,oD,j),D(a,An,j),e(An,ml),e(ml,Ox),$(nm,Ox,null),e(An,vF),e(An,zx),e(zx,yF),D(a,lD,j),D(a,hl,j),e(hl,jF),e(hl,Vx),e(Vx,wF),e(hl,DF),D(a,iD,j),D(a,F,j),$(rm,F,null),e(F,kF),e(F,Ux),e(Ux,EF),e(F,qF),e(F,aa),$(om,aa,null),e(aa,IF),e(aa,Mx),e(Mx,TF),e(aa,NF),$(fl,aa,null),e(F,PF),e(F,na),$(lm,na,null),e(na,FF),e(na,Rx),e(Rx,LF),e(na,AF),$(ul,na,null),e(F,SF),e(F,ra),$(im,ra,null),e(ra,CF),e(ra,Bx),e(Bx,OF),e(ra,zF),$(gl,ra,null),e(F,VF),e(F,oa),$(pm,oa,null),e(oa,UF),e(oa,cm),e(cm,MF),e(cm,_l),e(_l,RF),e(_l,Gx),e(Gx,BF),e(_l,GF),e(cm,HF),e(oa,WF),$(bl,oa,null),e(F,YF),e(F,la),$(dm,la,null),e(la,JF),e(la,Hx),e(Hx,KF),e(la,QF),$($l,la,null),e(F,ZF),e(F,ia),$(mm,ia,null),e(ia,XF),e(ia,Wx),e(Wx,eL),e(ia,tL),$(xl,ia,null),e(F,sL),e(F,gt),$(hm,gt,null),e(gt,aL),e(gt,Yx),e(Yx,nL),e(gt,rL),e(gt,Jx),e(Jx,oL),e(gt,lL),$(vl,gt,null),e(F,iL),e(F,pa),$(fm,pa,null),e(pa,pL),e(pa,Kx),e(Kx,cL),e(pa,dL),$(yl,pa,null),e(F,mL),e(F,ca),$(um,ca,null),e(ca,hL),e(ca,Qx),e(Qx,fL),e(ca,uL),$(jl,ca,null),e(F,gL),e(F,da),$(gm,da,null),e(da,_L),e(da,Zx),e(Zx,bL),e(da,$L),$(wl,da,null),e(F,xL),e(F,_t),$(_m,_t,null),e(_t,vL),e(_t,Xx),e(Xx,yL),e(_t,jL),e(_t,ev),e(ev,wL),e(_t,DL),$(Dl,_t,null),e(F,kL),e(F,De),$(bm,De,null),e(De,EL),e(De,tv),e(tv,qL),e(De,IL),e(De,sv),e(sv,TL),e(De,NL),e(De,av),e(av,PL),e(De,FL),$(kl,De,null),e(F,LL),e(F,ke),$($m,ke,null),e(ke,AL),e(ke,xm),e(xm,SL),e(xm,nv),e(nv,CL),e(xm,OL),e(ke,zL),e(ke,Be),e(Be,VL),e(Be,rv),e(rv,UL),e(Be,ML),e(Be,ov),e(ov,RL),e(Be,BL),e(Be,lv),e(lv,GL),e(Be,HL),e(Be,iv),e(iv,WL),e(Be,YL),e(ke,JL),e(ke,pv),e(pv,KL),e(ke,QL),$(El,ke,null),e(F,ZL),e(F,bt),$(vm,bt,null),e(bt,XL),e(bt,ym),e(ym,eA),e(ym,cv),e(cv,tA),e(ym,sA),e(bt,aA),e(bt,yg),e(yg,nA),e(yg,dv),e(dv,rA),e(bt,oA),$(ql,bt,null),e(F,lA),e(F,Il),$(jm,Il,null),e(Il,iA),e(Il,Sn),e(Sn,pA),e(Sn,mv),e(mv,cA),e(Sn,dA),e(Sn,hv),e(hv,mA),e(Sn,hA),e(F,fA),e(F,Ee),$(wm,Ee,null),e(Ee,uA),e(Ee,Wt),e(Wt,gA),e(Wt,fv),e(fv,_A),e(Wt,bA),e(Wt,uv),e(uv,$A),e(Wt,xA),e(Wt,gv),e(gv,vA),e(Wt,yA),e(Ee,jA),e(Ee,Dm),e(Dm,wA),e(Dm,jg),e(jg,DA),e(Dm,kA),e(Ee,EA),e(Ee,Cn),e(Cn,qA),e(Cn,wg),e(wg,IA),e(Cn,TA),e(Cn,_v),e(_v,NA),e(Cn,PA),e(Ee,FA),$(Tl,Ee,null),e(F,LA),e(F,qe),$(km,qe,null),e(qe,AA),e(qe,On),e(On,SA),e(On,bv),e(bv,CA),e(On,OA),e(On,$v),e($v,zA),e(On,VA),e(qe,UA),e(qe,zn),e(zn,MA),e(zn,Dg),e(Dg,RA),e(zn,BA),e(zn,kg),e(kg,GA),e(zn,HA),e(qe,WA),e(qe,Vn),e(Vn,YA),e(Vn,xv),e(xv,JA),e(Vn,KA),e(Vn,vv),e(vv,QA),e(Vn,ZA),e(qe,XA),$(Nl,qe,null),e(F,eS),e(F,ma),$(Em,ma,null),e(ma,tS),e(ma,yv),e(yv,sS),e(ma,aS),$(Pl,ma,null),e(F,nS),e(F,$t),$(qm,$t,null),e($t,rS),e($t,jv),e(jv,oS),e($t,lS),e($t,Yt),e(Yt,iS),e(Yt,Eg),e(Eg,pS),e(Yt,cS),e(Yt,wv),e(wv,dS),e(Yt,mS),e(Yt,Dv),e(Dv,hS),e(Yt,fS),e($t,uS),$(Fl,$t,null),e(F,gS),e(F,ha),$(Im,ha,null),e(ha,_S),e(ha,kv),e(kv,bS),e(ha,$S),$(Ll,ha,null),e(F,xS),e(F,Ie),$(Tm,Ie,null),e(Ie,vS),e(Ie,Ev),e(Ev,yS),e(Ie,jS),e(Ie,qv),e(qv,wS),e(Ie,DS),e(Ie,Un),e(Un,kS),e(Un,qg),e(qg,ES),e(Un,qS),e(Un,Iv),e(Iv,IS),e(Un,TS),e(Ie,NS),$(Al,Ie,null),e(F,PS),e(F,Te),$(Nm,Te,null),e(Te,FS),e(Te,Tv),e(Tv,LS),e(Te,AS),e(Te,Mn),e(Mn,SS),e(Mn,Ig),e(Ig,CS),e(Mn,OS),e(Mn,Nv),e(Nv,zS),e(Mn,VS),e(Te,US),e(Te,Pm),e(Pm,Pv),e(Pv,MS),e(Pm,RS),e(Pm,Fv),e(Fv,BS),e(Te,GS),$(Sl,Te,null),e(F,HS),e(F,fa),$(Fm,fa,null),e(fa,WS),e(fa,Lv),e(Lv,YS),e(fa,JS),$(Cl,fa,null),e(F,KS),e(F,ua),$(Lm,ua,null),e(ua,QS),e(ua,Am),e(Am,ZS),e(Am,Av),e(Av,XS),e(Am,eC),e(ua,tC),$(Ol,ua,null),e(F,sC),e(F,Ne),$(Sm,Ne,null),e(Ne,aC),e(Ne,Rn),e(Rn,nC),e(Rn,Sv),e(Sv,rC),e(Rn,oC),e(Rn,Cv),e(Cv,lC),e(Rn,iC),e(Ne,pC),e(Ne,Ov),e(Ov,cC),e(Ne,dC),e(Ne,Jt),e(Jt,mC),e(Jt,Tg),e(Tg,hC),e(Jt,fC),e(Jt,Ng),e(Ng,uC),e(Jt,gC),e(Jt,zv),e(zv,_C),e(Jt,bC),e(Ne,$C),$(zl,Ne,null),e(F,xC),e(F,oe),$(Cm,oe,null),e(oe,vC),e(oe,Bn),e(Bn,yC),e(Bn,Pg),e(Pg,jC),e(Bn,wC),e(Bn,Vv),e(Vv,DC),e(Bn,kC),e(oe,EC),e(oe,Gn),e(Gn,qC),e(Gn,Fg),e(Fg,IC),e(Gn,TC),e(Gn,Lg),e(Lg,NC),e(Gn,PC),e(oe,FC),e(oe,Om),e(Om,LC),e(Om,Uv),e(Uv,AC),e(Om,SC),e(oe,CC),$(Vl,oe,null),e(oe,OC),$(Ul,oe,null),e(F,zC),e(F,ga),$(zm,ga,null),e(ga,VC),e(ga,Kt),e(Kt,UC),e(Kt,Mv),e(Mv,MC),e(Kt,RC),e(Kt,Ag),e(Ag,BC),e(Kt,GC),e(Kt,Rv),e(Rv,HC),e(Kt,WC),e(ga,YC),$(Ml,ga,null),e(F,JC),e(F,_a),$(Vm,_a,null),e(_a,KC),e(_a,Bv),e(Bv,QC),e(_a,ZC),$(Rl,_a,null),e(F,XC),e(F,ba),$(Um,ba,null),e(ba,eO),e(ba,Gv),e(Gv,tO),e(ba,sO),$(Bl,ba,null),e(F,aO),e(F,$a),$(Mm,$a,null),e($a,nO),e($a,Hv),e(Hv,rO),e($a,oO),$(Gl,$a,null),e(F,lO),e(F,xa),$(Rm,xa,null),e(xa,iO),e(xa,Wv),e(Wv,pO),e(xa,cO),$(Hl,xa,null),e(F,dO),e(F,va),$(Bm,va,null),e(va,mO),e(va,Hn),e(Hn,hO),e(Hn,Sg),e(Sg,fO),e(Hn,uO),e(Hn,Cg),e(Cg,Yv),e(Yv,gO),e(Hn,_O),e(va,bO),e(va,Wn),e(Wn,$O),e(Wn,Jv),e(Jv,xO),e(Wn,vO),e(Wn,Kv),e(Kv,yO),e(Wn,jO),D(a,pD,j),D(a,Og,j),D(a,cD,j),D(a,Yn,j),e(Yn,Wl),e(Wl,Qv),$(Gm,Qv,null),e(Yn,wO),e(Yn,Zv),e(Zv,DO),D(a,dD,j),D(a,Yl,j),e(Yl,kO),e(Yl,zg),e(zg,EO),e(Yl,qO),D(a,mD,j),D(a,A,j),$(Hm,A,null),e(A,IO),e(A,Xv),e(Xv,TO),e(A,NO),e(A,xt),$(Wm,xt,null),e(xt,PO),e(xt,ey),e(ey,FO),e(xt,LO),$(Jl,xt,null),e(xt,AO),$(Kl,xt,null),e(A,SO),e(A,ya),$(Ym,ya,null),e(ya,CO),e(ya,ty),e(ty,OO),e(ya,zO),$(Ql,ya,null),e(A,VO),e(A,ja),$(Jm,ja,null),e(ja,UO),e(ja,sy),e(sy,MO),e(ja,RO),$(Zl,ja,null),e(A,BO),e(A,wa),$(Km,wa,null),e(wa,GO),e(wa,ay),e(ay,HO),e(wa,WO),$(Xl,wa,null),e(A,YO),e(A,Vg),$(Qm,Vg,null),e(A,JO),e(A,Pe),$(Zm,Pe,null),e(Pe,KO),e(Pe,ny),e(ny,QO),e(Pe,ZO),e(Pe,Xm),e(Xm,XO),e(Xm,ry),e(ry,ez),e(Xm,tz),e(Pe,sz),e(Pe,Jn),e(Jn,oy),e(oy,az),e(Jn,nz),e(Jn,ly),e(ly,rz),e(Jn,oz),e(Jn,ue),e(ue,lz),e(ue,iy),e(iy,iz),e(ue,pz),e(ue,py),e(py,cz),e(ue,dz),e(ue,cy),e(cy,mz),e(ue,hz),e(ue,dy),e(dy,fz),e(ue,uz),e(ue,my),e(my,gz),e(ue,_z),e(Pe,bz),$(ei,Pe,null),e(A,$z),e(A,Da),$(eh,Da,null),e(Da,xz),e(Da,hy),e(hy,vz),e(Da,yz),$(ti,Da,null),e(A,jz),e(A,ka),$(th,ka,null),e(ka,wz),e(ka,fy),e(fy,Dz),e(ka,kz),$(si,ka,null),e(A,Ez),e(A,le),$(sh,le,null),e(le,qz),e(le,uy),e(uy,Iz),e(le,Tz),e(le,gy),e(gy,Nz),e(le,Pz),e(le,ah),e(ah,Fz),e(ah,_y),e(_y,Lz),e(ah,Az),e(le,Sz),e(le,Kn),e(Kn,Cz),e(Kn,Ug),e(Ug,Oz),e(Kn,zz),e(Kn,Mg),e(Mg,Vz),e(Kn,Uz),e(le,Mz),$(ai,le,null),e(A,Rz),e(A,Ea),$(nh,Ea,null),e(Ea,Bz),e(Ea,rh),e(rh,Gz),e(rh,by),e(by,Hz),e(rh,Wz),e(Ea,Yz),$(ni,Ea,null),e(A,Jz),e(A,qa),$(oh,qa,null),e(qa,Kz),e(qa,lh),e(lh,Qz),e(lh,$y),e($y,Zz),e(lh,Xz),e(qa,eV),$(ri,qa,null),e(A,tV),e(A,oi),$(ih,oi,null),e(oi,sV),e(oi,Rg),e(Rg,Bg),e(Bg,aV),e(Rg,nV),e(A,rV),e(A,li),$(ph,li,null),e(li,oV),e(li,Gg),e(Gg,Hg),e(Hg,lV),e(Gg,iV),e(A,pV),e(A,Wg),$(ch,Wg,null),e(A,cV),e(A,Yg),$(dh,Yg,null),e(A,dV),e(A,Jg),$(mh,Jg,null),e(A,mV),e(A,Kg),$(hh,Kg,null),e(A,hV),e(A,Qg),$(fh,Qg,null),e(A,fV),e(A,Zg),$(uh,Zg,null),e(A,uV),e(A,Xg),$(gh,Xg,null),e(A,gV),e(A,e_),$(_h,e_,null),e(A,_V),e(A,t_),$(bh,t_,null),e(A,bV),e(A,s_),$($h,s_,null),e(A,$V),e(A,a_),$(xh,a_,null),e(A,xV),e(A,n_),$(vh,n_,null),e(A,vV),e(A,r_),$(yh,r_,null),D(a,hD,j),D(a,Qn,j),e(Qn,ii),e(ii,xy),$(jh,xy,null),e(Qn,yV),e(Qn,vy),e(vy,jV),D(a,fD,j),D(a,pi,j),e(pi,wV),e(pi,yy),e(yy,DV),e(pi,kV),D(a,uD,j),D(a,U,j),$(wh,U,null),e(U,EV),e(U,Fe),$(Dh,Fe,null),e(Fe,qV),e(Fe,jy),e(jy,IV),e(Fe,TV),e(Fe,kh),e(kh,NV),e(kh,wy),e(wy,PV),e(kh,FV),e(Fe,LV),e(Fe,Zn),e(Zn,Dy),e(Dy,AV),e(Zn,SV),e(Zn,ky),e(ky,CV),e(Zn,OV),e(Zn,ge),e(ge,zV),e(ge,Ey),e(Ey,VV),e(ge,UV),e(ge,qy),e(qy,MV),e(ge,RV),e(ge,Iy),e(Iy,BV),e(ge,GV),e(ge,Ty),e(Ty,HV),e(ge,WV),e(ge,Ny),e(Ny,YV),e(ge,JV),e(Fe,KV),$(ci,Fe,null),e(U,QV),e(U,Ia),$(Eh,Ia,null),e(Ia,ZV),e(Ia,Py),e(Py,XV),e(Ia,eU),$(di,Ia,null),e(U,tU),e(U,ie),$(qh,ie,null),e(ie,sU),e(ie,Fy),e(Fy,aU),e(ie,nU),e(ie,Ly),e(Ly,rU),e(ie,oU),e(ie,Ih),e(Ih,lU),e(Ih,Ay),e(Ay,iU),e(Ih,pU),e(ie,cU),e(ie,Xn),e(Xn,dU),e(Xn,o_),e(o_,mU),e(Xn,hU),e(Xn,l_),e(l_,fU),e(Xn,uU),e(ie,gU),$(mi,ie,null),e(U,_U),e(U,Ta),$(Th,Ta,null),e(Ta,bU),e(Ta,Sy),e(Sy,$U),e(Ta,xU),$(hi,Ta,null),e(U,vU),e(U,Na),$(Nh,Na,null),e(Na,yU),e(Na,Cy),e(Cy,jU),e(Na,wU),$(fi,Na,null),e(U,DU),e(U,Pa),$(Ph,Pa,null),e(Pa,kU),e(Pa,Oy),e(Oy,EU),e(Pa,qU),$(ui,Pa,null),e(U,IU),e(U,Fa),$(Fh,Fa,null),e(Fa,TU),e(Fa,zy),e(zy,NU),e(Fa,PU),$(gi,Fa,null),e(U,FU),e(U,La),$(Lh,La,null),e(La,LU),e(La,Vy),e(Vy,AU),e(La,SU),$(_i,La,null),e(U,CU),e(U,Aa),$(Ah,Aa,null),e(Aa,OU),e(Aa,Uy),e(Uy,zU),e(Aa,VU),$(bi,Aa,null),D(a,gD,j),D(a,er,j),e(er,$i),e($i,My),$(Sh,My,null),e(er,UU),e(er,Ry),e(Ry,MU),D(a,_D,j),D(a,C,j),$(Ch,C,null),e(C,RU),e(C,By),e(By,BU),e(C,GU),e(C,Oh),e(Oh,HU),e(Oh,Gy),e(Gy,WU),e(Oh,YU),e(C,JU),e(C,i_),e(i_,Hy),e(Hy,KU),e(i_,QU),e(C,ZU),e(C,J),e(J,Wy),e(Wy,Sa),e(Sa,XU),e(Sa,p_),e(p_,eM),e(Sa,tM),e(Sa,Yy),e(Yy,sM),e(Sa,aM),e(Sa,Jy),e(Jy,nM),e(J,rM),e(J,Ky),e(Ky,zh),e(zh,oM),e(zh,c_),e(c_,lM),e(zh,iM),e(J,pM),e(J,Qy),e(Qy,Vh),e(Vh,cM),e(Vh,Zy),e(Zy,dM),e(Vh,mM),e(J,hM),e(J,Uh),e(Uh,Ge),e(Ge,fM),e(Ge,Xy),e(Xy,uM),e(Ge,gM),e(Ge,d_),e(d_,_M),e(Ge,bM),e(Ge,ej),e(ej,$M),e(Ge,xM),e(Ge,m_),e(m_,vM),e(Ge,yM),e(Uh,jM),$(xi,Uh,null),e(J,wM),e(J,tj),e(tj,He),e(He,DM),e(He,h_),e(h_,kM),e(He,EM),e(He,f_),e(f_,qM),e(He,IM),e(He,u_),e(u_,TM),e(He,NM),e(He,g_),e(g_,PM),e(He,FM),e(J,LM),e(J,sj),e(sj,Mh),e(Mh,AM),e(Mh,__),e(__,SM),e(Mh,CM),e(J,OM),e(J,aj),e(aj,Qt),e(Qt,zM),e(Qt,b_),e(b_,VM),e(Qt,UM),e(Qt,nj),e(nj,MM),e(Qt,RM),e(Qt,rj),e(rj,BM),e(Qt,GM),e(J,HM),e(J,oj),e(oj,vi),e(vi,$_),e($_,WM),e(vi,YM),e(vi,x_),e(x_,JM),e(vi,KM),e(C,QM),e(C,Ca),$(Rh,Ca,null),e(Ca,ZM),e(Ca,lj),e(lj,XM),e(Ca,eR),$(yi,Ca,null),e(C,tR),e(C,ji),$(Bh,ji,null),e(ji,sR),e(ji,ij),e(ij,aR),e(C,nR),e(C,wi),$(Gh,wi,null),e(wi,rR),e(wi,pj),e(pj,oR),e(C,lR),e(C,Di),$(Hh,Di,null),e(Di,iR),e(Di,cj),e(cj,pR),e(C,cR),e(C,ki),$(Wh,ki,null),e(ki,dR),e(ki,dj),e(dj,mR),e(C,hR),e(C,Ei),$(Yh,Ei,null),e(Ei,fR),e(Ei,mj),e(mj,uR),e(C,gR),e(C,vt),$(Jh,vt,null),e(vt,_R),e(vt,hj),e(hj,bR),e(vt,$R),e(vt,fj),e(fj,xR),e(vt,vR),$(qi,vt,null),e(C,yR),e(C,Ii),$(Kh,Ii,null),e(Ii,jR),e(Ii,uj),e(uj,wR),e(C,DR),e(C,Le),$(Qh,Le,null),e(Le,kR),e(Le,gj),e(gj,ER),e(Le,qR),e(Le,_j),e(_j,IR),e(Le,TR),e(Le,Zt),e(Zt,NR),e(Zt,v_),e(v_,PR),e(Zt,FR),e(Zt,y_),e(y_,LR),e(Zt,AR),e(Zt,j_),e(j_,SR),e(Zt,CR),e(Le,OR),$(Ti,Le,null),e(C,zR),e(C,yt),$(Zh,yt,null),e(yt,VR),e(yt,bj),e(bj,UR),e(yt,MR),e(yt,$j),e($j,RR),e(yt,BR),$(Ni,yt,null),D(a,bD,j),D(a,Xt,j),$(Xh,Xt,null),e(Xt,GR),e(Xt,xj),e(xj,HR),e(Xt,WR),$(Pi,Xt,null),D(a,$D,j),D(a,B,j),$(ef,B,null),e(B,YR),e(B,vj),e(vj,JR),e(B,KR),e(B,tf),e(tf,QR),e(tf,yj),e(yj,ZR),e(tf,XR),e(B,eB),e(B,tr),e(tr,w_),e(w_,jj),e(jj,tB),e(w_,sB),e(tr,aB),e(tr,D_),e(D_,wj),e(wj,nB),e(D_,rB),e(tr,oB),e(tr,k_),e(k_,Dj),e(Dj,lB),e(k_,iB),e(B,pB),e(B,kj),e(kj,cB),e(B,dB),$(Fi,B,null),e(B,mB),e(B,Oa),$(sf,Oa,null),e(Oa,hB),e(Oa,Ej),e(Ej,fB),e(Oa,uB),e(Oa,af),e(af,qj),e(qj,gB),e(af,_B),e(af,Ij),e(Ij,bB),e(B,$B),e(B,jt),$(nf,jt,null),e(jt,xB),e(jt,Tj),e(Tj,vB),e(jt,yB),e(jt,Nj),e(Nj,jB),e(jt,wB),$(Li,jt,null),e(B,DB),e(B,za),$(rf,za,null),e(za,kB),e(za,Pj),e(Pj,EB),e(za,qB),$(Ai,za,null),D(a,xD,j),D(a,We,j),$(of,We,null),e(We,IB),e(We,Fj),e(Fj,TB),e(We,NB),e(We,Lj),e(Lj,PB),e(We,FB),$(Si,We,null),D(a,vD,j),D(a,te,j),$(lf,te,null),e(te,LB),e(te,E_),e(E_,Aj),e(Aj,AB),e(E_,SB),e(te,CB),e(te,Sj),e(Sj,OB),e(te,zB),e(te,pf),e(pf,VB),e(pf,Cj),e(Cj,UB),e(pf,MB),e(te,RB),$(Ci,te,null),e(te,BB),e(te,Oi),$(cf,Oi,null),e(Oi,GB),e(Oi,Oj),e(Oj,HB),D(a,yD,j),D(a,se,j),$(df,se,null),e(se,WB),e(se,q_),e(q_,zj),e(zj,YB),e(q_,JB),e(se,KB),e(se,Vj),e(Vj,QB),e(se,ZB),e(se,Uj),e(Uj,XB),e(se,eG),$(zi,se,null),e(se,tG),e(se,Vi),$(mf,Vi,null),e(Vi,sG),e(Vi,Mj),e(Mj,aG),D(a,jD,j),D(a,es,j),$(hf,es,null),e(es,nG),e(es,Rj),e(Rj,rG),e(es,oG),$(Ui,es,null),D(a,wD,j),D(a,ts,j),$(ff,ts,null),e(ts,lG),e(ts,Bj),e(Bj,iG),e(ts,pG),$(Mi,ts,null),D(a,DD,j),D(a,ss,j),$(uf,ss,null),e(ss,cG),e(ss,Gj),e(Gj,dG),e(ss,mG),$(Ri,ss,null),D(a,kD,j),D(a,as,j),$(gf,as,null),e(as,hG),e(as,Hj),e(Hj,fG),e(as,uG),$(Bi,as,null),D(a,ED,j),D(a,M,j),$(_f,M,null),e(M,gG),e(M,Wj),e(Wj,_G),e(M,bG),e(M,Yj),e(Yj,$G),e(M,xG),e(M,sr),e(sr,Jj),e(Jj,bf),e(bf,vG),e(bf,Kj),e(Kj,yG),e(bf,jG),e(sr,wG),e(sr,ar),e(ar,$f),e($f,DG),e($f,Qj),e(Qj,kG),e($f,EG),e(ar,qG),e(ar,xf),e(xf,Zj),e(Zj,IG),e(xf,TG),e(xf,Xj),e(Xj,NG),e(ar,PG),e(ar,e0),e(e0,FG),e(sr,LG),e(sr,nr),e(nr,vf),e(vf,AG),e(vf,t0),e(t0,SG),e(vf,CG),e(nr,OG),e(nr,rr),e(rr,s0),e(s0,zG),e(rr,VG),e(rr,a0),e(a0,UG),e(rr,MG),e(rr,n0),e(n0,RG),e(nr,BG),e(nr,r0),e(r0,GG),e(M,HG),$(Gi,M,null),e(M,WG),e(M,Va),$(yf,Va,null),e(Va,YG),e(Va,o0),e(o0,JG),e(Va,KG),e(Va,ns),e(ns,l0),e(l0,QG),e(ns,ZG),e(ns,i0),e(i0,XG),e(ns,eH),e(ns,p0),e(p0,tH),e(ns,sH),e(ns,c0),e(c0,aH),e(M,nH),e(M,Hi),$(jf,Hi,null),e(Hi,rH),e(Hi,d0),e(d0,oH),e(M,lH),e(M,Wi),$(wf,Wi,null),e(Wi,iH),e(Wi,m0),e(m0,pH),e(M,cH),e(M,Yi),$(Df,Yi,null),e(Yi,dH),e(Yi,h0),e(h0,mH),e(M,hH),e(M,Ji),$(kf,Ji,null),e(Ji,fH),e(Ji,f0),e(f0,uH),D(a,qD,j),D(a,R,j),$(Ef,R,null),e(R,gH),e(R,u0),e(u0,_H),e(R,bH),e(R,g0),e(g0,$H),e(R,xH),e(R,rs),e(rs,_0),e(_0,qf),e(qf,vH),e(qf,b0),e(b0,yH),e(qf,jH),e(rs,wH),e(rs,or),e(or,If),e(If,DH),e(If,$0),e($0,kH),e(If,EH),e(or,qH),e(or,Tf),e(Tf,x0),e(x0,IH),e(Tf,TH),e(Tf,v0),e(v0,NH),e(or,PH),e(or,y0),e(y0,FH),e(rs,LH),e(rs,j0),e(j0,Nf),e(Nf,AH),e(Nf,w0),e(w0,SH),e(Nf,CH),e(rs,OH),e(rs,D0),e(D0,Pf),e(Pf,zH),e(Pf,k0),e(k0,VH),e(Pf,UH),e(R,MH),$(Ki,R,null),e(R,RH),e(R,Ua),$(Ff,Ua,null),e(Ua,BH),e(Ua,E0),e(E0,GH),e(Ua,HH),e(Ua,Ye),e(Ye,q0),e(q0,WH),e(Ye,YH),e(Ye,I0),e(I0,JH),e(Ye,KH),e(Ye,T0),e(T0,QH),e(Ye,ZH),e(Ye,N0),e(N0,XH),e(Ye,eW),e(Ye,P0),e(P0,tW),e(R,sW),e(R,Qi),$(Lf,Qi,null),e(Qi,aW),e(Qi,F0),e(F0,nW),e(R,rW),e(R,Zi),$(Af,Zi,null),e(Zi,oW),e(Zi,L0),e(L0,lW),e(R,iW),e(R,Xi),$(Sf,Xi,null),e(Xi,pW),e(Xi,A0),e(A0,cW),e(R,dW),e(R,ep),$(Cf,ep,null),e(ep,mW),e(ep,S0),e(S0,hW),D(a,ID,j),D(a,lr,j),e(lr,tp),e(tp,C0),$(Of,C0,null),e(lr,fW),e(lr,O0),e(O0,uW),D(a,TD,j),D(a,ae,j),$(zf,ae,null),e(ae,gW),e(ae,z0),e(z0,_W),e(ae,bW),e(ae,I_),e(I_,V0),e(V0,$W),e(I_,xW),e(ae,vW),e(ae,U0),e(U0,yW),e(ae,jW),e(ae,Ma),$(Vf,Ma,null),e(Ma,wW),e(Ma,Uf),e(Uf,DW),e(Uf,M0),e(M0,kW),e(Uf,EW),e(Ma,qW),$(sp,Ma,null),e(ae,IW),e(ae,Ra),$(Mf,Ra,null),e(Ra,TW),e(Ra,os),e(os,NW),e(os,R0),e(R0,PW),e(os,FW),e(os,B0),e(B0,LW),e(os,AW),e(os,G0),e(G0,SW),e(os,CW),e(Ra,OW),$(ap,Ra,null),D(a,ND,j),D(a,ir,j),e(ir,np),e(np,H0),$(Rf,H0,null),e(ir,zW),e(ir,W0),e(W0,VW),D(a,PD,j),D(a,Ba,j),e(Ba,UW),e(Ba,Y0),e(Y0,MW),e(Ba,RW),e(Ba,T_),e(T_,BW),e(Ba,GW),D(a,FD,j),D(a,K,j),$(Bf,K,null),e(K,HW),e(K,J0),e(J0,WW),e(K,YW),$(rp,K,null),e(K,JW),e(K,Ga),$(Gf,Ga,null),e(Ga,KW),e(Ga,K0),e(K0,QW),e(Ga,ZW),$(op,Ga,null),e(K,XW),e(K,Ha),$(Hf,Ha,null),e(Ha,eY),e(Ha,Q0),e(Q0,tY),e(Ha,sY),$(lp,Ha,null),e(K,aY),e(K,wt),$(Wf,wt,null),e(wt,nY),e(wt,Z0),e(Z0,rY),e(wt,oY),e(wt,X0),e(X0,lY),e(wt,iY),$(ip,wt,null),e(K,pY),e(K,pp),$(Yf,pp,null),e(pp,cY),e(pp,ew),e(ew,dY),D(a,LD,j),D(a,pr,j),e(pr,cp),e(cp,tw),$(Jf,tw,null),e(pr,mY),e(pr,sw),e(sw,hY),D(a,AD,j),D(a,O,j),$(Kf,O,null),e(O,fY),e(O,dp),e(dp,aw),e(aw,uY),e(dp,gY),e(dp,Qf),e(Qf,nw),e(nw,_Y),e(dp,bY),e(O,$Y),e(O,ls),e(ls,xY),e(ls,rw),e(rw,vY),e(ls,yY),e(ls,ow),e(ow,jY),e(ls,wY),e(ls,lw),e(lw,DY),e(ls,kY),e(O,EY),e(O,iw),e(iw,qY),e(O,IY),e(O,pw),e(pw,TY),e(O,NY),$(mp,O,null),e(O,PY),e(O,cr),e(cr,FY),e(cr,cw),e(cw,LY),e(cr,AY),e(cr,dw),e(dw,SY),e(cr,CY),e(O,OY),$(hp,O,null),e(O,zY),e(O,is),e(is,VY),e(is,mw),e(mw,UY),e(is,MY),e(is,hw),e(hw,RY),e(is,BY),e(is,fw),e(fw,GY),e(is,HY),e(O,WY),$(fp,O,null),e(O,YY),e(O,dr),e(dr,JY),e(dr,uw),e(uw,KY),e(dr,QY),e(dr,N_),e(N_,ZY),e(dr,XY),e(O,eJ),$(up,O,null),e(O,tJ),e(O,mr),e(mr,sJ),e(mr,gw),e(gw,aJ),e(mr,nJ),e(mr,P_),e(P_,rJ),e(mr,oJ),e(O,lJ),$(gp,O,null),D(a,SD,j),D(a,hr,j),$(Zf,hr,null),e(hr,iJ),e(hr,fr),e(fr,pJ),e(fr,_w),e(_w,cJ),e(fr,dJ),e(fr,bw),e(bw,mJ),e(fr,hJ),D(a,CD,j),D(a,ur,j),$(Xf,ur,null),e(ur,fJ),e(ur,$w),e($w,uJ),D(a,OD,j),D(a,gr,j),e(gr,_p),e(_p,xw),$(eu,xw,null),e(gr,gJ),e(gr,vw),e(vw,_J),D(a,zD,j),D(a,_r,j),$(tu,_r,null),e(_r,bJ),e(_r,yw),e(yw,$J),VD=!0},p(a,[j]){const su={};j&2&&(su.$$scope={dirty:j,ctx:a}),Ur.$set(su);const jw={};j&2&&(jw.$$scope={dirty:j,ctx:a}),Mr.$set(jw);const ww={};j&2&&(ww.$$scope={dirty:j,ctx:a}),Gr.$set(ww);const Dw={};j&2&&(Dw.$$scope={dirty:j,ctx:a}),Hr.$set(Dw);const au={};j&2&&(au.$$scope={dirty:j,ctx:a}),Jr.$set(au);const kw={};j&2&&(kw.$$scope={dirty:j,ctx:a}),Qr.$set(kw);const Ew={};j&2&&(Ew.$$scope={dirty:j,ctx:a}),Zr.$set(Ew);const qw={};j&2&&(qw.$$scope={dirty:j,ctx:a}),Xr.$set(qw);const _e={};j&2&&(_e.$$scope={dirty:j,ctx:a}),eo.$set(_e);const Iw={};j&2&&(Iw.$$scope={dirty:j,ctx:a}),to.$set(Iw);const F_={};j&2&&(F_.$$scope={dirty:j,ctx:a}),ao.$set(F_);const Tw={};j&2&&(Tw.$$scope={dirty:j,ctx:a}),no.$set(Tw);const Nw={};j&2&&(Nw.$$scope={dirty:j,ctx:a}),ro.$set(Nw);const Je={};j&2&&(Je.$$scope={dirty:j,ctx:a}),oo.$set(Je);const nu={};j&2&&(nu.$$scope={dirty:j,ctx:a}),lo.$set(nu);const Pw={};j&2&&(Pw.$$scope={dirty:j,ctx:a}),io.$set(Pw);const Fw={};j&2&&(Fw.$$scope={dirty:j,ctx:a}),po.$set(Fw);const Lw={};j&2&&(Lw.$$scope={dirty:j,ctx:a}),co.$set(Lw);const br={};j&2&&(br.$$scope={dirty:j,ctx:a}),mo.$set(br);const $r={};j&2&&($r.$$scope={dirty:j,ctx:a}),ho.$set($r);const Aw={};j&2&&(Aw.$$scope={dirty:j,ctx:a}),fo.$set(Aw);const Sw={};j&2&&(Sw.$$scope={dirty:j,ctx:a}),uo.$set(Sw);const ru={};j&2&&(ru.$$scope={dirty:j,ctx:a}),_o.$set(ru);const Cw={};j&2&&(Cw.$$scope={dirty:j,ctx:a}),bo.$set(Cw);const Ow={};j&2&&(Ow.$$scope={dirty:j,ctx:a}),$o.$set(Ow);const zw={};j&2&&(zw.$$scope={dirty:j,ctx:a}),xo.$set(zw);const ou={};j&2&&(ou.$$scope={dirty:j,ctx:a}),vo.$set(ou);const Vw={};j&2&&(Vw.$$scope={dirty:j,ctx:a}),jo.$set(Vw);const I={};j&2&&(I.$$scope={dirty:j,ctx:a}),wo.$set(I);const Uw={};j&2&&(Uw.$$scope={dirty:j,ctx:a}),Do.$set(Uw);const ps={};j&2&&(ps.$$scope={dirty:j,ctx:a}),ko.$set(ps);const Mw={};j&2&&(Mw.$$scope={dirty:j,ctx:a}),Eo.$set(Mw);const Rw={};j&2&&(Rw.$$scope={dirty:j,ctx:a}),qo.$set(Rw);const Bw={};j&2&&(Bw.$$scope={dirty:j,ctx:a}),Io.$set(Bw);const cs={};j&2&&(cs.$$scope={dirty:j,ctx:a}),To.$set(cs);const Gw={};j&2&&(Gw.$$scope={dirty:j,ctx:a}),No.$set(Gw);const Hw={};j&2&&(Hw.$$scope={dirty:j,ctx:a}),Po.$set(Hw);const Ww={};j&2&&(Ww.$$scope={dirty:j,ctx:a}),Fo.$set(Ww);const lu={};j&2&&(lu.$$scope={dirty:j,ctx:a}),Lo.$set(lu);const Yw={};j&2&&(Yw.$$scope={dirty:j,ctx:a}),Ao.$set(Yw);const iu={};j&2&&(iu.$$scope={dirty:j,ctx:a}),So.$set(iu);const Jw={};j&2&&(Jw.$$scope={dirty:j,ctx:a}),Oo.$set(Jw);const Ke={};j&2&&(Ke.$$scope={dirty:j,ctx:a}),zo.$set(Ke);const ds={};j&2&&(ds.$$scope={dirty:j,ctx:a}),Vo.$set(ds);const Kw={};j&2&&(Kw.$$scope={dirty:j,ctx:a}),Uo.$set(Kw);const Qw={};j&2&&(Qw.$$scope={dirty:j,ctx:a}),Mo.$set(Qw);const Zw={};j&2&&(Zw.$$scope={dirty:j,ctx:a}),Ro.$set(Zw);const pu={};j&2&&(pu.$$scope={dirty:j,ctx:a}),Bo.$set(pu);const Xw={};j&2&&(Xw.$$scope={dirty:j,ctx:a}),Ho.$set(Xw);const cu={};j&2&&(cu.$$scope={dirty:j,ctx:a}),Wo.$set(cu);const e7={};j&2&&(e7.$$scope={dirty:j,ctx:a}),al.$set(e7);const du={};j&2&&(du.$$scope={dirty:j,ctx:a}),nl.$set(du);const ms={};j&2&&(ms.$$scope={dirty:j,ctx:a}),rl.$set(ms);const t7={};j&2&&(t7.$$scope={dirty:j,ctx:a}),ol.$set(t7);const s7={};j&2&&(s7.$$scope={dirty:j,ctx:a}),ll.$set(s7);const a7={};j&2&&(a7.$$scope={dirty:j,ctx:a}),il.$set(a7);const hs={};j&2&&(hs.$$scope={dirty:j,ctx:a}),pl.$set(hs);const n7={};j&2&&(n7.$$scope={dirty:j,ctx:a}),cl.$set(n7);const xr={};j&2&&(xr.$$scope={dirty:j,ctx:a}),dl.$set(xr);const r7={};j&2&&(r7.$$scope={dirty:j,ctx:a}),fl.$set(r7);const vr={};j&2&&(vr.$$scope={dirty:j,ctx:a}),ul.$set(vr);const o7={};j&2&&(o7.$$scope={dirty:j,ctx:a}),gl.$set(o7);const yr={};j&2&&(yr.$$scope={dirty:j,ctx:a}),bl.$set(yr);const l7={};j&2&&(l7.$$scope={dirty:j,ctx:a}),$l.$set(l7);const jr={};j&2&&(jr.$$scope={dirty:j,ctx:a}),xl.$set(jr);const mu={};j&2&&(mu.$$scope={dirty:j,ctx:a}),vl.$set(mu);const hu={};j&2&&(hu.$$scope={dirty:j,ctx:a}),yl.$set(hu);const i7={};j&2&&(i7.$$scope={dirty:j,ctx:a}),jl.$set(i7);const wr={};j&2&&(wr.$$scope={dirty:j,ctx:a}),wl.$set(wr);const p7={};j&2&&(p7.$$scope={dirty:j,ctx:a}),Dl.$set(p7);const Dr={};j&2&&(Dr.$$scope={dirty:j,ctx:a}),kl.$set(Dr);const c7={};j&2&&(c7.$$scope={dirty:j,ctx:a}),El.$set(c7);const fs={};j&2&&(fs.$$scope={dirty:j,ctx:a}),ql.$set(fs);const d7={};j&2&&(d7.$$scope={dirty:j,ctx:a}),Tl.$set(d7);const m7={};j&2&&(m7.$$scope={dirty:j,ctx:a}),Nl.$set(m7);const kr={};j&2&&(kr.$$scope={dirty:j,ctx:a}),Pl.$set(kr);const h7={};j&2&&(h7.$$scope={dirty:j,ctx:a}),Fl.$set(h7);const Er={};j&2&&(Er.$$scope={dirty:j,ctx:a}),Ll.$set(Er);const f7={};j&2&&(f7.$$scope={dirty:j,ctx:a}),Al.$set(f7);const qr={};j&2&&(qr.$$scope={dirty:j,ctx:a}),Sl.$set(qr);const u7={};j&2&&(u7.$$scope={dirty:j,ctx:a}),Cl.$set(u7);const us={};j&2&&(us.$$scope={dirty:j,ctx:a}),Ol.$set(us);const g7={};j&2&&(g7.$$scope={dirty:j,ctx:a}),zl.$set(g7);const Ir={};j&2&&(Ir.$$scope={dirty:j,ctx:a}),Vl.$set(Ir);const _7={};j&2&&(_7.$$scope={dirty:j,ctx:a}),Ul.$set(_7);const b7={};j&2&&(b7.$$scope={dirty:j,ctx:a}),Ml.$set(b7);const Tr={};j&2&&(Tr.$$scope={dirty:j,ctx:a}),Rl.$set(Tr);const $7={};j&2&&($7.$$scope={dirty:j,ctx:a}),Bl.$set($7);const Nr={};j&2&&(Nr.$$scope={dirty:j,ctx:a}),Gl.$set(Nr);const x7={};j&2&&(x7.$$scope={dirty:j,ctx:a}),Hl.$set(x7);const Pr={};j&2&&(Pr.$$scope={dirty:j,ctx:a}),Jl.$set(Pr);const fu={};j&2&&(fu.$$scope={dirty:j,ctx:a}),Kl.$set(fu);const v7={};j&2&&(v7.$$scope={dirty:j,ctx:a}),Ql.$set(v7);const Fr={};j&2&&(Fr.$$scope={dirty:j,ctx:a}),Zl.$set(Fr);const y7={};j&2&&(y7.$$scope={dirty:j,ctx:a}),Xl.$set(y7);const Lr={};j&2&&(Lr.$$scope={dirty:j,ctx:a}),ei.$set(Lr);const j7={};j&2&&(j7.$$scope={dirty:j,ctx:a}),ti.$set(j7);const uu={};j&2&&(uu.$$scope={dirty:j,ctx:a}),si.$set(uu);const w7={};j&2&&(w7.$$scope={dirty:j,ctx:a}),ai.$set(w7);const gu={};j&2&&(gu.$$scope={dirty:j,ctx:a}),ni.$set(gu);const Ar={};j&2&&(Ar.$$scope={dirty:j,ctx:a}),ri.$set(Ar);const D7={};j&2&&(D7.$$scope={dirty:j,ctx:a}),ci.$set(D7);const k7={};j&2&&(k7.$$scope={dirty:j,ctx:a}),di.$set(k7);const Qe={};j&2&&(Qe.$$scope={dirty:j,ctx:a}),mi.$set(Qe);const Ze={};j&2&&(Ze.$$scope={dirty:j,ctx:a}),hi.$set(Ze);const E7={};j&2&&(E7.$$scope={dirty:j,ctx:a}),fi.$set(E7);const q7={};j&2&&(q7.$$scope={dirty:j,ctx:a}),ui.$set(q7);const I7={};j&2&&(I7.$$scope={dirty:j,ctx:a}),gi.$set(I7);const T7={};j&2&&(T7.$$scope={dirty:j,ctx:a}),_i.$set(T7);const Xe={};j&2&&(Xe.$$scope={dirty:j,ctx:a}),bi.$set(Xe);const N7={};j&2&&(N7.$$scope={dirty:j,ctx:a}),xi.$set(N7);const P7={};j&2&&(P7.$$scope={dirty:j,ctx:a}),yi.$set(P7);const F7={};j&2&&(F7.$$scope={dirty:j,ctx:a}),qi.$set(F7);const L7={};j&2&&(L7.$$scope={dirty:j,ctx:a}),Ti.$set(L7);const A7={};j&2&&(A7.$$scope={dirty:j,ctx:a}),Ni.$set(A7);const Sr={};j&2&&(Sr.$$scope={dirty:j,ctx:a}),Pi.$set(Sr);const Dt={};j&2&&(Dt.$$scope={dirty:j,ctx:a}),Fi.$set(Dt);const S7={};j&2&&(S7.$$scope={dirty:j,ctx:a}),Li.$set(S7);const C7={};j&2&&(C7.$$scope={dirty:j,ctx:a}),Ai.$set(C7);const O7={};j&2&&(O7.$$scope={dirty:j,ctx:a}),Si.$set(O7);const z7={};j&2&&(z7.$$scope={dirty:j,ctx:a}),Ci.$set(z7);const gs={};j&2&&(gs.$$scope={dirty:j,ctx:a}),zi.$set(gs);const _u={};j&2&&(_u.$$scope={dirty:j,ctx:a}),Ui.$set(_u);const V7={};j&2&&(V7.$$scope={dirty:j,ctx:a}),Mi.$set(V7);const L_={};j&2&&(L_.$$scope={dirty:j,ctx:a}),Ri.$set(L_);const U7={};j&2&&(U7.$$scope={dirty:j,ctx:a}),Bi.$set(U7);const et={};j&2&&(et.$$scope={dirty:j,ctx:a}),Gi.$set(et);const _s={};j&2&&(_s.$$scope={dirty:j,ctx:a}),Ki.$set(_s);const M7={};j&2&&(M7.$$scope={dirty:j,ctx:a}),sp.$set(M7);const R7={};j&2&&(R7.$$scope={dirty:j,ctx:a}),ap.$set(R7);const B7={};j&2&&(B7.$$scope={dirty:j,ctx:a}),rp.$set(B7);const bu={};j&2&&(bu.$$scope={dirty:j,ctx:a}),op.$set(bu);const G7={};j&2&&(G7.$$scope={dirty:j,ctx:a}),lp.$set(G7);const Cr={};j&2&&(Cr.$$scope={dirty:j,ctx:a}),ip.$set(Cr);const H7={};j&2&&(H7.$$scope={dirty:j,ctx:a}),mp.$set(H7);const W7={};j&2&&(W7.$$scope={dirty:j,ctx:a}),hp.$set(W7);const tt={};j&2&&(tt.$$scope={dirty:j,ctx:a}),fp.$set(tt);const Or={};j&2&&(Or.$$scope={dirty:j,ctx:a}),up.$set(Or);const Y7={};j&2&&(Y7.$$scope={dirty:j,ctx:a}),gp.$set(Y7)},i(a){VD||(x(t.$$.fragment,a),x(xs.$$.fragment,a),x(Zp.$$.fragment,a),x(Xp.$$.fragment,a),x(Ur.$$.fragment,a),x(tc.$$.fragment,a),x(Mr.$$.fragment,a),x(sc.$$.fragment,a),x(ac.$$.fragment,a),x(nc.$$.fragment,a),x(Gr.$$.fragment,a),x(rc.$$.fragment,a),x(Hr.$$.fragment,a),x(oc.$$.fragment,a),x(lc.$$.fragment,a),x(ic.$$.fragment,a),x(Jr.$$.fragment,a),x(dc.$$.fragment,a),x(mc.$$.fragment,a),x(Qr.$$.fragment,a),x(Zr.$$.fragment,a),x(hc.$$.fragment,a),x(Xr.$$.fragment,a),x(fc.$$.fragment,a),x(eo.$$.fragment,a),x(uc.$$.fragment,a),x(to.$$.fragment,a),x(gc.$$.fragment,a),x(ao.$$.fragment,a),x(bc.$$.fragment,a),x(no.$$.fragment,a),x($c.$$.fragment,a),x(ro.$$.fragment,a),x(xc.$$.fragment,a),x(oo.$$.fragment,a),x(vc.$$.fragment,a),x(lo.$$.fragment,a),x(yc.$$.fragment,a),x(io.$$.fragment,a),x(jc.$$.fragment,a),x(po.$$.fragment,a),x(wc.$$.fragment,a),x(co.$$.fragment,a),x(Dc.$$.fragment,a),x(mo.$$.fragment,a),x(kc.$$.fragment,a),x(ho.$$.fragment,a),x(Ec.$$.fragment,a),x(fo.$$.fragment,a),x(Ic.$$.fragment,a),x(uo.$$.fragment,a),x(Tc.$$.fragment,a),x(Pc.$$.fragment,a),x(Fc.$$.fragment,a),x(_o.$$.fragment,a),x(Lc.$$.fragment,a),x(bo.$$.fragment,a),x(Ac.$$.fragment,a),x($o.$$.fragment,a),x(Cc.$$.fragment,a),x(xo.$$.fragment,a),x(zc.$$.fragment,a),x(vo.$$.fragment,a),x(Vc.$$.fragment,a),x(Uc.$$.fragment,a),x(jo.$$.fragment,a),x(Mc.$$.fragment,a),x(wo.$$.fragment,a),x(Bc.$$.fragment,a),x(Do.$$.fragment,a),x(Gc.$$.fragment,a),x(ko.$$.fragment,a),x(Hc.$$.fragment,a),x(Eo.$$.fragment,a),x(Wc.$$.fragment,a),x(qo.$$.fragment,a),x(Yc.$$.fragment,a),x(Io.$$.fragment,a),x(Kc.$$.fragment,a),x(To.$$.fragment,a),x(Zc.$$.fragment,a),x(No.$$.fragment,a),x(Xc.$$.fragment,a),x(Po.$$.fragment,a),x(ed.$$.fragment,a),x(Fo.$$.fragment,a),x(Lo.$$.fragment,a),x(Ao.$$.fragment,a),x(sd.$$.fragment,a),x(So.$$.fragment,a),x(ad.$$.fragment,a),x(nd.$$.fragment,a),x(Oo.$$.fragment,a),x(rd.$$.fragment,a),x(zo.$$.fragment,a),x(ld.$$.fragment,a),x(Vo.$$.fragment,a),x(id.$$.fragment,a),x(Uo.$$.fragment,a),x(pd.$$.fragment,a),x(Mo.$$.fragment,a),x(cd.$$.fragment,a),x(Ro.$$.fragment,a),x(dd.$$.fragment,a),x(Bo.$$.fragment,a),x(hd.$$.fragment,a),x(ud.$$.fragment,a),x(gd.$$.fragment,a),x(bd.$$.fragment,a),x(Ho.$$.fragment,a),x($d.$$.fragment,a),x(Wo.$$.fragment,a),x(xd.$$.fragment,a),x(vd.$$.fragment,a),x(yd.$$.fragment,a),x(jd.$$.fragment,a),x(wd.$$.fragment,a),x(Dd.$$.fragment,a),x(kd.$$.fragment,a),x(Ed.$$.fragment,a),x(qd.$$.fragment,a),x(Id.$$.fragment,a),x(Td.$$.fragment,a),x(Nd.$$.fragment,a),x(Pd.$$.fragment,a),x(Fd.$$.fragment,a),x(Ld.$$.fragment,a),x(Ad.$$.fragment,a),x(Sd.$$.fragment,a),x(Cd.$$.fragment,a),x(Od.$$.fragment,a),x(zd.$$.fragment,a),x(Vd.$$.fragment,a),x(Ud.$$.fragment,a),x(Md.$$.fragment,a),x(al.$$.fragment,a),x(Rd.$$.fragment,a),x(nl.$$.fragment,a),x(Bd.$$.fragment,a),x(rl.$$.fragment,a),x(Gd.$$.fragment,a),x(ol.$$.fragment,a),x(Hd.$$.fragment,a),x(ll.$$.fragment,a),x(il.$$.fragment,a),x(Wd.$$.fragment,a),x(Yd.$$.fragment,a),x(pl.$$.fragment,a),x(Kd.$$.fragment,a),x(cl.$$.fragment,a),x(Qd.$$.fragment,a),x(dl.$$.fragment,a),x(Zd.$$.fragment,a),x(em.$$.fragment,a),x(sm.$$.fragment,a),x(nm.$$.fragment,a),x(rm.$$.fragment,a),x(om.$$.fragment,a),x(fl.$$.fragment,a),x(lm.$$.fragment,a),x(ul.$$.fragment,a),x(im.$$.fragment,a),x(gl.$$.fragment,a),x(pm.$$.fragment,a),x(bl.$$.fragment,a),x(dm.$$.fragment,a),x($l.$$.fragment,a),x(mm.$$.fragment,a),x(xl.$$.fragment,a),x(hm.$$.fragment,a),x(vl.$$.fragment,a),x(fm.$$.fragment,a),x(yl.$$.fragment,a),x(um.$$.fragment,a),x(jl.$$.fragment,a),x(gm.$$.fragment,a),x(wl.$$.fragment,a),x(_m.$$.fragment,a),x(Dl.$$.fragment,a),x(bm.$$.fragment,a),x(kl.$$.fragment,a),x($m.$$.fragment,a),x(El.$$.fragment,a),x(vm.$$.fragment,a),x(ql.$$.fragment,a),x(jm.$$.fragment,a),x(wm.$$.fragment,a),x(Tl.$$.fragment,a),x(km.$$.fragment,a),x(Nl.$$.fragment,a),x(Em.$$.fragment,a),x(Pl.$$.fragment,a),x(qm.$$.fragment,a),x(Fl.$$.fragment,a),x(Im.$$.fragment,a),x(Ll.$$.fragment,a),x(Tm.$$.fragment,a),x(Al.$$.fragment,a),x(Nm.$$.fragment,a),x(Sl.$$.fragment,a),x(Fm.$$.fragment,a),x(Cl.$$.fragment,a),x(Lm.$$.fragment,a),x(Ol.$$.fragment,a),x(Sm.$$.fragment,a),x(zl.$$.fragment,a),x(Cm.$$.fragment,a),x(Vl.$$.fragment,a),x(Ul.$$.fragment,a),x(zm.$$.fragment,a),x(Ml.$$.fragment,a),x(Vm.$$.fragment,a),x(Rl.$$.fragment,a),x(Um.$$.fragment,a),x(Bl.$$.fragment,a),x(Mm.$$.fragment,a),x(Gl.$$.fragment,a),x(Rm.$$.fragment,a),x(Hl.$$.fragment,a),x(Bm.$$.fragment,a),x(Gm.$$.fragment,a),x(Hm.$$.fragment,a),x(Wm.$$.fragment,a),x(Jl.$$.fragment,a),x(Kl.$$.fragment,a),x(Ym.$$.fragment,a),x(Ql.$$.fragment,a),x(Jm.$$.fragment,a),x(Zl.$$.fragment,a),x(Km.$$.fragment,a),x(Xl.$$.fragment,a),x(Qm.$$.fragment,a),x(Zm.$$.fragment,a),x(ei.$$.fragment,a),x(eh.$$.fragment,a),x(ti.$$.fragment,a),x(th.$$.fragment,a),x(si.$$.fragment,a),x(sh.$$.fragment,a),x(ai.$$.fragment,a),x(nh.$$.fragment,a),x(ni.$$.fragment,a),x(oh.$$.fragment,a),x(ri.$$.fragment,a),x(ih.$$.fragment,a),x(ph.$$.fragment,a),x(ch.$$.fragment,a),x(dh.$$.fragment,a),x(mh.$$.fragment,a),x(hh.$$.fragment,a),x(fh.$$.fragment,a),x(uh.$$.fragment,a),x(gh.$$.fragment,a),x(_h.$$.fragment,a),x(bh.$$.fragment,a),x($h.$$.fragment,a),x(xh.$$.fragment,a),x(vh.$$.fragment,a),x(yh.$$.fragment,a),x(jh.$$.fragment,a),x(wh.$$.fragment,a),x(Dh.$$.fragment,a),x(ci.$$.fragment,a),x(Eh.$$.fragment,a),x(di.$$.fragment,a),x(qh.$$.fragment,a),x(mi.$$.fragment,a),x(Th.$$.fragment,a),x(hi.$$.fragment,a),x(Nh.$$.fragment,a),x(fi.$$.fragment,a),x(Ph.$$.fragment,a),x(ui.$$.fragment,a),x(Fh.$$.fragment,a),x(gi.$$.fragment,a),x(Lh.$$.fragment,a),x(_i.$$.fragment,a),x(Ah.$$.fragment,a),x(bi.$$.fragment,a),x(Sh.$$.fragment,a),x(Ch.$$.fragment,a),x(xi.$$.fragment,a),x(Rh.$$.fragment,a),x(yi.$$.fragment,a),x(Bh.$$.fragment,a),x(Gh.$$.fragment,a),x(Hh.$$.fragment,a),x(Wh.$$.fragment,a),x(Yh.$$.fragment,a),x(Jh.$$.fragment,a),x(qi.$$.fragment,a),x(Kh.$$.fragment,a),x(Qh.$$.fragment,a),x(Ti.$$.fragment,a),x(Zh.$$.fragment,a),x(Ni.$$.fragment,a),x(Xh.$$.fragment,a),x(Pi.$$.fragment,a),x(ef.$$.fragment,a),x(Fi.$$.fragment,a),x(sf.$$.fragment,a),x(nf.$$.fragment,a),x(Li.$$.fragment,a),x(rf.$$.fragment,a),x(Ai.$$.fragment,a),x(of.$$.fragment,a),x(Si.$$.fragment,a),x(lf.$$.fragment,a),x(Ci.$$.fragment,a),x(cf.$$.fragment,a),x(df.$$.fragment,a),x(zi.$$.fragment,a),x(mf.$$.fragment,a),x(hf.$$.fragment,a),x(Ui.$$.fragment,a),x(ff.$$.fragment,a),x(Mi.$$.fragment,a),x(uf.$$.fragment,a),x(Ri.$$.fragment,a),x(gf.$$.fragment,a),x(Bi.$$.fragment,a),x(_f.$$.fragment,a),x(Gi.$$.fragment,a),x(yf.$$.fragment,a),x(jf.$$.fragment,a),x(wf.$$.fragment,a),x(Df.$$.fragment,a),x(kf.$$.fragment,a),x(Ef.$$.fragment,a),x(Ki.$$.fragment,a),x(Ff.$$.fragment,a),x(Lf.$$.fragment,a),x(Af.$$.fragment,a),x(Sf.$$.fragment,a),x(Cf.$$.fragment,a),x(Of.$$.fragment,a),x(zf.$$.fragment,a),x(Vf.$$.fragment,a),x(sp.$$.fragment,a),x(Mf.$$.fragment,a),x(ap.$$.fragment,a),x(Rf.$$.fragment,a),x(Bf.$$.fragment,a),x(rp.$$.fragment,a),x(Gf.$$.fragment,a),x(op.$$.fragment,a),x(Hf.$$.fragment,a),x(lp.$$.fragment,a),x(Wf.$$.fragment,a),x(ip.$$.fragment,a),x(Yf.$$.fragment,a),x(Jf.$$.fragment,a),x(Kf.$$.fragment,a),x(mp.$$.fragment,a),x(hp.$$.fragment,a),x(fp.$$.fragment,a),x(up.$$.fragment,a),x(gp.$$.fragment,a),x(Zf.$$.fragment,a),x(Xf.$$.fragment,a),x(eu.$$.fragment,a),x(tu.$$.fragment,a),VD=!0)},o(a){v(t.$$.fragment,a),v(xs.$$.fragment,a),v(Zp.$$.fragment,a),v(Xp.$$.fragment,a),v(Ur.$$.fragment,a),v(tc.$$.fragment,a),v(Mr.$$.fragment,a),v(sc.$$.fragment,a),v(ac.$$.fragment,a),v(nc.$$.fragment,a),v(Gr.$$.fragment,a),v(rc.$$.fragment,a),v(Hr.$$.fragment,a),v(oc.$$.fragment,a),v(lc.$$.fragment,a),v(ic.$$.fragment,a),v(Jr.$$.fragment,a),v(dc.$$.fragment,a),v(mc.$$.fragment,a),v(Qr.$$.fragment,a),v(Zr.$$.fragment,a),v(hc.$$.fragment,a),v(Xr.$$.fragment,a),v(fc.$$.fragment,a),v(eo.$$.fragment,a),v(uc.$$.fragment,a),v(to.$$.fragment,a),v(gc.$$.fragment,a),v(ao.$$.fragment,a),v(bc.$$.fragment,a),v(no.$$.fragment,a),v($c.$$.fragment,a),v(ro.$$.fragment,a),v(xc.$$.fragment,a),v(oo.$$.fragment,a),v(vc.$$.fragment,a),v(lo.$$.fragment,a),v(yc.$$.fragment,a),v(io.$$.fragment,a),v(jc.$$.fragment,a),v(po.$$.fragment,a),v(wc.$$.fragment,a),v(co.$$.fragment,a),v(Dc.$$.fragment,a),v(mo.$$.fragment,a),v(kc.$$.fragment,a),v(ho.$$.fragment,a),v(Ec.$$.fragment,a),v(fo.$$.fragment,a),v(Ic.$$.fragment,a),v(uo.$$.fragment,a),v(Tc.$$.fragment,a),v(Pc.$$.fragment,a),v(Fc.$$.fragment,a),v(_o.$$.fragment,a),v(Lc.$$.fragment,a),v(bo.$$.fragment,a),v(Ac.$$.fragment,a),v($o.$$.fragment,a),v(Cc.$$.fragment,a),v(xo.$$.fragment,a),v(zc.$$.fragment,a),v(vo.$$.fragment,a),v(Vc.$$.fragment,a),v(Uc.$$.fragment,a),v(jo.$$.fragment,a),v(Mc.$$.fragment,a),v(wo.$$.fragment,a),v(Bc.$$.fragment,a),v(Do.$$.fragment,a),v(Gc.$$.fragment,a),v(ko.$$.fragment,a),v(Hc.$$.fragment,a),v(Eo.$$.fragment,a),v(Wc.$$.fragment,a),v(qo.$$.fragment,a),v(Yc.$$.fragment,a),v(Io.$$.fragment,a),v(Kc.$$.fragment,a),v(To.$$.fragment,a),v(Zc.$$.fragment,a),v(No.$$.fragment,a),v(Xc.$$.fragment,a),v(Po.$$.fragment,a),v(ed.$$.fragment,a),v(Fo.$$.fragment,a),v(Lo.$$.fragment,a),v(Ao.$$.fragment,a),v(sd.$$.fragment,a),v(So.$$.fragment,a),v(ad.$$.fragment,a),v(nd.$$.fragment,a),v(Oo.$$.fragment,a),v(rd.$$.fragment,a),v(zo.$$.fragment,a),v(ld.$$.fragment,a),v(Vo.$$.fragment,a),v(id.$$.fragment,a),v(Uo.$$.fragment,a),v(pd.$$.fragment,a),v(Mo.$$.fragment,a),v(cd.$$.fragment,a),v(Ro.$$.fragment,a),v(dd.$$.fragment,a),v(Bo.$$.fragment,a),v(hd.$$.fragment,a),v(ud.$$.fragment,a),v(gd.$$.fragment,a),v(bd.$$.fragment,a),v(Ho.$$.fragment,a),v($d.$$.fragment,a),v(Wo.$$.fragment,a),v(xd.$$.fragment,a),v(vd.$$.fragment,a),v(yd.$$.fragment,a),v(jd.$$.fragment,a),v(wd.$$.fragment,a),v(Dd.$$.fragment,a),v(kd.$$.fragment,a),v(Ed.$$.fragment,a),v(qd.$$.fragment,a),v(Id.$$.fragment,a),v(Td.$$.fragment,a),v(Nd.$$.fragment,a),v(Pd.$$.fragment,a),v(Fd.$$.fragment,a),v(Ld.$$.fragment,a),v(Ad.$$.fragment,a),v(Sd.$$.fragment,a),v(Cd.$$.fragment,a),v(Od.$$.fragment,a),v(zd.$$.fragment,a),v(Vd.$$.fragment,a),v(Ud.$$.fragment,a),v(Md.$$.fragment,a),v(al.$$.fragment,a),v(Rd.$$.fragment,a),v(nl.$$.fragment,a),v(Bd.$$.fragment,a),v(rl.$$.fragment,a),v(Gd.$$.fragment,a),v(ol.$$.fragment,a),v(Hd.$$.fragment,a),v(ll.$$.fragment,a),v(il.$$.fragment,a),v(Wd.$$.fragment,a),v(Yd.$$.fragment,a),v(pl.$$.fragment,a),v(Kd.$$.fragment,a),v(cl.$$.fragment,a),v(Qd.$$.fragment,a),v(dl.$$.fragment,a),v(Zd.$$.fragment,a),v(em.$$.fragment,a),v(sm.$$.fragment,a),v(nm.$$.fragment,a),v(rm.$$.fragment,a),v(om.$$.fragment,a),v(fl.$$.fragment,a),v(lm.$$.fragment,a),v(ul.$$.fragment,a),v(im.$$.fragment,a),v(gl.$$.fragment,a),v(pm.$$.fragment,a),v(bl.$$.fragment,a),v(dm.$$.fragment,a),v($l.$$.fragment,a),v(mm.$$.fragment,a),v(xl.$$.fragment,a),v(hm.$$.fragment,a),v(vl.$$.fragment,a),v(fm.$$.fragment,a),v(yl.$$.fragment,a),v(um.$$.fragment,a),v(jl.$$.fragment,a),v(gm.$$.fragment,a),v(wl.$$.fragment,a),v(_m.$$.fragment,a),v(Dl.$$.fragment,a),v(bm.$$.fragment,a),v(kl.$$.fragment,a),v($m.$$.fragment,a),v(El.$$.fragment,a),v(vm.$$.fragment,a),v(ql.$$.fragment,a),v(jm.$$.fragment,a),v(wm.$$.fragment,a),v(Tl.$$.fragment,a),v(km.$$.fragment,a),v(Nl.$$.fragment,a),v(Em.$$.fragment,a),v(Pl.$$.fragment,a),v(qm.$$.fragment,a),v(Fl.$$.fragment,a),v(Im.$$.fragment,a),v(Ll.$$.fragment,a),v(Tm.$$.fragment,a),v(Al.$$.fragment,a),v(Nm.$$.fragment,a),v(Sl.$$.fragment,a),v(Fm.$$.fragment,a),v(Cl.$$.fragment,a),v(Lm.$$.fragment,a),v(Ol.$$.fragment,a),v(Sm.$$.fragment,a),v(zl.$$.fragment,a),v(Cm.$$.fragment,a),v(Vl.$$.fragment,a),v(Ul.$$.fragment,a),v(zm.$$.fragment,a),v(Ml.$$.fragment,a),v(Vm.$$.fragment,a),v(Rl.$$.fragment,a),v(Um.$$.fragment,a),v(Bl.$$.fragment,a),v(Mm.$$.fragment,a),v(Gl.$$.fragment,a),v(Rm.$$.fragment,a),v(Hl.$$.fragment,a),v(Bm.$$.fragment,a),v(Gm.$$.fragment,a),v(Hm.$$.fragment,a),v(Wm.$$.fragment,a),v(Jl.$$.fragment,a),v(Kl.$$.fragment,a),v(Ym.$$.fragment,a),v(Ql.$$.fragment,a),v(Jm.$$.fragment,a),v(Zl.$$.fragment,a),v(Km.$$.fragment,a),v(Xl.$$.fragment,a),v(Qm.$$.fragment,a),v(Zm.$$.fragment,a),v(ei.$$.fragment,a),v(eh.$$.fragment,a),v(ti.$$.fragment,a),v(th.$$.fragment,a),v(si.$$.fragment,a),v(sh.$$.fragment,a),v(ai.$$.fragment,a),v(nh.$$.fragment,a),v(ni.$$.fragment,a),v(oh.$$.fragment,a),v(ri.$$.fragment,a),v(ih.$$.fragment,a),v(ph.$$.fragment,a),v(ch.$$.fragment,a),v(dh.$$.fragment,a),v(mh.$$.fragment,a),v(hh.$$.fragment,a),v(fh.$$.fragment,a),v(uh.$$.fragment,a),v(gh.$$.fragment,a),v(_h.$$.fragment,a),v(bh.$$.fragment,a),v($h.$$.fragment,a),v(xh.$$.fragment,a),v(vh.$$.fragment,a),v(yh.$$.fragment,a),v(jh.$$.fragment,a),v(wh.$$.fragment,a),v(Dh.$$.fragment,a),v(ci.$$.fragment,a),v(Eh.$$.fragment,a),v(di.$$.fragment,a),v(qh.$$.fragment,a),v(mi.$$.fragment,a),v(Th.$$.fragment,a),v(hi.$$.fragment,a),v(Nh.$$.fragment,a),v(fi.$$.fragment,a),v(Ph.$$.fragment,a),v(ui.$$.fragment,a),v(Fh.$$.fragment,a),v(gi.$$.fragment,a),v(Lh.$$.fragment,a),v(_i.$$.fragment,a),v(Ah.$$.fragment,a),v(bi.$$.fragment,a),v(Sh.$$.fragment,a),v(Ch.$$.fragment,a),v(xi.$$.fragment,a),v(Rh.$$.fragment,a),v(yi.$$.fragment,a),v(Bh.$$.fragment,a),v(Gh.$$.fragment,a),v(Hh.$$.fragment,a),v(Wh.$$.fragment,a),v(Yh.$$.fragment,a),v(Jh.$$.fragment,a),v(qi.$$.fragment,a),v(Kh.$$.fragment,a),v(Qh.$$.fragment,a),v(Ti.$$.fragment,a),v(Zh.$$.fragment,a),v(Ni.$$.fragment,a),v(Xh.$$.fragment,a),v(Pi.$$.fragment,a),v(ef.$$.fragment,a),v(Fi.$$.fragment,a),v(sf.$$.fragment,a),v(nf.$$.fragment,a),v(Li.$$.fragment,a),v(rf.$$.fragment,a),v(Ai.$$.fragment,a),v(of.$$.fragment,a),v(Si.$$.fragment,a),v(lf.$$.fragment,a),v(Ci.$$.fragment,a),v(cf.$$.fragment,a),v(df.$$.fragment,a),v(zi.$$.fragment,a),v(mf.$$.fragment,a),v(hf.$$.fragment,a),v(Ui.$$.fragment,a),v(ff.$$.fragment,a),v(Mi.$$.fragment,a),v(uf.$$.fragment,a),v(Ri.$$.fragment,a),v(gf.$$.fragment,a),v(Bi.$$.fragment,a),v(_f.$$.fragment,a),v(Gi.$$.fragment,a),v(yf.$$.fragment,a),v(jf.$$.fragment,a),v(wf.$$.fragment,a),v(Df.$$.fragment,a),v(kf.$$.fragment,a),v(Ef.$$.fragment,a),v(Ki.$$.fragment,a),v(Ff.$$.fragment,a),v(Lf.$$.fragment,a),v(Af.$$.fragment,a),v(Sf.$$.fragment,a),v(Cf.$$.fragment,a),v(Of.$$.fragment,a),v(zf.$$.fragment,a),v(Vf.$$.fragment,a),v(sp.$$.fragment,a),v(Mf.$$.fragment,a),v(ap.$$.fragment,a),v(Rf.$$.fragment,a),v(Bf.$$.fragment,a),v(rp.$$.fragment,a),v(Gf.$$.fragment,a),v(op.$$.fragment,a),v(Hf.$$.fragment,a),v(lp.$$.fragment,a),v(Wf.$$.fragment,a),v(ip.$$.fragment,a),v(Yf.$$.fragment,a),v(Jf.$$.fragment,a),v(Kf.$$.fragment,a),v(mp.$$.fragment,a),v(hp.$$.fragment,a),v(fp.$$.fragment,a),v(up.$$.fragment,a),v(gp.$$.fragment,a),v(Zf.$$.fragment,a),v(Xf.$$.fragment,a),v(eu.$$.fragment,a),v(tu.$$.fragment,a),VD=!1},d(a){s(i),a&&s(g),a&&s(f),y(t),a&&s(zr),a&&s(Ce),y(xs),a&&s(Q7),a&&s(X),y(Zp),y(Xp),y(Ur),y(tc),y(Mr),a&&s(Z7),a&&s(bn),y(sc),a&&s(X7),a&&s(Br),a&&s(eD),a&&s(q),y(ac),y(nc),y(Gr),y(rc),y(Hr),y(oc),y(lc),y(ic),y(Jr),y(dc),y(mc),y(Qr),y(Zr),y(hc),y(Xr),y(fc),y(eo),y(uc),y(to),y(gc),y(ao),y(bc),y(no),y($c),y(ro),y(xc),y(oo),y(vc),y(lo),y(yc),y(io),y(jc),y(po),y(wc),y(co),y(Dc),y(mo),y(kc),y(ho),y(Ec),y(fo),y(Ic),y(uo),y(Tc),y(Pc),y(Fc),y(_o),y(Lc),y(bo),y(Ac),y($o),y(Cc),y(xo),y(zc),y(vo),y(Vc),y(Uc),y(jo),y(Mc),y(wo),y(Bc),y(Do),y(Gc),y(ko),y(Hc),y(Eo),y(Wc),y(qo),y(Yc),y(Io),y(Kc),y(To),y(Zc),y(No),y(Xc),y(Po),y(ed),y(Fo),y(Lo),y(Ao),y(sd),y(So),y(ad),y(nd),y(Oo),y(rd),y(zo),y(ld),y(Vo),y(id),y(Uo),y(pd),y(Mo),y(cd),y(Ro),y(dd),y(Bo),y(hd),y(ud),y(gd),y(bd),y(Ho),y($d),y(Wo),y(xd),y(vd),y(yd),y(jd),y(wd),y(Dd),y(kd),y(Ed),y(qd),y(Id),y(Td),y(Nd),y(Pd),y(Fd),y(Ld),y(Ad),y(Sd),y(Cd),y(Od),y(zd),y(Vd),y(Ud),y(Md),y(al),y(Rd),y(nl),y(Bd),y(rl),y(Gd),y(ol),y(Hd),y(ll),y(il),y(Wd),y(Yd),y(pl),a&&s(tD),a&&s(Rt),y(Kd),y(cl),a&&s(sD),a&&s(ee),y(Qd),y(dl),a&&s(aD),a&&s(me),y(Zd),a&&s(nD),a&&s(he),y(em),a&&s(rD),a&&s(fe),y(sm),a&&s(oD),a&&s(An),y(nm),a&&s(lD),a&&s(hl),a&&s(iD),a&&s(F),y(rm),y(om),y(fl),y(lm),y(ul),y(im),y(gl),y(pm),y(bl),y(dm),y($l),y(mm),y(xl),y(hm),y(vl),y(fm),y(yl),y(um),y(jl),y(gm),y(wl),y(_m),y(Dl),y(bm),y(kl),y($m),y(El),y(vm),y(ql),y(jm),y(wm),y(Tl),y(km),y(Nl),y(Em),y(Pl),y(qm),y(Fl),y(Im),y(Ll),y(Tm),y(Al),y(Nm),y(Sl),y(Fm),y(Cl),y(Lm),y(Ol),y(Sm),y(zl),y(Cm),y(Vl),y(Ul),y(zm),y(Ml),y(Vm),y(Rl),y(Um),y(Bl),y(Mm),y(Gl),y(Rm),y(Hl),y(Bm),a&&s(pD),a&&s(Og),a&&s(cD),a&&s(Yn),y(Gm),a&&s(dD),a&&s(Yl),a&&s(mD),a&&s(A),y(Hm),y(Wm),y(Jl),y(Kl),y(Ym),y(Ql),y(Jm),y(Zl),y(Km),y(Xl),y(Qm),y(Zm),y(ei),y(eh),y(ti),y(th),y(si),y(sh),y(ai),y(nh),y(ni),y(oh),y(ri),y(ih),y(ph),y(ch),y(dh),y(mh),y(hh),y(fh),y(uh),y(gh),y(_h),y(bh),y($h),y(xh),y(vh),y(yh),a&&s(hD),a&&s(Qn),y(jh),a&&s(fD),a&&s(pi),a&&s(uD),a&&s(U),y(wh),y(Dh),y(ci),y(Eh),y(di),y(qh),y(mi),y(Th),y(hi),y(Nh),y(fi),y(Ph),y(ui),y(Fh),y(gi),y(Lh),y(_i),y(Ah),y(bi),a&&s(gD),a&&s(er),y(Sh),a&&s(_D),a&&s(C),y(Ch),y(xi),y(Rh),y(yi),y(Bh),y(Gh),y(Hh),y(Wh),y(Yh),y(Jh),y(qi),y(Kh),y(Qh),y(Ti),y(Zh),y(Ni),a&&s(bD),a&&s(Xt),y(Xh),y(Pi),a&&s($D),a&&s(B),y(ef),y(Fi),y(sf),y(nf),y(Li),y(rf),y(Ai),a&&s(xD),a&&s(We),y(of),y(Si),a&&s(vD),a&&s(te),y(lf),y(Ci),y(cf),a&&s(yD),a&&s(se),y(df),y(zi),y(mf),a&&s(jD),a&&s(es),y(hf),y(Ui),a&&s(wD),a&&s(ts),y(ff),y(Mi),a&&s(DD),a&&s(ss),y(uf),y(Ri),a&&s(kD),a&&s(as),y(gf),y(Bi),a&&s(ED),a&&s(M),y(_f),y(Gi),y(yf),y(jf),y(wf),y(Df),y(kf),a&&s(qD),a&&s(R),y(Ef),y(Ki),y(Ff),y(Lf),y(Af),y(Sf),y(Cf),a&&s(ID),a&&s(lr),y(Of),a&&s(TD),a&&s(ae),y(zf),y(Vf),y(sp),y(Mf),y(ap),a&&s(ND),a&&s(ir),y(Rf),a&&s(PD),a&&s(Ba),a&&s(FD),a&&s(K),y(Bf),y(rp),y(Gf),y(op),y(Hf),y(lp),y(Wf),y(ip),y(Yf),a&&s(LD),a&&s(pr),y(Jf),a&&s(AD),a&&s(O),y(Kf),y(mp),y(hp),y(fp),y(up),y(gp),a&&s(SD),a&&s(hr),y(Zf),a&&s(CD),a&&s(ur),y(Xf),a&&s(OD),a&&s(gr),y(eu),a&&s(zD),a&&s(_r),y(tu)}}}const Joe={local:"main-classes",sections:[{local:"datasets.DatasetInfo",title:"DatasetInfo"},{local:"datasets.Dataset",title:"Dataset"},{local:"datasets.DatasetDict",title:"DatasetDict"},{local:"datasets.IterableDataset",title:"IterableDataset"},{local:"datasets.IterableDatasetDict",title:"IterableDatasetDict"},{local:"datasets.Features",title:"Features"},{local:"datasets.MetricInfo",title:"MetricInfo"},{local:"datasets.Metric",title:"Metric"},{local:"datasets.filesystems.S3FileSystem",title:"Filesystems"},{local:"datasets.fingerprint.Hasher",title:"Fingerprint"}],title:"Main classes"};function Koe(k){return une(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class nle extends dne{constructor(i){super();mne(this,i,Koe,Yoe,hne,{})}}export{nle as default,Joe as metadata};
