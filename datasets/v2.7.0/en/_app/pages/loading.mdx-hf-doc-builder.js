import{S as mg,i as gg,s as _g,e as l,k as d,w as m,t as r,M as vg,c as o,d as t,m as f,a as n,x as g,h as i,b as c,G as s,g as p,y as _,q as v,o as $,B as w,v as $g}from"../chunks/vendor-hf-doc-builder.js";import{T as $a}from"../chunks/Tip-hf-doc-builder.js";import{I as x}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as E}from"../chunks/CodeBlock-hf-doc-builder.js";import{C as xo}from"../chunks/CodeBlockFw-hf-doc-builder.js";import"../chunks/IconTensorflow-hf-doc-builder.js";function wg(A){let h,q,u,j,k;return{c(){h=l("p"),q=r("Refer to the "),u=l("a"),j=r("Upload a dataset to the Hub"),k=r(" tutorial for more details on how to create a dataset repository on the Hub, and how to upload your data files."),this.h()},l(b){h=o(b,"P",{});var y=n(h);q=i(y,"Refer to the "),u=o(y,"A",{href:!0});var P=n(u);j=i(P,"Upload a dataset to the Hub"),P.forEach(t),k=i(y," tutorial for more details on how to create a dataset repository on the Hub, and how to upload your data files."),y.forEach(t),this.h()},h(){c(u,"href","./upload_dataset")},m(b,y){p(b,h,y),s(h,q),s(h,u),s(u,j),s(h,k)},d(b){b&&t(h)}}}function yg(A){let h,q,u,j,k;return{c(){h=l("p"),q=r("If you don\u2019t specify which data files to use, "),u=l("a"),j=r("load_dataset()"),k=r(" will return all the data files. This can take a long time if you load a large dataset like C4, which is approximately 13TB of data."),this.h()},l(b){h=o(b,"P",{});var y=n(h);q=i(y,"If you don\u2019t specify which data files to use, "),u=o(y,"A",{href:!0});var P=n(u);j=i(P,"load_dataset()"),P.forEach(t),k=i(y," will return all the data files. This can take a long time if you load a large dataset like C4, which is approximately 13TB of data."),y.forEach(t),this.h()},h(){c(u,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset")},m(b,y){p(b,h,y),s(h,q),s(h,u),s(u,j),s(h,k)},d(b){b&&t(h)}}}function bg(A){let h,q,u,j,k;return{c(){h=l("p"),q=r("For more details, check out the "),u=l("a"),j=r("how to load tabular datasets from CSV files"),k=r(" guide."),this.h()},l(b){h=o(b,"P",{});var y=n(h);q=i(y,"For more details, check out the "),u=o(y,"A",{href:!0});var P=n(u);j=i(P,"how to load tabular datasets from CSV files"),P.forEach(t),k=i(y," guide."),y.forEach(t),this.h()},h(){c(u,"href","tabular_load#csv-files")},m(b,y){p(b,h,y),s(h,q),s(h,u),s(u,j),s(h,k)},d(b){b&&t(h)}}}function jg(A){let h,q,u,j,k;return{c(){h=l("p"),q=r("For more details, check out the "),u=l("a"),j=r("how to load tabular datasets from SQL databases"),k=r(" guide."),this.h()},l(b){h=o(b,"P",{});var y=n(h);q=i(y,"For more details, check out the "),u=o(y,"A",{href:!0});var P=n(u);j=i(P,"how to load tabular datasets from SQL databases"),P.forEach(t),k=i(y," guide."),y.forEach(t),this.h()},h(){c(u,"href","tabular_load#databases")},m(b,y){p(b,h,y),s(h,q),s(h,u),s(u,j),s(h,k)},d(b){b&&t(h)}}}function kg(A){let h,q,u,j,k;return{c(){h=l("p"),q=r("For more details, check out the "),u=l("a"),j=r("how to load tabular datasets from Pandas DataFrames"),k=r(" guide."),this.h()},l(b){h=o(b,"P",{});var y=n(h);q=i(y,"For more details, check out the "),u=o(y,"A",{href:!0});var P=n(u);j=i(P,"how to load tabular datasets from Pandas DataFrames"),P.forEach(t),k=i(y," guide."),y.forEach(t),this.h()},h(){c(u,"href","tabular_load#pandas-dataframes")},m(b,y){p(b,h,y),s(h,q),s(h,u),s(u,j),s(h,k)},d(b){b&&t(h)}}}function qg(A){let h,q,u,j;return{c(){h=l("p"),q=l("code"),u=r("pct1_dropremainder"),j=r(" rounding may truncate the last examples in a dataset if the number of examples in your dataset don\u2019t divide evenly by 100.")},l(k){h=o(k,"P",{});var b=n(h);q=o(b,"CODE",{});var y=n(q);u=i(y,"pct1_dropremainder"),y.forEach(t),j=i(b," rounding may truncate the last examples in a dataset if the number of examples in your dataset don\u2019t divide evenly by 100."),b.forEach(t)},m(k,b){p(k,h,b),s(h,q),s(q,u),s(h,j)},d(k){k&&t(h)}}}function Eg(A){let h,q,u,j,k;return{c(){h=l("p"),q=r("Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),u=l("a"),j=r("Evaluate"),k=r("! In addition to metrics, you can find more tools for evaluating models and datasets."),this.h()},l(b){h=o(b,"P",{});var y=n(h);q=i(y,"Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),u=o(y,"A",{href:!0,rel:!0});var P=n(u);j=i(P,"Evaluate"),P.forEach(t),k=i(y,"! In addition to metrics, you can find more tools for evaluating models and datasets."),y.forEach(t),this.h()},h(){c(u,"href","https://huggingface.co/docs/evaluate/index"),c(u,"rel","nofollow")},m(b,y){p(b,h,y),s(h,q),s(h,u),s(u,j),s(h,k)},d(b){b&&t(h)}}}function Pg(A){let h,q,u,j,k;return{c(){h=l("p"),q=r("See the "),u=l("a"),j=r("Metrics"),k=r(" guide for more details on how to write your own metric loading script."),this.h()},l(b){h=o(b,"P",{});var y=n(h);q=i(y,"See the "),u=o(y,"A",{href:!0});var P=n(u);j=i(P,"Metrics"),P.forEach(t),k=i(y," guide for more details on how to write your own metric loading script."),y.forEach(t),this.h()},h(){c(u,"href","./how_to_metrics#custom-metric-loading-script")},m(b,y){p(b,h,y),s(h,q),s(h,u),s(u,j),s(h,k)},d(b){b&&t(h)}}}function xg(A){let h,q,u,j,k;return{c(){h=l("p"),q=r("Once you\u2019ve loaded a metric for distributed usage, you can compute the metric as usual. Behind the scenes, "),u=l("a"),j=r("Metric.compute()"),k=r(" gathers all the predictions and references from the nodes, and computes the final metric."),this.h()},l(b){h=o(b,"P",{});var y=n(h);q=i(y,"Once you\u2019ve loaded a metric for distributed usage, you can compute the metric as usual. Behind the scenes, "),u=o(y,"A",{href:!0});var P=n(u);j=i(P,"Metric.compute()"),P.forEach(t),k=i(y," gathers all the predictions and references from the nodes, and computes the final metric."),y.forEach(t),this.h()},h(){c(u,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Metric.compute")},m(b,y){p(b,h,y),s(h,q),s(h,u),s(u,j),s(h,k)},d(b){b&&t(h)}}}function Ag(A){let h,q,u,j,k,b,y,P,Yi,Ao,Ls,Ji,So,Hs,Ui,Do,S,Le,Wi,Bi,He,Qi,Gi,Fe,Ki,Xi,Re,Zi,ap,Me,tp,sp,ze,ep,To,C,lp,bt,op,np,jt,rp,ip,kt,pp,dp,Io,Fs,No,Q,wa,Ve,qt,fp,Ye,cp,Co,R,hp,Rs,up,mp,Ms,gp,_p,Oo,ya,vp,Et,$p,wp,Lo,Pt,Ho,ba,yp,Je,bp,jp,Fo,xt,Ro,ja,Mo,D,kp,Ue,qp,Ep,We,Pp,xp,Be,Ap,Sp,Qe,Dp,Tp,Ge,Ip,Np,zo,At,Vo,ka,Yo,M,Cp,Ke,Op,Lp,Xe,Hp,Fp,Jo,St,Uo,qa,Rp,Ze,Mp,zp,Wo,Dt,Bo,G,Ea,al,Tt,Vp,tl,Yp,Qo,Pa,Jp,zs,Up,Wp,Go,xa,sl,Bp,Qp,el,Gp,Ko,It,Xo,K,Aa,ll,Nt,Kp,ol,Xp,Zo,Vs,Zp,an,Ct,tn,Sa,ad,Ys,td,sd,sn,Ot,en,X,Da,nl,Lt,ed,rl,ld,ln,T,od,il,nd,rd,pl,id,pd,dl,dd,fd,fl,cd,hd,Js,ud,md,on,Z,Ta,cl,Ht,gd,hl,_d,nn,Us,vd,rn,Ft,pn,Ia,dn,aa,Na,ul,Rt,$d,ml,wd,fn,Ca,yd,Ws,bd,jd,cn,Mt,hn,Bs,kd,un,zt,mn,Oa,qd,gl,Ed,Pd,gn,Vt,_n,Qs,xd,vn,Yt,$n,Gs,Ad,wn,ta,La,_l,Jt,Sd,vl,Dd,yn,Ks,Td,bn,Xs,Id,jn,Ut,kn,Zs,Nd,qn,Wt,En,sa,Ha,$l,Bt,Cd,wl,Od,Pn,Fa,Ld,ae,Hd,Fd,xn,Qt,An,Ra,Sn,ea,Ma,yl,Gt,Rd,bl,Md,Dn,te,zd,Tn,za,Vd,jl,Yd,Jd,In,Kt,Nn,la,Va,kl,Xt,Ud,ql,Wd,Cn,Ya,Bd,se,Qd,Gd,On,oa,Ja,El,Zt,Kd,Pl,Xd,Ln,Ua,Zd,ee,af,tf,Hn,as,Fn,na,Wa,xl,ts,sf,Al,ef,Rn,Ba,lf,Sl,of,nf,Mn,ss,zn,ra,Qa,Dl,es,rf,Tl,pf,Vn,Ga,df,le,ff,cf,Yn,ls,Jn,oe,hf,Un,Ka,uf,Il,mf,gf,Wn,os,Bn,ia,Xa,Nl,ns,_f,Cl,vf,Qn,Za,$f,ne,wf,yf,Gn,rs,Kn,at,Xn,pa,tt,Ol,is,bf,Ll,jf,Zn,re,kf,ar,z,qf,Hl,Ef,Pf,Fl,xf,Af,tr,da,st,Rl,ps,Sf,Ml,Df,sr,V,Tf,ie,If,Nf,pe,Cf,Of,er,Y,Lf,zl,Hf,Ff,Vl,Rf,Mf,lr,ds,or,et,zf,Yl,Vf,Yf,nr,fs,rr,de,Jf,ir,cs,pr,fe,Uf,dr,hs,fr,ce,Wf,cr,us,hr,fa,lt,Jl,ms,Bf,Ul,Qf,ur,he,Gf,mr,gs,gr,ot,Kf,Wl,Xf,Zf,_r,_s,vr,nt,$r,ue,wr,ca,rt,Bl,vs,ac,Ql,tc,yr,me,sc,br,ha,it,Gl,$s,ec,Kl,lc,jr,O,oc,ge,nc,rc,Xl,ic,pc,Zl,dc,fc,kr,pt,cc,ws,hc,uc,qr,ys,Er,N,mc,ao,gc,_c,to,vc,$c,so,wc,yc,_e,bc,jc,Pr,ua,dt,eo,bs,kc,lo,qc,xr,L,Ec,ve,Pc,xc,js,Ac,Sc,$e,Dc,Tc,Ar,ft,Ic,we,Nc,Cc,Sr,ks,Dr,J,Oc,oo,Lc,Hc,ye,Fc,Rc,Tr,qs,Ir,be,Mc,Nr,Es,Cr,ma,ct,no,Ps,zc,ro,Vc,Or,ht,Lr,je,Yc,Hr,xs,Fr,ut,Rr,ga,mt,io,As,Jc,po,Uc,Mr,U,Wc,fo,Bc,Qc,ke,Gc,Kc,zr,Ss,Vr,_a,gt,co,Ds,Xc,ho,Zc,Yr,qe,ah,Jr,Ee,th,Ur,W,uo,Ts,sh,mo,eh,lh,oh,go,va,nh,_o,rh,ih,vo,ph,dh,fh,$o,Is,ch,Pe,hh,uh,Wr,Ns,Br,_t,Qr,vt,mh,wo,gh,_h,Gr,Cs,Kr;return b=new x({}),qt=new x({}),Pt=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("lhoestq/demo1")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;lhoestq/demo1&quot;</span>)`}}),xt=new E({props:{code:`dataset = load_dataset(
  "lhoestq/custom_squad",
  revision="main"  # tag name, or branch name, or commit hash
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(
<span class="hljs-meta">... </span>  <span class="hljs-string">&quot;lhoestq/custom_squad&quot;</span>,
<span class="hljs-meta">... </span>  revision=<span class="hljs-string">&quot;main&quot;</span>  <span class="hljs-comment"># tag name, or branch name, or commit hash</span>
<span class="hljs-meta">... </span>)`}}),ja=new $a({props:{$$slots:{default:[wg]},$$scope:{ctx:A}}}),At=new E({props:{code:`data_files = {"train": "train.csv", "test": "test.csv"}
dataset = load_dataset("namespace/your_dataset_name", data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;train.csv&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;test.csv&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;namespace/your_dataset_name&quot;</span>, data_files=data_files)`}}),ka=new $a({props:{warning:!0,$$slots:{default:[yg]},$$scope:{ctx:A}}}),St=new E({props:{code:`from datasets import load_dataset

c4_subset = load_dataset("allenai/c4", data_files="en/c4-train.0000*-of-01024.json.gz")

c4_subset = load_dataset("allenai/c4", data_dir="en")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-comment"># load files that match the grep pattern</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_subset = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=<span class="hljs-string">&quot;en/c4-train.0000*-of-01024.json.gz&quot;</span>)

<span class="hljs-comment"># load dataset from the en directory on the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_subset = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_dir=<span class="hljs-string">&quot;en&quot;</span>)`}}),Dt=new E({props:{code:`data_files = {"validation": "en/c4-validation.*.json.gz"}
c4_validation = load_dataset("allenai/c4", data_files=data_files, split="validation")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;validation&quot;</span>: <span class="hljs-string">&quot;en/c4-validation.*.json.gz&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_validation = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;validation&quot;</span>)`}}),Tt=new x({}),It=new E({props:{code:`dataset = load_dataset("path/to/local/loading_script/loading_script.py", split="train")
dataset = load_dataset("path/to/local/loading_script", split="train")  # equivalent because the file has the same name as the directory`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/local/loading_script/loading_script.py&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/local/loading_script&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)  <span class="hljs-comment"># equivalent because the file has the same name as the directory</span>`}}),Nt=new x({}),Ct=new E({props:{code:"git clone https://huggingface.co/datasets/eli5",highlighted:'git <span class="hljs-built_in">clone</span> https://huggingface.co/datasets/eli5'}}),Ot=new E({props:{code:`from datasets import load_dataset
eli5 = load_dataset("path/to/local/eli5")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>eli5 = load_dataset(<span class="hljs-string">&quot;path/to/local/eli5&quot;</span>)`}}),Lt=new x({}),Ht=new x({}),Ft=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("csv", data_files="my_file.csv")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.csv&quot;</span>)`}}),Ia=new $a({props:{$$slots:{default:[bg]},$$scope:{ctx:A}}}),Rt=new x({}),Mt=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("json", data_files="my_file.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.json&quot;</span>)`}}),zt=new E({props:{code:`{"a": 1, "b": 2.0, "c": "foo", "d": false}
{"a": 4, "b": -5.5, "c": null, "d": true}`,highlighted:`<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2.0</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;foo&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-5.5</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">}</span>`}}),Vt=new E({props:{code:`
from datasets import load_dataset
dataset = load_dataset("json", data_files="my_file.json", field="data")`,highlighted:`{<span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>,
 <span class="hljs-string">&quot;data&quot;</span>: [{<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2.0</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>: false},
          {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&quot;b&quot;</span>: -<span class="hljs-number">5.5</span>, <span class="hljs-string">&quot;c&quot;</span>: null, <span class="hljs-string">&quot;d&quot;</span>: true}]
}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.json&quot;</span>, field=<span class="hljs-string">&quot;data&quot;</span>)`}}),Yt=new E({props:{code:`base_url = "https://rajpurkar.github.io/SQuAD-explorer/dataset/"
dataset = load_dataset("json", data_files={"train": base_url + "train-v1.1.json", "validation": base_url + "dev-v1.1.json"}, field="data")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/dataset/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: base_url + <span class="hljs-string">&quot;train-v1.1.json&quot;</span>, <span class="hljs-string">&quot;validation&quot;</span>: base_url + <span class="hljs-string">&quot;dev-v1.1.json&quot;</span>}, field=<span class="hljs-string">&quot;data&quot;</span>)`}}),Jt=new x({}),Ut=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("parquet", data_files={'train': 'train.parquet', 'test': 'test.parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;parquet&quot;</span>, data_files={<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;train.parquet&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-string">&#x27;test.parquet&#x27;</span>})`}}),Wt=new E({props:{code:`base_url = "https://storage.googleapis.com/huggingface-nlp/cache/datasets/wikipedia/20200501.en/1.0.0/"
data_files = {"train": base_url + "wikipedia-train.parquet"}
wiki = load_dataset("parquet", data_files=data_files, split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://storage.googleapis.com/huggingface-nlp/cache/datasets/wikipedia/20200501.en/1.0.0/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: base_url + <span class="hljs-string">&quot;wikipedia-train.parquet&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = load_dataset(<span class="hljs-string">&quot;parquet&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),Bt=new x({}),Qt=new E({props:{code:`from datasets import Dataset
dataset = Dataset.from_sql("data_table_name", con="sqlite:///sqlite_file.db")
dataset = Dataset.from_sql("SELECT text FROM table WHERE length(text) > 100 LIMIT 10", con="sqlite:///sqlite_file.db")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-comment"># load entire table</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_sql(<span class="hljs-string">&quot;data_table_name&quot;</span>, con=<span class="hljs-string">&quot;sqlite:///sqlite_file.db&quot;</span>)
<span class="hljs-comment"># load from query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_sql(<span class="hljs-string">&quot;SELECT text FROM table WHERE length(text) &gt; 100 LIMIT 10&quot;</span>, con=<span class="hljs-string">&quot;sqlite:///sqlite_file.db&quot;</span>)`}}),Ra=new $a({props:{$$slots:{default:[jg]},$$scope:{ctx:A}}}),Gt=new x({}),Kt=new E({props:{code:`from datasets import load_dataset

oscar_afrikaans = load_dataset("oscar-corpus/OSCAR-2201", "af", num_proc=8)
imagenet = load_dataset("imagenet-1k", num_proc=8)
ml_librispeech_spanish = load_dataset("facebook/multilingual_librispeech", "spanish", num_proc=8)`,highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

oscar_afrikaans = load_dataset(<span class="hljs-string">&quot;oscar-corpus/OSCAR-2201&quot;</span>, <span class="hljs-string">&quot;af&quot;</span>, num_proc=<span class="hljs-number">8</span>)
imagenet = load_dataset(<span class="hljs-string">&quot;imagenet-1k&quot;</span>, num_proc=<span class="hljs-number">8</span>)
ml_librispeech_spanish = load_dataset(<span class="hljs-string">&quot;facebook/multilingual_librispeech&quot;</span>, <span class="hljs-string">&quot;spanish&quot;</span>, num_proc=<span class="hljs-number">8</span>)`}}),Xt=new x({}),Zt=new x({}),as=new E({props:{code:`from datasets import Dataset
my_dict = {"a": [1, 2, 3]}
dataset = Dataset.from_dict(my_dict)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>my_dict = {<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict(my_dict)`}}),ts=new x({}),ss=new E({props:{code:`from datasets import Dataset
my_list = [{"a": 1}, {"a": 2}, {"a": 3}]
dataset = Dataset.from_list(my_list)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>my_list = [{<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>}, {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">2</span>}, {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">3</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_list(my_list)`}}),es=new x({}),ls=new E({props:{code:`from datasets import Dataset
def my_gen():
    for i in range(1, 4):
        yield {"a": i}
dataset = Dataset.from_generator(my_gen)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_gen</span>():
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>):
<span class="hljs-meta">... </span>        <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;a&quot;</span>: i}
...
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_generator(my_gen)`}}),os=new E({props:{code:`def gen(shards):
    for shard in shards:
        with open(shard) as f:
            for line in f:
                yield {"line": line}
shards = [f"data{i}.txt" for i in range(32)]
ds = Dataset.from_generator(gen, gen_kwargs={"shards": shards})
ds = ds.shuffle(seed=42, buffer_size=10_000)  # shuffles the shards order + uses a shuffle buffer
from torch.utils.data import DataLoader
dataloader = DataLoader(ds.with_format("torch"), num_workers=4)  # give each worker a subset of 32/4=8 shards`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">shards</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> shard <span class="hljs-keyword">in</span> shards:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(shard) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:
<span class="hljs-meta">... </span>                <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;line&quot;</span>: line}
...
<span class="hljs-meta">&gt;&gt;&gt; </span>shards = [<span class="hljs-string">f&quot;data<span class="hljs-subst">{i}</span>.txt&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_generator(gen, gen_kwargs={<span class="hljs-string">&quot;shards&quot;</span>: shards})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.shuffle(seed=<span class="hljs-number">42</span>, buffer_size=<span class="hljs-number">10_000</span>)  <span class="hljs-comment"># shuffles the shards order + uses a shuffle buffer</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader = DataLoader(ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>), num_workers=<span class="hljs-number">4</span>)  <span class="hljs-comment"># give each worker a subset of 32/4=8 shards</span>`}}),ns=new x({}),rs=new E({props:{code:`from datasets import Dataset
import pandas as pd
df = pd.DataFrame({"a": [1, 2, 3]})
dataset = Dataset.from_pandas(df)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd
<span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_pandas(df)`}}),at=new $a({props:{$$slots:{default:[kg]},$$scope:{ctx:A}}}),is=new x({}),ps=new x({}),ds=new xo({props:{group1:{id:"stringapi",code:'train_test_ds = datasets.load_dataset("bookcorpus", split="train+test")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_test_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train+test&quot;</span>)'},group2:{id:"readinstruction",code:`ri = datasets.ReadInstruction("train") + datasets.ReadInstruction("test")
train_test_ds = datasets.load_dataset("bookcorpus", split=ri)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ri = datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;test&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_test_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=ri)`}}}),fs=new xo({props:{group1:{id:"stringapi",code:'train_10_20_ds = datasets.load_dataset("bookcorpus", split="train[10:20]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[10:20]&quot;</span>)'},group2:{id:"readinstruction",code:`train_10_20_ds = datasets.load_dataset("bookcorpu"', split=datasets.ReadInstruction("train", from_=10, to=20, unit="abs"))`,highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpu&quot;</span><span class="hljs-string">&#x27;, split=datasets.ReadInstruction(&quot;train&quot;, from_=10, to=20, unit=&quot;abs&quot;))</span>'}}}),cs=new xo({props:{group1:{id:"stringapi",code:'train_10pct_ds = datasets.load_dataset("bookcorpus", split="train[:10%]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[:10%]&quot;</span>)'},group2:{id:"readinstruction",code:'train_10_20_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train", to=10, unit="%"))',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>))'}}}),hs=new xo({props:{group1:{id:"stringapi",code:'train_10_80pct_ds = datasets.load_dataset("bookcorpus", split="train[:10%]+train[-80%:]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_80pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[:10%]+train[-80%:]&quot;</span>)'},group2:{id:"readinstruction",code:`ri = (datasets.ReadInstruction("train", to=10, unit="%") + datasets.ReadInstruction("train", from_=-80, unit="%"))
train_10_80pct_ds = datasets.load_dataset("bookcorpus", split=ri)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ri = (datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=-<span class="hljs-number">80</span>, unit=<span class="hljs-string">&quot;%&quot;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_80pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=ri)`}}}),us=new xo({props:{group1:{id:"stringapi",code:`val_ds = datasets.load_dataset("bookcorpus", split=[f"train[{k}%:{k+10}%]" for k in range(0, 100, 10)])
train_ds = datasets.load_dataset("bookcorpus", split=[f"train[:{k}%]+train[{k+10}%:]" for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>val_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=[<span class="hljs-string">f&quot;train[<span class="hljs-subst">{k}</span>%:<span class="hljs-subst">{k+<span class="hljs-number">10</span>}</span>%]&quot;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>train_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=[<span class="hljs-string">f&quot;train[:<span class="hljs-subst">{k}</span>%]+train[<span class="hljs-subst">{k+<span class="hljs-number">10</span>}</span>%:]&quot;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`},group2:{id:"readinstruction",code:`val_ds = datasets.load_dataset("bookcorpus", [datasets.ReadInstruction("train", from_=k, to=k+10, unit="%") for k in range(0, 100, 10)])
train_ds = datasets.load_dataset("bookcorpus", [(datasets.ReadInstruction("train", to=k, unit="%") + datasets.ReadInstruction("train", from_=k+10, unit="%")) for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>val_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, [datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=k, to=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>train_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, [(datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=k, unit=<span class="hljs-string">&quot;%&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>)) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`}}}),ms=new x({}),gs=new E({props:{code:`train_50_52_ds = datasets.load_dataset("bookcorpus", split="train[50%:52%]")
train_52_54_ds = datasets.load_dataset("bookcorpus", split="train[52%:54%]")`,highlighted:`<span class="hljs-comment"># 19 records, from 500 (included) to 519 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[50%:52%]&quot;</span>)
<span class="hljs-comment"># 20 records, from 519 (included) to 539 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[52%:54%]&quot;</span>)`}}),_s=new E({props:{code:`train_50_52pct1_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train", from_=50, to=52, unit="%", rounding="pct1_dropremainder"))
train_52_54pct1_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train",from_=52, to=54, unit="%", rounding="pct1_dropremainder"))
train_50_52pct1_ds = datasets.load_dataset("bookcorpus", split="train[50%:52%](pct1_dropremainder)")
train_52_54pct1_ds = datasets.load_dataset("bookcorpus", split="train[52%:54%](pct1_dropremainder)")`,highlighted:`<span class="hljs-comment"># 18 records, from 450 (included) to 468 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=<span class="hljs-number">50</span>, to=<span class="hljs-number">52</span>, unit=<span class="hljs-string">&quot;%&quot;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))
<span class="hljs-comment"># 18 records, from 468 (included) to 486 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>,from_=<span class="hljs-number">52</span>, to=<span class="hljs-number">54</span>, unit=<span class="hljs-string">&quot;%&quot;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))
<span class="hljs-comment"># Or equivalently:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[50%:52%](pct1_dropremainder)&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[52%:54%](pct1_dropremainder)&quot;</span>)`}}),nt=new $a({props:{warning:!0,$$slots:{default:[qg]},$$scope:{ctx:A}}}),vs=new x({}),$s=new x({}),ys=new E({props:{code:'dataset = load_dataset("matinf", "summarization")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;matinf&quot;</span>, <span class="hljs-string">&quot;summarization&quot;</span>)
Downloading <span class="hljs-keyword">and</span> preparing dataset matinf/summarization (download: Unknown size, generated: <span class="hljs-number">246.89</span> MiB, post-processed: Unknown size, total: <span class="hljs-number">246.89</span> MiB) to /root/.cache/huggingface/datasets/matinf/summarization/<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>/82eee5e71c3ceaf20d909bca36ff237452b4e4ab195d3be7ee1c78b53e6f540e...
AssertionError: The dataset matinf <span class="hljs-keyword">with</span> config summarization requires manual data. 
Please follow the manual download instructions: To use MATINF you have to download it manually. Please fill this google form (https://forms.gle/nkH4LVE4iNQeDzsc9). You will receive a download link <span class="hljs-keyword">and</span> a password once you complete the form. Please extract <span class="hljs-built_in">all</span> files <span class="hljs-keyword">in</span> one folder <span class="hljs-keyword">and</span> load the dataset <span class="hljs-keyword">with</span>: *datasets.load_dataset(<span class="hljs-string">&#x27;matinf&#x27;</span>, data_dir=<span class="hljs-string">&#x27;path/to/folder/folder_name&#x27;</span>)*. 
Manual data can be loaded <span class="hljs-keyword">with</span> \`datasets.load_dataset(matinf, data_dir=<span class="hljs-string">&#x27;&lt;path/to/manual/data&gt;&#x27;</span>) `}}),bs=new x({}),ks=new E({props:{code:`class_names = ["sadness", "joy", "love", "anger", "fear", "surprise"]
emotion_features = Features({'text': Value('string'), 'label': ClassLabel(names=class_names)})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>class_names = [<span class="hljs-string">&quot;sadness&quot;</span>, <span class="hljs-string">&quot;joy&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;anger&quot;</span>, <span class="hljs-string">&quot;fear&quot;</span>, <span class="hljs-string">&quot;surprise&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>emotion_features = Features({<span class="hljs-string">&#x27;text&#x27;</span>: Value(<span class="hljs-string">&#x27;string&#x27;</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=class_names)})`}}),qs=new E({props:{code:"dataset = load_dataset('csv', data_files=file_dict, delimiter=';', column_names=['text', 'label'], features=emotion_features)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files=file_dict, delimiter=<span class="hljs-string">&#x27;;&#x27;</span>, column_names=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>], features=emotion_features)'}}),Es=new E({props:{code:"dataset['train'].features",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&#x27;train&#x27;</span>].features
{<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">6</span>, names=[<span class="hljs-string">&#x27;sadness&#x27;</span>, <span class="hljs-string">&#x27;joy&#x27;</span>, <span class="hljs-string">&#x27;love&#x27;</span>, <span class="hljs-string">&#x27;anger&#x27;</span>, <span class="hljs-string">&#x27;fear&#x27;</span>, <span class="hljs-string">&#x27;surprise&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Ps=new x({}),ht=new $a({props:{warning:!0,$$slots:{default:[Eg]},$$scope:{ctx:A}}}),xs=new E({props:{code:`from datasets import load_metric
metric = load_metric('PATH/TO/MY/METRIC/SCRIPT')

# Example of typical usage
for batch in dataset:
    inputs, references = batch
    predictions = model(inputs)
    metric.add_batch(predictions=predictions, references=references)
score = metric.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;PATH/TO/MY/METRIC/SCRIPT&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Example of typical usage</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> dataset:
<span class="hljs-meta">... </span>    inputs, references = batch
<span class="hljs-meta">... </span>    predictions = model(inputs)
<span class="hljs-meta">... </span>    metric.add_batch(predictions=predictions, references=references)
<span class="hljs-meta">&gt;&gt;&gt; </span>score = metric.compute()`}}),ut=new $a({props:{$$slots:{default:[Pg]},$$scope:{ctx:A}}}),As=new x({}),Ss=new E({props:{code:`from datasets import load_metric
metric = load_metric('bleurt', name='bleurt-base-128')
metric = load_metric('bleurt', name='bleurt-base-512')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">metric = load_metric(<span class="hljs-string">&#x27;bleurt&#x27;</span>, name=<span class="hljs-string">&#x27;bleurt-base-128&#x27;</span>)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">metric = load_metric(<span class="hljs-string">&#x27;bleurt&#x27;</span>, name=<span class="hljs-string">&#x27;bleurt-base-512&#x27;</span>)</span>`}}),Ds=new x({}),Ns=new E({props:{code:`from datasets import load_metric
metric = load_metric('glue', 'mrpc', num_process=num_process, process_id=rank)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, num_process=num_process, process_id=rank)`}}),_t=new $a({props:{$$slots:{default:[xg]},$$scope:{ctx:A}}}),Cs=new E({props:{code:`from datasets import load_metric
metric = load_metric('glue', 'mrpc', num_process=num_process, process_id=process_id, experiment_id="My_experiment_10")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, num_process=num_process, process_id=process_id, experiment_id=<span class="hljs-string">&quot;My_experiment_10&quot;</span>)`}}),{c(){h=l("meta"),q=d(),u=l("h1"),j=l("a"),k=l("span"),m(b.$$.fragment),y=d(),P=l("span"),Yi=r("Load"),Ao=d(),Ls=l("p"),Ji=r("Your data can be stored in various places; they can be on your local machine\u2019s disk, in a Github repository, and in in-memory data structures like Python dictionaries and Pandas DataFrames. Wherever a dataset is stored, \u{1F917} Datasets can help you load it."),So=d(),Hs=l("p"),Ui=r("This guide will show you how to load a dataset from:"),Do=d(),S=l("ul"),Le=l("li"),Wi=r("The Hub without a dataset loading script"),Bi=d(),He=l("li"),Qi=r("Local loading script"),Gi=d(),Fe=l("li"),Ki=r("Local files"),Xi=d(),Re=l("li"),Zi=r("In-memory data"),ap=d(),Me=l("li"),tp=r("Offline"),sp=d(),ze=l("li"),ep=r("A specific slice of a split"),To=d(),C=l("p"),lp=r("For more details specific to loading other dataset modalities, take a look at the "),bt=l("a"),op=r("load audio dataset guide"),np=r(", the "),jt=l("a"),rp=r("load image dataset guide"),ip=r(", or the "),kt=l("a"),pp=r("load text dataset guide"),dp=r("."),Io=d(),Fs=l("a"),No=d(),Q=l("h2"),wa=l("a"),Ve=l("span"),m(qt.$$.fragment),fp=d(),Ye=l("span"),cp=r("Hugging Face Hub"),Co=d(),R=l("p"),hp=r("Datasets are loaded from a dataset loading script that downloads and generates the dataset. However, you can also load a dataset from any dataset repository on the Hub without a loading script! Begin by "),Rs=l("a"),up=r("creating a dataset repository"),mp=r(" and upload your data files. Now you can use the "),Ms=l("a"),gp=r("load_dataset()"),_p=r(" function to load the dataset."),Oo=d(),ya=l("p"),vp=r("For example, try loading the files from this "),Et=l("a"),$p=r("demo repository"),wp=r(" by providing the repository namespace and dataset name. This dataset repository contains CSV files, and the code below loads the dataset from the CSV files:"),Lo=d(),m(Pt.$$.fragment),Ho=d(),ba=l("p"),yp=r("Some datasets may have more than one version based on Git tags, branches, or commits. Use the "),Je=l("code"),bp=r("revision"),jp=r(" parameter to specify the dataset version you want to load:"),Fo=d(),m(xt.$$.fragment),Ro=d(),m(ja.$$.fragment),Mo=d(),D=l("p"),kp=r("A dataset without a loading script by default loads all the data into the "),Ue=l("code"),qp=r("train"),Ep=r(" split. Use the "),We=l("code"),Pp=r("data_files"),xp=r(" parameter to map data files to splits like "),Be=l("code"),Ap=r("train"),Sp=r(", "),Qe=l("code"),Dp=r("validation"),Tp=r(" and "),Ge=l("code"),Ip=r("test"),Np=r(":"),zo=d(),m(At.$$.fragment),Vo=d(),m(ka.$$.fragment),Yo=d(),M=l("p"),Cp=r("You can also load a specific subset of the files with the "),Ke=l("code"),Op=r("data_files"),Lp=r(" or "),Xe=l("code"),Hp=r("data_dir"),Fp=r(" parameter. These parameters can accept a relative path which resolves to the base path corresponding to where the dataset is loaded from."),Jo=d(),m(St.$$.fragment),Uo=d(),qa=l("p"),Rp=r("The "),Ze=l("code"),Mp=r("split"),zp=r(" parameter can also map a data file to a specific split:"),Wo=d(),m(Dt.$$.fragment),Bo=d(),G=l("h2"),Ea=l("a"),al=l("span"),m(Tt.$$.fragment),Vp=d(),tl=l("span"),Yp=r("Local loading script"),Qo=d(),Pa=l("p"),Jp=r("You may have a \u{1F917} Datasets loading script locally on your computer. In this case, load the dataset by passing one of the following paths to "),zs=l("a"),Up=r("load_dataset()"),Wp=r(":"),Go=d(),xa=l("ul"),sl=l("li"),Bp=r("The local path to the loading script file."),Qp=d(),el=l("li"),Gp=r("The local path to the directory containing the loading script file (only if the script file has the same name as the directory)."),Ko=d(),m(It.$$.fragment),Xo=d(),K=l("h3"),Aa=l("a"),ll=l("span"),m(Nt.$$.fragment),Kp=d(),ol=l("span"),Xp=r("Edit loading script"),Zo=d(),Vs=l("p"),Zp=r("You can also edit a loading script from the Hub to add your own modifications. Download the dataset repository locally so any data files referenced by a relative path in the loading script can be loaded:"),an=d(),m(Ct.$$.fragment),tn=d(),Sa=l("p"),ad=r("Make your edits to the loading script and then load it by passing its local path to "),Ys=l("a"),td=r("load_dataset()"),sd=r(":"),sn=d(),m(Ot.$$.fragment),en=d(),X=l("h2"),Da=l("a"),nl=l("span"),m(Lt.$$.fragment),ed=d(),rl=l("span"),ld=r("Local and remote files"),ln=d(),T=l("p"),od=r("Datasets can be loaded from local files stored on your computer and from remote files. The datasets are most likely stored as a "),il=l("code"),nd=r("csv"),rd=r(", "),pl=l("code"),id=r("json"),pd=r(", "),dl=l("code"),dd=r("txt"),fd=r(" or "),fl=l("code"),cd=r("parquet"),hd=r(" file. The "),Js=l("a"),ud=r("load_dataset()"),md=r(" function can load each of these file types."),on=d(),Z=l("h3"),Ta=l("a"),cl=l("span"),m(Ht.$$.fragment),gd=d(),hl=l("span"),_d=r("CSV"),nn=d(),Us=l("p"),vd=r("\u{1F917} Datasets can read a dataset made up of one or several CSV files (in this case, pass your CSV files as a list):"),rn=d(),m(Ft.$$.fragment),pn=d(),m(Ia.$$.fragment),dn=d(),aa=l("h3"),Na=l("a"),ul=l("span"),m(Rt.$$.fragment),$d=d(),ml=l("span"),wd=r("JSON"),fn=d(),Ca=l("p"),yd=r("JSON files are loaded directly with "),Ws=l("a"),bd=r("load_dataset()"),jd=r(" as shown below:"),cn=d(),m(Mt.$$.fragment),hn=d(),Bs=l("p"),kd=r("JSON files have diverse formats, but we think the most efficient format is to have multiple JSON objects; each line represents an individual row of data. For example:"),un=d(),m(zt.$$.fragment),mn=d(),Oa=l("p"),qd=r("Another JSON format you may encounter is a nested field, in which case you\u2019ll need to specify the "),gl=l("code"),Ed=r("field"),Pd=r(" argument as shown in the following:"),gn=d(),m(Vt.$$.fragment),_n=d(),Qs=l("p"),xd=r("To load remote JSON files via HTTP, pass the URLs instead:"),vn=d(),m(Yt.$$.fragment),$n=d(),Gs=l("p"),Ad=r("While these are the most common JSON formats, you\u2019ll see other datasets that are formatted differently. \u{1F917} Datasets recognizes these other formats and will fallback accordingly on the Python JSON loading methods to handle them."),wn=d(),ta=l("h3"),La=l("a"),_l=l("span"),m(Jt.$$.fragment),Sd=d(),vl=l("span"),Dd=r("Parquet"),yn=d(),Ks=l("p"),Td=r("Parquet files are stored in a columnar format, unlike row-based files like a CSV. Large datasets may be stored in a Parquet file because it is more efficient and faster at returning your query."),bn=d(),Xs=l("p"),Id=r("To load a Parquet file:"),jn=d(),m(Ut.$$.fragment),kn=d(),Zs=l("p"),Nd=r("To load remote Parquet files via HTTP, pass the URLs instead:"),qn=d(),m(Wt.$$.fragment),En=d(),sa=l("h3"),Ha=l("a"),$l=l("span"),m(Bt.$$.fragment),Cd=d(),wl=l("span"),Od=r("SQL"),Pn=d(),Fa=l("p"),Ld=r("Read database contents with "),ae=l("a"),Hd=r("from_sql()"),Fd=r(" by specifying the URI to connect to your database. You can read both table names and queries:"),xn=d(),m(Qt.$$.fragment),An=d(),m(Ra.$$.fragment),Sn=d(),ea=l("h2"),Ma=l("a"),yl=l("span"),m(Gt.$$.fragment),Rd=d(),bl=l("span"),Md=r("Multiprocessing"),Dn=d(),te=l("p"),zd=r("When a dataset is made of several files (that we call \u201Cshards\u201D), it is possible to significantly speed up the dataset downloading and preparation step."),Tn=d(),za=l("p"),Vd=r("You can choose how many processes you\u2019d like to use to prepare a dataset in parallel using "),jl=l("code"),Yd=r("num_proc"),Jd=r(`.
In this case, each process is given a subset of shards to prepare:`),In=d(),m(Kt.$$.fragment),Nn=d(),la=l("h2"),Va=l("a"),kl=l("span"),m(Xt.$$.fragment),Ud=d(),ql=l("span"),Wd=r("In-memory data"),Cn=d(),Ya=l("p"),Bd=r("\u{1F917} Datasets will also allow you to create a "),se=l("a"),Qd=r("Dataset"),Gd=r(" directly from in-memory data structures like Python dictionaries and Pandas DataFrames."),On=d(),oa=l("h3"),Ja=l("a"),El=l("span"),m(Zt.$$.fragment),Kd=d(),Pl=l("span"),Xd=r("Python dictionary"),Ln=d(),Ua=l("p"),Zd=r("Load Python dictionaries with "),ee=l("a"),af=r("from_dict()"),tf=r(":"),Hn=d(),m(as.$$.fragment),Fn=d(),na=l("h3"),Wa=l("a"),xl=l("span"),m(ts.$$.fragment),sf=d(),Al=l("span"),ef=r("Python list of dictionaries"),Rn=d(),Ba=l("p"),lf=r("Load a list of Python dictionaries with "),Sl=l("code"),of=r("from_list()"),nf=r(":"),Mn=d(),m(ss.$$.fragment),zn=d(),ra=l("h3"),Qa=l("a"),Dl=l("span"),m(es.$$.fragment),rf=d(),Tl=l("span"),pf=r("Python generator"),Vn=d(),Ga=l("p"),df=r("Create a dataset from a Python generator with "),le=l("a"),ff=r("from_generator()"),cf=r(":"),Yn=d(),m(ls.$$.fragment),Jn=d(),oe=l("p"),hf=r("This approach supports loading data larger than available memory."),Un=d(),Ka=l("p"),uf=r("You can also define a sharded dataset by passing lists to "),Il=l("code"),mf=r("gen_kwargs"),gf=r(":"),Wn=d(),m(os.$$.fragment),Bn=d(),ia=l("h3"),Xa=l("a"),Nl=l("span"),m(ns.$$.fragment),_f=d(),Cl=l("span"),vf=r("Pandas DataFrame"),Qn=d(),Za=l("p"),$f=r("Load Pandas DataFrames with "),ne=l("a"),wf=r("from_pandas()"),yf=r(":"),Gn=d(),m(rs.$$.fragment),Kn=d(),m(at.$$.fragment),Xn=d(),pa=l("h2"),tt=l("a"),Ol=l("span"),m(is.$$.fragment),bf=d(),Ll=l("span"),jf=r("Offline"),Zn=d(),re=l("p"),kf=r("Even if you don\u2019t have an internet connection, it is still possible to load a dataset. As long as you\u2019ve downloaded a dataset from the Hub repository before, it should be cached. This means you can reload the dataset from the cache and use it offline."),ar=d(),z=l("p"),qf=r("If you know you won\u2019t have internet access, you can run \u{1F917} Datasets in full offline mode. This saves time because instead of waiting for the Dataset builder download to time out, \u{1F917} Datasets will look directly in the cache. Set the environment variable "),Hl=l("code"),Ef=r("HF_DATASETS_OFFLINE"),Pf=r(" to "),Fl=l("code"),xf=r("1"),Af=r(" to enable full offline mode."),tr=d(),da=l("h2"),st=l("a"),Rl=l("span"),m(ps.$$.fragment),Sf=d(),Ml=l("span"),Df=r("Slice splits"),sr=d(),V=l("p"),Tf=r("You can also choose only to load specific slices of a split. There are two options for slicing a split: using strings or the "),ie=l("a"),If=r("ReadInstruction"),Nf=r(" API. Strings are more compact and readable for simple cases, while "),pe=l("a"),Cf=r("ReadInstruction"),Of=r(" is easier to use with variable slicing parameters."),er=d(),Y=l("p"),Lf=r("Concatenate a "),zl=l("code"),Hf=r("train"),Ff=r(" and "),Vl=l("code"),Rf=r("test"),Mf=r(" split by:"),lr=d(),m(ds.$$.fragment),or=d(),et=l("p"),zf=r("Select specific rows of the "),Yl=l("code"),Vf=r("train"),Yf=r(" split:"),nr=d(),m(fs.$$.fragment),rr=d(),de=l("p"),Jf=r("Or select a percentage of a split with:"),ir=d(),m(cs.$$.fragment),pr=d(),fe=l("p"),Uf=r("Select a combination of percentages from each split:"),dr=d(),m(hs.$$.fragment),fr=d(),ce=l("p"),Wf=r("Finally, you can even create cross-validated splits. The example below creates 10-fold cross-validated splits. Each validation dataset is a 10% chunk, and the training dataset makes up the remaining complementary 90% chunk:"),cr=d(),m(us.$$.fragment),hr=d(),fa=l("h3"),lt=l("a"),Jl=l("span"),m(ms.$$.fragment),Bf=d(),Ul=l("span"),Qf=r("Percent slicing and rounding"),ur=d(),he=l("p"),Gf=r("The default behavior is to round the boundaries to the nearest integer for datasets where the requested slice boundaries do not divide evenly by 100. As shown below, some slices may contain more examples than others. For instance, if the following train split includes 999 records, then:"),mr=d(),m(gs.$$.fragment),gr=d(),ot=l("p"),Kf=r("If you want equal sized splits, use "),Wl=l("code"),Xf=r("pct1_dropremainder"),Zf=r(" rounding instead. This treats the specified percentage boundaries as multiples of 1%."),_r=d(),m(_s.$$.fragment),vr=d(),m(nt.$$.fragment),$r=d(),ue=l("a"),wr=d(),ca=l("h2"),rt=l("a"),Bl=l("span"),m(vs.$$.fragment),ac=d(),Ql=l("span"),tc=r("Troubleshooting"),yr=d(),me=l("p"),sc=r("Sometimes, you may get unexpected results when you load a dataset. Two of the most common issues you may encounter are manually downloading a dataset and specifying features of a dataset."),br=d(),ha=l("h3"),it=l("a"),Gl=l("span"),m($s.$$.fragment),ec=d(),Kl=l("span"),lc=r("Manual download"),jr=d(),O=l("p"),oc=r("Certain datasets require you to manually download the dataset files due to licensing incompatibility or if the files are hidden behind a login page. This causes "),ge=l("a"),nc=r("load_dataset()"),rc=r(" to throw an "),Xl=l("code"),ic=r("AssertionError"),pc=r(". But \u{1F917} Datasets provides detailed instructions for downloading the missing files. After you\u2019ve downloaded the files, use the "),Zl=l("code"),dc=r("data_dir"),fc=r(" argument to specify the path to the files you just downloaded."),kr=d(),pt=l("p"),cc=r("For example, if you try to download a configuration from the "),ws=l("a"),hc=r("MATINF"),uc=r(" dataset:"),qr=d(),m(ys.$$.fragment),Er=d(),N=l("p"),mc=r("If you\u2019ve already downloaded a dataset from the "),ao=l("em"),gc=r("Hub with a loading script"),_c=r(" to your computer, then you need to pass an absolute path to the "),to=l("code"),vc=r("data_dir"),$c=r(" or "),so=l("code"),wc=r("data_files"),yc=r(" parameter to load that dataset. Otherwise, if you pass a relative path, "),_e=l("a"),bc=r("load_dataset()"),jc=r(" will load the directory from the repository on the Hub instead of the local directory."),Pr=d(),ua=l("h3"),dt=l("a"),eo=l("span"),m(bs.$$.fragment),kc=d(),lo=l("span"),qc=r("Specify features"),xr=d(),L=l("p"),Ec=r("When you create a dataset from local files, the "),ve=l("a"),Pc=r("Features"),xc=r(" are automatically inferred by "),js=l("a"),Ac=r("Apache Arrow"),Sc=r(". However, the dataset\u2019s features may not always align with your expectations, or you may want to define the features yourself. The following example shows how you can add custom labels with the "),$e=l("a"),Dc=r("ClassLabel"),Tc=r(" feature."),Ar=d(),ft=l("p"),Ic=r("Start by defining your own labels with the "),we=l("a"),Nc=r("Features"),Cc=r(" class:"),Sr=d(),m(ks.$$.fragment),Dr=d(),J=l("p"),Oc=r("Next, specify the "),oo=l("code"),Lc=r("features"),Hc=r(" parameter in "),ye=l("a"),Fc=r("load_dataset()"),Rc=r(" with the features you just created:"),Tr=d(),m(qs.$$.fragment),Ir=d(),be=l("p"),Mc=r("Now when you look at your dataset features, you can see it uses the custom labels you defined:"),Nr=d(),m(Es.$$.fragment),Cr=d(),ma=l("h2"),ct=l("a"),no=l("span"),m(Ps.$$.fragment),zc=d(),ro=l("span"),Vc=r("Metrics"),Or=d(),m(ht.$$.fragment),Lr=d(),je=l("p"),Yc=r("When the metric you want to use is not supported by \u{1F917} Datasets, you can write and use your own metric script. Load your metric by providing the path to your local metric loading script:"),Hr=d(),m(xs.$$.fragment),Fr=d(),m(ut.$$.fragment),Rr=d(),ga=l("h3"),mt=l("a"),io=l("span"),m(As.$$.fragment),Jc=d(),po=l("span"),Uc=r("Load configurations"),Mr=d(),U=l("p"),Wc=r("It is possible for a metric to have different configurations. The configurations are stored in the "),fo=l("code"),Bc=r("config_name"),Qc=r(" parameter in "),ke=l("a"),Gc=r("MetricInfo"),Kc=r(" attribute. When you load a metric, provide the configuration name as shown in the following:"),zr=d(),m(Ss.$$.fragment),Vr=d(),_a=l("h3"),gt=l("a"),co=l("span"),m(Ds.$$.fragment),Xc=d(),ho=l("span"),Zc=r("Distributed setup"),Yr=d(),qe=l("p"),ah=r("When working in a distributed or parallel processing environment, loading and computing a metric can be tricky because these processes are executed in parallel on separate subsets of the data. \u{1F917} Datasets supports distributed usage with a few additional arguments when you load a metric."),Jr=d(),Ee=l("p"),th=r("For example, imagine you are training and evaluating on eight parallel processes. Here\u2019s how you would load a metric in this distributed setting:"),Ur=d(),W=l("ol"),uo=l("li"),Ts=l("p"),sh=r("Define the total number of processes with the "),mo=l("code"),eh=r("num_process"),lh=r(" argument."),oh=d(),go=l("li"),va=l("p"),nh=r("Set the process "),_o=l("code"),rh=r("rank"),ih=r(" as an integer between zero and "),vo=l("code"),ph=r("num_process - 1"),dh=r("."),fh=d(),$o=l("li"),Is=l("p"),ch=r("Load your metric with "),Pe=l("a"),hh=r("load_metric()"),uh=r(" with these arguments:"),Wr=d(),m(Ns.$$.fragment),Br=d(),m(_t.$$.fragment),Qr=d(),vt=l("p"),mh=r("In some instances, you may be simultaneously running multiple independent distributed evaluations on the same server and files. To avoid any conflicts, it is important to provide an "),wo=l("code"),gh=r("experiment_id"),_h=r(" to distinguish the separate evaluations:"),Gr=d(),m(Cs.$$.fragment),this.h()},l(a){const e=vg('[data-svelte="svelte-1phssyn"]',document.head);h=o(e,"META",{name:!0,content:!0}),e.forEach(t),q=f(a),u=o(a,"H1",{class:!0});var Os=n(u);j=o(Os,"A",{id:!0,class:!0,href:!0});var yo=n(j);k=o(yo,"SPAN",{});var bo=n(k);g(b.$$.fragment,bo),bo.forEach(t),yo.forEach(t),y=f(Os),P=o(Os,"SPAN",{});var jo=n(P);Yi=i(jo,"Load"),jo.forEach(t),Os.forEach(t),Ao=f(a),Ls=o(a,"P",{});var ko=n(Ls);Ji=i(ko,"Your data can be stored in various places; they can be on your local machine\u2019s disk, in a Github repository, and in in-memory data structures like Python dictionaries and Pandas DataFrames. Wherever a dataset is stored, \u{1F917} Datasets can help you load it."),ko.forEach(t),So=f(a),Hs=o(a,"P",{});var qo=n(Hs);Ui=i(qo,"This guide will show you how to load a dataset from:"),qo.forEach(t),Do=f(a),S=o(a,"UL",{});var I=n(S);Le=o(I,"LI",{});var Eo=n(Le);Wi=i(Eo,"The Hub without a dataset loading script"),Eo.forEach(t),Bi=f(I),He=o(I,"LI",{});var Po=n(He);Qi=i(Po,"Local loading script"),Po.forEach(t),Gi=f(I),Fe=o(I,"LI",{});var vh=n(Fe);Ki=i(vh,"Local files"),vh.forEach(t),Xi=f(I),Re=o(I,"LI",{});var $h=n(Re);Zi=i($h,"In-memory data"),$h.forEach(t),ap=f(I),Me=o(I,"LI",{});var wh=n(Me);tp=i(wh,"Offline"),wh.forEach(t),sp=f(I),ze=o(I,"LI",{});var yh=n(ze);ep=i(yh,"A specific slice of a split"),yh.forEach(t),I.forEach(t),To=f(a),C=o(a,"P",{});var $t=n(C);lp=i($t,"For more details specific to loading other dataset modalities, take a look at the "),bt=o($t,"A",{class:!0,href:!0});var bh=n(bt);op=i(bh,"load audio dataset guide"),bh.forEach(t),np=i($t,", the "),jt=o($t,"A",{class:!0,href:!0});var jh=n(jt);rp=i(jh,"load image dataset guide"),jh.forEach(t),ip=i($t,", or the "),kt=o($t,"A",{class:!0,href:!0});var kh=n(kt);pp=i(kh,"load text dataset guide"),kh.forEach(t),dp=i($t,"."),$t.forEach(t),Io=f(a),Fs=o(a,"A",{id:!0}),n(Fs).forEach(t),No=f(a),Q=o(a,"H2",{class:!0});var Xr=n(Q);wa=o(Xr,"A",{id:!0,class:!0,href:!0});var qh=n(wa);Ve=o(qh,"SPAN",{});var Eh=n(Ve);g(qt.$$.fragment,Eh),Eh.forEach(t),qh.forEach(t),fp=f(Xr),Ye=o(Xr,"SPAN",{});var Ph=n(Ye);cp=i(Ph,"Hugging Face Hub"),Ph.forEach(t),Xr.forEach(t),Co=f(a),R=o(a,"P",{});var xe=n(R);hp=i(xe,"Datasets are loaded from a dataset loading script that downloads and generates the dataset. However, you can also load a dataset from any dataset repository on the Hub without a loading script! Begin by "),Rs=o(xe,"A",{href:!0});var xh=n(Rs);up=i(xh,"creating a dataset repository"),xh.forEach(t),mp=i(xe," and upload your data files. Now you can use the "),Ms=o(xe,"A",{href:!0});var Ah=n(Ms);gp=i(Ah,"load_dataset()"),Ah.forEach(t),_p=i(xe," function to load the dataset."),xe.forEach(t),Oo=f(a),ya=o(a,"P",{});var Zr=n(ya);vp=i(Zr,"For example, try loading the files from this "),Et=o(Zr,"A",{href:!0,rel:!0});var Sh=n(Et);$p=i(Sh,"demo repository"),Sh.forEach(t),wp=i(Zr," by providing the repository namespace and dataset name. This dataset repository contains CSV files, and the code below loads the dataset from the CSV files:"),Zr.forEach(t),Lo=f(a),g(Pt.$$.fragment,a),Ho=f(a),ba=o(a,"P",{});var ai=n(ba);yp=i(ai,"Some datasets may have more than one version based on Git tags, branches, or commits. Use the "),Je=o(ai,"CODE",{});var Dh=n(Je);bp=i(Dh,"revision"),Dh.forEach(t),jp=i(ai," parameter to specify the dataset version you want to load:"),ai.forEach(t),Fo=f(a),g(xt.$$.fragment,a),Ro=f(a),g(ja.$$.fragment,a),Mo=f(a),D=o(a,"P",{});var H=n(D);kp=i(H,"A dataset without a loading script by default loads all the data into the "),Ue=o(H,"CODE",{});var Th=n(Ue);qp=i(Th,"train"),Th.forEach(t),Ep=i(H," split. Use the "),We=o(H,"CODE",{});var Ih=n(We);Pp=i(Ih,"data_files"),Ih.forEach(t),xp=i(H," parameter to map data files to splits like "),Be=o(H,"CODE",{});var Nh=n(Be);Ap=i(Nh,"train"),Nh.forEach(t),Sp=i(H,", "),Qe=o(H,"CODE",{});var Ch=n(Qe);Dp=i(Ch,"validation"),Ch.forEach(t),Tp=i(H," and "),Ge=o(H,"CODE",{});var Oh=n(Ge);Ip=i(Oh,"test"),Oh.forEach(t),Np=i(H,":"),H.forEach(t),zo=f(a),g(At.$$.fragment,a),Vo=f(a),g(ka.$$.fragment,a),Yo=f(a),M=o(a,"P",{});var Ae=n(M);Cp=i(Ae,"You can also load a specific subset of the files with the "),Ke=o(Ae,"CODE",{});var Lh=n(Ke);Op=i(Lh,"data_files"),Lh.forEach(t),Lp=i(Ae," or "),Xe=o(Ae,"CODE",{});var Hh=n(Xe);Hp=i(Hh,"data_dir"),Hh.forEach(t),Fp=i(Ae," parameter. These parameters can accept a relative path which resolves to the base path corresponding to where the dataset is loaded from."),Ae.forEach(t),Jo=f(a),g(St.$$.fragment,a),Uo=f(a),qa=o(a,"P",{});var ti=n(qa);Rp=i(ti,"The "),Ze=o(ti,"CODE",{});var Fh=n(Ze);Mp=i(Fh,"split"),Fh.forEach(t),zp=i(ti," parameter can also map a data file to a specific split:"),ti.forEach(t),Wo=f(a),g(Dt.$$.fragment,a),Bo=f(a),G=o(a,"H2",{class:!0});var si=n(G);Ea=o(si,"A",{id:!0,class:!0,href:!0});var Rh=n(Ea);al=o(Rh,"SPAN",{});var Mh=n(al);g(Tt.$$.fragment,Mh),Mh.forEach(t),Rh.forEach(t),Vp=f(si),tl=o(si,"SPAN",{});var zh=n(tl);Yp=i(zh,"Local loading script"),zh.forEach(t),si.forEach(t),Qo=f(a),Pa=o(a,"P",{});var ei=n(Pa);Jp=i(ei,"You may have a \u{1F917} Datasets loading script locally on your computer. In this case, load the dataset by passing one of the following paths to "),zs=o(ei,"A",{href:!0});var Vh=n(zs);Up=i(Vh,"load_dataset()"),Vh.forEach(t),Wp=i(ei,":"),ei.forEach(t),Go=f(a),xa=o(a,"UL",{});var li=n(xa);sl=o(li,"LI",{});var Yh=n(sl);Bp=i(Yh,"The local path to the loading script file."),Yh.forEach(t),Qp=f(li),el=o(li,"LI",{});var Jh=n(el);Gp=i(Jh,"The local path to the directory containing the loading script file (only if the script file has the same name as the directory)."),Jh.forEach(t),li.forEach(t),Ko=f(a),g(It.$$.fragment,a),Xo=f(a),K=o(a,"H3",{class:!0});var oi=n(K);Aa=o(oi,"A",{id:!0,class:!0,href:!0});var Uh=n(Aa);ll=o(Uh,"SPAN",{});var Wh=n(ll);g(Nt.$$.fragment,Wh),Wh.forEach(t),Uh.forEach(t),Kp=f(oi),ol=o(oi,"SPAN",{});var Bh=n(ol);Xp=i(Bh,"Edit loading script"),Bh.forEach(t),oi.forEach(t),Zo=f(a),Vs=o(a,"P",{});var Qh=n(Vs);Zp=i(Qh,"You can also edit a loading script from the Hub to add your own modifications. Download the dataset repository locally so any data files referenced by a relative path in the loading script can be loaded:"),Qh.forEach(t),an=f(a),g(Ct.$$.fragment,a),tn=f(a),Sa=o(a,"P",{});var ni=n(Sa);ad=i(ni,"Make your edits to the loading script and then load it by passing its local path to "),Ys=o(ni,"A",{href:!0});var Gh=n(Ys);td=i(Gh,"load_dataset()"),Gh.forEach(t),sd=i(ni,":"),ni.forEach(t),sn=f(a),g(Ot.$$.fragment,a),en=f(a),X=o(a,"H2",{class:!0});var ri=n(X);Da=o(ri,"A",{id:!0,class:!0,href:!0});var Kh=n(Da);nl=o(Kh,"SPAN",{});var Xh=n(nl);g(Lt.$$.fragment,Xh),Xh.forEach(t),Kh.forEach(t),ed=f(ri),rl=o(ri,"SPAN",{});var Zh=n(rl);ld=i(Zh,"Local and remote files"),Zh.forEach(t),ri.forEach(t),ln=f(a),T=o(a,"P",{});var F=n(T);od=i(F,"Datasets can be loaded from local files stored on your computer and from remote files. The datasets are most likely stored as a "),il=o(F,"CODE",{});var au=n(il);nd=i(au,"csv"),au.forEach(t),rd=i(F,", "),pl=o(F,"CODE",{});var tu=n(pl);id=i(tu,"json"),tu.forEach(t),pd=i(F,", "),dl=o(F,"CODE",{});var su=n(dl);dd=i(su,"txt"),su.forEach(t),fd=i(F," or "),fl=o(F,"CODE",{});var eu=n(fl);cd=i(eu,"parquet"),eu.forEach(t),hd=i(F," file. The "),Js=o(F,"A",{href:!0});var lu=n(Js);ud=i(lu,"load_dataset()"),lu.forEach(t),md=i(F," function can load each of these file types."),F.forEach(t),on=f(a),Z=o(a,"H3",{class:!0});var ii=n(Z);Ta=o(ii,"A",{id:!0,class:!0,href:!0});var ou=n(Ta);cl=o(ou,"SPAN",{});var nu=n(cl);g(Ht.$$.fragment,nu),nu.forEach(t),ou.forEach(t),gd=f(ii),hl=o(ii,"SPAN",{});var ru=n(hl);_d=i(ru,"CSV"),ru.forEach(t),ii.forEach(t),nn=f(a),Us=o(a,"P",{});var iu=n(Us);vd=i(iu,"\u{1F917} Datasets can read a dataset made up of one or several CSV files (in this case, pass your CSV files as a list):"),iu.forEach(t),rn=f(a),g(Ft.$$.fragment,a),pn=f(a),g(Ia.$$.fragment,a),dn=f(a),aa=o(a,"H3",{class:!0});var pi=n(aa);Na=o(pi,"A",{id:!0,class:!0,href:!0});var pu=n(Na);ul=o(pu,"SPAN",{});var du=n(ul);g(Rt.$$.fragment,du),du.forEach(t),pu.forEach(t),$d=f(pi),ml=o(pi,"SPAN",{});var fu=n(ml);wd=i(fu,"JSON"),fu.forEach(t),pi.forEach(t),fn=f(a),Ca=o(a,"P",{});var di=n(Ca);yd=i(di,"JSON files are loaded directly with "),Ws=o(di,"A",{href:!0});var cu=n(Ws);bd=i(cu,"load_dataset()"),cu.forEach(t),jd=i(di," as shown below:"),di.forEach(t),cn=f(a),g(Mt.$$.fragment,a),hn=f(a),Bs=o(a,"P",{});var hu=n(Bs);kd=i(hu,"JSON files have diverse formats, but we think the most efficient format is to have multiple JSON objects; each line represents an individual row of data. For example:"),hu.forEach(t),un=f(a),g(zt.$$.fragment,a),mn=f(a),Oa=o(a,"P",{});var fi=n(Oa);qd=i(fi,"Another JSON format you may encounter is a nested field, in which case you\u2019ll need to specify the "),gl=o(fi,"CODE",{});var uu=n(gl);Ed=i(uu,"field"),uu.forEach(t),Pd=i(fi," argument as shown in the following:"),fi.forEach(t),gn=f(a),g(Vt.$$.fragment,a),_n=f(a),Qs=o(a,"P",{});var mu=n(Qs);xd=i(mu,"To load remote JSON files via HTTP, pass the URLs instead:"),mu.forEach(t),vn=f(a),g(Yt.$$.fragment,a),$n=f(a),Gs=o(a,"P",{});var gu=n(Gs);Ad=i(gu,"While these are the most common JSON formats, you\u2019ll see other datasets that are formatted differently. \u{1F917} Datasets recognizes these other formats and will fallback accordingly on the Python JSON loading methods to handle them."),gu.forEach(t),wn=f(a),ta=o(a,"H3",{class:!0});var ci=n(ta);La=o(ci,"A",{id:!0,class:!0,href:!0});var _u=n(La);_l=o(_u,"SPAN",{});var vu=n(_l);g(Jt.$$.fragment,vu),vu.forEach(t),_u.forEach(t),Sd=f(ci),vl=o(ci,"SPAN",{});var $u=n(vl);Dd=i($u,"Parquet"),$u.forEach(t),ci.forEach(t),yn=f(a),Ks=o(a,"P",{});var wu=n(Ks);Td=i(wu,"Parquet files are stored in a columnar format, unlike row-based files like a CSV. Large datasets may be stored in a Parquet file because it is more efficient and faster at returning your query."),wu.forEach(t),bn=f(a),Xs=o(a,"P",{});var yu=n(Xs);Id=i(yu,"To load a Parquet file:"),yu.forEach(t),jn=f(a),g(Ut.$$.fragment,a),kn=f(a),Zs=o(a,"P",{});var bu=n(Zs);Nd=i(bu,"To load remote Parquet files via HTTP, pass the URLs instead:"),bu.forEach(t),qn=f(a),g(Wt.$$.fragment,a),En=f(a),sa=o(a,"H3",{class:!0});var hi=n(sa);Ha=o(hi,"A",{id:!0,class:!0,href:!0});var ju=n(Ha);$l=o(ju,"SPAN",{});var ku=n($l);g(Bt.$$.fragment,ku),ku.forEach(t),ju.forEach(t),Cd=f(hi),wl=o(hi,"SPAN",{});var qu=n(wl);Od=i(qu,"SQL"),qu.forEach(t),hi.forEach(t),Pn=f(a),Fa=o(a,"P",{});var ui=n(Fa);Ld=i(ui,"Read database contents with "),ae=o(ui,"A",{href:!0});var Eu=n(ae);Hd=i(Eu,"from_sql()"),Eu.forEach(t),Fd=i(ui," by specifying the URI to connect to your database. You can read both table names and queries:"),ui.forEach(t),xn=f(a),g(Qt.$$.fragment,a),An=f(a),g(Ra.$$.fragment,a),Sn=f(a),ea=o(a,"H2",{class:!0});var mi=n(ea);Ma=o(mi,"A",{id:!0,class:!0,href:!0});var Pu=n(Ma);yl=o(Pu,"SPAN",{});var xu=n(yl);g(Gt.$$.fragment,xu),xu.forEach(t),Pu.forEach(t),Rd=f(mi),bl=o(mi,"SPAN",{});var Au=n(bl);Md=i(Au,"Multiprocessing"),Au.forEach(t),mi.forEach(t),Dn=f(a),te=o(a,"P",{});var Su=n(te);zd=i(Su,"When a dataset is made of several files (that we call \u201Cshards\u201D), it is possible to significantly speed up the dataset downloading and preparation step."),Su.forEach(t),Tn=f(a),za=o(a,"P",{});var gi=n(za);Vd=i(gi,"You can choose how many processes you\u2019d like to use to prepare a dataset in parallel using "),jl=o(gi,"CODE",{});var Du=n(jl);Yd=i(Du,"num_proc"),Du.forEach(t),Jd=i(gi,`.
In this case, each process is given a subset of shards to prepare:`),gi.forEach(t),In=f(a),g(Kt.$$.fragment,a),Nn=f(a),la=o(a,"H2",{class:!0});var _i=n(la);Va=o(_i,"A",{id:!0,class:!0,href:!0});var Tu=n(Va);kl=o(Tu,"SPAN",{});var Iu=n(kl);g(Xt.$$.fragment,Iu),Iu.forEach(t),Tu.forEach(t),Ud=f(_i),ql=o(_i,"SPAN",{});var Nu=n(ql);Wd=i(Nu,"In-memory data"),Nu.forEach(t),_i.forEach(t),Cn=f(a),Ya=o(a,"P",{});var vi=n(Ya);Bd=i(vi,"\u{1F917} Datasets will also allow you to create a "),se=o(vi,"A",{href:!0});var Cu=n(se);Qd=i(Cu,"Dataset"),Cu.forEach(t),Gd=i(vi," directly from in-memory data structures like Python dictionaries and Pandas DataFrames."),vi.forEach(t),On=f(a),oa=o(a,"H3",{class:!0});var $i=n(oa);Ja=o($i,"A",{id:!0,class:!0,href:!0});var Ou=n(Ja);El=o(Ou,"SPAN",{});var Lu=n(El);g(Zt.$$.fragment,Lu),Lu.forEach(t),Ou.forEach(t),Kd=f($i),Pl=o($i,"SPAN",{});var Hu=n(Pl);Xd=i(Hu,"Python dictionary"),Hu.forEach(t),$i.forEach(t),Ln=f(a),Ua=o(a,"P",{});var wi=n(Ua);Zd=i(wi,"Load Python dictionaries with "),ee=o(wi,"A",{href:!0});var Fu=n(ee);af=i(Fu,"from_dict()"),Fu.forEach(t),tf=i(wi,":"),wi.forEach(t),Hn=f(a),g(as.$$.fragment,a),Fn=f(a),na=o(a,"H3",{class:!0});var yi=n(na);Wa=o(yi,"A",{id:!0,class:!0,href:!0});var Ru=n(Wa);xl=o(Ru,"SPAN",{});var Mu=n(xl);g(ts.$$.fragment,Mu),Mu.forEach(t),Ru.forEach(t),sf=f(yi),Al=o(yi,"SPAN",{});var zu=n(Al);ef=i(zu,"Python list of dictionaries"),zu.forEach(t),yi.forEach(t),Rn=f(a),Ba=o(a,"P",{});var bi=n(Ba);lf=i(bi,"Load a list of Python dictionaries with "),Sl=o(bi,"CODE",{});var Vu=n(Sl);of=i(Vu,"from_list()"),Vu.forEach(t),nf=i(bi,":"),bi.forEach(t),Mn=f(a),g(ss.$$.fragment,a),zn=f(a),ra=o(a,"H3",{class:!0});var ji=n(ra);Qa=o(ji,"A",{id:!0,class:!0,href:!0});var Yu=n(Qa);Dl=o(Yu,"SPAN",{});var Ju=n(Dl);g(es.$$.fragment,Ju),Ju.forEach(t),Yu.forEach(t),rf=f(ji),Tl=o(ji,"SPAN",{});var Uu=n(Tl);pf=i(Uu,"Python generator"),Uu.forEach(t),ji.forEach(t),Vn=f(a),Ga=o(a,"P",{});var ki=n(Ga);df=i(ki,"Create a dataset from a Python generator with "),le=o(ki,"A",{href:!0});var Wu=n(le);ff=i(Wu,"from_generator()"),Wu.forEach(t),cf=i(ki,":"),ki.forEach(t),Yn=f(a),g(ls.$$.fragment,a),Jn=f(a),oe=o(a,"P",{});var Bu=n(oe);hf=i(Bu,"This approach supports loading data larger than available memory."),Bu.forEach(t),Un=f(a),Ka=o(a,"P",{});var qi=n(Ka);uf=i(qi,"You can also define a sharded dataset by passing lists to "),Il=o(qi,"CODE",{});var Qu=n(Il);mf=i(Qu,"gen_kwargs"),Qu.forEach(t),gf=i(qi,":"),qi.forEach(t),Wn=f(a),g(os.$$.fragment,a),Bn=f(a),ia=o(a,"H3",{class:!0});var Ei=n(ia);Xa=o(Ei,"A",{id:!0,class:!0,href:!0});var Gu=n(Xa);Nl=o(Gu,"SPAN",{});var Ku=n(Nl);g(ns.$$.fragment,Ku),Ku.forEach(t),Gu.forEach(t),_f=f(Ei),Cl=o(Ei,"SPAN",{});var Xu=n(Cl);vf=i(Xu,"Pandas DataFrame"),Xu.forEach(t),Ei.forEach(t),Qn=f(a),Za=o(a,"P",{});var Pi=n(Za);$f=i(Pi,"Load Pandas DataFrames with "),ne=o(Pi,"A",{href:!0});var Zu=n(ne);wf=i(Zu,"from_pandas()"),Zu.forEach(t),yf=i(Pi,":"),Pi.forEach(t),Gn=f(a),g(rs.$$.fragment,a),Kn=f(a),g(at.$$.fragment,a),Xn=f(a),pa=o(a,"H2",{class:!0});var xi=n(pa);tt=o(xi,"A",{id:!0,class:!0,href:!0});var am=n(tt);Ol=o(am,"SPAN",{});var tm=n(Ol);g(is.$$.fragment,tm),tm.forEach(t),am.forEach(t),bf=f(xi),Ll=o(xi,"SPAN",{});var sm=n(Ll);jf=i(sm,"Offline"),sm.forEach(t),xi.forEach(t),Zn=f(a),re=o(a,"P",{});var em=n(re);kf=i(em,"Even if you don\u2019t have an internet connection, it is still possible to load a dataset. As long as you\u2019ve downloaded a dataset from the Hub repository before, it should be cached. This means you can reload the dataset from the cache and use it offline."),em.forEach(t),ar=f(a),z=o(a,"P",{});var Se=n(z);qf=i(Se,"If you know you won\u2019t have internet access, you can run \u{1F917} Datasets in full offline mode. This saves time because instead of waiting for the Dataset builder download to time out, \u{1F917} Datasets will look directly in the cache. Set the environment variable "),Hl=o(Se,"CODE",{});var lm=n(Hl);Ef=i(lm,"HF_DATASETS_OFFLINE"),lm.forEach(t),Pf=i(Se," to "),Fl=o(Se,"CODE",{});var om=n(Fl);xf=i(om,"1"),om.forEach(t),Af=i(Se," to enable full offline mode."),Se.forEach(t),tr=f(a),da=o(a,"H2",{class:!0});var Ai=n(da);st=o(Ai,"A",{id:!0,class:!0,href:!0});var nm=n(st);Rl=o(nm,"SPAN",{});var rm=n(Rl);g(ps.$$.fragment,rm),rm.forEach(t),nm.forEach(t),Sf=f(Ai),Ml=o(Ai,"SPAN",{});var im=n(Ml);Df=i(im,"Slice splits"),im.forEach(t),Ai.forEach(t),sr=f(a),V=o(a,"P",{});var De=n(V);Tf=i(De,"You can also choose only to load specific slices of a split. There are two options for slicing a split: using strings or the "),ie=o(De,"A",{href:!0});var pm=n(ie);If=i(pm,"ReadInstruction"),pm.forEach(t),Nf=i(De," API. Strings are more compact and readable for simple cases, while "),pe=o(De,"A",{href:!0});var dm=n(pe);Cf=i(dm,"ReadInstruction"),dm.forEach(t),Of=i(De," is easier to use with variable slicing parameters."),De.forEach(t),er=f(a),Y=o(a,"P",{});var Te=n(Y);Lf=i(Te,"Concatenate a "),zl=o(Te,"CODE",{});var fm=n(zl);Hf=i(fm,"train"),fm.forEach(t),Ff=i(Te," and "),Vl=o(Te,"CODE",{});var cm=n(Vl);Rf=i(cm,"test"),cm.forEach(t),Mf=i(Te," split by:"),Te.forEach(t),lr=f(a),g(ds.$$.fragment,a),or=f(a),et=o(a,"P",{});var Si=n(et);zf=i(Si,"Select specific rows of the "),Yl=o(Si,"CODE",{});var hm=n(Yl);Vf=i(hm,"train"),hm.forEach(t),Yf=i(Si," split:"),Si.forEach(t),nr=f(a),g(fs.$$.fragment,a),rr=f(a),de=o(a,"P",{});var um=n(de);Jf=i(um,"Or select a percentage of a split with:"),um.forEach(t),ir=f(a),g(cs.$$.fragment,a),pr=f(a),fe=o(a,"P",{});var mm=n(fe);Uf=i(mm,"Select a combination of percentages from each split:"),mm.forEach(t),dr=f(a),g(hs.$$.fragment,a),fr=f(a),ce=o(a,"P",{});var gm=n(ce);Wf=i(gm,"Finally, you can even create cross-validated splits. The example below creates 10-fold cross-validated splits. Each validation dataset is a 10% chunk, and the training dataset makes up the remaining complementary 90% chunk:"),gm.forEach(t),cr=f(a),g(us.$$.fragment,a),hr=f(a),fa=o(a,"H3",{class:!0});var Di=n(fa);lt=o(Di,"A",{id:!0,class:!0,href:!0});var _m=n(lt);Jl=o(_m,"SPAN",{});var vm=n(Jl);g(ms.$$.fragment,vm),vm.forEach(t),_m.forEach(t),Bf=f(Di),Ul=o(Di,"SPAN",{});var $m=n(Ul);Qf=i($m,"Percent slicing and rounding"),$m.forEach(t),Di.forEach(t),ur=f(a),he=o(a,"P",{});var wm=n(he);Gf=i(wm,"The default behavior is to round the boundaries to the nearest integer for datasets where the requested slice boundaries do not divide evenly by 100. As shown below, some slices may contain more examples than others. For instance, if the following train split includes 999 records, then:"),wm.forEach(t),mr=f(a),g(gs.$$.fragment,a),gr=f(a),ot=o(a,"P",{});var Ti=n(ot);Kf=i(Ti,"If you want equal sized splits, use "),Wl=o(Ti,"CODE",{});var ym=n(Wl);Xf=i(ym,"pct1_dropremainder"),ym.forEach(t),Zf=i(Ti," rounding instead. This treats the specified percentage boundaries as multiples of 1%."),Ti.forEach(t),_r=f(a),g(_s.$$.fragment,a),vr=f(a),g(nt.$$.fragment,a),$r=f(a),ue=o(a,"A",{id:!0}),n(ue).forEach(t),wr=f(a),ca=o(a,"H2",{class:!0});var Ii=n(ca);rt=o(Ii,"A",{id:!0,class:!0,href:!0});var bm=n(rt);Bl=o(bm,"SPAN",{});var jm=n(Bl);g(vs.$$.fragment,jm),jm.forEach(t),bm.forEach(t),ac=f(Ii),Ql=o(Ii,"SPAN",{});var km=n(Ql);tc=i(km,"Troubleshooting"),km.forEach(t),Ii.forEach(t),yr=f(a),me=o(a,"P",{});var qm=n(me);sc=i(qm,"Sometimes, you may get unexpected results when you load a dataset. Two of the most common issues you may encounter are manually downloading a dataset and specifying features of a dataset."),qm.forEach(t),br=f(a),ha=o(a,"H3",{class:!0});var Ni=n(ha);it=o(Ni,"A",{id:!0,class:!0,href:!0});var Em=n(it);Gl=o(Em,"SPAN",{});var Pm=n(Gl);g($s.$$.fragment,Pm),Pm.forEach(t),Em.forEach(t),ec=f(Ni),Kl=o(Ni,"SPAN",{});var xm=n(Kl);lc=i(xm,"Manual download"),xm.forEach(t),Ni.forEach(t),jr=f(a),O=o(a,"P",{});var wt=n(O);oc=i(wt,"Certain datasets require you to manually download the dataset files due to licensing incompatibility or if the files are hidden behind a login page. This causes "),ge=o(wt,"A",{href:!0});var Am=n(ge);nc=i(Am,"load_dataset()"),Am.forEach(t),rc=i(wt," to throw an "),Xl=o(wt,"CODE",{});var Sm=n(Xl);ic=i(Sm,"AssertionError"),Sm.forEach(t),pc=i(wt,". But \u{1F917} Datasets provides detailed instructions for downloading the missing files. After you\u2019ve downloaded the files, use the "),Zl=o(wt,"CODE",{});var Dm=n(Zl);dc=i(Dm,"data_dir"),Dm.forEach(t),fc=i(wt," argument to specify the path to the files you just downloaded."),wt.forEach(t),kr=f(a),pt=o(a,"P",{});var Ci=n(pt);cc=i(Ci,"For example, if you try to download a configuration from the "),ws=o(Ci,"A",{href:!0,rel:!0});var Tm=n(ws);hc=i(Tm,"MATINF"),Tm.forEach(t),uc=i(Ci," dataset:"),Ci.forEach(t),qr=f(a),g(ys.$$.fragment,a),Er=f(a),N=o(a,"P",{});var B=n(N);mc=i(B,"If you\u2019ve already downloaded a dataset from the "),ao=o(B,"EM",{});var Im=n(ao);gc=i(Im,"Hub with a loading script"),Im.forEach(t),_c=i(B," to your computer, then you need to pass an absolute path to the "),to=o(B,"CODE",{});var Nm=n(to);vc=i(Nm,"data_dir"),Nm.forEach(t),$c=i(B," or "),so=o(B,"CODE",{});var Cm=n(so);wc=i(Cm,"data_files"),Cm.forEach(t),yc=i(B," parameter to load that dataset. Otherwise, if you pass a relative path, "),_e=o(B,"A",{href:!0});var Om=n(_e);bc=i(Om,"load_dataset()"),Om.forEach(t),jc=i(B," will load the directory from the repository on the Hub instead of the local directory."),B.forEach(t),Pr=f(a),ua=o(a,"H3",{class:!0});var Oi=n(ua);dt=o(Oi,"A",{id:!0,class:!0,href:!0});var Lm=n(dt);eo=o(Lm,"SPAN",{});var Hm=n(eo);g(bs.$$.fragment,Hm),Hm.forEach(t),Lm.forEach(t),kc=f(Oi),lo=o(Oi,"SPAN",{});var Fm=n(lo);qc=i(Fm,"Specify features"),Fm.forEach(t),Oi.forEach(t),xr=f(a),L=o(a,"P",{});var yt=n(L);Ec=i(yt,"When you create a dataset from local files, the "),ve=o(yt,"A",{href:!0});var Rm=n(ve);Pc=i(Rm,"Features"),Rm.forEach(t),xc=i(yt," are automatically inferred by "),js=o(yt,"A",{href:!0,rel:!0});var Mm=n(js);Ac=i(Mm,"Apache Arrow"),Mm.forEach(t),Sc=i(yt,". However, the dataset\u2019s features may not always align with your expectations, or you may want to define the features yourself. The following example shows how you can add custom labels with the "),$e=o(yt,"A",{href:!0});var zm=n($e);Dc=i(zm,"ClassLabel"),zm.forEach(t),Tc=i(yt," feature."),yt.forEach(t),Ar=f(a),ft=o(a,"P",{});var Li=n(ft);Ic=i(Li,"Start by defining your own labels with the "),we=o(Li,"A",{href:!0});var Vm=n(we);Nc=i(Vm,"Features"),Vm.forEach(t),Cc=i(Li," class:"),Li.forEach(t),Sr=f(a),g(ks.$$.fragment,a),Dr=f(a),J=o(a,"P",{});var Ie=n(J);Oc=i(Ie,"Next, specify the "),oo=o(Ie,"CODE",{});var Ym=n(oo);Lc=i(Ym,"features"),Ym.forEach(t),Hc=i(Ie," parameter in "),ye=o(Ie,"A",{href:!0});var Jm=n(ye);Fc=i(Jm,"load_dataset()"),Jm.forEach(t),Rc=i(Ie," with the features you just created:"),Ie.forEach(t),Tr=f(a),g(qs.$$.fragment,a),Ir=f(a),be=o(a,"P",{});var Um=n(be);Mc=i(Um,"Now when you look at your dataset features, you can see it uses the custom labels you defined:"),Um.forEach(t),Nr=f(a),g(Es.$$.fragment,a),Cr=f(a),ma=o(a,"H2",{class:!0});var Hi=n(ma);ct=o(Hi,"A",{id:!0,class:!0,href:!0});var Wm=n(ct);no=o(Wm,"SPAN",{});var Bm=n(no);g(Ps.$$.fragment,Bm),Bm.forEach(t),Wm.forEach(t),zc=f(Hi),ro=o(Hi,"SPAN",{});var Qm=n(ro);Vc=i(Qm,"Metrics"),Qm.forEach(t),Hi.forEach(t),Or=f(a),g(ht.$$.fragment,a),Lr=f(a),je=o(a,"P",{});var Gm=n(je);Yc=i(Gm,"When the metric you want to use is not supported by \u{1F917} Datasets, you can write and use your own metric script. Load your metric by providing the path to your local metric loading script:"),Gm.forEach(t),Hr=f(a),g(xs.$$.fragment,a),Fr=f(a),g(ut.$$.fragment,a),Rr=f(a),ga=o(a,"H3",{class:!0});var Fi=n(ga);mt=o(Fi,"A",{id:!0,class:!0,href:!0});var Km=n(mt);io=o(Km,"SPAN",{});var Xm=n(io);g(As.$$.fragment,Xm),Xm.forEach(t),Km.forEach(t),Jc=f(Fi),po=o(Fi,"SPAN",{});var Zm=n(po);Uc=i(Zm,"Load configurations"),Zm.forEach(t),Fi.forEach(t),Mr=f(a),U=o(a,"P",{});var Ne=n(U);Wc=i(Ne,"It is possible for a metric to have different configurations. The configurations are stored in the "),fo=o(Ne,"CODE",{});var ag=n(fo);Bc=i(ag,"config_name"),ag.forEach(t),Qc=i(Ne," parameter in "),ke=o(Ne,"A",{href:!0});var tg=n(ke);Gc=i(tg,"MetricInfo"),tg.forEach(t),Kc=i(Ne," attribute. When you load a metric, provide the configuration name as shown in the following:"),Ne.forEach(t),zr=f(a),g(Ss.$$.fragment,a),Vr=f(a),_a=o(a,"H3",{class:!0});var Ri=n(_a);gt=o(Ri,"A",{id:!0,class:!0,href:!0});var sg=n(gt);co=o(sg,"SPAN",{});var eg=n(co);g(Ds.$$.fragment,eg),eg.forEach(t),sg.forEach(t),Xc=f(Ri),ho=o(Ri,"SPAN",{});var lg=n(ho);Zc=i(lg,"Distributed setup"),lg.forEach(t),Ri.forEach(t),Yr=f(a),qe=o(a,"P",{});var og=n(qe);ah=i(og,"When working in a distributed or parallel processing environment, loading and computing a metric can be tricky because these processes are executed in parallel on separate subsets of the data. \u{1F917} Datasets supports distributed usage with a few additional arguments when you load a metric."),og.forEach(t),Jr=f(a),Ee=o(a,"P",{});var ng=n(Ee);th=i(ng,"For example, imagine you are training and evaluating on eight parallel processes. Here\u2019s how you would load a metric in this distributed setting:"),ng.forEach(t),Ur=f(a),W=o(a,"OL",{});var Ce=n(W);uo=o(Ce,"LI",{});var rg=n(uo);Ts=o(rg,"P",{});var Mi=n(Ts);sh=i(Mi,"Define the total number of processes with the "),mo=o(Mi,"CODE",{});var ig=n(mo);eh=i(ig,"num_process"),ig.forEach(t),lh=i(Mi," argument."),Mi.forEach(t),rg.forEach(t),oh=f(Ce),go=o(Ce,"LI",{});var pg=n(go);va=o(pg,"P",{});var Oe=n(va);nh=i(Oe,"Set the process "),_o=o(Oe,"CODE",{});var dg=n(_o);rh=i(dg,"rank"),dg.forEach(t),ih=i(Oe," as an integer between zero and "),vo=o(Oe,"CODE",{});var fg=n(vo);ph=i(fg,"num_process - 1"),fg.forEach(t),dh=i(Oe,"."),Oe.forEach(t),pg.forEach(t),fh=f(Ce),$o=o(Ce,"LI",{});var cg=n($o);Is=o(cg,"P",{});var zi=n(Is);ch=i(zi,"Load your metric with "),Pe=o(zi,"A",{href:!0});var hg=n(Pe);hh=i(hg,"load_metric()"),hg.forEach(t),uh=i(zi," with these arguments:"),zi.forEach(t),cg.forEach(t),Ce.forEach(t),Wr=f(a),g(Ns.$$.fragment,a),Br=f(a),g(_t.$$.fragment,a),Qr=f(a),vt=o(a,"P",{});var Vi=n(vt);mh=i(Vi,"In some instances, you may be simultaneously running multiple independent distributed evaluations on the same server and files. To avoid any conflicts, it is important to provide an "),wo=o(Vi,"CODE",{});var ug=n(wo);gh=i(ug,"experiment_id"),ug.forEach(t),_h=i(Vi," to distinguish the separate evaluations:"),Vi.forEach(t),Gr=f(a),g(Cs.$$.fragment,a),this.h()},h(){c(h,"name","hf:doc:metadata"),c(h,"content",JSON.stringify(Sg)),c(j,"id","load"),c(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j,"href","#load"),c(u,"class","relative group"),c(bt,"class","underline decoration-pink-400 decoration-2 font-semibold"),c(bt,"href","./audio_load"),c(jt,"class","underline decoration-yellow-400 decoration-2 font-semibold"),c(jt,"href","./image_load"),c(kt,"class","underline decoration-green-400 decoration-2 font-semibold"),c(kt,"href","./nlp_load"),c(Fs,"id","load-from-the-hub"),c(wa,"id","hugging-face-hub"),c(wa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wa,"href","#hugging-face-hub"),c(Q,"class","relative group"),c(Rs,"href","share#create-the-repository"),c(Ms,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),c(Et,"href","https://huggingface.co/datasets/lhoestq/demo1"),c(Et,"rel","nofollow"),c(Ea,"id","local-loading-script"),c(Ea,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ea,"href","#local-loading-script"),c(G,"class","relative group"),c(zs,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),c(Aa,"id","edit-loading-script"),c(Aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Aa,"href","#edit-loading-script"),c(K,"class","relative group"),c(Ys,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),c(Da,"id","local-and-remote-files"),c(Da,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Da,"href","#local-and-remote-files"),c(X,"class","relative group"),c(Js,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),c(Ta,"id","csv"),c(Ta,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ta,"href","#csv"),c(Z,"class","relative group"),c(Na,"id","json"),c(Na,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Na,"href","#json"),c(aa,"class","relative group"),c(Ws,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),c(La,"id","parquet"),c(La,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(La,"href","#parquet"),c(ta,"class","relative group"),c(Ha,"id","sql"),c(Ha,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ha,"href","#sql"),c(sa,"class","relative group"),c(ae,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.from_sql"),c(Ma,"id","multiprocessing"),c(Ma,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ma,"href","#multiprocessing"),c(ea,"class","relative group"),c(Va,"id","inmemory-data"),c(Va,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Va,"href","#inmemory-data"),c(la,"class","relative group"),c(se,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset"),c(Ja,"id","python-dictionary"),c(Ja,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ja,"href","#python-dictionary"),c(oa,"class","relative group"),c(ee,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.from_dict"),c(Wa,"id","python-list-of-dictionaries"),c(Wa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wa,"href","#python-list-of-dictionaries"),c(na,"class","relative group"),c(Qa,"id","python-generator"),c(Qa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qa,"href","#python-generator"),c(ra,"class","relative group"),c(le,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.from_generator"),c(Xa,"id","pandas-dataframe"),c(Xa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xa,"href","#pandas-dataframe"),c(ia,"class","relative group"),c(ne,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.from_pandas"),c(tt,"id","offline"),c(tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tt,"href","#offline"),c(pa,"class","relative group"),c(st,"id","slice-splits"),c(st,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(st,"href","#slice-splits"),c(da,"class","relative group"),c(ie,"href","/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.ReadInstruction"),c(pe,"href","/docs/datasets/v2.7.0/en/package_reference/builder_classes#datasets.ReadInstruction"),c(lt,"id","percent-slicing-and-rounding"),c(lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lt,"href","#percent-slicing-and-rounding"),c(fa,"class","relative group"),c(ue,"id","troubleshoot"),c(rt,"id","troubleshooting"),c(rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rt,"href","#troubleshooting"),c(ca,"class","relative group"),c(it,"id","manual-download"),c(it,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(it,"href","#manual-download"),c(ha,"class","relative group"),c(ge,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),c(ws,"href","https://huggingface.co/datasets/matinf"),c(ws,"rel","nofollow"),c(_e,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),c(dt,"id","specify-features"),c(dt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dt,"href","#specify-features"),c(ua,"class","relative group"),c(ve,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features"),c(js,"href","https://arrow.apache.org/docs/"),c(js,"rel","nofollow"),c($e,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.ClassLabel"),c(we,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Features"),c(ye,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),c(ct,"id","metrics"),c(ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ct,"href","#metrics"),c(ma,"class","relative group"),c(mt,"id","load-configurations"),c(mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mt,"href","#load-configurations"),c(ga,"class","relative group"),c(ke,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.MetricInfo"),c(gt,"id","distributed-setup"),c(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gt,"href","#distributed-setup"),c(_a,"class","relative group"),c(Pe,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_metric")},m(a,e){s(document.head,h),p(a,q,e),p(a,u,e),s(u,j),s(j,k),_(b,k,null),s(u,y),s(u,P),s(P,Yi),p(a,Ao,e),p(a,Ls,e),s(Ls,Ji),p(a,So,e),p(a,Hs,e),s(Hs,Ui),p(a,Do,e),p(a,S,e),s(S,Le),s(Le,Wi),s(S,Bi),s(S,He),s(He,Qi),s(S,Gi),s(S,Fe),s(Fe,Ki),s(S,Xi),s(S,Re),s(Re,Zi),s(S,ap),s(S,Me),s(Me,tp),s(S,sp),s(S,ze),s(ze,ep),p(a,To,e),p(a,C,e),s(C,lp),s(C,bt),s(bt,op),s(C,np),s(C,jt),s(jt,rp),s(C,ip),s(C,kt),s(kt,pp),s(C,dp),p(a,Io,e),p(a,Fs,e),p(a,No,e),p(a,Q,e),s(Q,wa),s(wa,Ve),_(qt,Ve,null),s(Q,fp),s(Q,Ye),s(Ye,cp),p(a,Co,e),p(a,R,e),s(R,hp),s(R,Rs),s(Rs,up),s(R,mp),s(R,Ms),s(Ms,gp),s(R,_p),p(a,Oo,e),p(a,ya,e),s(ya,vp),s(ya,Et),s(Et,$p),s(ya,wp),p(a,Lo,e),_(Pt,a,e),p(a,Ho,e),p(a,ba,e),s(ba,yp),s(ba,Je),s(Je,bp),s(ba,jp),p(a,Fo,e),_(xt,a,e),p(a,Ro,e),_(ja,a,e),p(a,Mo,e),p(a,D,e),s(D,kp),s(D,Ue),s(Ue,qp),s(D,Ep),s(D,We),s(We,Pp),s(D,xp),s(D,Be),s(Be,Ap),s(D,Sp),s(D,Qe),s(Qe,Dp),s(D,Tp),s(D,Ge),s(Ge,Ip),s(D,Np),p(a,zo,e),_(At,a,e),p(a,Vo,e),_(ka,a,e),p(a,Yo,e),p(a,M,e),s(M,Cp),s(M,Ke),s(Ke,Op),s(M,Lp),s(M,Xe),s(Xe,Hp),s(M,Fp),p(a,Jo,e),_(St,a,e),p(a,Uo,e),p(a,qa,e),s(qa,Rp),s(qa,Ze),s(Ze,Mp),s(qa,zp),p(a,Wo,e),_(Dt,a,e),p(a,Bo,e),p(a,G,e),s(G,Ea),s(Ea,al),_(Tt,al,null),s(G,Vp),s(G,tl),s(tl,Yp),p(a,Qo,e),p(a,Pa,e),s(Pa,Jp),s(Pa,zs),s(zs,Up),s(Pa,Wp),p(a,Go,e),p(a,xa,e),s(xa,sl),s(sl,Bp),s(xa,Qp),s(xa,el),s(el,Gp),p(a,Ko,e),_(It,a,e),p(a,Xo,e),p(a,K,e),s(K,Aa),s(Aa,ll),_(Nt,ll,null),s(K,Kp),s(K,ol),s(ol,Xp),p(a,Zo,e),p(a,Vs,e),s(Vs,Zp),p(a,an,e),_(Ct,a,e),p(a,tn,e),p(a,Sa,e),s(Sa,ad),s(Sa,Ys),s(Ys,td),s(Sa,sd),p(a,sn,e),_(Ot,a,e),p(a,en,e),p(a,X,e),s(X,Da),s(Da,nl),_(Lt,nl,null),s(X,ed),s(X,rl),s(rl,ld),p(a,ln,e),p(a,T,e),s(T,od),s(T,il),s(il,nd),s(T,rd),s(T,pl),s(pl,id),s(T,pd),s(T,dl),s(dl,dd),s(T,fd),s(T,fl),s(fl,cd),s(T,hd),s(T,Js),s(Js,ud),s(T,md),p(a,on,e),p(a,Z,e),s(Z,Ta),s(Ta,cl),_(Ht,cl,null),s(Z,gd),s(Z,hl),s(hl,_d),p(a,nn,e),p(a,Us,e),s(Us,vd),p(a,rn,e),_(Ft,a,e),p(a,pn,e),_(Ia,a,e),p(a,dn,e),p(a,aa,e),s(aa,Na),s(Na,ul),_(Rt,ul,null),s(aa,$d),s(aa,ml),s(ml,wd),p(a,fn,e),p(a,Ca,e),s(Ca,yd),s(Ca,Ws),s(Ws,bd),s(Ca,jd),p(a,cn,e),_(Mt,a,e),p(a,hn,e),p(a,Bs,e),s(Bs,kd),p(a,un,e),_(zt,a,e),p(a,mn,e),p(a,Oa,e),s(Oa,qd),s(Oa,gl),s(gl,Ed),s(Oa,Pd),p(a,gn,e),_(Vt,a,e),p(a,_n,e),p(a,Qs,e),s(Qs,xd),p(a,vn,e),_(Yt,a,e),p(a,$n,e),p(a,Gs,e),s(Gs,Ad),p(a,wn,e),p(a,ta,e),s(ta,La),s(La,_l),_(Jt,_l,null),s(ta,Sd),s(ta,vl),s(vl,Dd),p(a,yn,e),p(a,Ks,e),s(Ks,Td),p(a,bn,e),p(a,Xs,e),s(Xs,Id),p(a,jn,e),_(Ut,a,e),p(a,kn,e),p(a,Zs,e),s(Zs,Nd),p(a,qn,e),_(Wt,a,e),p(a,En,e),p(a,sa,e),s(sa,Ha),s(Ha,$l),_(Bt,$l,null),s(sa,Cd),s(sa,wl),s(wl,Od),p(a,Pn,e),p(a,Fa,e),s(Fa,Ld),s(Fa,ae),s(ae,Hd),s(Fa,Fd),p(a,xn,e),_(Qt,a,e),p(a,An,e),_(Ra,a,e),p(a,Sn,e),p(a,ea,e),s(ea,Ma),s(Ma,yl),_(Gt,yl,null),s(ea,Rd),s(ea,bl),s(bl,Md),p(a,Dn,e),p(a,te,e),s(te,zd),p(a,Tn,e),p(a,za,e),s(za,Vd),s(za,jl),s(jl,Yd),s(za,Jd),p(a,In,e),_(Kt,a,e),p(a,Nn,e),p(a,la,e),s(la,Va),s(Va,kl),_(Xt,kl,null),s(la,Ud),s(la,ql),s(ql,Wd),p(a,Cn,e),p(a,Ya,e),s(Ya,Bd),s(Ya,se),s(se,Qd),s(Ya,Gd),p(a,On,e),p(a,oa,e),s(oa,Ja),s(Ja,El),_(Zt,El,null),s(oa,Kd),s(oa,Pl),s(Pl,Xd),p(a,Ln,e),p(a,Ua,e),s(Ua,Zd),s(Ua,ee),s(ee,af),s(Ua,tf),p(a,Hn,e),_(as,a,e),p(a,Fn,e),p(a,na,e),s(na,Wa),s(Wa,xl),_(ts,xl,null),s(na,sf),s(na,Al),s(Al,ef),p(a,Rn,e),p(a,Ba,e),s(Ba,lf),s(Ba,Sl),s(Sl,of),s(Ba,nf),p(a,Mn,e),_(ss,a,e),p(a,zn,e),p(a,ra,e),s(ra,Qa),s(Qa,Dl),_(es,Dl,null),s(ra,rf),s(ra,Tl),s(Tl,pf),p(a,Vn,e),p(a,Ga,e),s(Ga,df),s(Ga,le),s(le,ff),s(Ga,cf),p(a,Yn,e),_(ls,a,e),p(a,Jn,e),p(a,oe,e),s(oe,hf),p(a,Un,e),p(a,Ka,e),s(Ka,uf),s(Ka,Il),s(Il,mf),s(Ka,gf),p(a,Wn,e),_(os,a,e),p(a,Bn,e),p(a,ia,e),s(ia,Xa),s(Xa,Nl),_(ns,Nl,null),s(ia,_f),s(ia,Cl),s(Cl,vf),p(a,Qn,e),p(a,Za,e),s(Za,$f),s(Za,ne),s(ne,wf),s(Za,yf),p(a,Gn,e),_(rs,a,e),p(a,Kn,e),_(at,a,e),p(a,Xn,e),p(a,pa,e),s(pa,tt),s(tt,Ol),_(is,Ol,null),s(pa,bf),s(pa,Ll),s(Ll,jf),p(a,Zn,e),p(a,re,e),s(re,kf),p(a,ar,e),p(a,z,e),s(z,qf),s(z,Hl),s(Hl,Ef),s(z,Pf),s(z,Fl),s(Fl,xf),s(z,Af),p(a,tr,e),p(a,da,e),s(da,st),s(st,Rl),_(ps,Rl,null),s(da,Sf),s(da,Ml),s(Ml,Df),p(a,sr,e),p(a,V,e),s(V,Tf),s(V,ie),s(ie,If),s(V,Nf),s(V,pe),s(pe,Cf),s(V,Of),p(a,er,e),p(a,Y,e),s(Y,Lf),s(Y,zl),s(zl,Hf),s(Y,Ff),s(Y,Vl),s(Vl,Rf),s(Y,Mf),p(a,lr,e),_(ds,a,e),p(a,or,e),p(a,et,e),s(et,zf),s(et,Yl),s(Yl,Vf),s(et,Yf),p(a,nr,e),_(fs,a,e),p(a,rr,e),p(a,de,e),s(de,Jf),p(a,ir,e),_(cs,a,e),p(a,pr,e),p(a,fe,e),s(fe,Uf),p(a,dr,e),_(hs,a,e),p(a,fr,e),p(a,ce,e),s(ce,Wf),p(a,cr,e),_(us,a,e),p(a,hr,e),p(a,fa,e),s(fa,lt),s(lt,Jl),_(ms,Jl,null),s(fa,Bf),s(fa,Ul),s(Ul,Qf),p(a,ur,e),p(a,he,e),s(he,Gf),p(a,mr,e),_(gs,a,e),p(a,gr,e),p(a,ot,e),s(ot,Kf),s(ot,Wl),s(Wl,Xf),s(ot,Zf),p(a,_r,e),_(_s,a,e),p(a,vr,e),_(nt,a,e),p(a,$r,e),p(a,ue,e),p(a,wr,e),p(a,ca,e),s(ca,rt),s(rt,Bl),_(vs,Bl,null),s(ca,ac),s(ca,Ql),s(Ql,tc),p(a,yr,e),p(a,me,e),s(me,sc),p(a,br,e),p(a,ha,e),s(ha,it),s(it,Gl),_($s,Gl,null),s(ha,ec),s(ha,Kl),s(Kl,lc),p(a,jr,e),p(a,O,e),s(O,oc),s(O,ge),s(ge,nc),s(O,rc),s(O,Xl),s(Xl,ic),s(O,pc),s(O,Zl),s(Zl,dc),s(O,fc),p(a,kr,e),p(a,pt,e),s(pt,cc),s(pt,ws),s(ws,hc),s(pt,uc),p(a,qr,e),_(ys,a,e),p(a,Er,e),p(a,N,e),s(N,mc),s(N,ao),s(ao,gc),s(N,_c),s(N,to),s(to,vc),s(N,$c),s(N,so),s(so,wc),s(N,yc),s(N,_e),s(_e,bc),s(N,jc),p(a,Pr,e),p(a,ua,e),s(ua,dt),s(dt,eo),_(bs,eo,null),s(ua,kc),s(ua,lo),s(lo,qc),p(a,xr,e),p(a,L,e),s(L,Ec),s(L,ve),s(ve,Pc),s(L,xc),s(L,js),s(js,Ac),s(L,Sc),s(L,$e),s($e,Dc),s(L,Tc),p(a,Ar,e),p(a,ft,e),s(ft,Ic),s(ft,we),s(we,Nc),s(ft,Cc),p(a,Sr,e),_(ks,a,e),p(a,Dr,e),p(a,J,e),s(J,Oc),s(J,oo),s(oo,Lc),s(J,Hc),s(J,ye),s(ye,Fc),s(J,Rc),p(a,Tr,e),_(qs,a,e),p(a,Ir,e),p(a,be,e),s(be,Mc),p(a,Nr,e),_(Es,a,e),p(a,Cr,e),p(a,ma,e),s(ma,ct),s(ct,no),_(Ps,no,null),s(ma,zc),s(ma,ro),s(ro,Vc),p(a,Or,e),_(ht,a,e),p(a,Lr,e),p(a,je,e),s(je,Yc),p(a,Hr,e),_(xs,a,e),p(a,Fr,e),_(ut,a,e),p(a,Rr,e),p(a,ga,e),s(ga,mt),s(mt,io),_(As,io,null),s(ga,Jc),s(ga,po),s(po,Uc),p(a,Mr,e),p(a,U,e),s(U,Wc),s(U,fo),s(fo,Bc),s(U,Qc),s(U,ke),s(ke,Gc),s(U,Kc),p(a,zr,e),_(Ss,a,e),p(a,Vr,e),p(a,_a,e),s(_a,gt),s(gt,co),_(Ds,co,null),s(_a,Xc),s(_a,ho),s(ho,Zc),p(a,Yr,e),p(a,qe,e),s(qe,ah),p(a,Jr,e),p(a,Ee,e),s(Ee,th),p(a,Ur,e),p(a,W,e),s(W,uo),s(uo,Ts),s(Ts,sh),s(Ts,mo),s(mo,eh),s(Ts,lh),s(W,oh),s(W,go),s(go,va),s(va,nh),s(va,_o),s(_o,rh),s(va,ih),s(va,vo),s(vo,ph),s(va,dh),s(W,fh),s(W,$o),s($o,Is),s(Is,ch),s(Is,Pe),s(Pe,hh),s(Is,uh),p(a,Wr,e),_(Ns,a,e),p(a,Br,e),_(_t,a,e),p(a,Qr,e),p(a,vt,e),s(vt,mh),s(vt,wo),s(wo,gh),s(vt,_h),p(a,Gr,e),_(Cs,a,e),Kr=!0},p(a,[e]){const Os={};e&2&&(Os.$$scope={dirty:e,ctx:a}),ja.$set(Os);const yo={};e&2&&(yo.$$scope={dirty:e,ctx:a}),ka.$set(yo);const bo={};e&2&&(bo.$$scope={dirty:e,ctx:a}),Ia.$set(bo);const jo={};e&2&&(jo.$$scope={dirty:e,ctx:a}),Ra.$set(jo);const ko={};e&2&&(ko.$$scope={dirty:e,ctx:a}),at.$set(ko);const qo={};e&2&&(qo.$$scope={dirty:e,ctx:a}),nt.$set(qo);const I={};e&2&&(I.$$scope={dirty:e,ctx:a}),ht.$set(I);const Eo={};e&2&&(Eo.$$scope={dirty:e,ctx:a}),ut.$set(Eo);const Po={};e&2&&(Po.$$scope={dirty:e,ctx:a}),_t.$set(Po)},i(a){Kr||(v(b.$$.fragment,a),v(qt.$$.fragment,a),v(Pt.$$.fragment,a),v(xt.$$.fragment,a),v(ja.$$.fragment,a),v(At.$$.fragment,a),v(ka.$$.fragment,a),v(St.$$.fragment,a),v(Dt.$$.fragment,a),v(Tt.$$.fragment,a),v(It.$$.fragment,a),v(Nt.$$.fragment,a),v(Ct.$$.fragment,a),v(Ot.$$.fragment,a),v(Lt.$$.fragment,a),v(Ht.$$.fragment,a),v(Ft.$$.fragment,a),v(Ia.$$.fragment,a),v(Rt.$$.fragment,a),v(Mt.$$.fragment,a),v(zt.$$.fragment,a),v(Vt.$$.fragment,a),v(Yt.$$.fragment,a),v(Jt.$$.fragment,a),v(Ut.$$.fragment,a),v(Wt.$$.fragment,a),v(Bt.$$.fragment,a),v(Qt.$$.fragment,a),v(Ra.$$.fragment,a),v(Gt.$$.fragment,a),v(Kt.$$.fragment,a),v(Xt.$$.fragment,a),v(Zt.$$.fragment,a),v(as.$$.fragment,a),v(ts.$$.fragment,a),v(ss.$$.fragment,a),v(es.$$.fragment,a),v(ls.$$.fragment,a),v(os.$$.fragment,a),v(ns.$$.fragment,a),v(rs.$$.fragment,a),v(at.$$.fragment,a),v(is.$$.fragment,a),v(ps.$$.fragment,a),v(ds.$$.fragment,a),v(fs.$$.fragment,a),v(cs.$$.fragment,a),v(hs.$$.fragment,a),v(us.$$.fragment,a),v(ms.$$.fragment,a),v(gs.$$.fragment,a),v(_s.$$.fragment,a),v(nt.$$.fragment,a),v(vs.$$.fragment,a),v($s.$$.fragment,a),v(ys.$$.fragment,a),v(bs.$$.fragment,a),v(ks.$$.fragment,a),v(qs.$$.fragment,a),v(Es.$$.fragment,a),v(Ps.$$.fragment,a),v(ht.$$.fragment,a),v(xs.$$.fragment,a),v(ut.$$.fragment,a),v(As.$$.fragment,a),v(Ss.$$.fragment,a),v(Ds.$$.fragment,a),v(Ns.$$.fragment,a),v(_t.$$.fragment,a),v(Cs.$$.fragment,a),Kr=!0)},o(a){$(b.$$.fragment,a),$(qt.$$.fragment,a),$(Pt.$$.fragment,a),$(xt.$$.fragment,a),$(ja.$$.fragment,a),$(At.$$.fragment,a),$(ka.$$.fragment,a),$(St.$$.fragment,a),$(Dt.$$.fragment,a),$(Tt.$$.fragment,a),$(It.$$.fragment,a),$(Nt.$$.fragment,a),$(Ct.$$.fragment,a),$(Ot.$$.fragment,a),$(Lt.$$.fragment,a),$(Ht.$$.fragment,a),$(Ft.$$.fragment,a),$(Ia.$$.fragment,a),$(Rt.$$.fragment,a),$(Mt.$$.fragment,a),$(zt.$$.fragment,a),$(Vt.$$.fragment,a),$(Yt.$$.fragment,a),$(Jt.$$.fragment,a),$(Ut.$$.fragment,a),$(Wt.$$.fragment,a),$(Bt.$$.fragment,a),$(Qt.$$.fragment,a),$(Ra.$$.fragment,a),$(Gt.$$.fragment,a),$(Kt.$$.fragment,a),$(Xt.$$.fragment,a),$(Zt.$$.fragment,a),$(as.$$.fragment,a),$(ts.$$.fragment,a),$(ss.$$.fragment,a),$(es.$$.fragment,a),$(ls.$$.fragment,a),$(os.$$.fragment,a),$(ns.$$.fragment,a),$(rs.$$.fragment,a),$(at.$$.fragment,a),$(is.$$.fragment,a),$(ps.$$.fragment,a),$(ds.$$.fragment,a),$(fs.$$.fragment,a),$(cs.$$.fragment,a),$(hs.$$.fragment,a),$(us.$$.fragment,a),$(ms.$$.fragment,a),$(gs.$$.fragment,a),$(_s.$$.fragment,a),$(nt.$$.fragment,a),$(vs.$$.fragment,a),$($s.$$.fragment,a),$(ys.$$.fragment,a),$(bs.$$.fragment,a),$(ks.$$.fragment,a),$(qs.$$.fragment,a),$(Es.$$.fragment,a),$(Ps.$$.fragment,a),$(ht.$$.fragment,a),$(xs.$$.fragment,a),$(ut.$$.fragment,a),$(As.$$.fragment,a),$(Ss.$$.fragment,a),$(Ds.$$.fragment,a),$(Ns.$$.fragment,a),$(_t.$$.fragment,a),$(Cs.$$.fragment,a),Kr=!1},d(a){t(h),a&&t(q),a&&t(u),w(b),a&&t(Ao),a&&t(Ls),a&&t(So),a&&t(Hs),a&&t(Do),a&&t(S),a&&t(To),a&&t(C),a&&t(Io),a&&t(Fs),a&&t(No),a&&t(Q),w(qt),a&&t(Co),a&&t(R),a&&t(Oo),a&&t(ya),a&&t(Lo),w(Pt,a),a&&t(Ho),a&&t(ba),a&&t(Fo),w(xt,a),a&&t(Ro),w(ja,a),a&&t(Mo),a&&t(D),a&&t(zo),w(At,a),a&&t(Vo),w(ka,a),a&&t(Yo),a&&t(M),a&&t(Jo),w(St,a),a&&t(Uo),a&&t(qa),a&&t(Wo),w(Dt,a),a&&t(Bo),a&&t(G),w(Tt),a&&t(Qo),a&&t(Pa),a&&t(Go),a&&t(xa),a&&t(Ko),w(It,a),a&&t(Xo),a&&t(K),w(Nt),a&&t(Zo),a&&t(Vs),a&&t(an),w(Ct,a),a&&t(tn),a&&t(Sa),a&&t(sn),w(Ot,a),a&&t(en),a&&t(X),w(Lt),a&&t(ln),a&&t(T),a&&t(on),a&&t(Z),w(Ht),a&&t(nn),a&&t(Us),a&&t(rn),w(Ft,a),a&&t(pn),w(Ia,a),a&&t(dn),a&&t(aa),w(Rt),a&&t(fn),a&&t(Ca),a&&t(cn),w(Mt,a),a&&t(hn),a&&t(Bs),a&&t(un),w(zt,a),a&&t(mn),a&&t(Oa),a&&t(gn),w(Vt,a),a&&t(_n),a&&t(Qs),a&&t(vn),w(Yt,a),a&&t($n),a&&t(Gs),a&&t(wn),a&&t(ta),w(Jt),a&&t(yn),a&&t(Ks),a&&t(bn),a&&t(Xs),a&&t(jn),w(Ut,a),a&&t(kn),a&&t(Zs),a&&t(qn),w(Wt,a),a&&t(En),a&&t(sa),w(Bt),a&&t(Pn),a&&t(Fa),a&&t(xn),w(Qt,a),a&&t(An),w(Ra,a),a&&t(Sn),a&&t(ea),w(Gt),a&&t(Dn),a&&t(te),a&&t(Tn),a&&t(za),a&&t(In),w(Kt,a),a&&t(Nn),a&&t(la),w(Xt),a&&t(Cn),a&&t(Ya),a&&t(On),a&&t(oa),w(Zt),a&&t(Ln),a&&t(Ua),a&&t(Hn),w(as,a),a&&t(Fn),a&&t(na),w(ts),a&&t(Rn),a&&t(Ba),a&&t(Mn),w(ss,a),a&&t(zn),a&&t(ra),w(es),a&&t(Vn),a&&t(Ga),a&&t(Yn),w(ls,a),a&&t(Jn),a&&t(oe),a&&t(Un),a&&t(Ka),a&&t(Wn),w(os,a),a&&t(Bn),a&&t(ia),w(ns),a&&t(Qn),a&&t(Za),a&&t(Gn),w(rs,a),a&&t(Kn),w(at,a),a&&t(Xn),a&&t(pa),w(is),a&&t(Zn),a&&t(re),a&&t(ar),a&&t(z),a&&t(tr),a&&t(da),w(ps),a&&t(sr),a&&t(V),a&&t(er),a&&t(Y),a&&t(lr),w(ds,a),a&&t(or),a&&t(et),a&&t(nr),w(fs,a),a&&t(rr),a&&t(de),a&&t(ir),w(cs,a),a&&t(pr),a&&t(fe),a&&t(dr),w(hs,a),a&&t(fr),a&&t(ce),a&&t(cr),w(us,a),a&&t(hr),a&&t(fa),w(ms),a&&t(ur),a&&t(he),a&&t(mr),w(gs,a),a&&t(gr),a&&t(ot),a&&t(_r),w(_s,a),a&&t(vr),w(nt,a),a&&t($r),a&&t(ue),a&&t(wr),a&&t(ca),w(vs),a&&t(yr),a&&t(me),a&&t(br),a&&t(ha),w($s),a&&t(jr),a&&t(O),a&&t(kr),a&&t(pt),a&&t(qr),w(ys,a),a&&t(Er),a&&t(N),a&&t(Pr),a&&t(ua),w(bs),a&&t(xr),a&&t(L),a&&t(Ar),a&&t(ft),a&&t(Sr),w(ks,a),a&&t(Dr),a&&t(J),a&&t(Tr),w(qs,a),a&&t(Ir),a&&t(be),a&&t(Nr),w(Es,a),a&&t(Cr),a&&t(ma),w(Ps),a&&t(Or),w(ht,a),a&&t(Lr),a&&t(je),a&&t(Hr),w(xs,a),a&&t(Fr),w(ut,a),a&&t(Rr),a&&t(ga),w(As),a&&t(Mr),a&&t(U),a&&t(zr),w(Ss,a),a&&t(Vr),a&&t(_a),w(Ds),a&&t(Yr),a&&t(qe),a&&t(Jr),a&&t(Ee),a&&t(Ur),a&&t(W),a&&t(Wr),w(Ns,a),a&&t(Br),w(_t,a),a&&t(Qr),a&&t(vt),a&&t(Gr),w(Cs,a)}}}const Sg={local:"load",sections:[{local:"hugging-face-hub",title:"Hugging Face Hub"},{local:"local-loading-script",sections:[{local:"edit-loading-script",title:"Edit loading script"}],title:"Local loading script"},{local:"local-and-remote-files",sections:[{local:"csv",title:"CSV"},{local:"json",title:"JSON"},{local:"parquet",title:"Parquet"},{local:"sql",title:"SQL"}],title:"Local and remote files"},{local:"multiprocessing",title:"Multiprocessing"},{local:"inmemory-data",sections:[{local:"python-dictionary",title:"Python dictionary"},{local:"python-list-of-dictionaries",title:"Python list of dictionaries"},{local:"python-generator",title:"Python generator"},{local:"pandas-dataframe",title:"Pandas DataFrame"}],title:"In-memory data"},{local:"offline",title:"Offline"},{local:"slice-splits",sections:[{local:"percent-slicing-and-rounding",title:"Percent slicing and rounding"}],title:"Slice splits"},{local:"troubleshooting",sections:[{local:"manual-download",title:"Manual download"},{local:"specify-features",title:"Specify features"}],title:"Troubleshooting"},{local:"metrics",sections:[{local:"load-configurations",title:"Load configurations"},{local:"distributed-setup",title:"Distributed setup"}],title:"Metrics"}],title:"Load"};function Dg(A){return $g(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Hg extends mg{constructor(h){super();gg(this,h,Dg,Ag,_g,{})}}export{Hg as default,Sg as metadata};
