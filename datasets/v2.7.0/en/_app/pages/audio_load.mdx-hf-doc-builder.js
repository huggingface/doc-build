import{S as ms,i as _s,s as gs,e as l,k as p,w,t as s,M as ws,c as i,d as e,m as u,a as d,x as v,h as o,b as f,G as t,g as n,y as k,q as $,o as y,B as j,v as vs}from"../chunks/vendor-hf-doc-builder.js";import{T as ks}from"../chunks/Tip-hf-doc-builder.js";import{I as Ba}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as ua}from"../chunks/CodeBlock-hf-doc-builder.js";function $s(Ga){let c,N,h,E,P,_,V,O;return{c(){c=l("p"),N=s("For more information about creating your own "),h=l("code"),E=s("AudioFolder"),P=s(" dataset, take a look at the "),_=l("a"),V=s("Create an audio dataset"),O=s(" guide."),this.h()},l(S){c=i(S,"P",{});var g=d(c);N=o(g,"For more information about creating your own "),h=i(g,"CODE",{});var m=d(h);E=o(m,"AudioFolder"),m.forEach(e),P=o(g," dataset, take a look at the "),_=i(g,"A",{href:!0});var fa=d(_);V=o(fa,"Create an audio dataset"),fa.forEach(e),O=o(g," guide."),g.forEach(e),this.h()},h(){f(_,"href","./audio_dataset")},m(S,g){n(S,c,g),t(c,N),t(c,h),t(h,E),t(c,P),t(c,_),t(_,V),t(c,O)},d(S){S&&e(c)}}}function ys(Ga){let c,N,h,E,P,_,V,O,S,g,m,fa,ca,bt,qt,ja,At,xt,Ea,Ct,Pt,Ka,D,L,za,W,Ot,ba,St,Qa,q,Dt,qa,Tt,Ft,ha,It,Nt,Va,T,Y,Aa,X,Lt,xa,Yt,Wa,A,Mt,ma,Ht,Rt,_a,Ut,Jt,Xa,Z,Za,F,M,Ca,aa,Bt,Pa,Gt,at,H,Kt,Oa,Qt,Vt,tt,I,R,Sa,ta,Wt,Da,Xt,et,U,Zt,Ta,ae,te,st,ea,ot,z,ee,Fa,se,oe,Ia,le,ie,Na,re,de,lt,sa,it,b,La,ne,pe,Ya,ue,fe,Ma,ce,he,rt,oa,dt,ga,me,nt,la,pt,J,_e,Ha,ge,we,ut,x,ve,Ra,ke,$e,wa,ye,je,ft,ia,ct,C,Ee,Ua,ze,be,Ja,qe,Ae,ht,ra,mt,B,_t,G,xe,da,Ce,Pe,gt;return _=new Ba({}),W=new Ba({}),X=new Ba({}),Z=new ua({props:{code:`audio_dataset = Dataset.from_dict({"audio": ["path/to/audio_1", "path/to/audio_2", ..., "path/to/audio_n"]}).cast_column("audio", Audio())
audio_dataset[0]["audio"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>audio_dataset = Dataset.from_dict({<span class="hljs-string">&quot;audio&quot;</span>: [<span class="hljs-string">&quot;path/to/audio_1&quot;</span>, <span class="hljs-string">&quot;path/to/audio_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/audio_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio())
<span class="hljs-meta">&gt;&gt;&gt; </span>audio_dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([ <span class="hljs-number">0.</span>        ,  <span class="hljs-number">0.00024414</span>, -<span class="hljs-number">0.00024414</span>, ..., -<span class="hljs-number">0.00024414</span>,
         <span class="hljs-number">0.</span>        ,  <span class="hljs-number">0.</span>        ], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;path/to/audio_1&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">16000</span>}`}}),aa=new Ba({}),ta=new Ba({}),ea=new ua({props:{code:`folder/train/metadata.csv
folder/train/first_audio_file.mp3
folder/train/second_audio_file.mp3
folder/train/third_audio_file.mp3`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.csv
folder<span class="hljs-regexp">/train/</span>first_audio_file.mp3
folder<span class="hljs-regexp">/train/</span>second_audio_file.mp3
folder<span class="hljs-regexp">/train/</span>third_audio_file.mp3`}}),sa=new ua({props:{code:`file_name,transcription
first_audio_file.mp3,znowu si\u0119 duch z cia\u0142em zro\u015Bnie w m\u0142odocianej wstaniesz wiosnie i mo\u017Cesz skutkiem tych lek\xF3w umiera\u0107 wstawa\u0107 wiek wiek\xF3w dalej tam by\u0142y przestrogi jak sieka\u0107 g\u0142ow\u0119 jak nogi
second_audio_file.mp3,ju\u017C u \u017Awierzy\u0144ca podwoj\xF3w kr\xF3l zasiada przy nim ksi\u0105\u017C\u0119ta i panowie rada a gdzie wznios\u0142y kr\u0105\u017Cy\u0142 ganek rycerze obok kochanek kr\xF3l skin\u0105\u0142 palcem zacz\u0119to igrzysko
third_audio_file.mp3,pewnie k\u0119dy\u015B w ob\u0142\u0119dzie ubite min\u0119\u0142y szlaki zaczekajmy dzie\u0144 jaki po\u015Blemy szuka\u0107 wsz\u0119dzie dzi\u015B jutro pewnie b\u0119dzie pos\u0142ali wsz\u0119dzie s\u0142ugi czekali dzie\u0144 i drugi gdy nic nie doczekali z p\u0142aczem chc\u0105 jecha\u0107 dali`,highlighted:`file_name,transcription
first_audio_file.mp3,znowu si\u0119 duch z cia\u0142em zro\u015Bnie w m\u0142odocianej wstaniesz wiosnie i mo\u017Cesz skutkiem tych lek\xF3w umiera\u0107 wstawa\u0107 wiek wiek\xF3w dalej tam by\u0142y przestrogi jak sieka\u0107 g\u0142ow\u0119 jak nogi
second_audio_file.mp3,ju\u017C u \u017Awierzy\u0144ca podwoj\xF3w kr\xF3l zasiada przy nim ksi\u0105\u017C\u0119ta i panowie rada a gdzie wznios\u0142y kr\u0105\u017Cy\u0142 ganek rycerze obok kochanek kr\xF3l skin\u0105\u0142 palcem zacz\u0119to igrzysko
third_audio_file.mp3,pewnie k\u0119dy\u015B w ob\u0142\u0119dzie ubite min\u0119\u0142y szlaki zaczekajmy dzie\u0144 jaki po\u015Blemy szuka\u0107 wsz\u0119dzie dzi\u015B jutro pewnie b\u0119dzie pos\u0142ali wsz\u0119dzie s\u0142ugi czekali dzie\u0144 i drugi gdy nic nie doczekali z p\u0142aczem chc\u0105 jecha\u0107 dali`}}),oa=new ua({props:{code:`from datasets import load_dataset

dataset = load_dataset("audiofolder", data_dir="/path/to/folder")
# OR by specifying the list of files
dataset = load_dataset("audiofolder", data_files=["path/to/audio_1", "path/to/audio_2", ..., "path/to/audio_n"])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;audiofolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># OR by specifying the list of files</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;audiofolder&quot;</span>, data_files=[<span class="hljs-string">&quot;path/to/audio_1&quot;</span>, <span class="hljs-string">&quot;path/to/audio_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/audio_n&quot;</span>])`}}),la=new ua({props:{code:`dataset = load_dataset("audiofolder", data_files=["https://foo.bar/audio_1", "https://foo.bar/audio_2", ..., "https://foo.bar/audio_n"]
# for example, pass SpeechCommands archive:
dataset = load_dataset("audiofolder", data_files="https://s3.amazonaws.com/datasets.huggingface.co/SpeechCommands/v0.01/v0.01_test.tar.gz")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;audiofolder&quot;</span>, data_files=[<span class="hljs-string">&quot;https://foo.bar/audio_1&quot;</span>, <span class="hljs-string">&quot;https://foo.bar/audio_2&quot;</span>, ..., <span class="hljs-string">&quot;https://foo.bar/audio_n&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># for example, pass SpeechCommands archive:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;audiofolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://s3.amazonaws.com/datasets.huggingface.co/SpeechCommands/v0.01/v0.01_test.tar.gz&quot;</span>)`}}),ia=new ua({props:{code:`from datasets import load_dataset

dataset = load_dataset("audiofolder", data_dir="/path/to/folder", drop_metadata=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;audiofolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, drop_metadata=<span class="hljs-literal">True</span>)`}}),ra=new ua({props:{code:`from datasets import load_dataset

dataset = load_dataset("audiofolder", data_dir="/path/to/folder_without_metadata", drop_labels=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;audiofolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder_without_metadata&quot;</span>, drop_labels=<span class="hljs-literal">True</span>)`}}),B=new ks({props:{$$slots:{default:[$s]},$$scope:{ctx:Ga}}}),{c(){c=l("meta"),N=p(),h=l("h1"),E=l("a"),P=l("span"),w(_.$$.fragment),V=p(),O=l("span"),S=s("Load audio data"),g=p(),m=l("p"),fa=s("You can load an audio dataset using the "),ca=l("a"),bt=s("Audio"),qt=s(` feature that automatically decodes and resamples the audio files when you access the examples.
Audio decoding is based on `),ja=l("code"),At=s("librosa"),xt=s(" in general, and "),Ea=l("code"),Ct=s("torchaudio"),Pt=s(" for MP3."),Ka=p(),D=l("h2"),L=l("a"),za=l("span"),w(W.$$.fragment),Ot=p(),ba=l("span"),St=s("Installation"),Qa=p(),q=l("p"),Dt=s("To work with audio datasets, you need to have the "),qa=l("code"),Tt=s("audio"),Ft=s(` dependencies installed.
Check out the `),ha=l("a"),It=s("installation"),Nt=s(" guide to learn how to install it."),Va=p(),T=l("h2"),Y=l("a"),Aa=l("span"),w(X.$$.fragment),Lt=p(),xa=l("span"),Yt=s("Local files"),Wa=p(),A=l("p"),Mt=s("You can load your own dataset using the paths to your audio files. Use the "),ma=l("a"),Ht=s("cast_column()"),Rt=s(" function to take a column of audio file paths, and cast it to the "),_a=l("a"),Ut=s("Audio"),Jt=s(" feature:"),Xa=p(),w(Z.$$.fragment),Za=p(),F=l("h2"),M=l("a"),Ca=l("span"),w(aa.$$.fragment),Bt=p(),Pa=l("span"),Gt=s("AudioFolder"),at=p(),H=l("p"),Kt=s("You can also load a dataset with an "),Oa=l("code"),Qt=s("AudioFolder"),Vt=s(" dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading audio data."),tt=p(),I=l("h2"),R=l("a"),Sa=l("span"),w(ta.$$.fragment),Wt=p(),Da=l("span"),Xt=s("AudioFolder with metadata"),et=p(),U=l("p"),Zt=s("To link your audio files with metadata information, make sure your dataset has a "),Ta=l("code"),ae=s("metadata.csv"),te=s(" file. Your dataset structure might look like:"),st=p(),w(ea.$$.fragment),ot=p(),z=l("p"),ee=s("Your "),Fa=l("code"),se=s("metadata.csv"),oe=s(" file must have a "),Ia=l("code"),le=s("file_name"),ie=s(" column which links audio files with their metadata. An example "),Na=l("code"),re=s("metadata.csv"),de=s(" file might look like:"),lt=p(),w(sa.$$.fragment),it=p(),b=l("p"),La=l("code"),ne=s("AudioFolder"),pe=s(" will load audio data and create a "),Ya=l("code"),ue=s("transcription"),fe=s(" column containing texts from "),Ma=l("code"),ce=s("metadata.csv"),he=s(":"),rt=p(),w(oa.$$.fragment),dt=p(),ga=l("p"),me=s("You can load remote datasets from their URLs with the data_files parameter:"),nt=p(),w(la.$$.fragment),pt=p(),J=l("p"),_e=s("Metadata can also be specified as JSON Lines, in which case use "),Ha=l("code"),ge=s("metadata.jsonl"),we=s(" as the name of the metadata file. This format is helpful in scenarios when one of the columns is complex, e.g. a list of floats, to avoid parsing errors or reading the complex values as strings."),ut=p(),x=l("p"),ve=s("To ignore the information in the metadata file, set "),Ra=l("code"),ke=s("drop_metadata=True"),$e=s(" in "),wa=l("a"),ye=s("load_dataset()"),je=s(":"),ft=p(),w(ia.$$.fragment),ct=p(),C=l("p"),Ee=s("If you don\u2019t have a metadata file, "),Ua=l("code"),ze=s("AudioFolder"),be=s(` automatically infers the label name from the directory name.
If you want to drop automatically created labels, set `),Ja=l("code"),qe=s("drop_labels=True"),Ae=s(`.
In this case, your dataset will only contain an audio column:`),ht=p(),w(ra.$$.fragment),mt=p(),w(B.$$.fragment),_t=p(),G=l("p"),xe=s("For a guide on how to load any type of dataset, take a look at the "),da=l("a"),Ce=s("general loading guide"),Pe=s("."),this.h()},l(a){const r=ws('[data-svelte="svelte-1phssyn"]',document.head);c=i(r,"META",{name:!0,content:!0}),r.forEach(e),N=u(a),h=i(a,"H1",{class:!0});var na=d(h);E=i(na,"A",{id:!0,class:!0,href:!0});var Oe=d(E);P=i(Oe,"SPAN",{});var Se=d(P);v(_.$$.fragment,Se),Se.forEach(e),Oe.forEach(e),V=u(na),O=i(na,"SPAN",{});var De=d(O);S=o(De,"Load audio data"),De.forEach(e),na.forEach(e),g=u(a),m=i(a,"P",{});var K=d(m);fa=o(K,"You can load an audio dataset using the "),ca=i(K,"A",{href:!0});var Te=d(ca);bt=o(Te,"Audio"),Te.forEach(e),qt=o(K,` feature that automatically decodes and resamples the audio files when you access the examples.
Audio decoding is based on `),ja=i(K,"CODE",{});var Fe=d(ja);At=o(Fe,"librosa"),Fe.forEach(e),xt=o(K," in general, and "),Ea=i(K,"CODE",{});var Ie=d(Ea);Ct=o(Ie,"torchaudio"),Ie.forEach(e),Pt=o(K," for MP3."),K.forEach(e),Ka=u(a),D=i(a,"H2",{class:!0});var wt=d(D);L=i(wt,"A",{id:!0,class:!0,href:!0});var Ne=d(L);za=i(Ne,"SPAN",{});var Le=d(za);v(W.$$.fragment,Le),Le.forEach(e),Ne.forEach(e),Ot=u(wt),ba=i(wt,"SPAN",{});var Ye=d(ba);St=o(Ye,"Installation"),Ye.forEach(e),wt.forEach(e),Qa=u(a),q=i(a,"P",{});var va=d(q);Dt=o(va,"To work with audio datasets, you need to have the "),qa=i(va,"CODE",{});var Me=d(qa);Tt=o(Me,"audio"),Me.forEach(e),Ft=o(va,` dependencies installed.
Check out the `),ha=i(va,"A",{href:!0});var He=d(ha);It=o(He,"installation"),He.forEach(e),Nt=o(va," guide to learn how to install it."),va.forEach(e),Va=u(a),T=i(a,"H2",{class:!0});var vt=d(T);Y=i(vt,"A",{id:!0,class:!0,href:!0});var Re=d(Y);Aa=i(Re,"SPAN",{});var Ue=d(Aa);v(X.$$.fragment,Ue),Ue.forEach(e),Re.forEach(e),Lt=u(vt),xa=i(vt,"SPAN",{});var Je=d(xa);Yt=o(Je,"Local files"),Je.forEach(e),vt.forEach(e),Wa=u(a),A=i(a,"P",{});var ka=d(A);Mt=o(ka,"You can load your own dataset using the paths to your audio files. Use the "),ma=i(ka,"A",{href:!0});var Be=d(ma);Ht=o(Be,"cast_column()"),Be.forEach(e),Rt=o(ka," function to take a column of audio file paths, and cast it to the "),_a=i(ka,"A",{href:!0});var Ge=d(_a);Ut=o(Ge,"Audio"),Ge.forEach(e),Jt=o(ka," feature:"),ka.forEach(e),Xa=u(a),v(Z.$$.fragment,a),Za=u(a),F=i(a,"H2",{class:!0});var kt=d(F);M=i(kt,"A",{id:!0,class:!0,href:!0});var Ke=d(M);Ca=i(Ke,"SPAN",{});var Qe=d(Ca);v(aa.$$.fragment,Qe),Qe.forEach(e),Ke.forEach(e),Bt=u(kt),Pa=i(kt,"SPAN",{});var Ve=d(Pa);Gt=o(Ve,"AudioFolder"),Ve.forEach(e),kt.forEach(e),at=u(a),H=i(a,"P",{});var $t=d(H);Kt=o($t,"You can also load a dataset with an "),Oa=i($t,"CODE",{});var We=d(Oa);Qt=o(We,"AudioFolder"),We.forEach(e),Vt=o($t," dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading audio data."),$t.forEach(e),tt=u(a),I=i(a,"H2",{class:!0});var yt=d(I);R=i(yt,"A",{id:!0,class:!0,href:!0});var Xe=d(R);Sa=i(Xe,"SPAN",{});var Ze=d(Sa);v(ta.$$.fragment,Ze),Ze.forEach(e),Xe.forEach(e),Wt=u(yt),Da=i(yt,"SPAN",{});var as=d(Da);Xt=o(as,"AudioFolder with metadata"),as.forEach(e),yt.forEach(e),et=u(a),U=i(a,"P",{});var jt=d(U);Zt=o(jt,"To link your audio files with metadata information, make sure your dataset has a "),Ta=i(jt,"CODE",{});var ts=d(Ta);ae=o(ts,"metadata.csv"),ts.forEach(e),te=o(jt," file. Your dataset structure might look like:"),jt.forEach(e),st=u(a),v(ea.$$.fragment,a),ot=u(a),z=i(a,"P",{});var Q=d(z);ee=o(Q,"Your "),Fa=i(Q,"CODE",{});var es=d(Fa);se=o(es,"metadata.csv"),es.forEach(e),oe=o(Q," file must have a "),Ia=i(Q,"CODE",{});var ss=d(Ia);le=o(ss,"file_name"),ss.forEach(e),ie=o(Q," column which links audio files with their metadata. An example "),Na=i(Q,"CODE",{});var os=d(Na);re=o(os,"metadata.csv"),os.forEach(e),de=o(Q," file might look like:"),Q.forEach(e),lt=u(a),v(sa.$$.fragment,a),it=u(a),b=i(a,"P",{});var pa=d(b);La=i(pa,"CODE",{});var ls=d(La);ne=o(ls,"AudioFolder"),ls.forEach(e),pe=o(pa," will load audio data and create a "),Ya=i(pa,"CODE",{});var is=d(Ya);ue=o(is,"transcription"),is.forEach(e),fe=o(pa," column containing texts from "),Ma=i(pa,"CODE",{});var rs=d(Ma);ce=o(rs,"metadata.csv"),rs.forEach(e),he=o(pa,":"),pa.forEach(e),rt=u(a),v(oa.$$.fragment,a),dt=u(a),ga=i(a,"P",{});var ds=d(ga);me=o(ds,"You can load remote datasets from their URLs with the data_files parameter:"),ds.forEach(e),nt=u(a),v(la.$$.fragment,a),pt=u(a),J=i(a,"P",{});var Et=d(J);_e=o(Et,"Metadata can also be specified as JSON Lines, in which case use "),Ha=i(Et,"CODE",{});var ns=d(Ha);ge=o(ns,"metadata.jsonl"),ns.forEach(e),we=o(Et," as the name of the metadata file. This format is helpful in scenarios when one of the columns is complex, e.g. a list of floats, to avoid parsing errors or reading the complex values as strings."),Et.forEach(e),ut=u(a),x=i(a,"P",{});var $a=d(x);ve=o($a,"To ignore the information in the metadata file, set "),Ra=i($a,"CODE",{});var ps=d(Ra);ke=o(ps,"drop_metadata=True"),ps.forEach(e),$e=o($a," in "),wa=i($a,"A",{href:!0});var us=d(wa);ye=o(us,"load_dataset()"),us.forEach(e),je=o($a,":"),$a.forEach(e),ft=u(a),v(ia.$$.fragment,a),ct=u(a),C=i(a,"P",{});var ya=d(C);Ee=o(ya,"If you don\u2019t have a metadata file, "),Ua=i(ya,"CODE",{});var fs=d(Ua);ze=o(fs,"AudioFolder"),fs.forEach(e),be=o(ya,` automatically infers the label name from the directory name.
If you want to drop automatically created labels, set `),Ja=i(ya,"CODE",{});var cs=d(Ja);qe=o(cs,"drop_labels=True"),cs.forEach(e),Ae=o(ya,`.
In this case, your dataset will only contain an audio column:`),ya.forEach(e),ht=u(a),v(ra.$$.fragment,a),mt=u(a),v(B.$$.fragment,a),_t=u(a),G=i(a,"P",{});var zt=d(G);xe=o(zt,"For a guide on how to load any type of dataset, take a look at the "),da=i(zt,"A",{class:!0,href:!0});var hs=d(da);Ce=o(hs,"general loading guide"),hs.forEach(e),Pe=o(zt,"."),zt.forEach(e),this.h()},h(){f(c,"name","hf:doc:metadata"),f(c,"content",JSON.stringify(js)),f(E,"id","load-audio-data"),f(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(E,"href","#load-audio-data"),f(h,"class","relative group"),f(ca,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Audio"),f(L,"id","installation"),f(L,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(L,"href","#installation"),f(D,"class","relative group"),f(ha,"href","./installation#audio"),f(Y,"id","local-files"),f(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Y,"href","#local-files"),f(T,"class","relative group"),f(ma,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Dataset.cast_column"),f(_a,"href","/docs/datasets/v2.7.0/en/package_reference/main_classes#datasets.Audio"),f(M,"id","audiofolder"),f(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(M,"href","#audiofolder"),f(F,"class","relative group"),f(R,"id","audiofolder-with-metadata"),f(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(R,"href","#audiofolder-with-metadata"),f(I,"class","relative group"),f(wa,"href","/docs/datasets/v2.7.0/en/package_reference/loading_methods#datasets.load_dataset"),f(da,"class","underline decoration-sky-400 decoration-2 font-semibold"),f(da,"href","./loading")},m(a,r){t(document.head,c),n(a,N,r),n(a,h,r),t(h,E),t(E,P),k(_,P,null),t(h,V),t(h,O),t(O,S),n(a,g,r),n(a,m,r),t(m,fa),t(m,ca),t(ca,bt),t(m,qt),t(m,ja),t(ja,At),t(m,xt),t(m,Ea),t(Ea,Ct),t(m,Pt),n(a,Ka,r),n(a,D,r),t(D,L),t(L,za),k(W,za,null),t(D,Ot),t(D,ba),t(ba,St),n(a,Qa,r),n(a,q,r),t(q,Dt),t(q,qa),t(qa,Tt),t(q,Ft),t(q,ha),t(ha,It),t(q,Nt),n(a,Va,r),n(a,T,r),t(T,Y),t(Y,Aa),k(X,Aa,null),t(T,Lt),t(T,xa),t(xa,Yt),n(a,Wa,r),n(a,A,r),t(A,Mt),t(A,ma),t(ma,Ht),t(A,Rt),t(A,_a),t(_a,Ut),t(A,Jt),n(a,Xa,r),k(Z,a,r),n(a,Za,r),n(a,F,r),t(F,M),t(M,Ca),k(aa,Ca,null),t(F,Bt),t(F,Pa),t(Pa,Gt),n(a,at,r),n(a,H,r),t(H,Kt),t(H,Oa),t(Oa,Qt),t(H,Vt),n(a,tt,r),n(a,I,r),t(I,R),t(R,Sa),k(ta,Sa,null),t(I,Wt),t(I,Da),t(Da,Xt),n(a,et,r),n(a,U,r),t(U,Zt),t(U,Ta),t(Ta,ae),t(U,te),n(a,st,r),k(ea,a,r),n(a,ot,r),n(a,z,r),t(z,ee),t(z,Fa),t(Fa,se),t(z,oe),t(z,Ia),t(Ia,le),t(z,ie),t(z,Na),t(Na,re),t(z,de),n(a,lt,r),k(sa,a,r),n(a,it,r),n(a,b,r),t(b,La),t(La,ne),t(b,pe),t(b,Ya),t(Ya,ue),t(b,fe),t(b,Ma),t(Ma,ce),t(b,he),n(a,rt,r),k(oa,a,r),n(a,dt,r),n(a,ga,r),t(ga,me),n(a,nt,r),k(la,a,r),n(a,pt,r),n(a,J,r),t(J,_e),t(J,Ha),t(Ha,ge),t(J,we),n(a,ut,r),n(a,x,r),t(x,ve),t(x,Ra),t(Ra,ke),t(x,$e),t(x,wa),t(wa,ye),t(x,je),n(a,ft,r),k(ia,a,r),n(a,ct,r),n(a,C,r),t(C,Ee),t(C,Ua),t(Ua,ze),t(C,be),t(C,Ja),t(Ja,qe),t(C,Ae),n(a,ht,r),k(ra,a,r),n(a,mt,r),k(B,a,r),n(a,_t,r),n(a,G,r),t(G,xe),t(G,da),t(da,Ce),t(G,Pe),gt=!0},p(a,[r]){const na={};r&2&&(na.$$scope={dirty:r,ctx:a}),B.$set(na)},i(a){gt||($(_.$$.fragment,a),$(W.$$.fragment,a),$(X.$$.fragment,a),$(Z.$$.fragment,a),$(aa.$$.fragment,a),$(ta.$$.fragment,a),$(ea.$$.fragment,a),$(sa.$$.fragment,a),$(oa.$$.fragment,a),$(la.$$.fragment,a),$(ia.$$.fragment,a),$(ra.$$.fragment,a),$(B.$$.fragment,a),gt=!0)},o(a){y(_.$$.fragment,a),y(W.$$.fragment,a),y(X.$$.fragment,a),y(Z.$$.fragment,a),y(aa.$$.fragment,a),y(ta.$$.fragment,a),y(ea.$$.fragment,a),y(sa.$$.fragment,a),y(oa.$$.fragment,a),y(la.$$.fragment,a),y(ia.$$.fragment,a),y(ra.$$.fragment,a),y(B.$$.fragment,a),gt=!1},d(a){e(c),a&&e(N),a&&e(h),j(_),a&&e(g),a&&e(m),a&&e(Ka),a&&e(D),j(W),a&&e(Qa),a&&e(q),a&&e(Va),a&&e(T),j(X),a&&e(Wa),a&&e(A),a&&e(Xa),j(Z,a),a&&e(Za),a&&e(F),j(aa),a&&e(at),a&&e(H),a&&e(tt),a&&e(I),j(ta),a&&e(et),a&&e(U),a&&e(st),j(ea,a),a&&e(ot),a&&e(z),a&&e(lt),j(sa,a),a&&e(it),a&&e(b),a&&e(rt),j(oa,a),a&&e(dt),a&&e(ga),a&&e(nt),j(la,a),a&&e(pt),a&&e(J),a&&e(ut),a&&e(x),a&&e(ft),j(ia,a),a&&e(ct),a&&e(C),a&&e(ht),j(ra,a),a&&e(mt),j(B,a),a&&e(_t),a&&e(G)}}}const js={local:"load-audio-data",sections:[{local:"installation",title:"Installation"},{local:"local-files",title:"Local files"},{local:"audiofolder",title:"AudioFolder"},{local:"audiofolder-with-metadata",title:"AudioFolder with metadata"}],title:"Load audio data"};function Es(Ga){return vs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class xs extends ms{constructor(c){super();_s(this,c,Es,ys,gs,{})}}export{xs as default,js as metadata};
