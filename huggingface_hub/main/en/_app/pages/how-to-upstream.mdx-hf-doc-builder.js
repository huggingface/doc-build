import{S as Qh,i as Vh,s as Xh,e as s,k as h,w as u,t as a,M as Zh,c as r,d as o,m as f,a as i,x as m,h as l,b as c,G as t,g as p,y as d,L as ef,q as g,o as _,B as y,v as tf}from"../chunks/vendor-hf-doc-builder.js";import{I as Ee}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as w}from"../chunks/CodeBlock-hf-doc-builder.js";function of(Vn){let R,ua,U,J,so,$e,es,ro,ts,ma,K,os,io,as,ls,da,k,no,ss,rs,ke,is,je,ns,ps,hs,Ae,fs,po,cs,us,ms,He,ds,mt,gs,_s,ga,dt,ys,_a,Q,Pe,ho,vs,ws,qe,bs,C,Ce,Es,gt,$s,ks,js,xe,As,Oe,Hs,_t,Ps,qs,Cs,De,xs,yt,Os,Ds,ya,F,V,fo,Ie,Is,co,Ts,va,x,Ss,vt,Ls,Rs,wt,Us,Fs,wa,b,Ns,bt,Gs,Ms,Et,Bs,Ws,$t,Ys,zs,kt,Js,Ks,ba,N,X,uo,Te,Qs,mo,Vs,Ea,O,Xs,jt,go,Zs,er,At,tr,or,$a,j,ar,_o,lr,sr,yo,rr,ir,vo,nr,pr,ka,Se,ja,G,Z,wo,Le,hr,bo,fr,Aa,E,cr,Ht,ur,mr,Eo,dr,gr,$o,_r,yr,ko,vr,wr,Ha,v,br,jo,Er,$r,Ao,kr,jr,Re,Ar,Hr,Ho,Pr,qr,Po,Cr,xr,Pa,Ue,qa,M,ee,qo,Fe,Or,Co,Dr,Ca,D,Ir,Pt,Tr,Sr,qt,Lr,Rr,xa,te,Ne,Ct,xo,Ur,Fr,Nr,Ge,xt,Oo,Gr,Mr,Br,Ot,Do,Wr,Yr,zr,Io,oe,To,Jr,Kr,So,Qr,Vr,Oa,Dt,Xr,Da,It,Me,Zr,Lo,ei,ti,Ia,Be,Ta,We,Ye,oi,Tt,ai,li,Sa,ze,La,A,si,St,ri,ii,Lt,ni,pi,Rt,hi,fi,Ra,ae,Ut,Ft,ci,ui,mi,Nt,Gt,di,gi,Ua,le,_i,Mt,yi,vi,Fa,B,se,Ro,Je,wi,Uo,bi,Na,Bt,Ei,Ga,Ke,Ma,Wt,$i,Ba,W,re,Fo,Qe,ki,No,ji,Wa,H,Ai,Go,Hi,Pi,Mo,qi,Ci,Bo,xi,Oi,Ya,P,Ve,Di,Wo,Ii,Ti,Si,Xe,Li,Yo,Ri,Ui,Fi,zo,Ni,Gi,Ze,Mi,Jo,Bi,Wi,za,et,Ja,ie,Yi,Ko,zi,Ji,Ka,tt,Qa,ne,Ki,Qo,Qi,Vi,Va,ot,Xa,pe,Xi,Vo,Zi,en,Za,at,el,Yt,tn,tl,he,Xo,lt,Zo,on,an,ea,ln,sn,Y,st,ta,rn,nn,oa,pn,hn,rt,aa,fn,cn,la,un,mn,it,sa,dn,gn,ra,_n,ol,fe,yn,ia,vn,wn,al,nt,ll,z,ce,na,pt,bn,pa,En,sl,$,$n,zt,kn,jn,Jt,An,Hn,ha,Pn,qn,Kt,Cn,xn,rl,ue,On,fa,Dn,In,il,ht,nl,me,Tn,Qt,Sn,Ln,pl,ft,hl,I,Rn,Vt,Un,Fn,Xt,Nn,Gn,fl,ct,cl,de,Mn,Zt,Bn,Wn,ul,ut,ml;return $e=new Ee({}),qe=new w({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),xe=new w({props:{code:`from huggingface_hub import login
login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> login
<span class="hljs-meta">&gt;&gt;&gt; </span>login()`}}),Ie=new Ee({}),Te=new Ee({}),Se=new w({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_file(
    path_or_fileobj="/path/to/local/folder/README.md",
    path_in_repo="README.md",
    repo_id="username/test-dataset",
    repo_type="dataset",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_file(
<span class="hljs-meta">... </span>    path_or_fileobj=<span class="hljs-string">&quot;/path/to/local/folder/README.md&quot;</span>,
<span class="hljs-meta">... </span>    path_in_repo=<span class="hljs-string">&quot;README.md&quot;</span>,
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;username/test-dataset&quot;</span>,
<span class="hljs-meta">... </span>    repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>)`}}),Le=new Ee({}),Ue=new w({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_folder(
    folder_path="/path/to/local/folder",
    path_in_repo="my-dataset/train",
    repo_id="username/test-dataset",
    repo_type="dataset",
    ignore_patterns="**/logs/*.txt",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_folder(
<span class="hljs-meta">... </span>    folder_path=<span class="hljs-string">&quot;/path/to/local/folder&quot;</span>,
<span class="hljs-meta">... </span>    path_in_repo=<span class="hljs-string">&quot;my-dataset/train&quot;</span>,
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;username/test-dataset&quot;</span>,
<span class="hljs-meta">... </span>    repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>    ignore_patterns=<span class="hljs-string">&quot;**/logs/*.txt&quot;</span>,
<span class="hljs-meta">... </span>)`}}),Fe=new Ee({}),Be=new w({props:{code:`from huggingface_hub import HfApi, CommitOperationAdd, CommitOperationDelete
api = HfApi()
operations = [
    CommitOperationAdd(path_in_repo="LICENSE.md", path_or_fileobj="~/repo/LICENSE.md"),
    CommitOperationAdd(path_in_repo="weights.h5", path_or_fileobj="~/repo/weights-final.h5"),
    CommitOperationDelete(path_in_repo="old-weights.h5"),
]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi, CommitOperationAdd, CommitOperationDelete
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>operations = [
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;LICENSE.md&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/LICENSE.md&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;weights.h5&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/weights-final.h5&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationDelete(path_in_repo=<span class="hljs-string">&quot;old-weights.h5&quot;</span>),
<span class="hljs-meta">... </span>]`}}),ze=new w({props:{code:`api.create_commit(
    repo_id="lysandre/test-model",
    operations=operations,
    commit_message="Upload my model weights and license",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>api.create_commit(
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>,
<span class="hljs-meta">... </span>    operations=operations,
<span class="hljs-meta">... </span>    commit_message=<span class="hljs-string">&quot;Upload my model weights and license&quot;</span>,
<span class="hljs-meta">... </span>)`}}),Je=new Ee({}),Ke=new w({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),Qe=new Ee({}),et=new w({props:{code:`from huggingface_hub import Repository
with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),tt=new w({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),ot=new w({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),at=new w({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status`}}),nt=new w({props:{code:`last_command.stderr

last_command.is_done

last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),pt=new Ee({}),ht=new w({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="path/to/local/repo")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;path/to/local/repo&quot;</span>)`}}),ft=new w({props:{code:`repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),ct=new w({props:{code:`repo.git_add("path/to/file")
repo.git_commit(commit_message="add my first model config file :)")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)`}}),ut=new w({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),{c(){R=s("meta"),ua=h(),U=s("h1"),J=s("a"),so=s("span"),u($e.$$.fragment),es=h(),ro=s("span"),ts=a("Upload files to the Hub"),ma=h(),K=s("p"),os=a("Sharing your files and work is an important aspect of the Hub. The "),io=s("code"),as=a("huggingface_hub"),ls=a(" offers several options for uploading your files to the Hub. You can use these functions independently or integrate them into your library, making it more convenient for your users to interact with the Hub. This guide will show you how to push files:"),da=h(),k=s("ul"),no=s("li"),ss=a("without using Git."),rs=h(),ke=s("li"),is=a("that are very large with "),je=s("a"),ns=a("Git LFS"),ps=a("."),hs=h(),Ae=s("li"),fs=a("with the "),po=s("code"),cs=a("commit"),us=a(" context manager."),ms=h(),He=s("li"),ds=a("with the "),mt=s("a"),gs=a("push_to_hub()"),_s=a(" function."),ga=h(),dt=s("p"),ys=a("Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),_a=h(),Q=s("ul"),Pe=s("li"),ho=s("p"),vs=a("Log in to your Hugging Face account with the following command:"),ws=h(),u(qe.$$.fragment),bs=h(),C=s("li"),Ce=s("p"),Es=a("Alternatively, you can programmatically login using "),gt=s("a"),$s=a("login()"),ks=a(" in a notebook or a script:"),js=h(),u(xe.$$.fragment),As=h(),Oe=s("p"),Hs=a("If ran in a Jupyter or Colaboratory notebook, "),_t=s("a"),Ps=a("login()"),qs=a(` will launch a widget from
which you can enter your Hugging Face access token. Otherwise, a message will be
prompted in the terminal.`),Cs=h(),De=s("p"),xs=a(`It is also possible to login programmatically without the widget by directly passing
the token to `),yt=s("a"),Os=a("login()"),Ds=a(`. If you do so, be careful when sharing your notebook. It is
best practice to load the token from a secure vault instead of saving it in plain in
your Colaboratory notebook.`),ya=h(),F=s("h2"),V=s("a"),fo=s("span"),u(Ie.$$.fragment),Is=h(),co=s("span"),Ts=a("Push files without Git"),va=h(),x=s("p"),Ss=a("If you don\u2019t have Git installed on your system, use "),vt=s("a"),Ls=a("create_commit()"),Rs=a(" to push your files to the Hub. "),wt=s("a"),Us=a("create_commit()"),Fs=a(" uses the HTTP protocol to upload files to the Hub."),wa=h(),b=s("p"),Ns=a("However, "),bt=s("a"),Gs=a("create_commit()"),Ms=a(" is a low-level API for working at a commit level. The "),Et=s("a"),Bs=a("upload_file()"),Ws=a(" and "),$t=s("a"),Ys=a("upload_folder()"),zs=a(" functions are higher-level APIs that use "),kt=s("a"),Js=a("create_commit()"),Ks=a(" under the hood and are generally more convenient. We recommend trying these functions first if you don\u2019t need to work at a lower level."),ba=h(),N=s("h3"),X=s("a"),uo=s("span"),u(Te.$$.fragment),Qs=h(),mo=s("span"),Vs=a("Upload a file"),Ea=h(),O=s("p"),Xs=a("Once you\u2019ve created a repository with the "),jt=s("a"),go=s("code"),Zs=a("create_repo"),er=a(" function, you can upload a file to your repository with the "),At=s("a"),tr=a("upload_file()"),or=a(" function."),$a=h(),j=s("p"),ar=a("Specify the path of the file to upload, where you want to upload the file to in the repository, and the name of the repository you want to add the file to. Depending on your repository type, you can optionally set the repository type as a "),_o=s("code"),lr=a("dataset"),sr=a(", "),yo=s("code"),rr=a("model"),ir=a(", or "),vo=s("code"),nr=a("space"),pr=a("."),ka=h(),u(Se.$$.fragment),ja=h(),G=s("h3"),Z=s("a"),wo=s("span"),u(Le.$$.fragment),hr=h(),bo=s("span"),fr=a("Upload a folder"),Aa=h(),E=s("p"),cr=a("Use the "),Ht=s("a"),ur=a("upload_folder()"),mr=a(" function to upload a local folder to an existing repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to. Depending on your repository type, you can optionally set the repository type as a "),Eo=s("code"),dr=a("dataset"),gr=a(", "),$o=s("code"),_r=a("model"),yr=a(", or "),ko=s("code"),vr=a("space"),wr=a("."),Ha=h(),v=s("p"),br=a("Use the "),jo=s("code"),Er=a("allow_patterns"),$r=a(" and "),Ao=s("code"),kr=a("ignore_patterns"),jr=a(` arguments to specify which files to upload. These parameters accept either a single pattern or a list of patterns.
Patterns are Standard Wildcards (globbing patterns) as documented `),Re=s("a"),Ar=a("here"),Hr=a(`.
If both `),Ho=s("code"),Pr=a("allow_patterns"),qr=a(" and "),Po=s("code"),Cr=a("ignore_patterns"),xr=a(" are provided, both constraints apply. By default, all files from the folder are uploaded."),Pa=h(),u(Ue.$$.fragment),qa=h(),M=s("h3"),ee=s("a"),qo=s("span"),u(Fe.$$.fragment),Or=h(),Co=s("span"),Dr=a("create_commit"),Ca=h(),D=s("p"),Ir=a("If you want to work at a commit-level, use the "),Pt=s("a"),Tr=a("create_commit()"),Sr=a(" function directly. There are two types of operations supported by "),qt=s("a"),Lr=a("create_commit()"),Rr=a(":"),xa=h(),te=s("ul"),Ne=s("li"),Ct=s("p"),xo=s("code"),Ur=a("CommitOperationAdd"),Fr=a(" uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),Nr=h(),Ge=s("ul"),xt=s("li"),Oo=s("code"),Gr=a("path_in_repo"),Mr=a(": the repository path to upload a file to."),Br=h(),Ot=s("li"),Do=s("code"),Wr=a("path_or_fileobj"),Yr=a(": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),zr=h(),Io=s("li"),oe=s("p"),To=s("code"),Jr=a("CommitOperationDelete"),Kr=a(" removes a file from a repository. This operation accepts "),So=s("code"),Qr=a("path_in_repo"),Vr=a(" as an argument."),Oa=h(),Dt=s("p"),Xr=a("For example, if you want to upload two files and delete a file in a Hub repository:"),Da=h(),It=s("ol"),Me=s("li"),Zr=a("Use the appropriate "),Lo=s("code"),ei=a("CommitOperation"),ti=a(" to add and delete a file:"),Ia=h(),u(Be.$$.fragment),Ta=h(),We=s("ol"),Ye=s("li"),oi=a("Pass your operations to "),Tt=s("a"),ai=a("create_commit()"),li=a(":"),Sa=h(),u(ze.$$.fragment),La=h(),A=s("p"),si=a("In addition to "),St=s("a"),ri=a("upload_file()"),ii=a(" and "),Lt=s("a"),ni=a("upload_folder()"),pi=a(", the following functions also use "),Rt=s("a"),hi=a("create_commit()"),fi=a(" under the hood:"),Ra=h(),ae=s("ul"),Ut=s("li"),Ft=s("a"),ci=a("delete_file()"),ui=a(" deletes a single file from a repository on the Hub."),mi=h(),Nt=s("li"),Gt=s("a"),di=a("metadata_update()"),gi=a(" updates a repository\u2019s metadata."),Ua=h(),le=s("p"),_i=a("For more detailed information, take a look at the "),Mt=s("a"),yi=a("HfApi"),vi=a(" reference."),Fa=h(),B=s("h2"),se=s("a"),Ro=s("span"),u(Je.$$.fragment),wi=h(),Uo=s("span"),bi=a("Push files with Git LFS"),Na=h(),Bt=s("p"),Ei=a("Git LFS automatically handles files larger than 10MB. But for very large files (>5GB), you need to install a custom transfer agent for Git LFS:"),Ga=h(),u(Ke.$$.fragment),Ma=h(),Wt=s("p"),$i=a("You should install this for each repository that has a very large file. Once installed, you\u2019ll be able to push files larger than 5GB."),Ba=h(),W=s("h2"),re=s("a"),Fo=s("span"),u(Qe.$$.fragment),ki=h(),No=s("span"),ji=a("commit context manager"),Wa=h(),H=s("p"),Ai=a("The "),Go=s("code"),Hi=a("commit"),Pi=a(" context manager handles four of the most common Git commands: pull, add, commit, and push. "),Mo=s("code"),qi=a("git-lfs"),Ci=a(" automatically tracks any file larger than 10MB. In the following example, the "),Bo=s("code"),xi=a("commit"),Oi=a(" context manager:"),Ya=h(),P=s("ol"),Ve=s("li"),Di=a("Pulls from the "),Wo=s("code"),Ii=a("text-files"),Ti=a(" repository."),Si=h(),Xe=s("li"),Li=a("Adds a change made to "),Yo=s("code"),Ri=a("file.txt"),Ui=a("."),Fi=h(),zo=s("li"),Ni=a("Commits the change."),Gi=h(),Ze=s("li"),Mi=a("Pushes the change to the "),Jo=s("code"),Bi=a("text-files"),Wi=a(" repository."),za=h(),u(et.$$.fragment),Ja=h(),ie=s("p"),Yi=a("Here is another example of how to use the "),Ko=s("code"),zi=a("commit"),Ji=a(" context manager to save and upload a file to a repository:"),Ka=h(),u(tt.$$.fragment),Qa=h(),ne=s("p"),Ki=a("Set "),Qo=s("code"),Qi=a("blocking=False"),Vi=a(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while your commits are being pushed."),Va=h(),u(ot.$$.fragment),Xa=h(),pe=s("p"),Xi=a("You can check the status of your push with the "),Vo=s("code"),Zi=a("command_queue"),en=a(" method:"),Za=h(),u(at.$$.fragment),el=h(),Yt=s("p"),tn=a("Refer to the table below for the possible statuses:"),tl=h(),he=s("table"),Xo=s("thead"),lt=s("tr"),Zo=s("th"),on=a("Status"),an=h(),ea=s("th"),ln=a("Description"),sn=h(),Y=s("tbody"),st=s("tr"),ta=s("td"),rn=a("-1"),nn=h(),oa=s("td"),pn=a("The push is ongoing."),hn=h(),rt=s("tr"),aa=s("td"),fn=a("0"),cn=h(),la=s("td"),un=a("The push has completed successfully."),mn=h(),it=s("tr"),sa=s("td"),dn=a("Non-zero"),gn=h(),ra=s("td"),_n=a("An error has occurred."),ol=h(),fe=s("p"),yn=a("When "),ia=s("code"),vn=a("blocking=False"),wn=a(", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),al=h(),u(nt.$$.fragment),ll=h(),z=s("h2"),ce=s("a"),na=s("span"),u(pt.$$.fragment),bn=h(),pa=s("span"),En=a("push_to_hub"),sl=h(),$=s("p"),$n=a("The "),zt=s("a"),kn=a("Repository"),jn=a(" class has a "),Jt=s("a"),An=a("push_to_hub()"),Hn=a(" function to add files, make a commit, and push them to a repository. Unlike the "),ha=s("code"),Pn=a("commit"),qn=a(" context manager, you\u2019ll need to pull from a repository first before calling "),Kt=s("a"),Cn=a("push_to_hub()"),xn=a("."),rl=h(),ue=s("p"),On=a("For example, if you\u2019ve already cloned a repository from the Hub, then you can initialize the "),fa=s("code"),Dn=a("repo"),In=a(" from the local directory:"),il=h(),u(ht.$$.fragment),nl=h(),me=s("p"),Tn=a("Update your local clone with "),Qt=s("a"),Sn=a("git_pull()"),Ln=a(" and then push your file to the Hub:"),pl=h(),u(ft.$$.fragment),hl=h(),I=s("p"),Rn=a("However, if you aren\u2019t ready to push a file yet, you can use "),Vt=s("a"),Un=a("git_add()"),Fn=a(" and "),Xt=s("a"),Nn=a("git_commit()"),Gn=a(" to only add and commit your file:"),fl=h(),u(ct.$$.fragment),cl=h(),de=s("p"),Mn=a("When you\u2019re ready, push the file to your repository with "),Zt=s("a"),Bn=a("git_push()"),Wn=a(":"),ul=h(),u(ut.$$.fragment),this.h()},l(e){const n=Zh('[data-svelte="svelte-1phssyn"]',document.head);R=r(n,"META",{name:!0,content:!0}),n.forEach(o),ua=f(e),U=r(e,"H1",{class:!0});var dl=i(U);J=r(dl,"A",{id:!0,class:!0,href:!0});var Xn=i(J);so=r(Xn,"SPAN",{});var Zn=i(so);m($e.$$.fragment,Zn),Zn.forEach(o),Xn.forEach(o),es=f(dl),ro=r(dl,"SPAN",{});var ep=i(ro);ts=l(ep,"Upload files to the Hub"),ep.forEach(o),dl.forEach(o),ma=f(e),K=r(e,"P",{});var gl=i(K);os=l(gl,"Sharing your files and work is an important aspect of the Hub. The "),io=r(gl,"CODE",{});var tp=i(io);as=l(tp,"huggingface_hub"),tp.forEach(o),ls=l(gl," offers several options for uploading your files to the Hub. You can use these functions independently or integrate them into your library, making it more convenient for your users to interact with the Hub. This guide will show you how to push files:"),gl.forEach(o),da=f(e),k=r(e,"UL",{});var ge=i(k);no=r(ge,"LI",{});var op=i(no);ss=l(op,"without using Git."),op.forEach(o),rs=f(ge),ke=r(ge,"LI",{});var _l=i(ke);is=l(_l,"that are very large with "),je=r(_l,"A",{href:!0,rel:!0});var ap=i(je);ns=l(ap,"Git LFS"),ap.forEach(o),ps=l(_l,"."),_l.forEach(o),hs=f(ge),Ae=r(ge,"LI",{});var yl=i(Ae);fs=l(yl,"with the "),po=r(yl,"CODE",{});var lp=i(po);cs=l(lp,"commit"),lp.forEach(o),us=l(yl," context manager."),yl.forEach(o),ms=f(ge),He=r(ge,"LI",{});var vl=i(He);ds=l(vl,"with the "),mt=r(vl,"A",{href:!0});var sp=i(mt);gs=l(sp,"push_to_hub()"),sp.forEach(o),_s=l(vl," function."),vl.forEach(o),ge.forEach(o),ga=f(e),dt=r(e,"P",{});var rp=i(dt);ys=l(rp,"Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),rp.forEach(o),_a=f(e),Q=r(e,"UL",{});var wl=i(Q);Pe=r(wl,"LI",{});var bl=i(Pe);ho=r(bl,"P",{});var ip=i(ho);vs=l(ip,"Log in to your Hugging Face account with the following command:"),ip.forEach(o),ws=f(bl),m(qe.$$.fragment,bl),bl.forEach(o),bs=f(wl),C=r(wl,"LI",{});var _e=i(C);Ce=r(_e,"P",{});var El=i(Ce);Es=l(El,"Alternatively, you can programmatically login using "),gt=r(El,"A",{href:!0});var np=i(gt);$s=l(np,"login()"),np.forEach(o),ks=l(El," in a notebook or a script:"),El.forEach(o),js=f(_e),m(xe.$$.fragment,_e),As=f(_e),Oe=r(_e,"P",{});var $l=i(Oe);Hs=l($l,"If ran in a Jupyter or Colaboratory notebook, "),_t=r($l,"A",{href:!0});var pp=i(_t);Ps=l(pp,"login()"),pp.forEach(o),qs=l($l,` will launch a widget from
which you can enter your Hugging Face access token. Otherwise, a message will be
prompted in the terminal.`),$l.forEach(o),Cs=f(_e),De=r(_e,"P",{});var kl=i(De);xs=l(kl,`It is also possible to login programmatically without the widget by directly passing
the token to `),yt=r(kl,"A",{href:!0});var hp=i(yt);Os=l(hp,"login()"),hp.forEach(o),Ds=l(kl,`. If you do so, be careful when sharing your notebook. It is
best practice to load the token from a secure vault instead of saving it in plain in
your Colaboratory notebook.`),kl.forEach(o),_e.forEach(o),wl.forEach(o),ya=f(e),F=r(e,"H2",{class:!0});var jl=i(F);V=r(jl,"A",{id:!0,class:!0,href:!0});var fp=i(V);fo=r(fp,"SPAN",{});var cp=i(fo);m(Ie.$$.fragment,cp),cp.forEach(o),fp.forEach(o),Is=f(jl),co=r(jl,"SPAN",{});var up=i(co);Ts=l(up,"Push files without Git"),up.forEach(o),jl.forEach(o),va=f(e),x=r(e,"P",{});var eo=i(x);Ss=l(eo,"If you don\u2019t have Git installed on your system, use "),vt=r(eo,"A",{href:!0});var mp=i(vt);Ls=l(mp,"create_commit()"),mp.forEach(o),Rs=l(eo," to push your files to the Hub. "),wt=r(eo,"A",{href:!0});var dp=i(wt);Us=l(dp,"create_commit()"),dp.forEach(o),Fs=l(eo," uses the HTTP protocol to upload files to the Hub."),eo.forEach(o),wa=f(e),b=r(e,"P",{});var T=i(b);Ns=l(T,"However, "),bt=r(T,"A",{href:!0});var gp=i(bt);Gs=l(gp,"create_commit()"),gp.forEach(o),Ms=l(T," is a low-level API for working at a commit level. The "),Et=r(T,"A",{href:!0});var _p=i(Et);Bs=l(_p,"upload_file()"),_p.forEach(o),Ws=l(T," and "),$t=r(T,"A",{href:!0});var yp=i($t);Ys=l(yp,"upload_folder()"),yp.forEach(o),zs=l(T," functions are higher-level APIs that use "),kt=r(T,"A",{href:!0});var vp=i(kt);Js=l(vp,"create_commit()"),vp.forEach(o),Ks=l(T," under the hood and are generally more convenient. We recommend trying these functions first if you don\u2019t need to work at a lower level."),T.forEach(o),ba=f(e),N=r(e,"H3",{class:!0});var Al=i(N);X=r(Al,"A",{id:!0,class:!0,href:!0});var wp=i(X);uo=r(wp,"SPAN",{});var bp=i(uo);m(Te.$$.fragment,bp),bp.forEach(o),wp.forEach(o),Qs=f(Al),mo=r(Al,"SPAN",{});var Ep=i(mo);Vs=l(Ep,"Upload a file"),Ep.forEach(o),Al.forEach(o),Ea=f(e),O=r(e,"P",{});var to=i(O);Xs=l(to,"Once you\u2019ve created a repository with the "),jt=r(to,"A",{href:!0});var $p=i(jt);go=r($p,"CODE",{});var kp=i(go);Zs=l(kp,"create_repo"),kp.forEach(o),$p.forEach(o),er=l(to," function, you can upload a file to your repository with the "),At=r(to,"A",{href:!0});var jp=i(At);tr=l(jp,"upload_file()"),jp.forEach(o),or=l(to," function."),to.forEach(o),$a=f(e),j=r(e,"P",{});var ye=i(j);ar=l(ye,"Specify the path of the file to upload, where you want to upload the file to in the repository, and the name of the repository you want to add the file to. Depending on your repository type, you can optionally set the repository type as a "),_o=r(ye,"CODE",{});var Ap=i(_o);lr=l(Ap,"dataset"),Ap.forEach(o),sr=l(ye,", "),yo=r(ye,"CODE",{});var Hp=i(yo);rr=l(Hp,"model"),Hp.forEach(o),ir=l(ye,", or "),vo=r(ye,"CODE",{});var Pp=i(vo);nr=l(Pp,"space"),Pp.forEach(o),pr=l(ye,"."),ye.forEach(o),ka=f(e),m(Se.$$.fragment,e),ja=f(e),G=r(e,"H3",{class:!0});var Hl=i(G);Z=r(Hl,"A",{id:!0,class:!0,href:!0});var qp=i(Z);wo=r(qp,"SPAN",{});var Cp=i(wo);m(Le.$$.fragment,Cp),Cp.forEach(o),qp.forEach(o),hr=f(Hl),bo=r(Hl,"SPAN",{});var xp=i(bo);fr=l(xp,"Upload a folder"),xp.forEach(o),Hl.forEach(o),Aa=f(e),E=r(e,"P",{});var S=i(E);cr=l(S,"Use the "),Ht=r(S,"A",{href:!0});var Op=i(Ht);ur=l(Op,"upload_folder()"),Op.forEach(o),mr=l(S," function to upload a local folder to an existing repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to. Depending on your repository type, you can optionally set the repository type as a "),Eo=r(S,"CODE",{});var Dp=i(Eo);dr=l(Dp,"dataset"),Dp.forEach(o),gr=l(S,", "),$o=r(S,"CODE",{});var Ip=i($o);_r=l(Ip,"model"),Ip.forEach(o),yr=l(S,", or "),ko=r(S,"CODE",{});var Tp=i(ko);vr=l(Tp,"space"),Tp.forEach(o),wr=l(S,"."),S.forEach(o),Ha=f(e),v=r(e,"P",{});var q=i(v);br=l(q,"Use the "),jo=r(q,"CODE",{});var Sp=i(jo);Er=l(Sp,"allow_patterns"),Sp.forEach(o),$r=l(q," and "),Ao=r(q,"CODE",{});var Lp=i(Ao);kr=l(Lp,"ignore_patterns"),Lp.forEach(o),jr=l(q,` arguments to specify which files to upload. These parameters accept either a single pattern or a list of patterns.
Patterns are Standard Wildcards (globbing patterns) as documented `),Re=r(q,"A",{href:!0,rel:!0});var Rp=i(Re);Ar=l(Rp,"here"),Rp.forEach(o),Hr=l(q,`.
If both `),Ho=r(q,"CODE",{});var Up=i(Ho);Pr=l(Up,"allow_patterns"),Up.forEach(o),qr=l(q," and "),Po=r(q,"CODE",{});var Fp=i(Po);Cr=l(Fp,"ignore_patterns"),Fp.forEach(o),xr=l(q," are provided, both constraints apply. By default, all files from the folder are uploaded."),q.forEach(o),Pa=f(e),m(Ue.$$.fragment,e),qa=f(e),M=r(e,"H3",{class:!0});var Pl=i(M);ee=r(Pl,"A",{id:!0,class:!0,href:!0});var Np=i(ee);qo=r(Np,"SPAN",{});var Gp=i(qo);m(Fe.$$.fragment,Gp),Gp.forEach(o),Np.forEach(o),Or=f(Pl),Co=r(Pl,"SPAN",{});var Mp=i(Co);Dr=l(Mp,"create_commit"),Mp.forEach(o),Pl.forEach(o),Ca=f(e),D=r(e,"P",{});var oo=i(D);Ir=l(oo,"If you want to work at a commit-level, use the "),Pt=r(oo,"A",{href:!0});var Bp=i(Pt);Tr=l(Bp,"create_commit()"),Bp.forEach(o),Sr=l(oo," function directly. There are two types of operations supported by "),qt=r(oo,"A",{href:!0});var Wp=i(qt);Lr=l(Wp,"create_commit()"),Wp.forEach(o),Rr=l(oo,":"),oo.forEach(o),xa=f(e),te=r(e,"UL",{});var ql=i(te);Ne=r(ql,"LI",{});var Cl=i(Ne);Ct=r(Cl,"P",{});var Yn=i(Ct);xo=r(Yn,"CODE",{});var Yp=i(xo);Ur=l(Yp,"CommitOperationAdd"),Yp.forEach(o),Fr=l(Yn," uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),Yn.forEach(o),Nr=f(Cl),Ge=r(Cl,"UL",{});var xl=i(Ge);xt=r(xl,"LI",{});var zn=i(xt);Oo=r(zn,"CODE",{});var zp=i(Oo);Gr=l(zp,"path_in_repo"),zp.forEach(o),Mr=l(zn,": the repository path to upload a file to."),zn.forEach(o),Br=f(xl),Ot=r(xl,"LI",{});var Jn=i(Ot);Do=r(Jn,"CODE",{});var Jp=i(Do);Wr=l(Jp,"path_or_fileobj"),Jp.forEach(o),Yr=l(Jn,": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),Jn.forEach(o),xl.forEach(o),Cl.forEach(o),zr=f(ql),Io=r(ql,"LI",{});var Kp=i(Io);oe=r(Kp,"P",{});var ca=i(oe);To=r(ca,"CODE",{});var Qp=i(To);Jr=l(Qp,"CommitOperationDelete"),Qp.forEach(o),Kr=l(ca," removes a file from a repository. This operation accepts "),So=r(ca,"CODE",{});var Vp=i(So);Qr=l(Vp,"path_in_repo"),Vp.forEach(o),Vr=l(ca," as an argument."),ca.forEach(o),Kp.forEach(o),ql.forEach(o),Oa=f(e),Dt=r(e,"P",{});var Xp=i(Dt);Xr=l(Xp,"For example, if you want to upload two files and delete a file in a Hub repository:"),Xp.forEach(o),Da=f(e),It=r(e,"OL",{});var Zp=i(It);Me=r(Zp,"LI",{});var Ol=i(Me);Zr=l(Ol,"Use the appropriate "),Lo=r(Ol,"CODE",{});var eh=i(Lo);ei=l(eh,"CommitOperation"),eh.forEach(o),ti=l(Ol," to add and delete a file:"),Ol.forEach(o),Zp.forEach(o),Ia=f(e),m(Be.$$.fragment,e),Ta=f(e),We=r(e,"OL",{start:!0});var th=i(We);Ye=r(th,"LI",{});var Dl=i(Ye);oi=l(Dl,"Pass your operations to "),Tt=r(Dl,"A",{href:!0});var oh=i(Tt);ai=l(oh,"create_commit()"),oh.forEach(o),li=l(Dl,":"),Dl.forEach(o),th.forEach(o),Sa=f(e),m(ze.$$.fragment,e),La=f(e),A=r(e,"P",{});var ve=i(A);si=l(ve,"In addition to "),St=r(ve,"A",{href:!0});var ah=i(St);ri=l(ah,"upload_file()"),ah.forEach(o),ii=l(ve," and "),Lt=r(ve,"A",{href:!0});var lh=i(Lt);ni=l(lh,"upload_folder()"),lh.forEach(o),pi=l(ve,", the following functions also use "),Rt=r(ve,"A",{href:!0});var sh=i(Rt);hi=l(sh,"create_commit()"),sh.forEach(o),fi=l(ve," under the hood:"),ve.forEach(o),Ra=f(e),ae=r(e,"UL",{});var Il=i(ae);Ut=r(Il,"LI",{});var Kn=i(Ut);Ft=r(Kn,"A",{href:!0});var rh=i(Ft);ci=l(rh,"delete_file()"),rh.forEach(o),ui=l(Kn," deletes a single file from a repository on the Hub."),Kn.forEach(o),mi=f(Il),Nt=r(Il,"LI",{});var Qn=i(Nt);Gt=r(Qn,"A",{href:!0});var ih=i(Gt);di=l(ih,"metadata_update()"),ih.forEach(o),gi=l(Qn," updates a repository\u2019s metadata."),Qn.forEach(o),Il.forEach(o),Ua=f(e),le=r(e,"P",{});var Tl=i(le);_i=l(Tl,"For more detailed information, take a look at the "),Mt=r(Tl,"A",{href:!0});var nh=i(Mt);yi=l(nh,"HfApi"),nh.forEach(o),vi=l(Tl," reference."),Tl.forEach(o),Fa=f(e),B=r(e,"H2",{class:!0});var Sl=i(B);se=r(Sl,"A",{id:!0,class:!0,href:!0});var ph=i(se);Ro=r(ph,"SPAN",{});var hh=i(Ro);m(Je.$$.fragment,hh),hh.forEach(o),ph.forEach(o),wi=f(Sl),Uo=r(Sl,"SPAN",{});var fh=i(Uo);bi=l(fh,"Push files with Git LFS"),fh.forEach(o),Sl.forEach(o),Na=f(e),Bt=r(e,"P",{});var ch=i(Bt);Ei=l(ch,"Git LFS automatically handles files larger than 10MB. But for very large files (>5GB), you need to install a custom transfer agent for Git LFS:"),ch.forEach(o),Ga=f(e),m(Ke.$$.fragment,e),Ma=f(e),Wt=r(e,"P",{});var uh=i(Wt);$i=l(uh,"You should install this for each repository that has a very large file. Once installed, you\u2019ll be able to push files larger than 5GB."),uh.forEach(o),Ba=f(e),W=r(e,"H2",{class:!0});var Ll=i(W);re=r(Ll,"A",{id:!0,class:!0,href:!0});var mh=i(re);Fo=r(mh,"SPAN",{});var dh=i(Fo);m(Qe.$$.fragment,dh),dh.forEach(o),mh.forEach(o),ki=f(Ll),No=r(Ll,"SPAN",{});var gh=i(No);ji=l(gh,"commit context manager"),gh.forEach(o),Ll.forEach(o),Wa=f(e),H=r(e,"P",{});var we=i(H);Ai=l(we,"The "),Go=r(we,"CODE",{});var _h=i(Go);Hi=l(_h,"commit"),_h.forEach(o),Pi=l(we," context manager handles four of the most common Git commands: pull, add, commit, and push. "),Mo=r(we,"CODE",{});var yh=i(Mo);qi=l(yh,"git-lfs"),yh.forEach(o),Ci=l(we," automatically tracks any file larger than 10MB. In the following example, the "),Bo=r(we,"CODE",{});var vh=i(Bo);xi=l(vh,"commit"),vh.forEach(o),Oi=l(we," context manager:"),we.forEach(o),Ya=f(e),P=r(e,"OL",{});var be=i(P);Ve=r(be,"LI",{});var Rl=i(Ve);Di=l(Rl,"Pulls from the "),Wo=r(Rl,"CODE",{});var wh=i(Wo);Ii=l(wh,"text-files"),wh.forEach(o),Ti=l(Rl," repository."),Rl.forEach(o),Si=f(be),Xe=r(be,"LI",{});var Ul=i(Xe);Li=l(Ul,"Adds a change made to "),Yo=r(Ul,"CODE",{});var bh=i(Yo);Ri=l(bh,"file.txt"),bh.forEach(o),Ui=l(Ul,"."),Ul.forEach(o),Fi=f(be),zo=r(be,"LI",{});var Eh=i(zo);Ni=l(Eh,"Commits the change."),Eh.forEach(o),Gi=f(be),Ze=r(be,"LI",{});var Fl=i(Ze);Mi=l(Fl,"Pushes the change to the "),Jo=r(Fl,"CODE",{});var $h=i(Jo);Bi=l($h,"text-files"),$h.forEach(o),Wi=l(Fl," repository."),Fl.forEach(o),be.forEach(o),za=f(e),m(et.$$.fragment,e),Ja=f(e),ie=r(e,"P",{});var Nl=i(ie);Yi=l(Nl,"Here is another example of how to use the "),Ko=r(Nl,"CODE",{});var kh=i(Ko);zi=l(kh,"commit"),kh.forEach(o),Ji=l(Nl," context manager to save and upload a file to a repository:"),Nl.forEach(o),Ka=f(e),m(tt.$$.fragment,e),Qa=f(e),ne=r(e,"P",{});var Gl=i(ne);Ki=l(Gl,"Set "),Qo=r(Gl,"CODE",{});var jh=i(Qo);Qi=l(jh,"blocking=False"),jh.forEach(o),Vi=l(Gl," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while your commits are being pushed."),Gl.forEach(o),Va=f(e),m(ot.$$.fragment,e),Xa=f(e),pe=r(e,"P",{});var Ml=i(pe);Xi=l(Ml,"You can check the status of your push with the "),Vo=r(Ml,"CODE",{});var Ah=i(Vo);Zi=l(Ah,"command_queue"),Ah.forEach(o),en=l(Ml," method:"),Ml.forEach(o),Za=f(e),m(at.$$.fragment,e),el=f(e),Yt=r(e,"P",{});var Hh=i(Yt);tn=l(Hh,"Refer to the table below for the possible statuses:"),Hh.forEach(o),tl=f(e),he=r(e,"TABLE",{});var Bl=i(he);Xo=r(Bl,"THEAD",{});var Ph=i(Xo);lt=r(Ph,"TR",{});var Wl=i(lt);Zo=r(Wl,"TH",{});var qh=i(Zo);on=l(qh,"Status"),qh.forEach(o),an=f(Wl),ea=r(Wl,"TH",{});var Ch=i(ea);ln=l(Ch,"Description"),Ch.forEach(o),Wl.forEach(o),Ph.forEach(o),sn=f(Bl),Y=r(Bl,"TBODY",{});var ao=i(Y);st=r(ao,"TR",{});var Yl=i(st);ta=r(Yl,"TD",{});var xh=i(ta);rn=l(xh,"-1"),xh.forEach(o),nn=f(Yl),oa=r(Yl,"TD",{});var Oh=i(oa);pn=l(Oh,"The push is ongoing."),Oh.forEach(o),Yl.forEach(o),hn=f(ao),rt=r(ao,"TR",{});var zl=i(rt);aa=r(zl,"TD",{});var Dh=i(aa);fn=l(Dh,"0"),Dh.forEach(o),cn=f(zl),la=r(zl,"TD",{});var Ih=i(la);un=l(Ih,"The push has completed successfully."),Ih.forEach(o),zl.forEach(o),mn=f(ao),it=r(ao,"TR",{});var Jl=i(it);sa=r(Jl,"TD",{});var Th=i(sa);dn=l(Th,"Non-zero"),Th.forEach(o),gn=f(Jl),ra=r(Jl,"TD",{});var Sh=i(ra);_n=l(Sh,"An error has occurred."),Sh.forEach(o),Jl.forEach(o),ao.forEach(o),Bl.forEach(o),ol=f(e),fe=r(e,"P",{});var Kl=i(fe);yn=l(Kl,"When "),ia=r(Kl,"CODE",{});var Lh=i(ia);vn=l(Lh,"blocking=False"),Lh.forEach(o),wn=l(Kl,", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Kl.forEach(o),al=f(e),m(nt.$$.fragment,e),ll=f(e),z=r(e,"H2",{class:!0});var Ql=i(z);ce=r(Ql,"A",{id:!0,class:!0,href:!0});var Rh=i(ce);na=r(Rh,"SPAN",{});var Uh=i(na);m(pt.$$.fragment,Uh),Uh.forEach(o),Rh.forEach(o),bn=f(Ql),pa=r(Ql,"SPAN",{});var Fh=i(pa);En=l(Fh,"push_to_hub"),Fh.forEach(o),Ql.forEach(o),sl=f(e),$=r(e,"P",{});var L=i($);$n=l(L,"The "),zt=r(L,"A",{href:!0});var Nh=i(zt);kn=l(Nh,"Repository"),Nh.forEach(o),jn=l(L," class has a "),Jt=r(L,"A",{href:!0});var Gh=i(Jt);An=l(Gh,"push_to_hub()"),Gh.forEach(o),Hn=l(L," function to add files, make a commit, and push them to a repository. Unlike the "),ha=r(L,"CODE",{});var Mh=i(ha);Pn=l(Mh,"commit"),Mh.forEach(o),qn=l(L," context manager, you\u2019ll need to pull from a repository first before calling "),Kt=r(L,"A",{href:!0});var Bh=i(Kt);Cn=l(Bh,"push_to_hub()"),Bh.forEach(o),xn=l(L,"."),L.forEach(o),rl=f(e),ue=r(e,"P",{});var Vl=i(ue);On=l(Vl,"For example, if you\u2019ve already cloned a repository from the Hub, then you can initialize the "),fa=r(Vl,"CODE",{});var Wh=i(fa);Dn=l(Wh,"repo"),Wh.forEach(o),In=l(Vl," from the local directory:"),Vl.forEach(o),il=f(e),m(ht.$$.fragment,e),nl=f(e),me=r(e,"P",{});var Xl=i(me);Tn=l(Xl,"Update your local clone with "),Qt=r(Xl,"A",{href:!0});var Yh=i(Qt);Sn=l(Yh,"git_pull()"),Yh.forEach(o),Ln=l(Xl," and then push your file to the Hub:"),Xl.forEach(o),pl=f(e),m(ft.$$.fragment,e),hl=f(e),I=r(e,"P",{});var lo=i(I);Rn=l(lo,"However, if you aren\u2019t ready to push a file yet, you can use "),Vt=r(lo,"A",{href:!0});var zh=i(Vt);Un=l(zh,"git_add()"),zh.forEach(o),Fn=l(lo," and "),Xt=r(lo,"A",{href:!0});var Jh=i(Xt);Nn=l(Jh,"git_commit()"),Jh.forEach(o),Gn=l(lo," to only add and commit your file:"),lo.forEach(o),fl=f(e),m(ct.$$.fragment,e),cl=f(e),de=r(e,"P",{});var Zl=i(de);Mn=l(Zl,"When you\u2019re ready, push the file to your repository with "),Zt=r(Zl,"A",{href:!0});var Kh=i(Zt);Bn=l(Kh,"git_push()"),Kh.forEach(o),Wn=l(Zl,":"),Zl.forEach(o),ul=f(e),m(ut.$$.fragment,e),this.h()},h(){c(R,"name","hf:doc:metadata"),c(R,"content",JSON.stringify(af)),c(J,"id","upload-files-to-the-hub"),c(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J,"href","#upload-files-to-the-hub"),c(U,"class","relative group"),c(je,"href","https://git-lfs.github.com/"),c(je,"rel","nofollow"),c(mt,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(gt,"href","/docs/huggingface_hub/main/en/package_reference/login#huggingface_hub.login"),c(_t,"href","/docs/huggingface_hub/main/en/package_reference/login#huggingface_hub.login"),c(yt,"href","/docs/huggingface_hub/main/en/package_reference/login#huggingface_hub.login"),c(V,"id","push-files-without-git"),c(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V,"href","#push-files-without-git"),c(F,"class","relative group"),c(vt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(wt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(bt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Et,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c($t,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(kt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(X,"id","upload-a-file"),c(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X,"href","#upload-a-file"),c(N,"class","relative group"),c(jt,"href","./how-to-manage#create-a-repository"),c(At,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(Z,"id","upload-a-folder"),c(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z,"href","#upload-a-folder"),c(G,"class","relative group"),c(Ht,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(Re,"href","https://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm"),c(Re,"rel","nofollow"),c(ee,"id","createcommit"),c(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ee,"href","#createcommit"),c(M,"class","relative group"),c(Pt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(qt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Tt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(We,"start","2"),c(St,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(Lt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(Rt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Ft,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file"),c(Gt,"href","/docs/huggingface_hub/main/en/package_reference/cards#huggingface_hub.metadata_update"),c(Mt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi"),c(se,"id","push-files-with-git-lfs"),c(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(se,"href","#push-files-with-git-lfs"),c(B,"class","relative group"),c(re,"id","commit-context-manager"),c(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(re,"href","#commit-context-manager"),c(W,"class","relative group"),c(ce,"id","pushtohub"),c(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ce,"href","#pushtohub"),c(z,"class","relative group"),c(zt,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository"),c(Jt,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(Kt,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(Qt,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository.git_pull"),c(Vt,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository.git_add"),c(Xt,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository.git_commit"),c(Zt,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository.git_push")},m(e,n){t(document.head,R),p(e,ua,n),p(e,U,n),t(U,J),t(J,so),d($e,so,null),t(U,es),t(U,ro),t(ro,ts),p(e,ma,n),p(e,K,n),t(K,os),t(K,io),t(io,as),t(K,ls),p(e,da,n),p(e,k,n),t(k,no),t(no,ss),t(k,rs),t(k,ke),t(ke,is),t(ke,je),t(je,ns),t(ke,ps),t(k,hs),t(k,Ae),t(Ae,fs),t(Ae,po),t(po,cs),t(Ae,us),t(k,ms),t(k,He),t(He,ds),t(He,mt),t(mt,gs),t(He,_s),p(e,ga,n),p(e,dt,n),t(dt,ys),p(e,_a,n),p(e,Q,n),t(Q,Pe),t(Pe,ho),t(ho,vs),t(Pe,ws),d(qe,Pe,null),t(Q,bs),t(Q,C),t(C,Ce),t(Ce,Es),t(Ce,gt),t(gt,$s),t(Ce,ks),t(C,js),d(xe,C,null),t(C,As),t(C,Oe),t(Oe,Hs),t(Oe,_t),t(_t,Ps),t(Oe,qs),t(C,Cs),t(C,De),t(De,xs),t(De,yt),t(yt,Os),t(De,Ds),p(e,ya,n),p(e,F,n),t(F,V),t(V,fo),d(Ie,fo,null),t(F,Is),t(F,co),t(co,Ts),p(e,va,n),p(e,x,n),t(x,Ss),t(x,vt),t(vt,Ls),t(x,Rs),t(x,wt),t(wt,Us),t(x,Fs),p(e,wa,n),p(e,b,n),t(b,Ns),t(b,bt),t(bt,Gs),t(b,Ms),t(b,Et),t(Et,Bs),t(b,Ws),t(b,$t),t($t,Ys),t(b,zs),t(b,kt),t(kt,Js),t(b,Ks),p(e,ba,n),p(e,N,n),t(N,X),t(X,uo),d(Te,uo,null),t(N,Qs),t(N,mo),t(mo,Vs),p(e,Ea,n),p(e,O,n),t(O,Xs),t(O,jt),t(jt,go),t(go,Zs),t(O,er),t(O,At),t(At,tr),t(O,or),p(e,$a,n),p(e,j,n),t(j,ar),t(j,_o),t(_o,lr),t(j,sr),t(j,yo),t(yo,rr),t(j,ir),t(j,vo),t(vo,nr),t(j,pr),p(e,ka,n),d(Se,e,n),p(e,ja,n),p(e,G,n),t(G,Z),t(Z,wo),d(Le,wo,null),t(G,hr),t(G,bo),t(bo,fr),p(e,Aa,n),p(e,E,n),t(E,cr),t(E,Ht),t(Ht,ur),t(E,mr),t(E,Eo),t(Eo,dr),t(E,gr),t(E,$o),t($o,_r),t(E,yr),t(E,ko),t(ko,vr),t(E,wr),p(e,Ha,n),p(e,v,n),t(v,br),t(v,jo),t(jo,Er),t(v,$r),t(v,Ao),t(Ao,kr),t(v,jr),t(v,Re),t(Re,Ar),t(v,Hr),t(v,Ho),t(Ho,Pr),t(v,qr),t(v,Po),t(Po,Cr),t(v,xr),p(e,Pa,n),d(Ue,e,n),p(e,qa,n),p(e,M,n),t(M,ee),t(ee,qo),d(Fe,qo,null),t(M,Or),t(M,Co),t(Co,Dr),p(e,Ca,n),p(e,D,n),t(D,Ir),t(D,Pt),t(Pt,Tr),t(D,Sr),t(D,qt),t(qt,Lr),t(D,Rr),p(e,xa,n),p(e,te,n),t(te,Ne),t(Ne,Ct),t(Ct,xo),t(xo,Ur),t(Ct,Fr),t(Ne,Nr),t(Ne,Ge),t(Ge,xt),t(xt,Oo),t(Oo,Gr),t(xt,Mr),t(Ge,Br),t(Ge,Ot),t(Ot,Do),t(Do,Wr),t(Ot,Yr),t(te,zr),t(te,Io),t(Io,oe),t(oe,To),t(To,Jr),t(oe,Kr),t(oe,So),t(So,Qr),t(oe,Vr),p(e,Oa,n),p(e,Dt,n),t(Dt,Xr),p(e,Da,n),p(e,It,n),t(It,Me),t(Me,Zr),t(Me,Lo),t(Lo,ei),t(Me,ti),p(e,Ia,n),d(Be,e,n),p(e,Ta,n),p(e,We,n),t(We,Ye),t(Ye,oi),t(Ye,Tt),t(Tt,ai),t(Ye,li),p(e,Sa,n),d(ze,e,n),p(e,La,n),p(e,A,n),t(A,si),t(A,St),t(St,ri),t(A,ii),t(A,Lt),t(Lt,ni),t(A,pi),t(A,Rt),t(Rt,hi),t(A,fi),p(e,Ra,n),p(e,ae,n),t(ae,Ut),t(Ut,Ft),t(Ft,ci),t(Ut,ui),t(ae,mi),t(ae,Nt),t(Nt,Gt),t(Gt,di),t(Nt,gi),p(e,Ua,n),p(e,le,n),t(le,_i),t(le,Mt),t(Mt,yi),t(le,vi),p(e,Fa,n),p(e,B,n),t(B,se),t(se,Ro),d(Je,Ro,null),t(B,wi),t(B,Uo),t(Uo,bi),p(e,Na,n),p(e,Bt,n),t(Bt,Ei),p(e,Ga,n),d(Ke,e,n),p(e,Ma,n),p(e,Wt,n),t(Wt,$i),p(e,Ba,n),p(e,W,n),t(W,re),t(re,Fo),d(Qe,Fo,null),t(W,ki),t(W,No),t(No,ji),p(e,Wa,n),p(e,H,n),t(H,Ai),t(H,Go),t(Go,Hi),t(H,Pi),t(H,Mo),t(Mo,qi),t(H,Ci),t(H,Bo),t(Bo,xi),t(H,Oi),p(e,Ya,n),p(e,P,n),t(P,Ve),t(Ve,Di),t(Ve,Wo),t(Wo,Ii),t(Ve,Ti),t(P,Si),t(P,Xe),t(Xe,Li),t(Xe,Yo),t(Yo,Ri),t(Xe,Ui),t(P,Fi),t(P,zo),t(zo,Ni),t(P,Gi),t(P,Ze),t(Ze,Mi),t(Ze,Jo),t(Jo,Bi),t(Ze,Wi),p(e,za,n),d(et,e,n),p(e,Ja,n),p(e,ie,n),t(ie,Yi),t(ie,Ko),t(Ko,zi),t(ie,Ji),p(e,Ka,n),d(tt,e,n),p(e,Qa,n),p(e,ne,n),t(ne,Ki),t(ne,Qo),t(Qo,Qi),t(ne,Vi),p(e,Va,n),d(ot,e,n),p(e,Xa,n),p(e,pe,n),t(pe,Xi),t(pe,Vo),t(Vo,Zi),t(pe,en),p(e,Za,n),d(at,e,n),p(e,el,n),p(e,Yt,n),t(Yt,tn),p(e,tl,n),p(e,he,n),t(he,Xo),t(Xo,lt),t(lt,Zo),t(Zo,on),t(lt,an),t(lt,ea),t(ea,ln),t(he,sn),t(he,Y),t(Y,st),t(st,ta),t(ta,rn),t(st,nn),t(st,oa),t(oa,pn),t(Y,hn),t(Y,rt),t(rt,aa),t(aa,fn),t(rt,cn),t(rt,la),t(la,un),t(Y,mn),t(Y,it),t(it,sa),t(sa,dn),t(it,gn),t(it,ra),t(ra,_n),p(e,ol,n),p(e,fe,n),t(fe,yn),t(fe,ia),t(ia,vn),t(fe,wn),p(e,al,n),d(nt,e,n),p(e,ll,n),p(e,z,n),t(z,ce),t(ce,na),d(pt,na,null),t(z,bn),t(z,pa),t(pa,En),p(e,sl,n),p(e,$,n),t($,$n),t($,zt),t(zt,kn),t($,jn),t($,Jt),t(Jt,An),t($,Hn),t($,ha),t(ha,Pn),t($,qn),t($,Kt),t(Kt,Cn),t($,xn),p(e,rl,n),p(e,ue,n),t(ue,On),t(ue,fa),t(fa,Dn),t(ue,In),p(e,il,n),d(ht,e,n),p(e,nl,n),p(e,me,n),t(me,Tn),t(me,Qt),t(Qt,Sn),t(me,Ln),p(e,pl,n),d(ft,e,n),p(e,hl,n),p(e,I,n),t(I,Rn),t(I,Vt),t(Vt,Un),t(I,Fn),t(I,Xt),t(Xt,Nn),t(I,Gn),p(e,fl,n),d(ct,e,n),p(e,cl,n),p(e,de,n),t(de,Mn),t(de,Zt),t(Zt,Bn),t(de,Wn),p(e,ul,n),d(ut,e,n),ml=!0},p:ef,i(e){ml||(g($e.$$.fragment,e),g(qe.$$.fragment,e),g(xe.$$.fragment,e),g(Ie.$$.fragment,e),g(Te.$$.fragment,e),g(Se.$$.fragment,e),g(Le.$$.fragment,e),g(Ue.$$.fragment,e),g(Fe.$$.fragment,e),g(Be.$$.fragment,e),g(ze.$$.fragment,e),g(Je.$$.fragment,e),g(Ke.$$.fragment,e),g(Qe.$$.fragment,e),g(et.$$.fragment,e),g(tt.$$.fragment,e),g(ot.$$.fragment,e),g(at.$$.fragment,e),g(nt.$$.fragment,e),g(pt.$$.fragment,e),g(ht.$$.fragment,e),g(ft.$$.fragment,e),g(ct.$$.fragment,e),g(ut.$$.fragment,e),ml=!0)},o(e){_($e.$$.fragment,e),_(qe.$$.fragment,e),_(xe.$$.fragment,e),_(Ie.$$.fragment,e),_(Te.$$.fragment,e),_(Se.$$.fragment,e),_(Le.$$.fragment,e),_(Ue.$$.fragment,e),_(Fe.$$.fragment,e),_(Be.$$.fragment,e),_(ze.$$.fragment,e),_(Je.$$.fragment,e),_(Ke.$$.fragment,e),_(Qe.$$.fragment,e),_(et.$$.fragment,e),_(tt.$$.fragment,e),_(ot.$$.fragment,e),_(at.$$.fragment,e),_(nt.$$.fragment,e),_(pt.$$.fragment,e),_(ht.$$.fragment,e),_(ft.$$.fragment,e),_(ct.$$.fragment,e),_(ut.$$.fragment,e),ml=!1},d(e){o(R),e&&o(ua),e&&o(U),y($e),e&&o(ma),e&&o(K),e&&o(da),e&&o(k),e&&o(ga),e&&o(dt),e&&o(_a),e&&o(Q),y(qe),y(xe),e&&o(ya),e&&o(F),y(Ie),e&&o(va),e&&o(x),e&&o(wa),e&&o(b),e&&o(ba),e&&o(N),y(Te),e&&o(Ea),e&&o(O),e&&o($a),e&&o(j),e&&o(ka),y(Se,e),e&&o(ja),e&&o(G),y(Le),e&&o(Aa),e&&o(E),e&&o(Ha),e&&o(v),e&&o(Pa),y(Ue,e),e&&o(qa),e&&o(M),y(Fe),e&&o(Ca),e&&o(D),e&&o(xa),e&&o(te),e&&o(Oa),e&&o(Dt),e&&o(Da),e&&o(It),e&&o(Ia),y(Be,e),e&&o(Ta),e&&o(We),e&&o(Sa),y(ze,e),e&&o(La),e&&o(A),e&&o(Ra),e&&o(ae),e&&o(Ua),e&&o(le),e&&o(Fa),e&&o(B),y(Je),e&&o(Na),e&&o(Bt),e&&o(Ga),y(Ke,e),e&&o(Ma),e&&o(Wt),e&&o(Ba),e&&o(W),y(Qe),e&&o(Wa),e&&o(H),e&&o(Ya),e&&o(P),e&&o(za),y(et,e),e&&o(Ja),e&&o(ie),e&&o(Ka),y(tt,e),e&&o(Qa),e&&o(ne),e&&o(Va),y(ot,e),e&&o(Xa),e&&o(pe),e&&o(Za),y(at,e),e&&o(el),e&&o(Yt),e&&o(tl),e&&o(he),e&&o(ol),e&&o(fe),e&&o(al),y(nt,e),e&&o(ll),e&&o(z),y(pt),e&&o(sl),e&&o($),e&&o(rl),e&&o(ue),e&&o(il),y(ht,e),e&&o(nl),e&&o(me),e&&o(pl),y(ft,e),e&&o(hl),e&&o(I),e&&o(fl),y(ct,e),e&&o(cl),e&&o(de),e&&o(ul),y(ut,e)}}}const af={local:"upload-files-to-the-hub",sections:[{local:"push-files-without-git",sections:[{local:"upload-a-file",title:"Upload a file"},{local:"upload-a-folder",title:"Upload a folder"},{local:"createcommit",title:"create_commit"}],title:"Push files without Git"},{local:"push-files-with-git-lfs",title:"Push files with Git LFS"},{local:"commit-context-manager",title:"commit context manager"},{local:"pushtohub",title:"push_to_hub"}],title:"Upload files to the Hub"};function lf(Vn){return tf(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class pf extends Qh{constructor(R){super();Vh(this,R,lf,of,Xh,{})}}export{pf as default,af as metadata};
