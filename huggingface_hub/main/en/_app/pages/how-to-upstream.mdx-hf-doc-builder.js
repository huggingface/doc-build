import{S as af,i as lf,s as sf,e as s,k as h,w as u,t as a,M as rf,c as r,d as o,m as f,a as i,x as m,h as l,b as c,G as t,g as p,y as d,L as nf,q as g,o as _,B as y,v as pf}from"../chunks/vendor-hf-doc-builder.js";import{I as Ee}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as w}from"../chunks/CodeBlock-hf-doc-builder.js";function hf(ap){let U,ga,F,K,ho,$e,os,fo,as,_a,Q,ls,co,ss,rs,ya,k,uo,is,ns,ke,ps,je,hs,fs,cs,Ae,us,mo,ms,ds,gs,He,_s,mt,ys,vs,va,dt,ws,wa,V,qe,go,bs,Es,Pe,$s,C,Ce,ks,gt,js,As,Hs,xe,qs,Oe,Ps,_t,Cs,xs,Os,De,Ds,yt,Is,Ts,ba,N,X,_o,Ie,Ls,yo,Ss,Ea,x,Rs,vt,Us,Fs,wt,Ns,Gs,$a,b,Ms,bt,Bs,Ws,Et,Ys,zs,$t,Js,Ks,kt,Qs,Vs,ka,G,Z,vo,Te,Xs,wo,Zs,ja,O,er,jt,bo,tr,or,At,ar,lr,Aa,j,sr,Eo,rr,ir,$o,nr,pr,ko,hr,fr,Ha,Le,qa,M,ee,jo,Se,cr,Ao,ur,Pa,E,mr,Ht,dr,gr,Ho,_r,yr,qo,vr,wr,Po,br,Er,Ca,v,$r,Co,kr,jr,xo,Ar,Hr,Re,qr,Pr,Oo,Cr,xr,Do,Or,Dr,xa,Ue,Oa,B,te,Io,Fe,Ir,To,Tr,Da,D,Lr,qt,Sr,Rr,Pt,Ur,Fr,Ia,oe,Ne,Ct,xt,Nr,Gr,Mr,Ge,Ot,Lo,Br,Wr,Yr,Dt,So,zr,Jr,Kr,Ro,ae,It,Qr,Vr,Uo,Xr,Zr,Ta,Tt,ei,La,Lt,Me,ti,Fo,oi,ai,Sa,Be,Ra,We,Ye,li,St,si,ri,Ua,ze,Fa,A,ii,Rt,ni,pi,Ut,hi,fi,Ft,ci,ui,Na,I,Nt,Gt,mi,di,gi,Mt,Bt,_i,yi,vi,Wt,Yt,wi,bi,Ga,le,Ei,zt,$i,ki,Ma,W,se,No,Je,ji,Go,Ai,Ba,Jt,Hi,Wa,Ke,Ya,Kt,qi,za,Y,re,Mo,Qe,Pi,Bo,Ci,Ja,H,xi,Wo,Oi,Di,Yo,Ii,Ti,zo,Li,Si,Ka,q,Ve,Ri,Jo,Ui,Fi,Ni,Xe,Gi,Ko,Mi,Bi,Wi,Qo,Yi,zi,Ze,Ji,Vo,Ki,Qi,Qa,et,Va,ie,Vi,Xo,Xi,Zi,Xa,tt,Za,ne,en,Zo,tn,on,el,ot,tl,pe,an,ea,ln,sn,ol,at,al,Qt,rn,ll,he,ta,lt,oa,nn,pn,aa,hn,fn,z,st,la,cn,un,sa,mn,dn,rt,ra,gn,_n,ia,yn,vn,it,na,wn,bn,pa,En,sl,fe,$n,ha,kn,jn,rl,nt,il,J,ce,fa,pt,An,ca,Hn,nl,$,qn,Vt,Pn,Cn,Xt,xn,On,ua,Dn,In,Zt,Tn,Ln,pl,ue,Sn,ma,Rn,Un,hl,ht,fl,me,Fn,eo,Nn,Gn,cl,ft,ul,T,Mn,to,Bn,Wn,oo,Yn,zn,ml,ct,dl,de,Jn,ao,Kn,Qn,gl,ut,_l;return $e=new Ee({}),Pe=new w({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),xe=new w({props:{code:`from huggingface_hub import login
login()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> login
<span class="hljs-meta">&gt;&gt;&gt; </span>login()`}}),Ie=new Ee({}),Te=new Ee({}),Le=new w({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_file(
    path_or_fileobj="/path/to/local/folder/README.md",
    path_in_repo="README.md",
    repo_id="username/test-dataset",
    repo_type="dataset",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_file(
<span class="hljs-meta">... </span>    path_or_fileobj=<span class="hljs-string">&quot;/path/to/local/folder/README.md&quot;</span>,
<span class="hljs-meta">... </span>    path_in_repo=<span class="hljs-string">&quot;README.md&quot;</span>,
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;username/test-dataset&quot;</span>,
<span class="hljs-meta">... </span>    repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>)`}}),Se=new Ee({}),Ue=new w({props:{code:`from huggingface_hub import HfApi
api = HfApi()
api.upload_folder(
    folder_path="/path/to/local/folder",
    path_in_repo="my-dataset/train",
    repo_id="username/test-dataset",
    repo_type="dataset",
    ignore_patterns="**/logs/*.txt",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>api.upload_folder(
<span class="hljs-meta">... </span>    folder_path=<span class="hljs-string">&quot;/path/to/local/folder&quot;</span>,
<span class="hljs-meta">... </span>    path_in_repo=<span class="hljs-string">&quot;my-dataset/train&quot;</span>,
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;username/test-dataset&quot;</span>,
<span class="hljs-meta">... </span>    repo_type=<span class="hljs-string">&quot;dataset&quot;</span>,
<span class="hljs-meta">... </span>    ignore_patterns=<span class="hljs-string">&quot;**/logs/*.txt&quot;</span>,
<span class="hljs-meta">... </span>)`}}),Fe=new Ee({}),Be=new w({props:{code:`from huggingface_hub import HfApi, CommitOperationAdd, CommitOperationDelete
api = HfApi()
operations = [
    CommitOperationAdd(path_in_repo="LICENSE.md", path_or_fileobj="~/repo/LICENSE.md"),
    CommitOperationAdd(path_in_repo="weights.h5", path_or_fileobj="~/repo/weights-final.h5"),
    CommitOperationDelete(path_in_repo="old-weights.h5"),
    CommitOperationDelete(path_in_repo="logs/"),
]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> HfApi, CommitOperationAdd, CommitOperationDelete
<span class="hljs-meta">&gt;&gt;&gt; </span>api = HfApi()
<span class="hljs-meta">&gt;&gt;&gt; </span>operations = [
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;LICENSE.md&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/LICENSE.md&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationAdd(path_in_repo=<span class="hljs-string">&quot;weights.h5&quot;</span>, path_or_fileobj=<span class="hljs-string">&quot;~/repo/weights-final.h5&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationDelete(path_in_repo=<span class="hljs-string">&quot;old-weights.h5&quot;</span>),
<span class="hljs-meta">... </span>    CommitOperationDelete(path_in_repo=<span class="hljs-string">&quot;logs/&quot;</span>),
<span class="hljs-meta">... </span>]`}}),ze=new w({props:{code:`api.create_commit(
    repo_id="lysandre/test-model",
    operations=operations,
    commit_message="Upload my model weights and license",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>api.create_commit(
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;lysandre/test-model&quot;</span>,
<span class="hljs-meta">... </span>    operations=operations,
<span class="hljs-meta">... </span>    commit_message=<span class="hljs-string">&quot;Upload my model weights and license&quot;</span>,
<span class="hljs-meta">... </span>)`}}),Je=new Ee({}),Ke=new w({props:{code:"huggingface-cli lfs-enable-largefiles",highlighted:"huggingface-cli lfs-enable-largefiles"}}),Qe=new Ee({}),et=new w({props:{code:`from huggingface_hub import Repository
with Repository(local_dir="text-files", clone_from="<user>/text-files").commit(commit_message="My first file :)"):
    with open("file.txt", "w+") as f:
        f.write(json.dumps({"hey": 8}))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(local_dir=<span class="hljs-string">&quot;text-files&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/text-files&quot;</span>).commit(commit_message=<span class="hljs-string">&quot;My first file :)&quot;</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        f.write(json.dumps({<span class="hljs-string">&quot;hey&quot;</span>: <span class="hljs-number">8</span>}))`}}),tt=new w({props:{code:`import torch
model = torch.nn.Transformer()
with Repository("torch-model", clone_from="<user>/torch-model", token=True).commit(commit_message="My cool model :)"):
    torch.save(model.state_dict(), "model.pt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>model = torch.nn.Transformer()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> Repository(<span class="hljs-string">&quot;torch-model&quot;</span>, clone_from=<span class="hljs-string">&quot;&lt;user&gt;/torch-model&quot;</span>, token=<span class="hljs-literal">True</span>).commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>):
<span class="hljs-meta">... </span>    torch.save(model.state_dict(), <span class="hljs-string">&quot;model.pt&quot;</span>)`}}),ot=new w({props:{code:'with repo.commit(commit_message="My cool model :)", blocking=False)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> repo.commit(commit_message=<span class="hljs-string">&quot;My cool model :)&quot;</span>, blocking=<span class="hljs-literal">False</span>)'}}),at=new w({props:{code:`last_command = repo.command_queue[-1]
last_command.status`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>last_command = repo.command_queue[-<span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.status`}}),nt=new w({props:{code:`last_command.stderr

last_command.is_done

last_command.failed`,highlighted:`<span class="hljs-comment"># Inspect an error.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.stderr

<span class="hljs-comment"># Check whether a push is completed or ongoing.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.is_done

<span class="hljs-comment"># Check whether a push command has errored.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>last_command.failed`}}),pt=new Ee({}),ht=new w({props:{code:`from huggingface_hub import Repository
repo = Repository(local_dir="path/to/local/repo")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository
<span class="hljs-meta">&gt;&gt;&gt; </span>repo = Repository(local_dir=<span class="hljs-string">&quot;path/to/local/repo&quot;</span>)`}}),ft=new w({props:{code:`repo.git_pull()
repo.push_to_hub(commit_message="Commit my-awesome-file to the Hub")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_pull()
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.push_to_hub(commit_message=<span class="hljs-string">&quot;Commit my-awesome-file to the Hub&quot;</span>)`}}),ct=new w({props:{code:`repo.git_add("path/to/file")
repo.git_commit(commit_message="add my first model config file :)")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_add(<span class="hljs-string">&quot;path/to/file&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_commit(commit_message=<span class="hljs-string">&quot;add my first model config file :)&quot;</span>)`}}),ut=new w({props:{code:"repo.git_push()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>repo.git_push()'}}),{c(){U=s("meta"),ga=h(),F=s("h1"),K=s("a"),ho=s("span"),u($e.$$.fragment),os=h(),fo=s("span"),as=a("Upload files to the Hub"),_a=h(),Q=s("p"),ls=a("Sharing your files and work is an important aspect of the Hub. The "),co=s("code"),ss=a("huggingface_hub"),rs=a(" offers several options for uploading your files to the Hub. You can use these functions independently or integrate them into your library, making it more convenient for your users to interact with the Hub. This guide will show you how to push files:"),ya=h(),k=s("ul"),uo=s("li"),is=a("without using Git."),ns=h(),ke=s("li"),ps=a("that are very large with "),je=s("a"),hs=a("Git LFS"),fs=a("."),cs=h(),Ae=s("li"),us=a("with the "),mo=s("code"),ms=a("commit"),ds=a(" context manager."),gs=h(),He=s("li"),_s=a("with the "),mt=s("a"),ys=a("push_to_hub()"),vs=a(" function."),va=h(),dt=s("p"),ws=a("Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),wa=h(),V=s("ul"),qe=s("li"),go=s("p"),bs=a("Log in to your Hugging Face account with the following command:"),Es=h(),u(Pe.$$.fragment),$s=h(),C=s("li"),Ce=s("p"),ks=a("Alternatively, you can programmatically login using "),gt=s("a"),js=a("login()"),As=a(" in a notebook or a script:"),Hs=h(),u(xe.$$.fragment),qs=h(),Oe=s("p"),Ps=a("If ran in a Jupyter or Colaboratory notebook, "),_t=s("a"),Cs=a("login()"),xs=a(` will launch a widget from
which you can enter your Hugging Face access token. Otherwise, a message will be
prompted in the terminal.`),Os=h(),De=s("p"),Ds=a(`It is also possible to login programmatically without the widget by directly passing
the token to `),yt=s("a"),Is=a("login()"),Ts=a(`. If you do so, be careful when sharing your notebook. It is
best practice to load the token from a secure vault instead of saving it in plain in
your Colaboratory notebook.`),ba=h(),N=s("h2"),X=s("a"),_o=s("span"),u(Ie.$$.fragment),Ls=h(),yo=s("span"),Ss=a("Push files without Git"),Ea=h(),x=s("p"),Rs=a("If you don\u2019t have Git installed on your system, use "),vt=s("a"),Us=a("create_commit()"),Fs=a(" to push your files to the Hub. "),wt=s("a"),Ns=a("create_commit()"),Gs=a(" uses the HTTP protocol to upload files to the Hub."),$a=h(),b=s("p"),Ms=a("However, "),bt=s("a"),Bs=a("create_commit()"),Ws=a(" is a low-level API for working at a commit level. The "),Et=s("a"),Ys=a("upload_file()"),zs=a(" and "),$t=s("a"),Js=a("upload_folder()"),Ks=a(" functions are higher-level APIs that use "),kt=s("a"),Qs=a("create_commit()"),Vs=a(" under the hood and are generally more convenient. We recommend trying these functions first if you don\u2019t need to work at a lower level."),ka=h(),G=s("h3"),Z=s("a"),vo=s("span"),u(Te.$$.fragment),Xs=h(),wo=s("span"),Zs=a("Upload a file"),ja=h(),O=s("p"),er=a("Once you\u2019ve created a repository with the "),jt=s("a"),bo=s("code"),tr=a("create_repo"),or=a(" function, you can upload a file to your repository with the "),At=s("a"),ar=a("upload_file()"),lr=a(" function."),Aa=h(),j=s("p"),sr=a("Specify the path of the file to upload, where you want to upload the file to in the repository, and the name of the repository you want to add the file to. Depending on your repository type, you can optionally set the repository type as a "),Eo=s("code"),rr=a("dataset"),ir=a(", "),$o=s("code"),nr=a("model"),pr=a(", or "),ko=s("code"),hr=a("space"),fr=a("."),Ha=h(),u(Le.$$.fragment),qa=h(),M=s("h3"),ee=s("a"),jo=s("span"),u(Se.$$.fragment),cr=h(),Ao=s("span"),ur=a("Upload a folder"),Pa=h(),E=s("p"),mr=a("Use the "),Ht=s("a"),dr=a("upload_folder()"),gr=a(" function to upload a local folder to an existing repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to. Depending on your repository type, you can optionally set the repository type as a "),Ho=s("code"),_r=a("dataset"),yr=a(", "),qo=s("code"),vr=a("model"),wr=a(", or "),Po=s("code"),br=a("space"),Er=a("."),Ca=h(),v=s("p"),$r=a("Use the "),Co=s("code"),kr=a("allow_patterns"),jr=a(" and "),xo=s("code"),Ar=a("ignore_patterns"),Hr=a(` arguments to specify which files to upload. These parameters accept either a single pattern or a list of patterns.
Patterns are Standard Wildcards (globbing patterns) as documented `),Re=s("a"),qr=a("here"),Pr=a(`.
If both `),Oo=s("code"),Cr=a("allow_patterns"),xr=a(" and "),Do=s("code"),Or=a("ignore_patterns"),Dr=a(" are provided, both constraints apply. By default, all files from the folder are uploaded."),xa=h(),u(Ue.$$.fragment),Oa=h(),B=s("h3"),te=s("a"),Io=s("span"),u(Fe.$$.fragment),Ir=h(),To=s("span"),Tr=a("create_commit"),Da=h(),D=s("p"),Lr=a("If you want to work at a commit-level, use the "),qt=s("a"),Sr=a("create_commit()"),Rr=a(" function directly. There are two types of operations supported by "),Pt=s("a"),Ur=a("create_commit()"),Fr=a(":"),Ia=h(),oe=s("ul"),Ne=s("li"),Ct=s("p"),xt=s("a"),Nr=a("CommitOperationAdd"),Gr=a(" uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),Mr=h(),Ge=s("ul"),Ot=s("li"),Lo=s("code"),Br=a("path_in_repo"),Wr=a(": the repository path to upload a file to."),Yr=h(),Dt=s("li"),So=s("code"),zr=a("path_or_fileobj"),Jr=a(": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),Kr=h(),Ro=s("li"),ae=s("p"),It=s("a"),Qr=a("CommitOperationDelete"),Vr=a(" removes a file or a folder from a repository. This operation accepts "),Uo=s("code"),Xr=a("path_in_repo"),Zr=a(" as an argument."),Ta=h(),Tt=s("p"),ei=a("For example, if you want to upload two files and delete a file in a Hub repository:"),La=h(),Lt=s("ol"),Me=s("li"),ti=a("Use the appropriate "),Fo=s("code"),oi=a("CommitOperation"),ai=a(" to add or delete a file and to delete a folder:"),Sa=h(),u(Be.$$.fragment),Ra=h(),We=s("ol"),Ye=s("li"),li=a("Pass your operations to "),St=s("a"),si=a("create_commit()"),ri=a(":"),Ua=h(),u(ze.$$.fragment),Fa=h(),A=s("p"),ii=a("In addition to "),Rt=s("a"),ni=a("upload_file()"),pi=a(" and "),Ut=s("a"),hi=a("upload_folder()"),fi=a(", the following functions also use "),Ft=s("a"),ci=a("create_commit()"),ui=a(" under the hood:"),Na=h(),I=s("ul"),Nt=s("li"),Gt=s("a"),mi=a("delete_file()"),di=a(" deletes a single file from a repository on the Hub."),gi=h(),Mt=s("li"),Bt=s("a"),_i=a("delete_folder()"),yi=a(" deletes an entire folder from a repository on the Hub."),vi=h(),Wt=s("li"),Yt=s("a"),wi=a("metadata_update()"),bi=a(" updates a repository\u2019s metadata."),Ga=h(),le=s("p"),Ei=a("For more detailed information, take a look at the "),zt=s("a"),$i=a("HfApi"),ki=a(" reference."),Ma=h(),W=s("h2"),se=s("a"),No=s("span"),u(Je.$$.fragment),ji=h(),Go=s("span"),Ai=a("Push files with Git LFS"),Ba=h(),Jt=s("p"),Hi=a("Git LFS automatically handles files larger than 10MB. But for very large files (>5GB), you need to install a custom transfer agent for Git LFS:"),Wa=h(),u(Ke.$$.fragment),Ya=h(),Kt=s("p"),qi=a("You should install this for each repository that has a very large file. Once installed, you\u2019ll be able to push files larger than 5GB."),za=h(),Y=s("h2"),re=s("a"),Mo=s("span"),u(Qe.$$.fragment),Pi=h(),Bo=s("span"),Ci=a("commit context manager"),Ja=h(),H=s("p"),xi=a("The "),Wo=s("code"),Oi=a("commit"),Di=a(" context manager handles four of the most common Git commands: pull, add, commit, and push. "),Yo=s("code"),Ii=a("git-lfs"),Ti=a(" automatically tracks any file larger than 10MB. In the following example, the "),zo=s("code"),Li=a("commit"),Si=a(" context manager:"),Ka=h(),q=s("ol"),Ve=s("li"),Ri=a("Pulls from the "),Jo=s("code"),Ui=a("text-files"),Fi=a(" repository."),Ni=h(),Xe=s("li"),Gi=a("Adds a change made to "),Ko=s("code"),Mi=a("file.txt"),Bi=a("."),Wi=h(),Qo=s("li"),Yi=a("Commits the change."),zi=h(),Ze=s("li"),Ji=a("Pushes the change to the "),Vo=s("code"),Ki=a("text-files"),Qi=a(" repository."),Qa=h(),u(et.$$.fragment),Va=h(),ie=s("p"),Vi=a("Here is another example of how to use the "),Xo=s("code"),Xi=a("commit"),Zi=a(" context manager to save and upload a file to a repository:"),Xa=h(),u(tt.$$.fragment),Za=h(),ne=s("p"),en=a("Set "),Zo=s("code"),tn=a("blocking=False"),on=a(" if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while your commits are being pushed."),el=h(),u(ot.$$.fragment),tl=h(),pe=s("p"),an=a("You can check the status of your push with the "),ea=s("code"),ln=a("command_queue"),sn=a(" method:"),ol=h(),u(at.$$.fragment),al=h(),Qt=s("p"),rn=a("Refer to the table below for the possible statuses:"),ll=h(),he=s("table"),ta=s("thead"),lt=s("tr"),oa=s("th"),nn=a("Status"),pn=h(),aa=s("th"),hn=a("Description"),fn=h(),z=s("tbody"),st=s("tr"),la=s("td"),cn=a("-1"),un=h(),sa=s("td"),mn=a("The push is ongoing."),dn=h(),rt=s("tr"),ra=s("td"),gn=a("0"),_n=h(),ia=s("td"),yn=a("The push has completed successfully."),vn=h(),it=s("tr"),na=s("td"),wn=a("Non-zero"),bn=h(),pa=s("td"),En=a("An error has occurred."),sl=h(),fe=s("p"),$n=a("When "),ha=s("code"),kn=a("blocking=False"),jn=a(", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),rl=h(),u(nt.$$.fragment),il=h(),J=s("h2"),ce=s("a"),fa=s("span"),u(pt.$$.fragment),An=h(),ca=s("span"),Hn=a("push_to_hub"),nl=h(),$=s("p"),qn=a("The "),Vt=s("a"),Pn=a("Repository"),Cn=a(" class has a "),Xt=s("a"),xn=a("push_to_hub()"),On=a(" function to add files, make a commit, and push them to a repository. Unlike the "),ua=s("code"),Dn=a("commit"),In=a(" context manager, you\u2019ll need to pull from a repository first before calling "),Zt=s("a"),Tn=a("push_to_hub()"),Ln=a("."),pl=h(),ue=s("p"),Sn=a("For example, if you\u2019ve already cloned a repository from the Hub, then you can initialize the "),ma=s("code"),Rn=a("repo"),Un=a(" from the local directory:"),hl=h(),u(ht.$$.fragment),fl=h(),me=s("p"),Fn=a("Update your local clone with "),eo=s("a"),Nn=a("git_pull()"),Gn=a(" and then push your file to the Hub:"),cl=h(),u(ft.$$.fragment),ul=h(),T=s("p"),Mn=a("However, if you aren\u2019t ready to push a file yet, you can use "),to=s("a"),Bn=a("git_add()"),Wn=a(" and "),oo=s("a"),Yn=a("git_commit()"),zn=a(" to only add and commit your file:"),ml=h(),u(ct.$$.fragment),dl=h(),de=s("p"),Jn=a("When you\u2019re ready, push the file to your repository with "),ao=s("a"),Kn=a("git_push()"),Qn=a(":"),gl=h(),u(ut.$$.fragment),this.h()},l(e){const n=rf('[data-svelte="svelte-1phssyn"]',document.head);U=r(n,"META",{name:!0,content:!0}),n.forEach(o),ga=f(e),F=r(e,"H1",{class:!0});var yl=i(F);K=r(yl,"A",{id:!0,class:!0,href:!0});var lp=i(K);ho=r(lp,"SPAN",{});var sp=i(ho);m($e.$$.fragment,sp),sp.forEach(o),lp.forEach(o),os=f(yl),fo=r(yl,"SPAN",{});var rp=i(fo);as=l(rp,"Upload files to the Hub"),rp.forEach(o),yl.forEach(o),_a=f(e),Q=r(e,"P",{});var vl=i(Q);ls=l(vl,"Sharing your files and work is an important aspect of the Hub. The "),co=r(vl,"CODE",{});var ip=i(co);ss=l(ip,"huggingface_hub"),ip.forEach(o),rs=l(vl," offers several options for uploading your files to the Hub. You can use these functions independently or integrate them into your library, making it more convenient for your users to interact with the Hub. This guide will show you how to push files:"),vl.forEach(o),ya=f(e),k=r(e,"UL",{});var ge=i(k);uo=r(ge,"LI",{});var np=i(uo);is=l(np,"without using Git."),np.forEach(o),ns=f(ge),ke=r(ge,"LI",{});var wl=i(ke);ps=l(wl,"that are very large with "),je=r(wl,"A",{href:!0,rel:!0});var pp=i(je);hs=l(pp,"Git LFS"),pp.forEach(o),fs=l(wl,"."),wl.forEach(o),cs=f(ge),Ae=r(ge,"LI",{});var bl=i(Ae);us=l(bl,"with the "),mo=r(bl,"CODE",{});var hp=i(mo);ms=l(hp,"commit"),hp.forEach(o),ds=l(bl," context manager."),bl.forEach(o),gs=f(ge),He=r(ge,"LI",{});var El=i(He);_s=l(El,"with the "),mt=r(El,"A",{href:!0});var fp=i(mt);ys=l(fp,"push_to_hub()"),fp.forEach(o),vs=l(El," function."),El.forEach(o),ge.forEach(o),va=f(e),dt=r(e,"P",{});var cp=i(dt);ws=l(cp,"Whenever you want to upload files to the Hub, you need to log in to your Hugging Face account:"),cp.forEach(o),wa=f(e),V=r(e,"UL",{});var $l=i(V);qe=r($l,"LI",{});var kl=i(qe);go=r(kl,"P",{});var up=i(go);bs=l(up,"Log in to your Hugging Face account with the following command:"),up.forEach(o),Es=f(kl),m(Pe.$$.fragment,kl),kl.forEach(o),$s=f($l),C=r($l,"LI",{});var _e=i(C);Ce=r(_e,"P",{});var jl=i(Ce);ks=l(jl,"Alternatively, you can programmatically login using "),gt=r(jl,"A",{href:!0});var mp=i(gt);js=l(mp,"login()"),mp.forEach(o),As=l(jl," in a notebook or a script:"),jl.forEach(o),Hs=f(_e),m(xe.$$.fragment,_e),qs=f(_e),Oe=r(_e,"P",{});var Al=i(Oe);Ps=l(Al,"If ran in a Jupyter or Colaboratory notebook, "),_t=r(Al,"A",{href:!0});var dp=i(_t);Cs=l(dp,"login()"),dp.forEach(o),xs=l(Al,` will launch a widget from
which you can enter your Hugging Face access token. Otherwise, a message will be
prompted in the terminal.`),Al.forEach(o),Os=f(_e),De=r(_e,"P",{});var Hl=i(De);Ds=l(Hl,`It is also possible to login programmatically without the widget by directly passing
the token to `),yt=r(Hl,"A",{href:!0});var gp=i(yt);Is=l(gp,"login()"),gp.forEach(o),Ts=l(Hl,`. If you do so, be careful when sharing your notebook. It is
best practice to load the token from a secure vault instead of saving it in plain in
your Colaboratory notebook.`),Hl.forEach(o),_e.forEach(o),$l.forEach(o),ba=f(e),N=r(e,"H2",{class:!0});var ql=i(N);X=r(ql,"A",{id:!0,class:!0,href:!0});var _p=i(X);_o=r(_p,"SPAN",{});var yp=i(_o);m(Ie.$$.fragment,yp),yp.forEach(o),_p.forEach(o),Ls=f(ql),yo=r(ql,"SPAN",{});var vp=i(yo);Ss=l(vp,"Push files without Git"),vp.forEach(o),ql.forEach(o),Ea=f(e),x=r(e,"P",{});var lo=i(x);Rs=l(lo,"If you don\u2019t have Git installed on your system, use "),vt=r(lo,"A",{href:!0});var wp=i(vt);Us=l(wp,"create_commit()"),wp.forEach(o),Fs=l(lo," to push your files to the Hub. "),wt=r(lo,"A",{href:!0});var bp=i(wt);Ns=l(bp,"create_commit()"),bp.forEach(o),Gs=l(lo," uses the HTTP protocol to upload files to the Hub."),lo.forEach(o),$a=f(e),b=r(e,"P",{});var L=i(b);Ms=l(L,"However, "),bt=r(L,"A",{href:!0});var Ep=i(bt);Bs=l(Ep,"create_commit()"),Ep.forEach(o),Ws=l(L," is a low-level API for working at a commit level. The "),Et=r(L,"A",{href:!0});var $p=i(Et);Ys=l($p,"upload_file()"),$p.forEach(o),zs=l(L," and "),$t=r(L,"A",{href:!0});var kp=i($t);Js=l(kp,"upload_folder()"),kp.forEach(o),Ks=l(L," functions are higher-level APIs that use "),kt=r(L,"A",{href:!0});var jp=i(kt);Qs=l(jp,"create_commit()"),jp.forEach(o),Vs=l(L," under the hood and are generally more convenient. We recommend trying these functions first if you don\u2019t need to work at a lower level."),L.forEach(o),ka=f(e),G=r(e,"H3",{class:!0});var Pl=i(G);Z=r(Pl,"A",{id:!0,class:!0,href:!0});var Ap=i(Z);vo=r(Ap,"SPAN",{});var Hp=i(vo);m(Te.$$.fragment,Hp),Hp.forEach(o),Ap.forEach(o),Xs=f(Pl),wo=r(Pl,"SPAN",{});var qp=i(wo);Zs=l(qp,"Upload a file"),qp.forEach(o),Pl.forEach(o),ja=f(e),O=r(e,"P",{});var so=i(O);er=l(so,"Once you\u2019ve created a repository with the "),jt=r(so,"A",{href:!0});var Pp=i(jt);bo=r(Pp,"CODE",{});var Cp=i(bo);tr=l(Cp,"create_repo"),Cp.forEach(o),Pp.forEach(o),or=l(so," function, you can upload a file to your repository with the "),At=r(so,"A",{href:!0});var xp=i(At);ar=l(xp,"upload_file()"),xp.forEach(o),lr=l(so," function."),so.forEach(o),Aa=f(e),j=r(e,"P",{});var ye=i(j);sr=l(ye,"Specify the path of the file to upload, where you want to upload the file to in the repository, and the name of the repository you want to add the file to. Depending on your repository type, you can optionally set the repository type as a "),Eo=r(ye,"CODE",{});var Op=i(Eo);rr=l(Op,"dataset"),Op.forEach(o),ir=l(ye,", "),$o=r(ye,"CODE",{});var Dp=i($o);nr=l(Dp,"model"),Dp.forEach(o),pr=l(ye,", or "),ko=r(ye,"CODE",{});var Ip=i(ko);hr=l(Ip,"space"),Ip.forEach(o),fr=l(ye,"."),ye.forEach(o),Ha=f(e),m(Le.$$.fragment,e),qa=f(e),M=r(e,"H3",{class:!0});var Cl=i(M);ee=r(Cl,"A",{id:!0,class:!0,href:!0});var Tp=i(ee);jo=r(Tp,"SPAN",{});var Lp=i(jo);m(Se.$$.fragment,Lp),Lp.forEach(o),Tp.forEach(o),cr=f(Cl),Ao=r(Cl,"SPAN",{});var Sp=i(Ao);ur=l(Sp,"Upload a folder"),Sp.forEach(o),Cl.forEach(o),Pa=f(e),E=r(e,"P",{});var S=i(E);mr=l(S,"Use the "),Ht=r(S,"A",{href:!0});var Rp=i(Ht);dr=l(Rp,"upload_folder()"),Rp.forEach(o),gr=l(S," function to upload a local folder to an existing repository. Specify the path of the local folder to upload, where you want to upload the folder to in the repository, and the name of the repository you want to add the folder to. Depending on your repository type, you can optionally set the repository type as a "),Ho=r(S,"CODE",{});var Up=i(Ho);_r=l(Up,"dataset"),Up.forEach(o),yr=l(S,", "),qo=r(S,"CODE",{});var Fp=i(qo);vr=l(Fp,"model"),Fp.forEach(o),wr=l(S,", or "),Po=r(S,"CODE",{});var Np=i(Po);br=l(Np,"space"),Np.forEach(o),Er=l(S,"."),S.forEach(o),Ca=f(e),v=r(e,"P",{});var P=i(v);$r=l(P,"Use the "),Co=r(P,"CODE",{});var Gp=i(Co);kr=l(Gp,"allow_patterns"),Gp.forEach(o),jr=l(P," and "),xo=r(P,"CODE",{});var Mp=i(xo);Ar=l(Mp,"ignore_patterns"),Mp.forEach(o),Hr=l(P,` arguments to specify which files to upload. These parameters accept either a single pattern or a list of patterns.
Patterns are Standard Wildcards (globbing patterns) as documented `),Re=r(P,"A",{href:!0,rel:!0});var Bp=i(Re);qr=l(Bp,"here"),Bp.forEach(o),Pr=l(P,`.
If both `),Oo=r(P,"CODE",{});var Wp=i(Oo);Cr=l(Wp,"allow_patterns"),Wp.forEach(o),xr=l(P," and "),Do=r(P,"CODE",{});var Yp=i(Do);Or=l(Yp,"ignore_patterns"),Yp.forEach(o),Dr=l(P," are provided, both constraints apply. By default, all files from the folder are uploaded."),P.forEach(o),xa=f(e),m(Ue.$$.fragment,e),Oa=f(e),B=r(e,"H3",{class:!0});var xl=i(B);te=r(xl,"A",{id:!0,class:!0,href:!0});var zp=i(te);Io=r(zp,"SPAN",{});var Jp=i(Io);m(Fe.$$.fragment,Jp),Jp.forEach(o),zp.forEach(o),Ir=f(xl),To=r(xl,"SPAN",{});var Kp=i(To);Tr=l(Kp,"create_commit"),Kp.forEach(o),xl.forEach(o),Da=f(e),D=r(e,"P",{});var ro=i(D);Lr=l(ro,"If you want to work at a commit-level, use the "),qt=r(ro,"A",{href:!0});var Qp=i(qt);Sr=l(Qp,"create_commit()"),Qp.forEach(o),Rr=l(ro," function directly. There are two types of operations supported by "),Pt=r(ro,"A",{href:!0});var Vp=i(Pt);Ur=l(Vp,"create_commit()"),Vp.forEach(o),Fr=l(ro,":"),ro.forEach(o),Ia=f(e),oe=r(e,"UL",{});var Ol=i(oe);Ne=r(Ol,"LI",{});var Dl=i(Ne);Ct=r(Dl,"P",{});var Vn=i(Ct);xt=r(Vn,"A",{href:!0});var Xp=i(xt);Nr=l(Xp,"CommitOperationAdd"),Xp.forEach(o),Gr=l(Vn," uploads a file to the Hub. If the file already exists, the file contents are overwritten. This operation accepts two arguments:"),Vn.forEach(o),Mr=f(Dl),Ge=r(Dl,"UL",{});var Il=i(Ge);Ot=r(Il,"LI",{});var Xn=i(Ot);Lo=r(Xn,"CODE",{});var Zp=i(Lo);Br=l(Zp,"path_in_repo"),Zp.forEach(o),Wr=l(Xn,": the repository path to upload a file to."),Xn.forEach(o),Yr=f(Il),Dt=r(Il,"LI",{});var Zn=i(Dt);So=r(Zn,"CODE",{});var eh=i(So);zr=l(eh,"path_or_fileobj"),eh.forEach(o),Jr=l(Zn,": either a path to a file on your filesystem or a file-like object. This is the content of the file to upload to the Hub."),Zn.forEach(o),Il.forEach(o),Dl.forEach(o),Kr=f(Ol),Ro=r(Ol,"LI",{});var th=i(Ro);ae=r(th,"P",{});var da=i(ae);It=r(da,"A",{href:!0});var oh=i(It);Qr=l(oh,"CommitOperationDelete"),oh.forEach(o),Vr=l(da," removes a file or a folder from a repository. This operation accepts "),Uo=r(da,"CODE",{});var ah=i(Uo);Xr=l(ah,"path_in_repo"),ah.forEach(o),Zr=l(da," as an argument."),da.forEach(o),th.forEach(o),Ol.forEach(o),Ta=f(e),Tt=r(e,"P",{});var lh=i(Tt);ei=l(lh,"For example, if you want to upload two files and delete a file in a Hub repository:"),lh.forEach(o),La=f(e),Lt=r(e,"OL",{});var sh=i(Lt);Me=r(sh,"LI",{});var Tl=i(Me);ti=l(Tl,"Use the appropriate "),Fo=r(Tl,"CODE",{});var rh=i(Fo);oi=l(rh,"CommitOperation"),rh.forEach(o),ai=l(Tl," to add or delete a file and to delete a folder:"),Tl.forEach(o),sh.forEach(o),Sa=f(e),m(Be.$$.fragment,e),Ra=f(e),We=r(e,"OL",{start:!0});var ih=i(We);Ye=r(ih,"LI",{});var Ll=i(Ye);li=l(Ll,"Pass your operations to "),St=r(Ll,"A",{href:!0});var nh=i(St);si=l(nh,"create_commit()"),nh.forEach(o),ri=l(Ll,":"),Ll.forEach(o),ih.forEach(o),Ua=f(e),m(ze.$$.fragment,e),Fa=f(e),A=r(e,"P",{});var ve=i(A);ii=l(ve,"In addition to "),Rt=r(ve,"A",{href:!0});var ph=i(Rt);ni=l(ph,"upload_file()"),ph.forEach(o),pi=l(ve," and "),Ut=r(ve,"A",{href:!0});var hh=i(Ut);hi=l(hh,"upload_folder()"),hh.forEach(o),fi=l(ve,", the following functions also use "),Ft=r(ve,"A",{href:!0});var fh=i(Ft);ci=l(fh,"create_commit()"),fh.forEach(o),ui=l(ve," under the hood:"),ve.forEach(o),Na=f(e),I=r(e,"UL",{});var io=i(I);Nt=r(io,"LI",{});var ep=i(Nt);Gt=r(ep,"A",{href:!0});var ch=i(Gt);mi=l(ch,"delete_file()"),ch.forEach(o),di=l(ep," deletes a single file from a repository on the Hub."),ep.forEach(o),gi=f(io),Mt=r(io,"LI",{});var tp=i(Mt);Bt=r(tp,"A",{href:!0});var uh=i(Bt);_i=l(uh,"delete_folder()"),uh.forEach(o),yi=l(tp," deletes an entire folder from a repository on the Hub."),tp.forEach(o),vi=f(io),Wt=r(io,"LI",{});var op=i(Wt);Yt=r(op,"A",{href:!0});var mh=i(Yt);wi=l(mh,"metadata_update()"),mh.forEach(o),bi=l(op," updates a repository\u2019s metadata."),op.forEach(o),io.forEach(o),Ga=f(e),le=r(e,"P",{});var Sl=i(le);Ei=l(Sl,"For more detailed information, take a look at the "),zt=r(Sl,"A",{href:!0});var dh=i(zt);$i=l(dh,"HfApi"),dh.forEach(o),ki=l(Sl," reference."),Sl.forEach(o),Ma=f(e),W=r(e,"H2",{class:!0});var Rl=i(W);se=r(Rl,"A",{id:!0,class:!0,href:!0});var gh=i(se);No=r(gh,"SPAN",{});var _h=i(No);m(Je.$$.fragment,_h),_h.forEach(o),gh.forEach(o),ji=f(Rl),Go=r(Rl,"SPAN",{});var yh=i(Go);Ai=l(yh,"Push files with Git LFS"),yh.forEach(o),Rl.forEach(o),Ba=f(e),Jt=r(e,"P",{});var vh=i(Jt);Hi=l(vh,"Git LFS automatically handles files larger than 10MB. But for very large files (>5GB), you need to install a custom transfer agent for Git LFS:"),vh.forEach(o),Wa=f(e),m(Ke.$$.fragment,e),Ya=f(e),Kt=r(e,"P",{});var wh=i(Kt);qi=l(wh,"You should install this for each repository that has a very large file. Once installed, you\u2019ll be able to push files larger than 5GB."),wh.forEach(o),za=f(e),Y=r(e,"H2",{class:!0});var Ul=i(Y);re=r(Ul,"A",{id:!0,class:!0,href:!0});var bh=i(re);Mo=r(bh,"SPAN",{});var Eh=i(Mo);m(Qe.$$.fragment,Eh),Eh.forEach(o),bh.forEach(o),Pi=f(Ul),Bo=r(Ul,"SPAN",{});var $h=i(Bo);Ci=l($h,"commit context manager"),$h.forEach(o),Ul.forEach(o),Ja=f(e),H=r(e,"P",{});var we=i(H);xi=l(we,"The "),Wo=r(we,"CODE",{});var kh=i(Wo);Oi=l(kh,"commit"),kh.forEach(o),Di=l(we," context manager handles four of the most common Git commands: pull, add, commit, and push. "),Yo=r(we,"CODE",{});var jh=i(Yo);Ii=l(jh,"git-lfs"),jh.forEach(o),Ti=l(we," automatically tracks any file larger than 10MB. In the following example, the "),zo=r(we,"CODE",{});var Ah=i(zo);Li=l(Ah,"commit"),Ah.forEach(o),Si=l(we," context manager:"),we.forEach(o),Ka=f(e),q=r(e,"OL",{});var be=i(q);Ve=r(be,"LI",{});var Fl=i(Ve);Ri=l(Fl,"Pulls from the "),Jo=r(Fl,"CODE",{});var Hh=i(Jo);Ui=l(Hh,"text-files"),Hh.forEach(o),Fi=l(Fl," repository."),Fl.forEach(o),Ni=f(be),Xe=r(be,"LI",{});var Nl=i(Xe);Gi=l(Nl,"Adds a change made to "),Ko=r(Nl,"CODE",{});var qh=i(Ko);Mi=l(qh,"file.txt"),qh.forEach(o),Bi=l(Nl,"."),Nl.forEach(o),Wi=f(be),Qo=r(be,"LI",{});var Ph=i(Qo);Yi=l(Ph,"Commits the change."),Ph.forEach(o),zi=f(be),Ze=r(be,"LI",{});var Gl=i(Ze);Ji=l(Gl,"Pushes the change to the "),Vo=r(Gl,"CODE",{});var Ch=i(Vo);Ki=l(Ch,"text-files"),Ch.forEach(o),Qi=l(Gl," repository."),Gl.forEach(o),be.forEach(o),Qa=f(e),m(et.$$.fragment,e),Va=f(e),ie=r(e,"P",{});var Ml=i(ie);Vi=l(Ml,"Here is another example of how to use the "),Xo=r(Ml,"CODE",{});var xh=i(Xo);Xi=l(xh,"commit"),xh.forEach(o),Zi=l(Ml," context manager to save and upload a file to a repository:"),Ml.forEach(o),Xa=f(e),m(tt.$$.fragment,e),Za=f(e),ne=r(e,"P",{});var Bl=i(ne);en=l(Bl,"Set "),Zo=r(Bl,"CODE",{});var Oh=i(Zo);tn=l(Oh,"blocking=False"),Oh.forEach(o),on=l(Bl," if you would like to push your commits asynchronously. Non-blocking behavior is helpful when you want to continue running your script while your commits are being pushed."),Bl.forEach(o),el=f(e),m(ot.$$.fragment,e),tl=f(e),pe=r(e,"P",{});var Wl=i(pe);an=l(Wl,"You can check the status of your push with the "),ea=r(Wl,"CODE",{});var Dh=i(ea);ln=l(Dh,"command_queue"),Dh.forEach(o),sn=l(Wl," method:"),Wl.forEach(o),ol=f(e),m(at.$$.fragment,e),al=f(e),Qt=r(e,"P",{});var Ih=i(Qt);rn=l(Ih,"Refer to the table below for the possible statuses:"),Ih.forEach(o),ll=f(e),he=r(e,"TABLE",{});var Yl=i(he);ta=r(Yl,"THEAD",{});var Th=i(ta);lt=r(Th,"TR",{});var zl=i(lt);oa=r(zl,"TH",{});var Lh=i(oa);nn=l(Lh,"Status"),Lh.forEach(o),pn=f(zl),aa=r(zl,"TH",{});var Sh=i(aa);hn=l(Sh,"Description"),Sh.forEach(o),zl.forEach(o),Th.forEach(o),fn=f(Yl),z=r(Yl,"TBODY",{});var no=i(z);st=r(no,"TR",{});var Jl=i(st);la=r(Jl,"TD",{});var Rh=i(la);cn=l(Rh,"-1"),Rh.forEach(o),un=f(Jl),sa=r(Jl,"TD",{});var Uh=i(sa);mn=l(Uh,"The push is ongoing."),Uh.forEach(o),Jl.forEach(o),dn=f(no),rt=r(no,"TR",{});var Kl=i(rt);ra=r(Kl,"TD",{});var Fh=i(ra);gn=l(Fh,"0"),Fh.forEach(o),_n=f(Kl),ia=r(Kl,"TD",{});var Nh=i(ia);yn=l(Nh,"The push has completed successfully."),Nh.forEach(o),Kl.forEach(o),vn=f(no),it=r(no,"TR",{});var Ql=i(it);na=r(Ql,"TD",{});var Gh=i(na);wn=l(Gh,"Non-zero"),Gh.forEach(o),bn=f(Ql),pa=r(Ql,"TD",{});var Mh=i(pa);En=l(Mh,"An error has occurred."),Mh.forEach(o),Ql.forEach(o),no.forEach(o),Yl.forEach(o),sl=f(e),fe=r(e,"P",{});var Vl=i(fe);$n=l(Vl,"When "),ha=r(Vl,"CODE",{});var Bh=i(ha);kn=l(Bh,"blocking=False"),Bh.forEach(o),jn=l(Vl,", commands are tracked, and your script will only exit when all pushes are completed, even if other errors occur in your script. Some additional useful commands for checking the status of a push include:"),Vl.forEach(o),rl=f(e),m(nt.$$.fragment,e),il=f(e),J=r(e,"H2",{class:!0});var Xl=i(J);ce=r(Xl,"A",{id:!0,class:!0,href:!0});var Wh=i(ce);fa=r(Wh,"SPAN",{});var Yh=i(fa);m(pt.$$.fragment,Yh),Yh.forEach(o),Wh.forEach(o),An=f(Xl),ca=r(Xl,"SPAN",{});var zh=i(ca);Hn=l(zh,"push_to_hub"),zh.forEach(o),Xl.forEach(o),nl=f(e),$=r(e,"P",{});var R=i($);qn=l(R,"The "),Vt=r(R,"A",{href:!0});var Jh=i(Vt);Pn=l(Jh,"Repository"),Jh.forEach(o),Cn=l(R," class has a "),Xt=r(R,"A",{href:!0});var Kh=i(Xt);xn=l(Kh,"push_to_hub()"),Kh.forEach(o),On=l(R," function to add files, make a commit, and push them to a repository. Unlike the "),ua=r(R,"CODE",{});var Qh=i(ua);Dn=l(Qh,"commit"),Qh.forEach(o),In=l(R," context manager, you\u2019ll need to pull from a repository first before calling "),Zt=r(R,"A",{href:!0});var Vh=i(Zt);Tn=l(Vh,"push_to_hub()"),Vh.forEach(o),Ln=l(R,"."),R.forEach(o),pl=f(e),ue=r(e,"P",{});var Zl=i(ue);Sn=l(Zl,"For example, if you\u2019ve already cloned a repository from the Hub, then you can initialize the "),ma=r(Zl,"CODE",{});var Xh=i(ma);Rn=l(Xh,"repo"),Xh.forEach(o),Un=l(Zl," from the local directory:"),Zl.forEach(o),hl=f(e),m(ht.$$.fragment,e),fl=f(e),me=r(e,"P",{});var es=i(me);Fn=l(es,"Update your local clone with "),eo=r(es,"A",{href:!0});var Zh=i(eo);Nn=l(Zh,"git_pull()"),Zh.forEach(o),Gn=l(es," and then push your file to the Hub:"),es.forEach(o),cl=f(e),m(ft.$$.fragment,e),ul=f(e),T=r(e,"P",{});var po=i(T);Mn=l(po,"However, if you aren\u2019t ready to push a file yet, you can use "),to=r(po,"A",{href:!0});var ef=i(to);Bn=l(ef,"git_add()"),ef.forEach(o),Wn=l(po," and "),oo=r(po,"A",{href:!0});var tf=i(oo);Yn=l(tf,"git_commit()"),tf.forEach(o),zn=l(po," to only add and commit your file:"),po.forEach(o),ml=f(e),m(ct.$$.fragment,e),dl=f(e),de=r(e,"P",{});var ts=i(de);Jn=l(ts,"When you\u2019re ready, push the file to your repository with "),ao=r(ts,"A",{href:!0});var of=i(ao);Kn=l(of,"git_push()"),of.forEach(o),Qn=l(ts,":"),ts.forEach(o),gl=f(e),m(ut.$$.fragment,e),this.h()},h(){c(U,"name","hf:doc:metadata"),c(U,"content",JSON.stringify(ff)),c(K,"id","upload-files-to-the-hub"),c(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K,"href","#upload-files-to-the-hub"),c(F,"class","relative group"),c(je,"href","https://git-lfs.github.com/"),c(je,"rel","nofollow"),c(mt,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(gt,"href","/docs/huggingface_hub/main/en/package_reference/login#huggingface_hub.login"),c(_t,"href","/docs/huggingface_hub/main/en/package_reference/login#huggingface_hub.login"),c(yt,"href","/docs/huggingface_hub/main/en/package_reference/login#huggingface_hub.login"),c(X,"id","push-files-without-git"),c(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X,"href","#push-files-without-git"),c(N,"class","relative group"),c(vt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(wt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(bt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Et,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c($t,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(kt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Z,"id","upload-a-file"),c(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z,"href","#upload-a-file"),c(G,"class","relative group"),c(jt,"href","./how-to-manage#create-a-repository"),c(At,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(ee,"id","upload-a-folder"),c(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ee,"href","#upload-a-folder"),c(M,"class","relative group"),c(Ht,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(Re,"href","https://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm"),c(Re,"rel","nofollow"),c(te,"id","createcommit"),c(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(te,"href","#createcommit"),c(B,"class","relative group"),c(qt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Pt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(xt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.CommitOperationAdd"),c(It,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.CommitOperationDelete"),c(St,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(We,"start","2"),c(Rt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file"),c(Ut,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder"),c(Ft,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit"),c(Gt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file"),c(Bt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi.delete_folder"),c(Yt,"href","/docs/huggingface_hub/main/en/package_reference/cards#huggingface_hub.metadata_update"),c(zt,"href","/docs/huggingface_hub/main/en/package_reference/hf_api#huggingface_hub.HfApi"),c(se,"id","push-files-with-git-lfs"),c(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(se,"href","#push-files-with-git-lfs"),c(W,"class","relative group"),c(re,"id","commit-context-manager"),c(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(re,"href","#commit-context-manager"),c(Y,"class","relative group"),c(ce,"id","pushtohub"),c(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ce,"href","#pushtohub"),c(J,"class","relative group"),c(Vt,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository"),c(Xt,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(Zt,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository.push_to_hub"),c(eo,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository.git_pull"),c(to,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository.git_add"),c(oo,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository.git_commit"),c(ao,"href","/docs/huggingface_hub/main/en/package_reference/repository#huggingface_hub.Repository.git_push")},m(e,n){t(document.head,U),p(e,ga,n),p(e,F,n),t(F,K),t(K,ho),d($e,ho,null),t(F,os),t(F,fo),t(fo,as),p(e,_a,n),p(e,Q,n),t(Q,ls),t(Q,co),t(co,ss),t(Q,rs),p(e,ya,n),p(e,k,n),t(k,uo),t(uo,is),t(k,ns),t(k,ke),t(ke,ps),t(ke,je),t(je,hs),t(ke,fs),t(k,cs),t(k,Ae),t(Ae,us),t(Ae,mo),t(mo,ms),t(Ae,ds),t(k,gs),t(k,He),t(He,_s),t(He,mt),t(mt,ys),t(He,vs),p(e,va,n),p(e,dt,n),t(dt,ws),p(e,wa,n),p(e,V,n),t(V,qe),t(qe,go),t(go,bs),t(qe,Es),d(Pe,qe,null),t(V,$s),t(V,C),t(C,Ce),t(Ce,ks),t(Ce,gt),t(gt,js),t(Ce,As),t(C,Hs),d(xe,C,null),t(C,qs),t(C,Oe),t(Oe,Ps),t(Oe,_t),t(_t,Cs),t(Oe,xs),t(C,Os),t(C,De),t(De,Ds),t(De,yt),t(yt,Is),t(De,Ts),p(e,ba,n),p(e,N,n),t(N,X),t(X,_o),d(Ie,_o,null),t(N,Ls),t(N,yo),t(yo,Ss),p(e,Ea,n),p(e,x,n),t(x,Rs),t(x,vt),t(vt,Us),t(x,Fs),t(x,wt),t(wt,Ns),t(x,Gs),p(e,$a,n),p(e,b,n),t(b,Ms),t(b,bt),t(bt,Bs),t(b,Ws),t(b,Et),t(Et,Ys),t(b,zs),t(b,$t),t($t,Js),t(b,Ks),t(b,kt),t(kt,Qs),t(b,Vs),p(e,ka,n),p(e,G,n),t(G,Z),t(Z,vo),d(Te,vo,null),t(G,Xs),t(G,wo),t(wo,Zs),p(e,ja,n),p(e,O,n),t(O,er),t(O,jt),t(jt,bo),t(bo,tr),t(O,or),t(O,At),t(At,ar),t(O,lr),p(e,Aa,n),p(e,j,n),t(j,sr),t(j,Eo),t(Eo,rr),t(j,ir),t(j,$o),t($o,nr),t(j,pr),t(j,ko),t(ko,hr),t(j,fr),p(e,Ha,n),d(Le,e,n),p(e,qa,n),p(e,M,n),t(M,ee),t(ee,jo),d(Se,jo,null),t(M,cr),t(M,Ao),t(Ao,ur),p(e,Pa,n),p(e,E,n),t(E,mr),t(E,Ht),t(Ht,dr),t(E,gr),t(E,Ho),t(Ho,_r),t(E,yr),t(E,qo),t(qo,vr),t(E,wr),t(E,Po),t(Po,br),t(E,Er),p(e,Ca,n),p(e,v,n),t(v,$r),t(v,Co),t(Co,kr),t(v,jr),t(v,xo),t(xo,Ar),t(v,Hr),t(v,Re),t(Re,qr),t(v,Pr),t(v,Oo),t(Oo,Cr),t(v,xr),t(v,Do),t(Do,Or),t(v,Dr),p(e,xa,n),d(Ue,e,n),p(e,Oa,n),p(e,B,n),t(B,te),t(te,Io),d(Fe,Io,null),t(B,Ir),t(B,To),t(To,Tr),p(e,Da,n),p(e,D,n),t(D,Lr),t(D,qt),t(qt,Sr),t(D,Rr),t(D,Pt),t(Pt,Ur),t(D,Fr),p(e,Ia,n),p(e,oe,n),t(oe,Ne),t(Ne,Ct),t(Ct,xt),t(xt,Nr),t(Ct,Gr),t(Ne,Mr),t(Ne,Ge),t(Ge,Ot),t(Ot,Lo),t(Lo,Br),t(Ot,Wr),t(Ge,Yr),t(Ge,Dt),t(Dt,So),t(So,zr),t(Dt,Jr),t(oe,Kr),t(oe,Ro),t(Ro,ae),t(ae,It),t(It,Qr),t(ae,Vr),t(ae,Uo),t(Uo,Xr),t(ae,Zr),p(e,Ta,n),p(e,Tt,n),t(Tt,ei),p(e,La,n),p(e,Lt,n),t(Lt,Me),t(Me,ti),t(Me,Fo),t(Fo,oi),t(Me,ai),p(e,Sa,n),d(Be,e,n),p(e,Ra,n),p(e,We,n),t(We,Ye),t(Ye,li),t(Ye,St),t(St,si),t(Ye,ri),p(e,Ua,n),d(ze,e,n),p(e,Fa,n),p(e,A,n),t(A,ii),t(A,Rt),t(Rt,ni),t(A,pi),t(A,Ut),t(Ut,hi),t(A,fi),t(A,Ft),t(Ft,ci),t(A,ui),p(e,Na,n),p(e,I,n),t(I,Nt),t(Nt,Gt),t(Gt,mi),t(Nt,di),t(I,gi),t(I,Mt),t(Mt,Bt),t(Bt,_i),t(Mt,yi),t(I,vi),t(I,Wt),t(Wt,Yt),t(Yt,wi),t(Wt,bi),p(e,Ga,n),p(e,le,n),t(le,Ei),t(le,zt),t(zt,$i),t(le,ki),p(e,Ma,n),p(e,W,n),t(W,se),t(se,No),d(Je,No,null),t(W,ji),t(W,Go),t(Go,Ai),p(e,Ba,n),p(e,Jt,n),t(Jt,Hi),p(e,Wa,n),d(Ke,e,n),p(e,Ya,n),p(e,Kt,n),t(Kt,qi),p(e,za,n),p(e,Y,n),t(Y,re),t(re,Mo),d(Qe,Mo,null),t(Y,Pi),t(Y,Bo),t(Bo,Ci),p(e,Ja,n),p(e,H,n),t(H,xi),t(H,Wo),t(Wo,Oi),t(H,Di),t(H,Yo),t(Yo,Ii),t(H,Ti),t(H,zo),t(zo,Li),t(H,Si),p(e,Ka,n),p(e,q,n),t(q,Ve),t(Ve,Ri),t(Ve,Jo),t(Jo,Ui),t(Ve,Fi),t(q,Ni),t(q,Xe),t(Xe,Gi),t(Xe,Ko),t(Ko,Mi),t(Xe,Bi),t(q,Wi),t(q,Qo),t(Qo,Yi),t(q,zi),t(q,Ze),t(Ze,Ji),t(Ze,Vo),t(Vo,Ki),t(Ze,Qi),p(e,Qa,n),d(et,e,n),p(e,Va,n),p(e,ie,n),t(ie,Vi),t(ie,Xo),t(Xo,Xi),t(ie,Zi),p(e,Xa,n),d(tt,e,n),p(e,Za,n),p(e,ne,n),t(ne,en),t(ne,Zo),t(Zo,tn),t(ne,on),p(e,el,n),d(ot,e,n),p(e,tl,n),p(e,pe,n),t(pe,an),t(pe,ea),t(ea,ln),t(pe,sn),p(e,ol,n),d(at,e,n),p(e,al,n),p(e,Qt,n),t(Qt,rn),p(e,ll,n),p(e,he,n),t(he,ta),t(ta,lt),t(lt,oa),t(oa,nn),t(lt,pn),t(lt,aa),t(aa,hn),t(he,fn),t(he,z),t(z,st),t(st,la),t(la,cn),t(st,un),t(st,sa),t(sa,mn),t(z,dn),t(z,rt),t(rt,ra),t(ra,gn),t(rt,_n),t(rt,ia),t(ia,yn),t(z,vn),t(z,it),t(it,na),t(na,wn),t(it,bn),t(it,pa),t(pa,En),p(e,sl,n),p(e,fe,n),t(fe,$n),t(fe,ha),t(ha,kn),t(fe,jn),p(e,rl,n),d(nt,e,n),p(e,il,n),p(e,J,n),t(J,ce),t(ce,fa),d(pt,fa,null),t(J,An),t(J,ca),t(ca,Hn),p(e,nl,n),p(e,$,n),t($,qn),t($,Vt),t(Vt,Pn),t($,Cn),t($,Xt),t(Xt,xn),t($,On),t($,ua),t(ua,Dn),t($,In),t($,Zt),t(Zt,Tn),t($,Ln),p(e,pl,n),p(e,ue,n),t(ue,Sn),t(ue,ma),t(ma,Rn),t(ue,Un),p(e,hl,n),d(ht,e,n),p(e,fl,n),p(e,me,n),t(me,Fn),t(me,eo),t(eo,Nn),t(me,Gn),p(e,cl,n),d(ft,e,n),p(e,ul,n),p(e,T,n),t(T,Mn),t(T,to),t(to,Bn),t(T,Wn),t(T,oo),t(oo,Yn),t(T,zn),p(e,ml,n),d(ct,e,n),p(e,dl,n),p(e,de,n),t(de,Jn),t(de,ao),t(ao,Kn),t(de,Qn),p(e,gl,n),d(ut,e,n),_l=!0},p:nf,i(e){_l||(g($e.$$.fragment,e),g(Pe.$$.fragment,e),g(xe.$$.fragment,e),g(Ie.$$.fragment,e),g(Te.$$.fragment,e),g(Le.$$.fragment,e),g(Se.$$.fragment,e),g(Ue.$$.fragment,e),g(Fe.$$.fragment,e),g(Be.$$.fragment,e),g(ze.$$.fragment,e),g(Je.$$.fragment,e),g(Ke.$$.fragment,e),g(Qe.$$.fragment,e),g(et.$$.fragment,e),g(tt.$$.fragment,e),g(ot.$$.fragment,e),g(at.$$.fragment,e),g(nt.$$.fragment,e),g(pt.$$.fragment,e),g(ht.$$.fragment,e),g(ft.$$.fragment,e),g(ct.$$.fragment,e),g(ut.$$.fragment,e),_l=!0)},o(e){_($e.$$.fragment,e),_(Pe.$$.fragment,e),_(xe.$$.fragment,e),_(Ie.$$.fragment,e),_(Te.$$.fragment,e),_(Le.$$.fragment,e),_(Se.$$.fragment,e),_(Ue.$$.fragment,e),_(Fe.$$.fragment,e),_(Be.$$.fragment,e),_(ze.$$.fragment,e),_(Je.$$.fragment,e),_(Ke.$$.fragment,e),_(Qe.$$.fragment,e),_(et.$$.fragment,e),_(tt.$$.fragment,e),_(ot.$$.fragment,e),_(at.$$.fragment,e),_(nt.$$.fragment,e),_(pt.$$.fragment,e),_(ht.$$.fragment,e),_(ft.$$.fragment,e),_(ct.$$.fragment,e),_(ut.$$.fragment,e),_l=!1},d(e){o(U),e&&o(ga),e&&o(F),y($e),e&&o(_a),e&&o(Q),e&&o(ya),e&&o(k),e&&o(va),e&&o(dt),e&&o(wa),e&&o(V),y(Pe),y(xe),e&&o(ba),e&&o(N),y(Ie),e&&o(Ea),e&&o(x),e&&o($a),e&&o(b),e&&o(ka),e&&o(G),y(Te),e&&o(ja),e&&o(O),e&&o(Aa),e&&o(j),e&&o(Ha),y(Le,e),e&&o(qa),e&&o(M),y(Se),e&&o(Pa),e&&o(E),e&&o(Ca),e&&o(v),e&&o(xa),y(Ue,e),e&&o(Oa),e&&o(B),y(Fe),e&&o(Da),e&&o(D),e&&o(Ia),e&&o(oe),e&&o(Ta),e&&o(Tt),e&&o(La),e&&o(Lt),e&&o(Sa),y(Be,e),e&&o(Ra),e&&o(We),e&&o(Ua),y(ze,e),e&&o(Fa),e&&o(A),e&&o(Na),e&&o(I),e&&o(Ga),e&&o(le),e&&o(Ma),e&&o(W),y(Je),e&&o(Ba),e&&o(Jt),e&&o(Wa),y(Ke,e),e&&o(Ya),e&&o(Kt),e&&o(za),e&&o(Y),y(Qe),e&&o(Ja),e&&o(H),e&&o(Ka),e&&o(q),e&&o(Qa),y(et,e),e&&o(Va),e&&o(ie),e&&o(Xa),y(tt,e),e&&o(Za),e&&o(ne),e&&o(el),y(ot,e),e&&o(tl),e&&o(pe),e&&o(ol),y(at,e),e&&o(al),e&&o(Qt),e&&o(ll),e&&o(he),e&&o(sl),e&&o(fe),e&&o(rl),y(nt,e),e&&o(il),e&&o(J),y(pt),e&&o(nl),e&&o($),e&&o(pl),e&&o(ue),e&&o(hl),y(ht,e),e&&o(fl),e&&o(me),e&&o(cl),y(ft,e),e&&o(ul),e&&o(T),e&&o(ml),y(ct,e),e&&o(dl),e&&o(de),e&&o(gl),y(ut,e)}}}const ff={local:"upload-files-to-the-hub",sections:[{local:"push-files-without-git",sections:[{local:"upload-a-file",title:"Upload a file"},{local:"upload-a-folder",title:"Upload a folder"},{local:"createcommit",title:"create_commit"}],title:"Push files without Git"},{local:"push-files-with-git-lfs",title:"Push files with Git LFS"},{local:"commit-context-manager",title:"commit context manager"},{local:"pushtohub",title:"push_to_hub"}],title:"Upload files to the Hub"};function cf(ap){return pf(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class gf extends af{constructor(U){super();lf(this,U,cf,hf,sf,{})}}export{gf as default,ff as metadata};
