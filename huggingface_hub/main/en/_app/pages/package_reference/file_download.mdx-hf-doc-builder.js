import{S as za,i as Va,s as Ba,e as a,k as c,w as F,t as s,M as Ga,c as n,d as o,m as h,a as r,x as j,h as l,b as i,G as e,g as f,y as P,q as I,o as H,B as S,v as Wa,L as Ua}from"../../chunks/vendor-hf-doc-builder.js";import{T as Qt}from"../../chunks/Tip-hf-doc-builder.js";import{D as Mo}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Ma}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Ie}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Ra}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Ka(ae){let u,$;return u=new Ma({props:{code:`[  96]  .
\u2514\u2500\u2500 [ 160]  models--julien-c--EsperBERTo-small
    \u251C\u2500\u2500 [ 160]  blobs
    \u2502   \u251C\u2500\u2500 [321M]  403450e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd
    \u2502   \u251C\u2500\u2500 [ 398]  7cb18dc9bafbfcf74629a4b760af1b160957a83e
    \u2502   \u2514\u2500\u2500 [1.4K]  d7edf6bd2a681fb0175f7735299831ee1b22b812
    \u251C\u2500\u2500 [  96]  refs
    \u2502   \u2514\u2500\u2500 [  40]  main
    \u2514\u2500\u2500 [ 128]  snapshots
        \u251C\u2500\u2500 [ 128]  2439f60ef33a0d46d85da5001d52aeda5b00ce9f
        \u2502   \u251C\u2500\u2500 [  52]  README.md -> ../../blobs/d7edf6bd2a681fb0175f7735299831ee1b22b812
        \u2502   \u2514\u2500\u2500 [  76]  pytorch_model.bin -> ../../blobs/403450e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd
        \u2514\u2500\u2500 [ 128]  bbc77c8132af1cc5cf678da3f1ddf2de43606d48
            \u251C\u2500\u2500 [  52]  README.md -> ../../blobs/7cb18dc9bafbfcf74629a4b760af1b160957a83e
            \u2514\u2500\u2500 [  76]  pytorch_model.bin -> ../../blobs/403450e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd`,highlighted:`<span class="hljs-selector-attr">[  96]</span>  .
\u2514\u2500\u2500 <span class="hljs-selector-attr">[ 160]</span>  models<span class="hljs-attr">--julien-c--EsperBERTo-small</span>
    \u251C\u2500\u2500 <span class="hljs-selector-attr">[ 160]</span>  blobs
    \u2502   \u251C\u2500\u2500 <span class="hljs-selector-attr">[321M]</span>  <span class="hljs-number">403450</span>e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd
    \u2502   \u251C\u2500\u2500 <span class="hljs-selector-attr">[ 398]</span>  <span class="hljs-number">7</span>cb18dc9bafbfcf74629a4b760af1b160957a83e
    \u2502   \u2514\u2500\u2500 <span class="hljs-selector-attr">[1.4K]</span>  d7edf6bd2a681fb0175f7735299831ee1b22b812
    \u251C\u2500\u2500 <span class="hljs-selector-attr">[  96]</span>  refs
    \u2502   \u2514\u2500\u2500 <span class="hljs-selector-attr">[  40]</span>  <span class="hljs-selector-tag">main</span>
    \u2514\u2500\u2500 <span class="hljs-selector-attr">[ 128]</span>  snapshots
        \u251C\u2500\u2500 <span class="hljs-selector-attr">[ 128]</span>  <span class="hljs-number">2439</span>f60ef33a0d46d85da5001d52aeda5b00ce9f
        \u2502   \u251C\u2500\u2500 <span class="hljs-selector-attr">[  52]</span>  README<span class="hljs-selector-class">.md</span> -&gt; ../../blobs/d7edf6bd2a681fb0175f7735299831ee1b22b812
        \u2502   \u2514\u2500\u2500 <span class="hljs-selector-attr">[  76]</span>  pytorch_model<span class="hljs-selector-class">.bin</span> -&gt; ../../blobs/<span class="hljs-number">403450</span>e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd
        \u2514\u2500\u2500 <span class="hljs-selector-attr">[ 128]</span>  bbc77c8132af1cc5cf678da3f1ddf2de43606d48
            \u251C\u2500\u2500 <span class="hljs-selector-attr">[  52]</span>  README<span class="hljs-selector-class">.md</span> -&gt; ../../blobs/<span class="hljs-number">7</span>cb18dc9bafbfcf74629a4b760af1b160957a83e
            \u2514\u2500\u2500 <span class="hljs-selector-attr">[  76]</span>  pytorch_model<span class="hljs-selector-class">.bin</span> -&gt; ../../blobs/<span class="hljs-number">403450</span>e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd`}}),{c(){F(u.$$.fragment)},l(_){j(u.$$.fragment,_)},m(_,d){P(u,_,d),$=!0},p:Ua,i(_){$||(I(u.$$.fragment,_),$=!0)},o(_){H(u.$$.fragment,_),$=!1},d(_){S(u,_)}}}function Ja(ae){let u,$,_,d,b,g,w,U,V,E,D,T,M,x,m,y,K,B,A,k,L,O,ce,Z,C,q,v,z,me,J,_e,he,ne,ee,Q,X,re,Ge,be,oe,We,te,xe,ve,we,ke,Ke;return{c(){u=a("p"),$=s("Raises the following errors:"),_=c(),d=a("ul"),b=a("li"),g=a("a"),w=a("code"),U=s("EnvironmentError"),V=s(`
if `),E=a("code"),D=s("token=True"),T=s(" and the token cannot be found."),M=c(),x=a("li"),m=a("a"),y=a("code"),K=s("OSError"),B=s(`
if ETag cannot be determined.`),A=c(),k=a("li"),L=a("a"),O=a("code"),ce=s("ValueError"),Z=s(`
if some parameter value is invalid`),C=c(),q=a("li"),v=a("a"),z=s("RepositoryNotFoundError"),me=s(`
If the repository to download from cannot be found. This may be because it doesn\u2019t exist,
or because it is set to `),J=a("code"),_e=s("private"),he=s(" and you do not have access."),ne=c(),ee=a("li"),Q=a("a"),X=s("RevisionNotFoundError"),re=s(`
If the revision to download from cannot be found.`),Ge=c(),be=a("li"),oe=a("a"),We=s("EntryNotFoundError"),te=s(`
If the file to download cannot be found.`),xe=c(),ve=a("li"),we=a("a"),ke=s("LocalEntryNotFoundError"),Ke=s(`
If network is disabled or unavailable and file is not found in cache.`),this.h()},l(G){u=n(G,"P",{});var se=r(u);$=l(se,"Raises the following errors:"),se.forEach(o),_=h(G),d=n(G,"UL",{});var R=r(d);b=n(R,"LI",{});var Ne=r(b);g=n(Ne,"A",{href:!0,rel:!0});var de=r(g);w=n(de,"CODE",{});var ho=r(w);U=l(ho,"EnvironmentError"),ho.forEach(o),de.forEach(o),V=l(Ne,`
if `),E=n(Ne,"CODE",{});var fe=r(E);D=l(fe,"token=True"),fe.forEach(o),T=l(Ne," and the token cannot be found."),Ne.forEach(o),M=h(R),x=n(R,"LI",{});var He=r(x);m=n(He,"A",{href:!0,rel:!0});var le=r(m);y=n(le,"CODE",{});var pe=r(y);K=l(pe,"OSError"),pe.forEach(o),le.forEach(o),B=l(He,`
if ETag cannot be determined.`),He.forEach(o),A=h(R),k=n(R,"LI",{});var Te=r(k);L=n(Te,"A",{href:!0,rel:!0});var ye=r(L);O=n(ye,"CODE",{});var fo=r(O);ce=l(fo,"ValueError"),fo.forEach(o),ye.forEach(o),Z=l(Te,`
if some parameter value is invalid`),Te.forEach(o),C=h(R),q=n(R,"LI",{});var ue=r(q);v=n(ue,"A",{href:!0});var po=r(v);z=l(po,"RepositoryNotFoundError"),po.forEach(o),me=l(ue,`
If the repository to download from cannot be found. This may be because it doesn\u2019t exist,
or because it is set to `),J=n(ue,"CODE",{});var Je=r(J);_e=l(Je,"private"),Je.forEach(o),he=l(ue," and you do not have access."),ue.forEach(o),ne=h(R),ee=n(R,"LI",{});var N=r(ee);Q=n(N,"A",{href:!0});var $e=r(Q);X=l($e,"RevisionNotFoundError"),$e.forEach(o),re=l(N,`
If the revision to download from cannot be found.`),N.forEach(o),Ge=h(R),be=n(R,"LI",{});var Qe=r(be);oe=n(Qe,"A",{href:!0});var Se=r(oe);We=l(Se,"EntryNotFoundError"),Se.forEach(o),te=l(Qe,`
If the file to download cannot be found.`),Qe.forEach(o),xe=h(R),ve=n(R,"LI",{});var Xe=r(ve);we=n(Xe,"A",{href:!0});var uo=r(we);ke=l(uo,"LocalEntryNotFoundError"),uo.forEach(o),Ke=l(Xe,`
If network is disabled or unavailable and file is not found in cache.`),Xe.forEach(o),R.forEach(o),this.h()},h(){i(g,"href","https://docs.python.org/3/library/exceptions.html#EnvironmentError"),i(g,"rel","nofollow"),i(m,"href","https://docs.python.org/3/library/exceptions.html#OSError"),i(m,"rel","nofollow"),i(L,"href","https://docs.python.org/3/library/exceptions.html#ValueError"),i(L,"rel","nofollow"),i(v,"href","/docs/huggingface_hub/main/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError"),i(Q,"href","/docs/huggingface_hub/main/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError"),i(oe,"href","/docs/huggingface_hub/main/en/package_reference/utilities#huggingface_hub.utils.EntryNotFoundError"),i(we,"href","/docs/huggingface_hub/main/en/package_reference/utilities#huggingface_hub.utils.LocalEntryNotFoundError")},m(G,se){f(G,u,se),e(u,$),f(G,_,se),f(G,d,se),e(d,b),e(b,g),e(g,w),e(w,U),e(b,V),e(b,E),e(E,D),e(b,T),e(d,M),e(d,x),e(x,m),e(m,y),e(y,K),e(x,B),e(d,A),e(d,k),e(k,L),e(L,O),e(O,ce),e(k,Z),e(d,C),e(d,q),e(q,v),e(v,z),e(q,me),e(q,J),e(J,_e),e(q,he),e(d,ne),e(d,ee),e(ee,Q),e(Q,X),e(ee,re),e(d,Ge),e(d,be),e(be,oe),e(oe,We),e(be,te),e(d,xe),e(d,ve),e(ve,we),e(we,ke),e(ve,Ke)},d(G){G&&o(u),G&&o(_),G&&o(d)}}}function Qa(ae){let u,$,_,d,b;return d=new Ma({props:{code:`from huggingface_hub import hf_hub_url

hf_hub_url(
    repo_id="julien-c/EsperBERTo-small", filename="pytorch_model.bin"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_url

<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;julien-c/EsperBERTo-small&quot;</span>, filename=<span class="hljs-string">&quot;pytorch_model.bin&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-string">&#x27;https://huggingface.co/julien-c/EsperBERTo-small/resolve/main/pytorch_model.bin&#x27;</span>`}}),{c(){u=a("p"),$=s("Example:"),_=c(),F(d.$$.fragment)},l(g){u=n(g,"P",{});var w=r(u);$=l(w,"Example:"),w.forEach(o),_=h(g),j(d.$$.fragment,g)},m(g,w){f(g,u,w),e(u,$),f(g,_,w),P(d,g,w),b=!0},p:Ua,i(g){b||(I(d.$$.fragment,g),b=!0)},o(g){H(d.$$.fragment,g),b=!1},d(g){g&&o(u),g&&o(_),S(d,g)}}}function Xa(ae){let u,$,_,d,b,g,w,U,V,E,D,T,M,x;return{c(){u=a("p"),$=s("Notes:"),_=c(),d=a("p"),b=s(`Cloudfront is replicated over the globe so downloads are way faster for
the end user (and it also lowers our bandwidth costs).`),g=c(),w=a("p"),U=s(`Cloudfront aggressively caches files by default (default TTL is 24
hours), however this is not an issue here because we implement a
git-based versioning system on huggingface.co, which means that we store
the files on S3/Cloudfront in a content-addressable way (i.e., the file
name is its hash). Using content-addressable filenames means cache can\u2019t
ever be stale.`),V=c(),E=a("p"),D=s(`In terms of client-side caching from this library, we base our caching
on the objects\u2019 entity tag (`),T=a("code"),M=s("ETag"),x=s(`), which is an identifier of a
specific version of a resource [1]_. An object\u2019s ETag is: its git-sha1
if stored in git, or its sha256 if stored in git-lfs.`)},l(m){u=n(m,"P",{});var y=r(u);$=l(y,"Notes:"),y.forEach(o),_=h(m),d=n(m,"P",{});var K=r(d);b=l(K,`Cloudfront is replicated over the globe so downloads are way faster for
the end user (and it also lowers our bandwidth costs).`),K.forEach(o),g=h(m),w=n(m,"P",{});var B=r(w);U=l(B,`Cloudfront aggressively caches files by default (default TTL is 24
hours), however this is not an issue here because we implement a
git-based versioning system on huggingface.co, which means that we store
the files on S3/Cloudfront in a content-addressable way (i.e., the file
name is its hash). Using content-addressable filenames means cache can\u2019t
ever be stale.`),B.forEach(o),V=h(m),E=n(m,"P",{});var A=r(E);D=l(A,`In terms of client-side caching from this library, we base our caching
on the objects\u2019 entity tag (`),T=n(A,"CODE",{});var k=r(T);M=l(k,"ETag"),k.forEach(o),x=l(A,`), which is an identifier of a
specific version of a resource [1]_. An object\u2019s ETag is: its git-sha1
if stored in git, or its sha256 if stored in git-lfs.`),A.forEach(o)},m(m,y){f(m,u,y),e(u,$),f(m,_,y),f(m,d,y),e(d,b),f(m,g,y),f(m,w,y),e(w,U),f(m,V,y),f(m,E,y),e(E,D),e(E,T),e(T,M),e(E,x)},d(m){m&&o(u),m&&o(_),m&&o(d),m&&o(g),m&&o(w),m&&o(V),m&&o(E)}}}function Ya(ae){let u,$,_,d,b,g,w,U,V,E,D,T,M,x,m,y,K,B,A,k,L,O,ce,Z;return{c(){u=a("p"),$=s("Raises the following errors:"),_=c(),d=a("ul"),b=a("li"),g=a("a"),w=a("code"),U=s("EnvironmentError"),V=s(`
if `),E=a("code"),D=s("token=True"),T=s(" and the token cannot be found."),M=c(),x=a("li"),m=a("a"),y=a("code"),K=s("OSError"),B=s(` if
ETag cannot be determined.`),A=c(),k=a("li"),L=a("a"),O=a("code"),ce=s("ValueError"),Z=s(`
if some parameter value is invalid`),this.h()},l(C){u=n(C,"P",{});var q=r(u);$=l(q,"Raises the following errors:"),q.forEach(o),_=h(C),d=n(C,"UL",{});var v=r(d);b=n(v,"LI",{});var z=r(b);g=n(z,"A",{href:!0,rel:!0});var me=r(g);w=n(me,"CODE",{});var J=r(w);U=l(J,"EnvironmentError"),J.forEach(o),me.forEach(o),V=l(z,`
if `),E=n(z,"CODE",{});var _e=r(E);D=l(_e,"token=True"),_e.forEach(o),T=l(z," and the token cannot be found."),z.forEach(o),M=h(v),x=n(v,"LI",{});var he=r(x);m=n(he,"A",{href:!0,rel:!0});var ne=r(m);y=n(ne,"CODE",{});var ee=r(y);K=l(ee,"OSError"),ee.forEach(o),ne.forEach(o),B=l(he,` if
ETag cannot be determined.`),he.forEach(o),A=h(v),k=n(v,"LI",{});var Q=r(k);L=n(Q,"A",{href:!0,rel:!0});var X=r(L);O=n(X,"CODE",{});var re=r(O);ce=l(re,"ValueError"),re.forEach(o),X.forEach(o),Z=l(Q,`
if some parameter value is invalid`),Q.forEach(o),v.forEach(o),this.h()},h(){i(g,"href","https://docs.python.org/3/library/exceptions.html#EnvironmentError"),i(g,"rel","nofollow"),i(m,"href","https://docs.python.org/3/library/exceptions.html#OSError"),i(m,"rel","nofollow"),i(L,"href","https://docs.python.org/3/library/exceptions.html#ValueError"),i(L,"rel","nofollow")},m(C,q){f(C,u,q),e(u,$),f(C,_,q),f(C,d,q),e(d,b),e(b,g),e(g,w),e(w,U),e(b,V),e(b,E),e(E,D),e(b,T),e(d,M),e(d,x),e(x,m),e(m,y),e(y,K),e(x,B),e(d,A),e(d,k),e(k,L),e(L,O),e(O,ce),e(k,Z)},d(C){C&&o(u),C&&o(_),C&&o(d)}}}function Za(ae){let u,$,_,d,b,g,w,U,V,E,D,T,M,x,m,y,K,B,A,k,L,O,ce,Z,C,q,v,z,me,J,_e,he,ne,ee,Q,X,re,Ge,be,oe,We,te,xe,ve,we,ke,Ke,G,se,R,Ne,de,ho,fe,He,le,pe,Te,ye,fo,ue,po,Je,N,$e,Qe,Se,Xe,uo,yo,dt,ft,qe,pt,Oe,ut,$o,gt,mt,Eo,go,_t,Ye,bt,zo,Ae,Ce,xo,Ze,vt,ko,wt,Vo,W,eo,yt,No,$t,Et,To,xt,kt,Ao,Nt,Tt,Re,Bo,De,Ue,Do,oo,At,Lo,Dt,Go,Le,Me,Fo,to,Lt,jo,Ft,Wo,Fe,ao,jt,Po,Pt,Ko,je,ze,Io,no,It,Ho,Ht,Jo,ge,ro,St,So,qt,Ot,so,Ct,mo,Rt,Ut,Qo,Pe,Ve,qo,lo,Mt,Oo,zt,Xo,_o,Vt,Yo,Be,Bt,bo,Gt,Wt,Zo;return g=new Ie({}),x=new Ie({}),O=new Ie({}),z=new Mo({props:{name:"huggingface_hub.hf_hub_download",anchor:"huggingface_hub.hf_hub_download",parameters:[{name:"repo_id",val:": str"},{name:"filename",val:": str"},{name:"subfolder",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"library_name",val:": typing.Optional[str] = None"},{name:"library_version",val:": typing.Optional[str] = None"},{name:"cache_dir",val:": typing.Union[str, pathlib.Path, NoneType] = None"},{name:"user_agent",val:": typing.Union[typing.Dict, str, NoneType] = None"},{name:"force_download",val:": bool = False"},{name:"force_filename",val:": typing.Optional[str] = None"},{name:"proxies",val:": typing.Optional[typing.Dict] = None"},{name:"etag_timeout",val:": float = 10"},{name:"resume_download",val:": bool = False"},{name:"token",val:": typing.Union[bool, str, NoneType] = None"},{name:"local_files_only",val:": bool = False"},{name:"legacy_cache_layout",val:": bool = False"}],parametersDescription:[{anchor:"huggingface_hub.hf_hub_download.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A user or an organization name and a repo name separated by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.hf_hub_download.filename",description:`<strong>filename</strong> (<code>str</code>) &#x2014;
The name of the file in the repo.`,name:"filename"},{anchor:"huggingface_hub.hf_hub_download.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An optional value corresponding to a folder inside the model repo.`,name:"subfolder"},{anchor:"huggingface_hub.hf_hub_download.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or space,
<code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.hf_hub_download.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An optional Git revision id which can be a branch name, a tag, or a
commit hash.`,name:"revision"},{anchor:"huggingface_hub.hf_hub_download.library_name",description:`<strong>library_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the library to which the object corresponds.`,name:"library_name"},{anchor:"huggingface_hub.hf_hub_download.library_version",description:`<strong>library_version</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The version of the library.`,name:"library_version"},{anchor:"huggingface_hub.hf_hub_download.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <code>Path</code>, <em>optional</em>) &#x2014;
Path to the folder where cached files are stored.`,name:"cache_dir"},{anchor:"huggingface_hub.hf_hub_download.user_agent",description:`<strong>user_agent</strong> (<code>dict</code>, <code>str</code>, <em>optional</em>) &#x2014;
The user-agent info in the form of a dictionary or a string.`,name:"user_agent"},{anchor:"huggingface_hub.hf_hub_download.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the file should be downloaded even if it already exists in
the local cache.`,name:"force_download"},{anchor:"huggingface_hub.hf_hub_download.proxies",description:`<strong>proxies</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary mapping protocol to the URL of the proxy passed to
<code>requests.request</code>.`,name:"proxies"},{anchor:"huggingface_hub.hf_hub_download.etag_timeout",description:`<strong>etag_timeout</strong> (<code>float</code>, <em>optional</em>, defaults to <code>10</code>) &#x2014;
When fetching ETag, how many seconds to wait for the server to send
data before giving up which is passed to <code>requests.request</code>.`,name:"etag_timeout"},{anchor:"huggingface_hub.hf_hub_download.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, resume a previously interrupted download.`,name:"resume_download"},{anchor:"huggingface_hub.hf_hub_download.token",description:`<strong>token</strong> (<code>str</code>, <code>bool</code>, <em>optional</em>) &#x2014;
A token to be used for the download.<ul>
<li>If <code>True</code>, the token is read from the HuggingFace config
folder.</li>
<li>If a string, it&#x2019;s used as the authentication token.</li>
</ul>`,name:"token"},{anchor:"huggingface_hub.hf_hub_download.local_files_only",description:`<strong>local_files_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, avoid downloading the file and return the path to the
local cached file if it exists.`,name:"local_files_only"},{anchor:"huggingface_hub.hf_hub_download.legacy_cache_layout",description:`<strong>legacy_cache_layout</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, uses the legacy file cache layout i.e. just call <a href="/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.hf_hub_url">hf_hub_url()</a>
then <code>cached_download</code>. This is deprecated as the new cache layout is
more powerful.`,name:"legacy_cache_layout"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/file_download.py#L857",returnDescription:`
<p>Local path (string) of file or if networking is off, last version of
file cached on disk.</p>
`}}),de=new Ra({props:{anchor:"huggingface_hub.hf_hub_download.example",$$slots:{default:[Ka]},$$scope:{ctx:ae}}}),fe=new Qt({props:{$$slots:{default:[Ja]},$$scope:{ctx:ae}}}),ye=new Ie({}),$e=new Mo({props:{name:"huggingface_hub.hf_hub_url",anchor:"huggingface_hub.hf_hub_url",parameters:[{name:"repo_id",val:": str"},{name:"filename",val:": str"},{name:"subfolder",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"huggingface_hub.hf_hub_url.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) name and a repo name separated
by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.hf_hub_url.filename",description:`<strong>filename</strong> (<code>str</code>) &#x2014;
The name of the file in the repo.`,name:"filename"},{anchor:"huggingface_hub.hf_hub_url.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An optional value corresponding to a folder inside the repo.`,name:"subfolder"},{anchor:"huggingface_hub.hf_hub_url.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or space,
<code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.hf_hub_url.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An optional Git revision id which can be a branch name, a tag, or a
commit hash.`,name:"revision"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/file_download.py#L160"}}),qe=new Ra({props:{anchor:"huggingface_hub.hf_hub_url.example",$$slots:{default:[Qa]},$$scope:{ctx:ae}}}),Oe=new Qt({props:{$$slots:{default:[Xa]},$$scope:{ctx:ae}}}),Ze=new Ie({}),eo=new Mo({props:{name:"huggingface_hub.snapshot_download",anchor:"huggingface_hub.snapshot_download",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"cache_dir",val:": typing.Union[str, pathlib.Path, NoneType] = None"},{name:"library_name",val:": typing.Optional[str] = None"},{name:"library_version",val:": typing.Optional[str] = None"},{name:"user_agent",val:": typing.Union[typing.Dict, str, NoneType] = None"},{name:"proxies",val:": typing.Optional[typing.Dict] = None"},{name:"etag_timeout",val:": float = 10"},{name:"resume_download",val:": bool = False"},{name:"token",val:": typing.Union[str, bool, NoneType] = None"},{name:"local_files_only",val:": bool = False"},{name:"allow_regex",val:": typing.Union[typing.List[str], str, NoneType] = None"},{name:"ignore_regex",val:": typing.Union[typing.List[str], str, NoneType] = None"},{name:"allow_patterns",val:": typing.Union[typing.List[str], str, NoneType] = None"},{name:"ignore_patterns",val:": typing.Union[typing.List[str], str, NoneType] = None"}],parametersDescription:[{anchor:"huggingface_hub.snapshot_download.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A user or an organization name and a repo name separated by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.snapshot_download.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An optional Git revision id which can be a branch name, a tag, or a
commit hash.`,name:"revision"},{anchor:"huggingface_hub.snapshot_download.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or space,
<code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.snapshot_download.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <code>Path</code>, <em>optional</em>) &#x2014;
Path to the folder where cached files are stored.`,name:"cache_dir"},{anchor:"huggingface_hub.snapshot_download.library_name",description:`<strong>library_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the library to which the object corresponds.`,name:"library_name"},{anchor:"huggingface_hub.snapshot_download.library_version",description:`<strong>library_version</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The version of the library.`,name:"library_version"},{anchor:"huggingface_hub.snapshot_download.user_agent",description:`<strong>user_agent</strong> (<code>str</code>, <code>dict</code>, <em>optional</em>) &#x2014;
The user-agent info in the form of a dictionary or a string.`,name:"user_agent"},{anchor:"huggingface_hub.snapshot_download.proxies",description:`<strong>proxies</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary mapping protocol to the URL of the proxy passed to
<code>requests.request</code>.`,name:"proxies"},{anchor:"huggingface_hub.snapshot_download.etag_timeout",description:`<strong>etag_timeout</strong> (<code>float</code>, <em>optional</em>, defaults to <code>10</code>) &#x2014;
When fetching ETag, how many seconds to wait for the server to send
data before giving up which is passed to <code>requests.request</code>.`,name:"etag_timeout"},{anchor:"huggingface_hub.snapshot_download.resume_download",description:"<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False) -- If </code>True`, resume a previously interrupted download.",name:"resume_download"},{anchor:"huggingface_hub.snapshot_download.token",description:`<strong>token</strong> (<code>str</code>, <code>bool</code>, <em>optional</em>) &#x2014;
A token to be used for the download.<ul>
<li>If <code>True</code>, the token is read from the HuggingFace config
folder.</li>
<li>If a string, it&#x2019;s used as the authentication token.</li>
</ul>`,name:"token"},{anchor:"huggingface_hub.snapshot_download.local_files_only",description:`<strong>local_files_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, avoid downloading the file and return the path to the
local cached file if it exists.`,name:"local_files_only"},{anchor:"huggingface_hub.snapshot_download.allow_patterns",description:`<strong>allow_patterns</strong> (<code>List[str]</code> or <code>str</code>, <em>optional</em>) &#x2014;
If provided, only files matching at least one pattern are downloaded.`,name:"allow_patterns"},{anchor:"huggingface_hub.snapshot_download.ignore_patterns",description:`<strong>ignore_patterns</strong> (<code>List[str]</code> or <code>str</code>, <em>optional</em>) &#x2014;
If provided, files matching any of the patterns are not downloaded.`,name:"ignore_patterns"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/_snapshot_download.py#L15",returnDescription:`
<p>Local folder path (string) of repo snapshot</p>
`}}),Re=new Qt({props:{$$slots:{default:[Ya]},$$scope:{ctx:ae}}}),oo=new Ie({}),to=new Ie({}),ao=new Mo({props:{name:"huggingface_hub.get_hf_file_metadata",anchor:"huggingface_hub.get_hf_file_metadata",parameters:[{name:"url",val:": str"},{name:"token",val:": typing.Union[bool, str, NoneType] = None"},{name:"proxies",val:": typing.Optional[typing.Dict] = None"},{name:"timeout",val:": float = 10"}],parametersDescription:[{anchor:"huggingface_hub.get_hf_file_metadata.url",description:`<strong>url</strong> (<code>str</code>) &#x2014;
File url, for example returned by <a href="/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.hf_hub_url">hf_hub_url()</a>.`,name:"url"},{anchor:"huggingface_hub.get_hf_file_metadata.token",description:`<strong>token</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
A token to be used for the download.<ul>
<li>If <code>True</code>, the token is read from the HuggingFace config
folder.</li>
<li>If <code>False</code> or <code>None</code>, no token is provided.</li>
<li>If a string, it&#x2019;s used as the authentication token.</li>
</ul>`,name:"token"},{anchor:"huggingface_hub.get_hf_file_metadata.proxies",description:`<strong>proxies</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary mapping protocol to the URL of the proxy passed to
<code>requests.request</code>.`,name:"proxies"},{anchor:"huggingface_hub.get_hf_file_metadata.timeout",description:`<strong>timeout</strong> (<code>float</code>, <em>optional</em>, defaults to 10) &#x2014;
How many seconds to wait for the server to send metadata before giving up.`,name:"timeout"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/file_download.py#L1334",returnDescription:`
<p>A <a
  href="/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.HfFileMetadata"
>HfFileMetadata</a> object containing metadata such as location, etag, size and
commit_hash.</p>
`}}),no=new Ie({}),ro=new Mo({props:{name:"class huggingface_hub.HfFileMetadata",anchor:"huggingface_hub.HfFileMetadata",parameters:[{name:"commit_hash",val:": typing.Optional[str]"},{name:"etag",val:": typing.Optional[str]"},{name:"location",val:": str"},{name:"size",val:": typing.Optional[int]"}],parametersDescription:[{anchor:"huggingface_hub.HfFileMetadata.commit_hash",description:`<strong>commit_hash</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The commit_hash related to the file.`,name:"commit_hash"},{anchor:"huggingface_hub.HfFileMetadata.etag",description:`<strong>etag</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Etag of the file on the server.`,name:"etag"},{anchor:"huggingface_hub.HfFileMetadata.location",description:`<strong>location</strong> (<code>str</code>) &#x2014;
Location where to download the file. Can be a Hub url or not (CDN).`,name:"location"},{anchor:"huggingface_hub.HfFileMetadata.size",description:`<strong>size</strong> (<code>size</code>) &#x2014;
Size of the file. In case of an LFS file, contains the size of the actual
LFS file, not the pointer.`,name:"size"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/file_download.py#L137"}}),lo=new Ie({}),{c(){u=a("meta"),$=c(),_=a("h1"),d=a("a"),b=a("span"),F(g.$$.fragment),w=c(),U=a("span"),V=s("Downloading files"),E=c(),D=a("h2"),T=a("a"),M=a("span"),F(x.$$.fragment),m=c(),y=a("span"),K=s("Download a single file"),B=c(),A=a("h3"),k=a("a"),L=a("span"),F(O.$$.fragment),ce=c(),Z=a("span"),C=s("hf_hub_download"),q=c(),v=a("div"),F(z.$$.fragment),me=c(),J=a("p"),_e=s("Download a given file if it\u2019s not already present in the local cache."),he=c(),ne=a("p"),ee=s("The new cache file layout looks like this:"),Q=c(),X=a("ul"),re=a("li"),Ge=s("The cache directory contains one subfolder per repo_id (namespaced by repo type)"),be=c(),oe=a("li"),We=s("inside each repo folder:"),te=a("ul"),xe=a("li"),ve=s("refs is a list of the latest known revision => commit_hash pairs"),we=c(),ke=a("li"),Ke=s(`blobs contains the actual file blobs (identified by their git-sha or sha256, depending on
whether they\u2019re LFS files or not)`),G=c(),se=a("li"),R=s(`snapshots contains one subfolder per commit, each \u201Ccommit\u201D contains the subset of the files
that have been resolved at that particular commit. Each filename is a symlink to the blob
at that particular commit.`),Ne=c(),F(de.$$.fragment),ho=c(),F(fe.$$.fragment),He=c(),le=a("h3"),pe=a("a"),Te=a("span"),F(ye.$$.fragment),fo=c(),ue=a("span"),po=s("hf_hub_url"),Je=c(),N=a("div"),F($e.$$.fragment),Qe=c(),Se=a("p"),Xe=s("Construct the URL of a file from the given information."),uo=c(),yo=a("p"),dt=s(`The resolved address can either be a huggingface.co-hosted url, or a link to
Cloudfront (a Content Delivery Network, or CDN) for large files which are
more than a few MBs.`),ft=c(),F(qe.$$.fragment),pt=c(),F(Oe.$$.fragment),ut=c(),$o=a("p"),gt=s("References:"),mt=c(),Eo=a("ul"),go=a("li"),_t=s("[1] "),Ye=a("a"),bt=s("https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag"),zo=c(),Ae=a("h2"),Ce=a("a"),xo=a("span"),F(Ze.$$.fragment),vt=c(),ko=a("span"),wt=s("Download a snapshot of the repo"),Vo=c(),W=a("div"),F(eo.$$.fragment),yt=c(),No=a("p"),$t=s("Download all files of a repo."),Et=c(),To=a("p"),xt=s(`Downloads a whole snapshot of a repo\u2019s files at the specified revision. This
is useful when you want all files from a repo, because you don\u2019t know which
ones you will need a priori. All files are nested inside a folder in order
to keep their actual filename relative to that folder.`),kt=c(),Ao=a("p"),Nt=s(`An alternative would be to just clone a repo but this would require that the
user always has git and git-lfs installed, and properly configured.`),Tt=c(),F(Re.$$.fragment),Bo=c(),De=a("h2"),Ue=a("a"),Do=a("span"),F(oo.$$.fragment),At=c(),Lo=a("span"),Dt=s("Get metadata about a file"),Go=c(),Le=a("h3"),Me=a("a"),Fo=a("span"),F(to.$$.fragment),Lt=c(),jo=a("span"),Ft=s("get_hf_file_metadata"),Wo=c(),Fe=a("div"),F(ao.$$.fragment),jt=c(),Po=a("p"),Pt=s("Fetch metadata of a file versioned on the Hub for a given url."),Ko=c(),je=a("h3"),ze=a("a"),Io=a("span"),F(no.$$.fragment),It=c(),Ho=a("span"),Ht=s("HfFileMetadata"),Jo=c(),ge=a("div"),F(ro.$$.fragment),St=c(),So=a("p"),qt=s("Data structure containing information about a file versioned on the Hub."),Ot=c(),so=a("p"),Ct=s("Returned by "),mo=a("a"),Rt=s("get_hf_file_metadata()"),Ut=s(" based on a URL."),Qo=c(),Pe=a("h2"),Ve=a("a"),qo=a("span"),F(lo.$$.fragment),Mt=c(),Oo=a("span"),zt=s("Caching"),Xo=c(),_o=a("p"),Vt=s(`The methods displayed above are designed to work with a caching system that prevents
re-downloading files. The caching system was updated in v0.8.0 to become the central
cache-system shared across libraries that depend on the Hub.`),Yo=c(),Be=a("p"),Bt=s("Read the "),bo=a("a"),Gt=s("cache-system guide"),Wt=s(` for a detailed presentation of caching at
at HF.`),this.h()},l(t){const p=Ga('[data-svelte="svelte-1phssyn"]',document.head);u=n(p,"META",{name:!0,content:!0}),p.forEach(o),$=h(t),_=n(t,"H1",{class:!0});var io=r(_);d=n(io,"A",{id:!0,class:!0,href:!0});var Co=r(d);b=n(Co,"SPAN",{});var Ro=r(b);j(g.$$.fragment,Ro),Ro.forEach(o),Co.forEach(o),w=h(io),U=n(io,"SPAN",{});var Uo=r(U);V=l(Uo,"Downloading files"),Uo.forEach(o),io.forEach(o),E=h(t),D=n(t,"H2",{class:!0});var co=r(D);T=n(co,"A",{id:!0,class:!0,href:!0});var Xt=r(T);M=n(Xt,"SPAN",{});var Yt=r(M);j(x.$$.fragment,Yt),Yt.forEach(o),Xt.forEach(o),m=h(co),y=n(co,"SPAN",{});var Zt=r(y);K=l(Zt,"Download a single file"),Zt.forEach(o),co.forEach(o),B=h(t),A=n(t,"H3",{class:!0});var et=r(A);k=n(et,"A",{id:!0,class:!0,href:!0});var ea=r(k);L=n(ea,"SPAN",{});var oa=r(L);j(O.$$.fragment,oa),oa.forEach(o),ea.forEach(o),ce=h(et),Z=n(et,"SPAN",{});var ta=r(Z);C=l(ta,"hf_hub_download"),ta.forEach(o),et.forEach(o),q=h(t),v=n(t,"DIV",{class:!0});var ie=r(v);j(z.$$.fragment,ie),me=h(ie),J=n(ie,"P",{});var aa=r(J);_e=l(aa,"Download a given file if it\u2019s not already present in the local cache."),aa.forEach(o),he=h(ie),ne=n(ie,"P",{});var na=r(ne);ee=l(na,"The new cache file layout looks like this:"),na.forEach(o),Q=h(ie),X=n(ie,"UL",{});var ot=r(X);re=n(ot,"LI",{});var ra=r(re);Ge=l(ra,"The cache directory contains one subfolder per repo_id (namespaced by repo type)"),ra.forEach(o),be=h(ot),oe=n(ot,"LI",{});var Kt=r(oe);We=l(Kt,"inside each repo folder:"),te=n(Kt,"UL",{});var vo=r(te);xe=n(vo,"LI",{});var sa=r(xe);ve=l(sa,"refs is a list of the latest known revision => commit_hash pairs"),sa.forEach(o),we=h(vo),ke=n(vo,"LI",{});var la=r(ke);Ke=l(la,`blobs contains the actual file blobs (identified by their git-sha or sha256, depending on
whether they\u2019re LFS files or not)`),la.forEach(o),G=h(vo),se=n(vo,"LI",{});var ia=r(se);R=l(ia,`snapshots contains one subfolder per commit, each \u201Ccommit\u201D contains the subset of the files
that have been resolved at that particular commit. Each filename is a symlink to the blob
at that particular commit.`),ia.forEach(o),vo.forEach(o),Kt.forEach(o),ot.forEach(o),Ne=h(ie),j(de.$$.fragment,ie),ho=h(ie),j(fe.$$.fragment,ie),ie.forEach(o),He=h(t),le=n(t,"H3",{class:!0});var tt=r(le);pe=n(tt,"A",{id:!0,class:!0,href:!0});var ca=r(pe);Te=n(ca,"SPAN",{});var ha=r(Te);j(ye.$$.fragment,ha),ha.forEach(o),ca.forEach(o),fo=h(tt),ue=n(tt,"SPAN",{});var da=r(ue);po=l(da,"hf_hub_url"),da.forEach(o),tt.forEach(o),Je=h(t),N=n(t,"DIV",{class:!0});var Y=r(N);j($e.$$.fragment,Y),Qe=h(Y),Se=n(Y,"P",{});var fa=r(Se);Xe=l(fa,"Construct the URL of a file from the given information."),fa.forEach(o),uo=h(Y),yo=n(Y,"P",{});var pa=r(yo);dt=l(pa,`The resolved address can either be a huggingface.co-hosted url, or a link to
Cloudfront (a Content Delivery Network, or CDN) for large files which are
more than a few MBs.`),pa.forEach(o),ft=h(Y),j(qe.$$.fragment,Y),pt=h(Y),j(Oe.$$.fragment,Y),ut=h(Y),$o=n(Y,"P",{});var ua=r($o);gt=l(ua,"References:"),ua.forEach(o),mt=h(Y),Eo=n(Y,"UL",{});var ga=r(Eo);go=n(ga,"LI",{});var Jt=r(go);_t=l(Jt,"[1] "),Ye=n(Jt,"A",{href:!0,rel:!0});var ma=r(Ye);bt=l(ma,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag"),ma.forEach(o),Jt.forEach(o),ga.forEach(o),Y.forEach(o),zo=h(t),Ae=n(t,"H2",{class:!0});var at=r(Ae);Ce=n(at,"A",{id:!0,class:!0,href:!0});var _a=r(Ce);xo=n(_a,"SPAN",{});var ba=r(xo);j(Ze.$$.fragment,ba),ba.forEach(o),_a.forEach(o),vt=h(at),ko=n(at,"SPAN",{});var va=r(ko);wt=l(va,"Download a snapshot of the repo"),va.forEach(o),at.forEach(o),Vo=h(t),W=n(t,"DIV",{class:!0});var Ee=r(W);j(eo.$$.fragment,Ee),yt=h(Ee),No=n(Ee,"P",{});var wa=r(No);$t=l(wa,"Download all files of a repo."),wa.forEach(o),Et=h(Ee),To=n(Ee,"P",{});var ya=r(To);xt=l(ya,`Downloads a whole snapshot of a repo\u2019s files at the specified revision. This
is useful when you want all files from a repo, because you don\u2019t know which
ones you will need a priori. All files are nested inside a folder in order
to keep their actual filename relative to that folder.`),ya.forEach(o),kt=h(Ee),Ao=n(Ee,"P",{});var $a=r(Ao);Nt=l($a,`An alternative would be to just clone a repo but this would require that the
user always has git and git-lfs installed, and properly configured.`),$a.forEach(o),Tt=h(Ee),j(Re.$$.fragment,Ee),Ee.forEach(o),Bo=h(t),De=n(t,"H2",{class:!0});var nt=r(De);Ue=n(nt,"A",{id:!0,class:!0,href:!0});var Ea=r(Ue);Do=n(Ea,"SPAN",{});var xa=r(Do);j(oo.$$.fragment,xa),xa.forEach(o),Ea.forEach(o),At=h(nt),Lo=n(nt,"SPAN",{});var ka=r(Lo);Dt=l(ka,"Get metadata about a file"),ka.forEach(o),nt.forEach(o),Go=h(t),Le=n(t,"H3",{class:!0});var rt=r(Le);Me=n(rt,"A",{id:!0,class:!0,href:!0});var Na=r(Me);Fo=n(Na,"SPAN",{});var Ta=r(Fo);j(to.$$.fragment,Ta),Ta.forEach(o),Na.forEach(o),Lt=h(rt),jo=n(rt,"SPAN",{});var Aa=r(jo);Ft=l(Aa,"get_hf_file_metadata"),Aa.forEach(o),rt.forEach(o),Wo=h(t),Fe=n(t,"DIV",{class:!0});var st=r(Fe);j(ao.$$.fragment,st),jt=h(st),Po=n(st,"P",{});var Da=r(Po);Pt=l(Da,"Fetch metadata of a file versioned on the Hub for a given url."),Da.forEach(o),st.forEach(o),Ko=h(t),je=n(t,"H3",{class:!0});var lt=r(je);ze=n(lt,"A",{id:!0,class:!0,href:!0});var La=r(ze);Io=n(La,"SPAN",{});var Fa=r(Io);j(no.$$.fragment,Fa),Fa.forEach(o),La.forEach(o),It=h(lt),Ho=n(lt,"SPAN",{});var ja=r(Ho);Ht=l(ja,"HfFileMetadata"),ja.forEach(o),lt.forEach(o),Jo=h(t),ge=n(t,"DIV",{class:!0});var wo=r(ge);j(ro.$$.fragment,wo),St=h(wo),So=n(wo,"P",{});var Pa=r(So);qt=l(Pa,"Data structure containing information about a file versioned on the Hub."),Pa.forEach(o),Ot=h(wo),so=n(wo,"P",{});var it=r(so);Ct=l(it,"Returned by "),mo=n(it,"A",{href:!0});var Ia=r(mo);Rt=l(Ia,"get_hf_file_metadata()"),Ia.forEach(o),Ut=l(it," based on a URL."),it.forEach(o),wo.forEach(o),Qo=h(t),Pe=n(t,"H2",{class:!0});var ct=r(Pe);Ve=n(ct,"A",{id:!0,class:!0,href:!0});var Ha=r(Ve);qo=n(Ha,"SPAN",{});var Sa=r(qo);j(lo.$$.fragment,Sa),Sa.forEach(o),Ha.forEach(o),Mt=h(ct),Oo=n(ct,"SPAN",{});var qa=r(Oo);zt=l(qa,"Caching"),qa.forEach(o),ct.forEach(o),Xo=h(t),_o=n(t,"P",{});var Oa=r(_o);Vt=l(Oa,`The methods displayed above are designed to work with a caching system that prevents
re-downloading files. The caching system was updated in v0.8.0 to become the central
cache-system shared across libraries that depend on the Hub.`),Oa.forEach(o),Yo=h(t),Be=n(t,"P",{});var ht=r(Be);Bt=l(ht,"Read the "),bo=n(ht,"A",{href:!0});var Ca=r(bo);Gt=l(Ca,"cache-system guide"),Ca.forEach(o),Wt=l(ht,` for a detailed presentation of caching at
at HF.`),ht.forEach(o),this.h()},h(){i(u,"name","hf:doc:metadata"),i(u,"content",JSON.stringify(en)),i(d,"id","downloading-files"),i(d,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(d,"href","#downloading-files"),i(_,"class","relative group"),i(T,"id","download-a-single-file"),i(T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(T,"href","#download-a-single-file"),i(D,"class","relative group"),i(k,"id","huggingface_hub.hf_hub_download"),i(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(k,"href","#huggingface_hub.hf_hub_download"),i(A,"class","relative group"),i(v,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(pe,"id","huggingface_hub.hf_hub_url"),i(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(pe,"href","#huggingface_hub.hf_hub_url"),i(le,"class","relative group"),i(Ye,"href","https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag"),i(Ye,"rel","nofollow"),i(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ce,"id","huggingface_hub.snapshot_download"),i(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ce,"href","#huggingface_hub.snapshot_download"),i(Ae,"class","relative group"),i(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ue,"id","get-metadata-about-a-file"),i(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ue,"href","#get-metadata-about-a-file"),i(De,"class","relative group"),i(Me,"id","huggingface_hub.get_hf_file_metadata"),i(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Me,"href","#huggingface_hub.get_hf_file_metadata"),i(Le,"class","relative group"),i(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ze,"id","huggingface_hub.HfFileMetadata"),i(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ze,"href","#huggingface_hub.HfFileMetadata"),i(je,"class","relative group"),i(mo,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.get_hf_file_metadata"),i(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ve,"id","caching"),i(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ve,"href","#caching"),i(Pe,"class","relative group"),i(bo,"href","../how-to-cache")},m(t,p){e(document.head,u),f(t,$,p),f(t,_,p),e(_,d),e(d,b),P(g,b,null),e(_,w),e(_,U),e(U,V),f(t,E,p),f(t,D,p),e(D,T),e(T,M),P(x,M,null),e(D,m),e(D,y),e(y,K),f(t,B,p),f(t,A,p),e(A,k),e(k,L),P(O,L,null),e(A,ce),e(A,Z),e(Z,C),f(t,q,p),f(t,v,p),P(z,v,null),e(v,me),e(v,J),e(J,_e),e(v,he),e(v,ne),e(ne,ee),e(v,Q),e(v,X),e(X,re),e(re,Ge),e(X,be),e(X,oe),e(oe,We),e(oe,te),e(te,xe),e(xe,ve),e(te,we),e(te,ke),e(ke,Ke),e(te,G),e(te,se),e(se,R),e(v,Ne),P(de,v,null),e(v,ho),P(fe,v,null),f(t,He,p),f(t,le,p),e(le,pe),e(pe,Te),P(ye,Te,null),e(le,fo),e(le,ue),e(ue,po),f(t,Je,p),f(t,N,p),P($e,N,null),e(N,Qe),e(N,Se),e(Se,Xe),e(N,uo),e(N,yo),e(yo,dt),e(N,ft),P(qe,N,null),e(N,pt),P(Oe,N,null),e(N,ut),e(N,$o),e($o,gt),e(N,mt),e(N,Eo),e(Eo,go),e(go,_t),e(go,Ye),e(Ye,bt),f(t,zo,p),f(t,Ae,p),e(Ae,Ce),e(Ce,xo),P(Ze,xo,null),e(Ae,vt),e(Ae,ko),e(ko,wt),f(t,Vo,p),f(t,W,p),P(eo,W,null),e(W,yt),e(W,No),e(No,$t),e(W,Et),e(W,To),e(To,xt),e(W,kt),e(W,Ao),e(Ao,Nt),e(W,Tt),P(Re,W,null),f(t,Bo,p),f(t,De,p),e(De,Ue),e(Ue,Do),P(oo,Do,null),e(De,At),e(De,Lo),e(Lo,Dt),f(t,Go,p),f(t,Le,p),e(Le,Me),e(Me,Fo),P(to,Fo,null),e(Le,Lt),e(Le,jo),e(jo,Ft),f(t,Wo,p),f(t,Fe,p),P(ao,Fe,null),e(Fe,jt),e(Fe,Po),e(Po,Pt),f(t,Ko,p),f(t,je,p),e(je,ze),e(ze,Io),P(no,Io,null),e(je,It),e(je,Ho),e(Ho,Ht),f(t,Jo,p),f(t,ge,p),P(ro,ge,null),e(ge,St),e(ge,So),e(So,qt),e(ge,Ot),e(ge,so),e(so,Ct),e(so,mo),e(mo,Rt),e(so,Ut),f(t,Qo,p),f(t,Pe,p),e(Pe,Ve),e(Ve,qo),P(lo,qo,null),e(Pe,Mt),e(Pe,Oo),e(Oo,zt),f(t,Xo,p),f(t,_o,p),e(_o,Vt),f(t,Yo,p),f(t,Be,p),e(Be,Bt),e(Be,bo),e(bo,Gt),e(Be,Wt),Zo=!0},p(t,[p]){const io={};p&2&&(io.$$scope={dirty:p,ctx:t}),de.$set(io);const Co={};p&2&&(Co.$$scope={dirty:p,ctx:t}),fe.$set(Co);const Ro={};p&2&&(Ro.$$scope={dirty:p,ctx:t}),qe.$set(Ro);const Uo={};p&2&&(Uo.$$scope={dirty:p,ctx:t}),Oe.$set(Uo);const co={};p&2&&(co.$$scope={dirty:p,ctx:t}),Re.$set(co)},i(t){Zo||(I(g.$$.fragment,t),I(x.$$.fragment,t),I(O.$$.fragment,t),I(z.$$.fragment,t),I(de.$$.fragment,t),I(fe.$$.fragment,t),I(ye.$$.fragment,t),I($e.$$.fragment,t),I(qe.$$.fragment,t),I(Oe.$$.fragment,t),I(Ze.$$.fragment,t),I(eo.$$.fragment,t),I(Re.$$.fragment,t),I(oo.$$.fragment,t),I(to.$$.fragment,t),I(ao.$$.fragment,t),I(no.$$.fragment,t),I(ro.$$.fragment,t),I(lo.$$.fragment,t),Zo=!0)},o(t){H(g.$$.fragment,t),H(x.$$.fragment,t),H(O.$$.fragment,t),H(z.$$.fragment,t),H(de.$$.fragment,t),H(fe.$$.fragment,t),H(ye.$$.fragment,t),H($e.$$.fragment,t),H(qe.$$.fragment,t),H(Oe.$$.fragment,t),H(Ze.$$.fragment,t),H(eo.$$.fragment,t),H(Re.$$.fragment,t),H(oo.$$.fragment,t),H(to.$$.fragment,t),H(ao.$$.fragment,t),H(no.$$.fragment,t),H(ro.$$.fragment,t),H(lo.$$.fragment,t),Zo=!1},d(t){o(u),t&&o($),t&&o(_),S(g),t&&o(E),t&&o(D),S(x),t&&o(B),t&&o(A),S(O),t&&o(q),t&&o(v),S(z),S(de),S(fe),t&&o(He),t&&o(le),S(ye),t&&o(Je),t&&o(N),S($e),S(qe),S(Oe),t&&o(zo),t&&o(Ae),S(Ze),t&&o(Vo),t&&o(W),S(eo),S(Re),t&&o(Bo),t&&o(De),S(oo),t&&o(Go),t&&o(Le),S(to),t&&o(Wo),t&&o(Fe),S(ao),t&&o(Ko),t&&o(je),S(no),t&&o(Jo),t&&o(ge),S(ro),t&&o(Qo),t&&o(Pe),S(lo),t&&o(Xo),t&&o(_o),t&&o(Yo),t&&o(Be)}}}const en={local:"downloading-files",sections:[{local:"download-a-single-file",sections:[{local:"huggingface_hub.hf_hub_download",title:"hf_hub_download"},{local:"huggingface_hub.hf_hub_url",title:"hf_hub_url"}],title:"Download a single file"},{local:"huggingface_hub.snapshot_download",title:"Download a snapshot of the repo"},{local:"get-metadata-about-a-file",sections:[{local:"huggingface_hub.get_hf_file_metadata",title:"get_hf_file_metadata"},{local:"huggingface_hub.HfFileMetadata",title:"HfFileMetadata"}],title:"Get metadata about a file"},{local:"caching",title:"Caching"}],title:"Downloading files"};function on(ae){return Wa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class cn extends za{constructor(u){super();Va(this,u,on,Za,Ba,{})}}export{cn as default,en as metadata};
