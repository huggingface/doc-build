import{S as Hn,i as Tn,s as Sn,e as s,k as h,w as _,t,M as Ln,c as l,d as o,m as d,a as i,x as w,h as n,b as p,T as On,G as a,g as f,y as m,L as In,q as g,o as v,B as b,v as Nn}from"../chunks/vendor-hf-doc-builder.js";import{I as Qa}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as I}from"../chunks/CodeBlock-hf-doc-builder.js";function Un(Ht){let P,ra,C,N,Ce,V,Xa,Ae,Za,ia,U,eo,Oe,ao,oo,fa,R,He,to,no,Te,so,ha,A,M,Se,z,lo,Le,ro,da,B,io,fe,fo,ho,pa,he,po,ca,E,co,Ie,uo,_o,Ne,wo,mo,ua,K,_a,O,de,Tt,go,pe,St,wa,ce,vo,ma,Q,ga,ue,bo,va,X,ba,j,yo,Ue,$o,Eo,Re,jo,ko,ya,Z,$a,u,xo,Me,qo,Do,Be,Po,Co,Fe,Ao,Oo,Ge,Ho,To,Ea,ee,ja,H,F,We,ae,So,Je,Lo,ka,k,Io,_e,No,Uo,we,Ro,Mo,xa,T,G,Ye,oe,Bo,Ve,Fo,qa,S,me,Go,Wo,ge,Jo,Yo,Da,ve,Vo,Pa,te,Ca,L,be,zo,Ko,ze,Qo,Xo,Aa,ne,Oa,x,Zo,ye,et,at,$e,ot,tt,Ha,c,nt,Ee,st,lt,Ke,rt,it,Qe,ft,ht,Xe,dt,pt,Ze,ct,ut,Ta,q,_t,se,wt,mt,le,ea,gt,vt,Sa,W,bt,aa,yt,$t,La,re,Ia,y,Et,oa,jt,kt,ta,xt,qt,na,Dt,Pt,Na,ie,Ua,J,Ct,je,At,Ot,Ra;return V=new Qa({}),z=new Qa({}),K=new I({props:{code:`from huggingface_hub import hf_hub_download
hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_download
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)
<span class="hljs-string">&#x27;/root/.cache/huggingface/hub/models--lysandre--arxiv-nlp/snapshots/894a9adde21d9a3e3843e6d5aeaaf01875c7fade/config.json&#x27;</span>`}}),Q=new I({props:{code:`hf_hub_download(
   repo_id="lysandre/arxiv-nlp",
   filename="config.json",
   revision="877b84a8f93f2d619faa2a6e514a32beef88ab0a",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(
<span class="hljs-meta">... </span>   repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>,
<span class="hljs-meta">... </span>   filename=<span class="hljs-string">&quot;config.json&quot;</span>,
<span class="hljs-meta">... </span>   revision=<span class="hljs-string">&quot;877b84a8f93f2d619faa2a6e514a32beef88ab0a&quot;</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-string">&#x27;/root/.cache/huggingface/hub/models--lysandre--arxiv-nlp/snapshots/877b84a8f93f2d619faa2a6e514a32beef88ab0a/config.json&#x27;</span>`}}),X=new I({props:{code:'hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="main")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;main&quot;</span>)'}}),Z=new I({props:{code:'hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="v1.0")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;v1.0&quot;</span>)'}}),ee=new I({props:{code:'hf_hub_download(repo_id="google/fleurs", filename="fleurs.py", repo_type="dataset")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;google/fleurs&quot;</span>, filename=<span class="hljs-string">&quot;fleurs.py&quot;</span>, repo_type=<span class="hljs-string">&quot;dataset&quot;</span>)'}}),ae=new Qa({}),oe=new Qa({}),te=new I({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>)
<span class="hljs-string">&#x27;/home/lysandre/.cache/huggingface/hub/lysandre__arxiv-nlp.894a9adde21d9a3e3843e6d5aeaaf01875c7fade&#x27;</span>`}}),ne=new I({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", revision="main")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, revision=<span class="hljs-string">&quot;main&quot;</span>)`}}),re=new I({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", allow_patterns="*.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, allow_patterns=<span class="hljs-string">&quot;*.json&quot;</span>)`}}),ie=new I({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", ignore_patterns=["*.msgpack", "*.h5"])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, ignore_patterns=[<span class="hljs-string">&quot;*.msgpack&quot;</span>, <span class="hljs-string">&quot;*.h5&quot;</span>])`}}),{c(){P=s("meta"),ra=h(),C=s("h1"),N=s("a"),Ce=s("span"),_(V.$$.fragment),Xa=h(),Ae=s("span"),Za=t("Download files from the Hub"),ia=h(),U=s("p"),eo=t("The "),Oe=s("code"),ao=t("huggingface_hub"),oo=t(` library provides functions to download files from the repositories
stored on the Hub. You can use these functions independently or integrate them into your
own library, making it more convenient for your users to interact with the Hub. This
guide will show you how to:`),fa=h(),R=s("ul"),He=s("li"),to=t("Download and store a file from the Hub."),no=h(),Te=s("li"),so=t("Download all the files in a repository."),ha=h(),A=s("h2"),M=s("a"),Se=s("span"),_(z.$$.fragment),lo=h(),Le=s("span"),ro=t("Download and store a file from the Hub"),da=h(),B=s("p"),io=t("The "),fe=s("a"),fo=t("hf_hub_download()"),ho=t(" function is the main function for downloading files from the Hub."),pa=h(),he=s("p"),po=t("It downloads the remote file, stores it on disk (in a version-aware way), and returns its local file path."),ca=h(),E=s("p"),co=t("Use the "),Ie=s("code"),uo=t("repo_id"),_o=t(" and "),Ne=s("code"),wo=t("filename"),mo=t(" parameters to specify which file to download:"),ua=h(),_(K.$$.fragment),_a=h(),O=s("div"),de=s("img"),go=h(),pe=s("img"),wa=h(),ce=s("p"),vo=t(`Specify a particular file version by providing the file revision, which can be the
branch name, a tag, or a commit hash. When using the commit hash, it must be the
full-length hash instead of a 7-character commit hash:`),ma=h(),_(Q.$$.fragment),ga=h(),ue=s("p"),bo=t("To specify a file revision with the branch name:"),va=h(),_(X.$$.fragment),ba=h(),j=s("p"),yo=t("To specify a file revision with a tag identifier. For example, if you want "),Ue=s("code"),$o=t("v1.0"),Eo=t(` of the
`),Re=s("code"),jo=t("config.json"),ko=t(" file:"),ya=h(),_(Z.$$.fragment),$a=h(),u=s("p"),xo=t("To download from a "),Me=s("code"),qo=t("dataset"),Do=t(" or a "),Be=s("code"),Po=t("space"),Co=t(", specify the "),Fe=s("code"),Ao=t("repo_type"),Oo=t(`. By default, file will
be considered as being part of a `),Ge=s("code"),Ho=t("model"),To=t(" repo."),Ea=h(),_(ee.$$.fragment),ja=h(),H=s("h2"),F=s("a"),We=s("span"),_(ae.$$.fragment),So=h(),Je=s("span"),Lo=t("Construct a download URL"),ka=h(),k=s("p"),Io=t("In case you want to construct the URL used to download a file from a repo, you can use "),_e=s("a"),No=t("hf_hub_url()"),Uo=t(` which returns a URL.
Note that it is used internally by `),we=s("a"),Ro=t("hf_hub_download()"),Mo=t("."),xa=h(),T=s("h2"),G=s("a"),Ye=s("span"),_(oe.$$.fragment),Bo=h(),Ve=s("span"),Fo=t("Download an entire repository"),qa=h(),S=s("p"),me=s("a"),Go=t("snapshot_download()"),Wo=t(` downloads an entire repository at a given revision. Like
`),ge=s("a"),Jo=t("hf_hub_download()"),Yo=t(", all downloaded files are cached on your local disk."),Da=h(),ve=s("p"),Vo=t("Download a whole repository as shown in the following:"),Pa=h(),_(te.$$.fragment),Ca=h(),L=s("p"),be=s("a"),zo=t("snapshot_download()"),Ko=t(` downloads the latest revision by default. If you want a specific
repository revision, use the `),ze=s("code"),Qo=t("revision"),Xo=t(" parameter:"),Aa=h(),_(ne.$$.fragment),Oa=h(),x=s("p"),Zo=t("In general, it is usually better to download files with "),ye=s("a"),et=t("hf_hub_download()"),at=t(` - if you
already know the file names you need.
`),$e=s("a"),ot=t("snapshot_download()"),tt=t(" is helpful when you are unaware of which files to download."),Ha=h(),c=s("p"),nt=t(`However, you don\u2019t always want to download the contents of an entire repository with
`),Ee=s("a"),st=t("snapshot_download()"),lt=t(`. Even if you don\u2019t know the file name, you can download specific
files if you know the file type with `),Ke=s("code"),rt=t("allow_patterns"),it=t(" and "),Qe=s("code"),ft=t("ignore_patterns"),ht=t(`. Use the
`),Xe=s("code"),dt=t("allow_patterns"),pt=t(" and "),Ze=s("code"),ct=t("ignore_patterns"),ut=t(` arguments to specify which files to download. These
parameters accept either a single pattern or a list of patterns.`),Ta=h(),q=s("p"),_t=t(`Patterns are Standard Wildcards (globbing patterns) as documented
`),se=s("a"),wt=t("here"),mt=t(`. The pattern
matching is based on `),le=s("a"),ea=s("code"),gt=t("fnmatch"),vt=t("."),Sa=h(),W=s("p"),bt=t("For example, you can use "),aa=s("code"),yt=t("allow_patterns"),$t=t(" to only download JSON configuration files:"),La=h(),_(re.$$.fragment),Ia=h(),y=s("p"),Et=t("On the other hand, "),oa=s("code"),jt=t("ignore_patterns"),kt=t(` can exclude certain files from being downloaded. The
following example ignores the `),ta=s("code"),xt=t(".msgpack"),qt=t(" and "),na=s("code"),Dt=t(".h5"),Pt=t(" file extensions:"),Na=h(),_(ie.$$.fragment),Ua=h(),J=s("p"),Ct=t(`Passing a pattern can be especially useful when repositories contain files that are never
expected to be downloaded by `),je=s("a"),At=t("snapshot_download()"),Ot=t("."),this.h()},l(e){const r=Ln('[data-svelte="svelte-1phssyn"]',document.head);P=l(r,"META",{name:!0,content:!0}),r.forEach(o),ra=d(e),C=l(e,"H1",{class:!0});var Ma=i(C);N=l(Ma,"A",{id:!0,class:!0,href:!0});var Lt=i(N);Ce=l(Lt,"SPAN",{});var It=i(Ce);w(V.$$.fragment,It),It.forEach(o),Lt.forEach(o),Xa=d(Ma),Ae=l(Ma,"SPAN",{});var Nt=i(Ae);Za=n(Nt,"Download files from the Hub"),Nt.forEach(o),Ma.forEach(o),ia=d(e),U=l(e,"P",{});var Ba=i(U);eo=n(Ba,"The "),Oe=l(Ba,"CODE",{});var Ut=i(Oe);ao=n(Ut,"huggingface_hub"),Ut.forEach(o),oo=n(Ba,` library provides functions to download files from the repositories
stored on the Hub. You can use these functions independently or integrate them into your
own library, making it more convenient for your users to interact with the Hub. This
guide will show you how to:`),Ba.forEach(o),fa=d(e),R=l(e,"UL",{});var Fa=i(R);He=l(Fa,"LI",{});var Rt=i(He);to=n(Rt,"Download and store a file from the Hub."),Rt.forEach(o),no=d(Fa),Te=l(Fa,"LI",{});var Mt=i(Te);so=n(Mt,"Download all the files in a repository."),Mt.forEach(o),Fa.forEach(o),ha=d(e),A=l(e,"H2",{class:!0});var Ga=i(A);M=l(Ga,"A",{id:!0,class:!0,href:!0});var Bt=i(M);Se=l(Bt,"SPAN",{});var Ft=i(Se);w(z.$$.fragment,Ft),Ft.forEach(o),Bt.forEach(o),lo=d(Ga),Le=l(Ga,"SPAN",{});var Gt=i(Le);ro=n(Gt,"Download and store a file from the Hub"),Gt.forEach(o),Ga.forEach(o),da=d(e),B=l(e,"P",{});var Wa=i(B);io=n(Wa,"The "),fe=l(Wa,"A",{href:!0});var Wt=i(fe);fo=n(Wt,"hf_hub_download()"),Wt.forEach(o),ho=n(Wa," function is the main function for downloading files from the Hub."),Wa.forEach(o),pa=d(e),he=l(e,"P",{});var Jt=i(he);po=n(Jt,"It downloads the remote file, stores it on disk (in a version-aware way), and returns its local file path."),Jt.forEach(o),ca=d(e),E=l(e,"P",{});var ke=i(E);co=n(ke,"Use the "),Ie=l(ke,"CODE",{});var Yt=i(Ie);uo=n(Yt,"repo_id"),Yt.forEach(o),_o=n(ke," and "),Ne=l(ke,"CODE",{});var Vt=i(Ne);wo=n(Vt,"filename"),Vt.forEach(o),mo=n(ke," parameters to specify which file to download:"),ke.forEach(o),ua=d(e),w(K.$$.fragment,e),_a=d(e),O=l(e,"DIV",{class:!0});var Ja=i(O);de=l(Ja,"IMG",{class:!0,src:!0}),go=d(Ja),pe=l(Ja,"IMG",{class:!0,src:!0}),Ja.forEach(o),wa=d(e),ce=l(e,"P",{});var zt=i(ce);vo=n(zt,`Specify a particular file version by providing the file revision, which can be the
branch name, a tag, or a commit hash. When using the commit hash, it must be the
full-length hash instead of a 7-character commit hash:`),zt.forEach(o),ma=d(e),w(Q.$$.fragment,e),ga=d(e),ue=l(e,"P",{});var Kt=i(ue);bo=n(Kt,"To specify a file revision with the branch name:"),Kt.forEach(o),va=d(e),w(X.$$.fragment,e),ba=d(e),j=l(e,"P",{});var xe=i(j);yo=n(xe,"To specify a file revision with a tag identifier. For example, if you want "),Ue=l(xe,"CODE",{});var Qt=i(Ue);$o=n(Qt,"v1.0"),Qt.forEach(o),Eo=n(xe,` of the
`),Re=l(xe,"CODE",{});var Xt=i(Re);jo=n(Xt,"config.json"),Xt.forEach(o),ko=n(xe," file:"),xe.forEach(o),ya=d(e),w(Z.$$.fragment,e),$a=d(e),u=l(e,"P",{});var D=i(u);xo=n(D,"To download from a "),Me=l(D,"CODE",{});var Zt=i(Me);qo=n(Zt,"dataset"),Zt.forEach(o),Do=n(D," or a "),Be=l(D,"CODE",{});var en=i(Be);Po=n(en,"space"),en.forEach(o),Co=n(D,", specify the "),Fe=l(D,"CODE",{});var an=i(Fe);Ao=n(an,"repo_type"),an.forEach(o),Oo=n(D,`. By default, file will
be considered as being part of a `),Ge=l(D,"CODE",{});var on=i(Ge);Ho=n(on,"model"),on.forEach(o),To=n(D," repo."),D.forEach(o),Ea=d(e),w(ee.$$.fragment,e),ja=d(e),H=l(e,"H2",{class:!0});var Ya=i(H);F=l(Ya,"A",{id:!0,class:!0,href:!0});var tn=i(F);We=l(tn,"SPAN",{});var nn=i(We);w(ae.$$.fragment,nn),nn.forEach(o),tn.forEach(o),So=d(Ya),Je=l(Ya,"SPAN",{});var sn=i(Je);Lo=n(sn,"Construct a download URL"),sn.forEach(o),Ya.forEach(o),ka=d(e),k=l(e,"P",{});var qe=i(k);Io=n(qe,"In case you want to construct the URL used to download a file from a repo, you can use "),_e=l(qe,"A",{href:!0});var ln=i(_e);No=n(ln,"hf_hub_url()"),ln.forEach(o),Uo=n(qe,` which returns a URL.
Note that it is used internally by `),we=l(qe,"A",{href:!0});var rn=i(we);Ro=n(rn,"hf_hub_download()"),rn.forEach(o),Mo=n(qe,"."),qe.forEach(o),xa=d(e),T=l(e,"H2",{class:!0});var Va=i(T);G=l(Va,"A",{id:!0,class:!0,href:!0});var fn=i(G);Ye=l(fn,"SPAN",{});var hn=i(Ye);w(oe.$$.fragment,hn),hn.forEach(o),fn.forEach(o),Bo=d(Va),Ve=l(Va,"SPAN",{});var dn=i(Ve);Fo=n(dn,"Download an entire repository"),dn.forEach(o),Va.forEach(o),qa=d(e),S=l(e,"P",{});var sa=i(S);me=l(sa,"A",{href:!0});var pn=i(me);Go=n(pn,"snapshot_download()"),pn.forEach(o),Wo=n(sa,` downloads an entire repository at a given revision. Like
`),ge=l(sa,"A",{href:!0});var cn=i(ge);Jo=n(cn,"hf_hub_download()"),cn.forEach(o),Yo=n(sa,", all downloaded files are cached on your local disk."),sa.forEach(o),Da=d(e),ve=l(e,"P",{});var un=i(ve);Vo=n(un,"Download a whole repository as shown in the following:"),un.forEach(o),Pa=d(e),w(te.$$.fragment,e),Ca=d(e),L=l(e,"P",{});var la=i(L);be=l(la,"A",{href:!0});var _n=i(be);zo=n(_n,"snapshot_download()"),_n.forEach(o),Ko=n(la,` downloads the latest revision by default. If you want a specific
repository revision, use the `),ze=l(la,"CODE",{});var wn=i(ze);Qo=n(wn,"revision"),wn.forEach(o),Xo=n(la," parameter:"),la.forEach(o),Aa=d(e),w(ne.$$.fragment,e),Oa=d(e),x=l(e,"P",{});var De=i(x);Zo=n(De,"In general, it is usually better to download files with "),ye=l(De,"A",{href:!0});var mn=i(ye);et=n(mn,"hf_hub_download()"),mn.forEach(o),at=n(De,` - if you
already know the file names you need.
`),$e=l(De,"A",{href:!0});var gn=i($e);ot=n(gn,"snapshot_download()"),gn.forEach(o),tt=n(De," is helpful when you are unaware of which files to download."),De.forEach(o),Ha=d(e),c=l(e,"P",{});var $=i(c);nt=n($,`However, you don\u2019t always want to download the contents of an entire repository with
`),Ee=l($,"A",{href:!0});var vn=i(Ee);st=n(vn,"snapshot_download()"),vn.forEach(o),lt=n($,`. Even if you don\u2019t know the file name, you can download specific
files if you know the file type with `),Ke=l($,"CODE",{});var bn=i(Ke);rt=n(bn,"allow_patterns"),bn.forEach(o),it=n($," and "),Qe=l($,"CODE",{});var yn=i(Qe);ft=n(yn,"ignore_patterns"),yn.forEach(o),ht=n($,`. Use the
`),Xe=l($,"CODE",{});var $n=i(Xe);dt=n($n,"allow_patterns"),$n.forEach(o),pt=n($," and "),Ze=l($,"CODE",{});var En=i(Ze);ct=n(En,"ignore_patterns"),En.forEach(o),ut=n($,` arguments to specify which files to download. These
parameters accept either a single pattern or a list of patterns.`),$.forEach(o),Ta=d(e),q=l(e,"P",{});var Pe=i(q);_t=n(Pe,`Patterns are Standard Wildcards (globbing patterns) as documented
`),se=l(Pe,"A",{href:!0,rel:!0});var jn=i(se);wt=n(jn,"here"),jn.forEach(o),mt=n(Pe,`. The pattern
matching is based on `),le=l(Pe,"A",{href:!0,rel:!0});var kn=i(le);ea=l(kn,"CODE",{});var xn=i(ea);gt=n(xn,"fnmatch"),xn.forEach(o),kn.forEach(o),vt=n(Pe,"."),Pe.forEach(o),Sa=d(e),W=l(e,"P",{});var za=i(W);bt=n(za,"For example, you can use "),aa=l(za,"CODE",{});var qn=i(aa);yt=n(qn,"allow_patterns"),qn.forEach(o),$t=n(za," to only download JSON configuration files:"),za.forEach(o),La=d(e),w(re.$$.fragment,e),Ia=d(e),y=l(e,"P",{});var Y=i(y);Et=n(Y,"On the other hand, "),oa=l(Y,"CODE",{});var Dn=i(oa);jt=n(Dn,"ignore_patterns"),Dn.forEach(o),kt=n(Y,` can exclude certain files from being downloaded. The
following example ignores the `),ta=l(Y,"CODE",{});var Pn=i(ta);xt=n(Pn,".msgpack"),Pn.forEach(o),qt=n(Y," and "),na=l(Y,"CODE",{});var Cn=i(na);Dt=n(Cn,".h5"),Cn.forEach(o),Pt=n(Y," file extensions:"),Y.forEach(o),Na=d(e),w(ie.$$.fragment,e),Ua=d(e),J=l(e,"P",{});var Ka=i(J);Ct=n(Ka,`Passing a pattern can be especially useful when repositories contain files that are never
expected to be downloaded by `),je=l(Ka,"A",{href:!0});var An=i(je);At=n(An,"snapshot_download()"),An.forEach(o),Ot=n(Ka,"."),Ka.forEach(o),this.h()},h(){p(P,"name","hf:doc:metadata"),p(P,"content",JSON.stringify(Rn)),p(N,"id","download-files-from-the-hub"),p(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(N,"href","#download-files-from-the-hub"),p(C,"class","relative group"),p(M,"id","download-and-store-a-file-from-the-hub"),p(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(M,"href","#download-and-store-a-file-from-the-hub"),p(A,"class","relative group"),p(fe,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.hf_hub_download"),p(de,"class","block dark:hidden"),On(de.src,Tt="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo.png")||p(de,"src",Tt),p(pe,"class","hidden dark:block"),On(pe.src,St="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo-dark.png")||p(pe,"src",St),p(O,"class","flex justify-center"),p(F,"id","construct-a-download-url"),p(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(F,"href","#construct-a-download-url"),p(H,"class","relative group"),p(_e,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.hf_hub_url"),p(we,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.hf_hub_download"),p(G,"id","download-an-entire-repository"),p(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(G,"href","#download-an-entire-repository"),p(T,"class","relative group"),p(me,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.snapshot_download"),p(ge,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.hf_hub_download"),p(be,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.snapshot_download"),p(ye,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.hf_hub_download"),p($e,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.snapshot_download"),p(Ee,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.snapshot_download"),p(se,"href","https://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm"),p(se,"rel","nofollow"),p(le,"href","https://docs.python.org/3/library/fnmatch.html"),p(le,"rel","nofollow"),p(je,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.snapshot_download")},m(e,r){a(document.head,P),f(e,ra,r),f(e,C,r),a(C,N),a(N,Ce),m(V,Ce,null),a(C,Xa),a(C,Ae),a(Ae,Za),f(e,ia,r),f(e,U,r),a(U,eo),a(U,Oe),a(Oe,ao),a(U,oo),f(e,fa,r),f(e,R,r),a(R,He),a(He,to),a(R,no),a(R,Te),a(Te,so),f(e,ha,r),f(e,A,r),a(A,M),a(M,Se),m(z,Se,null),a(A,lo),a(A,Le),a(Le,ro),f(e,da,r),f(e,B,r),a(B,io),a(B,fe),a(fe,fo),a(B,ho),f(e,pa,r),f(e,he,r),a(he,po),f(e,ca,r),f(e,E,r),a(E,co),a(E,Ie),a(Ie,uo),a(E,_o),a(E,Ne),a(Ne,wo),a(E,mo),f(e,ua,r),m(K,e,r),f(e,_a,r),f(e,O,r),a(O,de),a(O,go),a(O,pe),f(e,wa,r),f(e,ce,r),a(ce,vo),f(e,ma,r),m(Q,e,r),f(e,ga,r),f(e,ue,r),a(ue,bo),f(e,va,r),m(X,e,r),f(e,ba,r),f(e,j,r),a(j,yo),a(j,Ue),a(Ue,$o),a(j,Eo),a(j,Re),a(Re,jo),a(j,ko),f(e,ya,r),m(Z,e,r),f(e,$a,r),f(e,u,r),a(u,xo),a(u,Me),a(Me,qo),a(u,Do),a(u,Be),a(Be,Po),a(u,Co),a(u,Fe),a(Fe,Ao),a(u,Oo),a(u,Ge),a(Ge,Ho),a(u,To),f(e,Ea,r),m(ee,e,r),f(e,ja,r),f(e,H,r),a(H,F),a(F,We),m(ae,We,null),a(H,So),a(H,Je),a(Je,Lo),f(e,ka,r),f(e,k,r),a(k,Io),a(k,_e),a(_e,No),a(k,Uo),a(k,we),a(we,Ro),a(k,Mo),f(e,xa,r),f(e,T,r),a(T,G),a(G,Ye),m(oe,Ye,null),a(T,Bo),a(T,Ve),a(Ve,Fo),f(e,qa,r),f(e,S,r),a(S,me),a(me,Go),a(S,Wo),a(S,ge),a(ge,Jo),a(S,Yo),f(e,Da,r),f(e,ve,r),a(ve,Vo),f(e,Pa,r),m(te,e,r),f(e,Ca,r),f(e,L,r),a(L,be),a(be,zo),a(L,Ko),a(L,ze),a(ze,Qo),a(L,Xo),f(e,Aa,r),m(ne,e,r),f(e,Oa,r),f(e,x,r),a(x,Zo),a(x,ye),a(ye,et),a(x,at),a(x,$e),a($e,ot),a(x,tt),f(e,Ha,r),f(e,c,r),a(c,nt),a(c,Ee),a(Ee,st),a(c,lt),a(c,Ke),a(Ke,rt),a(c,it),a(c,Qe),a(Qe,ft),a(c,ht),a(c,Xe),a(Xe,dt),a(c,pt),a(c,Ze),a(Ze,ct),a(c,ut),f(e,Ta,r),f(e,q,r),a(q,_t),a(q,se),a(se,wt),a(q,mt),a(q,le),a(le,ea),a(ea,gt),a(q,vt),f(e,Sa,r),f(e,W,r),a(W,bt),a(W,aa),a(aa,yt),a(W,$t),f(e,La,r),m(re,e,r),f(e,Ia,r),f(e,y,r),a(y,Et),a(y,oa),a(oa,jt),a(y,kt),a(y,ta),a(ta,xt),a(y,qt),a(y,na),a(na,Dt),a(y,Pt),f(e,Na,r),m(ie,e,r),f(e,Ua,r),f(e,J,r),a(J,Ct),a(J,je),a(je,At),a(J,Ot),Ra=!0},p:In,i(e){Ra||(g(V.$$.fragment,e),g(z.$$.fragment,e),g(K.$$.fragment,e),g(Q.$$.fragment,e),g(X.$$.fragment,e),g(Z.$$.fragment,e),g(ee.$$.fragment,e),g(ae.$$.fragment,e),g(oe.$$.fragment,e),g(te.$$.fragment,e),g(ne.$$.fragment,e),g(re.$$.fragment,e),g(ie.$$.fragment,e),Ra=!0)},o(e){v(V.$$.fragment,e),v(z.$$.fragment,e),v(K.$$.fragment,e),v(Q.$$.fragment,e),v(X.$$.fragment,e),v(Z.$$.fragment,e),v(ee.$$.fragment,e),v(ae.$$.fragment,e),v(oe.$$.fragment,e),v(te.$$.fragment,e),v(ne.$$.fragment,e),v(re.$$.fragment,e),v(ie.$$.fragment,e),Ra=!1},d(e){o(P),e&&o(ra),e&&o(C),b(V),e&&o(ia),e&&o(U),e&&o(fa),e&&o(R),e&&o(ha),e&&o(A),b(z),e&&o(da),e&&o(B),e&&o(pa),e&&o(he),e&&o(ca),e&&o(E),e&&o(ua),b(K,e),e&&o(_a),e&&o(O),e&&o(wa),e&&o(ce),e&&o(ma),b(Q,e),e&&o(ga),e&&o(ue),e&&o(va),b(X,e),e&&o(ba),e&&o(j),e&&o(ya),b(Z,e),e&&o($a),e&&o(u),e&&o(Ea),b(ee,e),e&&o(ja),e&&o(H),b(ae),e&&o(ka),e&&o(k),e&&o(xa),e&&o(T),b(oe),e&&o(qa),e&&o(S),e&&o(Da),e&&o(ve),e&&o(Pa),b(te,e),e&&o(Ca),e&&o(L),e&&o(Aa),b(ne,e),e&&o(Oa),e&&o(x),e&&o(Ha),e&&o(c),e&&o(Ta),e&&o(q),e&&o(Sa),e&&o(W),e&&o(La),b(re,e),e&&o(Ia),e&&o(y),e&&o(Na),b(ie,e),e&&o(Ua),e&&o(J)}}}const Rn={local:"download-files-from-the-hub",sections:[{local:"download-and-store-a-file-from-the-hub",title:"Download and store a file from the Hub"},{local:"construct-a-download-url",title:"Construct a download URL"},{local:"download-an-entire-repository",title:"Download an entire repository"}],title:"Download files from the Hub"};function Mn(Ht){return Nn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Wn extends Hn{constructor(P){super();Tn(this,P,Mn,Un,Sn,{})}}export{Wn as default,Rn as metadata};
