import{S as _c,i as bc,s as $c,e as s,k as h,w as v,t as c,M as vc,c as n,d as t,m as d,a as r,x as y,h as i,b as f,G as e,g as $,y as E,q as w,o as x,B as C,v as yc,L as Ga}from"../../chunks/vendor-hf-doc-builder.js";import{T as Ge}from"../../chunks/Tip-hf-doc-builder.js";import{D as T}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Qa}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as J}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Ma}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Ec(z){let o,u,p,m,_;return m=new Qa({props:{code:`    assets/
    \u2514\u2500\u2500 datasets/
    \u2502   \u251C\u2500\u2500 SQuAD/
    \u2502   \u2502   \u251C\u2500\u2500 downloaded/
    \u2502   \u2502   \u251C\u2500\u2500 extracted/
    \u2502   \u2502   \u2514\u2500\u2500 processed/
    \u2502   \u251C\u2500\u2500 Helsinki-NLP--tatoeba_mt/
    \u2502       \u251C\u2500\u2500 downloaded/
    \u2502       \u251C\u2500\u2500 extracted/
    \u2502       \u2514\u2500\u2500 processed/
    \u2514\u2500\u2500 transformers/
        \u251C\u2500\u2500 default/
        \u2502   \u251C\u2500\u2500 something/
        \u251C\u2500\u2500 bert-base-cased/
        \u2502   \u251C\u2500\u2500 default/
        \u2502   \u2514\u2500\u2500 training/
    hub/
    \u2514\u2500\u2500 models--julien-c--EsperBERTo-small/
        \u251C\u2500\u2500 blobs/
        \u2502   \u251C\u2500\u2500 (...)
        \u2502   \u251C\u2500\u2500 (...)
        \u251C\u2500\u2500 refs/
        \u2502   \u2514\u2500\u2500 (...)
        \u2514\u2500\u2500 [ 128]  snapshots/
            \u251C\u2500\u2500 2439f60ef33a0d46d85da5001d52aeda5b00ce9f/
            \u2502   \u251C\u2500\u2500 (...)
            \u2514\u2500\u2500 bbc77c8132af1cc5cf678da3f1ddf2de43606d48/
                \u2514\u2500\u2500 (...)`,highlighted:`    assets/
    \u2514\u2500\u2500 datasets/
    \u2502   \u251C\u2500\u2500 SQuAD/
    \u2502   \u2502   \u251C\u2500\u2500 downloaded/
    \u2502   \u2502   \u251C\u2500\u2500 extracted/
    \u2502   \u2502   \u2514\u2500\u2500 processed/
    \u2502   \u251C\u2500\u2500 Helsinki-NLP--tatoeba_mt/
    \u2502       \u251C\u2500\u2500 downloaded/
    \u2502       \u251C\u2500\u2500 extracted/
    \u2502       \u2514\u2500\u2500 processed/
    \u2514\u2500\u2500 transformers/
        \u251C\u2500\u2500 default/
        \u2502   \u251C\u2500\u2500 something/
        \u251C\u2500\u2500 bert-base-cased/
        \u2502   \u251C\u2500\u2500 default/
        \u2502   \u2514\u2500\u2500 training/
    hub/
    \u2514\u2500\u2500 models--julien-c--EsperBERTo-small/
        \u251C\u2500\u2500 blobs/
        \u2502   \u251C\u2500\u2500 (...)
        \u2502   \u251C\u2500\u2500 (...)
        \u251C\u2500\u2500 refs/
        \u2502   \u2514\u2500\u2500 (...)
        \u2514\u2500\u2500 [ 128]  snapshots/
            \u251C\u2500\u2500 2439f60ef33a0d46d85da5001d52aeda5b00ce9f/
            \u2502   \u251C\u2500\u2500 (...)
            \u2514\u2500\u2500 bbc77c8132af1cc5cf678da3f1ddf2de43606d48/
                \u2514\u2500\u2500 (...)`}}),{c(){o=s("p"),u=c("Expected tree:"),p=h(),v(m.$$.fragment)},l(l){o=n(l,"P",{});var b=r(o);u=i(b,"Expected tree:"),b.forEach(t),p=d(l),y(m.$$.fragment,l)},m(l,b){$(l,o,b),e(o,u),$(l,p,b),E(m,l,b),_=!0},p:Ga,i(l){_||(w(m.$$.fragment,l),_=!0)},o(l){x(m.$$.fragment,l),_=!1},d(l){l&&t(o),l&&t(p),C(m,l)}}}function wc(z){let o,u,p,m,_;return m=new Qa({props:{code:`from huggingface_hub import cached_assets_path

cached_assets_path(library_name="datasets", namespace="SQuAD", subfolder="download")

cached_assets_path(library_name="datasets", namespace="SQuAD", subfolder="extracted")

cached_assets_path(library_name="datasets", namespace="Helsinki-NLP/tatoeba_mt")

cached_assets_path(library_name="datasets", assets_dir="/tmp/tmp123456")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> cached_assets_path

<span class="hljs-meta">&gt;&gt;&gt; </span>cached_assets_path(library_name=<span class="hljs-string">&quot;datasets&quot;</span>, namespace=<span class="hljs-string">&quot;SQuAD&quot;</span>, subfolder=<span class="hljs-string">&quot;download&quot;</span>)
PosixPath(<span class="hljs-string">&#x27;/home/wauplin/.cache/huggingface/extra/datasets/SQuAD/download&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>cached_assets_path(library_name=<span class="hljs-string">&quot;datasets&quot;</span>, namespace=<span class="hljs-string">&quot;SQuAD&quot;</span>, subfolder=<span class="hljs-string">&quot;extracted&quot;</span>)
PosixPath(<span class="hljs-string">&#x27;/home/wauplin/.cache/huggingface/extra/datasets/SQuAD/extracted&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>cached_assets_path(library_name=<span class="hljs-string">&quot;datasets&quot;</span>, namespace=<span class="hljs-string">&quot;Helsinki-NLP/tatoeba_mt&quot;</span>)
PosixPath(<span class="hljs-string">&#x27;/home/wauplin/.cache/huggingface/extra/datasets/Helsinki-NLP--tatoeba_mt/default&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>cached_assets_path(library_name=<span class="hljs-string">&quot;datasets&quot;</span>, assets_dir=<span class="hljs-string">&quot;/tmp/tmp123456&quot;</span>)
PosixPath(<span class="hljs-string">&#x27;/tmp/tmp123456/datasets/default/default&#x27;</span>)`}}),{c(){o=s("p"),u=c("Example:"),p=h(),v(m.$$.fragment)},l(l){o=n(l,"P",{});var b=r(o);u=i(b,"Example:"),b.forEach(t),p=d(l),y(m.$$.fragment,l)},m(l,b){$(l,o,b),e(o,u),$(l,p,b),E(m,l,b),_=!0},p:Ga,i(l){_||(w(m.$$.fragment,l),_=!0)},o(l){x(m.$$.fragment,l),_=!1},d(l){l&&t(o),l&&t(p),C(m,l)}}}function xc(z){let o,u;return o=new Qa({props:{code:`from huggingface_hub import scan_cache_dir

hf_cache_info = scan_cache_dir()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> scan_cache_dir

<span class="hljs-meta">&gt;&gt;&gt; </span>hf_cache_info = scan_cache_dir()
HFCacheInfo(
    size_on_disk=<span class="hljs-number">3398085269</span>,
    repos=<span class="hljs-built_in">frozenset</span>({
        CachedRepoInfo(
            repo_id=<span class="hljs-string">&#x27;t5-small&#x27;</span>,
            repo_type=<span class="hljs-string">&#x27;model&#x27;</span>,
            repo_path=PosixPath(...),
            size_on_disk=<span class="hljs-number">970726914</span>,
            nb_files=<span class="hljs-number">11</span>,
            revisions=<span class="hljs-built_in">frozenset</span>({
                CachedRevisionInfo(
                    commit_hash=<span class="hljs-string">&#x27;d78aea13fa7ecd06c29e3e46195d6341255065d5&#x27;</span>,
                    size_on_disk=<span class="hljs-number">970726339</span>,
                    snapshot_path=PosixPath(...),
                    files=<span class="hljs-built_in">frozenset</span>({
                        CachedFileInfo(
                            file_name=<span class="hljs-string">&#x27;config.json&#x27;</span>,
                            size_on_disk=<span class="hljs-number">1197</span>
                            file_path=PosixPath(...),
                            blob_path=PosixPath(...),
                        ),
                        CachedFileInfo(...),
                        ...
                    }),
                ),
                CachedRevisionInfo(...),
                ...
            }),
        ),
        CachedRepoInfo(...),
        ...
    }),
    warnings=[
        CorruptedCacheException(<span class="hljs-string">&quot;Snapshots dir doesn&#x27;t exist in cached repo: ...&quot;</span>),
        CorruptedCacheException(...),
        ...
    ],
)`}}),{c(){v(o.$$.fragment)},l(p){y(o.$$.fragment,p)},m(p,m){E(o,p,m),u=!0},p:Ga,i(p){u||(w(o.$$.fragment,p),u=!0)},o(p){x(o.$$.fragment,p),u=!1},d(p){C(o,p)}}}function Cc(z){let o,u,p,m,_,l,b,k;return b=new Qa({props:{code:`> huggingface-cli scan-cache
REPO ID                     REPO TYPE SIZE ON DISK NB FILES REFS                LOCAL PATH
--------------------------- --------- ------------ -------- ------------------- -------------------------------------------------------------------------
glue                        dataset         116.3K       15 1.17.0, main, 2.4.0 /Users/lucain/.cache/huggingface/hub/datasets--glue
google/fleurs               dataset          64.9M        6 main, refs/pr/1     /Users/lucain/.cache/huggingface/hub/datasets--google--fleurs
Jean-Baptiste/camembert-ner model           441.0M        7 main                /Users/lucain/.cache/huggingface/hub/models--Jean-Baptiste--camembert-ner
bert-base-cased             model             1.9G       13 main                /Users/lucain/.cache/huggingface/hub/models--bert-base-cased
t5-base                     model            10.1K        3 main                /Users/lucain/.cache/huggingface/hub/models--t5-base
t5-small                    model           970.7M       11 refs/pr/1, main     /Users/lucain/.cache/huggingface/hub/models--t5-small

Done in 0.0s. Scanned 6 repo(s) for a total of 3.4G.
Got 1 warning(s) while scanning. Use -vvv to print details.`,highlighted:`&gt; huggingface-cli scan-cache
REPO ID                     REPO TYPE SIZE ON DISK NB FILES REFS                LOCAL PATH
--------------------------- --------- ------------ -------- ------------------- -------------------------------------------------------------------------
glue                        dataset         116.3K       15 1.17.0, main, 2.4.0 /Users/lucain/.cache/huggingface/hub/datasets--glue
google/fleurs               dataset          64.9M        6 main, refs/pr/1     /Users/lucain/.cache/huggingface/hub/datasets--google--fleurs
Jean-Baptiste/camembert-ner model           441.0M        7 main                /Users/lucain/.cache/huggingface/hub/models--Jean-Baptiste--camembert-ner
bert-base-cased             model             1.9G       13 main                /Users/lucain/.cache/huggingface/hub/models--bert-base-cased
t5-base                     model            10.1K        3 main                /Users/lucain/.cache/huggingface/hub/models--t5-base
t5-small                    model           970.7M       11 refs/pr/1, main     /Users/lucain/.cache/huggingface/hub/models--t5-small

Done in 0.0s. Scanned 6 repo(s) for a total of 3.4G.
Got 1 warning(s) while scanning. Use -vvv to print details.`}}),{c(){o=s("p"),u=c("You can also print a detailed report directly from the "),p=s("code"),m=c("huggingface-cli"),_=c(" using:"),l=h(),v(b.$$.fragment)},l(P){o=n(P,"P",{});var F=r(o);u=i(F,"You can also print a detailed report directly from the "),p=n(F,"CODE",{});var S=r(p);m=i(S,"huggingface-cli"),S.forEach(t),_=i(F," using:"),F.forEach(t),l=d(P),y(b.$$.fragment,P)},m(P,F){$(P,o,F),e(o,u),e(o,p),e(p,m),e(o,_),$(P,l,F),E(b,P,F),k=!0},p:Ga,i(P){k||(w(b.$$.fragment,P),k=!0)},o(P){x(b.$$.fragment,P),k=!1},d(P){P&&t(o),P&&t(l),C(b,P)}}}function kc(z){let o,u,p,m,_;return{c(){o=s("p"),u=c("Here "),p=s("code"),m=c("size_on_disk"),_=c(` is equal to the sum of all repo sizes (only blobs). However if
some cached repos are corrupted, their sizes are not taken into account.`)},l(l){o=n(l,"P",{});var b=r(o);u=i(b,"Here "),p=n(b,"CODE",{});var k=r(p);m=i(k,"size_on_disk"),k.forEach(t),_=i(b,` is equal to the sum of all repo sizes (only blobs). However if
some cached repos are corrupted, their sizes are not taken into account.`),b.forEach(t)},m(l,b){$(l,o,b),e(o,u),e(o,p),e(p,m),e(o,_)},d(l){l&&t(o)}}}function Ic(z){let o,u,p,m,_;return m=new Qa({props:{code:`from huggingface_hub import scan_cache_dir
cache_info = scan_cache_dir()
delete_strategy = cache_info.delete_revisions(
    "81fd1d6e7847c99f5862c9fb81387956d99ec7aa"
)
print(f"Will free {delete_strategy.expected_freed_size_str}.")
delete_strategy.execute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> scan_cache_dir
<span class="hljs-meta">&gt;&gt;&gt; </span>cache_info = scan_cache_dir()
<span class="hljs-meta">&gt;&gt;&gt; </span>delete_strategy = cache_info.delete_revisions(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;81fd1d6e7847c99f5862c9fb81387956d99ec7aa&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Will free <span class="hljs-subst">{delete_strategy.expected_freed_size_str}</span>.&quot;</span>)
Will free <span class="hljs-number">7.9</span>K.
<span class="hljs-meta">&gt;&gt;&gt; </span>delete_strategy.execute()
Cache deletion done. Saved <span class="hljs-number">7.9</span>K.`}}),{c(){o=s("p"),u=c("Examples:"),p=h(),v(m.$$.fragment)},l(l){o=n(l,"P",{});var b=r(o);u=i(b,"Examples:"),b.forEach(t),p=d(l),y(m.$$.fragment,l)},m(l,b){$(l,o,b),e(o,u),$(l,p,b),E(m,l,b),_=!0},p:Ga,i(l){_||(w(m.$$.fragment,l),_=!0)},o(l){x(m.$$.fragment,l),_=!1},d(l){l&&t(o),l&&t(p),C(m,l)}}}function Pc(z){let o,u;return o=new Qa({props:{code:`from huggingface_hub import scan_cache_dir
scan_cache_dir().delete_revisions(
    "81fd1d6e7847c99f5862c9fb81387956d99ec7aa",
    "e2983b237dccf3ab4937c97fa717319a9ca1a96d",
    "6c0e6080953db56375760c0471a8c5f2929baf11",
).execute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> scan_cache_dir
<span class="hljs-meta">&gt;&gt;&gt; </span>scan_cache_dir().delete_revisions(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;81fd1d6e7847c99f5862c9fb81387956d99ec7aa&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;e2983b237dccf3ab4937c97fa717319a9ca1a96d&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;6c0e6080953db56375760c0471a8c5f2929baf11&quot;</span>,
<span class="hljs-meta">... </span>).execute()
Cache deletion done. Saved <span class="hljs-number">8.6</span>G.`}}),{c(){v(o.$$.fragment)},l(p){y(o.$$.fragment,p)},m(p,m){E(o,p,m),u=!0},p:Ga,i(p){u||(w(o.$$.fragment,p),u=!0)},o(p){x(o.$$.fragment,p),u=!1},d(p){C(o,p)}}}function Sc(z){let o,u,p,m,_,l,b,k,P,F;return{c(){o=s("p"),u=s("code"),p=c("delete_revisions"),m=c(" returns a "),_=s("a"),l=c("DeleteCacheStrategy"),b=c(` object that needs to
be executed. The `),k=s("a"),P=c("DeleteCacheStrategy"),F=c(` is not meant to be modified but
allows having a dry run before actually executing the deletion.`),this.h()},l(S){o=n(S,"P",{});var I=r(o);u=n(I,"CODE",{});var R=r(u);p=i(R,"delete_revisions"),R.forEach(t),m=i(I," returns a "),_=n(I,"A",{href:!0});var B=r(_);l=i(B,"DeleteCacheStrategy"),B.forEach(t),b=i(I,` object that needs to
be executed. The `),k=n(I,"A",{href:!0});var M=r(k);P=i(M,"DeleteCacheStrategy"),M.forEach(t),F=i(I,` is not meant to be modified but
allows having a dry run before actually executing the deletion.`),I.forEach(t),this.h()},h(){f(_,"href","/docs/huggingface_hub/v0.11.0.rc1/en/package_reference/cache#huggingface_hub.DeleteCacheStrategy"),f(k,"href","/docs/huggingface_hub/v0.11.0.rc1/en/package_reference/cache#huggingface_hub.DeleteCacheStrategy")},m(S,I){$(S,o,I),e(o,u),e(u,p),e(o,m),e(o,_),e(_,l),e(o,b),e(o,k),e(k,P),e(o,F)},d(S){S&&t(o)}}}function zc(z){let o,u,p,m;return{c(){o=s("p"),u=s("code"),p=c("size_on_disk"),m=c(` is not necessarily the sum of all revisions sizes because of
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`)},l(_){o=n(_,"P",{});var l=r(o);u=n(l,"CODE",{});var b=r(u);p=i(b,"size_on_disk"),b.forEach(t),m=i(l,` is not necessarily the sum of all revisions sizes because of
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`),l.forEach(t)},m(_,l){$(_,o,l),e(o,u),e(u,p),e(o,m)},d(_){_&&t(o)}}}function Fc(z){let o,u,p,m,_,l,b,k,P,F;return{c(){o=s("p"),u=s("code"),p=c("last_accessed"),m=c(" and "),_=s("code"),l=c("last_modified"),b=c(` reliability can depend on the OS you are using.
See `),k=s("a"),P=c("python documentation"),F=c(`
for more details.`),this.h()},l(S){o=n(S,"P",{});var I=r(o);u=n(I,"CODE",{});var R=r(u);p=i(R,"last_accessed"),R.forEach(t),m=i(I," and "),_=n(I,"CODE",{});var B=r(_);l=i(B,"last_modified"),B.forEach(t),b=i(I,` reliability can depend on the OS you are using.
See `),k=n(I,"A",{href:!0,rel:!0});var M=r(k);P=i(M,"python documentation"),M.forEach(t),F=i(I,`
for more details.`),I.forEach(t),this.h()},h(){f(k,"href","https://docs.python.org/3/library/os.html#os.stat_result"),f(k,"rel","nofollow")},m(S,I){$(S,o,I),e(o,u),e(u,p),e(o,m),e(o,_),e(_,l),e(o,b),e(o,k),e(k,P),e(o,F)},d(S){S&&t(o)}}}function Dc(z){let o,u,p,m;return{c(){o=s("p"),u=s("code"),p=c("last_accessed"),m=c(` cannot be determined correctly on a single revision as blob files
are shared across revisions.`)},l(_){o=n(_,"P",{});var l=r(o);u=n(l,"CODE",{});var b=r(u);p=i(b,"last_accessed"),b.forEach(t),m=i(l,` cannot be determined correctly on a single revision as blob files
are shared across revisions.`),l.forEach(t)},m(_,l){$(_,o,l),e(o,u),e(u,p),e(o,m)},d(_){_&&t(o)}}}function jc(z){let o,u,p,m;return{c(){o=s("p"),u=s("code"),p=c("size_on_disk"),m=c(` is not necessarily the sum of all file sizes because of possible
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`)},l(_){o=n(_,"P",{});var l=r(o);u=n(l,"CODE",{});var b=r(u);p=i(b,"size_on_disk"),b.forEach(t),m=i(l,` is not necessarily the sum of all file sizes because of possible
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`),l.forEach(t)},m(_,l){$(_,o,l),e(o,u),e(u,p),e(o,m)},d(_){_&&t(o)}}}function Ac(z){let o,u,p,m,_,l,b,k,P,F;return{c(){o=s("p"),u=s("code"),p=c("blob_last_accessed"),m=c(" and "),_=s("code"),l=c("blob_last_modified"),b=c(` reliability can depend on the OS you
are using. See `),k=s("a"),P=c("python documentation"),F=c(`
for more details.`),this.h()},l(S){o=n(S,"P",{});var I=r(o);u=n(I,"CODE",{});var R=r(u);p=i(R,"blob_last_accessed"),R.forEach(t),m=i(I," and "),_=n(I,"CODE",{});var B=r(_);l=i(B,"blob_last_modified"),B.forEach(t),b=i(I,` reliability can depend on the OS you
are using. See `),k=n(I,"A",{href:!0,rel:!0});var M=r(k);P=i(M,"python documentation"),M.forEach(t),F=i(I,`
for more details.`),I.forEach(t),this.h()},h(){f(k,"href","https://docs.python.org/3/library/os.html#os.stat_result"),f(k,"rel","nofollow")},m(S,I){$(S,o,I),e(o,u),e(u,p),e(o,m),e(o,_),e(_,l),e(o,b),e(o,k),e(k,P),e(o,F)},d(S){S&&t(o)}}}function Hc(z){let o,u,p,m,_,l,b,k,P,F,S,I,R,B,M,Zt,te,_e,Ja,Qe,Rs,Wa,Ns,Xt,se,be,Ya,Je,Ts,Za,Os,es,D,We,Ls,Xa,Us,Vs,Fa,et,Ks,Bs,Ms,ne,Gs,at,Qs,Js,Ye,Ws,Ys,Zs,re,Xs,tt,en,an,st,tn,sn,nn,$e,rn,ve,as,oe,ye,nt,Ze,on,rt,cn,ts,j,Xe,ln,ea,hn,Da,dn,fn,pn,W,gn,ot,un,mn,ja,_n,bn,Aa,$n,vn,yn,Ee,En,we,wn,aa,xn,ta,Cn,Ha,kn,In,ss,ce,xe,ct,sa,Pn,it,Sn,ns,Ce,zn,qa,Fn,Dn,rs,ie,ke,lt,na,jn,ht,An,os,N,ra,Hn,dt,qn,Rn,oa,Nn,Ra,Tn,On,Ln,Ie,Un,q,ca,Vn,ft,Kn,Bn,pt,Mn,Gn,Pe,Qn,Se,Jn,ze,cs,le,Fe,gt,ia,Wn,ut,Yn,is,H,la,Zn,mt,Xn,er,De,ar,je,tr,Y,ha,sr,_t,nr,rr,bt,or,cr,Ae,da,ir,fa,lr,$t,hr,dr,ls,he,He,vt,pa,fr,yt,pr,hs,A,ga,gr,Et,ur,mr,de,_r,wt,br,$r,xt,vr,yr,Er,qe,wr,Re,xr,Z,ua,Cr,Ct,kr,Ir,kt,Pr,Sr,Ne,ma,zr,It,Fr,ds,fe,Te,Pt,_a,Dr,St,jr,fs,V,ba,Ar,zt,Hr,qr,Oe,Rr,X,$a,Nr,Ft,Tr,Or,Dt,Lr,ps,pe,Le,jt,va,Ur,At,Vr,gs,K,ya,Kr,Ht,Br,Mr,Ea,Gr,Na,Qr,Jr,Wr,ee,wa,Yr,qt,Zr,Xr,Rt,eo,us,ge,Ue,Nt,xa,ao,Tt,to,ms,ue,Ve,Ot,Ca,so,Lt,no,_s,me,ka,ro,Ut,oo,bs;return l=new J({}),Qe=new J({}),Je=new J({}),We=new T({props:{name:"huggingface_hub.cached_assets_path",anchor:"huggingface_hub.cached_assets_path",parameters:[{name:"library_name",val:": str"},{name:"namespace",val:": str = 'default'"},{name:"subfolder",val:": str = 'default'"},{name:"assets_dir",val:": typing.Union[str, pathlib.Path, NoneType] = None"}],parametersDescription:[{anchor:"huggingface_hub.cached_assets_path.library_name",description:`<strong>library_name</strong> (<code>str</code>) &#x2014;
Name of the library that will manage the cache folder. Example: <code>&quot;dataset&quot;</code>.`,name:"library_name"},{anchor:"huggingface_hub.cached_assets_path.namespace",description:`<strong>namespace</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;default&#x201D;) &#x2014;
Namespace to which the data belongs. Example: <code>&quot;SQuAD&quot;</code>.`,name:"namespace"},{anchor:"huggingface_hub.cached_assets_path.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;default&#x201D;) &#x2014;
Subfolder in which the data will be stored. Example: <code>extracted</code>.`,name:"subfolder"},{anchor:"huggingface_hub.cached_assets_path.assets_dir",description:`<strong>assets_dir</strong> (<code>str</code>, <code>Path</code>, <em>optional</em>) &#x2014;
Path to the folder where assets are cached. This must not be the same folder
where Hub files are cached. Defaults to <code>HF_HOME / &quot;assets&quot;</code> if not provided.
Can also be set with <code>HUGGINGFACE_ASSETS_CACHE</code> environment variable.`,name:"assets_dir"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_assets.py#L21",returnDescription:`
<p>Path to the cache folder (<code>Path</code>).</p>
`}}),$e=new Ma({props:{anchor:"huggingface_hub.cached_assets_path.example",$$slots:{default:[Ec]},$$scope:{ctx:z}}}),ve=new Ma({props:{anchor:"huggingface_hub.cached_assets_path.example-2",$$slots:{default:[wc]},$$scope:{ctx:z}}}),Ze=new J({}),Xe=new T({props:{name:"huggingface_hub.scan_cache_dir",anchor:"huggingface_hub.scan_cache_dir",parameters:[{name:"cache_dir",val:": typing.Union[str, pathlib.Path, NoneType] = None"}],parametersDescription:[{anchor:"huggingface_hub.scan_cache_dir.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>Path</code>, <code>optional</code>) &#x2014;
Cache directory to cache. Defaults to the default HF cache directory.`,name:"cache_dir"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_manager.py#L502",raiseDescription:`
<ul>
<li>
<p><code>CacheNotFound</code> \u2014
If the cache directory does not exist.</p>
</li>
<li>
<p><a
  href="https://docs.python.org/3/library/exceptions.html#ValueError"
  rel="nofollow"
><code>ValueError</code></a> \u2014
If the cache directory is a file, instead of a directory.</p>
</li>
</ul>
`,raiseType:`
<p><code>CacheNotFound</code> or <code>ValueError</code></p>
`}}),Ee=new Ma({props:{anchor:"huggingface_hub.scan_cache_dir.example",$$slots:{default:[xc]},$$scope:{ctx:z}}}),we=new Ma({props:{anchor:"huggingface_hub.scan_cache_dir.example-2",$$slots:{default:[Cc]},$$scope:{ctx:z}}}),aa=new Ge({props:{warning:!0}}),sa=new J({}),na=new J({}),ra=new T({props:{name:"class huggingface_hub.HFCacheInfo",anchor:"huggingface_hub.HFCacheInfo",parameters:[{name:"size_on_disk",val:": int"},{name:"repos",val:": typing.FrozenSet[huggingface_hub.utils._cache_manager.CachedRepoInfo]"},{name:"warnings",val:": typing.List[huggingface_hub.utils._cache_manager.CorruptedCacheException]"}],parametersDescription:[{anchor:"huggingface_hub.HFCacheInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Sum of all valid repo sizes in the cache-system.`,name:"size_on_disk"},{anchor:"huggingface_hub.HFCacheInfo.repos",description:`<strong>repos</strong> (<code>FrozenSet[CachedRepoInfo]</code>) &#x2014;
Set of <a href="/docs/huggingface_hub/v0.11.0.rc1/en/package_reference/cache#huggingface_hub.CachedRepoInfo">~CachedRepoInfo</a> describing all valid cached repos found on the
cache-system while scanning.`,name:"repos"},{anchor:"huggingface_hub.HFCacheInfo.warnings",description:`<strong>warnings</strong> (<code>List[CorruptedCacheException]</code>) &#x2014;
List of <a href="/docs/huggingface_hub/v0.11.0.rc1/en/package_reference/cache#huggingface_hub.CorruptedCacheException">~CorruptedCacheException</a> that occurred while scanning the cache.
Those exceptions are captured so that the scan can continue. Corrupted repos
are skipped from the scan.`,name:"warnings"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_manager.py#L355"}}),Ie=new Ge({props:{warning:!0,$$slots:{default:[kc]},$$scope:{ctx:z}}}),ca=new T({props:{name:"delete_revisions",anchor:"huggingface_hub.HFCacheInfo.delete_revisions",parameters:[{name:"*revisions",val:": str"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_manager.py#L393"}}),Pe=new Ma({props:{anchor:"huggingface_hub.HFCacheInfo.delete_revisions.example",$$slots:{default:[Ic]},$$scope:{ctx:z}}}),Se=new Ma({props:{anchor:"huggingface_hub.HFCacheInfo.delete_revisions.example-2",$$slots:{default:[Pc]},$$scope:{ctx:z}}}),ze=new Ge({props:{warning:!0,$$slots:{default:[Sc]},$$scope:{ctx:z}}}),ia=new J({}),la=new T({props:{name:"class huggingface_hub.CachedRepoInfo",anchor:"huggingface_hub.CachedRepoInfo",parameters:[{name:"repo_id",val:": str"},{name:"repo_type",val:": typing.Literal['model', 'dataset', 'space']"},{name:"repo_path",val:": Path"},{name:"size_on_disk",val:": int"},{name:"nb_files",val:": int"},{name:"revisions",val:": typing.FrozenSet[huggingface_hub.utils._cache_manager.CachedRevisionInfo]"},{name:"last_accessed",val:": float"},{name:"last_modified",val:": float"}],parametersDescription:[{anchor:"huggingface_hub.CachedRepoInfo.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
Repo id of the repo on the Hub. Example: <code>&quot;google/fleurs&quot;</code>.`,name:"repo_id"},{anchor:"huggingface_hub.CachedRepoInfo.repo_type",description:`<strong>repo_type</strong> (<code>Literal[&quot;dataset&quot;, &quot;model&quot;, &quot;space&quot;]</code>) &#x2014;
Type of the cached repo.`,name:"repo_type"},{anchor:"huggingface_hub.CachedRepoInfo.repo_path",description:`<strong>repo_path</strong> (<code>Path</code>) &#x2014;
Local path to the cached repo.`,name:"repo_path"},{anchor:"huggingface_hub.CachedRepoInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Sum of the blob file sizes in the cached repo.`,name:"size_on_disk"},{anchor:"huggingface_hub.CachedRepoInfo.nb_files",description:`<strong>nb_files</strong> (<code>int</code>) &#x2014;
Total number of blob files in the cached repo.`,name:"nb_files"},{anchor:"huggingface_hub.CachedRepoInfo.revisions",description:`<strong>revisions</strong> (<code>FrozenSet[CachedRevisionInfo]</code>) &#x2014;
Set of <a href="/docs/huggingface_hub/v0.11.0.rc1/en/package_reference/cache#huggingface_hub.CachedRevisionInfo">~CachedRevisionInfo</a> describing all revisions cached in the repo.`,name:"revisions"},{anchor:"huggingface_hub.CachedRepoInfo.last_accessed",description:`<strong>last_accessed</strong> (<code>float</code>) &#x2014;
Timestamp of the last time a blob file of the repo has been accessed.`,name:"last_accessed"},{anchor:"huggingface_hub.CachedRepoInfo.last_modified",description:`<strong>last_modified</strong> (<code>float</code>) &#x2014;
Timestamp of the last time a blob file of the repo has been modified/created.`,name:"last_modified"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_manager.py#L193"}}),De=new Ge({props:{warning:!0,$$slots:{default:[zc]},$$scope:{ctx:z}}}),je=new Ge({props:{warning:!0,$$slots:{default:[Fc]},$$scope:{ctx:z}}}),ha=new T({props:{name:"size_on_disk_str",anchor:"huggingface_hub.CachedRepoInfo.size_on_disk_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_manager.py#L261"}}),da=new T({props:{name:"refs",anchor:"huggingface_hub.CachedRepoInfo.refs",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_manager.py#L270"}}),pa=new J({}),ga=new T({props:{name:"class huggingface_hub.CachedRevisionInfo",anchor:"huggingface_hub.CachedRevisionInfo",parameters:[{name:"commit_hash",val:": str"},{name:"snapshot_path",val:": Path"},{name:"size_on_disk",val:": int"},{name:"files",val:": typing.FrozenSet[huggingface_hub.utils._cache_manager.CachedFileInfo]"},{name:"refs",val:": typing.FrozenSet[str]"},{name:"last_modified",val:": float"}],parametersDescription:[{anchor:"huggingface_hub.CachedRevisionInfo.commit_hash",description:`<strong>commit_hash</strong> (<code>str</code>) &#x2014;
Hash of the revision (unique).
Example: <code>&quot;9338f7b671827df886678df2bdd7cc7b4f36dffd&quot;</code>.`,name:"commit_hash"},{anchor:"huggingface_hub.CachedRevisionInfo.snapshot_path",description:`<strong>snapshot_path</strong> (<code>Path</code>) &#x2014;
Path to the revision directory in the <code>snapshots</code> folder. It contains the
exact tree structure as the repo on the Hub.
files &#x2014; (<code>FrozenSet[CachedFileInfo]</code>):
Set of <a href="/docs/huggingface_hub/v0.11.0.rc1/en/package_reference/cache#huggingface_hub.CachedFileInfo">~CachedFileInfo</a> describing all files contained in the snapshot.`,name:"snapshot_path"},{anchor:"huggingface_hub.CachedRevisionInfo.refs",description:`<strong>refs</strong> (<code>FrozenSet[str]</code>) &#x2014;
Set of <code>refs</code> pointing to this revision. If the revision has no <code>refs</code>, it
is considered detached.
Example: <code>{&quot;main&quot;, &quot;2.4.0&quot;}</code> or <code>{&quot;refs/pr/1&quot;}</code>.`,name:"refs"},{anchor:"huggingface_hub.CachedRevisionInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Sum of the blob file sizes that are symlink-ed by the revision.`,name:"size_on_disk"},{anchor:"huggingface_hub.CachedRevisionInfo.last_modified",description:`<strong>last_modified</strong> (<code>float</code>) &#x2014;
Timestamp of the last time the revision has been created/modified.`,name:"last_modified"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_manager.py#L116"}}),qe=new Ge({props:{warning:!0,$$slots:{default:[Dc]},$$scope:{ctx:z}}}),Re=new Ge({props:{warning:!0,$$slots:{default:[jc]},$$scope:{ctx:z}}}),ua=new T({props:{name:"size_on_disk_str",anchor:"huggingface_hub.CachedRevisionInfo.size_on_disk_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_manager.py#L175"}}),ma=new T({props:{name:"nb_files",anchor:"huggingface_hub.CachedRevisionInfo.nb_files",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_manager.py#L184"}}),_a=new J({}),ba=new T({props:{name:"class huggingface_hub.CachedFileInfo",anchor:"huggingface_hub.CachedFileInfo",parameters:[{name:"file_name",val:": str"},{name:"file_path",val:": Path"},{name:"blob_path",val:": Path"},{name:"size_on_disk",val:": int"},{name:"blob_last_accessed",val:": float"},{name:"blob_last_modified",val:": float"}],parametersDescription:[{anchor:"huggingface_hub.CachedFileInfo.file_name",description:`<strong>file_name</strong> (<code>str</code>) &#x2014;
Name of the file. Example: <code>config.json</code>.`,name:"file_name"},{anchor:"huggingface_hub.CachedFileInfo.file_path",description:`<strong>file_path</strong> (<code>Path</code>) &#x2014;
Path of the file in the <code>snapshots</code> directory. The file path is a symlink
referring to a blob in the <code>blobs</code> folder.`,name:"file_path"},{anchor:"huggingface_hub.CachedFileInfo.blob_path",description:`<strong>blob_path</strong> (<code>Path</code>) &#x2014;
Path of the blob file. This is equivalent to <code>file_path.resolve()</code>.`,name:"blob_path"},{anchor:"huggingface_hub.CachedFileInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Size of the blob file in bytes.`,name:"size_on_disk"},{anchor:"huggingface_hub.CachedFileInfo.blob_last_accessed",description:`<strong>blob_last_accessed</strong> (<code>float</code>) &#x2014;
Timestamp of the last time the blob file has been accessed (from any
revision).`,name:"blob_last_accessed"},{anchor:"huggingface_hub.CachedFileInfo.blob_last_modified",description:`<strong>blob_last_modified</strong> (<code>float</code>) &#x2014;
Timestamp of the last time the blob file has been modified/created.`,name:"blob_last_modified"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_manager.py#L49"}}),Oe=new Ge({props:{warning:!0,$$slots:{default:[Ac]},$$scope:{ctx:z}}}),$a=new T({props:{name:"size_on_disk_str",anchor:"huggingface_hub.CachedFileInfo.size_on_disk_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_manager.py#L105"}}),va=new J({}),ya=new T({props:{name:"class huggingface_hub.DeleteCacheStrategy",anchor:"huggingface_hub.DeleteCacheStrategy",parameters:[{name:"expected_freed_size",val:": int"},{name:"blobs",val:": typing.FrozenSet[pathlib.Path]"},{name:"refs",val:": typing.FrozenSet[pathlib.Path]"},{name:"repos",val:": typing.FrozenSet[pathlib.Path]"},{name:"snapshots",val:": typing.FrozenSet[pathlib.Path]"}],parametersDescription:[{anchor:"huggingface_hub.DeleteCacheStrategy.expected_freed_size",description:`<strong>expected_freed_size</strong> (<code>float</code>) &#x2014;
Expected freed size once strategy is executed.`,name:"expected_freed_size"},{anchor:"huggingface_hub.DeleteCacheStrategy.blobs",description:`<strong>blobs</strong> (<code>FrozenSet[Path]</code>) &#x2014;
Set of blob file paths to be deleted.`,name:"blobs"},{anchor:"huggingface_hub.DeleteCacheStrategy.refs",description:`<strong>refs</strong> (<code>FrozenSet[Path]</code>) &#x2014;
Set of reference file paths to be deleted.`,name:"refs"},{anchor:"huggingface_hub.DeleteCacheStrategy.repos",description:`<strong>repos</strong> (<code>FrozenSet[Path]</code>) &#x2014;
Set of entire repo paths to be deleted.`,name:"repos"},{anchor:"huggingface_hub.DeleteCacheStrategy.snapshots",description:`<strong>snapshots</strong> (<code>FrozenSet[Path]</code>) &#x2014;
Set of snapshots to be deleted (directory of symlinks).`,name:"snapshots"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_manager.py#L279"}}),wa=new T({props:{name:"expected_freed_size_str",anchor:"huggingface_hub.DeleteCacheStrategy.expected_freed_size_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_manager.py#L304"}}),xa=new J({}),Ca=new J({}),ka=new T({props:{name:"class huggingface_hub.CorruptedCacheException",anchor:"huggingface_hub.CorruptedCacheException",parameters:"",source:"https://github.com/huggingface/huggingface_hub/blob/v0.11.0.rc1/src/huggingface_hub/utils/_cache_manager.py#L44"}}),{c(){o=s("meta"),u=h(),p=s("h1"),m=s("a"),_=s("span"),v(l.$$.fragment),b=h(),k=s("span"),P=c("Cache-system reference"),F=h(),S=s("p"),I=c(`The caching system was updated in v0.8.0 to become the central cache-system shared
across libraries that depend on the Hub. Read the `),R=s("a"),B=c("cache-system guide"),M=c(`
for a detailed presentation of caching at HF.`),Zt=h(),te=s("h2"),_e=s("a"),Ja=s("span"),v(Qe.$$.fragment),Rs=h(),Wa=s("span"),Ns=c("Helpers"),Xt=h(),se=s("h2"),be=s("a"),Ya=s("span"),v(Je.$$.fragment),Ts=h(),Za=s("span"),Os=c("cached_assets_path"),es=h(),D=s("div"),v(We.$$.fragment),Ls=h(),Xa=s("p"),Us=c("Return a folder path to cache arbitrary files."),Vs=h(),Fa=s("p"),et=s("code"),Ks=c("huggingface_hub"),Bs=c(` provides a canonical folder path to store assets. This is the
recommended way to integrate cache in a downstream library as it will benefit from
the builtins tools to scan and delete the cache properly.`),Ms=h(),ne=s("p"),Gs=c(`The distinction is made between files cached from the Hub and assets. Files from the
Hub are cached in a git-aware manner and entirely managed by `),at=s("code"),Qs=c("huggingface_hub"),Js=c(`. See
`),Ye=s("a"),Ws=c("related documentation"),Ys=c(`.
All other files that a downstream library caches are considered to be \u201Cassets\u201D
(files downloaded from external sources, extracted from a .tar archive, preprocessed
for training,\u2026).`),Zs=h(),re=s("p"),Xs=c(`Once the folder path is generated, it is guaranteed to exist and to be a directory.
The path is based on 3 levels of depth: the library name, a namespace and a
subfolder. Those 3 levels grants flexibility while allowing `),tt=s("code"),en=c("huggingface_hub"),an=c(` to
expect folders when scanning/deleting parts of the assets cache. Within a library,
it is expected that all namespaces share the same subset of subfolder names but this
is not a mandatory rule. The downstream library has then full control on which file
structure to adopt within its cache. Namespace and subfolder are optional (would
default to a `),st=s("code"),tn=c('"default/"'),sn=c(` subfolder) but library name is mandatory as we want every
downstream library to manage its own cache.`),nn=h(),v($e.$$.fragment),rn=h(),v(ve.$$.fragment),as=h(),oe=s("h3"),ye=s("a"),nt=s("span"),v(Ze.$$.fragment),on=h(),rt=s("span"),cn=c("scan_cache_dir"),ts=h(),j=s("div"),v(Xe.$$.fragment),ln=h(),ea=s("p"),hn=c("Scan the entire HF cache-system and return a "),Da=s("a"),dn=c("~HFCacheInfo"),fn=c(" structure."),pn=h(),W=s("p"),gn=c("Use "),ot=s("code"),un=c("scan_cache_dir"),mn=c(` in order to programmatically scan your cache-system. The cache
will be scanned repo by repo. If a repo is corrupted, a `),ja=s("a"),_n=c("~CorruptedCacheException"),bn=c(`
will be thrown internally but captured and returned in the `),Aa=s("a"),$n=c("~HFCacheInfo"),vn=c(`
structure. Only valid repos get a proper report.`),yn=h(),v(Ee.$$.fragment),En=h(),v(we.$$.fragment),wn=h(),v(aa.$$.fragment),xn=h(),ta=s("p"),Cn=c("Returns: a "),Ha=s("a"),kn=c("~HFCacheInfo"),In=c(" object."),ss=h(),ce=s("h2"),xe=s("a"),ct=s("span"),v(sa.$$.fragment),Pn=h(),it=s("span"),Sn=c("Data structures"),ns=h(),Ce=s("p"),zn=c("All structures are built and returned by "),qa=s("a"),Fn=c("scan_cache_dir()"),Dn=c(" and are immutable."),rs=h(),ie=s("h3"),ke=s("a"),lt=s("span"),v(na.$$.fragment),jn=h(),ht=s("span"),An=c("HFCacheInfo"),os=h(),N=s("div"),v(ra.$$.fragment),Hn=h(),dt=s("p"),qn=c("Frozen data structure holding information about the entire cache-system."),Rn=h(),oa=s("p"),Nn=c("This data structure is returned by "),Ra=s("a"),Tn=c("scan_cache_dir()"),On=c(" and is immutable."),Ln=h(),v(Ie.$$.fragment),Un=h(),q=s("div"),v(ca.$$.fragment),Vn=h(),ft=s("p"),Kn=c("Prepare the strategy to delete one or more revisions cached locally."),Bn=h(),pt=s("p"),Mn=c(`Input revisions can be any revision hash. If a revision hash is not found in the
local cache, a warning is thrown but no error is raised. Revisions can be from
different cached repos since hashes are unique across repos,`),Gn=h(),v(Pe.$$.fragment),Qn=h(),v(Se.$$.fragment),Jn=h(),v(ze.$$.fragment),cs=h(),le=s("h3"),Fe=s("a"),gt=s("span"),v(ia.$$.fragment),Wn=h(),ut=s("span"),Yn=c("CachedRepoInfo"),is=h(),H=s("div"),v(la.$$.fragment),Zn=h(),mt=s("p"),Xn=c("Frozen data structure holding information about a cached repository."),er=h(),v(De.$$.fragment),ar=h(),v(je.$$.fragment),tr=h(),Y=s("div"),v(ha.$$.fragment),sr=h(),_t=s("p"),nr=c("(property) Sum of the blob file sizes as a human-readable string."),rr=h(),bt=s("p"),or=c("Example: \u201C42.2K\u201D."),cr=h(),Ae=s("div"),v(da.$$.fragment),ir=h(),fa=s("p"),lr=c("(property) Mapping between "),$t=s("code"),hr=c("refs"),dr=c(" and revision data structures."),ls=h(),he=s("h3"),He=s("a"),vt=s("span"),v(pa.$$.fragment),fr=h(),yt=s("span"),pr=c("CachedRevisionInfo"),hs=h(),A=s("div"),v(ga.$$.fragment),gr=h(),Et=s("p"),ur=c("Frozen data structure holding information about a revision."),mr=h(),de=s("p"),_r=c("A revision correspond to a folder in the "),wt=s("code"),br=c("snapshots"),$r=c(` folder and is populated with
the exact tree structure as the repo on the Hub but contains only symlinks. A
revision can be either referenced by 1 or more `),xt=s("code"),vr=c("refs"),yr=c(" or be \u201Cdetached\u201D (no refs)."),Er=h(),v(qe.$$.fragment),wr=h(),v(Re.$$.fragment),xr=h(),Z=s("div"),v(ua.$$.fragment),Cr=h(),Ct=s("p"),kr=c("(property) Sum of the blob file sizes as a human-readable string."),Ir=h(),kt=s("p"),Pr=c("Example: \u201C42.2K\u201D."),Sr=h(),Ne=s("div"),v(ma.$$.fragment),zr=h(),It=s("p"),Fr=c("(property) Total number of files in the revision."),ds=h(),fe=s("h3"),Te=s("a"),Pt=s("span"),v(_a.$$.fragment),Dr=h(),St=s("span"),jr=c("CachedFileInfo"),fs=h(),V=s("div"),v(ba.$$.fragment),Ar=h(),zt=s("p"),Hr=c("Frozen data structure holding information about a single cached file."),qr=h(),v(Oe.$$.fragment),Rr=h(),X=s("div"),v($a.$$.fragment),Nr=h(),Ft=s("p"),Tr=c("(property) Size of the blob file as a human-readable string."),Or=h(),Dt=s("p"),Lr=c("Example: \u201C42.2K\u201D."),ps=h(),pe=s("h3"),Le=s("a"),jt=s("span"),v(va.$$.fragment),Ur=h(),At=s("span"),Vr=c("DeleteCacheStrategy"),gs=h(),K=s("div"),v(ya.$$.fragment),Kr=h(),Ht=s("p"),Br=c("Frozen data structure holding the strategy to delete cached revisions."),Mr=h(),Ea=s("p"),Gr=c(`This object is not meant to be instantiated programmatically but to be returned by
`),Na=s("a"),Qr=c("delete_revisions()"),Jr=c(". See documentation for usage example."),Wr=h(),ee=s("div"),v(wa.$$.fragment),Yr=h(),qt=s("p"),Zr=c("(property) Expected size that will be freed as a human-readable string."),Xr=h(),Rt=s("p"),eo=c("Example: \u201C42.2K\u201D."),us=h(),ge=s("h2"),Ue=s("a"),Nt=s("span"),v(xa.$$.fragment),ao=h(),Tt=s("span"),to=c("Exceptions"),ms=h(),ue=s("h3"),Ve=s("a"),Ot=s("span"),v(Ca.$$.fragment),so=h(),Lt=s("span"),no=c("CorruptedCacheException"),_s=h(),me=s("div"),v(ka.$$.fragment),ro=h(),Ut=s("p"),oo=c("Exception for any unexpected structure in the Huggingface cache-system."),this.h()},l(a){const g=vc('[data-svelte="svelte-1phssyn"]',document.head);o=n(g,"META",{name:!0,content:!0}),g.forEach(t),u=d(a),p=n(a,"H1",{class:!0});var Ia=r(p);m=n(Ia,"A",{id:!0,class:!0,href:!0});var Vt=r(m);_=n(Vt,"SPAN",{});var Kt=r(_);y(l.$$.fragment,Kt),Kt.forEach(t),Vt.forEach(t),b=d(Ia),k=n(Ia,"SPAN",{});var Bt=r(k);P=i(Bt,"Cache-system reference"),Bt.forEach(t),Ia.forEach(t),F=d(a),S=n(a,"P",{});var Pa=r(S);I=i(Pa,`The caching system was updated in v0.8.0 to become the central cache-system shared
across libraries that depend on the Hub. Read the `),R=n(Pa,"A",{href:!0});var Mt=r(R);B=i(Mt,"cache-system guide"),Mt.forEach(t),M=i(Pa,`
for a detailed presentation of caching at HF.`),Pa.forEach(t),Zt=d(a),te=n(a,"H2",{class:!0});var Sa=r(te);_e=n(Sa,"A",{id:!0,class:!0,href:!0});var Gt=r(_e);Ja=n(Gt,"SPAN",{});var Qt=r(Ja);y(Qe.$$.fragment,Qt),Qt.forEach(t),Gt.forEach(t),Rs=d(Sa),Wa=n(Sa,"SPAN",{});var Jt=r(Wa);Ns=i(Jt,"Helpers"),Jt.forEach(t),Sa.forEach(t),Xt=d(a),se=n(a,"H2",{class:!0});var za=r(se);be=n(za,"A",{id:!0,class:!0,href:!0});var Wt=r(be);Ya=n(Wt,"SPAN",{});var Yt=r(Ya);y(Je.$$.fragment,Yt),Yt.forEach(t),Wt.forEach(t),Ts=d(za),Za=n(za,"SPAN",{});var io=r(Za);Os=i(io,"cached_assets_path"),io.forEach(t),za.forEach(t),es=d(a),D=n(a,"DIV",{class:!0});var O=r(D);y(We.$$.fragment,O),Ls=d(O),Xa=n(O,"P",{});var lo=r(Xa);Us=i(lo,"Return a folder path to cache arbitrary files."),lo.forEach(t),Vs=d(O),Fa=n(O,"P",{});var co=r(Fa);et=n(co,"CODE",{});var ho=r(et);Ks=i(ho,"huggingface_hub"),ho.forEach(t),Bs=i(co,` provides a canonical folder path to store assets. This is the
recommended way to integrate cache in a downstream library as it will benefit from
the builtins tools to scan and delete the cache properly.`),co.forEach(t),Ms=d(O),ne=n(O,"P",{});var Ta=r(ne);Gs=i(Ta,`The distinction is made between files cached from the Hub and assets. Files from the
Hub are cached in a git-aware manner and entirely managed by `),at=n(Ta,"CODE",{});var fo=r(at);Qs=i(fo,"huggingface_hub"),fo.forEach(t),Js=i(Ta,`. See
`),Ye=n(Ta,"A",{href:!0,rel:!0});var po=r(Ye);Ws=i(po,"related documentation"),po.forEach(t),Ys=i(Ta,`.
All other files that a downstream library caches are considered to be \u201Cassets\u201D
(files downloaded from external sources, extracted from a .tar archive, preprocessed
for training,\u2026).`),Ta.forEach(t),Zs=d(O),re=n(O,"P",{});var Oa=r(re);Xs=i(Oa,`Once the folder path is generated, it is guaranteed to exist and to be a directory.
The path is based on 3 levels of depth: the library name, a namespace and a
subfolder. Those 3 levels grants flexibility while allowing `),tt=n(Oa,"CODE",{});var go=r(tt);en=i(go,"huggingface_hub"),go.forEach(t),an=i(Oa,` to
expect folders when scanning/deleting parts of the assets cache. Within a library,
it is expected that all namespaces share the same subset of subfolder names but this
is not a mandatory rule. The downstream library has then full control on which file
structure to adopt within its cache. Namespace and subfolder are optional (would
default to a `),st=n(Oa,"CODE",{});var uo=r(st);tn=i(uo,'"default/"'),uo.forEach(t),sn=i(Oa,` subfolder) but library name is mandatory as we want every
downstream library to manage its own cache.`),Oa.forEach(t),nn=d(O),y($e.$$.fragment,O),rn=d(O),y(ve.$$.fragment,O),O.forEach(t),as=d(a),oe=n(a,"H3",{class:!0});var $s=r(oe);ye=n($s,"A",{id:!0,class:!0,href:!0});var mo=r(ye);nt=n(mo,"SPAN",{});var _o=r(nt);y(Ze.$$.fragment,_o),_o.forEach(t),mo.forEach(t),on=d($s),rt=n($s,"SPAN",{});var bo=r(rt);cn=i(bo,"scan_cache_dir"),bo.forEach(t),$s.forEach(t),ts=d(a),j=n(a,"DIV",{class:!0});var L=r(j);y(Xe.$$.fragment,L),ln=d(L),ea=n(L,"P",{});var vs=r(ea);hn=i(vs,"Scan the entire HF cache-system and return a "),Da=n(vs,"A",{href:!0});var $o=r(Da);dn=i($o,"~HFCacheInfo"),$o.forEach(t),fn=i(vs," structure."),vs.forEach(t),pn=d(L),W=n(L,"P",{});var Ke=r(W);gn=i(Ke,"Use "),ot=n(Ke,"CODE",{});var vo=r(ot);un=i(vo,"scan_cache_dir"),vo.forEach(t),mn=i(Ke,` in order to programmatically scan your cache-system. The cache
will be scanned repo by repo. If a repo is corrupted, a `),ja=n(Ke,"A",{href:!0});var yo=r(ja);_n=i(yo,"~CorruptedCacheException"),yo.forEach(t),bn=i(Ke,`
will be thrown internally but captured and returned in the `),Aa=n(Ke,"A",{href:!0});var Eo=r(Aa);$n=i(Eo,"~HFCacheInfo"),Eo.forEach(t),vn=i(Ke,`
structure. Only valid repos get a proper report.`),Ke.forEach(t),yn=d(L),y(Ee.$$.fragment,L),En=d(L),y(we.$$.fragment,L),wn=d(L),y(aa.$$.fragment,L),xn=d(L),ta=n(L,"P",{});var ys=r(ta);Cn=i(ys,"Returns: a "),Ha=n(ys,"A",{href:!0});var wo=r(Ha);kn=i(wo,"~HFCacheInfo"),wo.forEach(t),In=i(ys," object."),ys.forEach(t),L.forEach(t),ss=d(a),ce=n(a,"H2",{class:!0});var Es=r(ce);xe=n(Es,"A",{id:!0,class:!0,href:!0});var xo=r(xe);ct=n(xo,"SPAN",{});var Co=r(ct);y(sa.$$.fragment,Co),Co.forEach(t),xo.forEach(t),Pn=d(Es),it=n(Es,"SPAN",{});var ko=r(it);Sn=i(ko,"Data structures"),ko.forEach(t),Es.forEach(t),ns=d(a),Ce=n(a,"P",{});var ws=r(Ce);zn=i(ws,"All structures are built and returned by "),qa=n(ws,"A",{href:!0});var Io=r(qa);Fn=i(Io,"scan_cache_dir()"),Io.forEach(t),Dn=i(ws," and are immutable."),ws.forEach(t),rs=d(a),ie=n(a,"H3",{class:!0});var xs=r(ie);ke=n(xs,"A",{id:!0,class:!0,href:!0});var Po=r(ke);lt=n(Po,"SPAN",{});var So=r(lt);y(na.$$.fragment,So),So.forEach(t),Po.forEach(t),jn=d(xs),ht=n(xs,"SPAN",{});var zo=r(ht);An=i(zo,"HFCacheInfo"),zo.forEach(t),xs.forEach(t),os=d(a),N=n(a,"DIV",{class:!0});var ae=r(N);y(ra.$$.fragment,ae),Hn=d(ae),dt=n(ae,"P",{});var Fo=r(dt);qn=i(Fo,"Frozen data structure holding information about the entire cache-system."),Fo.forEach(t),Rn=d(ae),oa=n(ae,"P",{});var Cs=r(oa);Nn=i(Cs,"This data structure is returned by "),Ra=n(Cs,"A",{href:!0});var Do=r(Ra);Tn=i(Do,"scan_cache_dir()"),Do.forEach(t),On=i(Cs," and is immutable."),Cs.forEach(t),Ln=d(ae),y(Ie.$$.fragment,ae),Un=d(ae),q=n(ae,"DIV",{class:!0});var G=r(q);y(ca.$$.fragment,G),Vn=d(G),ft=n(G,"P",{});var jo=r(ft);Kn=i(jo,"Prepare the strategy to delete one or more revisions cached locally."),jo.forEach(t),Bn=d(G),pt=n(G,"P",{});var Ao=r(pt);Mn=i(Ao,`Input revisions can be any revision hash. If a revision hash is not found in the
local cache, a warning is thrown but no error is raised. Revisions can be from
different cached repos since hashes are unique across repos,`),Ao.forEach(t),Gn=d(G),y(Pe.$$.fragment,G),Qn=d(G),y(Se.$$.fragment,G),Jn=d(G),y(ze.$$.fragment,G),G.forEach(t),ae.forEach(t),cs=d(a),le=n(a,"H3",{class:!0});var ks=r(le);Fe=n(ks,"A",{id:!0,class:!0,href:!0});var Ho=r(Fe);gt=n(Ho,"SPAN",{});var qo=r(gt);y(ia.$$.fragment,qo),qo.forEach(t),Ho.forEach(t),Wn=d(ks),ut=n(ks,"SPAN",{});var Ro=r(ut);Yn=i(Ro,"CachedRepoInfo"),Ro.forEach(t),ks.forEach(t),is=d(a),H=n(a,"DIV",{class:!0});var Q=r(H);y(la.$$.fragment,Q),Zn=d(Q),mt=n(Q,"P",{});var No=r(mt);Xn=i(No,"Frozen data structure holding information about a cached repository."),No.forEach(t),er=d(Q),y(De.$$.fragment,Q),ar=d(Q),y(je.$$.fragment,Q),tr=d(Q),Y=n(Q,"DIV",{class:!0});var La=r(Y);y(ha.$$.fragment,La),sr=d(La),_t=n(La,"P",{});var To=r(_t);nr=i(To,"(property) Sum of the blob file sizes as a human-readable string."),To.forEach(t),rr=d(La),bt=n(La,"P",{});var Oo=r(bt);or=i(Oo,"Example: \u201C42.2K\u201D."),Oo.forEach(t),La.forEach(t),cr=d(Q),Ae=n(Q,"DIV",{class:!0});var Is=r(Ae);y(da.$$.fragment,Is),ir=d(Is),fa=n(Is,"P",{});var Ps=r(fa);lr=i(Ps,"(property) Mapping between "),$t=n(Ps,"CODE",{});var Lo=r($t);hr=i(Lo,"refs"),Lo.forEach(t),dr=i(Ps," and revision data structures."),Ps.forEach(t),Is.forEach(t),Q.forEach(t),ls=d(a),he=n(a,"H3",{class:!0});var Ss=r(he);He=n(Ss,"A",{id:!0,class:!0,href:!0});var Uo=r(He);vt=n(Uo,"SPAN",{});var Vo=r(vt);y(pa.$$.fragment,Vo),Vo.forEach(t),Uo.forEach(t),fr=d(Ss),yt=n(Ss,"SPAN",{});var Ko=r(yt);pr=i(Ko,"CachedRevisionInfo"),Ko.forEach(t),Ss.forEach(t),hs=d(a),A=n(a,"DIV",{class:!0});var U=r(A);y(ga.$$.fragment,U),gr=d(U),Et=n(U,"P",{});var Bo=r(Et);ur=i(Bo,"Frozen data structure holding information about a revision."),Bo.forEach(t),mr=d(U),de=n(U,"P",{});var Ua=r(de);_r=i(Ua,"A revision correspond to a folder in the "),wt=n(Ua,"CODE",{});var Mo=r(wt);br=i(Mo,"snapshots"),Mo.forEach(t),$r=i(Ua,` folder and is populated with
the exact tree structure as the repo on the Hub but contains only symlinks. A
revision can be either referenced by 1 or more `),xt=n(Ua,"CODE",{});var Go=r(xt);vr=i(Go,"refs"),Go.forEach(t),yr=i(Ua," or be \u201Cdetached\u201D (no refs)."),Ua.forEach(t),Er=d(U),y(qe.$$.fragment,U),wr=d(U),y(Re.$$.fragment,U),xr=d(U),Z=n(U,"DIV",{class:!0});var Va=r(Z);y(ua.$$.fragment,Va),Cr=d(Va),Ct=n(Va,"P",{});var Qo=r(Ct);kr=i(Qo,"(property) Sum of the blob file sizes as a human-readable string."),Qo.forEach(t),Ir=d(Va),kt=n(Va,"P",{});var Jo=r(kt);Pr=i(Jo,"Example: \u201C42.2K\u201D."),Jo.forEach(t),Va.forEach(t),Sr=d(U),Ne=n(U,"DIV",{class:!0});var zs=r(Ne);y(ma.$$.fragment,zs),zr=d(zs),It=n(zs,"P",{});var Wo=r(It);Fr=i(Wo,"(property) Total number of files in the revision."),Wo.forEach(t),zs.forEach(t),U.forEach(t),ds=d(a),fe=n(a,"H3",{class:!0});var Fs=r(fe);Te=n(Fs,"A",{id:!0,class:!0,href:!0});var Yo=r(Te);Pt=n(Yo,"SPAN",{});var Zo=r(Pt);y(_a.$$.fragment,Zo),Zo.forEach(t),Yo.forEach(t),Dr=d(Fs),St=n(Fs,"SPAN",{});var Xo=r(St);jr=i(Xo,"CachedFileInfo"),Xo.forEach(t),Fs.forEach(t),fs=d(a),V=n(a,"DIV",{class:!0});var Be=r(V);y(ba.$$.fragment,Be),Ar=d(Be),zt=n(Be,"P",{});var ec=r(zt);Hr=i(ec,"Frozen data structure holding information about a single cached file."),ec.forEach(t),qr=d(Be),y(Oe.$$.fragment,Be),Rr=d(Be),X=n(Be,"DIV",{class:!0});var Ka=r(X);y($a.$$.fragment,Ka),Nr=d(Ka),Ft=n(Ka,"P",{});var ac=r(Ft);Tr=i(ac,"(property) Size of the blob file as a human-readable string."),ac.forEach(t),Or=d(Ka),Dt=n(Ka,"P",{});var tc=r(Dt);Lr=i(tc,"Example: \u201C42.2K\u201D."),tc.forEach(t),Ka.forEach(t),Be.forEach(t),ps=d(a),pe=n(a,"H3",{class:!0});var Ds=r(pe);Le=n(Ds,"A",{id:!0,class:!0,href:!0});var sc=r(Le);jt=n(sc,"SPAN",{});var nc=r(jt);y(va.$$.fragment,nc),nc.forEach(t),sc.forEach(t),Ur=d(Ds),At=n(Ds,"SPAN",{});var rc=r(At);Vr=i(rc,"DeleteCacheStrategy"),rc.forEach(t),Ds.forEach(t),gs=d(a),K=n(a,"DIV",{class:!0});var Me=r(K);y(ya.$$.fragment,Me),Kr=d(Me),Ht=n(Me,"P",{});var oc=r(Ht);Br=i(oc,"Frozen data structure holding the strategy to delete cached revisions."),oc.forEach(t),Mr=d(Me),Ea=n(Me,"P",{});var js=r(Ea);Gr=i(js,`This object is not meant to be instantiated programmatically but to be returned by
`),Na=n(js,"A",{href:!0});var cc=r(Na);Qr=i(cc,"delete_revisions()"),cc.forEach(t),Jr=i(js,". See documentation for usage example."),js.forEach(t),Wr=d(Me),ee=n(Me,"DIV",{class:!0});var Ba=r(ee);y(wa.$$.fragment,Ba),Yr=d(Ba),qt=n(Ba,"P",{});var ic=r(qt);Zr=i(ic,"(property) Expected size that will be freed as a human-readable string."),ic.forEach(t),Xr=d(Ba),Rt=n(Ba,"P",{});var lc=r(Rt);eo=i(lc,"Example: \u201C42.2K\u201D."),lc.forEach(t),Ba.forEach(t),Me.forEach(t),us=d(a),ge=n(a,"H2",{class:!0});var As=r(ge);Ue=n(As,"A",{id:!0,class:!0,href:!0});var hc=r(Ue);Nt=n(hc,"SPAN",{});var dc=r(Nt);y(xa.$$.fragment,dc),dc.forEach(t),hc.forEach(t),ao=d(As),Tt=n(As,"SPAN",{});var fc=r(Tt);to=i(fc,"Exceptions"),fc.forEach(t),As.forEach(t),ms=d(a),ue=n(a,"H3",{class:!0});var Hs=r(ue);Ve=n(Hs,"A",{id:!0,class:!0,href:!0});var pc=r(Ve);Ot=n(pc,"SPAN",{});var gc=r(Ot);y(Ca.$$.fragment,gc),gc.forEach(t),pc.forEach(t),so=d(Hs),Lt=n(Hs,"SPAN",{});var uc=r(Lt);no=i(uc,"CorruptedCacheException"),uc.forEach(t),Hs.forEach(t),_s=d(a),me=n(a,"DIV",{class:!0});var qs=r(me);y(ka.$$.fragment,qs),ro=d(qs),Ut=n(qs,"P",{});var mc=r(Ut);oo=i(mc,"Exception for any unexpected structure in the Huggingface cache-system."),mc.forEach(t),qs.forEach(t),this.h()},h(){f(o,"name","hf:doc:metadata"),f(o,"content",JSON.stringify(qc)),f(m,"id","cachesystem-reference"),f(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(m,"href","#cachesystem-reference"),f(p,"class","relative group"),f(R,"href","../how-to-cache"),f(_e,"id","helpers"),f(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(_e,"href","#helpers"),f(te,"class","relative group"),f(be,"id","huggingface_hub.cached_assets_path"),f(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(be,"href","#huggingface_hub.cached_assets_path"),f(se,"class","relative group"),f(Ye,"href","https://huggingface.co/docs/huggingface_hub/how-to-cache"),f(Ye,"rel","nofollow"),f(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(ye,"id","huggingface_hub.scan_cache_dir"),f(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ye,"href","#huggingface_hub.scan_cache_dir"),f(oe,"class","relative group"),f(Da,"href","/docs/huggingface_hub/v0.11.0.rc1/en/package_reference/cache#huggingface_hub.HFCacheInfo"),f(ja,"href","/docs/huggingface_hub/v0.11.0.rc1/en/package_reference/cache#huggingface_hub.CorruptedCacheException"),f(Aa,"href","/docs/huggingface_hub/v0.11.0.rc1/en/package_reference/cache#huggingface_hub.HFCacheInfo"),f(Ha,"href","/docs/huggingface_hub/v0.11.0.rc1/en/package_reference/cache#huggingface_hub.HFCacheInfo"),f(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(xe,"id","data-structures"),f(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(xe,"href","#data-structures"),f(ce,"class","relative group"),f(qa,"href","/docs/huggingface_hub/v0.11.0.rc1/en/package_reference/cache#huggingface_hub.scan_cache_dir"),f(ke,"id","huggingface_hub.HFCacheInfo"),f(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ke,"href","#huggingface_hub.HFCacheInfo"),f(ie,"class","relative group"),f(Ra,"href","/docs/huggingface_hub/v0.11.0.rc1/en/package_reference/cache#huggingface_hub.scan_cache_dir"),f(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Fe,"id","huggingface_hub.CachedRepoInfo"),f(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Fe,"href","#huggingface_hub.CachedRepoInfo"),f(le,"class","relative group"),f(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(He,"id","huggingface_hub.CachedRevisionInfo"),f(He,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(He,"href","#huggingface_hub.CachedRevisionInfo"),f(he,"class","relative group"),f(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Te,"id","huggingface_hub.CachedFileInfo"),f(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Te,"href","#huggingface_hub.CachedFileInfo"),f(fe,"class","relative group"),f(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Le,"id","huggingface_hub.DeleteCacheStrategy"),f(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Le,"href","#huggingface_hub.DeleteCacheStrategy"),f(pe,"class","relative group"),f(Na,"href","/docs/huggingface_hub/v0.11.0.rc1/en/package_reference/cache#huggingface_hub.HFCacheInfo.delete_revisions"),f(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Ue,"id","exceptions"),f(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ue,"href","#exceptions"),f(ge,"class","relative group"),f(Ve,"id","huggingface_hub.CorruptedCacheException"),f(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ve,"href","#huggingface_hub.CorruptedCacheException"),f(ue,"class","relative group"),f(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(a,g){e(document.head,o),$(a,u,g),$(a,p,g),e(p,m),e(m,_),E(l,_,null),e(p,b),e(p,k),e(k,P),$(a,F,g),$(a,S,g),e(S,I),e(S,R),e(R,B),e(S,M),$(a,Zt,g),$(a,te,g),e(te,_e),e(_e,Ja),E(Qe,Ja,null),e(te,Rs),e(te,Wa),e(Wa,Ns),$(a,Xt,g),$(a,se,g),e(se,be),e(be,Ya),E(Je,Ya,null),e(se,Ts),e(se,Za),e(Za,Os),$(a,es,g),$(a,D,g),E(We,D,null),e(D,Ls),e(D,Xa),e(Xa,Us),e(D,Vs),e(D,Fa),e(Fa,et),e(et,Ks),e(Fa,Bs),e(D,Ms),e(D,ne),e(ne,Gs),e(ne,at),e(at,Qs),e(ne,Js),e(ne,Ye),e(Ye,Ws),e(ne,Ys),e(D,Zs),e(D,re),e(re,Xs),e(re,tt),e(tt,en),e(re,an),e(re,st),e(st,tn),e(re,sn),e(D,nn),E($e,D,null),e(D,rn),E(ve,D,null),$(a,as,g),$(a,oe,g),e(oe,ye),e(ye,nt),E(Ze,nt,null),e(oe,on),e(oe,rt),e(rt,cn),$(a,ts,g),$(a,j,g),E(Xe,j,null),e(j,ln),e(j,ea),e(ea,hn),e(ea,Da),e(Da,dn),e(ea,fn),e(j,pn),e(j,W),e(W,gn),e(W,ot),e(ot,un),e(W,mn),e(W,ja),e(ja,_n),e(W,bn),e(W,Aa),e(Aa,$n),e(W,vn),e(j,yn),E(Ee,j,null),e(j,En),E(we,j,null),e(j,wn),E(aa,j,null),e(j,xn),e(j,ta),e(ta,Cn),e(ta,Ha),e(Ha,kn),e(ta,In),$(a,ss,g),$(a,ce,g),e(ce,xe),e(xe,ct),E(sa,ct,null),e(ce,Pn),e(ce,it),e(it,Sn),$(a,ns,g),$(a,Ce,g),e(Ce,zn),e(Ce,qa),e(qa,Fn),e(Ce,Dn),$(a,rs,g),$(a,ie,g),e(ie,ke),e(ke,lt),E(na,lt,null),e(ie,jn),e(ie,ht),e(ht,An),$(a,os,g),$(a,N,g),E(ra,N,null),e(N,Hn),e(N,dt),e(dt,qn),e(N,Rn),e(N,oa),e(oa,Nn),e(oa,Ra),e(Ra,Tn),e(oa,On),e(N,Ln),E(Ie,N,null),e(N,Un),e(N,q),E(ca,q,null),e(q,Vn),e(q,ft),e(ft,Kn),e(q,Bn),e(q,pt),e(pt,Mn),e(q,Gn),E(Pe,q,null),e(q,Qn),E(Se,q,null),e(q,Jn),E(ze,q,null),$(a,cs,g),$(a,le,g),e(le,Fe),e(Fe,gt),E(ia,gt,null),e(le,Wn),e(le,ut),e(ut,Yn),$(a,is,g),$(a,H,g),E(la,H,null),e(H,Zn),e(H,mt),e(mt,Xn),e(H,er),E(De,H,null),e(H,ar),E(je,H,null),e(H,tr),e(H,Y),E(ha,Y,null),e(Y,sr),e(Y,_t),e(_t,nr),e(Y,rr),e(Y,bt),e(bt,or),e(H,cr),e(H,Ae),E(da,Ae,null),e(Ae,ir),e(Ae,fa),e(fa,lr),e(fa,$t),e($t,hr),e(fa,dr),$(a,ls,g),$(a,he,g),e(he,He),e(He,vt),E(pa,vt,null),e(he,fr),e(he,yt),e(yt,pr),$(a,hs,g),$(a,A,g),E(ga,A,null),e(A,gr),e(A,Et),e(Et,ur),e(A,mr),e(A,de),e(de,_r),e(de,wt),e(wt,br),e(de,$r),e(de,xt),e(xt,vr),e(de,yr),e(A,Er),E(qe,A,null),e(A,wr),E(Re,A,null),e(A,xr),e(A,Z),E(ua,Z,null),e(Z,Cr),e(Z,Ct),e(Ct,kr),e(Z,Ir),e(Z,kt),e(kt,Pr),e(A,Sr),e(A,Ne),E(ma,Ne,null),e(Ne,zr),e(Ne,It),e(It,Fr),$(a,ds,g),$(a,fe,g),e(fe,Te),e(Te,Pt),E(_a,Pt,null),e(fe,Dr),e(fe,St),e(St,jr),$(a,fs,g),$(a,V,g),E(ba,V,null),e(V,Ar),e(V,zt),e(zt,Hr),e(V,qr),E(Oe,V,null),e(V,Rr),e(V,X),E($a,X,null),e(X,Nr),e(X,Ft),e(Ft,Tr),e(X,Or),e(X,Dt),e(Dt,Lr),$(a,ps,g),$(a,pe,g),e(pe,Le),e(Le,jt),E(va,jt,null),e(pe,Ur),e(pe,At),e(At,Vr),$(a,gs,g),$(a,K,g),E(ya,K,null),e(K,Kr),e(K,Ht),e(Ht,Br),e(K,Mr),e(K,Ea),e(Ea,Gr),e(Ea,Na),e(Na,Qr),e(Ea,Jr),e(K,Wr),e(K,ee),E(wa,ee,null),e(ee,Yr),e(ee,qt),e(qt,Zr),e(ee,Xr),e(ee,Rt),e(Rt,eo),$(a,us,g),$(a,ge,g),e(ge,Ue),e(Ue,Nt),E(xa,Nt,null),e(ge,ao),e(ge,Tt),e(Tt,to),$(a,ms,g),$(a,ue,g),e(ue,Ve),e(Ve,Ot),E(Ca,Ot,null),e(ue,so),e(ue,Lt),e(Lt,no),$(a,_s,g),$(a,me,g),E(ka,me,null),e(me,ro),e(me,Ut),e(Ut,oo),bs=!0},p(a,[g]){const Ia={};g&2&&(Ia.$$scope={dirty:g,ctx:a}),$e.$set(Ia);const Vt={};g&2&&(Vt.$$scope={dirty:g,ctx:a}),ve.$set(Vt);const Kt={};g&2&&(Kt.$$scope={dirty:g,ctx:a}),Ee.$set(Kt);const Bt={};g&2&&(Bt.$$scope={dirty:g,ctx:a}),we.$set(Bt);const Pa={};g&2&&(Pa.$$scope={dirty:g,ctx:a}),Ie.$set(Pa);const Mt={};g&2&&(Mt.$$scope={dirty:g,ctx:a}),Pe.$set(Mt);const Sa={};g&2&&(Sa.$$scope={dirty:g,ctx:a}),Se.$set(Sa);const Gt={};g&2&&(Gt.$$scope={dirty:g,ctx:a}),ze.$set(Gt);const Qt={};g&2&&(Qt.$$scope={dirty:g,ctx:a}),De.$set(Qt);const Jt={};g&2&&(Jt.$$scope={dirty:g,ctx:a}),je.$set(Jt);const za={};g&2&&(za.$$scope={dirty:g,ctx:a}),qe.$set(za);const Wt={};g&2&&(Wt.$$scope={dirty:g,ctx:a}),Re.$set(Wt);const Yt={};g&2&&(Yt.$$scope={dirty:g,ctx:a}),Oe.$set(Yt)},i(a){bs||(w(l.$$.fragment,a),w(Qe.$$.fragment,a),w(Je.$$.fragment,a),w(We.$$.fragment,a),w($e.$$.fragment,a),w(ve.$$.fragment,a),w(Ze.$$.fragment,a),w(Xe.$$.fragment,a),w(Ee.$$.fragment,a),w(we.$$.fragment,a),w(aa.$$.fragment,a),w(sa.$$.fragment,a),w(na.$$.fragment,a),w(ra.$$.fragment,a),w(Ie.$$.fragment,a),w(ca.$$.fragment,a),w(Pe.$$.fragment,a),w(Se.$$.fragment,a),w(ze.$$.fragment,a),w(ia.$$.fragment,a),w(la.$$.fragment,a),w(De.$$.fragment,a),w(je.$$.fragment,a),w(ha.$$.fragment,a),w(da.$$.fragment,a),w(pa.$$.fragment,a),w(ga.$$.fragment,a),w(qe.$$.fragment,a),w(Re.$$.fragment,a),w(ua.$$.fragment,a),w(ma.$$.fragment,a),w(_a.$$.fragment,a),w(ba.$$.fragment,a),w(Oe.$$.fragment,a),w($a.$$.fragment,a),w(va.$$.fragment,a),w(ya.$$.fragment,a),w(wa.$$.fragment,a),w(xa.$$.fragment,a),w(Ca.$$.fragment,a),w(ka.$$.fragment,a),bs=!0)},o(a){x(l.$$.fragment,a),x(Qe.$$.fragment,a),x(Je.$$.fragment,a),x(We.$$.fragment,a),x($e.$$.fragment,a),x(ve.$$.fragment,a),x(Ze.$$.fragment,a),x(Xe.$$.fragment,a),x(Ee.$$.fragment,a),x(we.$$.fragment,a),x(aa.$$.fragment,a),x(sa.$$.fragment,a),x(na.$$.fragment,a),x(ra.$$.fragment,a),x(Ie.$$.fragment,a),x(ca.$$.fragment,a),x(Pe.$$.fragment,a),x(Se.$$.fragment,a),x(ze.$$.fragment,a),x(ia.$$.fragment,a),x(la.$$.fragment,a),x(De.$$.fragment,a),x(je.$$.fragment,a),x(ha.$$.fragment,a),x(da.$$.fragment,a),x(pa.$$.fragment,a),x(ga.$$.fragment,a),x(qe.$$.fragment,a),x(Re.$$.fragment,a),x(ua.$$.fragment,a),x(ma.$$.fragment,a),x(_a.$$.fragment,a),x(ba.$$.fragment,a),x(Oe.$$.fragment,a),x($a.$$.fragment,a),x(va.$$.fragment,a),x(ya.$$.fragment,a),x(wa.$$.fragment,a),x(xa.$$.fragment,a),x(Ca.$$.fragment,a),x(ka.$$.fragment,a),bs=!1},d(a){t(o),a&&t(u),a&&t(p),C(l),a&&t(F),a&&t(S),a&&t(Zt),a&&t(te),C(Qe),a&&t(Xt),a&&t(se),C(Je),a&&t(es),a&&t(D),C(We),C($e),C(ve),a&&t(as),a&&t(oe),C(Ze),a&&t(ts),a&&t(j),C(Xe),C(Ee),C(we),C(aa),a&&t(ss),a&&t(ce),C(sa),a&&t(ns),a&&t(Ce),a&&t(rs),a&&t(ie),C(na),a&&t(os),a&&t(N),C(ra),C(Ie),C(ca),C(Pe),C(Se),C(ze),a&&t(cs),a&&t(le),C(ia),a&&t(is),a&&t(H),C(la),C(De),C(je),C(ha),C(da),a&&t(ls),a&&t(he),C(pa),a&&t(hs),a&&t(A),C(ga),C(qe),C(Re),C(ua),C(ma),a&&t(ds),a&&t(fe),C(_a),a&&t(fs),a&&t(V),C(ba),C(Oe),C($a),a&&t(ps),a&&t(pe),C(va),a&&t(gs),a&&t(K),C(ya),C(wa),a&&t(us),a&&t(ge),C(xa),a&&t(ms),a&&t(ue),C(Ca),a&&t(_s),a&&t(me),C(ka)}}}const qc={local:"cachesystem-reference",sections:[{local:"helpers",title:"Helpers"},{local:"huggingface_hub.cached_assets_path",sections:[{local:"huggingface_hub.scan_cache_dir",title:"scan_cache_dir"}],title:"cached_assets_path"},{local:"data-structures",sections:[{local:"huggingface_hub.HFCacheInfo",title:"HFCacheInfo"},{local:"huggingface_hub.CachedRepoInfo",title:"CachedRepoInfo"},{local:"huggingface_hub.CachedRevisionInfo",title:"CachedRevisionInfo"},{local:"huggingface_hub.CachedFileInfo",title:"CachedFileInfo"},{local:"huggingface_hub.DeleteCacheStrategy",title:"DeleteCacheStrategy"}],title:"Data structures"},{local:"exceptions",sections:[{local:"huggingface_hub.CorruptedCacheException",title:"CorruptedCacheException"}],title:"Exceptions"}],title:"Cache-system reference"};function Rc(z){return yc(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Kc extends _c{constructor(o){super();bc(this,o,Rc,Hc,$c,{})}}export{Kc as default,qc as metadata};
