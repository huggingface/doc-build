import{S as Hi,i as qi,s as Pi,e as s,k as h,w as m,t as n,M as Ci,c as l,d as a,m as c,a as o,x as y,h as r,b as p,G as t,g as d,y as _,L as Ti,q as v,o as w,B as g,v as xi}from"../../chunks/vendor-hf-doc-builder.js";import{I as B}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as U}from"../../chunks/CodeBlock-hf-doc-builder.js";function Ii(In){let x,ja,I,G,Et,ce,Fs,bt,Ms,ka,W,Rs,ue,Bs,Us,Aa,b,Gs,fe,Ws,Ys,me,Js,Xs,$t,Ks,Qs,jt,Zs,Vs,Ha,H,el,ye,tl,al,kt,sl,ll,qa,D,Y,At,_e,ol,Ht,nl,Pa,$,rl,ve,il,pl,qt,dl,hl,we,cl,ul,Ca,rt,fl,Ta,u,Pt,ge,ml,yl,Ct,Ee,_l,vl,Tt,be,wl,gl,xt,$e,El,bl,It,je,$l,jl,Dt,ke,kl,Al,Nt,Ae,Hl,ql,St,He,Pl,Cl,Lt,qe,Tl,xl,Ot,Pe,Il,Dl,zt,Ce,Nl,xa,N,J,Ft,Te,Sl,Mt,Ll,Ia,q,Ol,Rt,zl,Fl,xe,Ml,Rl,Da,X,Bl,Ie,Ul,Gl,Na,K,Wl,De,Yl,Jl,Sa,Ne,Xl,Se,Kl,La,S,Q,Bt,Le,Ql,Ut,Zl,Oa,Oe,Vl,Gt,eo,za,ze,Fa,it,to,Ma,Z,ao,Fe,so,lo,Ra,Me,Ba,V,oo,Wt,no,ro,Ua,pt,Yt,io,Ga,Re,Wa,L,ee,Jt,Be,po,Xt,ho,Ya,E,co,Kt,uo,fo,Qt,mo,yo,Zt,_o,vo,Vt,wo,go,ea,Eo,bo,Ja,te,Ue,$o,ta,jo,ko,Ao,O,Ho,aa,qo,Po,sa,Co,To,Xa,ae,xo,la,Io,Do,Ka,Ge,Qa,j,No,oa,So,Lo,na,Oo,zo,ra,Fo,Mo,Za,We,Va,z,se,ia,Ye,Ro,pa,Bo,es,le,Uo,Je,Go,Wo,ts,Xe,da,Yo,Jo,as,P,Xo,ha,Ko,Qo,Ke,Zo,Vo,ss,Qe,ls,C,en,ca,tn,an,ua,sn,ln,os,Ze,ns,F,oe,fa,Ve,on,ma,nn,rs,dt,rn,is,et,ps,ht,pn,ds,ct,ya,dn,hs,M,ne,_a,tt,hn,va,cn,cs,ut,un,us,at,fs,k,fn,wa,mn,yn,ga,_n,vn,st,wn,gn,ms,R,re,Ea,lt,En,ba,bn,ys,ft,$n,_s,ie,jn,$a,kn,An,vs,mt,ot,Hn,nt,qn,Pn,ws;return ce=new B({}),_e=new B({}),Te=new B({}),Le=new B({}),ze=new U({props:{code:`# install git-lfs to interact with the repository
sudo apt-get update
sudo apt-get install git-lfs
# install transformers (not needed since it is installed by default in the container)
pip install transformers[sklearn,sentencepiece,audio,vision]`,highlighted:`<span class="hljs-comment"># install git-lfs to interact with the repository</span>
sudo apt-<span class="hljs-built_in">get</span> update
sudo apt-<span class="hljs-built_in">get</span> install git-lfs
<span class="hljs-comment"># install transformers (not needed since it is installed by default in the container)</span>
pip install transformers[sklearn,sentencepiece,audio,vision]`}}),Me=new U({props:{code:`git lfs install
git clone https://huggingface.co/philschmid/distilbert-base-uncased-emotion`,highlighted:`git lfs install
git clone https:<span class="hljs-regexp">//</span>huggingface.co<span class="hljs-regexp">/philschmid/</span>distilbert-base-uncased-emotion`}}),Re=new U({props:{code:`# setup cli with token
huggingface-cli login
git config --global credential.helper store`,highlighted:`# setup <span class="hljs-keyword">cli</span> with <span class="hljs-keyword">token</span>
huggingface-<span class="hljs-keyword">cli</span> login
git config --<span class="hljs-keyword">global</span> credential.helper store`}}),Be=new B({}),Ge=new U({props:{code:"!cd distilbert-base-uncased-emotion && touch handler.py",highlighted:'!<span class="hljs-built_in">cd</span> distilbert-base-uncased-emotion &amp;&amp; <span class="hljs-built_in">touch</span> handler.py'}}),We=new U({props:{code:`from typing import Dict, List, Any

class EndpointHandler():
    def __init__(self, path=""):
        # Preload all the elements you are going to need at inference.
        # pseudo:
        # self.model= load_model(path)

    def __call__(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
       data args:
            inputs (:obj: \`str\` | \`PIL.Image\` | \`np.array\`)
            kwargs
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        """

        # pseudo
        # self.model(input)`,highlighted:`<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Any</span>

<span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointHandler</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path=<span class="hljs-string">&quot;&quot;</span></span>):
        <span class="hljs-comment"># Preload all the elements you are going to need at inference.</span>
        <span class="hljs-comment"># pseudo:</span>
        <span class="hljs-comment"># self.model= load_model(path)</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, data: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]]:
        <span class="hljs-string">&quot;&quot;&quot;
       data args:
            inputs (:obj: \`str\` | \`PIL.Image\` | \`np.array\`)
            kwargs
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        &quot;&quot;&quot;</span>

        <span class="hljs-comment"># pseudo</span>
        <span class="hljs-comment"># self.model(input)</span>`}}),Ye=new B({}),Qe=new U({props:{code:`!echo "holidays" >> requirements.txt
!pip install -r requirements.txt`,highlighted:`!echo <span class="hljs-string">&quot;holidays&quot;</span> &gt;&gt; requirements.txt
!pip install -r requirements.txt`}}),Ze=new U({props:{code:`from typing import Dict, List, Any
from transformers import pipeline
import holidays

class EndpointHandler():
    def __init__(self, path=""):
        self.pipeline = pipeline("text-classification",model=path)
        self.holidays = holidays.US()

    def __call__(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
       data args:
            inputs (:obj: \`str\`)
            date (:obj: \`str\`)
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        """
        # get inputs
        inputs = data.pop("inputs",data)
        date = data.pop("date", None)

        # check if date exists and if it is a holiday
        if date is not None and date in self.holidays:
          return [{"label": "happy", "score": 1}]


        # run normal prediction
        prediction = self.pipeline(inputs)
        return prediction`,highlighted:`<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Any</span>
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">import</span> holidays

<span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointHandler</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path=<span class="hljs-string">&quot;&quot;</span></span>):
        self.pipeline = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>,model=path)
        self.holidays = holidays.US()

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, data: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]]:
        <span class="hljs-string">&quot;&quot;&quot;
       data args:
            inputs (:obj: \`str\`)
            date (:obj: \`str\`)
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        &quot;&quot;&quot;</span>
        <span class="hljs-comment"># get inputs</span>
        inputs = data.pop(<span class="hljs-string">&quot;inputs&quot;</span>,data)
        date = data.pop(<span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-literal">None</span>)

        <span class="hljs-comment"># check if date exists and if it is a holiday</span>
        <span class="hljs-keyword">if</span> date <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> date <span class="hljs-keyword">in</span> self.holidays:
          <span class="hljs-keyword">return</span> [{<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;happy&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">1</span>}]


        <span class="hljs-comment"># run normal prediction</span>
        prediction = self.pipeline(inputs)
        <span class="hljs-keyword">return</span> prediction`}}),Ve=new B({}),et=new U({props:{code:`from handler import EndpointHandler

# init handler
my_handler = EndpointHandler(path=".")

# prepare sample payload
non_holiday_payload = {"inputs": "I am quite excited how this will turn out", "date": "2022-08-08"}
holiday_payload = {"inputs": "Today is a though day", "date": "2022-07-04"}

# test the handler
non_holiday_pred=my_handler(non_holiday_payload)
holiday_payload=my_handler(holiday_payload)

# show results
print("non_holiday_pred", non_holiday_pred)
print("holiday_payload", holiday_payload)

# non_holiday_pred [{'label': 'joy', 'score': 0.9985942244529724}]
# holiday_payload [{'label': 'happy', 'score': 1}]`,highlighted:`<span class="hljs-keyword">from</span> handler <span class="hljs-keyword">import</span> EndpointHandler

<span class="hljs-comment"># init handler</span>
my_handler = EndpointHandler(path=<span class="hljs-string">&quot;.&quot;</span>)

<span class="hljs-comment"># prepare sample payload</span>
non_holiday_payload = {<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;I am quite excited how this will turn out&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2022-08-08&quot;</span>}
holiday_payload = {<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;Today is a though day&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2022-07-04&quot;</span>}

<span class="hljs-comment"># test the handler</span>
non_holiday_pred=my_handler(non_holiday_payload)
holiday_payload=my_handler(holiday_payload)

<span class="hljs-comment"># show results</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;non_holiday_pred&quot;</span>, non_holiday_pred)
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;holiday_payload&quot;</span>, holiday_payload)

<span class="hljs-comment"># non_holiday_pred [{&#x27;label&#x27;: &#x27;joy&#x27;, &#x27;score&#x27;: 0.9985942244529724}]</span>
<span class="hljs-comment"># holiday_payload [{&#x27;label&#x27;: &#x27;happy&#x27;, &#x27;score&#x27;: 1}]</span>`}}),tt=new B({}),at=new U({props:{code:`# add all our new files
!git add *
# commit our files
!git commit -m "add custom handler"
# push the files to the hub
!git push`,highlighted:`# <span class="hljs-built_in">add</span> <span class="hljs-keyword">all</span> our <span class="hljs-keyword">new</span> <span class="hljs-keyword">files</span>
!git <span class="hljs-built_in">add</span> *
# commit our <span class="hljs-keyword">files</span>
!git commit -<span class="hljs-keyword">m</span> <span class="hljs-string">&quot;add custom handler&quot;</span>
# push the <span class="hljs-keyword">files</span> <span class="hljs-keyword">to</span> the hub
!git push`}}),lt=new B({}),{c(){x=s("meta"),ja=h(),I=s("h1"),G=s("a"),Et=s("span"),m(ce.$$.fragment),Fs=h(),bt=s("span"),Ms=n("Create custom Inference Handler"),ka=h(),W=s("p"),Rs=n("Hugging Face Endpoints supports all of the Transformers and Sentence-Transformers tasks and can support custom tasks, including custom pre- & post-processing. The customization can be done through a "),ue=s("a"),Bs=n("handler.py"),Us=n(" file in your model repository on the Hugging Face Hub."),Aa=h(),b=s("p"),Gs=n("The "),fe=s("a"),Ws=n("handler.py"),Ys=n(" needs to implement the "),me=s("a"),Js=n("EndpointHandler"),Xs=n(" class with a "),$t=s("code"),Ks=n("__init__"),Qs=n(" and a "),jt=s("code"),Zs=n("__call__"),Vs=n(" method."),Ha=h(),H=s("p"),el=n("If you want to use custom dependencies, e.g. "),ye=s("a"),tl=n("optimum"),al=n(", the dependencies must be listed in a "),kt=s("code"),sl=n("requirements.txt"),ll=n(" as described above in \u201Cadd custom dependencies.\u201D"),qa=h(),D=s("h2"),Y=s("a"),At=s("span"),m(_e.$$.fragment),ol=h(),Ht=s("span"),nl=n("Custom Handler Examples"),Pa=h(),$=s("p"),rl=n("There are already several public examples on the "),ve=s("a"),il=n("Hugging Face Hub"),pl=n(" where you can take insipiration or directly use them. The repositories are tagged with "),qt=s("code"),dl=n("endpoints-template"),hl=n(" and can be found under this "),we=s("a"),cl=n("link"),ul=n("."),Ca=h(),rt=s("p"),fl=n("Included examples are for:"),Ta=h(),u=s("ul"),Pt=s("li"),ge=s("a"),ml=n("Optimum and ONNX Runtime"),yl=h(),Ct=s("li"),Ee=s("a"),_l=n("Diffusers with stable-diffusion"),vl=h(),Tt=s("li"),be=s("a"),wl=n("Image Embeddings with BLIP"),gl=h(),xt=s("li"),$e=s("a"),El=n("TrOCR for OCR Detection"),bl=h(),It=s("li"),je=s("a"),$l=n("Optimized Sentence Transformers with Optimum"),jl=h(),Dt=s("li"),ke=s("a"),kl=n("Pyannote Speaker diarization"),Al=h(),Nt=s("li"),Ae=s("a"),Hl=n("LayoutLM"),ql=h(),St=s("li"),He=s("a"),Pl=n("Flair NER"),Cl=h(),Lt=s("li"),qe=s("a"),Tl=n("GPT-J 6B Single GPU"),xl=h(),Ot=s("li"),Pe=s("a"),Il=n("Donut Document understanding"),Dl=h(),zt=s("li"),Ce=s("a"),Nl=n("SetFit classifier"),xa=h(),N=s("h2"),J=s("a"),Ft=s("span"),m(Te.$$.fragment),Sl=h(),Mt=s("span"),Ll=n("Tutorial"),Ia=h(),q=s("p"),Ol=n("Before creating a Custom Handler, you need a Hugging Face Model repository with your model weights and an Access Token with "),Rt=s("em"),zl=n("WRITE"),Fl=n(" access to the repository. To find, create and manage Access Tokens, click "),xe=s("a"),Ml=n("here"),Rl=n("."),Da=h(),X=s("p"),Bl=n("If you want to write a Custom Handler for an existing model from the community, you can use the "),Ie=s("a"),Ul=n("repo_duplicator"),Gl=n(" to create a repository fork."),Na=h(),K=s("p"),Wl=n("The code can also be found in this "),De=s("a"),Yl=n("Notebook"),Jl=n("."),Sa=h(),Ne=s("p"),Xl=n("You can also search for already existing Custom Handlers here: "),Se=s("a"),Kl=n("https://huggingface.co/models?other=endpoints-template"),La=h(),S=s("h3"),Q=s("a"),Bt=s("span"),m(Le.$$.fragment),Ql=h(),Ut=s("span"),Zl=n("1. Set up Development Environment"),Oa=h(),Oe=s("p"),Vl=n(`The easiest way to develop our custom handler is to set up a local development environment, to implement, test, and iterate there, and then deploy it as an Inference Endpoint. The first step is to install all required development dependencies.
`),Gt=s("em"),eo=n("needed to create the custom handler, not needed for inference"),za=h(),m(ze.$$.fragment),Fa=h(),it=s("p"),to=n("After we have installed our libraries we will clone our repository to our development environment."),Ma=h(),Z=s("p"),ao=n("We will use "),Fe=s("a"),so=n("philschmid/distilbert-base-uncased-emotion"),lo=n(" during the tutorial."),Ra=h(),m(Me.$$.fragment),Ba=h(),V=s("p"),oo=n("To be able to push our CP later you need to login into our HF account. This can be done by using the "),Wt=s("code"),no=n("huggingface-cli"),ro=n("."),Ua=h(),pt=s("p"),Yt=s("em"),io=n("Note: Make sure to configure git config as well."),Ga=h(),m(Re.$$.fragment),Wa=h(),L=s("h3"),ee=s("a"),Jt=s("span"),m(Be.$$.fragment),po=h(),Xt=s("span"),ho=n("2. Create EndpointHandler (CP)"),Ya=h(),E=s("p"),co=n("After we have set up our environment, we can start creating your custom handler. The custom handler is a Python class ("),Kt=s("code"),uo=n("EndpointHandler"),fo=n(") inside a "),Qt=s("code"),mo=n("handler.py"),yo=n(" file in our repository. The "),Zt=s("code"),_o=n("EndpointHandler"),vo=n(" needs to implement an "),Vt=s("code"),wo=n("__init__"),go=n(" and a "),ea=s("code"),Eo=n("__call__"),bo=n(" method."),Ja=h(),te=s("ul"),Ue=s("li"),$o=n("The "),ta=s("code"),jo=n("__init__"),ko=n(" method will be called when starting the Endpoint and will receive 1 argument, a string with the path to your model weights. This allows you to load your model correctly."),Ao=h(),O=s("li"),Ho=n("The "),aa=s("code"),qo=n("__call__"),Po=n(" method will be called on every request and receive a dictionary with your request body as a python dictionary. It will always contain the "),sa=s("code"),Co=n("inputs"),To=n(" key."),Xa=h(),ae=s("p"),xo=n("The first step is to create our "),la=s("code"),Io=n("handler.py"),Do=n(" in the local clone of our repository."),Ka=h(),m(Ge.$$.fragment),Qa=h(),j=s("p"),No=n("In there, you define your "),oa=s("code"),So=n("EndpointHandler"),Lo=n(" class with the "),na=s("code"),Oo=n("__init__"),zo=n(" and "),ra=s("code"),Fo=n("__call__ "),Mo=n("method."),Za=h(),m(We.$$.fragment),Va=h(),z=s("h3"),se=s("a"),ia=s("span"),m(Ye.$$.fragment),Ro=h(),pa=s("span"),Bo=n("3. Customize EndpointHandler"),es=h(),le=s("p"),Uo=n("Now, you can add all of the custom logic you want to use during initialization or inference to your CP. You can already find multiple "),Je=s("a"),Go=n("Custom Handler on the Hub"),Wo=n(" if you need some inspiration. In our example, we will add a custom condition based on additional payload information."),ts=h(),Xe=s("p"),da=s("em"),Yo=n("The model we are using in the tutorial is fine-tuned to detect emotions. We will add an additional payload field for the date, and will use an external package to check if it is a holiday, to add a condition so that when the input date is a holiday, the model returns \u201Chappy\u201D - since everyone is happy when there are holidays "),Jo=n("\u{1F334}\u{1F389}\u{1F606}"),as=h(),P=s("p"),Xo=n("First, we need to create a new "),ha=s("code"),Ko=n("requirements.txt"),Qo=n(" and add our "),Ke=s("a"),Zo=n("holiday detection package"),Vo=n(" and make sure we have it installed in our development environment as well."),ss=h(),m(Qe.$$.fragment),ls=h(),C=s("p"),en=n("Next, we have to adjust our "),ca=s("code"),tn=n("handler.py"),an=n(" and "),ua=s("code"),sn=n("EndpointHandler"),ln=n(" to match our condition."),os=h(),m(Ze.$$.fragment),ns=h(),F=s("h3"),oe=s("a"),fa=s("span"),m(Ve.$$.fragment),on=h(),ma=s("span"),nn=n("4. Test EndpointHandler"),rs=h(),dt=s("p"),rn=n("To test our EndpointHandler, we can simplify import, initialize and test it. Therefore we only need to prepare a sample payload."),is=h(),m(et.$$.fragment),ps=h(),ht=s("p"),pn=n("It works!!!! \u{1F389}"),ds=h(),ct=s("p"),ya=s("em"),dn=n("Note: If you are using a notebook you might have to restart your kernel when you make changes to the handler.py since it is not automatically re-imported."),hs=h(),M=s("h3"),ne=s("a"),_a=s("span"),m(tt.$$.fragment),hn=h(),va=s("span"),cn=n("5. Push the Custom Handler to your repository"),cs=h(),ut=s("p"),un=n("After you have successfully tested your handler locally, you can push it to your repository by simply using basic git commands."),us=h(),m(at.$$.fragment),fs=h(),k=s("p"),fn=n("Now, you should see your "),wa=s("code"),mn=n("handler.py"),yn=n(" and "),ga=s("code"),_n=n("requirements.txt"),vn=n(" in your repository in the "),st=s("a"),wn=n("\u201CFiles and version\u201D"),gn=n(" tab."),ms=h(),R=s("h3"),re=s("a"),Ea=s("span"),m(lt.$$.fragment),En=h(),ba=s("span"),bn=n("6. Deploy your Custom Handler as an Inference Endpoint"),ys=h(),ft=s("p"),$n=n("The last step is to deploy your Custom Handler as an Inference Endpoint. You can deploy your custom Custom Handler the same way as a regular Inference Endpoint. Add your repository, select your cloud and region, your instance and security setting, and deploy."),_s=h(),ie=s("p"),jn=n("The Inference Endpoint Service will check during the creation of your Endpoint if there is a "),$a=s("code"),kn=n("handler.py"),An=n(" available and valid and will use it for serving requests no matter which \u201CTask\u201D you select."),vs=h(),mt=s("p"),ot=s("em"),Hn=n("Note: In your "),nt=s("a"),qn=n("Inference Endpoints dashboard"),Pn=n(", the Task for this Endpoint should now be set to Custom"),this.h()},l(e){const i=Ci('[data-svelte="svelte-1phssyn"]',document.head);x=l(i,"META",{name:!0,content:!0}),i.forEach(a),ja=c(e),I=l(e,"H1",{class:!0});var gs=o(I);G=l(gs,"A",{id:!0,class:!0,href:!0});var Dn=o(G);Et=l(Dn,"SPAN",{});var Nn=o(Et);y(ce.$$.fragment,Nn),Nn.forEach(a),Dn.forEach(a),Fs=c(gs),bt=l(gs,"SPAN",{});var Sn=o(bt);Ms=r(Sn,"Create custom Inference Handler"),Sn.forEach(a),gs.forEach(a),ka=c(e),W=l(e,"P",{});var Es=o(W);Rs=r(Es,"Hugging Face Endpoints supports all of the Transformers and Sentence-Transformers tasks and can support custom tasks, including custom pre- & post-processing. The customization can be done through a "),ue=l(Es,"A",{href:!0,rel:!0});var Ln=o(ue);Bs=r(Ln,"handler.py"),Ln.forEach(a),Us=r(Es," file in your model repository on the Hugging Face Hub."),Es.forEach(a),Aa=c(e),b=l(e,"P",{});var T=o(b);Gs=r(T,"The "),fe=l(T,"A",{href:!0,rel:!0});var On=o(fe);Ws=r(On,"handler.py"),On.forEach(a),Ys=r(T," needs to implement the "),me=l(T,"A",{href:!0,rel:!0});var zn=o(me);Js=r(zn,"EndpointHandler"),zn.forEach(a),Xs=r(T," class with a "),$t=l(T,"CODE",{});var Fn=o($t);Ks=r(Fn,"__init__"),Fn.forEach(a),Qs=r(T," and a "),jt=l(T,"CODE",{});var Mn=o(jt);Zs=r(Mn,"__call__"),Mn.forEach(a),Vs=r(T," method."),T.forEach(a),Ha=c(e),H=l(e,"P",{});var yt=o(H);el=r(yt,"If you want to use custom dependencies, e.g. "),ye=l(yt,"A",{href:!0,rel:!0});var Rn=o(ye);tl=r(Rn,"optimum"),Rn.forEach(a),al=r(yt,", the dependencies must be listed in a "),kt=l(yt,"CODE",{});var Bn=o(kt);sl=r(Bn,"requirements.txt"),Bn.forEach(a),ll=r(yt," as described above in \u201Cadd custom dependencies.\u201D"),yt.forEach(a),qa=c(e),D=l(e,"H2",{class:!0});var bs=o(D);Y=l(bs,"A",{id:!0,class:!0,href:!0});var Un=o(Y);At=l(Un,"SPAN",{});var Gn=o(At);y(_e.$$.fragment,Gn),Gn.forEach(a),Un.forEach(a),ol=c(bs),Ht=l(bs,"SPAN",{});var Wn=o(Ht);nl=r(Wn,"Custom Handler Examples"),Wn.forEach(a),bs.forEach(a),Pa=c(e),$=l(e,"P",{});var pe=o($);rl=r(pe,"There are already several public examples on the "),ve=l(pe,"A",{href:!0,rel:!0});var Yn=o(ve);il=r(Yn,"Hugging Face Hub"),Yn.forEach(a),pl=r(pe," where you can take insipiration or directly use them. The repositories are tagged with "),qt=l(pe,"CODE",{});var Jn=o(qt);dl=r(Jn,"endpoints-template"),Jn.forEach(a),hl=r(pe," and can be found under this "),we=l(pe,"A",{href:!0,rel:!0});var Xn=o(we);cl=r(Xn,"link"),Xn.forEach(a),ul=r(pe,"."),pe.forEach(a),Ca=c(e),rt=l(e,"P",{});var Kn=o(rt);fl=r(Kn,"Included examples are for:"),Kn.forEach(a),Ta=c(e),u=l(e,"UL",{});var f=o(u);Pt=l(f,"LI",{});var Qn=o(Pt);ge=l(Qn,"A",{href:!0,rel:!0});var Zn=o(ge);ml=r(Zn,"Optimum and ONNX Runtime"),Zn.forEach(a),Qn.forEach(a),yl=c(f),Ct=l(f,"LI",{});var Vn=o(Ct);Ee=l(Vn,"A",{href:!0,rel:!0});var er=o(Ee);_l=r(er,"Diffusers with stable-diffusion"),er.forEach(a),Vn.forEach(a),vl=c(f),Tt=l(f,"LI",{});var tr=o(Tt);be=l(tr,"A",{href:!0,rel:!0});var ar=o(be);wl=r(ar,"Image Embeddings with BLIP"),ar.forEach(a),tr.forEach(a),gl=c(f),xt=l(f,"LI",{});var sr=o(xt);$e=l(sr,"A",{href:!0,rel:!0});var lr=o($e);El=r(lr,"TrOCR for OCR Detection"),lr.forEach(a),sr.forEach(a),bl=c(f),It=l(f,"LI",{});var or=o(It);je=l(or,"A",{href:!0,rel:!0});var nr=o(je);$l=r(nr,"Optimized Sentence Transformers with Optimum"),nr.forEach(a),or.forEach(a),jl=c(f),Dt=l(f,"LI",{});var rr=o(Dt);ke=l(rr,"A",{href:!0,rel:!0});var ir=o(ke);kl=r(ir,"Pyannote Speaker diarization"),ir.forEach(a),rr.forEach(a),Al=c(f),Nt=l(f,"LI",{});var pr=o(Nt);Ae=l(pr,"A",{href:!0,rel:!0});var dr=o(Ae);Hl=r(dr,"LayoutLM"),dr.forEach(a),pr.forEach(a),ql=c(f),St=l(f,"LI",{});var hr=o(St);He=l(hr,"A",{href:!0,rel:!0});var cr=o(He);Pl=r(cr,"Flair NER"),cr.forEach(a),hr.forEach(a),Cl=c(f),Lt=l(f,"LI",{});var ur=o(Lt);qe=l(ur,"A",{href:!0,rel:!0});var fr=o(qe);Tl=r(fr,"GPT-J 6B Single GPU"),fr.forEach(a),ur.forEach(a),xl=c(f),Ot=l(f,"LI",{});var mr=o(Ot);Pe=l(mr,"A",{href:!0,rel:!0});var yr=o(Pe);Il=r(yr,"Donut Document understanding"),yr.forEach(a),mr.forEach(a),Dl=c(f),zt=l(f,"LI",{});var _r=o(zt);Ce=l(_r,"A",{href:!0,rel:!0});var vr=o(Ce);Nl=r(vr,"SetFit classifier"),vr.forEach(a),_r.forEach(a),f.forEach(a),xa=c(e),N=l(e,"H2",{class:!0});var $s=o(N);J=l($s,"A",{id:!0,class:!0,href:!0});var wr=o(J);Ft=l(wr,"SPAN",{});var gr=o(Ft);y(Te.$$.fragment,gr),gr.forEach(a),wr.forEach(a),Sl=c($s),Mt=l($s,"SPAN",{});var Er=o(Mt);Ll=r(Er,"Tutorial"),Er.forEach(a),$s.forEach(a),Ia=c(e),q=l(e,"P",{});var _t=o(q);Ol=r(_t,"Before creating a Custom Handler, you need a Hugging Face Model repository with your model weights and an Access Token with "),Rt=l(_t,"EM",{});var br=o(Rt);zl=r(br,"WRITE"),br.forEach(a),Fl=r(_t," access to the repository. To find, create and manage Access Tokens, click "),xe=l(_t,"A",{href:!0,rel:!0});var $r=o(xe);Ml=r($r,"here"),$r.forEach(a),Rl=r(_t,"."),_t.forEach(a),Da=c(e),X=l(e,"P",{});var js=o(X);Bl=r(js,"If you want to write a Custom Handler for an existing model from the community, you can use the "),Ie=l(js,"A",{href:!0,rel:!0});var jr=o(Ie);Ul=r(jr,"repo_duplicator"),jr.forEach(a),Gl=r(js," to create a repository fork."),js.forEach(a),Na=c(e),K=l(e,"P",{});var ks=o(K);Wl=r(ks,"The code can also be found in this "),De=l(ks,"A",{href:!0,rel:!0});var kr=o(De);Yl=r(kr,"Notebook"),kr.forEach(a),Jl=r(ks,"."),ks.forEach(a),Sa=c(e),Ne=l(e,"P",{});var Cn=o(Ne);Xl=r(Cn,"You can also search for already existing Custom Handlers here: "),Se=l(Cn,"A",{href:!0,rel:!0});var Ar=o(Se);Kl=r(Ar,"https://huggingface.co/models?other=endpoints-template"),Ar.forEach(a),Cn.forEach(a),La=c(e),S=l(e,"H3",{class:!0});var As=o(S);Q=l(As,"A",{id:!0,class:!0,href:!0});var Hr=o(Q);Bt=l(Hr,"SPAN",{});var qr=o(Bt);y(Le.$$.fragment,qr),qr.forEach(a),Hr.forEach(a),Ql=c(As),Ut=l(As,"SPAN",{});var Pr=o(Ut);Zl=r(Pr,"1. Set up Development Environment"),Pr.forEach(a),As.forEach(a),Oa=c(e),Oe=l(e,"P",{});var Tn=o(Oe);Vl=r(Tn,`The easiest way to develop our custom handler is to set up a local development environment, to implement, test, and iterate there, and then deploy it as an Inference Endpoint. The first step is to install all required development dependencies.
`),Gt=l(Tn,"EM",{});var Cr=o(Gt);eo=r(Cr,"needed to create the custom handler, not needed for inference"),Cr.forEach(a),Tn.forEach(a),za=c(e),y(ze.$$.fragment,e),Fa=c(e),it=l(e,"P",{});var Tr=o(it);to=r(Tr,"After we have installed our libraries we will clone our repository to our development environment."),Tr.forEach(a),Ma=c(e),Z=l(e,"P",{});var Hs=o(Z);ao=r(Hs,"We will use "),Fe=l(Hs,"A",{href:!0,rel:!0});var xr=o(Fe);so=r(xr,"philschmid/distilbert-base-uncased-emotion"),xr.forEach(a),lo=r(Hs," during the tutorial."),Hs.forEach(a),Ra=c(e),y(Me.$$.fragment,e),Ba=c(e),V=l(e,"P",{});var qs=o(V);oo=r(qs,"To be able to push our CP later you need to login into our HF account. This can be done by using the "),Wt=l(qs,"CODE",{});var Ir=o(Wt);no=r(Ir,"huggingface-cli"),Ir.forEach(a),ro=r(qs,"."),qs.forEach(a),Ua=c(e),pt=l(e,"P",{});var Dr=o(pt);Yt=l(Dr,"EM",{});var Nr=o(Yt);io=r(Nr,"Note: Make sure to configure git config as well."),Nr.forEach(a),Dr.forEach(a),Ga=c(e),y(Re.$$.fragment,e),Wa=c(e),L=l(e,"H3",{class:!0});var Ps=o(L);ee=l(Ps,"A",{id:!0,class:!0,href:!0});var Sr=o(ee);Jt=l(Sr,"SPAN",{});var Lr=o(Jt);y(Be.$$.fragment,Lr),Lr.forEach(a),Sr.forEach(a),po=c(Ps),Xt=l(Ps,"SPAN",{});var Or=o(Xt);ho=r(Or,"2. Create EndpointHandler (CP)"),Or.forEach(a),Ps.forEach(a),Ya=c(e),E=l(e,"P",{});var A=o(E);co=r(A,"After we have set up our environment, we can start creating your custom handler. The custom handler is a Python class ("),Kt=l(A,"CODE",{});var zr=o(Kt);uo=r(zr,"EndpointHandler"),zr.forEach(a),fo=r(A,") inside a "),Qt=l(A,"CODE",{});var Fr=o(Qt);mo=r(Fr,"handler.py"),Fr.forEach(a),yo=r(A," file in our repository. The "),Zt=l(A,"CODE",{});var Mr=o(Zt);_o=r(Mr,"EndpointHandler"),Mr.forEach(a),vo=r(A," needs to implement an "),Vt=l(A,"CODE",{});var Rr=o(Vt);wo=r(Rr,"__init__"),Rr.forEach(a),go=r(A," and a "),ea=l(A,"CODE",{});var Br=o(ea);Eo=r(Br,"__call__"),Br.forEach(a),bo=r(A," method."),A.forEach(a),Ja=c(e),te=l(e,"UL",{});var Cs=o(te);Ue=l(Cs,"LI",{});var Ts=o(Ue);$o=r(Ts,"The "),ta=l(Ts,"CODE",{});var Ur=o(ta);jo=r(Ur,"__init__"),Ur.forEach(a),ko=r(Ts," method will be called when starting the Endpoint and will receive 1 argument, a string with the path to your model weights. This allows you to load your model correctly."),Ts.forEach(a),Ao=c(Cs),O=l(Cs,"LI",{});var vt=o(O);Ho=r(vt,"The "),aa=l(vt,"CODE",{});var Gr=o(aa);qo=r(Gr,"__call__"),Gr.forEach(a),Po=r(vt," method will be called on every request and receive a dictionary with your request body as a python dictionary. It will always contain the "),sa=l(vt,"CODE",{});var Wr=o(sa);Co=r(Wr,"inputs"),Wr.forEach(a),To=r(vt," key."),vt.forEach(a),Cs.forEach(a),Xa=c(e),ae=l(e,"P",{});var xs=o(ae);xo=r(xs,"The first step is to create our "),la=l(xs,"CODE",{});var Yr=o(la);Io=r(Yr,"handler.py"),Yr.forEach(a),Do=r(xs," in the local clone of our repository."),xs.forEach(a),Ka=c(e),y(Ge.$$.fragment,e),Qa=c(e),j=l(e,"P",{});var de=o(j);No=r(de,"In there, you define your "),oa=l(de,"CODE",{});var Jr=o(oa);So=r(Jr,"EndpointHandler"),Jr.forEach(a),Lo=r(de," class with the "),na=l(de,"CODE",{});var Xr=o(na);Oo=r(Xr,"__init__"),Xr.forEach(a),zo=r(de," and "),ra=l(de,"CODE",{});var Kr=o(ra);Fo=r(Kr,"__call__ "),Kr.forEach(a),Mo=r(de,"method."),de.forEach(a),Za=c(e),y(We.$$.fragment,e),Va=c(e),z=l(e,"H3",{class:!0});var Is=o(z);se=l(Is,"A",{id:!0,class:!0,href:!0});var Qr=o(se);ia=l(Qr,"SPAN",{});var Zr=o(ia);y(Ye.$$.fragment,Zr),Zr.forEach(a),Qr.forEach(a),Ro=c(Is),pa=l(Is,"SPAN",{});var Vr=o(pa);Bo=r(Vr,"3. Customize EndpointHandler"),Vr.forEach(a),Is.forEach(a),es=c(e),le=l(e,"P",{});var Ds=o(le);Uo=r(Ds,"Now, you can add all of the custom logic you want to use during initialization or inference to your CP. You can already find multiple "),Je=l(Ds,"A",{href:!0,rel:!0});var ei=o(Je);Go=r(ei,"Custom Handler on the Hub"),ei.forEach(a),Wo=r(Ds," if you need some inspiration. In our example, we will add a custom condition based on additional payload information."),Ds.forEach(a),ts=c(e),Xe=l(e,"P",{});var xn=o(Xe);da=l(xn,"EM",{});var ti=o(da);Yo=r(ti,"The model we are using in the tutorial is fine-tuned to detect emotions. We will add an additional payload field for the date, and will use an external package to check if it is a holiday, to add a condition so that when the input date is a holiday, the model returns \u201Chappy\u201D - since everyone is happy when there are holidays "),ti.forEach(a),Jo=r(xn,"\u{1F334}\u{1F389}\u{1F606}"),xn.forEach(a),as=c(e),P=l(e,"P",{});var wt=o(P);Xo=r(wt,"First, we need to create a new "),ha=l(wt,"CODE",{});var ai=o(ha);Ko=r(ai,"requirements.txt"),ai.forEach(a),Qo=r(wt," and add our "),Ke=l(wt,"A",{href:!0,rel:!0});var si=o(Ke);Zo=r(si,"holiday detection package"),si.forEach(a),Vo=r(wt," and make sure we have it installed in our development environment as well."),wt.forEach(a),ss=c(e),y(Qe.$$.fragment,e),ls=c(e),C=l(e,"P",{});var gt=o(C);en=r(gt,"Next, we have to adjust our "),ca=l(gt,"CODE",{});var li=o(ca);tn=r(li,"handler.py"),li.forEach(a),an=r(gt," and "),ua=l(gt,"CODE",{});var oi=o(ua);sn=r(oi,"EndpointHandler"),oi.forEach(a),ln=r(gt," to match our condition."),gt.forEach(a),os=c(e),y(Ze.$$.fragment,e),ns=c(e),F=l(e,"H3",{class:!0});var Ns=o(F);oe=l(Ns,"A",{id:!0,class:!0,href:!0});var ni=o(oe);fa=l(ni,"SPAN",{});var ri=o(fa);y(Ve.$$.fragment,ri),ri.forEach(a),ni.forEach(a),on=c(Ns),ma=l(Ns,"SPAN",{});var ii=o(ma);nn=r(ii,"4. Test EndpointHandler"),ii.forEach(a),Ns.forEach(a),rs=c(e),dt=l(e,"P",{});var pi=o(dt);rn=r(pi,"To test our EndpointHandler, we can simplify import, initialize and test it. Therefore we only need to prepare a sample payload."),pi.forEach(a),is=c(e),y(et.$$.fragment,e),ps=c(e),ht=l(e,"P",{});var di=o(ht);pn=r(di,"It works!!!! \u{1F389}"),di.forEach(a),ds=c(e),ct=l(e,"P",{});var hi=o(ct);ya=l(hi,"EM",{});var ci=o(ya);dn=r(ci,"Note: If you are using a notebook you might have to restart your kernel when you make changes to the handler.py since it is not automatically re-imported."),ci.forEach(a),hi.forEach(a),hs=c(e),M=l(e,"H3",{class:!0});var Ss=o(M);ne=l(Ss,"A",{id:!0,class:!0,href:!0});var ui=o(ne);_a=l(ui,"SPAN",{});var fi=o(_a);y(tt.$$.fragment,fi),fi.forEach(a),ui.forEach(a),hn=c(Ss),va=l(Ss,"SPAN",{});var mi=o(va);cn=r(mi,"5. Push the Custom Handler to your repository"),mi.forEach(a),Ss.forEach(a),cs=c(e),ut=l(e,"P",{});var yi=o(ut);un=r(yi,"After you have successfully tested your handler locally, you can push it to your repository by simply using basic git commands."),yi.forEach(a),us=c(e),y(at.$$.fragment,e),fs=c(e),k=l(e,"P",{});var he=o(k);fn=r(he,"Now, you should see your "),wa=l(he,"CODE",{});var _i=o(wa);mn=r(_i,"handler.py"),_i.forEach(a),yn=r(he," and "),ga=l(he,"CODE",{});var vi=o(ga);_n=r(vi,"requirements.txt"),vi.forEach(a),vn=r(he," in your repository in the "),st=l(he,"A",{href:!0,rel:!0});var wi=o(st);wn=r(wi,"\u201CFiles and version\u201D"),wi.forEach(a),gn=r(he," tab."),he.forEach(a),ms=c(e),R=l(e,"H3",{class:!0});var Ls=o(R);re=l(Ls,"A",{id:!0,class:!0,href:!0});var gi=o(re);Ea=l(gi,"SPAN",{});var Ei=o(Ea);y(lt.$$.fragment,Ei),Ei.forEach(a),gi.forEach(a),En=c(Ls),ba=l(Ls,"SPAN",{});var bi=o(ba);bn=r(bi,"6. Deploy your Custom Handler as an Inference Endpoint"),bi.forEach(a),Ls.forEach(a),ys=c(e),ft=l(e,"P",{});var $i=o(ft);$n=r($i,"The last step is to deploy your Custom Handler as an Inference Endpoint. You can deploy your custom Custom Handler the same way as a regular Inference Endpoint. Add your repository, select your cloud and region, your instance and security setting, and deploy."),$i.forEach(a),_s=c(e),ie=l(e,"P",{});var Os=o(ie);jn=r(Os,"The Inference Endpoint Service will check during the creation of your Endpoint if there is a "),$a=l(Os,"CODE",{});var ji=o($a);kn=r(ji,"handler.py"),ji.forEach(a),An=r(Os," available and valid and will use it for serving requests no matter which \u201CTask\u201D you select."),Os.forEach(a),vs=c(e),mt=l(e,"P",{});var ki=o(mt);ot=l(ki,"EM",{});var zs=o(ot);Hn=r(zs,"Note: In your "),nt=l(zs,"A",{href:!0,rel:!0});var Ai=o(nt);qn=r(Ai,"Inference Endpoints dashboard"),Ai.forEach(a),Pn=r(zs,", the Task for this Endpoint should now be set to Custom"),zs.forEach(a),ki.forEach(a),this.h()},h(){p(x,"name","hf:doc:metadata"),p(x,"content",JSON.stringify(Di)),p(G,"id","create-custom-inference-handler"),p(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(G,"href","#create-custom-inference-handler"),p(I,"class","relative group"),p(ue,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),p(ue,"rel","nofollow"),p(fe,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/blob/main/handler.py"),p(fe,"rel","nofollow"),p(me,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/blob/main/handler.py"),p(me,"rel","nofollow"),p(ye,"href","https://raw.githubusercontent.com/huggingface/optimum"),p(ye,"rel","nofollow"),p(Y,"id","custom-handler-examples"),p(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Y,"href","#custom-handler-examples"),p(D,"class","relative group"),p(ve,"href","https://huggingface.co/models?other=endpoints-template"),p(ve,"rel","nofollow"),p(we,"href","https://huggingface.co/models?other=endpoints-template"),p(we,"rel","nofollow"),p(ge,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77"),p(ge,"rel","nofollow"),p(Ee,"href","https://huggingface.co/philschmid/stable-diffusion-v1-4-endpoints"),p(Ee,"rel","nofollow"),p(be,"href","https://huggingface.co/florentgbelidji/blip_image_embeddings"),p(be,"rel","nofollow"),p($e,"href","https://huggingface.co/philschmid/trocr-base-printed"),p($e,"rel","nofollow"),p(je,"href","https://huggingface.co/philschmid/all-MiniLM-L6-v2-optimum-embeddings"),p(je,"rel","nofollow"),p(ke,"href","https://huggingface.co/philschmid/pyannote-speaker-diarization-endpoint"),p(ke,"rel","nofollow"),p(Ae,"href","https://huggingface.co/philschmid/layoutlm-funsd"),p(Ae,"rel","nofollow"),p(He,"href","https://huggingface.co/philschmid/flair-ner-english-ontonotes-large"),p(He,"rel","nofollow"),p(qe,"href","https://huggingface.co/philschmid/gpt-j-6B-fp16-sharded"),p(qe,"rel","nofollow"),p(Pe,"href","https://huggingface.co/philschmid/donut-base-finetuned-cord-v2"),p(Pe,"rel","nofollow"),p(Ce,"href","https://huggingface.co/philschmid/setfit-ag-news-endpoint"),p(Ce,"rel","nofollow"),p(J,"id","tutorial"),p(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(J,"href","#tutorial"),p(N,"class","relative group"),p(xe,"href","https://huggingface.co/settings/tokens"),p(xe,"rel","nofollow"),p(Ie,"href","https://huggingface.co/spaces/osanseviero/repo_duplicator"),p(Ie,"rel","nofollow"),p(De,"href","https://colab.research.google.com/drive/1hANJeRa1PK1gZaUorobnQGu4bFj4_4Rf?usp=sharing"),p(De,"rel","nofollow"),p(Se,"href","https://huggingface.co/models?other=endpoints-template"),p(Se,"rel","nofollow"),p(Q,"id","1-set-up-development-environment"),p(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Q,"href","#1-set-up-development-environment"),p(S,"class","relative group"),p(Fe,"href","https://huggingface.co/philschmid/distilbert-base-uncased-emotion"),p(Fe,"rel","nofollow"),p(ee,"id","2-create-endpointhandler-cp"),p(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ee,"href","#2-create-endpointhandler-cp"),p(L,"class","relative group"),p(se,"id","3-customize-endpointhandler"),p(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(se,"href","#3-customize-endpointhandler"),p(z,"class","relative group"),p(Je,"href","https://huggingface.co/models?other=endpoints-template"),p(Je,"rel","nofollow"),p(Ke,"href","https://pypi.org/project/holidays/"),p(Ke,"rel","nofollow"),p(oe,"id","4-test-endpointhandler"),p(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(oe,"href","#4-test-endpointhandler"),p(F,"class","relative group"),p(ne,"id","5-push-the-custom-handler-to-your-repository"),p(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ne,"href","#5-push-the-custom-handler-to-your-repository"),p(M,"class","relative group"),p(st,"href","https://huggingface.co/philschmid/distilbert-base-uncased-emotion/tree/main"),p(st,"rel","nofollow"),p(re,"id","6-deploy-your-custom-handler-as-an-inference-endpoint"),p(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(re,"href","#6-deploy-your-custom-handler-as-an-inference-endpoint"),p(R,"class","relative group"),p(nt,"href","https://ui.endpoints.huggingface.co/"),p(nt,"rel","nofollow")},m(e,i){t(document.head,x),d(e,ja,i),d(e,I,i),t(I,G),t(G,Et),_(ce,Et,null),t(I,Fs),t(I,bt),t(bt,Ms),d(e,ka,i),d(e,W,i),t(W,Rs),t(W,ue),t(ue,Bs),t(W,Us),d(e,Aa,i),d(e,b,i),t(b,Gs),t(b,fe),t(fe,Ws),t(b,Ys),t(b,me),t(me,Js),t(b,Xs),t(b,$t),t($t,Ks),t(b,Qs),t(b,jt),t(jt,Zs),t(b,Vs),d(e,Ha,i),d(e,H,i),t(H,el),t(H,ye),t(ye,tl),t(H,al),t(H,kt),t(kt,sl),t(H,ll),d(e,qa,i),d(e,D,i),t(D,Y),t(Y,At),_(_e,At,null),t(D,ol),t(D,Ht),t(Ht,nl),d(e,Pa,i),d(e,$,i),t($,rl),t($,ve),t(ve,il),t($,pl),t($,qt),t(qt,dl),t($,hl),t($,we),t(we,cl),t($,ul),d(e,Ca,i),d(e,rt,i),t(rt,fl),d(e,Ta,i),d(e,u,i),t(u,Pt),t(Pt,ge),t(ge,ml),t(u,yl),t(u,Ct),t(Ct,Ee),t(Ee,_l),t(u,vl),t(u,Tt),t(Tt,be),t(be,wl),t(u,gl),t(u,xt),t(xt,$e),t($e,El),t(u,bl),t(u,It),t(It,je),t(je,$l),t(u,jl),t(u,Dt),t(Dt,ke),t(ke,kl),t(u,Al),t(u,Nt),t(Nt,Ae),t(Ae,Hl),t(u,ql),t(u,St),t(St,He),t(He,Pl),t(u,Cl),t(u,Lt),t(Lt,qe),t(qe,Tl),t(u,xl),t(u,Ot),t(Ot,Pe),t(Pe,Il),t(u,Dl),t(u,zt),t(zt,Ce),t(Ce,Nl),d(e,xa,i),d(e,N,i),t(N,J),t(J,Ft),_(Te,Ft,null),t(N,Sl),t(N,Mt),t(Mt,Ll),d(e,Ia,i),d(e,q,i),t(q,Ol),t(q,Rt),t(Rt,zl),t(q,Fl),t(q,xe),t(xe,Ml),t(q,Rl),d(e,Da,i),d(e,X,i),t(X,Bl),t(X,Ie),t(Ie,Ul),t(X,Gl),d(e,Na,i),d(e,K,i),t(K,Wl),t(K,De),t(De,Yl),t(K,Jl),d(e,Sa,i),d(e,Ne,i),t(Ne,Xl),t(Ne,Se),t(Se,Kl),d(e,La,i),d(e,S,i),t(S,Q),t(Q,Bt),_(Le,Bt,null),t(S,Ql),t(S,Ut),t(Ut,Zl),d(e,Oa,i),d(e,Oe,i),t(Oe,Vl),t(Oe,Gt),t(Gt,eo),d(e,za,i),_(ze,e,i),d(e,Fa,i),d(e,it,i),t(it,to),d(e,Ma,i),d(e,Z,i),t(Z,ao),t(Z,Fe),t(Fe,so),t(Z,lo),d(e,Ra,i),_(Me,e,i),d(e,Ba,i),d(e,V,i),t(V,oo),t(V,Wt),t(Wt,no),t(V,ro),d(e,Ua,i),d(e,pt,i),t(pt,Yt),t(Yt,io),d(e,Ga,i),_(Re,e,i),d(e,Wa,i),d(e,L,i),t(L,ee),t(ee,Jt),_(Be,Jt,null),t(L,po),t(L,Xt),t(Xt,ho),d(e,Ya,i),d(e,E,i),t(E,co),t(E,Kt),t(Kt,uo),t(E,fo),t(E,Qt),t(Qt,mo),t(E,yo),t(E,Zt),t(Zt,_o),t(E,vo),t(E,Vt),t(Vt,wo),t(E,go),t(E,ea),t(ea,Eo),t(E,bo),d(e,Ja,i),d(e,te,i),t(te,Ue),t(Ue,$o),t(Ue,ta),t(ta,jo),t(Ue,ko),t(te,Ao),t(te,O),t(O,Ho),t(O,aa),t(aa,qo),t(O,Po),t(O,sa),t(sa,Co),t(O,To),d(e,Xa,i),d(e,ae,i),t(ae,xo),t(ae,la),t(la,Io),t(ae,Do),d(e,Ka,i),_(Ge,e,i),d(e,Qa,i),d(e,j,i),t(j,No),t(j,oa),t(oa,So),t(j,Lo),t(j,na),t(na,Oo),t(j,zo),t(j,ra),t(ra,Fo),t(j,Mo),d(e,Za,i),_(We,e,i),d(e,Va,i),d(e,z,i),t(z,se),t(se,ia),_(Ye,ia,null),t(z,Ro),t(z,pa),t(pa,Bo),d(e,es,i),d(e,le,i),t(le,Uo),t(le,Je),t(Je,Go),t(le,Wo),d(e,ts,i),d(e,Xe,i),t(Xe,da),t(da,Yo),t(Xe,Jo),d(e,as,i),d(e,P,i),t(P,Xo),t(P,ha),t(ha,Ko),t(P,Qo),t(P,Ke),t(Ke,Zo),t(P,Vo),d(e,ss,i),_(Qe,e,i),d(e,ls,i),d(e,C,i),t(C,en),t(C,ca),t(ca,tn),t(C,an),t(C,ua),t(ua,sn),t(C,ln),d(e,os,i),_(Ze,e,i),d(e,ns,i),d(e,F,i),t(F,oe),t(oe,fa),_(Ve,fa,null),t(F,on),t(F,ma),t(ma,nn),d(e,rs,i),d(e,dt,i),t(dt,rn),d(e,is,i),_(et,e,i),d(e,ps,i),d(e,ht,i),t(ht,pn),d(e,ds,i),d(e,ct,i),t(ct,ya),t(ya,dn),d(e,hs,i),d(e,M,i),t(M,ne),t(ne,_a),_(tt,_a,null),t(M,hn),t(M,va),t(va,cn),d(e,cs,i),d(e,ut,i),t(ut,un),d(e,us,i),_(at,e,i),d(e,fs,i),d(e,k,i),t(k,fn),t(k,wa),t(wa,mn),t(k,yn),t(k,ga),t(ga,_n),t(k,vn),t(k,st),t(st,wn),t(k,gn),d(e,ms,i),d(e,R,i),t(R,re),t(re,Ea),_(lt,Ea,null),t(R,En),t(R,ba),t(ba,bn),d(e,ys,i),d(e,ft,i),t(ft,$n),d(e,_s,i),d(e,ie,i),t(ie,jn),t(ie,$a),t($a,kn),t(ie,An),d(e,vs,i),d(e,mt,i),t(mt,ot),t(ot,Hn),t(ot,nt),t(nt,qn),t(ot,Pn),ws=!0},p:Ti,i(e){ws||(v(ce.$$.fragment,e),v(_e.$$.fragment,e),v(Te.$$.fragment,e),v(Le.$$.fragment,e),v(ze.$$.fragment,e),v(Me.$$.fragment,e),v(Re.$$.fragment,e),v(Be.$$.fragment,e),v(Ge.$$.fragment,e),v(We.$$.fragment,e),v(Ye.$$.fragment,e),v(Qe.$$.fragment,e),v(Ze.$$.fragment,e),v(Ve.$$.fragment,e),v(et.$$.fragment,e),v(tt.$$.fragment,e),v(at.$$.fragment,e),v(lt.$$.fragment,e),ws=!0)},o(e){w(ce.$$.fragment,e),w(_e.$$.fragment,e),w(Te.$$.fragment,e),w(Le.$$.fragment,e),w(ze.$$.fragment,e),w(Me.$$.fragment,e),w(Re.$$.fragment,e),w(Be.$$.fragment,e),w(Ge.$$.fragment,e),w(We.$$.fragment,e),w(Ye.$$.fragment,e),w(Qe.$$.fragment,e),w(Ze.$$.fragment,e),w(Ve.$$.fragment,e),w(et.$$.fragment,e),w(tt.$$.fragment,e),w(at.$$.fragment,e),w(lt.$$.fragment,e),ws=!1},d(e){a(x),e&&a(ja),e&&a(I),g(ce),e&&a(ka),e&&a(W),e&&a(Aa),e&&a(b),e&&a(Ha),e&&a(H),e&&a(qa),e&&a(D),g(_e),e&&a(Pa),e&&a($),e&&a(Ca),e&&a(rt),e&&a(Ta),e&&a(u),e&&a(xa),e&&a(N),g(Te),e&&a(Ia),e&&a(q),e&&a(Da),e&&a(X),e&&a(Na),e&&a(K),e&&a(Sa),e&&a(Ne),e&&a(La),e&&a(S),g(Le),e&&a(Oa),e&&a(Oe),e&&a(za),g(ze,e),e&&a(Fa),e&&a(it),e&&a(Ma),e&&a(Z),e&&a(Ra),g(Me,e),e&&a(Ba),e&&a(V),e&&a(Ua),e&&a(pt),e&&a(Ga),g(Re,e),e&&a(Wa),e&&a(L),g(Be),e&&a(Ya),e&&a(E),e&&a(Ja),e&&a(te),e&&a(Xa),e&&a(ae),e&&a(Ka),g(Ge,e),e&&a(Qa),e&&a(j),e&&a(Za),g(We,e),e&&a(Va),e&&a(z),g(Ye),e&&a(es),e&&a(le),e&&a(ts),e&&a(Xe),e&&a(as),e&&a(P),e&&a(ss),g(Qe,e),e&&a(ls),e&&a(C),e&&a(os),g(Ze,e),e&&a(ns),e&&a(F),g(Ve),e&&a(rs),e&&a(dt),e&&a(is),g(et,e),e&&a(ps),e&&a(ht),e&&a(ds),e&&a(ct),e&&a(hs),e&&a(M),g(tt),e&&a(cs),e&&a(ut),e&&a(us),g(at,e),e&&a(fs),e&&a(k),e&&a(ms),e&&a(R),g(lt),e&&a(ys),e&&a(ft),e&&a(_s),e&&a(ie),e&&a(vs),e&&a(mt)}}}const Di={local:"create-custom-inference-handler",sections:[{local:"custom-handler-examples",title:"Custom Handler Examples"},{local:"tutorial",sections:[{local:"1-set-up-development-environment",title:"1. Set up Development Environment"},{local:"2-create-endpointhandler-cp",title:"2. Create EndpointHandler (CP)"},{local:"3-customize-endpointhandler",title:"3. Customize EndpointHandler"},{local:"4-test-endpointhandler",title:"4. Test EndpointHandler"},{local:"5-push-the-custom-handler-to-your-repository",title:"5. Push the Custom Handler to your repository"},{local:"6-deploy-your-custom-handler-as-an-inference-endpoint",title:"6. Deploy your Custom Handler as an Inference Endpoint"}],title:"Tutorial"}],title:"Create custom Inference Handler"};function Ni(In){return xi(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class zi extends Hi{constructor(x){super();qi(this,x,Ni,Ii,Pi,{})}}export{zi as default,Di as metadata};
