import{S as Se,i as Re,s as ze,e as n,k as C,w as ke,t as a,M as Ge,c as l,d as o,m as I,a as c,x as xe,h as r,b as i,N as De,G as t,g as f,y as Te,L as je,q as qe,o as Me,B as Pe,v as Ne}from"../../chunks/vendor-hf-doc-builder.js";import{I as Oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as Ue}from"../../chunks/CodeBlock-hf-doc-builder.js";function He(he){let p,z,d,_,q,v,B,M,F,G,s,W,k,J,K,P,Q,V,y,X,Y,w,Z,ee,E,te,oe,b,ae,re,D,A,pe,j,g,se,x,ne,le,N,h,ie,S,ce,me,R,ue,fe,O,$,U;return v=new Oe({}),$=new Ue({props:{code:`tensorflow_model_server \\
  --rest_api_port=5000 \\
  --model_name=my_model \\
  --model_base_path="/repository"`,highlighted:`tensorflow_model_server \\
  <span class="hljs-attribute">--rest_api_port</span>=5000 \\
  <span class="hljs-attribute">--model_name</span>=my_model \\
  <span class="hljs-attribute">--model_base_path</span>=<span class="hljs-string">&quot;/repository&quot;</span>`}}),{c(){p=n("meta"),z=C(),d=n("h1"),_=n("a"),q=n("span"),ke(v.$$.fragment),B=C(),M=n("span"),F=a("Use a custom Container Image"),G=C(),s=n("p"),W=a("Inference Endpoints not only allows you to "),k=n("a"),J=a("customize your inference handler"),K=a(", but it also allows you to provide a custom container image. Those can be public images like "),P=n("code"),Q=a("tensorflow/serving:2.7.3"),V=a(" or private Images hosted on "),y=n("a"),X=a("Docker Hub"),Y=a(", "),w=n("a"),Z=a("AWS ECR"),ee=a(", "),E=n("a"),te=a("Azure ACR"),oe=a(", or "),b=n("a"),ae=a("Google GCR"),re=a("."),D=C(),A=n("img"),j=C(),g=n("p"),se=a("The "),x=n("a"),ne=a("creation flow"),le=a(" of your Image artifacts from a custom image is the same as the base image. This means Inference Endpoints will create a unique image artifact derived from your provided image, including all Model Artifacts."),N=C(),h=n("p"),ie=a("The Model Artifacts (weights) are stored under "),S=n("code"),ce=a("/repository"),me=a(". For example, if you use"),R=n("code"),ue=a("tensorflow/serving"),fe=a(" as your custom image, then you have to set `model_base_path=\u201C/repository\u201D:"),O=C(),ke($.$$.fragment),this.h()},l(e){const m=Ge('[data-svelte="svelte-1phssyn"]',document.head);p=l(m,"META",{name:!0,content:!0}),m.forEach(o),z=I(e),d=l(e,"H1",{class:!0});var H=c(d);_=l(H,"A",{id:!0,class:!0,href:!0});var de=c(_);q=l(de,"SPAN",{});var _e=c(q);xe(v.$$.fragment,_e),_e.forEach(o),de.forEach(o),B=I(H),M=l(H,"SPAN",{});var ge=c(M);F=r(ge,"Use a custom Container Image"),ge.forEach(o),H.forEach(o),G=I(e),s=l(e,"P",{});var u=c(s);W=r(u,"Inference Endpoints not only allows you to "),k=l(u,"A",{href:!0});var ve=c(k);J=r(ve,"customize your inference handler"),ve.forEach(o),K=r(u,", but it also allows you to provide a custom container image. Those can be public images like "),P=l(u,"CODE",{});var ye=c(P);Q=r(ye,"tensorflow/serving:2.7.3"),ye.forEach(o),V=r(u," or private Images hosted on "),y=l(u,"A",{href:!0,rel:!0});var we=c(y);X=r(we,"Docker Hub"),we.forEach(o),Y=r(u,", "),w=l(u,"A",{href:!0,rel:!0});var Ee=c(w);Z=r(Ee,"AWS ECR"),Ee.forEach(o),ee=r(u,", "),E=l(u,"A",{href:!0,rel:!0});var be=c(E);te=r(be,"Azure ACR"),be.forEach(o),oe=r(u,", or "),b=l(u,"A",{href:!0,rel:!0});var Ae=c(b);ae=r(Ae,"Google GCR"),Ae.forEach(o),re=r(u,"."),u.forEach(o),D=I(e),A=l(e,"IMG",{src:!0,alt:!0}),j=I(e),g=l(e,"P",{});var L=c(g);se=r(L,"The "),x=l(L,"A",{href:!0});var $e=c(x);ne=r($e,"creation flow"),$e.forEach(o),le=r(L," of your Image artifacts from a custom image is the same as the base image. This means Inference Endpoints will create a unique image artifact derived from your provided image, including all Model Artifacts."),L.forEach(o),N=I(e),h=l(e,"P",{});var T=c(h);ie=r(T,"The Model Artifacts (weights) are stored under "),S=l(T,"CODE",{});var Ce=c(S);ce=r(Ce,"/repository"),Ce.forEach(o),me=r(T,". For example, if you use"),R=l(T,"CODE",{});var Ie=c(R);ue=r(Ie,"tensorflow/serving"),Ie.forEach(o),fe=r(T," as your custom image, then you have to set `model_base_path=\u201C/repository\u201D:"),T.forEach(o),O=I(e),xe($.$$.fragment,e),this.h()},h(){i(p,"name","hf:doc:metadata"),i(p,"content",JSON.stringify(Le)),i(_,"id","use-a-custom-container-image"),i(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(_,"href","#use-a-custom-container-image"),i(d,"class","relative group"),i(k,"href","/docs/inference-endpoints/guides/custom_handler"),i(y,"href","https://hub.docker.com/"),i(y,"rel","nofollow"),i(w,"href","https://aws.amazon.com/ecr/?nc1=h_ls"),i(w,"rel","nofollow"),i(E,"href","https://azure.microsoft.com/de-de/services/container-registry/"),i(E,"rel","nofollow"),i(b,"href","https://cloud.google.com/container-registry?hl=de"),i(b,"rel","nofollow"),De(A.src,pe="https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/custom_container.png")||i(A,"src",pe),i(A,"alt","custom container config"),i(x,"href","/docs/inference-endpoints/guides/create_endpoint")},m(e,m){t(document.head,p),f(e,z,m),f(e,d,m),t(d,_),t(_,q),Te(v,q,null),t(d,B),t(d,M),t(M,F),f(e,G,m),f(e,s,m),t(s,W),t(s,k),t(k,J),t(s,K),t(s,P),t(P,Q),t(s,V),t(s,y),t(y,X),t(s,Y),t(s,w),t(w,Z),t(s,ee),t(s,E),t(E,te),t(s,oe),t(s,b),t(b,ae),t(s,re),f(e,D,m),f(e,A,m),f(e,j,m),f(e,g,m),t(g,se),t(g,x),t(x,ne),t(g,le),f(e,N,m),f(e,h,m),t(h,ie),t(h,S),t(S,ce),t(h,me),t(h,R),t(R,ue),t(h,fe),f(e,O,m),Te($,e,m),U=!0},p:je,i(e){U||(qe(v.$$.fragment,e),qe($.$$.fragment,e),U=!0)},o(e){Me(v.$$.fragment,e),Me($.$$.fragment,e),U=!1},d(e){o(p),e&&o(z),e&&o(d),Pe(v),e&&o(G),e&&o(s),e&&o(D),e&&o(A),e&&o(j),e&&o(g),e&&o(N),e&&o(h),e&&o(O),Pe($,e)}}}const Le={local:"use-a-custom-container-image",title:"Use a custom Container Image"};function Be(he){return Ne(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ke extends Se{constructor(p){super();Re(this,p,Be,He,ze,{})}}export{Ke as default,Le as metadata};
