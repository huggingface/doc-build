import{S as ye,i as we,s as Ee,e as r,k as $,w as I,t as i,M as be,c as n,d as a,m as v,a as p,x as F,h as m,b as L,G as t,g as y,y as B,q as N,o as R,B as z,v as xe,L as je}from"../../chunks/vendor-hf-doc-builder.js";import{D as ke}from"../../chunks/Docstring-hf-doc-builder.js";import{C as ve}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Le}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Ce}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Ae(G){let l,w,g,s,d;return s=new ve({props:{code:`from accelerate.logging import get_logger

logger = get_logger(__name__)

logger.info("My log", main_process_only=False)
logger.debug("My log", main_process_only=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate.logging <span class="hljs-keyword">import</span> get_logger

<span class="hljs-meta">&gt;&gt;&gt; </span>logger = get_logger(__name__)

<span class="hljs-meta">&gt;&gt;&gt; </span>logger.info(<span class="hljs-string">&quot;My log&quot;</span>, main_process_only=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>logger.debug(<span class="hljs-string">&quot;My log&quot;</span>, main_process_only=<span class="hljs-literal">True</span>)`}}),{c(){l=r("p"),w=i("Example:"),g=$(),I(s.$$.fragment)},l(o){l=n(o,"P",{});var f=p(l);w=m(f,"Example:"),f.forEach(a),g=v(o),F(s.$$.fragment,o)},m(o,f){y(o,l,f),t(l,w),y(o,g,f),B(s,o,f),d=!0},p:je,i(o){d||(N(s.$$.fragment,o),d=!0)},o(o){R(s.$$.fragment,o),d=!1},d(o){o&&a(l),o&&a(g),z(s,o)}}}function De(G){let l,w,g,s,d,o,f,P,K,H,h,Q,q,W,X,M,Y,Z,J,x,U,_,j,ee,u,te,O,ae,oe,S,le,se,re,C,ne,T,ge,ce,E,V;return o=new Le({}),x=new ve({props:{code:`- import logging
+ from accelerate.logging import get_logger
- logger = logging.getLogger(__name__)
+ logger = get_logger(__name__)`,highlighted:`<span class="hljs-deletion">- import logging</span>
<span class="hljs-addition">+ from accelerate.logging import get_logger</span>
<span class="hljs-deletion">- logger = logging.getLogger(__name__)</span>
<span class="hljs-addition">+ logger = get_logger(__name__)</span>`}}),j=new ke({props:{name:"accelerate.logging.get_logger",anchor:"accelerate.logging.get_logger",parameters:[{name:"name",val:": str"}],parametersDescription:[{anchor:"accelerate.logging.get_logger.name",description:`<strong>name</strong> (<code>str</code>) &#x2014;
The name for the logger, such as <code>__file__</code>`,name:"name"}],source:"https://github.com/huggingface/accelerate/blob/v0.14.0/src/accelerate/logging.py#L52"}}),E=new Ce({props:{anchor:"accelerate.logging.get_logger.example",$$slots:{default:[Ae]},$$scope:{ctx:G}}}),{c(){l=r("meta"),w=$(),g=r("h1"),s=r("a"),d=r("span"),I(o.$$.fragment),f=$(),P=r("span"),K=i("Logging with Accelerate"),H=$(),h=r("p"),Q=i(`Accelerate has its own logging utility to handle logging while in a distributed system.
To utilize this replace cases of `),q=r("code"),W=i("logging"),X=i(" with "),M=r("code"),Y=i("accelerate.logging"),Z=i(":"),J=$(),I(x.$$.fragment),U=$(),_=r("div"),I(j.$$.fragment),ee=$(),u=r("p"),te=i("Returns a "),O=r("code"),ae=i("logging.Logger"),oe=i(" for "),S=r("code"),le=i("name"),se=i(" that can handle multiprocessing."),re=$(),C=r("p"),ne=i("If a log should be called on all processes, pass "),T=r("code"),ge=i("main_process_only=False"),ce=$(),I(E.$$.fragment),this.h()},l(e){const c=be('[data-svelte="svelte-1phssyn"]',document.head);l=n(c,"META",{name:!0,content:!0}),c.forEach(a),w=v(e),g=n(e,"H1",{class:!0});var k=p(g);s=n(k,"A",{id:!0,class:!0,href:!0});var pe=p(s);d=n(pe,"SPAN",{});var me=p(d);F(o.$$.fragment,me),me.forEach(a),pe.forEach(a),f=v(k),P=n(k,"SPAN",{});var _e=p(P);K=m(_e,"Logging with Accelerate"),_e.forEach(a),k.forEach(a),H=v(e),h=n(e,"P",{});var A=p(h);Q=m(A,`Accelerate has its own logging utility to handle logging while in a distributed system.
To utilize this replace cases of `),q=n(A,"CODE",{});var de=p(q);W=m(de,"logging"),de.forEach(a),X=m(A," with "),M=n(A,"CODE",{});var fe=p(M);Y=m(fe,"accelerate.logging"),fe.forEach(a),Z=m(A,":"),A.forEach(a),J=v(e),F(x.$$.fragment,e),U=v(e),_=n(e,"DIV",{class:!0});var b=p(_);F(j.$$.fragment,b),ee=v(b),u=n(b,"P",{});var D=p(u);te=m(D,"Returns a "),O=n(D,"CODE",{});var he=p(O);ae=m(he,"logging.Logger"),he.forEach(a),oe=m(D," for "),S=n(D,"CODE",{});var ue=p(S);le=m(ue,"name"),ue.forEach(a),se=m(D," that can handle multiprocessing."),D.forEach(a),re=v(b),C=n(b,"P",{});var ie=p(C);ne=m(ie,"If a log should be called on all processes, pass "),T=n(ie,"CODE",{});var $e=p(T);ge=m($e,"main_process_only=False"),$e.forEach(a),ie.forEach(a),ce=v(b),F(E.$$.fragment,b),b.forEach(a),this.h()},h(){L(l,"name","hf:doc:metadata"),L(l,"content",JSON.stringify(Pe)),L(s,"id","accelerate.logging.get_logger"),L(s,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),L(s,"href","#accelerate.logging.get_logger"),L(g,"class","relative group"),L(_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,c){t(document.head,l),y(e,w,c),y(e,g,c),t(g,s),t(s,d),B(o,d,null),t(g,f),t(g,P),t(P,K),y(e,H,c),y(e,h,c),t(h,Q),t(h,q),t(q,W),t(h,X),t(h,M),t(M,Y),t(h,Z),y(e,J,c),B(x,e,c),y(e,U,c),y(e,_,c),B(j,_,null),t(_,ee),t(_,u),t(u,te),t(u,O),t(O,ae),t(u,oe),t(u,S),t(S,le),t(u,se),t(_,re),t(_,C),t(C,ne),t(C,T),t(T,ge),t(_,ce),B(E,_,null),V=!0},p(e,[c]){const k={};c&2&&(k.$$scope={dirty:c,ctx:e}),E.$set(k)},i(e){V||(N(o.$$.fragment,e),N(x.$$.fragment,e),N(j.$$.fragment,e),N(E.$$.fragment,e),V=!0)},o(e){R(o.$$.fragment,e),R(x.$$.fragment,e),R(j.$$.fragment,e),R(E.$$.fragment,e),V=!1},d(e){a(l),e&&a(w),e&&a(g),z(o),e&&a(H),e&&a(h),e&&a(J),z(x,e),e&&a(U),e&&a(_),z(j),z(E)}}}const Pe={local:"accelerate.logging.get_logger",title:"Logging with Accelerate"};function qe(G){return xe(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Fe extends ye{constructor(l){super();we(this,l,qe,De,Ee,{})}}export{Fe as default,Pe as metadata};
