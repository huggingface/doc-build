import{S as yr,i as gr,s as $r,e as s,k as u,w as y,t as o,M as wr,c as i,d as a,m as p,a as n,x as g,h as r,b as $,G as t,g as c,y as w,q as v,o as E,B as b,v as vr}from"../../chunks/vendor-hf-doc-builder.js";import{T as xo}from"../../chunks/Tip-hf-doc-builder.js";import{I as oa}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as j}from"../../chunks/CodeBlock-hf-doc-builder.js";function Er(B){let f,k,h,d,P,_,D,A;return{c(){f=s("p"),k=o("It\u2019s recommended you run "),h=s("code"),d=o("accelerate config"),P=o(" before using "),_=s("code"),D=o("accelerate launch"),A=o(` to configure your environment to your liking.
Otherwise \u{1F917} Accelerate will use very basic defaults depending on your system setup.`)},l(C){f=i(C,"P",{});var m=n(f);k=r(m,"It\u2019s recommended you run "),h=i(m,"CODE",{});var O=n(h);d=r(O,"accelerate config"),O.forEach(a),P=r(m," before using "),_=i(m,"CODE",{});var G=n(_);D=r(G,"accelerate launch"),G.forEach(a),A=r(m,` to configure your environment to your liking.
Otherwise \u{1F917} Accelerate will use very basic defaults depending on your system setup.`),m.forEach(a)},m(C,m){c(C,f,m),t(f,k),t(f,h),t(h,d),t(f,P),t(f,_),t(_,D),t(f,A)},d(C){C&&a(f)}}}function br(B){let f,k,h,d,P,_,D,A;return{c(){f=s("p"),k=o("If you are familiar with launching scripts in PyTorch yourself such as with "),h=s("code"),d=o("torchrun"),P=o(", you can still do this. It is not required to use "),_=s("code"),D=o("accelerate launch"),A=o(".")},l(C){f=i(C,"P",{});var m=n(f);k=r(m,"If you are familiar with launching scripts in PyTorch yourself such as with "),h=i(m,"CODE",{});var O=n(h);d=r(O,"torchrun"),O.forEach(a),P=r(m,", you can still do this. It is not required to use "),_=i(m,"CODE",{});var G=n(_);D=r(G,"accelerate launch"),G.forEach(a),A=r(m,"."),m.forEach(a)},m(C,m){c(C,f,m),t(f,k),t(f,h),t(h,d),t(f,P),t(f,_),t(_,D),t(f,A)},d(C){C&&a(f)}}}function kr(B){let f,k;return{c(){f=s("p"),k=o("Even if you are not using \u{1F917} Accelerate in your code, you can still use the launcher for starting your scripts!")},l(h){f=i(h,"P",{});var d=n(f);k=r(d,"Even if you are not using \u{1F917} Accelerate in your code, you can still use the launcher for starting your scripts!"),d.forEach(a)},m(h,d){c(h,f,d),t(f,k)},d(h){h&&a(f)}}}function Cr(B){let f,k,h,d,P,_,D,A,C,m,O,G,ft,re,ht,we,ra,mt,ve,la,dt,le,_t,R,sa,Le,ia,na,yt,W,gt,H,V,Te,se,ca,Se,ua,$t,X,pa,Ue,fa,ha,wt,Y,vt,Ee,ma,Et,ie,bt,J,da,Ge,_a,ya,kt,K,ga,He,$a,wa,Ct,ne,Pt,z,va,Ne,Ea,ba,Fe,ka,Ca,At,ce,Ot,be,Pa,xt,ue,It,ke,Aa,Dt,pe,jt,Q,zt,L,Oa,qe,xa,Ia,Me,Da,ja,Lt,fe,Tt,N,Z,Be,he,za,Ce,La,Re,Ta,St,T,Sa,We,Ua,Ga,Ve,Ha,Na,Ut,x,Fa,Xe,qa,Ma,Ye,Ba,Ra,Je,Wa,Va,Gt,me,Ht,F,ee,Ke,de,Xa,Qe,Ya,Nt,I,Ja,Ze,Ka,Qa,et,Za,eo,tt,to,ao,Ft,S,q,oo,at,ro,lo,ot,so,io,no,M,co,rt,uo,po,lt,fo,ho,mo,_e,_o,st,yo,go,qt,U,$o,it,wo,vo,nt,Eo,bo,Mt,te,ko,ct,Co,Po,Bt,ye,Rt,Pe,Ao,Wt,ge,Vt;return _=new oa({}),re=new j({props:{code:`from accelerate import Accelerator

accelerator = Accelerator()

model, optimizer, training_dataloader, scheduler = accelerator.prepare(
    model, optimizer, training_dataloader, scheduler
)

for batch in training_dataloader:
    optimizer.zero_grad()
    inputs, targets = batch
    outputs = model(inputs)
    loss = loss_function(outputs, targets)
    accelerator.backward(loss)
    optimizer.step()
    scheduler.step()`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

accelerator = Accelerator()

model, optimizer, training_dataloader, scheduler = accelerator.prepare(
    model, optimizer, training_dataloader, scheduler
)

<span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> training_dataloader:
    optimizer.zero_grad()
    inputs, targets = batch
    outputs = model(inputs)
    loss = loss_function(outputs, targets)
    accelerator.backward(loss)
    optimizer.step()
    scheduler.step()`}}),le=new j({props:{code:`  from accelerate import Accelerator
  
+ def main():
      accelerator = Accelerator()

      model, optimizer, training_dataloader, scheduler = accelerator.prepare(
          model, optimizer, training_dataloader, scheduler
      )

      for batch in training_dataloader:
          optimizer.zero_grad()
          inputs, targets = batch
          outputs = model(inputs)
          loss = loss_function(outputs, targets)
          accelerator.backward(loss)
          optimizer.step()
          scheduler.step()

+ if __name__ == "__main__":
+     main()`,highlighted:`  from accelerate import Accelerator
  
<span class="hljs-addition">+ def main():</span>
      accelerator = Accelerator()

      model, optimizer, training_dataloader, scheduler = accelerator.prepare(
          model, optimizer, training_dataloader, scheduler
      )

      for batch in training_dataloader:
          optimizer.zero_grad()
          inputs, targets = batch
          outputs = model(inputs)
          loss = loss_function(outputs, targets)
          accelerator.backward(loss)
          optimizer.step()
          scheduler.step()

<span class="hljs-addition">+ if __name__ == &quot;__main__&quot;:</span>
<span class="hljs-addition">+     main()</span>`}}),W=new xo({props:{warning:!0,$$slots:{default:[Er]},$$scope:{ctx:B}}}),se=new oa({}),Y=new xo({props:{$$slots:{default:[br]},$$scope:{ctx:B}}}),ie=new j({props:{code:"accelerate launch {script_name.py} --arg1 --arg2 ...",highlighted:"accelerate launch {script_name.py} --arg1 --arg2 ..."}}),ne=new j({props:{code:'CUDA_VISIBLE_DEVICES="0" accelerate launch {script_name.py} --arg1 --arg2 ...',highlighted:'CUDA_VISIBLE_DEVICES=<span class="hljs-string">&quot;0&quot;</span> accelerate launch {script_name.py} --arg1 --arg2 ...'}}),ce=new j({props:{code:"accelerate launch --multi_gpu {script_name.py} {--arg1} {--arg2} ...",highlighted:"accelerate launch --multi_gpu {script_name.py} {--arg1} {--arg2} ..."}}),ue=new j({props:{code:"accelerate launch --multi_gpu --mixed_precision=fp16 --num_processes=2 {script_name.py} {--arg1} {--arg2} ...",highlighted:"accelerate launch --multi_gpu --mixed_precision=fp16 --num_processes=2 {script_name.py} {--arg1} {--arg2} ..."}}),pe=new j({props:{code:"accelerate launch -h",highlighted:"accelerate launch -h"}}),Q=new xo({props:{$$slots:{default:[kr]},$$scope:{ctx:B}}}),fe=new j({props:{code:'MIXED_PRECISION="fp16" torchrun --nproc_per_node=2 --num_machines=1 {script_name.py} {--arg1} {--arg2} ...',highlighted:'MIXED_PRECISION=<span class="hljs-string">&quot;fp16&quot;</span> torchrun --nproc_per_node=2 --num_machines=1 {script_name.py} {--arg1} {--arg2} ...'}}),he=new oa({}),me=new j({props:{code:"accelerate launch {script_name.py} {--arg1} {--arg2} ...",highlighted:"accelerate launch {script_name.py} {--arg1} {--arg2} ..."}}),de=new oa({}),ye=new j({props:{code:`compute_environment: LOCAL_MACHINE
deepspeed_config: {}
distributed_type: MULTI_GPU
fsdp_config: {}
machine_rank: 0
main_process_ip: null
main_process_port: null
main_training_function: main
mixed_precision: fp16
num_machines: 1
num_processes: 2
use_cpu: false`,highlighted:`<span class="hljs-attr">compute_environment:</span> <span class="hljs-string">LOCAL_MACHINE</span>
<span class="hljs-attr">deepspeed_config:</span> {}
<span class="hljs-attr">distributed_type:</span> <span class="hljs-string">MULTI_GPU</span>
<span class="hljs-attr">fsdp_config:</span> {}
<span class="hljs-attr">machine_rank:</span> <span class="hljs-number">0</span>
<span class="hljs-attr">main_process_ip:</span> <span class="hljs-literal">null</span>
<span class="hljs-attr">main_process_port:</span> <span class="hljs-literal">null</span>
<span class="hljs-attr">main_training_function:</span> <span class="hljs-string">main</span>
<span class="hljs-attr">mixed_precision:</span> <span class="hljs-string">fp16</span>
<span class="hljs-attr">num_machines:</span> <span class="hljs-number">1</span>
<span class="hljs-attr">num_processes:</span> <span class="hljs-number">2</span>
<span class="hljs-attr">use_cpu:</span> <span class="hljs-literal">false</span>`}}),ge=new j({props:{code:"accelerate launch --config_file {path/to/config/my_config_file.yaml} {script_name.py} {--arg1} {--arg2} ...",highlighted:"accelerate launch --config_file {path/to/config/my_config_file.yaml} {script_name.py} {--arg1} {--arg2} ..."}}),{c(){f=s("meta"),k=u(),h=s("h1"),d=s("a"),P=s("span"),y(_.$$.fragment),D=u(),A=s("span"),C=o("Launching your \u{1F917} Accelerate scripts"),m=u(),O=s("p"),G=o(`In the previous tutorial, you were introduced to how to modify your current training script to use \u{1F917} Accelerate.
The final version of that code is shown below:`),ft=u(),y(re.$$.fragment),ht=u(),we=s("p"),ra=o("But how do you run this code and have it utilize the special hardware available to it?"),mt=u(),ve=s("p"),la=o("First you should rewrite the above code into a function, and make it callable as a script. For example:"),dt=u(),y(le.$$.fragment),_t=u(),R=s("p"),sa=o("Next you need to launch it with "),Le=s("code"),ia=o("accelerate launch"),na=o("."),yt=u(),y(W.$$.fragment),gt=u(),H=s("h2"),V=s("a"),Te=s("span"),y(se.$$.fragment),ca=u(),Se=s("span"),ua=o("Using accelerate launch"),$t=u(),X=s("p"),pa=o("\u{1F917} Accelerate has a special CLI command to help you launch your code in your system through "),Ue=s("code"),fa=o("accelerate launch"),ha=o(`.
This command wraps around all of the different commands needed to launch your script on various platforms, without you having to remember what each of them are.`),wt=u(),y(Y.$$.fragment),vt=u(),Ee=s("p"),ma=o("You can launch your script quickly by using:"),Et=u(),y(ie.$$.fragment),bt=u(),J=s("p"),da=o("Just put "),Ge=s("code"),_a=o("accelerate launch"),ya=o(" at the start of your command, and pass in additional arguments and parameters to your script afterwards like normal!"),kt=u(),K=s("p"),ga=o(`Since this runs the various torch spawn methods, all of the expected environment variables can be modified here as well.
For example, here is how to use `),He=s("code"),$a=o("accelerate launch"),wa=o(" with a single GPU:"),Ct=u(),y(ne.$$.fragment),Pt=u(),z=s("p"),va=o("You can also use "),Ne=s("code"),Ea=o("accelerate launch"),ba=o(" without performing "),Fe=s("code"),ka=o("accelerate config"),Ca=o(` first, but you may need to manually pass in the right configuration parameters.
In this case, \u{1F917} Accelerate will make some hyperparameter decisions for you, e.g., if GPUs are available, it will use all of them by default without the mixed precision.
Here is how you would use all GPUs and train with mixed precision disabled:`),At=u(),y(ce.$$.fragment),Ot=u(),be=s("p"),Pa=o(`To get more specific you should pass in the needed parameters yourself. For instance, here is how you
would also launch that same script on two GPUs using mixed precision while avoiding all of the warnings:`),xt=u(),y(ue.$$.fragment),It=u(),ke=s("p"),Aa=o("For a complete list of parameters you can pass in, run:"),Dt=u(),y(pe.$$.fragment),jt=u(),y(Q.$$.fragment),zt=u(),L=s("p"),Oa=o("For a visualization of this difference, that earlier "),qe=s("code"),xa=o("accelerate launch"),Ia=o(" on multi-gpu would look something like so with "),Me=s("code"),Da=o("torchrun"),ja=o(":"),Lt=u(),y(fe.$$.fragment),Tt=u(),N=s("h2"),Z=s("a"),Be=s("span"),y(he.$$.fragment),za=u(),Ce=s("span"),La=o("Why you should always use "),Re=s("code"),Ta=o("accelerate config"),St=u(),T=s("p"),Sa=o("Why is it useful to the point you should "),We=s("strong"),Ua=o("always"),Ga=o(" run "),Ve=s("code"),Ha=o("accelerate config"),Na=o("?"),Ut=u(),x=s("p"),Fa=o("Remember that earlier call to "),Xe=s("code"),qa=o("accelerate launch"),Ma=o(" as well as "),Ye=s("code"),Ba=o("torchrun"),Ra=o(`?
Post configuration, to run that script with the needed parts you just need to use `),Je=s("code"),Wa=o("accelerate launch"),Va=o(" outright, without passing anything else in:"),Gt=u(),y(me.$$.fragment),Ht=u(),F=s("h2"),ee=s("a"),Ke=s("span"),y(de.$$.fragment),Xa=u(),Qe=s("span"),Ya=o("Custom Configurations"),Nt=u(),I=s("p"),Ja=o("As briefly mentioned earlier, "),Ze=s("code"),Ka=o("accelerate launch"),Qa=o(` should be mostly used through combining set configurations
made with the `),et=s("code"),Za=o("accelerate config"),eo=o(" command. These configs are saved to a "),tt=s("code"),to=o("default_config.yaml"),ao=o(` file in your cache folder for \u{1F917} Accelerate.
This cache folder is located at (with decreasing order of priority):`),Ft=u(),S=s("ul"),q=s("li"),oo=o("The content of your environment variable "),at=s("code"),ro=o("HF_HOME"),lo=o(" suffixed with "),ot=s("code"),so=o("accelerate"),io=o("."),no=u(),M=s("li"),co=o("If it does not exist, the content of your environment variable "),rt=s("code"),uo=o("XDG_CACHE_HOME"),po=o(` suffixed with
`),lt=s("code"),fo=o("huggingface/accelerate"),ho=o("."),mo=u(),_e=s("li"),_o=o("If this does not exist either, the folder "),st=s("code"),yo=o("~/.cache/huggingface/accelerate"),go=o("."),qt=u(),U=s("p"),$o=o("To have multiple configurations, the flag "),it=s("code"),wo=o("--config_file"),vo=o(" can be passed to the "),nt=s("code"),Eo=o("accelerate launch"),bo=o(` command paired
with the location of the custom yaml.`),Mt=u(),te=s("p"),ko=o("An example yaml may look something like the following for two GPUs on a single machine using "),ct=s("code"),Co=o("fp16"),Po=o(" for mixed precision:"),Bt=u(),y(ye.$$.fragment),Rt=u(),Pe=s("p"),Ao=o("Launching a script from the location of that custom yaml file looks like the following:"),Wt=u(),y(ge.$$.fragment),this.h()},l(e){const l=wr('[data-svelte="svelte-1phssyn"]',document.head);f=i(l,"META",{name:!0,content:!0}),l.forEach(a),k=p(e),h=i(e,"H1",{class:!0});var $e=n(h);d=i($e,"A",{id:!0,class:!0,href:!0});var ut=n(d);P=i(ut,"SPAN",{});var pt=n(P);g(_.$$.fragment,pt),pt.forEach(a),ut.forEach(a),D=p($e),A=i($e,"SPAN",{});var Io=n(A);C=r(Io,"Launching your \u{1F917} Accelerate scripts"),Io.forEach(a),$e.forEach(a),m=p(e),O=i(e,"P",{});var Do=n(O);G=r(Do,`In the previous tutorial, you were introduced to how to modify your current training script to use \u{1F917} Accelerate.
The final version of that code is shown below:`),Do.forEach(a),ft=p(e),g(re.$$.fragment,e),ht=p(e),we=i(e,"P",{});var jo=n(we);ra=r(jo,"But how do you run this code and have it utilize the special hardware available to it?"),jo.forEach(a),mt=p(e),ve=i(e,"P",{});var zo=n(ve);la=r(zo,"First you should rewrite the above code into a function, and make it callable as a script. For example:"),zo.forEach(a),dt=p(e),g(le.$$.fragment,e),_t=p(e),R=i(e,"P",{});var Xt=n(R);sa=r(Xt,"Next you need to launch it with "),Le=i(Xt,"CODE",{});var Lo=n(Le);ia=r(Lo,"accelerate launch"),Lo.forEach(a),na=r(Xt,"."),Xt.forEach(a),yt=p(e),g(W.$$.fragment,e),gt=p(e),H=i(e,"H2",{class:!0});var Yt=n(H);V=i(Yt,"A",{id:!0,class:!0,href:!0});var To=n(V);Te=i(To,"SPAN",{});var So=n(Te);g(se.$$.fragment,So),So.forEach(a),To.forEach(a),ca=p(Yt),Se=i(Yt,"SPAN",{});var Uo=n(Se);ua=r(Uo,"Using accelerate launch"),Uo.forEach(a),Yt.forEach(a),$t=p(e),X=i(e,"P",{});var Jt=n(X);pa=r(Jt,"\u{1F917} Accelerate has a special CLI command to help you launch your code in your system through "),Ue=i(Jt,"CODE",{});var Go=n(Ue);fa=r(Go,"accelerate launch"),Go.forEach(a),ha=r(Jt,`.
This command wraps around all of the different commands needed to launch your script on various platforms, without you having to remember what each of them are.`),Jt.forEach(a),wt=p(e),g(Y.$$.fragment,e),vt=p(e),Ee=i(e,"P",{});var Ho=n(Ee);ma=r(Ho,"You can launch your script quickly by using:"),Ho.forEach(a),Et=p(e),g(ie.$$.fragment,e),bt=p(e),J=i(e,"P",{});var Kt=n(J);da=r(Kt,"Just put "),Ge=i(Kt,"CODE",{});var No=n(Ge);_a=r(No,"accelerate launch"),No.forEach(a),ya=r(Kt," at the start of your command, and pass in additional arguments and parameters to your script afterwards like normal!"),Kt.forEach(a),kt=p(e),K=i(e,"P",{});var Qt=n(K);ga=r(Qt,`Since this runs the various torch spawn methods, all of the expected environment variables can be modified here as well.
For example, here is how to use `),He=i(Qt,"CODE",{});var Fo=n(He);$a=r(Fo,"accelerate launch"),Fo.forEach(a),wa=r(Qt," with a single GPU:"),Qt.forEach(a),Ct=p(e),g(ne.$$.fragment,e),Pt=p(e),z=i(e,"P",{});var Ae=n(z);va=r(Ae,"You can also use "),Ne=i(Ae,"CODE",{});var qo=n(Ne);Ea=r(qo,"accelerate launch"),qo.forEach(a),ba=r(Ae," without performing "),Fe=i(Ae,"CODE",{});var Mo=n(Fe);ka=r(Mo,"accelerate config"),Mo.forEach(a),Ca=r(Ae,` first, but you may need to manually pass in the right configuration parameters.
In this case, \u{1F917} Accelerate will make some hyperparameter decisions for you, e.g., if GPUs are available, it will use all of them by default without the mixed precision.
Here is how you would use all GPUs and train with mixed precision disabled:`),Ae.forEach(a),At=p(e),g(ce.$$.fragment,e),Ot=p(e),be=i(e,"P",{});var Bo=n(be);Pa=r(Bo,`To get more specific you should pass in the needed parameters yourself. For instance, here is how you
would also launch that same script on two GPUs using mixed precision while avoiding all of the warnings:`),Bo.forEach(a),xt=p(e),g(ue.$$.fragment,e),It=p(e),ke=i(e,"P",{});var Ro=n(ke);Aa=r(Ro,"For a complete list of parameters you can pass in, run:"),Ro.forEach(a),Dt=p(e),g(pe.$$.fragment,e),jt=p(e),g(Q.$$.fragment,e),zt=p(e),L=i(e,"P",{});var Oe=n(L);Oa=r(Oe,"For a visualization of this difference, that earlier "),qe=i(Oe,"CODE",{});var Wo=n(qe);xa=r(Wo,"accelerate launch"),Wo.forEach(a),Ia=r(Oe," on multi-gpu would look something like so with "),Me=i(Oe,"CODE",{});var Vo=n(Me);Da=r(Vo,"torchrun"),Vo.forEach(a),ja=r(Oe,":"),Oe.forEach(a),Lt=p(e),g(fe.$$.fragment,e),Tt=p(e),N=i(e,"H2",{class:!0});var Zt=n(N);Z=i(Zt,"A",{id:!0,class:!0,href:!0});var Xo=n(Z);Be=i(Xo,"SPAN",{});var Yo=n(Be);g(he.$$.fragment,Yo),Yo.forEach(a),Xo.forEach(a),za=p(Zt),Ce=i(Zt,"SPAN",{});var Oo=n(Ce);La=r(Oo,"Why you should always use "),Re=i(Oo,"CODE",{});var Jo=n(Re);Ta=r(Jo,"accelerate config"),Jo.forEach(a),Oo.forEach(a),Zt.forEach(a),St=p(e),T=i(e,"P",{});var xe=n(T);Sa=r(xe,"Why is it useful to the point you should "),We=i(xe,"STRONG",{});var Ko=n(We);Ua=r(Ko,"always"),Ko.forEach(a),Ga=r(xe," run "),Ve=i(xe,"CODE",{});var Qo=n(Ve);Ha=r(Qo,"accelerate config"),Qo.forEach(a),Na=r(xe,"?"),xe.forEach(a),Ut=p(e),x=i(e,"P",{});var ae=n(x);Fa=r(ae,"Remember that earlier call to "),Xe=i(ae,"CODE",{});var Zo=n(Xe);qa=r(Zo,"accelerate launch"),Zo.forEach(a),Ma=r(ae," as well as "),Ye=i(ae,"CODE",{});var er=n(Ye);Ba=r(er,"torchrun"),er.forEach(a),Ra=r(ae,`?
Post configuration, to run that script with the needed parts you just need to use `),Je=i(ae,"CODE",{});var tr=n(Je);Wa=r(tr,"accelerate launch"),tr.forEach(a),Va=r(ae," outright, without passing anything else in:"),ae.forEach(a),Gt=p(e),g(me.$$.fragment,e),Ht=p(e),F=i(e,"H2",{class:!0});var ea=n(F);ee=i(ea,"A",{id:!0,class:!0,href:!0});var ar=n(ee);Ke=i(ar,"SPAN",{});var or=n(Ke);g(de.$$.fragment,or),or.forEach(a),ar.forEach(a),Xa=p(ea),Qe=i(ea,"SPAN",{});var rr=n(Qe);Ya=r(rr,"Custom Configurations"),rr.forEach(a),ea.forEach(a),Nt=p(e),I=i(e,"P",{});var oe=n(I);Ja=r(oe,"As briefly mentioned earlier, "),Ze=i(oe,"CODE",{});var lr=n(Ze);Ka=r(lr,"accelerate launch"),lr.forEach(a),Qa=r(oe,` should be mostly used through combining set configurations
made with the `),et=i(oe,"CODE",{});var sr=n(et);Za=r(sr,"accelerate config"),sr.forEach(a),eo=r(oe," command. These configs are saved to a "),tt=i(oe,"CODE",{});var ir=n(tt);to=r(ir,"default_config.yaml"),ir.forEach(a),ao=r(oe,` file in your cache folder for \u{1F917} Accelerate.
This cache folder is located at (with decreasing order of priority):`),oe.forEach(a),Ft=p(e),S=i(e,"UL",{});var Ie=n(S);q=i(Ie,"LI",{});var De=n(q);oo=r(De,"The content of your environment variable "),at=i(De,"CODE",{});var nr=n(at);ro=r(nr,"HF_HOME"),nr.forEach(a),lo=r(De," suffixed with "),ot=i(De,"CODE",{});var cr=n(ot);so=r(cr,"accelerate"),cr.forEach(a),io=r(De,"."),De.forEach(a),no=p(Ie),M=i(Ie,"LI",{});var je=n(M);co=r(je,"If it does not exist, the content of your environment variable "),rt=i(je,"CODE",{});var ur=n(rt);uo=r(ur,"XDG_CACHE_HOME"),ur.forEach(a),po=r(je,` suffixed with
`),lt=i(je,"CODE",{});var pr=n(lt);fo=r(pr,"huggingface/accelerate"),pr.forEach(a),ho=r(je,"."),je.forEach(a),mo=p(Ie),_e=i(Ie,"LI",{});var ta=n(_e);_o=r(ta,"If this does not exist either, the folder "),st=i(ta,"CODE",{});var fr=n(st);yo=r(fr,"~/.cache/huggingface/accelerate"),fr.forEach(a),go=r(ta,"."),ta.forEach(a),Ie.forEach(a),qt=p(e),U=i(e,"P",{});var ze=n(U);$o=r(ze,"To have multiple configurations, the flag "),it=i(ze,"CODE",{});var hr=n(it);wo=r(hr,"--config_file"),hr.forEach(a),vo=r(ze," can be passed to the "),nt=i(ze,"CODE",{});var mr=n(nt);Eo=r(mr,"accelerate launch"),mr.forEach(a),bo=r(ze,` command paired
with the location of the custom yaml.`),ze.forEach(a),Mt=p(e),te=i(e,"P",{});var aa=n(te);ko=r(aa,"An example yaml may look something like the following for two GPUs on a single machine using "),ct=i(aa,"CODE",{});var dr=n(ct);Co=r(dr,"fp16"),dr.forEach(a),Po=r(aa," for mixed precision:"),aa.forEach(a),Bt=p(e),g(ye.$$.fragment,e),Rt=p(e),Pe=i(e,"P",{});var _r=n(Pe);Ao=r(_r,"Launching a script from the location of that custom yaml file looks like the following:"),_r.forEach(a),Wt=p(e),g(ge.$$.fragment,e),this.h()},h(){$(f,"name","hf:doc:metadata"),$(f,"content",JSON.stringify(Pr)),$(d,"id","launching-your-accelerate-scripts"),$(d,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),$(d,"href","#launching-your-accelerate-scripts"),$(h,"class","relative group"),$(V,"id","using-accelerate-launch"),$(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),$(V,"href","#using-accelerate-launch"),$(H,"class","relative group"),$(Z,"id","why-you-should-always-use-accelerate-config"),$(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),$(Z,"href","#why-you-should-always-use-accelerate-config"),$(N,"class","relative group"),$(ee,"id","custom-configurations"),$(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),$(ee,"href","#custom-configurations"),$(F,"class","relative group")},m(e,l){t(document.head,f),c(e,k,l),c(e,h,l),t(h,d),t(d,P),w(_,P,null),t(h,D),t(h,A),t(A,C),c(e,m,l),c(e,O,l),t(O,G),c(e,ft,l),w(re,e,l),c(e,ht,l),c(e,we,l),t(we,ra),c(e,mt,l),c(e,ve,l),t(ve,la),c(e,dt,l),w(le,e,l),c(e,_t,l),c(e,R,l),t(R,sa),t(R,Le),t(Le,ia),t(R,na),c(e,yt,l),w(W,e,l),c(e,gt,l),c(e,H,l),t(H,V),t(V,Te),w(se,Te,null),t(H,ca),t(H,Se),t(Se,ua),c(e,$t,l),c(e,X,l),t(X,pa),t(X,Ue),t(Ue,fa),t(X,ha),c(e,wt,l),w(Y,e,l),c(e,vt,l),c(e,Ee,l),t(Ee,ma),c(e,Et,l),w(ie,e,l),c(e,bt,l),c(e,J,l),t(J,da),t(J,Ge),t(Ge,_a),t(J,ya),c(e,kt,l),c(e,K,l),t(K,ga),t(K,He),t(He,$a),t(K,wa),c(e,Ct,l),w(ne,e,l),c(e,Pt,l),c(e,z,l),t(z,va),t(z,Ne),t(Ne,Ea),t(z,ba),t(z,Fe),t(Fe,ka),t(z,Ca),c(e,At,l),w(ce,e,l),c(e,Ot,l),c(e,be,l),t(be,Pa),c(e,xt,l),w(ue,e,l),c(e,It,l),c(e,ke,l),t(ke,Aa),c(e,Dt,l),w(pe,e,l),c(e,jt,l),w(Q,e,l),c(e,zt,l),c(e,L,l),t(L,Oa),t(L,qe),t(qe,xa),t(L,Ia),t(L,Me),t(Me,Da),t(L,ja),c(e,Lt,l),w(fe,e,l),c(e,Tt,l),c(e,N,l),t(N,Z),t(Z,Be),w(he,Be,null),t(N,za),t(N,Ce),t(Ce,La),t(Ce,Re),t(Re,Ta),c(e,St,l),c(e,T,l),t(T,Sa),t(T,We),t(We,Ua),t(T,Ga),t(T,Ve),t(Ve,Ha),t(T,Na),c(e,Ut,l),c(e,x,l),t(x,Fa),t(x,Xe),t(Xe,qa),t(x,Ma),t(x,Ye),t(Ye,Ba),t(x,Ra),t(x,Je),t(Je,Wa),t(x,Va),c(e,Gt,l),w(me,e,l),c(e,Ht,l),c(e,F,l),t(F,ee),t(ee,Ke),w(de,Ke,null),t(F,Xa),t(F,Qe),t(Qe,Ya),c(e,Nt,l),c(e,I,l),t(I,Ja),t(I,Ze),t(Ze,Ka),t(I,Qa),t(I,et),t(et,Za),t(I,eo),t(I,tt),t(tt,to),t(I,ao),c(e,Ft,l),c(e,S,l),t(S,q),t(q,oo),t(q,at),t(at,ro),t(q,lo),t(q,ot),t(ot,so),t(q,io),t(S,no),t(S,M),t(M,co),t(M,rt),t(rt,uo),t(M,po),t(M,lt),t(lt,fo),t(M,ho),t(S,mo),t(S,_e),t(_e,_o),t(_e,st),t(st,yo),t(_e,go),c(e,qt,l),c(e,U,l),t(U,$o),t(U,it),t(it,wo),t(U,vo),t(U,nt),t(nt,Eo),t(U,bo),c(e,Mt,l),c(e,te,l),t(te,ko),t(te,ct),t(ct,Co),t(te,Po),c(e,Bt,l),w(ye,e,l),c(e,Rt,l),c(e,Pe,l),t(Pe,Ao),c(e,Wt,l),w(ge,e,l),Vt=!0},p(e,[l]){const $e={};l&2&&($e.$$scope={dirty:l,ctx:e}),W.$set($e);const ut={};l&2&&(ut.$$scope={dirty:l,ctx:e}),Y.$set(ut);const pt={};l&2&&(pt.$$scope={dirty:l,ctx:e}),Q.$set(pt)},i(e){Vt||(v(_.$$.fragment,e),v(re.$$.fragment,e),v(le.$$.fragment,e),v(W.$$.fragment,e),v(se.$$.fragment,e),v(Y.$$.fragment,e),v(ie.$$.fragment,e),v(ne.$$.fragment,e),v(ce.$$.fragment,e),v(ue.$$.fragment,e),v(pe.$$.fragment,e),v(Q.$$.fragment,e),v(fe.$$.fragment,e),v(he.$$.fragment,e),v(me.$$.fragment,e),v(de.$$.fragment,e),v(ye.$$.fragment,e),v(ge.$$.fragment,e),Vt=!0)},o(e){E(_.$$.fragment,e),E(re.$$.fragment,e),E(le.$$.fragment,e),E(W.$$.fragment,e),E(se.$$.fragment,e),E(Y.$$.fragment,e),E(ie.$$.fragment,e),E(ne.$$.fragment,e),E(ce.$$.fragment,e),E(ue.$$.fragment,e),E(pe.$$.fragment,e),E(Q.$$.fragment,e),E(fe.$$.fragment,e),E(he.$$.fragment,e),E(me.$$.fragment,e),E(de.$$.fragment,e),E(ye.$$.fragment,e),E(ge.$$.fragment,e),Vt=!1},d(e){a(f),e&&a(k),e&&a(h),b(_),e&&a(m),e&&a(O),e&&a(ft),b(re,e),e&&a(ht),e&&a(we),e&&a(mt),e&&a(ve),e&&a(dt),b(le,e),e&&a(_t),e&&a(R),e&&a(yt),b(W,e),e&&a(gt),e&&a(H),b(se),e&&a($t),e&&a(X),e&&a(wt),b(Y,e),e&&a(vt),e&&a(Ee),e&&a(Et),b(ie,e),e&&a(bt),e&&a(J),e&&a(kt),e&&a(K),e&&a(Ct),b(ne,e),e&&a(Pt),e&&a(z),e&&a(At),b(ce,e),e&&a(Ot),e&&a(be),e&&a(xt),b(ue,e),e&&a(It),e&&a(ke),e&&a(Dt),b(pe,e),e&&a(jt),b(Q,e),e&&a(zt),e&&a(L),e&&a(Lt),b(fe,e),e&&a(Tt),e&&a(N),b(he),e&&a(St),e&&a(T),e&&a(Ut),e&&a(x),e&&a(Gt),b(me,e),e&&a(Ht),e&&a(F),b(de),e&&a(Nt),e&&a(I),e&&a(Ft),e&&a(S),e&&a(qt),e&&a(U),e&&a(Mt),e&&a(te),e&&a(Bt),b(ye,e),e&&a(Rt),e&&a(Pe),e&&a(Wt),b(ge,e)}}}const Pr={local:"launching-your-accelerate-scripts",sections:[{local:"using-accelerate-launch",title:"Using accelerate launch"},{local:"why-you-should-always-use-accelerate-config",title:"Why you should always use `accelerate config`"},{local:"custom-configurations",title:"Custom Configurations"}],title:"Launching your \u{1F917} Accelerate scripts"};function Ar(B){return vr(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jr extends yr{constructor(f){super();gr(this,f,Ar,Cr,$r,{})}}export{jr as default,Pr as metadata};
