import{S as Je,i as Re,s as je,e as s,k as o,w as y,t as w,M as Ke,c as n,d as a,m as i,a as l,x as M,h as L,b as m,G as t,g as c,y as N,L as Qe,q as D,o as T,B as P,v as We}from"../../chunks/vendor-hf-doc-builder.js";import{D as E}from"../../chunks/Docstring-hf-doc-builder.js";import{I as Xe}from"../../chunks/IconCopyLink-hf-doc-builder.js";function Ye(ke){let p,W,u,x,O,S,_e,U,fe,X,g,A,ve,C,he,Y,d,k,be,F,$e,Z,_,z,ye,H,we,ee,f,I,Me,J,Le,ae,v,q,Ne,R,De,te,h,V,Te,j,Pe,re,b,B,xe,K,Ee,se,$,G,Se,Q,Ae,ne;return S=new Xe({}),A=new E({props:{name:"class accelerate.utils.MegatronLMPlugin",anchor:"accelerate.utils.MegatronLMPlugin",parameters:[{name:"tp_degree",val:": int = None"},{name:"pp_degree",val:": int = None"},{name:"num_micro_batches",val:": int = None"},{name:"gradient_clipping",val:": float = None"},{name:"sequence_parallelism",val:": bool = None"},{name:"recompute_activation",val:": bool = None"},{name:"use_distributed_optimizer",val:": bool = None"},{name:"pipeline_model_parallel_split_rank",val:": int = None"},{name:"num_layers_per_virtual_pipeline_stage",val:": int = None"},{name:"is_train_batch_min",val:": str = True"},{name:"train_iters",val:": int = None"},{name:"train_samples",val:": int = None"},{name:"weight_decay_incr_style",val:": str = 'constant'"},{name:"start_weight_decay",val:": float = None"},{name:"end_weight_decay",val:": float = None"},{name:"lr_decay_style",val:": str = 'linear'"},{name:"lr_decay_iters",val:": int = None"},{name:"lr_decay_samples",val:": int = None"},{name:"lr_warmup_iters",val:": int = None"},{name:"lr_warmup_samples",val:": int = None"},{name:"lr_warmup_fraction",val:": float = None"},{name:"min_lr",val:": float = 0"},{name:"consumed_samples",val:": typing.List[int] = None"},{name:"no_wd_decay_cond",val:": typing.Optional[typing.Callable] = None"},{name:"scale_lr_cond",val:": typing.Optional[typing.Callable] = None"},{name:"lr_mult",val:": float = 1.0"},{name:"megatron_dataset_flag",val:": bool = False"},{name:"seq_length",val:": int = None"},{name:"encoder_seq_length",val:": int = None"},{name:"decoder_seq_length",val:": int = None"},{name:"tensorboard_dir",val:": str = None"},{name:"set_all_logging_options",val:": bool = False"},{name:"custom_train_step_class",val:": typing.Optional[typing.Any] = None"},{name:"custom_train_step_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"eval_iters",val:": int = 100"},{name:"eval_interval",val:": int = 1000"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/utils/dataclasses.py#L654"}}),k=new E({props:{name:"class accelerate.utils.MegatronLMDummyScheduler",anchor:"accelerate.utils.MegatronLMDummyScheduler",parameters:[{name:"optimizer",val:""},{name:"total_num_steps",val:" = None"},{name:"warmup_num_steps",val:" = 0"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.utils.MegatronLMDummyScheduler.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.optimizer.Optimizer</code>) &#x2014;
The optimizer to wrap.`,name:"optimizer"},{anchor:"accelerate.utils.MegatronLMDummyScheduler.total_num_steps",description:`<strong>total_num_steps</strong> (int) &#x2014;
Total number of steps.`,name:"total_num_steps"},{anchor:"accelerate.utils.MegatronLMDummyScheduler.warmup_num_steps",description:`<strong>warmup_num_steps</strong> (int) &#x2014;
Number of steps for warmup.
**kwargs &#x2014;
Other arguments.`,name:"warmup_num_steps"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/utils/megatron_lm.py#L399"}}),z=new E({props:{name:"class accelerate.utils.MegatronLMDummyDataLoader",anchor:"accelerate.utils.MegatronLMDummyDataLoader",parameters:[{name:"**dataset_kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/utils/megatron_lm.py#L128"}}),I=new E({props:{name:"class accelerate.utils.AbstractTrainStep",anchor:"accelerate.utils.AbstractTrainStep",parameters:[{name:"name",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/utils/megatron_lm.py#L436"}}),q=new E({props:{name:"class accelerate.utils.GPTTrainStep",anchor:"accelerate.utils.GPTTrainStep",parameters:[{name:"args",val:""}],parametersDescription:[{anchor:"accelerate.utils.GPTTrainStep.args",description:"<strong>args</strong> (<code>argparse.Namespace</code>) &#x2014; Megatron-LM arguments.",name:"args"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/utils/megatron_lm.py#L582"}}),V=new E({props:{name:"class accelerate.utils.BertTrainStep",anchor:"accelerate.utils.BertTrainStep",parameters:[{name:"args",val:""}],parametersDescription:[{anchor:"accelerate.utils.BertTrainStep.args",description:"<strong>args</strong> (<code>argparse.Namespace</code>) &#x2014; Megatron-LM arguments.",name:"args"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/utils/megatron_lm.py#L453"}}),B=new E({props:{name:"class accelerate.utils.T5TrainStep",anchor:"accelerate.utils.T5TrainStep",parameters:[{name:"args",val:""}],parametersDescription:[{anchor:"accelerate.utils.T5TrainStep.args",description:"<strong>args</strong> (<code>argparse.Namespace</code>) &#x2014; Megatron-LM arguments.",name:"args"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/utils/megatron_lm.py#L675"}}),G=new E({props:{name:"accelerate.utils.avg_losses_across_data_parallel_group",anchor:"accelerate.utils.avg_losses_across_data_parallel_group",parameters:[{name:"losses",val:""}],parametersDescription:[{anchor:"accelerate.utils.avg_losses_across_data_parallel_group.losses",description:"<strong>losses</strong> (List[Tensor]) &#x2014; List of losses to average across data parallel group.",name:"losses"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/utils/megatron_lm.py#L1191"}}),{c(){p=s("meta"),W=o(),u=s("h1"),x=s("a"),O=s("span"),y(S.$$.fragment),_e=o(),U=s("span"),fe=w("Utilities for Megatron-LM"),X=o(),g=s("div"),y(A.$$.fragment),ve=o(),C=s("p"),he=w(`Plugin for Megatron-LM to enable tensor, pipeline, sequence and data parallelism. Also to enable selective
activation recomputation and optimized fused kernels.`),Y=o(),d=s("div"),y(k.$$.fragment),be=o(),F=s("p"),$e=w(`Dummy scheduler presents model parameters or param groups, this is primarily used to follow conventional training
loop when scheduler config is specified in the deepspeed config file.`),Z=o(),_=s("div"),y(z.$$.fragment),ye=o(),H=s("p"),we=w("Dummy dataloader presents model parameters or param groups, this is primarily used to follow conventional training"),ee=o(),f=s("div"),y(I.$$.fragment),Me=o(),J=s("p"),Le=w("Abstract class for batching, forward pass and loss handler."),ae=o(),v=s("div"),y(q.$$.fragment),Ne=o(),R=s("p"),De=w("GPT train step class."),te=o(),h=s("div"),y(V.$$.fragment),Te=o(),j=s("p"),Pe=w("Bert train step class."),re=o(),b=s("div"),y(B.$$.fragment),xe=o(),K=s("p"),Ee=w("T5 train step class."),se=o(),$=s("div"),y(G.$$.fragment),Se=o(),Q=s("p"),Ae=w("Average losses across data parallel group."),this.h()},l(e){const r=Ke('[data-svelte="svelte-1phssyn"]',document.head);p=n(r,"META",{name:!0,content:!0}),r.forEach(a),W=i(e),u=n(e,"H1",{class:!0});var le=l(u);x=n(le,"A",{id:!0,class:!0,href:!0});var ze=l(x);O=n(ze,"SPAN",{});var Ie=l(O);M(S.$$.fragment,Ie),Ie.forEach(a),ze.forEach(a),_e=i(le),U=n(le,"SPAN",{});var qe=l(U);fe=L(qe,"Utilities for Megatron-LM"),qe.forEach(a),le.forEach(a),X=i(e),g=n(e,"DIV",{class:!0});var oe=l(g);M(A.$$.fragment,oe),ve=i(oe),C=n(oe,"P",{});var Ve=l(C);he=L(Ve,`Plugin for Megatron-LM to enable tensor, pipeline, sequence and data parallelism. Also to enable selective
activation recomputation and optimized fused kernels.`),Ve.forEach(a),oe.forEach(a),Y=i(e),d=n(e,"DIV",{class:!0});var ie=l(d);M(k.$$.fragment,ie),be=i(ie),F=n(ie,"P",{});var Be=l(F);$e=L(Be,`Dummy scheduler presents model parameters or param groups, this is primarily used to follow conventional training
loop when scheduler config is specified in the deepspeed config file.`),Be.forEach(a),ie.forEach(a),Z=i(e),_=n(e,"DIV",{class:!0});var ce=l(_);M(z.$$.fragment,ce),ye=i(ce),H=n(ce,"P",{});var Ge=l(H);we=L(Ge,"Dummy dataloader presents model parameters or param groups, this is primarily used to follow conventional training"),Ge.forEach(a),ce.forEach(a),ee=i(e),f=n(e,"DIV",{class:!0});var me=l(f);M(I.$$.fragment,me),Me=i(me),J=n(me,"P",{});var Oe=l(J);Le=L(Oe,"Abstract class for batching, forward pass and loss handler."),Oe.forEach(a),me.forEach(a),ae=i(e),v=n(e,"DIV",{class:!0});var pe=l(v);M(q.$$.fragment,pe),Ne=i(pe),R=n(pe,"P",{});var Ue=l(R);De=L(Ue,"GPT train step class."),Ue.forEach(a),pe.forEach(a),te=i(e),h=n(e,"DIV",{class:!0});var ue=l(h);M(V.$$.fragment,ue),Te=i(ue),j=n(ue,"P",{});var Ce=l(j);Pe=L(Ce,"Bert train step class."),Ce.forEach(a),ue.forEach(a),re=i(e),b=n(e,"DIV",{class:!0});var ge=l(b);M(B.$$.fragment,ge),xe=i(ge),K=n(ge,"P",{});var Fe=l(K);Ee=L(Fe,"T5 train step class."),Fe.forEach(a),ge.forEach(a),se=i(e),$=n(e,"DIV",{class:!0});var de=l($);M(G.$$.fragment,de),Se=i(de),Q=n(de,"P",{});var He=l(Q);Ae=L(He,"Average losses across data parallel group."),He.forEach(a),de.forEach(a),this.h()},h(){m(p,"name","hf:doc:metadata"),m(p,"content",JSON.stringify(Ze)),m(x,"id","accelerate.utils.MegatronLMPlugin"),m(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(x,"href","#accelerate.utils.MegatronLMPlugin"),m(u,"class","relative group"),m(g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(d,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(f,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(v,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(b,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,r){t(document.head,p),c(e,W,r),c(e,u,r),t(u,x),t(x,O),N(S,O,null),t(u,_e),t(u,U),t(U,fe),c(e,X,r),c(e,g,r),N(A,g,null),t(g,ve),t(g,C),t(C,he),c(e,Y,r),c(e,d,r),N(k,d,null),t(d,be),t(d,F),t(F,$e),c(e,Z,r),c(e,_,r),N(z,_,null),t(_,ye),t(_,H),t(H,we),c(e,ee,r),c(e,f,r),N(I,f,null),t(f,Me),t(f,J),t(J,Le),c(e,ae,r),c(e,v,r),N(q,v,null),t(v,Ne),t(v,R),t(R,De),c(e,te,r),c(e,h,r),N(V,h,null),t(h,Te),t(h,j),t(j,Pe),c(e,re,r),c(e,b,r),N(B,b,null),t(b,xe),t(b,K),t(K,Ee),c(e,se,r),c(e,$,r),N(G,$,null),t($,Se),t($,Q),t(Q,Ae),ne=!0},p:Qe,i(e){ne||(D(S.$$.fragment,e),D(A.$$.fragment,e),D(k.$$.fragment,e),D(z.$$.fragment,e),D(I.$$.fragment,e),D(q.$$.fragment,e),D(V.$$.fragment,e),D(B.$$.fragment,e),D(G.$$.fragment,e),ne=!0)},o(e){T(S.$$.fragment,e),T(A.$$.fragment,e),T(k.$$.fragment,e),T(z.$$.fragment,e),T(I.$$.fragment,e),T(q.$$.fragment,e),T(V.$$.fragment,e),T(B.$$.fragment,e),T(G.$$.fragment,e),ne=!1},d(e){a(p),e&&a(W),e&&a(u),P(S),e&&a(X),e&&a(g),P(A),e&&a(Y),e&&a(d),P(k),e&&a(Z),e&&a(_),P(z),e&&a(ee),e&&a(f),P(I),e&&a(ae),e&&a(v),P(q),e&&a(te),e&&a(h),P(V),e&&a(re),e&&a(b),P(B),e&&a(se),e&&a($),P(G)}}}const Ze={local:"accelerate.utils.MegatronLMPlugin",title:"Utilities for Megatron-LM"};function ea(ke){return We(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class sa extends Je{constructor(p){super();Re(this,p,ea,Ye,je,{})}}export{sa as default,Ze as metadata};
