import{S as __,i as v_,s as $_,e as a,k as l,w as _,t as s,M as b_,c as o,d as r,m as i,a as n,x as v,h as c,b as d,G as e,g as u,y as $,q as b,o as y,B as w,v as y_,L as yl}from"../../chunks/vendor-hf-doc-builder.js";import{T as oo}from"../../chunks/Tip-hf-doc-builder.js";import{D as P}from"../../chunks/Docstring-hf-doc-builder.js";import{C as I}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as O}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as bl}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function w_(T){let h,k;return{c(){h=a("p"),k=s("Step three is optional, but considered a best practice.")},l(A){h=o(A,"P",{});var E=n(h);k=c(E,"Step three is optional, but considered a best practice."),E.forEach(r)},m(A,E){u(A,h,E),e(h,k)},d(A){A&&r(h)}}}function E_(T){let h,k;return{c(){h=a("p"),k=s("Step five is mandatory when using distributed evaluation")},l(A){h=o(A,"P",{});var E=n(h);k=c(E,"Step five is mandatory when using distributed evaluation"),E.forEach(r)},m(A,E){u(A,h,E),e(h,k)},d(A){A&&r(h)}}}function A_(T){let h,k,A,E,j;return E=new I({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(gradient_accumulation_steps=2)
dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

with accelerator.accumulate():
    for input, output in dataloader:
        outputs = model(input)
        loss = loss_func(outputs)
        loss.backward()
        optimizer.step()
        scheduler.step()
        optimizer.zero_grad()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> accelerator.accumulate():
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">input</span>, output <span class="hljs-keyword">in</span> dataloader:
<span class="hljs-meta">... </span>        outputs = model(<span class="hljs-built_in">input</span>)
<span class="hljs-meta">... </span>        loss = loss_func(outputs)
<span class="hljs-meta">... </span>        loss.backward()
<span class="hljs-meta">... </span>        optimizer.step()
<span class="hljs-meta">... </span>        scheduler.step()
<span class="hljs-meta">... </span>        optimizer.zero_grad()`}}),{c(){h=a("p"),k=s("Example:"),A=l(),_(E.$$.fragment)},l(f){h=o(f,"P",{});var x=n(h);k=c(x,"Example:"),x.forEach(r),A=i(f),v(E.$$.fragment,f)},m(f,x){u(f,h,x),e(h,k),u(f,A,x),$(E,f,x),j=!0},p:yl,i(f){j||(b(E.$$.fragment,f),j=!0)},o(f){y(E.$$.fragment,f),j=!1},d(f){f&&r(h),f&&r(A),w(E,f)}}}function k_(T){let h,k,A,E,j;return E=new I({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(gradient_accumulation_steps=2)
dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

for (input, target) in dataloader:
    optimizer.zero_grad()
    output = model(input)
    loss = loss_func(output, target)
    accelerator.backward(loss)
    if accelerator.sync_gradients:
        accelerator.clip_grad_norm_(model.parameters(), max_grad_norm)
    optimizer.step()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> (<span class="hljs-built_in">input</span>, target) <span class="hljs-keyword">in</span> dataloader:
<span class="hljs-meta">... </span>    optimizer.zero_grad()
<span class="hljs-meta">... </span>    output = model(<span class="hljs-built_in">input</span>)
<span class="hljs-meta">... </span>    loss = loss_func(output, target)
<span class="hljs-meta">... </span>    accelerator.backward(loss)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> accelerator.sync_gradients:
<span class="hljs-meta">... </span>        accelerator.clip_grad_norm_(model.parameters(), max_grad_norm)
<span class="hljs-meta">... </span>    optimizer.step()`}}),{c(){h=a("p"),k=s("Example:"),A=l(),_(E.$$.fragment)},l(f){h=o(f,"P",{});var x=n(h);k=c(x,"Example:"),x.forEach(r),A=i(f),v(E.$$.fragment,f)},m(f,x){u(f,h,x),e(h,k),u(f,A,x),$(E,f,x),j=!0},p:yl,i(f){j||(b(E.$$.fragment,f),j=!0)},o(f){y(E.$$.fragment,f),j=!1},d(f){f&&r(h),f&&r(A),w(E,f)}}}function x_(T){let h,k,A,E,j;return E=new I({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(gradient_accumulation_steps=2)
dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

for (input, target) in dataloader:
    optimizer.zero_grad()
    output = model(input)
    loss = loss_func(output, target)
    accelerator.backward(loss)
    if accelerator.sync_gradients:
        accelerator.clip_grad_value_(model.parameters(), clip_value)
    optimizer.step()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> (<span class="hljs-built_in">input</span>, target) <span class="hljs-keyword">in</span> dataloader:
<span class="hljs-meta">... </span>    optimizer.zero_grad()
<span class="hljs-meta">... </span>    output = model(<span class="hljs-built_in">input</span>)
<span class="hljs-meta">... </span>    loss = loss_func(output, target)
<span class="hljs-meta">... </span>    accelerator.backward(loss)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> accelerator.sync_gradients:
<span class="hljs-meta">... </span>        accelerator.clip_grad_value_(model.parameters(), clip_value)
<span class="hljs-meta">... </span>    optimizer.step()`}}),{c(){h=a("p"),k=s("Example:"),A=l(),_(E.$$.fragment)},l(f){h=o(f,"P",{});var x=n(h);k=c(x,"Example:"),x.forEach(r),A=i(f),v(E.$$.fragment,f)},m(f,x){u(f,h,x),e(h,k),u(f,A,x),$(E,f,x),j=!0},p:yl,i(f){j||(b(E.$$.fragment,f),j=!0)},o(f){y(E.$$.fragment,f),j=!1},d(f){f&&r(h),f&&r(A),w(E,f)}}}function P_(T){let h,k,A,E,j;return{c(){h=a("p"),k=s("Should only be used in conjunction with "),A=a("a"),E=s("Accelerator.save_state()"),j=s("."),this.h()},l(f){h=o(f,"P",{});var x=n(h);k=c(x,"Should only be used in conjunction with "),A=o(x,"A",{href:!0});var N=n(A);E=c(N,"Accelerator.save_state()"),N.forEach(r),j=c(x,"."),x.forEach(r),this.h()},h(){d(A,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.save_state")},m(f,x){u(f,h,x),e(h,k),e(h,A),e(A,E),e(h,j)},d(f){f&&r(h)}}}function j_(T){let h,k,A,E,j;return E=new I({props:{code:`from accelerate import Accelerator

accelerator = Accelerator()
dataloader, model, optimizer = accelerator.prepare(dataloader, model, optimizer)
input_a = next(iter(dataloader))
input_b = next(iter(dataloader))

with accelerator.no_sync():
    outputs = model(input_a)
    loss = loss_func(outputs)
    accelerator.backward(loss)
    # No synchronization across processes, only accumulate gradients
outputs = model(input_b)
accelerator.backward(loss)
# Synchronization across all processes
optimizer.step()
optimizer.zero_grad()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator()
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer = accelerator.prepare(dataloader, model, optimizer)
<span class="hljs-meta">&gt;&gt;&gt; </span>input_a = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataloader))
<span class="hljs-meta">&gt;&gt;&gt; </span>input_b = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataloader))

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> accelerator.no_sync():
<span class="hljs-meta">... </span>    outputs = model(input_a)
<span class="hljs-meta">... </span>    loss = loss_func(outputs)
<span class="hljs-meta">... </span>    accelerator.backward(loss)
<span class="hljs-meta">... </span>    <span class="hljs-comment"># No synchronization across processes, only accumulate gradients</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_b)
<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator.backward(loss)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Synchronization across all processes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer.step()
<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer.zero_grad()`}}),{c(){h=a("p"),k=s("Example:"),A=l(),_(E.$$.fragment)},l(f){h=o(f,"P",{});var x=n(h);k=c(x,"Example:"),x.forEach(r),A=i(f),v(E.$$.fragment,f)},m(f,x){u(f,h,x),e(h,k),u(f,A,x),$(E,f,x),j=!0},p:yl,i(f){j||(b(E.$$.fragment,f),j=!0)},o(f){y(E.$$.fragment,f),j=!1},d(f){f&&r(h),f&&r(A),w(E,f)}}}function D_(T){let h,k;return{c(){h=a("p"),k=s("You don\u2019t need to prepare a model if you only use it for inference without any kind of mixed precision")},l(A){h=o(A,"P",{});var E=n(h);k=c(E,"You don\u2019t need to prepare a model if you only use it for inference without any kind of mixed precision"),E.forEach(r)},m(A,E){u(A,h,E),e(h,k)},d(A){A&&r(h)}}}function T_(T){let h,k,A,E,j,f,x,N,re,Ae,C;return{c(){h=a("p"),k=s("Every "),A=a("code"),E=s("object"),j=s(" must have a "),f=a("code"),x=s("load_state_dict"),N=s(" and "),re=a("code"),Ae=s("state_dict"),C=s(" function to be stored.")},l(ae){h=o(ae,"P",{});var S=n(h);k=c(S,"Every "),A=o(S,"CODE",{});var _a=n(A);E=c(_a,"object"),_a.forEach(r),j=c(S," must have a "),f=o(S,"CODE",{});var va=n(f);x=c(va,"load_state_dict"),va.forEach(r),N=c(S," and "),re=o(S,"CODE",{});var Gt=n(re);Ae=c(Gt,"state_dict"),Gt.forEach(r),C=c(S," function to be stored."),S.forEach(r)},m(ae,S){u(ae,h,S),e(h,k),e(h,A),e(A,E),e(h,j),e(h,f),e(f,x),e(h,N),e(h,re),e(re,Ae),e(h,C)},d(ae){ae&&r(h)}}}function z_(T){let h,k;return{c(){h=a("p"),k=s(`Should only be used when wanting to save a checkpoint during training and restoring the state in the same
environment.`)},l(A){h=o(A,"P",{});var E=n(h);k=c(E,`Should only be used when wanting to save a checkpoint during training and restoring the state in the same
environment.`),E.forEach(r)},m(A,E){u(A,h,E),e(h,k)},d(A){A&&r(h)}}}function S_(T){let h,k,A,E,j,f,x,N,re,Ae,C,ae,S,_a,va,Gt,oe,ke,no,Wt,wl,so,El,As,$a,Al,ks,G,ne,kl,ba,xl,Pl,co,jl,Dl,Tl,Ht,zl,ya,Sl,Il,Ll,V,Ol,lo,Nl,Cl,io,ql,Ul,po,Vl,Ml,xs,xe,Ps,se,Pe,Rl,ho,Gl,Wl,mo,Hl,Fl,wa,Yl,Ea,Bl,js,je,Ds,De,Kl,uo,Ql,Xl,Ts,ce,Te,fo,Ft,Jl,go,Zl,zs,le,ze,_o,Yt,ei,vo,ti,Ss,ie,$o,ri,ai,Aa,oi,ni,Is,Bt,Ls,de,Se,bo,Kt,si,yo,ci,Os,pe,Ie,wo,Qt,li,Eo,ii,Ns,Le,di,Ao,pi,hi,Cs,Xt,qs,Oe,mi,ka,ui,fi,Us,Jt,Vs,he,Ne,ko,Zt,gi,xo,_i,Ms,Ce,vi,Po,$i,bi,Rs,er,Gs,qe,yi,xa,wi,Ei,Ws,tr,Hs,me,Ue,jo,rr,Ai,Do,ki,Fs,Pa,xi,Ys,ar,Bs,or,Ks,ue,Ve,To,nr,Pi,zo,ji,Qs,Me,Di,ja,Ti,zi,Xs,fe,Re,So,sr,Si,Io,Ii,Js,Ge,Li,Da,Oi,Ni,Zs,cr,ec,W,Ci,Ta,qi,Ui,Lo,Vi,Mi,tc,lr,rc,ge,We,Oo,ir,Ri,No,Gi,ac,L,Wi,He,Hi,Co,Fi,Yi,Bi,qo,Ki,Qi,Fe,Xi,Uo,Ji,Zi,ed,Vo,td,oc,_e,Ye,Mo,dr,rd,Ro,ad,nc,Be,od,za,nd,sd,sc,pr,cc,ve,Ke,Go,hr,cd,Wo,ld,lc,m,mr,id,Ho,dd,pd,Fo,Yo,hd,md,D,Qe,Bo,ud,fd,Ko,gd,_d,vd,Xe,Qo,$d,bd,Sa,yd,wd,Ed,Je,Xo,Ad,kd,Jo,xd,Pd,jd,Ze,Zo,Dd,Td,en,zd,Sd,Id,et,tn,Ld,Od,rn,Nd,Cd,qd,tt,an,Ud,Vd,on,Md,Rd,Gd,rt,nn,Wd,Hd,sn,Fd,Yd,Bd,at,cn,Kd,Qd,Ia,Xd,Jd,Zd,ot,ln,ep,tp,dn,rp,ap,op,nt,pn,np,sp,hn,cp,lp,ip,H,ur,dp,mn,pp,hp,st,mp,ct,fr,up,un,fp,gp,F,gr,_p,$e,vp,fn,$p,bp,gn,yp,wp,Ep,_r,Ap,_n,kp,xp,Pp,lt,vr,jp,$r,Dp,vn,Tp,zp,Sp,Y,br,Ip,yr,Lp,$n,Op,Np,Cp,it,qp,B,wr,Up,Er,Vp,bn,Mp,Rp,Gp,dt,Wp,pt,Ar,Hp,yn,Fp,Yp,ht,kr,Bp,wn,Kp,Qp,K,xr,Xp,Pr,Jp,En,Zp,eh,th,An,rh,ah,mt,jr,oh,Dr,nh,kn,sh,ch,lh,ut,Tr,ih,zr,dh,La,ph,hh,mh,ft,Sr,uh,M,fh,xn,gh,_h,Pn,vh,$h,jn,bh,yh,wh,gt,Ir,Eh,Lr,Ah,Dn,kh,xh,Ph,Q,Or,jh,Tn,Dh,Th,_t,zh,X,Nr,Sh,zn,Ih,Lh,Sn,Oh,Nh,vt,Cr,Ch,be,qh,In,Uh,Vh,Ln,Mh,Rh,Gh,J,qr,Wh,On,Hh,Fh,Nn,Yh,Bh,q,Ur,Kh,Vr,Qh,Cn,Xh,Jh,Zh,Mr,em,qn,tm,rm,am,$t,om,bt,Rr,nm,Un,sm,cm,yt,Gr,lm,Vn,im,dm,wt,Wr,pm,Mn,hm,mm,Et,Hr,um,Rn,fm,gm,At,Fr,_m,Gn,vm,$m,kt,Yr,bm,Wn,ym,wm,Z,Br,Em,Kr,Am,Hn,km,xm,Pm,xt,jm,Pt,Qr,Dm,Xr,Tm,Oa,zm,Sm,Im,jt,Jr,Lm,Zr,Om,Na,Nm,Cm,qm,Dt,ea,Um,ta,Vm,Ca,Mm,Rm,Gm,Tt,ra,Wm,aa,Hm,qa,Fm,Ym,Bm,zt,oa,Km,na,Qm,Fn,Xm,Jm,Zm,ee,sa,eu,ye,tu,Yn,ru,au,Bn,ou,nu,su,Kn,cu,lu,U,ca,iu,R,du,Qn,pu,hu,Xn,mu,uu,Jn,fu,gu,_u,Zn,vu,$u,St,bu,It,la,yu,ia,wu,es,Eu,Au,ku,te,da,xu,ts,Pu,ju,Lt,Du,Ot,pa,Tu,rs,zu,Su,Nt,ha,Iu,we,Lu,as,Ou,Nu,Ua,Cu,qu,Uu,Ct,ma,Vu,os,Mu,ic;return f=new O({}),Wt=new O({}),xe=new oo({props:{$$slots:{default:[w_]},$$scope:{ctx:T}}}),je=new oo({props:{warning:!0,$$slots:{default:[E_]},$$scope:{ctx:T}}}),Ft=new O({}),Yt=new O({}),Bt=new I({props:{code:`- print("My thing I want to print!")
+ accelerator.print("My thing I want to print!")`,highlighted:`<span class="hljs-deletion">- print(&quot;My thing I want to print!&quot;)</span>
<span class="hljs-addition">+ accelerator.print(&quot;My thing I want to print!&quot;)</span>`}}),Kt=new O({}),Qt=new O({}),Xt=new I({props:{code:`if accelerator.is_local_main_process:
    do_thing_once_per_server()`,highlighted:`<span class="hljs-keyword">if</span> accelerator.is_local_main_process:
    do_thing_once_per_server()`}}),Jt=new I({props:{code:`@accelerator.on_local_main_process
def do_my_thing():
    "Something done once per server"
    do_thing_once_per_server()`,highlighted:`<span class="hljs-meta">@accelerator.on_local_main_process</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done once per server&quot;</span>
    do_thing_once_per_server()`}}),Zt=new O({}),er=new I({props:{code:`if accelerator.is_main_process:
    do_thing_once()`,highlighted:`<span class="hljs-keyword">if</span> accelerator.is_main_process:
    do_thing_once()`}}),tr=new I({props:{code:`@accelerator.on_main_process
def do_my_thing():
    "Something done once per server"
    do_thing_once()`,highlighted:`<span class="hljs-meta">@accelerator.on_main_process</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done once per server&quot;</span>
    do_thing_once()`}}),rr=new O({}),ar=new I({props:{code:`@accelerator.on_local_process(local_process_idx=0)
def do_my_thing():
    "Something done on process index 0 on each server"
    do_thing_on_index_zero_on_each_server()`,highlighted:`<span class="hljs-meta">@accelerator.on_local_process(<span class="hljs-params">local_process_idx=<span class="hljs-number">0</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done on process index 0 on each server&quot;</span>
    do_thing_on_index_zero_on_each_server()`}}),or=new I({props:{code:`@accelerator.on_process(process_index=0)
def do_my_thing():
    "Something done on process index 0"
    do_thing_on_index_zero()`,highlighted:`<span class="hljs-meta">@accelerator.on_process(<span class="hljs-params">process_index=<span class="hljs-number">0</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done on process index 0&quot;</span>
    do_thing_on_index_zero()`}}),nr=new O({}),sr=new O({}),cr=new I({props:{code:`model = MyModel()
model = accelerator.prepare(model)
# Unwrap
model = accelerator.unwrap_model(model)`,highlighted:`model = MyModel()
model = accelerator.prepare(model)
<span class="hljs-comment"># Unwrap</span>
model = accelerator.unwrap_model(model)`}}),lr=new I({props:{code:`  state_dict = model.state_dict()
- torch.save(state_dict, "my_state.pkl")
+ accelerator.save(state_dict, "my_state.pkl")`,highlighted:`  state_dict = model.state_dict()
<span class="hljs-deletion">- torch.save(state_dict, &quot;my_state.pkl&quot;)</span>
<span class="hljs-addition">+ accelerator.save(state_dict, &quot;my_state.pkl&quot;)</span>`}}),ir=new O({}),dr=new O({}),pr=new I({props:{code:`- accelerator = Accelerator()
+ accelerator = Accelerator(gradient_accumulation_steps=2)

  for (input, label) in training_dataloader:
+     with accelerator.accumulate(model):
          predictions = model(input)
          loss = loss_function(predictions, labels)
          accelerator.backward(loss)
          optimizer.step()
          scheduler.step()
          optimizer.zero_grad()`,highlighted:`<span class="hljs-deletion">- accelerator = Accelerator()</span>
<span class="hljs-addition">+ accelerator = Accelerator(gradient_accumulation_steps=2)</span>

  for (input, label) in training_dataloader:
<span class="hljs-addition">+     with accelerator.accumulate(model):</span>
          predictions = model(input)
          loss = loss_function(predictions, labels)
          accelerator.backward(loss)
          optimizer.step()
          scheduler.step()
          optimizer.zero_grad()`}}),hr=new O({}),mr=new P({props:{name:"class accelerate.Accelerator",anchor:"accelerate.Accelerator",parameters:[{name:"device_placement",val:": bool = True"},{name:"split_batches",val:": bool = False"},{name:"fp16",val:": bool = None"},{name:"mixed_precision",val:": typing.Union[accelerate.utils.dataclasses.PrecisionType, str] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:": DeepSpeedPlugin = None"},{name:"fsdp_plugin",val:": FullyShardedDataParallelPlugin = None"},{name:"megatron_lm_plugin",val:": MegatronLMPlugin = None"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"log_with",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.LoggerType, accelerate.tracking.GeneralTracker]], NoneType] = None"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"},{name:"even_batches",val:": bool = True"},{name:"step_scheduler_with_optimizer",val:": bool = True"},{name:"kwargs_handlers",val:": typing.Optional[typing.List[accelerate.utils.dataclasses.KwargsHandler]] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the accelerator should put objects on device (tensors yielded by the dataloader, model,
etc&#x2026;).`,name:"device_placement"},{anchor:"accelerate.Accelerator.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.`,name:"split_batches"},{anchor:"accelerate.Accelerator.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether or not to use mixed precision training (fp16 or bfloat16). Choose from &#x2018;no&#x2019;,&#x2018;fp16&#x2019;,&#x2018;bf16&#x2019;. Will
default to the value in the environment variable <code>MIXED_PRECISION</code>, which will use the default value in the
accelerate config of the current system or the flag passed with the <code>accelerate.launch</code> command. &#x2018;fp16&#x2019;
requires pytorch 1.6 or higher. &#x2018;bf16&#x2019; requires pytorch 1.10 or higher.`,name:"mixed_precision"},{anchor:"accelerate.Accelerator.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, default to 1) &#x2014;
The number of steps that should pass before gradients are accumulated. A number &gt; 1 should be combined with
<code>Accelerator.accumulate</code>.`,name:"gradient_accumulation_steps"},{anchor:"accelerate.Accelerator.cpu",description:`<strong>cpu</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to force the script to execute on CPU. Will ignore GPU available if set to <code>True</code> and force
the execution on one process only.`,name:"cpu"},{anchor:"accelerate.Accelerator.deepspeed_plugin",description:`<strong>deepspeed_plugin</strong> (<code>DeepSpeedPlugin</code>, <em>optional</em>) &#x2014;
Tweak your DeepSpeed related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"deepspeed_plugin"},{anchor:"accelerate.Accelerator.fsdp_plugin",description:`<strong>fsdp_plugin</strong> (<code>FullyShardedDataParallelPlugin</code>, <em>optional</em>) &#x2014;
Tweak your FSDP related args using this argument. This argument is optional and can be configured directly
using <em>accelerate config</em>`,name:"fsdp_plugin"},{anchor:"accelerate.Accelerator.megatron_lm_plugin",description:`<strong>megatron_lm_plugin</strong> (<code>MegatronLMPlugin</code>, <em>optional</em>) &#x2014;
Tweak your MegatronLM related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"megatron_lm_plugin"},{anchor:"accelerate.Accelerator.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration in your prepared
dataloaders. Should be one or several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>
<p>Will default to <code>[&quot;torch&quot;]</code> for PyTorch versions &lt;=1.5.1 and <code>[&quot;generator&quot;]</code> for PyTorch versions &gt;= 1.6.`,name:"rng_types"},{anchor:"accelerate.Accelerator.log_with",description:`<strong>log_with</strong> (list of <code>str</code>, <a href="/docs/accelerate/main/en/package_reference/utilities#accelerate.utils.LoggerType">LoggerType</a> or <a href="/docs/accelerate/main/en/package_reference/tracking#accelerate.tracking.GeneralTracker">GeneralTracker</a>, <em>optional</em>) &#x2014;
A list of loggers to be setup for experiment tracking. Should be one or several of:</p>
<ul>
<li><code>&quot;all&quot;</code></li>
<li><code>&quot;tensorboard&quot;</code></li>
<li><code>&quot;wandb&quot;</code></li>
<li><code>&quot;comet_ml&quot;</code>
If <code>&quot;all&quot;</code> is selected, will pick up all available trackers in the environment and initialize them. Can
also accept implementations of <code>GeneralTracker</code> for custom trackers, and can be combined with <code>&quot;all&quot;</code>.</li>
</ul>`,name:"log_with"},{anchor:"accelerate.Accelerator.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>, <em>optional</em>) &#x2014;
A path to a directory for storing logs of locally-compatible loggers.`,name:"logging_dir"},{anchor:"accelerate.Accelerator.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"},{anchor:"accelerate.Accelerator.even_batches",description:`<strong>even_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
If set to <code>True</code>, in cases where the total batch size across all processes does not exactly divide the
dataset, samples at the start of the dataset will be duplicated so the batch can be divided equally among
all workers.`,name:"even_batches"},{anchor:"accelerate.Accelerator.step_scheduler_with_optimizer",description:"<strong>step_scheduler_with_optimizer</strong> (<code>bool</code>, *optional<code>, defaults to </code>True<code>) -- Set </code>True<code>if the learning rate scheduler is stepped at the same time as the optimizer,</code>False` if only\ndone under certain circumstances (at the end of each epoch, for instance).",name:"step_scheduler_with_optimizer"},{anchor:"accelerate.Accelerator.kwargs_handlers",description:`<strong>kwargs_handlers</strong> (<code>List[KwargHandler]</code>, <em>optional</em>) &#x2014;
A list of <code>KwargHandler</code> to customize how the objects related to distributed training or mixed precision
are created. See <a href="kwargs">kwargs</a> for more information.`,name:"kwargs_handlers"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L97"}}),ur=new P({props:{name:"accumulate",anchor:"accelerate.Accelerator.accumulate",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.accumulate.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L572"}}),st=new bl({props:{anchor:"accelerate.Accelerator.accumulate.example",$$slots:{default:[A_]},$$scope:{ctx:T}}}),fr=new P({props:{name:"autocast",anchor:"accelerate.Accelerator.autocast",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1707"}}),gr=new P({props:{name:"backward",anchor:"accelerate.Accelerator.backward",parameters:[{name:"loss",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1170"}}),vr=new P({props:{name:"clear",anchor:"accelerate.Accelerator.clear",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1615"}}),br=new P({props:{name:"clip_grad_norm_",anchor:"accelerate.Accelerator.clip_grad_norm_",parameters:[{name:"parameters",val:""},{name:"max_norm",val:""},{name:"norm_type",val:" = 2"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1209",returnDescription:`
<p>Total norm of the parameter gradients (viewed as a single vector).</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),it=new bl({props:{anchor:"accelerate.Accelerator.clip_grad_norm_.example",$$slots:{default:[k_]},$$scope:{ctx:T}}}),wr=new P({props:{name:"clip_grad_value_",anchor:"accelerate.Accelerator.clip_grad_value_",parameters:[{name:"parameters",val:""},{name:"clip_value",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1247"}}),dt=new bl({props:{anchor:"accelerate.Accelerator.clip_grad_value_.example",$$slots:{default:[x_]},$$scope:{ctx:T}}}),Ar=new P({props:{name:"end_training",anchor:"accelerate.Accelerator.end_training",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1446"}}),kr=new P({props:{name:"free_memory",anchor:"accelerate.Accelerator.free_memory",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1603"}}),xr=new P({props:{name:"gather",anchor:"accelerate.Accelerator.gather",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to gather across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1274",returnDescription:`
<p>The gathered tensor(s). Note that the
first dimension of the result is <em>num_processes</em> multiplied by the first dimension of the input tensors.</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),jr=new P({props:{name:"gather_for_metrics",anchor:"accelerate.Accelerator.gather_for_metrics",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather_for_metrics.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors for calculating metrics across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1292"}}),Tr=new P({props:{name:"get_state_dict",anchor:"accelerate.Accelerator.get_state_dict",parameters:[{name:"model",val:""},{name:"unwrap",val:" = True"}],parametersDescription:[{anchor:"accelerate.Accelerator.get_state_dict.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
A PyTorch model sent through <a href="/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare">Accelerator.prepare()</a>`,name:"model"},{anchor:"accelerate.Accelerator.get_state_dict.unwrap",description:`<strong>unwrap</strong> (<code>bool</code>, <em>optional</em>, defaults to True) &#x2014;
Whether to return the original underlying state_dict of <code>model</code> or to return the wrapped state_dict`,name:"unwrap"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1647"}}),Sr=new P({props:{name:"get_tracker",anchor:"accelerate.Accelerator.get_tracker",parameters:[{name:"name",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.get_tracker.name",description:`<strong>name</strong> (<code>str</code>) &#x2014;
The name of a tracker, corresponding to the <code>.name</code> property.`,name:"name"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1412"}}),Ir=new P({props:{name:"init_trackers",anchor:"accelerate.Accelerator.init_trackers",parameters:[{name:"project_name",val:": str"},{name:"config",val:": typing.Optional[dict] = None"},{name:"init_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.init_trackers.project_name",description:`<strong>project_name</strong> (<code>str</code>) &#x2014;
The name of the project. All trackers will save their data based on this`,name:"project_name"},{anchor:"accelerate.Accelerator.init_trackers.config",description:`<strong>config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Optional starting configuration to be logged.`,name:"config"},{anchor:"accelerate.Accelerator.init_trackers.init_kwargs",description:`<strong>init_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>__init__</code> function. Should be
formatted like so:`,name:"init_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1377"}}),Or=new P({props:{name:"load_state",anchor:"accelerate.Accelerator.load_state",parameters:[{name:"input_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.load_state.input_dir",description:`<strong>input_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder all relevant weights and states were saved in.`,name:"input_dir"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1532"}}),_t=new oo({props:{$$slots:{default:[P_]},$$scope:{ctx:T}}}),Nr=new P({props:{name:"local_main_process_first",anchor:"accelerate.Accelerator.local_main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L509"}}),Cr=new P({props:{name:"log",anchor:"accelerate.Accelerator.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"},{name:"log_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.log.values",description:`<strong>values</strong> (<code>dict</code>) &#x2014;
Values should be a dictionary-like object containing only types <code>int</code>, <code>float</code>, or <code>str</code>.`,name:"values"},{anchor:"accelerate.Accelerator.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"},{anchor:"accelerate.Accelerator.log.log_kwargs",description:`<strong>log_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>log</code> function. Should be formatted
like so:`,name:"log_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1426"}}),qr=new P({props:{name:"main_process_first",anchor:"accelerate.Accelerator.main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L500"}}),Ur=new P({props:{name:"no_sync",anchor:"accelerate.Accelerator.no_sync",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.no_sync.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L518"}}),$t=new bl({props:{anchor:"accelerate.Accelerator.no_sync.example",$$slots:{default:[j_]},$$scope:{ctx:T}}}),Rr=new P({props:{name:"on_last_process",anchor:"accelerate.Accelerator.on_last_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L449"}}),Gr=new P({props:{name:"on_local_main_process",anchor:"accelerate.Accelerator.on_local_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L437"}}),Wr=new P({props:{name:"on_local_process",anchor:"accelerate.Accelerator.on_local_process",parameters:[{name:"local_process_idx",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L476"}}),Hr=new P({props:{name:"on_main_process",anchor:"accelerate.Accelerator.on_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L425"}}),Fr=new P({props:{name:"on_process",anchor:"accelerate.Accelerator.on_process",parameters:[{name:"process_idx",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L461"}}),Yr=new P({props:{name:"pad_across_processes",anchor:"accelerate.Accelerator.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],parametersDescription:[{anchor:"accelerate.Accelerator.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.Accelerator.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1342"}}),Br=new P({props:{name:"prepare",anchor:"accelerate.Accelerator.prepare",parameters:[{name:"*args",val:""},{name:"device_placement",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.prepare.*args",description:`<strong>*args</strong> (list of objects) &#x2014;
Any of the following type of objects:</p>
<ul>
<li><code>torch.utils.data.DataLoader</code>: PyTorch Dataloader</li>
<li><code>torch.nn.Module</code>: PyTorch Module</li>
<li><code>torch.optim.Optimizer</code>: PyTorch Optimizer</li>
<li><code>torch.optim.lr_scheduler._LRScheduler</code>: PyTorch LR Scheduler</li>
</ul>`,name:"*args"},{anchor:"accelerate.Accelerator.prepare.device_placement",description:`<strong>device_placement</strong> (<code>List[bool]</code>, <em>optional</em>) &#x2014;
Used to customize whether automatic device placement should be performed for each object passed. Needs
to be a list of the same length as <code>args</code>.`,name:"device_placement"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L678"}}),xt=new oo({props:{$$slots:{default:[D_]},$$scope:{ctx:T}}}),Qr=new P({props:{name:"prepare_data_loader",anchor:"accelerate.Accelerator.prepare_data_loader",parameters:[{name:"data_loader",val:": DataLoader"},{name:"device_placement",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.prepare_data_loader.data_loader",description:`<strong>data_loader</strong> (<code>torch.utils.data.DataLoader</code>) &#x2014;
A vanilla PyTorch DataLoader to prepare`,name:"data_loader"},{anchor:"accelerate.Accelerator.prepare_data_loader.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to place the batches on the proper device in the prepared dataloader. Will default to
<code>self.device_placement</code>.`,name:"device_placement"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1103"}}),Jr=new P({props:{name:"prepare_model",anchor:"accelerate.Accelerator.prepare_model",parameters:[{name:"model",val:": Module"},{name:"device_placement",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.prepare_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
A PyTorch model to prepare. You don&#x2019;t need to prepare a model if it is used only for inference without
any kind of mixed precision`,name:"model"},{anchor:"accelerate.Accelerator.prepare_model.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to place the model on the proper device. Will default to <code>self.device_placement</code>.`,name:"device_placement"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L776"}}),ea=new P({props:{name:"prepare_optimizer",anchor:"accelerate.Accelerator.prepare_optimizer",parameters:[{name:"optimizer",val:": Optimizer"},{name:"device_placement",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.prepare_optimizer.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code>) &#x2014;
A vanilla PyTorch optimizer to prepare`,name:"optimizer"},{anchor:"accelerate.Accelerator.prepare_optimizer.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to place the optimizer on the proper device. Will default to <code>self.device_placement</code>.`,name:"device_placement"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1129"}}),ra=new P({props:{name:"prepare_scheduler",anchor:"accelerate.Accelerator.prepare_scheduler",parameters:[{name:"scheduler",val:": _LRScheduler"}],parametersDescription:[{anchor:"accelerate.Accelerator.prepare_scheduler.scheduler",description:`<strong>scheduler</strong> (<code>torch.optim.lr_scheduler._LRScheduler</code>) &#x2014;
A vanilla PyTorch scheduler to prepare`,name:"scheduler"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1146"}}),oa=new P({props:{name:"print",anchor:"accelerate.Accelerator.print",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L608"}}),sa=new P({props:{name:"reduce",anchor:"accelerate.Accelerator.reduce",parameters:[{name:"tensor",val:""},{name:"reduction",val:" = 'sum'"}],parametersDescription:[{anchor:"accelerate.Accelerator.reduce.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to reduce across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.reduce.reduction",description:`<strong>reduction</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;sum&#x201D;) &#x2014;
A reduction type, can be one of &#x2018;sum&#x2019;, &#x2018;mean&#x2019;, or &#x2018;none&#x2019;. If &#x2018;none&#x2019;, will not perform any operation.`,name:"reduction"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1324",returnDescription:`
<p>The reduced tensor(s).</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),ca=new P({props:{name:"register_for_checkpointing",anchor:"accelerate.Accelerator.register_for_checkpointing",parameters:[{name:"*objects",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1683"}}),St=new oo({props:{$$slots:{default:[T_]},$$scope:{ctx:T}}}),la=new P({props:{name:"save",anchor:"accelerate.Accelerator.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.save.f",description:`<strong>f</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Where to save the content of <code>obj</code>.`,name:"f"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1455"}}),da=new P({props:{name:"save_state",anchor:"accelerate.Accelerator.save_state",parameters:[{name:"output_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.save_state.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder to save all relevant weights and states.`,name:"output_dir"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1466"}}),Lt=new oo({props:{$$slots:{default:[z_]},$$scope:{ctx:T}}}),pa=new P({props:{name:"unscale_gradients",anchor:"accelerate.Accelerator.unscale_gradients",parameters:[{name:"optimizer",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.unscale_gradients.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code> or <code>List[torch.optim.Optimizer]</code>, <em>optional</em>) &#x2014;
The optimizer(s) for which to unscale gradients. If not set, will unscale gradients on all optimizers
that were passed to <a href="/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare">prepare()</a>.`,name:"optimizer"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1189"}}),ha=new P({props:{name:"unwrap_model",anchor:"accelerate.Accelerator.unwrap_model",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.unwrap_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to unwrap.`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1359"}}),ma=new P({props:{name:"wait_for_everyone",anchor:"accelerate.Accelerator.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1370"}}),{c(){h=a("meta"),k=l(),A=a("h1"),E=a("a"),j=a("span"),_(f.$$.fragment),x=l(),N=a("span"),re=s("Accelerator"),Ae=l(),C=a("p"),ae=s("The "),S=a("a"),_a=s("Accelerator"),va=s(` is the main class provided by \u{1F917} Accelerate.
It serves at the main entrypoint for the API.`),Gt=l(),oe=a("h2"),ke=a("a"),no=a("span"),_(Wt.$$.fragment),wl=l(),so=a("span"),El=s("Quick adaptation of your code"),As=l(),$a=a("p"),Al=s("To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:"),ks=l(),G=a("ol"),ne=a("li"),kl=s("Initialize an "),ba=a("a"),xl=s("Accelerator"),Pl=s(" object (that we will call "),co=a("code"),jl=s("accelerator"),Dl=s(" throughout this page) as early as possible in your script."),Tl=l(),Ht=a("li"),zl=s("Pass your dataloader(s), model(s), optimizer(s), and scheduler(s) to the "),ya=a("a"),Sl=s("prepare()"),Il=s(" method."),Ll=l(),V=a("li"),Ol=s("Remove all the "),lo=a("code"),Nl=s(".cuda()"),Cl=s(" or "),io=a("code"),ql=s(".to(device)"),Ul=s(" from your code and let the "),po=a("code"),Vl=s("accelerator"),Ml=s(" handle the device placement for you."),xs=l(),_(xe.$$.fragment),Ps=l(),se=a("ol"),Pe=a("li"),Rl=s("Replace "),ho=a("code"),Gl=s("loss.backward()"),Wl=s(" in your code with "),mo=a("code"),Hl=s("accelerator.backward(loss)"),Fl=l(),wa=a("li"),Yl=s("Gather your predictions and labels before storing them or using them for metric computation using "),Ea=a("a"),Bl=s("gather()"),js=l(),_(je.$$.fragment),Ds=l(),De=a("p"),Kl=s(`In most cases this is all that is needed. The next section lists a few more advanced use cases and nice features
you should search for and replace by the corresponding methods of your `),uo=a("code"),Ql=s("accelerator"),Xl=s(":"),Ts=l(),ce=a("h2"),Te=a("a"),fo=a("span"),_(Ft.$$.fragment),Jl=l(),go=a("span"),Zl=s("Advanced recommendations"),zs=l(),le=a("h3"),ze=a("a"),_o=a("span"),_(Yt.$$.fragment),ei=l(),vo=a("span"),ti=s("Printing"),Ss=l(),ie=a("p"),$o=a("code"),ri=s("print"),ai=s(" statements should be replaced by "),Aa=a("a"),oi=s("print()"),ni=s(" to be printed once per process"),Is=l(),_(Bt.$$.fragment),Ls=l(),de=a("h3"),Se=a("a"),bo=a("span"),_(Kt.$$.fragment),si=l(),yo=a("span"),ci=s("Executing processes"),Os=l(),pe=a("h4"),Ie=a("a"),wo=a("span"),_(Qt.$$.fragment),li=l(),Eo=a("span"),ii=s("Once on a single server"),Ns=l(),Le=a("p"),di=s("For statements that should be executed once per server, use "),Ao=a("code"),pi=s("is_local_main_process"),hi=s(":"),Cs=l(),_(Xt.$$.fragment),qs=l(),Oe=a("p"),mi=s("A function can be wrapped using the "),ka=a("a"),ui=s("on_local_main_process()"),fi=s(` function to achieve the same
behavior on a function\u2019s execution:`),Us=l(),_(Jt.$$.fragment),Vs=l(),he=a("h4"),Ne=a("a"),ko=a("span"),_(Zt.$$.fragment),gi=l(),xo=a("span"),_i=s("Only ever once across all servers"),Ms=l(),Ce=a("p"),vi=s("For statements that should only ever be executed once, use "),Po=a("code"),$i=s("is_main_process"),bi=s(":"),Rs=l(),_(er.$$.fragment),Gs=l(),qe=a("p"),yi=s("A function can be wrapped using the "),xa=a("a"),wi=s("on_main_process()"),Ei=s(` function to achieve the same
behavior on a function\u2019s execution:`),Ws=l(),_(tr.$$.fragment),Hs=l(),me=a("h4"),Ue=a("a"),jo=a("span"),_(rr.$$.fragment),Ai=l(),Do=a("span"),ki=s("On specific processes"),Fs=l(),Pa=a("p"),xi=s(`If a function should be ran on a specific overall or local process index, there are similar decorators
to achieve this:`),Ys=l(),_(ar.$$.fragment),Bs=l(),_(or.$$.fragment),Ks=l(),ue=a("h3"),Ve=a("a"),To=a("span"),_(nr.$$.fragment),Pi=l(),zo=a("span"),ji=s("Synchronicity control"),Qs=l(),Me=a("p"),Di=s("Use "),ja=a("a"),Ti=s("wait_for_everyone()"),zi=s(" to make sure all processes join that point before continuing. (Useful before a model save for instance)"),Xs=l(),fe=a("h3"),Re=a("a"),So=a("span"),_(sr.$$.fragment),Si=l(),Io=a("span"),Ii=s("Saving and loading"),Js=l(),Ge=a("p"),Li=s("Use "),Da=a("a"),Oi=s("unwrap_model()"),Ni=s(" before saving to remove all special model wrappers added during the distributed process."),Zs=l(),_(cr.$$.fragment),ec=l(),W=a("p"),Ci=s("Use "),Ta=a("a"),qi=s("save()"),Ui=s(" instead of "),Lo=a("code"),Vi=s("torch.save"),Mi=s(":"),tc=l(),_(lr.$$.fragment),rc=l(),ge=a("h3"),We=a("a"),Oo=a("span"),_(ir.$$.fragment),Ri=l(),No=a("span"),Gi=s("Operations"),ac=l(),L=a("p"),Wi=s("Use "),He=a("a"),Hi=s("clip"),Co=a("em"),Fi=s("grad_norm"),Yi=s("()"),Bi=s(" instead of "),qo=a("code"),Ki=s("torch.nn.utils.clip_grad_norm_"),Qi=s(" and "),Fe=a("a"),Xi=s("clip"),Uo=a("em"),Ji=s("grad_value"),Zi=s("()"),ed=s(" instead of "),Vo=a("code"),td=s("torch.nn.utils.clip_grad_value"),oc=l(),_e=a("h3"),Ye=a("a"),Mo=a("span"),_(dr.$$.fragment),rd=l(),Ro=a("span"),ad=s("Gradient Accumulation"),nc=l(),Be=a("p"),od=s("To perform gradient accumulation use "),za=a("a"),nd=s("accumulate()"),sd=s(` and specify a gradient_accumulation_steps.
This will also automatically ensure the gradients are synced or unsynced when on
multi-device training, check if the step should actually be performed, and auto-scale the loss:`),sc=l(),_(pr.$$.fragment),cc=l(),ve=a("h2"),Ke=a("a"),Go=a("span"),_(hr.$$.fragment),cd=l(),Wo=a("span"),ld=s("Overall API documentation:"),lc=l(),m=a("div"),_(mr.$$.fragment),id=l(),Ho=a("p"),dd=s("Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),pd=l(),Fo=a("p"),Yo=a("strong"),hd=s("Available attributes:"),md=l(),D=a("ul"),Qe=a("li"),Bo=a("strong"),ud=s("device"),fd=s(" ("),Ko=a("code"),gd=s("torch.device"),_d=s(") \u2014 The device to use."),vd=l(),Xe=a("li"),Qo=a("strong"),$d=s("distributed_type"),bd=s(" ("),Sa=a("a"),yd=s("DistributedType"),wd=s(") \u2014 The distributed training configuration."),Ed=l(),Je=a("li"),Xo=a("strong"),Ad=s("local_process_index"),kd=s(" ("),Jo=a("code"),xd=s("int"),Pd=s(") \u2014 The process index on the current machine."),jd=l(),Ze=a("li"),Zo=a("strong"),Dd=s("mixed_precision"),Td=s(" ("),en=a("code"),zd=s("str"),Sd=s(") \u2014 The configured mixed precision mode."),Id=l(),et=a("li"),tn=a("strong"),Ld=s("num_processes"),Od=s(" ("),rn=a("code"),Nd=s("int"),Cd=s(") \u2014 The total number of processes used for training."),qd=l(),tt=a("li"),an=a("strong"),Ud=s("optimizer_step_was_skipped"),Vd=s(" ("),on=a("code"),Md=s("bool"),Rd=s(`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),Gd=l(),rt=a("li"),nn=a("strong"),Wd=s("process_index"),Hd=s(" ("),sn=a("code"),Fd=s("int"),Yd=s(") \u2014 The overall index of the current process among all processes."),Bd=l(),at=a("li"),cn=a("strong"),Kd=s("state"),Qd=s(" ("),Ia=a("a"),Xd=s("AcceleratorState"),Jd=s(") \u2014 The distributed setup state."),Zd=l(),ot=a("li"),ln=a("strong"),ep=s("sync_gradients"),tp=s(" ("),dn=a("code"),rp=s("bool"),ap=s(") \u2014 Whether the gradients are currently being synced across all processes."),op=l(),nt=a("li"),pn=a("strong"),np=s("use_distributed"),sp=s(" ("),hn=a("code"),cp=s("bool"),lp=s(") \u2014 Whether the current configuration is for distributed training."),ip=l(),H=a("div"),_(ur.$$.fragment),dp=l(),mn=a("p"),pp=s("A context manager that will lightly wrap around and perform gradient accumulation automatically"),hp=l(),_(st.$$.fragment),mp=l(),ct=a("div"),_(fr.$$.fragment),up=l(),un=a("p"),fp=s(`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),gp=l(),F=a("div"),_(gr.$$.fragment),_p=l(),$e=a("p"),vp=s("Scales the gradients in accordance to "),fn=a("code"),$p=s("Accelerator.gradient_accumulation_steps"),bp=s(` and calls the correct
`),gn=a("code"),yp=s("backward()"),wp=s(" based on the configuration."),Ep=l(),_r=a("p"),Ap=s("Should be used in lieu of "),_n=a("code"),kp=s("loss.backward()"),xp=s("."),Pp=l(),lt=a("div"),_(vr.$$.fragment),jp=l(),$r=a("p"),Dp=s("Alias for "),vn=a("code"),Tp=s("Accelerate.free_memory"),zp=s(`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),Sp=l(),Y=a("div"),_(br.$$.fragment),Ip=l(),yr=a("p"),Lp=s("Should be used in place of "),$n=a("code"),Op=s("torch.nn.utils.clip_grad_norm_"),Np=s("."),Cp=l(),_(it.$$.fragment),qp=l(),B=a("div"),_(wr.$$.fragment),Up=l(),Er=a("p"),Vp=s("Should be used in place of "),bn=a("code"),Mp=s("torch.nn.utils.clip_grad_value_"),Rp=s("."),Gp=l(),_(dt.$$.fragment),Wp=l(),pt=a("div"),_(Ar.$$.fragment),Hp=l(),yn=a("p"),Fp=s(`Runs any special end training behaviors, such as stopping trackers on the main process only. Should always be
called at the end of your script if using experiment tracking.`),Yp=l(),ht=a("div"),_(kr.$$.fragment),Bp=l(),wn=a("p"),Kp=s(`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Qp=l(),K=a("div"),_(xr.$$.fragment),Xp=l(),Pr=a("p"),Jp=s("Gather the values in "),En=a("em"),Zp=s("tensor"),eh=s(` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),th=l(),An=a("p"),rh=s(`Note:
This gather happens in all processes.`),ah=l(),mt=a("div"),_(jr.$$.fragment),oh=l(),Dr=a("p"),nh=s("Gathers "),kn=a("code"),sh=s("tensor"),ch=s(` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),lh=l(),ut=a("div"),_(Tr.$$.fragment),ih=l(),zr=a("p"),dh=s("Returns the state dictionary of a model sent through "),La=a("a"),ph=s("Accelerator.prepare()"),hh=s(" in full precision"),mh=l(),ft=a("div"),_(Sr.$$.fragment),uh=l(),M=a("p"),fh=s("Returns a "),xn=a("code"),gh=s("tracker"),_h=s(" from "),Pn=a("code"),vh=s("self.trackers"),$h=s(" based on "),jn=a("code"),bh=s("name"),yh=s(" on the main process only."),wh=l(),gt=a("div"),_(Ir.$$.fragment),Eh=l(),Lr=a("p"),Ah=s("Initializes a run for all trackers stored in "),Dn=a("code"),kh=s("self.log_with"),xh=s(", potentially with starting configurations"),Ph=l(),Q=a("div"),_(Or.$$.fragment),jh=l(),Tn=a("p"),Dh=s("Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Th=l(),_(_t.$$.fragment),zh=l(),X=a("div"),_(Nr.$$.fragment),Sh=l(),zn=a("p"),Ih=s("Lets the local main process go inside a with block."),Lh=l(),Sn=a("p"),Oh=s("The other processes will enter the with block after the main process exits."),Nh=l(),vt=a("div"),_(Cr.$$.fragment),Ch=l(),be=a("p"),qh=s("Logs "),In=a("code"),Uh=s("values"),Vh=s(" to all stored trackers in "),Ln=a("code"),Mh=s("self.trackers"),Rh=s(" on the main process only."),Gh=l(),J=a("div"),_(qr.$$.fragment),Wh=l(),On=a("p"),Hh=s("Lets the main process go first inside a with block."),Fh=l(),Nn=a("p"),Yh=s("The other processes will enter the with block after the main process exits."),Bh=l(),q=a("div"),_(Ur.$$.fragment),Kh=l(),Vr=a("p"),Qh=s(`A context manager to disable gradient synchronizations across DDP processes by calling
`),Cn=a("code"),Xh=s("torch.nn.parallel.DistributedDataParallel.no_sync"),Jh=s("."),Zh=l(),Mr=a("p"),em=s("If "),qn=a("code"),tm=s("model"),rm=s(" is not in DDP, this context manager does nothing"),am=l(),_($t.$$.fragment),om=l(),bt=a("div"),_(Rr.$$.fragment),nm=l(),Un=a("p"),sm=s("A decorator that will run the decorated function on the last process only."),cm=l(),yt=a("div"),_(Gr.$$.fragment),lm=l(),Vn=a("p"),im=s("A decorator that will run the decorated function on the local main process only."),dm=l(),wt=a("div"),_(Wr.$$.fragment),pm=l(),Mn=a("p"),hm=s("A decorator that will run the decorated function on a given local process index only."),mm=l(),Et=a("div"),_(Hr.$$.fragment),um=l(),Rn=a("p"),fm=s("A decorator that will run the decorated function on the main process only."),gm=l(),At=a("div"),_(Fr.$$.fragment),_m=l(),Gn=a("p"),vm=s("A decorator that will run the decorated function on a given process index only."),$m=l(),kt=a("div"),_(Yr.$$.fragment),bm=l(),Wn=a("p"),ym=s(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),wm=l(),Z=a("div"),_(Br.$$.fragment),Em=l(),Kr=a("p"),Am=s("Prepare all objects passed in "),Hn=a("code"),km=s("args"),xm=s(` for distributed training and mixed precision, then return them in the same
order.`),Pm=l(),_(xt.$$.fragment),jm=l(),Pt=a("div"),_(Qr.$$.fragment),Dm=l(),Xr=a("p"),Tm=s(`Prepares a PyTorch DataLoader for training in any distributed setup. It is recommended to use
`),Oa=a("a"),zm=s("Accelerator.prepare()"),Sm=s(" instead."),Im=l(),jt=a("div"),_(Jr.$$.fragment),Lm=l(),Zr=a("p"),Om=s(`Prepares a PyTorch model for training in any distributed setup. It is recommended to use
`),Na=a("a"),Nm=s("Accelerator.prepare()"),Cm=s(" instead."),qm=l(),Dt=a("div"),_(ea.$$.fragment),Um=l(),ta=a("p"),Vm=s(`Prepares a PyTorch Optimizer for training in any distributed setup. It is recommended to use
`),Ca=a("a"),Mm=s("Accelerator.prepare()"),Rm=s(" instead."),Gm=l(),Tt=a("div"),_(ra.$$.fragment),Wm=l(),aa=a("p"),Hm=s(`Prepares a PyTorch Scheduler for training in any distributed setup. It is recommended to use
`),qa=a("a"),Fm=s("Accelerator.prepare()"),Ym=s(" instead."),Bm=l(),zt=a("div"),_(oa.$$.fragment),Km=l(),na=a("p"),Qm=s("Use in replacement of "),Fn=a("code"),Xm=s("print()"),Jm=s(" to only print once per server."),Zm=l(),ee=a("div"),_(sa.$$.fragment),eu=l(),ye=a("p"),tu=s("Reduce the values in "),Yn=a("em"),ru=s("tensor"),au=s(" across all processes based on "),Bn=a("em"),ou=s("reduction"),nu=s("."),su=l(),Kn=a("p"),cu=s(`Note:
All processes get the reduced value.`),lu=l(),U=a("div"),_(ca.$$.fragment),iu=l(),R=a("p"),du=s("Makes note of "),Qn=a("code"),pu=s("objects"),hu=s(" and will save or load them in during "),Xn=a("code"),mu=s("save_state"),uu=s(" or "),Jn=a("code"),fu=s("load_state"),gu=s("."),_u=l(),Zn=a("p"),vu=s(`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),$u=l(),_(St.$$.fragment),bu=l(),It=a("div"),_(la.$$.fragment),yu=l(),ia=a("p"),wu=s("Save the object passed to disk once per machine. Use in place of "),es=a("code"),Eu=s("torch.save"),Au=s("."),ku=l(),te=a("div"),_(da.$$.fragment),xu=l(),ts=a("p"),Pu=s("Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),ju=l(),_(Lt.$$.fragment),Du=l(),Ot=a("div"),_(pa.$$.fragment),Tu=l(),rs=a("p"),zu=s("Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),Su=l(),Nt=a("div"),_(ha.$$.fragment),Iu=l(),we=a("p"),Lu=s("Unwraps the "),as=a("code"),Ou=s("model"),Nu=s(" from the additional layer possible added by "),Ua=a("a"),Cu=s("prepare()"),qu=s(`. Useful before saving
the model.`),Uu=l(),Ct=a("div"),_(ma.$$.fragment),Vu=l(),os=a("p"),Mu=s(`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),this.h()},l(t){const p=b_('[data-svelte="svelte-1phssyn"]',document.head);h=o(p,"META",{name:!0,content:!0}),p.forEach(r),k=i(t),A=o(t,"H1",{class:!0});var ua=n(A);E=o(ua,"A",{id:!0,class:!0,href:!0});var ns=n(E);j=o(ns,"SPAN",{});var ss=n(j);v(f.$$.fragment,ss),ss.forEach(r),ns.forEach(r),x=i(ua),N=o(ua,"SPAN",{});var cs=n(N);re=c(cs,"Accelerator"),cs.forEach(r),ua.forEach(r),Ae=i(t),C=o(t,"P",{});var fa=n(C);ae=c(fa,"The "),S=o(fa,"A",{href:!0});var ls=n(S);_a=c(ls,"Accelerator"),ls.forEach(r),va=c(fa,` is the main class provided by \u{1F917} Accelerate.
It serves at the main entrypoint for the API.`),fa.forEach(r),Gt=i(t),oe=o(t,"H2",{class:!0});var ga=n(oe);ke=o(ga,"A",{id:!0,class:!0,href:!0});var is=n(ke);no=o(is,"SPAN",{});var ds=n(no);v(Wt.$$.fragment,ds),ds.forEach(r),is.forEach(r),wl=i(ga),so=o(ga,"SPAN",{});var ps=n(so);El=c(ps,"Quick adaptation of your code"),ps.forEach(r),ga.forEach(r),As=i(t),$a=o(t,"P",{});var Gu=n($a);Al=c(Gu,"To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:"),Gu.forEach(r),ks=i(t),G=o(t,"OL",{});var Va=n(G);ne=o(Va,"LI",{});var Ma=n(ne);kl=c(Ma,"Initialize an "),ba=o(Ma,"A",{href:!0});var Wu=n(ba);xl=c(Wu,"Accelerator"),Wu.forEach(r),Pl=c(Ma," object (that we will call "),co=o(Ma,"CODE",{});var Hu=n(co);jl=c(Hu,"accelerator"),Hu.forEach(r),Dl=c(Ma," throughout this page) as early as possible in your script."),Ma.forEach(r),Tl=i(Va),Ht=o(Va,"LI",{});var dc=n(Ht);zl=c(dc,"Pass your dataloader(s), model(s), optimizer(s), and scheduler(s) to the "),ya=o(dc,"A",{href:!0});var Fu=n(ya);Sl=c(Fu,"prepare()"),Fu.forEach(r),Il=c(dc," method."),dc.forEach(r),Ll=i(Va),V=o(Va,"LI",{});var qt=n(V);Ol=c(qt,"Remove all the "),lo=o(qt,"CODE",{});var Yu=n(lo);Nl=c(Yu,".cuda()"),Yu.forEach(r),Cl=c(qt," or "),io=o(qt,"CODE",{});var Bu=n(io);ql=c(Bu,".to(device)"),Bu.forEach(r),Ul=c(qt," from your code and let the "),po=o(qt,"CODE",{});var Ku=n(po);Vl=c(Ku,"accelerator"),Ku.forEach(r),Ml=c(qt," handle the device placement for you."),qt.forEach(r),Va.forEach(r),xs=i(t),v(xe.$$.fragment,t),Ps=i(t),se=o(t,"OL",{start:!0});var pc=n(se);Pe=o(pc,"LI",{});var hs=n(Pe);Rl=c(hs,"Replace "),ho=o(hs,"CODE",{});var Qu=n(ho);Gl=c(Qu,"loss.backward()"),Qu.forEach(r),Wl=c(hs," in your code with "),mo=o(hs,"CODE",{});var Xu=n(mo);Hl=c(Xu,"accelerator.backward(loss)"),Xu.forEach(r),hs.forEach(r),Fl=i(pc),wa=o(pc,"LI",{});var Ru=n(wa);Yl=c(Ru,"Gather your predictions and labels before storing them or using them for metric computation using "),Ea=o(Ru,"A",{href:!0});var Ju=n(Ea);Bl=c(Ju,"gather()"),Ju.forEach(r),Ru.forEach(r),pc.forEach(r),js=i(t),v(je.$$.fragment,t),Ds=i(t),De=o(t,"P",{});var hc=n(De);Kl=c(hc,`In most cases this is all that is needed. The next section lists a few more advanced use cases and nice features
you should search for and replace by the corresponding methods of your `),uo=o(hc,"CODE",{});var Zu=n(uo);Ql=c(Zu,"accelerator"),Zu.forEach(r),Xl=c(hc,":"),hc.forEach(r),Ts=i(t),ce=o(t,"H2",{class:!0});var mc=n(ce);Te=o(mc,"A",{id:!0,class:!0,href:!0});var ef=n(Te);fo=o(ef,"SPAN",{});var tf=n(fo);v(Ft.$$.fragment,tf),tf.forEach(r),ef.forEach(r),Jl=i(mc),go=o(mc,"SPAN",{});var rf=n(go);Zl=c(rf,"Advanced recommendations"),rf.forEach(r),mc.forEach(r),zs=i(t),le=o(t,"H3",{class:!0});var uc=n(le);ze=o(uc,"A",{id:!0,class:!0,href:!0});var af=n(ze);_o=o(af,"SPAN",{});var of=n(_o);v(Yt.$$.fragment,of),of.forEach(r),af.forEach(r),ei=i(uc),vo=o(uc,"SPAN",{});var nf=n(vo);ti=c(nf,"Printing"),nf.forEach(r),uc.forEach(r),Ss=i(t),ie=o(t,"P",{});var ms=n(ie);$o=o(ms,"CODE",{});var sf=n($o);ri=c(sf,"print"),sf.forEach(r),ai=c(ms," statements should be replaced by "),Aa=o(ms,"A",{href:!0});var cf=n(Aa);oi=c(cf,"print()"),cf.forEach(r),ni=c(ms," to be printed once per process"),ms.forEach(r),Is=i(t),v(Bt.$$.fragment,t),Ls=i(t),de=o(t,"H3",{class:!0});var fc=n(de);Se=o(fc,"A",{id:!0,class:!0,href:!0});var lf=n(Se);bo=o(lf,"SPAN",{});var df=n(bo);v(Kt.$$.fragment,df),df.forEach(r),lf.forEach(r),si=i(fc),yo=o(fc,"SPAN",{});var pf=n(yo);ci=c(pf,"Executing processes"),pf.forEach(r),fc.forEach(r),Os=i(t),pe=o(t,"H4",{class:!0});var gc=n(pe);Ie=o(gc,"A",{id:!0,class:!0,href:!0});var hf=n(Ie);wo=o(hf,"SPAN",{});var mf=n(wo);v(Qt.$$.fragment,mf),mf.forEach(r),hf.forEach(r),li=i(gc),Eo=o(gc,"SPAN",{});var uf=n(Eo);ii=c(uf,"Once on a single server"),uf.forEach(r),gc.forEach(r),Ns=i(t),Le=o(t,"P",{});var _c=n(Le);di=c(_c,"For statements that should be executed once per server, use "),Ao=o(_c,"CODE",{});var ff=n(Ao);pi=c(ff,"is_local_main_process"),ff.forEach(r),hi=c(_c,":"),_c.forEach(r),Cs=i(t),v(Xt.$$.fragment,t),qs=i(t),Oe=o(t,"P",{});var vc=n(Oe);mi=c(vc,"A function can be wrapped using the "),ka=o(vc,"A",{href:!0});var gf=n(ka);ui=c(gf,"on_local_main_process()"),gf.forEach(r),fi=c(vc,` function to achieve the same
behavior on a function\u2019s execution:`),vc.forEach(r),Us=i(t),v(Jt.$$.fragment,t),Vs=i(t),he=o(t,"H4",{class:!0});var $c=n(he);Ne=o($c,"A",{id:!0,class:!0,href:!0});var _f=n(Ne);ko=o(_f,"SPAN",{});var vf=n(ko);v(Zt.$$.fragment,vf),vf.forEach(r),_f.forEach(r),gi=i($c),xo=o($c,"SPAN",{});var $f=n(xo);_i=c($f,"Only ever once across all servers"),$f.forEach(r),$c.forEach(r),Ms=i(t),Ce=o(t,"P",{});var bc=n(Ce);vi=c(bc,"For statements that should only ever be executed once, use "),Po=o(bc,"CODE",{});var bf=n(Po);$i=c(bf,"is_main_process"),bf.forEach(r),bi=c(bc,":"),bc.forEach(r),Rs=i(t),v(er.$$.fragment,t),Gs=i(t),qe=o(t,"P",{});var yc=n(qe);yi=c(yc,"A function can be wrapped using the "),xa=o(yc,"A",{href:!0});var yf=n(xa);wi=c(yf,"on_main_process()"),yf.forEach(r),Ei=c(yc,` function to achieve the same
behavior on a function\u2019s execution:`),yc.forEach(r),Ws=i(t),v(tr.$$.fragment,t),Hs=i(t),me=o(t,"H4",{class:!0});var wc=n(me);Ue=o(wc,"A",{id:!0,class:!0,href:!0});var wf=n(Ue);jo=o(wf,"SPAN",{});var Ef=n(jo);v(rr.$$.fragment,Ef),Ef.forEach(r),wf.forEach(r),Ai=i(wc),Do=o(wc,"SPAN",{});var Af=n(Do);ki=c(Af,"On specific processes"),Af.forEach(r),wc.forEach(r),Fs=i(t),Pa=o(t,"P",{});var kf=n(Pa);xi=c(kf,`If a function should be ran on a specific overall or local process index, there are similar decorators
to achieve this:`),kf.forEach(r),Ys=i(t),v(ar.$$.fragment,t),Bs=i(t),v(or.$$.fragment,t),Ks=i(t),ue=o(t,"H3",{class:!0});var Ec=n(ue);Ve=o(Ec,"A",{id:!0,class:!0,href:!0});var xf=n(Ve);To=o(xf,"SPAN",{});var Pf=n(To);v(nr.$$.fragment,Pf),Pf.forEach(r),xf.forEach(r),Pi=i(Ec),zo=o(Ec,"SPAN",{});var jf=n(zo);ji=c(jf,"Synchronicity control"),jf.forEach(r),Ec.forEach(r),Qs=i(t),Me=o(t,"P",{});var Ac=n(Me);Di=c(Ac,"Use "),ja=o(Ac,"A",{href:!0});var Df=n(ja);Ti=c(Df,"wait_for_everyone()"),Df.forEach(r),zi=c(Ac," to make sure all processes join that point before continuing. (Useful before a model save for instance)"),Ac.forEach(r),Xs=i(t),fe=o(t,"H3",{class:!0});var kc=n(fe);Re=o(kc,"A",{id:!0,class:!0,href:!0});var Tf=n(Re);So=o(Tf,"SPAN",{});var zf=n(So);v(sr.$$.fragment,zf),zf.forEach(r),Tf.forEach(r),Si=i(kc),Io=o(kc,"SPAN",{});var Sf=n(Io);Ii=c(Sf,"Saving and loading"),Sf.forEach(r),kc.forEach(r),Js=i(t),Ge=o(t,"P",{});var xc=n(Ge);Li=c(xc,"Use "),Da=o(xc,"A",{href:!0});var If=n(Da);Oi=c(If,"unwrap_model()"),If.forEach(r),Ni=c(xc," before saving to remove all special model wrappers added during the distributed process."),xc.forEach(r),Zs=i(t),v(cr.$$.fragment,t),ec=i(t),W=o(t,"P",{});var Ra=n(W);Ci=c(Ra,"Use "),Ta=o(Ra,"A",{href:!0});var Lf=n(Ta);qi=c(Lf,"save()"),Lf.forEach(r),Ui=c(Ra," instead of "),Lo=o(Ra,"CODE",{});var Of=n(Lo);Vi=c(Of,"torch.save"),Of.forEach(r),Mi=c(Ra,":"),Ra.forEach(r),tc=i(t),v(lr.$$.fragment,t),rc=i(t),ge=o(t,"H3",{class:!0});var Pc=n(ge);We=o(Pc,"A",{id:!0,class:!0,href:!0});var Nf=n(We);Oo=o(Nf,"SPAN",{});var Cf=n(Oo);v(ir.$$.fragment,Cf),Cf.forEach(r),Nf.forEach(r),Ri=i(Pc),No=o(Pc,"SPAN",{});var qf=n(No);Gi=c(qf,"Operations"),qf.forEach(r),Pc.forEach(r),ac=i(t),L=o(t,"P",{});var Ee=n(L);Wi=c(Ee,"Use "),He=o(Ee,"A",{href:!0});var jc=n(He);Hi=c(jc,"clip"),Co=o(jc,"EM",{});var Uf=n(Co);Fi=c(Uf,"grad_norm"),Uf.forEach(r),Yi=c(jc,"()"),jc.forEach(r),Bi=c(Ee," instead of "),qo=o(Ee,"CODE",{});var Vf=n(qo);Ki=c(Vf,"torch.nn.utils.clip_grad_norm_"),Vf.forEach(r),Qi=c(Ee," and "),Fe=o(Ee,"A",{href:!0});var Dc=n(Fe);Xi=c(Dc,"clip"),Uo=o(Dc,"EM",{});var Mf=n(Uo);Ji=c(Mf,"grad_value"),Mf.forEach(r),Zi=c(Dc,"()"),Dc.forEach(r),ed=c(Ee," instead of "),Vo=o(Ee,"CODE",{});var Rf=n(Vo);td=c(Rf,"torch.nn.utils.clip_grad_value"),Rf.forEach(r),Ee.forEach(r),oc=i(t),_e=o(t,"H3",{class:!0});var Tc=n(_e);Ye=o(Tc,"A",{id:!0,class:!0,href:!0});var Gf=n(Ye);Mo=o(Gf,"SPAN",{});var Wf=n(Mo);v(dr.$$.fragment,Wf),Wf.forEach(r),Gf.forEach(r),rd=i(Tc),Ro=o(Tc,"SPAN",{});var Hf=n(Ro);ad=c(Hf,"Gradient Accumulation"),Hf.forEach(r),Tc.forEach(r),nc=i(t),Be=o(t,"P",{});var zc=n(Be);od=c(zc,"To perform gradient accumulation use "),za=o(zc,"A",{href:!0});var Ff=n(za);nd=c(Ff,"accumulate()"),Ff.forEach(r),sd=c(zc,` and specify a gradient_accumulation_steps.
This will also automatically ensure the gradients are synced or unsynced when on
multi-device training, check if the step should actually be performed, and auto-scale the loss:`),zc.forEach(r),sc=i(t),v(pr.$$.fragment,t),cc=i(t),ve=o(t,"H2",{class:!0});var Sc=n(ve);Ke=o(Sc,"A",{id:!0,class:!0,href:!0});var Yf=n(Ke);Go=o(Yf,"SPAN",{});var Bf=n(Go);v(hr.$$.fragment,Bf),Bf.forEach(r),Yf.forEach(r),cd=i(Sc),Wo=o(Sc,"SPAN",{});var Kf=n(Wo);ld=c(Kf,"Overall API documentation:"),Kf.forEach(r),Sc.forEach(r),lc=i(t),m=o(t,"DIV",{class:!0});var g=n(m);v(mr.$$.fragment,g),id=i(g),Ho=o(g,"P",{});var Qf=n(Ho);dd=c(Qf,"Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),Qf.forEach(r),pd=i(g),Fo=o(g,"P",{});var Xf=n(Fo);Yo=o(Xf,"STRONG",{});var Jf=n(Yo);hd=c(Jf,"Available attributes:"),Jf.forEach(r),Xf.forEach(r),md=i(g),D=o(g,"UL",{});var z=n(D);Qe=o(z,"LI",{});var us=n(Qe);Bo=o(us,"STRONG",{});var Zf=n(Bo);ud=c(Zf,"device"),Zf.forEach(r),fd=c(us," ("),Ko=o(us,"CODE",{});var eg=n(Ko);gd=c(eg,"torch.device"),eg.forEach(r),_d=c(us,") \u2014 The device to use."),us.forEach(r),vd=i(z),Xe=o(z,"LI",{});var fs=n(Xe);Qo=o(fs,"STRONG",{});var tg=n(Qo);$d=c(tg,"distributed_type"),tg.forEach(r),bd=c(fs," ("),Sa=o(fs,"A",{href:!0});var rg=n(Sa);yd=c(rg,"DistributedType"),rg.forEach(r),wd=c(fs,") \u2014 The distributed training configuration."),fs.forEach(r),Ed=i(z),Je=o(z,"LI",{});var gs=n(Je);Xo=o(gs,"STRONG",{});var ag=n(Xo);Ad=c(ag,"local_process_index"),ag.forEach(r),kd=c(gs," ("),Jo=o(gs,"CODE",{});var og=n(Jo);xd=c(og,"int"),og.forEach(r),Pd=c(gs,") \u2014 The process index on the current machine."),gs.forEach(r),jd=i(z),Ze=o(z,"LI",{});var _s=n(Ze);Zo=o(_s,"STRONG",{});var ng=n(Zo);Dd=c(ng,"mixed_precision"),ng.forEach(r),Td=c(_s," ("),en=o(_s,"CODE",{});var sg=n(en);zd=c(sg,"str"),sg.forEach(r),Sd=c(_s,") \u2014 The configured mixed precision mode."),_s.forEach(r),Id=i(z),et=o(z,"LI",{});var vs=n(et);tn=o(vs,"STRONG",{});var cg=n(tn);Ld=c(cg,"num_processes"),cg.forEach(r),Od=c(vs," ("),rn=o(vs,"CODE",{});var lg=n(rn);Nd=c(lg,"int"),lg.forEach(r),Cd=c(vs,") \u2014 The total number of processes used for training."),vs.forEach(r),qd=i(z),tt=o(z,"LI",{});var $s=n(tt);an=o($s,"STRONG",{});var ig=n(an);Ud=c(ig,"optimizer_step_was_skipped"),ig.forEach(r),Vd=c($s," ("),on=o($s,"CODE",{});var dg=n(on);Md=c(dg,"bool"),dg.forEach(r),Rd=c($s,`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),$s.forEach(r),Gd=i(z),rt=o(z,"LI",{});var bs=n(rt);nn=o(bs,"STRONG",{});var pg=n(nn);Wd=c(pg,"process_index"),pg.forEach(r),Hd=c(bs," ("),sn=o(bs,"CODE",{});var hg=n(sn);Fd=c(hg,"int"),hg.forEach(r),Yd=c(bs,") \u2014 The overall index of the current process among all processes."),bs.forEach(r),Bd=i(z),at=o(z,"LI",{});var ys=n(at);cn=o(ys,"STRONG",{});var mg=n(cn);Kd=c(mg,"state"),mg.forEach(r),Qd=c(ys," ("),Ia=o(ys,"A",{href:!0});var ug=n(Ia);Xd=c(ug,"AcceleratorState"),ug.forEach(r),Jd=c(ys,") \u2014 The distributed setup state."),ys.forEach(r),Zd=i(z),ot=o(z,"LI",{});var ws=n(ot);ln=o(ws,"STRONG",{});var fg=n(ln);ep=c(fg,"sync_gradients"),fg.forEach(r),tp=c(ws," ("),dn=o(ws,"CODE",{});var gg=n(dn);rp=c(gg,"bool"),gg.forEach(r),ap=c(ws,") \u2014 Whether the gradients are currently being synced across all processes."),ws.forEach(r),op=i(z),nt=o(z,"LI",{});var Es=n(nt);pn=o(Es,"STRONG",{});var _g=n(pn);np=c(_g,"use_distributed"),_g.forEach(r),sp=c(Es," ("),hn=o(Es,"CODE",{});var vg=n(hn);cp=c(vg,"bool"),vg.forEach(r),lp=c(Es,") \u2014 Whether the current configuration is for distributed training."),Es.forEach(r),z.forEach(r),ip=i(g),H=o(g,"DIV",{class:!0});var Ga=n(H);v(ur.$$.fragment,Ga),dp=i(Ga),mn=o(Ga,"P",{});var $g=n(mn);pp=c($g,"A context manager that will lightly wrap around and perform gradient accumulation automatically"),$g.forEach(r),hp=i(Ga),v(st.$$.fragment,Ga),Ga.forEach(r),mp=i(g),ct=o(g,"DIV",{class:!0});var Ic=n(ct);v(fr.$$.fragment,Ic),up=i(Ic),un=o(Ic,"P",{});var bg=n(un);fp=c(bg,`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),bg.forEach(r),Ic.forEach(r),gp=i(g),F=o(g,"DIV",{class:!0});var Wa=n(F);v(gr.$$.fragment,Wa),_p=i(Wa),$e=o(Wa,"P",{});var Ha=n($e);vp=c(Ha,"Scales the gradients in accordance to "),fn=o(Ha,"CODE",{});var yg=n(fn);$p=c(yg,"Accelerator.gradient_accumulation_steps"),yg.forEach(r),bp=c(Ha,` and calls the correct
`),gn=o(Ha,"CODE",{});var wg=n(gn);yp=c(wg,"backward()"),wg.forEach(r),wp=c(Ha," based on the configuration."),Ha.forEach(r),Ep=i(Wa),_r=o(Wa,"P",{});var Lc=n(_r);Ap=c(Lc,"Should be used in lieu of "),_n=o(Lc,"CODE",{});var Eg=n(_n);kp=c(Eg,"loss.backward()"),Eg.forEach(r),xp=c(Lc,"."),Lc.forEach(r),Wa.forEach(r),Pp=i(g),lt=o(g,"DIV",{class:!0});var Oc=n(lt);v(vr.$$.fragment,Oc),jp=i(Oc),$r=o(Oc,"P",{});var Nc=n($r);Dp=c(Nc,"Alias for "),vn=o(Nc,"CODE",{});var Ag=n(vn);Tp=c(Ag,"Accelerate.free_memory"),Ag.forEach(r),zp=c(Nc,`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),Nc.forEach(r),Oc.forEach(r),Sp=i(g),Y=o(g,"DIV",{class:!0});var Fa=n(Y);v(br.$$.fragment,Fa),Ip=i(Fa),yr=o(Fa,"P",{});var Cc=n(yr);Lp=c(Cc,"Should be used in place of "),$n=o(Cc,"CODE",{});var kg=n($n);Op=c(kg,"torch.nn.utils.clip_grad_norm_"),kg.forEach(r),Np=c(Cc,"."),Cc.forEach(r),Cp=i(Fa),v(it.$$.fragment,Fa),Fa.forEach(r),qp=i(g),B=o(g,"DIV",{class:!0});var Ya=n(B);v(wr.$$.fragment,Ya),Up=i(Ya),Er=o(Ya,"P",{});var qc=n(Er);Vp=c(qc,"Should be used in place of "),bn=o(qc,"CODE",{});var xg=n(bn);Mp=c(xg,"torch.nn.utils.clip_grad_value_"),xg.forEach(r),Rp=c(qc,"."),qc.forEach(r),Gp=i(Ya),v(dt.$$.fragment,Ya),Ya.forEach(r),Wp=i(g),pt=o(g,"DIV",{class:!0});var Uc=n(pt);v(Ar.$$.fragment,Uc),Hp=i(Uc),yn=o(Uc,"P",{});var Pg=n(yn);Fp=c(Pg,`Runs any special end training behaviors, such as stopping trackers on the main process only. Should always be
called at the end of your script if using experiment tracking.`),Pg.forEach(r),Uc.forEach(r),Yp=i(g),ht=o(g,"DIV",{class:!0});var Vc=n(ht);v(kr.$$.fragment,Vc),Bp=i(Vc),wn=o(Vc,"P",{});var jg=n(wn);Kp=c(jg,`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),jg.forEach(r),Vc.forEach(r),Qp=i(g),K=o(g,"DIV",{class:!0});var Ba=n(K);v(xr.$$.fragment,Ba),Xp=i(Ba),Pr=o(Ba,"P",{});var Mc=n(Pr);Jp=c(Mc,"Gather the values in "),En=o(Mc,"EM",{});var Dg=n(En);Zp=c(Dg,"tensor"),Dg.forEach(r),eh=c(Mc,` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),Mc.forEach(r),th=i(Ba),An=o(Ba,"P",{});var Tg=n(An);rh=c(Tg,`Note:
This gather happens in all processes.`),Tg.forEach(r),Ba.forEach(r),ah=i(g),mt=o(g,"DIV",{class:!0});var Rc=n(mt);v(jr.$$.fragment,Rc),oh=i(Rc),Dr=o(Rc,"P",{});var Gc=n(Dr);nh=c(Gc,"Gathers "),kn=o(Gc,"CODE",{});var zg=n(kn);sh=c(zg,"tensor"),zg.forEach(r),ch=c(Gc,` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),Gc.forEach(r),Rc.forEach(r),lh=i(g),ut=o(g,"DIV",{class:!0});var Wc=n(ut);v(Tr.$$.fragment,Wc),ih=i(Wc),zr=o(Wc,"P",{});var Hc=n(zr);dh=c(Hc,"Returns the state dictionary of a model sent through "),La=o(Hc,"A",{href:!0});var Sg=n(La);ph=c(Sg,"Accelerator.prepare()"),Sg.forEach(r),hh=c(Hc," in full precision"),Hc.forEach(r),Wc.forEach(r),mh=i(g),ft=o(g,"DIV",{class:!0});var Fc=n(ft);v(Sr.$$.fragment,Fc),uh=i(Fc),M=o(Fc,"P",{});var Ut=n(M);fh=c(Ut,"Returns a "),xn=o(Ut,"CODE",{});var Ig=n(xn);gh=c(Ig,"tracker"),Ig.forEach(r),_h=c(Ut," from "),Pn=o(Ut,"CODE",{});var Lg=n(Pn);vh=c(Lg,"self.trackers"),Lg.forEach(r),$h=c(Ut," based on "),jn=o(Ut,"CODE",{});var Og=n(jn);bh=c(Og,"name"),Og.forEach(r),yh=c(Ut," on the main process only."),Ut.forEach(r),Fc.forEach(r),wh=i(g),gt=o(g,"DIV",{class:!0});var Yc=n(gt);v(Ir.$$.fragment,Yc),Eh=i(Yc),Lr=o(Yc,"P",{});var Bc=n(Lr);Ah=c(Bc,"Initializes a run for all trackers stored in "),Dn=o(Bc,"CODE",{});var Ng=n(Dn);kh=c(Ng,"self.log_with"),Ng.forEach(r),xh=c(Bc,", potentially with starting configurations"),Bc.forEach(r),Yc.forEach(r),Ph=i(g),Q=o(g,"DIV",{class:!0});var Ka=n(Q);v(Or.$$.fragment,Ka),jh=i(Ka),Tn=o(Ka,"P",{});var Cg=n(Tn);Dh=c(Cg,"Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Cg.forEach(r),Th=i(Ka),v(_t.$$.fragment,Ka),Ka.forEach(r),zh=i(g),X=o(g,"DIV",{class:!0});var Qa=n(X);v(Nr.$$.fragment,Qa),Sh=i(Qa),zn=o(Qa,"P",{});var qg=n(zn);Ih=c(qg,"Lets the local main process go inside a with block."),qg.forEach(r),Lh=i(Qa),Sn=o(Qa,"P",{});var Ug=n(Sn);Oh=c(Ug,"The other processes will enter the with block after the main process exits."),Ug.forEach(r),Qa.forEach(r),Nh=i(g),vt=o(g,"DIV",{class:!0});var Kc=n(vt);v(Cr.$$.fragment,Kc),Ch=i(Kc),be=o(Kc,"P",{});var Xa=n(be);qh=c(Xa,"Logs "),In=o(Xa,"CODE",{});var Vg=n(In);Uh=c(Vg,"values"),Vg.forEach(r),Vh=c(Xa," to all stored trackers in "),Ln=o(Xa,"CODE",{});var Mg=n(Ln);Mh=c(Mg,"self.trackers"),Mg.forEach(r),Rh=c(Xa," on the main process only."),Xa.forEach(r),Kc.forEach(r),Gh=i(g),J=o(g,"DIV",{class:!0});var Ja=n(J);v(qr.$$.fragment,Ja),Wh=i(Ja),On=o(Ja,"P",{});var Rg=n(On);Hh=c(Rg,"Lets the main process go first inside a with block."),Rg.forEach(r),Fh=i(Ja),Nn=o(Ja,"P",{});var Gg=n(Nn);Yh=c(Gg,"The other processes will enter the with block after the main process exits."),Gg.forEach(r),Ja.forEach(r),Bh=i(g),q=o(g,"DIV",{class:!0});var Vt=n(q);v(Ur.$$.fragment,Vt),Kh=i(Vt),Vr=o(Vt,"P",{});var Qc=n(Vr);Qh=c(Qc,`A context manager to disable gradient synchronizations across DDP processes by calling
`),Cn=o(Qc,"CODE",{});var Wg=n(Cn);Xh=c(Wg,"torch.nn.parallel.DistributedDataParallel.no_sync"),Wg.forEach(r),Jh=c(Qc,"."),Qc.forEach(r),Zh=i(Vt),Mr=o(Vt,"P",{});var Xc=n(Mr);em=c(Xc,"If "),qn=o(Xc,"CODE",{});var Hg=n(qn);tm=c(Hg,"model"),Hg.forEach(r),rm=c(Xc," is not in DDP, this context manager does nothing"),Xc.forEach(r),am=i(Vt),v($t.$$.fragment,Vt),Vt.forEach(r),om=i(g),bt=o(g,"DIV",{class:!0});var Jc=n(bt);v(Rr.$$.fragment,Jc),nm=i(Jc),Un=o(Jc,"P",{});var Fg=n(Un);sm=c(Fg,"A decorator that will run the decorated function on the last process only."),Fg.forEach(r),Jc.forEach(r),cm=i(g),yt=o(g,"DIV",{class:!0});var Zc=n(yt);v(Gr.$$.fragment,Zc),lm=i(Zc),Vn=o(Zc,"P",{});var Yg=n(Vn);im=c(Yg,"A decorator that will run the decorated function on the local main process only."),Yg.forEach(r),Zc.forEach(r),dm=i(g),wt=o(g,"DIV",{class:!0});var el=n(wt);v(Wr.$$.fragment,el),pm=i(el),Mn=o(el,"P",{});var Bg=n(Mn);hm=c(Bg,"A decorator that will run the decorated function on a given local process index only."),Bg.forEach(r),el.forEach(r),mm=i(g),Et=o(g,"DIV",{class:!0});var tl=n(Et);v(Hr.$$.fragment,tl),um=i(tl),Rn=o(tl,"P",{});var Kg=n(Rn);fm=c(Kg,"A decorator that will run the decorated function on the main process only."),Kg.forEach(r),tl.forEach(r),gm=i(g),At=o(g,"DIV",{class:!0});var rl=n(At);v(Fr.$$.fragment,rl),_m=i(rl),Gn=o(rl,"P",{});var Qg=n(Gn);vm=c(Qg,"A decorator that will run the decorated function on a given process index only."),Qg.forEach(r),rl.forEach(r),$m=i(g),kt=o(g,"DIV",{class:!0});var al=n(kt);v(Yr.$$.fragment,al),bm=i(al),Wn=o(al,"P",{});var Xg=n(Wn);ym=c(Xg,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),Xg.forEach(r),al.forEach(r),wm=i(g),Z=o(g,"DIV",{class:!0});var Za=n(Z);v(Br.$$.fragment,Za),Em=i(Za),Kr=o(Za,"P",{});var ol=n(Kr);Am=c(ol,"Prepare all objects passed in "),Hn=o(ol,"CODE",{});var Jg=n(Hn);km=c(Jg,"args"),Jg.forEach(r),xm=c(ol,` for distributed training and mixed precision, then return them in the same
order.`),ol.forEach(r),Pm=i(Za),v(xt.$$.fragment,Za),Za.forEach(r),jm=i(g),Pt=o(g,"DIV",{class:!0});var nl=n(Pt);v(Qr.$$.fragment,nl),Dm=i(nl),Xr=o(nl,"P",{});var sl=n(Xr);Tm=c(sl,`Prepares a PyTorch DataLoader for training in any distributed setup. It is recommended to use
`),Oa=o(sl,"A",{href:!0});var Zg=n(Oa);zm=c(Zg,"Accelerator.prepare()"),Zg.forEach(r),Sm=c(sl," instead."),sl.forEach(r),nl.forEach(r),Im=i(g),jt=o(g,"DIV",{class:!0});var cl=n(jt);v(Jr.$$.fragment,cl),Lm=i(cl),Zr=o(cl,"P",{});var ll=n(Zr);Om=c(ll,`Prepares a PyTorch model for training in any distributed setup. It is recommended to use
`),Na=o(ll,"A",{href:!0});var e_=n(Na);Nm=c(e_,"Accelerator.prepare()"),e_.forEach(r),Cm=c(ll," instead."),ll.forEach(r),cl.forEach(r),qm=i(g),Dt=o(g,"DIV",{class:!0});var il=n(Dt);v(ea.$$.fragment,il),Um=i(il),ta=o(il,"P",{});var dl=n(ta);Vm=c(dl,`Prepares a PyTorch Optimizer for training in any distributed setup. It is recommended to use
`),Ca=o(dl,"A",{href:!0});var t_=n(Ca);Mm=c(t_,"Accelerator.prepare()"),t_.forEach(r),Rm=c(dl," instead."),dl.forEach(r),il.forEach(r),Gm=i(g),Tt=o(g,"DIV",{class:!0});var pl=n(Tt);v(ra.$$.fragment,pl),Wm=i(pl),aa=o(pl,"P",{});var hl=n(aa);Hm=c(hl,`Prepares a PyTorch Scheduler for training in any distributed setup. It is recommended to use
`),qa=o(hl,"A",{href:!0});var r_=n(qa);Fm=c(r_,"Accelerator.prepare()"),r_.forEach(r),Ym=c(hl," instead."),hl.forEach(r),pl.forEach(r),Bm=i(g),zt=o(g,"DIV",{class:!0});var ml=n(zt);v(oa.$$.fragment,ml),Km=i(ml),na=o(ml,"P",{});var ul=n(na);Qm=c(ul,"Use in replacement of "),Fn=o(ul,"CODE",{});var a_=n(Fn);Xm=c(a_,"print()"),a_.forEach(r),Jm=c(ul," to only print once per server."),ul.forEach(r),ml.forEach(r),Zm=i(g),ee=o(g,"DIV",{class:!0});var eo=n(ee);v(sa.$$.fragment,eo),eu=i(eo),ye=o(eo,"P",{});var to=n(ye);tu=c(to,"Reduce the values in "),Yn=o(to,"EM",{});var o_=n(Yn);ru=c(o_,"tensor"),o_.forEach(r),au=c(to," across all processes based on "),Bn=o(to,"EM",{});var n_=n(Bn);ou=c(n_,"reduction"),n_.forEach(r),nu=c(to,"."),to.forEach(r),su=i(eo),Kn=o(eo,"P",{});var s_=n(Kn);cu=c(s_,`Note:
All processes get the reduced value.`),s_.forEach(r),eo.forEach(r),lu=i(g),U=o(g,"DIV",{class:!0});var Mt=n(U);v(ca.$$.fragment,Mt),iu=i(Mt),R=o(Mt,"P",{});var Rt=n(R);du=c(Rt,"Makes note of "),Qn=o(Rt,"CODE",{});var c_=n(Qn);pu=c(c_,"objects"),c_.forEach(r),hu=c(Rt," and will save or load them in during "),Xn=o(Rt,"CODE",{});var l_=n(Xn);mu=c(l_,"save_state"),l_.forEach(r),uu=c(Rt," or "),Jn=o(Rt,"CODE",{});var i_=n(Jn);fu=c(i_,"load_state"),i_.forEach(r),gu=c(Rt,"."),Rt.forEach(r),_u=i(Mt),Zn=o(Mt,"P",{});var d_=n(Zn);vu=c(d_,`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),d_.forEach(r),$u=i(Mt),v(St.$$.fragment,Mt),Mt.forEach(r),bu=i(g),It=o(g,"DIV",{class:!0});var fl=n(It);v(la.$$.fragment,fl),yu=i(fl),ia=o(fl,"P",{});var gl=n(ia);wu=c(gl,"Save the object passed to disk once per machine. Use in place of "),es=o(gl,"CODE",{});var p_=n(es);Eu=c(p_,"torch.save"),p_.forEach(r),Au=c(gl,"."),gl.forEach(r),fl.forEach(r),ku=i(g),te=o(g,"DIV",{class:!0});var ro=n(te);v(da.$$.fragment,ro),xu=i(ro),ts=o(ro,"P",{});var h_=n(ts);Pu=c(h_,"Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),h_.forEach(r),ju=i(ro),v(Lt.$$.fragment,ro),ro.forEach(r),Du=i(g),Ot=o(g,"DIV",{class:!0});var _l=n(Ot);v(pa.$$.fragment,_l),Tu=i(_l),rs=o(_l,"P",{});var m_=n(rs);zu=c(m_,"Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),m_.forEach(r),_l.forEach(r),Su=i(g),Nt=o(g,"DIV",{class:!0});var vl=n(Nt);v(ha.$$.fragment,vl),Iu=i(vl),we=o(vl,"P",{});var ao=n(we);Lu=c(ao,"Unwraps the "),as=o(ao,"CODE",{});var u_=n(as);Ou=c(u_,"model"),u_.forEach(r),Nu=c(ao," from the additional layer possible added by "),Ua=o(ao,"A",{href:!0});var f_=n(Ua);Cu=c(f_,"prepare()"),f_.forEach(r),qu=c(ao,`. Useful before saving
the model.`),ao.forEach(r),vl.forEach(r),Uu=i(g),Ct=o(g,"DIV",{class:!0});var $l=n(Ct);v(ma.$$.fragment,$l),Vu=i($l),os=o($l,"P",{});var g_=n(os);Mu=c(g_,`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),g_.forEach(r),$l.forEach(r),g.forEach(r),this.h()},h(){d(h,"name","hf:doc:metadata"),d(h,"content",JSON.stringify(I_)),d(E,"id","accelerator"),d(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E,"href","#accelerator"),d(A,"class","relative group"),d(S,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator"),d(ke,"id","quick-adaptation-of-your-code"),d(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ke,"href","#quick-adaptation-of-your-code"),d(oe,"class","relative group"),d(ba,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator"),d(ya,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(Ea,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.gather"),d(se,"start","4"),d(Te,"id","advanced-recommendations"),d(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Te,"href","#advanced-recommendations"),d(ce,"class","relative group"),d(ze,"id","printing"),d(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ze,"href","#printing"),d(le,"class","relative group"),d(Aa,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.print"),d(Se,"id","executing-processes"),d(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Se,"href","#executing-processes"),d(de,"class","relative group"),d(Ie,"id","once-on-a-single-server"),d(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ie,"href","#once-on-a-single-server"),d(pe,"class","relative group"),d(ka,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.on_local_main_process"),d(Ne,"id","only-ever-once-across-all-servers"),d(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ne,"href","#only-ever-once-across-all-servers"),d(he,"class","relative group"),d(xa,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.on_main_process"),d(Ue,"id","on-specific-processes"),d(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ue,"href","#on-specific-processes"),d(me,"class","relative group"),d(Ve,"id","synchronicity-control"),d(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ve,"href","#synchronicity-control"),d(ue,"class","relative group"),d(ja,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.wait_for_everyone"),d(Re,"id","saving-and-loading"),d(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Re,"href","#saving-and-loading"),d(fe,"class","relative group"),d(Da,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.unwrap_model"),d(Ta,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.save"),d(We,"id","operations"),d(We,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(We,"href","#operations"),d(ge,"class","relative group"),d(He,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.clip_grad_norm_"),d(Fe,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.clip_grad_value_"),d(Ye,"id","gradient-accumulation"),d(Ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ye,"href","#gradient-accumulation"),d(_e,"class","relative group"),d(za,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.accumulate"),d(Ke,"id","accelerate.Accelerator"),d(Ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ke,"href","#accelerate.Accelerator"),d(ve,"class","relative group"),d(Sa,"href","/docs/accelerate/main/en/package_reference/utilities#accelerate.DistributedType"),d(Ia,"href","/docs/accelerate/main/en/package_reference/state#accelerate.state.AcceleratorState"),d(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(La,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oa,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Na,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ca,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qa,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ua,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,p){e(document.head,h),u(t,k,p),u(t,A,p),e(A,E),e(E,j),$(f,j,null),e(A,x),e(A,N),e(N,re),u(t,Ae,p),u(t,C,p),e(C,ae),e(C,S),e(S,_a),e(C,va),u(t,Gt,p),u(t,oe,p),e(oe,ke),e(ke,no),$(Wt,no,null),e(oe,wl),e(oe,so),e(so,El),u(t,As,p),u(t,$a,p),e($a,Al),u(t,ks,p),u(t,G,p),e(G,ne),e(ne,kl),e(ne,ba),e(ba,xl),e(ne,Pl),e(ne,co),e(co,jl),e(ne,Dl),e(G,Tl),e(G,Ht),e(Ht,zl),e(Ht,ya),e(ya,Sl),e(Ht,Il),e(G,Ll),e(G,V),e(V,Ol),e(V,lo),e(lo,Nl),e(V,Cl),e(V,io),e(io,ql),e(V,Ul),e(V,po),e(po,Vl),e(V,Ml),u(t,xs,p),$(xe,t,p),u(t,Ps,p),u(t,se,p),e(se,Pe),e(Pe,Rl),e(Pe,ho),e(ho,Gl),e(Pe,Wl),e(Pe,mo),e(mo,Hl),e(se,Fl),e(se,wa),e(wa,Yl),e(wa,Ea),e(Ea,Bl),u(t,js,p),$(je,t,p),u(t,Ds,p),u(t,De,p),e(De,Kl),e(De,uo),e(uo,Ql),e(De,Xl),u(t,Ts,p),u(t,ce,p),e(ce,Te),e(Te,fo),$(Ft,fo,null),e(ce,Jl),e(ce,go),e(go,Zl),u(t,zs,p),u(t,le,p),e(le,ze),e(ze,_o),$(Yt,_o,null),e(le,ei),e(le,vo),e(vo,ti),u(t,Ss,p),u(t,ie,p),e(ie,$o),e($o,ri),e(ie,ai),e(ie,Aa),e(Aa,oi),e(ie,ni),u(t,Is,p),$(Bt,t,p),u(t,Ls,p),u(t,de,p),e(de,Se),e(Se,bo),$(Kt,bo,null),e(de,si),e(de,yo),e(yo,ci),u(t,Os,p),u(t,pe,p),e(pe,Ie),e(Ie,wo),$(Qt,wo,null),e(pe,li),e(pe,Eo),e(Eo,ii),u(t,Ns,p),u(t,Le,p),e(Le,di),e(Le,Ao),e(Ao,pi),e(Le,hi),u(t,Cs,p),$(Xt,t,p),u(t,qs,p),u(t,Oe,p),e(Oe,mi),e(Oe,ka),e(ka,ui),e(Oe,fi),u(t,Us,p),$(Jt,t,p),u(t,Vs,p),u(t,he,p),e(he,Ne),e(Ne,ko),$(Zt,ko,null),e(he,gi),e(he,xo),e(xo,_i),u(t,Ms,p),u(t,Ce,p),e(Ce,vi),e(Ce,Po),e(Po,$i),e(Ce,bi),u(t,Rs,p),$(er,t,p),u(t,Gs,p),u(t,qe,p),e(qe,yi),e(qe,xa),e(xa,wi),e(qe,Ei),u(t,Ws,p),$(tr,t,p),u(t,Hs,p),u(t,me,p),e(me,Ue),e(Ue,jo),$(rr,jo,null),e(me,Ai),e(me,Do),e(Do,ki),u(t,Fs,p),u(t,Pa,p),e(Pa,xi),u(t,Ys,p),$(ar,t,p),u(t,Bs,p),$(or,t,p),u(t,Ks,p),u(t,ue,p),e(ue,Ve),e(Ve,To),$(nr,To,null),e(ue,Pi),e(ue,zo),e(zo,ji),u(t,Qs,p),u(t,Me,p),e(Me,Di),e(Me,ja),e(ja,Ti),e(Me,zi),u(t,Xs,p),u(t,fe,p),e(fe,Re),e(Re,So),$(sr,So,null),e(fe,Si),e(fe,Io),e(Io,Ii),u(t,Js,p),u(t,Ge,p),e(Ge,Li),e(Ge,Da),e(Da,Oi),e(Ge,Ni),u(t,Zs,p),$(cr,t,p),u(t,ec,p),u(t,W,p),e(W,Ci),e(W,Ta),e(Ta,qi),e(W,Ui),e(W,Lo),e(Lo,Vi),e(W,Mi),u(t,tc,p),$(lr,t,p),u(t,rc,p),u(t,ge,p),e(ge,We),e(We,Oo),$(ir,Oo,null),e(ge,Ri),e(ge,No),e(No,Gi),u(t,ac,p),u(t,L,p),e(L,Wi),e(L,He),e(He,Hi),e(He,Co),e(Co,Fi),e(He,Yi),e(L,Bi),e(L,qo),e(qo,Ki),e(L,Qi),e(L,Fe),e(Fe,Xi),e(Fe,Uo),e(Uo,Ji),e(Fe,Zi),e(L,ed),e(L,Vo),e(Vo,td),u(t,oc,p),u(t,_e,p),e(_e,Ye),e(Ye,Mo),$(dr,Mo,null),e(_e,rd),e(_e,Ro),e(Ro,ad),u(t,nc,p),u(t,Be,p),e(Be,od),e(Be,za),e(za,nd),e(Be,sd),u(t,sc,p),$(pr,t,p),u(t,cc,p),u(t,ve,p),e(ve,Ke),e(Ke,Go),$(hr,Go,null),e(ve,cd),e(ve,Wo),e(Wo,ld),u(t,lc,p),u(t,m,p),$(mr,m,null),e(m,id),e(m,Ho),e(Ho,dd),e(m,pd),e(m,Fo),e(Fo,Yo),e(Yo,hd),e(m,md),e(m,D),e(D,Qe),e(Qe,Bo),e(Bo,ud),e(Qe,fd),e(Qe,Ko),e(Ko,gd),e(Qe,_d),e(D,vd),e(D,Xe),e(Xe,Qo),e(Qo,$d),e(Xe,bd),e(Xe,Sa),e(Sa,yd),e(Xe,wd),e(D,Ed),e(D,Je),e(Je,Xo),e(Xo,Ad),e(Je,kd),e(Je,Jo),e(Jo,xd),e(Je,Pd),e(D,jd),e(D,Ze),e(Ze,Zo),e(Zo,Dd),e(Ze,Td),e(Ze,en),e(en,zd),e(Ze,Sd),e(D,Id),e(D,et),e(et,tn),e(tn,Ld),e(et,Od),e(et,rn),e(rn,Nd),e(et,Cd),e(D,qd),e(D,tt),e(tt,an),e(an,Ud),e(tt,Vd),e(tt,on),e(on,Md),e(tt,Rd),e(D,Gd),e(D,rt),e(rt,nn),e(nn,Wd),e(rt,Hd),e(rt,sn),e(sn,Fd),e(rt,Yd),e(D,Bd),e(D,at),e(at,cn),e(cn,Kd),e(at,Qd),e(at,Ia),e(Ia,Xd),e(at,Jd),e(D,Zd),e(D,ot),e(ot,ln),e(ln,ep),e(ot,tp),e(ot,dn),e(dn,rp),e(ot,ap),e(D,op),e(D,nt),e(nt,pn),e(pn,np),e(nt,sp),e(nt,hn),e(hn,cp),e(nt,lp),e(m,ip),e(m,H),$(ur,H,null),e(H,dp),e(H,mn),e(mn,pp),e(H,hp),$(st,H,null),e(m,mp),e(m,ct),$(fr,ct,null),e(ct,up),e(ct,un),e(un,fp),e(m,gp),e(m,F),$(gr,F,null),e(F,_p),e(F,$e),e($e,vp),e($e,fn),e(fn,$p),e($e,bp),e($e,gn),e(gn,yp),e($e,wp),e(F,Ep),e(F,_r),e(_r,Ap),e(_r,_n),e(_n,kp),e(_r,xp),e(m,Pp),e(m,lt),$(vr,lt,null),e(lt,jp),e(lt,$r),e($r,Dp),e($r,vn),e(vn,Tp),e($r,zp),e(m,Sp),e(m,Y),$(br,Y,null),e(Y,Ip),e(Y,yr),e(yr,Lp),e(yr,$n),e($n,Op),e(yr,Np),e(Y,Cp),$(it,Y,null),e(m,qp),e(m,B),$(wr,B,null),e(B,Up),e(B,Er),e(Er,Vp),e(Er,bn),e(bn,Mp),e(Er,Rp),e(B,Gp),$(dt,B,null),e(m,Wp),e(m,pt),$(Ar,pt,null),e(pt,Hp),e(pt,yn),e(yn,Fp),e(m,Yp),e(m,ht),$(kr,ht,null),e(ht,Bp),e(ht,wn),e(wn,Kp),e(m,Qp),e(m,K),$(xr,K,null),e(K,Xp),e(K,Pr),e(Pr,Jp),e(Pr,En),e(En,Zp),e(Pr,eh),e(K,th),e(K,An),e(An,rh),e(m,ah),e(m,mt),$(jr,mt,null),e(mt,oh),e(mt,Dr),e(Dr,nh),e(Dr,kn),e(kn,sh),e(Dr,ch),e(m,lh),e(m,ut),$(Tr,ut,null),e(ut,ih),e(ut,zr),e(zr,dh),e(zr,La),e(La,ph),e(zr,hh),e(m,mh),e(m,ft),$(Sr,ft,null),e(ft,uh),e(ft,M),e(M,fh),e(M,xn),e(xn,gh),e(M,_h),e(M,Pn),e(Pn,vh),e(M,$h),e(M,jn),e(jn,bh),e(M,yh),e(m,wh),e(m,gt),$(Ir,gt,null),e(gt,Eh),e(gt,Lr),e(Lr,Ah),e(Lr,Dn),e(Dn,kh),e(Lr,xh),e(m,Ph),e(m,Q),$(Or,Q,null),e(Q,jh),e(Q,Tn),e(Tn,Dh),e(Q,Th),$(_t,Q,null),e(m,zh),e(m,X),$(Nr,X,null),e(X,Sh),e(X,zn),e(zn,Ih),e(X,Lh),e(X,Sn),e(Sn,Oh),e(m,Nh),e(m,vt),$(Cr,vt,null),e(vt,Ch),e(vt,be),e(be,qh),e(be,In),e(In,Uh),e(be,Vh),e(be,Ln),e(Ln,Mh),e(be,Rh),e(m,Gh),e(m,J),$(qr,J,null),e(J,Wh),e(J,On),e(On,Hh),e(J,Fh),e(J,Nn),e(Nn,Yh),e(m,Bh),e(m,q),$(Ur,q,null),e(q,Kh),e(q,Vr),e(Vr,Qh),e(Vr,Cn),e(Cn,Xh),e(Vr,Jh),e(q,Zh),e(q,Mr),e(Mr,em),e(Mr,qn),e(qn,tm),e(Mr,rm),e(q,am),$($t,q,null),e(m,om),e(m,bt),$(Rr,bt,null),e(bt,nm),e(bt,Un),e(Un,sm),e(m,cm),e(m,yt),$(Gr,yt,null),e(yt,lm),e(yt,Vn),e(Vn,im),e(m,dm),e(m,wt),$(Wr,wt,null),e(wt,pm),e(wt,Mn),e(Mn,hm),e(m,mm),e(m,Et),$(Hr,Et,null),e(Et,um),e(Et,Rn),e(Rn,fm),e(m,gm),e(m,At),$(Fr,At,null),e(At,_m),e(At,Gn),e(Gn,vm),e(m,$m),e(m,kt),$(Yr,kt,null),e(kt,bm),e(kt,Wn),e(Wn,ym),e(m,wm),e(m,Z),$(Br,Z,null),e(Z,Em),e(Z,Kr),e(Kr,Am),e(Kr,Hn),e(Hn,km),e(Kr,xm),e(Z,Pm),$(xt,Z,null),e(m,jm),e(m,Pt),$(Qr,Pt,null),e(Pt,Dm),e(Pt,Xr),e(Xr,Tm),e(Xr,Oa),e(Oa,zm),e(Xr,Sm),e(m,Im),e(m,jt),$(Jr,jt,null),e(jt,Lm),e(jt,Zr),e(Zr,Om),e(Zr,Na),e(Na,Nm),e(Zr,Cm),e(m,qm),e(m,Dt),$(ea,Dt,null),e(Dt,Um),e(Dt,ta),e(ta,Vm),e(ta,Ca),e(Ca,Mm),e(ta,Rm),e(m,Gm),e(m,Tt),$(ra,Tt,null),e(Tt,Wm),e(Tt,aa),e(aa,Hm),e(aa,qa),e(qa,Fm),e(aa,Ym),e(m,Bm),e(m,zt),$(oa,zt,null),e(zt,Km),e(zt,na),e(na,Qm),e(na,Fn),e(Fn,Xm),e(na,Jm),e(m,Zm),e(m,ee),$(sa,ee,null),e(ee,eu),e(ee,ye),e(ye,tu),e(ye,Yn),e(Yn,ru),e(ye,au),e(ye,Bn),e(Bn,ou),e(ye,nu),e(ee,su),e(ee,Kn),e(Kn,cu),e(m,lu),e(m,U),$(ca,U,null),e(U,iu),e(U,R),e(R,du),e(R,Qn),e(Qn,pu),e(R,hu),e(R,Xn),e(Xn,mu),e(R,uu),e(R,Jn),e(Jn,fu),e(R,gu),e(U,_u),e(U,Zn),e(Zn,vu),e(U,$u),$(St,U,null),e(m,bu),e(m,It),$(la,It,null),e(It,yu),e(It,ia),e(ia,wu),e(ia,es),e(es,Eu),e(ia,Au),e(m,ku),e(m,te),$(da,te,null),e(te,xu),e(te,ts),e(ts,Pu),e(te,ju),$(Lt,te,null),e(m,Du),e(m,Ot),$(pa,Ot,null),e(Ot,Tu),e(Ot,rs),e(rs,zu),e(m,Su),e(m,Nt),$(ha,Nt,null),e(Nt,Iu),e(Nt,we),e(we,Lu),e(we,as),e(as,Ou),e(we,Nu),e(we,Ua),e(Ua,Cu),e(we,qu),e(m,Uu),e(m,Ct),$(ma,Ct,null),e(Ct,Vu),e(Ct,os),e(os,Mu),ic=!0},p(t,[p]){const ua={};p&2&&(ua.$$scope={dirty:p,ctx:t}),xe.$set(ua);const ns={};p&2&&(ns.$$scope={dirty:p,ctx:t}),je.$set(ns);const ss={};p&2&&(ss.$$scope={dirty:p,ctx:t}),st.$set(ss);const cs={};p&2&&(cs.$$scope={dirty:p,ctx:t}),it.$set(cs);const fa={};p&2&&(fa.$$scope={dirty:p,ctx:t}),dt.$set(fa);const ls={};p&2&&(ls.$$scope={dirty:p,ctx:t}),_t.$set(ls);const ga={};p&2&&(ga.$$scope={dirty:p,ctx:t}),$t.$set(ga);const is={};p&2&&(is.$$scope={dirty:p,ctx:t}),xt.$set(is);const ds={};p&2&&(ds.$$scope={dirty:p,ctx:t}),St.$set(ds);const ps={};p&2&&(ps.$$scope={dirty:p,ctx:t}),Lt.$set(ps)},i(t){ic||(b(f.$$.fragment,t),b(Wt.$$.fragment,t),b(xe.$$.fragment,t),b(je.$$.fragment,t),b(Ft.$$.fragment,t),b(Yt.$$.fragment,t),b(Bt.$$.fragment,t),b(Kt.$$.fragment,t),b(Qt.$$.fragment,t),b(Xt.$$.fragment,t),b(Jt.$$.fragment,t),b(Zt.$$.fragment,t),b(er.$$.fragment,t),b(tr.$$.fragment,t),b(rr.$$.fragment,t),b(ar.$$.fragment,t),b(or.$$.fragment,t),b(nr.$$.fragment,t),b(sr.$$.fragment,t),b(cr.$$.fragment,t),b(lr.$$.fragment,t),b(ir.$$.fragment,t),b(dr.$$.fragment,t),b(pr.$$.fragment,t),b(hr.$$.fragment,t),b(mr.$$.fragment,t),b(ur.$$.fragment,t),b(st.$$.fragment,t),b(fr.$$.fragment,t),b(gr.$$.fragment,t),b(vr.$$.fragment,t),b(br.$$.fragment,t),b(it.$$.fragment,t),b(wr.$$.fragment,t),b(dt.$$.fragment,t),b(Ar.$$.fragment,t),b(kr.$$.fragment,t),b(xr.$$.fragment,t),b(jr.$$.fragment,t),b(Tr.$$.fragment,t),b(Sr.$$.fragment,t),b(Ir.$$.fragment,t),b(Or.$$.fragment,t),b(_t.$$.fragment,t),b(Nr.$$.fragment,t),b(Cr.$$.fragment,t),b(qr.$$.fragment,t),b(Ur.$$.fragment,t),b($t.$$.fragment,t),b(Rr.$$.fragment,t),b(Gr.$$.fragment,t),b(Wr.$$.fragment,t),b(Hr.$$.fragment,t),b(Fr.$$.fragment,t),b(Yr.$$.fragment,t),b(Br.$$.fragment,t),b(xt.$$.fragment,t),b(Qr.$$.fragment,t),b(Jr.$$.fragment,t),b(ea.$$.fragment,t),b(ra.$$.fragment,t),b(oa.$$.fragment,t),b(sa.$$.fragment,t),b(ca.$$.fragment,t),b(St.$$.fragment,t),b(la.$$.fragment,t),b(da.$$.fragment,t),b(Lt.$$.fragment,t),b(pa.$$.fragment,t),b(ha.$$.fragment,t),b(ma.$$.fragment,t),ic=!0)},o(t){y(f.$$.fragment,t),y(Wt.$$.fragment,t),y(xe.$$.fragment,t),y(je.$$.fragment,t),y(Ft.$$.fragment,t),y(Yt.$$.fragment,t),y(Bt.$$.fragment,t),y(Kt.$$.fragment,t),y(Qt.$$.fragment,t),y(Xt.$$.fragment,t),y(Jt.$$.fragment,t),y(Zt.$$.fragment,t),y(er.$$.fragment,t),y(tr.$$.fragment,t),y(rr.$$.fragment,t),y(ar.$$.fragment,t),y(or.$$.fragment,t),y(nr.$$.fragment,t),y(sr.$$.fragment,t),y(cr.$$.fragment,t),y(lr.$$.fragment,t),y(ir.$$.fragment,t),y(dr.$$.fragment,t),y(pr.$$.fragment,t),y(hr.$$.fragment,t),y(mr.$$.fragment,t),y(ur.$$.fragment,t),y(st.$$.fragment,t),y(fr.$$.fragment,t),y(gr.$$.fragment,t),y(vr.$$.fragment,t),y(br.$$.fragment,t),y(it.$$.fragment,t),y(wr.$$.fragment,t),y(dt.$$.fragment,t),y(Ar.$$.fragment,t),y(kr.$$.fragment,t),y(xr.$$.fragment,t),y(jr.$$.fragment,t),y(Tr.$$.fragment,t),y(Sr.$$.fragment,t),y(Ir.$$.fragment,t),y(Or.$$.fragment,t),y(_t.$$.fragment,t),y(Nr.$$.fragment,t),y(Cr.$$.fragment,t),y(qr.$$.fragment,t),y(Ur.$$.fragment,t),y($t.$$.fragment,t),y(Rr.$$.fragment,t),y(Gr.$$.fragment,t),y(Wr.$$.fragment,t),y(Hr.$$.fragment,t),y(Fr.$$.fragment,t),y(Yr.$$.fragment,t),y(Br.$$.fragment,t),y(xt.$$.fragment,t),y(Qr.$$.fragment,t),y(Jr.$$.fragment,t),y(ea.$$.fragment,t),y(ra.$$.fragment,t),y(oa.$$.fragment,t),y(sa.$$.fragment,t),y(ca.$$.fragment,t),y(St.$$.fragment,t),y(la.$$.fragment,t),y(da.$$.fragment,t),y(Lt.$$.fragment,t),y(pa.$$.fragment,t),y(ha.$$.fragment,t),y(ma.$$.fragment,t),ic=!1},d(t){r(h),t&&r(k),t&&r(A),w(f),t&&r(Ae),t&&r(C),t&&r(Gt),t&&r(oe),w(Wt),t&&r(As),t&&r($a),t&&r(ks),t&&r(G),t&&r(xs),w(xe,t),t&&r(Ps),t&&r(se),t&&r(js),w(je,t),t&&r(Ds),t&&r(De),t&&r(Ts),t&&r(ce),w(Ft),t&&r(zs),t&&r(le),w(Yt),t&&r(Ss),t&&r(ie),t&&r(Is),w(Bt,t),t&&r(Ls),t&&r(de),w(Kt),t&&r(Os),t&&r(pe),w(Qt),t&&r(Ns),t&&r(Le),t&&r(Cs),w(Xt,t),t&&r(qs),t&&r(Oe),t&&r(Us),w(Jt,t),t&&r(Vs),t&&r(he),w(Zt),t&&r(Ms),t&&r(Ce),t&&r(Rs),w(er,t),t&&r(Gs),t&&r(qe),t&&r(Ws),w(tr,t),t&&r(Hs),t&&r(me),w(rr),t&&r(Fs),t&&r(Pa),t&&r(Ys),w(ar,t),t&&r(Bs),w(or,t),t&&r(Ks),t&&r(ue),w(nr),t&&r(Qs),t&&r(Me),t&&r(Xs),t&&r(fe),w(sr),t&&r(Js),t&&r(Ge),t&&r(Zs),w(cr,t),t&&r(ec),t&&r(W),t&&r(tc),w(lr,t),t&&r(rc),t&&r(ge),w(ir),t&&r(ac),t&&r(L),t&&r(oc),t&&r(_e),w(dr),t&&r(nc),t&&r(Be),t&&r(sc),w(pr,t),t&&r(cc),t&&r(ve),w(hr),t&&r(lc),t&&r(m),w(mr),w(ur),w(st),w(fr),w(gr),w(vr),w(br),w(it),w(wr),w(dt),w(Ar),w(kr),w(xr),w(jr),w(Tr),w(Sr),w(Ir),w(Or),w(_t),w(Nr),w(Cr),w(qr),w(Ur),w($t),w(Rr),w(Gr),w(Wr),w(Hr),w(Fr),w(Yr),w(Br),w(xt),w(Qr),w(Jr),w(ea),w(ra),w(oa),w(sa),w(ca),w(St),w(la),w(da),w(Lt),w(pa),w(ha),w(ma)}}}const I_={local:"accelerator",sections:[{local:"quick-adaptation-of-your-code",title:"Quick adaptation of your code"},{local:"advanced-recommendations",sections:[{local:"printing",title:"Printing"},{local:"executing-processes",sections:[{local:"once-on-a-single-server",title:"Once on a single server"},{local:"only-ever-once-across-all-servers",title:"Only ever once across all servers"},{local:"on-specific-processes",title:"On specific processes"}],title:"Executing processes"},{local:"synchronicity-control",title:"Synchronicity control"},{local:"saving-and-loading",title:"Saving and loading"},{local:"operations",title:"Operations"},{local:"gradient-accumulation",title:"Gradient Accumulation"}],title:"Advanced recommendations"},{local:"accelerate.Accelerator",title:"Overall API documentation:"}],title:"Accelerator"};function L_(T){return y_(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class M_ extends __{constructor(h){super();v_(this,h,L_,S_,$_,{})}}export{M_ as default,I_ as metadata};
